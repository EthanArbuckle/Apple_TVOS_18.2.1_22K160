id sub_100004338()
{
  void *v0;
  objc_super v2;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RestoreInstallCreator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RestoreInstallCreator()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored21RestoreInstallCreator);
}

__n128 initializeBufferWithCopyOfBuffer for AppVersion(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AppVersion(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AppVersion(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0LL;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s(uint64_t a1)
{
}

void type metadata accessor for ASDSoftwareUpdateState(uint64_t a1)
{
}

void type metadata accessor for LoadSoftwareUpdatesReason(uint64_t a1)
{
}

void type metadata accessor for AMSBagKey(uint64_t a1)
{
}

void type metadata accessor for ASDInstallAttributionVersion(uint64_t a1)
{
}

uint64_t sub_100004444(uint64_t a1)
{
  uint64_t v2 = sub_100004DD4( &qword_100458350,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_10037238C);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100004484(uint64_t a1)
{
  uint64_t v2 = sub_100004DD4( &qword_100458350,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_10037238C);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000044C8(uint64_t a1)
{
  uint64_t v2 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100004508@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_100004510(uint64_t a1, uint64_t a2)
{
  return sub_100004E6C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100004528(uint64_t a1, id *a2)
{
  uint64_t v7 = 0LL;
  uint64_t v8 = 0LL;
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  uint64_t v5 = v8;
  if (v8)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    uint64_t result = swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_10000459C(uint64_t a1, id *a2)
{
  uint64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  char v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  uint64_t v5 = v9;
  if (v9)
  {
    NSString v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    NSString v6 = 0LL;
  }

  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100004618@<X0>(void *a1@<X8>)
{
  uint64_t v3 = v2;
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

id sub_100004658()
{
  return *v0;
}

uint64_t sub_100004660(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1003726E0, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_10000469C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1003726E0, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000046E4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1003726E0, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_10000473C(uint64_t a1)
{
  uint64_t v2 = sub_100004DD4( &qword_100458310,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_1003725F8);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_10000477C(uint64_t a1)
{
  uint64_t v2 = sub_100004DD4( &qword_100458310,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_1003725F8);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_1000047BC(uint64_t a1)
{
  uint64_t v2 = sub_100004DD4( &qword_100458348,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100372750);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

uint64_t sub_100004800()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(ASDErrorDomain);
}

uint64_t sub_100004810(uint64_t a1)
{
  uint64_t v2 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100004850(uint64_t a1)
{
  uint64_t v2 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100004890(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_1000048F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

uint64_t sub_10000494C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100004974(uint64_t a1)
{
  uint64_t v2 = sub_100004DD4( &qword_100458380,  (uint64_t (*)(uint64_t))type metadata accessor for AppInstallLogCode,  (uint64_t)&unk_100372488);
  uint64_t v3 = sub_100004DD4( &qword_100458388,  (uint64_t (*)(uint64_t))type metadata accessor for AppInstallLogCode,  (uint64_t)&unk_100372430);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000049F8()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(AMSErrorDomain);
}

uint64_t sub_100004A08(uint64_t a1)
{
  uint64_t v2 = sub_100004DD4( &qword_100458348,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100372750);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100004A48(uint64_t a1)
{
  uint64_t v2 = sub_100004DD4( &qword_100458348,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100372750);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100004A88(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100004DD4( &qword_100458348,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100372750);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100004AEC()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100004B20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004DD4( &qword_100458348,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100372750);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100004B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[9] = *v3;
  Hasher.init(_seed:)(v7);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

void *sub_100004BCC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100004BDC(void *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_100004BE8(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100004BFC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *a2;
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1003726E0, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100004C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100004CA0(uint64_t a1, uint64_t a2)
{
  return sub_100004E6C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100004CB4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 8);
  NSString v4 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100004CF8(uint64_t a1)
{
  uint64_t v2 = sub_100004DD4( &qword_100458210,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_1003720BC);
  uint64_t v3 = sub_100004DD4( &qword_100458218,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_10037205C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100004D7C()
{
  return sub_100004DD4( &qword_1004581F8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_100372020);
}

uint64_t sub_100004DA8()
{
  return sub_100004DD4( &qword_100458200,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_100371FF4);
}

uint64_t sub_100004DD4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = a2(255LL);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_100004E14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004DD4( &qword_100458348,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100372750);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

uint64_t sub_100004E6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  uint64_t v7 = v6;
  uint64_t v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100004EA8(uint64_t a1)
{
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  uint64_t v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100004EE8()
{
  uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  uint64_t v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  Swift::Int v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_100004F58(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    char v10 = 1;
    uint64_t v9 = v5;
  }

  else
  {
    uint64_t v9 = v7;
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100004FE0()
{
  return sub_100004DD4( &qword_100458208,  (uint64_t (*)(uint64_t))type metadata accessor for AMSBagKey,  (uint64_t)&unk_100372090);
}

void sub_10000500C(void *a1, void *a2)
{
  uint64_t v78 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void **)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v6 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = sub_1001E4DF4(a1);
  id v77 = (id)objc_opt_self(&OBJC_CLASS___AMSDevice);
  unsigned int v8 = [v77 deviceIsAppleTV];
  uint64_t v9 = &off_1003EAF48;
  if (v8) {
    uint64_t v9 = &off_1003EAF60;
  }
  char v10 = *v9;
  id v81 = 0LL;
  v11 = v10;
  id v12 = [a1 placeholderPromiseWithError:&v81];
  id v13 = v81;
  if (!v12)
  {
    v38 = v7;
    id v39 = v81;
    uint64_t v40 = _convertNSErrorToError(_:)(v13);

    swift_willThrow();
    v41 = (void *)_convertErrorToNSError(_:)(v40);
    id v42 = (id)IXCreateUserPresentableError(1LL, 0LL, v41);

    if (!v42)
    {
      type metadata accessor for ASDError(0LL);
      uint64_t v44 = v43;
      uint64_t v80 = 822LL;
      unint64_t v45 = sub_10006D16C((uint64_t)&_swiftEmptyArrayStorage);
      uint64_t v46 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
      _BridgedStoredNSError.init(_:userInfo:)(&v81, &v80, v45, v44, v46);
    }

    swift_willThrow();

    goto LABEL_16;
  }

  v14 = v12;
  id v79 = v7;
  id v81 = 0LL;
  id v15 = v13;
  id v16 = [v14 metadataWithError:&v81];
  id v17 = v81;
  if (!v16)
  {
    id v47 = v81;
    uint64_t v40 = _convertNSErrorToError(_:)(v17);

    swift_willThrow();
    v48 = (void *)_convertErrorToNSError(_:)(v40);
    id v49 = (id)IXCreateUserPresentableError(8LL, 0LL, v48);

    if (!v49)
    {
      type metadata accessor for ASDError(0LL);
      uint64_t v51 = v50;
      uint64_t v80 = 825LL;
      unint64_t v52 = sub_10006D16C((uint64_t)&_swiftEmptyArrayStorage);
      uint64_t v53 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
      _BridgedStoredNSError.init(_:userInfo:)(&v81, &v80, v52, v51, v53);
    }

    swift_willThrow();

LABEL_16:
    swift_errorRelease(v40);
    return;
  }

  id v18 = v16;
  id v19 = v17;
  id v76 = v18;
  id v20 = [v18 itemID];
  if (!v20) {
    goto LABEL_7;
  }
  sub_1000056A8();
  v21.super.super.Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
  v75 = v11;
  Class isa = v21.super.super.isa;
  id v23 = v20;
  id v74 = v20;
  v24 = a1;
  v25 = a2;
  v26 = v6;
  v27 = v4;
  v28 = v14;
  id v29 = v23;
  char v30 = static NSObject.== infix(_:_:)();

  id v73 = v29;
  v14 = v28;
  v31 = v27;
  v32 = v26;
  id v20 = v74;

  v11 = v75;
  if ((v30 & 1) == 0)
  {
    id v74 = v31;
    id v54 = v76;
    id v55 = [v76 softwareVersionBundleID];
    if (!v55)
    {
      id v56 = [v24 identity];
      id v55 = [v56 bundleID];
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(v55);
    uint64_t v58 = v57;

    NSString v59 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v58);
    [v54 setSoftwareVersionBundleID:v59];

    id v60 = sub_1002D7400(objc_allocWithZone((Class)&OBJC_CLASS___RestoreAppInstall), v54, v25);
    if (v60)
    {
      unsigned __int8 v61 = [v77 deviceIsAppleTV];
      v62 = v74;
      if ((v61 & 1) != 0)
      {
        static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
        uint64_t v64 = v63;
        NSString v65 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v64);
        [v60 setValue:v65 forProperty:@"log_code"];
      }

      id v66 = [v24 uniqueIdentifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class v67 = UUID._bridgeToObjectiveC()().super.isa;
      v68 = (void (*)(char *, uint64_t))v62[1];
      uint64_t v69 = v78;
      v68(v32, v78);
      [v60 setValue:v67 forProperty:@"external_id"];

      id v70 = [v24 uniqueIdentifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      Class v71 = UUID._bridgeToObjectiveC()().super.isa;
      v68(v32, v69);
      v72 = @"coordinator_id";
      [v60 setValue:v71 forProperty:v72];
    }

    else
    {

      __break(1u);
    }
  }

  else
  {
LABEL_7:
    id v33 = v76;

    if (!(id)IXCreateUserPresentableError(8LL, 0LL, 0LL))
    {
      type metadata accessor for ASDError(0LL);
      uint64_t v35 = v34;
      uint64_t v80 = 825LL;
      unint64_t v36 = sub_10006D16C((uint64_t)&_swiftEmptyArrayStorage);
      uint64_t v37 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
      _BridgedStoredNSError.init(_:userInfo:)(&v81, &v80, v36, v35, v37);
    }

    swift_willThrow();
  }
}

void type metadata accessor for ASDError(uint64_t a1)
{
}

unint64_t sub_1000056A8()
{
  unint64_t result = qword_100458228;
  if (!qword_100458228)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100458228);
  }

  return result;
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for Code(uint64_t a1)
{
}

void type metadata accessor for AMSError(uint64_t a1)
{
}

void type metadata accessor for AppInstallLogCode(uint64_t a1)
{
}

void type metadata accessor for AMSAccountCachedServerDataIntKey(uint64_t a1)
{
}

uint64_t sub_10000575C()
{
  return sub_100004DD4( &qword_1004582C8,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003722A4);
}

uint64_t sub_100005788()
{
  return sub_100004DD4( &qword_1004582D0,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003722D0);
}

uint64_t sub_1000057B4()
{
  return sub_100004DD4( &qword_1004582D8,  (uint64_t (*)(uint64_t))type metadata accessor for AppInstallLogCode,  (uint64_t)&unk_1003723F8);
}

uint64_t sub_1000057E0()
{
  return sub_100004DD4( &qword_1004582E0,  (uint64_t (*)(uint64_t))type metadata accessor for AppInstallLogCode,  (uint64_t)&unk_1003723D0);
}

uint64_t sub_10000580C()
{
  return sub_100004DD4( &qword_1004582E8,  (uint64_t (*)(uint64_t))type metadata accessor for AppInstallLogCode,  (uint64_t)&unk_100372460);
}

uint64_t sub_100005838()
{
  return sub_100004DD4( &qword_1004582F0,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100372510);
}

uint64_t sub_100005864()
{
  return sub_100004DD4( &qword_1004582F8,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_10037253C);
}

uint64_t sub_100005890()
{
  return sub_100004DD4( &qword_100458300,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10037270C);
}

uint64_t sub_1000058BC()
{
  return sub_100004DD4( &qword_100458308,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1003726B4);
}

uint64_t sub_1000058E8()
{
  return sub_100004DD4( &qword_100458310,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_1003725F8);
}

uint64_t sub_100005914()
{
  return sub_100004DD4( &qword_100458318,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_1003725C4);
}

uint64_t sub_100005940()
{
  return sub_100004DD4( (unint64_t *)&unk_100458320,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100372580);
}

uint64_t sub_10000596C()
{
  return sub_100004DD4( &qword_100459B70,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1003727BC);
}

uint64_t sub_100005998()
{
  return sub_100004DD4( &qword_100458330,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_100372668);
}

unint64_t sub_1000059C8()
{
  unint64_t result = qword_100458338;
  if (!qword_100458338)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100458338);
  }

  return result;
}

uint64_t sub_100005A0C()
{
  return sub_100004DD4( &qword_100458340,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_10037263C);
}

uint64_t sub_100005A38()
{
  return sub_100004DD4( &qword_100458348,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100372750);
}

uint64_t sub_100005A64()
{
  return sub_100004DD4( &qword_100458350,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_10037238C);
}

uint64_t sub_100005A90()
{
  return sub_100004DD4( &qword_100458358,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_100372358);
}

uint64_t sub_100005ABC()
{
  return sub_100004DD4( &qword_100458360,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_100372314);
}

uint64_t sub_100005AE8()
{
  return sub_100004DD4(&qword_100458368, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1003728A0);
}

void _s3__C4CodeOMa_0(uint64_t a1)
{
}

void sub_100005B28(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata(0LL, a3);
    if (!v5) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }

uint64_t sub_100005B6C()
{
  return sub_100004DD4(&qword_100458370, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_100372864);
}

uint64_t sub_100005B98()
{
  return sub_100004DD4(&qword_100458378, (uint64_t (*)(uint64_t))_s3__C4CodeOMa_0, (uint64_t)&unk_1003728DC);
}

uint64_t sub_100005BC4()
{
  return sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
}

id sub_100005C0C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for FairPlayService()) init];
  qword_100462880 = (uint64_t)result;
  return result;
}

uint64_t sub_100005CA0(uint64_t a1)
{
  unint64_t v2 = sub_1000081C8();
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005CC8(uint64_t a1)
{
  unint64_t v2 = sub_1000081C8();
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005CF8()
{
  if (v0[24]) {
    return 0LL;
  }
  else {
    return *(int *)v0;
  }
}

unint64_t sub_100005D10()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  int v4 = *(unsigned __int8 *)(v0 + 24);
  uint64_t v5 = v2;
  uint64_t v6 = v3;
  if (*(_BYTE *)(v0 + 24))
  {
    uint64_t v5 = *(void *)v0;
    uint64_t v6 = *(void *)(v0 + 8);
    if (v4 != 1) {
      return sub_10001DA2C((uint64_t)&_swiftEmptyArrayStorage);
    }
  }

  uint64_t v7 = sub_1000079A0((uint64_t *)&unk_100458520);
  uint64_t inited = swift_initStackObject(v7, &v11);
  *(_OWORD *)(inited + 16) = xmmword_100372930;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedFailureErrorKey);
  *(void *)(inited + 40) = v9;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v6;
  sub_100007F70(v1, v2, v3, v4);
  return sub_10001DA2C(inited);
}

uint64_t sub_100005DF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (void (**)(uint64_t))((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = 0LL;
  unsigned int v35 = 0;
  sub_10011BEC0(a1, a2, 1LL, 5LL, (uint64_t)&v36, (uint64_t)&v35);
  if (v10)
  {
    uint64_t v11 = v10;
    unint64_t v12 = sub_100007B58();
    swift_allocError(&type metadata for FairPlayService.Error, v12, 0LL, 0LL);
    char v14 = 0;
    *(void *)uint64_t v13 = v11;
    unint64_t v15 = 0xD000000000000021LL;
    unint64_t v16 = 0x8000000100342400LL;
LABEL_3:
    *(void *)(v13 + 8) = v15;
    *(void *)(v13 + 16) = v16;
    *(_BYTE *)(v13 + 24) = v14;
    return swift_willThrow();
  }

  uint64_t v18 = v36;
  if (!v36)
  {
    unint64_t v30 = sub_100007B58();
    swift_allocError(&type metadata for FairPlayService.Error, v30, 0LL, 0LL);
    unint64_t v16 = 0LL;
    *(void *)uint64_t v13 = 0xD000000000000012LL;
    unint64_t v15 = 0x8000000100342430LL;
    char v14 = 1;
    goto LABEL_3;
  }

  uint64_t v19 = v35;
  *uint64_t v9 = sub_100006068;
  v9[1] = 0LL;
  uint64_t v20 = (*(uint64_t (**)(void (**)(uint64_t), void, uint64_t))(v7 + 104))( v9,  enum case for Data.Deallocator.custom(_:),  v6);
  uint64_t v21 = Data.Deallocator._deallocator.getter(v20);
  uint64_t v23 = v22;
  if ((_DWORD)v19)
  {
    uint64_t v24 = v21;
    uint64_t v25 = type metadata accessor for __DataStorage(0LL);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    swift_retain(v23);
    uint64_t v26 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v18, v19, 0LL, v24, v23, 0LL);
    uint64_t v27 = sub_100007D8C(v26, v19);
    unint64_t v29 = v28;
    swift_release(v23);
  }

  else
  {
    v31 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter(v21);
    uint64_t v33 = v32;
    v31(v18, 0LL);
    swift_release(v33);
    swift_release(v23);
    uint64_t v27 = 0LL;
    unint64_t v29 = 0xC000000000000000LL;
  }

  uint64_t result = (*(uint64_t (**)(void (**)(uint64_t), uint64_t))(v7 + 8))(v9, v6);
  *a3 = v27;
  a3[1] = v29;
  return result;
}

uint64_t sub_100006198(uint64_t a1, const void *a2, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = swift_getObjectType(a3, a2);
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  return swift_task_switch(sub_1000061F4, 0LL, 0LL);
}

uint64_t sub_1000061F4()
{
  uint64_t v1 = *(void **)(v0 + 24);
  sub_100007334( (uint64_t)v1,  *(void *)(v0 + 16),  *(void *)(v0 + 32),  (void (*)(void, uint64_t, uint64_t))sub_100005DF8);

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100007B14(v5, v6);
  uint64_t v3 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, Class, void))v3)[2](v3, isa, 0LL);

  _Block_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000062C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Data.Deallocator(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v36 = 0LL;
  unsigned int v35 = 0;
  sub_10011189C(a1, a2, 313LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, (uint64_t)&v36, (uint64_t)&v35);
  if (v10)
  {
    uint64_t v11 = v10;
    unint64_t v12 = sub_100007B58();
    swift_allocError(&type metadata for FairPlayService.Error, v12, 0LL, 0LL);
    char v14 = 0;
    *(void *)uint64_t v13 = v11;
    unint64_t v15 = 0xD000000000000027LL;
    unint64_t v16 = 0x80000001003423B0LL;
LABEL_3:
    *(void *)(v13 + 8) = v15;
    *(void *)(v13 + 16) = v16;
    *(_BYTE *)(v13 + 24) = v14;
    return swift_willThrow();
  }

  uint64_t v18 = v36;
  if (!v36)
  {
    unint64_t v30 = sub_100007B58();
    swift_allocError(&type metadata for FairPlayService.Error, v30, 0LL, 0LL);
    unint64_t v16 = 0LL;
    *(void *)uint64_t v13 = 0xD000000000000018LL;
    unint64_t v15 = 0x80000001003423E0LL;
    char v14 = 1;
    goto LABEL_3;
  }

  uint64_t v19 = v35;
  *uint64_t v9 = sub_10000820C;
  v9[1] = 0LL;
  uint64_t v20 = (*(uint64_t (**)(void *, void, uint64_t))(v7 + 104))( v9,  enum case for Data.Deallocator.custom(_:),  v6);
  uint64_t v21 = Data.Deallocator._deallocator.getter(v20);
  uint64_t v23 = v22;
  if ((_DWORD)v19)
  {
    uint64_t v24 = v21;
    uint64_t v25 = type metadata accessor for __DataStorage(0LL);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    swift_retain(v23);
    uint64_t v26 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v18, v19, 0LL, v24, v23, 0LL);
    uint64_t v27 = sub_100007D8C(v26, v19);
    unint64_t v29 = v28;
    swift_release(v23);
  }

  else
  {
    v31 = (void (*)(uint64_t, void))Data.Deallocator._deallocator.getter(v21);
    uint64_t v33 = v32;
    v31(v18, 0LL);
    swift_release(v33);
    swift_release(v23);
    uint64_t v27 = 0LL;
    unint64_t v29 = 0xC000000000000000LL;
  }

  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v7 + 8))(v9, v6);
  *a3 = v27;
  a3[1] = v29;
  return result;
}

uint64_t sub_10000667C(uint64_t a1, const void *a2, void *a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = swift_getObjectType(a3, a2);
  v3[5] = _Block_copy(a2);
  id v6 = a3;
  return swift_task_switch(sub_1000066D8, 0LL, 0LL);
}

uint64_t sub_1000066D8()
{
  uint64_t v1 = *(void **)(v0 + 24);
  sub_100007334( (uint64_t)v1,  *(void *)(v0 + 16),  *(void *)(v0 + 32),  (void (*)(void, uint64_t, uint64_t))sub_1000062C0);

  Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_100007B14(v5, v6);
  uint64_t v3 = *(void (***)(void, void, void))(v0 + 40);
  ((void (**)(void, Class, void))v3)[2](v3, isa, 0LL);

  _Block_release(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000067A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

void sub_1000067FC()
{
  if (v0)
  {
    uint64_t v1 = v0;
    unint64_t v2 = sub_100007B58();
    ((void (*)(ValueMetadata *, unint64_t, void, void))swift_allocError)( &type metadata for FairPlayService.Error,  v2,  0LL,  0LL);
    *(void *)uint64_t v3 = v1;
    *(void *)(v3 + 8) = 0xD000000000000017LL;
    *(void *)(v3 + 16) = 0x8000000100342390LL;
    *(_BYTE *)(v3 + 24) = 0;
    swift_willThrow();
  }

uint64_t sub_100006C18(void *a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;

  v3[4] = v8;
  v3[5] = v10;
  return swift_task_switch(sub_100006C90, 0LL, 0LL);
}

uint64_t sub_100006C90()
{
  uint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 16);
  sub_100007AD0(v1, v2);
  sub_10000761C((uint64_t)v3, v1, v2, (void (*)(void, uint64_t, unint64_t))sub_1000067A4);

  sub_100007B14(v1, v2);
  (*(void (**)(void, void))(*(void *)(v0 + 24) + 16LL))(*(void *)(v0 + 24), 0LL);
  _Block_release(*(const void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100006D54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }

void sub_100006DAC()
{
  if (v0)
  {
    uint64_t v1 = v0;
    unint64_t v2 = sub_100007B58();
    ((void (*)(ValueMetadata *, unint64_t, void, void))swift_allocError)( &type metadata for FairPlayService.Error,  v2,  0LL,  0LL);
    *(void *)uint64_t v3 = v1;
    *(void *)(v3 + 8) = 0xD000000000000024LL;
    *(void *)(v3 + 16) = 0x8000000100342360LL;
    *(_BYTE *)(v3 + 24) = 0;
    swift_willThrow();
  }

uint64_t sub_1000071F8(void *a1, void *aBlock, void *a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  id v6 = a1;
  id v7 = a3;
  uint64_t v8 = static Data._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v10 = v9;

  v3[4] = v8;
  v3[5] = v10;
  return swift_task_switch(sub_100007270, 0LL, 0LL);
}

uint64_t sub_100007270()
{
  uint64_t v1 = *(void *)(v0 + 32);
  unint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = *(void **)(v0 + 16);
  sub_100007AD0(v1, v2);
  sub_10000761C((uint64_t)v3, v1, v2, (void (*)(void, uint64_t, unint64_t))sub_100006D54);

  sub_100007B14(v1, v2);
  (*(void (**)(void, void))(*(void *)(v0 + 24) + 16LL))(*(void *)(v0 + 24), 0LL);
  _Block_release(*(const void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_100007334(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, uint64_t, uint64_t))
{
  id v7 = (id)MobileGestalt_get_current_device();
  if (!v7) {
LABEL_15:
  }
    __break(1u);
  uint64_t v8 = v7;
  id v9 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

  if (!v9)
  {
    unint64_t v20 = sub_100007B58();
    swift_allocError(&type metadata for FairPlayService.Error, v20, 0LL, 0LL);
    *(void *)(v21 + 8) = 0LL;
    *(void *)(v21 + 16) = 0LL;
    *(void *)uint64_t v21 = 0LL;
    *(_BYTE *)(v21 + 24) = 2;
    return (void *)swift_willThrow();
  }

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  uint64_t v13 = String.utf8CString.getter(v10, v12);
  swift_bridgeObjectRelease(v12);
  unint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    __break(1u);
    goto LABEL_14;
  }

  if (v14 > (unint64_t)&_mh_execute_header)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  sub_10014E024(v13 + 32, (v14 - 1), (uint64_t)v35);
  if (v15)
  {
    uint64_t v16 = v15;
    unint64_t v17 = sub_100007B58();
    swift_allocError(&type metadata for FairPlayService.Error, v17, 0LL, 0LL);
    *(void *)uint64_t v18 = v16;
    *(void *)(v18 + 8) = 0xD000000000000018LL;
    *(void *)(v18 + 16) = 0x8000000100342300LL;
    *(_BYTE *)(v18 + 24) = 0;
    swift_willThrow();
    return (void *)swift_release(v13);
  }

  swift_release(v13);
  uint64_t v33 = 0LL;
  unint64_t v34 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  uint64_t result = (void *)CPSharedResourcesDirectory();
  if (result)
  {
    id v22 = result;
    id v32 = v22;
    type metadata accessor for CFString(0LL);
    _print_unlocked<A, B>(_:_:)( &v32,  &v33,  v23,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);

    v24._object = (void *)0x8000000100342320LL;
    v24._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v24);
    uint64_t v25 = v33;
    unint64_t v26 = v34;
    LODWORD(v33) = 0;
    uint64_t v27 = String.utf8CString.getter(v25, v34);
    swift_bridgeObjectRelease(v26);
    unsigned int v28 = sub_100180658(0LL, (uint64_t)v35, v27 + 32, (uint64_t)&v33);
    swift_release(v27);
    if (v28)
    {
      unint64_t v29 = sub_100007B58();
      swift_allocError(&type metadata for FairPlayService.Error, v29, 0LL, 0LL);
      *(void *)uint64_t v30 = v28;
      *(void *)(v30 + 8) = 0xD00000000000001CLL;
      *(void *)(v30 + 16) = 0x8000000100342340LL;
      *(_BYTE *)(v30 + 24) = 0;
      return (void *)swift_willThrow();
    }

    int v31 = v33;
    a4(v33, a2, a3);
    return (void *)sub_10017F988(v31);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void *sub_10000761C( uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(void, uint64_t, unint64_t))
{
  id v7 = (id)MobileGestalt_get_current_device();
  if (!v7) {
LABEL_16:
  }
    __break(1u);
  uint64_t v8 = v7;
  id v9 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

  if (!v9)
  {
    unint64_t v19 = sub_100007B58();
    swift_allocError(&type metadata for FairPlayService.Error, v19, 0LL, 0LL);
    *(void *)(v20 + 8) = 0LL;
    *(void *)(v20 + 16) = 0LL;
    *(void *)uint64_t v20 = 0LL;
    *(_BYTE *)(v20 + 24) = 2;
LABEL_11:
    swift_willThrow();
    return (void *)sub_100007B14(a2, a3);
  }

  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v12 = v11;

  uint64_t v13 = String.utf8CString.getter(v10, v12);
  swift_bridgeObjectRelease(v12);
  unint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    __break(1u);
    goto LABEL_15;
  }

  if (v14 > (unint64_t)&_mh_execute_header)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }

  sub_10014E024(v13 + 32, (v14 - 1), (uint64_t)v35);
  if (v15)
  {
    uint64_t v16 = v15;
    unint64_t v17 = sub_100007B58();
    swift_allocError(&type metadata for FairPlayService.Error, v17, 0LL, 0LL);
    *(void *)uint64_t v18 = v16;
    *(void *)(v18 + 8) = 0xD000000000000018LL;
    *(void *)(v18 + 16) = 0x8000000100342300LL;
    *(_BYTE *)(v18 + 24) = 0;
    swift_willThrow();
    swift_release(v13);
    return (void *)sub_100007B14(a2, a3);
  }

  swift_release(v13);
  uint64_t v33 = 0LL;
  unint64_t v34 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  uint64_t result = (void *)CPSharedResourcesDirectory();
  if (result)
  {
    id v22 = result;
    id v32 = v22;
    type metadata accessor for CFString(0LL);
    _print_unlocked<A, B>(_:_:)( &v32,  &v33,  v23,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);

    v24._object = (void *)0x8000000100342320LL;
    v24._countAndFlagsBits = 0xD00000000000001CLL;
    String.append(_:)(v24);
    uint64_t v25 = v33;
    unint64_t v26 = v34;
    LODWORD(v33) = 0;
    uint64_t v27 = String.utf8CString.getter(v25, v34);
    swift_bridgeObjectRelease(v26);
    unsigned int v28 = sub_100180658(0LL, (uint64_t)v35, v27 + 32, (uint64_t)&v33);
    swift_release(v27);
    if (!v28)
    {
      int v31 = v33;
      a4(v33, a2, a3);
      sub_10017F988(v31);
      return (void *)sub_100007B14(a2, a3);
    }

    unint64_t v29 = sub_100007B58();
    swift_allocError(&type metadata for FairPlayService.Error, v29, 0LL, 0LL);
    *(void *)uint64_t v30 = v28;
    *(void *)(v30 + 8) = 0xD00000000000001CLL;
    *(void *)(v30 + 16) = 0x8000000100342340LL;
    *(_BYTE *)(v30 + 24) = 0;
    goto LABEL_11;
  }

  __break(1u);
  return result;
}

id sub_10000794C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for FairPlayService();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for FairPlayService()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored15FairPlayService);
}

uint64_t sub_1000079A0(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0LL, 0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_1000079E4()
{
  objc_super v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  int v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_100458494);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_100458490 + dword_100458490))(v2, v3, v4);
}

uint64_t sub_100007A54()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  int v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10045A58C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10045A588 + dword_10045A588))(v2, v3, v4);
}

uint64_t sub_100007AD0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_retain)();
  }

  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100007B14(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    ((void (*)(void))swift_release)();
  }

  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

unint64_t sub_100007B58()
{
  unint64_t result = qword_1004584B0;
  if (!qword_1004584B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100372998, &type metadata for FairPlayService.Error);
    atomic_store(result, (unint64_t *)&qword_1004584B0);
  }

  return result;
}

uint64_t sub_100007BA0()
{
  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100007BD4()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  int v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1004584BC);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100007C40;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_1004584B8 + dword_1004584B8))(v2, v3, v4);
}

uint64_t sub_100007C40()
{
  uint64_t v4 = *v0;
  uint64_t v1 = *(void *)(v4 + 16);
  uint64_t v2 = *v0;
  uint64_t v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100007C90(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  id v6 = (int *)v1[4];
  id v7 = (void *)swift_task_alloc(dword_10045A594);
  *(void *)(v2 + 16) = v7;
  *id v7 = v2;
  v7[1] = sub_100008210;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10045A590 + dword_10045A590))( a1,  v4,  v5,  v6);
}

uint64_t sub_100007D18()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1004584DC);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(uint64_t, const void *, void *))((char *)&dword_1004584D8 + dword_1004584D8))( v2,  v3,  v4);
}

uint64_t sub_100007D8C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = result;
  if (!a2)
  {
    swift_release(result);
    return 0LL;
  }

  if (a2 > 14)
  {
    uint64_t v10 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t v4 = swift_allocObject(v10, 32LL, 7LL);
    *(void *)(v4 + 16) = 0LL;
    *(void *)(v4 + 24) = a2;
    return v4;
  }

  if (a2 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = (_BYTE *)__DataStorage._bytes.getter();
    if (!v5)
    {
LABEL_10:
      uint64_t v6 = __DataStorage._length.getter();
      if (v6 >= a2) {
        uint64_t v7 = a2;
      }
      else {
        uint64_t v7 = v6;
      }
      uint64_t v8 = &v5[v7];
      if (v5) {
        id v9 = v8;
      }
      else {
        id v9 = 0LL;
      }
      uint64_t v4 = sub_100018908(v5, v9);
      swift_release(v2);
      return v4;
    }

    unint64_t result = __DataStorage._offset.getter();
    if (!__OFSUB__(0LL, result))
    {
      v5 -= result;
      goto LABEL_10;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100007E74()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100007EA0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (const void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1004584FC);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(uint64_t, const void *, void *))((char *)&dword_1004584F8 + dword_1004584F8))( v2,  v3,  v4);
}

uint64_t sub_100007F14()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t initializeBufferWithCopyOfBuffer for FairPlayService.Error(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_100007F70(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    if (a4 != 1) {
      return result;
    }
    a3 = a2;
  }

  return swift_bridgeObjectRetain(a3);
}

uint64_t destroy for FairPlayService.Error(uint64_t a1)
{
  return sub_100007FA4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_100007FA4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    if (a4 != 1) {
      return result;
    }
    a3 = a2;
  }

  return swift_bridgeObjectRelease(a3);
}

uint64_t initializeWithCopy for FairPlayService.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_100007F70(*(void *)a2, v4, v5, v6);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for FairPlayService.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  char v6 = *(_BYTE *)(a2 + 24);
  sub_100007F70(*(void *)a2, v4, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  char v10 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v6;
  sub_100007FA4(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for FairPlayService.Error(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FairPlayService.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(_BYTE *)(a2 + 24);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  char v8 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = v4;
  sub_100007FA4(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FairPlayService.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FairPlayService.Error( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10000817C(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_100008198(uint64_t result, unsigned int a2)
{
  uint64_t v2 = a2 - 2;
  if (a2 >= 2)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    LOBYTE(a2) = 2;
    *(void *)__n128 result = v2;
  }

  *(_BYTE *)(result + 24) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FairPlayService.Error()
{
  return &type metadata for FairPlayService.Error;
}

unint64_t sub_1000081C8()
{
  unint64_t result = qword_100458518;
  if (!qword_100458518)
  {
    unint64_t result = swift_getWitnessTable(&unk_100372958, &type metadata for FairPlayService.Error);
    atomic_store(result, (unint64_t *)&qword_100458518);
  }

  return result;
}

int64_t sub_100008214@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v132 = a2;
  uint64_t v133 = a3;
  uint64_t v120 = a4;
  uint64_t v107 = type metadata accessor for Logger(0LL);
  uint64_t v106 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  v117 = (char *)&v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Calendar.SearchDirection(0LL);
  uint64_t v128 = *(void *)(v8 - 8);
  uint64_t v129 = v8;
  __chkstk_darwin(v8);
  v127 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v126 = type metadata accessor for Calendar.RepeatedTimePolicy(0LL);
  uint64_t v10 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v12 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Calendar.MatchingPolicy(0LL);
  uint64_t v135 = *(void *)(v13 - 8);
  uint64_t v14 = v13;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_1000079A0((uint64_t *)&unk_100459410);
  __chkstk_darwin(v17);
  v124 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = type metadata accessor for Date(0LL);
  uint64_t v131 = *(void *)(v125 - 8);
  uint64_t v19 = __chkstk_darwin(v125);
  v108 = (char *)&v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  v115 = (char *)&v105 - v22;
  __chkstk_darwin(v21);
  v116 = (char *)&v105 - v23;
  uint64_t v24 = sub_1000079A0(&qword_100458560);
  __chkstk_darwin(v24);
  unint64_t v26 = (char *)&v105 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_1000079A0(&qword_100458568);
  __chkstk_darwin(v27);
  unint64_t v29 = (char *)&v105 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for DateComponents(0LL);
  uint64_t v121 = *(void *)(v30 - 8);
  uint64_t v122 = v30;
  uint64_t v31 = __chkstk_darwin(v30);
  v113 = (char *)&v105 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  unint64_t v34 = (char *)&v105 - v33;
  uint64_t v35 = type metadata accessor for Calendar(0LL);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = __chkstk_darwin(v35);
  v134 = (char *)&v105 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Calendar.current.getter(v37);
  uint64_t v119 = v36;
  id v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56);
  uint64_t v123 = v35;
  v111 = v39;
  v39(v29, 1LL, 1LL, v35);
  uint64_t v40 = type metadata accessor for TimeZone(0LL);
  v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL);
  uint64_t v110 = v40;
  v109 = v41;
  ((void (*)(char *, uint64_t, uint64_t))v41)(v26, 1LL, 1LL);
  unint64_t v42 = sub_100009A28(0x3CuLL);
  uint64_t v130 = a1;
  uint64_t v43 = v34;
  v112 = v29;
  v114 = v26;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v29,  v26,  0LL,  1LL,  0LL,  1LL,  0LL,  1LL,  0LL,  1,  a1,  0,  v132,  0,  v42,  0,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  uint64_t v44 = v16;
  uint64_t v45 = v14;
  (*(void (**)(char *, void, uint64_t))(v135 + 104))( v16,  enum case for Calendar.MatchingPolicy.nextTime(_:),  v14);
  uint64_t v137 = 0LL;
  swift_stdlib_random(&v137, 8LL);
  uint64_t v46 = v10;
  id v47 = *(void (**)(char *, void, uint64_t))(v10 + 104);
  if ((v137 & 0x20000) != 0) {
    v48 = (unsigned int *)&enum case for Calendar.RepeatedTimePolicy.last(_:);
  }
  else {
    v48 = (unsigned int *)&enum case for Calendar.RepeatedTimePolicy.first(_:);
  }
  uint64_t v49 = v126;
  v47(v12, *v48, v126);
  uint64_t v50 = v127;
  uint64_t v51 = v128;
  uint64_t v52 = v129;
  (*(void (**)(char *, void, uint64_t))(v128 + 104))( v127,  enum case for Calendar.SearchDirection.forward(_:),  v129);
  uint64_t v53 = (uint64_t)v124;
  v118 = v43;
  id v54 = v43;
  id v55 = v44;
  id v56 = v44;
  uint64_t v57 = v50;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v133, v54, v55, v12, v50);
  uint64_t v58 = v131;
  (*(void (**)(char *, uint64_t))(v51 + 8))(v57, v52);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v49);
  uint64_t v59 = v125;
  (*(void (**)(char *, uint64_t))(v135 + 8))(v56, v45);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v53, 1LL, v59) == 1)
  {
    uint64_t v60 = v130;
    uint64_t v61 = sub_100009AB0(v53);
    v62 = v117;
    static Logger.download.getter(v61);
    uint64_t v63 = v115;
    uint64_t v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v58 + 16))(v115, v133, v59);
    NSString v65 = (void *)Logger.logObject.getter(v64);
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v65, v66))
    {

      (*(void (**)(char *, uint64_t))(v58 + 8))(v63, v59);
      (*(void (**)(char *, uint64_t))(v106 + 8))(v62, v107);
      goto LABEL_13;
    }

    uint64_t v67 = swift_slowAlloc(42LL, -1LL);
    uint64_t v68 = swift_slowAlloc(32LL, -1LL);
    uint64_t v136 = v60;
    uint64_t v137 = v68;
    *(_DWORD *)uint64_t v67 = 134218754;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v67 + 4, v67 + 12);
    *(_WORD *)(v67 + 12) = 2048;
    uint64_t v136 = v132;
    int64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v67 + 14, v67 + 22);
    *(_WORD *)(v67 + 22) = 2048;
    double v70 = a5 / 60.0;
    if ((~COERCE__INT64(a5 / 60.0) & 0x7FF0000000000000LL) != 0)
    {
      if (v70 > -9.22337204e18)
      {
        if (v70 < 9.22337204e18)
        {
          uint64_t v136 = (uint64_t)v70;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v67 + 24, v67 + 32);
          *(_WORD *)(v67 + 32) = 2080;
          unint64_t v71 = sub_100009AF0();
          uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter(v59, v71);
          unint64_t v74 = v73;
          uint64_t v136 = sub_100088DB4(v72, v73, &v137);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137, v67 + 34, v67 + 42);
          swift_bridgeObjectRelease(v74);
          (*(void (**)(char *, uint64_t))(v131 + 8))(v63, v59);
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v65,  v66,  "Received an optimal download window but we weren't able to create valid dates with the provided data: %ld:%l d %ld minutes at %s",  (uint8_t *)v67,  0x2Au);
          swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v68, -1LL, -1LL);
          swift_slowDealloc(v67, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v106 + 8))(v117, v107);
LABEL_13:
          (*(void (**)(char *, uint64_t))(v121 + 8))(v118, v122);
          (*(void (**)(char *, uint64_t))(v119 + 8))(v134, v123);
          uint64_t v90 = type metadata accessor for DateInterval(0LL, v89);
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v90 - 8) + 56LL))( v120,  1LL,  1LL,  v90);
        }

        goto LABEL_20;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  v75 = v116;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v116, v53, v59);
  id v76 = v112;
  uint64_t v77 = v123;
  v111(v112, 1LL, 1LL, v123);
  uint64_t v78 = v114;
  v109(v114, 1LL, 1LL, v110);
  LOBYTE(v104) = 1;
  LOBYTE(v103) = 1;
  LOBYTE(v102) = 1;
  LOBYTE(v101) = 1;
  LOBYTE(v100) = 1;
  LOBYTE(v99) = 1;
  LOBYTE(v98) = 1;
  LOBYTE(v97) = 1;
  LOBYTE(v96) = 1;
  LOBYTE(v95) = 0;
  LOBYTE(v94) = 1;
  id v79 = v113;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v76,  v78,  0LL,  1LL,  0LL,  1LL,  0LL,  1LL,  0LL,  v94,  v130,  v95,  0LL,  v96,  0LL,  v97,  0LL,  v98,  0LL,  v99,  0LL,  v100,  0LL,  v101,  0LL,  v102,  0LL,  v103,  0LL,  v104);
  uint64_t v80 = v58;
  id v81 = v134;
  LOBYTE(v78) = Calendar.date(_:matchesComponents:)(v75, v79);
  uint64_t v82 = v122;
  v83 = *(void (**)(char *, uint64_t))(v121 + 8);
  v83(v79, v122);
  uint64_t v84 = v77;
  v85 = v81;
  if ((v78 & 1) != 0)
  {
    v86 = v108;
    (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v108, v75, v59);
    uint64_t v87 = v120;
    v88 = v86;
LABEL_17:
    DateInterval.init(start:duration:)(v88, a5);
    (*(void (**)(char *, uint64_t))(v80 + 8))(v75, v59);
    v83(v118, v82);
    (*(void (**)(char *, uint64_t))(v119 + 8))(v85, v84);
    uint64_t v93 = type metadata accessor for DateInterval(0LL, v92);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56LL))( v87,  0LL,  1LL,  v93);
  }

  int64_t result = sub_100009A28(5uLL);
  if ((unsigned __int128)(result * (__int128)60LL) >> 64 != (60 * result) >> 63)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if ((unsigned __int128)(60 * result * (__int128)60LL) >> 64 == (3600 * result) >> 63)
  {
    v91 = v108;
    Date.addingTimeInterval(_:)((double)(3600 * result));
    uint64_t v87 = v120;
    v88 = v91;
    goto LABEL_17;
  }

LABEL_22:
  __break(1u);
  return result;
}

  id v55 = (char *)sub_100070DA8();
  id v56 = String._bridgeToObjectiveC()();
  uint64_t v57 = sub_1001E2698(v23, (uint64_t)v56);

  if ((v57 & 1) != 0 && (unint64_t)(v55 - 3) <= 1)
  {
    uint64_t v58 = v46;
    uint64_t v59 = 0LL;
  }

  else
  {
    uint64_t v58 = v46;
    uint64_t v59 = v55;
  }

  [v58 setUpdateState:v59];
  [v46 setRawUpdateState:v55];
  uint64_t v60 = String._bridgeToObjectiveC()();
  uint64_t v61 = sub_1001E2698(v23, (uint64_t)v60);

  [v46 setPackageType:v61];
  v62 = String._bridgeToObjectiveC()();
  uint64_t v63 = sub_1001E2634(v23, (uint64_t)v62);

  if (v63)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v63);

    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
    v64(v18, 0LL, 1LL, v8);
  }

  else
  {
    uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v45 + 56);
    v64(v18, 1LL, 1LL, v8);
  }

  sub_100026CD4((uint64_t)v18, (uint64_t)v20, (uint64_t *)&unk_100459410);
  NSString v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  if (v65(v20, 1LL, v8) == 1)
  {
    os_log_type_t v66 = 0LL;
  }

  else
  {
    os_log_type_t v66 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v20, v8);
  }

  [v46 setInstallDate:v66];

  uint64_t v67 = String._bridgeToObjectiveC()();
  uint64_t v68 = (Class)sub_1001E2634(v23, (uint64_t)v67);

  if (v68)
  {
    uint64_t v69 = v82;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v68);

    double v70 = v81;
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v81, v69, v8);
    v64(v70, 0LL, 1LL, v8);
    if (v65(v70, 1LL, v8) == 1)
    {
      uint64_t v68 = 0LL;
    }

    else
    {
      uint64_t v68 = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v70, v8);
    }

    unint64_t v71 = v83;
    uint64_t v72 = v78;
    uint64_t v46 = v79;
  }

  else
  {
    v64(v81, 1LL, 1LL, v8);
    unint64_t v71 = v83;
    uint64_t v72 = v78;
  }

  [v46 setTimestamp:v68];

  unint64_t v73 = v46;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v73);
  v75 = *(void *)((*v71 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v74 = *(void *)((*v71 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v75 >= v74 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v74 > 1, v75 + 1, 1LL);
  }
  id v76 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v75, v73);
  specialized Array._endMutation()(v76);
  sub_1000188F4(v80, v72);
}

    uint64_t v11 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
LABEL_5:
    sub_1000649D4(*(void *)(a1 + 56) + *(void *)(v5 + 72) * v15, (uint64_t)v7);
    sub_10005CB0C(v7, a2);
    sub_100064A18((uint64_t)v7);
  }

  uint64_t v18 = v16 + 4;
  if (v18 >= v12)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  uint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
    uint64_t v13 = v18;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v13 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v13 >= v12) {
      goto LABEL_23;
    }
    uint64_t v17 = *(void *)(v8 + 8 * v13);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }

  uint64_t v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  uint64_t v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  void *v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  unint64_t v26 = __OFADD__(v25, 1LL);
  uint64_t v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

    uint64_t v6 = (v16 - 1) & v16;
    uint64_t v10 = __clz(__rbit64(v16)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v12 = *v11;
    uint64_t v13 = v11[1];
    sub_100016B10(*(void *)(a1 + 56) + 32 * v10, (uint64_t)v19);
    v18[0] = v12;
    v18[1] = v13;
    uint64_t v14 = swift_bridgeObjectRetain(v13);
    a2(v12, v13, v19, v14);
    sub_100015240((uint64_t)v18, (uint64_t *)&unk_100459DD0);
  }

  uint64_t v17 = v15 + 4;
  if (v17 >= v7)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  uint64_t v16 = *(void *)(v20 + 8 * v17);
  if (v16)
  {
    uint64_t v8 = v17;
    goto LABEL_22;
  }

  while (1)
  {
    uint64_t v8 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v8 >= v7) {
      goto LABEL_23;
    }
    uint64_t v16 = *(void *)(v20 + 8 * v8);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }
    }

    else
    {
      uint64_t v32 = 1LL;
    }
  }

  else
  {
    uint64_t v32 = 0LL;
  }

  return v32;
}

        uint64_t v27 = objc_alloc(&OBJC_CLASS___AppUpdateEntity);
        uint64_t v28 = [v3 databaseID];
        unint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) connection]);
        uint64_t v14 = -[SQLiteEntity initWithPersistentID:onConnection:](v27, "initWithPersistentID:onConnection:", v28, v29);

        -[SQLiteEntity setValue:forProperty:](v14, "setValue:forProperty:", &off_10040C9E8, @"update_state");
        uint64_t v25 = *(void *)(a1 + 72);
        goto LABEL_23;
      }
    }

    else if (v7 == (id)3)
    {
      uint64_t v18 = ASDLogHandleForCategory(6LL);
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = 138543618;
        uint64_t v31 = v5;
        uint64_t v32 = 2048;
        uint64_t v33 = 3LL;
        uint64_t v20 = "Updating purchasing state for update with bundleID: %{public}@ currentState: %ld";
LABEL_21:
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, (uint8_t *)&v30, 0x16u);
        goto LABEL_22;
      }

      goto LABEL_22;
    }
  }

  uint64_t v36 = 0LL;
LABEL_40:

  return v36;
}

void sub_100008C30( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (**a4)(void)@<X4>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v120 = a4;
  uint64_t v129 = a2;
  uint64_t v130 = a3;
  uint64_t v133 = a1;
  uint64_t v116 = a5;
  uint64_t v103 = type metadata accessor for Logger(0LL);
  uint64_t v102 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  v113 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Calendar.SearchDirection(0LL);
  uint64_t v126 = *(void *)(v8 - 8);
  uint64_t v127 = v8;
  __chkstk_darwin(v8);
  v124 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = type metadata accessor for Calendar.RepeatedTimePolicy(0LL);
  uint64_t v10 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v12 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v132 = type metadata accessor for Calendar.MatchingPolicy(0LL);
  uint64_t v121 = *(void *)(v132 - 8);
  uint64_t v13 = v121;
  __chkstk_darwin(v132);
  uint64_t v15 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_1000079A0((uint64_t *)&unk_100459410);
  __chkstk_darwin(v16);
  uint64_t v123 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = type metadata accessor for Date(0LL);
  uint64_t v128 = *(void *)(v122 - 8);
  uint64_t v18 = __chkstk_darwin(v122);
  int v104 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  v111 = (char *)&v101 - v21;
  __chkstk_darwin(v20);
  v112 = (char *)&v101 - v22;
  uint64_t v23 = sub_1000079A0(&qword_100458560);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v101 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_1000079A0(&qword_100458568);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = type metadata accessor for DateComponents(0LL);
  uint64_t v117 = *(void *)(v29 - 8);
  uint64_t v118 = v29;
  uint64_t v30 = __chkstk_darwin(v29);
  v109 = (char *)&v101 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v101 - v32;
  uint64_t v34 = type metadata accessor for Calendar(0LL);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v131 = (char *)&v101 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Calendar.current.getter(v36);
  uint64_t v115 = v35;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v35 + 56);
  uint64_t v119 = v34;
  uint64_t v107 = v38;
  v38(v28, 1LL, 1LL, v34);
  uint64_t v39 = type metadata accessor for TimeZone(0LL);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56LL);
  uint64_t v106 = v39;
  uint64_t v105 = v40;
  ((void (*)(char *, uint64_t, uint64_t))v40)(v25, 1LL, 1LL);
  unint64_t v41 = sub_100009A28(0x3CuLL);
  v108 = v28;
  uint64_t v110 = v25;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v28,  v25,  0LL,  1LL,  0LL,  1LL,  0LL,  1LL,  0LL,  1,  v133,  0,  v129,  0,  v41,  0,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1,  0LL,  1);
  unint64_t v42 = v15;
  (*(void (**)(char *, void, uint64_t))(v13 + 104))( v15,  enum case for Calendar.MatchingPolicy.nextTime(_:),  v132);
  uint64_t v135 = 0LL;
  swift_stdlib_random(&v135, 8LL);
  uint64_t v43 = v10;
  if ((v135 & 0x20000) != 0) {
    uint64_t v44 = (unsigned int *)&enum case for Calendar.RepeatedTimePolicy.last(_:);
  }
  else {
    uint64_t v44 = (unsigned int *)&enum case for Calendar.RepeatedTimePolicy.first(_:);
  }
  uint64_t v45 = v125;
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *v44, v125);
  uint64_t v46 = v126;
  uint64_t v47 = v127;
  v48 = v124;
  (*(void (**)(char *, void, uint64_t))(v126 + 104))( v124,  enum case for Calendar.SearchDirection.forward(_:),  v127);
  uint64_t v49 = (uint64_t)v123;
  v114 = v33;
  uint64_t v50 = v122;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)(v130, v33, v42, v12, v48);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v48, v47);
  uint64_t v51 = v128;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v45);
  (*(void (**)(char *, uint64_t))(v121 + 8))(v42, v132);
  uint64_t v52 = v50;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v49, 1LL, v50) == 1)
  {
    uint64_t v53 = v133;
    uint64_t v54 = sub_100009AB0(v49);
    id v55 = v113;
    static Logger.download.getter(v54);
    id v56 = v111;
    uint64_t v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 16))(v111, v130, v52);
    uint64_t v58 = (void *)Logger.logObject.getter(v57);
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled((os_log_t)v58, v59))
    {

      (*(void (**)(char *, uint64_t))(v51 + 8))(v56, v52);
      (*(void (**)(char *, uint64_t))(v102 + 8))(v55, v103);
      goto LABEL_13;
    }

    uint64_t v60 = swift_slowAlloc(42LL, -1LL);
    uint64_t v61 = swift_slowAlloc(32LL, -1LL);
    uint64_t v134 = v53;
    uint64_t v135 = v61;
    *(_DWORD *)uint64_t v60 = 134218754;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v60 + 4, v60 + 12);
    *(_WORD *)(v60 + 12) = 2048;
    uint64_t v134 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v60 + 14, v60 + 22);
    *(_WORD *)(v60 + 22) = 2048;
    double v62 = a6 / 60.0;
    if ((~COERCE__INT64(a6 / 60.0) & 0x7FF0000000000000LL) != 0)
    {
      if (v62 > -9.22337204e18)
      {
        if (v62 < 9.22337204e18)
        {
          uint64_t v134 = (uint64_t)v62;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v60 + 24, v60 + 32);
          *(_WORD *)(v60 + 32) = 2080;
          unint64_t v63 = sub_100009AF0();
          uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter(v52, v63);
          unint64_t v66 = v65;
          uint64_t v134 = sub_100088DB4(v64, v65, &v135);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v60 + 34, v60 + 42);
          swift_bridgeObjectRelease(v66);
          (*(void (**)(char *, uint64_t))(v128 + 8))(v56, v52);
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v58,  v59,  "Received an optimal download window but we weren't able to create valid dates with the provided data: %ld:%l d %ld minutes at %s",  (uint8_t *)v60,  0x2Au);
          swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v61, -1LL, -1LL);
          swift_slowDealloc(v60, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v102 + 8))(v55, v103);
LABEL_13:
          (*(void (**)(char *, uint64_t))(v117 + 8))(v114, v118);
          (*(void (**)(char *, uint64_t))(v115 + 8))(v131, v119);
          uint64_t v82 = type metadata accessor for DateInterval(0LL, v81);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56LL))( v116,  1LL,  1LL,  v82);
          goto LABEL_14;
        }

        goto LABEL_21;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  uint64_t v67 = v112;
  uint64_t v68 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v112, v49, v50);
  uint64_t v69 = v108;
  uint64_t v70 = v119;
  v107(v108, 1LL, 1LL, v119);
  unint64_t v71 = v110;
  v105(v110, 1LL, 1LL, v106);
  LOBYTE(v100) = 1;
  LOBYTE(v99) = 1;
  LOBYTE(v98) = 1;
  LOBYTE(v97) = 1;
  LOBYTE(v96) = 1;
  LOBYTE(v95) = 1;
  LOBYTE(v94) = 1;
  LOBYTE(v93) = 1;
  LOBYTE(v92) = 1;
  LOBYTE(v91) = 0;
  LOBYTE(v90) = 1;
  uint64_t v72 = v109;
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)( v69,  v71,  0LL,  1LL,  0LL,  1LL,  0LL,  1LL,  0LL,  v90,  v133,  v91,  0LL,  v92,  0LL,  v93,  0LL,  v94,  0LL,  v95,  0LL,  v96,  0LL,  v97,  0LL,  v98,  0LL,  v99,  0LL,  v100);
  unint64_t v73 = v131;
  LOBYTE(v71) = Calendar.date(_:matchesComponents:)(v67, v72);
  uint64_t v74 = v118;
  v75 = *(void (**)(char *, uint64_t))(v117 + 8);
  v75(v72, v118);
  id v76 = v73;
  if ((v71 & 1) != 0)
  {
    uint64_t v77 = v104;
    (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v104, v67, v50);
    uint64_t v78 = v116;
    DateInterval.init(start:duration:)(v77, a6);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v67, v50);
    v75(v114, v74);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v76, v70);
    uint64_t v80 = type metadata accessor for DateInterval(0LL, v79);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56LL))(v78, 0LL, 1LL, v80);
LABEL_14:
    v83 = v120;
LABEL_18:
    _Block_release(v83);
    return;
  }

  uint64_t v84 = v120;
  uint64_t v85 = v120[2](v120);
  if ((unsigned __int128)(60 * v85 * (__int128)60LL) >> 64 == (3600 * v85) >> 63)
  {
    v86 = v104;
    Date.addingTimeInterval(_:)((double)(3600 * v85));
    uint64_t v87 = v116;
    DateInterval.init(start:duration:)(v86, a6);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v67, v68);
    v75(v114, v74);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v76, v70);
    uint64_t v89 = type metadata accessor for DateInterval(0LL, v88);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56LL))(v87, 0LL, 1LL, v89);
    v83 = v84;
    goto LABEL_18;
  }

LABEL_23:
  __break(1u);
}

  if ((v12 & 1) != objc_msgSend(v7, "ams_isManagedAppleID"))
  {

    return 0LL;
  }

  return v7;
}

      if (v18 == ++v19)
      {
        swift_bridgeObjectRelease(v17);
        goto LABEL_42;
      }
    }
  }

  uint64_t v15 = (char *)&_swiftEmptyArrayStorage;
LABEL_42:
  int64_t result = swift_bridgeObjectRelease(v17);
  uint64_t v14 = 1LL;
LABEL_12:
  *a2 = v14;
  a2[1] = (uint64_t)v7;
  a2[2] = v6;
  a2[3] = (uint64_t)v10;
  a2[4] = (uint64_t)v15;
  return result;
}

  __break(1u);
LABEL_24:
  uint64_t v16 = 2;
  int64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
  __break(1u);
  return result;
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001517C(0LL, &qword_100459E10, off_1003D9DE8);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001517C(0LL, &qword_100459D90, &off_1003DA128);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001517C(0LL, &qword_100459D40, &OBJC_CLASS___ASDPurchaseResponseItem_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

        uint64_t v16 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
      }

      uint64_t v24 = *(void *)(*(void *)(v9 + 48) + 8 * v20);
      uint64_t v25 = *(void *)(v38 + 72);
      uint64_t v26 = *(void *)(v9 + 56) + v25 * v20;
      if ((a2 & 1) != 0) {
        sub_100064A54(v26, (uint64_t)v8);
      }
      else {
        sub_1000649D4(v26, (uint64_t)v8);
      }
      int64_t result = static Hasher._hash(seed:_:)(*(void *)(v11 + 40), v24);
      uint64_t v27 = -1LL << *(_BYTE *)(v11 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1LL << v28) & ~*(void *)(v17 + 8 * (v28 >> 6))) != 0)
      {
        uint64_t v18 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v17 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0LL;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v17 + 8 * v29);
        }

        while (v33 == -1);
        uint64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
      }

      *(void *)(v17 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      *(void *)(*(void *)(v11 + 48) + 8 * v18) = v24;
      int64_t result = sub_100064A54((uint64_t)v8, *(void *)(v11 + 56) + v25 * v18);
      ++*(void *)(v11 + 16);
    }
  }

  int64_t result = swift_release(v9);
LABEL_43:
  *unsigned int v3 = v11;
  return result;
}

    mach_msg_destroy(&msg);
    return v12;
  }

  mig_put_reply_port(msg.msgh_local_port);
  return v12;
}

    uint64_t v33 = 0;
    goto LABEL_24;
  }

  if ((-[ASDRepairOptions isBackground](self->_options, "isBackground") & 1) != 0)
  {
    uint64_t v21 = ASDLogHandleForCategory(28LL);
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = self->_logKey;
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "[FP/%{public}@] Not showing internet connection alert for background repair",  buf,  0xCu);
    }
  }

  else
  {
    uint64_t v24 = objc_alloc(&OBJC_CLASS___AMSDialogRequest);
    uint64_t v25 = ASDLocalizedString(@"ARCADE_INTERNET_CONNECTION_REQUIRED");
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
    uint64_t v27 = ASDLocalizedString(@"ARCADE_CONNECT_TO_THE_INTERNET_TO_OPEN_APP");
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    uint64_t v22 = -[AMSDialogRequest initWithTitle:message:](v24, "initWithTitle:message:", v26, v28);

    uint64_t v29 = ASDLocalizedString(@"OK");
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDialogAction actionWithTitle:style:]( &OBJC_CLASS___AMSDialogAction,  "actionWithTitle:style:",  v30,  0LL));

    *(void *)buf = v31;
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", buf, 1LL));
    -[os_log_s setButtonActions:](v22, "setButtonActions:", v32);

    sub_100321874(v22, @"fairPlayRepairNetworkRequired");
    sub_1001D7974(v31, @"ok");
    sub_10027808C((uint64_t)&OBJC_CLASS___InteractiveRequestPresenter, v22, 0LL);
  }

  uint64_t v33 = 0;
  uint64_t v15 = 0LL;
LABEL_24:
  uint64_t v57 = ASDLogHandleForCategory(28LL);
  uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    os_log_type_t v59 = (void *)objc_claimAutoreleasedReturnValue(-[FairPlayRepair logKey](self, "logKey"));
    *(_DWORD *)buf = 138543874;
    *(void *)&buf[4] = v59;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v33;
    *(_WORD *)&buf[18] = 2114;
    *(void *)&buf[20] = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "[FP/%{public}@] Repair complete with result: %d error: %{public}@",  buf,  0x1Cu);
  }

  if (v33)
  {
    if ((-[ASDRepairOptions isBackground](self->_options, "isBackground") & 1) != 0)
    {
      uint64_t v60 = ASDLogHandleForCategory(28LL);
      uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
      {
        double v62 = self->_logKey;
        *(_DWORD *)buf = 138543362;
        *(void *)&buf[4] = v62;
        _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "[FP/%{public}@] Not launching app following background repair",  buf,  0xCu);
      }
    }

    else
    {
      uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[FairPlayRepair delegate](self, "delegate"));
      -[os_log_s repair:wantsToRelaunchApplication:]( v61,  "repair:wantsToRelaunchApplication:",  self,  self->_application);
    }
  }

  else if (a4)
  {
    *a4 = v15;
  }

  return v33;
}

    uint64_t v26 = self->_verifier;
    if (v26) {
      bytesValidated = v26->_bytesValidated;
    }
    else {
      bytesValidated = 0LL;
    }
    uint64_t v57 = 0LL;
    uint64_t v28 = [v7 truncateAtOffset:bytesValidated error:&v57];
    uint64_t v29 = (unint64_t)v57;
    if (v28)
    {
      uint64_t v30 = self->_verifier;
      if (v30) {
        uint64_t v30 = (DigestVerifier *)v30->_bytesValidated;
      }
      self->_savedBytes = (unint64_t)v30;
      uint64_t v31 = ASDLogHandleForCategory(10LL);
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = self->_logKey;
        savedBytes = self->_savedBytes;
        uint64_t v35 = self->_downloadPath;
        *(_DWORD *)buf = 138412802;
        uint64_t v61 = v33;
        double v62 = 2048;
        unint64_t v63 = savedBytes;
        uint64_t v64 = 2114;
        unint64_t v65 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "[%@] Validated %{bytes}llu at: %{public}@",  buf,  0x20u);
      }
    }

    else
    {
      uint64_t v36 = ASDLogHandleForCategory(10LL);
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        uint64_t v53 = self->_logKey;
        *(_DWORD *)buf = 138412546;
        uint64_t v61 = v53;
        double v62 = 2114;
        unint64_t v63 = v29;
        _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "[%@] Error attempting to truncate partial download: %{public}@",  buf,  0x16u);
      }
    }

    id v56 = 0LL;
    uint64_t v37 = [v7 closeAndReturnError:&v56];
    uint64_t v38 = (unint64_t)v56;
    if ((v37 & 1) == 0)
    {
      uint64_t v39 = ASDLogHandleForCategory(10LL);
      uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        uint64_t v54 = self->_logKey;
        *(_DWORD *)buf = 138412546;
        uint64_t v61 = v54;
        double v62 = 2114;
        unint64_t v63 = v38;
        _os_log_error_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_ERROR,  "[%@] Error attempting to close file handle: %{public}@",  buf,  0x16u);
      }
    }

    if (v29 | v38)
    {
      unint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      unint64_t v42 = self->_downloadPath;
      id v55 = 0LL;
      [v41 removeItemAtPath:v42 error:&v55];
      uint64_t v43 = v55;

      uint64_t v44 = ASDLogHandleForCategory(10LL);
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      uint64_t v46 = v45;
      if (v43)
      {
        if (os_log_type_enabled(v45, OS_LOG_TYPE_FAULT))
        {
          uint64_t v47 = self->_logKey;
          *(_DWORD *)buf = 138412546;
          uint64_t v61 = v47;
          double v62 = 2114;
          unint64_t v63 = (unint64_t)v43;
          _os_log_fault_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_FAULT,  "[%@] Unable to delete previous download: %{public}@",  buf,  0x16u);
        }
      }

      else if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        v48 = self->_logKey;
        uint64_t v49 = self->_downloadPath;
        *(_DWORD *)buf = 138412546;
        uint64_t v61 = v48;
        double v62 = 2114;
        unint64_t v63 = (unint64_t)v49;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "[%@] Deleted partially downloaded file due to previous errors: %{public}@",  buf,  0x16u);
      }
    }
  }

  uint64_t v50 = (NSOutputStream *)objc_claimAutoreleasedReturnValue( +[NSOutputStream outputStreamToFileAtPath:append:]( &OBJC_CLASS___NSOutputStream,  "outputStreamToFileAtPath:append:",  self->_downloadPath,  self->_savedBytes != 0));
  outputStream = self->_outputStream;
  self->_outputStream = v50;

  -[NSOutputStream open](self->_outputStream, "open");
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(-[NSOutputStream streamError](self->_outputStream, "streamError"));
  v4[2](v4, self->_savedBytes, v52);
}

      uint64_t v21 = sub_1002523CC(v9);
      uint64_t v13 = objc_claimAutoreleasedReturnValue(v21);
LABEL_24:
      uint64_t v11 = (void *)v13;
      goto LABEL_25;
    }

    uint64_t v7 = 1;
LABEL_9:
    uint64_t v10 = buf[0];
    objc_autoreleasePoolPop(v8);
  }

  while (!v10);
  uint64_t v11 = 0LL;
LABEL_26:
  if (a2 && (v7 & 1) == 0) {
    *a2 = v11;
  }

  uint64_t v22 = v7;
LABEL_30:

  return v22;
}

      uint64_t v10 = 0LL;
LABEL_24:

      goto LABEL_25;
    }

    if ([v5 isProfileValidated])
    {
      uint64_t v18 = ASDLogHandleForCategory(28LL);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
        uint64_t v38 = 138412546;
        uint64_t v39 = v6;
        uint64_t v40 = 2114;
        unint64_t v41 = v15;
        uint64_t v16 = "[%@] Skipping claim for %{public}@: Not store vended";
        goto LABEL_22;
      }

      goto LABEL_23;
    }

    if (([v5 applicationMissingRequiredSINF] & 1) == 0)
    {
      uint64_t v26 = ASDLogHandleForCategory(28LL);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
        uint64_t v38 = 138412546;
        uint64_t v39 = v6;
        uint64_t v40 = 2114;
        unint64_t v41 = v15;
        uint64_t v16 = "[%@] Skipping claim for %{public}@: Not missing SINF";
        goto LABEL_22;
      }

      goto LABEL_23;
    }

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v5 iTunesMetadata]);
    uint64_t v20 = [v19 storeItemIdentifier];

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v5 iTunesMetadata]);
    uint64_t v22 = [v21 versionIdentifier];

    if (!v20 || !v22)
    {
      uint64_t v27 = ASDLogHandleForCategory(28LL);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
        uint64_t v38 = 138412546;
        uint64_t v39 = v6;
        uint64_t v40 = 2114;
        unint64_t v41 = v15;
        uint64_t v16 = "[%@] Skipping claim for %{public}@: Missing store identifiers";
        goto LABEL_22;
      }

      goto LABEL_23;
    }

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v5 iTunesMetadata]);
    uint64_t v24 = [v23 storeFront];

    if (v24)
    {
      uint64_t v25 = ASDLogHandleForCategory(28LL);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
        uint64_t v38 = 138412546;
        uint64_t v39 = v6;
        uint64_t v40 = 2114;
        unint64_t v41 = v15;
        uint64_t v16 = "[%@] Skipping claim for %{public}@: Not missing storeFront";
        goto LABEL_22;
      }

      goto LABEL_23;
    }

    uint64_t v29 = sub_100325E80(v5);
    uint64_t v30 = objc_claimAutoreleasedReturnValue(v29);
    uint64_t v14 = (os_log_s *)v30;
    if (v30)
    {
      uint64_t v31 = *(void *)(v30 + 8);
      uint64_t v32 = ASDLogHandleForCategory(28LL);
      uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      uint64_t v34 = v33;
      if (v31 == 5)
      {
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
          uint64_t v38 = 138412546;
          uint64_t v39 = v6;
          uint64_t v40 = 2114;
          unint64_t v41 = v35;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "[%@] Attempting claim for %{public}@: Passes eligible for corrupted metadata",  (uint8_t *)&v38,  0x16u);
        }

        uint64_t v10 = 1LL;
LABEL_35:

        goto LABEL_24;
      }
    }

    else
    {
      uint64_t v36 = ASDLogHandleForCategory(28LL);
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    }

    if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
    {
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
      uint64_t v38 = 138412546;
      uint64_t v39 = v6;
      uint64_t v40 = 2114;
      unint64_t v41 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_INFO,  "[%@] Skipping claim for %{public}@: Not missing account",  (uint8_t *)&v38,  0x16u);
    }

    uint64_t v10 = 0LL;
    goto LABEL_35;
  }

  uint64_t v10 = 1LL;
LABEL_25:

  return v10;
}

                  uint64_t v12 = v26;
                  a1 = v25;
                  unsigned int v3 = v24;
                  uint64_t v15 = v35;
                }
              }

              sub_1001F7D08(v17, v18);
              sub_1001C5884(v3, v17);
            }

            uint64_t v14 = [v12 countByEnumeratingWithState:&v40 objects:v49 count:16];
          }

          while (v14);
        }

        int v4 = v34 + 1;
      }

      while ((id)(v34 + 1) != v32);
      uint64_t v32 = [obj countByEnumeratingWithState:&v44 objects:v50 count:16];
    }

    while (v32);
  }

  return 1LL;
}

              if (v19 && v12 == (char *)1)
              {
                if (sub_1001E5678((BOOL)v19, v21))
                {
                  uint64_t v30 = ASDLogHandleForCategory(29LL);
                  uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
                  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v31 = sub_100323C54(v10);
                    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
                    *(_DWORD *)buf = 138412802;
                    *(void *)&buf[4] = v32;
                    *(_WORD *)&buf[12] = 2114;
                    *(void *)&buf[14] = v88;
                    *(_WORD *)&buf[22] = 2114;
                    int v104 = v19;
                    uint64_t v33 = v22;
                    uint64_t v34 = "[%@] Skipping fail with reason: %{public}@ of completed restore coordinator: %{public}@";
                    goto LABEL_36;
                  }

                  goto LABEL_53;
                }
              }

              else if (!v19)
              {
                uint64_t v36 = ASDLogHandleForCategory(29LL);
                uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v37 = sub_100323C54(v10);
                  uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v37);
                  *(_DWORD *)buf = 138412802;
                  *(void *)&buf[4] = v32;
                  *(_WORD *)&buf[12] = 2048;
                  *(void *)&buf[14] = v12;
                  *(_WORD *)&buf[22] = 2114;
                  int v104 = v88;
                  uint64_t v33 = v22;
                  uint64_t v34 = "[%@] No coordinator with restoreType: %ld reason: '%{public}@' to fail";
LABEL_36:
                  _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, v34, buf, 0x20u);
                }

        return;
      }
    }

    uint64_t v24 = ASDLogHandleForCategory(3LL);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ams_DSID"));
      *(_DWORD *)buf = 138543874;
      *(void *)uint64_t v35 = v26;
      *(_WORD *)&v35[8] = 1024;
      *(_DWORD *)&v35[10] = v11;
      uint64_t v36 = 2048;
      uint64_t v37 = [v4 count];
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "[AccountEvent] There is not an initial account event for account: %{public}@. Attempting to add one. hasInitialE ventForCurrentAccount: %{BOOL}d eventCount: %ld",  buf,  0x1Cu);
    }

    uint64_t v27 = sub_1001A46B8(objc_alloc(&OBJC_CLASS___AccountEvent), v6);
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v27 setValue:v23 forProperty:@"active_start_time"];
    [v27 setValue:&off_10040CF10 forProperty:@"event_type"];
    uint64_t v28 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_1002ADFCC;
    v31[3] = &unk_1003EC538;
    uint64_t v32 = v27;
    uint64_t v33 = v6;
    uint64_t v30 = v27;
    [v29 modifyUsingTransaction:v31];

    goto LABEL_23;
  }

id sub_1000099D4(uint64_t a1, uint64_t a2)
{
  v4.receiver = v2;
  v4.super_class = (Class)swift_getObjectType(v2, a2);
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for StoreItemResponseSwift()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored22StoreItemResponseSwift);
}

unint64_t sub_100009A28(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0LL;
    swift_stdlib_random(&v3, 8LL);
    int64_t result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0LL;
          swift_stdlib_random(&v3, 8LL);
        }

        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100009AB0(uint64_t a1)
{
  uint64_t v2 = sub_1000079A0((uint64_t *)&unk_100459410);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_100009AF0()
{
  unint64_t result = qword_100459420;
  if (!qword_100459420)
  {
    uint64_t v1 = type metadata accessor for Date(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Date, v1);
    atomic_store(result, (unint64_t *)&qword_100459420);
  }

  return result;
}

id sub_100009B38()
{
  id result = [objc_allocWithZone(NSNumber) initWithUnsignedInteger:-1];
  qword_100458570 = (uint64_t)result;
  return result;
}

uint64_t sub_100009B6C()
{
  uint64_t v1 = OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck____lazy_storage___numericStorefrontToCountryCodeMapping;
  uint64_t v2 = *(void *)(v0
                 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck____lazy_storage___numericStorefrontToCountryCodeMapping);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0
                   + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck____lazy_storage___numericStorefrontToCountryCodeMapping);
  }

  else
  {
    uint64_t v3 = sub_100009BD0(v0);
    uint64_t v4 = *(void *)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRelease(v4);
    uint64_t v2 = 0LL;
  }

  swift_bridgeObjectRetain(v2);
  return v3;
}

uint64_t sub_100009BD0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for CocoaError.Code(0LL);
  __chkstk_darwin(v3);
  uint64_t v4 = Data.init(contentsOf:options:)( a1 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_cachedStorefrontMappingURL,  0LL);
  unint64_t v6 = v5;
  uint64_t v7 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  uint64_t v8 = PropertyListDecoder.init()();
  uint64_t v9 = sub_1000079A0(&qword_100458728);
  uint64_t v10 = sub_100015360( &qword_100458740,  (uint64_t)&protocol witness table for Int64,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v12, v9, v4, v6, v9, v10);
  sub_100007B14(v4, v6);
  swift_release(v8);
  return v12;
}

uint64_t sub_10000A010(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v49 = a1;
  uint64_t v50 = a2;
  uint64_t v4 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = objc_opt_self(&OBJC_CLASS___URLBag);
  id v11 = sub_100255630(v48);
  id v12 = objc_allocWithZone(&OBJC_CLASS___AMSMediaTokenService);
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 initWithClientIdentifier:v13 bag:v11];

  *(void *)(v3 + 40) = v14;
  uint64_t v15 = objc_opt_self(&OBJC_CLASS___Storage);
  id v16 = sub_100220DDC(v15);
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v19 = v18;

  URL.init(fileURLWithPath:isDirectory:)(v17, v19, 1LL);
  swift_bridgeObjectRelease(v19);
  unint64_t v51 = 0xD000000000000020LL;
  unint64_t v52 = 0x80000001003425D0LL;
  (*(void (**)(char *, void, uint64_t))(v5 + 104))( v7,  enum case for URL.DirectoryHint.inferFromPath(_:),  v4);
  unint64_t v20 = sub_1000150D4();
  URL.appending<A>(path:directoryHint:)(&v51, v7, &type metadata for String, v20);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_bridgeObjectRelease(v52);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v47);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_shouldWriteUpdatingMapping) = 0;
  *(void *)(v3
            + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck____lazy_storage___numericStorefrontToCountryCodeMapping) = 0LL;
  uint64_t v21 = v49;
  uint64_t v22 = v50;
  *(void *)(v3 + 16) = v49;
  *(void *)(v3 + 24) = v22;
  uint64_t v23 = *(void **)(v3 + 40);
  uint64_t v24 = v21;
  id v25 = v23;
  id v26 = sub_100255630(v48);
  id v27 = [objc_allocWithZone(AMSMediaRequestEncoder) initWithTokenService:v25 bag:v26];

  *(void *)(v3 + 32) = v27;
  uint64_t v28 = (void *)objc_opt_self(&OBJC_CLASS___AMSProcessInfo);
  id v29 = v27;
  id v30 = [v28 currentProcess];
  [v29 setClientInfo:v30];

  uint64_t v31 = *(void *)(*(void *)&v24[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey]
                  + OBJC_IVAR____TtC9appstored6LogKey_value
                  + 8);
  id v32 = *(id *)(v3 + 32);
  swift_bridgeObjectRetain(v31);
  NSString v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v31);
  [v32 setLogKey:v33];

  id v34 = [objc_allocWithZone(AMSURLSession) init];
  *(void *)(v3 + 48) = v34;
  uint64_t v35 = *(void *)(v3 + 40);
  id v36 = objc_allocWithZone(&OBJC_CLASS___AMSMediaProtocolHandler);
  id v37 = v34;
  id v38 = [v36 initWithTokenService:v35];
  [v37 setProtocolHandler:v38];

  uint64_t v39 = *(void **)(v3 + 48);
  id v40 = objc_allocWithZone(&OBJC_CLASS___AMSMediaResponseDecoder);
  id v41 = v39;
  id v42 = [v40 init];
  [v41 setResponseDecoder:v42];

  uint64_t v43 = *(void **)(v3 + 48);
  id v44 = *(id *)(v3 + 40);
  id v45 = v43;
  [v44 setSession:v45];

  return v3;
}

uint64_t sub_10000A438()
{
  v1[66] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[67] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[68] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[69] = swift_task_alloc(v4);
  v1[70] = swift_task_alloc(v4);
  v1[71] = swift_task_alloc(v4);
  v1[72] = swift_task_alloc(v4);
  v1[73] = swift_task_alloc(v4);
  v1[74] = swift_task_alloc(v4);
  v1[75] = swift_task_alloc(v4);
  v1[49] = _swiftEmptyArrayStorage;
  uint64_t v5 = (void *)swift_task_alloc(dword_1004585E4);
  v1[76] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_10000A534;
  return sub_10000FEB0();
}

uint64_t sub_10000A534(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 608LL);
  *(void *)(*(void *)v1 + 616LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10000A5BC, 0LL, 0LL);
}

uint64_t sub_10000A5BC()
{
  uint64_t v1 = *(void **)(v0 + 616);
  uint64_t v2 = v1[2];
  *(void *)(v0 + 624) = v2;
  if (v2)
  {
    *(void *)(v0 + 648) = 0LL;
    *(_OWORD *)(v0 + 632) = 0u;
    if (!v1[2]) {
      __break(1u);
    }
    uint64_t v3 = v1[5];
    *(void *)(v0 + 656) = v3;
    uint64_t v4 = v1[7];
    *(void *)(v0 + 664) = v4;
    uint64_t v5 = v1[6];
    uint64_t v6 = (void *)v1[4];
    *(void *)(v0 + 672) = v6;
    uint64_t v7 = dword_1004585DC;
    id v8 = v6;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v4);
    uint64_t v9 = (void *)swift_task_alloc(v7);
    *(void *)(v0 + 680) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_10000AAC0;
    return sub_10000DBC8((uint64_t)v6, v3, v5, v4);
  }

  else
  {
    swift_bridgeObjectRelease(v1);
    if ((*(_BYTE *)(*(void *)(v0 + 528)
                   + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_shouldWriteUpdatingMapping) & 1) != 0)
    {
      uint64_t v11 = type metadata accessor for PropertyListEncoder(0LL);
      swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
      uint64_t v12 = PropertyListEncoder.init()();
      uint64_t v13 = sub_100009B6C();
      *(void *)(v0 + 456) = v13;
      uint64_t v14 = sub_1000079A0(&qword_100458728);
      uint64_t v15 = sub_100015360( &qword_100458730,  (uint64_t)&protocol witness table for Int64,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
      uint64_t v16 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 456, v14, v15);
      unint64_t v18 = v17;
      uint64_t v19 = *(void *)(v0 + 528);
      swift_bridgeObjectRelease(v13);
      swift_release(v12);
      Data.write(to:options:)( v19 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_cachedStorefrontMappingURL,  0LL,  v16,  v18);
      sub_100007B14(v16, v18);
    }

    sub_10001527C(0LL, 0LL);
    uint64_t v20 = *(void *)(v0 + 592);
    uint64_t v21 = *(void *)(v0 + 584);
    uint64_t v22 = *(void *)(v0 + 576);
    uint64_t v23 = *(void *)(v0 + 568);
    uint64_t v24 = *(void *)(v0 + 560);
    uint64_t v25 = *(void *)(v0 + 552);
    uint64_t v26 = *(void *)(v0 + 392);
    swift_task_dealloc(*(void *)(v0 + 600));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v26);
  }

uint64_t sub_10000AAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 680LL);
  v4[86] = a1;
  v4[87] = a2;
  v4[88] = v2;
  swift_task_dealloc(v5);
  if (v2) {
    uint64_t v6 = sub_10000C694;
  }
  else {
    uint64_t v6 = sub_10000AB78;
  }
  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10000AB78()
{
  v262 = (void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 688);
  if (!v2)
  {
    int64_t v14 = *(void *)(v0 + 672);
    uint64_t v24 = *(void *)(v0 + 664);
    swift_bridgeObjectRelease(*(void *)(v0 + 656));
    swift_bridgeObjectRelease(v24);

    uint64_t v25 = *(void *)(v0 + 704);
    uint64_t v26 = *(void *)(v0 + 640);
    unint64_t isUniquelyReferenced_nonNull_native = *(void *)(v0 + 632);
    goto LABEL_100;
  }

  unint64_t v264 = *(void *)(v0 + 696);
  uint64_t v3 = *(void **)(v0 + 672);
  uint64_t v4 = *(void *)(v0 + 664);
  uint64_t v5 = *(void *)(v0 + 656);
  v246 = (uint64_t *)(v0 + 528);
  uint64_t v6 = *(void *)(v0 + 528);
  swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v7 = sub_10005589C(v2, (void (*)(uint64_t *__return_ptr, id *))sub_10000CE74, 0LL);
  static Logger.updates.getter(v7);
  swift_bridgeObjectRetain_n(v2, 4LL);
  swift_retain_n(v6, 4LL);
  id v8 = v3;
  swift_bridgeObjectRetain_n(v5, 2LL);
  swift_bridgeObjectRetain_n(v4, 2LL);
  unint64_t isUniquelyReferenced_nonNull_native = Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  v270 = (void *)v2;
  if (!os_log_type_enabled((os_log_t)isUniquelyReferenced_nonNull_native, v10))
  {
    uint64_t v27 = v2;
    uint64_t v28 = *(void **)(v0 + 672);
    uint64_t v29 = *(void *)(v0 + 664);
    uint64_t v30 = *(void *)(v0 + 656);
    uint64_t v1 = *(void *)(v0 + 600);
    uint64_t v31 = *(void *)(v0 + 544);
    uint64_t v32 = *(void *)(v0 + 536);
    uint64_t v33 = *(void *)(v0 + 528);
    swift_bridgeObjectRelease_n(v27, 4LL);
    swift_release_n(v33, 4LL);
    swift_bridgeObjectRelease_n(v30, 2LL);
    swift_bridgeObjectRelease_n(v29, 2LL);

    id v34 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    uint64_t v35 = v1;
    uint64_t v36 = v32;
    goto LABEL_20;
  }

  LOBYTE(v266) = v10;
  v267 = (os_log_s *)isUniquelyReferenced_nonNull_native;
  unint64_t isUniquelyReferenced_nonNull_native = v0 + 488;
  v272 = (void (*)(uint64_t, uint64_t))(v0 + 496);
  unint64_t v11 = *(void *)(v0 + 688);
  uint64_t v12 = *(void *)(v0 + 528);
  uint64_t v1 = swift_slowAlloc(52LL, -1LL);
  uint64_t v13 = (void *)swift_slowAlloc(16LL, -1LL);
  v263 = (uint64_t *)swift_slowAlloc(64LL, -1LL);
  *(void *)(v0 + 472) = v263;
  *(_DWORD *)uint64_t v1 = 138413314;
  int64_t v14 = *(void *)(v12 + 16);
  uint64_t v15 = *(void **)(v14 + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
  *(void *)(v0 + 480) = v15;
  id v16 = v15;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 480, v0 + 488, v1 + 4, v1 + 12);
  uint64_t v269 = (uint64_t)v13;
  *uint64_t v13 = v15;
  swift_release_n(v12, 2LL);
  *(_WORD *)(v1 + 12) = 2050;
  unint64_t v17 = v11 & 0xFFFFFFFFFFFFFF8LL;
  if (v11 >> 62) {
    goto LABEL_119;
  }
  uint64_t v18 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v19 = (void *)v2;
  while (1)
  {
    swift_bridgeObjectRelease(v19);
    *(void *)unint64_t isUniquelyReferenced_nonNull_native = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(isUniquelyReferenced_nonNull_native, v272, v1 + 14, v1 + 22);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v1 + 22) = 2082;
    unint64_t v20 = *(void *)(v14 + OBJC_IVAR____TtC9appstored14UpdatesContext_reason);
    type metadata accessor for LoadSoftwareUpdatesReason(0LL);
    if (v20 > 8)
    {
      uint64_t v67 = v21;
      uint64_t v68 = *(void **)(v0 + 672);
      uint64_t v69 = *(void *)(v0 + 664);
      uint64_t v70 = *(void *)(v0 + 528);
      swift_bridgeObjectRelease(*(void *)(v0 + 656));
      swift_bridgeObjectRelease(v69);
      swift_bridgeObjectRelease(v19);
      swift_release(v70);

      *(void *)(v0 + 496) = v20;
      return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v67, v272, v67, &type metadata for Int);
    }

    unint64_t v273 = v0 + 520;
    if (((1LL << v20) & 0xD6) != 0)
    {
      uint64_t v22 = 0x756F72676B636162LL;
      unint64_t v23 = 0xEB0000000020646ELL;
    }

    else
    {
      uint64_t v22 = 0LL;
      unint64_t v23 = 0xE000000000000000LL;
    }

    id v37 = *(void **)(v0 + 672);
    uint64_t v38 = *(void *)(v0 + 528);
    *(void *)(v0 + 504) = sub_100088DB4(v22, v23, (uint64_t *)(v0 + 472));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 504, v0 + 512, v1 + 24, v1 + 32);
    swift_bridgeObjectRelease(v23);
    swift_release_n(v38, 2LL);
    *(_WORD *)(v1 + 32) = 2082;
    if (v18 == 1) {
      uint64_t v39 = 0LL;
    }
    else {
      uint64_t v39 = 115LL;
    }
    if (v18 == 1) {
      unint64_t v40 = 0xE000000000000000LL;
    }
    else {
      unint64_t v40 = 0xE100000000000000LL;
    }
    *(void *)(v0 + 512) = sub_100088DB4(v39, v40, (uint64_t *)(v0 + 472));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 512, v273, v1 + 34, v1 + 42);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease_n(v270, 2LL);
    *(_WORD *)(v1 + 42) = 2114;
    Class isa = (Class)objc_msgSend(v37, "ams_DSID");
    if (!isa)
    {
      sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
      Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
    }

    id v42 = *(void **)(v0 + 672);
    uint64_t v43 = *(void *)(v0 + 664);
    uint64_t v44 = *(void *)(v0 + 656);
    uint64_t v45 = *(void *)(v0 + 600);
    uint64_t v46 = *(void *)(v0 + 544);
    uint64_t v47 = *(void *)(v0 + 536);
    *(void *)(v0 + 520) = isa;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v273, v246, v1 + 44, v1 + 52);
    unint64_t isUniquelyReferenced_nonNull_native = v269;
    *(void *)(v269 + 8) = isa;

    swift_bridgeObjectRelease_n(v44, 2LL);
    swift_bridgeObjectRelease_n(v43, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v267,  (os_log_type_t)v266,  "[%@] ╒ Received %{public}ld %{public}sserver update%{public}s for account: %{public}@",  (uint8_t *)v1,  0x34u);
    uint64_t v48 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v269, 2LL, v48);
    swift_slowDealloc(v269, -1LL, -1LL);
    swift_arrayDestroy(v263, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v263, -1LL, -1LL);
    swift_slowDealloc(v1, -1LL, -1LL);

    id v34 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    uint64_t v35 = v45;
    uint64_t v36 = v47;
LABEL_20:
    v272 = v34;
    v34(v35, v36);
    uint64_t v49 = *(void *)(v0 + 688);
    unint64_t v17 = v49 & 0xFFFFFFFFFFFFFF8LL;
    if ((unint64_t)v49 >> 62)
    {
      uint64_t v50 = v270;
      if (v49 >= 0) {
        uint64_t v72 = v49 & 0xFFFFFFFFFFFFFF8LL;
      }
      else {
        uint64_t v72 = (uint64_t)v270;
      }
      swift_bridgeObjectRetain(v270);
      int64_t v14 = _CocoaArrayWrapper.endIndex.getter(v72);
      swift_bridgeObjectRelease(v270);
      if (!v14) {
        goto LABEL_36;
      }
    }

    else
    {
      int64_t v14 = *(void *)((v49 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      uint64_t v50 = v270;
      if (!v14) {
        goto LABEL_36;
      }
    }

    if (v14 < 1) {
      goto LABEL_118;
    }
    uint64_t v1 = 0LL;
    unint64_t v51 = *(void *)(v0 + 688) & 0xC000000000000001LL;
    uint64_t v269 = 138412546LL;
    do
    {
      if (v51) {
        id v55 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v50);
      }
      else {
        id v55 = (id)v50[v1 + 4];
      }
      id v56 = v55;
      uint64_t v57 = *(void *)(v0 + 528);
      static Logger.updates.getter(v55);
      swift_retain_n(v57, 2LL);
      unint64_t isUniquelyReferenced_nonNull_native = v56;
      unint64_t v52 = (os_log_s *)Logger.logObject.getter(isUniquelyReferenced_nonNull_native);
      os_log_type_t v58 = static os_log_type_t.default.getter();
      BOOL v59 = os_log_type_enabled(v52, v58);
      uint64_t v60 = *(void *)(v0 + 528);
      if (v59)
      {
        uint64_t v61 = swift_slowAlloc(22LL, -1LL);
        double v62 = (void *)swift_slowAlloc(16LL, -1LL);
        *(_DWORD *)uint64_t v61 = 138412546;
        unint64_t v63 = *(void **)(*(void *)(v60 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
        *(void *)(v61 + 4) = v63;
        void *v62 = v63;
        id v64 = v63;
        swift_release_n(v60, 2LL);
        *(_WORD *)(v61 + 12) = 2114;
        *(void *)(v61 + 14) = isUniquelyReferenced_nonNull_native;
        v62[1] = isUniquelyReferenced_nonNull_native;

        _os_log_impl((void *)&_mh_execute_header, v52, v58, "[%@] ├ UPD %{public}@", (uint8_t *)v61, 0x16u);
        uint64_t v65 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v62, 2LL, v65);
        unint64_t v66 = v62;
        uint64_t v50 = v270;
        swift_slowDealloc(v66, -1LL, -1LL);
        swift_slowDealloc(v61, -1LL, -1LL);
      }

      else
      {

        swift_release_n(v60, 2LL);
        unint64_t v52 = (os_log_s *)isUniquelyReferenced_nonNull_native;
      }

      ++v1;
      uint64_t v53 = *(void *)(v0 + 592);
      uint64_t v54 = *(void *)(v0 + 536);

      v272(v53, v54);
    }

    while (v14 != v1);
LABEL_36:
    swift_bridgeObjectRelease(v50);
    unint64_t v73 = v264;
    uint64_t v74 = *(void *)(v264 + 16);
    if (v74)
    {
      unint64_t v244 = v0 + 16;
      aBlock = (void *)(v0 + 96);
      v266 = (_OWORD *)(v0 + 144);
      v245 = (_OWORD *)(v0 + 208);
      v259 = (_OWORD *)(v0 + 240);
      v256 = (_OWORD *)(v0 + 272);
      v263 = (uint64_t *)(v0 + 336);
      unint64_t v255 = v0 + 432;
      unint64_t v243 = v0 + 440;
      v241 = (_OWORD *)(v0 + 176);
      v261 = (void **)(v0 + 360);
      v242 = (void *)(v0 + 424);
      v247 = (void *)(v0 + 448);
      v253 = (void **)(v0 + 464);
      v254 = (uint64_t *)(v0 + 416);
      *(void *)(v0 + 336) = _swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v50);
      v75 = (unint64_t *)(v264 + 40);
      v270 = (void *)v0;
      uint64_t v257 = *(void *)(v0 + 704);
      do
      {
        id v76 = (os_log_s *)*(v75 - 1);
        unint64_t v0 = *v75;
        swift_bridgeObjectRetain_n(*v75, 2LL);
        uint64_t v77 = sub_10007BF40(v76, v0);
        if ((v78 & 1) != 0)
        {
          swift_bridgeObjectRelease(v0);
        }

        else
        {
          uint64_t v79 = v77;
          v267 = v76;
          id v80 = objc_msgSend(objc_allocWithZone(NSNumber), "initWithInteger:", v77, aBlock);
          id v81 = objc_allocWithZone((Class)&OBJC_CLASS___ApplicationProxy);
          *v261 = 0LL;
          id v82 = [v81 initWithItemID:v80 error:v261];
          v83 = *v261;
          uint64_t v269 = v74;
          if (v82)
          {
            uint64_t v84 = v82;
            id v85 = v83;

            v86 = (void *)sub_10001DA2C((uint64_t)_swiftEmptyArrayStorage);
            id v87 = [v84 bundleID];
            if (v87)
            {
              uint64_t v88 = v87;
              uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
              uint64_t v1 = v90;

              int64_t v14 = (int64_t)v270;
              v270[29] = &type metadata for String;
              v270[26] = v89;
              v270[27] = v1;
              sub_100015330(v245, v259);
              unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v86);
              v270[58] = v86;
              unint64_t v92 = sub_100023F7C(0x4449656C646E7562LL, 0xE800000000000000LL);
              unint64_t v17 = v86[2];
              BOOL v93 = (v91 & 1) == 0;
              uint64_t v94 = v17 + v93;
              if (__OFADD__(v17, v93)) {
                goto LABEL_115;
              }
              char v95 = v91;
              if (v86[3] >= v94)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                  sub_10007A1D0();
                }
              }

              else
              {
                sub_100076E38(v94, isUniquelyReferenced_nonNull_native);
                unint64_t v96 = sub_100023F7C(0x4449656C646E7562LL, 0xE800000000000000LL);
                if ((v95 & 1) != (v97 & 1)) {
                  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
                }
                unint64_t v92 = v96;
              }

              v86 = *v253;
              if ((v95 & 1) != 0)
              {
                uint64_t v127 = (void *)(v86[7] + 32 * v92);
                sub_100015340(v127);
                sub_100015330(v259, v127);
              }

              else
              {
                sub_100079E5C(v92, 0x4449656C646E7562LL, 0xE800000000000000LL, v259, *v253);
              }

              swift_bridgeObjectRelease(0x8000000000000000LL);
            }

            else
            {
              swift_bridgeObjectRetain(v86);
              unint64_t v122 = sub_100023F7C(0x4449656C646E7562LL, 0xE800000000000000LL);
              char v124 = v123;
              swift_bridgeObjectRelease(v86);
              if ((v124 & 1) != 0)
              {
                char v125 = swift_isUniquelyReferenced_nonNull_native(v86);
                void *v247 = v86;
                if ((v125 & 1) == 0)
                {
                  sub_10007A1D0();
                  v86 = (void *)*v247;
                }

                swift_bridgeObjectRelease(*(void *)(v86[6] + 16 * v122 + 8));
                uint64_t v126 = (uint64_t)v241;
                sub_100015330((_OWORD *)(v86[7] + 32 * v122), v241);
                sub_100067EA4(v122, (uint64_t)v86);
                swift_bridgeObjectRelease(0x8000000000000000LL);
              }

              else
              {
                uint64_t v126 = (uint64_t)v241;
                _OWORD *v241 = 0u;
                v241[1] = 0u;
              }

              sub_100015240(v126, (uint64_t *)&unk_1004594B0);
            }

            v270[37] = &type metadata for Int;
            v270[34] = v79;
            sub_100015330(v256, v266);
            uint64_t v128 = swift_isUniquelyReferenced_nonNull_native(v86);
            v270[51] = v86;
            int64_t v14 = sub_100023F7C(0x44496D657469LL, 0xE600000000000000LL);
            unint64_t v17 = v86[2];
            BOOL v130 = (v129 & 1) == 0;
            uint64_t v131 = v17 + v130;
            if (__OFADD__(v17, v130))
            {
              __break(1u);
LABEL_115:
              __break(1u);
LABEL_116:
              __break(1u);
              goto LABEL_117;
            }

            char v132 = v129;
            if (v86[3] >= v131)
            {
              if ((v128 & 1) == 0) {
                sub_10007A1D0();
              }
            }

            else
            {
              sub_100076E38(v131, v128);
              unint64_t v133 = sub_100023F7C(0x44496D657469LL, 0xE600000000000000LL);
              if ((v132 & 1) != (v134 & 1)) {
                return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
              }
              int64_t v14 = v133;
            }

            uint64_t v135 = (void *)*v262;
            if ((v132 & 1) != 0)
            {
              uint64_t v136 = (void *)(v135[7] + 32 * v14);
              sub_100015340(v136);
              sub_100015330(v266, v136);
            }

            else
            {
              v135[((unint64_t)v14 >> 6) + 8] |= 1LL << v14;
              uint64_t v137 = (void *)(v135[6] + 16 * v14);
              *uint64_t v137 = 0x44496D657469LL;
              v137[1] = 0xE600000000000000LL;
              sub_100015330(v266, (_OWORD *)(v135[7] + 32 * v14));
              uint64_t v138 = v135[2];
              BOOL v139 = __OFADD__(v138, 1LL);
              unint64_t v17 = v138 + 1;
              if (v139) {
                goto LABEL_116;
              }
              v135[2] = v17;
            }

            swift_bridgeObjectRelease(0x8000000000000000LL);
            v140 = (void *)*v263;
            uint64_t v141 = swift_isUniquelyReferenced_nonNull_native(*v263);
            uint64_t *v263 = (uint64_t)v140;
            if ((v141 & 1) == 0)
            {
              uint64_t v141 = (uint64_t)sub_100088780(0LL, v140[2] + 1LL, 1, v140);
              v140 = (void *)v141;
              uint64_t *v263 = v141;
            }

            unint64_t isUniquelyReferenced_nonNull_native = v140[2];
            unint64_t v142 = v140[3];
            if (isUniquelyReferenced_nonNull_native >= v142 >> 1)
            {
              uint64_t v141 = (uint64_t)sub_100088780((void *)(v142 > 1), isUniquelyReferenced_nonNull_native + 1, 1, v140);
              v140 = (void *)v141;
              uint64_t *v263 = v141;
            }

            uint64_t v143 = v270[66];
            v140[2] = isUniquelyReferenced_nonNull_native + 1;
            v140[isUniquelyReferenced_nonNull_native + 4] = v135;
            static Logger.updates.getter(v141);
            swift_retain_n(v143, 2LL);
            id v144 = v84;
            swift_bridgeObjectRetain(v0);
            id v145 = v144;
            v146 = (os_log_s *)Logger.logObject.getter(v145);
            os_log_type_t v147 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v146, v147))
            {
              os_log_type_t v250 = v147;
              log = v146;
              uint64_t v148 = *v246;
              uint64_t v149 = swift_slowAlloc(32LL, -1LL);
              v150 = v145;
              v151 = (void *)swift_slowAlloc(8LL, -1LL);
              uint64_t v251 = swift_slowAlloc(64LL, -1LL);
              uint64_t *v254 = v251;
              *(_DWORD *)uint64_t v149 = 138412802;
              v152 = *(void **)(*(void *)(v148 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
              void *v242 = v152;
              id v153 = v152;
              unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)v151;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v242, v255, v149 + 4, v149 + 12);
              void *v151 = v152;
              swift_release_n(v148, 2LL);
              *(_WORD *)(v149 + 12) = 2082;
              id v154 = [v150 bundleID];
              if (v154)
              {
                v155 = v154;
                uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v154);
                unint64_t v158 = v157;
              }

              else
              {
                uint64_t v156 = 0LL;
                unint64_t v158 = 0xE000000000000000LL;
              }

              uint64_t v248 = v270[67];
              uint64_t v249 = v270[73];
              uint64_t v163 = v156;
              uint64_t v1 = (uint64_t)v254;
              v270[54] = sub_100088DB4(v163, v158, v254);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v255, v243, v149 + 14, v149 + 22);
              swift_bridgeObjectRelease(v158);

              *(_WORD *)(v149 + 22) = 2082;
              swift_bridgeObjectRetain(v0);
              v270[55] = sub_100088DB4((uint64_t)v267, v0, v254);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v243, v247, v149 + 24, v149 + 32);
              swift_bridgeObjectRelease_n(v0, 3LL);
              _os_log_impl( (void *)&_mh_execute_header,  log,  v250,  "[%@] ├ DEF { bundleID: %{public}s itemID: %{public}s }",  (uint8_t *)v149,  0x20u);
              uint64_t v164 = sub_1000079A0((uint64_t *)&unk_100458F50);
              swift_arrayDestroy(v151, 1LL, v164);
              swift_slowDealloc(v151, -1LL, -1LL);
              swift_arrayDestroy(v251, 2LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v251, -1LL, -1LL);
              swift_slowDealloc(v149, -1LL, -1LL);

              uint64_t v162 = v248;
              uint64_t v161 = v249;
            }

            else
            {
              uint64_t v159 = v270[73];
              uint64_t v160 = v270[67];
              uint64_t v1 = v270[66];

              swift_release_n(v1, 2LL);
              swift_bridgeObjectRelease_n(v0, 2LL);

              uint64_t v161 = v159;
              uint64_t v162 = v160;
            }

            v272(v161, v162);
          }

          else
          {
            id v98 = v83;
            uint64_t v99 = _convertNSErrorToError(_:)(v83);

            uint64_t v258 = v99;
            swift_willThrow(v100);

            uint64_t v101 = sub_1000079A0((uint64_t *)&unk_100458520);
            uint64_t inited = swift_initStackObject(v101, v244);
            *(_OWORD *)(inited + 16) = xmmword_100372930;
            *(void *)(inited + 32) = 0x44496D657469LL;
            *(void *)(inited + 40) = 0xE600000000000000LL;
            *(void *)(inited + 72) = &type metadata for String;
            *(void *)(inited + 48) = v267;
            *(void *)(inited + 56) = v0;
            swift_bridgeObjectRetain(v0);
            unint64_t v103 = sub_10001DA2C(inited);
            int v104 = (void *)*v263;
            uint64_t v105 = swift_isUniquelyReferenced_nonNull_native(*v263);
            uint64_t *v263 = (uint64_t)v104;
            if ((v105 & 1) == 0)
            {
              uint64_t v105 = (uint64_t)sub_100088780(0LL, v104[2] + 1LL, 1, v104);
              int v104 = (void *)v105;
              uint64_t *v263 = v105;
            }

            unint64_t v107 = v104[2];
            unint64_t v106 = v104[3];
            if (v107 >= v106 >> 1)
            {
              uint64_t v105 = (uint64_t)sub_100088780((void *)(v106 > 1), v107 + 1, 1, v104);
              int v104 = (void *)v105;
              uint64_t *v263 = v105;
            }

            uint64_t v108 = v270[66];
            v104[2] = v107 + 1;
            v104[v107 + 4] = v103;
            static Logger.updates.getter(v105);
            swift_retain_n(v108, 2LL);
            uint64_t v109 = swift_bridgeObjectRetain(v0);
            uint64_t v110 = (os_log_s *)Logger.logObject.getter(v109);
            os_log_type_t v111 = static os_log_type_t.default.getter();
            unint64_t isUniquelyReferenced_nonNull_native = v111;
            BOOL v112 = os_log_type_enabled(v110, v111);
            uint64_t v1 = v270[70];
            uint64_t v113 = v270[67];
            uint64_t v114 = v270[66];
            if (v112)
            {
              uint64_t v115 = swift_slowAlloc(22LL, -1LL);
              uint64_t v116 = (void *)swift_slowAlloc(8LL, -1LL);
              uint64_t v117 = v1;
              uint64_t v1 = swift_slowAlloc(32LL, -1LL);
              v275[0] = v1;
              *(_DWORD *)uint64_t v115 = 138412546;
              uint64_t v118 = *(void **)(*(void *)(v114 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
              *(void *)(v115 + 4) = v118;
              void *v116 = v118;
              id v119 = v118;
              swift_release_n(v114, 2LL);
              *(_WORD *)(v115 + 12) = 2082;
              swift_bridgeObjectRetain(v0);
              *(void *)(v115 + 14) = sub_100088DB4((uint64_t)v267, v0, v275);
              swift_bridgeObjectRelease_n(v0, 3LL);
              _os_log_impl( (void *)&_mh_execute_header,  v110,  (os_log_type_t)isUniquelyReferenced_nonNull_native,  "[%@] Found deferred update but not proxy for for itemID: %{public}s",  (uint8_t *)v115,  0x16u);
              uint64_t v120 = sub_1000079A0((uint64_t *)&unk_100458F50);
              swift_arrayDestroy(v116, 1LL, v120);
              swift_slowDealloc(v116, -1LL, -1LL);
              swift_arrayDestroy(v1, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v1, -1LL, -1LL);
              swift_slowDealloc(v115, -1LL, -1LL);
              swift_errorRelease(v258);

              uint64_t v121 = v117;
            }

            else
            {
              swift_release_n(v270[66], 2LL);
              swift_bridgeObjectRelease_n(v0, 2LL);
              swift_errorRelease(v258);

              uint64_t v121 = v1;
            }

            v272(v121, v113);
            uint64_t v257 = 0LL;
          }

          unint64_t v73 = v264;
          uint64_t v74 = v269;
        }

        v75 += 2;
        --v74;
      }

      while (v74);
      swift_bridgeObjectRelease(v73);
      if (*(void *)(*v263 + 16))
      {
        unint64_t v0 = (unint64_t)v270;
        v165 = *(void **)(*(void *)(v270[66] + 16LL) + OBJC_IVAR____TtC9appstored14UpdatesContext_requestToken);
        uint64_t v166 = objc_opt_self(&OBJC_CLASS___DiagnosticPublisher);
        id v167 = sub_1001AEE6C(v166, v165);
        uint64_t v26 = v270[80];
        unint64_t isUniquelyReferenced_nonNull_native = v270[79];
        uint64_t v25 = v257;
        if (v167)
        {
          uint64_t v168 = (uint64_t)v167;
          uint64_t v169 = swift_allocObject(&unk_1003DC248, 24LL, 7LL);
          *(void *)(v169 + 16) = v263;
          sub_10001527C(isUniquelyReferenced_nonNull_native, v26);
          uint64_t v170 = swift_allocObject(&unk_1003DC270, 32LL, 7LL);
          unint64_t isUniquelyReferenced_nonNull_native = (unint64_t)sub_1000152E0;
          *(void *)(v170 + 16) = sub_1000152E0;
          *(void *)(v170 + 24) = v169;
          v270[16] = sub_1000152F8;
          v270[17] = v170;
          v270[12] = _NSConcreteStackBlock;
          v270[13] = 1107296256LL;
          v270[14] = sub_10000CF5C;
          v270[15] = &unk_1003DC288;
          v171 = _Block_copy(aBlock);
          uint64_t v172 = v270[17];
          swift_retain(v170);
          swift_release(v172);
          sub_1001AEEE8(v168, 1101LL, v171);

          _Block_release(v171);
          LOBYTE(v168) = swift_isEscapingClosureAtFileLocation(v170, "", 105LL, 109LL, 76LL, 1LL);
          swift_release(v170);
          if ((v168 & 1) != 0) {
            __break(1u);
          }
          uint64_t v26 = v169;
        }
      }

      else
      {
        unint64_t v0 = (unint64_t)v270;
        uint64_t v26 = v270[80];
        unint64_t isUniquelyReferenced_nonNull_native = v270[79];
        uint64_t v25 = v257;
      }

      uint64_t v173 = swift_bridgeObjectRelease(*v263);
    }

    else
    {
      swift_bridgeObjectRelease(v50);
      uint64_t v173 = swift_bridgeObjectRelease(v264);
      uint64_t v25 = *(void *)(v0 + 704);
      uint64_t v26 = *(void *)(v0 + 640);
      unint64_t isUniquelyReferenced_nonNull_native = *(void *)(v0 + 632);
    }

    uint64_t v174 = *(void *)(v0 + 528);
    static Logger.updates.getter(v173);
    uint64_t v175 = swift_retain_n(v174, 2LL);
    v176 = (os_log_s *)Logger.logObject.getter(v175);
    os_log_type_t v177 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v176, v177))
    {
      unint64_t v264 = v0 + 344;
      v266 = *(_OWORD **)(v0 + 672);
      v267 = *(os_log_s **)(v0 + 656);
      uint64_t v269 = *(void *)(v0 + 664);
      v178 = *(uint64_t **)(v0 + 528);
      v263 = v178;
      v270 = (void *)v26;
      v179 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v180 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)v179 = 138412290;
      uint64_t v181 = v178[2];
      unint64_t v182 = isUniquelyReferenced_nonNull_native;
      v183 = *(void **)(v181 + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(v0 + 344) = v183;
      id v184 = v183;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v179 + 4, v179 + 12);
      void *v180 = v183;
      unint64_t isUniquelyReferenced_nonNull_native = v182;
      swift_release_n(v263, 2LL);
      _os_log_impl((void *)&_mh_execute_header, v176, v177, "[%@] ╘", v179, 0xCu);
      uint64_t v185 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v180, 1LL, v185);
      swift_slowDealloc(v180, -1LL, -1LL);
      v186 = v179;
      uint64_t v26 = (uint64_t)v270;
      swift_slowDealloc(v186, -1LL, -1LL);

      swift_bridgeObjectRelease(v267);
      swift_bridgeObjectRelease(v269);
    }

    else
    {
      uint64_t v187 = *(void *)(v0 + 664);
      uint64_t v188 = *(void *)(v0 + 528);
      swift_bridgeObjectRelease(*(void *)(v0 + 656));
      swift_bridgeObjectRelease(v187);
      swift_release_n(v188, 2LL);

      v176 = *(os_log_s **)(v0 + 672);
    }

    int64_t v14 = *(void *)(v0 + 576);
    uint64_t v1 = *(void *)(v0 + 536);

    v272(v14, v1);
LABEL_100:
    unint64_t v17 = *(void *)(v0 + 648) + 1LL;
    if (v17 == *(void *)(v0 + 624)) {
      break;
    }
    *(void *)(v0 + 648) = v17;
    *(void *)(v0 + 640) = v26;
    *(void *)(v0 + 632) = isUniquelyReferenced_nonNull_native;
    uint64_t v197 = *(void *)(v0 + 616);
    if (v17 < *(void *)(v197 + 16))
    {
      v198 = (void *)(v197 + 32 * v17);
      uint64_t v199 = v198[5];
      *(void *)(v0 + 656) = v199;
      uint64_t v200 = v198[7];
      *(void *)(v0 + 664) = v200;
      uint64_t v201 = v198[6];
      v202 = (void *)v198[4];
      *(void *)(v0 + 672) = v202;
      uint64_t v203 = dword_1004585DC;
      id v204 = v202;
      swift_bridgeObjectRetain(v199);
      swift_bridgeObjectRetain(v200);
      v205 = (unint64_t *)swift_task_alloc(v203);
      *(void *)(v0 + 680) = v205;
      unint64_t *v205 = v0;
      v205[1] = (unint64_t)sub_10000AAC0;
      return sub_10000DBC8((uint64_t)v202, v199, v201, v200);
    }

LABEL_117:
    __break(1u);
LABEL_118:
    __break(1u);
LABEL_119:
    uint64_t v19 = v270;
    else {
      v239 = v270;
    }
    swift_bridgeObjectRetain(v270);
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v239);
    swift_bridgeObjectRelease(v270);
  }

  swift_bridgeObjectRelease(*(void *)(v0 + 616));
  if ((*(_BYTE *)(*(void *)(v0 + 528)
                 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_shouldWriteUpdatingMapping) & 1) != 0)
  {
    uint64_t v189 = type metadata accessor for PropertyListEncoder(0LL);
    swift_allocObject(v189, *(unsigned int *)(v189 + 48), *(unsigned __int16 *)(v189 + 52));
    uint64_t v190 = PropertyListEncoder.init()();
    uint64_t v191 = sub_100009B6C();
    *(void *)(v0 + 456) = v191;
    uint64_t v192 = sub_1000079A0(&qword_100458728);
    uint64_t v193 = sub_100015360( &qword_100458730,  (uint64_t)&protocol witness table for Int64,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    uint64_t v194 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v0 + 456, v192, v193);
    if (v25)
    {
      swift_bridgeObjectRelease(v191);
      uint64_t v196 = swift_release(v190);
      uint64_t v271 = v26;
      unint64_t v274 = isUniquelyReferenced_nonNull_native;
      uint64_t v209 = *(void *)(v0 + 528);
      static Logger.updates.getter(v196);
      swift_retain(v209);
      swift_errorRetain(v25, v210);
      swift_retain(v209);
      uint64_t v212 = swift_errorRetain(v25, v211);
      v213 = (os_log_s *)Logger.logObject.getter(v212);
      os_log_type_t v214 = static os_log_type_t.error.getter();
      BOOL v215 = os_log_type_enabled(v213, v214);
      uint64_t v216 = *(void *)(v0 + 552);
      uint64_t v217 = *(void *)(v0 + 544);
      uint64_t v218 = *(void *)(v0 + 536);
      uint64_t v219 = *(void *)(v0 + 528);
      if (v215)
      {
        uint64_t v220 = swift_slowAlloc(22LL, -1LL);
        v221 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v265 = swift_slowAlloc(32LL, -1LL);
        v275[0] = v265;
        *(_DWORD *)uint64_t v220 = 138412546;
        uint64_t v268 = v218;
        v260 = v213;
        v222 = *(void **)(*(void *)(v219 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
        *(void *)(v0 + 400) = v222;
        id v223 = v222;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v262, v220 + 4, v220 + 12);
        void *v221 = v222;
        swift_release_n(v219, 2LL);
        *(_WORD *)(v220 + 12) = 2082;
        *(void *)(v0 + 384) = v25;
        swift_errorRetain(v25, v224);
        uint64_t v225 = sub_1000079A0(&qword_100459B50);
        uint64_t v226 = String.init<A>(describing:)(v0 + 384, v225);
        unint64_t v228 = v227;
        *(void *)(v0 + 376) = sub_100088DB4(v226, v227, v275);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 376, v0 + 384, v220 + 14, v220 + 22);
        swift_bridgeObjectRelease(v228);
        swift_errorRelease(v25);
        swift_errorRelease(v25);
        _os_log_impl( (void *)&_mh_execute_header,  v260,  v214,  "[%@] Error saving cached storefront mapping: %{public}s",  (uint8_t *)v220,  0x16u);
        uint64_t v229 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v221, 1LL, v229);
        swift_slowDealloc(v221, -1LL, -1LL);
        swift_arrayDestroy(v265, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v265, -1LL, -1LL);
        swift_slowDealloc(v220, -1LL, -1LL);

        swift_errorRelease(v25);
        (*(void (**)(uint64_t, uint64_t))(v217 + 8))(v216, v268);
      }

      else
      {
        swift_errorRelease(v25);
        swift_release_n(v219, 2LL);
        swift_errorRelease(v25);
        swift_errorRelease(v25);

        (*(void (**)(uint64_t, uint64_t))(v217 + 8))(v216, v218);
      }

      uint64_t v231 = v271;
      uint64_t v230 = v274;
      goto LABEL_112;
    }

    uint64_t v206 = v194;
    unint64_t v207 = v195;
    uint64_t v208 = *(void *)(v0 + 528);
    swift_bridgeObjectRelease(v191);
    swift_release(v190);
    Data.write(to:options:)( v208 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_cachedStorefrontMappingURL,  0LL,  v206,  v207);
    sub_100007B14(v206, v207);
  }

  uint64_t v230 = isUniquelyReferenced_nonNull_native;
  uint64_t v231 = v26;
LABEL_112:
  sub_10001527C(v230, v231);
  uint64_t v232 = *(void *)(v0 + 592);
  uint64_t v233 = *(void *)(v0 + 584);
  uint64_t v234 = *(void *)(v0 + 576);
  uint64_t v235 = *(void *)(v0 + 568);
  uint64_t v236 = *(void *)(v0 + 560);
  uint64_t v237 = *(void *)(v0 + 552);
  uint64_t v238 = *(void *)(v0 + 392);
  swift_task_dealloc(*(void *)(v0 + 600));
  swift_task_dealloc(v232);
  swift_task_dealloc(v233);
  swift_task_dealloc(v234);
  swift_task_dealloc(v235);
  swift_task_dealloc(v236);
  swift_task_dealloc(v237);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v238);
}

      if (v1)
      {
        char v123 = v3;
        char v124 = v1;
        unint64_t v0 = (uint64_t)NSNumber.init(integerLiteral:)(0LL).super.super.isa;
        char v125 = static NSObject.== infix(_:_:)(v124, v0);

        if ((v125 & 1) != 0)
        {

          uint64_t v117 = 0LL;
          uint64_t v3 = v123;
          if (!v106) {
            goto LABEL_124;
          }
        }

        else
        {
          unint64_t v0 = (uint64_t)objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
          uint64_t v117 = objc_msgSend((id)v0, "ams_iTunesAccountWithDSID:", v124);

          uint64_t v3 = v123;
          if (!v106) {
            goto LABEL_124;
          }
        }
      }

      else
      {
        uint64_t v117 = 0LL;
        if (!v106) {
          goto LABEL_124;
        }
      }

uint64_t sub_10000C694(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 704);
  uint64_t v3 = *(void *)(v1 + 528);
  static Logger.updates.getter(a1);
  swift_retain(v3);
  swift_errorRetain(v2, v4);
  swift_retain(v3);
  uint64_t v6 = swift_errorRetain(v2, v5);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v54 = *(void *)(v1 + 704);
    id v56 = *(void **)(v1 + 672);
    *(void *)type = *(void *)(v1 + 656);
    uint64_t v58 = *(void *)(v1 + 664);
    uint64_t v59 = *(void *)(v1 + 544);
    uint64_t v60 = *(void *)(v1 + 536);
    uint64_t v61 = *(void *)(v1 + 568);
    uint64_t v9 = *(void *)(v1 + 528);
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    unint64_t v11 = (void *)swift_slowAlloc(8LL, -1LL);
    os_log_t log = (os_log_t)swift_slowAlloc(32LL, -1LL);
    v62[0] = log;
    *(_DWORD *)uint64_t v10 = 138412546;
    uint64_t v12 = *(void **)(*(void *)(v9 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v1 + 368) = v12;
    id v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 368, v1 + 376, v10 + 4, v10 + 12);
    void *v11 = v12;
    swift_release_n(v9, 2LL);
    *(_WORD *)(v10 + 12) = 2082;
    swift_getErrorValue(v54, v1 + 352, v1 + 304);
    uint64_t v14 = Error.localizedDescription.getter(*(void *)(v1 + 312), *(void *)(v1 + 320));
    unint64_t v16 = v15;
    *(void *)(v1 + 328) = sub_100088DB4(v14, v15, (uint64_t *)v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 328, v1 + 336, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v16);
    swift_errorRelease(v54);
    swift_errorRelease(v54);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[%@] error requesting updates: %{public}s",  (uint8_t *)v10,  0x16u);
    uint64_t v17 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v11, 1LL, v17);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_arrayDestroy(log, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(log, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_bridgeObjectRelease(*(void *)type);
    swift_bridgeObjectRelease(v58);
    swift_errorRelease(v54);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v61, v60);
  }

  else
  {
    uint64_t v18 = *(void *)(v1 + 704);
    uint64_t v19 = *(void **)(v1 + 672);
    uint64_t v20 = *(void *)(v1 + 664);
    uint64_t v21 = *(void *)(v1 + 568);
    uint64_t v22 = *(void *)(v1 + 544);
    uint64_t v23 = *(void *)(v1 + 536);
    uint64_t v24 = *(void *)(v1 + 528);
    swift_bridgeObjectRelease(*(void *)(v1 + 656));
    swift_bridgeObjectRelease(v20);

    swift_errorRelease(v18);
    swift_release_n(v24, 2LL);
    swift_errorRelease(v18);
    swift_errorRelease(v18);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }

  uint64_t v25 = *(void *)(v1 + 640);
  uint64_t v26 = *(void *)(v1 + 632);
  unint64_t v27 = *(void *)(v1 + 648) + 1LL;
  if (v27 == *(void *)(v1 + 624))
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 616));
    if (*(_BYTE *)(*(void *)(v1 + 528)
                  + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_shouldWriteUpdatingMapping) == 1)
    {
      uint64_t v28 = type metadata accessor for PropertyListEncoder(0LL);
      swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
      uint64_t v29 = PropertyListEncoder.init()();
      uint64_t v30 = sub_100009B6C();
      *(void *)(v1 + 456) = v30;
      uint64_t v31 = sub_1000079A0(&qword_100458728);
      uint64_t v32 = sub_100015360( &qword_100458730,  (uint64_t)&protocol witness table for Int64,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
      uint64_t v43 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v1 + 456, v31, v32);
      unint64_t v45 = v44;
      uint64_t v46 = *(void *)(v1 + 528);
      swift_bridgeObjectRelease(v30);
      swift_release(v29);
      Data.write(to:options:)( v46 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_cachedStorefrontMappingURL,  0LL,  v43,  v45);
      sub_100007B14(v43, v45);
    }

    sub_10001527C(v26, v25);
    uint64_t v47 = *(void *)(v1 + 592);
    uint64_t v48 = *(void *)(v1 + 584);
    uint64_t v49 = *(void *)(v1 + 576);
    uint64_t v50 = *(void *)(v1 + 568);
    uint64_t v51 = *(void *)(v1 + 560);
    uint64_t v52 = *(void *)(v1 + 552);
    uint64_t v53 = *(void *)(v1 + 392);
    swift_task_dealloc(*(void *)(v1 + 600));
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v53);
  }

  else
  {
    *(void *)(v1 + 648) = v27;
    *(void *)(v1 + 640) = v25;
    *(void *)(v1 + 632) = v26;
    uint64_t v33 = *(void *)(v1 + 616);
    if (v27 >= *(void *)(v33 + 16)) {
      __break(1u);
    }
    id v34 = (void *)(v33 + 32 * v27);
    uint64_t v35 = v34[5];
    *(void *)(v1 + 656) = v35;
    uint64_t v36 = v34[7];
    *(void *)(v1 + 664) = v36;
    uint64_t v37 = v34[6];
    uint64_t v38 = (void *)v34[4];
    *(void *)(v1 + 672) = v38;
    uint64_t v39 = dword_1004585DC;
    id v40 = v38;
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(v36);
    id v41 = (void *)swift_task_alloc(v39);
    *(void *)(v1 + 680) = v41;
    void *v41 = v1;
    v41[1] = sub_10000AAC0;
    return sub_10000DBC8((uint64_t)v38, v35, v37, v36);
  }

void sub_10000CE74(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
  {
    id v4 = objc_allocWithZone((Class)type metadata accessor for MediaAPIUpdate());
    uint64_t v6 = sub_100074BDC(v3, v5);

    id v3 = v6;
  }

  *a2 = v3;
}

void sub_10000CED4(id *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v5 = @"deferredUpdates";
  swift_bridgeObjectRetain(v3);
  sub_1000079A0(&qword_100459DC0);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  sub_100286808(a1, (uint64_t)isa, (uint64_t)v5);
}

void sub_10000CF5C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_10000CF90(uint64_t a1)
{
  v2[24] = a1;
  v2[25] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[26] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[27] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[28] = swift_task_alloc(v5);
  v2[29] = swift_task_alloc(v5);
  v2[30] = swift_task_alloc(v5);
  return swift_task_switch(sub_10000D00C, 0LL, 0LL);
}

uint64_t sub_10000D00C()
{
  id v1 = [*(id *)(v0 + 192) longLongValue];
  uint64_t v2 = sub_100009B6C();
  if (*(void *)(v2 + 16))
  {
    unint64_t v3 = sub_100023FE0((uint64_t)v1);
    if ((v4 & 1) != 0)
    {
      unint64_t v5 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v3);
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRelease(v2);
LABEL_13:
      uint64_t v56 = *(void *)(v0 + 232);
      uint64_t v57 = *(void *)(v0 + 224);
      swift_task_dealloc(*(void *)(v0 + 240));
      swift_task_dealloc(v56);
      swift_task_dealloc(v57);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v7, v6);
    }
  }

  swift_bridgeObjectRelease(v2);
  id v8 = objc_allocWithZone(&OBJC_CLASS___ACAccountType);
  NSString v9 = String._bridgeToObjectiveC()();
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v8 initWithIdentifier:v9 description:v10];

  id v12 = [objc_allocWithZone(ACAccount) initWithAccountType:v11];
  *(void *)(v0 + 248) = v12;

  uint64_t v14 = *(void **)(v0 + 192);
  uint64_t v15 = *(void *)(v0 + 200);
  if (!v12)
  {
    static Logger.updates.getter(v13);
    swift_retain_n(v15, 2LL);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v33 = static os_log_type_t.error.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v35 = *(void **)(v0 + 192);
    uint64_t v36 = *(void *)(v0 + 200);
    if (v34)
    {
      uint64_t v37 = swift_slowAlloc(22LL, -1LL);
      typea = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v37 = 138412546;
      os_log_type_t v61 = v33;
      uint64_t v38 = v32;
      uint64_t v39 = *(void **)(*(void *)(v36 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(v0 + 144) = v39;
      id v40 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v37 + 4, v37 + 12);
      void *typea = v39;
      uint64_t v32 = v38;
      swift_release_n(v36, 2LL);
      *(_WORD *)(v37 + 12) = 2114;
      *(void *)(v0 + 136) = v35;
      id v41 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v37 + 14, v37 + 22);
      typea[1] = v35;

      _os_log_impl( (void *)&_mh_execute_header,  v38,  v61,  "[%@] Unable to create an account for %{public}@",  (uint8_t *)v37,  0x16u);
      uint64_t v42 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(typea, 2LL, v42);
      swift_slowDealloc(typea, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {
      swift_release_n(*(void *)(v0 + 200), 2LL);
    }

    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8LL))(*(void *)(v0 + 224), *(void *)(v0 + 208));
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
    goto LABEL_13;
  }

  id v16 = [*(id *)(v0 + 192) description];
  static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
  uint64_t v18 = v17;

  v19._countAndFlagsBits = 12589LL;
  v19._object = (void *)0xE200000000000000LL;
  String.append(_:)(v19);
  NSString v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  objc_msgSend(v12, "ams_setStorefront:", v20);

  static Logger.updates.getter(v21);
  swift_retain_n(v15, 2LL);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v25 = *(void **)(v0 + 192);
  uint64_t v26 = *(void *)(v0 + 200);
  if (v24)
  {
    os_log_type_t type = v23;
    uint64_t v27 = swift_slowAlloc(22LL, -1LL);
    uint64_t v58 = (void *)swift_slowAlloc(16LL, -1LL);
    *(_DWORD *)uint64_t v27 = 138412546;
    uint64_t v28 = *(void **)(*(void *)(v26 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v0 + 176) = v28;
    id v29 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v27 + 4, v27 + 12);
    *uint64_t v58 = v28;
    swift_release_n(v26, 2LL);
    *(_WORD *)(v27 + 12) = 2114;
    *(void *)(v0 + 184) = v25;
    id v30 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v27 + 14, v27 + 22);
    v58[1] = v25;

    _os_log_impl( (void *)&_mh_execute_header,  v22,  type,  "[%@] Looking up country code for %{public}@",  (uint8_t *)v27,  0x16u);
    uint64_t v31 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v58, 2LL, v31);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
    swift_release_n(*(void *)(v0 + 200), 2LL);
  }

  uint64_t v43 = v0 + 16;
  uint64_t v44 = *(void *)(v0 + 240);
  uint64_t v45 = *(void *)(v0 + 208);
  uint64_t v46 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 216) + 8LL);
  *(void *)(v0 + 256) = v46;
  v46(v44, v45);
  id v47 = [(id)objc_opt_self(AMSProcessInfo) currentProcess];
  id v48 = v12;
  NSString v49 = String._bridgeToObjectiveC()();
  NSString v50 = String._bridgeToObjectiveC()();
  id v51 =  [(id)objc_opt_self(AMSBag) bagForProfile:v49 profileVersion:v50 processInfo:v47 account:v48];
  *(void *)(v0 + 264) = v51;

  id v52 = [v51 stringForKey:@"countryCode"];
  *(void *)(v0 + 272) = v52;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_10000D6AC;
  uint64_t v53 = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 80) = _NSConcreteStackBlock;
  uint64_t v54 = (void *)(v0 + 80);
  v54[1] = 0x40000000LL;
  v54[2] = sub_10000DB38;
  v54[3] = &unk_1003DC220;
  v54[4] = v53;
  [v52 valueWithCompletion:v54];
  return swift_continuation_await(v43);
}

uint64_t sub_10000D6AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 280LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10000D824;
  }
  else {
    uint64_t v2 = sub_10000D70C;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10000D70C()
{
  uint64_t v1 = *(void **)(v0 + 264);
  uint64_t v2 = *(void **)(v0 + 248);
  unint64_t v3 = *(void **)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 200);
  unint64_t v5 = *(void **)(v0 + 120);

  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v8 = v7;
  id v9 = [v3 longLongValue];
  swift_bridgeObjectRetain(v8);
  uint64_t v10 = sub_100009B6C();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_100079044(v6, v8, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  uint64_t v12 = v10;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v13 = *(void *)(v4
                  + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck____lazy_storage___numericStorefrontToCountryCodeMapping);
  *(void *)(v4
            + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck____lazy_storage___numericStorefrontToCountryCodeMapping) = v12;

  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_shouldWriteUpdatingMapping) = 1;
  uint64_t v14 = *(void *)(v0 + 232);
  uint64_t v15 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v6, v8);
}

uint64_t sub_10000D824()
{
  uint64_t v1 = v0;
  uint64_t v4 = v0 + 272;
  unint64_t v3 = *(void **)(v0 + 272);
  uint64_t v2 = *(void *)(v4 + 8);
  uint64_t v5 = *(void *)(v1 + 200);
  swift_willThrow();

  static Logger.updates.getter(v6);
  swift_retain(v5);
  swift_errorRetain(v2, v7);
  swift_retain(v5);
  uint64_t v9 = swift_errorRetain(v2, v8);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v32 = *(void *)(v1 + 280);
    BOOL v34 = *(void **)(v1 + 264);
    uint64_t v35 = *(void **)(v1 + 248);
    uint64_t v37 = *(void *)(v1 + 232);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v1 + 256);
    uint64_t v12 = *(void *)(v1 + 200);
    uint64_t v36 = *(void *)(v1 + 208);
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    uint64_t v39 = v33;
    *(_DWORD *)uint64_t v13 = 138412546;
    uint64_t v15 = *(void **)(*(void *)(v12 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v1 + 152) = v15;
    id v16 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 152, v1 + 160, v13 + 4, v13 + 12);
    void *v14 = v15;
    swift_release_n(v12, 2LL);
    *(_WORD *)(v13 + 12) = 2082;
    *(void *)(v1 + 160) = v32;
    swift_errorRetain(v32, v17);
    uint64_t v18 = sub_1000079A0(&qword_100459B50);
    uint64_t v19 = String.init<A>(describing:)(v1 + 160, v18);
    unint64_t v21 = v20;
    *(void *)(v1 + 168) = sub_100088DB4(v19, v20, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 168, v1 + 176, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v21);
    swift_errorRelease(v32);
    swift_errorRelease(v32);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[%@] Unable to get country code from the bag: %{public}s",  (uint8_t *)v13,  0x16u);
    uint64_t v22 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v14, 1LL, v22);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    swift_errorRelease(v32);
    v38(v37, v36);
  }

  else
  {
    uint64_t v23 = *(void *)(v1 + 280);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v1 + 256);
    BOOL v24 = *(void **)(v1 + 264);
    uint64_t v26 = *(void *)(v1 + 232);
    uint64_t v28 = *(void *)(v1 + 200);
    uint64_t v27 = *(void *)(v1 + 208);

    swift_errorRelease(v23);
    swift_release_n(v28, 2LL);
    swift_errorRelease(v23);
    swift_errorRelease(v23);

    v25(v26, v27);
  }

  uint64_t v29 = *(void *)(v1 + 232);
  uint64_t v30 = *(void *)(v1 + 224);
  swift_task_dealloc(*(void *)(v1 + 240));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(void, void))(v1 + 8))(0LL, 0LL);
}

uint64_t sub_10000DB38(uint64_t result, void *a2, char a3, void *a4)
{
  uint64_t v4 = *(void *)(result + 32);
  if (a4)
  {
    uint64_t v6 = sub_1000079A0(&qword_100459B50);
    uint64_t v7 = swift_allocError(v6, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v8 = a4;
    id v9 = a4;
    return swift_continuation_throwingResumeWithError(v4, v7);
  }

  else if (a2)
  {
    uint64_t v10 = *(void *)(*(void *)(v4 + 64) + 40LL);
    *(void *)uint64_t v10 = a2;
    *(_BYTE *)(v10 + 8) = a3;
    id v11 = a2;
    return swift_continuation_throwingResume(v4);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10000DBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[87] = v4;
  v5[86] = a4;
  v5[85] = a3;
  v5[84] = a2;
  v5[83] = a1;
  uint64_t v6 = sub_1000079A0((uint64_t *)&unk_100459B80);
  v5[88] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  v5[89] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[90] = v8;
  v5[91] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v5[92] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[93] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[94] = swift_task_alloc(v11);
  v5[95] = swift_task_alloc(v11);
  v5[96] = swift_task_alloc(v11);
  v5[97] = swift_task_alloc(v11);
  return swift_task_switch(sub_10000DCD8, 0LL, 0LL);
}

uint64_t sub_10000DCD8(uint64_t a1)
{
  uint64_t v2 = v1[87];
  static Logger.updates.getter(a1);
  uint64_t v3 = swift_retain_n(v2, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v1[87];
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138412290;
    uint64_t v9 = *(void **)(*(void *)(v6 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    v1[82] = v9;
    id v10 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 82, v1 + 83, v7 + 4, v7 + 12);
    *uint64_t v8 = v9;
    swift_release_n(v6, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[%@] Checking the bag for the appropriate language key…",  v7,  0xCu);
    uint64_t v11 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v8, 1LL, v11);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    swift_release_n(v1[87], 2LL);
  }

  uint64_t v12 = v1[97];
  uint64_t v13 = v1[92];
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v1[93] + 8LL);
  v1[98] = v14;
  v14(v12, v13);
  NSString v15 = String._bridgeToObjectiveC()();
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [(id)objc_opt_self(AMSBag) bagForProfile:v15 profileVersion:v16];
  v1[99] = v17;

  id v18 = [v17 stringForKey:@"language-tag"];
  v1[100] = v18;
  v1[15] = v1 + 69;
  v1[10] = v1;
  v1[11] = sub_10000DF9C;
  v1[43] = swift_continuation_init(v1 + 10, 1LL);
  v1[39] = _NSConcreteStackBlock;
  v1[40] = 0x40000000LL;
  v1[41] = sub_10000DB38;
  v1[42] = &unk_1003DC1C0;
  [v18 valueWithCompletion:v1 + 39];
  return swift_continuation_await(v1 + 10);
}

uint64_t sub_10000DF9C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112LL);
  *(void *)(*(void *)v0 + 808LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10000F048;
  }
  else {
    uint64_t v2 = sub_10000E040;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10000E040()
{
  uint64_t v1 = *(void **)(v0 + 552);

  *(void *)(v0 + 816) = v1;
  uint64_t v2 = *(void *)(v0 + 720);
  uint64_t v3 = *(void *)(v0 + 712);
  uint64_t v4 = *(void *)(v0 + 704);
  os_log_type_t v5 = *(void **)(v0 + 688);
  uint64_t v6 = *(void *)(v0 + 680);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v9 = v8;
  sub_10000FAF0(v6, v5, v7, v8, v4);
  swift_bridgeObjectRelease(v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1LL, v3) == 1)
  {
    uint64_t v10 = *(void *)(v0 + 696);
    uint64_t v11 = sub_100015240(*(void *)(v0 + 704), (uint64_t *)&unk_100459B80);
    static Logger.updates.getter(v11);
    uint64_t v12 = swift_retain_n(v10, 2LL);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void *)(v0 + 696);
    if (v15)
    {
      id v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v37 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v17 = 138412290;
      id v18 = *(void **)(*(void *)(v16 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(v0 + 584) = v18;
      id v19 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 584, v0 + 592, v17 + 4, v17 + 12);
      *uint64_t v37 = v18;
      swift_release_n(v16, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "[%@] Not able to retrieve a valid URL to check for updates",  v17,  0xCu);
      uint64_t v20 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v37, 1LL, v20);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      uint64_t v1 = *(void **)(v0 + 792);
    }

    else
    {
      swift_release_n(*(void *)(v0 + 696), 2LL);

      uint64_t v13 = *(os_log_s **)(v0 + 792);
    }

    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
    uint64_t v30 = *(void *)(v0 + 768);
    uint64_t v31 = *(void *)(v0 + 736);

    v29(v30, v31);
    uint64_t v32 = *(void *)(v0 + 768);
    uint64_t v33 = *(void *)(v0 + 760);
    uint64_t v34 = *(void *)(v0 + 752);
    uint64_t v35 = *(void *)(v0 + 728);
    uint64_t v36 = *(void *)(v0 + 704);
    swift_task_dealloc(*(void *)(v0 + 776));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void, void))(v0 + 8))(0LL, 0LL);
  }

  else
  {
    uint64_t v21 = *(void *)(v0 + 696);
    uint64_t v22 = *(void *)(v0 + 664);
    (*(void (**)(void, void, void))(*(void *)(v0 + 720) + 32LL))( *(void *)(v0 + 728),  *(void *)(v0 + 704),  *(void *)(v0 + 712));
    uint64_t v23 = *(void **)(v21 + 32);
    [v23 setAccount:v22];
    URL._bridgeToObjectiveC()(v24);
    uint64_t v26 = v25;
    id v27 = [v23 requestWithURL:v25];
    *(void *)(v0 + 824) = v27;

    *(void *)(v0 + 184) = v0 + 576;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 152) = sub_10000E404;
    *(void *)(v0 + 424) = swift_continuation_init(v0 + 144, 1LL);
    *(void *)(v0 + 392) = _NSConcreteStackBlock;
    *(void *)(v0 + 400) = 0x40000000LL;
    *(void *)(v0 + 408) = sub_10005F988;
    *(void *)(v0 + 416) = &unk_1003DC1F0;
    [v27 resultWithCompletion:v0 + 392];
    return swift_continuation_await(v0 + 144);
  }

uint64_t sub_10000E404()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176LL);
  *(void *)(*(void *)v0 + 832LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10000F8E4;
  }
  else {
    uint64_t v2 = sub_10000E4A8;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10000E4A8()
{
  uint64_t v1 = v0 + 44;
  uint64_t v2 = (void *)v0[103];
  uint64_t v3 = v0[83];
  uint64_t v4 = (void *)v0[72];
  v0[105] = v4;

  id v5 = v4;
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 setHTTPMethod:v6];

  if (!v3) {
    goto LABEL_9;
  }
  uint64_t v7 = (void *)v0[83];
  uint64_t v8 = objc_opt_self(&OBJC_CLASS___AMSKeybag);
  v0[76] = 0LL;
  id v9 = sub_10023FE48(v8, v7, 11LL, v0 + 76);
  uint64_t v10 = (void *)v0[76];
  if (v9)
  {
    uint64_t v11 = v9;
    uint64_t v12 = (void *)v0[83];
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    uint64_t v14 = v13;
    id v15 = v10;

    goto LABEL_10;
  }

  uint64_t v16 = v0[87];
  id v17 = (void *)v0[83];
  id v18 = v10;
  uint64_t v19 = _convertNSErrorToError(_:)(v10);

  uint64_t v21 = swift_willThrow(v20);
  static Logger.updates.getter(v21);
  swift_retain(v16);
  id v22 = v17;
  swift_errorRetain(v19, v23);
  swift_retain(v16);
  id v24 = v22;
  uint64_t v26 = swift_errorRetain(v19, v25);
  id v27 = (void *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled((os_log_t)v27, v28))
  {
    uint64_t v44 = (void (*)(uint64_t, uint64_t))v0[98];
    uint64_t v45 = v0[94];
    uint64_t v46 = v0[92];
    uint64_t v47 = v0[87];
    id v48 = (void *)v0[83];

    swift_errorRelease(v19);
    swift_release_n(v47, 2LL);

    swift_errorRelease(v19);
    swift_errorRelease(v19);

    v44(v45, v46);
    uint64_t v3 = 0LL;
LABEL_9:
    uint64_t v14 = 0LL;
    goto LABEL_10;
  }

  os_log_type_t v78 = v28;
  os_log_t log = (os_log_s *)v27;
  id v76 = v0 + 79;
  uint64_t v29 = v0[87];
  id v74 = (id)v0[83];
  uint64_t v30 = swift_slowAlloc(32LL, -1LL);
  uint64_t v31 = (void *)swift_slowAlloc(16LL, -1LL);
  uint64_t v77 = swift_slowAlloc(32LL, -1LL);
  uint64_t v80 = v77;
  *(_DWORD *)uint64_t v30 = 138412802;
  uint64_t v32 = *(void **)(*(void *)(v29 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
  v0[77] = v32;
  id v33 = v32;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 77, v0 + 78, v30 + 4, v30 + 12);
  void *v31 = v32;
  uint64_t v34 = v31;
  swift_release_n(v29, 2LL);
  *(_WORD *)(v30 + 12) = 2114;
  Class isa = (Class)objc_msgSend(v74, "ams_DSID");
  if (!isa)
  {
    sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
    Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
  }

  uint64_t v36 = (void (*)(id, uint64_t))v0[98];
  uint64_t v73 = v0[92];
  id v75 = (id)v0[94];
  uint64_t v37 = (void *)v0[83];
  v0[78] = isa;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 78, v76, v30 + 14, v30 + 22);
  v34[1] = isa;

  *(_WORD *)(v30 + 22) = 2082;
  v0[79] = v19;
  swift_errorRetain(v19, v38);
  uint64_t v39 = sub_1000079A0(&qword_100459B50);
  uint64_t v40 = String.init<A>(describing:)(v76, v39);
  unint64_t v42 = v41;
  v0[80] = sub_100088DB4(v40, v41, &v80);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 81, v30 + 24, v30 + 32);
  swift_bridgeObjectRelease(v42);
  swift_errorRelease(v19);
  swift_errorRelease(v19);
  _os_log_impl( (void *)&_mh_execute_header,  log,  v78,  "[%@] Error generating keybag for account: %{public}@ error: %{public}s",  (uint8_t *)v30,  0x20u);
  uint64_t v43 = sub_1000079A0((uint64_t *)&unk_100458F50);
  swift_arrayDestroy(v34, 2LL, v43);
  swift_slowDealloc(v34, -1LL, -1LL);
  swift_arrayDestroy(v77, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v77, -1LL, -1LL);
  swift_slowDealloc(v30, -1LL, -1LL);

  swift_errorRelease(v19);
  v36(v75, v73);
  uint64_t v3 = 0LL;
  uint64_t v14 = 0LL;
  uint64_t v1 = v0 + 44;
LABEL_10:
  uint64_t v49 = v0[84];
  uint64_t v50 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v50, *(unsigned int *)(v50 + 48), *(unsigned __int16 *)(v50 + 52));
  uint64_t v51 = JSONEncoder.init()();
  id v52 = (void *)objc_opt_self(&OBJC_CLASS___AMSDevice);
  swift_bridgeObjectRetain(v49);
  id v53 = [v52 deviceGUID];
  uint64_t v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
  uint64_t v56 = v55;

  v0[44] = v49;
  v0[45] = v54;
  v0[46] = v56;
  v0[47] = v3;
  v0[48] = v14;
  unint64_t v57 = sub_1000151B4();
  v0[106] = dispatch thunk of JSONEncoder.encode<A>(_:)(v1, &type metadata for MediaAPIUpdateRequest, v57);
  v0[107] = v58;
  swift_bridgeObjectRelease(v0[84]);
  swift_bridgeObjectRelease(v56);
  swift_release(v51);
  swift_bridgeObjectRelease(v14);
  id v59 = v5;
  Class v60 = Data._bridgeToObjectiveC()().super.isa;
  os_log_type_t v61 = sub_1001D414C(v60);

  if (v61)
  {
    uint64_t v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v61);
    unint64_t v64 = v63;

    v65.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_100007B14(v62, v64);
  }

  else
  {
    v65.super.Class isa = 0LL;
  }

  uint64_t v66 = v0[87];
  [v59 setHTTPBody:v65.super.isa];

  NSString v67 = String._bridgeToObjectiveC()();
  NSString v68 = String._bridgeToObjectiveC()();
  [v59 setValue:v67 forHTTPHeaderField:v68];

  NSString v69 = String._bridgeToObjectiveC()();
  NSString v70 = String._bridgeToObjectiveC()();
  [v59 setValue:v69 forHTTPHeaderField:v70];

  id v71 = [*(id *)(v66 + 48) dataTaskPromiseWithRequest:v59];
  v0[108] = v71;
  v0[7] = v0 + 71;
  v0[2] = v0;
  v0[3] = sub_10000EC90;
  v0[58] = swift_continuation_init(v0 + 2, 1LL);
  v0[54] = _NSConcreteStackBlock;
  v0[55] = 0x40000000LL;
  v0[56] = sub_10005F988;
  v0[57] = &unk_1003DC208;
  [v71 resultWithCompletion:v0 + 54];
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_10000EC90()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 872LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10000F9D4;
  }
  else {
    uint64_t v2 = sub_10000ED34;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10000ED34()
{
  uint64_t v1 = *(void **)(v0 + 864);
  uint64_t v2 = *(void **)(v0 + 568);
  *(void *)(v0 + 880) = v2;

  id v3 = [v2 object];
  if (v3)
  {
    id v4 = v3;
    _bridgeAnyObjectToAny(_:)((void *)(v0 + 472), v3);
    swift_unknownObjectRelease(v4);
  }

  else
  {
    *(_OWORD *)(v0 + 472) = 0u;
    *(_OWORD *)(v0 + 488) = 0u;
  }

  sub_1000151F8(v0 + 472, v0 + 504);
  if (*(void *)(v0 + 528))
  {
    uint64_t v5 = sub_1000079A0(&qword_100459DC0);
    else {
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    sub_100015240(v0 + 504, (uint64_t *)&unk_1004594B0);
    uint64_t v6 = 0LL;
  }

  uint64_t v7 = unk_1004587BC;
  uint64_t v8 = dword_1004587B8;
  id v9 = *(id *)(*(void *)(*(void *)(v0 + 696) + 16LL) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
  uint64_t v10 = (void *)swift_task_alloc(v7);
  *(void *)(v0 + 888) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_10000EEA8;
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1004587B8 + v8))(v6, (uint64_t)v9);
}

uint64_t sub_10000EEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 888);
  *(void *)(v3 + 896) = a1;
  *(void *)(v3 + 904) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_10000EF34, 0LL, 0LL);
}

uint64_t sub_10000EF34()
{
  uint64_t v1 = *(void *)(v0 + 904);
  uint64_t v2 = *(void *)(v0 + 896);
  uint64_t v3 = *(void **)(v0 + 880);
  uint64_t v4 = *(void **)(v0 + 840);
  uint64_t v5 = *(void **)(v0 + 816);
  uint64_t v6 = *(void **)(v0 + 792);
  uint64_t v7 = *(void *)(v0 + 728);
  uint64_t v8 = *(void *)(v0 + 720);
  uint64_t v9 = *(void *)(v0 + 712);
  sub_100007B14(*(void *)(v0 + 848), *(void *)(v0 + 856));

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  uint64_t v10 = *(void *)(v0 + 768);
  uint64_t v11 = *(void *)(v0 + 760);
  uint64_t v12 = *(void *)(v0 + 752);
  uint64_t v13 = *(void *)(v0 + 728);
  uint64_t v14 = *(void *)(v0 + 704);
  swift_task_dealloc(*(void *)(v0 + 776));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v1);
}

uint64_t sub_10000F048(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 808);
  uint64_t v3 = *(void **)(v1 + 800);
  swift_willThrow(a1);

  type metadata accessor for Code(0LL);
  uint64_t v5 = v4;
  *(void *)(v1 + 592) = 204LL;
  swift_errorRetain(v2, v6);
  uint64_t v7 = sub_100004DD4( &qword_100459B70,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1003727BC);
  char v8 = static _ErrorCodeProtocol.~= infix(_:_:)(v1 + 592, v2, v5, v7);
  swift_errorRelease(v2);
  if ((v8 & 1) != 0)
  {
    uint64_t v9 = *(void *)(v1 + 696);
    uint64_t v10 = swift_errorRelease(*(void *)(v1 + 808));
    static Logger.updates.getter(v10);
    uint64_t v11 = swift_retain_n(v9, 2LL);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void *)(v1 + 696);
    if (v14)
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v17 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v16 = 138412290;
      id v18 = *(void **)(*(void *)(v15 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(v1 + 648) = v18;
      id v19 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 648, v1 + 656, v16 + 4, v16 + 12);
      *id v17 = v18;
      swift_release_n(v15, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "[%@] Failed to get “language-tag” from the bag; falling back on “language”…",
        v16,
        0xCu);
      uint64_t v20 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v17, 1LL, v20);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      swift_release_n(*(void *)(v1 + 696), 2LL);
    }

    id v27 = *(void **)(v1 + 792);
    (*(void (**)(void, void))(v1 + 784))(*(void *)(v1 + 760), *(void *)(v1 + 736));
    id v28 = [v27 stringForKey:@"language"];
    *(void *)(v1 + 912) = v28;
    *(void *)(v1 + 248) = v1 + 536;
    *(void *)(v1 + 208) = v1;
    *(void *)(v1 + 216) = sub_10000F3B0;
    *(void *)(v1 + 304) = swift_continuation_init(v1 + 208, 1LL);
    *(void *)(v1 + 272) = _NSConcreteStackBlock;
    *(void *)(v1 + 280) = 0x40000000LL;
    *(void *)(v1 + 288) = sub_10000DB38;
    *(void *)(v1 + 296) = &unk_1003DC1D8;
    [v28 valueWithCompletion:v1 + 272];
    return swift_continuation_await(v1 + 208);
  }

  else
  {

    uint64_t v21 = *(void *)(v1 + 768);
    uint64_t v22 = *(void *)(v1 + 760);
    uint64_t v23 = *(void *)(v1 + 752);
    uint64_t v24 = *(void *)(v1 + 728);
    uint64_t v25 = *(void *)(v1 + 704);
    swift_task_dealloc(*(void *)(v1 + 776));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_10000F3B0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 240LL);
  *(void *)(*(void *)v0 + 920LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10000F818;
  }
  else {
    uint64_t v2 = sub_10000F454;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10000F454()
{
  uint64_t v1 = *(void **)(v0 + 536);

  *(void *)(v0 + 816) = v1;
  uint64_t v2 = *(void *)(v0 + 720);
  uint64_t v3 = *(void *)(v0 + 712);
  uint64_t v4 = *(void *)(v0 + 704);
  uint64_t v5 = *(void **)(v0 + 688);
  uint64_t v6 = *(void *)(v0 + 680);
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v9 = v8;
  sub_10000FAF0(v6, v5, v7, v8, v4);
  swift_bridgeObjectRelease(v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1LL, v3) == 1)
  {
    uint64_t v10 = *(void *)(v0 + 696);
    uint64_t v11 = sub_100015240(*(void *)(v0 + 704), (uint64_t *)&unk_100459B80);
    static Logger.updates.getter(v11);
    uint64_t v12 = swift_retain_n(v10, 2LL);
    os_log_type_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter();
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void *)(v0 + 696);
    if (v15)
    {
      id v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v37 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v17 = 138412290;
      id v18 = *(void **)(*(void *)(v16 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(v0 + 584) = v18;
      id v19 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 584, v0 + 592, v17 + 4, v17 + 12);
      *uint64_t v37 = v18;
      swift_release_n(v16, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "[%@] Not able to retrieve a valid URL to check for updates",  v17,  0xCu);
      uint64_t v20 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v37, 1LL, v20);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      uint64_t v1 = *(void **)(v0 + 792);
    }

    else
    {

      swift_release_n(v16, 2LL);
      os_log_type_t v13 = *(os_log_s **)(v0 + 792);
    }

    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v0 + 784);
    uint64_t v30 = *(void *)(v0 + 768);
    uint64_t v31 = *(void *)(v0 + 736);

    v29(v30, v31);
    uint64_t v32 = *(void *)(v0 + 768);
    uint64_t v33 = *(void *)(v0 + 760);
    uint64_t v34 = *(void *)(v0 + 752);
    uint64_t v35 = *(void *)(v0 + 728);
    uint64_t v36 = *(void *)(v0 + 704);
    swift_task_dealloc(*(void *)(v0 + 776));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    return (*(uint64_t (**)(void, void))(v0 + 8))(0LL, 0LL);
  }

  else
  {
    uint64_t v21 = *(void *)(v0 + 696);
    uint64_t v22 = *(void *)(v0 + 664);
    (*(void (**)(void, void, void))(*(void *)(v0 + 720) + 32LL))( *(void *)(v0 + 728),  *(void *)(v0 + 704),  *(void *)(v0 + 712));
    uint64_t v23 = *(void **)(v21 + 32);
    [v23 setAccount:v22];
    URL._bridgeToObjectiveC()(v24);
    uint64_t v26 = v25;
    id v27 = [v23 requestWithURL:v25];
    *(void *)(v0 + 824) = v27;

    *(void *)(v0 + 184) = v0 + 576;
    *(void *)(v0 + 144) = v0;
    *(void *)(v0 + 152) = sub_10000E404;
    *(void *)(v0 + 424) = swift_continuation_init(v0 + 144, 1LL);
    *(void *)(v0 + 392) = _NSConcreteStackBlock;
    *(void *)(v0 + 400) = 0x40000000LL;
    *(void *)(v0 + 408) = sub_10005F988;
    *(void *)(v0 + 416) = &unk_1003DC1F0;
    [v27 resultWithCompletion:v0 + 392];
    return swift_continuation_await(v0 + 144);
  }

uint64_t sub_10000F818()
{
  uint64_t v1 = *(void **)(v0 + 912);
  uint64_t v2 = *(void **)(v0 + 792);
  swift_willThrow();

  uint64_t v3 = *(void *)(v0 + 768);
  uint64_t v4 = *(void *)(v0 + 760);
  uint64_t v5 = *(void *)(v0 + 752);
  uint64_t v6 = *(void *)(v0 + 728);
  uint64_t v7 = *(void *)(v0 + 704);
  swift_task_dealloc(*(void *)(v0 + 776));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F8E4()
{
  uint64_t v1 = *(void **)(v0 + 824);
  uint64_t v2 = *(void **)(v0 + 816);
  uint64_t v3 = *(void **)(v0 + 792);
  uint64_t v4 = *(void *)(v0 + 728);
  uint64_t v5 = *(void *)(v0 + 720);
  uint64_t v6 = *(void *)(v0 + 712);
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  uint64_t v7 = *(void *)(v0 + 768);
  uint64_t v8 = *(void *)(v0 + 760);
  uint64_t v9 = *(void *)(v0 + 752);
  uint64_t v10 = *(void *)(v0 + 728);
  uint64_t v11 = *(void *)(v0 + 704);
  swift_task_dealloc(*(void *)(v0 + 776));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000F9D4(uint64_t a1)
{
  uint64_t v16 = *(void **)(v1 + 864);
  unint64_t v2 = *(void *)(v1 + 856);
  uint64_t v3 = *(void *)(v1 + 848);
  uint64_t v4 = *(void **)(v1 + 840);
  uint64_t v5 = *(void **)(v1 + 816);
  uint64_t v6 = *(void **)(v1 + 792);
  uint64_t v7 = *(void *)(v1 + 728);
  uint64_t v8 = *(void *)(v1 + 720);
  uint64_t v9 = *(void *)(v1 + 712);
  swift_willThrow(a1);
  sub_100007B14(v3, v2);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  uint64_t v10 = *(void *)(v1 + 768);
  uint64_t v11 = *(void *)(v1 + 760);
  uint64_t v12 = *(void *)(v1 + 752);
  uint64_t v13 = *(void *)(v1 + 728);
  uint64_t v14 = *(void *)(v1 + 704);
  swift_task_dealloc(*(void *)(v1 + 776));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10000FAF0@<X0>( uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v41 = a4;
  uint64_t v10 = type metadata accessor for URLComponents(0LL);
  uint64_t v42 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  URLComponents.init()(v11);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  v44[0] = 0LL;
  v44[1] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(22LL);
  swift_bridgeObjectRelease(v44[1]);
  strcpy((char *)v44, "/v1/catalog/");
  BYTE5(v44[1]) = 0;
  HIWORD(v44[1]) = -5120;
  v14._countAndFlagsBits = a1;
  v14._object = a2;
  String.append(_:)(v14);
  v15._countAndFlagsBits = 0x736574616470752FLL;
  v15._object = (void *)0xE800000000000000LL;
  String.append(_:)(v15);
  URLComponents.path.setter(v44[0], v44[1]);
  unint64_t v16 = *(void *)(*(void *)(v5 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_reason);
  if (v16 < 9)
  {
    uint64_t v17 = *(void *)&aExplicitimplic[8 * v16];
    uint64_t v18 = sub_1000079A0(&qword_100458718);
    uint64_t v19 = *(void *)(type metadata accessor for URLQueryItem(0LL) - 8);
    uint64_t v20 = swift_allocObject( v18,  ((*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))
          + 4LL * *(void *)(v19 + 72),
            *(unsigned __int8 *)(v19 + 80) | 7LL);
    *(_OWORD *)(v20 + 16) = xmmword_100372A30;
    URLQueryItem.init(name:value:)(0x6E6F69746361LL, 0xE600000000000000LL, v17, 0xE800000000000000LL);
    uint64_t v21 = (void *)objc_opt_self(&OBJC_CLASS___AMSDevice);
    unsigned int v22 = [v21 deviceIsAppleTV];
    uint64_t v43 = a5;
    if (v22)
    {
      uint64_t v23 = (id *)&AMSMediaTaskPlatformAppleTV;
    }

    else
    {
      if (([v21 deviceIsAudioAccessory] & 1) == 0)
      {
        NSString v24 = String._bridgeToObjectiveC()();
        goto LABEL_8;
      }

      uint64_t v23 = (id *)&AMSMediaTaskPlatformHomePod;
    }

    NSString v24 = *v23;
LABEL_8:
    uint64_t v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v28 = v27;

    URLQueryItem.init(name:value:)(0x6D726F6674616C70LL, 0xE800000000000000LL, v26, v28);
    swift_bridgeObjectRelease(v28);
    URLQueryItem.init(name:value:)( 0x615B646E65747865LL,  0xEC0000005D737070LL,  0xD000000000000034LL,  0x8000000100342680LL);
    URLQueryItem.init(name:value:)(108LL, 0xE100000000000000LL, a3, v41);
    URLComponents.queryItems.setter(v20);
    uint64_t v29 = objc_opt_self(&OBJC_CLASS___URLBag);
    id v30 = sub_100255630(v29);
    NSString v31 = String._bridgeToObjectiveC()();
    NSString v32 = String._bridgeToObjectiveC()();
    id v33 = sub_100256C5C(v30, v31, v32);

    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    uint64_t v36 = v35;

    uint64_t v37 = URLComponents.host.setter(v34, v36);
    URLComponents.url.getter(v37);
    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v13, v10);
  }

  type metadata accessor for LoadSoftwareUpdatesReason(0LL);
  v44[0] = v16;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v39, v44, v39, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_10000FEB0()
{
  v1[59] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[60] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[61] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[62] = swift_task_alloc(v4);
  v1[63] = swift_task_alloc(v4);
  v1[64] = swift_task_alloc(v4);
  return swift_task_switch(sub_10000FF2C, 0LL, 0LL);
}

uint64_t sub_10000FF2C()
{
  uint64_t v1 = v0 + 10;
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___URLBag);
  v0[65] = v2;
  id v3 = sub_100255630(v2);
  v0[66] = v3;
  NSString v4 = String._bridgeToObjectiveC()();
  v0[67] = v4;
  v0[15] = v0 + 56;
  v0[10] = v0;
  v0[11] = sub_10001000C;
  uint64_t v5 = swift_continuation_init(v0 + 10, 1LL);
  v0[30] = _NSConcreteStackBlock;
  uint64_t v6 = v0 + 30;
  v6[1] = 0x40000000LL;
  v6[2] = sub_100014734;
  v6[3] = &unk_1003DC190;
  v6[4] = v5;
  sub_100257490((uint64_t)v3, v4, 0, v6);
  return swift_continuation_await(v1);
}

uint64_t sub_10001000C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112LL);
  *(void *)(*(void *)v0 + 544LL) = v1;
  if (v1) {
    uint64_t v2 = sub_1000131C0;
  }
  else {
    uint64_t v2 = sub_10001006C;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10001006C()
{
  uint64_t v1 = *(void *)(v0 + 448);
  *(void *)(v0 + 552) = v1;
  uint64_t v2 = *(void **)(v0 + 536);
  uint64_t v3 = *(void *)(v0 + 472);

  static Logger.updates.getter(v4);
  uint64_t v5 = swift_retain_n(v3, 4LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 472);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v1;
    uint64_t v10 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v9 = 138412802;
    uint64_t v11 = *(void **)(*(void *)(v8 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v0 + 456) = v11;
    id v12 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 456, v0 + 464, v9 + 4, v9 + 12);
    *uint64_t v10 = v11;
    swift_release_n(v8, 2LL);
    *(_WORD *)(v9 + 12) = 2050;
    uint64_t v13 = *(void *)(*(void *)(v8 + 24) + 16LL);
    swift_release(v8);
    *(void *)(v0 + 464) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 464, v0 + 472, v9 + 14, v9 + 22);
    swift_release(v8);
    *(_WORD *)(v9 + 22) = 2050;
    *(void *)(v0 + 440) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v9 + 24, v9 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[%@] Looking up %{public}ld apps with a batch size of %{public}ld",  (uint8_t *)v9,  0x20u);
    uint64_t v14 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v10, 1LL, v14);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    swift_release_n(*(void *)(v0 + 472), 4LL);
  }

  uint64_t v15 = *(void *)(v0 + 520);
  uint64_t v16 = *(void *)(v0 + 512);
  uint64_t v17 = *(void *)(v0 + 480);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 488) + 8LL);
  *(void *)(v0 + 560) = v18;
  v18(v16, v17);
  id v19 = sub_100255630(v15);
  *(void *)(v0 + 568) = v19;
  NSString v20 = String._bridgeToObjectiveC()();
  *(void *)(v0 + 576) = v20;
  *(void *)(v0 + 56) = v0 + 760;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_100010330;
  *(void *)(v0 + 312) = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 280) = _NSConcreteStackBlock;
  *(void *)(v0 + 288) = 0x40000000LL;
  *(void *)(v0 + 296) = sub_10007C198;
  *(void *)(v0 + 304) = &unk_1003DC1A8;
  sub_100256F54(v19, v20, 0, (void *)(v0 + 280));
  return swift_continuation_await(v0 + 16);
}

uint64_t sub_100010330()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 584LL) = v1;
  if (v1) {
    uint64_t v2 = sub_100013494;
  }
  else {
    uint64_t v2 = sub_100010390;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

void sub_100010390()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 576);
  uint64_t v3 = *(void **)(v0 + 568);
  int v4 = *(unsigned __int8 *)(v0 + 760);

  uint64_t v5 = *(void *)(*(void *)(v1 + 472) + 24LL);
  uint64_t v218 = v1;
  if (v4 == 1)
  {
    uint64_t v6 = sub_1000147B4(v5);
    os_log_type_t v7 = _swiftEmptyArrayStorage;
    goto LABEL_3;
  }

  uint64_t v103 = *(void *)(v5 + 16);
  int v104 = _swiftEmptyArrayStorage;
  if (v103)
  {
    uint64_t v217 = swift_bridgeObjectRetain(v5);
    uint64_t v105 = v217 + 64;
    unint64_t v106 = _swiftEmptyArrayStorage;
    uint64_t v219 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v108 = v106;
      uint64_t v109 = *(void *)(v105 - 24);
      uint64_t v221 = *(void *)(v105 - 32);
      uint64_t v110 = *(void **)(v105 - 16);
      char v223 = *(_BYTE *)(v105 - 8);
      int v111 = *(unsigned __int8 *)(v105 - 7);
      BOOL v112 = *(void **)v105;
      uint64_t v232 = *(void *)(v105 + 8);
      uint64_t v113 = *(void **)(v105 + 24);
      uint64_t v238 = *(void *)(v105 + 16);
      uint64_t v241 = *(void *)(v105 + 32);
      uint64_t v115 = *(void *)(v105 + 48);
      uint64_t v114 = *(void *)(v105 + 56);
      uint64_t v226 = *(void *)(v105 + 40);
      swift_bridgeObjectRetain_n(v226, 2LL);
      uint64_t v249 = v114;
      swift_bridgeObjectRetain_n(v114, 2LL);
      swift_bridgeObjectRetain_n(v109, 2LL);
      uint64_t v229 = v110;
      id v116 = v110;
      uint64_t v235 = v112;
      id v117 = v112;
      v246 = v113;
      id v118 = v113;
      id v119 = v116;
      id v120 = v117;
      id v121 = v118;
      uint64_t v251 = v119;
      if (v111 == 1)
      {
        unint64_t v106 = v108;
        unint64_t v122 = v120;
        if ((swift_isUniquelyReferenced_nonNull_native(v108) & 1) == 0) {
          unint64_t v106 = sub_100088338(0LL, v108[2] + 1LL, 1, v108);
        }
        uint64_t v123 = v115;
        unint64_t v125 = v106[2];
        unint64_t v124 = v106[3];
        uint64_t v126 = v249;
        if (v125 >= v124 >> 1) {
          unint64_t v106 = sub_100088338((void *)(v124 > 1), v125 + 1, 1, v106);
        }
        v106[2] = v125 + 1;
        unint64_t v107 = &v106[12 * v125];
        v107[4] = v221;
        v107[5] = v109;
        v107[6] = v229;
        *((_BYTE *)v107 + 56) = v223;
        *((_BYTE *)v107 + 57) = 1;
      }

      else
      {
        unint64_t v106 = v108;
        unint64_t v122 = v120;
        if ((swift_isUniquelyReferenced_nonNull_native(v219) & 1) != 0) {
          uint64_t v127 = v219;
        }
        else {
          uint64_t v127 = sub_100088338(0LL, v219[2] + 1LL, 1, v219);
        }
        uint64_t v123 = v115;
        unint64_t v129 = v127[2];
        unint64_t v128 = v127[3];
        uint64_t v126 = v249;
        if (v129 >= v128 >> 1) {
          uint64_t v127 = sub_100088338((void *)(v128 > 1), v129 + 1, 1, v127);
        }
        v127[2] = v129 + 1;
        uint64_t v219 = v127;
        unint64_t v107 = &v127[12 * v129];
        v107[4] = v221;
        v107[5] = v109;
        v107[6] = v229;
        *((_BYTE *)v107 + 56) = v223;
        *((_BYTE *)v107 + 57) = 0;
      }

      v107[8] = v235;
      v107[9] = v232;
      v107[10] = v238;
      v107[11] = v246;
      v107[12] = v241;
      v107[13] = v226;
      v107[14] = v123;
      v107[15] = v126;
      swift_bridgeObjectRelease(v109);

      swift_bridgeObjectRelease(v226);
      swift_bridgeObjectRelease(v126);
      v105 += 96LL;
      --v103;
    }

    while (v103);
    swift_bridgeObjectRelease(v217);
    uint64_t v1 = v218;
    int v104 = v219;
  }

  else
  {
    unint64_t v106 = _swiftEmptyArrayStorage;
  }

  *(void *)(v1 + 600) = v104;
  *(void *)(v1 + 592) = v106;
  uint64_t v130 = v106[2];
  if (v130)
  {
    uint64_t v131 = (__int128 *)(v1 + 144);
    swift_bridgeObjectRetain(v106);
    uint64_t v132 = 4LL;
    p_name = (char **)(&DownloadSinf__classData + 24);
    do
    {
      BOOL v139 = v106;
      __int128 v140 = *(_OWORD *)&v106[v132 + 2];
      *uint64_t v131 = *(_OWORD *)&v106[v132];
      v131[1] = v140;
      __int128 v141 = *(_OWORD *)&v106[v132 + 4];
      __int128 v142 = *(_OWORD *)&v106[v132 + 6];
      __int128 v143 = *(_OWORD *)&v106[v132 + 10];
      v131[4] = *(_OWORD *)&v106[v132 + 8];
      v131[5] = v143;
      v131[2] = v141;
      v131[3] = v142;
      sub_100015118(v131);
      id v144 = sub_100014B58();
      id v145 = objc_msgSend(v144, p_name[365]);

      unint64_t v147 = sub_100024040(v145);
      uint64_t v148 = _swiftEmptyDictionarySingleton[2];
      BOOL v149 = (v146 & 1) == 0;
      uint64_t v150 = v148 + v149;
      if (__OFADD__(v148, v149))
      {
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
LABEL_193:
        __break(1u);
LABEL_194:
        __break(1u);
LABEL_195:
        __break(1u);
LABEL_196:
        __break(1u);
LABEL_197:
        __break(1u);
LABEL_198:
        __break(1u);
LABEL_199:
        __break(1u);
LABEL_200:
        __break(1u);
        goto LABEL_201;
      }

      char v151 = v146;
      if (_swiftEmptyDictionarySingleton[3] < v150)
      {
        sub_100076B20(v150, 1LL);
        unint64_t v152 = sub_100024040(v145);
        if ((v151 & 1) != (v153 & 1))
        {
          uint64_t v212 = sub_1000079A0(&qword_100458710);
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v212);
          return;
        }

        unint64_t v147 = v152;
      }

      if ((v151 & 1) != 0)
      {

        uint64_t v154 = _swiftEmptyDictionarySingleton[7];
        v155 = *(void **)(v154 + 8 * v147);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v155);
        *(void *)(v154 + 8 * v147) = v155;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v155 = sub_100088338(0LL, v155[2] + 1LL, 1, v155);
          *(void *)(v154 + 8 * v147) = v155;
        }

        unint64_t v158 = v155[2];
        unint64_t v157 = v155[3];
        if (v158 >= v157 >> 1)
        {
          v155 = sub_100088338((void *)(v157 > 1), v158 + 1, 1, v155);
          *(void *)(v154 + 8 * v147) = v155;
        }

        p_name = &DownloadSinf__classData.name;
        v155[2] = v158 + 1;
        char v134 = &v155[12 * v158];
        __int128 v135 = v131[1];
        v134[2] = *v131;
        v134[3] = v135;
        __int128 v136 = v131[2];
        __int128 v137 = v131[3];
        __int128 v138 = v131[5];
        v134[6] = v131[4];
        v134[7] = v138;
        v134[4] = v136;
        v134[5] = v137;
      }

      else
      {
        uint64_t v159 = sub_1000079A0(&qword_100458700);
        uint64_t v160 = (_OWORD *)swift_allocObject(v159, 128LL, 7LL);
        __int128 v161 = v131[2];
        __int128 v162 = v131[4];
        __int128 v163 = v131[5];
        v160[5] = v131[3];
        v160[6] = v162;
        v160[7] = v163;
        __int128 v164 = *v131;
        __int128 v165 = v131[1];
        v160[1] = xmmword_100372930;
        v160[2] = v164;
        v160[3] = v165;
        v160[4] = v161;
        _swiftEmptyDictionarySingleton[(v147 >> 6) + 8] |= 1LL << v147;
        *(void *)(_swiftEmptyDictionarySingleton[6] + 8 * v147) = v145;
        *(void *)(_swiftEmptyDictionarySingleton[7] + 8 * v147) = v160;
        uint64_t v166 = _swiftEmptyDictionarySingleton[2];
        BOOL v167 = __OFADD__(v166, 1LL);
        uint64_t v168 = v166 + 1;
        if (v167) {
          goto LABEL_191;
        }
        _swiftEmptyDictionarySingleton[2] = v168;
      }

      v132 += 12LL;
      --v130;
      unint64_t v106 = v139;
    }

    while (v130);
    swift_bridgeObjectRelease(v139);
    uint64_t v1 = v218;
  }

  int64_t v169 = 0LL;
  *(void *)(v1 + 608) = _swiftEmptyDictionarySingleton;
  char v170 = _swiftEmptyDictionarySingleton[4];
  *(_BYTE *)(v1 + 761) = v170;
  uint64_t v171 = 1LL << v170;
  if (v171 < 64) {
    uint64_t v172 = ~(-1LL << v171);
  }
  else {
    uint64_t v172 = -1LL;
  }
  unint64_t v173 = v172 & _swiftEmptyDictionarySingleton[8];
  uint64_t v174 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
  uint64_t v175 = (char **)(&DownloadSinf__classData + 24);
  *(void *)(v1 + 680) = _swiftEmptyArrayStorage;
  v176 = (char **)(&DownloadSinf__classData + 24);
  os_log_type_t v177 = &qword_100458000;
LABEL_151:
  while (2)
  {
    if (v173)
    {
      unint64_t v178 = __clz(__rbit64(v173));
      v173 &= v173 - 1;
      unint64_t v179 = v178 | (v169 << 6);
      uint64_t v180 = *(void *)(v1 + 608);
LABEL_167:
      *(void *)(v1 + 624) = v173;
      *(void *)(v1 + 616) = v169;
      uint64_t v186 = 8 * v179;
      uint64_t v187 = *(void **)(*(void *)(v180 + 48) + v186);
      *(void *)(v1 + 632) = v187;
      uint64_t v188 = *(void *)(*(void *)(v180 + 56) + v186);
      *(void *)(v1 + 640) = v188;
      if (!v187) {
        continue;
      }
      unint64_t v233 = v173;
      int64_t v236 = v169;
      uint64_t v189 = (void *)objc_opt_self(v174[296]);
      id v190 = v187;
      swift_bridgeObjectRetain(v188);
      id v191 = [v189 v175[382]];
      id v192 = objc_msgSend(v191, v176[372], v190);
      *(void *)(v1 + 648) = v192;

      uint64_t v230 = v192;
      if (!v192)
      {

        swift_bridgeObjectRelease(v188);
        goto LABEL_150;
      }

      unint64_t v227 = v190;
      uint64_t v193 = *(void *)(v188 + 16);
      if (!v193) {
        goto LABEL_149;
      }
      sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
      swift_bridgeObjectRetain_n(v188, 2LL);
      uint64_t v224 = v188;
      uint64_t v194 = v188 + 64;
      while (1)
      {
        uint64_t v196 = *(void *)(v194 - 24);
        unint64_t v195 = *(void **)(v194 - 16);
        uint64_t v197 = *(void **)v194;
        v198 = *(void **)(v194 + 24);
        uint64_t v199 = *(void *)(v194 + 40);
        uint64_t v200 = *(void *)(v194 + 56);
        if (!v198) {
          break;
        }
        swift_bridgeObjectRetain(v199);
        swift_bridgeObjectRetain(v200);
        uint64_t v201 = v197;
        id v202 = v198;
        swift_bridgeObjectRetain(v196);
        id v242 = v195;
        v247 = v201;
        id v239 = v201;
        id v203 = v202;
        Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
        LOBYTE(v201) = static NSObject.== infix(_:_:)(v203, isa);

        if ((v201 & 1) != 0)
        {

          os_log_type_t v177 = &qword_100458000;
          uint64_t v197 = v247;
LABEL_175:
          unint64_t v207 = v197;
          if (v177[1] != -1) {
            swift_once(&qword_100458008, sub_100009B38);
          }
          id v203 = (id)qword_100458570;
          swift_bridgeObjectRelease(v196);
          swift_bridgeObjectRelease(v200);

          uint64_t v1 = v218;
          goto LABEL_179;
        }

        swift_bridgeObjectRelease(v199);
        swift_bridgeObjectRelease(v200);
        uint64_t v199 = v196;
        uint64_t v1 = v218;
        os_log_type_t v177 = &qword_100458000;
LABEL_179:
        *(void *)(v1 + 656) = v203;
        swift_bridgeObjectRelease(v199);
        if (v177[1] != -1) {
          swift_once(&qword_100458008, sub_100009B38);
        }
        id v208 = (id)qword_100458570;
        char v209 = static NSObject.== infix(_:_:)(v203, v208);

        if ((v209 & 1) == 0)
        {
          swift_bridgeObjectRelease_n(v224, 2LL);
          uint64_t v210 = (void *)swift_task_alloc(dword_1004585EC);
          *(void *)(v1 + 664) = v210;
          *uint64_t v210 = v1;
          v210[1] = sub_1000116A8;
          uint64_t v211 = *(void *)(v1 + 472);
          v210[3] = v203;
          v210[4] = v211;
          v210[2] = v224;
          swift_task_switch(sub_100014E50, 0LL, 0LL);
          return;
        }

        v194 += 96LL;
        if (!--v193)
        {
          uint64_t v188 = v224;
          swift_bridgeObjectRelease_n(v224, 2LL);
          uint64_t v174 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
          uint64_t v175 = &DownloadSinf__classData.name;
          v176 = &DownloadSinf__classData.name;
LABEL_149:

          swift_bridgeObjectRelease(v188);
LABEL_150:
          unint64_t v173 = v233;
          int64_t v169 = v236;
          goto LABEL_151;
        }
      }

      swift_bridgeObjectRetain(v199);
      swift_bridgeObjectRetain(v200);
      swift_bridgeObjectRetain(v196);
      id v205 = v195;
      id v206 = v197;
      goto LABEL_175;
    }

    break;
  }

  int64_t v181 = v169 + 1;
  if (__OFADD__(v169, 1LL)) {
    goto LABEL_196;
  }
  int64_t v182 = (unint64_t)((1LL << *(_BYTE *)(v1 + 761)) + 63) >> 6;
  uint64_t v180 = *(void *)(v1 + 608);
  if (v181 < v182)
  {
    uint64_t v183 = v180 + 64;
    unint64_t v184 = *(void *)(v180 + 64 + 8 * v181);
    ++v169;
    if (!v184)
    {
      int64_t v169 = v181 + 1;
      if (v181 + 1 >= v182) {
        goto LABEL_187;
      }
      unint64_t v184 = *(void *)(v183 + 8 * v169);
      if (!v184)
      {
        int64_t v169 = v181 + 2;
        if (v181 + 2 >= v182) {
          goto LABEL_187;
        }
        unint64_t v184 = *(void *)(v183 + 8 * v169);
        if (!v184)
        {
          int64_t v185 = v181 + 3;
          if (v185 >= v182) {
            goto LABEL_187;
          }
          unint64_t v184 = *(void *)(v183 + 8 * v185);
          if (!v184)
          {
            while (1)
            {
              int64_t v169 = v185 + 1;
              if (__OFADD__(v185, 1LL)) {
                goto LABEL_200;
              }
              if (v169 >= v182) {
                goto LABEL_187;
              }
              unint64_t v184 = *(void *)(v183 + 8 * v169);
              ++v185;
              if (v184) {
                goto LABEL_166;
              }
            }
          }

          int64_t v169 = v185;
        }
      }
    }

LABEL_166:
    unint64_t v173 = (v184 - 1) & v184;
    unint64_t v179 = __clz(__rbit64(v184)) + (v169 << 6);
    goto LABEL_167;
  }

LABEL_187:
  uint64_t v213 = *(void *)(v1 + 592);
  swift_release(v180);
  swift_bridgeObjectRelease(v213);
  uint64_t v214 = *(void *)(v1 + 600);
  uint64_t v6 = sub_1000147B4(v214);
  swift_bridgeObjectRelease(v214);
  os_log_type_t v7 = *(void **)(v1 + 680);
LABEL_3:
  int64_t v8 = 0LL;
  uint64_t v9 = v1 + 320;
  uint64_t v10 = v1 + 344;
  uint64_t v225 = (uint64_t *)(v1 + 424);
  unint64_t v228 = (uint64_t *)(v1 + 432);
  *(void *)(v1 + 688) = v6;
  char v11 = *((_BYTE *)v6 + 32);
  *(_BYTE *)(v1 + 762) = v11;
  uint64_t v12 = 1LL << v11;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v6[8];
  while (2)
  {
    if (v14)
    {
      uint64_t v16 = (v14 - 1) & v14;
      unint64_t v17 = __clz(__rbit64(v14)) | (v8 << 6);
      uint64_t v18 = *(void *)(v1 + 688);
      goto LABEL_24;
    }

    int64_t v19 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      goto LABEL_199;
    }
    int64_t v20 = (unint64_t)((1LL << *(_BYTE *)(v1 + 762)) + 63) >> 6;
    uint64_t v18 = *(void *)(v1 + 688);
    if (v19 >= v20)
    {
LABEL_188:
      swift_release(v18);
      uint64_t v215 = *(void *)(v1 + 504);
      uint64_t v216 = *(void *)(v1 + 496);
      swift_task_dealloc(*(void *)(v1 + 512));
      swift_task_dealloc(v215);
      swift_task_dealloc(v216);
      (*(void (**)(void *))(v1 + 8))(v7);
      return;
    }

    uint64_t v21 = v18 + 64;
    unint64_t v22 = *(void *)(v18 + 64 + 8 * v19);
    ++v8;
    if (v22) {
      goto LABEL_23;
    }
    int64_t v8 = v19 + 1;
    if (v19 + 1 >= v20) {
      goto LABEL_188;
    }
    unint64_t v22 = *(void *)(v21 + 8 * v8);
    if (v22) {
      goto LABEL_23;
    }
    int64_t v8 = v19 + 2;
    if (v19 + 2 >= v20) {
      goto LABEL_188;
    }
    unint64_t v22 = *(void *)(v21 + 8 * v8);
    if (v22)
    {
LABEL_23:
      uint64_t v16 = (v22 - 1) & v22;
      unint64_t v17 = __clz(__rbit64(v22)) + (v8 << 6);
LABEL_24:
      *(void *)(v1 + 704) = v16;
      *(void *)(v1 + 696) = v8;
      uint64_t v24 = *(void *)(v1 + 552);
      uint64_t v25 = 8 * v17;
      uint64_t v26 = *(void **)(*(void *)(v18 + 48) + v25);
      *(void *)(v1 + 712) = v26;
      uint64_t v27 = *(void *)(*(void *)(v18 + 56) + v25);
      *(void *)(v1 + 720) = v27;
      *(void *)(v1 + 424) = 0LL;
      unint64_t v28 = *(void *)(v27 + 16);
      if (v24 <= 0)
      {
        if (v24 && !v28) {
          goto LABEL_30;
        }
      }

      else if (v28 < v24)
      {
        goto LABEL_30;
      }

      unint64_t v28 = v24;
LABEL_30:
      *unint64_t v228 = v28;
      swift_bridgeObjectRetain_n(v27, 2LL);
      id v29 = v26;
      swift_beginAccess(v225, v9, 1LL, 0LL);
      swift_beginAccess(v228, v10, 1LL, 0LL);
      uint64_t v30 = *v225;
      uint64_t v31 = *v228;
      if (*v225 >= *v228)
      {
LABEL_7:
        uint64_t v15 = *(void **)(v1 + 712);
        swift_bridgeObjectRelease_n(*(void *)(v1 + 720), 2LL);

        unint64_t v14 = *(void *)(v1 + 704);
        int64_t v8 = *(void *)(v1 + 696);
        continue;
      }

      uint64_t v220 = v10;
      uint64_t v222 = v9;
      while (1)
      {
        *(void *)(v1 + 752) = v7;
        uint64_t v32 = *(void *)(v1 + 720);
        *(void *)(v1 + 424) = v31;
        unint64_t v33 = *(void *)(v32 + 16);
        uint64_t v34 = v33 - v31;
        if (__OFSUB__(v33, v31)) {
          goto LABEL_193;
        }
        uint64_t v35 = *(void *)(v1 + 552);
        if (v35 < 1)
        {
          BOOL v37 = v34 <= 0 && v35 < v34;
          uint64_t v36 = *(void *)(v32 + 16);
          if (v37) {
            goto LABEL_42;
          }
        }

        else if ((v34 & 0x8000000000000000LL) == 0)
        {
          uint64_t v36 = *(void *)(v32 + 16);
        }

        uint64_t v36 = v31 + v35;
        if (__OFADD__(v31, v35)) {
          goto LABEL_197;
        }
LABEL_42:
        *unint64_t v228 = v36;
        if (v30 < 0) {
          goto LABEL_194;
        }
        uint64_t v39 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
        uint64_t v40 = swift_bridgeObjectRetain(v32);
        uint64_t v41 = swift_unknownObjectRetain_n(v40, 2LL);
        uint64_t v42 = (void *)swift_dynamicCastClass(v41, v39);
        if (!v42)
        {
          swift_bridgeObjectRelease(v32);
          uint64_t v42 = _swiftEmptyArrayStorage;
        }

        uint64_t v43 = v42[2];
        swift_release(v42);
        uint64_t v44 = *(void *)(v1 + 720);
        if (v43 == v31 - v30)
        {
          uint64_t v45 = (void *)swift_dynamicCastClass(*(void *)(v1 + 720), v39);
          if (!v45)
          {
            swift_bridgeObjectRelease(v44);
            uint64_t v45 = _swiftEmptyArrayStorage;
          }
        }

        else
        {
          swift_bridgeObjectRelease(*(void *)(v1 + 720));
          uint64_t v45 = sub_1000610BC(v44, v44 + 32, v30, (2 * v31) | 1);
        }

        swift_bridgeObjectRelease(*(void *)(v1 + 720));
        if (qword_100458008 != -1) {
          swift_once(&qword_100458008, sub_100009B38);
        }
        uint64_t v46 = *(void *)(v1 + 712);
        uint64_t v47 = (void *)qword_100458570;
        sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
        id v48 = v47;
        LOBYTE(v46) = static NSObject.== infix(_:_:)(v46, v48);

        if ((v46 & 1) == 0)
        {
          uint64_t v234 = v45[2];
          if (v234)
          {
            unint64_t v49 = 0LL;
            uint64_t v237 = v45 + 4;
            uint64_t v231 = v45;
            while (1)
            {
              if (v49 >= v45[2]) {
                goto LABEL_192;
              }
              uint64_t v50 = &v237[12 * v49];
              uint64_t v52 = v50[1];
              uint64_t v51 = (void *)v50[2];
              int v53 = *((unsigned __int8 *)v50 + 25);
              uint64_t v54 = (void *)v50[4];
              uint64_t v55 = (void *)v50[7];
              uint64_t v56 = v50[9];
              uint64_t v57 = v50[11];
              uint64_t v250 = v56;
              uint64_t v248 = v55;
              if (v51)
              {
                swift_bridgeObjectRetain(v56);
                uint64_t v243 = v57;
                swift_bridgeObjectRetain(v57);
                uint64_t v58 = v51;
                id v59 = v51;
                uint64_t v60 = v52;
                swift_bridgeObjectRetain(v52);
                id v61 = v59;
                id v62 = v54;
                id v63 = v55;
                Class v64 = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
                char v65 = static NSObject.== infix(_:_:)(v61, v64);

                if ((v65 & 1) != 0)
                {

                  uint64_t v52 = v60;
                  uint64_t v57 = v243;
                  uint64_t v51 = v58;
                }

                else
                {
                  id v68 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
                  id v69 = objc_msgSend(v68, "ams_iTunesAccountWithDSID:", v61);

                  uint64_t v52 = v60;
                  uint64_t v57 = v243;
                  uint64_t v51 = v58;
                  if (v69)
                  {
                    if (!v53) {
                      goto LABEL_82;
                    }
                    goto LABEL_64;
                  }
                }
              }

              else
              {
                swift_bridgeObjectRetain(v56);
                swift_bridgeObjectRetain(v57);
                swift_bridgeObjectRetain(v52);
                id v66 = v54;
                id v67 = v55;
              }

              if (v54)
              {
                v245 = v51;
                uint64_t v80 = v57;
                uint64_t v81 = v52;
                id v82 = v54;
                Class v83 = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
                char v84 = static NSObject.== infix(_:_:)(v82, v83);

                if ((v84 & 1) != 0)
                {

                  id v69 = 0LL;
                }

                else
                {
                  id v85 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
                  id v69 = objc_msgSend(v85, "ams_iTunesAccountWithDSID:", v82);
                }

                uint64_t v52 = v81;
                uint64_t v57 = v80;
                uint64_t v51 = v245;
                if (!v53)
                {
LABEL_82:
                  if (v69)
                  {
LABEL_83:
                    if (v53 == objc_msgSend(v69, "ams_isManagedAppleID"))
                    {
                      swift_bridgeObjectRelease(v57);
                      swift_release(v45);
                      swift_bridgeObjectRelease(v52);

LABEL_97:
                      swift_bridgeObjectRelease(v250);
                      uint64_t v1 = v218;
                      goto LABEL_98;
                    }
                  }

                  uint64_t v74 = v57;
                  goto LABEL_86;
                }
              }

              else
              {
                id v69 = 0LL;
                if (!v53) {
                  goto LABEL_82;
                }
              }

LABEL_64:
              if (v69) {
                goto LABEL_83;
              }
              NSString v70 = v54;
              uint64_t v240 = v52;
              uint64_t v244 = v57;
              id v71 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
              id v72 = objc_msgSend(v71, "ams_iTunesAccounts");

              uint64_t v73 = sub_10001517C(0LL, &qword_100458708, &OBJC_CLASS___ACAccount_ptr);
              uint64_t v74 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v72, v73);

              id v75 = v51;
              if ((unint64_t)v74 >> 62)
              {
                if (v74 < 0) {
                  uint64_t v86 = v74;
                }
                else {
                  uint64_t v86 = v74 & 0xFFFFFFFFFFFFFF8LL;
                }
                swift_bridgeObjectRetain(v74);
                uint64_t v76 = _CocoaArrayWrapper.endIndex.getter(v86);
                swift_bridgeObjectRelease(v74);
                if (v76)
                {
LABEL_67:
                  uint64_t v77 = 0LL;
                  do
                  {
                    id v78 = (v74 & 0xC000000000000001LL) != 0
                        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v77, v74)
                        : *(id *)(v74 + 8 * v77 + 32);
                    id v69 = v78;
                    uint64_t v79 = v77 + 1;
                    if (__OFADD__(v77, 1LL)) {
                      goto LABEL_190;
                    }
                    if (objc_msgSend(v78, "ams_isManagedAppleID"))
                    {
                      swift_bridgeObjectRelease(v74);
                      swift_bridgeObjectRelease(v244);
                      swift_release(v231);
                      swift_bridgeObjectRelease(v240);

                      goto LABEL_97;
                    }

                    ++v77;
                  }

                  while (v79 != v76);
                }
              }

              else
              {
                uint64_t v76 = *(void *)((v74 & 0xFFFFFFFFFFFFF8LL) + 0x10);
                if (v76) {
                  goto LABEL_67;
                }
              }

              swift_bridgeObjectRelease(v244);
              uint64_t v52 = v240;
              uint64_t v51 = v75;
              uint64_t v54 = v70;
LABEL_86:
              ++v49;
              swift_bridgeObjectRelease(v74);
              swift_bridgeObjectRelease(v52);

              swift_bridgeObjectRelease(v250);
              uint64_t v45 = v231;
              if (v49 == v234)
              {
                swift_release(v231);
                uint64_t v1 = v218;
                goto LABEL_94;
              }
            }
          }
        }

        swift_release(v45);
LABEL_94:
        id v87 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
        id v69 = objc_msgSend(v87, "ams_activeiTunesAccount");

LABEL_98:
        *(void *)(v1 + 728) = v69;
        uint64_t v88 = *(void *)(v1 + 720);
        unint64_t v89 = *(void *)(v88 + 16);
        if (!v89)
        {
LABEL_111:
          uint64_t v102 = (void *)swift_task_alloc(dword_1004585D4);
          *(void *)(v1 + 736) = v102;
          *uint64_t v102 = v1;
          v102[1] = sub_1000126A8;
          sub_10000CF90(*(void *)(v1 + 712));
          return;
        }

        unint64_t v90 = 0LL;
        char v91 = (uint64_t *)(v88 + 104);
        while (1)
        {
          uint64_t v92 = *v91;
          if (*v91) {
            break;
          }
          ++v90;
          v91 += 12;
          if (v89 == v90) {
            goto LABEL_111;
          }
        }

        if (v90 >= v89) {
          goto LABEL_198;
        }
        uint64_t v93 = *(v91 - 1);
        uint64_t v94 = *(void *)(v1 + 752);
        id v95 = v69;
        swift_bridgeObjectRetain(v88);
        swift_bridgeObjectRetain(v92);
        char v96 = swift_isUniquelyReferenced_nonNull_native(v94);
        os_log_type_t v7 = *(void **)(v1 + 752);
        if ((v96 & 1) == 0) {
          os_log_type_t v7 = sub_10008845C(0LL, v7[2] + 1LL, 1, *(void **)(v1 + 752));
        }
        unint64_t v98 = v7[2];
        unint64_t v97 = v7[3];
        if (v98 >= v97 >> 1) {
          os_log_type_t v7 = sub_10008845C((void *)(v97 > 1), v98 + 1, 1, v7);
        }
        uint64_t v99 = *(void *)(v1 + 728);
        uint64_t v100 = *(void *)(v1 + 720);
        v7[2] = v98 + 1;
        uint64_t v101 = &v7[4 * v98];
        v101[4] = v99;
        v101[5] = v100;
        v101[6] = v93;
        v101[7] = v92;

        uint64_t v30 = *(void *)(v1 + 424);
        uint64_t v31 = *(void *)(v1 + 432);
        uint64_t v10 = v220;
        uint64_t v9 = v222;
        if (v30 >= v31) {
          goto LABEL_7;
        }
      }
    }

    break;
  }

  int64_t v23 = v19 + 3;
  if (v23 >= v20) {
    goto LABEL_188;
  }
  unint64_t v22 = *(void *)(v21 + 8 * v23);
  if (v22)
  {
    int64_t v8 = v23;
    goto LABEL_23;
  }

  while (1)
  {
    int64_t v8 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v8 >= v20) {
      goto LABEL_188;
    }
    unint64_t v22 = *(void *)(v21 + 8 * v8);
    ++v23;
    if (v22) {
      goto LABEL_23;
    }
  }

  BOOL v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_isSystemApp));
  [v3 setObject:v37 forKey:@"isSystemApp"];

  if ((*(_WORD *)&self->_has & 0x80) != 0)
  {
LABEL_49:
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_isStoreApp));
    [v3 setObject:v27 forKey:@"isStoreApp"];
  }

LABEL_201:
  __break(1u);
}

uint64_t sub_1000116A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  v3[46] = v2;
  v3[47] = a1;
  v3[48] = a2;
  uint64_t v4 = v3[83];
  v3[84] = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100011704, 0LL, 0LL);
}

void sub_100011704()
{
  uint64_t v145 = v0 + 344;
  uint64_t v146 = v0 + 320;
  unint64_t v147 = (uint64_t *)(v0 + 424);
  uint64_t v148 = (uint64_t *)(v0 + 432);
  uint64_t v1 = *(void **)(v0 + 672);
  if (!v1)
  {
    uint64_t v17 = *(void *)(v0 + 472);
    uint64_t v18 = swift_bridgeObjectRelease(*(void *)(v0 + 640));
    static Logger.updates.getter(v18);
    uint64_t v19 = swift_retain_n(v17, 2LL);
    int64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter();
    BOOL v22 = os_log_type_enabled(v20, v21);
    int64_t v23 = *(void **)(v0 + 656);
    uint64_t v24 = *(void *)(v0 + 472);
    if (v22)
    {
      uint64_t v166 = *(os_log_s **)(v0 + 648);
      __int128 v163 = *(void **)(v0 + 656);
      uint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v25 = 138412290;
      uint64_t v1 = *(void **)(*(void *)(v24 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
      *(void *)(v0 + 416) = v1;
      id v27 = v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v147, v25 + 4, v25 + 12);
      void *v26 = v1;
      swift_release_n(v24, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "[%@] Unable to fetch updates for MAID batch with no storefront country code",  v25,  0xCu);
      uint64_t v28 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v26, 1LL, v28);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);

      int64_t v20 = v166;
    }

    else
    {

      swift_release_n(v24, 2LL);
    }

    id v29 = *(void **)(v0 + 632);
    uint64_t v30 = *(void (**)(void *, void *))(v0 + 560);
    os_log_type_t v7 = *(void **)(v0 + 504);
    uint64_t v4 = *(void **)(v0 + 480);

    v30(v7, v4);
    int64_t v3 = *(void *)(v0 + 624);
    int64_t v16 = *(void *)(v0 + 616);
    uint64_t v15 = (void *)v0;
    goto LABEL_11;
  }

  uint64_t v2 = *(void *)(v0 + 680);
  int64_t v3 = *(void *)(v0 + 376);
  uint64_t v4 = *(void **)(v0 + 648);
  uint64_t v5 = v4;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
  os_log_type_t v7 = *(void **)(v0 + 680);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_158;
  }
  while (2)
  {
    unint64_t v9 = v7[2];
    unint64_t v8 = v7[3];
    if (v9 >= v8 >> 1) {
      os_log_type_t v7 = sub_10008845C((void *)(v8 > 1), v9 + 1, 1, v7);
    }
    uint64_t v10 = *(void **)(v0 + 656);
    char v11 = *(void **)(v0 + 648);
    uint64_t v12 = *(void *)(v0 + 640);
    uint64_t v13 = (void *)v156[79];
    v7[2] = v9 + 1;
    unint64_t v14 = &v7[4 * v9];
    v14[4] = v4;
    v14[5] = v12;
    v14[6] = v3;
    v14[7] = v1;

    uint64_t v15 = v156;
    int64_t v3 = v156[78];
    int64_t v16 = v156[77];
    v156[85] = v7;
LABEL_11:
    while (v3)
    {
      unint64_t v31 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      unint64_t v32 = v31 | (v16 << 6);
      uint64_t v33 = v15[76];
LABEL_27:
      v15[78] = v3;
      v15[77] = v16;
      uint64_t v39 = 8 * v32;
      uint64_t v0 = *(void *)(*(void *)(v33 + 48) + v39);
      v15[79] = v0;
      uint64_t v4 = *(void **)(*(void *)(v33 + 56) + v39);
      v15[80] = v4;
      if (v0)
      {
        uint64_t v40 = (void *)objc_opt_self(&OBJC_CLASS___ACAccountStore);
        uint64_t v0 = (uint64_t)(id)v0;
        swift_bridgeObjectRetain(v4);
        os_log_type_t v7 = objc_msgSend(v40, "ams_sharedAccountStore");
        id v41 = objc_msgSend(v7, "ams_iTunesAccountWithDSID:", v0);
        v15[81] = v41;

        if (v41)
        {
          uint64_t v42 = v4[2];
          if (v42)
          {
            id v149 = v41;
            uint64_t v150 = v0;
            int64_t v151 = v3;
            int64_t v152 = v16;
            uint64_t v167 = sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
            swift_bridgeObjectRetain_n(v4, 2LL);
            uint64_t v154 = v4;
            uint64_t v43 = (void **)(v4 + 8);
            while (1)
            {
              uint64_t v44 = *(v43 - 3);
              uint64_t v45 = *(v43 - 2);
              uint64_t v46 = *v43;
              uint64_t v47 = v43[3];
              id v48 = v43[5];
              uint64_t v1 = v43[7];
              if (v47)
              {
                swift_bridgeObjectRetain(v43[5]);
                swift_bridgeObjectRetain(v1);
                unint64_t v49 = v45;
                id v50 = v47;
                swift_bridgeObjectRetain(v44);
                __int128 v161 = v49;
                id v159 = v49;
                __int128 v164 = v46;
                id v157 = v46;
                id v51 = v50;
                Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
                char v53 = static NSObject.== infix(_:_:)(v51, isa);

                if ((v53 & 1) == 0)
                {

                  swift_bridgeObjectRelease(v48);
                  swift_bridgeObjectRelease(v1);
                  id v48 = v44;
                  uint64_t v15 = v156;
                  goto LABEL_39;
                }

                uint64_t v54 = v156;
                uint64_t v46 = v164;
                uint64_t v45 = v161;
              }

              else
              {
                uint64_t v54 = v15;
                swift_bridgeObjectRetain(v43[5]);
                swift_bridgeObjectRetain(v1);
                swift_bridgeObjectRetain(v44);
                id v55 = v45;
                id v56 = v46;
              }

              uint64_t v57 = v45;
              if (qword_100458008 != -1) {
                swift_once(&qword_100458008, sub_100009B38);
              }
              id v51 = (id)qword_100458570;
              swift_bridgeObjectRelease(v44);
              swift_bridgeObjectRelease(v1);

              uint64_t v15 = v54;
LABEL_39:
              v15[82] = v51;
              swift_bridgeObjectRelease(v48);
              if (qword_100458008 != -1) {
                swift_once(&qword_100458008, sub_100009B38);
              }
              id v58 = (id)qword_100458570;
              os_log_type_t v7 = (void *)v167;
              char v59 = static NSObject.== infix(_:_:)(v51, v58);

              if ((v59 & 1) == 0)
              {
                swift_bridgeObjectRelease_n(v154, 2LL);
                uint64_t v60 = (void *)swift_task_alloc(dword_1004585EC);
                v15[83] = v60;
                *uint64_t v60 = v15;
                v60[1] = sub_1000116A8;
                uint64_t v61 = v15[59];
                v60[3] = v51;
                v60[4] = v61;
                v60[2] = v154;
                swift_task_switch(sub_100014E50, 0LL, 0LL);
                return;
              }

              v43 += 12;
              if (!--v42)
              {
                uint64_t v4 = v154;
                swift_bridgeObjectRelease_n(v154, 2LL);
                int64_t v3 = v151;
                int64_t v16 = v152;
                id v41 = v149;
                uint64_t v0 = v150;
                break;
              }
            }
          }

          swift_bridgeObjectRelease(v4);
        }

        else
        {

          swift_bridgeObjectRelease(v4);
        }
      }
    }

    int64_t v34 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
      goto LABEL_157;
    }

    int64_t v35 = (unint64_t)((1LL << *((_BYTE *)v15 + 761)) + 63) >> 6;
    uint64_t v33 = v15[76];
    if (v34 >= v35) {
      break;
    }
    uint64_t v36 = v33 + 64;
    unint64_t v37 = *(void *)(v33 + 64 + 8 * v34);
    ++v16;
    if (v37) {
      goto LABEL_26;
    }
    int64_t v16 = v34 + 1;
    if (v34 + 1 >= v35) {
      break;
    }
    unint64_t v37 = *(void *)(v36 + 8 * v16);
    if (v37) {
      goto LABEL_26;
    }
    int64_t v16 = v34 + 2;
    if (v34 + 2 >= v35) {
      break;
    }
    unint64_t v37 = *(void *)(v36 + 8 * v16);
    if (v37)
    {
LABEL_26:
      int64_t v3 = (v37 - 1) & v37;
      unint64_t v32 = __clz(__rbit64(v37)) + (v16 << 6);
      goto LABEL_27;
    }

    int64_t v38 = v34 + 3;
    if (v38 < v35)
    {
      unint64_t v37 = *(void *)(v36 + 8 * v38);
      if (!v37)
      {
        while (1)
        {
          int64_t v16 = v38 + 1;
          if (__OFADD__(v38, 1LL)) {
            break;
          }
          if (v16 >= v35) {
            goto LABEL_46;
          }
          unint64_t v37 = *(void *)(v36 + 8 * v16);
          ++v38;
          if (v37) {
            goto LABEL_26;
          }
        }

LABEL_157:
        __break(1u);
LABEL_158:
        os_log_type_t v7 = sub_10008845C(0LL, v7[2] + 1LL, 1, v7);
        continue;
      }

      int64_t v16 = v38;
      goto LABEL_26;
    }

    break;
  }

LABEL_46:
  uint64_t v62 = v15[74];
  swift_release(v33);
  swift_bridgeObjectRelease(v62);
  uint64_t v63 = v15[75];
  Class v64 = sub_1000147B4(v63);
  swift_bridgeObjectRelease(v63);
  int64_t v65 = 0LL;
  v15[86] = v64;
  char v66 = *((_BYTE *)v64 + 32);
  *((_BYTE *)v15 + 762) = v66;
  if (1LL << v66 < 64) {
    uint64_t v67 = ~(-1LL << (1LL << v66));
  }
  else {
    uint64_t v67 = -1LL;
  }
  unint64_t v68 = v67 & v64[8];
  id v69 = (void *)v15[85];
  while (2)
  {
    if (v68)
    {
      uint64_t v71 = (v68 - 1) & v68;
      unint64_t v72 = __clz(__rbit64(v68)) | (v65 << 6);
      uint64_t v73 = v15[86];
      goto LABEL_67;
    }

    int64_t v74 = v65 + 1;
    if (__OFADD__(v65, 1LL)) {
      goto LABEL_164;
    }
    int64_t v75 = (unint64_t)((1LL << *((_BYTE *)v15 + 762)) + 63) >> 6;
    uint64_t v73 = v15[86];
    if (v74 >= v75) {
      goto LABEL_153;
    }
    uint64_t v76 = v73 + 64;
    unint64_t v77 = *(void *)(v73 + 64 + 8 * v74);
    ++v65;
    if (!v77)
    {
      int64_t v65 = v74 + 1;
      if (v74 + 1 >= v75) {
        goto LABEL_153;
      }
      unint64_t v77 = *(void *)(v76 + 8 * v65);
      if (!v77)
      {
        int64_t v65 = v74 + 2;
        if (v74 + 2 >= v75) {
          goto LABEL_153;
        }
        unint64_t v77 = *(void *)(v76 + 8 * v65);
        if (!v77)
        {
          int64_t v78 = v74 + 3;
          if (v78 < v75)
          {
            unint64_t v77 = *(void *)(v76 + 8 * v78);
            if (v77)
            {
              int64_t v65 = v78;
              goto LABEL_66;
            }

            while (1)
            {
              int64_t v65 = v78 + 1;
              if (__OFADD__(v78, 1LL)) {
                goto LABEL_165;
              }
              if (v65 >= v75) {
                break;
              }
              unint64_t v77 = *(void *)(v76 + 8 * v65);
              ++v78;
              if (v77) {
                goto LABEL_66;
              }
            }
          }

    swift_bridgeObjectRetain(*(void *)&v78[OBJC_IVAR____TtC9appstored6LogKey_value + 8]);
    unint64_t v68 = swift_bridgeObjectRelease(v54);
    id v69 = v62 / (double)v60;
    NSString v70 = (uint64_t)v83;
    static Date.now.getter(v68);
    uint64_t v71 = (int *)v82;
    unint64_t v72 = (char *)(v70 + *(int *)(v82 + 20));
    strcpy(v72, "linearDownload");
    v72[15] = -18;
    uint64_t v73 = (void *)(v70 + v71[6]);
    *uint64_t v73 = v59;
    v73[1] = v58;
    *(double *)(v70 + v71[7]) = v69;
    *(double *)(v70 + v71[8]) = a3;
    *(double *)(v70 + v71[9]) = a4;
    *(double *)(v70 + v71[10]) = v27;
    *(_BYTE *)(v70 + v71[11]) = 0;
    int64_t v74 = v77;
    sub_10008A7D0(v70, v77);

    sub_10008D7CC(v70, type metadata accessor for QALogger.LinearDownload);
    return;
  }

  uint64_t v25 = *(void *)((v24 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v25) {
    goto LABEL_36;
  }
LABEL_8:
  if (v25 >= 1)
  {
    uint64_t v26 = 0LL;
    uint64_t v87 = v24 & 0xC000000000000001LL;
    uint64_t v80 = _swiftEmptyArrayStorage;
    uint64_t v81 = v15;
    id v27 = 0.0;
    id v84 = v12;
    unint64_t v88 = v24;
    while (1)
    {
      id v29 = v87
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, v24)
          : *(id *)(v24 + 8 * v26 + 32);
      uint64_t v30 = v29;
      unint64_t v31 = [v29 responseStartDate];
      if (!v31) {
        break;
      }
      unint64_t v32 = v31;
      uint64_t v33 = v86;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v31);

      int64_t v34 = (void (*)(char *, char *, uint64_t))v16[4];
      v34(v14, v33, v15);
      int64_t v35 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v16[7];
      v35(v14, 0LL, 1LL, v15);
      uint64_t v36 = (unsigned int (*)(char *, uint64_t, uint64_t))v16[6];
      if (v36(v14, 1LL, v15) == 1) {
        goto LABEL_11;
      }
      v34(v85, v14, v15);
      unint64_t v37 = [v30 responseEndDate];
      if (v37)
      {
        int64_t v38 = v37;
        uint64_t v39 = v14;
        uint64_t v40 = v25;
        id v41 = v16;
        uint64_t v42 = v86;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v37);

        uint64_t v43 = (uint64_t)v84;
        uint64_t v44 = v42;
        int64_t v16 = v41;
        uint64_t v25 = v40;
        unint64_t v14 = v39;
        uint64_t v15 = v81;
        v34(v84, v44, v81);
        v35((char *)v43, 0LL, 1LL, v15);
        if (v36((char *)v43, 1LL, v15) != 1)
        {
          uint64_t v45 = v79;
          v34(v79, (char *)v43, v15);
          uint64_t v46 = v85;
          if ((static Date.< infix(_:_:)(v85, v45) & 1) != 0)
          {
            uint64_t v47 = Date.timeIntervalSince(_:)(v46);
            id v48 = [v30 countOfResponseBodyBytesReceived];
            if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0) {
              uint64_t v80 = sub_100088CA8(0LL, v80[2] + 1LL, 1, v80);
            }
            id v50 = v80[2];
            unint64_t v49 = v80[3];
            if (v50 >= v49 >> 1) {
              uint64_t v80 = sub_100088CA8((void *)(v49 > 1), v50 + 1, 1, v80);
            }
            id v27 = v27 + v47;
            id v51 = v80;
            v80[2] = v50 + 1;
            *(double *)&v51[v50 + 4] = (double)(uint64_t)v48 / v47;

            uint64_t v52 = (void (*)(uint64_t, uint64_t))v16[1];
            v52((uint64_t)v79, v15);
            char v53 = v85;
          }

          else
          {

            uint64_t v52 = (void (*)(uint64_t, uint64_t))v16[1];
            v52((uint64_t)v45, v15);
            char v53 = v46;
          }

          v52((uint64_t)v53, v15);
          goto LABEL_13;
        }
      }

      else
      {
        uint64_t v43 = (uint64_t)v84;
        v35(v84, 1LL, 1LL, v15);
      }

      ((void (*)(char *, uint64_t))v16[1])(v85, v15);
      uint64_t v28 = v43;
LABEL_12:
      sub_100015240(v28, (uint64_t *)&unk_100459410);
LABEL_13:
      ++v26;
      uint64_t v24 = v88;
      if (v25 == v26)
      {
        swift_bridgeObjectRelease(v88);
        uint64_t v54 = v80;
        goto LABEL_37;
      }
    }

    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v16[7])(v14, 1LL, 1LL, v15);
LABEL_11:

    uint64_t v28 = (uint64_t)v14;
    goto LABEL_12;
  }

  __break(1u);
}

  sub_1002F9DAC((uint64_t)&OBJC_CLASS___AppDefaultsManager, v177, &off_10040C478);
  uint64_t v57 = objc_alloc(&OBJC_CLASS___RestoreBatchContext);
  error = self->super._error;
  Property = objc_getProperty(self, v59, 40LL, 1);
  uint64_t v61 = error;
  uint64_t v62 = Property;
  if (v57
    && (v196.receiver = v57,
        v196.super_class = (Class)&OBJC_CLASS___RestoreBatchContext,
        (uint64_t v63 = -[Task init](&v196, "init")) != 0LL))
  {
    Class v64 = v63;
    char v170 = v62;
    objc_storeStrong(&v63->super.super._private, Property);
    int64_t v65 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    char v66 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v67 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    lock = v64->super._lock;
    id v69 = v64;
    v64->super._lock = (NSLock *)v67;

    uint64_t v194 = 0u;
    unint64_t v195 = 0u;
    id v192 = 0u;
    uint64_t v193 = 0u;
    NSString v70 = v61;
    uint64_t v71 = -[NSError countByEnumeratingWithState:objects:count:]( v70,  "countByEnumeratingWithState:objects:count:",  &v192,  buf,  16LL);
    if (v71)
    {
      unint64_t v72 = v71;
      uint64_t v73 = *(void *)v193;
      selfb = (id)ASDErrorDomain;
      do
      {
        for (k = 0LL; k != v72; k = (char *)k + 1)
        {
          if (*(void *)v193 != v73) {
            objc_enumerationMutation(v70);
          }
          int64_t v75 = *(void **)(*((void *)&v192 + 1) + 8LL * (void)k);
          uint64_t v76 = sub_100323DD0(v75);
          unint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(v76);

          if (v77)
          {
            int64_t v78 = sub_100323DD0(v75);
            uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v75, v79);

            uint64_t v80 = v69->super._lock;
            uint64_t v81 = sub_100323DD0(v75);
            uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(v81);
            -[NSLock addObject:](v80, "addObject:", v82);

            -[NSMutableArray addObject:](v65, "addObject:", v75);
          }

          else
          {
            unint64_t v83 = -[LogKey initWithAppInstallMemoryEntity:]( objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey),  "initWithAppInstallMemoryEntity:",  v75);
            id v84 = ASDLogHandleForCategory(29LL);
            uint64_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
            if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)uint64_t v200 = 138412290;
              uint64_t v201 = v83;
              _os_log_error_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_ERROR,  "[%@] Skipping item due to missing itemID on metadata",  v200,  0xCu);
            }

            uint64_t v86 = ASDErrorWithTitleAndMessage(selfb, 507LL, @"itemID is missing", 0LL);
            uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(v86);
            sub_1002D7A84(v75, v87);
          }
        }

        unint64_t v72 = -[NSError countByEnumeratingWithState:objects:count:]( v70,  "countByEnumeratingWithState:objects:count:",  &v192,  buf,  16LL);
      }

      while (v72);
    }

    unint64_t v88 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    uint64_t v89 = v69;
    uint64_t v90 = *(void **)&v69->super.super._private1;
    *(void *)&v69->super.super._private1 = v88;

    uint64_t v91 = (KeepAlive *)-[NSMutableDictionary copy](v66, "copy");
    keepAlive = v69->super._keepAlive;
    v69->super._keepAlive = v91;

    uint64_t v93 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    uint64_t v94 = *(void **)&v69->super._success;
    *(void *)&v69->super._success = v93;

    uint64_t v95 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    char v96 = v69->super._error;
    v69->super._error = (NSError *)v95;

    uint64_t v97 = (ACAccount *)-[NSMutableArray copy](v65, "copy");
    account = v69->_account;
    v69->_account = v97;

    uint64_t v100 = objc_getProperty(v69, v99, 56LL, 1);
    id v101 = 0;
    self = v169;
  }

  else
  {

    uint64_t v89 = 0LL;
    uint64_t v100 = 0LL;
    id v101 = 1;
  }

  selfc = v89;
  if ([v100 count])
  {
    int v106 = objc_alloc(&OBJC_CLASS___ContentRestoreTask);
    if ((v101 & 1) != 0) {
      unint64_t v107 = 0LL;
    }
    else {
      unint64_t v107 = objc_getProperty(v89, v105, 56LL, 1);
    }
    uint64_t v108 = v107;
    id v110 = objc_getProperty(self, v109, 40LL, 1);
    id v111 = sub_1001D533C((id *)&v106->super.super.super.isa, v108, v110);

    uint64_t v183 = 0LL;
    -[Task runSubTask:returningError:](self, "runSubTask:returningError:", v111, &v183);
    id v112 = (_TtC9appstored6LogKey *)v183;
    if (!v112)
    {
      unint64_t v122 = sub_100200918(self, v111, v89);
      int64_t v123 = (void *)objc_claimAutoreleasedReturnValue(v122);
      id v124 = 0LL;
      goto LABEL_84;
    }

    id v113 = ASDLogHandleForCategory(29LL);
    char v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
    if (os_log_type_enabled(v114, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      id v203 = v112;
      _os_log_error_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_ERROR,  "Error running content restore request. Error: %{public}@",  buf,  0xCu);
    }

    id v115 = v112;
    objc_opt_self(&OBJC_CLASS___RestoreBatchTask);
    id v116 = (void *)objc_claimAutoreleasedReturnValue(-[LogKey domain](v115, "domain"));
    if ([v116 isEqualToString:AMSErrorDomain])
    {
      id v117 = (void *)objc_claimAutoreleasedReturnValue(-[LogKey userInfo](v115, "userInfo"));
      id v118 = (void *)objc_claimAutoreleasedReturnValue([v117 objectForKeyedSubscript:@"AMSServerErrorCode"]);
      if ([v118 isEqualToNumber:&off_10040C448])
      {

LABEL_80:
        uint64_t v134 = (void *)objc_claimAutoreleasedReturnValue(-[LogKey userInfo](v115, "userInfo"));
        id v135 = (void *)objc_claimAutoreleasedReturnValue([v134 objectForKeyedSubscript:@"AMSServerErrorCode"]);

        char v136 = ASDErrorDomain;
        unint64_t v137 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Token failure (%@)",  v135));
        unint64_t v138 = ASDErrorWithTitleAndMessage(v136, 744LL, v137, 0LL);
        id v124 = (_TtC9appstored6LogKey *)objc_claimAutoreleasedReturnValue(v138);

        goto LABEL_81;
      }

      uint64_t v132 = (void *)objc_claimAutoreleasedReturnValue(-[LogKey userInfo](v115, "userInfo"));
      uint64_t v133 = (void *)objc_claimAutoreleasedReturnValue([v132 objectForKeyedSubscript:@"AMSServerErrorCode"]);
      uint64_t v172 = [v133 isEqualToNumber:&off_10040C460];

      self = v169;
      if ((v172 & 1) != 0) {
        goto LABEL_80;
      }
    }

    else
    {
    }

    id v124 = v115;
LABEL_81:
    uint64_t v89 = selfc;
    if ((v101 & 1) != 0) {
      uint64_t v139 = 0LL;
    }
    else {
      uint64_t v139 = objc_getProperty(selfc, v125, 56LL, 1);
    }
    sub_100200504((uint64_t)self, v139, v124, selfc);
    int64_t v123 = 0LL;
LABEL_84:
    if ([v123 count])
    {
      uint64_t v140 = v89;
      __int128 v141 = sub_1001D533C((id *)objc_alloc(&OBJC_CLASS___ContentRestoreTask), v123, *(void **)&self->super._success);
      int64_t v182 = v124;
      -[Task runSubTask:returningError:](self, "runSubTask:returningError:", v141, &v182);
      uint64_t v119 = v182;

      __int128 v142 = sub_100200918(self, v141, v140);
      if (v119) {
        sub_100200504((uint64_t)self, v123, v119, v140);
      }
      if (v123)
      {
        uint64_t v143 = ASDLogHandleForCategory(29LL);
        uint64_t v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v143);
        if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
        {
          uint64_t v166 = (_TtC9appstored6LogKey *)objc_claimAutoreleasedReturnValue(objc_msgSend(v123, "componentsJoinedByString:", @", "));
          *(_DWORD *)buf = 138543362;
          id v203 = v166;
          _os_log_error_impl( (void *)&_mh_execute_header,  v144,  OS_LOG_TYPE_ERROR,  "Retry complete for items: [%{public}@]",  buf,  0xCu);
        }
      }

      uint64_t v89 = selfc;
    }

    else
    {
      uint64_t v119 = v124;
    }

    if ((v101 & 1) != 0)
    {
      id v121 = 0LL;
      uint64_t v120 = 1;
      goto LABEL_95;
    }

    goto LABEL_94;
  }

  uint64_t v119 = 0LL;
  if ((v101 & 1) == 0)
  {
LABEL_94:
    uint64_t v120 = 0;
    id v121 = v89->super._lock;
    goto LABEL_95;
  }

  uint64_t v120 = 1;
  id v121 = 0LL;
LABEL_95:
  if (-[NSLock count](v121, "count"))
  {
    uint64_t v168 = v119;
    if ((v120 & 1) != 0) {
      uint64_t v145 = 0LL;
    }
    else {
      uint64_t v145 = v89->super._lock;
    }
    unint64_t v178 = 0u;
    unint64_t v179 = 0u;
    uint64_t v180 = 0u;
    int64_t v181 = 0u;
    offset = -[NSLock copy](v145, "copy");
    uint64_t v146 = [offset countByEnumeratingWithState:&v178 objects:v197 count:16];
    if (v146)
    {
      uint64_t v148 = v146;
      id v149 = *(void *)v179;
      unint64_t v173 = ASDErrorDomain;
      do
      {
        uint64_t v150 = 0LL;
        do
        {
          if (*(void *)v179 != v149) {
            objc_enumerationMutation(offset);
          }
          int64_t v151 = *(_TtC9appstored6LogKey **)(*((void *)&v178 + 1) + 8LL * (void)v150);
          if ((v120 & 1) != 0) {
            int64_t v152 = 0LL;
          }
          else {
            int64_t v152 = objc_getProperty(v89, v147, 24LL, 1);
          }
          int64_t v153 = (void *)objc_claimAutoreleasedReturnValue([v152 objectForKeyedSubscript:v151]);
          if (v153)
          {
            uint64_t v154 = -[LogKey initWithAppInstallMemoryEntity:]( objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey),  "initWithAppInstallMemoryEntity:",  v153);
            uint64_t v155 = ASDErrorWithTitleAndMessage( v173,  742LL,  @"Metadata / Error for this item is missing in server response",  0LL);
            uint64_t v156 = (void *)objc_claimAutoreleasedReturnValue(v155);
            id v157 = (void *)objc_claimAutoreleasedReturnValue([v153 valueForProperty:@"restore_retry_count"]);
            uint64_t v158 = (uint64_t)[v157 integerValue];

            id v159 = ASDLogHandleForCategory(29LL);
            uint64_t v160 = (os_log_s *)objc_claimAutoreleasedReturnValue(v159);
            __int128 v161 = os_log_type_enabled(v160, OS_LOG_TYPE_ERROR);
            if (v158 < 5)
            {
              if (v161)
              {
                *(_DWORD *)buf = 138412546;
                id v203 = v154;
                id v204 = 2048;
                id v205 = v158;
                _os_log_error_impl( (void *)&_mh_execute_header,  v160,  OS_LOG_TYPE_ERROR,  "[%@] Soft failing item not in the server response, and not encountering an error. Soft failure retry count: %ld",  buf,  0x16u);
              }

              uint64_t v89 = selfc;
              sub_1002015D0((uint64_t)selfc, v153, v156);
            }

            else
            {
              if (v161)
              {
                *(_DWORD *)buf = 138412546;
                id v203 = v154;
                id v204 = 2048;
                id v205 = v158;
                _os_log_error_impl( (void *)&_mh_execute_header,  v160,  OS_LOG_TYPE_ERROR,  "[%@] Hard failing after %ld attempts",  buf,  0x16u);
              }

              uint64_t v89 = selfc;
              sub_100201554((uint64_t)selfc, v153, v156);
            }
          }

          else
          {
            __int128 v162 = ASDLogHandleForCategory(29LL);
            uint64_t v154 = (_TtC9appstored6LogKey *)objc_claimAutoreleasedReturnValue(v162);
            if (os_log_type_enabled((os_log_t)v154, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543362;
              id v203 = v151;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v154,  OS_LOG_TYPE_ERROR,  "itemID: %{public}@ not in restore map",  buf,  0xCu);
            }
          }

          uint64_t v150 = (char *)v150 + 1;
        }

        while (v148 != v150);
        __int128 v163 = [offset countByEnumeratingWithState:&v178 objects:v197 count:16];
        uint64_t v148 = v163;
      }

      while (v163);
    }

    uint64_t v119 = v168;
    self = v169;
  }

  if ((v120 & 1) != 0)
  {
    restoreInstalls = self->_restoreInstalls;
    self->_restoreInstalls = 0LL;

    objc_storeStrong((id *)&self->_skipLatestVersionCheck, 0LL);
    __int128 v164 = 0LL;
  }

  else
  {
    objc_storeStrong((id *)&self->_restoreInstalls, *(id *)&v89->super.super._private1);
    objc_storeStrong((id *)&self->_skipLatestVersionCheck, *(id *)&v89->super._success);
    __int128 v164 = v89->super._error;
  }

  objc_storeStrong((id *)&self->_hardFailures, v164);
  objc_setProperty_atomic_copy(self, v165, v119, 32LL);
  LOBYTE(self->super._keepAlive) = v119 == 0LL;
}
}

        goto LABEL_47;
      }

      id v56 = v3;
      id v41 = 1;
    }

    else
    {
      id v56 = v3;
      char v53 = 0LL;
      id v41 = 0;
    }

    uint64_t v42 = sub_1002C8678(self);
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
    if (v43 || (uint64_t v44 = sub_1002C8678(v8), (v52 = objc_claimAutoreleasedReturnValue(v44)) != 0))
    {
      uint64_t v54 = v41;
      id v55 = v6;
      uint64_t v45 = sub_1002C8678(self);
      uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
      uint64_t v47 = sub_1002C8678(v8);
      id v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
      uint64_t v15 = [v46 isEqual:v48];

      if (v43)
      {

        if (!v54)
        {
          uint64_t v6 = v55;
          int64_t v3 = v56;
          goto LABEL_43;
        }

        uint64_t v6 = v55;
        int64_t v3 = v56;
        goto LABEL_42;
      }

      uint64_t v6 = v55;
      LOBYTE(v41) = v54;
      unint64_t v49 = (void *)v52;
    }

    else
    {
      unint64_t v49 = 0LL;
      uint64_t v15 = 1;
    }

    int64_t v3 = v56;
    if ((v41 & 1) == 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }

  uint64_t v15 = 0;
LABEL_60:
  if (!v11) {

  }
LABEL_63:
  return v15;
}

LABEL_47:
  if (a4 && v23)
  {
    int64_t v23 = v23;
    *a4 = v23;
  }

LABEL_153:
          swift_release(v73);
          uint64_t v143 = v15[63];
          uint64_t v144 = v15[62];
          swift_task_dealloc(v15[64]);
          swift_task_dealloc(v143);
          swift_task_dealloc(v144);
          ((void (*)(void *))v15[1])(v69);
          return;
        }
      }
    }

LABEL_66:
    uint64_t v71 = (v77 - 1) & v77;
    unint64_t v72 = __clz(__rbit64(v77)) + (v65 << 6);
LABEL_67:
    v15[88] = v71;
    v15[87] = v65;
    uint64_t v79 = v15[69];
    uint64_t v80 = 8 * v72;
    uint64_t v81 = *(void **)(*(void *)(v73 + 48) + v80);
    v15[89] = v81;
    uint64_t v82 = *(void *)(*(void *)(v73 + 56) + v80);
    v15[90] = v82;
    v15[53] = 0LL;
    unint64_t v83 = *(void *)(v82 + 16);
    if (v79 <= 0)
    {
      if (v79 && !v83) {
        goto LABEL_73;
      }
    }

    else if (v83 < v79)
    {
      goto LABEL_73;
    }

    unint64_t v83 = v79;
LABEL_73:
    *uint64_t v148 = v83;
    swift_bridgeObjectRetain_n(v82, 2LL);
    id v84 = v81;
    swift_beginAccess(v147, v146, 1LL, 0LL);
    swift_beginAccess(v148, v145, 1LL, 0LL);
    uint64_t v85 = *v147;
    uint64_t v86 = *v148;
    if (*v147 >= *v148) {
      goto LABEL_50;
    }
LABEL_74:
    v15[94] = v69;
    uint64_t v87 = v15[90];
    v15[53] = v86;
    unint64_t v88 = *(void *)(v87 + 16);
    uint64_t v89 = v88 - v86;
    if (!__OFSUB__(v88, v86))
    {
      uint64_t v90 = v15[69];
      if (v90 < 1)
      {
        BOOL v92 = v89 <= 0 && v90 < v89;
        uint64_t v91 = *(void *)(v87 + 16);
        if (!v92) {
          goto LABEL_83;
        }
      }

      else if (v89 < 0 || (uint64_t v91 = *(void *)(v87 + 16), v89 >= (unint64_t)v90))
      {
LABEL_83:
        uint64_t v91 = v86 + v90;
        if (__OFADD__(v86, v90)) {
          goto LABEL_162;
        }
      }

      *uint64_t v148 = v91;
      if (v85 < 0) {
        goto LABEL_160;
      }
      int64_t v3 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
      uint64_t v94 = swift_bridgeObjectRetain(v87);
      uint64_t v95 = swift_unknownObjectRetain_n(v94, 2LL);
      char v96 = (void *)swift_dynamicCastClass(v95, v3);
      if (!v96)
      {
        swift_bridgeObjectRelease(v87);
        char v96 = _swiftEmptyArrayStorage;
      }

      uint64_t v97 = v96[2];
      swift_release(v96);
      uint64_t v98 = v15[90];
      if (v97 == v86 - v85)
      {
        uint64_t v4 = (void *)swift_dynamicCastClass(v15[90], v3);
        if (!v4)
        {
          swift_bridgeObjectRelease(v98);
          uint64_t v4 = _swiftEmptyArrayStorage;
        }
      }

      else
      {
        swift_bridgeObjectRelease(v15[90]);
        uint64_t v4 = sub_1000610BC(v98, v98 + 32, v85, (2 * v86) | 1);
      }

      swift_bridgeObjectRelease(v15[90]);
      if (qword_100458008 != -1) {
        swift_once(&qword_100458008, sub_100009B38);
      }
      uint64_t v99 = v15[89];
      uint64_t v100 = (void *)qword_100458570;
      os_log_type_t v7 = (void *)sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
      id v101 = v100;
      uint64_t v0 = static NSObject.== infix(_:_:)(v99, v101);

      if ((v0 & 1) != 0 || (uint64_t v158 = v4[2]) == 0)
      {
LABEL_135:
        swift_release(v4);
        id v126 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
        id v117 = objc_msgSend(v126, "ams_activeiTunesAccount");

        goto LABEL_139;
      }

      unint64_t v102 = 0LL;
      uint64_t v160 = v4;
      __int128 v162 = v4 + 4;
LABEL_99:
      if (v102 >= v4[2]) {
        goto LABEL_156;
      }
      uint64_t v103 = &v162[12 * v102];
      uint64_t v104 = v103[1];
      uint64_t v105 = (void *)v103[2];
      int v106 = *((unsigned __int8 *)v103 + 25);
      uint64_t v1 = (void *)v103[4];
      unint64_t v107 = (void *)v103[7];
      uint64_t v108 = v103[9];
      int64_t v3 = v103[11];
      __int128 v165 = v107;
      uint64_t v168 = v108;
      if (v105)
      {
        swift_bridgeObjectRetain(v108);
        int64_t v109 = v3;
        swift_bridgeObjectRetain(v3);
        id v110 = v105;
        swift_bridgeObjectRetain(v104);
        id v111 = v110;
        id v112 = v1;
        id v113 = v107;
        uint64_t v0 = (uint64_t)NSNumber.init(integerLiteral:)(0LL).super.super.isa;
        char v114 = static NSObject.== infix(_:_:)(v111, v0);

        if ((v114 & 1) != 0)
        {

          int64_t v3 = v109;
          goto LABEL_117;
        }

        uint64_t v0 = (uint64_t)objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
        id v117 = objc_msgSend((id)v0, "ams_iTunesAccountWithDSID:", v111);

        int64_t v3 = v109;
        if (v117)
        {
          if (v106) {
            goto LABEL_106;
          }
LABEL_124:
          if (v117) {
            goto LABEL_125;
          }
LABEL_127:
          uint64_t v4 = v160;
          goto LABEL_128;
        }
      }

      else
      {
        swift_bridgeObjectRetain(v108);
        swift_bridgeObjectRetain(v3);
        swift_bridgeObjectRetain(v104);
        id v115 = v1;
        id v116 = v107;
      }

  __break(1u);
LABEL_67:
  __break(1u);
}

    id v84 = (void *)v71[2];
LABEL_67:
    uint64_t v85 = v84;

    if (!v5)
    {

      uint64_t v219 = ASDLogHandleForCategory(31LL);
      char v170 = (os_log_s *)objc_claimAutoreleasedReturnValue(v219);
      BOOL v22 = v233;
      uint64_t v15 = v235;
      goto LABEL_121;
    }

    objc_storeWeak(v25 + 15, v85);

    BOOL v22 = v233;
    uint64_t v15 = v235;
LABEL_69:
    uint64_t v86 = objc_loadWeakRetained((id *)v5 + 15);

    if (v86)
    {
      uint64_t v87 = objc_loadWeakRetained((id *)v5 + 15);
      unint64_t v88 = objc_claimAutoreleasedReturnValue([v87 dataTaskWithRequest:v15]);

      selfa = (id)v88;
      if (!v88)
      {
        uint64_t v183 = ASDLogHandleForCategory(31LL);
        unint64_t v184 = (os_log_s *)objc_claimAutoreleasedReturnValue(v183);
        int64_t v185 = v184;
        uint64_t v186 = *((void *)v5 + 16);
        if (v186 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v184))
        {
          uint64_t v188 = objc_getProperty(v5, v187, 56LL, 1);
          uint64_t v189 = objc_claimAutoreleasedReturnValue([v14 URL]);
          unint64_t v227 = v14;
          id v190 = v22;
          id v191 = (void *)v189;
          *(_DWORD *)buf = 138543618;
          v247 = v188;
          uint64_t v248 = 2114;
          uint64_t v249 = v189;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v185,  OS_SIGNPOST_EVENT,  v186,  "TaskError",  " uuid=%{public, signpost.description:attribute}@  request=%{public, signpost.description:attribute}@ ",  buf,  0x16u);

          BOOL v22 = v190;
          unint64_t v14 = v227;
        }

        id v192 = ASDLogHandleForCategory(10LL);
        uint64_t v193 = (os_log_s *)objc_claimAutoreleasedReturnValue(v192);
        if (os_log_type_enabled(v193, OS_LOG_TYPE_ERROR))
        {
          uint64_t v215 = objc_getProperty(v5, v194, 56LL, 1);
          uint64_t v216 = (void *)objc_claimAutoreleasedReturnValue([v14 URL]);
          *(_DWORD *)buf = 138412546;
          v247 = v215;
          uint64_t v248 = 2114;
          uint64_t v249 = (uint64_t)v216;
          _os_log_error_impl( (void *)&_mh_execute_header,  v193,  OS_LOG_TYPE_ERROR,  "[%@] Error creating task for URL: %{public}@",  buf,  0x16u);
        }

        unint64_t v195 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"AssetErrorDomain",  5LL,  0LL));
        objc_setProperty_atomic(v5, v196, v195, 40LL);

        sub_1002BD6C8(a1, v5);
        goto LABEL_133;
      }

      uint64_t v229 = v6;
      uint64_t v90 = *(void **)(a1 + 32);
      uint64_t v91 = objc_getProperty(v5, v89, 32LL, 1);
      BOOL v92 = (void *)objc_claimAutoreleasedReturnValue([v90 objectForKeyedSubscript:v91]);
      uint64_t v93 = sub_1002B4FA8(v92);

      uint64_t v94 = ASDLogHandleForCategory(10LL);
      uint64_t v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
      if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
      {
        unint64_t v207 = objc_getProperty(v5, v96, 56LL, 1);
        char v209 = v14;
        uint64_t v210 = v22;
        uint64_t v211 = objc_getProperty(v5, v208, 32LL, 1);
        *(_DWORD *)buf = 138412802;
        v247 = v207;
        uint64_t v248 = 2114;
        uint64_t v249 = (uint64_t)v211;
        uint64_t v250 = 2048;
        uint64_t v251 = v93;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEBUG,  "[%@] Started active task in session: %{public}@, now %llu active tasks.",  buf,  0x20u);

        BOOL v22 = v210;
        unint64_t v14 = v209;
      }

      uint64_t v97 = v5;
      uint64_t v98 = selfa;
      uint64_t v100 = objc_getProperty(v97, v99, 96LL, 1);
      uint64_t v234 = v22;
      if (v100)
      {
        id v101 = v100[21];

        unint64_t v102 = 1LL;
        switch(v101)
        {
          case 0LL:
            goto LABEL_159;
          case 1LL:
          case 2LL:
          case 3LL:
          case 4LL:
          case 6LL:
          case 8LL:
          case 9LL:
            goto LABEL_75;
          case 5LL:
            unint64_t v102 = 3LL;
            goto LABEL_75;
          case 7LL:
            unint64_t v102 = 2LL;
LABEL_75:
            uint64_t v103 = (void *)nw_activity_create(38LL, v102);
            if (v103)
            {
              uint64_t v104 = ASDLogHandleForCategory(10LL);
              uint64_t v105 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
              if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
              {
                unint64_t v107 = objc_getProperty(v97, v106, 56LL, 1);
                *(_DWORD *)buf = 138412546;
                v247 = v107;
                uint64_t v248 = 2114;
                uint64_t v249 = (uint64_t)v103;
                _os_log_impl( (void *)&_mh_execute_header,  v105,  OS_LOG_TYPE_INFO,  "[%@] Activating network activity: %{public}@",  buf,  0x16u);
              }

              nw_activity_activate(v103);
              objc_msgSend(v98, "set_nw_activity:", v103);
              objc_setProperty_atomic(v97, v108, v103, 72LL);
            }

            goto LABEL_79;
          default:
            uint64_t v201 = ASDLogHandleForCategory(10LL);
            uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue(v201);
            if (!os_log_type_enabled((os_log_t)v103, OS_LOG_TYPE_ERROR)) {
              goto LABEL_79;
            }
            id v203 = objc_getProperty(v97, v202, 56LL, 1);
            *(_DWORD *)buf = 138412546;
            v247 = v203;
            uint64_t v248 = 2048;
            uint64_t v249 = v101;
            id v204 = "[%@] No reporting as request reason '%ld' is unknown";
            id v205 = (os_log_s *)v103;
            id v206 = 22;
            break;
        }
      }

      else
      {
LABEL_159:
        uint64_t v220 = ASDLogHandleForCategory(10LL);
        uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue(v220);
        if (!os_log_type_enabled((os_log_t)v103, OS_LOG_TYPE_ERROR))
        {
LABEL_79:

          int64_t v109 = ASDLogHandleForCategory(31LL);
          id v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
          id v111 = v110;
          id v112 = v97[16];
          if (v112 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v110))
          {
            char v114 = objc_getProperty(v97, v113, 56LL, 1);
            id v115 = (void *)objc_claimAutoreleasedReturnValue([v14 URL]);
            *(_DWORD *)buf = 138543618;
            v247 = v114;
            uint64_t v248 = 2114;
            uint64_t v249 = (uint64_t)v115;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v111,  OS_SIGNPOST_EVENT,  v112,  "TaskCreated",  " uuid=%{public, signpost.description:attribute}@  request=%{public, signpost.description:attribute}@ ",  buf,  0x16u);
          }

          id v116 = ASDLogHandleForCategory(10LL);
          id v117 = (os_log_s *)objc_claimAutoreleasedReturnValue(v116);
          if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v119 = objc_getProperty(v97, v118, 56LL, 1);
            id v121 = objc_getProperty(v97, v120, 32LL, 1);
            unint64_t v122 = (void *)objc_claimAutoreleasedReturnValue([v14 URL]);
            *(_DWORD *)buf = 138413058;
            v247 = v119;
            uint64_t v248 = 2114;
            uint64_t v249 = (uint64_t)v98;
            uint64_t v250 = 2114;
            uint64_t v251 = (uint64_t)v121;
            v252 = 2114;
            v253 = v122;
            _os_log_impl( (void *)&_mh_execute_header,  v117,  OS_LOG_TYPE_DEFAULT,  "[%@] Created task: %{public}@ in session: %{public}@ for URL: %{public}@ ",  buf,  0x2Au);
          }

          if (os_variant_has_internal_content("com.apple.appstored"))
          {
            int64_t v123 = sub_1001AED20((uint64_t)&OBJC_CLASS___DiagnosticPublisher);
            id v124 = (void *)objc_claimAutoreleasedReturnValue(v123);

            if (v124)
            {
              id v126 = objc_alloc(&OBJC_CLASS___VariantDescriptor);
              if (v12) {
                uint64_t v127 = objc_getProperty(v12, v125, 192LL, 1);
              }
              else {
                uint64_t v127 = 0LL;
              }
              uint64_t v128 = v127;
              unint64_t v129 = sub_1001D3520((id *)&v126->super.isa, v128);

              unint64_t v130 = sub_1001AED20((uint64_t)&OBJC_CLASS___DiagnosticPublisher);
              uint64_t v131 = (void *)objc_claimAutoreleasedReturnValue(v130);
              v242[0] = _NSConcreteStackBlock;
              v242[1] = 3221225472LL;
              v242[2] = sub_1002C0908;
              v242[3] = &unk_1003F13C0;
              uint64_t v243 = v14;
              uint64_t v244 = v12;
              v245 = v129;
              uint64_t v132 = v129;
              sub_1001AEEE8((uint64_t)v131, 1001LL, v242);
            }
          }

          sub_1001BAACC((uint64_t)&OBJC_CLASS___AssetTaskInfo, v97, v98);
          if (v12) {
            uint64_t v134 = objc_getProperty(v12, v133, 184LL, 1);
          }
          else {
            uint64_t v134 = 0LL;
          }
          id v135 = v134;

          if (v135)
          {
            if (v12) {
              unint64_t v137 = objc_getProperty(v12, v136, 184LL, 1);
            }
            else {
              unint64_t v137 = 0LL;
            }
            unint64_t v138 = v137;
            objc_msgSend(v98, "set_priority:", objc_msgSend(v138, "longLongValue"));

            if (v12)
            {
LABEL_95:
              uint64_t v140 = objc_getProperty(v12, v139, 40LL, 1);
LABEL_96:
              __int128 v141 = v140;

              if (v141)
              {
                if (v12) {
                  uint64_t v143 = objc_getProperty(v12, v142, 40LL, 1);
                }
                else {
                  uint64_t v143 = 0LL;
                }
                uint64_t v144 = v143;
                objc_msgSend(v98, "set_bytesPerSecondLimit:", objc_msgSend(v144, "longLongValue"));
              }

              if (v12) {
                uint64_t v145 = objc_getProperty(v12, v142, 112LL, 1);
              }
              else {
                uint64_t v145 = 0LL;
              }
              uint64_t v146 = v145;

              if (v146)
              {
                if (v12) {
                  uint64_t v148 = objc_getProperty(v12, v147, 112LL, 1);
                }
                else {
                  uint64_t v148 = 0LL;
                }
                id v149 = v148;
                [v149 doubleValue];
                objc_msgSend(v98, "set_loadingPriority:");
              }

              if (!v12 || (uint64_t v150 = *((unsigned int *)v12 + 4), !(_DWORD)v150))
              {
                int64_t v151 = ASDLogHandleForCategory(10LL);
                int64_t v152 = (os_log_s *)objc_claimAutoreleasedReturnValue(v151);
                if (os_log_type_enabled(v152, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v217 = objc_getProperty(v97, v153, 56LL, 1);
                  *(_DWORD *)buf = 138412290;
                  v247 = v217;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v152,  OS_LOG_TYPE_ERROR,  "[%@] QOS class was unspecified, defaulting to utility!",  buf,  0xCu);
                }

                uint64_t v150 = 17LL;
              }

              v238[0] = _NSConcreteStackBlock;
              v238[1] = 3221225472LL;
              v238[2] = sub_1002C09D4;
              v238[3] = &unk_1003E97D0;
              uint64_t v154 = v97;
              id v239 = v154;
              uint64_t v240 = v14;
              uint64_t v241 = v98;
              uint64_t v155 = objc_retainBlock(v238);
              id v157 = objc_getProperty(v154, v156, 96LL, 1);
              id v159 = v157;
              if (v157) {
                id v157 = objc_getProperty(v157, v158, 104LL, 1);
              }
              uint64_t v160 = v157;

              if (v160 && _os_feature_enabled_impl("AppStoreDaemon", "EnableDownloadBoosting"))
              {
                __int128 v161 = sub_1001D1304((uint64_t)&OBJC_CLASS___VoucherStore);
                __int128 v162 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v161);
                __int128 v164 = objc_getProperty(v154, v163, 96LL, 1);
                uint64_t v166 = v164;
                if (v164) {
                  __int128 v164 = objc_getProperty(v164, v165, 104LL, 1);
                }
                uint64_t v167 = v164;
                sub_1001D15F4(v162, v167, v150, v155);
              }

              else
              {
                global_queue = dispatch_get_global_queue(v150, 0LL);
                __int128 v162 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
                dispatch_async(v162, v155);
              }

              uint64_t v6 = v229;
              BOOL v22 = v234;
LABEL_133:

LABEL_134:
              goto LABEL_135;
            }
          }

          else
          {
            uint64_t v197 = ASDLogHandleForCategory(10LL);
            v198 = (os_log_s *)objc_claimAutoreleasedReturnValue(v197);
            if (os_log_type_enabled(v198, OS_LOG_TYPE_ERROR))
            {
              uint64_t v218 = objc_getProperty(v97, v199, 56LL, 1);
              *(_DWORD *)buf = 138412290;
              v247 = v218;
              _os_log_error_impl( (void *)&_mh_execute_header,  v198,  OS_LOG_TYPE_ERROR,  "[%@] Task priority was unspecified, defaulting to non-user initiated!",  buf,  0xCu);
            }

            LODWORD(v200) = 1137180672;
            [v98 setPriority:v200];
            if (v12) {
              goto LABEL_95;
            }
          }

          uint64_t v140 = 0LL;
          goto LABEL_96;
        }

        id v203 = objc_getProperty(v97, v221, 56LL, 1);
        *(_DWORD *)buf = 138412290;
        v247 = v203;
        id v204 = "[%@] No reporting as request reason is unspecified";
        id v205 = (os_log_s *)v103;
        id v206 = 12;
      }

      _os_log_error_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_ERROR, v204, buf, v206);

      goto LABEL_79;
    }

    uint64_t v168 = ASDLogHandleForCategory(31LL);
    int64_t v169 = (os_log_s *)objc_claimAutoreleasedReturnValue(v168);
    char v170 = v169;
    uint64_t v171 = *((void *)v5 + 16);
    if (v171 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v169))
    {
      unint64_t v173 = objc_getProperty(v5, v172, 56LL, 1);
      uint64_t v174 = objc_claimAutoreleasedReturnValue([v14 URL]);
      uint64_t v226 = v14;
      uint64_t v175 = v22;
      v176 = (void *)v174;
      *(_DWORD *)buf = 138543618;
      v247 = v173;
      uint64_t v248 = 2114;
      uint64_t v249 = v174;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v170,  OS_SIGNPOST_EVENT,  v171,  "SessionError",  " uuid=%{public, signpost.description:attribute}@  request=%{public, signpost.description:attribute}@ ",  buf,  0x16u);

      BOOL v22 = v175;
      unint64_t v14 = v226;
    }

LABEL_106:
      if (v117)
      {
LABEL_125:
        if (v106 == objc_msgSend(v117, "ams_isManagedAppleID", v145))
        {
          swift_bridgeObjectRelease(v3);
          swift_release(v160);
          uint64_t v127 = v104;
          goto LABEL_138;
        }

        goto LABEL_127;
      }

      int64_t v153 = v3;
      uint64_t v155 = v104;
      uint64_t v0 = (uint64_t)objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
      id v118 = objc_msgSend((id)v0, "ams_iTunesAccounts");

      uint64_t v119 = sub_10001517C(0LL, &qword_100458708, &OBJC_CLASS___ACAccount_ptr);
      int64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v118, v119);

      if ((unint64_t)v3 >> 62)
      {
        if (v3 < 0) {
          uint64_t v0 = v3;
        }
        else {
          uint64_t v0 = v3 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v3);
        uint64_t v4 = (void *)_CocoaArrayWrapper.endIndex.getter(v0);
        swift_bridgeObjectRelease(v3);
        if (v4)
        {
LABEL_109:
          uint64_t v120 = 0LL;
          uint64_t v0 = v3 & 0xC000000000000001LL;
          while (1)
          {
            if (v0) {
              id v121 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v120, v3);
            }
            else {
              id v121 = *(id *)(v3 + 8 * v120 + 32);
            }
            id v117 = v121;
            unint64_t v122 = (void *)(v120 + 1);
            if (__OFADD__(v120, 1LL)) {
              goto LABEL_155;
            }

            ++v120;
            if (v122 == v4) {
              goto LABEL_116;
            }
          }

          swift_bridgeObjectRelease(v3);
          swift_bridgeObjectRelease(v153);
          swift_release(v160);
          uint64_t v127 = v155;
LABEL_138:
          swift_bridgeObjectRelease(v127);

          swift_bridgeObjectRelease(v168);
          uint64_t v15 = v156;
LABEL_139:
          v15[91] = v117;
          uint64_t v128 = v15[90];
          unint64_t v129 = *(void *)(v128 + 16);
          if (!v129)
          {
LABEL_152:
            __int128 v142 = (void *)swift_task_alloc(dword_1004585D4);
            v15[92] = v142;
            *__int128 v142 = v15;
            v142[1] = sub_1000126A8;
            sub_10000CF90(v15[89]);
            return;
          }

          unint64_t v130 = 0LL;
          uint64_t v131 = (uint64_t *)(v128 + 104);
          while (1)
          {
            uint64_t v132 = *v131;
            if (*v131) {
              break;
            }
            ++v130;
            v131 += 12;
            if (v129 == v130) {
              goto LABEL_152;
            }
          }

          if (v130 >= v129) {
            goto LABEL_163;
          }
          uint64_t v133 = *(v131 - 1);
          uint64_t v134 = v15[94];
          id v135 = v117;
          swift_bridgeObjectRetain(v128);
          swift_bridgeObjectRetain(v132);
          char v136 = swift_isUniquelyReferenced_nonNull_native(v134);
          id v69 = (void *)v15[94];
          if ((v136 & 1) == 0) {
            id v69 = sub_10008845C(0LL, v69[2] + 1LL, 1, (void *)v15[94]);
          }
          unint64_t v138 = v69[2];
          unint64_t v137 = v69[3];
          if (v138 >= v137 >> 1) {
            id v69 = sub_10008845C((void *)(v137 > 1), v138 + 1, 1, v69);
          }
          uint64_t v139 = v15[91];
          uint64_t v140 = v15[90];
          v69[2] = v138 + 1;
          __int128 v141 = &v69[4 * v138];
          v141[4] = v139;
          v141[5] = v140;
          v141[6] = v133;
          v141[7] = v132;

          uint64_t v85 = v15[53];
          uint64_t v86 = v15[54];
          if (v85 >= v86)
          {
LABEL_50:
            NSString v70 = (void *)v15[89];
            swift_bridgeObjectRelease_n(v15[90], 2LL);

            unint64_t v68 = v15[88];
            int64_t v65 = v15[87];
            continue;
          }

          goto LABEL_74;
        }
      }

      else
      {
        uint64_t v4 = *(void **)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v4) {
          goto LABEL_109;
        }
      }

  if ((applicationVariant & 1) != 0 || !v12)
  {
    unint64_t v107 = v10;
    goto LABEL_113;
  }

  int64_t v109 = ASDErrorWithTitleAndMessage(ASDErrorDomain, 740LL, @"Missing itemID", 0LL);
  unint64_t v107 = (id)objc_claimAutoreleasedReturnValue(v109);

  id v110 = ASDLogHandleForCategory(41LL);
  uint64_t v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
  if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
  {
    id v111 = v3->_itemIdentifier;
    *(_DWORD *)char v170 = 138412290;
    *(void *)&v170[4] = v111;
    _os_log_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_DEFAULT,  "[%@] An itemID is needed for per device calls could not be discovered",  v170,  0xCu);
  }

LABEL_116:
      swift_bridgeObjectRelease(v153);
      uint64_t v4 = v160;
      uint64_t v104 = v155;
LABEL_128:
      ++v102;
      swift_bridgeObjectRelease(v3);
      swift_bridgeObjectRelease(v104);

      swift_bridgeObjectRelease(v168);
      uint64_t v15 = v156;
      if (v102 == v158) {
        goto LABEL_135;
      }
      goto LABEL_99;
    }

    break;
  }

  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
}

uint64_t sub_1000126A8(uint64_t a1, uint64_t a2)
{
  int64_t v3 = (void *)*v2;
  v3[49] = v2;
  v3[50] = a1;
  v3[51] = a2;
  uint64_t v4 = v3[92];
  v3[93] = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100012704, 0LL, 0LL);
}

void sub_100012704(uint64_t a1)
{
  uint64_t v2 = v1 + 320;
  uint64_t v3 = v1 + 344;
  uint64_t v4 = v1 + 424;
  uint64_t v5 = (uint64_t *)(v1 + 432);
  uint64_t v6 = *(void *)(v1 + 744);
  if (v6)
  {
    uint64_t v7 = *(void *)(v1 + 400);
    uint64_t v8 = *(void *)(v1 + 728);
    uint64_t v9 = *(void *)(v1 + 720);
    goto LABEL_104;
  }

  uint64_t v10 = *(void *)(v1 + 472);
  static Logger.updates.getter(a1);
  uint64_t v11 = swift_retain_n(v10, 2LL);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.error.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = *(void *)(v1 + 472);
  if (v14)
  {
    uint64_t v16 = swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v16 = 138412290;
    uint64_t v18 = *(void **)(*(void *)(v15 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v16 + 4) = v18;
    *uint64_t v17 = v18;
    id v19 = v18;
    swift_release_n(v15, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "[%@] Unable to fetch updates for batch with no storefront country code",  (uint8_t *)v16,  0xCu);
    uint64_t v20 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v17, 1LL, v20);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    swift_release_n(*(void *)(v1 + 472), 2LL);
  }

  os_log_type_t v21 = *(uint64_t (**)(uint64_t, unint64_t))(v1 + 560);
  uint64_t v22 = *(void *)(v1 + 496);
  unint64_t v23 = *(void *)(v1 + 480);

  uint64_t v24 = (void *)v21(v22, v23);
  uint64_t v8 = *(void *)(v1 + 424);
  uint64_t v25 = *(void *)(v1 + 432);
  if (v8 >= v25)
  {
    uint64_t v26 = *(void **)(v1 + 752);
    unint64_t v23 = 1LL;
    goto LABEL_10;
  }

  while (1)
  {
    uint64_t v45 = *(void *)(v1 + 720);
    *(void *)(v1 + 424) = v25;
    unint64_t v46 = *(void *)(v45 + 16);
    uint64_t v47 = v46 - v25;
    if (__OFSUB__(v46, v25))
    {
LABEL_112:
      __break(1u);
LABEL_113:
      __break(1u);
LABEL_114:
      __break(1u);
      goto LABEL_115;
    }

    uint64_t v48 = *(void *)(v1 + 552);
    if (v48 < 1) {
      break;
    }
    if (v47 < 0) {
      goto LABEL_43;
    }
    uint64_t v49 = *(void *)(v45 + 16);
LABEL_44:
    *uint64_t v5 = v49;
    if (v8 < 0) {
      goto LABEL_113;
    }
    unint64_t v23 = (2 * v25) | 1;
    uint64_t v50 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
    uint64_t v51 = swift_bridgeObjectRetain(v45);
    uint64_t v52 = swift_unknownObjectRetain_n(v51, 2LL);
    char v53 = (void *)swift_dynamicCastClass(v52, v50);
    if (!v53)
    {
      swift_bridgeObjectRelease(v45);
      char v53 = _swiftEmptyArrayStorage;
    }

    uint64_t v54 = v53[2];
    swift_release(v53);
    uint64_t v45 = *(void *)(v1 + 720);
    uint64_t v24 = (void *)v45;
    if (v54 == v25 - v8)
    {
      uint64_t v8 = swift_dynamicCastClass(v45, v50);
      if (!v8)
      {
        swift_bridgeObjectRelease(v45);
        uint64_t v8 = (uint64_t)_swiftEmptyArrayStorage;
      }

      goto LABEL_52;
    }

LABEL_115:
    swift_bridgeObjectRelease(v24);
    uint64_t v8 = (uint64_t)sub_1000610BC(v45, v45 + 32, v8, v23);
LABEL_52:
    swift_bridgeObjectRelease(*(void *)(v1 + 720));
    uint64_t v2 = v1 + 320;
    if (qword_100458008 != -1) {
      swift_once(&qword_100458008, sub_100009B38);
    }
    uint64_t v55 = *(void *)(v1 + 712);
    id v56 = (void *)qword_100458570;
    uint64_t v45 = sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
    id v57 = v56;
    LOBYTE(v55) = static NSObject.== infix(_:_:)(v55, v57);

    if ((v55 & 1) != 0 || (uint64_t v106 = *(void *)(v8 + 16)) == 0)
    {
LABEL_93:
      swift_release(v8);
      id v92 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
      uint64_t v8 = (uint64_t)objc_msgSend(v92, "ams_activeiTunesAccount");

      goto LABEL_97;
    }

    unint64_t v23 = 0LL;
    uint64_t v108 = v4;
    uint64_t v109 = v8 + 32;
    uint64_t v107 = v8;
    while (1)
    {
      if (v23 >= *(void *)(v8 + 16)) {
        goto LABEL_111;
      }
      unint64_t v58 = v109 + 96 * v23;
      uint64_t v59 = *(void *)(v58 + 8);
      uint64_t v60 = *(void **)(v58 + 16);
      int v115 = *(unsigned __int8 *)(v58 + 25);
      uint64_t v61 = *(void **)(v58 + 32);
      uint64_t v62 = *(void **)(v58 + 56);
      uint64_t v63 = *(void *)(v58 + 72);
      uint64_t v4 = *(void *)(v58 + 88);
      id v112 = v62;
      uint64_t v113 = v63;
      uint64_t v114 = v4;
      if (v60)
      {
        swift_bridgeObjectRetain(v63);
        swift_bridgeObjectRetain(v4);
        Class v64 = v60;
        id v65 = v60;
        uint64_t v66 = v59;
        id v67 = v65;
        uint64_t v68 = v66;
        swift_bridgeObjectRetain(v66);
        id v69 = v67;
        NSString v70 = v61;
        id v71 = v61;
        id v72 = v62;
        Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
        char v74 = static NSObject.== infix(_:_:)(v69, isa);

        if ((v74 & 1) != 0)
        {

          uint64_t v61 = v70;
          uint64_t v60 = v64;
          uint64_t v2 = v1 + 320;
          uint64_t v59 = v68;
          uint64_t v4 = v114;
        }

        else
        {
          id v77 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
          uint64_t v8 = (uint64_t)objc_msgSend(v77, "ams_iTunesAccountWithDSID:", v69);

          uint64_t v61 = v70;
          uint64_t v60 = v64;
          uint64_t v2 = v1 + 320;
          uint64_t v59 = v68;
          uint64_t v4 = v114;
          if (v8)
          {
            if (!v115) {
              goto LABEL_82;
            }
            goto LABEL_64;
          }
        }
      }

      else
      {
        swift_bridgeObjectRetain(v63);
        swift_bridgeObjectRetain(v4);
        swift_bridgeObjectRetain(v59);
        id v75 = v61;
        id v76 = v62;
      }

      if (v61) {
        break;
      }
      uint64_t v8 = 0LL;
      if (!v115) {
        goto LABEL_82;
      }
LABEL_64:
      if (v8) {
        goto LABEL_83;
      }
      uint64_t v110 = v59;
      id v78 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
      id v79 = objc_msgSend(v78, "ams_iTunesAccounts");

      uint64_t v80 = sub_10001517C(0LL, &qword_100458708, &OBJC_CLASS___ACAccount_ptr);
      uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v79, v80);

      uint64_t v104 = v60;
      uint64_t v105 = v61;
      if ((unint64_t)v4 >> 62)
      {
        if (v4 < 0) {
          uint64_t v91 = v4;
        }
        else {
          uint64_t v91 = v4 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v4);
        uint64_t v81 = _CocoaArrayWrapper.endIndex.getter(v91);
        swift_bridgeObjectRelease(v4);
        if (v81)
        {
LABEL_67:
          uint64_t v82 = 0LL;
          while (1)
          {
            uint64_t v24 = (v4 & 0xC000000000000001LL) != 0
                ? (void *)specialized _ArrayBuffer._getElementSlowPath(_:)(v82, v4)
                : *(id *)(v4 + 8 * v82 + 32);
            uint64_t v8 = (uint64_t)v24;
            uint64_t v83 = v82 + 1;
            if (__OFADD__(v82, 1LL)) {
              break;
            }
            if (objc_msgSend(v24, "ams_isManagedAppleID"))
            {
              swift_bridgeObjectRelease(v4);
              swift_bridgeObjectRelease(v114);
              swift_release(v107);
              swift_bridgeObjectRelease(v110);

              swift_bridgeObjectRelease(v113);
              uint64_t v2 = v1 + 320;
              goto LABEL_96;
            }

            ++v82;
            if (v83 == v81) {
              goto LABEL_74;
            }
          }

          __break(1u);
LABEL_111:
          __break(1u);
          goto LABEL_112;
        }
      }

      else
      {
        uint64_t v81 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v81) {
          goto LABEL_67;
        }
      }

LABEL_74:
      swift_bridgeObjectRelease(v114);
      uint64_t v59 = v110;
      uint64_t v2 = v1 + 320;
      uint64_t v8 = v107;
      uint64_t v61 = v105;
LABEL_86:
      ++v23;
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v59);

      uint64_t v24 = (void *)swift_bridgeObjectRelease(v113);
      uint64_t v4 = v108;
      if (v23 == v106) {
        goto LABEL_93;
      }
    }

    uint64_t v111 = v59;
    uint64_t v84 = v2;
    uint64_t v85 = v60;
    uint64_t v86 = v61;
    id v87 = v61;
    Class v88 = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
    char v89 = static NSObject.== infix(_:_:)(v87, v88);

    if ((v89 & 1) != 0)
    {

      uint64_t v8 = 0LL;
    }

    else
    {
      id v90 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
      uint64_t v8 = (uint64_t)objc_msgSend(v90, "ams_iTunesAccountWithDSID:", v87);
    }

    uint64_t v61 = v86;
    uint64_t v60 = v85;
    uint64_t v2 = v84;
    uint64_t v59 = v111;
    uint64_t v4 = v114;
    if (v115) {
      goto LABEL_64;
    }
LABEL_82:
    if (!v8)
    {
LABEL_85:
      uint64_t v8 = v107;
      goto LABEL_86;
    }

    Class v64 = *v2;
    while (1)
    {
      id v65 = v12 - 2;
      if (v12 < 2) {
        goto LABEL_105;
      }
      if (!v64) {
        goto LABEL_113;
      }
      uint64_t v66 = *(void *)&v9[16 * v65 + 32];
      id v67 = *(void *)&v9[16 * v12 + 24];
      sub_1000493B4((char *)(v64 + 8 * v66), (char *)(v64 + 8LL * *(void *)&v9[16 * v12 + 16]), v64 + 8 * v67, __dst);
      if (v76) {
        goto LABEL_85;
      }
      if (v67 < v66) {
        goto LABEL_106;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
        uint64_t v9 = sub_100049744((uint64_t)v9);
      }
      if (v65 >= *((void *)v9 + 2)) {
        goto LABEL_107;
      }
      uint64_t v68 = &v9[16 * v65 + 32];
      *(void *)uint64_t v68 = v66;
      *((void *)v68 + 1) = v67;
      id v69 = *((void *)v9 + 2);
      if (v12 > v69) {
        goto LABEL_108;
      }
      memmove(&v9[16 * v12 + 16], &v9[16 * v12 + 32], 16 * (v69 - v12));
      *((void *)v9 + 2) = v69 - 1;
      uint64_t v12 = v69 - 1;
      if (v69 <= 2) {
        goto LABEL_88;
      }
    }
  }

  if (v3 < 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  return result;
}

  return v5;
}

                  uint64_t v62 = v87;
                  goto LABEL_75;
                }

                unint64_t v129 = v105;
                uint64_t v106 = sub_1001E606C(v64, v104, &v129);
                uint64_t v107 = v129;

                if ((v106 & 1) == 0)
                {
                  uint64_t v111 = ASDLogHandleForCategory(29LL);
                  uint64_t v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
                  if (!os_log_type_enabled(v110, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v66 = v107;
                    goto LABEL_74;
                  }

                  *(_DWORD *)__int128 v141 = 138412546;
                  uint64_t v62 = v87;
                  __int128 v142 = v87;
                  uint64_t v143 = 2114;
                  uint64_t v144 = v107;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_ERROR,  "[%@] Could not set placeholder for coordinator: %{public}@",  v141,  0x16u);
                  uint64_t v66 = v107;
LABEL_75:

                  [v64 cancelForReason:v66 client:1 error:0];
LABEL_76:

                  goto LABEL_77;
                }

                uint64_t v108 = ASDLogHandleForCategory(29LL);
                uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(v108);
                if (os_log_type_enabled((os_log_t)v66, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__int128 v141 = 138412290;
                  uint64_t v62 = v87;
                  __int128 v142 = v87;
                  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v66,  OS_LOG_TYPE_DEFAULT,  "[%@] Placeholder created successfully",  v141,  0xCu);
                }

                else
                {
                  uint64_t v62 = v87;
                }
              }

LABEL_83:
    if (v115 != objc_msgSend((id)v8, "ams_isManagedAppleID", v104))
    {

      goto LABEL_85;
    }

    swift_bridgeObjectRelease(v4);
    swift_release(v107);
    swift_bridgeObjectRelease(v59);

    swift_bridgeObjectRelease(v113);
LABEL_96:
    uint64_t v4 = v108;
LABEL_97:
    *(void *)(v1 + 728) = v8;
    uint64_t v9 = *(void *)(v1 + 720);
    unint64_t v93 = *(void *)(v9 + 16);
    if (!v93)
    {
LABEL_101:
      char v96 = (void *)swift_task_alloc(dword_1004585D4);
      *(void *)(v1 + 736) = v96;
      *char v96 = v1;
      v96[1] = sub_1000126A8;
      sub_10000CF90(*(void *)(v1 + 712));
      return;
    }

    unint64_t v94 = 0LL;
    uint64_t v95 = (void *)(v9 + 104);
    while (1)
    {
      uint64_t v6 = *v95;
      if (*v95) {
        break;
      }
      ++v94;
      v95 += 12;
      if (v93 == v94) {
        goto LABEL_101;
      }
    }

    if (v94 >= v93) {
      goto LABEL_117;
    }
    uint64_t v7 = *(v95 - 1);
    swift_bridgeObjectRetain(*v95);
LABEL_104:
    uint64_t v97 = *(void *)(v1 + 752);
    unint64_t v23 = (unint64_t)(id)v8;
    swift_bridgeObjectRetain(v9);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v97);
    uint64_t v26 = *(void **)(v1 + 752);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v26 = sub_10008845C(0LL, v26[2] + 1LL, 1, *(void **)(v1 + 752));
    }
    unint64_t v100 = v26[2];
    unint64_t v99 = v26[3];
    if (v100 >= v99 >> 1) {
      uint64_t v26 = sub_10008845C((void *)(v99 > 1), v100 + 1, 1, v26);
    }
    uint64_t v101 = *(void *)(v1 + 728);
    uint64_t v102 = *(void *)(v1 + 720);
    v26[2] = v100 + 1;
    uint64_t v103 = &v26[4 * v100];
    v103[4] = v101;
    v103[5] = v102;
    v103[6] = v7;
    v103[7] = v6;

    uint64_t v8 = *(void *)(v1 + 424);
    uint64_t v25 = *(void *)(v1 + 432);
    uint64_t v3 = v1 + 344;
    if (v8 < v25) {
      goto LABEL_35;
    }
    unint64_t v23 = 1LL;
LABEL_10:
    while (2)
    {
      id v29 = *(void **)(v1 + 712);
      swift_bridgeObjectRelease_n(*(void *)(v1 + 720), 2LL);

      unint64_t v30 = *(void *)(v1 + 704);
      int64_t v31 = *(void *)(v1 + 696);
      if (v30)
      {
        uint64_t v32 = (v30 - 1) & v30;
        unint64_t v33 = __clz(__rbit64(v30)) | (v31 << 6);
        uint64_t v24 = *(void **)(v1 + 688);
        goto LABEL_26;
      }

      int64_t v34 = v31 + 1;
      if (__OFADD__(v31, 1LL))
      {
        __break(1u);
        goto LABEL_34;
      }

      int64_t v35 = (unint64_t)((1LL << *(_BYTE *)(v1 + 762)) + 63) >> 6;
      uint64_t v24 = *(void **)(v1 + 688);
      if (v34 >= v35) {
        goto LABEL_32;
      }
      uint64_t v36 = v24 + 8;
      unint64_t v37 = v24[v34 + 8];
      ++v31;
      if (v37) {
        goto LABEL_25;
      }
      int64_t v31 = v34 + 1;
      if (v34 + 1 >= v35) {
        goto LABEL_32;
      }
      unint64_t v37 = v36[v31];
      if (v37) {
        goto LABEL_25;
      }
      int64_t v31 = v34 + 2;
      if (v34 + 2 >= v35) {
        goto LABEL_32;
      }
      unint64_t v37 = v36[v31];
      if (v37)
      {
LABEL_25:
        uint64_t v32 = (v37 - 1) & v37;
        unint64_t v33 = __clz(__rbit64(v37)) + (v31 << 6);
LABEL_26:
        *(void *)(v1 + 704) = v32;
        *(void *)(v1 + 696) = v31;
        uint64_t v39 = *(void *)(v1 + 552);
        uint64_t v40 = 8 * v33;
        id v41 = *(void **)(v24[6] + v40);
        *(void *)(v1 + 712) = v41;
        uint64_t v42 = *(void *)(v24[7] + v40);
        *(void *)(v1 + 720) = v42;
        *(void *)(v1 + 424) = 0LL;
        unint64_t v27 = *(void *)(v42 + 16);
        if (v39 <= 0)
        {
          if (v39 && !v27)
          {
LABEL_9:
            *uint64_t v5 = v27;
            swift_bridgeObjectRetain_n(v42, 2LL);
            id v28 = v41;
            swift_beginAccess(v4, v2, 1LL, 0LL);
            swift_beginAccess(v1 + 432, v3, 1LL, 0LL);
            uint64_t v8 = *(void *)v4;
            uint64_t v25 = *v5;
            if (*(void *)v4 < *v5) {
              goto LABEL_35;
            }
            continue;
          }
        }

        else if (v27 < v39)
        {
          goto LABEL_9;
        }

        unint64_t v27 = v39;
        goto LABEL_9;
      }

      break;
    }

    int64_t v38 = v34 + 3;
    if (v38 >= v35)
    {
LABEL_32:
      swift_release(v24);
      uint64_t v43 = *(void *)(v1 + 504);
      uint64_t v44 = *(void *)(v1 + 496);
      swift_task_dealloc(*(void *)(v1 + 512));
      swift_task_dealloc(v43);
      swift_task_dealloc(v44);
      (*(void (**)(void *))(v1 + 8))(v26);
      return;
    }

    unint64_t v37 = v36[v38];
    if (v37)
    {
      int64_t v31 = v38;
      goto LABEL_25;
    }

    while (1)
    {
      int64_t v31 = v38 + 1;
      if (__OFADD__(v38, 1LL)) {
        break;
      }
      if (v31 >= v35) {
        goto LABEL_32;
      }
      unint64_t v37 = v36[v31];
      ++v38;
      if (v37) {
        goto LABEL_25;
      }
    }

        uint64_t v91 = objc_getProperty(v23, v30, 32LL, 1);
        id v90 = v27;
LABEL_84:
        id v92 = v91;
        unint64_t v93 = [v92 count];

        if (v93)
        {
          uint64_t v95 = objc_alloc(&OBJC_CLASS___AnonymousPingTask);
          if (v23) {
            char v96 = objc_getProperty(v23, v94, 32LL, 1);
          }
          else {
            char v96 = 0LL;
          }
          uint64_t v97 = v96;
          uint64_t v98 = sub_10031E1DC(v95, v97);

          if (v98)
          {
            unint64_t v99 = *(void *)(v105 + 24);
            if (v99) {
              [*(id *)(v99 + 8) addOperation:v98];
            }
          }
        }

        os_log_type_t v21 = (char *)v21 + 1;
      }

      while (v21 != v20);
      unint64_t v100 = -[dispatch_group_s countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v109,  v128,  16LL);
      uint64_t v20 = v100;
      if (!v100)
      {
        uint64_t v7 = 0LL;
        goto LABEL_99;
      }
    }
  }

  uint64_t v8 = dispatch_group_create();
  id v118 = 0u;
  uint64_t v119 = 0u;
  uint64_t v120 = 0u;
  id v121 = 0u;
  uint64_t v9 = sub_10020DDEC(v5);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v118 objects:v129 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    os_log_type_t v13 = *(void *)v119;
    do
    {
      for (i = 0LL; i != v12; i = (char *)i + 1)
      {
        if (*(void *)v119 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v118 + 1) + 8LL * (void)i);
        dispatch_group_enter(v8);
        v116[0] = _NSConcreteStackBlock;
        v116[1] = 3221225472LL;
        v116[2] = sub_10019C414;
        v116[3] = &unk_1003E9880;
        id v117 = v8;
        sub_10019A95C(v105, v7, v15, v116);
      }

      uint64_t v12 = [v10 countByEnumeratingWithState:&v118 objects:v129 count:16];
    }

    while (v12);
  }

  uint64_t v16 = *(dispatch_queue_s **)(v105 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10019C41C;
  block[3] = &unk_1003E9DC0;
  uint64_t v114 = v5;
  int v115 = v7;
  uint64_t v17 = v8;
  dispatch_group_notify(v8, v16, block);

LABEL_99:
LABEL_100:
}

LABEL_34:
    __break(1u);
LABEL_35:
    *(void *)(v1 + 752) = v26;
  }

  if (v47 <= 0)
  {
    uint64_t v49 = *(void *)(v45 + 16);
    if (v48 < v47) {
      goto LABEL_44;
    }
  }

    sub_10004969C((void **)&v22, (const void **)&v21, &v20);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

    os_log_type_t v177 = (v23 - 1) & v23;
    unint64_t v179 = v24;
  }

  uint64_t v25 = v20 + 5;
  if (v20 + 5 >= v172)
  {
LABEL_54:
    swift_release(v16);
    swift_bridgeObjectRelease(&_swiftEmptySetSingleton);
    if (v146)
    {
      id v118 = *(void *)(v0 + 768);
      if (v147 < 0) {
        uint64_t v119 = *(void *)(v0 + 768);
      }
      else {
        uint64_t v119 = v147 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*(void *)(v0 + 768));
      uint64_t v120 = _CocoaArrayWrapper.endIndex.getter(v119);
      swift_bridgeObjectRelease(v118);
      if (v120 < 1) {
        goto LABEL_56;
      }
    }

    else if (*(uint64_t *)((v147 & 0xFFFFFFFFFFFFF8LL) + 0x10) < 1)
    {
LABEL_56:
      uint64_t v107 = *(void **)(v0 + 360);
      uint64_t v108 = swift_bridgeObjectRelease(*(void *)(v0 + 768));
      static Logger.purchase.getter(v108);
      uint64_t v109 = (os_log_s *)Logger.logObject.getter(v107);
      uint64_t v110 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v109, v110))
      {
        uint64_t v111 = *(void *)(v0 + 672);
        id v112 = *(char **)(v0 + 360);
        uint64_t v113 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v114 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v113 = 138412290;
        int v115 = *(void **)&v112[v111];
        *(void *)(v0 + 272) = v115;
        id v116 = v115;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v144, v0 + 280, v113 + 4, v113 + 12);
        char *v114 = v115;

        _os_log_impl((void *)&_mh_execute_header, v109, v110, "[%@] Nothing in response to import", v113, 0xCu);
        id v117 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v114, 1LL, v117);
        swift_slowDealloc(v114, -1LL, -1LL);
        swift_slowDealloc(v113, -1LL, -1LL);
      }

      else
      {

        uint64_t v109 = *(os_log_s **)(v0 + 360);
      }

      id v124 = *(void *)(v0 + 552);
      char v125 = *(void *)(v0 + 512);

      v174(v124, v125);
      id v126 = *(void **)(v0 + 752);
      uint64_t v127 = *(void **)(v0 + 656);
      uint64_t v128 = *(void **)(v0 + 616);
      unint64_t v129 = *(void *)(v0 + 360);
      unint64_t v130 = *(void *)(v0 + 160);
      uint64_t v131 = objc_allocWithZone(&OBJC_CLASS___ASDPurchaseResponse);
      sub_10001517C(0LL, &qword_100459D40, &OBJC_CLASS___ASDPurchaseResponseItem_ptr);
      uint64_t v132 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v130);
      uint64_t v133 = [v131 initWithPurchaseResponseItems:v132];

      uint64_t v134 = *(void **)(v129 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse);
      *(void *)(v129 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse) = v133;

      id v135 = *(void *)(v0 + 600);
      char v136 = *(void *)(v0 + 592);
      unint64_t v137 = *(void *)(v0 + 584);
      unint64_t v138 = *(void *)(v0 + 576);
      uint64_t v139 = *(void *)(v0 + 568);
      uint64_t v140 = *(void *)(v0 + 560);
      __int128 v141 = *(void *)(v0 + 552);
      __int128 v142 = *(void *)(v0 + 544);
      uint64_t v143 = *(void *)(v0 + 536);
      uint64_t v150 = *(void *)(v0 + 528);
      int64_t v151 = *(void *)(v0 + 504);
      int64_t v152 = *(void *)(v0 + 496);
      uint64_t v155 = *(void *)(v0 + 488);
      uint64_t v158 = *(void *)(v0 + 480);
      __int128 v161 = *(void *)(v0 + 472);
      __int128 v163 = *(void *)(v0 + 464);
      __int128 v165 = *(void *)(v0 + 456);
      uint64_t v167 = *(void *)(v0 + 448);
      int64_t v169 = *(void *)(v0 + 440);
      uint64_t v171 = *(void *)(v0 + 432);
      unint64_t v173 = *(void *)(v0 + 408);
      v176 = *(void *)(v0 + 400);
      unint64_t v178 = *(void *)(v0 + 392);
      uint64_t v180 = *(void *)(v0 + 368);
      swift_bridgeObjectRelease(*(void *)(v0 + 136));
      swift_task_dealloc(v135);
      swift_task_dealloc(v136);
      swift_task_dealloc(v137);
      swift_task_dealloc(v138);
      swift_task_dealloc(v139);
      swift_task_dealloc(v140);
      swift_task_dealloc(v141);
      swift_task_dealloc(v142);
      swift_task_dealloc(v143);
      swift_task_dealloc(v150);
      swift_task_dealloc(v151);
      swift_task_dealloc(v152);
      swift_task_dealloc(v155);
      swift_task_dealloc(v158);
      swift_task_dealloc(v161);
      swift_task_dealloc(v163);
      swift_task_dealloc(v165);
      swift_task_dealloc(v167);
      swift_task_dealloc(v169);
      swift_task_dealloc(v171);
      swift_task_dealloc(v173);
      swift_task_dealloc(v176);
      swift_task_dealloc(v178);
      swift_task_dealloc(v180);
      (*(void (**)(void))(v0 + 8))();
      return;
    }

    id v121 = *(void *)(v0 + 136);
    *(void *)(v0 + 784) = v121;
    unint64_t v122 = dword_100459D64;
    swift_bridgeObjectRetain(v121);
    int64_t v123 = (void *)swift_task_alloc(v122);
    *(void *)(v0 + 792) = v123;
    *int64_t v123 = v0;
    v123[1] = sub_100059908;
    sub_10005D9BC(*(void *)(v0 + 768), *(void *)(v0 + 752), v121);
    return;
  }

  unint64_t v23 = *(void *)(v170 + 8 * v25);
  if (v23)
  {
    uint64_t v24 = v20 + 5;
    goto LABEL_34;
  }

  while (1)
  {
    uint64_t v24 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v24 >= v172) {
      goto LABEL_54;
    }
    unint64_t v23 = *(void *)(v170 + 8 * v24);
    ++v25;
    if (v23) {
      goto LABEL_34;
    }
  }

  __break(1u);
}

          uint64_t v7 = 0LL;
          uint64_t v9 = 1;
          goto LABEL_37;
        }

        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }

      uint64_t v7 = (result - 48);
      uint64_t v18 = v3 - 1;
      if (v18)
      {
        id v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          uint64_t v20 = *v19 - 48;
          if (v20 > 9) {
            goto LABEL_34;
          }
          os_log_type_t v21 = 10 * v7;
          uint64_t v7 = v21 + v20;
          uint64_t v9 = 0;
          ++v19;
          if (!--v18) {
            goto LABEL_37;
          }
        }
      }
    }

LABEL_35:
  }
}

            uint64_t v24 = v107;
            if (v36)
            {
              id v126 = 0u;
              uint64_t v127 = 0u;
              id v124 = 0u;
              char v125 = 0u;
              if (v23) {
                uint64_t v42 = objc_getProperty(v23, v40, 56LL, 1);
              }
              else {
                uint64_t v42 = 0LL;
              }
              uint64_t v43 = (id *)v42;
              uint64_t v44 = [v43 countByEnumeratingWithState:&v124 objects:buf count:16];
              if (v44)
              {
                unint64_t v46 = v44;
                uint64_t v47 = *(void *)v125;
                do
                {
                  uint64_t v48 = 0LL;
                  do
                  {
                    if (*(void *)v125 != v47) {
                      objc_enumerationMutation(v43);
                    }
                    uint64_t v49 = *(id *)(*((void *)&v124 + 1) + 8LL * (void)v48);
                    if (v49) {
                      uint64_t v50 = objc_getProperty(*(id *)(*((void *)&v124 + 1) + 8LL * (void)v48), v45, 224LL, 1);
                    }
                    else {
                      uint64_t v50 = 0LL;
                    }
                    uint64_t v51 = v50;
                    uint64_t v52 = [v51 isEqualToString:@"software"];

                    if (v52)
                    {
                      if (v49)
                      {
                        uint64_t v49 = objc_getProperty(v49, v45, 208LL, 1);
                        if (v49)
                        {
                          char v53 = sub_1001C66BC((uint64_t)&OBJC_CLASS___PurchaseHistoryManager);
                          uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
                          v122[0] = _NSConcreteStackBlock;
                          v122[1] = 3221225472LL;
                          v122[2] = sub_10019C5F8;
                          v122[3] = &unk_1003E9CA8;
                          int64_t v123 = v108;
                          sub_1001C79C4((uint64_t)v54, v36, v49, 6LL, v122);
                        }
                      }
                    }

                    uint64_t v48 = (char *)v48 + 1;
                  }

                  while (v46 != v48);
                  uint64_t v55 = [v43 countByEnumeratingWithState:&v124 objects:buf count:16];
                  unint64_t v46 = v55;
                }

                while (v55);
                uint64_t v17 = v101;
                uint64_t v5 = v102;
              }
          }

          objc_autoreleasePoolPop(v12);
        }

        uint64_t v8 = [obj countByEnumeratingWithState:&v60 objects:buf count:16];
      }

      while (v8);
    }
  }

  else
  {
    uint64_t v51 = 0LL;
  }

  cachedBundleIDDenyList = v54->_cachedBundleIDDenyList;
  v54->_cachedBundleIDDenyList = v51;

  id v41 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  watchAppList = v54->_watchAppList;
  v54->_watchAppList = &v41->super;

  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
  uint64_t v44 = objc_claimAutoreleasedReturnValue([v43 managedAppBundleIDs]);
  managedBundleIDs = v54->_managedBundleIDs;
  v54->_managedBundleIDs = (NSArray *)v44;

  if (-[NSArray count](v54->_managedBundleIDs, "count"))
  {
    unint64_t v46 = ASDLogHandleForCategory(20LL);
    uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
    {
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue( -[NSArray componentsJoinedByString:]( v54->_managedBundleIDs,  "componentsJoinedByString:",  @", "));
      *(_DWORD *)buf = 138412546;
      id v72 = v50;
      uint64_t v73 = 2114;
      char v74 = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_INFO,  "[%@] Device has the following managed apps: %{public}@",  buf,  0x16u);
    }
  }

  objc_sync_exit(v54);
}

  uint64_t v15 = v6;
LABEL_35:

  if (v15) {
    uint64_t v51 = [[v4 alloc] initWithPropertyValues:v15];
  }
  else {
    uint64_t v51 = 0LL;
  }

  return v51;
}
  }

LABEL_43:
  uint64_t v49 = v25 + v48;
  if (!__OFADD__(v25, v48)) {
    goto LABEL_44;
  }
  __break(1u);
LABEL_117:
  __break(1u);
}

          if (v27 == (id)++v29)
          {
            unint64_t v27 = -[os_log_s countByEnumeratingWithState:objects:count:]( v26,  "countByEnumeratingWithState:objects:count:",  &v156,  v170,  16LL);
            if (v27) {
              goto LABEL_31;
            }
            goto LABEL_28;
          }
        }
      }

      int64_t v181 = v3->_applicationVariant;
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v181, 1LL));
      [v147 setBundleIDs:v18];
    }

    goto LABEL_25;
  }

  uint64_t v9 = 0LL;
  uint64_t v10 = 0LL;
  uint64_t v11 = 0LL;
  uint64_t v12 = 1;
LABEL_102:
  LOBYTE(applicationVariant) = externalVersionIdentifier != 0LL;
  if (v12 && externalVersionIdentifier)
  {
    int64_t v152 = v10;
    int64_t v153 = 0LL;
    uint64_t v11 = sub_1002429F8((uint64_t)v3, &v153, v9, (uint64_t *)&v154, &v152);
    uint64_t v106 = v153;
    uint64_t v107 = v152;

    if (v106)
    {
      uint64_t v108 = (os_log_s *)v106;

      uint64_t v9 = v108;
    }

    else
    {
      uint64_t v108 = 0LL;
    }

    goto LABEL_112;
  }

            uint64_t v4 = 0LL;
            goto LABEL_44;
          }

          uint64_t v54 = ASDLogHandleForCategory(25LL);
          uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            id v56 = (void *)objc_claimAutoreleasedReturnValue([v17 logKey]);
            *(_DWORD *)buf = 138412290;
            *(void *)&buf[4] = v56;
            _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "[%@] Account provided but we couldn't find it on this device",  buf,  0xCu);
          }

          if (![v10 length])
          {
            id v57 = ASDLogHandleForCategory(25LL);
            unint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
            if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
            {
              int v115 = (void *)objc_claimAutoreleasedReturnValue([v17 logKey]);
              *(_DWORD *)buf = 138412290;
              *(void *)&buf[4] = v115;
              _os_log_error_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "[%@] Purchase has a dsID but no username to authenticate",  buf,  0xCu);
            }

            uint64_t v59 = ASDErrorWithDescription( v128,  530LL,  @"Unable to authenticate for purchase with dsID but no username");
            os_log_type_t v13 = (id *)objc_claimAutoreleasedReturnValue(v59);
            BOOL v14 = (void *)objc_claimAutoreleasedReturnValue([v17 account]);
            uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "ams_DSID"));
            uint64_t v61 = sub_1002EBF84((uint64_t)&OBJC_CLASS___StoreItemResponse, v13, v60);
            uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
            [v17 setItemResponse:v62];

            goto LABEL_43;
          }
        }

        else
        {
          uint64_t v39 = ASDLogHandleForCategory(25LL);
          uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            id v41 = (void *)objc_claimAutoreleasedReturnValue([v17 logKey]);
            *(_DWORD *)buf = 138412290;
            *(void *)&buf[4] = v41;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "[%@] No account provided", buf, 0xCu);
          }

          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[ACAccountStore ams_sharedAccountStore]( &OBJC_CLASS___ACAccountStore,  "ams_sharedAccountStore"));
          int64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "ams_activeiTunesAccount"));

          uint64_t v43 = ASDLogHandleForCategory(25LL);
          uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
          uint64_t v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
          if (v31)
          {
            if (v45)
            {
              unint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v17 logKey]);
              *(_DWORD *)buf = 138412290;
              *(void *)&buf[4] = v46;
              _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "[%@] Active iTunes account found, using that",  buf,  0xCu);
            }

            [v17 setAccount:v31];
            goto LABEL_41;
          }

          if (v45)
          {
            uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v17 logKey]);
            *(_DWORD *)buf = 138412290;
            *(void *)&buf[4] = v63;
            _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "[%@] No active iTunes account found",  buf,  0xCu);
          }

          if ([v17 isDiscretionary])
          {
LABEL_56:
            Class v64 = ASDLogHandleForCategory(25LL);
            id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
            if (os_log_type_enabled(v65, OS_LOG_TYPE_ERROR))
            {
              uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue([v17 logKey]);
              *(_DWORD *)buf = 138412290;
              *(void *)&buf[4] = v110;
              _os_log_error_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_ERROR,  "[%@] No account for discretionary purchase",  buf,  0xCu);
            }

            uint64_t v66 = ASDErrorWithDescription(v128, 530LL, @"Unable to purchase discretionary item with no account");
            os_log_type_t v13 = (id *)objc_claimAutoreleasedReturnValue(v66);
            BOOL v14 = (void *)objc_claimAutoreleasedReturnValue([v17 account]);
            id v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "ams_DSID"));
            uint64_t v68 = sub_1002EBF84((uint64_t)&OBJC_CLASS___StoreItemResponse, v13, v67);
            id v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
            [v17 setItemResponse:v69];

            goto LABEL_43;
          }
        }

        NSString v70 = ASDLogHandleForCategory(25LL);
        id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        {
          id v72 = (void *)objc_claimAutoreleasedReturnValue([v17 logKey]);
          *(_DWORD *)buf = 138412290;
          *(void *)&buf[4] = v72;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "[%@] Prompting for account", buf, 0xCu);
        }

        uint64_t v73 = objc_alloc(&OBJC_CLASS___PromptForAccountTask);
        char v74 = (void *)objc_claimAutoreleasedReturnValue([v17 logKey]);
        os_log_type_t v13 = sub_10023AEE4((id *)&v73->super.super.super.isa, v10, v74);

        id v75 = (void *)objc_claimAutoreleasedReturnValue([v17 buyParams]);
        BOOL v14 = (void *)objc_claimAutoreleasedReturnValue([v75 parameterForKey:v127]);

        if (v14)
        {
          id v76 = [v14 isEqualToString:@"GAMEPRE"];
          id v77 = v13 ? v76 : 0;
          if (v77 == 1) {
            *((_BYTE *)v13 + 48) = 1;
          }
        }

        id v79 = (void *)objc_claimAutoreleasedReturnValue([v17 requestToken]);
        if (v13) {
          objc_setProperty_atomic(v13, v78, v79, 72LL);
        }

        uint64_t v80 = sub_10020F1C0((uint64_t)&OBJC_CLASS___TaskQueue);
        uint64_t v81 = (id *)objc_claimAutoreleasedReturnValue(v80);
        int64_t v151 = v13;
        uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v151, 1LL));
        if (v81) {
          [v81[1] addOperations:v82 waitUntilFinished:1];
        }

        if (v13) {
          Property = objc_getProperty(v13, v83, 56LL, 1);
        }
        else {
          Property = 0LL;
        }
        uint64_t v85 = Property;
        uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([v85 account]);

        if (v86)
        {
          if (v13) {
            Class v88 = objc_getProperty(v13, v87, 56LL, 1);
          }
          else {
            Class v88 = 0LL;
          }
          char v89 = v88;
          id v90 = (void *)objc_claimAutoreleasedReturnValue([v89 account]);
          [v17 setAccount:v90];

          uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue([v17 buyParams]);
          [v91 setParameter:&__kCFBooleanTrue forKey:@"hasBeenAuthedForBuy"];

          id v92 = sub_1002F0AC0((uint64_t)&OBJC_CLASS___AMSPurchase, v17);
          unint64_t v129 = (id)objc_claimAutoreleasedReturnValue(v92);
          unint64_t v93 = *(PurchaseBatch **)((char *)&self->_purchaseBatch + 2);
          unint64_t v94 = (void *)objc_claimAutoreleasedReturnValue([v129 uniqueIdentifier]);
          [v93 setObject:v17 forKeyedSubscript:v94];

          [v130 addObject:v129];
          uint64_t v95 = ASDLogHandleForCategory(25LL);
          char v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue([v17 logKey]);
            uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v17 buyParams]);
            unint64_t v99 = (void *)objc_claimAutoreleasedReturnValue([v98 stringValue]);
            *(_DWORD *)buf = 138412546;
            *(void *)&buf[4] = v97;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v99;
            _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "[%@] Purchasing with parameters: %{public}@",  buf,  0x16u);
          }

          uint64_t v4 = 0LL;
        }

        else
        {
          uint64_t v101 = *(void *)(&self->super.super._success + 2);
          if (v101 && *(_BYTE *)(v101 + 24))
          {
            if (v13) {
              uint64_t v102 = objc_getProperty(v13, v87, 32LL, 1);
            }
            else {
              uint64_t v102 = 0LL;
            }
            uint64_t v4 = v102;
          }

          else
          {
            uint64_t v4 = 0LL;
          }

          uint64_t v103 = ASDLogHandleForCategory(25LL);
          uint64_t v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
          if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
          {
            id v112 = (void *)objc_claimAutoreleasedReturnValue([v17 logKey]);
            if (v13) {
              uint64_t v113 = objc_getProperty(v13, v111, 32LL, 1);
            }
            else {
              uint64_t v113 = 0LL;
            }
            uint64_t v114 = v113;
            *(_DWORD *)buf = 138412546;
            *(void *)&buf[4] = v112;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v114;
            _os_log_error_impl( (void *)&_mh_execute_header,  v104,  OS_LOG_TYPE_ERROR,  "[%@] No account for purchase: %{public}@",  buf,  0x16u);
          }

          if (v13) {
            uint64_t v106 = objc_getProperty(v13, v105, 32LL, 1);
          }
          else {
            uint64_t v106 = 0LL;
          }
          unint64_t v129 = v106;
          char v96 = (os_log_s *)objc_claimAutoreleasedReturnValue([v17 account]);
          uint64_t v107 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s ams_DSID](v96, "ams_DSID"));
          uint64_t v108 = sub_1002EBF84((uint64_t)&OBJC_CLASS___StoreItemResponse, v129, v107);
          uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue(v108);
          [v17 setItemResponse:v109];
        }

LABEL_44:
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v134 != v5);
      id v116 = [obj countByEnumeratingWithState:&v142 objects:v152 count:16];
      uint64_t v134 = v116;
      if (!v116) {
        goto LABEL_101;
      }
    }
  }

  uint64_t v4 = 0LL;
LABEL_101:

  if ([v130 count])
  {
    id v117 = objc_alloc(&OBJC_CLASS___AMSPurchaseQueueConfiguration);
    id v118 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue(v118);
    uint64_t v120 = [v117 initWithBag:v119];

    [v120 setDelegate:self];
    id v121 = -[AMSPurchaseQueue initWithConfiguration:]( objc_alloc(&OBJC_CLASS___AMSPurchaseQueue),  "initWithConfiguration:",  v120);
    unint64_t v122 = *(NSError **)((char *)&self->super.super._error + 2);
    *(NSError **)((char *)&self->super.super._error + 2) = (NSError *)v121;

    int64_t v123 = (void *)objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->super.super._error + 2) enquePurchases:v130]);
    v140[0] = _NSConcreteStackBlock;
    v140[1] = 3221225472LL;
    v140[2] = sub_10025C70C;
    v140[3] = &unk_1003E9CA8;
    id v124 = v120;
    __int128 v141 = v124;
    [v123 addErrorBlock:v140];
    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x3032000000LL;
    uint64_t v148 = sub_10025C7FC;
    id v149 = sub_10025C80C;
    uint64_t v150 = 0LL;
    v137[0] = _NSConcreteStackBlock;
    v137[1] = 3221225472LL;
    v137[2] = sub_10025C814;
    v137[3] = &unk_1003EECB0;
    v137[4] = self;
    uint64_t v139 = buf;
    char v125 = v124;
    unint64_t v138 = v125;
    [v123 addSuccessBlock:v137];
    v135[0] = _NSConcreteStackBlock;
    v135[1] = 3221225472LL;
    v135[2] = sub_10025D0F0;
    v135[3] = &unk_1003EECD8;
    char v136 = v126;
    [v123 addFinishBlock:v135];

    _Block_object_dispose(buf, 8);
  }

  else
  {
    (*((void (**)(id, void))v126 + 2))(v126, 0LL);
  }
}

uint64_t sub_1000131C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 544);
  swift_willThrow(a1);
  swift_errorRelease(v2);
  *(void *)(v1 + 552) = 100LL;
  uint64_t v3 = *(void **)(v1 + 528);
  uint64_t v4 = *(void *)(v1 + 472);

  static Logger.updates.getter(v5);
  uint64_t v6 = swift_retain_n(v4, 4LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v1 + 472);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v11 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138412802;
    uint64_t v12 = *(void **)(*(void *)(v9 + 16) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v1 + 456) = v12;
    id v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 456, v1 + 464, v10 + 4, v10 + 12);
    void *v11 = v12;
    swift_release_n(v9, 2LL);
    *(_WORD *)(v10 + 12) = 2050;
    uint64_t v14 = *(void *)(*(void *)(v9 + 24) + 16LL);
    swift_release(v9);
    *(void *)(v1 + 464) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 464, v1 + 472, v10 + 14, v10 + 22);
    swift_release(v9);
    *(_WORD *)(v10 + 22) = 2050;
    *(void *)(v1 + 440) = 100LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 440, v1 + 448, v10 + 24, v10 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[%@] Looking up %{public}ld apps with a batch size of %{public}ld",  (uint8_t *)v10,  0x20u);
    uint64_t v15 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v11, 1LL, v15);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_release_n(*(void *)(v1 + 472), 4LL);
  }

  uint64_t v16 = *(void *)(v1 + 520);
  uint64_t v17 = *(void *)(v1 + 512);
  uint64_t v18 = *(void *)(v1 + 480);
  id v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 488) + 8LL);
  *(void *)(v1 + 560) = v19;
  v19(v17, v18);
  id v20 = sub_100255630(v16);
  *(void *)(v1 + 568) = v20;
  NSString v21 = String._bridgeToObjectiveC()();
  *(void *)(v1 + 576) = v21;
  *(void *)(v1 + 56) = v1 + 760;
  *(void *)(v1 + 16) = v1;
  *(void *)(v1 + 24) = sub_100010330;
  *(void *)(v1 + 312) = swift_continuation_init(v1 + 16, 1LL);
  *(void *)(v1 + 280) = _NSConcreteStackBlock;
  *(void *)(v1 + 288) = 0x40000000LL;
  *(void *)(v1 + 296) = sub_10007C198;
  *(void *)(v1 + 304) = &unk_1003DC1A8;
  sub_100256F54(v20, v21, 0, (void *)(v1 + 280));
  return swift_continuation_await(v1 + 16);
}

void sub_100013494(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *((void *)v1 + 73);
  uint64_t v4 = (void *)*((void *)v1 + 72);
  uint64_t v5 = (void *)*((void *)v2 + 71);
  swift_willThrow(a1);
  swift_errorRelease(v3);

  uint64_t v6 = *(void *)(*((void *)v2 + 59) + 24LL);
  uint64_t v7 = *(void *)(v6 + 16);
  os_log_type_t v8 = _swiftEmptyArrayStorage;
  uint64_t v210 = v2;
  if (v7)
  {
    uint64_t v208 = swift_bridgeObjectRetain(v6);
    uint64_t v9 = v208 + 64;
    uint64_t v10 = _swiftEmptyArrayStorage;
    uint64_t v211 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v12 = v10;
      uint64_t v13 = *(void *)(v9 - 24);
      uint64_t v213 = *(void *)(v9 - 32);
      uint64_t v14 = *(void **)(v9 - 16);
      char v217 = *(_BYTE *)(v9 - 8);
      int v15 = *(unsigned __int8 *)(v9 - 7);
      uint64_t v16 = *(void **)v9;
      uint64_t v221 = *(void *)(v9 + 8);
      uint64_t v17 = *(void **)(v9 + 24);
      uint64_t v18 = *(void *)(v9 + 40);
      uint64_t v227 = *(void *)(v9 + 16);
      uint64_t v230 = *(void *)(v9 + 32);
      uint64_t v19 = *(void *)(v9 + 56);
      uint64_t v239 = *(void *)(v9 + 48);
      swift_bridgeObjectRetain_n(v18, 2LL);
      swift_bridgeObjectRetain_n(v19, 2LL);
      swift_bridgeObjectRetain_n(v13, 2LL);
      uint64_t v219 = v14;
      id v20 = v14;
      uint64_t v224 = v16;
      id v21 = v16;
      unint64_t v233 = v17;
      id v22 = v17;
      id v236 = v20;
      id v215 = v21;
      id v23 = v22;
      if (v15 == 1)
      {
        uint64_t v10 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
          uint64_t v10 = sub_100088338(0LL, v12[2] + 1LL, 1, v12);
        }
        unint64_t v25 = v10[2];
        unint64_t v24 = v10[3];
        if (v25 >= v24 >> 1) {
          uint64_t v10 = sub_100088338((void *)(v24 > 1), v25 + 1, 1, v10);
        }
        v10[2] = v25 + 1;
        uint64_t v11 = &v10[12 * v25];
        v11[4] = v213;
        v11[5] = v13;
        v11[6] = v219;
        *((_BYTE *)v11 + 56) = v217;
        *((_BYTE *)v11 + 57) = 1;
      }

      else
      {
        uint64_t v10 = v12;
        if ((swift_isUniquelyReferenced_nonNull_native(v211) & 1) != 0) {
          uint64_t v26 = v211;
        }
        else {
          uint64_t v26 = sub_100088338(0LL, v211[2] + 1LL, 1, v211);
        }
        unint64_t v28 = v26[2];
        unint64_t v27 = v26[3];
        if (v28 >= v27 >> 1) {
          uint64_t v26 = sub_100088338((void *)(v27 > 1), v28 + 1, 1, v26);
        }
        v26[2] = v28 + 1;
        uint64_t v211 = v26;
        uint64_t v11 = &v26[12 * v28];
        v11[4] = v213;
        v11[5] = v13;
        v11[6] = v219;
        *((_BYTE *)v11 + 56) = v217;
        *((_BYTE *)v11 + 57) = 0;
      }

      v11[8] = v224;
      v11[9] = v221;
      v11[10] = v227;
      v11[11] = v233;
      v11[12] = v230;
      v11[13] = v18;
      v11[14] = v239;
      v11[15] = v19;
      swift_bridgeObjectRelease(v19);
      swift_bridgeObjectRelease(v18);

      swift_bridgeObjectRelease(v13);
      v9 += 96LL;
      --v7;
    }

    while (v7);
    swift_bridgeObjectRelease(v208);
    uint64_t v2 = v210;
    os_log_type_t v8 = v211;
  }

  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }

  *((void *)v2 + 75) = v8;
  *((void *)v2 + 74) = v10;
  uint64_t v29 = v10[2];
  if (!v29) {
    goto LABEL_34;
  }
  unint64_t v30 = v2 + 144;
  swift_bridgeObjectRetain(v10);
  uint64_t v31 = 4LL;
  p_name = (char **)(&DownloadSinf__classData + 24);
  while (1)
  {
    int64_t v38 = v10;
    __int128 v39 = *(_OWORD *)&v10[v31 + 2];
    *(_OWORD *)unint64_t v30 = *(_OWORD *)&v10[v31];
    *((_OWORD *)v30 + 1) = v39;
    __int128 v40 = *(_OWORD *)&v10[v31 + 4];
    __int128 v41 = *(_OWORD *)&v10[v31 + 6];
    __int128 v42 = *(_OWORD *)&v10[v31 + 10];
    *((_OWORD *)v30 + 4) = *(_OWORD *)&v10[v31 + 8];
    *((_OWORD *)v30 + 5) = v42;
    *((_OWORD *)v30 + 2) = v40;
    *((_OWORD *)v30 + 3) = v41;
    sub_100015118(v30);
    id v43 = sub_100014B58();
    uint64_t v2 = (char *)objc_msgSend(v43, p_name[365]);

    unint64_t v45 = sub_100024040(v2);
    uint64_t v46 = _swiftEmptyDictionarySingleton[2];
    BOOL v47 = (v44 & 1) == 0;
    uint64_t v48 = v46 + v47;
    if (__OFADD__(v46, v47))
    {
      __break(1u);
      goto LABEL_185;
    }

    char v49 = v44;
    if (_swiftEmptyDictionarySingleton[3] < v48)
    {
      sub_100076B20(v48, 1LL);
      unint64_t v50 = sub_100024040(v2);
      if ((v49 & 1) != (v51 & 1))
      {
        uint64_t v109 = sub_1000079A0(&qword_100458710);
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v109);
        return;
      }

      unint64_t v45 = v50;
    }

    if ((v49 & 1) != 0)
    {

      uint64_t v52 = _swiftEmptyDictionarySingleton[7];
      char v53 = *(void **)(v52 + 8 * v45);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v53);
      *(void *)(v52 + 8 * v45) = v53;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        char v53 = sub_100088338(0LL, v53[2] + 1LL, 1, v53);
        *(void *)(v52 + 8 * v45) = v53;
      }

      unint64_t v56 = v53[2];
      unint64_t v55 = v53[3];
      if (v56 >= v55 >> 1)
      {
        char v53 = sub_100088338((void *)(v55 > 1), v56 + 1, 1, v53);
        *(void *)(v52 + 8 * v45) = v53;
      }

      uint64_t v10 = v38;
      v53[2] = v56 + 1;
      unint64_t v33 = &v53[12 * v56];
      __int128 v34 = *((_OWORD *)v30 + 1);
      v33[2] = *(_OWORD *)v30;
      v33[3] = v34;
      __int128 v35 = *((_OWORD *)v30 + 2);
      __int128 v36 = *((_OWORD *)v30 + 3);
      __int128 v37 = *((_OWORD *)v30 + 5);
      v33[6] = *((_OWORD *)v30 + 4);
      v33[7] = v37;
      v33[4] = v35;
      v33[5] = v36;
      p_name = &DownloadSinf__classData.name;
      goto LABEL_21;
    }

    uint64_t v57 = sub_1000079A0(&qword_100458700);
    unint64_t v58 = (_OWORD *)swift_allocObject(v57, 128LL, 7LL);
    __int128 v59 = *((_OWORD *)v30 + 2);
    __int128 v60 = *((_OWORD *)v30 + 4);
    __int128 v61 = *((_OWORD *)v30 + 5);
    v58[5] = *((_OWORD *)v30 + 3);
    v58[6] = v60;
    v58[7] = v61;
    __int128 v62 = *(_OWORD *)v30;
    __int128 v63 = *((_OWORD *)v30 + 1);
    v58[1] = xmmword_100372930;
    v58[2] = v62;
    v58[3] = v63;
    v58[4] = v59;
    _swiftEmptyDictionarySingleton[(v45 >> 6) + 8] |= 1LL << v45;
    uint64_t v64 = 8 * v45;
    *(void *)(_swiftEmptyDictionarySingleton[6] + v64) = v2;
    *(void *)(_swiftEmptyDictionarySingleton[7] + v64) = v58;
    uint64_t v65 = _swiftEmptyDictionarySingleton[2];
    BOOL v66 = __OFADD__(v65, 1LL);
    uint64_t v67 = v65 + 1;
    if (v66) {
      break;
    }
    _swiftEmptyDictionarySingleton[2] = v67;
    uint64_t v10 = v38;
LABEL_21:
    v31 += 12LL;
    if (!--v29)
    {
      swift_bridgeObjectRelease(v10);
      uint64_t v2 = v210;
LABEL_34:
      int64_t v68 = 0LL;
      uint64_t v212 = v2 + 344;
      uint64_t v214 = v2 + 320;
      char v209 = (uint64_t *)(v2 + 424);
      uint64_t v216 = (uint64_t *)(v2 + 432);
      *((void *)v2 + 76) = _swiftEmptyDictionarySingleton;
      char v69 = _swiftEmptyDictionarySingleton[4];
      v2[761] = v69;
      uint64_t v70 = 1LL << v69;
      if (v70 < 64) {
        uint64_t v71 = ~(-1LL << v70);
      }
      else {
        uint64_t v71 = -1LL;
      }
      unint64_t v72 = v71 & _swiftEmptyDictionarySingleton[8];
      *((void *)v2 + 85) = _swiftEmptyArrayStorage;
      uint64_t v73 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
      while (1)
      {
        do
        {
          if (v72)
          {
            unint64_t v76 = __clz(__rbit64(v72));
            v72 &= v72 - 1;
            unint64_t v77 = v76 | (v68 << 6);
            uint64_t v78 = *((void *)v2 + 76);
          }

          else
          {
            int64_t v79 = v68 + 1;
            if (__OFADD__(v68, 1LL)) {
              goto LABEL_187;
            }
            int64_t v80 = (unint64_t)((1LL << v2[761]) + 63) >> 6;
            uint64_t v78 = *((void *)v2 + 76);
            if (v79 >= v80)
            {
LABEL_76:
              uint64_t v110 = *((void *)v2 + 74);
              swift_release(v78);
              swift_bridgeObjectRelease(v110);
              uint64_t v111 = *((void *)v2 + 75);
              id v112 = sub_1000147B4(v111);
              swift_bridgeObjectRelease(v111);
              int64_t v113 = 0LL;
              *((void *)v2 + 86) = v112;
              char v114 = *((_BYTE *)v112 + 32);
              v2[762] = v114;
              if (1LL << v114 < 64) {
                uint64_t v115 = ~(-1LL << (1LL << v114));
              }
              else {
                uint64_t v115 = -1LL;
              }
              unint64_t v116 = v115 & v112[8];
              unint64_t v45 = *((void *)v2 + 85);
              while (2)
              {
                if (v116)
                {
                  uint64_t v118 = (v116 - 1) & v116;
                  unint64_t v119 = __clz(__rbit64(v116)) | (v113 << 6);
                  uint64_t v48 = *((void *)v2 + 86);
                  goto LABEL_97;
                }

                int64_t v120 = v113 + 1;
                if (__OFADD__(v113, 1LL)) {
                  goto LABEL_196;
                }
                int64_t v121 = (unint64_t)((1LL << v2[762]) + 63) >> 6;
                uint64_t v48 = *((void *)v2 + 86);
                if (v120 < v121)
                {
                  uint64_t v122 = v48 + 64;
                  unint64_t v123 = *(void *)(v48 + 64 + 8 * v120);
                  ++v113;
                  if (v123) {
                    goto LABEL_96;
                  }
                  int64_t v113 = v120 + 1;
                  if (v120 + 1 >= v121) {
                    break;
                  }
                  unint64_t v123 = *(void *)(v122 + 8 * v113);
                  if (v123) {
                    goto LABEL_96;
                  }
                  int64_t v113 = v120 + 2;
                  if (v120 + 2 >= v121) {
                    break;
                  }
                  unint64_t v123 = *(void *)(v122 + 8 * v113);
                  if (v123) {
                    goto LABEL_96;
                  }
                  int64_t v124 = v120 + 3;
                  if (v124 >= v121) {
                    break;
                  }
                  unint64_t v123 = *(void *)(v122 + 8 * v124);
                  if (!v123)
                  {
                    while (1)
                    {
                      int64_t v113 = v124 + 1;
                      if (__OFADD__(v124, 1LL)) {
                        goto LABEL_197;
                      }
                      if (v113 >= v121) {
                        goto LABEL_185;
                      }
                      unint64_t v123 = *(void *)(v122 + 8 * v113);
                      ++v124;
                      if (v123) {
                        goto LABEL_96;
                      }
                    }
                  }

                  int64_t v113 = v124;
LABEL_96:
                  uint64_t v118 = (v123 - 1) & v123;
                  unint64_t v119 = __clz(__rbit64(v123)) + (v113 << 6);
LABEL_97:
                  *((void *)v2 + 88) = v118;
                  *((void *)v2 + 87) = v113;
                  uint64_t v125 = *((void *)v2 + 69);
                  uint64_t v126 = 8 * v119;
                  uint64_t v127 = *(void **)(*(void *)(v48 + 48) + v126);
                  *((void *)v2 + 89) = v127;
                  uint64_t v128 = *(void *)(*(void *)(v48 + 56) + v126);
                  *((void *)v2 + 90) = v128;
                  *((void *)v2 + 53) = 0LL;
                  unint64_t v129 = *(void *)(v128 + 16);
                  if (v125 <= 0)
                  {
                    if (v125 && !v129) {
                      goto LABEL_103;
                    }
                  }

                  else if (v129 < v125)
                  {
                    goto LABEL_103;
                  }

                  unint64_t v129 = v125;
LABEL_103:
                  *uint64_t v216 = v129;
                  swift_bridgeObjectRetain_n(v128, 2LL);
                  id v130 = v127;
                  swift_beginAccess(v209, v214, 1LL, 0LL);
                  swift_beginAccess(v216, v212, 1LL, 0LL);
                  uint64_t v131 = *v209;
                  uint64_t v132 = *v216;
                  if (*v209 >= *v216)
                  {
LABEL_80:
                    uint64_t v117 = *((void *)v2 + 90);

                    swift_bridgeObjectRelease_n(v117, 2LL);
                    unint64_t v116 = *((void *)v2 + 88);
                    int64_t v113 = *((void *)v2 + 87);
                    continue;
                  }

                  while (2)
                  {
                    *((void *)v2 + 94) = v45;
                    uint64_t v133 = *((void *)v2 + 90);
                    *((void *)v2 + 53) = v132;
                    unint64_t v134 = *(void *)(v133 + 16);
                    uint64_t v135 = v134 - v132;
                    if (__OFSUB__(v134, v132)) {
                      goto LABEL_191;
                    }
                    uint64_t v136 = *((void *)v2 + 69);
                    if (v136 < 1)
                    {
                      BOOL v138 = v135 <= 0 && v136 < v135;
                      uint64_t v137 = *(void *)(v133 + 16);
                      if (!v138) {
                        goto LABEL_113;
                      }
                    }

                    else if (v135 < 0 || (uint64_t v137 = *(void *)(v133 + 16), v135 >= (unint64_t)v136))
                    {
LABEL_113:
                      uint64_t v137 = v132 + v136;
                      if (__OFADD__(v132, v136)) {
                        goto LABEL_194;
                      }
                    }

                    *uint64_t v216 = v137;
                    if (v131 < 0) {
                      goto LABEL_192;
                    }
                    uint64_t v140 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
                    uint64_t v141 = swift_bridgeObjectRetain(v133);
                    uint64_t v142 = swift_unknownObjectRetain_n(v141, 2LL);
                    uint64_t v143 = (void *)swift_dynamicCastClass(v142, v140);
                    if (!v143)
                    {
                      swift_bridgeObjectRelease(v133);
                      uint64_t v143 = _swiftEmptyArrayStorage;
                    }

                    uint64_t v144 = v143[2];
                    swift_release(v143);
                    uint64_t v145 = *((void *)v2 + 90);
                    if (v144 == v132 - v131)
                    {
                      uint64_t v146 = (void *)swift_dynamicCastClass(*((void *)v2 + 90), v140);
                      if (!v146)
                      {
                        swift_bridgeObjectRelease(v145);
                        uint64_t v146 = _swiftEmptyArrayStorage;
                      }
                    }

                    else
                    {
                      swift_bridgeObjectRelease(*((void *)v2 + 90));
                      uint64_t v146 = sub_1000610BC(v145, v145 + 32, v131, (2 * v132) | 1);
                    }

                    swift_bridgeObjectRelease(*((void *)v2 + 90));
                    if (qword_100458008 != -1) {
                      swift_once(&qword_100458008, sub_100009B38);
                    }
                    uint64_t v147 = *((void *)v2 + 89);
                    uint64_t v148 = (void *)qword_100458570;
                    sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
                    id v149 = v148;
                    LOBYTE(v147) = static NSObject.== infix(_:_:)(v147, v149);

                    if ((v147 & 1) != 0 || (uint64_t v229 = v146[2]) == 0)
                    {
                      swift_release(v146);
LABEL_166:
                      id v189 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
                      id v172 = objc_msgSend(v189, "ams_activeiTunesAccount");

LABEL_170:
                      *((void *)v2 + 91) = v172;
                      uint64_t v191 = *((void *)v2 + 90);
                      unint64_t v192 = *(void *)(v191 + 16);
                      if (v192)
                      {
                        unint64_t v193 = 0LL;
                        uint64_t v194 = (uint64_t *)(v191 + 104);
                        while (1)
                        {
                          uint64_t v195 = *v194;
                          if (*v194) {
                            break;
                          }
                          ++v193;
                          v194 += 12;
                          if (v192 == v193) {
                            goto LABEL_183;
                          }
                        }

                        if (v193 >= v192) {
                          goto LABEL_195;
                        }
                        uint64_t v196 = *(v194 - 1);
                        uint64_t v197 = *((void *)v2 + 94);
                        id v198 = v172;
                        swift_bridgeObjectRetain(v191);
                        swift_bridgeObjectRetain(v195);
                        char v199 = swift_isUniquelyReferenced_nonNull_native(v197);
                        unint64_t v45 = *((void *)v2 + 94);
                        if ((v199 & 1) == 0) {
                          unint64_t v45 = (unint64_t)sub_10008845C( 0LL,  *(void *)(v45 + 16) + 1LL,  1,  *((void **)v2 + 94));
                        }
                        unint64_t v201 = *(void *)(v45 + 16);
                        unint64_t v200 = *(void *)(v45 + 24);
                        if (v201 >= v200 >> 1) {
                          unint64_t v45 = (unint64_t)sub_10008845C((void *)(v200 > 1), v201 + 1, 1, (void *)v45);
                        }
                        uint64_t v202 = *((void *)v2 + 91);
                        uint64_t v203 = *((void *)v2 + 90);
                        *(void *)(v45 + 16) = v201 + 1;
                        id v204 = (void *)(v45 + 32 * v201);
                        v204[4] = v202;
                        v204[5] = v203;
                        v204[6] = v196;
                        v204[7] = v195;

                        uint64_t v131 = *((void *)v2 + 53);
                        uint64_t v132 = *((void *)v2 + 54);
                        if (v131 >= v132) {
                          goto LABEL_80;
                        }
                        continue;
                      }

LABEL_183:
                      id v205 = (void *)swift_task_alloc(dword_1004585D4);
                      *((void *)v2 + 92) = v205;
                      void *v205 = v2;
                      v205[1] = sub_1000126A8;
                      sub_10000CF90(*((void *)v2 + 89));
                      return;
                    }

                    break;
                  }

                  unint64_t v150 = 0LL;
                  uint64_t v232 = v146;
                  uint64_t v235 = v146 + 4;
                  while (2)
                  {
                    if (v150 >= v146[2]) {
                      goto LABEL_189;
                    }
                    int64_t v151 = &v235[12 * v150];
                    uint64_t v152 = v151[1];
                    int64_t v153 = (void *)v151[2];
                    int v154 = *((unsigned __int8 *)v151 + 25);
                    uint64_t v155 = (void *)v151[4];
                    uint64_t v156 = (void *)v151[7];
                    uint64_t v157 = v151[9];
                    uint64_t v158 = v151[11];
                    uint64_t v238 = v156;
                    uint64_t v241 = v157;
                    if (v153)
                    {
                      swift_bridgeObjectRetain(v157);
                      uint64_t v159 = v158;
                      swift_bridgeObjectRetain(v158);
                      id v160 = v153;
                      uint64_t v161 = v152;
                      id v162 = v160;
                      uint64_t v163 = v161;
                      swift_bridgeObjectRetain(v161);
                      id v164 = v162;
                      id v165 = v155;
                      id v166 = v156;
                      Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
                      char v168 = static NSObject.== infix(_:_:)(v164, isa);

                      if ((v168 & 1) != 0)
                      {

                        uint64_t v152 = v163;
                        uint64_t v158 = v159;
                        goto LABEL_147;
                      }

                      id v171 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
                      id v172 = objc_msgSend(v171, "ams_iTunesAccountWithDSID:", v164);

                      uint64_t v152 = v163;
                      uint64_t v158 = v159;
                      if (v172)
                      {
                        if (v154) {
                          goto LABEL_136;
                        }
LABEL_154:
                        if (v172) {
                          goto LABEL_155;
                        }
LABEL_157:
                        uint64_t v176 = v158;
                        uint64_t v146 = v232;
                        goto LABEL_158;
                      }
                    }

                    else
                    {
                      swift_bridgeObjectRetain(v157);
                      swift_bridgeObjectRetain(v158);
                      swift_bridgeObjectRetain(v152);
                      id v169 = v155;
                      id v170 = v156;
                    }

LABEL_147:
                    if (v155)
                    {
                      int64_t v181 = v153;
                      uint64_t v182 = v158;
                      uint64_t v183 = v152;
                      id v184 = v155;
                      Class v185 = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
                      char v186 = static NSObject.== infix(_:_:)(v184, v185);

                      if ((v186 & 1) != 0)
                      {

                        id v172 = 0LL;
                      }

                      else
                      {
                        id v187 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
                        id v172 = objc_msgSend(v187, "ams_iTunesAccountWithDSID:", v184);
                      }

                      uint64_t v152 = v183;
                      uint64_t v158 = v182;
                      int64_t v153 = v181;
                      if (!v154) {
                        goto LABEL_154;
                      }
                    }

                    else
                    {
                      id v172 = 0LL;
                      if (!v154) {
                        goto LABEL_154;
                      }
                    }

LABEL_136:
                    if (v172)
                    {
LABEL_155:
                      if (v154 == objc_msgSend(v172, "ams_isManagedAppleID"))
                      {
                        swift_release(v232);
                        swift_bridgeObjectRelease(v158);
                        uint64_t v190 = v152;
LABEL_169:
                        swift_bridgeObjectRelease(v190);

                        swift_bridgeObjectRelease(v241);
                        uint64_t v2 = v210;
                        goto LABEL_170;
                      }

                      goto LABEL_157;
                    }

                    uint64_t v226 = v152;
                    id v173 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
                    id v174 = objc_msgSend(v173, "ams_iTunesAccounts");

                    uint64_t v175 = sub_10001517C(0LL, &qword_100458708, &OBJC_CLASS___ACAccount_ptr);
                    uint64_t v176 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v174, v175);

                    uint64_t v223 = v158;
                    if ((unint64_t)v176 >> 62)
                    {
                      if (v176 < 0) {
                        uint64_t v188 = v176;
                      }
                      else {
                        uint64_t v188 = v176 & 0xFFFFFFFFFFFFFF8LL;
                      }
                      swift_bridgeObjectRetain(v176);
                      uint64_t v177 = _CocoaArrayWrapper.endIndex.getter(v188);
                      swift_bridgeObjectRelease(v176);
                      if (v177)
                      {
LABEL_139:
                        uint64_t v178 = 0LL;
                        do
                        {
                          id v179 = (v176 & 0xC000000000000001LL) != 0
                               ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v178, v176)
                               : *(id *)(v176 + 8 * v178 + 32);
                          id v172 = v179;
                          uint64_t v180 = v178 + 1;
                          if (__OFADD__(v178, 1LL)) {
                            goto LABEL_188;
                          }
                          if (objc_msgSend(v179, "ams_isManagedAppleID"))
                          {
                            swift_release(v232);
                            swift_bridgeObjectRelease(v223);
                            swift_bridgeObjectRelease(v176);
                            uint64_t v190 = v226;
                            goto LABEL_169;
                          }

                          ++v178;
                        }

                        while (v180 != v177);
                      }
                    }

                    else
                    {
                      uint64_t v177 = *(void *)((v176 & 0xFFFFFFFFFFFFF8LL) + 0x10);
                      if (v177) {
                        goto LABEL_139;
                      }
                    }

                    swift_bridgeObjectRelease(v223);
                    uint64_t v146 = v232;
                    uint64_t v152 = v226;
LABEL_158:
                    ++v150;
                    swift_bridgeObjectRelease(v176);
                    swift_bridgeObjectRelease(v152);

                    swift_bridgeObjectRelease(v241);
                    if (v150 == v229)
                    {
                      swift_release(v146);
                      uint64_t v2 = v210;
                      goto LABEL_166;
                    }

                    continue;
                  }
                }

                break;
              }

LABEL_185:
              swift_release(v48);
              uint64_t v206 = *((void *)v2 + 63);
              uint64_t v207 = *((void *)v2 + 62);
              swift_task_dealloc(*((void *)v2 + 64));
              swift_task_dealloc(v206);
              swift_task_dealloc(v207);
              (*((void (**)(unint64_t))v2 + 1))(v45);
              return;
            }

            uint64_t v81 = v78 + 64;
            unint64_t v82 = *(void *)(v78 + 64 + 8 * v79);
            ++v68;
            if (!v82)
            {
              int64_t v68 = v79 + 1;
              if (v79 + 1 >= v80) {
                goto LABEL_76;
              }
              unint64_t v82 = *(void *)(v81 + 8 * v68);
              if (!v82)
              {
                int64_t v68 = v79 + 2;
                if (v79 + 2 >= v80) {
                  goto LABEL_76;
                }
                unint64_t v82 = *(void *)(v81 + 8 * v68);
                if (!v82)
                {
                  int64_t v83 = v79 + 3;
                  if (v83 >= v80) {
                    goto LABEL_76;
                  }
                  unint64_t v82 = *(void *)(v81 + 8 * v83);
                  if (!v82)
                  {
                    while (1)
                    {
                      int64_t v68 = v83 + 1;
                      if (__OFADD__(v83, 1LL)) {
                        goto LABEL_190;
                      }
                      if (v68 >= v80) {
                        goto LABEL_76;
                      }
                      unint64_t v82 = *(void *)(v81 + 8 * v68);
                      ++v83;
                      if (v82) {
                        goto LABEL_55;
                      }
                    }
                  }

                  int64_t v68 = v83;
                }
              }
            }

LABEL_55:
            unint64_t v72 = (v82 - 1) & v82;
            unint64_t v77 = __clz(__rbit64(v82)) + (v68 << 6);
          }

          *((void *)v2 + 78) = v72;
          *((void *)v2 + 77) = v68;
          uint64_t v84 = 8 * v77;
          uint64_t v85 = *(void **)(*(void *)(v78 + 48) + v84);
          *((void *)v2 + 79) = v85;
          uint64_t v86 = *(char **)(*(void *)(v78 + 56) + v84);
          *((void *)v2 + 80) = v86;
        }

        while (!v85);
        unint64_t v228 = v72;
        id v87 = (void *)objc_opt_self(v73[296]);
        id v74 = v85;
        swift_bridgeObjectRetain(v86);
        id v88 = objc_msgSend(v87, "ams_sharedAccountStore");
        id v89 = objc_msgSend(v88, "ams_iTunesAccountWithDSID:", v74);
        *((void *)v2 + 81) = v89;

        id v225 = v89;
        if (v89)
        {
          uint64_t v220 = v74;
          int64_t v222 = v68;
          uint64_t v90 = *((void *)v86 + 2);
          if (v90)
          {
            sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
            swift_bridgeObjectRetain_n(v86, 2LL);
            uint64_t v218 = v86;
            uint64_t v91 = v86 + 64;
            while (1)
            {
              uint64_t v92 = *((void *)v91 - 3);
              unint64_t v93 = (void *)*((void *)v91 - 2);
              unint64_t v94 = *(void **)v91;
              uint64_t v95 = (void *)*((void *)v91 + 3);
              uint64_t v96 = *((void *)v91 + 5);
              uint64_t v97 = *((void *)v91 + 7);
              if (v95)
              {
                swift_bridgeObjectRetain(v96);
                swift_bridgeObjectRetain(v97);
                id v98 = v95;
                swift_bridgeObjectRetain(v92);
                uint64_t v237 = v93;
                id v234 = v93;
                uint64_t v240 = v94;
                id v231 = v94;
                id v99 = v98;
                uint64_t v100 = v92;
                Class v101 = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
                char v102 = static NSObject.== infix(_:_:)(v99, v101);

                if ((v102 & 1) == 0)
                {
                  swift_bridgeObjectRelease(v97);
                  swift_bridgeObjectRelease(v96);

                  uint64_t v96 = v100;
                  goto LABEL_68;
                }

                uint64_t v92 = v100;
                unint64_t v93 = v237;
                unint64_t v94 = v240;
              }

              else
              {
                swift_bridgeObjectRetain(v96);
                swift_bridgeObjectRetain(v97);
                swift_bridgeObjectRetain(v92);
                id v103 = v93;
                id v104 = v94;
              }

              if (qword_100458008 != -1) {
                swift_once(&qword_100458008, sub_100009B38);
              }
              id v99 = (id)qword_100458570;
              swift_bridgeObjectRelease(v97);
              swift_bridgeObjectRelease(v92);

LABEL_68:
              uint64_t v2 = v210;
              *((void *)v210 + 82) = v99;
              swift_bridgeObjectRelease(v96);
              if (qword_100458008 != -1) {
                swift_once(&qword_100458008, sub_100009B38);
              }
              id v105 = (id)qword_100458570;
              char v106 = static NSObject.== infix(_:_:)(v99, v105);

              if ((v106 & 1) == 0)
              {
                swift_bridgeObjectRelease_n(v218, 2LL);
                uint64_t v107 = (char **)swift_task_alloc(dword_1004585EC);
                *((void *)v210 + 83) = v107;
                *uint64_t v107 = v210;
                v107[1] = (char *)sub_1000116A8;
                uint64_t v108 = (char *)*((void *)v210 + 59);
                v107[3] = (char *)v99;
                v107[4] = v108;
                v107[2] = v218;
                swift_task_switch(sub_100014E50, 0LL, 0LL);
                return;
              }

              v91 += 96;
              if (!--v90)
              {
                uint64_t v86 = v218;
                swift_bridgeObjectRelease_n(v218, 2LL);
                uint64_t v73 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
                break;
              }
            }
          }

          swift_bridgeObjectRelease(v86);
          id v74 = v220;

          int64_t v68 = v222;
          id v75 = v225;
        }

        else
        {
          swift_bridgeObjectRelease(v86);
          id v75 = v74;
        }

        unint64_t v72 = v228;
      }
    }
  }

  __break(1u);
LABEL_187:
  __break(1u);
LABEL_188:
  __break(1u);
LABEL_189:
  __break(1u);
LABEL_190:
  __break(1u);
LABEL_191:
  __break(1u);
LABEL_192:
  __break(1u);
LABEL_193:
  __break(1u);
LABEL_194:
  __break(1u);
LABEL_195:
  __break(1u);
LABEL_196:
  __break(1u);
LABEL_197:
  __break(1u);
}

  uint64_t v29 = v40[2];
  if (v29 < v9)
  {
    __break(1u);
    goto LABEL_57;
  }

    unint64_t v72 = sub_10031C730((uint64_t)&OBJC_CLASS___NSURLSessionConfiguration, self);
    char v53 = (void *)objc_claimAutoreleasedReturnValue(v72);
    uint64_t v54 = 0;
LABEL_56:
    uint64_t v223 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLSession sessionWithConfiguration:delegate:delegateQueue:]( &OBJC_CLASS___NSURLSession,  "sessionWithConfiguration:delegate:delegateQueue:",  v53,  a1,  *(void *)(a1 + 8)));
    if ((v51 & 1) != 0) {
      id v74 = 0LL;
    }
    else {
      id v74 = objc_getProperty(self, v73, 136LL, 1);
    }
    id v75 = v74;
    unint64_t v76 = sub_1002B4EE0((uint64_t)&OBJC_CLASS___CachedURLSession, v223, v75);
    uint64_t v232 = objc_claimAutoreleasedReturnValue(v76);
    objc_msgSend(*(id *)(a1 + 32), "setObject:forKeyedSubscript:");

    unint64_t v77 = ASDLogHandleForCategory(10LL);
    uint64_t v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      id v225 = v14;
      if (v5) {
        int64_t v80 = objc_getProperty(v25, v79, 56LL, 1);
      }
      else {
        int64_t v80 = 0LL;
      }
      uint64_t v81 = v80;
      if (v54) {
        unint64_t v82 = "ephemeral";
      }
      else {
        unint64_t v82 = "background";
      }
      int64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v53 identifier]);
      *(_DWORD *)buf = 138413058;
      v247 = v81;
      uint64_t v248 = 2080;
      uint64_t v249 = (uint64_t)v82;
      uint64_t v250 = 2114;
      uint64_t v251 = (uint64_t)v83;
      v252 = 2114;
      v253 = v230;
      _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "[%@] Created new %s session with identifier: %{public}@ (%{public}@)",  buf,  0x2Au);

      uint64_t v14 = v225;
    }

    int64_t v68 = v230;
    uint64_t v71 = (void *)v232;
    if (!v232)
    {
      uint64_t v84 = 0LL;
      goto LABEL_67;
    }

uint64_t sub_100014734(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_1000079A0(&qword_100459B50);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    **(void **)(*(void *)(v3 + 64) + 40LL) = a2;
    return swift_continuation_throwingResume(v3);
  }

void *sub_1000147B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyDictionarySingleton;
  }
  uint64_t v2 = swift_bridgeObjectRetain(a1);
  uint64_t v3 = 0LL;
  uint64_t v44 = v2;
  while (1)
  {
    uint64_t v45 = *(void *)(v2 + v3 + 32);
    __int128 v5 = *(_OWORD *)(v2 + v3 + 40);
    char v46 = *(_BYTE *)(v2 + v3 + 56);
    char v47 = *(_BYTE *)(v2 + v3 + 57);
    __int128 v6 = *(_OWORD *)(v2 + v3 + 64);
    uint64_t v7 = *(void *)(v2 + v3 + 104);
    uint64_t v8 = *(void *)(v2 + v3 + 120);
    uint64_t v49 = *(void *)(v2 + v3 + 96);
    uint64_t v50 = *(void *)(v2 + v3 + 112);
    __int128 v48 = *(_OWORD *)(v2 + v3 + 80);
    uint64_t v9 = *(void **)(v2 + v3 + 48);
    __int128 v51 = v5;
    __int128 v52 = v6;
    if (*((void *)&v48 + 1))
    {
      sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      id v10 = *((id *)&v48 + 1);
      swift_bridgeObjectRetain(v51);
      id v11 = v9;
      id v12 = (id)v52;
      id v13 = v10;
      Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
      char v15 = static NSObject.== infix(_:_:)(v13, isa);

      if ((v15 & 1) == 0) {
        goto LABEL_12;
      }
    }

    else
    {
      uint64_t v16 = v5;
      uint64_t v17 = (void *)v6;
      swift_bridgeObjectRetain(v7);
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v16);
      id v18 = v9;
      id v19 = v17;
    }

    if (qword_100458008 != -1) {
      swift_once(&qword_100458008, sub_100009B38);
    }
    id v13 = (id)qword_100458570;
LABEL_12:
    unint64_t v21 = sub_100024010((uint64_t)v13);
    uint64_t v22 = _swiftEmptyDictionarySingleton[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23)) {
      break;
    }
    char v25 = v20;
    if (_swiftEmptyDictionarySingleton[3] < v24)
    {
      sub_100076598(v24, 1LL);
      unint64_t v26 = sub_100024010((uint64_t)v13);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_27;
      }
      unint64_t v21 = v26;
    }

    if ((v25 & 1) != 0)
    {

      uint64_t v28 = _swiftEmptyDictionarySingleton[7];
      uint64_t v29 = *(void **)(v28 + 8 * v21);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
      *(void *)(v28 + 8 * v21) = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v29 = sub_100088338(0LL, v29[2] + 1LL, 1, v29);
        *(void *)(v28 + 8 * v21) = v29;
      }

      unint64_t v32 = v29[2];
      unint64_t v31 = v29[3];
      __int128 v34 = v51;
      __int128 v33 = v52;
      if (v32 >= v31 >> 1)
      {
        __int128 v35 = sub_100088338((void *)(v31 > 1), v32 + 1, 1, v29);
        __int128 v34 = v51;
        __int128 v33 = v52;
        uint64_t v29 = v35;
        *(void *)(v28 + 8 * v21) = v35;
      }

      uint64_t v2 = v44;
      v29[2] = v32 + 1;
      uint64_t v4 = &v29[12 * v32];
      v4[4] = v45;
      *(_OWORD *)(v4 + 5) = v34;
      *((_BYTE *)v4 + 56) = v46;
      *((_BYTE *)v4 + 57) = v47;
      *((_OWORD *)v4 + 4) = v33;
      *((_OWORD *)v4 + 5) = v48;
      v4[12] = v49;
      v4[13] = v7;
      v4[14] = v50;
      v4[15] = v8;
    }

    else
    {
      uint64_t v36 = sub_1000079A0(&qword_100458700);
      uint64_t v37 = swift_allocObject(v36, 128LL, 7LL);
      *(_OWORD *)(v37 + 16) = xmmword_100372930;
      *(void *)(v37 + 32) = v45;
      *(_OWORD *)(v37 + 40) = v51;
      *(_BYTE *)(v37 + 56) = v46;
      *(_BYTE *)(v37 + 57) = v47;
      *(_OWORD *)(v37 + 64) = v52;
      *(_OWORD *)(v37 + 80) = v48;
      *(void *)(v37 + 96) = v49;
      *(void *)(v37 + 104) = v7;
      *(void *)(v37 + 112) = v50;
      *(void *)(v37 + 120) = v8;
      _swiftEmptyDictionarySingleton[(v21 >> 6) + 8] |= 1LL << v21;
      uint64_t v38 = 8 * v21;
      *(void *)(_swiftEmptyDictionarySingleton[6] + v38) = v13;
      *(void *)(_swiftEmptyDictionarySingleton[7] + v38) = v37;
      uint64_t v39 = _swiftEmptyDictionarySingleton[2];
      BOOL v40 = __OFADD__(v39, 1LL);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_26;
      }
      _swiftEmptyDictionarySingleton[2] = v41;
      uint64_t v2 = v44;
    }

    v3 += 96LL;
    if (!--v1)
    {
      swift_bridgeObjectRelease(v2);
      return _swiftEmptyDictionarySingleton;
    }
  }

  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  uint64_t v43 = sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
  uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v43);
  __break(1u);
  return result;
}

id sub_100014B58()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  if (v2)
  {
    sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
    id v3 = v2;
    Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
    char v5 = static NSObject.== infix(_:_:)(v3, isa);

    if ((v5 & 1) != 0)
    {
    }

    else
    {
      id v6 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
      id v7 = objc_msgSend(v6, "ams_iTunesAccountWithDSID:", v3);

      if (v7) {
        goto LABEL_9;
      }
    }
  }

  uint64_t v8 = *(void **)(v1 + 32);
  if (!v8)
  {
LABEL_8:
    id v7 = 0LL;
LABEL_9:
    char v12 = *(_BYTE *)(v1 + 25);
    if ((v12 & 1) != 0) {
      goto LABEL_10;
    }
LABEL_22:
    if (!v7) {
      return v7;
    }
    goto LABEL_23;
  }

  sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
  id v9 = v8;
  Class v10 = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
  char v11 = static NSObject.== infix(_:_:)(v9, v10);

  if ((v11 & 1) != 0)
  {

    goto LABEL_8;
  }

  id v21 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
  id v7 = objc_msgSend(v21, "ams_iTunesAccountWithDSID:", v9);

  char v12 = *(_BYTE *)(v1 + 25);
  if ((v12 & 1) == 0) {
    goto LABEL_22;
  }
LABEL_10:
  if (!v7)
  {
    id v13 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
    id v14 = objc_msgSend(v13, "ams_iTunesAccounts");

    uint64_t v15 = sub_10001517C(0LL, &qword_100458708, &OBJC_CLASS___ACAccount_ptr);
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v14, v15);

    uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    while (v17)
    {
      uint64_t v18 = 4LL;
      while (1)
      {
        id v19 = (v16 & 0xC000000000000001LL) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v18 - 4, v16)
            : *(id *)(v16 + 8 * v18);
        id v7 = v19;
        uint64_t v20 = v18 - 3;
        if (__OFADD__(v18 - 4, 1LL)) {
          break;
        }
        if (objc_msgSend(v19, "ams_isManagedAppleID"))
        {
          swift_bridgeObjectRelease(v16);
          return v7;
        }

        ++v18;
        if (v20 == v17) {
          goto LABEL_20;
        }
      }

      __break(1u);
LABEL_29:
      if (v16 < 0) {
        uint64_t v23 = v16;
      }
      else {
        uint64_t v23 = v16 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v16);
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter(v23);
      swift_bridgeObjectRelease(v16);
    }

LABEL_20:
    swift_bridgeObjectRelease(v16);
    return 0LL;
  }
    }
  }

  else if (!*((_BYTE *)v1 + 304))
  {
    id v3 = (void *)v1[24];
    static Logger.restore.getter(a1);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    char v5 = static os_log_type_t.default.getter();
    id v6 = os_log_type_enabled(v4, v5);
    id v7 = (void *)v1[24];
    if (v6)
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      id v87 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v8 = 138412290;
      v1[12] = v7;
      id v9 = v7;
      uint64_t v2 = (void **)(v1 + 9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 12, v1 + 13, v8 + 4, v8 + 12);
      *id v87 = v7;

      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%@] User chose to continue", v8, 0xCu);
      Class v10 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v87, 1LL, v10);
      swift_slowDealloc(v87, -1LL, -1LL);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v20 = (void *)v1[24];
    uint64_t v22 = v1[14];
    id v21 = v1[15];
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v1[31] + 8LL);
    v23(v1[34], v1[30]);
    uint64_t v24 = sub_10002B2B8(v22, v21, v20);
    if (v24)
    {
      char v25 = v24;
      unint64_t v26 = (void *)v1[24];
      static Logger.restore.getter(v24);
      char v27 = v26;
      uint64_t v28 = v25;
      uint64_t v29 = v27;
      unint64_t v30 = v28;
      unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      unint64_t v32 = static os_log_type_t.default.getter();
      __int128 v33 = os_log_type_enabled(v31, v32);
      __int128 v34 = v1[33];
      __int128 v35 = v1[30];
      if (v33)
      {
        int64_t v79 = v1 + 10;
        os_log_type_t type = v32;
        uint64_t v36 = v1[29];
        int64_t v80 = v1[27];
        uint64_t v81 = v1[28];
        id v88 = v1[33];
        uint64_t v37 = (void *)v1[24];
        uint64_t v38 = swift_slowAlloc(22LL, -1LL);
        os_log_t log = v31;
        uint64_t v39 = (void *)swift_slowAlloc(8LL, -1LL);
        int64_t v83 = swift_slowAlloc(32LL, -1LL);
        uint64_t v91 = v83;
        *(_DWORD *)uint64_t v38 = 138412546;
        uint64_t v85 = v35;
        uint64_t v86 = v23;
        v1[10] = v37;
        BOOL v40 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 10, v1 + 11, v38 + 4, v38 + 12);
        *uint64_t v39 = v37;

        *(_WORD *)(v38 + 12) = 2080;
        uint64_t v41 = [v30 uniqueIdentifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

        __int128 v42 = sub_100004DD4( &qword_100458F80,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v80, v42);
        uint64_t v45 = v44;
        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v36, v80);
        v1[11] = sub_100088DB4(v43, v45, &v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 11, v1 + 12, v38 + 14, v38 + 22);
        swift_bridgeObjectRelease(v45);

        _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "[%@] Prioritizing coordinator with id: %s",  (uint8_t *)v38,  0x16u);
        char v46 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v39, 1LL, v46);
        swift_slowDealloc(v39, -1LL, -1LL);
        swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v83, -1LL, -1LL);
        swift_slowDealloc(v38, -1LL, -1LL);

        v86(v88, v85);
      }

      else
      {
        __int128 v60 = (void *)v1[24];

        v23(v34, v35);
      }

      *uint64_t v2 = 0LL;
      __int128 v61 = objc_msgSend(v30, "prioritizeWithError:", v2, v79);
      __int128 v62 = *v2;
      if (v61)
      {
        __int128 v63 = v62;
      }

      else
      {
        uint64_t v64 = v62;
        uint64_t v65 = _convertNSErrorToError(_:)(v62);

        swift_willThrow(v66);
        swift_errorRelease(v65);
      }

      goto LABEL_20;
    }
  }

  uint64_t v67 = v1[35];
  swift_bridgeObjectRetain(v1[15]);
  os_unfair_lock_lock((os_unfair_lock_t)(v67 + 24));
  int64_t v68 = *(void *)(v67 + 16);
  uint64_t v70 = v1[34];
  char v69 = v1[35];
  uint64_t v71 = v1[33];
  id v89 = v1[32];
  uint64_t v90 = v1[29];
  unint64_t v72 = (void (*)(void))v1[25];
  id v74 = v1[14];
  uint64_t v73 = v1[15];
  swift_bridgeObjectRetain(v68);
  os_unfair_lock_unlock((os_unfair_lock_t)(v69 + 24));
  uint64_t v91 = v68;
  sub_100067AC0(v74, v73);
  swift_bridgeObjectRelease(v73);
  id v75 = v91;
  unint64_t v76 = swift_task_alloc(32LL);
  *(void *)(v76 + 16) = v75;
  os_unfair_lock_lock((os_unfair_lock_t)(v69 + 24));
  unint64_t v77 = *(void *)(v76 + 16);
  swift_bridgeObjectRelease(*(void *)(v69 + 16));
  *(void *)(v69 + 16) = v77;
  swift_bridgeObjectRetain(v77);
  os_unfair_lock_unlock((os_unfair_lock_t)(v69 + 24));
  swift_bridgeObjectRelease(v75);
  swift_task_dealloc(v76);
  v72(0LL);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  return ((uint64_t (*)(void))v1[1])();
}

        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
          id v7 = sub_100088338(0LL, v7[2] + 1LL, 1, v7);
        }
        unint64_t v30 = v7[2];
        uint64_t v29 = v7[3];
        if (v30 >= v29 >> 1) {
          id v7 = sub_100088338((void *)(v29 > 1), v30 + 1, 1, v7);
        }
        v7[2] = v30 + 1;
        unint64_t v31 = &v7[12 * v30];
        v31[5] = 0LL;
        v31[6] = 0LL;
        v31[4] = 0LL;
        *((_WORD *)v31 + 28) = 0;
        v31[8] = 0LL;
        v31[9] = v12;
        v31[10] = v13;
        v31[11] = 0LL;
        v31[12] = 0LL;
        v31[13] = 0LL;
        v31[14] = 1936748641LL;
        v31[15] = 0xE400000000000000LL;
LABEL_8:
        if (++v6 == v57)
        {
          swift_bridgeObjectRelease(*(void *)(v0 + 88));
          swift_bridgeObjectRelease(v5);
          goto LABEL_54;
        }
      }
    }

    swift_bridgeObjectRelease(*(void *)(v0 + 88));
    __int128 v48 = v5;
LABEL_53:
    swift_bridgeObjectRelease(v48);
    id v7 = _swiftEmptyArrayStorage;
    goto LABEL_54;
  }

  uint64_t v41 = *(void *)(v3 + 16);
  if (!v41)
  {
    __int128 v48 = *(void *)(v0 + 88);
    goto LABEL_53;
  }

  __int128 v42 = v0;
  uint64_t v43 = *(int8x16_t **)(v0 + 88);
  uint64_t v44 = v43 + 2;
  swift_bridgeObjectRetain(v43);
  id v7 = _swiftEmptyArrayStorage;
  do
  {
    __int128 v61 = *v44;
    if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
      id v7 = sub_100088338(0LL, v7[2] + 1LL, 1, v7);
    }
    char v46 = v7[2];
    uint64_t v45 = v7[3];
    if (v46 >= v45 >> 1) {
      id v7 = sub_100088338((void *)(v45 > 1), v46 + 1, 1, v7);
    }
    v7[2] = v46 + 1;
    char v47 = &v7[12 * v46];
    v47[8] = 0LL;
    v47[5] = 0LL;
    v47[6] = 0LL;
    v47[4] = 0LL;
    *((_WORD *)v47 + 28) = 0;
    *(int8x16_t *)(v47 + 9) = vextq_s8(v61, v61, 8uLL);
    v47[11] = 0LL;
    v47[12] = 0LL;
    v47[13] = 0LL;
    v47[14] = 1936748641LL;
    v47[15] = 0xE400000000000000LL;
    ++v44;
    --v41;
  }

  while (v41);
  uint64_t v0 = v42;
  swift_bridgeObjectRelease_n(*(void *)(v42 + 88), 2LL);
LABEL_54:
  uint64_t v49 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void *))(v0 + 8))(v7);
}

  uint64_t v16 = 0LL;
  uint64_t v15 = 0LL;
LABEL_21:
  id v21 = (void *)v69[12];
  uint64_t v22 = swift_bridgeObjectRelease_n(v2, 2LL);
  static Logger.updates.getter(v22);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v21);
  uint64_t v24 = static os_log_type_t.default.getter();
  char v25 = os_log_type_enabled(v23, v24);
  unint64_t v26 = (char *)v69[12];
  if (v25)
  {
    char v27 = swift_slowAlloc(32LL, -1LL);
    BOOL v66 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)char v27 = 138412802;
    uint64_t v28 = *(os_log_s **)&v26[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    *(v68 - 3) = v28;
    uint64_t v29 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v68 - 3, v68 - 2, v27 + 4, v27 + 12);
    *BOOL v66 = v28;

    *(_WORD *)(v27 + 12) = 2048;
    *(v68 - 2) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v68 - 2, v68 - 1, v27 + 14, v27 + 22);
    *(_WORD *)(v27 + 22) = 2048;
    *(v68 - 1) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v68 - 1, v68, v27 + 24, v27 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "[%@] Returning %ld available and %ld recent update(s)",  (uint8_t *)v27,  0x20u);
    unint64_t v30 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v66, 1LL, v30);
    swift_slowDealloc(v66, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {

    uint64_t v23 = *v68;
  }

  unint64_t v32 = v69[17];
  unint64_t v31 = v69[18];
  __int128 v33 = v69[16];

  __int128 v34 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
  __int128 v35 = v69;
  v34(v31, v33);
  uint64_t v36 = v69[8];
  if ((unint64_t)v36 >> 62)
  {
    if (v36 < 0) {
      __int128 v52 = v69[8];
    }
    else {
      __int128 v52 = v36 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v69[8], 2LL);
    uint64_t v37 = _CocoaArrayWrapper.endIndex.getter(v52);
    if (v37) {
      goto LABEL_26;
    }
LABEL_54:
    swift_bridgeObjectRelease(v36);
    char v46 = _swiftEmptyArrayStorage;
    goto LABEL_55;
  }

  uint64_t v37 = *(void *)((v36 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain_n(v36, 2LL);
  if (!v37) {
    goto LABEL_54;
  }
LABEL_26:
  uint64_t v70 = _swiftEmptyArrayStorage;
  uint64_t result = sub_10007F7F4(0, v37 & ~(v37 >> 63), 0);
  if (v37 < 0)
  {
LABEL_64:
    __break(1u);
    return result;
  }

  for (i = 0LL; i != v37; ++i)
  {
    if ((v36 & 0xC000000000000001LL) != 0) {
      uint64_t v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v36);
    }
    else {
      uint64_t v39 = *(id *)(v36 + 8 * i + 32);
    }
    BOOL v40 = v39;
    uint64_t v41 = objc_msgSend(v39, "releaseDate", v66);
    __int128 v42 = v69[15];
    if (v41)
    {
      uint64_t v43 = v41;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v41);

      uint64_t v44 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v42, 0LL, 1LL, v44);
    }

    else
    {
      uint64_t v45 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL))(v42, 1LL, 1LL, v45);
    }

    sub_100015240(v69[15], (uint64_t *)&unk_100459410);

    char v46 = v70;
    if ((swift_isUniquelyReferenced_nonNull_native(v70) & 1) == 0)
    {
      sub_10007F7F4(0, v70[2] + 1LL, 1);
      char v46 = v70;
    }

    __int128 v48 = v46[2];
    char v47 = v46[3];
    uint64_t v49 = v48 + 1;
    if (v48 >= v47 >> 1)
    {
      sub_10007F7F4(v47 > 1, v48 + 1, 1);
      char v46 = v70;
    }

    v46[2] = v49;
  }

  swift_bridgeObjectRelease(v36);
LABEL_55:
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v46);
  sub_100049DE4(v36, (unint64_t)v46);
  uint64_t v54 = v53;
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v46);
  uint64_t v70 = v54;
  sub_100048E28(&v70);
  if (v67) {
    return swift_release(v70);
  }
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v46);
  unint64_t v55 = v70;
  unint64_t v56 = v70[2];
  if (v56)
  {
    uint64_t v70 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v56);
    uint64_t v57 = 0LL;
    do
    {
      unint64_t v58 = v57 + 1;
      __int128 v59 = (id)v55[v57 + 4];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      __int128 v60 = v70[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v60);
      __int128 v61 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v59);
      specialized ContiguousArray._endMutation()(v61);
      uint64_t v57 = v58;
    }

    while (v56 != v58);
    __int128 v62 = v70;
    swift_release(v55);
    __int128 v35 = v69;
  }

  else
  {
    swift_release(v70);
    __int128 v62 = _swiftEmptyArrayStorage;
  }

  uint64_t v64 = v35[18];
  __int128 v63 = v35[19];
  uint64_t v65 = v35[15];
  swift_bridgeObjectRelease(v35[8]);
  swift_release(v63);
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  return ((uint64_t (*)(void *))v35[1])(v62);
}

      v9[2](v9, 1LL, 0LL);
      goto LABEL_21;
    }

    if (v28)
    {
      unint64_t v31 = objc_getProperty(self, v29, 90LL, 1);
      *(_DWORD *)buf = 138412290;
      __int128 v42 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[%@] Prompting user for authentication challenge",  buf,  0xCu);
    }

    unint64_t v32 = sub_100291830(objc_alloc(&OBJC_CLASS___AuthenticationChallenge), v8);
    __int128 v33 = sub_10022280C((uint64_t)&OBJC_CLASS___AuthenticationChallengeDialogRequest, v32);
    __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    __int128 v35 = -[AMSSystemAlertDialogTask initWithRequest:]( objc_alloc(&OBJC_CLASS___AMSSystemAlertDialogTask),  "initWithRequest:",  v34);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(-[AMSSystemAlertDialogTask present](v35, "present"));
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472LL;
    v38[2] = sub_1001C0280;
    v38[3] = &unk_1003EB300;
    v38[4] = self;
    uint64_t v39 = v32;
    BOOL v40 = v9;
    uint64_t v37 = v32;
    [v36 addFinishBlock:v38];
  }
    }

  return v9;
}

        if (v13 | v12) {
          unint64_t v26 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find account with downloader: %@ purchaser: %@",  v13,  v12,  v35);
        }
        else {
          unint64_t v26 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find account with downloader: %@ purchaser: %@ alt-dsid: %@",  0LL,  0LL,  v14);
        }
        char v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (a4)
        {
          uint64_t v28 = ASDErrorWithTitleAndMessage(ASDErrorDomain, 530LL, v27, 0LL);
          char v11 = 0LL;
          *a4 = (id)objc_claimAutoreleasedReturnValue(v28);
        }

        else
        {
          char v11 = 0LL;
        }
    }

    else
    {
      uint64_t v4 = 0LL;
    }
  }

  return v4;
}
          }
}

  return v10;
}

    [*(id *)(a1 + 8) setLength:v19];
  }

  else
  {
    Class v10 = 0LL;
  }

  return v10;
}
}

      uint64_t v29 = v20;
      unint64_t v30 = 0LL;
      uint64_t v20 = v29;
      goto LABEL_21;
    }
  }

  unint64_t v31 = ASDLogHandleForCategory(14LL);
  unint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412546;
    uint64_t v54 = v11;
    unint64_t v55 = 2048;
    unint64_t v56 = [v9 length];
    _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "[%@] Writing receipt failed - invalid or missing data (%{iec-bytes}lu)",  buf,  0x16u);
  }

  __int128 v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Invalid or missing receipt data (%lu bytes)",  [v9 length]));
  __int128 v34 = ASDErrorWithDescription(ASDErrorDomain, 507LL, v33);
  __int128 v35 = (id)objc_claimAutoreleasedReturnValue(v34);

  unint64_t v30 = 0LL;
  if (a5)
  {
LABEL_22:
    if ((v30 & 1) == 0) {
      *a5 = v35;
    }
  }

    uint64_t v29 = [v38 count];
    unint64_t v30 = [obj count];
    if (a3) {
      *a3 = 0LL;
    }
    if (v29 == v30) {
      unint64_t v31 = v38;
    }
    else {
      unint64_t v31 = 0LL;
    }
    a1 = v31;

    uint64_t v4 = v35;
  }

  return a1;
}

    __int128 v34 = [v42 count];
    if (v34 == [obj count]) {
      __int128 v35 = v42;
    }
    else {
      __int128 v35 = 0LL;
    }
    uint64_t v36 = v35;
  }

  else
  {
    uint64_t v36 = 0LL;
  }

  return v36;
}

uint64_t sub_100014E34(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  return swift_task_switch(sub_100014E50, 0LL, 0LL);
}

void sub_100014E50()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    unint64_t v3 = 0LL;
    uint64_t v4 = (uint64_t *)(v1 + 104);
    while (1)
    {
      uint64_t v5 = *v4;
      if (*v4) {
        break;
      }
      ++v3;
      v4 += 12;
      if (v2 == v3) {
        goto LABEL_5;
      }
    }

    if (v3 >= v2)
    {
      __break(1u);
    }

    else
    {
      uint64_t v7 = *(v4 - 1);
      uint64_t v8 = (void (*)(uint64_t, uint64_t))v0[1];
      swift_bridgeObjectRetain(v5);
      v8(v7, v5);
    }
  }

  else
  {
LABEL_5:
    id v6 = (void *)swift_task_alloc(dword_1004585D4);
    v0[5] = v6;
    *id v6 = v0;
    v6[1] = sub_100014F0C;
    sub_10000CF90(v0[3]);
  }

uint64_t sub_100014F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 40));
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_100014F64()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck_cachedStorefrontMappingURL;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0
                                      + OBJC_IVAR____TtC9appstored31MediaAPIUpdateAvailabilityCheck____lazy_storage___numericStorefrontToCountryCodeMapping));
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100014FEC()
{
  return type metadata accessor for MediaAPIUpdateAvailabilityCheck(0LL);
}

uint64_t type metadata accessor for MediaAPIUpdateAvailabilityCheck(uint64_t a1)
{
  uint64_t result = qword_1004585B8;
  if (!qword_1004585B8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for MediaAPIUpdateAvailabilityCheck);
  }
  return result;
}

uint64_t sub_100015030(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[5] = *(void *)(result - 8) + 64LL;
    v4[6] = &unk_100372A90;
    v4[7] = &unk_100372AA8;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_1000150D4()
{
  unint64_t result = qword_10045AC40;
  if (!qword_10045AC40)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10045AC40);
  }

  return result;
}

void *sub_100015118(void *a1)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = (void *)a1[2];
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[7];
  uint64_t v6 = a1[11];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v2);
  id v7 = v3;
  id v8 = v4;
  id v9 = v5;
  return a1;
}

uint64_t sub_10001517C(uint64_t a1, unint64_t *a2, void *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t v5 = objc_opt_self(*a3);
    uint64_t result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }

  return result;
}

unint64_t sub_1000151B4()
{
  unint64_t result = qword_100458720;
  if (!qword_100458720)
  {
    unint64_t result = swift_getWitnessTable(&unk_100372CB4, &type metadata for MediaAPIUpdateRequest);
    atomic_store(result, (unint64_t *)&qword_100458720);
  }

  return result;
}

uint64_t sub_1000151F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0((uint64_t *)&unk_1004594B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100015240(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1000079A0(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8LL))(a1, v3);
  return a1;
}

uint64_t sub_10001527C(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_10001528C(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2( 255LL,  (char *)a1 + (int)result,  -(result >> 32),  0LL,  0LL);
    *a1 = result;
  }

  return result;
}

uint64_t sub_1000152D0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_1000152E0(id *a1)
{
}

uint64_t sub_1000152E8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000152F8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100015318(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100015328(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

_OWORD *sub_100015330(_OWORD *a1, _OWORD *a2)
{
  __int128 v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100015340(void *a1)
{
  uint64_t v1 = *(void *)(a1[3] - 8LL);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0) {
    return swift_release(*a1);
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100015360(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_10001528C(&qword_100458728);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t destroy for UpdateBatch(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for UpdateBatch(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  id v6 = v3;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for UpdateBatch(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v6 = v5;

  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for UpdateBatch(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for UpdateBatch(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateBatch(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateBatch(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UpdateBatch()
{
  return &type metadata for UpdateBatch;
}

id sub_1000156DC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UpdatesDatabaseMergeResult();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for UpdatesDatabaseMergeResult()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored26UpdatesDatabaseMergeResult);
}

ValueMetadata *type metadata accessor for AppVersion()
{
  return &type metadata for AppVersion;
}

uint64_t destroy for UpdateEligibleApp(uint64_t a1)
{
  swift_bridgeObjectRelease(*(void *)(a1 + 72));
  return swift_bridgeObjectRelease(*(void *)(a1 + 88));
}

uint64_t initializeWithCopy for UpdateEligibleApp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  uint64_t v5 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v7 = *(void **)(a2 + 56);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = v7;
  *(void *)(a1 + 64) = v6;
  uint64_t v9 = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v9;
  *(void *)(a1 + 80) = v8;
  uint64_t v10 = *(void *)(a2 + 88);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRetain(v3);
  id v11 = v4;
  id v12 = v5;
  id v13 = v7;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t assignWithCopy for UpdateEligibleApp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v7 = *(void **)(a2 + 16);
  *(void *)(a1 + 16) = v7;
  id v8 = v7;

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void **)(a2 + 32);
  *(void *)(a1 + 32) = v10;
  id v11 = v10;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  id v12 = *(void **)(a1 + 56);
  id v13 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v13;
  id v14 = v13;

  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v15 = *(void *)(a2 + 72);
  uint64_t v16 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  uint64_t v17 = *(void *)(a2 + 88);
  uint64_t v18 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  return a1;
}

__n128 initializeWithTake for UpdateEligibleApp(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t assignWithTake for UpdateEligibleApp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 8));
  __int128 v4 = *(void **)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);

  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  __int128 v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v6 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v10 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateEligibleApp(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UpdateEligibleApp(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0LL;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 96) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 88) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for UpdateEligibleApp()
{
  return &type metadata for UpdateEligibleApp;
}

uint64_t sub_100015A74(char *a1, unsigned __int8 *a2)
{
  return sub_1000660A0(*a1, *a2);
}

Swift::Int sub_100015A80()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v6);
  uint64_t v2 = 1635018093LL;
  if (v1 != 1) {
    uint64_t v2 = 1701869940LL;
  }
  if (v1) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 25705LL;
  }
  if (v1) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE200000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100015B04(uint64_t a1)
{
  uint64_t v2 = 1635018093LL;
  if (*v1 != 1) {
    uint64_t v2 = 1701869940LL;
  }
  if (*v1) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 25705LL;
  }
  if (*v1) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE200000000000000LL;
  }
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_100015B64()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v6);
  uint64_t v2 = 1635018093LL;
  if (v1 != 1) {
    uint64_t v2 = 1701869940LL;
  }
  if (v1) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 25705LL;
  }
  if (v1) {
    unint64_t v4 = 0xE400000000000000LL;
  }
  else {
    unint64_t v4 = 0xE200000000000000LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

unint64_t sub_100015BE4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100016E68(*a1);
  *a2 = result;
  return result;
}

void sub_100015C10(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE200000000000000LL;
  uint64_t v4 = 1635018093LL;
  if (v2 != 1) {
    uint64_t v4 = 1701869940LL;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 25705LL;
  }
  if (!v5) {
    unint64_t v3 = 0xE400000000000000LL;
  }
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_100015C54()
{
  uint64_t v1 = 1635018093LL;
  if (*v0 != 1) {
    uint64_t v1 = 1701869940LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 25705LL;
  }
}

unint64_t sub_100015C94@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100016E68(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100015CB8()
{
  return 0LL;
}

void sub_100015CC4(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_100015CD0(uint64_t a1)
{
  unint64_t v2 = sub_100015F74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100015CF8(uint64_t a1)
{
  unint64_t v2 = sub_100015F74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100015D20(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000079A0(&qword_100458790);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100015F50(a1, v9);
  unint64_t v11 = sub_100015F74();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for UpdateEligibleApp.CodingKeys,  &type metadata for UpdateEligibleApp.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = sub_1000079A0(&qword_1004587A0);
  uint64_t inited = swift_initStackObject(v12, v25);
  *(_OWORD *)(inited + 16) = xmmword_100372930;
  *(void *)(inited + 32) = 0xD000000000000012LL;
  *(void *)(inited + 40) = 0x8000000100342920LL;
  unint64_t v24 = v3[5];
  *(void *)(inited + 48) = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  *(void *)(inited + 56) = v14;
  unint64_t v15 = sub_10001DCA0(inited);
  unint64_t v24 = v15;
  HIBYTE(v23) = 1;
  uint64_t v16 = sub_1000079A0(&qword_1004587A8);
  unint64_t v17 = sub_100015FB8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, (char *)&v23 + 7, v5, v16, v17);
  swift_bridgeObjectRelease(v15);
  if (!v2)
  {
    unint64_t v24 = v3[6];
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
    uint64_t v21 = v20;
    LOBYTE(v24) = 0;
    KeyedEncodingContainer.encode(_:forKey:)(v19);
    swift_bridgeObjectRelease(v21);
    uint64_t v22 = v3[10];
    LOBYTE(v24) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v22);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100015F3C(void *a1)
{
  return sub_100015D20(a1);
}

void *sub_100015F50(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80LL) + 16LL) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80LL)));
  return result;
}

unint64_t sub_100015F74()
{
  unint64_t result = qword_100458798;
  if (!qword_100458798)
  {
    unint64_t result = swift_getWitnessTable(&unk_100372CDC, &type metadata for UpdateEligibleApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100458798);
  }

  return result;
}

unint64_t sub_100015FB8()
{
  unint64_t result = qword_1004587B0;
  if (!qword_1004587B0)
  {
    uint64_t v1 = sub_10001528C(&qword_1004587A8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1004587B0);
  }

  return result;
}

BOOL sub_100016014(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100016028()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001606C()
{
}

Swift::Int sub_100016094()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000160D4(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000079A0(&qword_1004587E0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100015F50(a1, v9);
  unint64_t v11 = sub_100016EB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MediaAPIUpdateRequest.CodingKeys,  &type metadata for MediaAPIUpdateRequest.CodingKeys,  v11,  v9,  v10);
  uint64_t v19 = *v3;
  HIBYTE(v18) = 0;
  uint64_t v12 = sub_1000079A0(&qword_1004587F0);
  unint64_t v13 = sub_100016EF4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, (char *)&v18 + 7, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = v3[1];
    BYTE6(v18) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14);
    uint64_t v15 = v3[3];
    uint64_t v16 = v3[4];
    BYTE5(v18) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, (char *)&v18 + 5, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100016234()
{
  uint64_t v1 = 1684632935LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x636E7973626BLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1635017060LL;
  }
}

uint64_t sub_10001627C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000171D0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000162A0(uint64_t a1)
{
  unint64_t v2 = sub_100016EB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000162C8(uint64_t a1)
{
  unint64_t v2 = sub_100016EB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000162F0(void *a1)
{
  return sub_1000160D4(a1);
}

uint64_t sub_100016304(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 192) = a1;
  *(void *)(v2 + 200) = a2;
  return swift_task_switch(sub_10001631C, 0LL, 0LL);
}

uint64_t sub_10001631C()
{
  uint64_t v1 = *(void *)(v0 + 192);
  if (!v1) {
    goto LABEL_14;
  }
  if (!*(void *)(v1 + 16) || (unint64_t v2 = sub_100023F7C(0x73746C75736572LL, 0xE700000000000000LL), (v3 & 1) == 0))
  {
    *(_OWORD *)(v0 + 16) = 0u;
    *(_OWORD *)(v0 + 32) = 0u;
    swift_bridgeObjectRelease(v1);
    goto LABEL_13;
  }

  sub_100016B10(*(void *)(v1 + 56) + 32 * v2, v0 + 16);
  swift_bridgeObjectRelease(v1);
  if (!*(void *)(v0 + 40))
  {
LABEL_13:
    sub_100016AD0(v0 + 16);
    goto LABEL_14;
  }

  uint64_t v4 = sub_1000079A0(&qword_100459DC0);
  if ((swift_dynamicCast(v0 + 184, v0 + 16, (char *)&type metadata for Any + 8, v4, 6LL) & 1) == 0)
  {
LABEL_14:

    uint64_t v12 = _swiftEmptyArrayStorage;
    return (*(uint64_t (**)(void *, void *))(v0 + 8))(_swiftEmptyArrayStorage, v12);
  }

  uint64_t v5 = *(void *)(v0 + 184);
  if (!*(void *)(v5 + 16)
    || (unint64_t v6 = sub_100023F7C(0xD000000000000010LL, 0x80000001003429C0LL), (v7 & 1) == 0)
    || (sub_100016B10(*(void *)(v5 + 56) + 32 * v6, v0 + 80),
        uint64_t v8 = sub_1000079A0(&qword_1004587C0),
        (swift_dynamicCast(v0 + 160, v0 + 80, (char *)&type metadata for Any + 8, v8, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease(v5);
    goto LABEL_14;
  }

  uint64_t v9 = *(void *)(v0 + 160);
  *(void *)(v0 + 208) = v9;
  if (*(void *)(v5 + 16) && (unint64_t v10 = sub_100023F7C(0xD00000000000001CLL, 0x80000001003429E0LL), (v11 & 1) != 0))
  {
    sub_100016B10(*(void *)(v5 + 56) + 32 * v10, v0 + 112);
  }

  else
  {
    *(_OWORD *)(v0 + 112) = 0u;
    *(_OWORD *)(v0 + 128) = 0u;
  }

  swift_bridgeObjectRelease(v5);
  if (*(void *)(v0 + 136))
  {
    uint64_t v14 = (void *)(v0 + 176);
    if ((swift_dynamicCast(v0 + 176, v0 + 112, (char *)&type metadata for Any + 8, v8, 6LL) & 1) != 0)
    {
      uint64_t v15 = *v14;
      uint64_t v16 = *(void *)(*v14 + 16LL);
      if (v16)
      {
        uint64_t v36 = v9;
        uint64_t v17 = 0LL;
        uint64_t v18 = v0 + 144;
        uint64_t v19 = (_OWORD *)(v0 + 48);
        uint64_t v20 = _swiftEmptyArrayStorage;
        uint64_t v21 = (char *)&type metadata for Any + 8;
        while (1)
        {
          uint64_t v22 = *(void *)(v15 + 8 * v17 + 32);
          if (*(void *)(v22 + 16))
          {
            swift_bridgeObjectRetain(*(void *)(v15 + 8 * v17 + 32));
            unint64_t v23 = sub_100023F7C(25705LL, 0xE200000000000000LL);
            if ((v24 & 1) != 0)
            {
              sub_100016B10(*(void *)(v22 + 56) + 32 * v23, v0 + 48);
            }

            else
            {
              *uint64_t v19 = 0u;
              *(_OWORD *)(v0 + 64) = 0u;
            }

            swift_bridgeObjectRelease(v22);
            if (*(void *)(v0 + 72))
            {
              if ((swift_dynamicCast(v18, v0 + 48, v21, &type metadata for String, 6LL) & 1) != 0)
              {
                uint64_t v25 = *(void *)(v0 + 144);
                uint64_t v26 = *(void *)(v0 + 152);
                if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0) {
                  uint64_t v20 = sub_100088568(0LL, v20[2] + 1LL, 1, v20);
                }
                unint64_t v28 = v20[2];
                unint64_t v27 = v20[3];
                if (v28 >= v27 >> 1) {
                  uint64_t v20 = sub_100088568((void *)(v27 > 1), v28 + 1, 1, v20);
                }
                v20[2] = v28 + 1;
                uint64_t v29 = &v20[2 * v28];
                v29[4] = v25;
                v29[5] = v26;
                uint64_t v21 = (char *)&type metadata for Any + 8;
                uint64_t v18 = v0 + 144;
              }

              goto LABEL_24;
            }
          }

          else
          {
            *uint64_t v19 = 0u;
            *(_OWORD *)(v0 + 64) = 0u;
          }

          sub_100016AD0(v0 + 48);
LABEL_24:
          if (v16 == ++v17)
          {
            swift_bridgeObjectRelease(v15);
            uint64_t v9 = v36;
            goto LABEL_40;
          }
        }
      }

      swift_bridgeObjectRelease(*v14);
    }
  }

  else
  {
    sub_100016AD0(v0 + 112);
  }

  uint64_t v20 = _swiftEmptyArrayStorage;
LABEL_40:
  *(void *)(v0 + 216) = v20;
  *(void *)(v0 + 168) = _swiftEmptyArrayStorage;
  uint64_t v30 = *(void *)(v9 + 16);
  *(void *)(v0 + 224) = v30;
  if (!v30)
  {

    swift_bridgeObjectRelease(v9);
    uint64_t v12 = *(void **)(v0 + 216);
    return (*(uint64_t (**)(void *, void *))(v0 + 8))(_swiftEmptyArrayStorage, v12);
  }

  *(void *)(v0 + 232) = 0LL;
  unint64_t v31 = *(void **)(v0 + 200);
  uint64_t v32 = *(void *)(*(void *)(v0 + 208) + 32LL);
  objc_allocWithZone((Class)type metadata accessor for MediaAPIUpdate());
  uint64_t v33 = dword_10045A2FC;
  swift_bridgeObjectRetain(v32);
  id v34 = v31;
  __int128 v35 = (void *)swift_task_alloc(v33);
  *(void *)(v0 + 240) = v35;
  *__int128 v35 = v0;
  v35[1] = sub_100016738;
  return sub_100071A38(v32, *(void *)(v0 + 200));
}

uint64_t sub_100016738(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240LL);
  *(void *)(*(void *)v1 + 248LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100016794, 0LL, 0LL);
}

uint64_t sub_100016794()
{
  uint64_t v1 = *(void **)(v0 + 248);
  if (v1)
  {
    id v2 = v1;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v2);
    unint64_t v4 = *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v3 = *(void *)((*(void *)(v0 + 168) & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v4 >= v3 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1LL);
    }
    uint64_t v5 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v4, v2);
    specialized Array._endMutation()(v5);
  }

  uint64_t v6 = *(void *)(v0 + 232) + 1LL;
  if (v6 == *(void *)(v0 + 224))
  {
    uint64_t v7 = *(void *)(v0 + 208);

    swift_bridgeObjectRelease(v7);
    return (*(uint64_t (**)(void, void))(v0 + 8))(*(void *)(v0 + 168), *(void *)(v0 + 216));
  }

  else
  {
    *(void *)(v0 + 232) = v6;
    uint64_t v9 = *(void **)(v0 + 200);
    uint64_t v10 = *(void *)(*(void *)(v0 + 208) + 8 * v6 + 32);
    objc_allocWithZone((Class)type metadata accessor for MediaAPIUpdate());
    uint64_t v11 = dword_10045A2FC;
    swift_bridgeObjectRetain(v10);
    id v12 = v9;
    unint64_t v13 = (void *)swift_task_alloc(v11);
    *(void *)(v0 + 240) = v13;
    *unint64_t v13 = v0;
    v13[1] = sub_100016738;
    return sub_100071A38(v10, *(void *)(v0 + 200));
  }

id sub_1000168B4@<X0>(void *a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  id v8 = [a1 bundleID];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v26 = v11;
  }

  else
  {
    uint64_t v10 = 0LL;
    uint64_t v26 = 0LL;
  }

  id v12 = [a1 storeMetadata];
  unint64_t v13 = v12;
  if (v12)
  {
    id v14 = [v12 storefrontCountryCode];

    if (v14)
    {
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      unint64_t v13 = v16;
    }

    else
    {
      uint64_t v15 = 0LL;
      unint64_t v13 = 0LL;
    }
  }

  else
  {
    uint64_t v15 = 0LL;
  }

  unint64_t v17 = (unint64_t)[a1 storeItemID];
  if ((v17 & 0x8000000000000000LL) == 0)
  {
    unint64_t v18 = v17;
    uint64_t v25 = v13;
    int v19 = a3 & 1;
    id v20 = [a1 storefront];
    unsigned __int8 v21 = [a1 isManagedAccount];
    uint64_t v22 = v10;
    if (v19)
    {
      a2 = (unint64_t)[a1 storeExternalVersionID];
      if ((a2 & 0x8000000000000000LL) == 0) {
        goto LABEL_12;
      }
    }

    else if ((a2 & 0x8000000000000000LL) == 0)
    {
LABEL_12:
      id v23 = [a1 downloaderDSID];
      id result = [a1 purchaserDSID];
      *(void *)a4 = v22;
      *(void *)(a4 + 8) = v26;
      *(void *)(a4 + 16) = v23;
      *(_BYTE *)(a4 + 24) = v19 ^ 1;
      *(_BYTE *)(a4 + 25) = v21;
      *(void *)(a4 + 32) = result;
      *(void *)(a4 + 40) = a2;
      *(void *)(a4 + 48) = v18;
      *(void *)(a4 + 56) = v20;
      *(void *)(a4 + 64) = v15;
      *(void *)(a4 + 72) = v25;
      *(void *)(a4 + 80) = 1936748641LL;
      *(void *)(a4 + 88) = 0xE400000000000000LL;
      return result;
    }
  }

  id result = (id)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_100016AD0(uint64_t a1)
{
  uint64_t v2 = sub_1000079A0((uint64_t *)&unk_1004594B0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100016B10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t destroy for MediaAPIUpdateRequest(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t *initializeWithCopy for MediaAPIUpdateRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v6 = a2[2];
  uint64_t v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  uint64_t v7 = a2[4];
  a1[4] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for MediaAPIUpdateRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for MediaAPIUpdateRequest(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for MediaAPIUpdateRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = a2[2];
  uint64_t v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = a2[4];
  uint64_t v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MediaAPIUpdateRequest(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MediaAPIUpdateRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MediaAPIUpdateRequest()
{
  return &type metadata for MediaAPIUpdateRequest;
}

_BYTE *initializeBufferWithCopyOfBuffer for UpdateEligibleApp.CodingKeys(_BYTE *result, _BYTE *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t sub_100016D70(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100016D78(_BYTE *result, char a2)
{
  *__n128 result = a2;
  return result;
}

ValueMetadata *type metadata accessor for UpdateEligibleApp.CodingKeys()
{
  return &type metadata for UpdateEligibleApp.CodingKeys;
}

unint64_t sub_100016D94()
{
  unint64_t result = qword_1004587C8;
  if (!qword_1004587C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100372C8C, &type metadata for UpdateEligibleApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004587C8);
  }

  return result;
}

unint64_t sub_100016DDC()
{
  unint64_t result = qword_1004587D0;
  if (!qword_1004587D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100372BC4, &type metadata for UpdateEligibleApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004587D0);
  }

  return result;
}

unint64_t sub_100016E24()
{
  unint64_t result = qword_1004587D8;
  if (!qword_1004587D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100372BEC, &type metadata for UpdateEligibleApp.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004587D8);
  }

  return result;
}

unint64_t sub_100016E68(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DB0C0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_100016EB0()
{
  unint64_t result = qword_1004587E8;
  if (!qword_1004587E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100372DE4, &type metadata for MediaAPIUpdateRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004587E8);
  }

  return result;
}

unint64_t sub_100016EF4()
{
  unint64_t result = qword_1004587F8;
  if (!qword_1004587F8)
  {
    uint64_t v1 = sub_10001528C(&qword_1004587F0);
    sub_100016F58();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1004587F8);
  }

  return result;
}

unint64_t sub_100016F58()
{
  unint64_t result = qword_100458800;
  if (!qword_100458800)
  {
    unint64_t result = swift_getWitnessTable(&unk_100372B74, &type metadata for UpdateEligibleApp);
    atomic_store(result, (unint64_t *)&qword_100458800);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for SystemAlert.Response(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  if (v6 >= 2) {
    BOOL v7 = ((v6 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    BOOL v7 = -2;
  }
  if (v7 < 0) {
    BOOL v7 = -1;
  }
  return (v7 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x15;
  int v8 = v6 - 21;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x16;
  int v8 = v6 - 22;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xA;
  int v8 = v6 - 10;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v8 = v6 - 5;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 7;
  int v8 = v6 - 7;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

  return v5;
}

LABEL_18:
  return v15;
}

  return v10;
}

  CFRelease(Mutable);

  return v16;
}

        *(_BYTE *)(*(void *)(v76[6] + 8) + 24LL) = 1;
        goto LABEL_18;
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v16 = sub_1001F7970(v8);
        unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        *(_DWORD *)buf = 138543362;
        *(void *)&buf[4] = v17;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "Asset Pack [%{public}@] is on the device.",  buf,  0xCu);
      }

      -[NSMutableArray addObject:](v72, "addObject:", v8);
      a2 -= v11 & ~(v11 >> 63);
    }

    uint64_t v5 = [v4 countByEnumeratingWithState:&v86 objects:v104 count:16];
    if (v5) {
      continue;
    }
    break;
  }

        unint64_t v28 = sub_10020FAD4((uint64_t)&OBJC_CLASS___RestoreManager);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Retry user-initiated following distributor installation"));
        sub_100210B70((uint64_t)v29, v30, 0LL, 1);

        unint64_t v31 = sub_1002FD818((uint64_t)&OBJC_CLASS___AppInstallPredicates);
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        uint64_t v33 = sub_1002182C4(0LL, v32);
        id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
        if ([v34 count] == (id)1)
        {
          __int128 v35 = ASDLogHandleForCategory(29LL);
          uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v17 firstObject]);
            *(_DWORD *)buf = 138412546;
            uint64_t v50 = v48;
            __int128 v51 = 2114;
            __int128 v52 = v37;
            uint64_t v38 = "[%@] Updated the bootstrap state of %{public}@ to user initiated";
            uint64_t v39 = v36;
            BOOL v40 = 22;
LABEL_23:
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v38, buf, v40);
          }
        }

        else
        {
          uint64_t v41 = [v34 count];
          __int128 v42 = ASDLogHandleForCategory(29LL);
          uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
          uint64_t v43 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
          if ((unint64_t)v41 < 2)
          {
            if (v43)
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v50 = v48;
              _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "[%@] No distributor dependent background apps in found",  buf,  0xCu);
            }

            goto LABEL_26;
          }

          if (v43)
          {
            uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v17 firstObject]);
            uint64_t v44 = [v17 count];
            *(_DWORD *)buf = 138412802;
            uint64_t v50 = v48;
            __int128 v51 = 2114;
            __int128 v52 = v37;
            char v53 = 2048;
            uint64_t v54 = v44;
            uint64_t v38 = "[%@] Updated the bootstrap state of %{public}@ and %ld background app(s)";
            uint64_t v39 = v36;
            BOOL v40 = 32;
            goto LABEL_23;
          }
        }
}

    int v19 = ASDLogHandleForCategory(9LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138543618;
      uint64_t v25 = (id)objc_opt_class(a1, v20);
      uint64_t v26 = 2114;
      unint64_t v27 = (os_log_s *)v5;
      unsigned __int8 v21 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "[%{public}@] Nothing to push for volume: %{public}@",  buf,  0x16u);
    }

    goto LABEL_19;
  }

          unsigned __int8 v21 = (void *)objc_claimAutoreleasedReturnValue([v32 stringByAppendingPathComponent:v16]);
          if ((v18 & 1) != 0)
          {
            uint64_t v22 = ASDLogHandleForCategory(14LL);
            id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 138543362;
              uint64_t v44 = v21;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "Keeping allow listed file: %{public}@",  buf,  0xCu);
            }
          }

          else
          {
            char v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
            uint64_t v33 = 0LL;
            uint64_t v25 = [v24 removeItemAtPath:v21 error:&v33];
            id v23 = (os_log_s *)v33;

            uint64_t v26 = ASDLogHandleForCategory(14LL);
            unint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
            unint64_t v28 = v27;
            if (v25)
            {
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138543362;
                uint64_t v44 = v21;
                _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Deleted file that didn't match allow list: %{public}@",  buf,  0xCu);
              }
            }

            else if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138543618;
              uint64_t v44 = v21;
              uint64_t v45 = 2114;
              char v46 = v23;
              _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "Failed to delete file that didn't match allow list: %{public}@ error: %{public}@",  buf,  0x16u);
            }
          }
        }

        unint64_t v13 = [v11 countByEnumeratingWithState:&v38 objects:v48 count:16];
      }

      while (v13);
      uint64_t v10 = v30;
      uint64_t v9 = v31;
    }
  }

  else
  {
    uint64_t v29 = ASDLogHandleForCategory(14LL);
    uint64_t v11 = (id)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 v48 = 138543618;
      uint64_t v49 = v32;
      uint64_t v50 = 2114;
      __int128 v51 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v11,  OS_LOG_TYPE_ERROR,  "Failed to fetch contents of: %{public}@ error: %{public}@",  v48,  0x16u);
    }
  }
}
}

      uint64_t v25 = *(void *)(a1 + 64);
LABEL_23:
      ++*(void *)(*(void *)(v25 + 8) + 24LL);

      goto LABEL_24;
    }
  }

  if (*(_BYTE *)(a1 + 80))
  {
    if (v7 == (id)4)
    {
      if (([*(id *)(a1 + 56) containsObject:v5] & 1) == 0)
      {
        uint64_t v26 = ASDLogHandleForCategory(6LL);
        int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = 138543618;
          unint64_t v31 = v5;
          uint64_t v32 = 2048;
          uint64_t v33 = 4LL;
          id v20 = "Updating purchased state for update with bundleID: %{public}@ currentState: %ld";
          goto LABEL_21;
        }

  redownloadParams = self->_redownloadParams;
  if (redownloadParams) {
    [v3 setObject:redownloadParams forKey:@"redownloadParams"];
  }
  artworkURLString = self->_artworkURLString;
  if (artworkURLString) {
    [v3 setObject:artworkURLString forKey:@"artworkURLString"];
  }
  if ((*(_WORD *)&self->_has & 0x20) != 0)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  self->_containsMessagesExtension));
    [v3 setObject:v14 forKey:@"containsMessagesExtension"];
  }

  itemName = self->_itemName;
  if (itemName) {
    [v3 setObject:itemName forKey:@"itemName"];
  }
  if ((*(_WORD *)&self->_has & 0x200) != 0)
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_launchProhibited));
    [v3 setObject:v16 forKey:@"launchProhibited"];
  }

  messagesArtworkURLString = self->_messagesArtworkURLString;
  if (messagesArtworkURLString) {
    [v3 setObject:messagesArtworkURLString forKey:@"messagesArtworkURLString"];
  }
  packageDPInfo = self->_packageDPInfo;
  if (packageDPInfo) {
    [v3 setObject:packageDPInfo forKey:@"packageDPInfo"];
  }
  packageSINF = self->_packageSINF;
  if (packageSINF) {
    [v3 setObject:packageSINF forKey:@"packageSINF"];
  }
  packageURLString = self->_packageURLString;
  if (packageURLString) {
    [v3 setObject:packageURLString forKey:@"packageURLString"];
  }
  storeCohort = self->_storeCohort;
  if (storeCohort) {
    [v3 setObject:storeCohort forKey:@"storeCohort"];
  }
  storeFront = self->_storeFront;
  if (storeFront) {
    [v3 setObject:storeFront forKey:@"storeFront"];
  }
  vendorName = self->_vendorName;
  if (vendorName) {
    [v3 setObject:vendorName forKey:@"vendorName"];
  }
  provisioningProfiles = self->_provisioningProfiles;
  if (provisioningProfiles) {
    [v3 setObject:provisioningProfiles forKey:@"provisioningProfile"];
  }
  variantID = self->_variantID;
  if (variantID) {
    [v3 setObject:variantID forKey:@"variantID"];
  }
  uint64_t v26 = (__int16)self->_has;
  if ((v26 & 0x400) != 0)
  {
    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_skipIfInstalled));
    [v3 setObject:v35 forKey:@"skipIfInstalled"];

    uint64_t v26 = (__int16)self->_has;
    if ((v26 & 0x40) == 0)
    {
LABEL_47:
      if ((v26 & 0x100) == 0) {
        goto LABEL_48;
      }
      goto LABEL_64;
    }
  }

  else if ((v26 & 0x40) == 0)
  {
    goto LABEL_47;
  }

  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_isBeta));
  [v3 setObject:v36 forKey:@"isBeta"];

  uint64_t v26 = (__int16)self->_has;
  if ((v26 & 0x100) == 0)
  {
LABEL_48:
    if ((v26 & 0x80) == 0) {
      goto LABEL_50;
    }
    goto LABEL_49;
  }

        unsigned int v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v20 = [v2 countByEnumeratingWithState:&v21 objects:v29 count:16];
      int v4 = v20;
    }

    while (v20);
  }
}

    goto LABEL_18;
  }

    id v14 = 0;
    goto LABEL_18;
  }

  uint64_t v25 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
  unint64_t v27 = sub_10025670C(v26, @"currentStorefrontCountryCodeISO3A");
  unint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  uint64_t v44 = 0LL;
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v28 valueWithError:&v44]);
  uint64_t v30 = v44;

  if (v29)
  {
    unint64_t v31 = [&off_10040DFD8 containsObject:v29];

    if ((v31 & 1) != 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }

  id v34 = ASDLogHandleForCategory(37LL);
  __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
  {
    uint64_t v37 = (void *)objc_opt_class(v8, v36);
    *(_DWORD *)buf = 138543618;
    char v46 = v37;
    char v47 = 2112;
    __int128 v48 = v30;
    uint64_t v38 = v37;
    _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "[%{public}@]: Encountered error while loading storefront country code bag value: %@",  buf,  0x16u);
  }

LABEL_20:
}

LABEL_18:
  uint64_t v11 = 0;
LABEL_19:

  return v11;
}

uint64_t _s9appstored17UpdateEligibleAppV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100017078 + 4 * byte_100372B25[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000170AC + 4 * asc_100372B20[v4]))();
}

uint64_t sub_1000170AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000170B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000170BCLL);
  }
  return result;
}

uint64_t sub_1000170C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000170D0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000170D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000170DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MediaAPIUpdateRequest.CodingKeys()
{
  return &type metadata for MediaAPIUpdateRequest.CodingKeys;
}

unint64_t sub_1000170FC()
{
  unint64_t result = qword_100458808;
  if (!qword_100458808)
  {
    unint64_t result = swift_getWitnessTable(&unk_100372DBC, &type metadata for MediaAPIUpdateRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100458808);
  }

  return result;
}

unint64_t sub_100017144()
{
  unint64_t result = qword_100458810;
  if (!qword_100458810)
  {
    unint64_t result = swift_getWitnessTable(&unk_100372D2C, &type metadata for MediaAPIUpdateRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100458810);
  }

  return result;
}

unint64_t sub_10001718C()
{
  unint64_t result = qword_100458818;
  if (!qword_100458818)
  {
    unint64_t result = swift_getWitnessTable(&unk_100372D54, &type metadata for MediaAPIUpdateRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100458818);
  }

  return result;
}

uint64_t sub_1000171D0(uint64_t a1, unint64_t a2)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1635017060LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1684632935 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684632935LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x636E7973626BLL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x636E7973626BLL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

id sub_100017308(uint64_t a1, uint64_t a2)
{
  ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  uint64_t v4 = OBJC_IVAR____TtC9appstored17RestrictionsCache_lockedCachedValues;
  uint64_t v5 = sub_1000079A0((uint64_t *)&unk_1004588B0);
  uint64_t v6 = swift_allocObject(v5, 24LL, 7LL);
  *(_DWORD *)(v6 + 20) = 0;
  *(_BYTE *)(v6 + 16) = 2;
  *(void *)&v2[v4] = v6;
  v12.receiver = v2;
  v12.super_class = ObjectType;
  id v7 = objc_msgSendSuper2(&v12, "init");
  char v8 = (void *)objc_opt_self(&OBJC_CLASS___MCProfileConnection);
  id v9 = v7;
  id result = [v8 sharedConnection];
  if (result)
  {
    uint64_t v11 = result;
    [result registerObserver:v9];

    return v9;
  }

  else
  {
    __break(1u);
  }

  return result;
}

id sub_1000173FC()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for RestrictionsCache()) init];
  qword_100462888 = (uint64_t)result;
  return result;
}

id sub_1000174F4@<X0>(_BYTE *a1@<X0>, _BYTE *a2@<X8>)
{
  int v3 = *a1;
  if (v3 == 2)
  {
    uint64_t v5 = objc_opt_self(&OBJC_CLASS___Restrictions);
    id result = sub_1002735EC(v5);
    *a1 = (_BYTE)result;
  }

  else
  {
    id result = (id)(v3 & 1);
  }

  *a2 = (_BYTE)result;
  return result;
}

_BYTE *sub_100017550(_BYTE *result)
{
  *id result = 2;
  return result;
}

uint64_t type metadata accessor for RestrictionsCache()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored17RestrictionsCache);
}

uint64_t getEnumTagSinglePayload for RestrictionsCache.ValueStore(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }

uint64_t storeEnumTagSinglePayload for RestrictionsCache.ValueStore( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100017710 + 4 * byte_100372E45[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100017744 + 4 * byte_100372E40[v4]))();
}

uint64_t sub_100017744(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001774C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100017754LL);
  }
  return result;
}

uint64_t sub_100017760(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100017768LL);
  }
  *(_BYTE *)id result = a2 + 2;
  return result;
}

uint64_t sub_10001776C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100017774(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RestrictionsCache.ValueStore()
{
  return &type metadata for RestrictionsCache.ValueStore;
}

unint64_t sub_100017790(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1000079A0(&qword_1004588C0);
    int v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    int v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v26 = a1 + 64;
  uint64_t v4 = -1LL;
  uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1LL << -(char)v5);
  }
  unint64_t v6 = v4 & *(void *)(a1 + 64);
  int64_t v25 = (unint64_t)(63 - v5) >> 6;
  unint64_t result = swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      uint64_t v11 = (v6 - 1) & v6;
      unint64_t v12 = __clz(__rbit64(v6)) | (v8 << 6);
      int64_t v13 = v8;
    }

    else
    {
      int64_t v14 = v8 + 1;
      if (__OFADD__(v8, 1LL)) {
        goto LABEL_37;
      }
      if (v14 >= v25)
      {
LABEL_33:
        sub_100017CC0(a1);
        return (unint64_t)v3;
      }

      unint64_t v15 = *(void *)(v26 + 8 * v14);
      int64_t v13 = v8 + 1;
      if (!v15)
      {
        int64_t v13 = v8 + 2;
        if (v8 + 2 >= v25) {
          goto LABEL_33;
        }
        unint64_t v15 = *(void *)(v26 + 8 * v13);
        if (!v15)
        {
          int64_t v13 = v8 + 3;
          if (v8 + 3 >= v25) {
            goto LABEL_33;
          }
          unint64_t v15 = *(void *)(v26 + 8 * v13);
          if (!v15)
          {
            int64_t v13 = v8 + 4;
            if (v8 + 4 >= v25) {
              goto LABEL_33;
            }
            unint64_t v15 = *(void *)(v26 + 8 * v13);
            if (!v15)
            {
              int64_t v16 = v8 + 5;
              if (v8 + 5 >= v25) {
                goto LABEL_33;
              }
              unint64_t v15 = *(void *)(v26 + 8 * v16);
              if (!v15)
              {
                while (1)
                {
                  int64_t v13 = v16 + 1;
                  if (__OFADD__(v16, 1LL)) {
                    goto LABEL_38;
                  }
                  if (v13 >= v25) {
                    goto LABEL_33;
                  }
                  unint64_t v15 = *(void *)(v26 + 8 * v13);
                  ++v16;
                  if (v15) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v8 + 5;
            }
          }
        }
      }

LABEL_26:
      uint64_t v11 = (v15 - 1) & v15;
      unint64_t v12 = __clz(__rbit64(v15)) + (v13 << 6);
    }

    sub_100017C44(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v37);
    sub_100016B10(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v38 + 8);
    v35[0] = v38[0];
    v35[1] = v38[1];
    uint64_t v36 = v39;
    v34[0] = v37[0];
    v34[1] = v37[1];
    sub_100017C44((uint64_t)v34, (uint64_t)v29);
    if (!swift_dynamicCast(&v27, v29, &type metadata for AnyHashable, &type metadata for String, 6LL))
    {
      uint64_t v27 = 0LL;
      uint64_t v28 = 0LL;
      sub_100017C80((uint64_t)v34);
      swift_bridgeObjectRelease(v28);
      sub_100017CC0(a1);
      swift_release(v3);
      return 0LL;
    }

    uint64_t v17 = v27;
    uint64_t v18 = v28;
    sub_100016B10((uint64_t)v35 + 8, (uint64_t)v29);
    sub_100017C80((uint64_t)v34);
    sub_100015330(v29, v30);
    *(void *)&__int128 v31 = v17;
    *((void *)&v31 + 1) = v18;
    sub_100015330(v30, v32);
    __int128 v19 = v31;
    sub_100015330(v32, v33);
    sub_100015330(v33, &v31);
    unint64_t result = sub_100023F7C(v19, *((uint64_t *)&v19 + 1));
    unint64_t v20 = result;
    if ((v21 & 1) != 0)
    {
      uint64_t v9 = v3[6] + 16 * result;
      swift_bridgeObjectRelease(*(void *)(v9 + 8));
      *(_OWORD *)uint64_t v9 = v19;
      uint64_t v10 = (void *)(v3[7] + 32 * v20);
      sub_100015340(v10);
      unint64_t result = (unint64_t)sub_100015330(&v31, v10);
      goto LABEL_8;
    }

    if (v3[2] >= v3[3]) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(_OWORD *)(v3[6] + 16 * result) = v19;
    unint64_t result = (unint64_t)sub_100015330(&v31, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v22 = v3[2];
    BOOL v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_36;
    }
    v3[2] = v24;
LABEL_8:
    int64_t v8 = v13;
    unint64_t v6 = v11;
  }

  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

      char v21 = 0LL;
      memset(v122, 0, sizeof(v122));
      int64_t v121 = 0u;
    }

    id v34 = v120[v35];
    if (v34)
    {
LABEL_15:
      uint64_t v33 = v35;
LABEL_12:
      char v21 = (v34 - 1) & v34;
      uint64_t v29 = __clz(__rbit64(v34)) + (v33 << 6);
      BOOL v23 = v33;
      continue;
    }

    break;
  }

  while (1)
  {
    uint64_t v33 = v35 + 1;
    if (__OFADD__(v35, 1LL)) {
      break;
    }
    if (v33 >= v22)
    {
      BOOL v23 = v117;
      goto LABEL_26;
    }

    id v34 = v120[v33];
    ++v35;
    if (v34) {
      goto LABEL_12;
    }
  }

        uint64_t v9 = (v19 - 1) & v19;
        uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      char v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      uint64_t v22 = *v21;
      BOOL v23 = v21[1];
      Hasher.init(_seed:)(v34);
      String.hash(into:)(v34, v22, v23);
      unint64_t result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      int64_t v25 = result & ~v24;
      uint64_t v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        int64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            uint64_t v26 = 0LL;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        int64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      unint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      *unint64_t v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  unint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

        uint64_t v11 = (v18 - 1) & v18;
        int64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
      }

      unint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
      unint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
      char v21 = -1LL << *(_BYTE *)(v6 + 32);
      uint64_t v22 = result & ~v21;
      BOOL v23 = v22 >> 6;
      if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
      {
        int64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        int64_t v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            BOOL v23 = 0LL;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v13 + 8 * v23);
        }

        while (v27 == -1);
        int64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
      }

      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
      ++*(void *)(v6 + 16);
    }
  }

  unint64_t result = swift_release(v3);
  *uint64_t v2 = v6;
  return result;
}

    uint64_t v10 = (v19 - 1) & v19;
    uint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    char v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    uint64_t v22 = *v21;
    BOOL v23 = v21[1];
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    unint64_t result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    int64_t v25 = result & ~v24;
    uint64_t v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      int64_t v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          uint64_t v26 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      int64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    unint64_t v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    *unint64_t v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  unint64_t v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    unint64_t result = swift_release_n(v3, 2LL);
    uint64_t v2 = v31;
    goto LABEL_38;
  }

  __int128 v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    int64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    int64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    __int128 v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    uint64_t v11 = (v18 - 1) & v18;
    int64_t v16 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_27:
    unint64_t v20 = *(void *)(*(void *)(v3 + 48) + 8 * v16);
    unint64_t result = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), v20);
    char v21 = -1LL << *(_BYTE *)(v6 + 32);
    uint64_t v22 = result & ~v21;
    BOOL v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6))) != 0)
    {
      int64_t v14 = __clz(__rbit64((-1LL << v22) & ~*(void *)(v13 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      int64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          BOOL v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v13 + 8 * v23);
      }

      while (v27 == -1);
      int64_t v14 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    *(void *)(*(void *)(v6 + 48) + 8 * v14) = v20;
    ++*(void *)(v6 + 16);
  }

  __int128 v19 = v17 + 3;
  if (v19 >= v12)
  {
LABEL_36:
    unint64_t result = swift_release(v3);
    uint64_t v2 = v28;
    goto LABEL_38;
  }

  uint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int v7 = v19;
    goto LABEL_26;
  }

  while (1)
  {
    int v7 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v7 >= v12) {
      goto LABEL_36;
    }
    uint64_t v18 = *(void *)(v8 + 8 * v7);
    ++v19;
    if (v18) {
      goto LABEL_26;
    }
  }

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    __int128 v31 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v19);
    char v21 = *v31;
    uint64_t v22 = v31[1];
    memcpy(__dst, (const void *)(*(void *)(v5 + 56) + 320 * v19), 0x13AuLL);
    unint64_t v82 = BYTE1(__dst[39]);
    unint64_t v55 = __dst[39];
    int64_t v80 = __dst[37];
    uint64_t v81 = __dst[38];
    unint64_t v76 = __dst[35];
    uint64_t v73 = __dst[34];
    uint64_t v71 = __dst[32];
    int64_t v25 = __dst[33];
    uint64_t v67 = __dst[31];
    int64_t v68 = __dst[30];
    uint64_t v64 = __dst[28];
    uint64_t v26 = __dst[29];
    __int128 v62 = __dst[26];
    __int128 v60 = __dst[27];
    uint64_t v78 = __dst[36];
    int64_t v79 = __dst[24];
    uint64_t v24 = __dst[25];
    unint64_t v77 = __dst[22];
    id v74 = __dst[23];
    id v75 = __dst[20];
    unint64_t v72 = __dst[18];
    char v46 = __dst[19];
    char v47 = __dst[21];
    uint64_t v45 = __dst[17];
    char v69 = __dst[14];
    uint64_t v70 = __dst[16];
    char v53 = __dst[13];
    uint64_t v54 = __dst[15];
    uint64_t v65 = __dst[10];
    BOOL v66 = __dst[12];
    __int128 v63 = __dst[8];
    __int128 v51 = __dst[9];
    __int128 v52 = __dst[11];
    __int128 v61 = __dst[6];
    unint64_t v58 = __dst[2];
    __int128 v59 = __dst[4];
    uint64_t v49 = __dst[3];
    uint64_t v50 = __dst[7];
    unint64_t v56 = __dst[0];
    uint64_t v57 = __dst[5];
    __int128 v48 = __dst[1];
    swift_bridgeObjectRetain(v22);
    sub_1000266A4(__dst);
LABEL_27:
    Hasher.init(_seed:)(__dst);
    String.hash(into:)(__dst, v21, v22);
    unint64_t result = Hasher._finalize()();
    uint64_t v32 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v33 = result & ~v32;
    id v34 = v33 >> 6;
    if (((-1LL << v33) & ~*(void *)(v12 + 8 * (v33 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1LL << v33) & ~*(void *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      __int128 v35 = 0;
      uint64_t v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v37 = v34 == v36;
        if (v34 == v36) {
          id v34 = 0LL;
        }
        v35 |= v37;
        uint64_t v38 = *(void *)(v12 + 8 * v34);
      }

      while (v38 == -1);
      unint64_t v15 = __clz(__rbit64(~v38)) + (v34 << 6);
    }

    LOBYTE(__dst[0]) = v48;
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
    int64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
    *int64_t v16 = v21;
    v16[1] = v22;
    uint64_t v17 = *(void *)(v8 + 56) + 320 * v15;
    *(void *)uint64_t v17 = v56;
    *(_BYTE *)(v17 + 8) = __dst[0];
    *(void *)(v17 + 16) = v58;
    *(_BYTE *)(v17 + 24) = v49;
    *(void *)(v17 + 32) = v59;
    *(void *)(v17 + 40) = v57;
    *(void *)(v17 + 48) = v61;
    *(_BYTE *)(v17 + 56) = v50;
    *(void *)(v17 + 64) = v63;
    *(_BYTE *)(v17 + 72) = v51;
    *(void *)(v17 + 80) = v65;
    *(_BYTE *)(v17 + 88) = v52;
    *(void *)(v17 + 96) = v66;
    *(_BYTE *)(v17 + 104) = v53;
    *(void *)(v17 + 112) = v69;
    *(_BYTE *)(v17 + 120) = v54;
    *(void *)(v17 + 128) = v70;
    *(_BYTE *)(v17 + 136) = v45;
    *(void *)(v17 + 144) = v72;
    *(_BYTE *)(v17 + 152) = v46;
    *(void *)(v17 + 160) = v75;
    *(_BYTE *)(v17 + 168) = v47;
    *(void *)(v17 + 176) = v77;
    *(void *)(v17 + 184) = v74;
    *(void *)(v17 + 192) = v79;
    *(_BYTE *)(v17 + 200) = v24;
    *(void *)(v17 + 208) = v62;
    *(void *)(v17 + 216) = v60;
    *(void *)(v17 + 224) = v64;
    *(_BYTE *)(v17 + 232) = v26;
    *(void *)(v17 + 240) = v68;
    *(void *)(v17 + 248) = v67;
    *(void *)(v17 + 256) = v71;
    *(_BYTE *)(v17 + 264) = v25;
    *(void *)(v17 + 272) = v73;
    *(void *)(v17 + 280) = v76;
    *(void *)(v17 + 288) = v78;
    *(void *)(v17 + 296) = v80;
    *(void *)(v17 + 304) = v81;
    *(_BYTE *)(v17 + 312) = v55;
    *(_BYTE *)(v17 + 313) = v82;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  int v3 = v40;
  uint64_t v28 = v42;
  if ((v44 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v28, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v28 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  unint64_t result = swift_release(v5);
  *int v3 = v8;
  return result;
}

    __break(1u);
    goto LABEL_27;
  }

  return result;
}

    unint64_t v12 = v29;
    goto LABEL_27;
  }
  }

  -[PurchaseInfo setClientInfo:](v4, "setClientInfo:", v36);
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(-[PurchaseInfo clientInfo](v4, "clientInfo"));
  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 bundleIdentifier]);
  BOOL v40 = [v39 isEqual:@"com.apple.AppStoreDaemon.ASDAskPermissionExtension"];

  if (v40)
  {
    uint64_t v41 = ASDLogHandleForCategory(25LL);
    __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Updating to use interactive dialogs",  v50,  2u);
    }

    -[PurchaseInfo setUseLocalAuthAndInteractiveDialogs:](v4, "setUseLocalAuthAndInteractiveDialogs:", 1LL);
  }

  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([a1 additionalHeaders]);
  uint64_t v44 = [v43 copy];
  -[PurchaseInfo setAdditionalHeaders:](v4, "setAdditionalHeaders:", v44);

  [a1 softwarePlatform];
  -[PurchaseInfo setExpectedSoftwarePlatform:](v4, "setExpectedSoftwarePlatform:", 1LL);
  -[PurchaseInfo setPurchaseOnly:](v4, "setPurchaseOnly:", [a1 createsJobs] ^ 1);
  -[PurchaseInfo updateGeneratedProperties](v4, "updateGeneratedProperties");

LABEL_31:
  return v4;
}

  return 1LL;
}

        goto LABEL_27;
      }

      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "ams_iTunesAccountWithDSID:", v12));

      int64_t v25 = ASDLogHandleForCategory(29LL);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v25);
      if (!os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_INFO))
      {
LABEL_19:

        if (v11)
        {
LABEL_27:

          goto LABEL_28;
        }

        goto LABEL_20;
      }

      *(_DWORD *)buf = 138412290;
      uint64_t v37 = v9;
      BOOL v23 = "[%@] Using purchaser-dsid";
    }

    else
    {
      unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "ams_iTunesAccountWithDSID:", v13));

      char v21 = ASDLogHandleForCategory(29LL);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      if (!os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_INFO)) {
        goto LABEL_19;
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v37 = v9;
      BOOL v23 = "[%@] Using downloader-dsid";
    }

    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v22, OS_LOG_TYPE_INFO, v23, buf, 0xCu);
    goto LABEL_19;
  }

  if (a4)
  {
    uint64_t v10 = ASDErrorWithTitleAndMessage( ASDErrorDomain,  745LL,  @"Device Based VPP app must be restored by MDM server that installed it.",  0LL);
    uint64_t v11 = 0LL;
    *a4 = (id)objc_claimAutoreleasedReturnValue(v10);
  }

  else
  {
    uint64_t v11 = 0LL;
  }

    uint64_t v32 = ASDLogHandleForCategory(29LL);
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v36) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Bootstrap completed. Will not attempt to process failures if needed",  (uint8_t *)&v36,  2u);
    }

LABEL_32:
  }
}

        uint64_t v45 = sub_10020FAD4((uint64_t)&OBJC_CLASS___RestoreManager);
        char v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
        char v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Retry background following distributor installation"));
        sub_100210B70((uint64_t)v46, v47, 0LL, 0);

        goto LABEL_27;
      }

      if (!v26) {
        goto LABEL_17;
      }
      unint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v17 firstObject]);
      uint64_t v27 = [v17 count];
      *(_DWORD *)buf = 138412802;
      uint64_t v50 = v48;
      __int128 v51 = 2114;
      __int128 v52 = v20;
      char v53 = 2048;
      uint64_t v54 = v27;
      char v21 = "[%@] Updated the bootstrap state of %{public}@ and %ld other user initiated app(s)";
      uint64_t v22 = v19;
      BOOL v23 = 32;
    }

    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, buf, v23);

    goto LABEL_17;
  }

  uint64_t v29 = ASDLogHandleForCategory(2LL);
  uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v32 = *(id *)&self->super._success;
    if (v32) {
      uint64_t v32 = objc_getProperty(v32, v31, 32LL, 1);
    }
    uint64_t v33 = v32;
    *(_DWORD *)buf = 138412546;
    uint64_t v45 = v33;
    char v46 = 2048;
    char v47 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "[%@]: Evaluation for download completed with result: %ld",  buf,  0x16u);
  }

  self->super._error = (NSError *)v5;
  -[Task completeWithSuccess](self, "completeWithSuccess");
}

  return a1;
}

LABEL_27:
    uint64_t v10 = v17;
    goto LABEL_28;
  }

  if ((int)a4 <= 1634952300)
  {
    switch(a4)
    {
      case 0x616A7A6Fu:
        uint64_t v17 = v10;
        uint64_t v11 = a5[3];
        -[ASDMutableIAPInfo setHasUsedFreeOffer:](self->_currentItem, "setHasUsedFreeOffer:", v11 & 1);
        -[ASDMutableIAPInfo setHasUsedIntroPricingOffer:]( self->_currentItem,  "setHasUsedIntroPricingOffer:",  (v11 & 2) != 0);
        goto LABEL_27;
      case 0x616A7A72u:
        uint64_t v17 = v10;
        -[ASDMutableIAPInfo setAutoRenewStatus:](self->_currentItem, "setAutoRenewStatus:", *a5 != 0);
        goto LABEL_27;
      case 0x616A7A73u:
        uint64_t v17 = v10;
        unint64_t v12 = -[NSString initWithBytes:length:encoding:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithBytes:length:encoding:",  a5,  a6,  4LL);
        -[ASDMutableIAPInfo setSubscriptionFamilyId:](self->_currentItem, "setSubscriptionFamilyId:", v12);
        goto LABEL_26;
      case 0x616A7A74u:
        if (*a5 < 5u)
        {
          uint64_t v17 = v10;
          -[ASDMutableIAPInfo setType:](self->_currentItem, "setType:");
          goto LABEL_27;
        }

        self->_errorParsingItem = 1;
        break;
      default:
        goto LABEL_28;
    }

    goto LABEL_28;
  }

  if ((int)a4 <= 1836413809)
  {
    if (a4 != 1634952301)
    {
      if (a4 == 1836282996) {
        self->_status = bswap32(*(_DWORD *)a5);
      }
      goto LABEL_28;
    }

    uint64_t v17 = v10;
    unint64_t v12 = (NSString *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSince1970:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSince1970:",  (double)bswap32(*(_DWORD *)a5)));
    -[ASDMutableIAPInfo setLastModifiedDate:](self->_currentItem, "setLastModifiedDate:", v12);
    goto LABEL_26;
  }

  if (a4 == 1836413810)
  {
    uint64_t v17 = v10;
    unint64_t v15 = (NSNumber *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  bswap32(*(_DWORD *)a5)));
    serverRevision = self->_serverRevision;
    self->_serverRevision = v15;

    goto LABEL_27;
  }

  if (a4 == 1836414073) {
    self->_update = *a5 != 0;
  }
LABEL_28:
}

  char v53 = v16;
  if (+[UpdatesManager shouldUseModernUpdates](&OBJC_CLASS___UpdatesManager, "shouldUseModernUpdates"))
  {
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "BOOLeanPropertyMaskKey"));
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v28, "objectForKeyedSubscript:", v43));
    uint64_t v45 = (unint64_t)[v44 integerValue];

    char v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  v45 & 0xFFFFFFFFFFFFFFFELL | v54 ^ 1u));
    char v47 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "BOOLeanPropertyMaskKey"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v28, "setObject:forKeyedSubscript:", v46, v47);
  }

  else
  {
    char v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v54 ^ 1u));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v28,  "setObject:forKeyedSubscript:",  v46,  @"is_background");
  }

  __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v28, "setObject:forKeyedSubscript:", v48, @"update_state");

  uint64_t v39 = -[UpdateItemMetrics setValuesWithDictionary:](v20, "setValuesWithDictionary:", v28);
  int64_t v16 = v53;
LABEL_30:

LABEL_31:
LABEL_32:

  return v39;
}

    *a3 = v5;
    unint64_t v6 = *a4;
    *a4 = v4;
  }

unint64_t sub_100017B50()
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  _StringGuts.grow(_:)(32LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = sub_1001DF23C(isa, v1);

  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  unint64_t v4 = sub_100017790(v3);
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t sub_100017C44(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100017C80(uint64_t a1)
{
  uint64_t v2 = sub_1000079A0(&qword_1004588C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100017CC0(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

id sub_100017CE0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + *a3 + 8);
  swift_bridgeObjectRetain(v3);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

uint64_t type metadata accessor for SKANBlindedData()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored15SKANBlindedData);
}

void *sub_100017F68(int a1, size_t a2)
{
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    unint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
    __break(1u);
  }

  else
  {
    if (!a2) {
      return &_swiftEmptyArrayStorage;
    }
    uint64_t v4 = static Array._allocateBufferUninitialized(minimumCapacity:)(a2, &type metadata for Int8);
    *(void *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return (void *)v4;
  }

  return result;
}

void *sub_1000180D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = SKANUTClient.blindedElement()();
  unint64_t v4 = v3;
  Swift::String v5 = Data.base64EncodedString(options:)(0LL);
  sub_100007B14(v2, v4);
  Swift::String v6 = Data.base64EncodedString(options:)(0LL);
  unint64_t v7 = sub_100018C30();
  if ((v8 & 1) != 0)
  {
    swift_bridgeObjectRelease(v5._object);
    swift_bridgeObjectRelease(v6._object);
    return 0LL;
  }

  else
  {
    unint64_t v9 = v7;
    *(void *)(v0 + OBJC_IVAR____TtC9appstored26SKANPersistentTokenHandler_timestamp) = v7;
    uint64_t v10 = (objc_class *)type metadata accessor for SKANBlindedData();
    uint64_t v11 = (char *)objc_allocWithZone(v10);
    *(Swift::String *)&v11[OBJC_IVAR____TtC9appstored15SKANBlindedData_blindedElement] = v5;
    *(Swift::String *)&v11[OBJC_IVAR____TtC9appstored15SKANBlindedData_privateInput] = v6;
    *(void *)&v11[OBJC_IVAR____TtC9appstored15SKANBlindedData_timestamp] = v9;
    v18.receiver = v11;
    v18.super_class = v10;
    id v12 = objc_msgSendSuper2(&v18, "init");
    uint64_t v13 = OBJC_IVAR____TtC9appstored26SKANPersistentTokenHandler_blindedData;
    int64_t v14 = *(void **)(v1 + OBJC_IVAR____TtC9appstored26SKANPersistentTokenHandler_blindedData);
    *(void *)(v1 + OBJC_IVAR____TtC9appstored26SKANPersistentTokenHandler_blindedData) = v12;

    unint64_t v15 = *(void **)(v1 + v13);
    id v16 = v15;
  }

  return v15;
}

unint64_t sub_100018234(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = Data.init(base64Encoded:options:)(a4, a5, 0LL);
  if (v10 >> 60 == 15) {
    goto LABEL_16;
  }
  uint64_t v11 = v9;
  unint64_t v12 = v10;
  Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  int64_t v14 = SecCertificateCreateWithData(0LL, isa);

  if (!v14)
  {
LABEL_15:
    sub_1000188F4(v11, v12);
LABEL_16:
    type metadata accessor for ASDError(0LL);
    uint64_t v28 = v27;
    uint64_t v50 = 1281LL;
    unint64_t v29 = sub_10006D16C((uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v30 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
    __int128 v31 = _BridgedStoredNSError.init(_:userInfo:)(v52, &v50, v29, v28, v30);
    swift_willThrow(v31);
    return a2;
  }

  SecKeyRef v15 = SecCertificateCopyKey(v14);
  if (!v15)
  {
LABEL_14:

    goto LABEL_15;
  }

  char v53 = v15;
  CFDataRef v16 = SecKeyCopyExternalRepresentation(v15, 0LL);
  if (!v16)
  {

    int64_t v14 = v53;
    goto LABEL_14;
  }

  CFDataRef v17 = v16;
  uint64_t v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
  unint64_t v48 = v19;
  uint64_t v49 = v18;

  if (!*(void *)(a3 + 16)) {
    goto LABEL_19;
  }
  unint64_t v20 = sub_100023F7C(0x746E656D656C65LL, 0xE700000000000000LL);
  if ((v21 & 1) == 0) {
    goto LABEL_19;
  }
  sub_100016B10(*(void *)(a3 + 56) + 32 * v20, (uint64_t)v52);
  uint64_t v46 = v51;
  if (!*(void *)(a3 + 16)
    || (uint64_t v44 = v50, v22 = sub_100023F7C(0x666F6F7270LL, 0xE500000000000000LL), (v23 & 1) == 0)
    || (sub_100016B10(*(void *)(a3 + 56) + 32 * v22, (uint64_t)v52),
        (swift_dynamicCast(&v50, v52, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease(v46);
LABEL_19:
    type metadata accessor for ASDError(0LL);
    uint64_t v34 = v33;
    uint64_t v35 = 1291LL;
LABEL_20:
    uint64_t v50 = v35;
    a2 = sub_10006D16C((uint64_t)&_swiftEmptyArrayStorage);
    uint64_t v36 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
    uint64_t v37 = _BridgedStoredNSError.init(_:userInfo:)(v52, &v50, a2, v34, v36);
    swift_willThrow(v37);
    sub_1000188F4(v11, v12);

    sub_100007B14(v49, v48);
    return a2;
  }

  uint64_t v24 = v51;
  uint64_t v43 = v50;
  uint64_t v45 = Data.init(base64Encoded:options:)(v44, v46, 0LL);
  unint64_t v26 = v25;
  swift_bridgeObjectRelease(v46);
  unint64_t v47 = v26;
  if (v26 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v24);
LABEL_23:
    type metadata accessor for ASDError(0LL);
    uint64_t v34 = v40;
    uint64_t v35 = 1282LL;
    goto LABEL_20;
  }

  uint64_t v42 = Data.init(base64Encoded:options:)(v43, v24, 0LL);
  unint64_t v39 = v38;
  swift_bridgeObjectRelease(v24);
  if (v39 >> 60 == 15)
  {
    sub_1000188F4(v45, v47);
    goto LABEL_23;
  }

  uint64_t v41 = SKANUTClient.finalize(publicInput:evaluatedElement:proof:publicKey:)(a1, a2, v45, v47, v42, v39, v49, v48);
  if (!v5) {
    a2 = v41;
  }
  sub_1000188F4(v42, v39);
  sub_1000188F4(v45, v47);
  sub_100007B14(v49, v48);

  sub_1000188F4(v11, v12);
  return a2;
}

uint64_t sub_100018824()
{
  return type metadata accessor for SKANPersistentTokenHandler(0LL);
}

uint64_t type metadata accessor for SKANPersistentTokenHandler(uint64_t a1)
{
  uint64_t result = qword_100458938;
  if (!qword_100458938) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SKANPersistentTokenHandler);
  }
  return result;
}

uint64_t sub_100018868(uint64_t a1)
{
  uint64_t result = type metadata accessor for SKANUTClient(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = "\b";
    v4[3] = &unk_100372EE8;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 4LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1000188F4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100007B14(a1, a2);
  }
  return a1;
}

uint64_t sub_100018908(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

void *sub_1000189C8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  Swift::String v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  char v8 = (char *)&v30 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    sub_1000079A0((uint64_t *)&unk_100459E30);
    uint64_t v10 = static _SetStorage.allocate(capacity:)(v9);
    uint64_t v11 = 0LL;
    uint64_t v12 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v31 = v9;
    uint64_t v32 = a1 + ((v12 + 32) & ~v12);
    uint64_t v13 = *(void *)(v3 + 72);
    uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    uint64_t v35 = v10 + 56;
    while (1)
    {
      uint64_t v33 = v11;
      v34(v8, v32 + v13 * v11, v2);
      uint64_t v14 = *(void *)(v10 + 40);
      uint64_t v15 = sub_100004DD4( (unint64_t *)&unk_100459E20,  (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component,  (uint64_t)&protocol conformance descriptor for Calendar.Component);
      uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v2, v15);
      uint64_t v17 = ~(-1LL << *(_BYTE *)(v10 + 32));
      unint64_t v18 = v16 & v17;
      unint64_t v19 = (v16 & (unint64_t)v17) >> 6;
      uint64_t v20 = *(void *)(v35 + 8 * v19);
      uint64_t v21 = 1LL << (v16 & v17);
      if ((v21 & v20) != 0)
      {
        do
        {
          v34(v6, *(void *)(v10 + 48) + v18 * v13, v2);
          uint64_t v22 = sub_100004DD4( &qword_100458950,  (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component,  (uint64_t)&protocol conformance descriptor for Calendar.Component);
          char v23 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v8, v2, v22);
          uint64_t v24 = v3;
          unint64_t v25 = *(void (**)(char *, uint64_t))(v3 + 8);
          v25(v6, v2);
          if ((v23 & 1) != 0)
          {
            v25(v8, v2);
            uint64_t v3 = v24;
            uint64_t v9 = v31;
            goto LABEL_4;
          }

          unint64_t v18 = (v18 + 1) & v17;
          unint64_t v19 = v18 >> 6;
          uint64_t v20 = *(void *)(v35 + 8 * (v18 >> 6));
          uint64_t v21 = 1LL << v18;
          uint64_t v3 = v24;
        }

        while ((v20 & (1LL << v18)) != 0);
        uint64_t v9 = v31;
      }

      *(void *)(v35 + 8 * v19) = v21 | v20;
      uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))( *(void *)(v10 + 48) + v18 * v13,  v8,  v2);
      uint64_t v27 = *(void *)(v10 + 16);
      BOOL v28 = __OFADD__(v27, 1LL);
      uint64_t v29 = v27 + 1;
      if (v28) {
        break;
      }
      *(void *)(v10 + 16) = v29;
LABEL_4:
      uint64_t v11 = v33 + 1;
      if (v33 + 1 == v9) {
        return (void *)v10;
      }
    }

    __break(1u);
  }

  else
  {
    return &_swiftEmptySetSingleton;
  }

  return result;
}

unint64_t sub_100018C30()
{
  uint64_t v0 = sub_1000079A0((uint64_t *)&unk_100459410);
  __chkstk_darwin(v0);
  uint64_t v42 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v2 = type metadata accessor for Calendar(0LL);
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DateComponents(0LL);
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v38 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v37 - v12;
  Date.init()(v11);
  uint64_t v14 = sub_1000079A0(&qword_100458948);
  uint64_t v15 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 72);
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (v18 + 32) & ~v18;
  uint64_t v20 = swift_allocObject(v14, v19 + 3 * v17, v18 | 7);
  *(_OWORD *)(v20 + 16) = xmmword_100372E80;
  uint64_t v21 = v20 + v19;
  uint64_t v22 = *(void (**)(uint64_t, void, uint64_t))(v16 + 104);
  v22(v21, enum case for Calendar.Component.year(_:), v15);
  v22(v21 + v17, enum case for Calendar.Component.month(_:), v15);
  v22(v21 + 2 * v17, enum case for Calendar.Component.day(_:), v15);
  char v23 = sub_1000189C8(v20);
  swift_setDeallocating(v20);
  swift_arrayDestroy(v21, 3LL, v15);
  uint64_t v24 = swift_deallocClassInstance(v20, 32LL, 7LL);
  static Calendar.current.getter(v24);
  Calendar.dateComponents(_:from:)(v23, v13);
  swift_bridgeObjectRelease(v23);
  uint64_t v25 = v41;
  unint64_t v26 = *(uint64_t (**)(char *, uint64_t))(v40 + 8);
  uint64_t v27 = v26(v4, v41);
  static Calendar.current.getter(v27);
  BOOL v28 = v42;
  Calendar.date(from:)(v7);
  v26(v4, v25);
  uint64_t v29 = (uint64_t)v28;
  uint64_t v30 = v39;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v29, 1LL, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v44);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v13, v8);
    sub_100009AB0(v29);
    return 0LL;
  }

  uint64_t v32 = v38;
  uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v30 + 32))(v38, v29, v8);
  double v34 = Date.timeIntervalSince1970.getter(v33);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v30 + 8);
  v35(v32, v8);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v44);
  unint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v13, v8);
  double v36 = v34 * 1000.0;
  if ((~COERCE__INT64(v34 * 1000.0) & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

  if (v36 <= -1.0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (v36 < 1.84467441e19) {
    return (unint64_t)v36;
  }
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100018FB4(_BYTE *__src, uint64_t a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 <= 14) {
    return sub_100018908(__src, &__src[a2]);
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
  uint64_t result = swift_allocObject(v6, 32LL, 7LL);
  *(void *)(result + 16) = 0LL;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t type metadata accessor for DictionaryEncoder()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored17DictionaryEncoder);
}

uint64_t sub_100019084()
{
  return swift_deallocClassInstance(v0, 24LL, 7LL);
}

uint64_t type metadata accessor for DictionaryDecoder()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored17DictionaryDecoder);
}

void sub_1000190C8(double a1)
{
  *(_BYTE *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_isValid) = 1;
  double v2 = *(double *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_minValue);
  if (v2 > a1) {
    double v2 = a1;
  }
  *(double *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_minValue) = v2;
  double v3 = *(double *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_maxValue);
  if (v3 <= a1) {
    double v3 = a1;
  }
  *(double *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_maxValue) = v3;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_avgCount);
  BOOL v5 = __OFADD__(v4, 1LL);
  uint64_t v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_avgCount) = v6;
    *(double *)(v1 + OBJC_IVAR____TtC9appstored10Throughput_avgValue) = *(double *)(v1
                                                                                  + OBJC_IVAR____TtC9appstored10Throughput_avgValue)
                                                                      + (a1
                                                                       - *(double *)(v1
                                                                                   + OBJC_IVAR____TtC9appstored10Throughput_avgValue))
                                                                      / (double)v6;
  }

id sub_1000191E4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for Throughput();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Throughput()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored10Throughput);
}

void sub_100019234()
{
}

void sub_10001928C()
{
}

xpc_object_t sub_1000193C0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  xpc_object_t result = xpc_copy(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001940C()
{
  uint64_t v1 = *(uint64_t (**)(void))((swift_isaMask & *v0) + 0x58LL);
  uint64_t result = v1();
  if ((v4 & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  if (v3 == 0x7FFFFFFFFFFFFFFFLL)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  uint64_t result = ((uint64_t (*)(uint64_t))v1)(result);
  if ((v5 & 1) != 0)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  if (!result) {
LABEL_9:
  }
    __break(1u);
  return result;
}

id sub_1000194A8()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivityClass();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ActivityClass()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored13ActivityClass);
}

double sub_1000194F8()
{
  xmmword_100458B80 = v7;
  *(_OWORD *)&qword_100458B90 = v8;
  xmmword_100458BA0 = v9;
  xmmword_100458B40 = v3;
  *(_OWORD *)&qword_100458B50 = v4;
  xmmword_100458B60 = v5;
  *(_OWORD *)&qword_100458B70 = v6;
  xmmword_100458B00 = v1[0];
  *(_OWORD *)&qword_100458B10 = v1[1];
  double result = *(double *)&v2;
  xmmword_100458B20 = v1[2];
  *(_OWORD *)&qword_100458B30 = v2;
  return result;
}

uint64_t sub_100019550@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = String.init(cString:)(XPC_ACTIVITY_INTERVAL);
  uint64_t v4 = v3;
  uint64_t v5 = String.init(cString:)(XPC_ACTIVITY_REPEATING);
  uint64_t v7 = v6;
  uint64_t v8 = String.init(cString:)(XPC_ACTIVITY_DELAY);
  uint64_t v10 = v9;
  uint64_t v11 = String.init(cString:)(XPC_ACTIVITY_GRACE_PERIOD);
  uint64_t v13 = v12;
  uint64_t v14 = String.init(cString:)(XPC_ACTIVITY_PRIORITY);
  uint64_t v42 = v15;
  uint64_t v16 = String.init(cString:)(XPC_ACTIVITY_ALLOW_BATTERY);
  uint64_t v40 = v17;
  uint64_t v41 = v16;
  uint64_t v18 = String.init(cString:)(XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP);
  uint64_t v38 = v19;
  uint64_t v39 = v18;
  uint64_t result = XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY;
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v21 = String.init(cString:)(XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY);
  uint64_t v36 = v22;
  uint64_t v37 = v21;
  uint64_t result = XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY;
  if (!XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v34 = v14;
  uint64_t v35 = v13;
  uint64_t v23 = v11;
  uint64_t v24 = v10;
  uint64_t v25 = v7;
  uint64_t v26 = v4;
  uint64_t v32 = String.init(cString:)(XPC_ACTIVITY_REQUIRE_INEXPENSIVE_NETWORK_CONNECTIVITY);
  uint64_t v33 = v27;
  uint64_t result = XPC_ACTIVITY_EXPECTED_DURATION;
  if (!XPC_ACTIVITY_EXPECTED_DURATION)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }

  uint64_t v29 = String.init(cString:)(XPC_ACTIVITY_EXPECTED_DURATION);
  uint64_t result = XPC_ACTIVITY_SHOULD_WAKE_DEVICE;
  if (XPC_ACTIVITY_SHOULD_WAKE_DEVICE)
  {
    uint64_t v30 = v28;
    uint64_t result = String.init(cString:)(XPC_ACTIVITY_SHOULD_WAKE_DEVICE);
    *a1 = v2;
    a1[1] = v26;
    a1[2] = v5;
    a1[3] = v25;
    a1[4] = v8;
    a1[5] = v24;
    a1[6] = v23;
    a1[7] = v35;
    a1[8] = v34;
    a1[9] = v42;
    a1[10] = v41;
    a1[11] = v40;
    a1[12] = v39;
    a1[13] = v38;
    a1[14] = v37;
    a1[15] = v36;
    a1[16] = v32;
    a1[17] = v33;
    a1[18] = v29;
    a1[19] = v30;
    a1[20] = result;
    a1[21] = v31;
    return result;
  }

LABEL_9:
  __break(1u);
  return result;
}

  sub_1000744FC(v2);
  return v3;
}

    uint64_t v3 = 0LL;
    goto LABEL_10;
  }

  uint64_t v3 = [v2 BOOLValue];
LABEL_10:

  return v3;
}

  return v7;
}

  return v7;
}
  }

  return a1;
}
}

    if (!v3->_applicationVariant)
    {
      uint64_t v19 = ASDErrorWithTitleAndMessage(ASDErrorDomain, 740LL, @"Missing itemID / bundleID", 0LL);
      uint64_t v20 = objc_claimAutoreleasedReturnValue(v19);
      uint64_t v9 = 0LL;
      LODWORD(v21) = 0;
      id v149 = 0;
      uint64_t v163 = 0;
LABEL_77:

      uint64_t v11 = v163;
LABEL_78:
      uint64_t v10 = v20;
      uint64_t v84 = objc_claimAutoreleasedReturnValue(-[os_log_s valueForKey:](v9, "valueForKey:", ASDManagedLookupItemID));
      uint64_t v85 = (void *)v84;
      if (!v3->_externalVersionIdentifier && (objc_opt_respondsToSelector(v84, "longLongValue") & 1) != 0)
      {
        uint64_t v86 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v85 longLongValue]));
        id v87 = v3->_externalVersionIdentifier;
        v3->_externalVersionIdentifier = (NSNumber *)v86;
      }

      id v88 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s valueForKey:](v9, "valueForKey:", ASDManagedLookupBundleID));

      if (!v3->_applicationVariant)
      {
        uint64_t v90 = objc_opt_class(&OBJC_CLASS___NSString, v89);
        if ((objc_opt_isKindOfClass(v88, v90) & 1) != 0)
        {
          uint64_t v91 = (NSString *)[v88 copy];
          uint64_t v92 = v3->_applicationVariant;
          v3->_applicationVariant = v91;
        }
      }

      sub_10024127C(v3);
      unint64_t v93 = ASDLogHandleForCategory(41LL);
      unint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
      uint64_t v95 = v94;
      if (v10)
      {
        if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
        {
          itemIdentifier = v3->_itemIdentifier;
          *(_DWORD *)id v170 = 138412546;
          *(void *)&v170[4] = itemIdentifier;
          *(_WORD *)&v170[12] = 2114;
          *(void *)&v170[14] = v10;
          _os_log_error_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_ERROR,  "[%@] Preflight error: %{public}@",  v170,  0x16u);
        }
      }

      else if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v97 = v3->_itemIdentifier;
        *(_DWORD *)id v170 = 138412802;
        *(void *)&v170[4] = v97;
        *(_WORD *)&v170[12] = 1024;
        *(_DWORD *)&v170[14] = v21;
        *(_WORD *)&v170[18] = 1024;
        *(_DWORD *)&v170[20] = v149;
        _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "[%@] Preflight complete free: %{BOOL}d owned: %{BOOL}d",  v170,  0x18u);
      }

      if (v11)
      {
        uint64_t v100 = objc_msgSend(objc_getProperty(v3, v98, 136, 1), "skipDownloads") ^ 1;
        if (!v149) {
          LOBYTE(v10_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0;
        }
        if ((v100 & 1) != 0 || objc_msgSend(objc_getProperty(v3, v99, 136, 1), "requestType") == (id)1)
        {
          char v102 = ASDLogHandleForCategory(41LL);
          id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
          if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
          {
            id v104 = v3->_itemIdentifier;
            *(_DWORD *)id v170 = 138412290;
            *(void *)&v170[4] = v104;
            _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "[%@] Using VPP endpoint for request",  v170,  0xCu);
          }

          uint64_t v12 = 1;
        }

        else
        {
          uint64_t v122 = objc_msgSend(objc_getProperty(v3, v101, 136, 1), "skipDownloads");
          if (v21) {
            unint64_t v123 = v122;
          }
          else {
            unint64_t v123 = 1;
          }
          if ((v123 & 1) != 0)
          {
            uint64_t v12 = 0;
            goto LABEL_101;
          }

          int64_t v124 = ASDLogHandleForCategory(41LL);
          uint64_t v125 = (os_log_s *)objc_claimAutoreleasedReturnValue(v124);
          if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v126 = v3->_itemIdentifier;
            *(_DWORD *)id v170 = 138412290;
            *(void *)&v170[4] = v126;
            _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEFAULT, "[%@] Purchasing free app", v170, 0xCu);
          }

          uint64_t v127 = sub_10024130C((uint64_t)v3, v9);
          uint64_t v128 = (void *)objc_claimAutoreleasedReturnValue(v127);
          [v128 setUseLocalAuthAndSystemDialogs:1];
          unint64_t v129 = v128;
          *(void *)&uint64_t v156 = 0LL;
          *((void *)&v156 + 1) = &v156;
          *(void *)&uint64_t v157 = 0x3032000000LL;
          *((void *)&v157 + 1) = sub_100245058;
          *(void *)&uint64_t v158 = sub_100245068;
          *((void *)&v158 + 1) = 0LL;
          id v130 = dispatch_semaphore_create(0LL);
          uint64_t v131 = sub_1001995C0((uint64_t)&OBJC_CLASS___PurchaseManager);
          uint64_t v132 = (void *)objc_claimAutoreleasedReturnValue(v131);
          *(void *)id v170 = _NSConcreteStackBlock;
          *(void *)&v170[8] = 3221225472LL;
          *(void *)&v170[16] = sub_1002450BC;
          id v171 = &unk_1003EE1D0;
          id v103 = (os_log_s *)v129;
          id v172 = v103;
          id v173 = 0LL;
          id v174 = v3;
          uint64_t v176 = &v156;
          uint64_t v133 = v130;
          uint64_t v175 = v133;
          sub_100199B84((uint64_t)v132, v103, v170);

          dispatch_semaphore_wait(v133, 0xFFFFFFFFFFFFFFFFLL);
          unint64_t v134 = *(id *)(*((void *)&v156 + 1) + 40LL);
          uint64_t v135 = [0 copy];

          _Block_object_dispose(&v156, 8);
          uint64_t v136 = v134;

          uint64_t v137 = ASDLogHandleForCategory(41LL);
          BOOL v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);
          uint64_t v139 = v138;
          if (v136)
          {
            if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
            {
              uint64_t v144 = v3->_itemIdentifier;
              *(_DWORD *)id v170 = 138412546;
              *(void *)&v170[4] = v144;
              *(_WORD *)&v170[12] = 2114;
              *(void *)&v170[14] = v136;
              _os_log_error_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_ERROR,  "[%@] Free purchase failed with error: %{public}@",  v170,  0x16u);
            }
          }

          else
          {
            if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
            {
              int64_t v151 = v3->_itemIdentifier;
              uint64_t v142 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v135, "componentsJoinedByString:", @", "));
              *(_DWORD *)id v170 = 138412546;
              *(void *)&v170[4] = v151;
              *(_WORD *)&v170[12] = 2114;
              *(void *)&v170[14] = v142;
              _os_log_impl( (void *)&_mh_execute_header,  v139,  OS_LOG_TYPE_DEFAULT,  "[%@] Free purchase succeeded with jobResults %{public}@",  v170,  0x16u);
            }

            int v154 = 5LL;
          }

          uint64_t v12 = 0;
          uint64_t v10 = v136;
        }
      }

      else
      {
        id v105 = ASDLogHandleForCategory(41LL);
        id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
        if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
        {
          uint64_t v141 = v3->_itemIdentifier;
          *(_DWORD *)id v170 = 138412290;
          *(void *)&v170[4] = v141;
          _os_log_error_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_ERROR,  "[%@] App is not eligible for free VPP",  v170,  0xCu);
        }

        uint64_t v12 = 0;
      }

LABEL_101:
      externalVersionIdentifier = v3->_externalVersionIdentifier;
      goto LABEL_102;
    }

  uint64_t v16 = -[NSString copyWithZone:](self->_redownloadParams, "copyWithZone:", a3);
  uint64_t v17 = *(void **)(v6 + 152);
  *(void *)(v6 + 152) = v16;

  uint64_t v18 = -[NSString copyWithZone:](self->_artworkURLString, "copyWithZone:", a3);
  uint64_t v19 = *(void **)(v6 + 56);
  *(void *)(v6 + 56) = v18;

  if ((*(_WORD *)&self->_has & 0x20) != 0)
  {
    *(_BYTE *)(v6 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = self->_containsMessagesExtension;
    *(_WORD *)(v6 + 208) |= 0x20u;
  }

  uint64_t v20 = -[NSString copyWithZone:](self->_itemName, "copyWithZone:", a3);
  uint64_t v21 = *(void **)(v6 + 96);
  *(void *)(v6 + 96) = v20;

  if ((*(_WORD *)&self->_has & 0x200) != 0)
  {
    *(_BYTE *)(v6 + 204) = self->_launchProhibited;
    *(_WORD *)(v6 + 208) |= 0x200u;
  }

  uint64_t v22 = -[NSString copyWithZone:](self->_messagesArtworkURLString, "copyWithZone:", a3);
  uint64_t v23 = *(void **)(v6 + 112);
  *(void *)(v6 + 112) = v22;

  uint64_t v24 = -[NSData copyWithZone:](self->_packageDPInfo, "copyWithZone:", a3);
  uint64_t v25 = *(void **)(v6 + 120);
  *(void *)(v6 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v24;

  uint64_t v26 = -[NSData copyWithZone:](self->_packageSINF, "copyWithZone:", a3);
  uint64_t v27 = *(void **)(v6 + 128);
  *(void *)(v6 + 128) = v26;

  uint64_t v28 = -[NSString copyWithZone:](self->_packageURLString, "copyWithZone:", a3);
  uint64_t v29 = *(void **)(v6 + 136);
  *(void *)(v6 + 136) = v28;

  uint64_t v30 = -[NSString copyWithZone:](self->_storeCohort, "copyWithZone:", a3);
  uint64_t v31 = *(void **)(v6 + 160);
  *(void *)(v6 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v30;

  uint64_t v32 = -[NSString copyWithZone:](self->_storeFront, "copyWithZone:", a3);
  uint64_t v33 = *(void **)(v6 + 168);
  *(void *)(v6 + 168) = v32;

  uint64_t v34 = -[NSString copyWithZone:](self->_vendorName, "copyWithZone:", a3);
  uint64_t v35 = *(void **)(v6 + 192);
  *(void *)(v6 + 192) = v34;

  uint64_t v54 = 0u;
  unint64_t v55 = 0u;
  __int128 v52 = 0u;
  char v53 = 0u;
  uint64_t v36 = self->_provisioningProfiles;
  uint64_t v37 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v36,  "countByEnumeratingWithState:objects:count:",  &v52,  v56,  16LL);
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v39 = *(void *)v53;
    do
    {
      for (i = 0LL; i != v38; i = (char *)i + 1)
      {
        if (*(void *)v53 != v39) {
          objc_enumerationMutation(v36);
        }
        uint64_t v41 = objc_msgSend(*(id *)(*((void *)&v52 + 1) + 8 * (void)i), "copyWithZone:", a3, (void)v52);
        sub_100269690(v6, v41);
      }

      uint64_t v38 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v36,  "countByEnumeratingWithState:objects:count:",  &v52,  v56,  16LL);
    }

    while (v38);
  }

  uint64_t v42 = -[NSString copyWithZone:](self->_variantID, "copyWithZone:", a3);
  uint64_t v43 = *(void **)(v6 + 184);
  *(void *)(v6 + 184) = v42;

  uint64_t v44 = (__int16)self->_has;
  if ((v44 & 0x400) != 0)
  {
    *(_BYTE *)(v6 + 205) = self->_skipIfInstalled;
    *(_WORD *)(v6 + 208) |= 0x400u;
    uint64_t v44 = (__int16)self->_has;
    if ((v44 & 0x40) == 0)
    {
LABEL_22:
      if ((v44 & 0x100) == 0) {
        goto LABEL_23;
      }
      goto LABEL_33;
    }
  }

  else if ((v44 & 0x40) == 0)
  {
    goto LABEL_22;
  }

  *(_BYTE *)(v6 + 201) = self->_isBeta;
  *(_WORD *)(v6 + 208) |= 0x40u;
  uint64_t v44 = (__int16)self->_has;
  if ((v44 & 0x100) == 0)
  {
LABEL_23:
    if ((v44 & 0x80) == 0) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }

      uint64_t v17 = self->_statement;
      uint64_t v9 = (const char *)-[__CFString UTF8String](theString, "UTF8String");
      statement = v17;
      uint64_t v11 = a4;
      uint64_t v12 = -1LL;
      goto LABEL_10;
    }

    CharactersPtr = CFStringGetCharactersPtr(theString);
    if (!CharactersPtr) {
      goto LABEL_9;
    }
    uint64_t v14 = CharactersPtr;
    uint64_t v15 = self->_statement;
    Length = CFStringGetLength(theString);
    sqlite3_bind_text16(v15, a4, v14, 2 * Length, 0LL);
  }

  else
  {
    +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Statement already finalized");
  }

    uint64_t v27 = 0LL;
    goto LABEL_10;
  }

    uint64_t v7 = 0LL;
    switch(sqlite3_column_type(v3[6], a2))
    {
      case 1:
        uint64_t v8 = +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  sqlite3_column_int64(v4[6], a2));
        uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);
        goto LABEL_14;
      case 2:
        uint64_t v11 = +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  sqlite3_column_double(v4[6], a2));
        uint64_t v9 = objc_claimAutoreleasedReturnValue(v11);
        goto LABEL_14;
      case 3:
        goto LABEL_11;
      case 5:
        goto LABEL_15;
      default:
        goto LABEL_13;
    }

    goto LABEL_15;
  }

  switch(*((_BYTE *)v3[2] + a2))
  {
    case 0:
      goto LABEL_9;
    case 1:
      uint64_t v5 = sqlite3_column_type(v3[6], a2);
      if (v5 == 1)
      {
        uint64_t v6 = (double)sqlite3_column_int64(v4[6], a2);
      }

      else
      {
        if (v5 != 2)
        {
LABEL_16:
          uint64_t v7 = 0LL;
          break;
        }

        uint64_t v6 = sqlite3_column_double(v4[6], a2);
      }

      uint64_t v9 = objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v6));
      goto LABEL_14;
    case 2:
      uint64_t v14 = sub_1002E7160(v3, a2);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      if (v15)
      {
        uint64_t v25 = 0LL;
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v15,  0LL,  &v25));
        uint64_t v17 = v25;
        if (v16) {
          goto LABEL_31;
        }
        uint64_t v18 = ASDLogHandleForCategory(35LL);
        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[sqlite3_stmt objectAtIndexedSubscript:](v4[5], "objectAtIndexedSubscript:", a2));
          *(_DWORD *)buf = 138543618;
          uint64_t v27 = v24;
          uint64_t v28 = 2114;
          uint64_t v29 = v17;
        }
      }

      else
      {
        uint64_t v17 = 0LL;
      }

      uint64_t v16 = 0LL;
LABEL_31:
      uint64_t v7 = v16;

      break;
    case 3:
      uint64_t v20 = sub_1002E7328(v3, a2);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      if (!v21) {
        goto LABEL_27;
      }
      uint64_t v22 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v21);
      goto LABEL_26;
    case 4:
      uint64_t v23 = sub_1002E7328(v3, a2);
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v23);
      if (v21)
      {
        uint64_t v22 = (NSUUID *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v21));
LABEL_26:
        uint64_t v7 = v22;
      }

      else
      {
LABEL_27:
        uint64_t v7 = 0LL;
      }

      break;
    case 5:
LABEL_11:
      uint64_t v10 = sub_1002E7328(v4, a2);
      uint64_t v9 = objc_claimAutoreleasedReturnValue(v10);
      goto LABEL_14;
    default:
      goto LABEL_16;
  }
    }
  }

  return v9;
}
}

  return v4;
}

  uint64_t v20 = objc_getProperty(v6, v17, 112LL, 1);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v20, @"bundle_version");

  uint64_t v22 = objc_getProperty(v6, v21, 208LL, 1);
LABEL_10:
  uint64_t v23 = v22;
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v23, @"item_id");

  if (v6)
  {
    uint64_t v25 = objc_getProperty(v6, v24, 144LL, 1);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v25, @"evid");

    uint64_t v27 = objc_getProperty(v6, v26, 56LL, 1);
  }

  else
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", 0LL, @"evid");
    uint64_t v27 = 0LL;
  }

  uint64_t v28 = v27;
  if ([v28 length])
  {
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v28));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v30, @"artwork_url");
  }

  if (v6) {
    uint64_t v31 = objc_getProperty(v6, v29, 232LL, 1);
  }
  else {
    uint64_t v31 = 0LL;
  }
  uint64_t v32 = v31;
  if ([v32 length])
  {
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v32));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v34,  @"messages_artwork_url");
  }

  if (v6)
  {
    if ((v6[1] & 1) != 0) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  &off_10040D498,  @"automatic_type");
    }
    uint64_t v35 = objc_getProperty(v6, v33, 40LL, 1);
  }

  else
  {
    uint64_t v35 = 0LL;
  }

  uint64_t v36 = v35;
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v36, @"receipt");

  if (v6) {
    uint64_t v37 = *((_BYTE *)v6 + 17) & 1;
  }
  else {
    uint64_t v37 = 0LL;
  }
  uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v37));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v38,  @"launch_prohibited");

  if (v6)
  {
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *((_BYTE *)v6 + 11) & 1));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v39,  @"has_messages_extension");

    uint64_t v41 = objc_getProperty(v6, v40, 304LL, 1);
  }

  else
  {
    int64_t v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v68,  @"has_messages_extension");

    uint64_t v41 = 0LL;
  }

  uint64_t v42 = v41;
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v42, @"transaction_id");

  if (v6)
  {
    uint64_t v44 = objc_getProperty(v6, v43, 120LL, 1);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v44,  @"cancel_download_url");

    if ((*((_BYTE *)v6 + 12) & 1) != 0)
    {
      if ((*((_BYTE *)v6 + 14) & 1) != 0)
      {
        uint64_t v45 = &off_10040D4B0;
      }

      else if ((*((_BYTE *)v6 + 13) & 1) != 0)
      {
        uint64_t v45 = &off_10040D4C8;
      }

      else
      {
        uint64_t v45 = &off_10040D498;
      }
    }

    else
    {
      uint64_t v45 = &off_10040D480;
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v45, @"watch_type");
    uint64_t v46 = *((_BYTE *)v6 + 19) & 1;
  }

  else
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  0LL,  @"cancel_download_url");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  &off_10040D480,  @"watch_type");
    uint64_t v46 = 0LL;
  }

  unint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v46));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v47,  @"supports_32bit_only");

  if (v6)
  {
    unint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *((_BYTE *)v6 + 18) & 1));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v48, @"redownload");

    uint64_t v50 = objc_getProperty(v6, v49, 312LL, 1);
  }

  else
  {
    char v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v69, @"redownload");

    uint64_t v50 = 0LL;
  }

  uint64_t v51 = v50;
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v51, @"store_cohort");

  if (v6)
  {
    char v53 = objc_getProperty(v6, v52, 296LL, 1);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v53, @"storefront");

    unint64_t v55 = objc_getProperty(v6, v54, 48LL, 1);
  }

  else
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", 0LL, @"storefront");
    unint64_t v55 = 0LL;
  }

  unint64_t v56 = v55;
  -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v56, @"vendor_name");

  if (v6) {
    uint64_t v57 = v6[36];
  }
  else {
    uint64_t v57 = 0LL;
  }
  unint64_t v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v57));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v58,  @"software_platform");

  [a1 setValuesWithDictionary:v7];
  __int128 v59 = -[NSMutableArray initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableArray), "initWithCapacity:", 2LL);
  uint64_t v70 = 0u;
  uint64_t v71 = 0u;
  unint64_t v72 = 0u;
  uint64_t v73 = 0u;
  __int128 v60 = v5;
  __int128 v61 = [v60 countByEnumeratingWithState:&v70 objects:v74 count:16];
  if (v61)
  {
    __int128 v62 = v61;
    __int128 v63 = *(void *)v71;
    do
    {
      for (i = 0LL; i != v62; i = (char *)i + 1)
      {
        if (*(void *)v71 != v63) {
          objc_enumerationMutation(v60);
        }
        uint64_t v65 = sub_1001915A4(objc_alloc(&OBJC_CLASS___AppPackage), *(void **)(*((void *)&v70 + 1) + 8LL * (void)i));
        if (v65) {
          -[NSMutableArray addObject:](v59, "addObject:", v65, (void)v70);
        }
      }

      __int128 v62 = [v60 countByEnumeratingWithState:&v70 objects:v74 count:16];
    }

    while (v62);
  }

  BOOL v66 = -[NSMutableArray copy](v59, "copy");
  uint64_t v67 = (void *)a1[5];
  a1[5] = v66;

LABEL_51:
}

Swift::Int sub_100019710()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100019754()
{
}

Swift::Int sub_10001977C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t *sub_1000197BC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result;
  BOOL v3 = (unint64_t)*result > 2;
  *(void *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

uint64_t sub_1000198F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  swift_retain(v7);
  v8(a2, a3, a4);
  return swift_release(v7);
}

uint64_t *sub_100019A2C@<X0>(uint64_t *result@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3 = *result;
  if (*result)
  {
    uint64_t v4 = result[1];
    uint64_t v5 = swift_allocObject(&unk_1003DCAB8, 32LL, 7LL);
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t result = (uint64_t *)swift_retain(v4);
    uint64_t v6 = sub_10001B688;
  }

  else
  {
    uint64_t v6 = 0LL;
    uint64_t v5 = 0LL;
  }

  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return result;
}

uint64_t sub_100019AA0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v6 = swift_allocObject(&unk_1003DCA18, 32LL, 7LL);
    *(void *)(v6 + 16) = a2;
    *(void *)(v6 + 24) = a3;
    uint64_t v7 = swift_allocObject(&unk_1003DCA40, 32LL, 7LL);
    uint64_t v8 = sub_10001B688;
    *(void *)(v7 + 16) = sub_10001B688;
    *(void *)(v7 + 24) = v6;
    swift_retain(v6);
    uint64_t v9 = sub_10001B68C;
  }

  else
  {
    uint64_t v9 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = 0LL;
    uint64_t v6 = 0LL;
  }

  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  sub_10001B678(a2, a3);
  sub_10001527C(v10, v11);
  uint64_t result = sub_10001527C((uint64_t)v8, v6);
  *a1 = (uint64_t)v9;
  a1[1] = v7;
  return result;
}

uint64_t sub_100019B8C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for CancellationError(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(_BYTE *)(a1 + 16) == 2 && (*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    uint64_t v12 = *(void **)a1;
    sub_10001AB3C(v12, 1);
    uint64_t v10 = sub_1000079A0(&qword_100459B50);
    uint64_t result = swift_dynamicCast(v8, &v12, v10, v4, 6LL);
    char v9 = result;
    if ((_DWORD)result) {
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }

  else
  {
    char v9 = 0;
  }

  *a2 = v9;
  return result;
}

uint64_t sub_100019C7C( char *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr, os_unfair_lock_s *))
{
  uint64_t v4 = *(os_unfair_lock_s **)&a1[OBJC_IVAR____TtC9appstored12AssetPromise_state];
  uint64_t v5 = v4 + 4;
  uint64_t v6 = v4 + 9;
  uint64_t v7 = a1;
  os_unfair_lock_lock(v6);
  a3(&v10, v5);
  os_unfair_lock_unlock(v6);
  uint64_t v8 = v10;

  return v8;
}

uint64_t sub_100019CFC@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 16) == 2;
  return result;
}

id sub_100019D10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  ObjectType = (objc_class *)swift_getObjectType(v3, a2);
  uint64_t v8 = OBJC_IVAR____TtC9appstored12AssetPromise__progress;
  uint64_t v9 = sub_1000079A0(&qword_100458C48);
  uint64_t v10 = swift_allocObject(v9, 36LL, 7LL);
  *(void *)(v10 + 16) = 0LL;
  *(void *)(v10 + 24) = 0LL;
  *(_DWORD *)(v10 + 32) = 0;
  *(void *)&v3[v8] = v10;
  uint64_t v11 = &v3[OBJC_IVAR____TtC9appstored12AssetPromise_requestID];
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a1, v12);
  uint64_t v14 = sub_1000079A0(&qword_100458C50);
  uint64_t v15 = swift_allocObject(v14, 40LL, 7LL);
  *(_DWORD *)(v15 + 36) = 0;
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  *(_BYTE *)(v15 + 32) = 0;
  *(void *)&v3[OBJC_IVAR____TtC9appstored12AssetPromise_state] = v15;
  v18.receiver = v3;
  v18.super_class = ObjectType;
  id v16 = objc_msgSendSuper2(&v18, "init");
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  return v16;
}

void sub_100019EC4(void *a1, char a2, void (*a3)(id))
{
  uint64_t v6 = type metadata accessor for CancellationError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v19 = a1;
    swift_errorRetain(a1, v8);
    swift_errorRetain(a1, v11);
    uint64_t v12 = sub_1000079A0(&qword_100459B50);
    if (swift_dynamicCast(v10, &v19, v12, v6, 6LL))
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
      uint64_t v14 = v13;
      id v15 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v16 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v14);
      id v17 = [v15 initWithDomain:v16 code:3072 userInfo:0];

      a3(v17);
      sub_10001AB88(a1, 1);
    }

    else
    {
      a3(a1);
      sub_10001AB88(a1, 1);
    }
  }

void sub_10001A034(void *a1, char a2, void (*a3)(void *, id))
{
  uint64_t v6 = type metadata accessor for CancellationError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v21 = a1;
    swift_errorRetain(a1, v8);
    swift_errorRetain(a1, v12);
    uint64_t v13 = sub_1000079A0(&qword_100459B50);
    if (swift_dynamicCast(v10, &v21, v13, v6, 6LL))
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
      uint64_t v16 = v15;
      id v17 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v18 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v16);
      id v19 = [v17 initWithDomain:v18 code:3072 userInfo:0];

      a3(0LL, v19);
      sub_10001AB88(a1, 1);
    }

    else
    {
      swift_errorRetain(a1, v14);
      a3(0LL, a1);
      sub_10001AB88(a1, 1);
      sub_10001AB88(a1, 1);
    }
  }

  else
  {
    id v11 = a1;
    a3(a1, 0LL);
    sub_10001AB88(a1, 0);
  }

void sub_10001A1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

void sub_10001A24C(void *a1, char a2, void (*a3)(void *))
{
  if ((a2 & 1) == 0)
  {
    a3(a1);
    sub_10001AB88(a1, 0);
  }

void sub_10001A29C(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  id v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_10001A384(void *a1, char a2)
{
  int v4 = a2 & 1;
  uint64_t v5 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC9appstored12AssetPromise_state);
  uint64_t v6 = (uint64_t)&v5[4];
  id v7 = v5 + 9;
  os_unfair_lock_lock(v5 + 9);
  sub_10001A7AC(v6, a1, v4, &v14);
  os_unfair_lock_unlock(v7);
  uint64_t v8 = v14;
  uint64_t v9 = v14[2];
  if (v9)
  {
    swift_bridgeObjectRetain(v14);
    uint64_t v10 = v8 + 5;
    do
    {
      uint64_t v12 = (void (*)(void **))*(v10 - 1);
      uint64_t v11 = *v10;
      uint64_t v14 = a1;
      BOOL v15 = v4 != 0;
      swift_retain(v11);
      v12(&v14);
      swift_release(v11);
      v10 += 2;
      --v9;
    }

    while (v9);
    swift_bridgeObjectRelease(v8);
  }

  return swift_bridgeObjectRelease(v8);
}

void sub_10001A504(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = sub_1000079A0(&qword_100458488);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(char **)a1;
  uint64_t v14 = *(void *)(a1 + 8);
  if (!*(_BYTE *)(a1 + 16))
  {
    uint64_t v19 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))(v12, 1LL, 1LL, v19);
    uint64_t v20 = (void *)swift_allocObject(&unk_1003DC8D8, 56LL, 7LL);
    v20[2] = 0LL;
    v20[3] = 0LL;
    v20[4] = v13;
    v20[5] = v14;
    v20[6] = a2;
    sub_10001AB0C(v13, v14, 0);
    id v21 = a2;
    uint64_t v22 = sub_10004DA7C((uint64_t)v12, (uint64_t)&unk_100458C38, (uint64_t)v20);
    swift_release(v22);
    uint64_t v23 = sub_1000079A0(&qword_100458C40);
    uint64_t v24 = swift_allocObject(v23, 48LL, 7LL);
    *(_OWORD *)(v24 + 16) = xmmword_100372930;
    uint64_t v25 = swift_allocObject(&unk_1003DC900, 32LL, 7LL);
    *(void *)(v25 + 16) = a3;
    *(void *)(v25 + 24) = a4;
    *(void *)(v24 + 32) = sub_10001B4D0;
    *(void *)(v24 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v25;
    swift_retain(a4);
    sub_10001AB58(v13, v14, 0);
    *(void *)a1 = v24;
LABEL_9:
    *(void *)(a1 + 8) = 0LL;
    *(_BYTE *)(a1 + 16) = 1;
    *(void *)a5 = 0LL;
    *(_BYTE *)(a5 + 8) = -1;
    return;
  }

  if (*(_BYTE *)(a1 + 16) == 1)
  {
    uint64_t v15 = swift_allocObject(&unk_1003DC8B0, 32LL, 7LL);
    *(void *)(v15 + 16) = a3;
    *(void *)(v15 + 24) = a4;
    swift_retain(a4);
    if ((swift_isUniquelyReferenced_nonNull_native(v13) & 1) == 0) {
      uint64_t v13 = sub_100088984(0LL, *((void *)v13 + 2) + 1LL, 1, v13);
    }
    unint64_t v17 = *((void *)v13 + 2);
    unint64_t v16 = *((void *)v13 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v13 = sub_100088984((char *)(v16 > 1), v17 + 1, 1, v13);
    }
    *((void *)v13 + 2) = v17 + 1;
    NSString v18 = &v13[16 * v17];
    *((void *)v18 + 4) = sub_10001B4D0;
    *((void *)v18 + 5) = v15;
    *(void *)a1 = v13;
    goto LABEL_9;
  }

  *(void *)a5 = v13;
  *(_BYTE *)(a5 + 8) = v14 & 1;
  sub_10001AB3C(v13, v14 & 1);
}

uint64_t sub_10001A75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  return swift_task_switch(sub_10001A778, 0LL, 0LL);
}

uint64_t sub_10001A778()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10001A7AC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = *(void **)a1;
  if (!*(_BYTE *)(a1 + 16))
  {
    sub_10001AB58(v8, *(void *)(a1 + 8), 0);
    uint64_t v8 = &_swiftEmptyArrayStorage;
LABEL_4:
    *(void *)a1 = a2;
    *(void *)(a1 + 8) = a3 & 1;
    *(_BYTE *)(a1 + 16) = 2;
    *a4 = v8;
    return sub_10001AB3C(a2, a3 & 1);
  }

  if (*(_BYTE *)(a1 + 16) == 1) {
    goto LABEL_4;
  }
  id result = (id)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000002ELL,  0x8000000100342FD0LL,  "appstored/AssetPromise.swift",  28LL,  2LL,  162LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10001A918()
{
  return type metadata accessor for AssetPromise(0LL);
}

uint64_t type metadata accessor for AssetPromise(uint64_t a1)
{
  uint64_t result = qword_100458C18;
  if (!qword_100458C18) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AssetPromise);
  }
  return result;
}

uint64_t sub_10001A95C(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void *initializeBufferWithCopyOfBuffer for AssetPromise.ProgressWrapper(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for AssetPromise.ProgressWrapper(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 8));
}

void *assignWithCopy for AssetPromise.ProgressWrapper(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for AssetPromise.ProgressWrapper(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetPromise.ProgressWrapper(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetPromise.ProgressWrapper(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AssetPromise.ProgressWrapper()
{
  return &type metadata for AssetPromise.ProgressWrapper;
}

id sub_10001AB0C(id result, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 2:
      return sub_10001AB3C(result, a2 & 1);
    case 1:
      return (id)swift_bridgeObjectRetain(result);
    case 0:
      return (id)swift_retain(a2);
  }

  return result;
}

id sub_10001AB3C(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

void destroy for AssetPromise.State(uint64_t a1)
{
}

void sub_10001AB58(void *a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 2:
      sub_10001AB88(a1, a2 & 1);
      break;
    case 1:
      swift_bridgeObjectRelease(a1);
      break;
    case 0:
      swift_release(a2);
      break;
  }

void sub_10001AB88(void *a1, char a2)
{
  if ((a2 & 1) != 0) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t _s9appstored12AssetPromiseC5StateOwCP_0(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10001AB0C(*(id *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AssetPromise.State(uint64_t a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_10001AB0C(*(id *)a2, v4, v5);
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_10001AB58(v6, v7, v8);
  return a1;
}

__n128 initializeWithTake for AssetPromise.State(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for AssetPromise.State(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_10001AB58(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AssetPromise.State(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AssetPromise.State(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_10001AD14(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_10001AD1C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AssetPromise.State()
{
  return &type metadata for AssetPromise.State;
}

unint64_t sub_10001AD34()
{
  unint64_t result = qword_100458C28;
  if (!qword_100458C28)
  {
    uint64_t v1 = type metadata accessor for CancellationError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for CancellationError, v1);
    atomic_store(result, &qword_100458C28);
  }

  return result;
}

uint64_t sub_10001AD7C(char *a1, void (**a2)(void, void))
{
  uint64_t v4 = type metadata accessor for CancellationError(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = swift_allocObject(&unk_1003DC978, 24LL, 7LL);
  *(void *)(v8 + 16) = a2;
  uint64_t v9 = swift_allocObject(&unk_1003DC9A0, 32LL, 7LL);
  *(void *)(v9 + 16) = sub_10001B5EC;
  *(void *)(v9 + 24) = v8;
  uint64_t v10 = *(os_unfair_lock_s **)&a1[OBJC_IVAR____TtC9appstored12AssetPromise_state];
  uint64_t v11 = (uint64_t)&v10[4];
  uint64_t v12 = v10 + 9;
  swift_retain_n(v8, 2LL);
  _Block_copy(a2);
  os_unfair_lock_lock(v12);
  sub_10001A504(v11, a1, (uint64_t)sub_10001B62C, v9, (uint64_t)&v27);
  os_unfair_lock_unlock(v12);
  unsigned __int8 v13 = v28;
  if (v28 != 255)
  {
    uint64_t v14 = v27;
    if ((v28 & 1) != 0)
    {
      sub_10001AB3C(v27, 1);
      swift_errorRetain(v14, v15);
      swift_errorRetain(v14, v16);
      uint64_t v17 = sub_1000079A0(&qword_100459B50);
      if ((swift_dynamicCast(v7, &v27, v17, v4, 6LL) & 1) == 0)
      {
        uint64_t v24 = (void *)_convertErrorToNSError(_:)(v14);
        ((void (**)(void, void *))a2)[2](a2, v24);

        sub_10001B4B8(v14, v13);
        sub_10001B4B8(v14, v13);
        sub_10001AB88(v14, 1);
        goto LABEL_7;
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
      uint64_t v19 = v18;
      id v20 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v19);
      id v22 = [v20 initWithDomain:v21 code:3072 userInfo:0];

      uint64_t v23 = (void *)_convertErrorToNSError(_:)(v22);
      ((void (**)(void, void *))a2)[2](a2, v23);

      sub_10001B4B8(v14, v13);
      sub_10001B4B8(v14, v13);
    }

    sub_10001B4B8(v14, v13);
  }

LABEL_7:
  swift_release(v8);
  swift_release(v9);
  return swift_release(v8);
}

  uint64_t v16 = sub_10001D1C8(v12, v13, a5);
  swift_bridgeObjectRelease(v11);
  return v16;
}

  uint64_t v14 = a4(v10, v11, a3);
  swift_bridgeObjectRelease(v9);
  return v14;
}

  if (!a4)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v11 = a4 + 40 * v4;
  if (v11 < a2 + 40 * v9 && v11 + 40 * v9 > a2) {
    goto LABEL_29;
  }
  sub_1000079A0(&qword_10045A6E0);
  unint64_t result = swift_arrayInitWithCopy(a2);
LABEL_13:
  if (v5 >= v7 || v8 < 1) {
    return result;
  }
  if (!v10)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    uint64_t v17 = 2;
    unint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v17,  1092LL,  0);
    __break(1u);
    return result;
  }

  uint64_t v15 = a2 + 40 * v9;
  if (v15 + 40 * v8 > v10 && v15 < v10 + 40 * v8) {
    goto LABEL_29;
  }
  sub_1000079A0(&qword_10045A6E0);
  return swift_arrayInitWithCopy(v15);
}

  return v9;
}
}

  return v9;
}

LABEL_8:
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    goto LABEL_9;
  }

  if (*(void *)(a1 + 56) != 1LL) {
    goto LABEL_8;
  }
  uint64_t v14 = objc_autoreleasePoolPush();
  uint64_t v15 = objc_alloc(&OBJC_CLASS___LSApplicationRecord);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleID]);
  uint64_t v17 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( v15,  "initWithBundleIdentifier:allowPlaceholder:error:",  v16,  0LL,  0LL);

  uint64_t v18 = sub_100325D20(v17, 1LL);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  id v20 = v19;
  if (v19)
  {
    NSString v21 = (void *)objc_claimAutoreleasedReturnValue([v19 bundleIdentifier]);
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"sms-private://app?appBundleID=%@",  v21));
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v22));

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
    LODWORD(v21) = [v24 openSensitiveURL:v23 withOptions:0];

    if ((_DWORD)v21) {
      uint64_t v25 = 0LL;
    }
    else {
      uint64_t v25 = 2LL;
    }
    (*(void (**)(void, uint64_t))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v25);
  }

  objc_autoreleasePoolPop(v14);
LABEL_9:
}

  uint64_t v10 = ASDLogHandleForCategory(26LL);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    if (v8) {
      uint64_t v14 = v8[1];
    }
    else {
      uint64_t v14 = 0LL;
    }
    uint64_t v15 = 134217984;
    uint64_t v16 = v14;
    _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Received message for unknown topic:  %ld",  (uint8_t *)&v15,  0xCu);
  }

LABEL_11:
}

  uint64_t v12 = Property;

  return v12;
}

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([a1 connection]);
  if (v7)
  {
    uint64_t v16 = sub_10024CBB0((uint64_t)&OBJC_CLASS____TtC9appstored14MediaAPIUpdate, v15, v8);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);

    uint64_t v18 = objc_claimAutoreleasedReturnValue(+[MediaAPIUpdate defaultProperties](&OBJC_CLASS____TtC9appstored14MediaAPIUpdate, "defaultProperties"));
  }

  else
  {
    uint64_t v19 = sub_10024CBB0((uint64_t)&OBJC_CLASS___AppUpdateMemoryEntity, v15, v8);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v19);

    v24[0] = @"bundle_id";
    v24[1] = @"store_item_data";
    uint64_t v18 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v24, 2LL));
  }

  id v20 = (void *)v18;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_100320474;
  v21[3] = &unk_1003F3450;
  uint64_t v23 = v7;
  id v22 = v6;
  [v17 enumerateMemoryEntitiesWithProperties:v20 usingBlock:v21];

LABEL_11:
}

void sub_10001B02C(void *a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CancellationError(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 1) != 0)
  {
    id v22 = a1;
    swift_errorRetain(a1, v8);
    swift_errorRetain(a1, v11);
    uint64_t v12 = sub_1000079A0(&qword_100459B50);
    if ((swift_dynamicCast(v10, &v22, v12, v6, 6LL) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
      uint64_t v15 = v14;
      id v16 = objc_allocWithZone(&OBJC_CLASS___NSError);
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v15);
      id v18 = [v16 initWithDomain:v17 code:3072 userInfo:0];

      uint64_t v19 = (void *)_convertErrorToNSError(_:)(v18);
      (*(void (**)(uint64_t, void, void *))(a3 + 16))(a3, 0LL, v19);

      sub_10001AB88(a1, 1);
    }

    else
    {
      swift_errorRetain(a1, v13);
      id v20 = (void *)_convertErrorToNSError(_:)(a1);
      (*(void (**)(uint64_t, void, void *))(a3 + 16))(a3, 0LL, v20);

      sub_10001AB88(a1, 1);
      sub_10001AB88(a1, 1);
    }
  }

  else
  {
    (*(void (**)(uint64_t, void *, void))(a3 + 16))(a3, a1, 0LL);
  }

uint64_t sub_10001B1F8(char *a1, const void *a2)
{
  uint64_t v4 = swift_allocObject(&unk_1003DC928, 24LL, 7LL);
  *(void *)(v4 + 16) = a2;
  uint64_t v5 = swift_allocObject(&unk_1003DC950, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_10001B5C0;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(os_unfair_lock_s **)&a1[OBJC_IVAR____TtC9appstored12AssetPromise_state];
  uint64_t v7 = (uint64_t)&v6[4];
  uint64_t v8 = v6 + 9;
  swift_retain_n(v4, 2LL);
  _Block_copy(a2);
  os_unfair_lock_lock(v8);
  sub_10001A504(v7, a1, (uint64_t)sub_10001B5C8, v5, (uint64_t)&v12);
  os_unfair_lock_unlock(v8);
  unsigned __int8 v9 = v13;
  if (v13 != 255)
  {
    uint64_t v10 = v12;
    _Block_copy(a2);
    sub_10001B5D4(v10, v9);
    sub_10001B02C(v10, v9 & 1, (uint64_t)a2);
    _Block_release(a2);
    sub_10001B4B8(v10, v9);
    sub_10001B4B8(v10, v9);
  }

  swift_release(v5);
  return swift_release_n(v4, 2LL);
}

uint64_t sub_10001B354(char *a1, void (**a2)(void, void))
{
  uint64_t v4 = swift_allocObject(&unk_1003DC860, 24LL, 7LL);
  *(void *)(v4 + 16) = a2;
  uint64_t v5 = swift_allocObject(&unk_1003DC888, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_10001B79C;
  *(void *)(v5 + 24) = v4;
  uint64_t v6 = *(os_unfair_lock_s **)&a1[OBJC_IVAR____TtC9appstored12AssetPromise_state];
  uint64_t v7 = (uint64_t)&v6[4];
  uint64_t v8 = v6 + 9;
  swift_retain_n(v4, 2LL);
  _Block_copy(a2);
  os_unfair_lock_lock(v8);
  sub_10001A504(v7, a1, (uint64_t)sub_10001B4AC, v5, (uint64_t)&v12);
  os_unfair_lock_unlock(v8);
  unsigned __int8 v9 = v13;
  if (v13 != 255)
  {
    uint64_t v10 = v12;
    if ((v13 & 1) == 0) {
      ((void (**)(void, void *))a2)[2](a2, v12);
    }
    sub_10001B4B8(v10, v9);
  }

  swift_release(v5);
  return swift_release_n(v4, 2LL);
}

uint64_t sub_10001B488()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10001B4AC(void *a1, char a2)
{
}

void sub_10001B4B8(void *a1, unsigned __int8 a2)
{
  if (a2 != 255) {
    sub_10001AB88(a1, a2 & 1);
  }
}

uint64_t sub_10001B4D4()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10001B508()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc(dword_100458C34);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100007C40;
  *(void *)(v3 + 32) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  return swift_task_switch(sub_10001A778, 0LL, 0LL);
}

uint64_t sub_10001B570()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10001B594(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

void sub_10001B5C0(uint64_t a1, uint64_t a2)
{
}

void sub_10001B5C8(void *a1, char a2)
{
}

id sub_10001B5D4(id result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_10001AB3C(result, a2 & 1);
  }
  return result;
}

void sub_10001B5EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  id v3 = (id)_convertErrorToNSError(_:)(a1);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10001B62C(void *a1, char a2)
{
}

uint64_t sub_10001B638()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_10001B648(uint64_t *a1)
{
  return sub_100019AA0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10001B660()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16LL))();
}

uint64_t sub_10001B678(uint64_t result, uint64_t a2)
{
  if (result) {
    return swift_retain(a2);
  }
  return result;
}

uint64_t sub_10001B690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(uint64_t (**)(uint64_t *, uint64_t *, uint64_t *))(v3 + 16);
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  uint64_t v6 = a3;
  return v4(&v8, &v7, &v6);
}

uint64_t sub_10001B6CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001B6DC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10001B6E4(void *a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void, void))(v3 + 16))(*a1, *a2, *a3);
}

ValueMetadata *type metadata accessor for AssetPromisePhase()
{
  return &type metadata for AssetPromisePhase;
}

unint64_t sub_10001B724()
{
  unint64_t result = qword_100458C58;
  if (!qword_100458C58)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037302C, &type metadata for AssetPromisePhase);
    atomic_store(result, (unint64_t *)&qword_100458C58);
  }

  return result;
}

uint64_t _s14BasePropertiesOwet(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }

uint64_t _s14BasePropertiesOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_10001B87C + 4 * byte_100373059[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10001B8B0 + 4 * byte_100373054[v4]))();
}

uint64_t sub_10001B8B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B8B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10001B8C0LL);
  }
  return result;
}

uint64_t sub_10001B8CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10001B8D4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_10001B8D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B8E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s14BasePropertiesOMa()
{
  return &_s14BasePropertiesON;
}

void sub_10001B8FC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

uint64_t sub_10001B934(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xEA00000000006E6FLL);
}

void sub_10001BA1C(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10001BA74()
{
  return Hasher._finalize()();
}

void sub_10001BAFC(uint64_t a1, char a2)
{
  __asm { BR              X10 }

Swift::Int sub_10001BB40()
{
  return Hasher._finalize()();
}

void sub_10001BC3C(char *a1)
{
}

void sub_10001BC48()
{
}

void sub_10001BC54(uint64_t a1)
{
}

void sub_10001BC5C(uint64_t a1)
{
}

unint64_t sub_10001BC64@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10001BDF0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10001BC90()
{
  return ((uint64_t (*)(void))((char *)sub_10001BCB8 + 4 * byte_100373072[*v0]))();
}

void sub_10001BCB8(void *a1@<X8>)
{
  *a1 = 0x6973726556707061LL;
  a1[1] = 0xEA00000000006E6FLL;
}

void sub_10001BCD8(void *a1@<X8>)
{
  *a1 = 0x7372655665736162LL;
  a1[1] = 0xEB000000006E6F69LL;
}

void sub_10001BCFC(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

void sub_10001BD20(char *a1@<X8>)
{
  a1[15] = -18;
}

void sub_10001BD48(void *a1@<X8>)
{
  *a1 = 0x656D614E736FLL;
  a1[1] = 0xE600000000000000LL;
}

void sub_10001BD60(void *a1@<X8>)
{
  *a1 = 0x6F6973726556736FLL;
  a1[1] = 0xE90000000000006ELL;
}

void sub_10001BD80(char *a1@<X8>)
{
  a1[15] = -18;
}

unint64_t sub_10001BDAC()
{
  unint64_t result = qword_100458C60;
  if (!qword_100458C60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373104, &_s14BasePropertiesON);
    atomic_store(result, (unint64_t *)&qword_100458C60);
  }

  return result;
}

unint64_t sub_10001BDF0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DB128, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8) {
    return 8LL;
  }
  else {
    return v3;
  }
}

void static Analytics.postHashMismatch(taskInfo:)(void *a1)
{
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v1);
  uint64_t v4 = swift_allocObject(&unk_1003DCC40, 24LL, 7LL);
  *(void *)(v4 + 16) = a1;
  v8[4] = sub_10001CB84;
  uint64_t v9 = v4;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256LL;
  v8[2] = sub_10001CE88;
  v8[3] = &unk_1003DCC58;
  uint64_t v5 = _Block_copy(v8);
  uint64_t v6 = v9;
  id v7 = a1;
  swift_release(v6);
  sub_10030F124(ObjCClassFromMetadata, v5, 25LL);
  _Block_release(v5);
}

void *sub_10001BEF4(void *a1)
{
  uint64_t v3 = sub_1000079A0(&qword_100458C68);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NWInterface(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v122 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v10 = sub_1001BACF4((uint64_t)a1);
  *((void *)&v129 + 1) = &type metadata for Bool;
  LOBYTE(v128) = v10 ^ 1;
  sub_100015330(&v128, v127);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  id v130 = &_swiftEmptyDictionarySingleton;
  sub_100079180(v127, 0x6361437465737361LL, 0xEA00000000006568LL, isUniquelyReferenced_nonNull_native);
  uint64_t v12 = v130;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  id v14 = sub_1001BABD8(a1, v13);
  id v15 = [v14 countOfBytesReceived];

  *((void *)&v129 + 1) = &type metadata for Int64;
  *(void *)&__int128 v128 = v15;
  sub_100015330(&v128, v127);
  char v16 = swift_isUniquelyReferenced_nonNull_native(v12);
  uint64_t v126 = v12;
  sub_100079180(v127, 0x6365527365747962LL, 0xED00006465766965LL, v16);
  id v130 = v126;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  id v18 = sub_1001BAD04(a1, v17);
  if (v18)
  {
    id v20 = v18;
    id v21 = [v18 transactionMetrics];

    uint64_t v22 = sub_10001517C(0LL, (unint64_t *)&qword_100458C70, &OBJC_CLASS___NSURLSessionTaskTransactionMetrics_ptr);
    uint64_t v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

    if ((unint64_t)v23 >> 62)
    {
      if (v23 < 0) {
        uint64_t v69 = v23;
      }
      else {
        uint64_t v69 = v23 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v23);
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v69);
      swift_bridgeObjectRelease(v23);
      if (v24)
      {
LABEL_4:
        unint64_t v25 = v24 - 1;
        if (__OFSUB__(v24, 1LL))
        {
          __break(1u);
        }

        else if ((v23 & 0xC000000000000001LL) == 0)
        {
          if ((v25 & 0x8000000000000000LL) != 0)
          {
            __break(1u);
          }

          else if (v25 < *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10))
          {
            id v26 = *(id *)(v23 + 8 * v25 + 32);
            goto LABEL_9;
          }

          __break(1u);
          goto LABEL_67;
        }

        id v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25, v23);
LABEL_9:
        uint64_t v27 = v26;
        swift_bridgeObjectRelease(v23);
        id v28 = [v27 response];
        if (!v28) {
          goto LABEL_24;
        }
        uint64_t v1 = v28;
        uint64_t v29 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse);
        uint64_t v30 = swift_dynamicCastObjCClass(v1, v29);
        if (!v30)
        {

          goto LABEL_24;
        }

        uint64_t v31 = (void *)v30;
        NSString v32 = String._bridgeToObjectiveC()();
        id v33 = [v31 valueForHTTPHeaderField:v32];

        if (v33)
        {
          int64_t v124 = v27;
          uint64_t v125 = v9;
          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
          unint64_t v36 = v35;

          *(void *)&__int128 v128 = 47LL;
          *((void *)&v128 + 1) = 0xE100000000000000LL;
          __chkstk_darwin(v37);
          *(&v122 - 2) = (uint64_t)&v128;
          unint64_t v123 = v34;
          unint64_t v38 = sub_10001CFD4(sub_10001D514, (uint64_t)(&v122 - 4), v34, v36);
          if ((v39 & 1) == 0)
          {
            unint64_t v40 = v38;
            uint64_t v41 = HIBYTE(v36) & 0xF;
            if ((v36 & 0x2000000000000000LL) == 0) {
              uint64_t v41 = v123 & 0xFFFFFFFFFFFFLL;
            }
            if (v38 >> 14 < 4 * v41)
            {
              swift_bridgeObjectRetain(v36);
              uint64_t v42 = v123;
              unint64_t v43 = String.index(after:)(v40, v123, v36);
              swift_bridgeObjectRelease(v36);
              unint64_t v44 = sub_10001D568(v43, v42, v36);
              unint64_t v46 = v45;
              unint64_t v123 = v47;
              id v15 = v48;
              swift_bridgeObjectRelease(v36);
              if ((v44 ^ v46) >> 14)
              {
                uint64_t v122 = (uint64_t)v15;
                uint64_t v49 = sub_10001D444(v44, v46, v123, (unint64_t)v15, 10LL);
                uint64_t v27 = v124;
                if ((v50 & 0x100) == 0)
                {
                  uint64_t v51 = (unsigned __int8 *)v49;
                  char v52 = v50;
                  swift_bridgeObjectRelease(v122);
                  if ((v52 & 1) != 0) {
                    goto LABEL_68;
                  }
                  goto LABEL_30;
                }

                uint64_t v66 = v122;
                uint64_t v51 = sub_10001D0D8(v44, v46, v123, v122, 10LL);
                char v68 = v67;
                swift_bridgeObjectRelease(v66);
                if ((v68 & 1) == 0)
                {
LABEL_30:
                  uint64_t v9 = v125;
                  *((void *)&v129 + 1) = &type metadata for Int;
                  *(void *)&__int128 v128 = v51;
                  goto LABEL_23;
                }

LABEL_68:
                sub_1000679D0(0x4C746E65746E6F63LL, 0xED00006874676E65LL, v127);
                sub_100015240((uint64_t)v127, (uint64_t *)&unk_1004594B0);

                uint64_t v9 = v125;
LABEL_24:
                id v56 = [v27 _interfaceName];
                if (v56)
                {
                  uint64_t v57 = v56;
                  uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
                  uint64_t v60 = v59;

                  NWInterface.init(_:)(v58, v60);
                  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
                  {

                    sub_100015240((uint64_t)v5, &qword_100458C68);
                  }

                  else
                  {
                    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
                    sub_10001CB8C();
                    uint64_t v62 = v61;
                    NSString v63 = String._bridgeToObjectiveC()();
                    swift_bridgeObjectRelease(v62);
                    *((void *)&v129 + 1) = sub_10001517C(0LL, &qword_100458C80, &OBJC_CLASS___NSString_ptr);
                    *(void *)&__int128 v128 = v63;
                    sub_100015330(&v128, v127);
                    uint64_t v64 = v130;
                    char v65 = swift_isUniquelyReferenced_nonNull_native(v130);
                    uint64_t v126 = v64;
                    sub_100079180(v127, 0x6361667265746E69LL, 0xED00006570795465LL, v65);
                    id v130 = v126;

                    swift_bridgeObjectRelease(0x8000000000000000LL);
                    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
                  }
                }

                else
                {
                }

                goto LABEL_36;
              }

        if (v9 == v51)
        {
          unint64_t v40 = v105;
        }

        else
        {
          unint64_t v40 = v105;
          if (v9 >= v58) {
            goto LABEL_143;
          }
          uint64_t v71 = &v59[2 * v9];
          uint64_t v0 = (void *)*v71;
          uint64_t v72 = v71[1];
          uint64_t v73 = *v60;
          id v74 = v60[1];
          swift_bridgeObjectRetain(v72);
          swift_bridgeObjectRetain(v74);
          if ((swift_isUniquelyReferenced_nonNull_native(v105) & 1) == 0) {
            unint64_t v40 = sub_1000800B8(v105);
          }
          id v75 = &v40[2 * v9 + 4];
          uint64_t v76 = v75[1];
          void *v75 = v73;
          v75[1] = v74;
          swift_bridgeObjectRelease(v76);
          if (v51 >= v40[2]) {
            goto LABEL_144;
          }
          uint64_t v77 = &v40[2 * v51 + 4];
          uint64_t v78 = v77[1];
          *uint64_t v77 = v0;
          v77[1] = v72;
          swift_bridgeObjectRelease(v78);
          uint64_t v112 = v40;
        }

        uint64_t v79 = __OFADD__(v9++, 1LL);
        char v39 = (void *)v107;
        if (v79) {
          goto LABEL_142;
        }
      }

              [v11 setPurchaseState:1];

              uint64_t v9 = v100;
              goto LABEL_69;
            }

            uint64_t v31 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
            if (v31)
            {
              NSString v32 = ASDErrorWithSafeUserInfo(v31);
              uint64_t v29 = (id)objc_claimAutoreleasedReturnValue(v32);
              id v33 = (void *)objc_claimAutoreleasedReturnValue([v11 account]);
              uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "ams_DSID"));
              unint64_t v35 = sub_1002EBF84((uint64_t)&OBJC_CLASS___StoreItemResponse, v29, v34);
              unint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
              [v11 setItemResponse:v36];

              goto LABEL_66;
            }

            uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v7 responseDictionary]);
            unint64_t v38 = sub_1002EB678( (uint64_t)StoreItemResponse,  v37,  (int)[v11 requireUniversal]);
            char v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
            [v11 setItemResponse:v39];

            unint64_t v40 = objc_claimAutoreleasedReturnValue([v11 temporaryBundleID]);
            if (v40)
            {
              uint64_t v41 = (void *)v40;
              uint64_t v42 = [v11 generatedVendorID];

              if (v42)
              {
                unint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationWorkspace defaultWorkspace]( &OBJC_CLASS___LSApplicationWorkspace,  "defaultWorkspace"));
                uint64_t v106 = 0u;
                uint64_t v107 = 0u;
                uint64_t v108 = 0u;
                id v109 = 0u;
                Property = (id)objc_claimAutoreleasedReturnValue([v11 itemResponse]);
                unint64_t v46 = Property;
                unint64_t v93 = v13;
                if (Property) {
                  Property = objc_getProperty(Property, v45, 56LL, 1);
                }
                unint64_t v47 = Property;

                unint64_t v48 = [v47 countByEnumeratingWithState:&v106 objects:v121 count:16];
                if (v48)
                {
                  __int16 v50 = v48;
                  uint64_t v51 = *(void *)v107;
                  char v96 = v11;
                  do
                  {
                    char v52 = 0LL;
                    do
                    {
                      if (*(void *)v107 != v51) {
                        objc_enumerationMutation(v47);
                      }
                      id v53 = *(void **)(*((void *)&v106 + 1) + 8LL * (void)v52);
                      if (v53) {
                        uint64_t v54 = objc_getProperty(*(id *)(*((void *)&v106 + 1) + 8LL * (void)v52), v49, 96LL, 1);
                      }
                      else {
                        uint64_t v54 = 0LL;
                      }
                      char v55 = v54;

                      if (v55)
                      {
                        id v56 = ASDLogHandleForCategory(25LL);
                        uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
                        if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
                        {
                          NSString v63 = objc_claimAutoreleasedReturnValue([v11 logKey]);
                          char v65 = (void *)objc_claimAutoreleasedReturnValue([v11 vendorName]);
                          uint64_t v66 = (void *)v63;
                          if (v53) {
                            char v67 = objc_getProperty(v53, v64, 96LL, 1);
                          }
                          else {
                            char v67 = 0LL;
                          }
                          char v68 = v67;
                          *(_DWORD *)buf = 138412802;
                          Swift::String v116 = v66;
                          uint64_t v117 = 2114;
                          char v118 = v65;
                          unint64_t v119 = 2114;
                          char v120 = v68;
                          _os_log_debug_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "[%@] Creating device identifier for vendor %{public}@ and bundle %{public}@",  buf,  0x20u);

                          uint64_t v6 = v101;
                          uint64_t v11 = v96;
                        }

                        uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v11 vendorName]);
                        if (v53) {
                          uint64_t v60 = objc_getProperty(v53, v58, 96LL, 1);
                        }
                        else {
                          uint64_t v60 = 0LL;
                        }
                        uint64_t v61 = v60;
                        uint64_t v62 = [v43 createDeviceIdentifierWithVendorName:v59 bundleIdentifier:v61];
                      }

                      char v52 = (char *)v52 + 1;
                    }

                    while (v50 != v52);
                    uint64_t v69 = [v47 countByEnumeratingWithState:&v106 objects:v121 count:16];
                    __int16 v50 = v69;
                  }

                  while (v69);
                }

                id v70 = ASDLogHandleForCategory(25LL);
                uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
                if (os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
                {
                  id v88 = (void *)objc_claimAutoreleasedReturnValue([v11 logKey]);
                  uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue([v11 vendorName]);
                  uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v11 temporaryBundleID]);
                  *(_DWORD *)buf = 138412802;
                  Swift::String v116 = v88;
                  uint64_t v117 = 2114;
                  char v118 = v89;
                  unint64_t v119 = 2114;
                  char v120 = v90;
                  _os_log_debug_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEBUG,  "[%@] Removing temporary device identifier for vendor %{public}@ and bundle %{public}@",  buf,  0x20u);
                }

                uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v11 vendorName]);
                uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v11 temporaryBundleID]);
                [v43 removeDeviceIdentifierForVendorName:v72 bundleIdentifier:v73];

                [v11 setTemporaryBundleID:0];
                a1 = v92;
                unsigned __int8 v13 = v93;
                uint64_t v4 = v94;
              }
            }

            id v104 = 0u;
            id v105 = 0u;
            char v102 = 0u;
            char v103 = 0u;
            id v74 = (id)objc_claimAutoreleasedReturnValue([v11 itemResponse]);
            uint64_t v76 = v74;
            if (v74) {
              id v74 = objc_getProperty(v74, v75, 56LL, 1);
            }
            uint64_t v29 = v74;

            uint64_t v77 = [v29 countByEnumeratingWithState:&v102 objects:v114 count:16];
            if (v77)
            {
              uint64_t v79 = v77;
              uint64_t v80 = *(void *)v103;
              do
              {
                uint64_t v81 = 0LL;
                do
                {
                  if (*(void *)v103 != v80) {
                    objc_enumerationMutation(v29);
                  }
                  char v82 = *(void **)(*((void *)&v102 + 1) + 8LL * (void)v81);
                  if (v82)
                  {
                    uint64_t v83 = objc_retainAutoreleasedReturnValue(objc_getProperty(*(id *)(*((void *)&v102 + 1)
                                                                                    + 8LL * (void)v81), v78, 344LL, 1));
                    if (v83)
                    {
                      uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue( +[StoreKitExternalGateway shared]( &OBJC_CLASS____TtC9appstored23StoreKitExternalGateway,  "shared"));
                      uint64_t v86 = objc_getProperty(v82, v85, 96LL, 1);
                      [v84 handleExternalPurchaseTokenInfoDictionary:v83 bundleID:v86];
                    }
                  }

                  else
                  {
                    uint64_t v83 = 0LL;
                  }

                  uint64_t v81 = (char *)v81 + 1;
                }

                while (v79 != v81);
                char v87 = [v29 countByEnumeratingWithState:&v102 objects:v114 count:16];
                uint64_t v79 = v87;
              }

              while (v87);
              uint64_t v4 = v94;
LABEL_66:
              uint64_t v5 = v95;
              uint64_t v6 = v101;
            }

            else
            {
              uint64_t v5 = v95;
            }

LABEL_89:
LABEL_99:
}

LABEL_67:
              swift_bridgeObjectRelease(v15);
              uint64_t v27 = v124;
              goto LABEL_68;
            }
          }

          swift_bridgeObjectRelease(v36);
          uint64_t v27 = v124;
          uint64_t v9 = v125;
        }

        id v53 = [v31 expectedContentLength];
        *((void *)&v129 + 1) = &type metadata for Int64;
        *(void *)&__int128 v128 = v53;
LABEL_23:
        sub_100015330(&v128, v127);
        uint64_t v54 = v130;
        char v55 = swift_isUniquelyReferenced_nonNull_native(v130);
        uint64_t v126 = v54;
        sub_100079180(v127, 0x4C746E65746E6F63LL, 0xED00006874676E65LL, v55);
        id v130 = v126;

        swift_bridgeObjectRelease(0x8000000000000000LL);
        goto LABEL_24;
      }
    }

    else
    {
      uint64_t v24 = *(void *)((v23 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v24) {
        goto LABEL_4;
      }
    }

    swift_bridgeObjectRelease(v23);
  }

    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    if (v3 < 0) {
      uint64_t v41 = v3;
    }
    else {
      uint64_t v41 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v41);
    a1 = swift_bridgeObjectRelease(v3);
  }

  if (v3 < 0) {
    id v18 = v3;
  }
  else {
    id v18 = v16;
  }
  swift_bridgeObjectRetain(v3);
  uint64_t v19 = _CocoaArrayWrapper.endIndex.getter(v18);
  swift_bridgeObjectRelease(v3);
  if (v7 != v19) {
    goto LABEL_33;
  }
LABEL_59:
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v3);
LABEL_61:
  a1 = (unint64_t)v46;
  unint64_t v38 = v46[3];
  if (v38 < 2) {
    return;
  }
  char v39 = v38 >> 1;
  uint64_t v37 = __OFSUB__(v39, v15);
  unint64_t v40 = v39 - v15;
  if (!v37)
  {
    v46[2] = v40;
    return;
  }

            goto LABEL_68;
          }
        }

        uint64_t v30 = ASDLogHandleForCategory(25LL);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)v11,  OS_LOG_TYPE_FAULT,  "Purchase finished but it was not found in the batch so dropping the response on the floor",  buf,  2u);
        }

  LOBYTE(v18) = *((_BYTE *)a3 + OBJC_IVAR___PBDataReader__error) == 0;
  return v18;
}

LABEL_36:
  id v70 = sub_1001BACE0(a1, v19);
  if (!v70) {
    goto LABEL_57;
  }
  *(void *)&__int128 v128 = v70;
  uint64_t v72 = sub_1000079A0(&qword_100459B50);
  uint64_t v73 = sub_10001517C(0LL, &qword_100458C78, &OBJC_CLASS___NSError_ptr);
  if ((swift_dynamicCast(v127, &v128, v72, v73, 6LL) & 1) == 0) {
    goto LABEL_57;
  }
  id v74 = *(void **)&v127[0];
  id v75 = [*(id *)&v127[0] domain];
  uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v75);
  uint64_t v78 = v77;

  uint64_t v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(SZExtractorErrorDomain);
  uint64_t v81 = v79;
  if (v76 != v80 || v78 != v79)
  {
    char v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v78, v80, v79, 0LL);
    swift_bridgeObjectRelease(v78);
    swift_bridgeObjectRelease(v81);
    if ((v82 & 1) != 0) {
      goto LABEL_42;
    }

LABEL_57:
    id v105 = sub_1001BACE0(a1, v71);
    if (v105
      && (*(void *)&__int128 v128 = v105,
          uint64_t v106 = sub_1000079A0(&qword_100459B50),
          uint64_t v107 = sub_10001517C(0LL, &qword_100458C78, &OBJC_CLASS___NSError_ptr),
          (swift_dynamicCast(v127, &v128, v106, v107, 6LL) & 1) != 0))
    {
      uint64_t v108 = *(void **)&v127[0];
      id v109 = [*(id *)&v127[0] domain];
      uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v109);
      uint64_t v112 = v111;

      *(void *)&__int128 v128 = v110;
      *((void *)&v128 + 1) = v112;
      v113._object = (void *)0xE900000000000028LL;
      v113._countAndFlagsBits = 0x6E776F6E6B6E552FLL;
      String.append(_:)(v113);
      *(void *)&v127[0] = [v108 code];
      v114._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object = v114._object;
      String.append(_:)(v114);
      swift_bridgeObjectRelease(object);
      v116._countAndFlagsBits = 41LL;
      v116._object = (void *)0xE100000000000000LL;
      String.append(_:)(v116);
      *((void *)&v129 + 1) = &type metadata for String;
      sub_100015330(&v128, v127);
      uint64_t v117 = v130;
      char v118 = swift_isUniquelyReferenced_nonNull_native(v130);
      uint64_t v126 = v117;
      sub_100079180(v127, 0x707954726F727265LL, 0xE900000000000065LL, v118);
      id v104 = v126;
    }

    else
    {
      *((void *)&v129 + 1) = &type metadata for String;
      *(void *)&__int128 v128 = 1701736302LL;
      *((void *)&v128 + 1) = 0xE400000000000000LL;
      sub_100015330(&v128, v127);
      unint64_t v119 = v130;
      char v120 = swift_isUniquelyReferenced_nonNull_native(v130);
      uint64_t v126 = v119;
      sub_100079180(v127, 0x707954726F727265LL, 0xE900000000000065LL, v120);
      id v104 = v126;
    }

    goto LABEL_61;
  }

  swift_bridgeObjectRelease_n(v78, 2LL);
LABEL_42:
  sub_10001CD84(v74);
  uint64_t v84 = v83;
  NSString v85 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v84);
  *((void *)&v129 + 1) = sub_10001517C(0LL, &qword_100458C80, &OBJC_CLASS___NSString_ptr);
  *(void *)&__int128 v128 = v85;
  sub_100015330(&v128, v127);
  uint64_t v86 = v130;
  char v87 = swift_isUniquelyReferenced_nonNull_native(v130);
  uint64_t v126 = v86;
  sub_100079180(v127, 0x707954726F727265LL, 0xE900000000000065LL, v87);
  id v130 = v126;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  id v88 = [v74 userInfo];
  uint64_t v89 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v88,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(SZExtractorFileOffsetErrorKey);
  uint64_t v92 = v91;
  if (*(void *)(v89 + 16) && (unint64_t v93 = sub_100023F7C(v90, v91), (v94 & 1) != 0))
  {
    sub_100016B10(*(void *)(v89 + 56) + 32 * v93, (uint64_t)&v128);
  }

  else
  {
    __int128 v128 = 0u;
    __int128 v129 = 0u;
  }

  swift_bridgeObjectRelease(v92);
  if (*((void *)&v129 + 1))
  {
    sub_100015330(&v128, v127);
    uint64_t v95 = v130;
    char v96 = swift_isUniquelyReferenced_nonNull_native(v130);
    uint64_t v126 = v95;
    sub_100079180(v127, 0x7366664F656C6966LL, 0xEA00000000007465LL, v96);
    id v130 = v126;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  else
  {
    sub_100015240((uint64_t)&v128, (uint64_t *)&unk_1004594B0);
    sub_1000679D0(0x7366664F656C6966LL, 0xEA00000000007465LL, v127);
    sub_100015240((uint64_t)v127, (uint64_t *)&unk_1004594B0);
  }

  uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(SZExtractorHashChunkIndexErrorKey);
  uint64_t v99 = v98;
  if (*(void *)(v89 + 16) && (unint64_t v100 = sub_100023F7C(v97, v98), (v101 & 1) != 0))
  {
    sub_100016B10(*(void *)(v89 + 56) + 32 * v100, (uint64_t)&v128);
  }

  else
  {
    __int128 v128 = 0u;
    __int128 v129 = 0u;
  }

  swift_bridgeObjectRelease(v89);
  swift_bridgeObjectRelease(v99);
  if (*((void *)&v129 + 1))
  {
    sub_100015330(&v128, v127);
    char v102 = v130;
    char v103 = swift_isUniquelyReferenced_nonNull_native(v130);
    uint64_t v126 = v102;
    sub_100079180(v127, 0x65646E4968736168LL, 0xE900000000000078LL, v103);
    id v104 = v126;

LABEL_61:
    swift_bridgeObjectRelease(0x8000000000000000LL);
    return v104;
  }

  sub_100015240((uint64_t)&v128, (uint64_t *)&unk_1004594B0);
  sub_1000679D0(0x65646E4968736168LL, 0xE900000000000078LL, v127);
  sub_100015240((uint64_t)v127, (uint64_t *)&unk_1004594B0);

  return v130;
}

    uint64_t v8 = 0LL;
    char v10 = 1;
    goto LABEL_39;
  }

  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  char v10 = 1;
  uint64_t v8 = v2;
LABEL_39:
  swift_bridgeObjectRelease(a2);
  if ((v10 & 1) != 0) {
    return 0LL;
  }
  else {
    return v8;
  }
}

    uint64_t v9 = 0;
    goto LABEL_37;
  }

  uint64_t v7 = sub_10007ECFC(result, a2, 10LL, (uint64_t (*)(uint64_t *, uint64_t, uint64_t))sub_10007F068);
  uint64_t v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0) {
    return 0LL;
  }
  else {
    return v7;
  }
}
            }

            uint64_t v41 = v18;
            sub_1001D114C((id *)v16);
          }

          else
          {
            uint64_t v41 = 0LL;
          }

          uint64_t v5 = v41;
          goto LABEL_39;
        }

        uint64_t v7 = sub_10020DB24((id *)objc_alloc(&OBJC_CLASS___PurchaseBatch), v6, 0LL);
        objc_initWeak((id *)location, *(id *)(a1 + 32));
        newValue[0] = _NSConcreteStackBlock;
        newValue[1] = 3221225472LL;
        newValue[2] = sub_1001D105C;
        newValue[3] = &unk_1003EBA40;
        objc_copyWeak(&v64, (id *)location);
        if (v7) {
          objc_setProperty_atomic_copy(v7, v8, newValue, 32LL);
        }
        uint64_t v61 = 0u;
        uint64_t v62 = 0u;
        uint64_t v59 = 0u;
        uint64_t v60 = 0u;
        uint64_t v9 = v6;
        char v10 = [v9 countByEnumeratingWithState:&v59 objects:v74 count:16];
        if (v10)
        {
          uint64_t v11 = *(void *)v60;
          do
          {
            for (j = 0LL; j != v10; j = (char *)j + 1)
            {
              if (*(void *)v60 != v11) {
                objc_enumerationMutation(v9);
              }
              unsigned __int8 v13 = *(void **)(*((void *)&v59 + 1) + 8LL * (void)j);
              id v14 = sub_1001995C0((uint64_t)&OBJC_CLASS___PurchaseManager);
              id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
              v55[0] = _NSConcreteStackBlock;
              v55[1] = 3221225472LL;
              v55[2] = sub_1001D113C;
              v55[3] = &unk_1003E97D0;
              id v56 = v7;
              uint64_t v57 = v5;
              uint64_t v58 = v13;
              sub_10019A95C((uint64_t)v15, v57, v13, v55);
            }

            char v10 = [v9 countByEnumeratingWithState:&v59 objects:v74 count:16];
          }

          while (v10);
        }

        objc_destroyWeak(&v64);
        objc_destroyWeak((id *)location);

LABEL_39:
        char v52 = (char *)v52 + 1;
      }

      while (v52 != v50);
      unint64_t v44 = [obj countByEnumeratingWithState:&v65 objects:v75 count:16];
      __int16 v50 = v44;
      if (!v44)
      {

        break;
      }
    }
  }
}

    uint64_t v3 = v63;
    uint64_t v6 = v60;
  }

  else
  {
    unint64_t v46 = ASDLogHandleForCategory(19LL);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
    {
      unint64_t v47 = *(void **)(*(void *)(a1 + 32) + 40LL);
      unint64_t v48 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
      *(_DWORD *)buf = 138543618;
      id v74 = v47;
      id v75 = 2114;
      uint64_t v76 = v48;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  OS_LOG_TYPE_ERROR,  "Application %{public}@ did not need repair error: %{public}@",  buf,  0x16u);
    }
  }

  return v6;
}
}

    unint64_t v40 = ASDLocalizedString(@"REVOKED_MESSAGE_PLURAL");
    char v39 = (void *)objc_claimAutoreleasedReturnValue(v40);
    NSString v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSString localizedStringWithFormat:]( &OBJC_CLASS___NSString,  "localizedStringWithFormat:",  v39,  v64));
    uint64_t v31 = 0LL;
LABEL_38:

    if (v32)
    {
      uint64_t v42 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"itms-appss://?action=lookup&ids=%@",  v32);
      unint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v42));
    }

    else
    {
      unint64_t v43 = 0LL;
    }

    else {
      unint64_t v44 = @"REVOKED_TITLE_PLURAL";
    }
    unint64_t v45 = ASDLocalizedString(v44);
    unint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
    unint64_t v47 = ASDLogHandleForCategory(14LL);
    unint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v49 = selfa->_qaVerficationRevokedApps;
      *(_DWORD *)uint64_t v80 = 138413058;
      uint64_t v81 = v49;
      char v82 = 2114;
      uint64_t v83 = v46;
      uint64_t v84 = 2114;
      NSString v85 = v63;
      uint64_t v86 = 2114;
      char v87 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "[%@] Posting revoked title: %{public}@ body: %{public}@ launchURL: %{public}@",  v80,  0x2Au);
    }

    __int16 v50 = objc_alloc_init(&OBJC_CLASS___ASDPostBulletinRequestOptions);
    [v50 setMessage:v63];
    [v50 setTitle:v46];
    [v50 setLaunchURL:v43];
    [v50 setDestinations:12];
    uint64_t v51 = -[RequestTask initForClient:withOptions:]( objc_alloc(&OBJC_CLASS___PostBulletinRequestTask),  "initForClient:withOptions:",  0LL,  v50);
    id v75 = 0LL;
    -[Task runSubTask:returningError:](selfa, "runSubTask:returningError:", v51, &v75);
    char v52 = v75;
    id v53 = ASDLogHandleForCategory(14LL);
    uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
    char v55 = v54;
    if (v52)
    {
      if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
      {
        id v56 = selfa->_qaVerficationRevokedApps;
        *(_DWORD *)uint64_t v80 = 138412546;
        uint64_t v81 = v56;
        char v82 = 2114;
        uint64_t v83 = v52;
        _os_log_error_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "[%@] Error posting. Error: %{public}@",  v80,  0x16u);
      }
    }

    else if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v57 = selfa->_qaVerficationRevokedApps;
      *(_DWORD *)uint64_t v80 = 138412290;
      uint64_t v81 = v57;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "[%@] Posting complete", v80, 0xCu);
    }
  }

  if (v16 > v34)
  {
    unint64_t v35 = objc_claimAutoreleasedReturnValue( +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  *(void *)(a1 + 56) + v34,  v16 - v34));
    unint64_t v36 = *(void *)(a1 + 32);
    uint64_t v37 = *(void **)(v36 + 72);
    *(void *)(v36 + 72) = v35;

    unint64_t v38 = ASDLogHandleForCategory(7LL);
    char v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v42 = [*(id *)(*(void *)(a1 + 32) + 72) length];
      *(_DWORD *)buf = 134217984;
      *(void *)unint64_t v46 = v42;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEBUG,  "(FairPlayStreamReader) Scratch buffer size = %lu",  buf,  0xCu);
    }
  }

  unint64_t v40 = ASDLogHandleForCategory(2LL);
  uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v43 = *(id *)&self->super._success;
    if (v43) {
      unint64_t v43 = objc_getProperty(v43, v42, 32LL, 1);
    }
    unint64_t v44 = v43;
    *(_DWORD *)buf = 138412546;
    id v56 = v44;
    uint64_t v57 = 2048;
    uint64_t v58 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "[%@]: Evaluation for download completed with result: %ld",  buf,  0x16u);
  }

  self->_cellularDownload = (EvaluatorDownload *)v6;
  -[Task completeWithSuccess](self, "completeWithSuccess");
}

    NSString v63 = ASDLogHandleForCategory(14LL);
    uint64_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
    char v65 = os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
    if (v37)
    {
      char v68 = v122;
      char v67 = v125;
      if (!v65) {
        goto LABEL_42;
      }
      uint64_t v69 = (void *)objc_opt_class(WeakRetained, v66);
      if (WeakRetained) {
        id v70 = WeakRetained[2];
      }
      else {
        id v70 = 0LL;
      }
      *(_DWORD *)buf = 138543618;
      *(void *)&buf[4] = v69;
      uint64_t v133 = 2112;
      unint64_t v134 = v70;
      uint64_t v71 = v69;
      uint64_t v72 = "[%{public}@] [%@] Failed to load the family info because we were unable to process the server response.";
      uint64_t v73 = v64;
      id v74 = 22;
    }

    else
    {
      char v68 = v122;
      char v67 = v125;
      if (!v65) {
        goto LABEL_42;
      }
      Swift::String v113 = (void *)objc_opt_class(WeakRetained, v66);
      if (WeakRetained) {
        Swift::String v114 = WeakRetained[2];
      }
      else {
        Swift::String v114 = 0LL;
      }
      *(_DWORD *)buf = 138543874;
      *(void *)&buf[4] = v113;
      uint64_t v133 = 2112;
      unint64_t v134 = v114;
      uint64_t v135 = 2114;
      uint64_t v136 = v125;
      uint64_t v71 = v113;
      uint64_t v72 = "[%{public}@] [%@] Failed to load the family info because the network call failed. error = %{public}@";
      uint64_t v73 = v64;
      id v74 = 32;
    }

    _os_log_error_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, v72, buf, v74);

LABEL_42:
    if (WeakRetained) {
      id v75 = WeakRetained[2];
    }
    else {
      id v75 = 0LL;
    }
    uint64_t v76 = sub_1002C1324((uint64_t)&OBJC_CLASS___FamilyInfoLookupTask, v36, 0, v75);
    uint64_t v27 = (id *)objc_claimAutoreleasedReturnValue(v76);
    uint64_t v77 = ASDLogHandleForCategory(14LL);
    uint64_t v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
    uint64_t v79 = os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT);
    if (v27)
    {
      if (v79)
      {
        uint64_t v81 = (void *)objc_opt_class(WeakRetained, v80);
        if (WeakRetained) {
          char v82 = WeakRetained[2];
        }
        else {
          char v82 = 0LL;
        }
        *(_DWORD *)buf = 138543618;
        *(void *)&buf[4] = v81;
        uint64_t v133 = 2112;
        unint64_t v134 = v82;
        uint64_t v83 = v81;
        _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%@] Returning cached family info.",  buf,  0x16u);
      }
    }

    else
    {
      if (v79)
      {
        uint64_t v84 = (void *)objc_opt_class(WeakRetained, v80);
        if (WeakRetained) {
          NSString v85 = WeakRetained[2];
        }
        else {
          NSString v85 = 0LL;
        }
        *(_DWORD *)buf = 138543618;
        *(void *)&buf[4] = v84;
        uint64_t v133 = 2112;
        unint64_t v134 = v85;
        uint64_t v86 = v84;
        _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%@] We failed to load the family info, and we have no cached family info to return.",  buf,  0x16u);
      }

      if (v68)
      {
        char v87 = ASDErrorWithUnderlyingError( v67,  ASDErrorDomain,  922LL,  @"Family Info Lookup Failed",  @"We failed to load the family info for the active account.");
        uint64_t v27 = 0LL;
        *char v68 = (id)objc_claimAutoreleasedReturnValue(v87);
      }

      else
      {
        uint64_t v27 = 0LL;
      }
    }

    goto LABEL_69;
  }

  uint64_t v23 = ASDLogHandleForCategory(14LL);
  uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    uint64_t v108 = (void *)objc_opt_class(WeakRetained, v25);
    if (WeakRetained) {
      id v109 = WeakRetained[2];
    }
    else {
      id v109 = 0LL;
    }
    *(_DWORD *)buf = 138543618;
    *(void *)&buf[4] = v108;
    uint64_t v133 = 2114;
    unint64_t v134 = v109;
    uint64_t v110 = v108;
    _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] AMSLoadFamilyCircleTask failed because there's no active account.",  buf,  0x16u);
  }

  if (a2)
  {
    id v26 = ASDErrorWithTitleAndMessage( ASDErrorDomain,  509LL,  @"Family Info Lookup Failed",  @"Unable load the family circle if there's no active account.");
    uint64_t v27 = 0LL;
    *a2 = (id)objc_claimAutoreleasedReturnValue(v26);
  }

  else
  {
    uint64_t v27 = 0LL;
  }

uint64_t sub_10001CB60()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void *sub_10001CB84()
{
  return sub_10001BEF4(*(void **)(v0 + 16));
}

uint64_t sub_10001CB8C()
{
  uint64_t v0 = type metadata accessor for NWInterface.InterfaceType(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  uint64_t v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)v15 - v6;
  NWInterface.type.getter(v5);
  int v8 = (*(uint64_t (**)(char *, uint64_t))(v1 + 88))(v7, v0);
  if (v8 == enum case for NWInterface.InterfaceType.other(_:)) {
    return 0x726568746FLL;
  }
  if (v8 == enum case for NWInterface.InterfaceType.wifi(_:)) {
    return 1768319351LL;
  }
  if (v8 == enum case for NWInterface.InterfaceType.cellular(_:)) {
    return 0x72616C756C6C6563LL;
  }
  if (v8 == enum case for NWInterface.InterfaceType.wiredEthernet(_:)) {
    return 0x6465726977LL;
  }
  if (v8 == enum case for NWInterface.InterfaceType.loopback(_:)) {
    return 0x6B636162706F6F6CLL;
  }
  v15[0] = 0LL;
  v15[1] = 0xE000000000000000LL;
  v10._countAndFlagsBits = 0x286E776F6E6B6E75LL;
  v10._object = (void *)0xE800000000000000LL;
  String.append(_:)(v10);
  NWInterface.type.getter(v11);
  _print_unlocked<A, B>(_:_:)( v4,  v15,  v0,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  v13._countAndFlagsBits = 41LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  uint64_t v9 = v15[0];
  v12(v7, v0);
  return v9;
}

unint64_t sub_10001CD84(void *a1)
{
  if ([a1 code] == (id)4) {
    return 0xD000000000000023LL;
  }
  if ([a1 code] == (id)2) {
    return 0xD000000000000022LL;
  }
  _StringGuts.grow(_:)(34LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  [a1 code];
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 41LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return 0xD00000000000001FLL;
}

Class sub_10001CE88(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  uint64_t v4 = v1(v3);
  swift_release(v2);
  if (v4)
  {
    v5.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    v5.super.Class isa = 0LL;
  }

  return v5.super.isa;
}

uint64_t sub_10001CEFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001CF0C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10001CFD4( uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000LL) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0LL;
  }
  uint64_t v9 = 7LL;
  if (((a4 >> 60) & ((a3 & 0x800000000000000LL) == 0)) != 0) {
    uint64_t v9 = 11LL;
  }
  unint64_t v10 = v9 | (v5 << 16);
  while (1)
  {
    unint64_t v10 = String.index(before:)(v10, a3, a4);
    uint64_t v11 = String.subscript.getter(v10, a3, a4);
    uint64_t v13 = v12;
    v17[0] = v11;
    v17[1] = v12;
    char v14 = a1(v17);
    if (v4) {
      break;
    }
    char v15 = v14;
    swift_bridgeObjectRelease(v13);
    if ((v15 & 1) != 0) {
      return v10;
    }
    if (v10 < 0x4000) {
      return 0LL;
    }
  }

  swift_bridgeObjectRelease(v13);
  return v10;
}

unsigned __int8 *sub_10001D0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  unint64_t v7 = sub_10001D5B4();
  swift_bridgeObjectRetain(a4);
  uint64_t v8 = String.init<A>(_:)(&v18, &type metadata for Substring, &protocol witness table for Substring, v7);
  uint64_t v10 = v8;
  unint64_t v11 = v9;
  if ((v9 & 0x1000000000000000LL) == 0)
  {
    if ((v9 & 0x2000000000000000LL) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v13 = HIBYTE(v11) & 0xF;
    uint64_t v18 = v10;
    uint64_t v19 = v11 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v12 = (unsigned __int8 *)&v18;
    goto LABEL_7;
  }

  uint64_t v10 = sub_10007F2E4(v8, v9);
  unint64_t v15 = v14;
  swift_bridgeObjectRelease(v11);
  unint64_t v11 = v15;
  if ((v15 & 0x2000000000000000LL) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v10 & 0x1000000000000000LL) != 0)
  {
    uint64_t v12 = (unsigned __int8 *)((v11 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v13 = v10 & 0xFFFFFFFFFFFFLL;
  }

  else
  {
    uint64_t v12 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v10, v11);
  }

unsigned __int8 *sub_10001D1C8(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }

          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }

          if (result)
          {
            uint64_t v9 = 0LL;
            for (i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  uint64_t v13 = 0LL;
                  if (v11 < 0x61 || v11 >= v8) {
                    return (unsigned __int8 *)v13;
                  }
                  char v12 = -87;
                }

                else
                {
                  char v12 = -55;
                }
              }

              else
              {
                char v12 = -48;
              }

              uint64_t v14 = v9 * a3;
              uint64_t v9 = v14 - (v11 + v12);
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }

          return 0LL;
        }

        return 0LL;
      }

      __break(1u);
      goto LABEL_66;
    }

    if (a2)
    {
      unsigned __int8 v23 = a3 + 48;
      unsigned __int8 v24 = a3 + 55;
      unsigned __int8 v25 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v23 = 58;
      }

      else
      {
        unsigned __int8 v25 = 97;
        unsigned __int8 v24 = 65;
      }

      if (result)
      {
        uint64_t v26 = 0LL;
        do
        {
          unsigned int v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              uint64_t v13 = 0LL;
              if (v27 < 0x61 || v27 >= v25) {
                return (unsigned __int8 *)v13;
              }
              char v28 = -87;
            }

            else
            {
              char v28 = -55;
            }
          }

          else
          {
            char v28 = -48;
          }

          uint64_t v29 = v26 * a3;
          uint64_t v26 = v29 + (v27 + v28);
          ++result;
          --v3;
        }

        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }

      return 0LL;
    }

    return 0LL;
  }

  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }

  uint64_t v15 = a2 - 1;
  if (a2 == 1) {
    return 0LL;
  }
  unsigned __int8 v16 = a3 + 48;
  unsigned __int8 v17 = a3 + 55;
  unsigned __int8 v18 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v16 = 58;
  }

  else
  {
    unsigned __int8 v18 = 97;
    unsigned __int8 v17 = 65;
  }

  if (!result) {
    return 0LL;
  }
  uint64_t v9 = 0LL;
  uint64_t v19 = result + 1;
  do
  {
    unsigned int v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        uint64_t v13 = 0LL;
        if (v20 < 0x61 || v20 >= v18) {
          return (unsigned __int8 *)v13;
        }
        char v21 = -87;
      }

      else
      {
        char v21 = -55;
      }
    }

    else
    {
      char v21 = -48;
    }

    uint64_t v22 = v9 * a3;
    uint64_t v9 = v22 + (v20 + v21);
    ++v19;
    --v15;
  }

  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10001D444( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  if ((a4 & 0x1000000000000000LL) != 0)
  {
    uint64_t result = 0LL;
    goto LABEL_8;
  }

  if ((a4 & 0x2000000000000000LL) != 0)
  {
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    unsigned int v11 = v14;
  }

  else if ((a3 & 0x1000000000000000LL) != 0)
  {
    unsigned int v11 = (void *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }

  else
  {
    unsigned int v11 = (void *)_StringObject.sharedUTF8.getter(a3, a4);
  }

  uint64_t result = sub_10001D5F8((uint64_t)v11, a1, a2, a3, a4, a5);
  if (!v5)
  {
    char v15 = v13 & 1;
LABEL_8:
    LOBYTE(v14[0]) = (a4 & 0x1000000000000000LL) != 0;
  }

  return result;
}

uint64_t sub_10001D514(uint64_t *a1)
{
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = v3[1];
  if (v4 == *v3 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0LL) & 1;
  }
}

unint64_t sub_10001D568(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000LL) == 0) {
    uint64_t v3 = a2 & 0xFFFFFFFFFFFFLL;
  }
  if (4 * v3 >= result >> 14) {
    return String.subscript.getter();
  }
  __break(1u);
  return result;
}

unint64_t sub_10001D5B4()
{
  unint64_t result = qword_100458C88;
  if (!qword_100458C88)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_100458C88);
  }

  return result;
}

uint64_t sub_10001D5F8( uint64_t result, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6)
{
  unint64_t v10 = a2;
  uint64_t v11 = result;
  uint64_t v12 = (a4 >> 59) & 1;
  if ((a5 & 0x1000000000000000LL) == 0) {
    LOBYTE(v12) = 1;
  }
  uint64_t v13 = 4LL << v12;
  unint64_t v14 = a2 & 0xC;
  if (v14 == 4LL << v12)
  {
    unint64_t result = sub_1000892A8(a2, a4, a5);
    a2 = result;
    if ((a5 & 0x1000000000000000LL) == 0)
    {
LABEL_5:
      int64_t v15 = a2 >> 16;
      if (v14 != v13) {
        goto LABEL_6;
      }
      goto LABEL_14;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
    goto LABEL_5;
  }

  unint64_t v16 = a4 & 0xFFFFFFFFFFFFLL;
  if ((a5 & 0x2000000000000000LL) != 0) {
    unint64_t v16 = HIBYTE(a5) & 0xF;
  }
  if (v16 < a2 >> 16) {
    goto LABEL_95;
  }
  unint64_t result = String.UTF8View._foreignDistance(from:to:)(15LL, a2, a4, a5);
  int64_t v15 = result;
  if (v14 == v13)
  {
LABEL_14:
    unint64_t result = sub_1000892A8(v10, a4, a5);
    unint64_t v10 = result;
  }

LABEL_6:
  if ((a3 & 0xC) == v13)
  {
    unint64_t result = sub_1000892A8(a3, a4, a5);
    a3 = result;
    if ((a5 & 0x1000000000000000LL) == 0) {
      goto LABEL_8;
    }
  }

  else if ((a5 & 0x1000000000000000LL) == 0)
  {
LABEL_8:
    unint64_t result = (a3 >> 16) - (v10 >> 16);
    goto LABEL_21;
  }

  unint64_t v17 = HIBYTE(a5) & 0xF;
  if ((a5 & 0x2000000000000000LL) == 0) {
    unint64_t v17 = a4 & 0xFFFFFFFFFFFFLL;
  }
  if (v17 < v10 >> 16) {
    goto LABEL_91;
  }
  if (v17 < a3 >> 16)
  {
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }

  unint64_t result = String.UTF8View._foreignDistance(from:to:)(v10, a3, a4, a5);
LABEL_21:
  int64_t v18 = v15 + result;
  if (__OFADD__(v15, result))
  {
    __break(1u);
    goto LABEL_90;
  }

  if (v18 < v15)
  {
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
    goto LABEL_92;
  }

  uint64_t v19 = (unsigned __int8 *)(v11 + v15);
  if (!v11) {
    uint64_t v19 = 0LL;
  }
  int v20 = *v19;
  if (v20 == 43)
  {
    if (result >= 1)
    {
      if (result != 1)
      {
        unsigned __int8 v31 = a6 + 48;
        unsigned __int8 v32 = a6 + 55;
        unsigned __int8 v33 = a6 + 87;
        if (a6 > 10)
        {
          unsigned __int8 v31 = 58;
        }

        else
        {
          unsigned __int8 v33 = 97;
          unsigned __int8 v32 = 65;
        }

        if (v19)
        {
          uint64_t v24 = 0LL;
          uint64_t v34 = v19 + 1;
          uint64_t v35 = result - 1;
          do
          {
            unsigned int v36 = *v34;
            if (v36 < 0x30 || v36 >= v31)
            {
              if (v36 < 0x41 || v36 >= v32)
              {
                uint64_t v29 = 0LL;
                if (v36 < 0x61 || v36 >= v33) {
                  return v29;
                }
                char v37 = -87;
              }

              else
              {
                char v37 = -55;
              }
            }

            else
            {
              char v37 = -48;
            }

            uint64_t v38 = v24 * a6;
            uint64_t v24 = v38 + (v36 + v37);
            ++v34;
            --v35;
          }

          while (v35);
          return v24;
        }

        return 0LL;
      }

      return 0LL;
    }

    goto LABEL_94;
  }

  if (v20 != 45)
  {
    if (v18 != v15)
    {
      unsigned __int8 v39 = a6 + 48;
      unsigned __int8 v40 = a6 + 55;
      unsigned __int8 v41 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v39 = 58;
      }

      else
      {
        unsigned __int8 v41 = 97;
        unsigned __int8 v40 = 65;
      }

      if (v19)
      {
        uint64_t v42 = 0LL;
        do
        {
          unsigned int v43 = *v19;
          if (v43 < 0x30 || v43 >= v39)
          {
            if (v43 < 0x41 || v43 >= v40)
            {
              uint64_t v29 = 0LL;
              if (v43 < 0x61 || v43 >= v41) {
                return v29;
              }
              char v44 = -87;
            }

            else
            {
              char v44 = -55;
            }
          }

          else
          {
            char v44 = -48;
          }

          uint64_t v45 = v42 * a6;
          uint64_t v42 = v45 + (v43 + v44);
          ++v19;
          --result;
        }

        while (result);
        return v45 + (v43 + v44);
      }

      return 0LL;
    }

    return 0LL;
  }

  if (result >= 1)
  {
    if (result != 1)
    {
      unsigned __int8 v21 = a6 + 48;
      unsigned __int8 v22 = a6 + 55;
      unsigned __int8 v23 = a6 + 87;
      if (a6 > 10)
      {
        unsigned __int8 v21 = 58;
      }

      else
      {
        unsigned __int8 v23 = 97;
        unsigned __int8 v22 = 65;
      }

      if (v19)
      {
        uint64_t v24 = 0LL;
        unsigned __int8 v25 = v19 + 1;
        uint64_t v26 = result - 1;
        while (1)
        {
          unsigned int v27 = *v25;
          if (v27 < 0x30 || v27 >= v21)
          {
            if (v27 < 0x41 || v27 >= v22)
            {
              uint64_t v29 = 0LL;
              if (v27 < 0x61 || v27 >= v23) {
                return v29;
              }
              char v28 = -87;
            }

            else
            {
              char v28 = -55;
            }
          }

          else
          {
            char v28 = -48;
          }

          uint64_t v30 = v24 * a6;
          uint64_t v24 = v30 - (v27 + v28);
          ++v25;
          if (!--v26) {
            return v24;
          }
        }
      }

      return 0LL;
    }

    return 0LL;
  }

  uint64_t v26 = 0LL;
  unsigned int v27 = &OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip;
  while (1)
  {
    char v28 = (isEscapingClosureAtFileLocation & 0xC000000000000001LL) != 0
        ? (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v26, isEscapingClosureAtFileLocation)
        : *(id *)(isEscapingClosureAtFileLocation + 8 * v26 + 32);
    uint64_t v29 = v28[OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip];

    if ((v29 & 1) != 0) {
      break;
    }
    uint64_t v30 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      if (isEscapingClosureAtFileLocation < 0) {
        unint64_t v119 = isEscapingClosureAtFileLocation;
      }
      else {
        unint64_t v119 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
      unsigned __int8 v25 = _CocoaArrayWrapper.endIndex.getter(v119);
      if (!v25) {
        goto LABEL_13;
      }
      goto LABEL_6;
    }

    ++v26;
    if (v30 == v25) {
      goto LABEL_13;
    }
  }

  swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
  char v68 = v26 + 1;
  if (__OFADD__(v26, 1LL)) {
    goto LABEL_106;
  }
  if (v24) {
    goto LABEL_107;
  }
  if (v68 != *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_32:
    char v82 = v26 + 5;
    while (1)
    {
      uint64_t v83 = v82 - 4;
      uint64_t v24 = isEscapingClosureAtFileLocation & 0xC000000000000001LL;
      if ((isEscapingClosureAtFileLocation & 0xC000000000000001LL) != 0)
      {
        uint64_t v84 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v82 - 4, isEscapingClosureAtFileLocation);
      }

      else
      {
        if ((v83 & 0x8000000000000000LL) != 0) {
          goto LABEL_80;
        }
        if (v83 >= *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_81;
        }
        uint64_t v84 = *(id *)(isEscapingClosureAtFileLocation + 8 * v82);
      }

      NSString v85 = v84[*v27];

      if ((v85 & 1) == 0)
      {
        if (v83 != v26)
        {
          if (v24)
          {
            uint64_t v24 = specialized _ArrayBuffer._getElementSlowPath(_:)(v26, isEscapingClosureAtFileLocation);
            id v88 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v82 - 4, isEscapingClosureAtFileLocation);
          }

          else
          {
            if (v26 < 0) {
              goto LABEL_84;
            }
            uint64_t v86 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
            if (v26 >= v86) {
              goto LABEL_85;
            }
            char v87 = *(id *)(isEscapingClosureAtFileLocation + 8 * v26 + 32);
            if ((v83 & 0x8000000000000000LL) != 0) {
              goto LABEL_86;
            }
            if (v83 >= v86) {
              goto LABEL_87;
            }
            uint64_t v24 = (uint64_t)v87;
            id v88 = *(id *)(isEscapingClosureAtFileLocation + 8 * v82);
          }

          uint64_t v89 = v88;
          isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(isEscapingClosureAtFileLocation);
          void *v1 = isEscapingClosureAtFileLocation;
          if (!isUniquelyReferenced_nonNull_bridgeObject
            || isEscapingClosureAtFileLocation < 0
            || (isEscapingClosureAtFileLocation & 0x4000000000000000LL) != 0)
          {
            isEscapingClosureAtFileLocation = sub_1000800CC(isEscapingClosureAtFileLocation);
            void *v1 = isEscapingClosureAtFileLocation;
          }

          uint64_t v91 = *(void **)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL) + 8 * v26 + 0x20);
          *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL) + 8 * v26 + 0x2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v89;

          specialized Array._endMutation()(v92);
          isEscapingClosureAtFileLocation = *v1;
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject(*v1)
            || isEscapingClosureAtFileLocation < 0
            || (isEscapingClosureAtFileLocation & 0x4000000000000000LL) != 0)
          {
            isEscapingClosureAtFileLocation = sub_1000800CC(isEscapingClosureAtFileLocation);
            void *v1 = isEscapingClosureAtFileLocation;
          }

          if ((v83 & 0x8000000000000000LL) != 0) {
            goto LABEL_88;
          }
          unint64_t v93 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
          if (v83 >= *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_89;
          }
          char v94 = *(void **)(v93 + 8 * v82);
          *(void *)(v93 + 8 * v82) = v24;

          isEscapingClosureAtFileLocation = (uint64_t)v1;
          specialized Array._endMutation()(v95);
        }

        if (__OFADD__(v26++, 1LL)) {
          goto LABEL_83;
        }
      }

      uint64_t v24 = v82 - 3;
      if (__OFADD__(v83, 1LL)) {
        goto LABEL_82;
      }
      isEscapingClosureAtFileLocation = *v1;
      if ((unint64_t)*v1 >> 62)
      {
        if (isEscapingClosureAtFileLocation < 0) {
          uint64_t v98 = *v1;
        }
        else {
          uint64_t v98 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*v1);
        uint64_t v97 = _CocoaArrayWrapper.endIndex.getter(v98);
        swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
      }

      else
      {
        uint64_t v97 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      ++v82;
      if (v24 == v97) {
        goto LABEL_15;
      }
    }
  }

  while (1)
  {
    while (1)
    {
LABEL_15:
      if ((unint64_t)isEscapingClosureAtFileLocation >> 62)
      {
        if (isEscapingClosureAtFileLocation < 0) {
          char v120 = isEscapingClosureAtFileLocation;
        }
        else {
          char v120 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
        unsigned __int8 v31 = _CocoaArrayWrapper.endIndex.getter(v120);
        swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
        if (v31 < v26)
        {
LABEL_99:
          __break(1u);
          goto LABEL_100;
        }
      }

      else
      {
        unsigned __int8 v31 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v31 < v26) {
          goto LABEL_99;
        }
      }

      unsigned __int8 v32 = (id *)(v0 + 312);
      unsigned __int8 v33 = *(void *)(v0 + 640);
      uint64_t v34 = *(void **)(v0 + 480);
      sub_1000803D0(v26, v31);
      *(void *)(v0 + 312) = 0LL;
      unint64_t v134 = objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseStore);
      uint64_t v35 = sub_100237D18(v134);
      unsigned int v36 = (void *)swift_allocObject(&unk_1003DDC68, 48LL, 7LL);
      *(void *)(v0 + 704) = v36;
      v36[2] = v1;
      v36[3] = v34;
      v36[4] = v33;
      v36[5] = v0 + 312;
      char v37 = swift_allocObject(&unk_1003DDC90, 32LL, 7LL);
      *(void *)(v37 + 16) = sub_10004AAC8;
      *(void *)(v37 + 24) = v36;
      *(void *)(v0 + 112) = sub_1000366C0;
      *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v37;
      *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = _NSConcreteStackBlock;
      *(void *)(v0 + 88) = 1107296256LL;
      *(void *)(v0 + 96) = sub_100028ECC;
      *(void *)(v0 + 104) = &unk_1003DDCA8;
      uint64_t v38 = _Block_copy((const void *)(v0 + 80));
      unsigned __int8 v39 = *(void *)(v0 + 120);
      unsigned __int8 v40 = v34;
      swift_retain(v37);
      swift_release(v39);
      [v35 modifyUsingTransaction:v38];

      _Block_release(v38);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v37, "", 88LL, 1209LL, 60LL, 1LL);
      unsigned __int8 v41 = swift_release(v37);
      if ((isEscapingClosureAtFileLocation & 1) == 0) {
        break;
      }
LABEL_100:
      __break(1u);
LABEL_101:
      if (isEscapingClosureAtFileLocation < 0) {
        int64_t v121 = isEscapingClosureAtFileLocation;
      }
      else {
        int64_t v121 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
      uint64_t v26 = _CocoaArrayWrapper.endIndex.getter(v121);
      swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
    }

    unsigned int v27 = (uint64_t *)(v0 + 352);
    uint64_t v42 = *(void **)(v0 + 480);
    static Logger.updates.getter(v41);
    unsigned int v43 = (os_log_s *)Logger.logObject.getter(v42);
    char v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      os_log_type_t type = v44;
      uint64_t v45 = *(char **)(v0 + 480);
      unint64_t v46 = swift_slowAlloc(38LL, -1LL);
      unint64_t v47 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_t log = (os_log_t)swift_slowAlloc(32LL, -1LL);
      uint64_t v136 = (uint64_t)log;
      *(_DWORD *)unint64_t v46 = 138413058;
      unint64_t v48 = *(void **)&v45[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      *(void *)(v0 + 352) = v48;
      uint64_t v49 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v1, v46 + 4, v46 + 12);
      *unint64_t v47 = v48;
      __int16 v50 = v47;

      unsigned __int8 v32 = (id *)(v0 + 312);
      *(_WORD *)(v46 + 12) = 2050;
      swift_beginAccess(v0 + 312, v0 + 264, 0LL, 0LL);
      uint64_t v51 = *(void *)(v0 + 312);
      if (!v51) {
        goto LABEL_113;
      }
      *(void *)(v0 + 368) = *(void *)(v51
                                        + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_availableUpdateCount);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v0 + 376, v46 + 14, v46 + 22);
      *(_WORD *)(v46 + 22) = 1026;
      char v52 = *(void *)(v0 + 312);
      if (!v52) {
        goto LABEL_114;
      }
      __int128 v129 = *(void *)(v0 + 528);
      id v53 = *(void *)(v0 + 504);
      uint64_t v125 = *(void *)(v0 + 496);
      uint64_t v54 = *(void **)(v0 + 480);
      *(_DWORD *)(v0 + 728) = *(unsigned __int8 *)(v52 + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_result);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 728, v0 + 732, v46 + 24, v46 + 28);
      *(_WORD *)(v46 + 28) = 2082;
      char v55 = sub_10006C838();
      uint64_t v57 = v56;
      *(void *)(v0 + 384) = sub_100088DB4(v55, v56, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v46 + 30, v46 + 38);

      swift_bridgeObjectRelease(v57);
      _os_log_impl( (void *)&_mh_execute_header,  v43,  type,  "[%@] Merged %{public}ld app updates into database with result: %{BOOL,public}d reason: %{public}s",  (uint8_t *)v46,  0x26u);
      uint64_t v58 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v50, 1LL, v58);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_arrayDestroy(log, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(log, -1LL, -1LL);
      swift_slowDealloc(v46, -1LL, -1LL);

      uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v53 + 8);
      v59(v129, v125);
      unsigned int v27 = (uint64_t *)(v0 + 352);
    }

    else
    {
      uint64_t v60 = *(void *)(v0 + 528);
      uint64_t v61 = *(void *)(v0 + 496);
      uint64_t v62 = *(void *)(v0 + 504);
      NSString v63 = *(void **)(v0 + 480);

      uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
      v59(v60, v61);
    }

    swift_beginAccess(v32, v0 + 240, 0LL, 0LL);
    if (!*v32) {
      break;
    }
    uint64_t v64 = *(void *)(v0 + 608);
    char v65 = *(char **)(v0 + 480);
    uint64_t v66 = (char *)*v32;
    sub_100041FFC(v66, v65);

    if (v64 > 8)
    {
      char v118 = *(void *)(v0 + 616);
      *(void *)(v0 + 328) = *(void *)(v0 + 608);
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v118, v0 + 328, v118, &type metadata for Int);
      return;
    }

    if (((1LL << v64) & 0xD6) == 0) {
      goto LABEL_70;
    }
    char v67 = *(void *)(v0 + 592);
    char v68 = *(void *)(v0 + 576);
    uint64_t v69 = *(void *)(v0 + 568);
    uint64_t v26 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
    Date.init()(v26);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v67, v69);
    sub_1002FA380(v26, isa);

    isEscapingClosureAtFileLocation = (uint64_t)sub_100237D18(v134);
    *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = sub_1000399B8;
    *(void *)(v0 + 168) = 0LL;
    *(void *)(v0 + 128) = _NSConcreteStackBlock;
    *(void *)(v0 + 136) = 1107296256LL;
    *(void *)(v0 + 144) = sub_100028ECC;
    *(void *)(v0 + 152) = &unk_1003DDCD0;
    uint64_t v1 = (uint64_t *)_Block_copy((const void *)(v0 + 128));
    swift_release(*(void *)(v0 + 168));
    [(id)isEscapingClosureAtFileLocation modifyUsingTransaction:v1];

    _Block_release(v1);
    uint64_t v71 = swift_isEscapingClosureAtFileLocation(0LL, "", 88LL, 518LL, 60LL, 1LL);
    if ((v71 & 1) == 0)
    {
      uint64_t v135 = v59;
      uint64_t v72 = *(void **)(v0 + 480);
      static Logger.updates.getter(v71);
      uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
      id v74 = static os_log_type_t.default.getter();
      id v75 = os_log_type_enabled(v73, v74);
      uint64_t v76 = *(char **)(v0 + 480);
      if (v75)
      {
        uint64_t v77 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v131 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v77 = 138412290;
        uint64_t v78 = v32;
        uint64_t v79 = *(void **)&v76[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
        *(void *)(v0 + 344) = v79;
        uint64_t v80 = v79;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v27, v77 + 4, v77 + 12);
        *uint64_t v131 = v79;
        unsigned __int8 v32 = v78;

        _os_log_impl((void *)&_mh_execute_header, v73, v74, "[%@] Cleared expired history", v77, 0xCu);
        uint64_t v81 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v131, 1LL, v81);
        swift_slowDealloc(v131, -1LL, -1LL);
        swift_slowDealloc(v77, -1LL, -1LL);
      }

      else
      {

        uint64_t v73 = *(os_log_s **)(v0 + 480);
      }

      uint64_t v99 = *(void *)(v0 + 520);
      unint64_t v100 = *(void *)(v0 + 496);

      v135(v99, v100);
LABEL_70:
      if (sub_10004AAE4())
      {
        char v101 = *(void *)(v0 + 608);
        char v102 = *(void *)(v0 + 592);
        char v103 = *(void *)(v0 + 576);
        id v104 = *(void *)(v0 + 568);
        id v105 = [objc_allocWithZone(ASDUpdatePollMetrics) init];
        static Date.now.getter(v105);
        uint64_t v106 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v103 + 8))(v102, v104);
        [v105 setPollTime:v106];

        if (v101 == 1)
        {
          uint64_t v107 = String._bridgeToObjectiveC()();
        }

        else
        {
          sub_10006C838();
          id v109 = v108;
          uint64_t v107 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v109);
        }

        [v105 setReason:v107];

        if (!*v32) {
          goto LABEL_115;
        }
        uint64_t v110 = *(void *)(v0 + 336);
        uint64_t v111 = (char *)*v32;
        swift_bridgeObjectRelease(v110);
        uint64_t v112 = *(void *)&v111[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_bundleIDs];
        swift_bridgeObjectRetain(v112);

        Swift::String v113 = sub_100056154(v112);
        swift_bridgeObjectRelease(v112);
        Swift::String v114 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v113);
        [v105 setBundleIDs:v114];

        uint64_t v115 = [objc_allocWithZone(ASDUpdateMetricsStore) init];
        [v115 addPoll:v105];
      }

      else
      {
        swift_bridgeObjectRelease(*(void *)(v0 + 336));
      }

      Swift::String v116 = (void *)swift_task_alloc(dword_1004593F4);
      *(void *)(v0 + 712) = v116;
      void *v116 = v0;
      v116[1] = sub_100046D00;
      sub_10003FF24(*(void *)(v0 + 480), v117);
      return;
    }

    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    if (isEscapingClosureAtFileLocation < 0) {
      uint64_t v122 = isEscapingClosureAtFileLocation;
    }
    else {
      uint64_t v122 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
    unint64_t v123 = _CocoaArrayWrapper.endIndex.getter(v122);
    swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
    if (v68 != v123) {
      goto LABEL_32;
    }
  }

  __break(1u);
LABEL_113:

  __break(1u);
LABEL_114:

  __break(1u);
LABEL_115:
  __break(1u);
}

  uint64_t v35 = 0LL;
  unsigned int v36 = &OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip;
  while (1)
  {
    char v37 = (isEscapingClosureAtFileLocation & 0xC000000000000001LL) != 0
        ? (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v35, isEscapingClosureAtFileLocation)
        : *(id *)(isEscapingClosureAtFileLocation + 8 * v35 + 32);
    uint64_t v38 = v37[OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip];

    if ((v38 & 1) != 0) {
      break;
    }
    unsigned __int8 v39 = v35 + 1;
    if (__OFADD__(v35, 1LL))
    {
      __break(1u);
LABEL_80:
      __break(1u);
LABEL_81:
      __break(1u);
LABEL_82:
      __break(1u);
LABEL_83:
      __break(1u);
LABEL_84:
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      __break(1u);
LABEL_88:
      __break(1u);
LABEL_89:
      __break(1u);
LABEL_90:
      if (isEscapingClosureAtFileLocation < 0) {
        __int128 v128 = isEscapingClosureAtFileLocation;
      }
      else {
        __int128 v128 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter(v128);
      if (!v34) {
        goto LABEL_13;
      }
      goto LABEL_6;
    }

    ++v35;
    if (v39 == v34) {
      goto LABEL_13;
    }
  }

  swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
  uint64_t v77 = v35 + 1;
  if (__OFADD__(v35, 1LL)) {
    goto LABEL_106;
  }
  if (v33) {
    goto LABEL_107;
  }
  if (v77 != *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_32:
    uint64_t v91 = v35 + 5;
    while (1)
    {
      uint64_t v92 = v91 - 4;
      unsigned __int8 v33 = isEscapingClosureAtFileLocation & 0xC000000000000001LL;
      if ((isEscapingClosureAtFileLocation & 0xC000000000000001LL) != 0)
      {
        unint64_t v93 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v91 - 4, isEscapingClosureAtFileLocation);
      }

      else
      {
        if ((v92 & 0x8000000000000000LL) != 0) {
          goto LABEL_80;
        }
        if (v92 >= *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
          goto LABEL_81;
        }
        unint64_t v93 = *(id *)(isEscapingClosureAtFileLocation + 8 * v91);
      }

      char v94 = v93[*v36];

      if ((v94 & 1) == 0)
      {
        if (v92 != v35)
        {
          if (v33)
          {
            unsigned __int8 v33 = specialized _ArrayBuffer._getElementSlowPath(_:)(v35, isEscapingClosureAtFileLocation);
            uint64_t v97 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v91 - 4, isEscapingClosureAtFileLocation);
          }

          else
          {
            if (v35 < 0) {
              goto LABEL_84;
            }
            uint64_t v95 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
            if (v35 >= v95) {
              goto LABEL_85;
            }
            char v96 = *(id *)(isEscapingClosureAtFileLocation + 8 * v35 + 32);
            if ((v92 & 0x8000000000000000LL) != 0) {
              goto LABEL_86;
            }
            if (v92 >= v95) {
              goto LABEL_87;
            }
            unsigned __int8 v33 = (uint64_t)v96;
            uint64_t v97 = *(id *)(isEscapingClosureAtFileLocation + 8 * v91);
          }

          uint64_t v98 = v97;
          isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(isEscapingClosureAtFileLocation);
          *uint64_t v2 = isEscapingClosureAtFileLocation;
          if (!isUniquelyReferenced_nonNull_bridgeObject
            || isEscapingClosureAtFileLocation < 0
            || (isEscapingClosureAtFileLocation & 0x4000000000000000LL) != 0)
          {
            isEscapingClosureAtFileLocation = sub_1000800CC(isEscapingClosureAtFileLocation);
            *uint64_t v2 = isEscapingClosureAtFileLocation;
          }

          unint64_t v100 = *(void **)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL) + 8 * v35 + 0x20);
          *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL) + 8 * v35 + 0x2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v98;

          specialized Array._endMutation()(v101);
          isEscapingClosureAtFileLocation = *v2;
          if (!swift_isUniquelyReferenced_nonNull_bridgeObject(*v2)
            || isEscapingClosureAtFileLocation < 0
            || (isEscapingClosureAtFileLocation & 0x4000000000000000LL) != 0)
          {
            isEscapingClosureAtFileLocation = sub_1000800CC(isEscapingClosureAtFileLocation);
            *uint64_t v2 = isEscapingClosureAtFileLocation;
          }

          if ((v92 & 0x8000000000000000LL) != 0) {
            goto LABEL_88;
          }
          char v102 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
          if (v92 >= *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_89;
          }
          char v103 = *(void **)(v102 + 8 * v91);
          *(void *)(v102 + 8 * v91) = v33;

          isEscapingClosureAtFileLocation = (uint64_t)v2;
          specialized Array._endMutation()(v104);
        }

        if (__OFADD__(v35++, 1LL)) {
          goto LABEL_83;
        }
      }

      unsigned __int8 v33 = v91 - 3;
      if (__OFADD__(v92, 1LL)) {
        goto LABEL_82;
      }
      isEscapingClosureAtFileLocation = *v2;
      if ((unint64_t)*v2 >> 62)
      {
        if (isEscapingClosureAtFileLocation < 0) {
          uint64_t v107 = *v2;
        }
        else {
          uint64_t v107 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(*v2);
        uint64_t v106 = _CocoaArrayWrapper.endIndex.getter(v107);
        swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
      }

      else
      {
        uint64_t v106 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      ++v91;
      if (v33 == v106) {
        goto LABEL_15;
      }
    }
  }

  while (1)
  {
    while (1)
    {
LABEL_15:
      if ((unint64_t)isEscapingClosureAtFileLocation >> 62)
      {
        if (isEscapingClosureAtFileLocation < 0) {
          __int128 v129 = isEscapingClosureAtFileLocation;
        }
        else {
          __int128 v129 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
        unsigned __int8 v40 = _CocoaArrayWrapper.endIndex.getter(v129);
        swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
        if (v40 < v35)
        {
LABEL_99:
          __break(1u);
          goto LABEL_100;
        }
      }

      else
      {
        unsigned __int8 v40 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v40 < v35) {
          goto LABEL_99;
        }
      }

      unsigned __int8 v41 = (id *)(v1 + 39);
      uint64_t v42 = v1[80];
      unsigned int v43 = (void *)v1[60];
      sub_1000803D0(v35, v40);
      v1[39] = 0LL;
      uint64_t v147 = objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseStore);
      char v44 = sub_100237D18(v147);
      uint64_t v45 = (void *)swift_allocObject(&unk_1003DDC68, 48LL, 7LL);
      v1[88] = v45;
      v45[2] = v2;
      v45[3] = v43;
      v45[4] = v42;
      v45[5] = v1 + 39;
      unint64_t v46 = swift_allocObject(&unk_1003DDC90, 32LL, 7LL);
      *(void *)(v46 + 16) = sub_10004AAC8;
      *(void *)(v46 + 24) = v45;
      v1[14] = sub_1000366C0;
      v1[15] = v46;
      v1[10] = _NSConcreteStackBlock;
      v1[11] = 1107296256LL;
      v1[12] = sub_100028ECC;
      v1[13] = &unk_1003DDCA8;
      unint64_t v47 = _Block_copy(v1 + 10);
      unint64_t v48 = v1[15];
      uint64_t v49 = v43;
      swift_retain(v46);
      swift_release(v48);
      [v44 modifyUsingTransaction:v47];

      _Block_release(v47);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v46, "", 88LL, 1209LL, 60LL, 1LL);
      __int16 v50 = swift_release(v46);
      if ((isEscapingClosureAtFileLocation & 1) == 0) {
        break;
      }
LABEL_100:
      __break(1u);
LABEL_101:
      if (isEscapingClosureAtFileLocation < 0) {
        id v130 = isEscapingClosureAtFileLocation;
      }
      else {
        id v130 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
      uint64_t v35 = _CocoaArrayWrapper.endIndex.getter(v130);
      swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
    }

    unsigned int v36 = v1 + 44;
    uint64_t v51 = (void *)v1[60];
    static Logger.updates.getter(v50);
    char v52 = (os_log_s *)Logger.logObject.getter(v51);
    id v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      os_log_t log = v53;
      uint64_t v54 = (char *)v1[60];
      char v55 = swift_slowAlloc(38LL, -1LL);
      id v56 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v140 = swift_slowAlloc(32LL, -1LL);
      v149[0] = v140;
      *(_DWORD *)char v55 = 138413058;
      uint64_t v57 = *(void **)&v54[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      v1[44] = v57;
      uint64_t v58 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 44, v2, v55 + 4, v55 + 12);
      *id v56 = v57;
      uint64_t v59 = v56;

      unsigned __int8 v41 = (id *)(v1 + 39);
      *(_WORD *)(v55 + 12) = 2050;
      swift_beginAccess(v1 + 39, v1 + 33, 0LL, 0LL);
      uint64_t v60 = v1[39];
      if (!v60) {
        goto LABEL_113;
      }
      v1[46] = *(void *)(v60 + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_availableUpdateCount);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 46, v1 + 47, v55 + 14, v55 + 22);
      *(_WORD *)(v55 + 22) = 1026;
      uint64_t v61 = v1[39];
      if (!v61) {
        goto LABEL_114;
      }
      *(void *)typea = v1[66];
      uint64_t v62 = v1[63];
      uint64_t v136 = v1[62];
      NSString v63 = (void *)v1[60];
      *((_DWORD *)v1 + 182) = *(unsigned __int8 *)(v61 + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_result);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 91, (char *)v1 + 732, v55 + 24, v55 + 28);
      *(_WORD *)(v55 + 28) = 2082;
      uint64_t v64 = sub_10006C838();
      uint64_t v66 = v65;
      v1[48] = sub_100088DB4(v64, v65, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 49, v55 + 30, v55 + 38);

      swift_bridgeObjectRelease(v66);
      _os_log_impl( (void *)&_mh_execute_header,  v52,  log,  "[%@] Merged %{public}ld app updates into database with result: %{BOOL,public}d reason: %{public}s",  (uint8_t *)v55,  0x26u);
      char v67 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v59, 1LL, v67);
      swift_slowDealloc(v59, -1LL, -1LL);
      swift_arrayDestroy(v140, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v140, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);

      char v68 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
      v68(*(void *)typea, v136);
      unsigned int v36 = v1 + 44;
    }

    else
    {
      uint64_t v69 = v1[66];
      id v70 = v1[62];
      uint64_t v71 = v1[63];
      uint64_t v72 = (void *)v1[60];

      char v68 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
      v68(v69, v70);
    }

    swift_beginAccess(v41, v1 + 30, 0LL, 0LL);
    if (!*v41) {
      break;
    }
    uint64_t v73 = v1[76];
    id v74 = (char *)v1[60];
    id v75 = (char *)*v41;
    sub_100041FFC(v75, v74);

    if (v73 > 8)
    {
      uint64_t v127 = v1[77];
      v1[41] = v1[76];
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v127, v1 + 41, v127, &type metadata for Int);
      return;
    }

    if (((1LL << v73) & 0xD6) == 0) {
      goto LABEL_70;
    }
    uint64_t v76 = v1[74];
    uint64_t v77 = v1[72];
    uint64_t v78 = v1[71];
    uint64_t v35 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
    Date.init()(v35);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v78);
    sub_1002FA380(v35, isa);

    isEscapingClosureAtFileLocation = (uint64_t)sub_100237D18(v147);
    v1[20] = sub_1000399B8;
    v1[21] = 0LL;
    v1[16] = _NSConcreteStackBlock;
    v1[17] = 1107296256LL;
    v1[18] = sub_100028ECC;
    v1[19] = &unk_1003DDCD0;
    uint64_t v2 = (uint64_t *)_Block_copy(v1 + 16);
    swift_release(v1[21]);
    [(id)isEscapingClosureAtFileLocation modifyUsingTransaction:v2];

    _Block_release(v2);
    uint64_t v80 = swift_isEscapingClosureAtFileLocation(0LL, "", 88LL, 518LL, 60LL, 1LL);
    if ((v80 & 1) == 0)
    {
      uint64_t v148 = v68;
      uint64_t v81 = (void *)v1[60];
      static Logger.updates.getter(v80);
      char v82 = (os_log_s *)Logger.logObject.getter(v81);
      uint64_t v83 = static os_log_type_t.default.getter();
      uint64_t v84 = os_log_type_enabled(v82, v83);
      NSString v85 = (char *)v1[60];
      if (v84)
      {
        uint64_t v86 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v144 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v86 = 138412290;
        char v87 = v41;
        id v88 = *(void **)&v85[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
        v1[43] = v88;
        uint64_t v89 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 43, v36, v86 + 4, v86 + 12);
        *uint64_t v144 = v88;
        unsigned __int8 v41 = v87;

        _os_log_impl((void *)&_mh_execute_header, v82, v83, "[%@] Cleared expired history", v86, 0xCu);
        uint64_t v90 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v144, 1LL, v90);
        swift_slowDealloc(v144, -1LL, -1LL);
        swift_slowDealloc(v86, -1LL, -1LL);
      }

      else
      {

        char v82 = (os_log_s *)v1[60];
      }

      uint64_t v108 = v1[65];
      id v109 = v1[62];

      v148(v108, v109);
LABEL_70:
      if (sub_10004AAE4())
      {
        uint64_t v110 = v1[76];
        uint64_t v111 = v1[74];
        uint64_t v112 = v1[72];
        Swift::String v113 = v1[71];
        Swift::String v114 = [objc_allocWithZone(ASDUpdatePollMetrics) init];
        static Date.now.getter(v114);
        uint64_t v115 = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v111, v113);
        [v114 setPollTime:v115];

        if (v110 == 1)
        {
          Swift::String v116 = String._bridgeToObjectiveC()();
        }

        else
        {
          sub_10006C838();
          char v118 = v117;
          Swift::String v116 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v118);
        }

        [v114 setReason:v116];

        if (!*v41) {
          goto LABEL_115;
        }
        unint64_t v119 = v1[42];
        char v120 = (char *)*v41;
        swift_bridgeObjectRelease(v119);
        int64_t v121 = *(void *)&v120[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_bundleIDs];
        swift_bridgeObjectRetain(v121);

        uint64_t v122 = sub_100056154(v121);
        swift_bridgeObjectRelease(v121);
        unint64_t v123 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v122);
        [v114 setBundleIDs:v123];

        int64_t v124 = [objc_allocWithZone(ASDUpdateMetricsStore) init];
        [v124 addPoll:v114];
      }

      else
      {
        swift_bridgeObjectRelease(v1[42]);
      }

      uint64_t v125 = (void *)swift_task_alloc(dword_1004593F4);
      v1[89] = v125;
      *uint64_t v125 = v1;
      v125[1] = sub_100046D00;
      sub_10003FF24(v1[60], v126);
      return;
    }

    __break(1u);
LABEL_106:
    __break(1u);
LABEL_107:
    if (isEscapingClosureAtFileLocation < 0) {
      uint64_t v131 = isEscapingClosureAtFileLocation;
    }
    else {
      uint64_t v131 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
    uint64_t v132 = _CocoaArrayWrapper.endIndex.getter(v131);
    swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
    if (v77 != v132) {
      goto LABEL_32;
    }
  }

  __break(1u);
LABEL_113:

  __break(1u);
LABEL_114:

  __break(1u);
LABEL_115:
  __break(1u);
}
}

  unint64_t v16 = ASDErrorWithSafeUserInfo(v15);
  unint64_t v17 = (id)objc_claimAutoreleasedReturnValue(v16);
  -[Task completeWithError:](self, "completeWithError:", v17);
LABEL_7:

  _Block_object_dispose(&v49, 8);
  _Block_object_dispose(&v55, 8);
}

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v5, v6);
  }
}

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v5, v6);
  }
}

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v5, v6);
  }
}

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v5, v6);
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0LL;
}

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v5, v6);
  }
  uint64_t v12 = *(void **)(a1 + 32);
  if (v12) {
    sub_100321984(v12, v5, v6, &stru_1003F3490);
  }
  uint64_t v13 = *(void *)(*(void *)(a1 + 48) + 8LL);
  unint64_t v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0LL;
}

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, id, id))(v11 + 16))(v11, v5, v6);
  }
  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0LL;
}
}

    uint64_t v5 = ASDLogHandleForCategory(40LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v7 = *(void *)(*(void *)(a1 + 32) + 16LL);
      *(_DWORD *)buf = 138543618;
      unint64_t v17 = v3;
      int64_t v18 = 2114;
      uint64_t v19 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Not handling account change from %{public}@ to: %{public}@",  buf,  0x16u);
    }

    unsigned __int8 v8 = *(void *)(a1 + 32);
    uint64_t v9 = v3;
    unint64_t v10 = *(_TtC9appstored14UpdatesContext **)(v8 + 16);
    *(void *)(v8 + 16) = v9;
LABEL_17:
  }
}

  return v5;
}

  return 1LL;
}
}

  return 1LL;
}

  unint64_t v14 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
  int64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1002D5980;
  v19[3] = &unk_1003F0B18;
  v19[4] = self;
  [v15 modifyUsingTransaction:v19];

  unint64_t v16 = ASDLogHandleForCategory(3LL);
  unint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    int64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[ODPMetricsHandler logKey](self, "logKey"));
    *(_DWORD *)buf = 138412290;
    unsigned __int8 v21 = v18;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "[%@] Reset metrics ", buf, 0xCu);
  }
}
}
}

  return v7;
}
}

LABEL_93:
  __break(1u);
LABEL_94:
  __break(1u);
LABEL_95:
  __break(1u);
  return result;
}

unint64_t sub_10001DA2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000079A0(&qword_1004588C0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100026D40(v7, (uint64_t)&v16, &qword_100458D48);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_100023F7C(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_100015330(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001DB60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000079A0(&qword_10045A2F0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100026D40(v7, (uint64_t)v16, &qword_100458D50);
    unint64_t result = sub_1000240BC((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    unint64_t result = (unint64_t)sub_100015330(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001DCA0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000079A0(&qword_100458D40);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v7 = *(v6 - 3);
    uint64_t v8 = *(v6 - 2);
    uint64_t v10 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    unint64_t result = sub_100023F7C(v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v13 = v7;
    v13[1] = v8;
    BOOL v14 = (void *)(v4[7] + 16 * result);
    void *v14 = v10;
    v14[1] = v9;
    uint64_t v15 = v4[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v6 += 4;
    v4[2] = v17;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void *sub_10001DDC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_11;
  }

  sub_1000079A0(&qword_100458D20);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_11:
    swift_bridgeObjectRelease(a1);
    return v4;
  }

  swift_retain(v3);
  memcpy(__dst, (const void *)(a1 + 32), 0x14AuLL);
  uint64_t v6 = __dst[0];
  uint64_t v7 = __dst[1];
  sub_1000268FC(__dst);
  unint64_t v8 = sub_100023F7C(v6, v7);
  if ((v9 & 1) != 0)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    swift_release(v4);
    goto LABEL_11;
  }

  uint64_t v10 = 368LL;
  while (1)
  {
    *(void *)((char *)v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << v8;
    __int128 v11 = (uint64_t *)(v4[6] + 16 * v8);
    uint64_t *v11 = v6;
    v11[1] = v7;
    unint64_t result = memcpy((void *)(v4[7] + 320 * v8), &__dst[2], 0x13AuLL);
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      break;
    }
    v4[2] = v15;
    if (!--v5) {
      goto LABEL_9;
    }
    memcpy(__dst, (const void *)(a1 + v10), 0x14AuLL);
    uint64_t v6 = __dst[0];
    uint64_t v7 = __dst[1];
    sub_1000268FC(__dst);
    unint64_t v8 = sub_100023F7C(v6, v7);
    v10 += 336LL;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_10001DF30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000079A0(&qword_100458D60);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100026D40(v7, (uint64_t)&v14, &qword_100458D68);
    uint64_t v8 = v14;
    unint64_t result = sub_1000240EC(v14);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v8;
    unint64_t result = (unint64_t)sub_100015330(&v15, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4[2] = v13;
    v7 += 40LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10001E05C()
{
  qword_1004628B8 = (uint64_t)&off_1003DB208;
}

id sub_10001E070()
{
  uint64_t v1 = v0;
  static Logger.arcade.getter();
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___URLBag);
  id v3 = sub_100255630(v2);
  if (qword_100458020 != -1) {
    swift_once(&qword_100458020, sub_10001E05C);
  }
  uint64_t v4 = sub_100055DD8(qword_1004628B8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v4);
  id v6 = sub_1002568AC(v3, @"arcade-hardware-promo-scenario-ids", isa, 0);

  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v6, (char *)&type metadata for Any + 8);
  uint64_t v8 = sub_10007C35C(v7);
  swift_bridgeObjectRelease(v7);
  if (!v8)
  {
    uint64_t v8 = (void *)qword_1004628B8;
    swift_bridgeObjectRetain(qword_1004628B8);
  }

  *(void *)&v1[OBJC_IVAR____TtC9appstored29KatanaSubscriptionCoordinator_hardwareBundlePromoScenarios] = v8;

  v10.receiver = v1;
  v10.super_class = (Class)type metadata accessor for KatanaSubscriptionCoordinator(0LL);
  return objc_msgSendSuper2(&v10, "init");
}

id sub_10001E1F0()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for KatanaSubscriptionCoordinator(0)) init];
  qword_1004628C0 = (uint64_t)result;
  return result;
}

uint64_t sub_10001E260(void *a1, void *a2)
{
  id v4 = objc_msgSend(a1, "ams_DSID");
  if (!v4)
  {
    id v25 = a2;
    id v26 = a1;
    id v27 = v25;
    id v28 = v26;
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      unsigned __int8 v32 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v31 = 138412547;
      *(void *)&__dst[0] = v27;
      id v33 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, (char *)__dst + 8, v31 + 4, v31 + 12);
      void *v32 = v27;

      *(_WORD *)(v31 + 12) = 2113;
      *(void *)&__dst[0] = v28;
      id v34 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, (char *)__dst + 8, v31 + 14, v31 + 22);
      v32[1] = v28;

      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "[%@] Failed to find DSID for account: %{private}@",  (uint8_t *)v31,  0x16u);
      uint64_t v35 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v32, 2LL, v35);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
    }

    return 0LL;
  }

  uint64_t v5 = v4;
  id v6 = [v4 stringValue];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  char v9 = v8;

  unsigned __int8 v118 = 0;
  _StringGuts.grow(_:)(25LL);
  swift_bridgeObjectRelease(0xE000000000000000LL);
  *(void *)&__dst[0] = 0xD000000000000017LL;
  *((void *)&__dst[0] + 1) = 0x80000001003431E0LL;
  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  uint64_t v11 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x80000001003431E0LL);
  sub_1000223C8(a1, a2, (uint64_t)v121);
  sub_100026B64( (uint64_t)v121,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100026BF8);
  sub_100026CD4((uint64_t)v121, (uint64_t)v122, &qword_100458D78);
  if (sub_100026C6C((uint64_t)v122) != 1)
  {
    id v36 = a2;
    uint64_t v37 = swift_bridgeObjectRetain(v9);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc(22LL, -1LL);
      uint64_t v113 = v7;
      unsigned __int8 v41 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v110 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__dst[0] = v110;
      *(_DWORD *)uint64_t v40 = 138412546;
      *(void *)&__src[0] = v36;
      uint64_t v115 = v11;
      id v42 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__src, (char *)__src + 8, v40 + 4, v40 + 12);
      void *v41 = v36;

      *(_WORD *)(v40 + 12) = 2082;
      swift_bridgeObjectRetain(v9);
      *(void *)&__src[0] = sub_100088DB4(v113, (unint64_t)v9, (uint64_t *)__dst);
      uint64_t v11 = v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__src, (char *)__src + 8, v40 + 14, v40 + 22);
      swift_bridgeObjectRelease_n(v9, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "[%@] Subscription info exists for accountID: %{public}s. Clearing default.",  (uint8_t *)v40,  0x16u);
      uint64_t v43 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v41, 1LL, v43);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_arrayDestroy(v110, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v110, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v9, 2LL);
    }

    uint64_t v44 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
    sub_1002F8D94(v44, 0LL, v11);

    return 0LL;
  }

  uint64_t v12 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
  id v13 = sub_1002F8CB4(v12, v11);
  if (!v13
    || (uint64_t v14 = v13,
        uint64_t v109 = v12,
        uint64_t v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v13,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable),  v14,  v16 = sub_100017790(v15),  swift_bridgeObjectRelease(v15),  !v16))
  {
    swift_bridgeObjectRelease(v9);
LABEL_24:

    goto LABEL_25;
  }

  uint64_t v112 = v7;
  id v17 = a2;
  swift_bridgeObjectRetain_n(v9, 2LL);
  id v18 = v17;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter();
  Swift::String v114 = v11;
  unint64_t v108 = (unint64_t)v9;
  uint64_t v107 = v18;
  if (os_log_type_enabled(v19, v20))
  {
    os_log_type_t typea = v20;
    unint64_t v21 = (unint64_t)v9;
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    char v101 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v106 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__dst[0] = v106;
    *(_DWORD *)uint64_t v22 = 138412546;
    *(void *)&__src[0] = v18;
    id v23 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(__src, (char *)__src + 8, v22 + 4, v22 + 12);
    *char v101 = v18;

    *(_WORD *)(v22 + 12) = 2082;
    swift_bridgeObjectRetain(v21);
    *(void *)&__src[0] = sub_100088DB4(v7, v21, (uint64_t *)__dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(__src, (char *)__src + 8, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease_n(v21, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v19,  typea,  "[%@] Migrating subscription info for account: %{public}s",  (uint8_t *)v22,  0x16u);
    uint64_t v24 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v101, 1LL, v24);
    swift_slowDealloc(v101, -1LL, -1LL);
    swift_arrayDestroy(v106, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v106, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v9, 2LL);
  }

  unint64_t v46 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v16);
  *(void *)&__dst[0] = 0LL;
  id v48 = [v46 dataWithJSONObject:isa options:0 error:__dst];

  id v49 = *(id *)&__dst[0];
  if (v48)
  {
    uint64_t v50 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v48);
    unint64_t v52 = v51;

    uint64_t v53 = type metadata accessor for JSONDecoder(0LL);
    swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
    uint64_t v54 = JSONDecoder.init()();
    unint64_t v55 = sub_1000268B8();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( __dst,  &type metadata for KatanaSubscriptionInfo,  v50,  v52,  &type metadata for KatanaSubscriptionInfo,  v55);
    swift_release(v54);
    sub_100007B14(v50, v52);
    char v59 = BYTE8(__dst[0]);
    os_log_t log = *(os_log_t *)&__dst[1];
    *(void *)os_log_type_t type = *(void *)&__dst[0];
    char v60 = BYTE8(__dst[1]);
    __int128 v61 = __dst[2];
    uint64_t v102 = *(void *)&__dst[3];
    char v62 = BYTE8(__dst[3]);
    uint64_t v63 = *(void *)&__dst[4];
    char v64 = BYTE8(__dst[4]);
    uint64_t v65 = *(void *)&__dst[5];
    char v66 = BYTE8(__dst[5]);
    uint64_t v67 = *(void *)&__dst[6];
    char v68 = BYTE8(__dst[6]);
    uint64_t v69 = *(void *)&__dst[7];
    char v70 = BYTE8(__dst[7]);
    uint64_t v71 = *(void *)&__dst[8];
    char v72 = BYTE8(__dst[8]);
    uint64_t v73 = *(void *)&__dst[9];
    char v74 = BYTE8(__dst[9]);
    uint64_t v75 = *(void *)&__dst[10];
    char v76 = BYTE8(__dst[10]);
    __int128 v77 = __dst[11];
    uint64_t v78 = *(void *)&__dst[12];
    char v79 = BYTE8(__dst[12]);
    __int128 v80 = __dst[13];
    uint64_t v81 = *(void *)&__dst[14];
    char v82 = BYTE8(__dst[14]);
    __int128 v83 = __dst[15];
    uint64_t v84 = *(void *)&__dst[16];
    char v85 = BYTE8(__dst[16]);
    __int128 v86 = __dst[17];
    __int128 v87 = __dst[18];
    uint64_t v88 = *(void *)&__dst[19];
    char v89 = BYTE8(__dst[19]);
    char v90 = BYTE9(__dst[19]);
  }

  else
  {
    id v56 = v49;
    uint64_t v57 = _convertNSErrorToError(_:)(v49);

    swift_willThrow(v58);
    swift_errorRelease(v57);
    os_log_t log = 0LL;
    *(void *)os_log_type_t type = 0LL;
    uint64_t v102 = 0LL;
    uint64_t v63 = 0LL;
    uint64_t v65 = 0LL;
    uint64_t v67 = 0LL;
    uint64_t v69 = 0LL;
    uint64_t v71 = 0LL;
    uint64_t v73 = 0LL;
    uint64_t v75 = 0LL;
    uint64_t v78 = 0LL;
    uint64_t v81 = 0LL;
    uint64_t v84 = 0LL;
    uint64_t v88 = 0LL;
    __int128 v61 = 0uLL;
    char v90 = 2;
    char v59 = 1;
    char v60 = 1;
    char v62 = 1;
    char v64 = 1;
    char v66 = 1;
    char v68 = 1;
    char v70 = 1;
    char v72 = 1;
    __int128 v77 = 0uLL;
    char v74 = 1;
    __int128 v80 = 0uLL;
    char v76 = 1;
    char v79 = 1;
    __int128 v83 = 0uLL;
    char v82 = 1;
    __int128 v86 = 0uLL;
    char v85 = 1;
    __int128 v87 = 0uLL;
    char v89 = 1;
  }

  *(void *)&__src[0] = *(void *)type;
  BYTE8(__src[0]) = v59;
  *(void *)&__src[1] = log;
  BYTE8(__src[1]) = v60;
  __src[2] = v61;
  *(void *)&__src[3] = v102;
  BYTE8(__src[3]) = v62;
  *(void *)&__src[4] = v63;
  BYTE8(__src[4]) = v64;
  *(void *)&__src[5] = v65;
  BYTE8(__src[5]) = v66;
  *(void *)&__src[6] = v67;
  BYTE8(__src[6]) = v68;
  *(void *)&__src[7] = v69;
  BYTE8(__src[7]) = v70;
  *(void *)&__src[8] = v71;
  BYTE8(__src[8]) = v72;
  *(void *)&__src[9] = v73;
  BYTE8(__src[9]) = v74;
  *(void *)&__src[10] = v75;
  BYTE8(__src[10]) = v76;
  __src[11] = v77;
  *(void *)&__src[12] = v78;
  BYTE8(__src[12]) = v79;
  __src[13] = v80;
  *(void *)&__src[14] = v81;
  BYTE8(__src[14]) = v82;
  __src[15] = v83;
  *(void *)&__src[16] = v84;
  BYTE8(__src[16]) = v85;
  __src[17] = v86;
  __src[18] = v87;
  *(void *)&__src[19] = v88;
  BYTE8(__src[19]) = v89;
  BYTE9(__src[19]) = v90;
  memcpy(__dst, __src, 0x13AuLL);
  char v91 = sub_100022B0C(__dst, a1, v107);
  sub_100026630(__src);
  int v92 = v91 & 1;
  unsigned __int8 v118 = v92;
  uint64_t v11 = v114;
  sub_1002F8D94(v109, 0LL, v114);
  id v93 = v107;
  uint64_t v94 = swift_bridgeObjectRetain(v108);
  uint64_t v95 = (void *)Logger.logObject.getter(v94);
  os_log_type_t v96 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v95, v96))
  {
    swift_bridgeObjectRelease_n(v108, 2LL);

    goto LABEL_24;
  }

  uint64_t v97 = swift_slowAlloc(28LL, -1LL);
  uint64_t v98 = (void *)swift_slowAlloc(8LL, -1LL);
  uint64_t v111 = swift_slowAlloc(32LL, -1LL);
  uint64_t v119 = v111;
  *(_DWORD *)uint64_t v97 = 138412802;
  uint64_t v116 = (uint64_t)v93;
  id v99 = v93;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v97 + 4, v97 + 12);
  *uint64_t v98 = v93;

  *(_WORD *)(v97 + 12) = 2082;
  swift_bridgeObjectRetain(v108);
  uint64_t v116 = sub_100088DB4(v112, v108, &v119);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v97 + 14, v97 + 22);
  swift_bridgeObjectRelease_n(v108, 3LL);
  *(_WORD *)(v97 + 22) = 1024;
  LODWORD(v116) = v92;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, (char *)&v116 + 4, v97 + 24, v97 + 28);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v95,  v96,  "[%@] Migrated subscription info for account: %{public}s result: %{BOOL}d",  (uint8_t *)v97,  0x1Cu);
  uint64_t v100 = sub_1000079A0((uint64_t *)&unk_100458F50);
  swift_arrayDestroy(v98, 1LL, v100);
  swift_slowDealloc(v98, -1LL, -1LL);
  swift_arrayDestroy(v111, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v111, -1LL, -1LL);
  swift_slowDealloc(v97, -1LL, -1LL);

LABEL_25:
  swift_beginAccess(&v118, __src, 0LL, 0LL);
  return v118;
}

void sub_10001EF20(void *a1)
{
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  char v9 = (char *)v66 - v8;
  v87[0] = 0;
  id v78 = a1;
  unint64_t v10 = sub_100021DD8(a1);
  unint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 + 64);
  unint64_t v79 = v10 + 64;
  unint64_t v86 = v10;
  uint64_t v13 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  v66[1] = v1;
  uint64_t v75 = v1 + OBJC_IVAR____TtC9appstored29KatanaSubscriptionCoordinator_logger;
  swift_bridgeObjectRetain(v10);
  swift_beginAccess(&v86, v85, 1LL, 0LL);
  __n128 v16 = swift_beginAccess(v87, v84, 1LL, 0LL);
  int64_t v17 = 0LL;
  int64_t v80 = (unint64_t)(v13 + 63) >> 6;
  v16.n128_u64[0] = 138413058LL;
  __n128 v69 = v16;
  char v68 = (char *)&type metadata for Any + 8;
  v16.n128_u64[0] = 138412802LL;
  __n128 v67 = v16;
  uint64_t v71 = v4;
  uint64_t v72 = v3;
  char v74 = v7;
  unint64_t v76 = v11;
  __int128 v77 = v9;
  while (v15)
  {
    unint64_t v19 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v20 = v19 | (v17 << 6);
LABEL_23:
    uint64_t v24 = *(void *)(v11 + 56) + 320 * v20;
    if ((*(_BYTE *)(v24 + 312) & 1) == 0)
    {
      int64_t v81 = v17;
      id v25 = (uint64_t *)(*(void *)(v11 + 48) + 16 * v20);
      uint64_t v27 = *v25;
      unint64_t v26 = v25[1];
      double v28 = (double)*(uint64_t *)(v24 + 304) / 1000.0;
      uint64_t v29 = swift_bridgeObjectRetain(v26);
      uint64_t v30 = Date.init(timeIntervalSince1970:)(v29, v28);
      uint64_t v31 = Date.init()(v30);
      double v32 = Date.timeIntervalSince1970.getter(v31);
      double v34 = v32 - Date.timeIntervalSince1970.getter(v33);
      if (v34 <= 2678400.0)
      {
        id v40 = v78;
        swift_bridgeObjectRetain(v26);
        id v41 = v40;
        id v42 = (os_log_s *)Logger.logObject.getter(v41);
        os_log_type_t v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = swift_slowAlloc(32LL, -1LL);
          uint64_t v45 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v46 = swift_slowAlloc(32LL, -1LL);
          v83[0] = v46;
          *(_DWORD *)uint64_t v44 = v67.n128_u32[0];
          *(void *)(v44 + 4) = v41;
          *uint64_t v45 = v78;

          *(_WORD *)(v44 + 12) = 2082;
          swift_bridgeObjectRetain(v26);
          *(void *)(v44 + 14) = sub_100088DB4(v27, v26, v83);
          swift_bridgeObjectRelease_n(v26, 3LL);
          *(_WORD *)(v44 + 22) = 2050;
          *(double *)(v44 + 24) = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "[%@] Not clearing subscriptionInfo for accountID: %{public}s age: %{public}f",  (uint8_t *)v44,  0x20u);
          uint64_t v47 = sub_1000079A0((uint64_t *)&unk_100458F50);
          swift_arrayDestroy(v45, 1LL, v47);
          id v48 = v45;
          uint64_t v4 = v71;
          swift_slowDealloc(v48, -1LL, -1LL);
          swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v49 = v46;
          uint64_t v3 = v72;
          swift_slowDealloc(v49, -1LL, -1LL);
          uint64_t v50 = v44;
          uint64_t v7 = v74;
          swift_slowDealloc(v50, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v26, 2LL);
        }

        id v18 = *(void (**)(char *, uint64_t))(v4 + 8);
        v18(v7, v3);
      }

      else
      {
        uint64_t v35 = v86;
        swift_bridgeObjectRetain_n(v86, 2LL);
        uint64_t v73 = v27;
        unint64_t v36 = sub_100023F7C(v27, v26);
        int v38 = v37;
        swift_bridgeObjectRelease(v35);
        if ((v38 & 1) != 0)
        {
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
          v82[0] = v35;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10007A3B4();
            uint64_t v35 = v82[0];
          }

          swift_bridgeObjectRelease(*(void *)(*(void *)(v35 + 48) + 16 * v36 + 8));
          memcpy(v83, (const void *)(*(void *)(v35 + 56) + 320 * v36), 0x13AuLL);
          sub_100068078(v36, v35);
          swift_bridgeObjectRelease(0x8000000000000000LL);
          sub_100026630(v83);
        }

        unint64_t v51 = v86;
        unint64_t v86 = v35;
        swift_bridgeObjectRelease(v51);
        v87[0] = 1;
        id v52 = v78;
        id v53 = v78;
        swift_bridgeObjectRetain(v26);
        id v54 = v53;
        unint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
        os_log_type_t v56 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = swift_slowAlloc(38LL, -1LL);
          int v70 = v38;
          id v58 = v52;
          uint64_t v59 = v57;
          char v60 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v61 = swift_slowAlloc(32LL, -1LL);
          v83[0] = v61;
          *(_DWORD *)uint64_t v59 = v69.n128_u32[0];
          *(void *)(v59 + 4) = v54;
          *char v60 = v58;

          *(_WORD *)(v59 + 12) = 2082;
          swift_bridgeObjectRetain(v26);
          *(void *)(v59 + 14) = sub_100088DB4(v73, v26, v83);
          swift_bridgeObjectRelease_n(v26, 3LL);
          *(_WORD *)(v59 + 22) = 1026;
          *(_DWORD *)(v59 + 24) = (v70 & 1) == 0;
          *(_WORD *)(v59 + 28) = 2050;
          *(double *)(v59 + 3_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "[%@] Cleared subscriptionInfo for accountID: %{public}s result: %{BOOL,public}d age: %{public}f",  (uint8_t *)v59,  0x26u);
          uint64_t v62 = sub_1000079A0((uint64_t *)&unk_100458F50);
          swift_arrayDestroy(v60, 1LL, v62);
          uint64_t v63 = v60;
          uint64_t v4 = v71;
          swift_slowDealloc(v63, -1LL, -1LL);
          swift_arrayDestroy(v61, 1LL, v68);
          uint64_t v64 = v61;
          uint64_t v3 = v72;
          swift_slowDealloc(v64, -1LL, -1LL);
          swift_slowDealloc(v59, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v26, 2LL);
        }

        id v18 = *(void (**)(char *, uint64_t))(v4 + 8);
        uint64_t v7 = v74;
        v18(v74, v3);
      }

      v18(v77, v3);
      unint64_t v11 = v76;
      int64_t v17 = v81;
    }
  }

  int64_t v21 = v17 + 1;
  if (__OFADD__(v17, 1LL))
  {
    __break(1u);
LABEL_40:
    __break(1u);
    return;
  }

  if (v21 >= v80) {
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v79 + 8 * v21);
  ++v17;
  if (v22) {
    goto LABEL_22;
  }
  int64_t v17 = v21 + 1;
  if (v21 + 1 >= v80) {
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v79 + 8 * v17);
  if (v22) {
    goto LABEL_22;
  }
  int64_t v17 = v21 + 2;
  if (v21 + 2 >= v80) {
    goto LABEL_35;
  }
  unint64_t v22 = *(void *)(v79 + 8 * v17);
  if (v22)
  {
LABEL_22:
    unint64_t v15 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
    goto LABEL_23;
  }

  int64_t v23 = v21 + 3;
  if (v23 < v80)
  {
    unint64_t v22 = *(void *)(v79 + 8 * v23);
    if (!v22)
    {
      while (1)
      {
        int64_t v17 = v23 + 1;
        if (__OFADD__(v23, 1LL)) {
          goto LABEL_40;
        }
        if (v17 >= v80) {
          goto LABEL_35;
        }
        unint64_t v22 = *(void *)(v79 + 8 * v17);
        ++v23;
        if (v22) {
          goto LABEL_22;
        }
      }
    }

    int64_t v17 = v23;
    goto LABEL_22;
  }

LABEL_35:
  swift_release(v11);
  swift_beginAccess(v87, v83, 0LL, 0LL);
  if (v87[0] == 1)
  {
    swift_beginAccess(&v86, v82, 0LL, 0LL);
    unint64_t v65 = v86;
    sub_100022D98(v86, (uint64_t)v78);
  }

  else
  {
    unint64_t v65 = v86;
  }

  swift_bridgeObjectRelease(v65);
}

  swift_release(v7);
  uint64_t v2 = v37;
  unint64_t v36 = 1LL << *(_BYTE *)(v7 + 32);
  if (v36 > 63) {
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *os_log_type_t v39 = -1LL << v36;
  }
  *(void *)(v7 + 16) = 0LL;
LABEL_39:
  id result = swift_release(v7);
  *uint64_t v2 = v9;
  return result;
}

    ++v9;
    id v40 = v112;
    if (v9 == v41)
    {
      char v9 = v41;
      goto LABEL_55;
    }
  }

    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
  }

  else
  {
    return 0LL;
  }

  return result;
}

        char v9 = (char *)v9 + 1;
      }

      while (v55 != v9);
      uint64_t v47 = [v6 countByEnumeratingWithState:&v56 objects:v72 count:16];
      unint64_t v55 = v47;
    }

    while (v47);
  }

  id v48 = [v5 copy];
  return v48;
}

  if (!v6)
  {
    id v42 = v54;
    if (v54) {
      id v42 = objc_getProperty(v54, v41, 32LL, 1);
    }
    uint64_t v6 = v42;
  }

  *(void *)&uint64_t v59 = 0LL;
  *((void *)&v59 + 1) = &v59;
  *(void *)&char v60 = 0x2020000000LL;
  BYTE8(v6_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0;
  os_log_type_t v43 = *(void **)(v52 + 16);
  v63[0] = _NSConcreteStackBlock;
  v63[1] = 3221225472LL;
  v63[2] = sub_10031B5B8;
  v63[3] = &unk_1003F32C8;
  uint64_t v64 = v54;
  uint64_t v44 = v18;
  unint64_t v65 = v44;
  uint64_t v6 = v6;
  char v66 = v6;
  __n128 v67 = v52;
  char v68 = &v59;
  [v43 modifyUsingTransaction:v63];
  if (*(_BYTE *)(*((void *)&v59 + 1) + 24LL))
  {
    if (v9) {
      uint64_t v46 = objc_getProperty(v44, v45, 24LL, 1);
    }
    else {
      uint64_t v46 = 0LL;
    }
  }

  uint64_t v47 = sub_10023B9CC((uint64_t)&OBJC_CLASS___AppInstallScheduler);
  id v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
  sub_10023C568((uint64_t)v48);

  _Block_object_dispose(&v59, 8);
LABEL_44:
}

uint64_t sub_10001F690(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = JSONEncoder.init()();
  memcpy(v57, v2, 0x13AuLL);
  unint64_t v10 = sub_1000269F8();
  uint64_t v33 = dispatch thunk of JSONEncoder.encode<A>(_:)(v57, &type metadata for KatanaSubscriptionInfo, v10);
  unint64_t v35 = v34;
  swift_release(v9);
  unint64_t v36 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&v57[0] = 0LL;
  id v38 = [v36 JSONObjectWithData:isa options:0 error:v57];

  uint64_t v39 = *(void *)&v57[0];
  if (v38)
  {
    id v40 = *(id *)&v57[0];
    _bridgeAnyObjectToAny(_:)(v57, v38);
    swift_unknownObjectRelease(v38);
    uint64_t v41 = sub_1000079A0(&qword_100459DC0);
    if (swift_dynamicCast(&v52, v57, (char *)&type metadata for Any + 8, v41, 6LL))
    {
      uint64_t v55 = v52;
      sub_1000679D0(0xD000000000000015LL, 0x8000000100343200LL, v57);
      sub_100015240((uint64_t)v57, (uint64_t *)&unk_1004594B0);
      sub_100007B14(v33, v35);
      return v55;
    }

    sub_100007B14(v33, v35);
  }

  else
  {
    id v43 = *(id *)&v57[0];
    uint64_t v44 = _convertNSErrorToError(_:)(v39);

    swift_willThrow(v45);
    uint64_t v46 = sub_100007B14(v33, v35);
    static Logger.arcade.getter(v46);
    id v11 = a1;
    swift_errorRetain(v44, v12);
    id v13 = v11;
    uint64_t v14 = v7;
    id v15 = v13;
    uint64_t v17 = swift_errorRetain(v44, v16);
    id v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc(22LL, -1LL);
      unint64_t v51 = v14;
      uint64_t v21 = v20;
      uint64_t v22 = swift_slowAlloc(8LL, -1LL);
      os_log_t v47 = v18;
      int64_t v23 = (void *)v22;
      uint64_t v48 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v57[0] = v48;
      *(_DWORD *)uint64_t v21 = 138412546;
      uint64_t v55 = (uint64_t)v15;
      uint64_t v50 = v4;
      id v24 = v15;
      uint64_t v49 = v5;
      id v25 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v21 + 4, v21 + 12);
      unint64_t v26 = v23;
      *int64_t v23 = v15;

      *(_WORD *)(v21 + 12) = 2082;
      swift_getErrorValue(v44, &v54, v53);
      uint64_t v27 = Error.localizedDescription.getter(v53[1], v53[2]);
      unint64_t v29 = v28;
      uint64_t v55 = sub_100088DB4(v27, v28, (uint64_t *)v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease(v29);
      swift_errorRelease(v44);
      swift_errorRelease(v44);
      os_log_t v30 = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  v19,  "[%@] Error serializing property list: %{public}s",  (uint8_t *)v21,  0x16u);
      uint64_t v31 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v26, 1LL, v31);
      swift_slowDealloc(v26, -1LL, -1LL);
      uint64_t v32 = v48;
      swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);

      swift_errorRelease(v44);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v51, v50);
    }

    else
    {
      swift_errorRelease(v44);

      swift_errorRelease(v44);
      swift_errorRelease(v44);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
    }
  }

  return 0LL;
}

uint64_t sub_10001FF0C(void *a1, id a2, void *a3)
{
  id v6 = objc_msgSend(a2, "ams_DSID");
  if (!v6)
  {
    id v19 = a3;
    id v20 = a2;
    id v21 = v19;
    id v22 = v20;
    int64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc(22LL, -1LL);
      unint64_t v26 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v25 = 138412547;
      __dst[0] = (uint64_t)v21;
      id v27 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, &__dst[1], v25 + 4, v25 + 12);
      void *v26 = v21;

      *(_WORD *)(v25 + 12) = 2113;
      __dst[0] = (uint64_t)v22;
      id v28 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, &__dst[1], v25 + 14, v25 + 22);
      v26[1] = v22;

      _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "[%@] Updating cached subscription info failed to find DSID for account: %{private}@",  (uint8_t *)v25,  0x16u);
      uint64_t v29 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v26, 2LL, v29);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    else
    {
    }

    goto LABEL_11;
  }

  uint64_t v7 = v6;
  id v8 = [v6 stringValue];

  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  unint64_t v11 = v10;

  id v12 = a3;
  uint64_t v13 = swift_bridgeObjectRetain(v11);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v32 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    __dst[0] = v33;
    *(_DWORD *)uint64_t v16 = 138412546;
    __src[0] = v12;
    id v17 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(__src, &__src[1], v16 + 4, v16 + 12);
    void *v32 = v12;

    *(_WORD *)(v16 + 12) = 2082;
    swift_bridgeObjectRetain(v11);
    __src[0] = sub_100088DB4(v9, v11, __dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(__src, &__src[1], v16 + 14, v16 + 22);
    swift_bridgeObjectRelease_n(v11, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "[%@] Updating cached subscription info for account: %{public}s",  (uint8_t *)v16,  0x16u);
    uint64_t v18 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v32, 1LL, v18);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v11, 2LL);
  }

  sub_1000203E4(a1, a2, v12, (uint64_t)v34);
  sub_100026CD4((uint64_t)v34, (uint64_t)__src, &qword_100458D78);
  if (sub_100026C6C((uint64_t)__src) == 1)
  {
LABEL_11:
    char v30 = 0;
    return v30 & 1;
  }

  memcpy(__dst, __src, 0x13AuLL);
  char v30 = sub_100022B0C(__dst, a2, v12);
  sub_100026B64( (uint64_t)v34,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100026BF8);
  return v30 & 1;
}

void sub_1000203E4(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v175 = a2;
  uint64_t v176 = a4;
  uint64_t v179 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v7 = *(void *)(v179 - 8);
  __chkstk_darwin(v179);
  uint64_t v178 = (char *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1000079A0((uint64_t *)&unk_100459410);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v169 = (uint64_t)&v149 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  id v166 = (char *)&v149 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  char v168 = (char *)&v149 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  id v174 = (char *)&v149 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  id v20 = (char *)&v149 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  int64_t v23 = (void (*)(char *, char *, uint64_t))((char *)&v149 - v22);
  __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v149 - v24;
  uint64_t v26 = type metadata accessor for Date(0LL);
  uint64_t v177 = *(void *)(v26 - 8);
  uint64_t v27 = __chkstk_darwin(v26);
  id v165 = (char *)&v149 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v163 = (char *)&v149 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v167 = (uint64_t)&v149 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v156 = (char *)&v149 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  __chkstk_darwin(v36);
  id v40 = (char *)&v149 - v39;
  if (!a1)
  {
    sub_1000223C8(v175, a3, (uint64_t)v193);
    sub_100026CD4((uint64_t)v193, (uint64_t)v192, &qword_100458D78);
    sub_100026CD4((uint64_t)v193, (uint64_t)v194, &qword_100458D78);
    if (sub_100026C6C((uint64_t)v194) == 1)
    {
      uint64_t v49 = v192;
    }

    else
    {
      uint64_t v179 = (uint64_t)&v190[16] + 8;
      memcpy(v195, v194, 0x13AuLL);
      uint64_t v78 = v195[0];
      LODWORD(v165) = LOBYTE(v195[1]);
      char v79 = v195[3];
      uint64_t v163 = (char *)v195[4];
      id v164 = (void (*)(uint64_t, void, uint64_t, uint64_t))v195[2];
      uint64_t v80 = v195[5];
      id v162 = (char *)v195[6];
      LODWORD(v161) = LOBYTE(v195[7]);
      uint64_t v160 = v195[8];
      LODWORD(v159) = LOBYTE(v195[9]);
      uint64_t v158 = v195[10];
      LODWORD(v157) = LOBYTE(v195[11]);
      uint64_t v156 = (char *)v195[12];
      LODWORD(v155) = LOBYTE(v195[13]);
      uint64_t v154 = v195[14];
      unsigned int v153 = LOBYTE(v195[15]);
      uint64_t v152 = v195[16];
      LODWORD(v151) = LOBYTE(v195[17]);
      uint64_t v177 = v195[20];
      LODWORD(v175) = LOBYTE(v195[21]);
      uint64_t v81 = v195[23];
      uint64_t v173 = v195[24];
      id v174 = (char *)v195[22];
      LODWORD(v172) = LOBYTE(v195[25]);
      uint64_t v82 = v195[27];
      id v170 = (unsigned int (*)(char *, uint64_t, uint64_t))v195[28];
      id v171 = (void *)v195[26];
      LODWORD(v169) = LOBYTE(v195[29]);
      LODWORD(v168) = LOBYTE(v195[33]);
      LODWORD(v178) = LOBYTE(v195[39]);
      uint64_t v83 = v195[30];
      uint64_t v84 = v195[31];
      uint64_t v85 = v195[32];
      uint64_t v150 = v195[36];
      uint64_t v86 = v195[37];
      id v166 = (char *)v195[38];
      LODWORD(v167) = BYTE1(v195[39]);
      sub_100026CD4((uint64_t)&v195[34], (uint64_t)v196, &qword_100458D88);
      swift_bridgeObjectRetain(v86);
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v84);
      sub_100026D18((uint64_t)v196);
      *(void *)&v190[0] = v78;
      BYTE8(v190[0]) = (_BYTE)v165;
      *(void *)&v190[1] = v164;
      BYTE8(v190[1]) = v79;
      *(void *)&v190[2] = v163;
      *((void *)&v190[2] + 1) = v80;
      *(void *)&v190[3] = v162;
      BYTE8(v190[3]) = (_BYTE)v161;
      *(void *)&v190[4] = v160;
      BYTE8(v190[4]) = v159;
      *(void *)&v190[5] = v158;
      BYTE8(v190[5]) = v157;
      *(void *)&v190[6] = v156;
      BYTE8(v190[6]) = v155;
      *(void *)&v190[7] = v154;
      BYTE8(v190[7]) = v153;
      *(void *)&v190[8] = v152;
      BYTE8(v190[8]) = v151;
      *(void *)&v190[9] = 0LL;
      BYTE8(v190[9]) = 1;
      *(void *)&v190[10] = v177;
      BYTE8(v190[10]) = (_BYTE)v175;
      *(void *)&v190[11] = v174;
      *((void *)&v190[11] + 1) = v81;
      *(void *)&v190[12] = v173;
      BYTE8(v190[12]) = v172;
      *(void *)&v190[13] = v171;
      *((void *)&v190[13] + 1) = v82;
      *(void *)&v190[14] = v170;
      BYTE8(v190[14]) = v169;
      *(void *)&v190[15] = v83;
      *((void *)&v190[15] + 1) = v84;
      *(void *)&v190[16] = v85;
      uint64_t v87 = v179;
      *(_BYTE *)uint64_t v179 = (_BYTE)v168;
      v190[17] = xmmword_100373150;
      *(void *)&v190[18] = v150;
      *((void *)&v190[18] + 1) = v86;
      *(void *)&v190[19] = v166;
      *(_BYTE *)(v87 + 48) = (_BYTE)v178;
      BYTE9(v190[19]) = v167;
      sub_1000266A4(v190);
      swift_bridgeObjectRelease(v80);
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v82);
      swift_bridgeObjectRelease(v84);
      swift_bridgeObjectRelease(v86);
      sub_100026630(v190);
      memcpy(v191, v190, 0x13AuLL);
      nullsub_20(v191);
      uint64_t v49 = v191;
    }

    goto LABEL_68;
  }

  uint64_t v173 = v38;
  id v171 = a3;
  uint64_t v150 = v4;
  uint64_t v151 = v37;
  id v162 = v20;
  v196[0] = 1;
  char v189 = 1;
  unsigned __int8 v188 = 1;
  char v187 = 1;
  char v186 = 1;
  char v185 = 1;
  char v184 = 1;
  char v183 = 1;
  unsigned __int8 v182 = 1;
  char v181 = 1;
  char v180 = 1;
  id v41 = a1;
  LODWORD(v158) = [v41 autoRenewEnabled];
  v191[0] = 0;
  id v42 = [v41 chargeStoreFrontID];
  uint64_t v175 = (void *)Int.init(truncating:)();

  LOBYTE(v190[0]) = 0;
  id v43 = [v41 expiryDate];
  if (v43)
  {
    uint64_t v44 = v43;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v43);

    uint64_t v45 = v177;
    uint64_t v46 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v177 + 56);
    os_log_t v47 = v23;
    uint64_t v48 = 0LL;
  }

  else
  {
    uint64_t v45 = v177;
    uint64_t v46 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v177 + 56);
    os_log_t v47 = v23;
    uint64_t v48 = 1LL;
  }

  uint64_t v50 = v26;
  id v164 = v46;
  v46((uint64_t)v47, v48, 1LL, v26);
  unint64_t v51 = *(void (**)(void))(v7 + 104);
  uint64_t v53 = (uint64_t)v178;
  uint64_t v52 = v179;
  LODWORD(v16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = enum case for Calendar.Component.month(_:);
  uint64_t v161 = (void (*)(char *, void, uint64_t))v51;
  v51(v178);
  sub_10002162C(v23, v53, v25);
  unint64_t v159 = *(void *)(v7 + 8);
  ((void (*)(uint64_t, uint64_t))v159)(v53, v52);
  sub_100015240((uint64_t)v23, (uint64_t *)&unk_100459410);
  id v170 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  uint64_t v54 = v50;
  if (v170(v25, 1LL, v50) == 1)
  {
    sub_100015240((uint64_t)v25, (uint64_t *)&unk_100459410);
    uint64_t v55 = 0LL;
    uint64_t v56 = 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v40, v25, v50);
    uint64_t v57 = (uint64_t)v162;
    (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v162, v40, v54);
    v164(v57, 0LL, 1LL, v54);
    uint64_t v56 = sub_100024A44(v57);
    uint64_t v55 = v58;
    sub_100015240(v57, (uint64_t *)&unk_100459410);
    (*(void (**)(char *, uint64_t))(v45 + 8))(v40, v54);
    swift_bridgeObjectRelease(0LL);
  }

  uint64_t v59 = v171;
  uint64_t v60 = (uint64_t)v174;
  id v61 = [v41 initialPurchaseTimestamp];
  uint64_t v157 = v55;
  id v174 = (char *)v56;
  if (!v61) {
    goto LABEL_13;
  }
  uint64_t v62 = v61;
  uint64_t v63 = Int.init(truncating:)();
  uint64_t v64 = v173;
  Date.init(timeIntervalSince1970:)(v63, (double)v63 / 1000.0);
  sub_1000218FC(v64, v59, v60);
  if (v170((char *)v60, 1LL, v54) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v64, v54);

    sub_100015240(v60, (uint64_t *)&unk_100459410);
LABEL_13:
    uint64_t v172 = 0LL;
    goto LABEL_18;
  }

  unint64_t v65 = v156;
  uint64_t v66 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 32))(v156, v60, v54);
  double v67 = Date.timeIntervalSince1970.getter(v66);

  double v68 = v67 * 1000.0;
  if ((~COERCE__INT64(v67 * 1000.0) & 0x7FF0000000000000LL) == 0)
  {
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }

  if (v68 <= -9.22337204e18)
  {
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }

  if (v68 >= 9.22337204e18)
  {
LABEL_74:
    __break(1u);
    goto LABEL_75;
  }

  uint64_t v172 = (uint64_t)v68;
  __n128 v69 = *(void (**)(char *, uint64_t))(v45 + 8);
  v69(v65, v54);
  v69((char *)v173, v54);
  unsigned __int8 v188 = 0;
LABEL_18:
  LODWORD(v155) = [v41 isInGracePeriod];
  char v187 = 0;
  LODWORD(v154) = [v41 isOfferPeriod];
  char v186 = 0;
  LODWORD(v152) = [v41 isPurchaser];
  char v185 = 0;
  unsigned int v153 = [v41 isTrialPeriod];
  char v183 = 0;
  id v70 = [v41 vendorAdHocOfferID];
  uint64_t v71 = (void (*)(char *, char *, uint64_t))v169;
  uint64_t v72 = v167;
  if (v70)
  {
    uint64_t v73 = v170;

    id v74 = [v41 vendorAdHocOfferID];
    if (v74)
    {
      uint64_t v75 = v74;
      uint64_t v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
      uint64_t v156 = v76;
    }

    else
    {
      uint64_t v173 = 0LL;
      uint64_t v156 = 0LL;
    }

    uint64_t v77 = (uint64_t)v168;
    swift_bridgeObjectRelease(0LL);
  }

  else
  {
    uint64_t v73 = v170;
    uint64_t v173 = 0LL;
    uint64_t v156 = 0LL;
    uint64_t v77 = (uint64_t)v168;
  }

  id v88 = [v41 serviceBeginsTimestamp];
  if (!v88) {
    goto LABEL_28;
  }
  char v89 = v88;
  uint64_t v90 = Int.init(truncating:)();
  Date.init(timeIntervalSince1970:)(v90, (double)v90 / 1000.0);
  sub_1000218FC(v72, v171, v77);
  if (v73((char *)v77, 1LL, v54) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v72, v54);

    sub_100015240(v77, (uint64_t *)&unk_100459410);
LABEL_28:
    id v171 = 0LL;
    char v91 = v166;
    int v92 = v73;
    goto LABEL_33;
  }

  uint64_t v93 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 32))(v163, v77, v54);
  double v94 = Date.timeIntervalSince1970.getter(v93);

  double v95 = v94 * 1000.0;
  if ((~COERCE__INT64(v94 * 1000.0) & 0x7FF0000000000000LL) == 0)
  {
LABEL_75:
    __break(1u);
    goto LABEL_76;
  }

  char v91 = v166;
  if (v95 <= -9.22337204e18)
  {
LABEL_76:
    __break(1u);
    goto LABEL_77;
  }

  if (v95 < 9.22337204e18)
  {
    int v92 = v73;
    id v171 = (void *)(uint64_t)v95;
    os_log_type_t v96 = *(void (**)(char *, uint64_t))(v45 + 8);
    v96(v163, v54);
    v96((char *)v72, v54);
    unsigned __int8 v182 = 0;
LABEL_33:
    id v97 = [v41 startDate];
    if (v97)
    {
      uint64_t v98 = v97;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v97);

      uint64_t v99 = 0LL;
    }

    else
    {
      uint64_t v99 = 1LL;
    }

    uint64_t v100 = v164;
    v164((uint64_t)v71, v99, 1LL, v54);
    char v101 = v71;
    uint64_t v103 = (uint64_t)v178;
    uint64_t v102 = v179;
    v161(v178, v160, v179);
    sub_10002162C(v101, v103, v91);
    ((void (*)(uint64_t, uint64_t))v159)(v103, v102);
    sub_100015240((uint64_t)v101, (uint64_t *)&unk_100459410);
    if (v92(v91, 1LL, v54) == 1)
    {
      sub_100015240((uint64_t)v91, (uint64_t *)&unk_100459410);
      uint64_t v178 = 0LL;
      id v164 = 0LL;
    }

    else
    {
      uint64_t v104 = v151;
      (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v151, v91, v54);
      uint64_t v105 = (uint64_t)v162;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v162, v104, v54);
      v100(v105, 0LL, 1LL, v54);
      uint64_t v178 = (char *)sub_100024A44(v105);
      id v164 = v106;
      sub_100015240(v105, (uint64_t *)&unk_100459410);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v104, v54);
      swift_bridgeObjectRelease(0LL);
    }

    id v107 = [v41 inAppAdamID];
    char v168 = (char *)[v107 longLongValue];

    char v181 = 0;
    id v108 = [v41 featureAccessTypeID];
    v167 = v108 && (v109 = v108, id v110 = [v108 integerValue], v109, (uint64_t)v110 > 0);
    uint64_t v179 = 1819047278LL;
    char v180 = 0;
    id v111 = [v41 freeTrialPeriodID];
    if (v111)
    {
      uint64_t v112 = v111;
      id v113 = [v111 integerValue];

      uint64_t v114 = 1819047278LL;
      uint64_t v179 = v114;
      else {
        unint64_t v115 = 0xE200000000000000LL;
      }
    }

    else
    {
      unint64_t v115 = 0xE400000000000000LL;
    }

    uint64_t v163 = (char *)v115;
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRelease(0LL);
    unsigned int v116 = [v41 isTrialPeriod];
    uint64_t v117 = 1684627792LL;
    if (v116) {
      uint64_t v117 = 0x6169725465657266LL;
    }
    id v170 = (unsigned int (*)(char *, uint64_t, uint64_t))v117;
    if (v116) {
      unint64_t v118 = 0xE90000000000006CLL;
    }
    else {
      unint64_t v118 = 0xE400000000000000LL;
    }
    id v166 = (char *)v118;
    swift_bridgeObjectRetain(v118);
    swift_bridgeObjectRelease(0LL);
    id v119 = [v41 subscriptionBundleID];
    id v120 = [v119 integerValue];

    if (v120)
    {
      uint64_t v169 = 0x6E4F20656C707041LL;
      unint64_t v121 = 0xE900000000000065LL;
    }

    else
    {
      unint64_t v121 = 0xEA0000000000656ELL;
      id v122 = [v41 promoScenarioID];
      if (v122)
      {
        unint64_t v123 = v122;
        uint64_t v124 = 0x6F6C61646E617453LL;
        id v125 = [v122 longLongValue];

        char v126 = sub_100085D4C( (uint64_t)v125,  *(void *)(v150 + OBJC_IVAR____TtC9appstored29KatanaSubscriptionCoordinator_hardwareBundlePromoScenarios));
        if ((v126 & 1) != 0) {
          uint64_t v124 = 0x6572617764726148LL;
        }
        uint64_t v169 = v124;
        if ((v126 & 1) != 0) {
          unint64_t v121 = 0xEF656C646E754220LL;
        }
      }

      else
      {
        uint64_t v169 = 0x6F6C61646E617453LL;
      }
    }

    swift_bridgeObjectRetain(v121);
    uint64_t v127 = swift_bridgeObjectRelease(0LL);
    char v184 = 0;
    __int128 v128 = v165;
    uint64_t v129 = Date.init()(v127);
    double v130 = Date.timeIntervalSince1970.getter(v129);

    double v131 = v130 * 1000.0;
    if ((~COERCE__INT64(v130 * 1000.0) & 0x7FF0000000000000LL) != 0)
    {
      if (v131 > -9.22337204e18)
      {
        if (v131 < 9.22337204e18)
        {
          unint64_t v132 = v158;
          uint64_t v133 = v54;
          uint64_t v134 = v155;
          uint64_t v135 = v154;
          uint64_t v158 = v155;
          unint64_t v159 = v154;
          uint64_t v136 = v152;
          uint64_t v160 = v152;
          uint64_t v161 = (void (*)(char *, void, uint64_t))v132;
          id v162 = (char *)&v194[33];
          uint64_t v137 = (uint64_t)v131;
          BOOL v138 = *(void (**)(char *, uint64_t))(v177 + 8);
          uint64_t v139 = v153;
          uint64_t v155 = v153;
          v138(v128, v133);
          LODWORD(v177) = v188;
          LODWORD(v165) = v182;
          v192[0] = v132;
          LOBYTE(v192[1]) = 0;
          uint64_t v140 = v164;
          v192[2] = v175;
          LOBYTE(v192[3]) = 0;
          v192[4] = v174;
          unint64_t v141 = v121;
          uint64_t v142 = v157;
          v192[5] = v157;
          v192[6] = 0LL;
          LOBYTE(v192[7]) = 1;
          v192[8] = 0LL;
          LOBYTE(v192[9]) = 1;
          v192[10] = v172;
          LOBYTE(v192[11]) = v188;
          v192[12] = v134;
          LOBYTE(v192[13]) = 0;
          v192[14] = v135;
          LOBYTE(v192[15]) = 0;
          v192[16] = v136;
          LOBYTE(v192[17]) = 0;
          v192[18] = 1LL;
          LOBYTE(v192[19]) = 0;
          v192[20] = v139;
          LOBYTE(v192[21]) = 0;
          v192[22] = v173;
          uint64_t v143 = v156;
          v192[23] = v156;
          v192[24] = v171;
          LOBYTE(v192[25]) = v182;
          v192[26] = v178;
          v192[27] = v164;
          uint64_t v144 = v167;
          v192[28] = v168;
          LOBYTE(v192[29]) = 0;
          v192[30] = v179;
          uint64_t v145 = v163;
          v192[31] = v163;
          LOBYTE(v192[33]) = 0;
          v192[32] = v167;
          v192[34] = v170;
          uint64_t v146 = v166;
          v192[35] = v166;
          v192[36] = v169;
          unint64_t v147 = v141;
          v192[37] = v141;
          v192[38] = v137;
          LOWORD(v192[39]) = 256;
          swift_bridgeObjectRetain(v164);
          swift_bridgeObjectRetain(v142);
          swift_bridgeObjectRetain(v143);
          sub_1000266A4(v192);
          swift_bridgeObjectRelease(v142);
          swift_bridgeObjectRelease(v143);
          swift_bridgeObjectRelease(v140);
          swift_bridgeObjectRelease(v145);
          swift_bridgeObjectRelease(v146);
          swift_bridgeObjectRelease(v147);
          memcpy(v193, v192, 0x13AuLL);
          nullsub_20(v193);
          v194[0] = v161;
          LOBYTE(v194[1]) = v191[0];
          v194[2] = v175;
          LOBYTE(v194[3]) = v190[0];
          v194[4] = v174;
          v194[5] = v142;
          LOBYTE(v194[7]) = v196[0];
          LOBYTE(v194[9]) = v189;
          v194[10] = v172;
          LOBYTE(v194[11]) = v177;
          v194[12] = v158;
          LOBYTE(v194[13]) = v187;
          v194[14] = v159;
          LOBYTE(v194[15]) = v186;
          v194[16] = v160;
          LOBYTE(v194[17]) = v185;
          LOBYTE(v194[19]) = v184;
          v194[20] = v155;
          LOBYTE(v194[21]) = v183;
          v194[22] = v173;
          v194[23] = v143;
          v194[24] = v171;
          LOBYTE(v194[25]) = (_BYTE)v165;
          v194[26] = v178;
          v194[27] = v140;
          v194[28] = v168;
          LOBYTE(v194[29]) = v181;
          v194[30] = v179;
          v194[31] = v145;
          uint64_t v148 = v162;
          *id v162 = v180;
          v194[32] = v144;
          v194[34] = v170;
          v194[35] = v146;
          v194[36] = v169;
          v194[37] = v147;
          v194[38] = v137;
          v148[48] = 0;
          v194[18] = 1LL;
          BYTE1(v194[39]) = 1;
          v194[6] = 0LL;
          v194[8] = 0LL;
          sub_100026630(v194);
          uint64_t v49 = v193;
LABEL_68:
          sub_100026CD4((uint64_t)v49, (uint64_t)v197, &qword_100458D78);
          sub_100026CD4((uint64_t)v197, v176, &qword_100458D78);
          return;
        }

        goto LABEL_71;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_71:
    __break(1u);
    goto LABEL_72;
  }

LABEL_77:
  __break(1u);
}

                id v97 = ASDErrorWithTitleAndMessage(v129, 712LL, @"Missing required SINF", 0LL);
                uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(v97);
                sub_1002015D0((uint64_t)v6, v24, v98);

                uint64_t v13 = v128;
                if (!v24) {
                  goto LABEL_78;
                }
                goto LABEL_80;
              }
            }

            else
            {
              uint64_t v38 = 0LL;
            }

            goto LABEL_77;
          }

          id v88 = ASDErrorWithUserInfoAndFormat(746LL, 0LL, @"Package is missing");
          uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(v88);
          sub_1002015D0((uint64_t)v6, v24, v85);
        }

        if (!v24) {
          goto LABEL_78;
        }
        goto LABEL_80;
      }

      uint64_t v82 = ASDLogHandleForCategory(29LL);
      uint64_t v24 = (_BYTE *)objc_claimAutoreleasedReturnValue(v82);
      if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 138543362;
        *(void *)&buf[4] = v15;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v24,  OS_LOG_TYPE_ERROR,  "Skipping post processing to server item missing missing itemID for item: %{public}@",  buf,  0xCu);
      }

              id v42 = v128 + 1;
            }

            while (v126 != (id)(v128 + 1));
            uint64_t v112 = [obj countByEnumeratingWithState:&v133 objects:buf count:16];
            char v126 = v112;
          }

          while (v112);
        }

        id v6 = v119;
        uint64_t v13 = v120;
        uint64_t v15 = v121;
        uint64_t v11 = v122;
      }

      objc_autoreleasePoolPop(v13);
      uint64_t v11 = &v11[(void)[v15 count]];
      id v113 = ASDLogHandleForCategory(29LL);
      uint64_t v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
      if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
      {
        if (v2) {
          unint64_t v115 = v2->super._client;
        }
        else {
          unint64_t v115 = 0LL;
        }
        *(_DWORD *)buf = v117;
        unint64_t v147 = v115;
        uint64_t v148 = 2048;
        uint64_t v149 = v11;
        uint64_t v150 = 2048;
        uint64_t v151 = v118;
        _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEFAULT,  "[%@] Created %lu/%lu placeholders",  buf,  0x20u);
      }
    }

    while ([v6 count]);
  }
}

uint64_t sub_10002162C@<X0>( void (*a1)(char *, char *, uint64_t)@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v35 = a1;
  uint64_t v36 = a3;
  uint64_t v3 = type metadata accessor for DateComponents(0LL);
  uint64_t v33 = *(void *)(v3 - 8);
  uint64_t v34 = v3;
  __chkstk_darwin(v3);
  uint64_t v32 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Calendar.Identifier(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Calendar(0LL);
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1000079A0((uint64_t *)&unk_100459410);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100026D40((uint64_t)v35, (uint64_t)v17, (uint64_t *)&unk_100459410);
  uint64_t v22 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48);
  if (v22(v17, 1LL, v18) == 1)
  {
    uint64_t v23 = (uint64_t)v17;
  }

  else
  {
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v35(v21, v17, v18);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))( v8,  enum case for Calendar.Identifier.gregorian(_:),  v5);
    Calendar.init(identifier:)(v8);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v24 = sub_1000247E8(v31);
    uint64_t v25 = v32;
    Calendar.dateComponents(_:from:)(v24, v21);
    swift_bridgeObjectRelease(v24);
    Calendar.date(from:)(v25);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v34);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    if (v22(v15, 1LL, v18) != 1)
    {
      uint64_t v27 = v36;
      v35(v36, v15, v18);
      uint64_t v26 = 0LL;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v27, v26, 1LL, v18);
    }

    uint64_t v23 = (uint64_t)v15;
  }

  sub_100015240(v23, (uint64_t *)&unk_100459410);
  uint64_t v26 = 1LL;
  uint64_t v27 = v36;
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v27, v26, 1LL, v18);
}

uint64_t sub_1000218FC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v55 = a2;
  uint64_t v58 = a1;
  uint64_t v59 = a3;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v56 = *(void *)(v3 - 8);
  uint64_t v57 = v3;
  __chkstk_darwin(v3);
  id v61 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v62 = v9;
  uint64_t v63 = v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v60 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v51 - v13;
  uint64_t v15 = type metadata accessor for Calendar.Identifier(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for Calendar(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, void, uint64_t))(v16 + 104))( v18,  enum case for Calendar.Identifier.gregorian(_:),  v15);
  Calendar.init(identifier:)(v18);
  uint64_t v23 = v18;
  uint64_t v24 = v58;
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v23, v15);
  Date.init()(v25);
  uint64_t v66 = 0LL;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for Calendar.Component.weekOfMonth(_:), v5);
  LOBYTE(v15) = Calendar.dateInterval(of:start:interval:for:)(v8, v14, &v66, v24);
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((v15 & 1) != 0)
  {
    uint64_t v27 = v59;
    Calendar.startOfDay(for:)(v14);
    uint64_t v29 = v62;
    uint64_t v28 = v63;
    (*(void (**)(char *, uint64_t))(v63 + 8))(v14, v62);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    uint64_t v30 = 0LL;
    uint64_t v31 = v27;
  }

  else
  {
    uint64_t v53 = v20;
    uint64_t v54 = v19;
    static Logger.arcade.getter(v26);
    uint64_t v29 = v62;
    uint64_t v28 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v60, v24, v62);
    id v32 = v55;
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.error.getter();
    int v35 = v34;
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v36 = swift_slowAlloc(22LL, -1LL);
      os_log_t v52 = v33;
      LODWORD(v55) = v35;
      uint64_t v37 = v36;
      uint64_t v38 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      uint64_t v64 = (uint64_t)v32;
      uint64_t v65 = v58;
      *(_DWORD *)uint64_t v37 = 138412546;
      id v39 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v37 + 4, v37 + 12);
      void *v38 = v32;

      *(_WORD *)(v37 + 12) = 2082;
      uint64_t v40 = sub_100004DD4( (unint64_t *)&qword_100459420,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      id v41 = v60;
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v29, v40);
      unint64_t v44 = v43;
      uint64_t v64 = sub_100088DB4(v42, v43, &v65);
      uint64_t v28 = v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease(v44);
      uint64_t v45 = *(void (**)(char *, uint64_t))(v28 + 8);
      v45(v41, v29);
      os_log_t v46 = v52;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  (os_log_type_t)v55,  "[%@] Failed to deres date: %{public}s",  (uint8_t *)v37,  0x16u);
      uint64_t v47 = sub_1000079A0((uint64_t *)&unk_100458F50);
      uint64_t v30 = 1LL;
      swift_arrayDestroy(v38, 1LL, v47);
      swift_slowDealloc(v38, -1LL, -1LL);
      uint64_t v48 = v58;
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v61, v57);
      v45(v14, v29);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v22, v54);
    }

    else
    {

      uint64_t v49 = *(void (**)(char *, uint64_t))(v28 + 8);
      v49(v60, v29);

      (*(void (**)(char *, uint64_t))(v56 + 8))(v61, v57);
      v49(v14, v29);
      (*(void (**)(char *, uint64_t))(v53 + 8))(v22, v54);
      uint64_t v30 = 1LL;
    }

    uint64_t v31 = v59;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v31, v30, 1LL, v29);
}

unint64_t sub_100021DD8(void *a1)
{
  uint64_t v47 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v50 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v49 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_1000079A0((uint64_t *)&unk_100459B80);
  __chkstk_darwin(v4);
  os_log_t v46 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v53 = *(void *)(v6 - 8);
  uint64_t v54 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v48 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v45 - v9;
  uint64_t v11 = v1 + OBJC_IVAR____TtC9appstored29KatanaSubscriptionCoordinator_logger;
  id v51 = a1;
  uint64_t v45 = v11;
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v51);
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  os_log_t v52 = v10;
  if (v14)
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v16 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v15 = 138412290;
    id v17 = v51;
    unint64_t v55 = (unint64_t)v51;
    id v18 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v15 + 4, v15 + 12);
    *uint64_t v16 = v17;

    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%@] Loading all subscription info", v15, 0xCu);
    uint64_t v19 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v16, 1LL, v19);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {
    id v20 = v51;
  }

  uint64_t v21 = objc_opt_self(&OBJC_CLASS___Storage);
  id v22 = sub_100220B14(v21);
  uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v25 = v24;

  uint64_t v26 = v54;
  uint64_t v27 = v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v46, 1LL, 1LL, v54);
  uint64_t v28 = enum case for URL.DirectoryHint.inferFromPath(_:);
  uint64_t v29 = v49;
  uint64_t v30 = v50;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 104);
  uint64_t v32 = v47;
  v31(v49, enum case for URL.DirectoryHint.inferFromPath(_:), v47);
  uint64_t v33 = v48;
  URL.init(filePath:directoryHint:relativeTo:)(v23, v25, v29, v27);
  unint64_t v55 = 0xD00000000000001FLL;
  unint64_t v56 = 0x80000001003431A0LL;
  v31(v29, v28, v32);
  unint64_t v34 = sub_1000150D4();
  int v35 = v52;
  URL.appending<A>(path:directoryHint:)(&v55, v29, &type metadata for String, v34);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v29, v32);
  swift_bridgeObjectRelease(v56);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v53 + 8);
  v36(v33, v26);
  uint64_t v37 = Data.init(contentsOf:options:)(v35, 0LL);
  unint64_t v39 = v38;
  uint64_t v40 = type metadata accessor for PropertyListDecoder(0LL);
  swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
  uint64_t v41 = PropertyListDecoder.init()();
  unint64_t v42 = sub_100026C90();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)( &v55,  &type metadata for KatanaSubscriptionMetadata,  v37,  v39,  &type metadata for KatanaSubscriptionMetadata,  v42);
  swift_release(v41);
  sub_100007B14(v37, v39);
  unint64_t v44 = v55;
  v36(v35, v54);
  return v44;
}

uint64_t sub_1000223C8@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v6 = objc_msgSend(a1, "ams_DSID");
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [v6 stringValue];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    unint64_t v11 = v10;

    id v12 = a2;
    swift_bridgeObjectRetain_n(v11, 2LL);
    id v13 = v12;
    BOOL v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.debug.getter();
    uint64_t v51 = a3;
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc(22LL, -1LL);
      uint64_t v47 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v48 = swift_slowAlloc(32LL, -1LL);
      uint64_t v56 = v48;
      *(_DWORD *)uint64_t v16 = 138412546;
      uint64_t v54 = (uint64_t)v13;
      uint64_t v17 = v9;
      id v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v16 + 4, v16 + 12);
      *uint64_t v47 = v13;

      uint64_t v9 = v17;
      *(_WORD *)(v16 + 12) = 2082;
      swift_bridgeObjectRetain(v11);
      uint64_t v54 = sub_100088DB4(v17, v11, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease_n(v11, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "[%@] Loading subscription info for account: %{public}s",  (uint8_t *)v16,  0x16u);
      uint64_t v19 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v47, 1LL, v19);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v11, 2LL);
    }

    unint64_t v32 = sub_100021DD8(v13);
    if (*(void *)(v32 + 16))
    {
      swift_bridgeObjectRetain(v11);
      unint64_t v33 = sub_100023F7C(v9, v11);
      if ((v34 & 1) == 0)
      {
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v32);
        sub_100026AB4((uint64_t)&v56);
        goto LABEL_15;
      }

      int v35 = (const void *)(*(void *)(v32 + 56) + 320 * v33);
      memcpy(__dst, v35, 0x13AuLL);
      memmove(&v56, v35, 0x13AuLL);
      nullsub_20(&v56);
      sub_1000266A4(__dst);
      swift_bridgeObjectRelease(v11);
    }

    else
    {
      sub_100026AB4((uint64_t)&v56);
    }

    swift_bridgeObjectRelease(v32);
LABEL_15:
    sub_100026CD4((uint64_t)&v56, (uint64_t)&v54, &qword_100458D78);
    id v36 = v13;
    sub_100026B64( (uint64_t)&v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100026AF0);
    id v37 = v36;
    swift_bridgeObjectRetain(v11);
    uint64_t v38 = sub_100026B64( (uint64_t)&v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100026AF0);
    unint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc(28LL, -1LL);
      os_log_t log = v39;
      unint64_t v42 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v56 = v50;
      *(_DWORD *)uint64_t v41 = 138412802;
      __dst[0] = v37;
      id v43 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, &__dst[1], v41 + 4, v41 + 12);
      *unint64_t v42 = v37;

      *(_WORD *)(v41 + 12) = 2082;
      swift_bridgeObjectRetain(v11);
      __dst[0] = sub_100088DB4(v9, v11, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, &__dst[1], v41 + 14, v41 + 22);
      swift_bridgeObjectRelease_n(v11, 3LL);
      *(_WORD *)(v41 + 22) = 1024;
      BOOL v44 = sub_100026C6C((uint64_t)&v54) == 0;
      sub_100026B64( (uint64_t)&v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100026BF8);
      LODWORD(__dst[0]) = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, (char *)__dst + 4, v41 + 24, v41 + 28);
      sub_100026B64( (uint64_t)&v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100026BF8);
      _os_log_impl( (void *)&_mh_execute_header,  log,  v40,  "[%@] Subscription info loaded for account: %{public}s exists: %{BOOL}d",  (uint8_t *)v41,  0x1Cu);
      uint64_t v45 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v42, 1LL, v45);
      swift_slowDealloc(v42, -1LL, -1LL);
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      sub_100026B64( (uint64_t)&v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100026BF8);
      swift_bridgeObjectRelease_n(v11, 2LL);

      sub_100026B64( (uint64_t)&v54,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))sub_100026BF8);
    }

    sub_100026CD4((uint64_t)&v54, (uint64_t)&v56, &qword_100458D78);
    a3 = v51;
    return sub_100026CD4((uint64_t)&v56, a3, &qword_100458D78);
  }

  id v20 = a2;
  id v21 = a1;
  id v22 = v20;
  id v23 = v21;
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc(22LL, -1LL);
    uint64_t v52 = a3;
    uint64_t v27 = (void *)swift_slowAlloc(16LL, -1LL);
    *(_DWORD *)uint64_t v26 = 138412547;
    uint64_t v56 = (uint64_t)v22;
    id v28 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v26 + 4, v26 + 12);
    void *v27 = v22;

    *(_WORD *)(v26 + 12) = 2113;
    uint64_t v56 = (uint64_t)v23;
    id v29 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57, v26 + 14, v26 + 22);
    v27[1] = v23;

    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "[%@] Failed to find DSID for account: %{private}@",  (uint8_t *)v26,  0x16u);
    uint64_t v30 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v27, 2LL, v30);
    uint64_t v31 = v27;
    a3 = v52;
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
  }

  sub_100026AB4((uint64_t)&v54);
  sub_100026CD4((uint64_t)&v54, (uint64_t)&v56, &qword_100458D78);
  return sub_100026CD4((uint64_t)&v56, a3, &qword_100458D78);
}

uint64_t sub_100022B0C(void *a1, id a2, void *a3)
{
  id v6 = objc_msgSend(a2, "ams_DSID");
  if (v6)
  {
    uint64_t v7 = v6;
    id v8 = [v6 stringValue];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    uint64_t v11 = v10;

    unint64_t v12 = sub_100021DD8(a3);
    swift_bridgeObjectRetain(v11);
    sub_1000266A4(a1);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
    sub_1000792B0(a1, v9, v11, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease_n(v11, 2LL);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    char v14 = sub_100022D98(v12, (uint64_t)a3);
    swift_bridgeObjectRelease(v12);
    return v14 & 1;
  }

  else
  {
    id v16 = a3;
    id v17 = a2;
    id v18 = v16;
    id v19 = v17;
    id v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc(22LL, -1LL);
      id v23 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v22 = 138412547;
      id v27 = v18;
      id v24 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v22 + 4, v22 + 12);
      *id v23 = v18;

      *(_WORD *)(v22 + 12) = 2113;
      id v27 = v19;
      id v25 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v22 + 14, v22 + 22);
      v23[1] = v19;

      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "[%@] Failed to find DSID for account: %{private}@",  (uint8_t *)v22,  0x16u);
      uint64_t v26 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v23, 2LL, v26);
      swift_slowDealloc(v23, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {
    }

    return 0LL;
  }

uint64_t sub_100022D98(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for URL.DirectoryHint(0LL);
  uint64_t v38 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v8 = (char *)v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1000079A0((uint64_t *)&unk_100459B80);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  os_log_type_t v15 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  id v17 = (char *)v34 - v16;
  uint64_t v18 = type metadata accessor for PropertyListEncoder(0LL);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  uint64_t v19 = PropertyListEncoder.init()();
  unint64_t v41 = a1;
  unint64_t v20 = sub_100026A70();
  uint64_t v36 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(&v41, &type metadata for KatanaSubscriptionMetadata, v20);
  unint64_t v37 = v21;
  v34[0] = v3;
  v34[1] = a2;
  swift_release(v19);
  uint64_t v22 = objc_opt_self(&OBJC_CLASS___Storage);
  id v23 = sub_100220B14(v22);
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
  uint64_t v35 = v25;

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v11, 1LL, 1LL, v40);
  uint64_t v26 = enum case for URL.DirectoryHint.inferFromPath(_:);
  uint64_t v27 = v38;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 104);
  v28(v8, enum case for URL.DirectoryHint.inferFromPath(_:), v6);
  URL.init(filePath:directoryHint:relativeTo:)(v24, v35, v8, v11);
  unint64_t v41 = 0xD00000000000001FLL;
  unint64_t v42 = 0x80000001003431A0LL;
  v28(v8, v26, v6);
  unint64_t v29 = sub_1000150D4();
  URL.appending<A>(path:directoryHint:)(&v41, v8, &type metadata for String, v29);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v8, v6);
  swift_bridgeObjectRelease(v42);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v39 + 8);
  v30(v15, v40);
  uint64_t v32 = v36;
  unint64_t v31 = v37;
  Data.write(to:options:)(v17, 0LL, v36, v37);
  v30(v17, v40);
  sub_100007B14(v32, v31);
  return 1LL;
}

id sub_100023248()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KatanaSubscriptionCoordinator(0LL);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000232CC()
{
  return type metadata accessor for KatanaSubscriptionCoordinator(0LL);
}

uint64_t type metadata accessor for KatanaSubscriptionCoordinator(uint64_t a1)
{
  uint64_t result = qword_100458CD0;
  if (!qword_100458CD0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KatanaSubscriptionCoordinator);
  }
  return result;
}

uint64_t sub_100023310(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 2LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10002338C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000233CC + 4 * byte_100373170[a1]))( 0x656E65526F747561LL,  0xE900000000000077LL);
}

unint64_t sub_1000233CC()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000235E0()
{
  return sub_10002338C(*v0);
}

uint64_t sub_1000235E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100024BCC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10002360C(_BYTE *a1@<X8>)
{
  *a1 = 21;
}

uint64_t sub_100023618(uint64_t a1)
{
  unint64_t v2 = sub_1000265EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100023640(uint64_t a1)
{
  unint64_t v2 = sub_1000265EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100023668(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_1000079A0(&qword_100458CF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100015F50(a1, v9);
  unint64_t v11 = sub_1000265EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KatanaSubscriptionInfo.CodingKeys,  &type metadata for KatanaSubscriptionInfo.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = *((unsigned __int8 *)v3 + 8);
  char v55 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v55, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = *((unsigned __int8 *)v3 + 24);
    char v55 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v55, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v55 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v55, v5);
    uint64_t v18 = v3[6];
    uint64_t v19 = *((unsigned __int8 *)v3 + 56);
    char v55 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v55, v5);
    uint64_t v20 = v3[8];
    uint64_t v21 = *((unsigned __int8 *)v3 + 72);
    char v55 = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v55, v5);
    uint64_t v22 = v3[10];
    uint64_t v23 = *((unsigned __int8 *)v3 + 88);
    char v55 = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, v23, &v55, v5);
    uint64_t v24 = v3[12];
    uint64_t v25 = *((unsigned __int8 *)v3 + 104);
    char v55 = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v55, v5);
    uint64_t v26 = v3[14];
    uint64_t v27 = *((unsigned __int8 *)v3 + 120);
    char v55 = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v55, v5);
    uint64_t v28 = v3[16];
    uint64_t v29 = *((unsigned __int8 *)v3 + 136);
    char v55 = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v55, v5);
    uint64_t v30 = v3[18];
    uint64_t v31 = *((unsigned __int8 *)v3 + 152);
    char v55 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, v31, &v55, v5);
    uint64_t v32 = v3[20];
    uint64_t v33 = *((unsigned __int8 *)v3 + 168);
    char v55 = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, &v55, v5);
    uint64_t v34 = v3[22];
    uint64_t v35 = v3[23];
    char v55 = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, &v55, v5);
    uint64_t v36 = v3[24];
    uint64_t v37 = *((unsigned __int8 *)v3 + 200);
    char v55 = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v55, v5);
    uint64_t v38 = v3[26];
    uint64_t v39 = v3[27];
    char v55 = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, v39, &v55, v5);
    uint64_t v40 = v3[28];
    uint64_t v41 = *((unsigned __int8 *)v3 + 232);
    char v55 = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v40, v41, &v55, v5);
    uint64_t v42 = v3[30];
    uint64_t v43 = v3[31];
    char v55 = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v42, v43, &v55, v5);
    uint64_t v44 = v3[32];
    uint64_t v45 = *((unsigned __int8 *)v3 + 264);
    char v55 = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v44, v45, &v55, v5);
    uint64_t v46 = v3[34];
    uint64_t v47 = v3[35];
    char v55 = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v46, v47, &v55, v5);
    uint64_t v48 = v3[36];
    uint64_t v49 = v3[37];
    char v55 = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v48, v49, &v55, v5);
    uint64_t v50 = v3[38];
    uint64_t v51 = *((unsigned __int8 *)v3 + 312);
    char v55 = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v50, v51, &v55, v5);
    uint64_t v52 = *((unsigned __int8 *)v3 + 313);
    char v55 = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v52, &v55, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void *sub_100023AB0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100025498(a1, v5);
  if (!v2) {
    return memcpy(a2, v5, 0x13AuLL);
  }
  return result;
}

uint64_t sub_100023B00(void *a1)
{
  return sub_100023668(a1);
}

uint64_t sub_100023B14(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0(&qword_100458D28);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100015F50(a1, v8);
  unint64_t v10 = sub_100026874();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KatanaSubscriptionMetadata.CodingKeys,  &type metadata for KatanaSubscriptionMetadata.CodingKeys,  v10,  v8,  v9);
  uint64_t v16 = a2;
  uint64_t v11 = sub_1000079A0(&qword_100458D08);
  uint64_t v12 = sub_100026984( &qword_100458D30,  (void (*)(void))sub_1000269F8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100023C38()
{
  return 1LL;
}

Swift::Int sub_100023C40()
{
  return Hasher._finalize()();
}

uint64_t sub_100023C90(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6F666E496C6C61LL, 0xE700000000000000LL);
}

Swift::Int sub_100023CA8()
{
  return Hasher._finalize()();
}

uint64_t sub_100023CF4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DB2A8, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100023D44(void *a1@<X8>)
{
  *a1 = 0x6F666E496C6C61LL;
  a1[1] = 0xE700000000000000LL;
}

uint64_t sub_100023D60()
{
  return 0x6F666E496C6C61LL;
}

uint64_t sub_100023D78@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DB2E0, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

void sub_100023DCC(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100023DD8(uint64_t a1)
{
  unint64_t v2 = sub_100026874();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100023E00(uint64_t a1)
{
  unint64_t v2 = sub_100026874();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_100023E28@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_100026718(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100023E50(void *a1)
{
  return sub_100023B14(a1, *v1);
}

void sub_100023E68()
{
  uint64_t v0 = type metadata accessor for Locale(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  Swift::String v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v4 = [objc_allocWithZone(NSDateFormatter) init];
  Locale.init(identifier:)(0x4F505F53555F6E65LL, 0xEB00000000584953LL);
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  [v4 setLocale:isa];

  NSString v6 = String._bridgeToObjectiveC()();
  [v4 setDateFormat:v6];

  qword_100458C90 = (uint64_t)v4;
}

unint64_t sub_100023F7C(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_100024174(a1, a2, v4);
}

unint64_t sub_100023FE0(uint64_t a1)
{
  uint64_t v3 = static Hasher._hash(seed:_:)(*(void *)(v1 + 40), a1);
  return sub_100024254(a1, v3);
}

unint64_t sub_100024010(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000242F0(a1, v4);
}

unint64_t sub_100024040(void *a1)
{
  if (a1)
  {
    Hasher._combine(_:)(1u);
    id v2 = a1;
    NSObject.hash(into:)(v5);
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Swift::Int v3 = Hasher._finalize()();
  return sub_1000243F8(a1, v3);
}

unint64_t sub_1000240BC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_1000244D8(a1, v4);
}

unint64_t sub_1000240EC(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = sub_100004DD4( &qword_100458D58,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1003726E0);
  _CFObject.hash(into:)(v7, v3, v4);
  Swift::Int v5 = Hasher._finalize()();
  return sub_10002459C(a1, v5);
}

unint64_t sub_100024174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = v10[1];
    BOOL v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v13;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v14 = (void *)(v9 + 16 * v6);
        uint64_t v15 = v14[1];
        BOOL v16 = *v14 == a1 && v15 == a2;
      }

      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0);
    }
  }

  return v6;
}

unint64_t sub_100024254(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0)
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8LL)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }

  return result;
}

unint64_t sub_1000242F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    sub_1000056A8();
    id v7 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)(v7, a1);

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v4;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)(v10, a1);

        if ((v11 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_1000243F8(void *a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0)
  {
    uint64_t v6 = v2;
    uint64_t v8 = ~v4;
    do
    {
      uint64_t v9 = *(void **)(*(void *)(v6 + 48) + 8 * v5);
      if (v9)
      {
        if (a1)
        {
          sub_1000056A8();
          id v10 = v9;
          id v11 = a1;
          char v12 = static NSObject.== infix(_:_:)(v10, v11);

          if ((v12 & 1) != 0) {
            return v5;
          }
        }
      }

      else if (!a1)
      {
        return v5;
      }

      unint64_t v5 = (v5 + 1) & v8;
    }

    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0);
  }

  return v5;
}

unint64_t sub_1000244D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0)
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_100017C44(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100026A3C((uint64_t)v9);
      if ((v7 & 1) != 0) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }

    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v4) & 1) != 0);
  }

  return v4;
}

unint64_t sub_10002459C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v6 = v2;
    type metadata accessor for CFString(0LL);
    uint64_t v9 = v8;
    id v10 = *(void **)(*(void *)(v6 + 48) + 8 * i);
    uint64_t v11 = sub_100004DD4( &qword_100458D58,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_1003726E0);
    id v12 = v10;
    char v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      uint64_t v14 = ~v4;
      for (unint64_t i = (i + 1) & v14; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v14)
      {
        id v15 = *(id *)(*(void *)(v6 + 48) + 8 * i);
        char v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0) {
          break;
        }
      }
    }
  }

  return i;
}

unint64_t sub_1000246DC(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  }
  sub_1000079A0(&qword_100458D90);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = sub_100023FE0(v4);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v6);
    return (unint64_t)v3;
  }

  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    *(void *)(v3[6] + 8 * result) = v4;
    id v10 = (void *)(v3[7] + 16 * result);
    *id v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v14 = v9 + 3;
    uint64_t v4 = *(v9 - 2);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain(v6);
    unint64_t result = sub_100023FE0(v4);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if ((v16 & 1) != 0) {
      goto LABEL_7;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000247E8(uint64_t a1)
{
  uint64_t v24 = a1;
  uint64_t v1 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  char v8 = (char *)&v23 - v7;
  __chkstk_darwin(v6);
  id v10 = (char *)&v23 - v9;
  uint64_t v11 = sub_1000079A0(&qword_100458948);
  uint64_t v12 = *(void *)(v2 + 72);
  uint64_t v13 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v14 = (v13 + 32) & ~v13;
  uint64_t v15 = swift_allocObject(v11, v14 - v12 + 8 * v12, v13 | 7);
  *(_OWORD *)(v15 + 16) = xmmword_100373160;
  uint64_t v25 = v15;
  uint64_t v16 = v15 + v14;
  uint64_t v17 = *(void (**)(uint64_t, void, uint64_t))(v2 + 104);
  v17(v15 + v14, enum case for Calendar.Component.year(_:), v1);
  v17(v16 + v12, enum case for Calendar.Component.month(_:), v1);
  v17(v16 + 2 * v12, enum case for Calendar.Component.day(_:), v1);
  v17(v16 + 3 * v12, enum case for Calendar.Component.hour(_:), v1);
  v17(v16 + 4 * v12, enum case for Calendar.Component.minute(_:), v1);
  v17(v16 + 5 * v12, enum case for Calendar.Component.second(_:), v1);
  uint64_t result = ((uint64_t (*)(uint64_t, void, uint64_t))v17)( v16 + 6 * v12,  enum case for Calendar.Component.nanosecond(_:),  v1);
  unint64_t v19 = 0LL;
  uint64_t v26 = &_swiftEmptySetSingleton;
  while (v19 < *(void *)(v25 + 16))
  {
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
    v20(v10, v16, v1);
    v20(v5, (uint64_t)v10, v1);
    sub_100061420((uint64_t)v8, v5);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v2 + 8);
    v21(v8, v1);
    LOBYTE(v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = static Calendar.Component.== infix(_:_:)(v10, v24);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v21)(v10, v1);
    if ((v20 & 1) == 0)
    {
      v16 += v12;
      if (v19++ != 6) {
        continue;
      }
    }

    swift_bridgeObjectRelease(v25);
    return (uint64_t)v26;
  }

  __break(1u);
  return result;
}

uint64_t sub_100024A44(uint64_t a1)
{
  uint64_t v2 = sub_1000079A0((uint64_t *)&unk_100459410);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100026D40(a1, (uint64_t)v4, (uint64_t *)&unk_100459410);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
  {
    sub_100015240((uint64_t)v4, (uint64_t *)&unk_100459410);
    return 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    if (qword_100458030 != -1) {
      swift_once(&qword_100458030, sub_100023E68);
    }
    id v10 = (void *)qword_100458C90;
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v12 = [v10 stringFromDate:isa];

    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

  return v9;
}

uint64_t sub_100024BCC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x656E65526F747561LL && a2 == 0xE900000000000077LL)
  {
    unint64_t v4 = 0xE900000000000077LL;
LABEL_6:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E65526F747561LL, 0xE900000000000077LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
    goto LABEL_6;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v6 = 0x8000000100343340LL;
    if (a2 == 0x8000000100343340LL) {
      goto LABEL_11;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x8000000100343340LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if (a1 == 0x6144657269707865LL && a2 == 0xEA00000000006574LL)
  {
    unint64_t v7 = 0xEA00000000006574LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144657269707865LL, 0xEA00000000006574LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v8 = 0x8000000100343320LL;
    if (a2 == 0x8000000100343320LL) {
      goto LABEL_22;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100343320LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if (a1 == 0x6164417070416E69LL && a2 == 0xEB0000000064496DLL)
  {
    unint64_t v9 = 0xEB0000000064496DLL;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6164417070416E69LL, 0xEB0000000064496DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_28;
  }

  if (a1 == 0xD000000000000018LL && a2 == 0x8000000100343300LL)
  {
    unint64_t v10 = 0x8000000100343300LL;
LABEL_34:
    swift_bridgeObjectRelease(v10);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018LL, 0x8000000100343300LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_34;
  }

  if (a1 == 0x5065636172477369LL && a2 == 0xED0000646F697265LL)
  {
    unint64_t v11 = 0xED0000646F697265LL;
LABEL_40:
    swift_bridgeObjectRelease(v11);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5065636172477369LL, 0xED0000646F697265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_40;
  }

  if (a1 == 0x50726566664F7369LL && a2 == 0xED0000646F697265LL)
  {
    unint64_t v12 = 0xED0000646F697265LL;
LABEL_46:
    swift_bridgeObjectRelease(v12);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x50726566664F7369LL, 0xED0000646F697265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_46;
  }

  if (a1 == 0x6168637275507369LL && a2 == 0xEB00000000726573LL)
  {
    unint64_t v13 = 0xEB00000000726573LL;
LABEL_52:
    swift_bridgeObjectRelease(v13);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6168637275507369LL, 0xEB00000000726573LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_52;
  }

  if (a1 == 0x7263736275537369LL && a2 == 0xEC00000072656269LL)
  {
    unint64_t v14 = 0xEC00000072656269LL;
LABEL_58:
    swift_bridgeObjectRelease(v14);
    return 9LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7263736275537369LL, 0xEC00000072656269LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_58;
  }

  if (a1 == 0x506C616972547369LL && a2 == 0xED0000646F697265LL)
  {
    unint64_t v15 = 0xED0000646F697265LL;
LABEL_64:
    swift_bridgeObjectRelease(v15);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x506C616972547369LL, 0xED0000646F697265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
    goto LABEL_64;
  }

  if (a1 == 0x656449726566666FLL && a2 == 0xEF7265696669746ELL)
  {
    unint64_t v16 = 0xEF7265696669746ELL;
LABEL_70:
    swift_bridgeObjectRelease(v16);
    return 11LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656449726566666FLL, 0xEF7265696669746ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_70;
  }

  if (a1 == 0xD000000000000016LL && a2 == 0x80000001003432E0LL)
  {
    unint64_t v17 = 0x80000001003432E0LL;
LABEL_76:
    swift_bridgeObjectRelease(v17);
    return 12LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016LL, 0x80000001003432E0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
    goto LABEL_76;
  }

  if (a1 == 0x7461447472617473LL && a2 == 0xE900000000000065LL)
  {
    unint64_t v18 = 0xE900000000000065LL;
LABEL_82:
    swift_bridgeObjectRelease(v18);
    return 13LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7461447472617473LL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
    goto LABEL_82;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v19 = 0x80000001003432C0LL;
    if (a2 == 0x80000001003432C0LL) {
      goto LABEL_87;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x80000001003432C0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
LABEL_87:
    swift_bridgeObjectRelease(v19);
    return 14LL;
  }

  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001003432A0LL)
  {
    unint64_t v20 = 0x80000001003432A0LL;
LABEL_93:
    swift_bridgeObjectRelease(v20);
    return 15LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001003432A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
    goto LABEL_93;
  }

  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100343280LL)
  {
    unint64_t v21 = 0x8000000100343280LL;
LABEL_99:
    swift_bridgeObjectRelease(v21);
    return 16LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100343280LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v21 = a2;
    goto LABEL_99;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v22 = 0x8000000100343260LL;
    if (a2 == 0x8000000100343260LL) {
      goto LABEL_104;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x8000000100343260LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v22 = a2;
LABEL_104:
    swift_bridgeObjectRelease(v22);
    return 17LL;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x8000000100343240LL)
  {
    unint64_t v23 = 0x8000000100343240LL;
LABEL_110:
    swift_bridgeObjectRelease(v23);
    return 18LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100343240LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v23 = a2;
    goto LABEL_110;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v24 = 0x8000000100343200LL;
    if (a2 == 0x8000000100343200LL) {
      goto LABEL_115;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000100343200LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v24 = a2;
LABEL_115:
    swift_bridgeObjectRelease(v24);
    return 19LL;
  }

  if (a1 == 0xD000000000000015LL && a2 == 0x8000000100343220LL)
  {
    swift_bridgeObjectRelease(0x8000000100343220LL);
    return 20LL;
  }

  else
  {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000100343220LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v25 & 1) != 0) {
      return 20LL;
    }
    else {
      return 21LL;
    }
  }

void *sub_100025498@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_1000079A0(&qword_100458CE0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v191 = 1;
  char v189 = 1;
  char v187 = 1;
  char v185 = 1;
  char v183 = 1;
  char v181 = 1;
  char v179 = 1;
  char v177 = 1;
  char v175 = 1;
  char v173 = 1;
  char v171 = 1;
  char v169 = 1;
  char v167 = 1;
  char v165 = 1;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  uint64_t v98 = a1;
  sub_100015F50(a1, v9);
  unint64_t v11 = sub_1000265EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KatanaSubscriptionInfo.CodingKeys,  &type metadata for KatanaSubscriptionInfo.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    uint64_t v108 = v2;
    uint64_t v90 = 0LL;
    uint64_t v91 = 0LL;
    uint64_t v92 = 0LL;
    uint64_t v93 = 0LL;
    uint64_t v89 = 0LL;
    uint64_t v94 = 0LL;
    uint64_t v95 = 0LL;
    uint64_t v99 = 0LL;
    uint64_t v100 = 0LL;
    uint64_t v101 = 0LL;
    uint64_t v102 = 0LL;
    uint64_t v103 = 0LL;
    uint64_t v104 = 0LL;
    uint64_t v105 = 0LL;
    uint64_t v106 = 0LL;
    uint64_t v107 = 0LL;
    uint64_t v96 = 0LL;
    uint64_t v97 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 0LL;
    uint64_t v15 = 0LL;
    uint64_t v16 = 0LL;
    uint64_t v192 = 0LL;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = 0LL;
LABEL_4:
    sub_100015340(v98);
    uint64_t v111 = v19;
    char v112 = v191;
    *(_DWORD *)id v113 = *(_DWORD *)v190;
    *(_DWORD *)&v113[3] = *(_DWORD *)&v190[3];
    uint64_t v114 = v18;
    char v115 = v189;
    *(_DWORD *)unsigned int v116 = *(_DWORD *)v188;
    *(_DWORD *)&v116[3] = *(_DWORD *)&v188[3];
    uint64_t v117 = v17;
    uint64_t v118 = v192;
    uint64_t v119 = v97;
    char v120 = v187;
    *(_DWORD *)unint64_t v121 = *(_DWORD *)v186;
    *(_DWORD *)&v121[3] = *(_DWORD *)&v186[3];
    uint64_t v122 = v16;
    char v123 = v185;
    *(_DWORD *)uint64_t v124 = *(_DWORD *)v184;
    *(_DWORD *)&v124[3] = *(_DWORD *)&v184[3];
    uint64_t v125 = v15;
    char v126 = v183;
    *(_DWORD *)&v127[3] = *(_DWORD *)&v182[3];
    *(_DWORD *)uint64_t v127 = *(_DWORD *)v182;
    uint64_t v128 = v14;
    char v129 = v181;
    *(_DWORD *)&v130[3] = *(_DWORD *)&v180[3];
    *(_DWORD *)double v130 = *(_DWORD *)v180;
    uint64_t v131 = v13;
    char v132 = v179;
    *(_DWORD *)&v133[3] = *(_DWORD *)&v178[3];
    *(_DWORD *)uint64_t v133 = *(_DWORD *)v178;
    uint64_t v134 = v96;
    char v135 = v177;
    *(_DWORD *)&v136[3] = *(_DWORD *)&v176[3];
    *(_DWORD *)uint64_t v136 = *(_DWORD *)v176;
    uint64_t v137 = v107;
    char v138 = v175;
    *(_DWORD *)&v139[3] = *(_DWORD *)&v174[3];
    *(_DWORD *)uint64_t v139 = *(_DWORD *)v174;
    uint64_t v140 = v106;
    char v141 = v173;
    *(_DWORD *)&v142[3] = *(_DWORD *)&v172[3];
    *(_DWORD *)uint64_t v142 = *(_DWORD *)v172;
    uint64_t v143 = v104;
    uint64_t v144 = v105;
    uint64_t v145 = v103;
    char v146 = v171;
    *(_DWORD *)&v147[3] = *(_DWORD *)&v170[3];
    *(_DWORD *)unint64_t v147 = *(_DWORD *)v170;
    uint64_t v148 = v101;
    uint64_t v149 = v102;
    uint64_t v150 = v100;
    char v151 = v169;
    *(_DWORD *)&v152[3] = *(_DWORD *)&v168[3];
    *(_DWORD *)uint64_t v152 = *(_DWORD *)v168;
    uint64_t v153 = v95;
    uint64_t v154 = v99;
    uint64_t v155 = v94;
    char v156 = v167;
    *(_DWORD *)uint64_t v157 = *(_DWORD *)v166;
    *(_DWORD *)&v157[3] = *(_DWORD *)&v166[3];
    uint64_t v158 = v92;
    uint64_t v159 = v89;
    uint64_t v160 = v91;
    uint64_t v161 = v93;
    uint64_t v162 = v90;
    char v163 = v165;
    char v164 = 2;
    return sub_100026630(&v111);
  }

  LOBYTE(v111) = 0;
  uint64_t v12 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  int v22 = v21;
  uint64_t v88 = v12;
  char v191 = v21 & 1;
  LOBYTE(v111) = 1;
  uint64_t v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  int v25 = v24;
  uint64_t v87 = v23;
  char v189 = v24 & 1;
  LOBYTE(v111) = 2;
  uint64_t v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  int v86 = v25;
  LOBYTE(v111) = 3;
  uint64_t v28 = v27;
  swift_bridgeObjectRetain(v27);
  uint64_t v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  uint64_t v192 = v28;
  uint64_t v97 = v29;
  char v187 = v30 & 1;
  LOBYTE(v111) = 4;
  LODWORD(v28) = v30;
  uint64_t v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  int v84 = v28;
  uint64_t v85 = v31;
  char v185 = v32 & 1;
  LOBYTE(v111) = 5;
  char v33 = v32;
  uint64_t v34 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  int v82 = v22;
  uint64_t v83 = v34;
  char v183 = v35 & 1;
  LOBYTE(v111) = 6;
  int v36 = v35;
  uint64_t v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  int v80 = v36;
  char v38 = v37;
  char v181 = v37 & 1;
  LOBYTE(v111) = 7;
  uint64_t v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  uint64_t v78 = v26;
  uint64_t v79 = v39;
  char v41 = v40;
  char v179 = v40 & 1;
  LOBYTE(v111) = 8;
  uint64_t v42 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  uint64_t v108 = 0LL;
  unint64_t v76 = a2;
  uint64_t v96 = v42;
  char v44 = v43;
  char v177 = v43 & 1;
  LOBYTE(v111) = 9;
  uint64_t v107 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  uint64_t v108 = 0LL;
  int v77 = v45;
  char v175 = v45 & 1;
  LOBYTE(v111) = 10;
  uint64_t v106 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  int v75 = v46;
  uint64_t v108 = 0LL;
  char v173 = v46 & 1;
  LOBYTE(v111) = 11;
  uint64_t v104 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  uint64_t v105 = v47;
  uint64_t v108 = 0LL;
  LOBYTE(v111) = 12;
  swift_bridgeObjectRetain(v105);
  uint64_t v48 = v108;
  uint64_t v103 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  int v74 = v49;
  uint64_t v108 = v48;
  if (v48)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v192);
    swift_bridgeObjectRelease(v105);
    uint64_t v90 = 0LL;
    uint64_t v91 = 0LL;
    uint64_t v92 = 0LL;
    uint64_t v93 = 0LL;
    uint64_t v89 = 0LL;
    uint64_t v94 = 0LL;
    uint64_t v95 = 0LL;
    uint64_t v99 = 0LL;
    uint64_t v100 = 0LL;
    uint64_t v101 = 0LL;
    uint64_t v102 = 0LL;
    uint64_t v103 = 0LL;
LABEL_16:
    uint64_t v18 = v87;
    uint64_t v19 = v88;
    uint64_t v17 = v78;
    uint64_t v13 = v79;
    uint64_t v16 = v85;
    uint64_t v15 = v83;
    uint64_t v14 = v81;
    goto LABEL_4;
  }

  char v171 = v74 & 1;
  LOBYTE(v111) = 13;
  uint64_t v101 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  uint64_t v102 = v50;
  uint64_t v108 = 0LL;
  LOBYTE(v111) = 14;
  swift_bridgeObjectRetain(v50);
  uint64_t v51 = v108;
  uint64_t v100 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  int v73 = v52;
  uint64_t v108 = v51;
  if (v51)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v192);
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease(v102);
    uint64_t v90 = 0LL;
    uint64_t v91 = 0LL;
    uint64_t v92 = 0LL;
    uint64_t v93 = 0LL;
    uint64_t v89 = 0LL;
    uint64_t v94 = 0LL;
    uint64_t v95 = 0LL;
    uint64_t v99 = 0LL;
    uint64_t v100 = 0LL;
    goto LABEL_16;
  }

  char v169 = v73 & 1;
  LOBYTE(v111) = 15;
  uint64_t v95 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  uint64_t v99 = v53;
  uint64_t v108 = 0LL;
  LOBYTE(v111) = 16;
  swift_bridgeObjectRetain(v53);
  uint64_t v54 = v108;
  uint64_t v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  int v72 = v55;
  uint64_t v108 = v54;
  if (v54)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v192);
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v99);
    uint64_t v90 = 0LL;
    uint64_t v91 = 0LL;
    uint64_t v92 = 0LL;
    uint64_t v93 = 0LL;
    uint64_t v89 = 0LL;
    uint64_t v94 = 0LL;
    goto LABEL_16;
  }

  char v167 = v72 & 1;
  LOBYTE(v111) = 17;
  uint64_t v92 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  uint64_t v89 = v56;
  uint64_t v108 = 0LL;
  LOBYTE(v111) = 18;
  swift_bridgeObjectRetain(v56);
  uint64_t v57 = v108;
  uint64_t v91 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  uint64_t v93 = v58;
  uint64_t v108 = v57;
  if (v57)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v192);
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v99);
    swift_bridgeObjectRelease(v89);
    uint64_t v90 = 0LL;
    uint64_t v91 = 0LL;
    uint64_t v93 = 0LL;
    goto LABEL_16;
  }

  LOBYTE(v111) = 19;
  swift_bridgeObjectRetain(v93);
  uint64_t v59 = v108;
  uint64_t v90 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v111, v5);
  uint64_t v108 = v59;
  if (v59)
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    swift_bridgeObjectRelease(v192);
    swift_bridgeObjectRelease(v105);
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v99);
    swift_bridgeObjectRelease(v89);
    swift_bridgeObjectRelease(v93);
    uint64_t v90 = 0LL;
    goto LABEL_16;
  }

  int v70 = v60 & 1;
  char v165 = v60 & 1;
  char v110 = 20;
  int v71 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v110, v5);
  uint64_t v108 = 0LL;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v109[264] = v72 & 1;
  v109[312] = v70;
  v109[8] = v82 & 1;
  v109[24] = v86 & 1;
  v109[56] = v84 & 1;
  v109[72] = v33 & 1;
  v109[88] = v80 & 1;
  v109[104] = v38 & 1;
  v109[120] = v41 & 1;
  v109[136] = v44 & 1;
  v109[152] = v77 & 1;
  v109[168] = v75 & 1;
  v109[200] = v74 & 1;
  v109[232] = v73 & 1;
  uint64_t v62 = v87;
  uint64_t v61 = v88;
  *(void *)uint64_t v109 = v88;
  *(void *)&v109[16] = v87;
  uint64_t v63 = v78;
  uint64_t v64 = v192;
  *(void *)&v109[32] = v78;
  *(void *)&v109[40] = v192;
  *(void *)&v109[48] = v97;
  *(void *)&v109[64] = v85;
  *(void *)&v109[80] = v83;
  *(void *)&v109[96] = v81;
  *(void *)&v109[112] = v79;
  *(void *)&v109[128] = v96;
  *(void *)&v109[144] = v107;
  *(void *)&v109[160] = v106;
  *(void *)&v109[176] = v104;
  *(void *)&v109[184] = v105;
  uint64_t v65 = v102;
  *(void *)&v109[192] = v103;
  *(void *)&v109[208] = v101;
  *(void *)&v109[216] = v102;
  uint64_t v66 = v99;
  *(void *)&v109[224] = v100;
  *(void *)&v109[240] = v95;
  *(void *)&v109[248] = v99;
  uint64_t v67 = v93;
  *(void *)&v109[256] = v94;
  *(void *)&v109[272] = v92;
  uint64_t v68 = v89;
  *(void *)&v109[280] = v89;
  *(void *)&v109[288] = v91;
  *(void *)&v109[296] = v93;
  *(void *)&v109[304] = v90;
  v109[313] = v71;
  sub_1000266A4(v109);
  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRelease(v105);
  swift_bridgeObjectRelease(v65);
  swift_bridgeObjectRelease(v66);
  swift_bridgeObjectRelease(v68);
  swift_bridgeObjectRelease(v67);
  sub_100015340(v98);
  uint64_t v111 = v61;
  char v112 = v191;
  *(_DWORD *)id v113 = *(_DWORD *)v190;
  *(_DWORD *)&v113[3] = *(_DWORD *)&v190[3];
  uint64_t v114 = v62;
  char v115 = v189;
  *(_DWORD *)unsigned int v116 = *(_DWORD *)v188;
  *(_DWORD *)&v116[3] = *(_DWORD *)&v188[3];
  uint64_t v117 = v63;
  uint64_t v118 = v64;
  uint64_t v119 = v97;
  char v120 = v187;
  *(_DWORD *)unint64_t v121 = *(_DWORD *)v186;
  *(_DWORD *)&v121[3] = *(_DWORD *)&v186[3];
  uint64_t v122 = v85;
  char v123 = v185;
  *(_DWORD *)uint64_t v124 = *(_DWORD *)v184;
  *(_DWORD *)&v124[3] = *(_DWORD *)&v184[3];
  uint64_t v125 = v83;
  char v126 = v183;
  *(_DWORD *)&v127[3] = *(_DWORD *)&v182[3];
  *(_DWORD *)uint64_t v127 = *(_DWORD *)v182;
  uint64_t v128 = v81;
  char v129 = v181;
  *(_DWORD *)&v130[3] = *(_DWORD *)&v180[3];
  *(_DWORD *)double v130 = *(_DWORD *)v180;
  uint64_t v131 = v79;
  char v132 = v179;
  *(_DWORD *)&v133[3] = *(_DWORD *)&v178[3];
  *(_DWORD *)uint64_t v133 = *(_DWORD *)v178;
  uint64_t v134 = v96;
  char v135 = v177;
  *(_DWORD *)&v136[3] = *(_DWORD *)&v176[3];
  *(_DWORD *)uint64_t v136 = *(_DWORD *)v176;
  uint64_t v137 = v107;
  char v138 = v175;
  *(_DWORD *)&v139[3] = *(_DWORD *)&v174[3];
  *(_DWORD *)uint64_t v139 = *(_DWORD *)v174;
  uint64_t v140 = v106;
  char v141 = v173;
  *(_DWORD *)&v142[3] = *(_DWORD *)&v172[3];
  *(_DWORD *)uint64_t v142 = *(_DWORD *)v172;
  uint64_t v143 = v104;
  uint64_t v144 = v105;
  uint64_t v145 = v103;
  char v146 = v171;
  *(_DWORD *)&v147[3] = *(_DWORD *)&v170[3];
  *(_DWORD *)unint64_t v147 = *(_DWORD *)v170;
  uint64_t v148 = v101;
  uint64_t v149 = v65;
  uint64_t v150 = v100;
  char v151 = v169;
  *(_DWORD *)&v152[3] = *(_DWORD *)&v168[3];
  *(_DWORD *)uint64_t v152 = *(_DWORD *)v168;
  uint64_t v153 = v95;
  uint64_t v154 = v66;
  uint64_t v155 = v94;
  char v156 = v167;
  *(_DWORD *)uint64_t v157 = *(_DWORD *)v166;
  *(_DWORD *)&v157[3] = *(_DWORD *)&v166[3];
  uint64_t v158 = v92;
  uint64_t v159 = v68;
  uint64_t v160 = v91;
  uint64_t v161 = v67;
  uint64_t v162 = v90;
  char v163 = v165;
  char v164 = v71;
  sub_100026630(&v111);
  return memcpy(v76, v109, 0x13AuLL);
}

unint64_t sub_1000265EC()
{
  unint64_t result = qword_100458CE8;
  if (!qword_100458CE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003734A4, &type metadata for KatanaSubscriptionInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100458CE8);
  }

  return result;
}

void *sub_100026630(void *a1)
{
  uint64_t v2 = a1[23];
  uint64_t v3 = a1[27];
  uint64_t v4 = a1[31];
  uint64_t v5 = a1[35];
  uint64_t v6 = a1[37];
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  return a1;
}

void *sub_1000266A4(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = a1[23];
  uint64_t v4 = a1[27];
  uint64_t v5 = a1[31];
  uint64_t v6 = a1[35];
  swift_bridgeObjectRetain(a1[37]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *sub_100026718(void *a1)
{
  uint64_t v3 = sub_1000079A0(&qword_100458CF8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10001DDC0((uint64_t)&_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = sub_100015F50(a1, v8);
  unint64_t v11 = sub_100026874();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KatanaSubscriptionMetadata.CodingKeys,  &type metadata for KatanaSubscriptionMetadata.CodingKeys,  v11,  v8,  v9);
  if (v1)
  {
    sub_100015340(a1);
  }

  else
  {
    uint64_t v12 = sub_1000079A0(&qword_100458D08);
    sub_100026984( &qword_100458D10,  (void (*)(void))sub_1000268B8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v10 = v15;
    sub_100015340(a1);
  }

  return v10;
}

unint64_t sub_100026874()
{
  unint64_t result = qword_100458D00;
  if (!qword_100458D00)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373454, &type metadata for KatanaSubscriptionMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100458D00);
  }

  return result;
}

unint64_t sub_1000268B8()
{
  unint64_t result = qword_100458D18;
  if (!qword_100458D18)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373238, &type metadata for KatanaSubscriptionInfo);
    atomic_store(result, (unint64_t *)&qword_100458D18);
  }

  return result;
}

void *sub_1000268FC(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[7];
  uint64_t v4 = a1[25];
  uint64_t v5 = a1[29];
  uint64_t v6 = a1[33];
  uint64_t v7 = a1[37];
  swift_bridgeObjectRetain(a1[39]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_100026984(unint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v8 = sub_10001528C(&qword_100458D08);
    a2();
    uint64_t result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000269F8()
{
  unint64_t result = qword_100458D38;
  if (!qword_100458D38)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373210, &type metadata for KatanaSubscriptionInfo);
    atomic_store(result, (unint64_t *)&qword_100458D38);
  }

  return result;
}

uint64_t sub_100026A3C(uint64_t a1)
{
  return a1;
}

unint64_t sub_100026A70()
{
  unint64_t result = qword_100458D70;
  if (!qword_100458D70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003731C0, &type metadata for KatanaSubscriptionMetadata);
    atomic_store(result, (unint64_t *)&qword_100458D70);
  }

  return result;
}

uint64_t sub_100026AB4(uint64_t a1)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0LL;
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 1LL;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t result = a1 + 48;
  *(_OWORD *)(result + 25_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0u;
  return result;
}

uint64_t sub_100026AF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38)
{
  if (a6 != 1)
  {
    swift_bridgeObjectRetain(a38);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a24);
    swift_bridgeObjectRetain(a28);
    swift_bridgeObjectRetain(a32);
    return swift_bridgeObjectRetain(a36);
  }

  return result;
}

uint64_t sub_100026B64( uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, __int16))
{
  __int16 v8 = *(_WORD *)(a1 + 312);
  __int128 v6 = *(_OWORD *)(a1 + 272);
  __int128 v7 = *(_OWORD *)(a1 + 288);
  __int128 v4 = *(_OWORD *)(a1 + 240);
  __int128 v5 = *(_OWORD *)(a1 + 256);
  a2( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 88),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 112),  *(void *)(a1 + 120),  *(void *)(a1 + 128),  *(void *)(a1 + 136),  *(void *)(a1 + 144),  *(void *)(a1 + 152),  *(void *)(a1 + 160),  *(void *)(a1 + 168),  *(void *)(a1 + 176),  *(void *)(a1 + 184),  *(void *)(a1 + 192),  *(void *)(a1 + 200),  *(void *)(a1 + 208),  *(void *)(a1 + 216),  *(void *)(a1 + 224),  *(void *)(a1 + 232),  v4,  *((void *)&v4 + 1),  v5,  *((void *)&v5 + 1),  v6,  *((void *)&v6 + 1),  v7,  *((void *)&v7 + 1),  *(void *)(a1 + 304),  v8);
  return a1;
}

uint64_t sub_100026BF8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38)
{
  if (a6 != 1)
  {
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a24);
    swift_bridgeObjectRelease(a28);
    swift_bridgeObjectRelease(a32);
    swift_bridgeObjectRelease(a36);
    return swift_bridgeObjectRelease(a38);
  }

  return result;
}

uint64_t sub_100026C6C(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

unint64_t sub_100026C90()
{
  unint64_t result = qword_100458D80;
  if (!qword_100458D80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003731E8, &type metadata for KatanaSubscriptionMetadata);
    atomic_store(result, (unint64_t *)&qword_100458D80);
  }

  return result;
}

uint64_t sub_100026CD4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000079A0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32LL))(a2, a1, v5);
  return a2;
}

uint64_t sub_100026D18(uint64_t a1)
{
  return a1;
}

uint64_t sub_100026D40(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1000079A0(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, a1, v5);
  return a2;
}

uint64_t getEnumTagSinglePayload for KatanaSubscriptionMetadata.CodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  else {
    int v2 = 2;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for KatanaSubscriptionMetadata.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_100026E18 + 4 * byte_100373185[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_100026E38 + 4 * byte_10037318A[v4]))();
  }
}

_BYTE *sub_100026E18(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_100026E38(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100026E40(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100026E48(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_100026E50(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_100026E58(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

uint64_t sub_100026E64()
{
  return 0LL;
}

ValueMetadata *type metadata accessor for KatanaSubscriptionMetadata.CodingKeys()
{
  return &type metadata for KatanaSubscriptionMetadata.CodingKeys;
}

uint64_t getEnumTagSinglePayload for KatanaSubscriptionInfo.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xEC) {
    goto LABEL_17;
  }
  if (a2 + 20 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 20) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 20;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }

uint64_t storeEnumTagSinglePayload for KatanaSubscriptionInfo.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 20 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 20) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEB) {
    return ((uint64_t (*)(void))((char *)&loc_100026F58 + 4 * byte_100373194[v4]))();
  }
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_100026F8C + 4 * byte_10037318F[v4]))();
}

uint64_t sub_100026F8C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100026F94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100026F9CLL);
  }
  return result;
}

uint64_t sub_100026FA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100026FB0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 20;
  return result;
}

uint64_t sub_100026FB4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100026FBC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KatanaSubscriptionInfo.CodingKeys()
{
  return &type metadata for KatanaSubscriptionInfo.CodingKeys;
}

uint64_t destroy for KatanaSubscriptionInfo(void *a1)
{
  return swift_bridgeObjectRelease(a1[37]);
}

uint64_t initializeWithCopy for KatanaSubscriptionInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v3;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(a2 + 160);
  uint64_t v5 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v5;
  *(_BYTE *)(a1 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(_BYTE *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  uint64_t v6 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v6;
  uint64_t v7 = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  *(void *)(a1 + 224) = v7;
  uint64_t v8 = *(void *)(a2 + 248);
  *(void *)(a1 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v8;
  uint64_t v9 = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  *(void *)(a1 + 256) = v9;
  uint64_t v10 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v10;
  uint64_t v11 = *(void *)(a2 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v11;
  uint64_t v12 = *(void *)(a2 + 304);
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  *(void *)(a1 + 304) = v12;
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t assignWithCopy for KatanaSubscriptionInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[2];
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = a2[4];
  uint64_t v6 = a2[5];
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  *(void *)(a1 + 48) = v8;
  uint64_t v9 = a2[8];
  *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
  *(void *)(a1 + 64) = v9;
  uint64_t v10 = a2[10];
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a2 + 88);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v10;
  uint64_t v11 = a2[12];
  *(_BYTE *)(a1 + 104) = *((_BYTE *)a2 + 104);
  *(void *)(a1 + 96) = v11;
  uint64_t v12 = a2[14];
  *(_BYTE *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *((_BYTE *)a2 + 120);
  *(void *)(a1 + 112) = v12;
  uint64_t v13 = a2[16];
  *(_BYTE *)(a1 + 136) = *((_BYTE *)a2 + 136);
  *(void *)(a1 + 128) = v13;
  uint64_t v14 = a2[18];
  *(_BYTE *)(a1 + 152) = *((_BYTE *)a2 + 152);
  *(void *)(a1 + 144) = v14;
  uint64_t v15 = a2[20];
  *(_BYTE *)(a1 + 168) = *((_BYTE *)a2 + 168);
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v15;
  *(void *)(a1 + 176) = a2[22];
  uint64_t v16 = a2[23];
  uint64_t v17 = *(void *)(a1 + 184);
  *(void *)(a1 + 184) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  uint64_t v18 = a2[24];
  *(_BYTE *)(a1 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *((_BYTE *)a2 + 200);
  *(void *)(a1 + 192) = v18;
  *(void *)(a1 + 208) = a2[26];
  uint64_t v19 = a2[27];
  uint64_t v20 = *(void *)(a1 + 216);
  *(void *)(a1 + 216) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  uint64_t v21 = a2[28];
  *(_BYTE *)(a1 + 232) = *((_BYTE *)a2 + 232);
  *(void *)(a1 + 224) = v21;
  *(void *)(a1 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = a2[30];
  uint64_t v22 = a2[31];
  uint64_t v23 = *(void *)(a1 + 248);
  *(void *)(a1 + 248) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  uint64_t v24 = a2[32];
  *(_BYTE *)(a1 + 264) = *((_BYTE *)a2 + 264);
  *(void *)(a1 + 256) = v24;
  *(void *)(a1 + 272) = a2[34];
  uint64_t v25 = a2[35];
  uint64_t v26 = *(void *)(a1 + 280);
  *(void *)(a1 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  *(void *)(a1 + 288) = a2[36];
  uint64_t v27 = a2[37];
  uint64_t v28 = *(void *)(a1 + 296);
  *(void *)(a1 + 296) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  uint64_t v29 = a2[38];
  *(_BYTE *)(a1 + 312) = *((_BYTE *)a2 + 312);
  *(void *)(a1 + 304) = v29;
  *(_BYTE *)(a1 + 313) = *((_BYTE *)a2 + 313);
  return a1;
}

void *initializeWithTake for KatanaSubscriptionInfo(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x13AuLL);
}

uint64_t assignWithTake for KatanaSubscriptionInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(void *)(a1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(a2 + 80);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  uint64_t v6 = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = v6;
  *(_BYTE *)(a1 + 136) = *(_BYTE *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_BYTE *)(a1 + 152) = *(_BYTE *)(a2 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_BYTE *)(a1 + 168) = *(_BYTE *)(a2 + 168);
  *(void *)(a1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 184);
  uint64_t v8 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v7;
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_BYTE *)(a1 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(_BYTE *)(a2 + 200);
  uint64_t v9 = *(void *)(a2 + 216);
  uint64_t v10 = *(void *)(a1 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v9;
  swift_bridgeObjectRelease(v10);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(_BYTE *)(a1 + 232) = *(_BYTE *)(a2 + 232);
  uint64_t v11 = *(void *)(a2 + 248);
  uint64_t v12 = *(void *)(a1 + 248);
  *(void *)(a1 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v11;
  swift_bridgeObjectRelease(v12);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(_BYTE *)(a1 + 264) = *(_BYTE *)(a2 + 264);
  uint64_t v13 = *(void *)(a2 + 280);
  uint64_t v14 = *(void *)(a1 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v15 = *(void *)(a2 + 296);
  uint64_t v16 = *(void *)(a1 + 296);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(void *)(a1 + 296) = v15;
  swift_bridgeObjectRelease(v16);
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(_WORD *)(a1 + 312) = *(_WORD *)(a2 + 312);
  return a1;
}

uint64_t getEnumTagSinglePayload for KatanaSubscriptionInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 314)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for KatanaSubscriptionInfo( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 312) = 0;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 314) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(_BYTE *)(result + 314) = 0;
    }
    if (a2) {
      *(void *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = a2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for KatanaSubscriptionInfo()
{
  return &type metadata for KatanaSubscriptionInfo;
}

ValueMetadata *type metadata accessor for KatanaSubscriptionMetadata()
{
  return &type metadata for KatanaSubscriptionMetadata;
}

unint64_t sub_1000275FC()
{
  unint64_t result = qword_100458D98;
  if (!qword_100458D98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037333C, &type metadata for KatanaSubscriptionInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100458D98);
  }

  return result;
}

unint64_t sub_100027644()
{
  unint64_t result = qword_100458DA0;
  if (!qword_100458DA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037342C, &type metadata for KatanaSubscriptionMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100458DA0);
  }

  return result;
}

unint64_t sub_10002768C()
{
  unint64_t result = qword_100458DA8;
  if (!qword_100458DA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373364, &type metadata for KatanaSubscriptionMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100458DA8);
  }

  return result;
}

unint64_t sub_1000276D4()
{
  unint64_t result = qword_100458DB0;
  if (!qword_100458DB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037338C, &type metadata for KatanaSubscriptionMetadata.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100458DB0);
  }

  return result;
}

unint64_t sub_10002771C()
{
  unint64_t result = qword_100458DB8;
  if (!qword_100458DB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003732AC, &type metadata for KatanaSubscriptionInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100458DB8);
  }

  return result;
}

unint64_t sub_100027764()
{
  unint64_t result = qword_100458DC0;
  if (!qword_100458DC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003732D4, &type metadata for KatanaSubscriptionInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100458DC0);
  }

  return result;
}

id sub_1000277A8()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for RestoreKeeper()) init];
  qword_1004628C8 = (uint64_t)result;
  return result;
}

void sub_100027984(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)(a1);
  }
  else {
    uint64_t v3 = 0LL;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_100027A38(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v13 = (char *)&v42 - v12;
  if (a2)
  {
    uint64_t v14 = swift_errorRetain(a2, v11);
    static Logger.restore.getter(v14);
    id v15 = a3;
    swift_errorRetain(a2, v16);
    id v17 = v15;
    uint64_t v19 = swift_errorRetain(a2, v18);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc(22LL, -1LL);
      uint64_t v23 = swift_slowAlloc(16LL, -1LL);
      uint64_t v43 = v6;
      uint64_t v24 = (void *)v23;
      *(_DWORD *)uint64_t v22 = 138412546;
      uint64_t v44 = v5;
      uint64_t v45 = (uint64_t)v17;
      id v25 = v17;
      os_log_t v42 = v20;
      id v26 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v22 + 4, v22 + 12);
      void *v24 = v17;

      *(_WORD *)(v22 + 12) = 2112;
      swift_errorRetain(a2, v27);
      uint64_t v28 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v45 = v28;
      uint64_t v5 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v22 + 14, v22 + 22);
      v24[1] = v28;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      os_log_t v29 = v42;
      _os_log_impl((void *)&_mh_execute_header, v42, v21, "[%@] Deletion failed with error: %@", (uint8_t *)v22, 0x16u);
      uint64_t v30 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v24, 2LL, v30);
      uint64_t v31 = v24;
      uint64_t v6 = v43;
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);

      swift_errorRelease(a2);
    }

    else
    {
      swift_errorRelease(a2);

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    uint64_t v13 = v9;
  }

  else
  {
    static Logger.restore.getter(v10);
    id v32 = a3;
    char v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      int v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v36 = swift_slowAlloc(8LL, -1LL);
      uint64_t v44 = v5;
      uint64_t v45 = (uint64_t)v32;
      char v37 = (void *)v36;
      uint64_t v43 = v6;
      *(_DWORD *)int v35 = 138412290;
      id v38 = v32;
      uint64_t v6 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v35 + 4, v35 + 12);
      *char v37 = v32;

      _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%@] Deletion complete", v35, 0xCu);
      uint64_t v39 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v37, 1LL, v39);
      char v40 = v37;
      uint64_t v5 = v44;
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {

      char v33 = (os_log_s *)v32;
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v13, v5);
}

void sub_100027DC4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

uint64_t sub_100027EF0( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 208) = v19;
  *(_OWORD *)(v8 + 176) = v17;
  *(_OWORD *)(v8 + 192) = v18;
  *(_OWORD *)(v8 + 144) = v15;
  *(_OWORD *)(v8 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v16;
  *(void *)(v8 + 128) = a7;
  *(void *)(v8 + 136) = a8;
  *(void *)(v8 + 112) = a5;
  *(void *)(v8 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = a6;
  *(void *)(v8 + 104) = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  *(void *)(v8 + 216) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v8 + 224) = v10;
  *(void *)(v8 + 232) = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  *(void *)(v8 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v8 + 248) = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v8 + 256) = swift_task_alloc(v13);
  *(void *)(v8 + 264) = swift_task_alloc(v13);
  *(void *)(v8 + 272) = swift_task_alloc(v13);
  return swift_task_switch(sub_100027FE0, 0LL, 0LL);
}

uint64_t sub_100027FE0()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[21];
  uint64_t v19 = v0[20];
  uint64_t v20 = v0[22];
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[17];
  uint64_t v17 = v0[16];
  uint64_t v18 = v0[18];
  uint64_t v6 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v7 = *(void *)(v0[13] + OBJC_IVAR____TtC9appstored13RestoreKeeper_lockedRestores);
  v0[35] = v7;
  swift_bridgeObjectRetain(v5);
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  uint64_t v8 = *(void *)(v7 + 16);
  swift_bridgeObjectRetain(v8);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
  sub_100079418(1, v6, v5, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000LL);
  swift_bridgeObjectRelease(v5);
  uint64_t v10 = swift_task_alloc(32LL);
  *(void *)(v10 + 16) = v8;
  os_unfair_lock_lock((os_unfair_lock_t)(v7 + 24));
  uint64_t v11 = *(void *)(v10 + 16);
  swift_bridgeObjectRelease(*(void *)(v7 + 16));
  *(void *)(v7 + 16) = v11;
  swift_bridgeObjectRetain(v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v7 + 24));
  swift_bridgeObjectRelease(v8);
  swift_task_dealloc(v10);
  uint64_t v12 = type metadata accessor for SystemAlert();
  uint64_t v13 = swift_allocObject(v12, 81LL, 7LL);
  v0[36] = v13;
  *(void *)(v13 + 16) = v17;
  *(void *)(v13 + 24) = v4;
  *(void *)(v13 + 32) = v18;
  *(void *)(v13 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v3;
  *(void *)(v13 + 48) = v19;
  *(void *)(v13 + 56) = v2;
  *(void *)(v13 + 64) = v20;
  *(void *)(v13 + 72) = v1;
  *(_BYTE *)(v13 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 1;
  uint64_t v14 = dword_100458F7C;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  __int128 v15 = (void *)swift_task_alloc(v14);
  v0[37] = v15;
  *__int128 v15 = v0;
  v15[1] = sub_1000281D0;
  void v15[2] = v13;
  v15[3] = *(void *)v13;
  return swift_task_switch(sub_100028AA4, 0LL, 0LL);
}

uint64_t sub_1000281D0(char a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 288LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 296LL);
  *(_BYTE *)(*(void *)v1 + 304LL) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_100028260, 0LL, 0LL);
}

uint64_t sub_100028260(uint64_t a1)
{
  uint64_t v2 = (void **)(v1 + 9);
  if (*((_BYTE *)v1 + 304) == 1)
  {
    uint64_t v11 = (void *)v1[24];
    static Logger.restore.getter(a1);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    __int128 v15 = (void *)v1[24];
    if (v14)
    {
      __int128 v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)__int128 v16 = 138412290;
      v1[8] = v15;
      id v18 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 8, v1 + 9, v16 + 4, v16 + 12);
      *uint64_t v17 = v15;

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%@] User chose to delete", v16, 0xCu);
      uint64_t v19 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v17, 1LL, v19);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v47 = v1[15];
    (*(void (**)(void, void))(v1[31] + 8LL))(v1[32], v1[30]);
    id v48 = objc_allocWithZone(&OBJC_CLASS___IXApplicationIdentity);
    swift_bridgeObjectRetain(v47);
    NSString v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v47);
    id v50 = [v48 initWithBundleIdentifier:v49];

    if (v50)
    {
      id v51 = objc_allocWithZone(&OBJC_CLASS___IXUninstallOptions);
      id v30 = v50;
      id v52 = [v51 init];
      if (v52)
      {
        uint64_t v53 = v52;
        uint64_t v54 = (void *)v1[24];
        [v52 setWaitForDeletion:0];
        [v53 setRequestUserConfirmation:0];
        int v55 = (void *)objc_opt_self(&OBJC_CLASS___IXAppInstallCoordinator);
        uint64_t v56 = swift_allocObject(&unk_1003DD180, 24LL, 7LL);
        *(void *)(v56 + 16) = v54;
        v1[6] = sub_10002B958;
        v1[7] = v56;
        v1[2] = _NSConcreteStackBlock;
        _OWORD v1[3] = 1107296256LL;
        v1[4] = sub_100027DC4;
        v1[5] = &unk_1003DD198;
        uint64_t v57 = _Block_copy(v1 + 2);
        uint64_t v58 = v1[7];
        id v59 = v54;
        swift_release(v58);
        [v55 uninstallAppWithIdentity:v30 options:v53 completion:v57];

        _Block_release(v57);
        id v30 = v53;
      }

      else
      {
      }

uint64_t sub_100028A84()
{
  *(void *)(v1 + 16) = v0;
  *(void *)(v1 + 24) = *v0;
  return swift_task_switch(sub_100028AA4, 0LL, 0LL);
}

uint64_t sub_100028AA4()
{
  uint64_t v1 = swift_task_alloc(32LL);
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100028B44;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 48,  0LL,  0LL,  0x28746E6573657270LL,  0xE900000000000029LL,  sub_10002B960,  v1,  &type metadata for SystemAlert.Response);
}

uint64_t sub_100028B44()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 40LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100028BA0, 0LL, 0LL);
}

uint64_t sub_100028BA0()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(unsigned __int8 *)(v0 + 48));
}

unint64_t sub_100028C1C(void *a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = [a2 databaseID];
  id v12 = [a1 connection];
  id v13 = [objc_allocWithZone((Class)AppInstallEntity) initWithPersistentID:v11 onConnection:v12];

  unint64_t v14 = (unint64_t)[v13 existsInDatabase];
  if ((_DWORD)v14)
  {
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    [v13 setValue:isa forProperty:@"supress_dialogs"];

    Class v16 = Int._bridgeToObjectiveC()().super.super.isa;
    [v13 setValue:v16 forProperty:@"priority"];

    static Logger.restore.getter(v17);
    id v18 = a4;
    BOOL v33 = v10;
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(8LL, -1LL);
      unsigned int v30 = v14;
      uint64_t v23 = (void *)v22;
      uint64_t v31 = v8;
      *(_DWORD *)uint64_t v21 = 138412290;
      id v34 = v18;
      id v24 = v18;
      uint64_t v32 = v7;
      id v25 = v24;
      uint64_t v8 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v21 + 4, v21 + 12);
      *uint64_t v23 = v18;
      id v26 = v23;
      unint64_t v14 = v30;

      uint64_t v7 = v32;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%@ Moved to user prioritized", v21, 0xCu);
      uint64_t v27 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v26, 1LL, v27);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
      id v18 = v13;
    }

    else
    {

      uint64_t v19 = (os_log_s *)v13;
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v33, v7);
  }

  else
  {
  }

  return v14;
}

uint64_t sub_100028ECC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(a1 + 32);
  id v3 = a2;
  char v4 = v2();

  return v4 & 1;
}

id sub_100028F78()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for RestoreKeeper();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for RestoreKeeper()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored13RestoreKeeper);
}

uint64_t sub_100028FD8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10001517C(0LL, (unint64_t *)&unk_100458ED0, off_1003D9CA0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v8);
  id v10 = [a1 connection];
  id v11 = sub_10024C1D0(ObjCClassFromMetadata, v10, a2);

  id v12 = sub_100056154(a3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  uint64_t v14 = swift_allocObject(&unk_1003DD040, 24LL, 7LL);
  *(void *)(v14 + 16) = a4;
  uint64_t v15 = swift_allocObject(&unk_1003DD068, 32LL, 7LL);
  *(void *)(v15 + 16) = sub_10002A7E0;
  *(void *)(v15 + 24) = v14;
  v19[4] = sub_10002A7F8;
  uint64_t v20 = v15;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256LL;
  v19[2] = sub_100056278;
  v19[3] = &unk_1003DD080;
  Class v16 = _Block_copy(v19);
  uint64_t v17 = v20;
  swift_retain(v15);
  swift_release(v17);
  [v11 enumerateMemoryEntitiesWithProperties:isa usingBlock:v16];

  _Block_release(v16);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation(v15, "", 87LL, 213LL, 78LL, 1LL);
  swift_release(v14);
  uint64_t result = swift_release(v15);
  return result;
}

void sub_100029198(void *a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v6 = objc_opt_self(&OBJC_CLASS___AppInstall);
  uint64_t v7 = swift_dynamicCastObjCClass(a1, v6);
  if (v7)
  {
    id v9 = *a4;
    *a4 = (id)v7;
    id v8 = a1;
  }

uint64_t sub_100029264()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  id v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  id v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001517C(0LL, (unint64_t *)&qword_100458FB8, &OBJC_CLASS___OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter();
  uint64_t v15 = &_swiftEmptyArrayStorage;
  uint64_t v10 = sub_100004DD4( &qword_100458FC0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v11 = sub_1000079A0(&qword_100458FC8);
  uint64_t v12 = sub_10002BA14(&qword_100458FD0, &qword_100458FC8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v3,  enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:),  v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0x6C416D6574737953LL,  0xEB00000000747265LL,  v9,  v6,  v3,  0LL);
  qword_100458DD0 = result;
  return result;
}

uint64_t sub_100029434(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v23 = *(void *)(v7 - 8);
  uint64_t v24 = v7;
  __chkstk_darwin(v7);
  id v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1000079A0(&qword_100458F88);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  if (qword_100458040 != -1) {
    swift_once(&qword_100458040, sub_100029264);
  }
  v22[1] = qword_100458DD0;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v10);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 24) & ~v13;
  uint64_t v15 = swift_allocObject(&unk_1003DD1D0, v14 + v12, v13 | 7);
  *(void *)(v15 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))( v15 + v14,  (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v10);
  aBlock[4] = sub_10002B9E0;
  uint64_t v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000657B0;
  aBlock[3] = &unk_1003DD1E8;
  Class v16 = _Block_copy(aBlock);
  uint64_t v17 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v17);
  id v26 = &_swiftEmptyArrayStorage;
  uint64_t v18 = sub_100004DD4( &qword_100458F90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_1000079A0(&qword_100458F98);
  uint64_t v20 = sub_10002BA14(&qword_100458FA0, &qword_100458F98);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v19, v20, v4, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
  return swift_release(v28);
}

void sub_1000296C0(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_1000079A0((uint64_t *)&unk_100458FA8);
  uint64_t inited = swift_initStackObject(v8, v39);
  *(_OWORD *)(inited + 16) = xmmword_100372E80;
  if (!kCFUserNotificationAlertHeaderKey)
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v10 = (void *)inited;
  v35[0] = v4;
  v35[1] = a2;
  *(void *)(inited + 32) = kCFUserNotificationAlertHeaderKey;
  uint64_t v12 = a1[2];
  uint64_t v11 = a1[3];
  v10[8] = &type metadata for String;
  v10[5] = v12;
  v10[6] = v11;
  if (!kCFUserNotificationAlertMessageKey)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
  }

  v10[9] = kCFUserNotificationAlertMessageKey;
  uint64_t v13 = a1[4];
  uint64_t v14 = a1[5];
  v10[13] = &type metadata for String;
  v10[10] = v13;
  v10[11] = v14;
  if (!kCFUserNotificationDefaultButtonTitleKey) {
    goto LABEL_21;
  }
  v10[14] = kCFUserNotificationDefaultButtonTitleKey;
  uint64_t v15 = a1[6];
  uint64_t v16 = a1[7];
  v10[18] = &type metadata for String;
  v10[15] = v15;
  v10[16] = v16;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v16);
  uint64_t v17 = (id)kCFUserNotificationAlertHeaderKey;
  uint64_t v18 = (id)kCFUserNotificationAlertMessageKey;
  uint64_t v19 = (id)kCFUserNotificationDefaultButtonTitleKey;
  unint64_t v20 = sub_10001DF30((uint64_t)v10);
  CFOptionFlags v21 = a1[9];
  if (v21)
  {
    if (!kCFUserNotificationAlternateButtonTitleKey)
    {
      __break(1u);
      return;
    }

    CFOptionFlags v22 = a1[8];
    responseFlags[3] = (CFOptionFlags)&type metadata for String;
    responseFlags[0] = v22;
    responseFlags[1] = v21;
    sub_100015330(responseFlags, error);
    swift_bridgeObjectRetain(v21);
    uint64_t v23 = (id)kCFUserNotificationAlternateButtonTitleKey;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
    unint64_t v36 = v20;
    sub_100079570(error, v23, isUniquelyReferenced_nonNull_native);
    unint64_t v20 = v36;

    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  error[0] = 0;
  type metadata accessor for CFString(0LL);
  sub_100004DD4( &qword_100458300,  (uint64_t (*)(uint64_t))type metadata accessor for CFString,  (uint64_t)&unk_10037270C);
  Class isa = (const __CFDictionary *)Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v20);
  CFUserNotificationRef v26 = CFUserNotificationCreate(0LL, 0.0, 3uLL, error, isa);

  if (v26 && !error[0])
  {
    responseFlags[0] = 2LL;
    uint64_t v27 = v26;
    CFUserNotificationReceiveResponse(v27, 0.0, responseFlags);
    char v28 = responseFlags[0];
    if (responseFlags[0] != 1)
    {
      if (!responseFlags[0])
      {
        LOBYTE(v36) = 0;
LABEL_17:
        uint64_t v34 = sub_1000079A0(&qword_100458F88);
        CheckedContinuation.resume(returning:)(&v36, v34);

        return;
      }

      char v28 = 2;
    }

    LOBYTE(v36) = v28;
    goto LABEL_17;
  }

  uint64_t v29 = static Logger.daemon.getter();
  unsigned int v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v32 = 67240192;
    swift_beginAccess(error, responseFlags, 0LL, 0LL);
    LODWORD(v36) = error[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 4, v32 + 4, v32 + 8);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Could not create CFUserNotification: %{public}d", v32, 8u);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  (*(void (**)(char *, void))(v5 + 8))(v7, v35[0]);
  LOBYTE(v36) = 2;
  uint64_t v33 = sub_1000079A0(&qword_100458F88);
  CheckedContinuation.resume(returning:)(&v36, v33);
}

uint64_t sub_100029AD4()
{
  return swift_deallocClassInstance(v0, 81LL, 7LL);
}

uint64_t type metadata accessor for SystemAlert()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstoredP33_4BC89524744D49B8BE6987A172A14CD911SystemAlert);
}

void sub_100029B30(uint64_t a1, uint64_t a2, void *a3, char *a4, void (**a5)(const void *, void *))
{
  uint64_t v10 = sub_1000079A0(&qword_100458488);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for String.LocalizationValue(0LL);
  __chkstk_darwin(v13);
  uint64_t v85 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for String.LocalizationValue.StringInterpolation(0LL);
  __chkstk_darwin(v15);
  int v84 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v88 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  int v86 = (char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  CFOptionFlags v21 = (char *)&v78 - v20;
  uint64_t v89 = swift_allocObject(&unk_1003DD130, 24LL, 7LL);
  *(void *)(v89 + 16) = a5;
  uint64_t v81 = a5;
  CFOptionFlags v22 = _Block_copy(a5);
  static Logger.restore.getter(v22);
  id v23 = a3;
  uint64_t v87 = (uint64_t)v21;
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter();
  BOOL v26 = os_log_type_enabled(v24, v25);
  uint64_t v90 = a1;
  uint64_t v91 = a4;
  if (v26)
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v79 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v80 = v27;
    *(_DWORD *)uint64_t v27 = 138412290;
    id v93 = v23;
    id v28 = v23;
    a4 = v91;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v27 + 4, v27 + 12);
    uint64_t v29 = v79;
    *uint64_t v79 = v23;

    a1 = v90;
    unsigned int v30 = v80;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "[%@] Prompting the user whether or not to delete restore",  v80,  0xCu);
    uint64_t v31 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v29, 1LL, v31);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {

    uint64_t v24 = (os_log_s *)v23;
  }

  (*(void (**)(uint64_t, uint64_t))(v88 + 8))(v87, v17);
  uint64_t v32 = *(void *)&a4[OBJC_IVAR____TtC9appstored13RestoreKeeper_lockedRestores];
  uint64_t v33 = (os_unfair_lock_s *)(v32 + 24);
  swift_bridgeObjectRetain(a2);
  os_unfair_lock_lock((os_unfair_lock_t)(v32 + 24));
  uint64_t v34 = *(void *)(v32 + 16);
  swift_bridgeObjectRetain(v34);
  os_unfair_lock_unlock(v33);
  if (*(void *)(v34 + 16))
  {
    sub_100023F7C(a1, a2);
    char v36 = v35;
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v34);
    if ((v36 & 1) != 0)
    {
      type metadata accessor for ASDError(0LL);
      uint64_t v38 = v37;
      uint64_t v92 = 506LL;
      unint64_t v39 = sub_10006D16C((uint64_t)&_swiftEmptyArrayStorage);
      uint64_t v40 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
      _BridgedStoredNSError.init(_:userInfo:)(&v93, &v92, v39, v38, v40);
      id v41 = v93;
      uint64_t v42 = (void *)_convertErrorToNSError(_:)(v93);
      v81[2](v81, v42);
      swift_release(v89);

      return;
    }
  }

  else
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v34);
  }

  id v43 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
  swift_bridgeObjectRetain(a2);
  id v44 = sub_1000678F8(a1, a2, 1);
  id v82 = v23;
  uint64_t v83 = a2;
  unint64_t v45 = v44;
  id v46 = [v44 localizedName];
  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
  NSString v49 = v48;

  id v50 = v84;
  id v51 = v85;
  String.LocalizationValue.StringInterpolation.init(literalCapacity:interpolationCount:)(21LL, 1LL);
  v52._object = (void *)0x8000000100343560LL;
  v52._countAndFlagsBits = 0xD000000000000015LL;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v52);
  v53._countAndFlagsBits = v47;
  v53._object = v49;
  String.LocalizationValue.StringInterpolation.appendInterpolation(_:)(v53);
  swift_bridgeObjectRelease(v49);
  v54._countAndFlagsBits = 0LL;
  v54._object = (void *)0xE000000000000000LL;
  String.LocalizationValue.StringInterpolation.appendLiteral(_:)(v54);
  String.LocalizationValue.init(stringInterpolation:)(v50);
  uint64_t v88 = String.init(appStoreDaemonLocalized:comment:)(v51, 0LL, 0LL, 256LL);
  uint64_t v56 = v55;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000001DLL, 0x8000000100343580LL);
  uint64_t v87 = String.init(appStoreDaemonLocalized:comment:)(v51, 0LL, 0LL, 256LL);
  uint64_t v58 = v57;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000001ELL, 0x80000001003435A0LL);
  uint64_t v59 = String.init(appStoreDaemonLocalized:comment:)(v51, 0LL, 0LL, 256LL);
  uint64_t v61 = v60;
  String.LocalizationValue.init(stringLiteral:)(0xD00000000000001CLL, 0x80000001003435C0LL);
  uint64_t v62 = String.init(appStoreDaemonLocalized:comment:)(v51, 0LL, 0LL, 256LL);
  uint64_t v64 = v63;
  uint64_t v65 = type metadata accessor for TaskPriority(0LL);
  uint64_t v66 = (uint64_t)v12;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56LL))(v12, 1LL, 1LL, v65);
  uint64_t v67 = (void *)swift_allocObject(&unk_1003DD158, 144LL, 7LL);
  v67[2] = 0LL;
  v67[3] = 0LL;
  uint64_t v68 = v90;
  uint64_t v69 = v91;
  v67[4] = v91;
  v67[5] = v68;
  uint64_t v70 = v82;
  uint64_t v71 = v83;
  uint64_t v72 = v88;
  v67[6] = v83;
  v67[7] = v72;
  uint64_t v73 = v87;
  v67[8] = v56;
  v67[9] = v73;
  v67[10] = v58;
  v67[11] = v59;
  v67[12] = v61;
  v67[13] = v62;
  v67[14] = v64;
  v67[15] = v70;
  uint64_t v74 = v89;
  v67[16] = sub_10002B7EC;
  v67[17] = v74;
  id v75 = v70;
  swift_bridgeObjectRetain(v71);
  uint64_t v76 = v69;
  swift_bridgeObjectRetain(v56);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRetain(v64);
  swift_retain(v74);
  uint64_t v77 = sub_10004DA7C(v66, (uint64_t)&unk_100458F68, (uint64_t)v67);
  swift_release(v74);
  swift_bridgeObjectRelease(v56);
  swift_bridgeObjectRelease(v58);
  swift_bridgeObjectRelease(v61);
  swift_bridgeObjectRelease(v64);
  swift_release(v77);
}

uint64_t sub_10002A360(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0(&qword_100459DF0);
  uint64_t v5 = swift_allocObject(v4, 56LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_100372E80;
  *(_OWORD *)(v5 + 32) = xmmword_100373500;
  *(void *)(v5 + 48) = -40LL;
  uint64_t v6 = sub_1000079A0(&qword_100458EE0);
  uint64_t v7 = swift_allocObject(v6, 48LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_100373510;
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"bundle_id");
  uint64_t v9 = v8;
  swift_bridgeObjectRetain(a2);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  uint64_t v20 = a1;
  uint64_t v21 = a2;
  swift_bridgeObjectRetain(a2);
  uint64_t v11 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v20, &type metadata for String);
  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___SQLiteComparisonPredicate);
  id v13 = objc_msgSend(v12, "predicateWithProperty:value:comparisonType:", v10, v11, 1, v20, v21);
  swift_bridgeObjectRelease(a2);
  swift_unknownObjectRelease(v11);

  *(void *)(v7 + 32) = v13;
  uint64_t v14 = (void *)objc_opt_self(&OBJC_CLASS___SQLiteContainsPredicate);
  uint64_t v15 = @"IFNULL(app_install.phase, 10)";
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v5);
  id v17 = [v14 doesNotContainPredicateWithProperty:v15 values:isa];

  *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v17;
  uint64_t v20 = v7;
  specialized Array._endMutation()(v18);
  return v20;
}

uint64_t sub_10002A518(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_10002A360(a1, a2);
  uint64_t v3 = sub_100055EF4(v2);
  swift_bridgeObjectRelease(v2);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  id v5 = [(id)objc_opt_self(SQLiteCompoundPredicate) predicateMatchingAllPredicates:isa];

  uint64_t v6 = sub_1000079A0(&qword_100459530);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_100373520;
  *(void *)(v7 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"item_id");
  *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v8;
  *(void *)(v7 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"bundle_id");
  *(void *)(v7 + 56) = v9;
  *(void *)(v7 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"external_id");
  *(void *)(v7 + 72) = v10;
  *(void *)(v7 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"bootstrapped");
  *(void *)(v7 + 88) = v11;
  *(void *)(v7 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"log_code");
  *(void *)(v7 + 104) = v12;
  uint64_t v24 = 0LL;
  uint64_t v13 = objc_opt_self(&OBJC_CLASS___AppInstallsDatabaseStore);
  id v14 = sub_1002EEBC0(v13);
  uint64_t v15 = (void *)swift_allocObject(&unk_1003DCFC8, 40LL, 7LL);
  void v15[2] = v5;
  v15[3] = v7;
  v15[4] = &v24;
  uint64_t v16 = swift_allocObject(&unk_1003DCFF0, 32LL, 7LL);
  *(void *)(v16 + 16) = sub_10002A794;
  *(void *)(v16 + 24) = v15;
  aBlock[4] = sub_10002A7B0;
  uint64_t v23 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000CF5C;
  aBlock[3] = &unk_1003DD008;
  id v17 = _Block_copy(aBlock);
  uint64_t v18 = v23;
  id v19 = v5;
  swift_retain(v16);
  swift_release(v18);
  [v14 readUsingSession:v17];

  _Block_release(v17);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation(v16, "", 87LL, 211LL, 55LL, 1LL);
  uint64_t result = swift_release(v16);
  if ((v19 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v21 = v24;
    swift_release(v15);
    return v21;
  }

  return result;
}

uint64_t sub_10002A768()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10002A794(void *a1)
{
  return sub_100028FD8(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10002A7A0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002A7B0(uint64_t a1)
{
  return sub_1000562C4(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_10002A7B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002A7C8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10002A7D0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10002A7E0(void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10002A7E8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002A7F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100050A10(a1, a2, a3, *(uint64_t (**)(void))(v3 + 16));
}

void sub_10002A800(void *a1, char a2, void *a3)
{
  uint64_t v6 = objc_opt_self(&OBJC_CLASS___AppInstallsDatabaseStore);
  id v7 = sub_1002EEBC0(v6);
  uint64_t v8 = swift_allocObject(&unk_1003DD0B8, 40LL, 7LL);
  *(void *)(v8 + 16) = a1;
  *(_BYTE *)(v8 + 24) = a2;
  *(void *)(v8 + 32) = a3;
  uint64_t v9 = swift_allocObject(&unk_1003DD0E0, 32LL, 7LL);
  *(void *)(v9 + 16) = sub_10002B784;
  *(void *)(v9 + 24) = v8;
  v21[4] = sub_10002B7A4;
  uint64_t v22 = v9;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256LL;
  v21[2] = sub_100028ECC;
  v21[3] = &unk_1003DD0F8;
  uint64_t v10 = _Block_copy(v21);
  uint64_t v11 = v22;
  id v12 = a1;
  id v13 = a3;
  swift_retain(v9);
  swift_release(v11);
  [v7 modifyUsingTransaction:v10];

  _Block_release(v10);
  LOBYTE(a3) = swift_isEscapingClosureAtFileLocation(v9, "", 87LL, 168LL, 61LL, 1LL);
  swift_release(v9);
  if ((a3 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    if (sub_1001E2698(v12, (uint64_t)@"bootstrapped") == (id)2)
    {
      uint64_t v14 = objc_opt_self(&OBJC_CLASS___AppInstallScheduler);
      id v15 = sub_10023B9CC(v14);
      sub_10023C018((uint64_t)v15, 0x2000LL);
      swift_release(v8);
    }

    else
    {
      uint64_t v16 = objc_opt_self(&OBJC_CLASS___RestoreManager);
      id v17 = sub_10020FAD4(v16);
      NSString v18 = String._bridgeToObjectiveC()();
      id v19 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
      id v20 = objc_msgSend(v19, "ams_activeiTunesAccount");

      id v15 = objc_msgSend(v20, "ams_DSID");
      sub_100210B70((uint64_t)v17, v18, v15, 1);
      swift_release(v8);
    }
  }

id sub_10002AA70(void *a1, char a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v62 = *(void *)(v6 - 8);
  id v63 = (id)v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = __chkstk_darwin(v10);
  id v13 = (char *)&v61 - v12;
  __chkstk_darwin(v11);
  id v15 = (char *)&v61 - v14;
  id v16 = [a1 identity];
  id v17 = [v16 bundleID];

  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  uint64_t v20 = v19;

  uint64_t v21 = (void *)sub_10002A518(v18, v20);
  swift_bridgeObjectRelease(v20);
  if (v21)
  {
    sub_10002A800(v21, a2 & 1, a3);
    static Logger.restore.getter(v22);
    id v23 = a3;
    uint64_t v24 = v21;
    os_log_type_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter();
    int v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc(22LL, -1LL);
      uint64_t v29 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v28 = 138412546;
      LODWORD(v61) = v27;
      id v64 = v23;
      id v30 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v28 + 4, v28 + 12);
      *uint64_t v29 = v23;

      *(_WORD *)(v28 + 12) = 2112;
      uint64_t v31 = sub_100323C54(v24);
      id v64 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v28 + 14, v28 + 22);
      v29[1] = v31;

      _os_log_impl( (void *)&_mh_execute_header,  v25,  (os_log_type_t)v61,  "[%@] Found active restore with logKey: %@",  (uint8_t *)v28,  0x16u);
      uint64_t v32 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v29, 2LL, v32);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {

      uint64_t v24 = v23;
      os_log_type_t v25 = (os_log_s *)v23;
    }

    return (id)(*(uint64_t (**)(char *, id))(v62 + 8))(v15, v63);
  }

  else
  {
    id v33 = [a1 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise];
    if ((_DWORD)v33)
    {
      id v64 = 0LL;
      id v34 = [a1 appAssetPromiseResponsibleClientWithError:&v64];
      id v35 = v64;
      if (v34 == (id)1)
      {
        uint64_t v36 = objc_opt_self(&OBJC_CLASS___RestoreManager);
        id v37 = v35;
        id v38 = sub_10020FAD4(v36);
        id v39 = sub_1002102C0((uint64_t)v38);

        sub_10000500C(a1, v39);
        Swift::String v52 = v51;

        sub_10002A800(v52, a2 & 1, a3);
        static Logger.restore.getter(v53);
        id v54 = a3;
        uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
        os_log_type_t v56 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v61 = (void *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v57 = 138412290;
          id v64 = v54;
          id v58 = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v57 + 4, v57 + 12);
          uint64_t v59 = v61;
          *uint64_t v61 = v54;

          _os_log_impl((void *)&_mh_execute_header, v55, v56, "[%@] Displaying job started dialog", v57, 0xCu);
          uint64_t v60 = sub_1000079A0((uint64_t *)&unk_100458F50);
          swift_arrayDestroy(v59, 1LL, v60);
          swift_slowDealloc(v59, -1LL, -1LL);
          swift_slowDealloc(v57, -1LL, -1LL);
        }

        else
        {

          Swift::String v52 = v54;
          uint64_t v55 = (os_log_s *)v54;
        }

        return (id)(*(uint64_t (**)(char *, id))(v62 + 8))(v13, v63);
      }

      id v33 = v64;
    }

    static Logger.restore.getter(v33);
    id v41 = a3;
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      id v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v61 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)id v44 = 138412290;
      id v64 = v41;
      id v45 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v44 + 4, v44 + 12);
      id v46 = v61;
      *uint64_t v61 = v41;

      _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "[%@] Prioritizing active restore coordinator which App Store is not responsible",  v44,  0xCu);
      uint64_t v47 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v46, 1LL, v47);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);
    }

    else
    {

      uint64_t v42 = (os_log_s *)v41;
    }

    (*(void (**)(char *, id))(v62 + 8))(v9, v63);
    id v64 = 0LL;
    if ([a1 prioritizeWithError:&v64])
    {
      return v64;
    }

    else
    {
      id v63 = v64;
      id v48 = v64;
      uint64_t v49 = _convertNSErrorToError(_:)(v63);

      swift_willThrow(v50);
      return (id)swift_errorRelease(v49);
    }
  }

void *sub_10002B2B8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = objc_allocWithZone(&OBJC_CLASS___IXApplicationIdentity);
  swift_bridgeObjectRetain(a2);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v11 = [v9 initWithBundleID:v10];

  uint64_t v12 = (void *)objc_opt_self(&OBJC_CLASS___IXAppInstallCoordinator);
  id v44 = 0LL;
  id v13 = [v12 existingCoordinatorForAppWithIdentity:v11 error:&v44];
  id v14 = v44;
  if (v13)
  {
    id v15 = v13;
    uint64_t v16 = objc_opt_self(&OBJC_CLASS___IXRestoringAppInstallCoordinator);
    id v17 = (void *)swift_dynamicCastObjCClass(v15, v16);
    id v18 = v14;
    if (v17)
    {
      id v19 = v15;
      static Logger.restore.getter(v19);
      id v20 = v19;
      id v21 = a3;
      id v22 = v20;
      id v23 = v21;
      uint64_t v24 = (void *)Logger.logObject.getter(v23);
      int v25 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled((os_log_t)v24, (os_log_type_t)v25))
      {

        uint64_t v36 = v22;
        id v11 = v22;
LABEL_13:

        (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
        return v17;
      }

      HIDWORD(v39) = v25;
      uint64_t v40 = v24;
      id v41 = v22;
      uint64_t v42 = v6;
      uint64_t v43 = v5;
      uint64_t v26 = swift_slowAlloc(18LL, -1LL);
      int v27 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v26 = 138412546;
      id v44 = v23;
      id v28 = v23;
      uint64_t v29 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v26 + 4, v26 + 12);
      void *v27 = v23;

      *(_WORD *)(v26 + 12) = 1024;
      if ([v17 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithAppAssetPromise])
      {
        id v44 = 0LL;
        id v30 = [v17 appAssetPromiseResponsibleClientWithError:&v44];
        id v31 = v44;
        id v22 = v41;

        if (v30 == (id)1)
        {
          int v32 = 1;
LABEL_12:
          uint64_t v6 = v42;
          uint64_t v5 = v43;
          uint64_t v36 = v40;
          LODWORD(v44) = v32;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, (char *)&v44 + 4, v26 + 14, v26 + 18);

          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v36,  BYTE4(v39),  "%@ Found existing restore with App Store responsible: %{BOOL}d",  (uint8_t *)v26,  0x12u);
          uint64_t v37 = sub_1000079A0((uint64_t *)&unk_100458F50);
          swift_arrayDestroy(v29, 1LL, v37);
          swift_slowDealloc(v29, -1LL, -1LL);
          swift_slowDealloc(v26, -1LL, -1LL);
          goto LABEL_13;
        }
      }

      else
      {
        id v22 = v41;
      }

      int v32 = 0;
      goto LABEL_12;
    }
  }

  else
  {
    id v33 = v44;
    uint64_t v34 = _convertNSErrorToError(_:)(v14);

    swift_willThrow(v35);
    swift_errorRelease(v34);
    return 0LL;
  }

  return v17;
}

uint64_t sub_10002B64C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for FeatureFlag(0LL, a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  NSString v10 = (void *)objc_opt_self(&OBJC_CLASS___AMSDevice);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for FeatureFlag.activeRestore(_:), v6);
  char v11 = asd_isFeatureEnabled(_:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v11 & 1) == 0) {
    return 0LL;
  }
  uint64_t result = (uint64_t)sub_10002B2B8(a1, a2, a3);
  if (result)
  {

    return 1LL;
  }

  return result;
}

uint64_t sub_10002B758()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

unint64_t sub_10002B784(void *a1)
{
  return sub_100028C1C(a1, *(void **)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10002B794()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10002B7A4()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_10002B7C8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10002B7EC(uint64_t a1)
{
}

uint64_t sub_10002B7F4()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  swift_bridgeObjectRelease(*(void *)(v0 + 80));
  swift_bridgeObjectRelease(*(void *)(v0 + 96));
  swift_bridgeObjectRelease(*(void *)(v0 + 112));

  swift_release(*(void *)(v0 + 136));
  return swift_deallocObject(v0, 144LL, 7LL);
}

uint64_t sub_10002B858(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  char v11 = (void *)swift_task_alloc(dword_100458F64);
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_100007C40;
  return sub_100027EF0(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_10002B934()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10002B958(uint64_t a1, uint64_t a2)
{
  return sub_100027A38(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_10002B960(uint64_t a1)
{
  return sub_100029434(a1, *(void *)(v1 + 16));
}

uint64_t sub_10002B968()
{
  uint64_t v1 = sub_1000079A0(&qword_100458F88);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10002B9E0()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_1000079A0(&qword_100458F88) - 8) + 80LL);
  sub_1000296C0(*(void **)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_10002BA14(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10001528C(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SystemAlert.Response(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10002BAA0 + 4 * byte_100373535[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10002BAD4 + 4 * byte_100373530[v4]))();
}

uint64_t sub_10002BAD4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002BADC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002BAE4LL);
  }
  return result;
}

uint64_t sub_10002BAF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002BAF8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10002BAFC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002BB04(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SystemAlert.Response()
{
  return &type metadata for SystemAlert.Response;
}

unint64_t sub_10002BB24()
{
  unint64_t result = qword_100458FD8;
  if (!qword_100458FD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003735D8, &type metadata for SystemAlert.Response);
    atomic_store(result, (unint64_t *)&qword_100458FD8);
  }

  return result;
}

void sub_10002BB88(char a1)
{
  __asm { BR              X10 }

Swift::Int sub_10002BBE4()
{
  return Hasher._finalize()();
}

id sub_10002BC6C()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for StoreKitExternalGateway()) init];
  qword_1004628D0 = (uint64_t)result;
  return result;
}

uint64_t sub_10002BCD8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  __chkstk_darwin(v10);
  uint64_t v12 = &v35[-v11];
  uint64_t v13 = sub_1000079A0(&qword_100458488);
  __chkstk_darwin(v13);
  id v15 = &v35[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v16 = sub_100017790(a1);
  if (v16 && (sub_10002D254(v16, v40), uint64_t v16 = sub_10002D634((uint64_t)v40, (uint64_t)&v41), (void)v42))
  {
    uint64_t v36 = a2;
    uint64_t v37 = v8;
    *(_OWORD *)id v44 = v41;
    *(_OWORD *)&v44[16] = v42;
    uint64_t v17 = v43;
    uint64_t v18 = type metadata accessor for JSONEncoder(0LL);
    swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
    uint64_t v19 = JSONEncoder.init()();
    v38[0] = *(_OWORD *)v44;
    v38[1] = *(_OWORD *)&v44[16];
    uint64_t v39 = v17;
    unint64_t v20 = sub_10002D67C();
    uint64_t v26 = dispatch thunk of JSONEncoder.encode<A>(_:)(v38, &type metadata for ExternalPurchaseTokenV2Family, v20);
    uint64_t v28 = v27;
    swift_release(v19);
    __int128 v45 = *(_OWORD *)&v44[8];
    sub_100026D18((uint64_t)&v45);
    v46[0] = v17;
    sub_10002D6C0(v46);
    uint64_t v29 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v15, 1LL, 1LL, v29);
    id v30 = (void *)swift_allocObject(&unk_1003DD2E8, 72LL, 7LL);
    _OWORD v30[2] = 0LL;
    v30[3] = 0LL;
    uint64_t v31 = v36;
    v30[4] = v4;
    v30[5] = v31;
    v30[6] = a3;
    v30[7] = v26;
    v30[8] = v28;
    id v32 = v4;
    swift_bridgeObjectRetain(a3);
    uint64_t v33 = sub_10004DA7C((uint64_t)v15, (uint64_t)&unk_100459020, (uint64_t)v30);
    return swift_release(v33);
  }

  else
  {
    static Logger.storeKit.getter(v16);
    uint64_t v21 = swift_bridgeObjectRetain_n(a3, 2LL);
    id v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v37 = v8;
      uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v38[0] = v25;
      uint64_t v36 = v9;
      *(_DWORD *)uint64_t v24 = 136315138;
      swift_bridgeObjectRetain(a3);
      *(void *)id v44 = sub_100088DB4(a2, a3, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, &v44[8], v24 + 4, v24 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Failed to extract token family information from %s buy response",  v24,  0xCu);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);

      return (*(uint64_t (**)(_BYTE *, uint64_t))(v36 + 8))(v12, v37);
    }

    else
    {

      swift_bridgeObjectRelease_n(a3, 2LL);
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
    }
  }

uint64_t sub_10002C298( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a7;
  v8[20] = a8;
  v8[17] = a5;
  v8[18] = a6;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  v8[21] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[22] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[23] = swift_task_alloc(v11);
  v8[24] = swift_task_alloc(v11);
  return swift_task_switch(sub_10002C30C, 0LL, 0LL);
}

uint64_t sub_10002C30C(uint64_t a1)
{
  uint64_t v2 = v1[18];
  static Logger.storeKit.getter(a1);
  uint64_t v3 = swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v21 = v1[22];
    uint64_t v22 = v1[21];
    uint64_t v23 = v1[24];
    unint64_t v6 = v1[18];
    uint64_t v7 = v1[17];
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain(v6);
    v1[16] = sub_100088DB4(v7, v6, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 17, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v6, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Handing off external purchase token family info for %s",  v8,  0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v10(v23, v22);
  }

  else
  {
    uint64_t v11 = v1[24];
    uint64_t v12 = v1[21];
    uint64_t v13 = v1[22];
    swift_bridgeObjectRelease_n(v1[18], 2LL);

    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v10(v11, v12);
  }

  uint64_t v14 = v1 + 2;
  v1[25] = v10;
  id v15 = (void *)objc_opt_self(&OBJC_CLASS___ASDStoreKitService);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v1[26] = isa;
  NSString v17 = String._bridgeToObjectiveC()();
  v1[27] = v17;
  v1[2] = v1;
  _OWORD v1[3] = sub_10002C570;
  uint64_t v18 = swift_continuation_init(v1 + 2, 1LL);
  v1[10] = _NSConcreteStackBlock;
  uint64_t v19 = v1 + 10;
  v19[1] = 0x40000000LL;
  v19[2] = sub_10002C800;
  v19[3] = &unk_1003DD300;
  v19[4] = v18;
  [v15 handleNewTokenFamily:isa bundleID:v17 withReply:v19];
  return swift_continuation_await(v14);
}

uint64_t sub_10002C570()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 224LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10002C614;
  }
  else {
    uint64_t v2 = sub_10002C5D0;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10002C5D0()
{
  uint64_t v1 = *(void **)(v0 + 208);

  uint64_t v2 = *(void *)(v0 + 184);
  swift_task_dealloc(*(void *)(v0 + 192));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002C614(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 216);
  uint64_t v3 = *(void **)(v1 + 208);
  uint64_t v4 = *(void *)(v1 + 144);
  swift_willThrow(a1);

  static Logger.storeKit.getter(v5);
  uint64_t v6 = swift_bridgeObjectRetain_n(v4, 2LL);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = *(void *)(v1 + 224);
    uint64_t v21 = *(void *)(v1 + 184);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v1 + 200);
    uint64_t v20 = *(void *)(v1 + 168);
    uint64_t v11 = *(void *)(v1 + 136);
    unint64_t v10 = *(void *)(v1 + 144);
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v23 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_bridgeObjectRetain(v10);
    *(void *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = sub_100088DB4(v11, v10, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v10, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to hand off new token family for %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_errorRelease(v9);

    v22(v21, v20);
  }

  else
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v1 + 200);
    uint64_t v15 = *(void *)(v1 + 184);
    uint64_t v16 = *(void *)(v1 + 168);
    uint64_t v17 = *(void *)(v1 + 144);
    swift_errorRelease(*(void *)(v1 + 224));
    swift_bridgeObjectRelease_n(v17, 2LL);

    v14(v15, v16);
  }

  uint64_t v18 = *(void *)(v1 + 184);
  swift_task_dealloc(*(void *)(v1 + 192));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10002C800(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    return swift_continuation_throwingResume(*(void *)(a1 + 32));
  }
  uint64_t v4 = sub_1000079A0(&qword_100459B50);
  uint64_t v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0LL, 0LL);
  *uint64_t v6 = a2;
  id v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t type metadata accessor for StoreKitExternalGateway()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored23StoreKitExternalGateway);
}

uint64_t sub_10002C960(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v16[0] = a4;
  v16[1] = a5;
  uint64_t v8 = sub_1000079A0(&qword_100459050);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v12 = a1[4];
  sub_100015F50(a1, v13);
  unint64_t v14 = sub_10002DB9C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ExternalPurchaseTokenV2Family.Token.CodingKeys,  &type metadata for ExternalPurchaseTokenV2Family.Token.CodingKeys,  v14,  v13,  v12);
  char v18 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2);
  if (!v5)
  {
    char v17 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16[0]);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10002CA88(char *a1, char *a2)
{
  return sub_100065E98(*a1, *a2);
}

Swift::Int sub_10002CA94()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1) {
    unint64_t v2 = 0x7079546E656B6F74LL;
  }
  else {
    unint64_t v2 = 0xD000000000000015LL;
  }
  if (v1) {
    unint64_t v3 = 0xE900000000000065LL;
  }
  else {
    unint64_t v3 = 0x8000000100341DF0LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10002CB1C(uint64_t a1)
{
  if (*v1) {
    unint64_t v2 = 0x7079546E656B6F74LL;
  }
  else {
    unint64_t v2 = 0xD000000000000015LL;
  }
  if (*v1) {
    unint64_t v3 = 0xE900000000000065LL;
  }
  else {
    unint64_t v3 = 0x8000000100341DF0LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10002CB80()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1) {
    unint64_t v2 = 0x7079546E656B6F74LL;
  }
  else {
    unint64_t v2 = 0xD000000000000015LL;
  }
  if (v1) {
    unint64_t v3 = 0xE900000000000065LL;
  }
  else {
    unint64_t v3 = 0x8000000100341DF0LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10002CC04@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DB318, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_10002CC60(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000015LL;
  if (*v1) {
    unint64_t v2 = 0x7079546E656B6F74LL;
  }
  unint64_t v3 = 0x8000000100341DF0LL;
  if (*v1) {
    unint64_t v3 = 0xE900000000000065LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10002CCA8()
{
  if (*v0) {
    return 0x7079546E656B6F74LL;
  }
  else {
    return 0xD000000000000015LL;
  }
}

uint64_t sub_10002CCEC@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DB318, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

void sub_10002CD4C(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_10002CD58(uint64_t a1)
{
  unint64_t v2 = sub_10002DB9C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002CD80(uint64_t a1)
{
  unint64_t v2 = sub_10002DB9C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002CDA8(void *a1)
{
  return sub_10002C960(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10002CDC4(void *a1)
{
  Swift::String v3 = v1;
  uint64_t v5 = sub_1000079A0(&qword_100459028);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100015F50(a1, v9);
  unint64_t v11 = sub_10002DAB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for ExternalPurchaseTokenV2Family.CodingKeys,  &type metadata for ExternalPurchaseTokenV2Family.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *(unsigned __int8 *)v3;
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v22, v5);
  if (!v2)
  {
    uint64_t v13 = *((void *)v3 + 1);
    v21[1] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13);
    double v14 = v3[3];
    v21[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v21, v5, v14);
    if (*(void *)(*((void *)v3 + 4) + 16LL))
    {
      uint64_t v20 = *((void *)v3 + 4);
      char v19 = 3;
      uint64_t v15 = sub_1000079A0(&qword_100459038);
      unint64_t v16 = sub_10002DAF4();
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, v15, v16);
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10002CF54(char *a1)
{
}

void sub_10002CF60()
{
}

void sub_10002CF68()
{
  __asm { BR              X10 }

uint64_t sub_10002CFB0(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xED00006449796C69LL);
}

void sub_10002D024(uint64_t a1)
{
}

unint64_t sub_10002D02C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002E054(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10002D058()
{
  return ((uint64_t (*)(void))((char *)sub_10002D094 + 4 * byte_100373608[*v0]))();
}

void sub_10002D094(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_10002D0BC(void *a1@<X8>)
{
  *a1 = 0xD000000000000013LL;
  a1[1] = 0x8000000100341E30LL;
}

void sub_10002D0DC(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_10002D100()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10002D13C + 4 * byte_10037360C[*v0]))( 0x7669746341736168LL,  0xEE006E656B6F5465LL);
}

uint64_t sub_10002D13C()
{
  return 0x6D61466E656B6F74LL;
}

unint64_t sub_10002D160()
{
  return 0xD000000000000013LL;
}

uint64_t sub_10002D17C()
{
  return 0x746E456E656B6F74LL;
}

unint64_t sub_10002D19C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10002E054(a1);
  *a2 = result;
  return result;
}

void sub_10002D1C0(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10002D1CC(uint64_t a1)
{
  unint64_t v2 = sub_10002DAB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10002D1F4(uint64_t a1)
{
  unint64_t v2 = sub_10002DAB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10002D21C(void *a1)
{
  return sub_10002CDC4(a1);
}

uint64_t sub_10002D254@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_11;
  }
  unint64_t v4 = sub_100023F7C(0x6D61466E656B6F74LL, 0xED00006449796C69LL);
  if ((v5 & 1) == 0) {
    goto LABEL_11;
  }
  sub_100016B10(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v37);
  uint64_t v6 = v36;
  if (!*(void *)(a1 + 16)
    || (uint64_t v7 = v35, v8 = sub_100023F7C(0xD000000000000013LL, 0x8000000100341E30LL), (v9 & 1) == 0)
    || (sub_100016B10(*(void *)(a1 + 56) + 32 * v8, (uint64_t)&v37),
        (swift_dynamicCast(&v35, &v37, (char *)&type metadata for Any + 8, &type metadata for Double, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease(v6);
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease(a1);
    uint64_t v14 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v6 = 0LL;
    uint64_t v10 = 0LL;
    uint64_t v15 = 0LL;
    goto LABEL_12;
  }

  uint64_t v10 = v35;
  if (*(void *)(a1 + 16) && (unint64_t v11 = sub_100023F7C(0x746E456E656B6F74LL, 0xEC00000073656972LL), (v12 & 1) != 0))
  {
    sub_100016B10(*(void *)(a1 + 56) + 32 * v11, (uint64_t)&v37);
  }

  else
  {
    __int128 v37 = 0u;
    __int128 v38 = 0u;
  }

  swift_bridgeObjectRelease(a1);
  if (!*((void *)&v38 + 1))
  {
    sub_100016AD0((uint64_t)&v37);
    goto LABEL_18;
  }

  uint64_t v16 = sub_1000079A0(&qword_1004587C0);
  if (!swift_dynamicCast(&v35, &v37, (char *)&type metadata for Any + 8, v16, 6LL))
  {
LABEL_18:
    char v17 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }

  char v17 = v35;
LABEL_19:
  uint64_t v18 = v17[2];
  if (v18)
  {
    swift_bridgeObjectRetain(v17);
    uint64_t v19 = 0LL;
    uint64_t v15 = (char *)&_swiftEmptyArrayStorage;
    while (1)
    {
      uint64_t v21 = v17[v19 + 4];
      if (*(void *)(v21 + 16))
      {
        swift_bridgeObjectRetain(v17[v19 + 4]);
        unint64_t v22 = sub_100023F7C(0xD000000000000015LL, 0x8000000100341DF0LL);
        if ((v23 & 1) != 0
          && (sub_100016B10(*(void *)(v21 + 56) + 32 * v22, (uint64_t)&v37),
              (swift_dynamicCast(&v35, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0))
        {
          uint64_t v33 = v35;
          uint64_t v34 = v36;
          if (*(void *)(v21 + 16)
            && (unint64_t v24 = sub_100023F7C(0x7079546E656B6F74LL, 0xE900000000000065LL), (v25 & 1) != 0))
          {
            sub_100016B10(*(void *)(v21 + 56) + 32 * v24, (uint64_t)&v37);
          }

          else
          {
            __int128 v37 = 0u;
            __int128 v38 = 0u;
          }

          swift_bridgeObjectRelease(v21);
          if (*((void *)&v38 + 1))
          {
            if ((swift_dynamicCast(&v35, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
            {
              uint64_t v31 = v36;
              id v32 = v35;
              if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0) {
                uint64_t v15 = sub_100088A90(0LL, *((void *)v15 + 2) + 1LL, 1, v15);
              }
              unint64_t v27 = *((void *)v15 + 2);
              unint64_t v26 = *((void *)v15 + 3);
              unint64_t v28 = v27 + 1;
              if (v27 >= v26 >> 1)
              {
                id v30 = sub_100088A90((char *)(v26 > 1), v27 + 1, 1, v15);
                unint64_t v28 = v27 + 1;
                uint64_t v15 = v30;
              }

              *((void *)v15 + 2) = v28;
              uint64_t v29 = &v15[32 * v27];
              *((void *)v29 + 4) = v33;
              *((void *)v29 + 5) = v34;
              *((void *)v29 + 6) = v32;
              *((void *)v29 + 7) = v31;
              goto LABEL_23;
            }
          }

          else
          {
            sub_100016AD0((uint64_t)&v37);
          }

          uint64_t v20 = v34;
        }

        else
        {
          uint64_t v20 = v21;
        }

        swift_bridgeObjectRelease(v20);
      }

uint64_t sub_10002D634(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0(&qword_100459008);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10002D67C()
{
  unint64_t result = qword_100459010;
  if (!qword_100459010)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373698, &type metadata for ExternalPurchaseTokenV2Family);
    atomic_store(result, &qword_100459010);
  }

  return result;
}

void *sub_10002D6C0(void *a1)
{
  return a1;
}

uint64_t sub_10002D6E8()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  sub_100007B14(*(void *)(v0 + 56), *(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10002D724(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = v1[7];
  uint64_t v10 = v1[8];
  unint64_t v11 = (void *)swift_task_alloc(dword_10045901C);
  *(void *)(v2 + 16) = v11;
  void *v11 = v2;
  v11[1] = sub_100007C40;
  return sub_10002C298(a1, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t destroy for ExternalPurchaseTokenV2Family.Token(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

void *initializeWithCopy for ExternalPurchaseTokenV2Family.Token(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for ExternalPurchaseTokenV2Family.Token(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for ExternalPurchaseTokenV2Family.Token(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV2Family.Token()
{
  return &type metadata for ExternalPurchaseTokenV2Family.Token;
}

uint64_t destroy for ExternalPurchaseTokenV2Family(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for ExternalPurchaseTokenV2Family(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for ExternalPurchaseTokenV2Family(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for ExternalPurchaseTokenV2Family(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExternalPurchaseTokenV2Family(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExternalPurchaseTokenV2Family(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV2Family()
{
  return &type metadata for ExternalPurchaseTokenV2Family;
}

unint64_t sub_10002DAB0()
{
  unint64_t result = qword_100459030;
  if (!qword_100459030)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003738FC, &type metadata for ExternalPurchaseTokenV2Family.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100459030);
  }

  return result;
}

unint64_t sub_10002DAF4()
{
  unint64_t result = qword_100459040;
  if (!qword_100459040)
  {
    uint64_t v1 = sub_10001528C(&qword_100459038);
    sub_10002DB58();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100459040);
  }

  return result;
}

unint64_t sub_10002DB58()
{
  unint64_t result = qword_100459048;
  if (!qword_100459048)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373670, &type metadata for ExternalPurchaseTokenV2Family.Token);
    atomic_store(result, (unint64_t *)&qword_100459048);
  }

  return result;
}

unint64_t sub_10002DB9C()
{
  unint64_t result = qword_100459058;
  if (!qword_100459058)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003738AC, &type metadata for ExternalPurchaseTokenV2Family.Token.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100459058);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for ExternalPurchaseTokenV2Family.Token.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }

uint64_t storeEnumTagSinglePayload for ExternalPurchaseTokenV2Family.Token.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10002DCBC + 4 * byte_100373615[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10002DCF0 + 4 * byte_100373610[v4]))();
}

uint64_t sub_10002DCF0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002DCF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002DD00LL);
  }
  return result;
}

uint64_t sub_10002DD0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002DD14LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10002DD18(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002DD20(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_10002DD2C(_BYTE *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV2Family.Token.CodingKeys()
{
  return &type metadata for ExternalPurchaseTokenV2Family.Token.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ExternalPurchaseTokenV2Family.CodingKeys( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }

uint64_t storeEnumTagSinglePayload for ExternalPurchaseTokenV2Family.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10002DE24 + 4 * byte_10037361F[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10002DE58 + 4 * byte_10037361A[v4]))();
}

uint64_t sub_10002DE58(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002DE60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10002DE68LL);
  }
  return result;
}

uint64_t sub_10002DE74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10002DE7CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10002DE80(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002DE88(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExternalPurchaseTokenV2Family.CodingKeys()
{
  return &type metadata for ExternalPurchaseTokenV2Family.CodingKeys;
}

unint64_t sub_10002DEA8()
{
  unint64_t result = qword_100459060;
  if (!qword_100459060)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373794, &type metadata for ExternalPurchaseTokenV2Family.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100459060);
  }

  return result;
}

unint64_t sub_10002DEF0()
{
  unint64_t result = qword_100459068;
  if (!qword_100459068)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373884, &type metadata for ExternalPurchaseTokenV2Family.Token.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100459068);
  }

  return result;
}

unint64_t sub_10002DF38()
{
  unint64_t result = qword_100459070;
  if (!qword_100459070)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003737BC, &type metadata for ExternalPurchaseTokenV2Family.Token.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100459070);
  }

  return result;
}

unint64_t sub_10002DF80()
{
  unint64_t result = qword_100459078;
  if (!qword_100459078)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003737E4, &type metadata for ExternalPurchaseTokenV2Family.Token.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100459078);
  }

  return result;
}

unint64_t sub_10002DFC8()
{
  unint64_t result = qword_100459080;
  if (!qword_100459080)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003736CC, &type metadata for ExternalPurchaseTokenV2Family.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100459080);
  }

  return result;
}

unint64_t sub_10002E010()
{
  unint64_t result = qword_100459088;
  if (!qword_100459088)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003736F4, &type metadata for ExternalPurchaseTokenV2Family.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100459088);
  }

  return result;
}

unint64_t sub_10002E054(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DB368, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_10002E09C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1000302F8(*a1);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

void sub_10002E0CC(void *a1@<X8>)
{
  *a1 = &off_1003DB3E8;
}

id sub_10002E0DC(uint64_t a1)
{
  Swift::String v2 = &v1[OBJC_IVAR____TtC9appstored10ASEMetrics_enqueueTransactionID];
  *(void *)Swift::String v2 = 0xD000000000000025LL;
  *((void *)v2 + 1) = 0x8000000100343790LL;
  unint64_t v3 = &v1[OBJC_IVAR____TtC9appstored10ASEMetrics_flushTransactionID];
  *(void *)unint64_t v3 = 0xD000000000000023LL;
  *((void *)v3 + 1) = 0x80000001003437C0LL;
  unint64_t v4 = 0xE900000000000064LL;
  unint64_t v5 = 0x8000000100343820LL;
  uint64_t v6 = 0x65726F7473707041LL;
  switch(a1)
  {
    case 0LL:
      break;
    case 1LL:
      unint64_t v5 = 0x8000000100343820LL;
      unint64_t v4 = 0xE600000000000000LL;
      uint64_t v6 = 0x656461637241LL;
      break;
    case 2LL:
      unint64_t v4 = 0xE900000000000065LL;
      unint64_t v5 = 0x8000000100343820LL;
      uint64_t v6 = 0x72696673736F7243LL;
      break;
    case 3LL:
      unint64_t v5 = 0x80000001003437F0LL;
      unint64_t v4 = 0xE300000000000000LL;
      uint64_t v6 = 5590596LL;
      break;
    default:
      uint64_t v17 = a1;
      uint64_t v15 = v1;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)( &type metadata for ASEMetricsType,  &v17,  &type metadata for ASEMetricsType,  &type metadata for Int);
      __break(1u);
      JUMPOUT(0x10002E2ECLL);
  }

  uint64_t v7 = objc_opt_self(&OBJC_CLASS___URLBag);
  int v8 = v1;
  id v9 = sub_100255630(v7);
  id v10 = objc_allocWithZone(&OBJC_CLASS___AMSMetrics);
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  id v12 = [v10 initWithContainerID:v11 bag:v9];

  *(void *)&v8[OBJC_IVAR____TtC9appstored10ASEMetrics_amsMetrics] = v12;
  [v12 setFlushTimerEnabled:0];
  uint64_t v13 = (uint64_t *)&v8[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
  *uint64_t v13 = v6;
  v13[1] = v4;

  v16.receiver = v8;
  v16.super_class = (Class)type metadata accessor for ASEMetrics();
  return objc_msgSendSuper2(&v16, "init");
}

uint64_t sub_10002E458(void *a1, char a2, void *aBlock, void *a4)
{
  *(_BYTE *)(v4 + 56) = a2;
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  *(void *)(v4 + 32) = _Block_copy(aBlock);
  id v7 = a1;
  id v8 = a4;
  return swift_task_switch(sub_10002E4B0, 0LL, 0LL);
}

uint64_t sub_10002E4B0()
{
  __int16 v1 = *(void **)(v0 + 16);
  uint64_t v2 = sub_1000079A0(&qword_100458EE0);
  uint64_t v3 = swift_allocObject(v2, 40LL, 7LL);
  *(_OWORD *)(v3 + 16) = xmmword_100373960;
  *(void *)(v3 + 32) = v1;
  uint64_t v8 = v3;
  specialized Array._endMutation()(v3);
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v8;
  uint64_t v4 = dword_1004590DC;
  id v5 = v1;
  uint64_t v6 = (void *)swift_task_alloc(v4);
  *(void *)(v0 + 48) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10002E558;
  return sub_10002E5D4(v8, *(_BYTE *)(v0 + 56));
}

uint64_t sub_10002E558()
{
  uint64_t v1 = *(void *)(*v0 + 40);
  uint64_t v3 = *(void **)(*v0 + 24);
  uint64_t v2 = *(void (***)(void))(*v0 + 32);
  uint64_t v4 = *(void **)(*v0 + 16);
  uint64_t v6 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 48));
  swift_bridgeObjectRelease(v1);

  v2[2](v2);
  _Block_release(v2);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10002E5D4(uint64_t a1, char a2)
{
  *(_BYTE *)(v3 + 289) = a2;
  *(void *)(v3 + 168) = a1;
  *(void *)(v3 + 176) = v2;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  *(void *)(v3 + 184) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 192) = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = swift_task_alloc(v6);
  *(void *)(v3 + 208) = swift_task_alloc(v6);
  *(void *)(v3 + 216) = swift_task_alloc(v6);
  return swift_task_switch(sub_10002E654, 0LL, 0LL);
}

uint64_t sub_10002E654(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + 168);
  uint64_t v3 = *(void *)(v1 + 168);
  if ((unint64_t)v3 >> 62)
  {
    if (v3 < 0) {
      uint64_t v40 = *(void *)(v1 + 168);
    }
    else {
      uint64_t v40 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v1 + 168));
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v40);
    a1 = swift_bridgeObjectRelease(v3);
    uint64_t v4 = *(char **)(v1 + 176);
    if (v41) {
      goto LABEL_3;
    }
LABEL_23:
    static Logger.metrics.getter(a1);
    __int128 v42 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v43 = static os_log_type_t.default.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v45 = *(void *)(v1 + 208);
    uint64_t v46 = *(void *)(v1 + 184);
    uint64_t v47 = *(os_log_s **)(v1 + 192);
    id v48 = *(char **)(v1 + 176);
    if (v44)
    {
      uint64_t v59 = *(void *)(v1 + 208);
      uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v62 = v50;
      *(_DWORD *)uint64_t v49 = 136446210;
      os_log_t log = v47;
      uint64_t v51 = *(void *)&v48[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
      unint64_t v52 = *(void *)&v48[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName + 8];
      swift_bridgeObjectRetain(v52);
      *(void *)(v1 + 136) = sub_100088DB4(v51, v52, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 136, v1 + 144, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease(v52);

      _os_log_impl((void *)&_mh_execute_header, v42, v43, "[%{public}s] No AMSMetricsEvents to enqueue", v49, 0xCu);
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);

      (*((void (**)(uint64_t, uint64_t))log + 1))(v59, v46);
    }

    else
    {

      (*((void (**)(uint64_t, uint64_t))v47 + 1))(v45, v46);
    }

    uint64_t v53 = *(void *)(v1 + 208);
    uint64_t v54 = *(void *)(v1 + 200);
    swift_task_dealloc(*(void *)(v1 + 216));
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  uint64_t v4 = *(char **)(v1 + 176);
  if (!*(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_23;
  }
LABEL_3:
  uint64_t v5 = *(void *)(v1 + 168);
  uint64_t v6 = objc_opt_self(&OBJC_CLASS___TransactionStore);
  *(void *)(v1 + 224) = v6;
  id v7 = &v4[OBJC_IVAR____TtC9appstored10ASEMetrics_enqueueTransactionID];
  *(void *)(v1 + 232) = *(void *)&v4[OBJC_IVAR____TtC9appstored10ASEMetrics_enqueueTransactionID];
  *(void *)(v1 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *((void *)v7 + 1);
  NSString v8 = String._bridgeToObjectiveC()();
  sub_10027DA08(v6, v8);

  static Logger.metrics.getter(v9);
  swift_bridgeObjectRetain_n(v5, 2LL);
  id v10 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v60 = v11;
    id v12 = *(char **)(v1 + 176);
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v58 = swift_slowAlloc(64LL, -1LL);
    uint64_t v61 = v58;
    *(_DWORD *)uint64_t v13 = 136446466;
    uint64_t v14 = *(void *)&v12[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
    unint64_t v15 = *(void *)&v12[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName + 8];
    swift_bridgeObjectRetain(v15);
    *(void *)(v1 + 144) = sub_100088DB4(v14, v15, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v15);

    *(_WORD *)(v13 + 12) = 2082;
    if ((unint64_t)v3 >> 62)
    {
      uint64_t v22 = *v2;
      if (v3 < 0) {
        uint64_t v23 = *v2;
      }
      else {
        uint64_t v23 = v3 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*v2);
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v23);
      swift_bridgeObjectRelease(v22);
    }

    else
    {
      uint64_t v16 = *(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v24 = *(void *)(v1 + 192);
    uint64_t v55 = *(void *)(v1 + 216);
    uint64_t v56 = *(void *)(v1 + 184);
    uint64_t v25 = *(void *)(v1 + 168);
    *(void *)(v1 + 152) = v16;
    uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    unint64_t v63 = v26;
    v27._countAndFlagsBits = 32LL;
    v27._object = (void *)0xE100000000000000LL;
    String.append(_:)(v27);
    v28._countAndFlagsBits = 0x746E657665LL;
    v28._object = (void *)0xE500000000000000LL;
    String.append(_:)(v28);
    if (v16 == 1) {
      uint64_t v29 = 0LL;
    }
    else {
      uint64_t v29 = 115LL;
    }
    if (v16 == 1) {
      unint64_t v30 = 0xE000000000000000LL;
    }
    else {
      unint64_t v30 = 0xE100000000000000LL;
    }
    unint64_t v31 = v30;
    String.append(_:)(*(Swift::String *)&v29);
    swift_bridgeObjectRelease(v30);
    unint64_t v32 = v63;
    *(void *)(v1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = sub_100088DB4(v62, v63, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 160, v1 + 168, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease_n(v25, 2LL);
    _os_log_impl((void *)&_mh_execute_header, v10, v60, "[%{public}s] Enqueueing %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v58, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v21(v55, v56);
  }

  else
  {
    uint64_t v17 = *(void *)(v1 + 216);
    uint64_t v18 = *(void *)(v1 + 184);
    uint64_t v19 = *(void *)(v1 + 192);
    uint64_t v20 = *(void *)(v1 + 168);

    swift_bridgeObjectRelease_n(v20, 2LL);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v21(v17, v18);
  }

  uint64_t v33 = v1 + 16;
  *(void *)(v1 + 248) = v21;
  uint64_t v34 = *(void **)(*(void *)(v1 + 176) + OBJC_IVAR____TtC9appstored10ASEMetrics_amsMetrics);
  sub_100030038();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  id v36 = [v34 promiseForEnqueueingEvents:isa];
  *(void *)(v1 + 256) = v36;

  *(void *)(v1 + 56) = v1 + 288;
  *(void *)(v1 + 16) = v1;
  *(void *)(v1 + 24) = sub_10002EC30;
  uint64_t v37 = swift_continuation_init(v1 + 16, 1LL);
  *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = _NSConcreteStackBlock;
  __int128 v38 = (void *)(v1 + 80);
  v38[1] = 0x40000000LL;
  _OWORD v38[2] = sub_10007C198;
  v38[3] = &unk_1003DD618;
  v38[4] = v37;
  [v36 resultWithTimeout:v38 completion:120.0];
  return swift_continuation_await(v33);
}

uint64_t sub_10002EC30()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 264LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10002EE0C;
  }
  else {
    uint64_t v2 = sub_10002EC90;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10002EC90()
{
  if (*(_BYTE *)(v0 + 289) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_1004590E4);
    *(void *)(v0 + 272) = v1;
    void *v1 = v0;
    v1[1] = sub_10002ED3C;
    return sub_10002F5D8();
  }

  else
  {

    uint64_t v3 = *(void *)(v0 + 224);
    NSString v4 = String._bridgeToObjectiveC()();
    sub_10027DAD8(v3, v4);

    uint64_t v5 = *(void *)(v0 + 208);
    uint64_t v6 = *(void *)(v0 + 200);
    swift_task_dealloc(*(void *)(v0 + 216));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10002ED3C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 272LL);
  *(void *)(*(void *)v1 + 280LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10002F0D4;
  }
  else {
    uint64_t v3 = sub_10002EDA0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10002EDA0()
{
  uint64_t v1 = *(void *)(v0 + 224);
  NSString v2 = String._bridgeToObjectiveC()();
  sub_10027DAD8(v1, v2);

  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002EE0C(uint64_t a1)
{
  uint64_t v2 = swift_willThrow(a1);
  uint64_t v3 = *(void *)(v1 + 264);
  uint64_t v4 = *(void **)(v1 + 176);
  static Logger.metrics.getter(v2);
  id v5 = v4;
  swift_errorRetain(v3, v6);
  id v7 = v5;
  uint64_t v9 = swift_errorRetain(v3, v8);
  id v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v32 = *(void *)(v1 + 200);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(v1 + 248);
    id v12 = *(char **)(v1 + 176);
    unint64_t v30 = *(void **)(v1 + 256);
    uint64_t v31 = *(void *)(v1 + 184);
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v29 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = v29;
    *(_DWORD *)uint64_t v13 = 136446466;
    uint64_t v15 = *(void *)&v12[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
    unint64_t v16 = *(void *)&v12[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName + 8];
    swift_bridgeObjectRetain(v16);
    *(void *)(v1 + 128) = sub_100088DB4(v15, v16, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 128, v1 + 136, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v16);

    *(_WORD *)(v13 + 12) = 2114;
    swift_errorRetain(v3, v17);
    uint64_t v18 = _swift_stdlib_bridgeErrorToNSError(v3);
    *(void *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v13 + 14, v13 + 22);
    uint64_t *v14 = v18;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[%{public}s] Failed to enqueue events due to error: %{public}@",  (uint8_t *)v13,  0x16u);
    uint64_t v19 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v14, 1LL, v19);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);

    swift_errorRelease(v3);
    v33(v32, v31);
  }

  else
  {
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v1 + 248);
    uint64_t v21 = *(void *)(v1 + 200);
    uint64_t v23 = *(void **)(v1 + 176);
    uint64_t v22 = *(void *)(v1 + 184);

    swift_errorRelease(v3);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

    v20(v21, v22);
  }

  uint64_t v24 = *(void *)(v1 + 224);
  NSString v25 = String._bridgeToObjectiveC()();
  sub_10027DAD8(v24, v25);

  uint64_t v26 = *(void *)(v1 + 208);
  uint64_t v27 = *(void *)(v1 + 200);
  swift_task_dealloc(*(void *)(v1 + 216));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10002F0D4()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void **)(v0 + 176);
  static Logger.metrics.getter();
  id v3 = v2;
  swift_errorRetain(v1, v4);
  id v5 = v3;
  uint64_t v7 = swift_errorRetain(v1, v6);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v30 = *(void *)(v0 + 200);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    id v10 = *(char **)(v0 + 176);
    Swift::String v28 = *(void **)(v0 + 256);
    uint64_t v29 = *(void *)(v0 + 184);
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    id v12 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v27;
    *(_DWORD *)uint64_t v11 = 136446466;
    uint64_t v13 = *(void *)&v10[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
    unint64_t v14 = *(void *)&v10[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName + 8];
    swift_bridgeObjectRetain(v14);
    *(void *)(v0 + 128) = sub_100088DB4(v13, v14, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v14);

    *(_WORD *)(v11 + 12) = 2114;
    swift_errorRetain(v1, v15);
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v11 + 14, v11 + 22);
    *id v12 = v16;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[%{public}s] Failed to enqueue events due to error: %{public}@",  (uint8_t *)v11,  0x16u);
    uint64_t v17 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v12, 1LL, v17);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    swift_errorRelease(v1);
    v31(v30, v29);
  }

  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    uint64_t v19 = *(void *)(v0 + 200);
    uint64_t v21 = *(void **)(v0 + 176);
    uint64_t v20 = *(void *)(v0 + 184);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);

    v18(v19, v20);
  }

  uint64_t v22 = *(void *)(v0 + 224);
  NSString v23 = String._bridgeToObjectiveC()();
  sub_10027DAD8(v22, v23);

  uint64_t v24 = *(void *)(v0 + 208);
  uint64_t v25 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 216));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002F4CC(uint64_t a1, char a2, void *aBlock, void *a4)
{
  void v4[2] = a4;
  void v4[3] = _Block_copy(aBlock);
  unint64_t v8 = sub_100030038();
  uint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, v8);
  void v4[4] = v9;
  uint64_t v10 = dword_1004590DC;
  a4;
  uint64_t v11 = (void *)swift_task_alloc(v10);
  v4[5] = v11;
  void *v11 = v4;
  v11[1] = sub_10002F564;
  return sub_10002E5D4(v9, a2);
}

uint64_t sub_10002F564()
{
  uint64_t v1 = *(void *)(*v0 + 32);
  id v3 = *(void **)(*v0 + 16);
  uint64_t v2 = *(void (***)(void))(*v0 + 24);
  uint64_t v5 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 40));
  swift_bridgeObjectRelease(v1);

  v2[2](v2);
  _Block_release(v2);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10002F5D8()
{
  v1[20] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[21] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[22] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[23] = swift_task_alloc(v4);
  v1[24] = swift_task_alloc(v4);
  return swift_task_switch(sub_10002F648, 0LL, 0LL);
}

uint64_t sub_10002F648()
{
  uint64_t v1 = *(char **)(v0 + 160);
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___TransactionStore);
  *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  uint64_t v3 = &v1[OBJC_IVAR____TtC9appstored10ASEMetrics_flushTransactionID];
  *(void *)(v0 + 208) = *(void *)&v1[OBJC_IVAR____TtC9appstored10ASEMetrics_flushTransactionID];
  *(void *)(v0 + 216) = *((void *)v3 + 1);
  NSString v4 = String._bridgeToObjectiveC()();
  sub_10027DA08(v2, v4);

  static Logger.metrics.getter();
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(char **)(v0 + 160);
    uint64_t v23 = *(void *)(v0 + 168);
    uint64_t v24 = *(void *)(v0 + 192);
    uint64_t v21 = v7;
    uint64_t v22 = *(void *)(v0 + 176);
    unint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v25 = v9;
    *(_DWORD *)unint64_t v8 = 136446210;
    uint64_t v10 = *(void *)&v7[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
    unint64_t v11 = *(void *)&v7[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName + 8];
    swift_bridgeObjectRetain(v11);
    *(void *)(v0 + 152) = sub_100088DB4(v10, v11, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease(v11);

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] Flushing events", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    id v12 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v12(v24, v23);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v15 = *(void *)(v0 + 176);

    id v12 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v12(v13, v14);
  }

  uint64_t v16 = v0 + 16;
  *(void *)(v0 + 224) = v12;
  id v17 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(v0 + 160)
                                                              + OBJC_IVAR____TtC9appstored10ASEMetrics_amsMetrics), "flush"));
  *(void *)(v0 + 232) = v17;
  *(void *)(v0 + 56) = v0 + 120;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_10002F8E8;
  uint64_t v18 = swift_continuation_init(v0 + 16, 1LL);
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = _NSConcreteStackBlock;
  uint64_t v19 = (void *)(v0 + 80);
  v19[1] = 0x40000000LL;
  v19[2] = sub_10002FCB0;
  v19[3] = &unk_1003DD600;
  v19[4] = v18;
  [v17 resultWithTimeout:v19 completion:120.0];
  return swift_continuation_await(v16);
}

uint64_t sub_10002F8E8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 240LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10002FC24;
  }
  else {
    uint64_t v2 = sub_10002F948;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10002F948()
{
  uint64_t v1 = *(void **)(v0 + 160);
  uint64_t v2 = *(void **)(v0 + 120);
  static Logger.metrics.getter();
  id v3 = v2;
  id v4 = v1;
  id v5 = v3;
  os_log_type_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v33 = *(void *)(v0 + 184);
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
    unint64_t v8 = *(char **)(v0 + 160);
    uint64_t v31 = *(void **)(v0 + 232);
    uint64_t v32 = *(void *)(v0 + 168);
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v30 = swift_slowAlloc(64LL, -1LL);
    uint64_t v35 = v30;
    *(_DWORD *)uint64_t v9 = 136446466;
    uint64_t v10 = *(void *)&v8[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName];
    unint64_t v11 = *(void *)&v8[OBJC_IVAR____TtC9appstored10ASEMetrics_shortName + 8];
    swift_bridgeObjectRetain(v11);
    *(void *)(v0 + 128) = sub_100088DB4(v10, v11, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v11);

    *(_WORD *)(v9 + 12) = 2082;
    uint64_t v12 = Int.init(truncating:)(v5);
    *(void *)(v0 + 136) = v12;
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    unint64_t v37 = v13;
    v14._countAndFlagsBits = 32LL;
    v14._object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    v15._countAndFlagsBits = 0x746E657665LL;
    v15._object = (void *)0xE500000000000000LL;
    String.append(_:)(v15);
    if (v12 == 1) {
      uint64_t v16 = 0LL;
    }
    else {
      uint64_t v16 = 115LL;
    }
    if (v12 == 1) {
      unint64_t v17 = 0xE000000000000000LL;
    }
    else {
      unint64_t v17 = 0xE100000000000000LL;
    }
    unint64_t v18 = v17;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease(v17);
    unint64_t v19 = v37;
    *(void *)(v0 + 144) = sub_100088DB4(v36, v37, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease(v19);

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] Flushed %{public}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v30, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    v34(v33, v32);
  }

  else
  {
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v0 + 224);
    uint64_t v20 = *(void **)(v0 + 232);
    uint64_t v22 = *(void *)(v0 + 184);
    uint64_t v24 = *(void **)(v0 + 160);
    uint64_t v23 = *(void *)(v0 + 168);

    v21(v22, v23);
  }

  uint64_t v25 = *(void *)(v0 + 192);
  uint64_t v26 = *(void *)(v0 + 200);
  uint64_t v27 = *(void *)(v0 + 184);
  NSString v28 = String._bridgeToObjectiveC()();
  sub_10027DAD8(v26, v28);

  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002FC24(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 232);
  uint64_t v4 = *(void *)(v1 + 192);
  uint64_t v3 = *(void *)(v1 + 200);
  uint64_t v5 = *(void *)(v1 + 184);
  swift_willThrow(a1);

  NSString v6 = String._bridgeToObjectiveC()();
  sub_10027DAD8(v3, v6);

  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10002FCB0(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    uint64_t v5 = sub_1000079A0(&qword_100459B50);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *os_log_type_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else if (a2)
  {
    **(void **)(*(void *)(v3 + 64) + 40LL) = a2;
    id v9 = a2;
    return swift_continuation_throwingResume(v3);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10002FE58(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_1004590E4;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10002FEB8;
  return sub_10002F5D8();
}

uint64_t sub_10002FEB8()
{
  uint64_t v2 = *(void *)(*v1 + 32);
  uint64_t v3 = *(void **)(*v1 + 16);
  uint64_t v4 = *v1;
  swift_task_dealloc(v2);

  uint64_t v5 = *(void *)(v4 + 24);
  if (v0)
  {
    uint64_t v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);
  }

  else
  {
    (*(void (**)(void, void))(v5 + 16))(*(void *)(v4 + 24), 0LL);
  }

  _Block_release(*(const void **)(v4 + 24));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

id sub_10002FF84()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ASEMetrics();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ASEMetrics()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored10ASEMetrics);
}

unint64_t sub_100030038()
{
  unint64_t result = qword_1004590E8;
  if (!qword_1004590E8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSMetricsEvent);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004590E8);
  }

  return result;
}

uint64_t sub_100030074()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000300A0()
{
  objc_super v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1004590F4);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100008210;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1004590F0 + dword_1004590F0))(v2, v3);
}

uint64_t sub_100030110()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(_BYTE *)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 32);
  uint64_t v4 = *(void **)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc(dword_100459104);
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100008210;
  return ((uint64_t (*)(uint64_t, char, void *, void *))((char *)&dword_100459100 + dword_100459100))( v2,  v3,  v5,  v4);
}

uint64_t sub_100030198()
{
  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000301CC()
{
  uint64_t v2 = *(void **)(v0 + 16);
  char v3 = *(_BYTE *)(v0 + 24);
  uint64_t v5 = *(void **)(v0 + 32);
  uint64_t v4 = *(void **)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc(dword_100459124);
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100007C40;
  return ((uint64_t (*)(void *, char, void *, void *))((char *)&dword_100459120 + dword_100459120))( v2,  v3,  v5,  v4);
}

ValueMetadata *type metadata accessor for ASEMetricsType()
{
  return &type metadata for ASEMetricsType;
}

unint64_t sub_100030264()
{
  unint64_t result = qword_100459140;
  if (!qword_100459140)
  {
    uint64_t v1 = sub_10001528C(&qword_100459148);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100459140);
  }

  return result;
}

unint64_t sub_1000302B4()
{
  unint64_t result = qword_100459150;
  if (!qword_100459150)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373A4C, &type metadata for ASEMetricsType);
    atomic_store(result, (unint64_t *)&qword_100459150);
  }

  return result;
}

unint64_t sub_1000302F8(unint64_t result)
{
  if (result > 3) {
    return 0LL;
  }
  return result;
}

id sub_100030308()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for LaunchHistory()) init];
  qword_1004628D8 = (uint64_t)result;
  return result;
}

uint64_t sub_100030374(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v5 = objc_opt_self(&OBJC_CLASS___AppUsageDatabaseStore);
  id v6 = sub_1002B61EC(v5);
  uint64_t v7 = swift_allocObject(&unk_1003DD960, 32LL, 7LL);
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = ObjectType;
  uint64_t v8 = swift_allocObject(&unk_1003DD988, 32LL, 7LL);
  *(void *)(v8 + 16) = sub_100036310;
  *(void *)(v8 + 24) = v7;
  v12[4] = sub_1000366C0;
  uint64_t v13 = v8;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256LL;
  v12[2] = sub_100028ECC;
  v12[3] = &unk_1003DD9A0;
  id v9 = _Block_copy(v12);
  uint64_t v10 = v13;
  swift_bridgeObjectRetain(a1);
  swift_retain(v8);
  swift_release(v10);
  [v6 modifyUsingTransaction:v9];

  _Block_release(v9);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v8, "", 98LL, 30LL, 66LL, 1LL);
  swift_release(v7);
  uint64_t result = swift_release(v8);
  if ((a1 & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000304CC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 16);
  if (!v3) {
    return 1LL;
  }
  id v37 = (id)objc_opt_self(&OBJC_CLASS___SQLiteComparisonPredicate);
  id v36 = (id)objc_opt_self(&OBJC_CLASS___SQLiteCompoundPredicate);
  uint64_t v5 = sub_10001517C(0LL, &qword_1004591D8, &off_1003D9DF0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v5);
  id v34 = (id)objc_opt_self(&OBJC_CLASS___LaunchEventEntity);
  swift_bridgeObjectRetain(a2);
  uint64_t v41 = 0LL;
  __int128 v42 = 0LL;
  uint64_t v40 = v3 - 1;
  uint64_t v33 = a2;
  id v6 = (uint64_t *)(a2 + 40);
  while (1)
  {
    uint64_t v7 = (void **)*(v6 - 1);
    uint64_t v8 = *v6;
    uint64_t v9 = sub_1000079A0((uint64_t *)&unk_1004594A0);
    uint64_t v10 = swift_allocObject(v9, 96LL, 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_100373A90;
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"bundle_id");
    uint64_t v12 = v11;
    swift_bridgeObjectRetain_n(v8, 2LL);
    NSString v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
    aBlock = v7;
    uint64_t v44 = v8;
    swift_bridgeObjectRetain(v8);
    uint64_t v14 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&aBlock, &type metadata for String);
    id v15 = [v37 predicateWithProperty:v13 equalToValue:v14];
    swift_bridgeObjectRelease(v8);
    swift_unknownObjectRelease(v14);

    uint64_t v16 = sub_10001517C(0LL, &qword_1004591E0, off_1003DA100);
    *(void *)(v10 + 56) = v16;
    *(void *)(v10 + 32) = v15;
    static String._unconditionallyBridgeFromObjectiveC(_:)(@"containing_bundle_id");
    uint64_t v18 = v17;
    swift_bridgeObjectRetain(v8);
    NSString v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v18);
    aBlock = v7;
    uint64_t v44 = v8;
    swift_bridgeObjectRetain(v8);
    uint64_t v20 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&aBlock, &type metadata for String);
    id v21 = [v37 predicateWithProperty:v19 equalToValue:v20];
    swift_bridgeObjectRelease(v8);
    swift_unknownObjectRelease(v20);

    *(void *)(v10 + 88) = v16;
    *(void *)(v10 + 64) = v21;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v10);
    id v23 = [v36 predicateMatchingAnyPredicates:isa];

    id v24 = [a1 connection];
    id v25 = sub_10024C1D0(ObjCClassFromMetadata, v24, v23);

    id v26 = [v34 defaultProperties];
    uint64_t v27 = (void *)swift_allocObject(&unk_1003DD9D8, 48LL, 7LL);
    v27[2] = a1;
    v27[3] = v7;
    v27[4] = v8;
    v27[5] = a3;
    id v28 = a1;
    sub_10001527C((uint64_t)v42, v41);
    uint64_t v29 = swift_allocObject(&unk_1003DDA00, 32LL, 7LL);
    *(void *)(v29 + 16) = sub_100036354;
    *(void *)(v29 + 24) = v27;
    uint64_t v47 = sub_1000152F8;
    uint64_t v48 = v29;
    aBlock = _NSConcreteStackBlock;
    uint64_t v44 = 1107296256LL;
    uint64_t v45 = sub_100030B80;
    uint64_t v46 = &unk_1003DDA18;
    uint64_t v30 = _Block_copy(&aBlock);
    uint64_t v31 = v48;
    swift_retain(v29);
    swift_release(v31);
    [v25 enumeratePersistentIDsAndProperties:v26 usingBlock:v30];

    _Block_release(v30);
    LOBYTE(v26) = swift_isEscapingClosureAtFileLocation(v29, "", 98LL, 37LL, 98LL, 1LL);
    uint64_t result = swift_release(v29);
    if (!v40)
    {
      swift_release(v27);
      swift_bridgeObjectRelease(v33);
      return 1LL;
    }

    v6 += 2;
    --v40;
    uint64_t v41 = (uint64_t)v27;
    __int128 v42 = sub_100036354;
  }

  __break(1u);
  return result;
}

uint64_t sub_10003090C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v17 = [a5 connection];
  id v18 = [objc_allocWithZone((Class)LaunchEventEntity) initWithPersistentID:a1 onConnection:v17];

  static Logger.appUsage.getter([v18 deleteFromDatabase]);
  uint64_t v19 = swift_bridgeObjectRetain_n(a7, 2LL);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    uint64_t v23 = swift_slowAlloc(64LL, -1LL);
    uint64_t v30 = a6;
    uint64_t v24 = v23;
    uint64_t v34 = v23;
    *(_DWORD *)uint64_t v22 = 136446466;
    uint64_t v32 = v14;
    uint64_t v25 = _typeName(_:qualified:)(a8, 0LL);
    unint64_t v27 = v26;
    uint64_t v33 = sub_100088DB4(v25, v26, &v34);
    uint64_t v31 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v22 + 12) = 2080;
    swift_bridgeObjectRetain(a7);
    uint64_t v33 = sub_100088DB4(v30, a7, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease_n(a7, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "[%{public}s][%s] Removed launch history",  (uint8_t *)v22,  0x16u);
    swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v16, v31);
  }

  else
  {

    swift_bridgeObjectRelease_n(a7, 2LL);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }

uint64_t sub_100030B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a1 + 32);
  uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( a3,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  v8(a2, v9, a4, a5);
  return swift_bridgeObjectRelease(v9);
}

id sub_100030C4C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL, a2);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_10001517C(0LL, &qword_1004591D8, &off_1003D9DF0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v10);
  id v12 = [a1 connection];
  id v13 = sub_10024C1D0(ObjCClassFromMetadata, v12, 0LL);

  id result = [(id)objc_opt_self(LaunchEventEntity) defaultProperties];
  if (result)
  {
    uint64_t v15 = result;
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)(result, &type metadata for String);

    id v17 = sub_100056154(v16);
    swift_bridgeObjectRelease(v16);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v6);
    uint64_t v19 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v20 = (v19 + 16) & ~v19;
    unint64_t v21 = (v8 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v22 = swift_allocObject(&unk_1003DDAC8, v21 + 8, v19 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v22 + v20, v9, v6);
    *(void *)(v22 + v21) = a3;
    uint64_t v23 = swift_allocObject(&unk_1003DDAF0, 32LL, 7LL);
    *(void *)(v23 + 16) = sub_100036620;
    *(void *)(v23 + 24) = v22;
    aBlock[4] = sub_10002A7F8;
    uint64_t v28 = v23;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100056278;
    aBlock[3] = &unk_1003DDB08;
    uint64_t v24 = _Block_copy(aBlock);
    uint64_t v25 = v28;
    swift_retain(v23);
    swift_release(v25);
    [v13 enumerateMemoryEntitiesWithProperties:isa usingBlock:v24];

    _Block_release(v24);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v23, "", 98LL, 53LL, 98LL, 1LL);
    swift_release(v22);
    id result = (id)swift_release(v23);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      return result;
    }
    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_100030EDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_1000079A0((uint64_t *)&unk_100459410);
  __chkstk_darwin(v11);
  id v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = objc_opt_self(&OBJC_CLASS___LaunchEvent);
  uint64_t v15 = (void *)swift_dynamicCastObjCClassUnconditional(a1, v14, 0LL, 0LL, 0LL);
  id v16 = a1;
  id v17 = sub_1002CFD48(v15);
  if (!v17)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v13, 1LL, 1LL, v7);
    goto LABEL_9;
  }

  id v18 = v17;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v17);

  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v10, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v13, 0LL, 1LL, v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1LL, v7) == 1)
  {
LABEL_9:
    __break(1u);
    return;
  }

  char v19 = DateInterval.contains(_:)(v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  if ((v19 & 1) != 0)
  {
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
    unint64_t v21 = *(void *)((*a5 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v20 = *(void *)((*a5 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v21 >= v20 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1LL);
    }
    uint64_t v22 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v15);
    specialized Array._endMutation()(v22);
  }
}

uint64_t sub_10003117C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  id v94 = a1;
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v5 = type metadata accessor for DateInterval(0LL, v4);
  uint64_t v87 = *(double **)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  int v86 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v84 - v8;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v91 = *(void *)(v10 - 8);
  uint64_t v92 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v89 = (os_log_s *)((char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11);
  uint64_t v90 = (double *)((char *)&v84 - v13);
  uint64_t v14 = sub_1000079A0((uint64_t *)&unk_100459410);
  __chkstk_darwin(v14);
  id v16 = (char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v95 - 8);
  uint64_t v18 = __chkstk_darwin(v95);
  unint64_t v20 = (char *)&v84 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v84 - v22;
  uint64_t v24 = Date.init()(v21);
  id v93 = v23;
  double v25 = Date.timeIntervalSinceReferenceDate.getter(v24);
  uint64_t v26 = *(void *)&v3[OBJC_IVAR____TtC9appstored13LaunchHistory_lockedThing];
  os_unfair_lock_lock((os_unfair_lock_t)(v26 + 24));
  double v27 = *(double *)(v26 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 24));
  if (v27 != 0.0) {
    goto LABEL_6;
  }
  uint64_t v28 = objc_opt_self(&OBJC_CLASS___AppUsageDatabaseStore);
  id v29 = sub_1002B61EC(v28);
  id v30 = sub_1002B62D4(v29);

  if (!v30) {
    goto LABEL_6;
  }
  uint64_t v85 = v3;
  id v31 = sub_1002F8AE4(v30);
  if (!v31)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v16, 1LL, 1LL, v95);
    goto LABEL_19;
  }

  uint64_t v32 = v31;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v31);

  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  uint64_t v34 = v17;
  uint64_t v35 = v95;
  v33(v16, v20, v95);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v34 + 56))(v16, 0LL, 1LL, v35);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48))(v16, 1LL, v35);
  if ((_DWORD)result == 1)
  {
LABEL_19:
    __break(1u);
    return result;
  }

  double v37 = Date.timeIntervalSinceReferenceDate.getter(result);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v16, v35);
  os_unfair_lock_lock((os_unfair_lock_t)(v26 + 24));
  *(double *)(v26 + 16) = v37;
  os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 24));

  uint64_t v17 = v34;
  uint64_t v3 = v85;
LABEL_6:
  os_unfair_lock_lock((os_unfair_lock_t)(v26 + 24));
  double v38 = *(double *)(v26 + 16);
  os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 24));
  if (v38 == COERCE_DOUBLE(1LL)
    || (os_unfair_lock_lock((os_unfair_lock_t)(v26 + 24)),
        double v39 = *(double *)(v26 + 16),
        os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 24)),
        *(double *)&v3[OBJC_IVAR____TtC9appstored13LaunchHistory_fiveMinutes] < v25 - v39))
  {
    os_unfair_lock_lock((os_unfair_lock_t)(v26 + 24));
    double v40 = *(double *)(v26 + 16);
    os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 24));
    if (v40 <= 0.0)
    {
      unint64_t v63 = v89;
      static Logger.appUsage.getter(v41);
      id v43 = v94;
      double v64 = COERCE_DOUBLE(v94);
      uint64_t v65 = (os_log_s *)Logger.logObject.getter(*(void *)&v64);
      os_log_type_t v66 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = swift_slowAlloc(22LL, -1LL);
        uint64_t v87 = (double *)swift_slowAlloc(8LL, -1LL);
        uint64_t v90 = (double *)swift_slowAlloc(32LL, -1LL);
        uint64_t v97 = v90;
        *(_DWORD *)uint64_t v67 = 136446466;
        uint64_t v68 = _typeName(_:qualified:)(ObjectType, 0LL);
        unint64_t v70 = v69;
        double v96 = COERCE_DOUBLE(sub_100088DB4(v68, v69, (uint64_t *)&v97));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v67 + 4, v67 + 12);
        swift_bridgeObjectRelease(v70);
        *(_WORD *)(v67 + 12) = 2112;
        double v96 = v64;
        id v71 = *(id *)&v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v67 + 14, v67 + 22);
        uint64_t v72 = v87;
        *uint64_t v87 = v64;

        id v43 = v94;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "[%{public}s/%@] Refreshing launch history events for initial sync",  (uint8_t *)v67,  0x16u);
        uint64_t v73 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v72, 1LL, v73);
        swift_slowDealloc(v72, -1LL, -1LL);
        uint64_t v74 = v90;
        swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v74, -1LL, -1LL);
        swift_slowDealloc(v67, -1LL, -1LL);

        (*(void (**)(os_log_s *, uint64_t))(v91 + 8))(v89, v92);
      }

      else
      {

        (*(void (**)(os_log_s *, uint64_t))(v91 + 8))(v63, v92);
      }
    }

    else
    {
      __int128 v42 = v90;
      static Logger.appUsage.getter(v41);
      id v43 = v94;
      id v44 = v94;
      uint64_t v45 = v3;
      double v46 = COERCE_DOUBLE(v44);
      uint64_t v47 = v45;
      uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
      os_log_type_t v49 = static os_log_type_t.default.getter();
      int v50 = v49;
      uint64_t v89 = v48;
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v51 = swift_slowAlloc(32LL, -1LL);
        LODWORD(v86) = v50;
        uint64_t v52 = v51;
        uint64_t v53 = (double *)swift_slowAlloc(8LL, -1LL);
        uint64_t v87 = (double *)swift_slowAlloc(32LL, -1LL);
        uint64_t v97 = v87;
        *(_DWORD *)uint64_t v52 = 136446722;
        uint64_t v54 = _typeName(_:qualified:)(ObjectType, 0LL);
        uint64_t v85 = v3;
        unint64_t v56 = v55;
        double v96 = COERCE_DOUBLE(sub_100088DB4(v54, v55, (uint64_t *)&v97));
        uint64_t ObjectType = v17;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v52 + 4, v52 + 12);
        swift_bridgeObjectRelease(v56);
        *(_WORD *)(v52 + 12) = 2112;
        double v96 = v46;
        id v57 = *(id *)&v46;
        id v43 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v52 + 14, v52 + 22);
        *uint64_t v53 = v46;

        *(_WORD *)(v52 + 22) = 2048;
        os_unfair_lock_lock((os_unfair_lock_t)(v26 + 24));
        double v58 = *(double *)(v26 + 16);
        os_unfair_lock_unlock((os_unfair_lock_t)(v26 + 24));
        double v96 = v25 - v58;
        uint64_t v17 = ObjectType;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v52 + 24, v52 + 32);

        uint64_t v59 = v89;
        _os_log_impl( (void *)&_mh_execute_header,  v89,  (os_log_type_t)v86,  "[%{public}s/%@] Refreshing launch history events after %f seconds",  (uint8_t *)v52,  0x20u);
        uint64_t v60 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v53, 1LL, v60);
        swift_slowDealloc(v53, -1LL, -1LL);
        uint64_t v61 = v87;
        swift_arrayDestroy(v87, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1LL, -1LL);
        swift_slowDealloc(v52, -1LL, -1LL);

        (*(void (**)(double *, uint64_t))(v91 + 8))(v90, v92);
      }

      else
      {

        (*(void (**)(double *, uint64_t))(v91 + 8))(v42, v92);
      }
    }

    uint64_t v75 = v95;
    uint64_t v76 = v93;
    uint64_t v77 = sub_100031A18(v43, v62);
  }

  else
  {
    uint64_t v76 = v93;
    uint64_t v75 = v95;
    (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v20, v93, v95);
    DateInterval.init(start:duration:)(v20, 0.0);
    uint64_t v79 = v86;
    uint64_t v78 = v87;
    uint64_t v80 = (void (*)(char *, char *, uint64_t))*((void *)v87 + 2);
    v80(v86, v9, v5);
    uint64_t v81 = (objc_class *)type metadata accessor for LaunchSyncResult(0LL);
    id v82 = (char *)objc_allocWithZone(v81);
    v80(&v82[OBJC_IVAR____TtC9appstored16LaunchSyncResult_dateInterval], v79, v5);
    *(void *)&v82[OBJC_IVAR____TtC9appstored16LaunchSyncResult_updateCount] = 0LL;
    *(void *)&v82[OBJC_IVAR____TtC9appstored16LaunchSyncResult_error] = 0LL;
    v98.receiver = v82;
    v98.super_class = v81;
    uint64_t v77 = (uint64_t)objc_msgSendSuper2(&v98, "init");
    uint64_t v83 = (void (*)(char *, uint64_t))*((void *)v78 + 1);
    v83(v79, v5);
    v83(v9, v5);
  }

  (*(void (**)(char *, uint64_t))(v17 + 8))(v76, v75);
  return v77;
}

uint64_t sub_100031A18(void *a1, uint64_t a2)
{
  uint64_t v119 = a1;
  id ObjectType = (id)swift_getObjectType(v2, a2);
  unint64_t v4 = type metadata accessor for DateInterval(0LL, v3);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (void **)((char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6);
  uint64_t v10 = (uint64_t)&v107 - v9;
  uint64_t v11 = sub_1000079A0((uint64_t *)&unk_100459410);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v123 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v117 = (char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v122 = (char *)&v107 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  char v120 = (char *)&v107 - v20;
  __chkstk_darwin(v19);
  unint64_t v121 = (char *)&v107 - v21;
  uint64_t v136 = 0LL;
  uint64_t v22 = swift_allocObject(&unk_1003DD848, 24LL, 7LL);
  uint64_t v116 = v22;
  *(void *)(v22 + 16) = 0LL;
  uint64_t v108 = v22 + 16;
  uint64_t v124 = objc_opt_self(&OBJC_CLASS___AppUsageDatabaseStore);
  id v23 = sub_1002B61EC(v124);
  id v24 = sub_1002B62D4(v23);

  if (!v24) {
    id v24 = [objc_allocWithZone((Class)LaunchEventSyncMetadata) init];
  }
  id v114 = v24;
  id v25 = sub_1002F8AE4(v24);
  if (!v25)
  {
    uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v123 + 56))(v13, 1LL, 1LL, v14);
    goto LABEL_7;
  }

  uint64_t v26 = v25;
  double v27 = v120;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v25);

  uint64_t v28 = v123;
  id v29 = *(void (**)(char *, char *, uint64_t))(v123 + 32);
  v29(v13, v27, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v13, 0LL, 1LL, v14);
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48))(v13, 1LL, v14);
  if ((_DWORD)v30 == 1)
  {
LABEL_7:
    id v31 = v121;
    static Date.distantPast.getter(v30);
    uint64_t v32 = sub_100009AB0((uint64_t)v13);
    goto LABEL_8;
  }

  id v31 = v121;
  uint64_t v32 = ((uint64_t (*)(char *, char *, uint64_t))v29)(v121, v13, v14);
LABEL_8:
  static Date.now.getter(v32);
  uint64_t v33 = v120;
  uint64_t v107 = *(uint64_t (**)(char *, char *, uint64_t))(v123 + 16);
  uint64_t v34 = v107(v120, v31, v14);
  uint64_t v35 = v117;
  static Date.distantFuture.getter(v34);
  DateInterval.init(start:end:)(v33, v35);
  id v36 = v119;
  sub_1000331AC(v119, (void *)v10, 1);
  unint64_t v135 = v37;
  id v38 = [objc_allocWithZone((Class)type metadata accessor for Intents()) init];
  sub_100074F14(v10, v36);
  uint64_t v40 = v39;

  if (v40) {
    sub_100055AB8(v40);
  }
  id v41 = (id)v135;
  uint64_t v109 = v14;
  if ((v135 & 0x8000000000000000LL) != 0 || (v135 & 0x4000000000000000LL) != 0) {
    goto LABEL_49;
  }
  __int128 v42 = (void **)(v135 & 0xFFFFFFFFFFFFFF8LL);
  swift_bridgeObjectRetain_n(v135, 2LL);
LABEL_13:
  aBlock = v42;
  sub_100034C10((uint64_t *)&aBlock);
  swift_bridgeObjectRelease(v41);
  id v43 = aBlock;
  if (((unint64_t)aBlock & 0x8000000000000000LL) != 0 || ((unint64_t)aBlock & 0x4000000000000000LL) != 0)
  {
    uint64_t v106 = swift_bridgeObjectRetain(aBlock);
    uint64_t v44 = _CocoaArrayWrapper.endIndex.getter(v106);
    swift_release(v43);
  }

  else
  {
    uint64_t v44 = (uint64_t)aBlock[2];
  }

  uint64_t v115 = 0LL;
  char v110 = v8;
  uint64_t v111 = v10;
  uint64_t v112 = v5;
  unint64_t v113 = v4;
  if (v44)
  {
    unint64_t v127 = (unint64_t)v43 & 0xC000000000000001LL;
    uint64_t v8 = (void **)&_swiftEmptyDictionarySingleton;
    uint64_t v45 = 4LL;
    uint64_t v10 = v124;
    unint64_t v4 = (unint64_t)ObjectType;
    char v126 = (void *)v44;
    while (1)
    {
      if (v127) {
        id v48 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v45 - 4, v43);
      }
      else {
        id v48 = v43[v45];
      }
      id v41 = v48;
      uint64_t v49 = v45 - 3;
      if (__OFADD__(v45 - 4, 1LL))
      {
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        swift_bridgeObjectRetain_n(v41, 2LL);
        __int128 v42 = (void **)sub_100061248((unint64_t)v41);
        swift_bridgeObjectRelease(v41);
        goto LABEL_13;
      }

      id v50 = sub_1002CFEC8(v48);
      if (!v50)
      {
        id v50 = sub_1002CFD24(v41);
        if (!v50)
        {

          goto LABEL_21;
        }
      }

      uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      uint64_t v5 = v52;

      if (!v8[2]) {
        goto LABEL_32;
      }
      swift_bridgeObjectRetain(v5);
      sub_100023F7C(v51, v5);
      if ((v53 & 1) == 0) {
        break;
      }

      swift_bridgeObjectRelease_n(v5, 2LL);
LABEL_20:
      uint64_t v44 = (uint64_t)v126;
LABEL_21:
      ++v45;
      if (v49 == v44) {
        goto LABEL_43;
      }
    }

    swift_bridgeObjectRelease(v5);
LABEL_32:
    uint64_t v54 = v8;
    uint64_t v8 = v43;
    id v41 = v41;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v54);
    aBlock = v54;
    unint64_t v4 = sub_100023F7C(v51, v5);
    id v57 = v54[2];
    BOOL v58 = (v56 & 1) == 0;
    uint64_t v59 = (uint64_t)v57 + v58;
    if (__OFADD__(v57, v58)) {
      goto LABEL_47;
    }
    uint64_t v10 = v56;
    if ((uint64_t)v54[3] >= v59)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_10007A918();
      }
    }

    else
    {
      sub_100077E64(v59, isUniquelyReferenced_nonNull_native);
      unint64_t v60 = sub_100023F7C(v51, v5);
      if ((v10 & 1) != (v61 & 1)) {
        goto LABEL_53;
      }
      unint64_t v4 = v60;
    }

    id v43 = v8;
    uint64_t v8 = aBlock;
    if ((v10 & 1) != 0)
    {
      double v46 = (char *)aBlock[7];
      uint64_t v47 = 8 * v4;

      *(void *)&v46[v47] = v41;
    }

    else
    {
      aBlock[(v4 >> 6) + 8] = (void *)((unint64_t)aBlock[(v4 >> 6) + 8] | (1LL << v4));
      uint64_t v62 = (uint64_t *)((char *)v8[6] + 16 * v4);
      uint64_t *v62 = v51;
      v62[1] = v5;
      *((void *)v8[7] + v4) = v41;
      unint64_t v63 = (char *)v8[2];
      BOOL v64 = __OFADD__(v63, 1LL);
      uint64_t v65 = v63 + 1;
      if (v64) {
        goto LABEL_48;
      }
      v8[2] = v65;
      swift_bridgeObjectRetain(v5);
    }

    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v10 = v124;
    unint64_t v4 = (unint64_t)ObjectType;
    goto LABEL_20;
  }

  uint64_t v8 = (void **)&_swiftEmptyDictionarySingleton;
  uint64_t v10 = v124;
  unint64_t v4 = (unint64_t)ObjectType;
LABEL_43:
  swift_release(v43);
  uint64_t v66 = swift_bridgeObjectRetain(v8);
  uint64_t v67 = sub_1000324EC(v66);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v135);
  id v68 = sub_1002B61EC(v10);
  unint64_t v69 = (void *)swift_allocObject(&unk_1003DD870, 56LL, 7LL);
  uint64_t v70 = v116;
  v69[2] = v67;
  v69[3] = v70;
  id v71 = v119;
  v69[4] = v119;
  v69[5] = &v136;
  v69[6] = v4;
  uint64_t v72 = swift_allocObject(&unk_1003DD898, 32LL, 7LL);
  *(void *)(v72 + 16) = sub_10003626C;
  *(void *)(v72 + 24) = v69;
  unint64_t v127 = (unint64_t)v69;
  uint64_t v133 = sub_10002B7A4;
  uint64_t v134 = v72;
  aBlock = _NSConcreteStackBlock;
  uint64_t v130 = 1107296256LL;
  uint64_t v131 = sub_100028ECC;
  char v132 = &unk_1003DD8B0;
  unint64_t v73 = v4;
  uint64_t v74 = _Block_copy(&aBlock);
  uint64_t v75 = v134;
  swift_retain(v70);
  id v76 = v71;
  swift_retain(v72);
  swift_release(v75);
  [v68 modifyUsingTransaction:v74];

  _Block_release(v74);
  LOBYTE(v68) = swift_isEscapingClosureAtFileLocation(v72, "", 98LL, 117LL, 66LL, 1LL);
  swift_release(v72);
  if ((v68 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v78 = v114;
    [v114 setValue:isa forProperty:@"last_duet_sync"];

    id v79 = sub_1002B61EC(v10);
    uint64_t v80 = (void *)swift_allocObject(&unk_1003DD8E8, 40LL, 7LL);
    v80[2] = v78;
    v80[3] = v76;
    v80[4] = v73;
    uint64_t v81 = swift_allocObject(&unk_1003DD910, 32LL, 7LL);
    *(void *)(v81 + 16) = sub_1000362D0;
    *(void *)(v81 + 24) = v80;
    uint64_t v133 = sub_1000366C0;
    uint64_t v134 = v81;
    aBlock = _NSConcreteStackBlock;
    uint64_t v130 = 1107296256LL;
    uint64_t v131 = sub_100028ECC;
    char v132 = &unk_1003DD928;
    id v82 = _Block_copy(&aBlock);
    uint64_t v83 = v134;
    id v84 = v76;
    id v85 = v78;
    swift_retain(v81);
    swift_release(v83);
    [v79 modifyUsingTransaction:v82];

    _Block_release(v82);
    LOBYTE(v79) = swift_isEscapingClosureAtFileLocation(v81, "", 98LL, 134LL, 66LL, 1LL);
    uint64_t v86 = swift_release(v81);
    if ((v79 & 1) == 0)
    {
      double v87 = Date.timeIntervalSinceReferenceDate.getter(v86);
      uint64_t v88 = *(void *)(v118 + OBJC_IVAR____TtC9appstored13LaunchHistory_lockedThing);
      os_unfair_lock_lock((os_unfair_lock_t)(v88 + 24));
      *(double *)(v88 + 16) = v87;
      os_unfair_lock_unlock((os_unfair_lock_t)(v88 + 24));
      char v126 = v80;
      uint64_t v89 = v120;
      uint64_t v90 = v109;
      uint64_t v91 = v107(v120, v121, v109);
      uint64_t v92 = v117;
      static Date.distantFuture.getter(v91);
      id ObjectType = v85;
      id v93 = v110;
      DateInterval.init(start:end:)(v89, v92);
      swift_beginAccess(v108, &aBlock, 0LL, 0LL);
      uint64_t v94 = v116;
      uint64_t v95 = *(void *)(v116 + 16);
      uint64_t v96 = v136;
      uint64_t v97 = (objc_class *)type metadata accessor for LaunchSyncResult(0LL);
      objc_super v98 = (char *)objc_allocWithZone(v97);
      uint64_t v99 = v112;
      unint64_t v100 = v113;
      (*(void (**)(char *, void **, unint64_t))(v112 + 16))( &v98[OBJC_IVAR____TtC9appstored16LaunchSyncResult_dateInterval],  v93,  v113);
      *(void *)&v98[OBJC_IVAR____TtC9appstored16LaunchSyncResult_updateCount] = v95;
      *(void *)&v98[OBJC_IVAR____TtC9appstored16LaunchSyncResult_error] = v96;
      swift_errorRetain(v96, v101);
      v128.receiver = v98;
      v128.super_class = v97;
      id v102 = objc_msgSendSuper2(&v128, "init");
      uint64_t v103 = *(void (**)(void **, unint64_t))(v99 + 8);
      v103(v93, v100);

      v103((void **)v111, v100);
      uint64_t v104 = *(void (**)(char *, uint64_t))(v123 + 8);
      v104(v122, v90);
      v104(v121, v90);
      swift_release(v94);
      swift_bridgeObjectRelease(v8);
      swift_errorRelease(v136);
      swift_release(v126);
      swift_release(v127);
      return (uint64_t)v102;
    }
  }

  __break(1u);
LABEL_53:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  uint64_t result = swift_release(aBlock);
  __break(1u);
  return result;
}

void *sub_1000324EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = &_swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t result = (void *)sub_100063D58(a1);
    uint64_t v4 = (uint64_t)result;
    int v6 = v5;
    uint64_t v7 = 0LL;
    uint64_t v8 = a1 + 64;
    uint64_t v19 = v2;
    while ((v4 & 0x8000000000000000LL) == 0 && v4 < 1LL << *(_BYTE *)(a1 + 32))
    {
      unint64_t v10 = (unint64_t)v4 >> 6;
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_23;
      }
      uint64_t v20 = v7;
      id v11 = *(id *)(*(void *)(a1 + 56) + 8 * v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      uint64_t v12 = *((void *)&_swiftEmptyArrayStorage + 2);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      uint64_t v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
      uint64_t result = (void *)specialized ContiguousArray._endMutation()(v13);
      int64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
      if (v4 >= v9) {
        goto LABEL_24;
      }
      uint64_t v14 = *(void *)(v8 + 8 * v10);
      if ((v14 & (1LL << v4)) == 0) {
        goto LABEL_25;
      }
      if (*(_DWORD *)(a1 + 36) != v6) {
        goto LABEL_26;
      }
      unint64_t v15 = v14 & (-2LL << (v4 & 0x3F));
      if (v15)
      {
        int64_t v9 = __clz(__rbit64(v15)) | v4 & 0xFFFFFFFFFFFFFFC0LL;
      }

      else
      {
        unint64_t v16 = v10 + 1;
        unint64_t v17 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v17)
        {
          unint64_t v18 = *(void *)(v8 + 8 * v16);
          if (v18)
          {
LABEL_18:
            int64_t v9 = __clz(__rbit64(v18)) + (v16 << 6);
          }

          else
          {
            while (v17 - 2 != v10)
            {
              unint64_t v18 = *(void *)(a1 + 80 + 8 * v10++);
              if (v18)
              {
                unint64_t v16 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }

      uint64_t v7 = v20 + 1;
      uint64_t v4 = v9;
      if (v20 + 1 == v19) {
        return &_swiftEmptyArrayStorage;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }

  return result;
}

BOOL sub_1000326C8(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v72 = a6;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v73 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  unint64_t v15 = (char *)&v67 - v14;
  sub_10001517C(0LL, &qword_100459E10, off_1003D9DE8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  v80[0] = 0LL;
  id v17 = sub_10030E79C(a1, isa);

  id v18 = v80[0];
  if (!v17)
  {
    id v36 = v80[0];
    uint64_t v37 = _convertNSErrorToError(_:)(v18);

    swift_willThrow(v38);
    uint64_t v39 = *a5;
    *a5 = v37;
    swift_errorRetain(v37, v40);
    uint64_t v41 = swift_errorRelease(v39);
    static Logger.appUsage.getter(v41);
    id v42 = a4;
    swift_errorRetain(v37, v43);
    id v44 = v42;
    uint64_t v46 = swift_errorRetain(v37, v45);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.error.getter();
    int v49 = v48;
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v51 = swift_slowAlloc(8LL, -1LL);
      LODWORD(v7_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v49;
      uint64_t v52 = (void *)v51;
      id v71 = (void *)swift_slowAlloc(64LL, -1LL);
      v80[0] = v71;
      *(_DWORD *)uint64_t v50 = 136446722;
      os_log_t v69 = v47;
      uint64_t v53 = _typeName(_:qualified:)(v72, 0LL);
      unint64_t v55 = v54;
      uint64_t v77 = sub_100088DB4(v53, v54, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease(v55);
      *(_WORD *)(v50 + 12) = 2112;
      uint64_t v77 = (uint64_t)v44;
      id v56 = v44;
      uint64_t v72 = v10;
      id v57 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v50 + 14, v50 + 22);
      *uint64_t v52 = v44;

      *(_WORD *)(v50 + 22) = 2082;
      swift_getErrorValue(v37, v76, v75);
      uint64_t v58 = Error.localizedDescription.getter(v75[1], v75[2]);
      unint64_t v60 = v59;
      uint64_t v77 = sub_100088DB4(v58, v59, (uint64_t *)v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v50 + 24, v50 + 32);
      swift_bridgeObjectRelease(v60);
      swift_errorRelease(v37);
      swift_errorRelease(v37);
      os_log_t v61 = v69;
      _os_log_impl( (void *)&_mh_execute_header,  v69,  (os_log_type_t)v70,  "[%{public}s/%@] Launch history import failed with error: %{public}s",  (uint8_t *)v50,  0x20u);
      uint64_t v62 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v52, 1LL, v62);
      swift_slowDealloc(v52, -1LL, -1LL);
      unint64_t v63 = v71;
      swift_arrayDestroy(v71, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);

      swift_errorRelease(v37);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v13, v72);
      return v17 != 0LL;
    }

    swift_errorRelease(v37);

    swift_errorRelease(v37);
    swift_errorRelease(v37);

    BOOL v64 = *(void (**)(char *, uint64_t))(v73 + 8);
    uint64_t v65 = v13;
LABEL_8:
    v64(v65, v10);
    return v17 != 0LL;
  }

  id v19 = v80[0];
  id v20 = [v17 count];
  swift_beginAccess(a3 + 16, v80, 1LL, 0LL);
  *(void *)(a3 + 16) = v20;
  static Logger.appUsage.getter(v21);
  id v22 = a4;
  swift_retain_n(a3, 2LL);
  id v23 = v22;
  id v24 = (void *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter();
  int v26 = v25;
  if (!os_log_type_enabled((os_log_t)v24, v25))
  {

    swift_release_n(a3, 2LL);
    BOOL v64 = *(void (**)(char *, uint64_t))(v73 + 8);
    uint64_t v65 = v15;
    goto LABEL_8;
  }

  uint64_t v27 = swift_slowAlloc(32LL, -1LL);
  id v68 = (void *)swift_slowAlloc(8LL, -1LL);
  uint64_t v70 = swift_slowAlloc(32LL, -1LL);
  uint64_t v79 = v70;
  *(_DWORD *)uint64_t v27 = 136446722;
  id v71 = v17;
  uint64_t v28 = _typeName(_:qualified:)(v72, 0LL);
  uint64_t v72 = v10;
  unint64_t v30 = v29;
  uint64_t v77 = sub_100088DB4(v28, v29, &v79);
  LODWORD(v69) = v26;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v27 + 4, v27 + 12);
  swift_bridgeObjectRelease(v30);
  *(_WORD *)(v27 + 12) = 2112;
  uint64_t v77 = (uint64_t)v23;
  id v31 = v23;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v78, v27 + 14, v27 + 22);
  uint64_t v32 = v68;
  *id v68 = v23;

  *(_WORD *)(v27 + 22) = 2048;
  swift_beginAccess(a3 + 16, &v77, 0LL, 0LL);
  uint64_t v33 = *(void *)(a3 + 16);
  swift_release(a3);
  uint64_t v74 = v33;
  id v17 = v71;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v27 + 24, v27 + 32);
  swift_release(a3);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v24,  (os_log_type_t)v69,  "[%{public}s/%@] Launch history import resulted in %ld updated event(s)",  (uint8_t *)v27,  0x20u);
  uint64_t v34 = sub_1000079A0((uint64_t *)&unk_100458F50);
  swift_arrayDestroy(v32, 1LL, v34);
  swift_slowDealloc(v32, -1LL, -1LL);
  uint64_t v35 = v70;
  swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v35, -1LL, -1LL);
  swift_slowDealloc(v27, -1LL, -1LL);

  (*(void (**)(char *, uint64_t))(v73 + 8))(v15, v72);
  return v17 != 0LL;
}

BOOL sub_100032D0C(void *a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v44 - v13;
  id v15 = sub_10030EBA4(a1, a2);
  unint64_t v16 = v15;
  if (!v15)
  {
    static Logger.appUsage.getter(0LL);
    id v29 = a3;
    unint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = swift_slowAlloc(22LL, -1LL);
      uint64_t v33 = (void *)swift_slowAlloc(8LL, -1LL);
      id v44 = (void *)swift_slowAlloc(32LL, -1LL);
      int v49 = v44;
      *(_DWORD *)uint64_t v32 = 136446466;
      uint64_t v47 = v8;
      uint64_t v34 = _typeName(_:qualified:)(a4, 0LL);
      uint64_t v45 = 0LL;
      unint64_t v36 = v35;
      uint64_t v48 = sub_100088DB4(v34, v35, (uint64_t *)&v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v32 + 4, v32 + 12);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v32 + 12) = 2112;
      uint64_t v48 = (uint64_t)v29;
      id v37 = v29;
      uint64_t v46 = v9;
      id v38 = v37;
      unint64_t v16 = (void *)v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v32 + 14, v32 + 22);
      *uint64_t v33 = v29;

      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "[%{public}s/%@] Launch history metadata import failed",  (uint8_t *)v32,  0x16u);
      uint64_t v39 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v33, 1LL, v39);
      swift_slowDealloc(v33, -1LL, -1LL);
      uint64_t v40 = v44;
      swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v47);
      return v16 != 0LL;
    }

    uint64_t v41 = *(void (**)(char *, uint64_t))(v9 + 8);
    id v42 = v12;
LABEL_8:
    v41(v42, v8);
    return v16 != 0LL;
  }

  static Logger.appUsage.getter(v15);
  id v17 = a3;
  id v18 = (void *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled((os_log_t)v18, v19))
  {

    uint64_t v41 = *(void (**)(char *, uint64_t))(v9 + 8);
    id v42 = v14;
    goto LABEL_8;
  }

  uint64_t v20 = swift_slowAlloc(22LL, -1LL);
  id v44 = (void *)swift_slowAlloc(8LL, -1LL);
  uint64_t v45 = swift_slowAlloc(32LL, -1LL);
  int v49 = (void *)v45;
  *(_DWORD *)uint64_t v20 = 136446466;
  uint64_t v47 = v8;
  uint64_t v21 = _typeName(_:qualified:)(a4, 0LL);
  unint64_t v23 = v22;
  uint64_t v48 = sub_100088DB4(v21, v22, (uint64_t *)&v49);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v20 + 4, v20 + 12);
  swift_bridgeObjectRelease(v23);
  *(_WORD *)(v20 + 12) = 2112;
  uint64_t v48 = (uint64_t)v17;
  id v24 = v17;
  uint64_t v46 = v9;
  id v25 = v24;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v20 + 14, v20 + 22);
  int v26 = v44;
  *id v44 = v17;

  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v18,  v19,  "[%{public}s/%@] Launch history metadata imported",  (uint8_t *)v20,  0x16u);
  uint64_t v27 = sub_1000079A0((uint64_t *)&unk_100458F50);
  swift_arrayDestroy(v26, 1LL, v27);
  swift_slowDealloc(v26, -1LL, -1LL);
  uint64_t v28 = v45;
  swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v28, -1LL, -1LL);
  swift_slowDealloc(v20, -1LL, -1LL);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v14, v47);
  return v16 != 0LL;
}

void sub_1000331AC(void *a1, void *a2, int a3)
{
  int v239 = a3;
  uint64_t ObjectType = swift_getObjectType(v3, a2);
  uint64_t v6 = sub_1000079A0((uint64_t *)&unk_100459410);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v224 = (char *)&v212 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v223 = (char *)&v212 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  char v217 = (char *)&v212 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  id v225 = (char *)&v212 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v218 = (char *)&v212 - v16;
  __chkstk_darwin(v15);
  uint64_t v226 = (char *)&v212 - v17;
  uint64_t v18 = type metadata accessor for Date(0LL);
  os_log_type_t v19 = *(void **)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v241 = (char *)&v212 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for DateInterval(0LL, v21);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  int v26 = (char *)&v212 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v212 - v27;
  uint64_t v29 = type metadata accessor for Logger(0LL);
  uint64_t v232 = *(void *)(v29 - 8);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v242 = (uint64_t)&v212 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v30);
  unint64_t v233 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((char *)&v212 - v33);
  uint64_t v34 = __chkstk_darwin(v32);
  id v234 = (char *)&v212 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  id v38 = (char *)&v212 - v37;
  unint64_t v253 = (unint64_t)_swiftEmptyArrayStorage;
  static Logger.appUsage.getter(v36);
  unint64_t v244 = (unint64_t)v28;
  uint64_t v245 = v23;
  uint64_t v39 = *(void (**)(char *, void *, uint64_t))(v23 + 16);
  v39(v28, a2, v22);
  uint64_t v246 = (uint64_t)v26;
  id v248 = a2;
  v39(v26, a2, v22);
  id v243 = a1;
  v247 = v38;
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v243);
  os_log_type_t v41 = static os_log_type_t.default.getter();
  int v42 = v41;
  BOOL v43 = os_log_type_enabled(v40, v41);
  uint64_t v238 = v29;
  uint64_t v236 = v18;
  uint64_t v240 = v19;
  if (v43)
  {
    uint64_t v44 = swift_slowAlloc(42LL, -1LL);
    LODWORD(v235) = v42;
    uint64_t v45 = v44;
    uint64_t v46 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v229 = (uint64_t)v46;
    uint64_t v237 = (void *)swift_slowAlloc(96LL, -1LL);
    id v254 = v237;
    *(_DWORD *)uint64_t v45 = 136446978;
    os_log_t v231 = v40;
    uint64_t v47 = _typeName(_:qualified:)(ObjectType, 0LL);
    unint64_t v49 = v48;
    id v252 = (id)sub_100088DB4(v47, v48, (uint64_t *)&v254);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v45 + 4, v45 + 12);
    swift_bridgeObjectRelease(v49);
    *(_WORD *)(v45 + 12) = 2112;
    id v252 = v243;
    id v50 = v243;
    unint64_t v228 = &v253;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v45 + 14, v45 + 22);
    *uint64_t v46 = v243;

    *(_WORD *)(v45 + 22) = 2080;
    uint64_t v51 = v241;
    unint64_t v52 = v244;
    DateInterval.start.getter();
    unint64_t v53 = sub_100009AF0();
    uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v18, v53);
    unint64_t v56 = v55;
    id v57 = (void (*)(char *, uint64_t))v240[1];
    v57(v51, v236);
    id v252 = (id)sub_100088DB4(v54, v56, (uint64_t *)&v254);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v45 + 24, v45 + 32);
    swift_bridgeObjectRelease(v56);
    uint64_t v58 = *(uint64_t (**)(unint64_t, uint64_t))(v245 + 8);
    uint64_t v59 = v58(v52, v22);
    *(_WORD *)(v45 + 32) = 2080;
    uint64_t v60 = v246;
    DateInterval.end.getter(v59);
    uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter(v236, v53);
    unint64_t v63 = v62;
    v57(v51, v236);
    os_log_type_t v19 = v240;
    id v252 = (id)sub_100088DB4(v61, v63, (uint64_t *)&v254);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, v228, v45 + 34, v45 + 42);
    unint64_t v64 = v63;
    uint64_t v18 = v236;
    swift_bridgeObjectRelease(v64);
    v58(v60, v22);
    os_log_t v65 = v231;
    _os_log_impl( (void *)&_mh_execute_header,  v231,  (os_log_type_t)v235,  "[%{public}s/%@] Looking for source events from startDate: %s endDate: %s",  (uint8_t *)v45,  0x2Au);
    uint64_t v66 = sub_1000079A0((uint64_t *)&unk_100458F50);
    uint64_t v67 = v229;
    swift_arrayDestroy(v229, 1LL, v66);
    swift_slowDealloc(v67, -1LL, -1LL);
    id v68 = v237;
    swift_arrayDestroy(v237, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1LL, -1LL);
    swift_slowDealloc(v45, -1LL, -1LL);

    uint64_t v235 = *(void (**)(char *, uint64_t))(v232 + 8);
    v235(v247, v238);
  }

  else
  {
    id v69 = v243;

    uint64_t v70 = *(void (**)(unint64_t, uint64_t))(v245 + 8);
    v70(v244, v22);
    v70(v246, v22);

    uint64_t v235 = *(void (**)(char *, uint64_t))(v232 + 8);
    v235(v247, v238);
    uint64_t v51 = v241;
  }

  uint64_t v71 = objc_opt_self(&OBJC_CLASS___LaunchCoordinator);
  char v72 = sub_1002B824C(v71);
  id v252 = &_swiftEmptySetSingleton;
  DateInterval.start.getter();
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v74 = (os_log_s *)v19[1];
  uint64_t v75 = ((uint64_t (*)(char *, uint64_t))v74)(v51, v18);
  DateInterval.end.getter(v75);
  Class v76 = Date._bridgeToObjectiveC()().super.isa;
  os_log_t v231 = v74;
  ((void (*)(char *, uint64_t))v74)(v51, v18);
  id v254 = 0LL;
  id v77 = sub_1002B7554(v71, v72, isa, v76, 0LL, &v254);

  id v78 = v254;
  if (!v77)
  {
    char v186 = v78;
    uint64_t v187 = _convertNSErrorToError(_:)(v78);

    swift_willThrow(v188);
    uint64_t v189 = swift_bridgeObjectRelease(v252);
    uint64_t v190 = v242;
    static Logger.appUsage.getter(v189);
    id v191 = v243;
    swift_errorRetain(v187, v192);
    id v193 = v191;
    uint64_t v195 = swift_errorRetain(v187, v194);
    uint64_t v196 = (os_log_s *)Logger.logObject.getter(v195);
    os_log_type_t v197 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v196, v197))
    {
      uint64_t v198 = swift_slowAlloc(32LL, -1LL);
      char v199 = (void *)swift_slowAlloc(8LL, -1LL);
      id v248 = (id)swift_slowAlloc(64LL, -1LL);
      id v254 = v248;
      *(_DWORD *)uint64_t v198 = 136446722;
      uint64_t v200 = _typeName(_:qualified:)(ObjectType, 0LL);
      unint64_t v202 = v201;
      id v252 = (id)sub_100088DB4(v200, v201, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v198 + 4, v198 + 12);
      swift_bridgeObjectRelease(v202);
      *(_WORD *)(v198 + 12) = 2112;
      id v252 = v193;
      id v203 = v193;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v198 + 14, v198 + 22);
      *char v199 = v193;

      *(_WORD *)(v198 + 22) = 2082;
      swift_getErrorValue(v187, v251, v250);
      uint64_t v204 = Error.localizedDescription.getter(v250[1], v250[2]);
      unint64_t v206 = v205;
      id v252 = (id)sub_100088DB4(v204, v205, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v252, &v253, v198 + 24, v198 + 32);
      swift_bridgeObjectRelease(v206);
      swift_errorRelease(v187);
      swift_errorRelease(v187);
      _os_log_impl( (void *)&_mh_execute_header,  v196,  v197,  "[%{public}s/%@] Error accessing Biome launches: %{public}s",  (uint8_t *)v198,  0x20u);
      uint64_t v207 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v199, 1LL, v207);
      swift_slowDealloc(v199, -1LL, -1LL);
      id v208 = v248;
      swift_arrayDestroy(v248, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v208, -1LL, -1LL);
      swift_slowDealloc(v198, -1LL, -1LL);

      swift_errorRelease(v187);
      uint64_t v209 = v242;
    }

    else
    {
      swift_errorRelease(v187);

      swift_errorRelease(v187);
      swift_errorRelease(v187);

      uint64_t v209 = v190;
    }

    v235((char *)v209, v238);
    return;
  }

  uint64_t v79 = sub_10001517C(0LL, &qword_1004591D0, off_1003D9CA8);
  unint64_t v80 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v77, v79);

  uint64_t v246 = v80;
  if (v80 >> 62)
  {
LABEL_63:
    uint64_t v210 = v246;
    if (v246 < 0) {
      uint64_t v211 = v246;
    }
    else {
      uint64_t v211 = v246 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v246);
    uint64_t v82 = _CocoaArrayWrapper.endIndex.getter(v211);
    swift_bridgeObjectRelease(v210);
  }

  else
  {
    uint64_t v82 = *(void *)((v246 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v83 = v234;
  if (!v82)
  {
LABEL_57:
    swift_bridgeObjectRelease(v246);
    swift_bridgeObjectRelease(v252);
    return;
  }

  unint64_t v244 = v246 & 0xC000000000000001LL;
  id v215 = v250;
  uint64_t v84 = 4LL;
  *(void *)&__int128 v81 = 136447234LL;
  __int128 v214 = v81;
  uint64_t v213 = (char *)&type metadata for Any + 8;
  *(void *)&__int128 v81 = 136446722LL;
  __int128 v216 = v81;
  uint64_t v237 = (void *)v82;
  while (1)
  {
    if (v244) {
      id v85 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v84 - 4, v246);
    }
    else {
      id v85 = *(id *)(v246 + 8 * v84);
    }
    uint64_t v86 = v85;
    uint64_t v87 = v84 - 3;
    if (__OFADD__(v84 - 4, 1LL))
    {
      __break(1u);
      goto LABEL_63;
    }

    id v88 = (id)sub_1002B5910((uint64_t)v85);
    if (!v88)
    {

      goto LABEL_10;
    }

    uint64_t v89 = v88;
    v247 = (char *)(v84 - 3);
    id v248 = v86;
    uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v88);
    uint64_t v92 = v91;
    if ((v239 & 1) != 0)
    {
      uint64_t v93 = (uint64_t)v252;
      swift_bridgeObjectRetain(v252);
      char v94 = sub_1000565BC(v90, v92, v93);
      swift_bridgeObjectRelease(v93);
      if ((v94 & 1) != 0)
      {

        swift_bridgeObjectRelease(v92);
LABEL_27:
        uint64_t v82 = (uint64_t)v237;
        uint64_t v87 = (uint64_t)v247;
        goto LABEL_10;
      }
    }

    uint64_t v242 = v90;
    uint64_t v245 = v92;
    id v95 = v248;
    LODWORD(v9_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = sub_1002B5928((uint64_t)v248) - 4;
    if (v90 >= 3)
    {

      static Logger.appUsage.getter(v103);
      id v104 = v243;
      unint64_t v105 = v245;
      uint64_t v106 = swift_bridgeObjectRetain(v245);
      uint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
      os_log_type_t v108 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v107, v108))
      {
        uint64_t v109 = swift_slowAlloc(32LL, -1LL);
        char v110 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v111 = (void *)swift_slowAlloc(64LL, -1LL);
        id v254 = v111;
        *(_DWORD *)uint64_t v109 = v216;
        uint64_t v112 = _typeName(_:qualified:)(ObjectType, 0LL);
        unint64_t v114 = v113;
        *(void *)(v109 + 4) = sub_100088DB4(v112, v113, (uint64_t *)&v254);
        unint64_t v115 = v114;
        uint64_t v18 = v236;
        swift_bridgeObjectRelease(v115);
        *(_WORD *)(v109 + 12) = 2112;
        *(void *)(v109 + 14) = v104;
        *char v110 = v243;

        *(_WORD *)(v109 + 22) = 2080;
        swift_bridgeObjectRetain(v105);
        *(void *)(v109 + 24) = sub_100088DB4(v242, v105, (uint64_t *)&v254);
        swift_bridgeObjectRelease_n(v105, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v107,  v108,  "[%{public}s/%@] [%s) Unsupported source stream",  (uint8_t *)v109,  0x20u);
        uint64_t v116 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v110, 1LL, v116);
        swift_slowDealloc(v110, -1LL, -1LL);
        swift_arrayDestroy(v111, 2LL, (char *)&type metadata for Any + 8);
        uint64_t v117 = v111;
        uint64_t v83 = v234;
        swift_slowDealloc(v117, -1LL, -1LL);
        swift_slowDealloc(v109, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v105, 2LL);
      }

      uint64_t v235 = *(void (**)(char *, uint64_t))(v232 + 8);
      v235(v83, v238);
      os_log_type_t v19 = v240;
      goto LABEL_27;
    }

    id v96 = (id)sub_100245F88((uint64_t)v95);
    if (!v96)
    {
      uint64_t v101 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v19[7];
      uint64_t v100 = (uint64_t)v226;
      v101(v226, 1LL, 1LL, v18);
      goto LABEL_29;
    }

    uint64_t v97 = v96;
    objc_super v98 = v241;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v96);

    uint64_t v99 = (void (*)(char *, char *, uint64_t))v19[4];
    uint64_t v100 = (uint64_t)v226;
    v99(v226, v98, v18);
    uint64_t v101 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v19[7];
    v101((char *)v100, 0LL, 1LL, v18);
    id v102 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v19[6];
    if (v102(v100, 1LL, v18) == 1)
    {
      os_log_type_t v19 = v240;
      id v95 = v248;
LABEL_29:
      sub_100009AB0(v100);
      unint64_t v118 = 0xE200000000000000LL;
      uint64_t v229 = 16718LL;
      goto LABEL_33;
    }

    sub_100009AB0(v100);
    id v254 = 0LL;
    unint64_t v255 = 0xE000000000000000LL;
    id v119 = (id)sub_100245F88((uint64_t)v248);
    if (!v119) {
      goto LABEL_68;
    }
    char v120 = v119;
    unint64_t v121 = v241;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v119);

    uint64_t v122 = v218;
    v99(v218, v121, v18);
    v101(v122, 0LL, 1LL, v18);
    unint64_t v123 = sub_100009AF0();
    v124._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v18, v123);
    object = v124._object;
    String.append(_:)(v124);
    swift_bridgeObjectRelease(object);
    ((void (*)(char *, uint64_t))v231)(v122, v18);
    unint64_t v118 = v255;
    uint64_t v229 = (uint64_t)v254;
    os_log_type_t v19 = v240;
    id v95 = v248;
LABEL_33:
    id v126 = (id)sub_1002B591C((uint64_t)v95);
    if (!v126)
    {
      uint64_t v130 = (uint64_t)v225;
      v101(v225, 1LL, 1LL, v18);
      goto LABEL_39;
    }

    unint64_t v127 = v126;
    objc_super v128 = v241;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v126);

    char v129 = (void (*)(char *, char *, uint64_t))v19[4];
    uint64_t v130 = (uint64_t)v225;
    v129(v225, v128, v18);
    v101((char *)v130, 0LL, 1LL, v18);
    uint64_t v131 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v19[6];
    if (v131(v130, 1LL, v18) != 1) {
      break;
    }
LABEL_39:
    uint64_t v139 = sub_100009AB0(v130);
    unint64_t v141 = 0xE200000000000000LL;
    uint64_t v140 = 16718LL;
LABEL_40:
    unint64_t v228 = (unint64_t *)v140;
    uint64_t v142 = v245;
    uint64_t v101 = v233;
    static Logger.appUsage.getter(v139);
    id v143 = v243;
    swift_bridgeObjectRetain_n(v142, 2LL);
    id v144 = v143;
    swift_bridgeObjectRetain(v118);
    uint64_t v145 = swift_bridgeObjectRetain(v141);
    char v146 = (os_log_s *)Logger.logObject.getter(v145);
    os_log_type_t v147 = static os_log_type_t.default.getter();
    int v227 = v147;
    if (os_log_type_enabled(v146, v147))
    {
      uint64_t v148 = swift_slowAlloc(52LL, -1LL);
      int v222 = v90;
      uint64_t v90 = v148;
      uint64_t v219 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v221 = (void *)swift_slowAlloc(128LL, -1LL);
      id v254 = v221;
      *(_DWORD *)uint64_t v90 = v214;
      uint64_t v149 = _typeName(_:qualified:)(ObjectType, 0LL);
      unint64_t v151 = v150;
      uint64_t v249 = sub_100088DB4(v149, v150, (uint64_t *)&v254);
      os_log_t v220 = v146;
      unint64_t v152 = v118;
      unint64_t v153 = v142;
      uint64_t v154 = v215;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v215, v90 + 4, v90 + 12);
      swift_bridgeObjectRelease(v151);
      *(_WORD *)(v90 + 12) = 2112;
      uint64_t v249 = (uint64_t)v144;
      id v155 = v144;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v154, v90 + 14, v90 + 22);
      char v156 = v219;
      *uint64_t v219 = v243;

      *(_WORD *)(v90 + 22) = 2080;
      swift_bridgeObjectRetain(v153);
      uint64_t v249 = sub_100088DB4(v242, v153, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v154, v90 + 24, v90 + 32);
      swift_bridgeObjectRelease_n(v153, 3LL);
      *(_WORD *)(v90 + 32) = 2080;
      swift_bridgeObjectRetain(v152);
      uint64_t v249 = sub_100088DB4(v229, v152, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v154, v90 + 34, v90 + 42);
      swift_bridgeObjectRelease_n(v152, 3LL);
      *(_WORD *)(v90 + 42) = 2080;
      uint64_t v101 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v90 + 44);
      swift_bridgeObjectRetain(v141);
      uint64_t v249 = sub_100088DB4((uint64_t)v228, v141, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v249, v154, v90 + 44, v90 + 52);
      swift_bridgeObjectRelease_n(v141, 3LL);
      os_log_t v157 = v220;
      _os_log_impl( (void *)&_mh_execute_header,  v220,  (os_log_type_t)v227,  "[%{public}s/%@] [%s] Found app launch usage with startDate: %s endDate: %s",  (uint8_t *)v90,  0x34u);
      uint64_t v158 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v156, 1LL, v158);
      swift_slowDealloc(v156, -1LL, -1LL);
      uint64_t v159 = v221;
      swift_arrayDestroy(v221, 4LL, v213);
      swift_slowDealloc(v159, -1LL, -1LL);
      uint64_t v160 = v90;
      LOBYTE(v9_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v222;
      swift_slowDealloc(v160, -1LL, -1LL);

      uint64_t v161 = (char *)v233;
    }

    else
    {

      swift_bridgeObjectRelease_n(v141, 2LL);
      swift_bridgeObjectRelease_n(v118, 2LL);
      swift_bridgeObjectRelease_n(v142, 2LL);

      uint64_t v161 = (char *)v101;
    }

    v235(v161, v238);
    os_log_type_t v19 = v240;
    uint64_t v87 = (uint64_t)v247;
    id v162 = sub_1002CFA2C(objc_allocWithZone((Class)&OBJC_CLASS___LaunchEvent), (v90 + 5));
    uint64_t v18 = v236;
    uint64_t v163 = (uint64_t)v248;
    if (!v162)
    {

      __break(1u);
LABEL_68:
      v101(v218, 1LL, 1LL, v18);
LABEL_69:

      __break(1u);
    }

    char v164 = v162;
    sub_1002D0180(v162, (const char *)v89);

    char v165 = (char *)(id)sub_1002B5BCC(v163);
    sub_1002D0198(v164, v165);

    id v166 = (objc_class *)(id)sub_100245F88(v163);
    Class v167 = v166;
    if (v166)
    {
      char v168 = v241;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v166);

      char v169 = v223;
      ((void (*)(char *, char *, uint64_t))v19[4])(v223, v168, v18);
      id v170 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v19[7];
      v170(v169, 0LL, 1LL, v18);
      int v171 = ((uint64_t (*)(char *, uint64_t, uint64_t))v19[6])(v169, 1LL, v18);
      uint64_t v172 = v224;
      if (v171 == 1)
      {
        Class v167 = 0LL;
      }

      else
      {
        char v173 = v169;
        Class v167 = Date._bridgeToObjectiveC()().super.isa;
        id v174 = v173;
        os_log_type_t v19 = v240;
        ((void (*)(char *, uint64_t))v231)(v174, v18);
      }
    }

    else
    {
      id v170 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v19[7];
      v170(v223, 1LL, 1LL, v18);
      uint64_t v172 = v224;
    }

    sub_1002D01C8(v164, (const char *)v167);

    char v175 = (objc_class *)(id)sub_1002B591C((uint64_t)v248);
    Class v176 = v175;
    if (v175)
    {
      char v177 = v241;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v175);

      ((void (*)(char *, char *, uint64_t))v19[4])(v172, v177, v18);
      v170(v172, 0LL, 1LL, v18);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v19[6])(v172, 1LL, v18) == 1)
      {
        Class v176 = 0LL;
      }

      else
      {
        Class v176 = Date._bridgeToObjectiveC()().super.isa;
        ((void (*)(char *, uint64_t))v231)(v172, v18);
      }
    }

    else
    {
      v170(v172, 1LL, 1LL, v18);
    }

    id v178 = v248;
    sub_1002D01B0(v164, (const char *)v176);

    BOOL v179 = sub_1002B5BB8((BOOL)v178);
    sub_1002D01E0(v164, v179);
    id v180 = v164;
    char v181 = v178;
    id v182 = v180;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v180);
    unint64_t v184 = *(void *)((v253 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v183 = *(void *)((v253 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v184 >= v183 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v183 > 1, v184 + 1, 1LL);
    }
    uint64_t v185 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v184, v182);
    specialized Array._endMutation()(v185);
    sub_10006167C((uint64_t *)&v254, v242, v245);

    swift_bridgeObjectRelease(v255);
    uint64_t v83 = v234;
    uint64_t v82 = (uint64_t)v237;
LABEL_10:
    ++v84;
    if (v87 == v82) {
      goto LABEL_57;
    }
  }

  sub_100009AB0(v130);
  id v254 = 0LL;
  unint64_t v255 = 0xE000000000000000LL;
  id v132 = (id)sub_1002B591C((uint64_t)v248);
  if (v132)
  {
    uint64_t v133 = v132;
    uint64_t v134 = v241;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v132);

    unint64_t v135 = v217;
    v129(v217, v134, v18);
    v101(v135, 0LL, 1LL, v18);
    unint64_t v136 = sub_100009AF0();
    v137._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v18, v136);
    char v138 = v137._object;
    String.append(_:)(v137);
    swift_bridgeObjectRelease(v138);
    uint64_t v139 = ((uint64_t (*)(char *, uint64_t))v231)(v135, v18);
    uint64_t v140 = (uint64_t)v254;
    unint64_t v141 = v255;
    goto LABEL_40;
  }

  v101(v217, 1LL, 1LL, v18);
LABEL_71:

  __break(1u);
}

id sub_1000349C8(uint64_t a1)
{
  return sub_100034AC8(a1, type metadata accessor for LaunchHistory);
}

uint64_t type metadata accessor for LaunchHistory()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored13LaunchHistory);
}

id sub_100034AB8()
{
  return sub_100034AC8(0LL, (uint64_t (*)(void))type metadata accessor for LaunchSyncResult);
}

id sub_100034AC8(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t sub_100034B48()
{
  return type metadata accessor for LaunchSyncResult(0LL);
}

uint64_t type metadata accessor for LaunchSyncResult(uint64_t a1)
{
  uint64_t result = qword_1004591C0;
  if (!qword_1004591C0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LaunchSyncResult);
  }
  return result;
}

uint64_t sub_100034B8C(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for DateInterval(319LL, a2);
  if (v4 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[2] = "\b";
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v5, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100034C10(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = sub_10004A1C8(v2);
    *a1 = v2;
  }

  uint64_t v4 = *(void *)(v2 + 16);
  v7[0] = v2 + 32;
  v7[1] = v4;
  sub_100034C88(v7);
  return specialized ContiguousArray._endMutation()(v5);
}

void sub_100034C88(uint64_t *a1)
{
  unint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t v171 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v172 = (char *)&v150 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_1000079A0((uint64_t *)&unk_100459410);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v150 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  id v170 = (char *)&v150 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v159 = (char *)&v150 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v163 = (char *)&v150 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (unint64_t)&v150 - v16;
  __chkstk_darwin(v15);
  os_log_t v157 = (char *)&v150 - v18;
  Swift::Int v19 = a1[1];
  Swift::Int v20 = _minimumMergeRunLength(_:)(v19);
  if (v20 >= v19)
  {
    if (v19 < 0) {
      goto LABEL_146;
    }
    if (v19) {
      sub_1000358C8(0LL, (char *)v19, (char *)1, a1);
    }
    return;
  }

  if (v19 >= 0) {
    uint64_t v21 = v19;
  }
  else {
    uint64_t v21 = v19 + 1;
  }
  if (v19 < -1) {
    goto LABEL_166;
  }
  Swift::Int v154 = v20;
  uint64_t v165 = v1;
  id v166 = v8;
  Swift::Int v161 = v19;
  unint64_t v151 = a1;
  if (v19 < 2)
  {
    uint64_t v25 = (char *)_swiftEmptyArrayStorage;
    uint64_t v173 = (uint64_t)_swiftEmptyArrayStorage;
    char v164 = (void **)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 32);
    if (v19 != 1)
    {
      unint64_t v30 = _swiftEmptyArrayStorage[2];
LABEL_109:
      if (v30 >= 2)
      {
        uint64_t v145 = *v151;
        do
        {
          unint64_t v3 = v30 - 2;
          if (v30 < 2) {
            goto LABEL_141;
          }
          if (!v145) {
            goto LABEL_161;
          }
          char v138 = v25;
          unint64_t v17 = *(void *)&v25[16 * v3 + 32];
          Swift::Int v19 = *(void *)&v25[16 * v30 + 24];
          uint64_t v146 = v165;
          sub_100035BA8( (void **)(v145 + 8 * v17),  (id *)(v145 + 8LL * *(void *)&v25[16 * v30 + 16]),  (id *)(v145 + 8 * v19),  v164);
          uint64_t v165 = v146;
          if (v146) {
            goto LABEL_121;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v138) & 1) == 0) {
            char v138 = sub_100049744((uint64_t)v138);
          }
          if (v3 >= *((void *)v138 + 2)) {
            goto LABEL_143;
          }
          os_log_type_t v147 = &v138[16 * v3 + 32];
          *(void *)os_log_type_t v147 = v17;
          *((void *)v147 + 1) = v19;
          unint64_t v3 = *((void *)v138 + 2);
          if (v30 > v3) {
            goto LABEL_144;
          }
          unint64_t v17 = v3 - 1;
          memmove(&v138[16 * v30 + 16], &v138[16 * v30 + 32], 16 * (v3 - v30));
          uint64_t v25 = v138;
          *((void *)v138 + 2) = v3 - 1;
          unint64_t v30 = v3 - 1;
        }

        while (v3 > 2);
      }

      uint64_t v148 = v25;
LABEL_123:
      uint64_t v149 = swift_bridgeObjectRelease(v148);
      *(void *)((v173 & 0xFFFFFFFFFFFFF8LL) + 0x1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0LL;
      specialized Array._endMutation()(v149);
      swift_bridgeObjectRelease(v173);
      return;
    }
  }

  else
  {
    uint64_t v22 = v21 >> 1;
    uint64_t v23 = sub_10001517C(0LL, &qword_100459E10, off_1003D9DE8);
    uint64_t v24 = static Array._allocateBufferUninitialized(minimumCapacity:)(v22, v23);
    *(void *)((v24 & 0xFFFFFFFFFFFFFF8LL) + 0x1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v22;
    char v164 = (void **)((v24 & 0xFFFFFFFFFFFFFF8LL) + 32);
    uint64_t v173 = v24;
  }

  int64_t v26 = 0LL;
  uint64_t v27 = *a1;
  uint64_t v28 = *a1 + 16;
  uint64_t v152 = *a1 - 8;
  uint64_t v153 = v28;
  uint64_t v25 = (char *)_swiftEmptyArrayStorage;
  unint64_t v155 = v17;
  Swift::Int v29 = v161;
  uint64_t v168 = v27;
  while (1)
  {
    int64_t v31 = v26;
    Swift::Int v32 = v26 + 1;
    int64_t v160 = v26;
    if (v26 + 1 < v29)
    {
      char v156 = v25;
      uint64_t v33 = *(void **)(v27 + 8 * v26);
      id v34 = *(id *)(v27 + 8 * v32);
      id v35 = v33;
      id v36 = sub_1002CFD48(v34);
      if (!v36) {
        goto LABEL_162;
      }
      uint64_t v37 = v36;
      id v38 = v172;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

      uint64_t v39 = v171;
      uint64_t v40 = v157;
      Class v167 = *(void (**)(char *, char *, unint64_t))(v171 + 32);
      v167(v157, v38, v3);
      char v169 = *(void (**)(char *, void, uint64_t, unint64_t))(v39 + 56);
      v169(v40, 0LL, 1LL, v3);
      Swift::Int v19 = *(void *)(v39 + 48);
      id v41 = sub_1002CFD48(v35);
      if (!v41) {
        goto LABEL_164;
      }
      int v42 = v41;
      BOOL v43 = v172;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v41);

      v167((char *)v17, v43, v3);
      v169((char *)v17, 0LL, 1LL, v3);
      uint64_t v44 = v157;
      LODWORD(v162) = static Date.> infix(_:_:)(v157, v17);
      unint64_t v45 = v17;
      unint64_t v17 = *(void *)(v171 + 8);
      ((void (*)(unint64_t, unint64_t))v17)(v45, v3);
      ((void (*)(char *, unint64_t))v17)(v44, v3);

      int64_t v31 = v160;
      Swift::Int v32 = v160 + 2;
      if (v160 + 2 < v161)
      {
        uint64_t v46 = (id *)(v153 + 8 * v160);
        while (1)
        {
          Swift::Int v47 = v32;
          unint64_t v48 = *(v46 - 1);
          id v49 = *v46;
          id v50 = v48;
          id v51 = sub_1002CFD48(v49);
          if (!v51) {
            goto LABEL_156;
          }
          unint64_t v52 = v51;
          unint64_t v53 = v172;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

          uint64_t v54 = v163;
          v167(v163, v53, v3);
          v169(v54, 0LL, 1LL, v3);
          id v55 = sub_1002CFD48(v50);
          if (!v55) {
            goto LABEL_158;
          }
          unint64_t v56 = v55;
          id v57 = v172;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v55);

          uint64_t v58 = v159;
          v167(v159, v57, v3);
          v169(v58, 0LL, 1LL, v3);
          uint64_t v59 = v163;
          int v60 = static Date.> infix(_:_:)(v163, v58);
          uint64_t v61 = v58;
          int v62 = v60;
          ((void (*)(char *, unint64_t))v17)(v61, v3);
          ((void (*)(char *, unint64_t))v17)(v59, v3);

          Swift::Int v32 = v47 + 1;
          ++v46;
          if (v161 == v47 + 1)
          {
            Swift::Int v32 = v161;
            goto LABEL_30;
          }
        }

        Swift::Int v32 = v47;
LABEL_30:
        int64_t v31 = v160;
      }

      uint64_t v25 = v156;
      uint64_t v27 = v168;
      if ((v162 & 1) != 0)
      {
        if (v32 < v31) {
          goto LABEL_147;
        }
        if (v31 < v32)
        {
          unint64_t v63 = (uint64_t *)(v152 + 8 * v32);
          Swift::Int v64 = v32;
          int64_t v65 = v31;
          uint64_t v66 = (uint64_t *)(v168 + 8 * v31);
          do
          {
            if (v65 != --v64)
            {
              if (!v27) {
                goto LABEL_160;
              }
              uint64_t v67 = *v66;
              *uint64_t v66 = *v63;
              *unint64_t v63 = v67;
            }

            ++v65;
            --v63;
            ++v66;
          }

          while (v65 < v64);
        }
      }
    }

    if (v32 < v161)
    {
      if (__OFSUB__(v32, v31)) {
        goto LABEL_145;
      }
      if (v32 - v31 < v154) {
        break;
      }
    }

LABEL_60:
    if (v32 < v31) {
      goto LABEL_140;
    }
    uint64_t v93 = v25;
    if ((swift_isUniquelyReferenced_nonNull_native(v25) & 1) != 0) {
      uint64_t v25 = v93;
    }
    else {
      uint64_t v25 = sub_1000495A4(0LL, *((void *)v93 + 2) + 1LL, 1, v93);
    }
    unint64_t v95 = *((void *)v25 + 2);
    unint64_t v94 = *((void *)v25 + 3);
    unint64_t v30 = v95 + 1;
    uint64_t v27 = v168;
    Class v167 = (void (*)(char *, char *, unint64_t))v32;
    if (v95 >= v94 >> 1)
    {
      id v144 = sub_1000495A4((char *)(v94 > 1), v95 + 1, 1, v25);
      uint64_t v27 = v168;
      uint64_t v25 = v144;
    }

    *((void *)v25 + 2) = v30;
    id v96 = v25 + 32;
    uint64_t v97 = &v25[16 * v95 + 32];
    objc_super v98 = v167;
    *(void *)uint64_t v97 = v160;
    *((void *)v97 + 1) = v98;
    if (v95)
    {
      while (1)
      {
        unint64_t v17 = v30 - 1;
        if (v30 >= 4)
        {
          uint64_t v103 = &v96[16 * v30];
          uint64_t v104 = *((void *)v103 - 8);
          uint64_t v105 = *((void *)v103 - 7);
          BOOL v109 = __OFSUB__(v105, v104);
          uint64_t v106 = v105 - v104;
          if (v109) {
            goto LABEL_129;
          }
          uint64_t v108 = *((void *)v103 - 6);
          uint64_t v107 = *((void *)v103 - 5);
          BOOL v109 = __OFSUB__(v107, v108);
          uint64_t v101 = v107 - v108;
          char v102 = v109;
          if (v109) {
            goto LABEL_130;
          }
          unint64_t v110 = v30 - 2;
          uint64_t v111 = &v96[16 * v30 - 32];
          uint64_t v113 = *(void *)v111;
          uint64_t v112 = *((void *)v111 + 1);
          BOOL v109 = __OFSUB__(v112, v113);
          uint64_t v114 = v112 - v113;
          if (v109) {
            goto LABEL_132;
          }
          BOOL v109 = __OFADD__(v101, v114);
          uint64_t v115 = v101 + v114;
          if (v109) {
            goto LABEL_135;
          }
          if (v115 >= v106)
          {
            uint64_t v133 = &v96[16 * v17];
            uint64_t v135 = *(void *)v133;
            uint64_t v134 = *((void *)v133 + 1);
            BOOL v109 = __OFSUB__(v134, v135);
            uint64_t v136 = v134 - v135;
            if (v109) {
              goto LABEL_139;
            }
            BOOL v126 = v101 < v136;
            goto LABEL_97;
          }
        }

        else
        {
          if (v30 != 3)
          {
            uint64_t v127 = *((void *)v25 + 4);
            uint64_t v128 = *((void *)v25 + 5);
            BOOL v109 = __OFSUB__(v128, v127);
            uint64_t v120 = v128 - v127;
            char v121 = v109;
            goto LABEL_91;
          }

          uint64_t v100 = *((void *)v25 + 4);
          uint64_t v99 = *((void *)v25 + 5);
          BOOL v109 = __OFSUB__(v99, v100);
          uint64_t v101 = v99 - v100;
          char v102 = v109;
        }

        if ((v102 & 1) != 0) {
          goto LABEL_131;
        }
        unint64_t v110 = v30 - 2;
        uint64_t v116 = &v96[16 * v30 - 32];
        uint64_t v118 = *(void *)v116;
        uint64_t v117 = *((void *)v116 + 1);
        BOOL v119 = __OFSUB__(v117, v118);
        uint64_t v120 = v117 - v118;
        char v121 = v119;
        if (v119) {
          goto LABEL_134;
        }
        uint64_t v122 = &v96[16 * v17];
        uint64_t v124 = *(void *)v122;
        uint64_t v123 = *((void *)v122 + 1);
        BOOL v109 = __OFSUB__(v123, v124);
        uint64_t v125 = v123 - v124;
        if (v109) {
          goto LABEL_137;
        }
        if (__OFADD__(v120, v125)) {
          goto LABEL_138;
        }
        if (v120 + v125 >= v101)
        {
          BOOL v126 = v101 < v125;
LABEL_97:
          if (v126) {
            unint64_t v17 = v110;
          }
          goto LABEL_99;
        }

          static Logger.metrics.getter(v128);
          uint64_t v135 = v42;
          uint64_t v136 = (os_log_s *)Logger.logObject.getter(v135);
          unint64_t v137 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v136, v137))
          {
            char v138 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            uint64_t v139 = (void *)swift_slowAlloc(8LL, -1LL);
            *(_DWORD *)char v138 = 138412290;
            uint64_t v140 = sub_10021B614(v135);
            __int128 v214 = v140;
            uint64_t v24 = v203;
            int v42 = v202;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215, v138 + 4, v138 + 12);
            *uint64_t v139 = v140;
            Swift::Int v141 = v192;

            _os_log_impl( (void *)&_mh_execute_header,  v136,  v137,  "Failed to find an item ID for install: %@",  v138,  0xCu);
            uint64_t v142 = sub_1000079A0((uint64_t *)&unk_100458F50);
            swift_arrayDestroy(v139, 1LL, v142);
            unint64_t v143 = v139;
            BOOL v119 = v141;
            uint64_t v118 = (uint64_t)v193;
            swift_slowDealloc(v143, -1LL, -1LL);
            id v144 = v138;
            unint64_t v110 = (uint64_t)v200;
            swift_slowDealloc(v144, -1LL, -1LL);
          }

          else
          {

            uint64_t v136 = (os_log_s *)v135;
          }

          (*(void (**)(char *, uint64_t))(v190 + 8))(v126, v191);
          uint64_t v117 = 0LL;
          uint64_t v122 = _swiftEmptyArrayStorage;
LABEL_64:
          *(void *)&v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_adamIDs] = v122;
          uint64_t v145 = [v42 valueForProperty:@"timestamp"];
          if (v145)
          {
            uint64_t v146 = v145;
            _bridgeAnyObjectToAny(_:)(&v212, v145);
            swift_unknownObjectRelease(v146);
          }

          else
          {
            uint64_t v212 = 0u;
            uint64_t v213 = 0u;
          }

          os_log_type_t v147 = v201;
          sub_1000151F8((uint64_t)&v212, (uint64_t)&v214);
          if (v216)
          {
            uint64_t v148 = swift_dynamicCast(v110, &v214, (char *)&type metadata for Any + 8, v120, 6LL);
            uint64_t v149 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v147[7];
            v149(v110, v148 ^ 1u, 1LL, v120);
            uint64_t v150 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v147[6];
            if (v150(v110, 1LL, v120) != 1)
            {
              id v208 = (void (*)(char *, uint64_t, uint64_t))v147[4];
              v208(v198, v110, v120);
              unint64_t v151 = [v42 valueForProperty:@"install_finished_timestamp"];
              if (v151)
              {
                uint64_t v152 = v151;
                _bridgeAnyObjectToAny(_:)(&v212, v151);
                swift_unknownObjectRelease(v152);
              }

              else
              {
                uint64_t v212 = 0u;
                uint64_t v213 = 0u;
              }

              sub_1000151F8((uint64_t)&v212, (uint64_t)&v214);
              if (v216)
              {
                id v166 = swift_dynamicCast(v118, &v214, (char *)&type metadata for Any + 8, v120, 6LL);
                v149(v118, v166 ^ 1u, 1LL, v120);
                Class v167 = v150(v118, 1LL, v120);
                if ((_DWORD)v167 != 1)
                {
                  swift_bridgeObjectRelease(v117);
                  goto LABEL_85;
                }
              }

              else
              {
                sub_100015240((uint64_t)&v214, (uint64_t *)&unk_1004594B0);
                Class v167 = v149(v118, 1LL, 1LL, v120);
              }

              uint64_t v168 = v196;
              static Logger.metrics.getter(v167);
              char v169 = v42;
              id v170 = (os_log_s *)Logger.logObject.getter(v169);
              uint64_t v171 = static os_log_type_t.fault.getter();
              if (os_log_type_enabled(v170, v171))
              {
                uint64_t v172 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
                uint64_t v173 = (void *)swift_slowAlloc(8LL, -1LL);
                *(_DWORD *)uint64_t v172 = 138412290;
                id v174 = sub_10021B614(v169);
                __int128 v214 = v174;
                int v42 = v202;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215, v172 + 4, v172 + 12);
                *uint64_t v173 = v174;
                BOOL v119 = v192;
                uint64_t v118 = (uint64_t)v193;

                swift_bridgeObjectRelease(v117);
                _os_log_impl( (void *)&_mh_execute_header,  v170,  v171,  "Failed to find install finished timestamp for install: %@",  v172,  0xCu);
                char v175 = sub_1000079A0((uint64_t *)&unk_100458F50);
                swift_arrayDestroy(v173, 1LL, v175);
                swift_slowDealloc(v173, -1LL, -1LL);
                Class v176 = v172;
                uint64_t v120 = v189;
                swift_slowDealloc(v176, -1LL, -1LL);

                (*(void (**)(char *, uint64_t))(v190 + 8))(v196, v191);
              }

              else
              {

                (*(void (**)(char *, uint64_t))(v190 + 8))(v168, v191);
                swift_bridgeObjectRelease(v117);
              }

              uint64_t v24 = v203;
LABEL_85:
              char v177 = v195;
              sub_100036C9C(v118, v195);
              id v178 = v150(v177, 1LL, v120);
              BOOL v179 = v194;
              if ((_DWORD)v178 == 1)
              {
                Date.init()(v178);
                sub_100015240(v177, (uint64_t *)&unk_100459410);
              }

              else
              {
                v208(v194, v177, v120);
              }

              id v180 = v198;
              char v181 = Date.timeIntervalSince(_:)(v198);

              if (v181 * 1000.0 < 0.0) {
                id v182 = 0.0;
              }
              else {
                id v182 = v181 * 1000.0;
              }
              unint64_t v183 = (void (*)(char *, uint64_t))v201[1];
              v183(v179, v120);
              uint64_t result = (id)((uint64_t (*)(char *, uint64_t))v183)(v180, v120);
              if ((~*(void *)&v182 & 0x7FF0000000000000LL) != 0)
              {
                if (v182 > -1.0)
                {
                  if (v182 < 1.84467441e19)
                  {
                    unint64_t v184 = &v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_installDuration];
                    *(void *)unint64_t v184 = (unint64_t)v182;
                    v184[8] = 0;

                    sub_100015240(v118, (uint64_t *)&unk_100459410);
LABEL_95:
                    uint64_t v185 = (objc_class *)type metadata accessor for AppInstallationEvent();
                    v211.receiver = v24;
                    v211.super_class = v185;
                    Swift::Int v47 = objc_msgSendSuper2(&v211, "init");

                    return v47;
                  }

                  goto LABEL_102;
                }
              }

              else
              {
                __break(1u);
              }

              __break(1u);
LABEL_102:
              __break(1u);
              goto LABEL_103;
            }
          }

          else
          {
            sub_100015240((uint64_t)&v214, (uint64_t *)&unk_1004594B0);
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v147[7])(v110, 1LL, 1LL, v120);
          }

          uint64_t v153 = (os_log_s *)v119;
          swift_bridgeObjectRelease(v117);
          Swift::Int v154 = sub_100015240(v110, (uint64_t *)&unk_100459410);
          unint64_t v155 = v199;
          static Logger.metrics.getter(v154);
          char v156 = v42;
          os_log_t v157 = (os_log_s *)Logger.logObject.getter(v156);
          Swift::Int v158 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v157, v158))
          {
            uint64_t v159 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            int64_t v160 = (void *)swift_slowAlloc(8LL, -1LL);
            *(_DWORD *)uint64_t v159 = 138412290;
            Swift::Int v161 = v153;
            uint64_t v162 = sub_10021B614(v156);
            __int128 v214 = v162;
            uint64_t v24 = v203;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215, v159 + 4, v159 + 12);
            *int64_t v160 = v162;

            _os_log_impl( (void *)&_mh_execute_header,  v157,  v158,  "Failed to find install start timestamp for install: %@",  v159,  0xCu);
            uint64_t v163 = sub_1000079A0((uint64_t *)&unk_100458F50);
            swift_arrayDestroy(v160, 1LL, v163);
            char v164 = v160;
            int v42 = v202;
            swift_slowDealloc(v164, -1LL, -1LL);
            swift_slowDealloc(v159, -1LL, -1LL);
            char v156 = v161;
          }

          else
          {

            os_log_t v157 = v153;
          }

          (*(void (**)(char *, uint64_t))(v190 + 8))(v155, v191);
          uint64_t v165 = &v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_installDuration];
          *(void *)uint64_t v165 = 0LL;
          v165[8] = 1;

          goto LABEL_95;
        }
      }
    }

    id v82 = 0LL;
  }

  uint64_t v92 = sub_1001E25D0(v42, (uint64_t)@"account_id");
  if (v92)
  {
    uint64_t v93 = v92;
    uint64_t result = [(id)objc_opt_self(ACAccountStore) defaultStore];
    if (!result)
    {
LABEL_103:
      __break(1u);
      goto LABEL_104;
    }

    unint64_t v94 = result;
    unint64_t v95 = [v93 stringValue];
    if (!v95)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v97 = v96;
      unint64_t v95 = String._bridgeToObjectiveC()();
      objc_super v98 = v97;
      int v42 = v202;
      swift_bridgeObjectRelease(v98);
    }

    uint64_t v99 = [v94 accountWithIdentifier:v95];

    if (v99)
    {
      uint64_t v100 = v99;
      uint64_t v101 = v100;
      uint64_t v24 = v203;
LABEL_42:
      uint64_t v103 = objc_msgSend(v100, "ams_storefront");
      if (v103)
      {
        uint64_t v104 = v103;
        uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
        uint64_t v107 = v106;

        uint64_t v108 = sub_10004D730(v105, v107);
        if (v108)
        {
          BOOL v109 = v108;
          id v82 = [v108 unsignedLongLongValue];

          unint64_t v84 = 0;
        }

        else
        {
          unint64_t v84 = 1;
        }

        int v42 = v202;
        uint64_t v24 = v203;
      }

      else
      {
        unint64_t v84 = 1;
      }

      goto LABEL_49;
    }
  }

  uint64_t result = [(id)objc_opt_self(ACAccountStore) defaultStore];
  uint64_t v24 = v203;
  if (result)
  {
    char v102 = result;
    uint64_t v100 = objc_msgSend(result, "ams_activeiTunesAccount");

    if (!v100)
    {
      unint64_t v84 = 1;
      goto LABEL_50;
    }

    uint64_t v101 = 0LL;
    goto LABEL_42;
  }

      return;
    }

    uint64_t v67 = v99;
    *(void *)uint64_t v118 = 0LL;
    Swift::Int v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v59,  100LL,  0LL,  v118));
    uint64_t v69 = (os_log_s *)*(id *)v118;
    if (v69)
    {
      uint64_t v70 = ASDLogHandleForCategory(14LL);
      uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        uint64_t v73 = (void *)objc_opt_class(v100, v72);
        *(_DWORD *)buf = 138543874;
        uint64_t v122 = v73;
        uint64_t v123 = 2112;
        uint64_t v124 = v67;
        uint64_t v125 = 2114;
        BOOL v126 = v69;
        id v74 = v73;
        _os_log_error_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%@] Unable to write apps usage due serialization: %{public}@",  buf,  0x20u);
      }

    unint64_t v80 = *(void **)&self->super._success;
    __int128 v81 = (IXAppInstallCoordinator *)*(id *)&self->_suppressEvaluatorDialogs;
    id v82 = v80;
    objc_opt_self(&OBJC_CLASS___AppInstallImportResult);
    uint64_t v70 = objc_alloc_init(&OBJC_CLASS___AppInstallImportResult);
    v70->_status = 1LL;
    uint64_t v83 = v70->_coordinator;
    v70->_coordinator = v81;
    unint64_t v84 = v81;

LABEL_63:
    char v89 = v70->_externalID;
    v70->_externalID = v82;

LABEL_64:
    _Block_object_dispose(buf, 8);
    goto LABEL_65;
  }

  id v85 = sub_10025ECA8( (uint64_t)&OBJC_CLASS___AppInstallImportResult,  0LL,  *(void **)&self->super._success,  (void *)v98[5]);
  uint64_t v70 = (AppInstallImportResult *)objc_claimAutoreleasedReturnValue(v85);
LABEL_65:
  _Block_object_dispose(&v97, 8);

LABEL_66:
  policyBlock = self->_policyBlock;
  self->_policyBlock = v70;

  uint64_t v92 = self->_policyBlock;
  if (v92 && v92[4] == 2LL) {
    -[Task completeWithError:](self, "completeWithError:", objc_getProperty(v92, v91, 16LL, 1));
  }
  else {
    -[Task completeWithSuccess](self, "completeWithSuccess");
  }
}

        v91[2](v91, &__NSDictionary0__struct);
        break;
      case 617LL:
        unint64_t v84 = ASDLogHandleForCategory(14LL);
        id v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "Testing sbsync if subscribed",  (uint8_t *)&buf,  2u);
        }

        uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
        uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v86, "ams_activeiTunesAccount"));

        id v88 = sub_1002A4FE0((uint64_t)&OBJC_CLASS___OcelotManager);
        char v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
        v96[0] = _NSConcreteStackBlock;
        v96[1] = 3221225472LL;
        v96[2] = sub_1002769D4;
        v96[3] = &unk_1003EAEC8;
        uint64_t v97 = v91;
        sub_1002A7B8C((uint64_t)v89, v87, v96);

        break;
      default:
        if (a3 != 600) {
          goto LABEL_53;
        }
        v112[0] = @"restore";
        int64_t v65 = sub_10020FAD4((uint64_t)&OBJC_CLASS___RestoreManager);
        uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
        uint64_t v67 = sub_100212648((uint64_t)v66);
        Swift::Int v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
        v112[1] = @"installs";
        v113[0] = v68;
        uint64_t v69 = sub_10023B9CC((uint64_t)&OBJC_CLASS___AppInstallScheduler);
        uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
        uint64_t v71 = sub_10023C5CC(v70);
        char v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
        v113[1] = v72;
        uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v113,  v112,  2LL));
        v91[2](v91, v73);

        break;
    }
  }

LABEL_91:
        if ((v121 & 1) != 0) {
          goto LABEL_133;
        }
        char v129 = &v96[16 * v17];
        uint64_t v131 = *(void *)v129;
        uint64_t v130 = *((void *)v129 + 1);
        BOOL v109 = __OFSUB__(v130, v131);
        uint64_t v132 = v130 - v131;
        if (v109) {
          goto LABEL_136;
        }
        if (v132 < v120) {
          goto LABEL_14;
        }
LABEL_99:
        unint64_t v137 = v17 - 1;
        if (v17 - 1 >= v30)
        {
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }

        if (!v27) {
          goto LABEL_155;
        }
        char v138 = v25;
        uint64_t v139 = (Swift::Int *)&v96[16 * v137];
        Swift::Int v19 = *v139;
        uint64_t v140 = &v96[16 * v17];
        Swift::Int v141 = *((void *)v140 + 1);
        uint64_t v142 = v165;
        sub_100035BA8((void **)(v27 + 8 * *v139), (id *)(v27 + 8LL * *(void *)v140), (id *)(v27 + 8 * v141), v164);
        uint64_t v165 = v142;
        if (v142)
        {
LABEL_121:
          uint64_t v148 = v138;
          goto LABEL_123;
        }

        if (v141 < v19) {
          goto LABEL_126;
        }
        if (v17 > *((void *)v138 + 2)) {
          goto LABEL_127;
        }
        *uint64_t v139 = v19;
        *(void *)&v96[16 * v137 + 8] = v141;
        unint64_t v143 = *((void *)v138 + 2);
        if (v17 >= v143) {
          goto LABEL_128;
        }
        unint64_t v30 = v143 - 1;
        memmove(&v96[16 * v17], v140 + 16, 16 * (v143 - 1 - v17));
        uint64_t v25 = v138;
        *((void *)v138 + 2) = v143 - 1;
        uint64_t v27 = v168;
        if (v143 <= 2) {
          goto LABEL_14;
        }
      }
    }

    unint64_t v30 = 1LL;
LABEL_14:
    Swift::Int v29 = v161;
    int64_t v26 = (int64_t)v167;
    unint64_t v17 = v155;
  }

  if (__OFADD__(v31, v154)) {
    goto LABEL_148;
  }
  Swift::Int v68 = v161;
  if (v31 + v154 < v161) {
    Swift::Int v68 = v31 + v154;
  }
  if (v68 >= v31)
  {
    if (v32 != v68)
    {
      char v156 = v25;
      uint64_t v69 = v152 + 8 * v32;
      Swift::Int v158 = v68;
      do
      {
        uint64_t v71 = *(void **)(v27 + 8 * v32);
        unint64_t v17 = v31;
        uint64_t v162 = v69;
        Class v167 = (void (*)(char *, char *, unint64_t))v32;
        while (1)
        {
          char v72 = *(void **)v69;
          uint64_t v73 = v71;
          id v74 = v72;
          char v169 = v73;
          id v75 = sub_1002CFD48(v73);
          if (!v75) {
            goto LABEL_152;
          }
          Class v76 = v75;
          id v77 = v172;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v75);

          uint64_t v79 = v170;
          uint64_t v78 = v171;
          unint64_t v80 = *(void (**)(char *, char *, unint64_t))(v171 + 32);
          v80(v170, v77, v3);
          Swift::Int v19 = *(void *)(v78 + 56);
          ((void (*)(char *, void, uint64_t, unint64_t))v19)(v79, 0LL, 1LL, v3);
          __int128 v81 = *(unsigned int (**)(char *, uint64_t, unint64_t))(v78 + 48);
          if (v81(v79, 1LL, v3) == 1) {
            goto LABEL_153;
          }
          id v82 = sub_1002CFD48(v74);
          if (!v82) {
            goto LABEL_150;
          }
          uint64_t v83 = v82;
          unint64_t v84 = v3;
          id v85 = v172;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v82);

          uint64_t v86 = v166;
          uint64_t v87 = v85;
          unint64_t v3 = v84;
          v80(v166, v87, v84);
          ((void (*)(char *, void, uint64_t, unint64_t))v19)(v86, 0LL, 1LL, v84);
          if (v81(v86, 1LL, v84) == 1) {
            goto LABEL_151;
          }
          id v88 = v170;
          char v89 = static Date.> infix(_:_:)(v170, v86);
          uint64_t v90 = v86;
          char v91 = v89;
          Swift::Int v19 = *(void *)(v171 + 8);
          ((void (*)(char *, unint64_t))v19)(v90, v3);
          ((void (*)(char *, unint64_t))v19)(v88, v3);

          if ((v91 & 1) == 0) {
            break;
          }
          uint64_t v70 = (char *)v167;
          uint64_t v27 = v168;
          if (!v168) {
            goto LABEL_154;
          }
          uint64_t v92 = *(void **)v69;
          uint64_t v71 = *(void **)(v69 + 8);
          *(void *)uint64_t v69 = v71;
          *(void *)(v69 + 8) = v92;
          v69 -= 8LL;
        }

        uint64_t v70 = (char *)v167;
        uint64_t v27 = v168;
LABEL_49:
        Swift::Int v32 = (Swift::Int)(v70 + 1);
        uint64_t v69 = v162 + 8;
        int64_t v31 = v160;
      }

      while (v32 != v158);
      Swift::Int v32 = v158;
      uint64_t v25 = v156;
    }

    goto LABEL_60;
  }

      uint64_t v79 = __OFADD__(v51++, 1LL);
      if (v79) {
        goto LABEL_137;
      }
LABEL_92:
      uint64_t v58 = v40[2];
    }

    while (v51 != v58);
  }

  unint64_t v137 = self->_presenter;
  self->_presenter = 0LL;
}

LABEL_149:
  __break(1u);
LABEL_150:
  ((void (*)(char *, uint64_t, uint64_t, unint64_t))v19)(v166, 1LL, 1LL, v3);
LABEL_151:
  __break(1u);
LABEL_152:
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v171 + 56))(v170, 1LL, 1LL, v3);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  v169(v163, 1LL, 1LL, v3);
LABEL_157:
  __break(1u);
LABEL_158:
  v169(v159, 1LL, 1LL, v3);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v171 + 56))(v157, 1LL, 1LL, v3);
LABEL_163:
  __break(1u);
LABEL_164:
  v169((char *)v17, 1LL, 1LL, v3);
LABEL_165:
  __break(1u);
LABEL_166:
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
}

      __break(1u);
      goto LABEL_150;
    }

void sub_1000358C8(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  uint64_t v35 = a1;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void **)(v7 - 8);
  __chkstk_darwin(v7);
  int v42 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1000079A0((uint64_t *)&unk_100459410);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  id v41 = (char *)&v33 - v14;
  id v34 = a2;
  if (a3 != a2)
  {
    uint64_t v37 = *a4;
    uint64_t v15 = v37 + 8LL * (void)a3 - 8;
LABEL_5:
    uint64_t v16 = *(void **)(v37 + 8LL * (void)a3);
    id v38 = a3;
    uint64_t v39 = v35;
    uint64_t v36 = v15;
    while (1)
    {
      unint64_t v17 = *(void **)v15;
      uint64_t v18 = v16;
      id v43 = v17;
      id v19 = sub_1002CFD48(v18);
      if (!v19) {
        break;
      }
      Swift::Int v20 = v19;
      id v40 = v18;
      uint64_t v18 = v13;
      uint64_t v21 = v42;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v19);

      uint64_t v22 = (void (*)(char *, char *, uint64_t))v8[4];
      uint64_t v23 = v41;
      v22(v41, v21, v7);
      a3 = (char *)v8[7];
      ((void (*)(char *, void, uint64_t, uint64_t))a3)(v23, 0LL, 1LL, v7);
      uint64_t v24 = v8;
      uint64_t v25 = (unsigned int (*)(char *, uint64_t, uint64_t))v8[6];
      if (v25(v23, 1LL, v7) == 1) {
        goto LABEL_15;
      }
      id v26 = sub_1002CFD48(v43);
      if (!v26) {
        goto LABEL_16;
      }
      uint64_t v27 = v26;
      uint64_t v28 = v42;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

      v22(v18, v28, v7);
      uint64_t v13 = v18;
      ((void (*)(char *, void, uint64_t, uint64_t))a3)(v18, 0LL, 1LL, v7);
      if (v25(v18, 1LL, v7) == 1) {
        goto LABEL_17;
      }
      Swift::Int v29 = v41;
      char v30 = static Date.> infix(_:_:)(v41, v18);
      uint64_t v8 = v24;
      int64_t v31 = (void (*)(char *, uint64_t))v24[1];
      v31(v18, v7);
      v31(v29, v7);

      a3 = v38;
      if ((v30 & 1) != 0)
      {
        if (!v37) {
          goto LABEL_18;
        }
        Swift::Int v32 = *(void **)v15;
        uint64_t v16 = *(void **)(v15 + 8);
        *(void *)uint64_t v15 = v16;
        *(void *)(v15 + 8) = v32;
        v15 -= 8LL;
      }

      ++a3;
      uint64_t v15 = v36 + 8;
      if (a3 == v34) {
        return;
      }
      goto LABEL_5;
    }

    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v8[7])(v41, 1LL, 1LL, v7);
LABEL_15:
    __break(1u);
LABEL_16:
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))a3)(v18, 1LL, 1LL, v7);
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
  }

uint64_t sub_100035BA8(void **a1, id *a2, id *a3, void **a4)
{
  uint64_t v86 = type metadata accessor for Date(0LL);
  uint64_t v88 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v87 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_1000079A0((uint64_t *)&unk_100459410);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  id v82 = (void **)((char *)&v77 - v14);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v80 = (char *)&v77 - v16;
  __chkstk_darwin(v15);
  uint64_t v83 = (char *)&v77 - v17;
  uint64_t v18 = (char *)a2 - (char *)a1;
  uint64_t v19 = (char *)a2 - (char *)a1 + 7;
  uint64_t v20 = v19 >> 3;
  __int128 v81 = a3;
  uint64_t v21 = (char *)a3 - (char *)a2;
  uint64_t v22 = v21 / 8;
  char v91 = a1;
  uint64_t v90 = a4;
  if (v19 >> 3 >= v21 / 8)
  {
    if (v21 >= -7)
    {
      if (a4 != a2 || &a2[v22] <= a4) {
        memmove(a4, a2, 8 * v22);
      }
      Swift::Int v47 = &a4[v22];
      char v89 = v47;
      char v91 = a2;
      if (v21 >= 8 && a1 < a2)
      {
        unint64_t v48 = v81 - 1;
        id v49 = a2;
        unint64_t v84 = a1;
        id v85 = a4;
        uint64_t v78 = v12;
        while (1)
        {
          unint64_t v80 = (char *)v47;
          __int128 v81 = a2;
          id v50 = v47 - 1;
          unint64_t v52 = *(v49 - 1);
          id v51 = v49 - 1;
          id v53 = *(v47 - 1);
          uint64_t v83 = v52;
          id v54 = sub_1002CFD48(v53);
          if (!v54) {
            goto LABEL_54;
          }
          id v55 = v54;
          uint64_t v79 = v51;
          unint64_t v56 = v87;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v54);

          uint64_t v57 = v88;
          uint64_t v58 = *(void (**)(void **, char *, uint64_t))(v88 + 32);
          uint64_t v59 = v82;
          int v60 = v56;
          uint64_t v61 = v86;
          v58(v82, v60, v86);
          uint64_t v12 = *(char **)(v57 + 56);
          ((void (*)(void **, void, uint64_t, uint64_t))v12)(v59, 0LL, 1LL, v61);
          int v62 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v57 + 48);
          if (v62(v59, 1LL, v61) == 1) {
            goto LABEL_55;
          }
          id v63 = sub_1002CFD48(v83);
          if (!v63) {
            goto LABEL_56;
          }
          Swift::Int v64 = v63;
          int64_t v65 = v53;
          uint64_t v66 = v87;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v63);

          uint64_t v67 = v78;
          Swift::Int v68 = v66;
          uint64_t v69 = v86;
          v58((void **)v78, v68, v86);
          ((void (*)(char *, void, uint64_t, uint64_t))v12)(v67, 0LL, 1LL, v69);
          uint64_t v12 = v67;
          uint64_t v70 = (char *)(v48 + 1);
          uint64_t v71 = v82;
          char v72 = static Date.> infix(_:_:)(v82, v67);
          uint64_t v73 = *(void (**)(char *, uint64_t))(v88 + 8);
          v73(v12, v69);
          v73((char *)v71, v69);

          id v74 = v84;
          if ((v72 & 1) != 0)
          {
            Swift::Int v47 = (void **)v80;
            id v49 = v79;
            char v91 = v49;
          }

          else
          {
            char v89 = v50;
            id v75 = v81;
            if (v70 < v80 || v48 >= (id *)v80 || v70 != v80) {
              id *v48 = *v50;
            }
            id v49 = v75;
            Swift::Int v47 = v50;
          }

          if (v47 > v85)
          {
            --v48;
            a2 = v49;
            if (v49 > v74) {
              continue;
            }
          }

          break;
        }
      }

LABEL_49:
      sub_10004969C((void **)&v91, (const void **)&v90, &v89);
      return 1LL;
    }
  }

  else if (v18 >= -7)
  {
    if (a4 != a1 || &a1[v20] <= a4) {
      memmove(a4, a1, 8 * v20);
    }
    id v82 = &a4[v20];
    char v89 = v82;
    if (v18 >= 8 && a2 < v81)
    {
      uint64_t v23 = v86;
      while (1)
      {
        unint64_t v84 = a1;
        id v85 = a4;
        uint64_t v24 = *a4;
        id v25 = *a2;
        uint64_t v12 = v24;
        id v26 = sub_1002CFD48(v25);
        if (!v26) {
          break;
        }
        uint64_t v27 = v26;
        uint64_t v28 = v87;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

        uint64_t v29 = v88;
        char v30 = *(void (**)(char *, char *, uint64_t))(v88 + 32);
        int64_t v31 = v83;
        v30(v83, v28, v23);
        uint64_t v22 = *(void *)(v29 + 56);
        ((void (*)(char *, void, uint64_t, uint64_t))v22)(v31, 0LL, 1LL, v23);
        Swift::Int v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
        if (v32(v31, 1LL, v23) == 1) {
          goto LABEL_51;
        }
        uint64_t v33 = a2;
        id v34 = sub_1002CFD48(v12);
        if (!v34) {
          goto LABEL_52;
        }
        uint64_t v35 = v34;
        uint64_t v36 = v87;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

        uint64_t v37 = v80;
        v30(v80, v36, v23);
        ((void (*)(char *, void, uint64_t, uint64_t))v22)(v37, 0LL, 1LL, v23);
        if (v32(v37, 1LL, v23) == 1) {
          goto LABEL_53;
        }
        id v38 = v83;
        char v39 = static Date.> infix(_:_:)(v83, v37);
        id v40 = v37;
        char v41 = v39;
        int v42 = *(void (**)(char *, uint64_t))(v88 + 8);
        v42(v40, v23);
        v42(v38, v23);

        id v43 = v33;
        if ((v41 & 1) != 0)
        {
          uint64_t v44 = v33 + 1;
          unint64_t v45 = v84;
          a4 = v85;
          if (v84 < v43 || v84 >= v44 || v84 != v43) {
            *unint64_t v84 = *v43;
          }
        }

        else
        {
          unint64_t v45 = v84;
          uint64_t v46 = v85;
          if (v84 != v85) {
            *unint64_t v84 = *v85;
          }
          a4 = v46 + 1;
          uint64_t v90 = a4;
          uint64_t v44 = v43;
        }

        a1 = v45 + 1;
        char v91 = a1;
        if (a4 < v82)
        {
          a2 = v44;
          if (v44 < v81) {
            continue;
          }
        }

        goto LABEL_49;
      }

      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v88 + 56))(v83, 1LL, 1LL, v86);
LABEL_51:
      __break(1u);
LABEL_52:
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v22)(v80, 1LL, 1LL, v23);
LABEL_53:
      __break(1u);
LABEL_54:
      (*(void (**)(void **, uint64_t, uint64_t, uint64_t))(v88 + 56))(v82, 1LL, 1LL, v86);
LABEL_55:
      __break(1u);
LABEL_56:
      ((void (*)(char *, uint64_t, uint64_t, uint64_t))v12)(v78, 1LL, 1LL, v86);
LABEL_57:
      __break(1u);
      goto LABEL_58;
    }

    goto LABEL_49;
  }

              sub_1002F96A0((uint64_t)&OBJC_CLASS___AppDefaultsManager, !v23);
              goto LABEL_50;
            }

            goto LABEL_50;
          }
        }

        else
        {

          uint64_t v22 = 0LL;
          id v25 = 0;
          if (v23) {
            goto LABEL_33;
          }
        }

        if (v22) {
          unint64_t v45 = v21;
        }
        else {
          unint64_t v45 = 1;
        }
        if ((v45 & 1) == 0)
        {
          uint64_t v46 = ASDLogHandleForCategory(3LL);
          uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
          if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            id v54 = v10;
            _os_log_error_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_ERROR,  "%@ Failed to opt-out, will attempt again next time.",  buf,  0xCu);
          }

          goto LABEL_49;
        }
}

LABEL_58:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

      if (v84 == (id)++v87)
      {
        char v89 = -[os_log_s countByEnumeratingWithState:objects:count:]( v82,  "countByEnumeratingWithState:objects:count:",  &v203,  buf,  16LL);
        unint64_t v84 = v89;
        if (!v89)
        {
          uint64_t v7 = v189;
          id v40 = v190;
          goto LABEL_76;
        }

        continue;
      }

      goto LABEL_53;
    }

    break;
  }

  if (v77 <= v88[2] || v81 >= v88[3]) {
    goto LABEL_58;
  }
  Property = objc_getProperty(v88, v83, 8LL, 1);
LABEL_71:
  id v96 = Property;
  uint64_t v97 = sub_1001A4800(v96);
  unint64_t v84 = (id)objc_claimAutoreleasedReturnValue(v97);

  uint64_t v7 = v189;
  id v40 = v190;
  if (v189 && v189[4])
  {
    objc_super v98 = ASDLogHandleForCategory(3LL);
    uint64_t v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v100 = (id)v189[9];
      uint64_t v101 = sub_1002CFD24(v71);
      char v102 = (void *)objc_claimAutoreleasedReturnValue(v101);
      *(_DWORD *)uint64_t v210 = 138412802;
      uint64_t v211 = v100;
      uint64_t v212 = 2114;
      uint64_t v213 = v84;
      __int128 v214 = 2114;
      id v215 = v102;
      _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEFAULT,  "[%@] Found app launch accountID: %{public}@ for event with bundleID: %{public}@",  v210,  0x20u);

      id v40 = v190;
      uint64_t v7 = v189;
    }
  }

  if (v7) {
    id v51 = v7[17];
  }
  else {
    id v51 = 0LL;
  }
  unint64_t v52 = v51;

  if (!v52)
  {
    id v53 = (void *)objc_claimAutoreleasedReturnValue( +[KatanaSubscriptionCoordinator shared]( &OBJC_CLASS____TtC9appstored29KatanaSubscriptionCoordinator,  "shared"));
    if (v7)
    {
      id v54 = v7[16];
      id v55 = v7[9];
    }

    else
    {
      id v54 = 0LL;
      id v55 = 0LL;
    }

    unint64_t v56 = v55;
    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue( [v53 subscriptionInfoDictionaryWithAccount:v54 onlyReturnForPreviouslySubscribedAccount:0 logKey:v56]);
    if (v7) {
      objc_setProperty_nonatomic_copy(v7, v57, v58, 136LL);
    }
  }

  if (v7)
  {
    uint64_t v59 = v7[4];
    if (v59 == (id)3)
    {
      uint64_t v83 = v7[12];
      unint64_t v84 = (void *)objc_claimAutoreleasedReturnValue(+[AMSMetrics serverTimeFromDate:](&OBJC_CLASS___AMSMetrics, "serverTimeFromDate:", v83));

      uint64_t v139 = v84;
      sub_1002FB2C8(v142, v84);
      id v85 = v7 + 3;
      uint64_t v86 = v7[3];

      if (!v86)
      {
        uint64_t v87 = sub_1002ABF34((uint64_t)self, v7);
        uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
        objc_setProperty_nonatomic_copy(v7, v89, v88, 24LL);
      }

      uint64_t v140 = v7;
      uint64_t v149 = 0u;
      uint64_t v150 = 0u;
      os_log_type_t v147 = 0u;
      uint64_t v148 = 0u;
      uint64_t v90 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
      char v91 = (void *)objc_claimAutoreleasedReturnValue(v90);
      objc_opt_self(&OBJC_CLASS___OcelotManager);
      uint64_t v92 = sub_100256C3C(v91, @"allowed-anonymous-arcade-keys", &__NSArray0__struct);
      uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(v92);

      unint64_t v94 = [v93 countByEnumeratingWithState:&v147 objects:v158 count:16];
      if (v94)
      {
        unint64_t v95 = v94;
        id v96 = *(void *)v148;
        uint64_t v97 = v7 + 17;
        do
        {
          for (unint64_t i = 0LL; i != v95; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v148 != v96) {
              objc_enumerationMutation(v93);
            }
            uint64_t v99 = *(void *)(*((void *)&v147 + 1) + 8LL * (void)i);
            uint64_t v100 = *v85;
            if (v100)
            {
              uint64_t v101 = v100;
              char v102 = *v85;
              uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v102, "objectForKeyedSubscript:", v99, v139));

              uint64_t v104 = v85;
              if (v103) {
                goto LABEL_94;
              }
            }

            uint64_t v105 = *v97;
            uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue([v105 objectForKeyedSubscript:v99]);

            uint64_t v104 = v97;
            if (v106)
            {
LABEL_94:
              uint64_t v107 = *v104;
              uint64_t v108 = (void *)objc_claimAutoreleasedReturnValue([v107 objectForKeyedSubscript:v99]);
              [v142 setProperty:v108 forBodyKey:v99];
            }
          }

          unint64_t v95 = [v93 countByEnumeratingWithState:&v147 objects:v158 count:16];
        }

        while (v95);
      }
    }

    else
    {
      if (v59 != (id)7)
      {
        if (v59 == (id)4)
        {
          sub_1002FB8C0(v142, (uint64_t)v7[10]);
          [v142 removePropertiesForKeys:&off_10040DF30];
          int v60 = v7 + 14;
          uint64_t v61 = v7[14];

          if (!v61)
          {
            int v62 = sub_1002ABF34((uint64_t)self, v7);
            id v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
            objc_setProperty_nonatomic_copy(v7, v64, v63, 112LL);
          }

          int64_t v65 = *v60;

          if (v65)
          {
            uint64_t v66 = v7;
            uint64_t v67 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
            Swift::Int v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
            objc_opt_self(&OBJC_CLASS___OcelotManager);
            uint64_t v69 = sub_100256C3C(v68, @"allowed-payout-arcade-keys", &__NSArray0__struct);
            uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(v69);

            uint64_t v153 = 0u;
            Swift::Int v154 = 0u;
            unint64_t v151 = 0u;
            uint64_t v152 = 0u;
            uint64_t v71 = [v70 countByEnumeratingWithState:&v151 objects:v159 count:16];
            if (v71)
            {
              char v72 = v71;
              uint64_t v73 = *(void *)v152;
              do
              {
                for (j = 0LL; j != v72; j = (char *)j + 1)
                {
                  if (*(void *)v152 != v73) {
                    objc_enumerationMutation(v70);
                  }
                  id v75 = *(void *)(*((void *)&v151 + 1) + 8LL * (void)j);
                  Class v76 = *v60;
                  uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v76 objectForKeyedSubscript:v75]);

                  uint64_t v78 = v60;
                  if (!v77)
                  {
                    uint64_t v79 = v66[17];
                    unint64_t v80 = (void *)objc_claimAutoreleasedReturnValue([v79 objectForKeyedSubscript:v75]);

                    uint64_t v78 = v66 + 17;
                    if (!v80) {
                      continue;
                    }
                  }

                  __int128 v81 = *v78;
                  id v82 = (void *)objc_claimAutoreleasedReturnValue([v81 objectForKeyedSubscript:v75]);
                  [v142 setProperty:v82 forBodyKey:v75];
                }

                char v72 = [v70 countByEnumeratingWithState:&v151 objects:v159 count:16];
              }

              while (v72);
            }

            uint64_t v7 = v66;
          }
        }

        goto LABEL_113;
      }

      BOOL v109 = v7 + 3;
      unint64_t v110 = v7[3];

      if (!v110)
      {
        uint64_t v111 = sub_1002ABF34((uint64_t)self, v7);
        uint64_t v112 = (void *)objc_claimAutoreleasedReturnValue(v111);
        objc_setProperty_nonatomic_copy(v7, v113, v112, 24LL);
      }

      uint64_t v140 = v7;
      uint64_t v145 = 0u;
      uint64_t v146 = 0u;
      unint64_t v143 = 0u;
      id v144 = 0u;
      uint64_t v114 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
      uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue(v114);
      objc_opt_self(&OBJC_CLASS___OcelotManager);
      uint64_t v116 = sub_1002568AC(v115, @"allowed-anonymous-arcade-account-keys", &off_10040DF60, 0);
      uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue(v116);

      uint64_t v118 = [v117 countByEnumeratingWithState:&v143 objects:v157 count:16];
      if (v118)
      {
        BOOL v119 = v118;
        uint64_t v120 = *(void *)v144;
        char v121 = v7 + 17;
        do
        {
          for (k = 0LL; k != v119; k = (char *)k + 1)
          {
            if (*(void *)v144 != v120) {
              objc_enumerationMutation(v117);
            }
            uint64_t v123 = *(void *)(*((void *)&v143 + 1) + 8LL * (void)k);
            uint64_t v124 = *v109;
            if (v124)
            {
              uint64_t v125 = v124;
              BOOL v126 = *v109;
              uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue([v126 objectForKeyedSubscript:v123]);

              uint64_t v128 = v109;
              if (v127) {
                goto LABEL_108;
              }
            }

            char v129 = *v121;
            uint64_t v130 = (void *)objc_claimAutoreleasedReturnValue([v129 objectForKeyedSubscript:v123]);

            uint64_t v128 = v121;
            if (v130)
            {
LABEL_108:
              uint64_t v131 = *v128;
              uint64_t v132 = (void *)objc_claimAutoreleasedReturnValue([v131 objectForKeyedSubscript:v123]);
              [v142 setProperty:v132 forBodyKey:v123];
            }
          }

          BOOL v119 = [v117 countByEnumeratingWithState:&v143 objects:v157 count:16];
        }

        while (v119);
      }

      [v142 removePropertiesForKeys:&off_10040DF48];
    }

    uint64_t v7 = v140;
  }

uint64_t sub_100036228()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100036238()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

BOOL sub_10003626C(void *a1)
{
  return sub_1000326C8( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void **)(v1 + 32),  *(uint64_t **)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_10003627C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10003628C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003629C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000362A4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

BOOL sub_1000362D0(void *a1)
{
  return sub_100032D0C(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1000362DC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000362EC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100036310(void *a1)
{
  return sub_1000304CC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100036318()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100036328()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100036354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003090C( a1,  a2,  a3,  a4,  *(void **)(v4 + 16),  *(void *)(v4 + 24),  *(void *)(v4 + 32),  *(void *)(v4 + 40));
}

uint64_t sub_100036360()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100036370(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DateInterval(0LL, a2);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = &_swiftEmptyArrayStorage;
  uint64_t v7 = objc_opt_self(&OBJC_CLASS___AppUsageDatabaseStore);
  id v8 = sub_1002B61EC(v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  unint64_t v11 = (v5 + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = swift_allocObject(&unk_1003DDA50, v11 + 8, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v12 + v10, v6, v3);
  *(void *)(v12 + v11) = &v21;
  uint64_t v13 = swift_allocObject(&unk_1003DDA78, 32LL, 7LL);
  *(void *)(v13 + 16) = sub_100036550;
  *(void *)(v13 + 24) = v12;
  aBlock[4] = sub_1000152F8;
  uint64_t v20 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000CF5C;
  aBlock[3] = &unk_1003DDA90;
  uint64_t v14 = _Block_copy(aBlock);
  uint64_t v15 = v20;
  swift_retain(v13);
  swift_release(v15);
  [v8 readUsingSession:v14];

  _Block_release(v14);
  LOBYTE(v8) = swift_isEscapingClosureAtFileLocation(v13, "", 98LL, 51LL, 60LL, 1LL);
  uint64_t result = swift_release(v13);
  if ((v8 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = v21;
    swift_release(v12);
    return (uint64_t)v17;
  }

  return result;
}

id sub_100036550(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for DateInterval(0LL, a2) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  return sub_100030C4C(a1, v2 + v5, *(void *)(v2 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1000365A0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000365B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DateInterval(0LL, a2);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 16) & ~v5;
  uint64_t v7 = v5 | 7;
  unint64_t v8 = ((*(void *)(v4 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2 + v6, v3);
  return swift_deallocObject(v2, v8, v7);
}

void sub_100036620(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for DateInterval(0LL, a2) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  sub_100030EDC(a1, a2, a3, v3 + v8, *(void **)(v3 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100036688()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000366C4()
{
  uint64_t v0 = sub_1000079A0((uint64_t *)&unk_100459410);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = __chkstk_darwin(v1);
  uint64_t v6 = (char *)&v30 - v5;
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v30 - v8;
  XPCDictionary.init()(v7);
  if ((unsigned __int128)(XPC_ACTIVITY_INTERVAL_1_DAY * (__int128)30LL) >> 64 == (30 * XPC_ACTIVITY_INTERVAL_1_DAY) >> 63)
  {
    if (qword_100458018 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_100458018, sub_1000194F8);
LABEL_3:
  __int128 v10 = xmmword_100458B00;
  int64_t v30 = 30 * XPC_ACTIVITY_INTERVAL_1_DAY;
  char v31 = 0;
  unint64_t v11 = sub_100036C10();
  swift_bridgeObjectRetain(*((void *)&v10 + 1));
  XPCDictionary.subscript.setter(&v30, v10, *((void *)&v10 + 1), &type metadata for Int64, v11);
  uint64_t v12 = qword_100458B10;
  uint64_t v13 = unk_100458B18;
  swift_bridgeObjectRetain(unk_100458B18);
  XPCDictionary.subscript.setter(1LL, v12, v13);
  uint64_t v14 = qword_100458B30;
  uint64_t v15 = unk_100458B38;
  int64_t v30 = XPC_ACTIVITY_INTERVAL_8_HOURS;
  char v31 = 0;
  swift_bridgeObjectRetain(unk_100458B38);
  XPCDictionary.subscript.setter(&v30, v14, v15, &type metadata for Int64, v11);
  uint64_t v16 = qword_100458B50;
  uint64_t v17 = unk_100458B58;
  swift_bridgeObjectRetain(unk_100458B58);
  XPCDictionary.subscript.setter(1LL, v16, v17);
  uint64_t v18 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
  CFPropertyListRef v19 = (id)sub_1002F8E48(v18);
  if (v19)
  {
    uint64_t v20 = (void *)v19;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v19);

    uint64_t v21 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v6, 0LL, 1LL, v21);
  }

  else
  {
    uint64_t v21 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v6, 1LL, 1LL, v21);
  }

  sub_100036C54((uint64_t)v6, (uint64_t)v9);
  sub_100036C9C((uint64_t)v9, (uint64_t)v3);
  type metadata accessor for Date(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v3, 1LL, v21) == 1)
  {
    sub_100009AB0((uint64_t)v3);
    double v23 = 0.0;
LABEL_11:
    __int128 v25 = xmmword_100458B20;
    int64_t v30 = (uint64_t)v23 & ~((uint64_t)v23 >> 63);
    char v31 = 0;
    swift_bridgeObjectRetain(*((void *)&xmmword_100458B20 + 1));
    XPCDictionary.subscript.setter(&v30, v25, *((void *)&v25 + 1), &type metadata for Int64, v11);
    uint64_t v26 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_UTILITY);
    uint64_t v28 = v27;
    __int128 v29 = xmmword_100458B40;
    swift_bridgeObjectRetain(*((void *)&xmmword_100458B40 + 1));
    XPCDictionary.subscript.setter(v26, v28, v29, *((void *)&v29 + 1));
    return sub_100009AB0((uint64_t)v9);
  }

  double v23 = Date.timeIntervalSinceNow.getter();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v3, v21);
  if ((~*(void *)&v23 & 0x7FF0000000000000LL) != 0)
  {
    if (v23 <= -9.22337204e18)
    {
      __break(1u);
    }

    else if (v23 < 9.22337204e18)
    {
      goto LABEL_11;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

const char *sub_100036AA4()
{
  return "com.apple.appstored.activities.AdPlatformsStatusConditions";
}

uint64_t sub_100036BC8()
{
  return swift_bridgeObjectRelease(*(void *)(v0
                                             + OBJC_IVAR____TtC9appstored35AdPlatformsStatusConditionsActivity_descriptiveName
                                             + 8));
}

uint64_t type metadata accessor for AdPlatformsStatusConditionsActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored35AdPlatformsStatusConditionsActivity);
}

unint64_t sub_100036C10()
{
  unint64_t result = qword_100459230;
  if (!qword_100459230)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int64, &type metadata for Int64);
    atomic_store(result, (unint64_t *)&qword_100459230);
  }

  return result;
}

uint64_t sub_100036C54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0((uint64_t *)&unk_100459410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100036C9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0((uint64_t *)&unk_100459410);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100036CE4(uint64_t a1)
{
  if (qword_100458018 != -1) {
    swift_once(&qword_100458018, sub_1000194F8);
  }
  uint64_t v1 = qword_100458B10;
  uint64_t v2 = unk_100458B18;
  swift_bridgeObjectRetain(unk_100458B18);
  XPCDictionary.subscript.setter(1LL, v1, v2);
  uint64_t v3 = qword_100458B30;
  uint64_t v4 = unk_100458B38;
  int64_t v12 = XPC_ACTIVITY_INTERVAL_1_HOUR;
  char v13 = 0;
  unint64_t v5 = sub_100036C10();
  swift_bridgeObjectRetain(v4);
  XPCDictionary.subscript.setter(&v12, v3, v4, &type metadata for Int64, v5);
  uint64_t v6 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_UTILITY);
  uint64_t v8 = v7;
  __int128 v9 = xmmword_100458B40;
  swift_bridgeObjectRetain(*((void *)&xmmword_100458B40 + 1));
  XPCDictionary.subscript.setter(v6, v8, v9, *((void *)&v9 + 1));
  __int128 v10 = xmmword_100458B00;
  int64_t v12 = 46800LL;
  char v13 = 0;
  swift_bridgeObjectRetain(*((void *)&xmmword_100458B00 + 1));
  return XPCDictionary.subscript.setter(&v12, v10, *((void *)&v10 + 1), &type metadata for Int64, v5);
}

const char *sub_100036E84()
{
  return "com.apple.appstored.CacheDeleteUpdate";
}

uint64_t sub_100036F80()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC9appstored19CacheDeleteActivity_descriptiveName + 8));
}

uint64_t type metadata accessor for CacheDeleteActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored19CacheDeleteActivity);
}

char *sub_100037198(void *a1, void *a2)
{
  uint64_t v5 = sub_1000079A0((uint64_t *)&unk_10045AC20);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t ObjectType = swift_getObjectType(v2, v8);
  id v11 = sub_1001E4BD4(a1, v10);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v11);

  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v7, 0LL, 1LL, v12);
  id v14 = sub_1001E4BE8(a1, v13);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v18 = v17;
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v18 = 0LL;
  }

  CFPropertyListRef v19 = sub_100037828(0LL, a2, (uint64_t)v7, v16, v18, 0LL, 1);

  swift_deallocPartialClassInstance(v2, ObjectType, 56LL, 7LL);
  return v19;
}

char *sub_100037310(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType(v3, a2);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"log_code");
  uint64_t v8 = v7;
  if (*(void *)(a1 + 16) && (unint64_t v9 = sub_100023F7C(v6, v7), (v10 & 1) != 0)) {
    sub_100016B10(*(void *)(a1 + 56) + 32 * v9, (uint64_t)v31);
  }
  else {
    memset(v31, 0, sizeof(v31));
  }
  swift_bridgeObjectRelease(v8);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"external_id");
  uint64_t v13 = v12;
  if (*(void *)(a1 + 16) && (unint64_t v14 = sub_100023F7C(v11, v12), (v15 & 1) != 0)) {
    sub_100016B10(*(void *)(a1 + 56) + 32 * v14, (uint64_t)v30);
  }
  else {
    memset(v30, 0, sizeof(v30));
  }
  swift_bridgeObjectRelease(v13);
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"bundle_id");
  uint64_t v18 = v17;
  if (*(void *)(a1 + 16) && (unint64_t v19 = sub_100023F7C(v16, v17), (v20 & 1) != 0)) {
    sub_100016B10(*(void *)(a1 + 56) + 32 * v19, (uint64_t)v29);
  }
  else {
    memset(v29, 0, sizeof(v29));
  }
  swift_bridgeObjectRelease(v18);
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"item_id");
  uint64_t v23 = v22;
  if (*(void *)(a1 + 16) && (unint64_t v24 = sub_100023F7C(v21, v22), (v25 & 1) != 0)) {
    sub_100016B10(*(void *)(a1 + 56) + 32 * v24, (uint64_t)v28);
  }
  else {
    memset(v28, 0, sizeof(v28));
  }
  swift_bridgeObjectRelease(v23);
  swift_bridgeObjectRelease(a1);
  uint64_t v26 = sub_100037D08((uint64_t)v31, (uint64_t)v30, (uint64_t)v29, (uint64_t)v28);
  swift_deallocPartialClassInstance(v3, ObjectType, 56LL, 7LL);
  return v26;
}

char *sub_100037574( void *a1, uint64_t (*a2)(void *), uint64_t (*a3)(void *), uint64_t (*a4)(void *))
{
  uint64_t v9 = sub_1000079A0((uint64_t *)&unk_10045AC20);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v33 - v13;
  uint64_t ObjectType = swift_getObjectType(v4, v15);
  id v17 = [a1 valueForProperty:@"log_code"];
  if (v17)
  {
    id v18 = v17;
    _bridgeAnyObjectToAny(_:)(v39, v17);
    swift_unknownObjectRelease(v18);
  }

  else
  {
    memset(v39, 0, sizeof(v39));
  }

  id v19 = (id)a2(a1);
  if (v19)
  {
    char v20 = v19;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v19);

    uint64_t v21 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v12, 0LL, 1LL, v21);
  }

  else
  {
    uint64_t v21 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v12, 1LL, 1LL, v21);
  }

  sub_100038048((uint64_t)v12, (uint64_t)v14);
  type metadata accessor for UUID(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v14, 1LL, v21) == 1)
  {
    sub_100015240((uint64_t)v14, (uint64_t *)&unk_10045AC20);
    __int128 v37 = 0u;
    __int128 v38 = 0u;
  }

  else
  {
    *((void *)&v38 + 1) = v21;
    uint64_t v23 = sub_100038090(&v37);
    (*(void (**)(void *, char *, uint64_t))(v22 + 32))(v23, v14, v21);
  }

  id v24 = (id)a3(a1);
  if (v24)
  {
    char v25 = v24;
    uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    uint64_t v28 = v27;

    *((void *)&v36 + 1) = &type metadata for String;
    *(void *)&__int128 v35 = v26;
    *((void *)&v35 + 1) = v28;
  }

  else
  {
    __int128 v35 = 0u;
    __int128 v36 = 0u;
  }

  id v29 = (id)a4(a1);
  if (v29)
  {
    id v30 = v29;
    *((void *)&v34 + 1) = sub_1000056A8();
    *(void *)&__int128 v33 = v30;
  }

  else
  {
    __int128 v33 = 0u;
    __int128 v34 = 0u;
  }

  char v31 = sub_100037D08((uint64_t)v39, (uint64_t)&v37, (uint64_t)&v35, (uint64_t)&v33);

  swift_deallocPartialClassInstance(v4, ObjectType, 56LL, 7LL);
  return v31;
}

char *sub_100037828(char *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v66 = a3;
  uint64_t v13 = sub_1000079A0((uint64_t *)&unk_10045AC20);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v59 = (char *)&v58 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v58 - v20;
  if (a1)
  {
    unint64_t v22 = *(void *)&a1[OBJC_IVAR____TtC9appstored6LogKey_value + 8];
    uint64_t v61 = *(void *)&a1[OBJC_IVAR____TtC9appstored6LogKey_value];
    unint64_t v62 = v22;
    swift_bridgeObjectRetain(v22);
    Swift::Int v64 = a2;
    if (a2)
    {
LABEL_3:
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
      unint64_t v63 = v23;
      goto LABEL_6;
    }
  }

  else
  {
    uint64_t v61 = 0LL;
    unint64_t v62 = 0xE000000000000000LL;
    Swift::Int v64 = a2;
    if (a2) {
      goto LABEL_3;
    }
  }

  unint64_t v63 = 0xE300000000000000LL;
  uint64_t v60 = 4144959LL;
LABEL_6:
  int64_t v65 = a1;
  uint64_t v24 = sub_1000079A0(&qword_100459278);
  uint64_t inited = swift_initStackObject(v24, v68);
  uint64_t v26 = (void *)inited;
  *(_OWORD *)(inited + 16) = xmmword_100373A90;
  *(void *)(inited + 32) = a4;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = a5;
  if ((a7 & 1) == 0)
  {
    uint64_t v67 = a6;
    unint64_t v27 = sub_100038110();
    uint64_t v28 = BinaryInteger.description.getter(&type metadata for UInt64, v27);
    uint64_t v30 = v29;
    a4 = v26[4];
    a5 = v26[5];
    v26[6] = v28;
    v26[7] = v29;
    if (a5) {
      goto LABEL_8;
    }
LABEL_13:
    char v31 = _swiftEmptyArrayStorage;
    if (!v30) {
      goto LABEL_19;
    }
    goto LABEL_14;
  }

  uint64_t v28 = 0LL;
  uint64_t v30 = 0LL;
  *(void *)(inited + 48) = 0LL;
  *(void *)(inited + 56) = 0LL;
  if (!a5) {
    goto LABEL_13;
  }
LABEL_8:
  swift_bridgeObjectRetain(a5);
  char v31 = sub_100088568(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v33 = v31[2];
  unint64_t v32 = v31[3];
  if (v33 >= v32 >> 1) {
    char v31 = sub_100088568((void *)(v32 > 1), v33 + 1, 1, v31);
  }
  _OWORD v31[2] = v33 + 1;
  __int128 v34 = &v31[2 * v33];
  v34[4] = a4;
  v34[5] = a5;
  uint64_t v28 = v26[6];
  uint64_t v30 = v26[7];
  if (v30)
  {
LABEL_14:
    swift_bridgeObjectRetain(v30);
    if ((swift_isUniquelyReferenced_nonNull_native(v31) & 1) == 0) {
      char v31 = sub_100088568(0LL, v31[2] + 1LL, 1, v31);
    }
    unint64_t v36 = v31[2];
    unint64_t v35 = v31[3];
    if (v36 >= v35 >> 1) {
      char v31 = sub_100088568((void *)(v35 > 1), v36 + 1, 1, v31);
    }
    _OWORD v31[2] = v36 + 1;
    __int128 v37 = &v31[2 * v36];
    v37[4] = v28;
    v37[5] = v30;
  }

LABEL_19:
  swift_bridgeObjectRelease(v26);
  uint64_t v38 = v66;
  sub_100026D40(v66, (uint64_t)v15, (uint64_t *)&unk_10045AC20);
  uint64_t v39 = v17;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v15, v16);
    uint64_t v46 = *(uint64_t (**)(char *, char *, uint64_t))(v17 + 16);
    Swift::Int v47 = v59;
    uint64_t v48 = v46(v59, v21, v16);
    LODWORD(v67) = bswap32(UUID.uuid.getter(v48));
    unint64_t v49 = sub_1000380CC();
    uint64_t v50 = String.init<A>(_:radix:uppercase:)(&v67, 16LL, 1LL, &type metadata for UInt32, v49);
    uint64_t v58 = v39;
    unint64_t v52 = v51;
    objc_allocWithZone((Class)type metadata accessor for LogKey());
    unint64_t v53 = v62;
    swift_bridgeObjectRetain(v62);
    unint64_t v54 = v63;
    swift_bridgeObjectRetain(v63);
    swift_bridgeObjectRetain(v31);
    id v55 = sub_100091AD0(v61, v53, "][", 2LL, 2u, v60, v54, v50, v52, (uint64_t)v31, 0LL);
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v31);
    id v43 = v55;

    unint64_t v56 = *(void (**)(char *, uint64_t))(v58 + 8);
    v56(v47, v16);
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v31);
    v56(v21, v16);
    unint64_t v45 = v64;
    uint64_t v44 = v65;
    if (v65) {
      goto LABEL_21;
    }
LABEL_23:
    uint64_t v44 = v45;
    goto LABEL_24;
  }

  sub_100015240((uint64_t)v15, (uint64_t *)&unk_10045AC20);
  id v40 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  unint64_t v41 = v62;
  unint64_t v42 = v63;
  id v43 = sub_100091AD0(v61, v62, "][", 2LL, 2u, v60, v63, 0x3F3F3F3F3F3F3F3FLL, 0xE800000000000000LL, (uint64_t)v31, 0LL);
  swift_bridgeObjectRelease(v41);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v31);
  unint64_t v45 = v64;
  uint64_t v44 = v65;
  if (!v65) {
    goto LABEL_23;
  }
LABEL_21:

LABEL_24:
  sub_100015240(v38, (uint64_t *)&unk_10045AC20);
  return v43;
}

        return (unint64_t)v41;
      }
    }

    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  }

  uint64_t v29 = sub_10001DA2C((uint64_t)_swiftEmptyArrayStorage);

  return v29;
}

  swift_bridgeObjectRetain(v1);
  uint64_t v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v1);
  swift_bridgeObjectRelease(v1);
LABEL_23:
  uint64_t v19 = sub_1001E26D0(v18, (uint64_t)@"log_code");

  if (v19)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    uint64_t v21 = v20;

    unint64_t v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
  }

  else
  {
    sub_10001517C(0LL, &qword_100458C80, &OBJC_CLASS___NSString_ptr);
    unint64_t v22 = (NSString)NSString.init(stringLiteral:)("RSD", 3LL, 2LL);
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  uint64_t v24 = v23;
  char v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  uint64_t v26 = sub_100068B40(v25, 0);
  unint64_t v27 = sub_100066354(v26);
  unint64_t v33 = &type metadata for String;
  *(void *)&unint64_t v32 = v27;
  *((void *)&v32 + 1) = v28;
  sub_100015330(&v32, v31);
  uint64_t v29 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100079180(v31, 0x436C6C6174736E69LL, 0xEE00747865746E6FLL, v29);

  swift_bridgeObjectRelease(0x8000000000000000LL);
  return (uint64_t)_swiftEmptyDictionarySingleton;
}
}

  uint64_t v13 = v6;
  uint64_t v14 = sqlite3_open_v2((const char *)[v13 fileSystemRepresentation], &ppDb, v7, 0);
  if (!(_DWORD)v14)
  {
    uint64_t v15 = ppDb;
    uint64_t v16 = v5;
    sqlite3_extended_result_codes(v15, 1);
    if (v5) {
      uint64_t v17 = (void *)v16[4];
    }
    else {
      uint64_t v17 = 0LL;
    }
    uint64_t v18 = v17;

    if (v18)
    {
      uint64_t v19 = v5 ? (void *)v16[4] : 0LL;
      uint64_t v20 = v19;
      if (v20)
      {
        uint64_t v21 = v20;
        unint64_t v22 = sub_1002F907C((uint64_t)&OBJC_CLASS___AppDefaultsManager, v20);
        unint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        uint64_t v24 = v23;
        if (v23 && [v23 length] == (id)16)
        {
          char v25 = 0LL;
        }

        else
        {
          id v40 = 0LL;
          uint64_t v26 = sub_1001E90D0((uint64_t)&OBJC_CLASS___SQLiteKeychainHelper, v21, &v40);
          unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
          char v25 = v40;

          if (v27 && [v27 length] == (id)16)
          {
            uint64_t v24 = v27;
          }

          else
          {

            uint64_t v28 = ASDLogHandleForCategory(14LL);
            uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138543362;
              unint64_t v42 = v21;
              _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Generating new encryption key for identifier: %{public}@",  buf,  0xCu);
            }

            CCRandomGenerateBytes(buf, 0x10uLL);
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](&OBJC_CLASS___NSData, "dataWithBytes:length:", buf, 16LL));

            uint64_t v39 = 0LL;
            uint64_t v30 = sub_1001E92A8((uint64_t)&OBJC_CLASS___SQLiteKeychainHelper, v24, v21, &v39);
            char v25 = v39;
            if (!v30)
            {
              char v31 = ASDLogHandleForCategory(14LL);
              unint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 138543618;
                unint64_t v42 = v21;
                id v43 = 2114;
                uint64_t v44 = v25;
                _os_log_fault_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_FAULT,  "Unable to fetch/generate key with identifier: %{public}@ error: %{public}@",  buf,  0x16u);
              }

              sub_1002F9220((uint64_t)&OBJC_CLASS___AppDefaultsManager, v24, v21);
            }
          }
        }

        unint64_t v33 = v24;
        uint64_t v14 = sqlite3_key(v15, [v33 bytes], objc_msgSend(v33, "length"));

        if ((_DWORD)v14) {
          goto LABEL_41;
        }
      }
    }

    uint64_t v14 = sqlite3_exec(v15, "PRAGMA journal_mode=WAL", 0LL, 0LL, 0LL);
    if ((_DWORD)v14)
    {
LABEL_41:
    }

    else
    {
      unint64_t v35 = objc_alloc(&OBJC_CLASS___NSString);
      if (v5) {
        unint64_t v36 = v16[2];
      }
      else {
        unint64_t v36 = 0LL;
      }
      __int128 v37 = -[NSString initWithFormat:](v35, "initWithFormat:", @"PRAGMA cache_size=%ld", v36);
      uint64_t v14 = sqlite3_exec(v15, -[NSString UTF8String](v37, "UTF8String"), 0LL, 0LL, 0LL);

      if (!(_DWORD)v14)
      {
        *a1 = ppDb;
        goto LABEL_44;
      }
    }
  }

  if (ppDb) {
    sqlite3_close(ppDb);
  }
LABEL_44:

  return v14;
}

    uint64_t v12 = (uint64_t)[v4 storeExternalVersionID];
LABEL_26:
    if (v12 < 1)
    {
LABEL_38:

      goto LABEL_39;
    }

    __int128 v34 = [v4 codeSignatureVersion];
    if (v34 < kMISFutureMinSupportedSignatureVersion)
    {
      if (objc_msgSend( *(id *)(a1 + 64),  "isUnrepairableAppWithItemID:externalVersionID:",  objc_msgSend(v4, "storeItemID"),  v12))
      {
        unint64_t v35 = &off_10040CD18;
      }

      else
      {
        unint64_t v35 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v4 storeExternalVersionID]));
        uint64_t v12 = 0LL;
      }

      unint64_t v36 = *(void **)(a1 + 72);
      __int128 v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  objc_msgSend(v4, "storeItemID", *(_OWORD *)v55, *(void *)&v55[16])));
      [v36 setObject:v35 forKeyedSubscript:v37];
    }

    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s valueForProperty:]( v10,  "valueForProperty:",  @"update_state",  *(void *)v55,  *(_OWORD *)&v55[8]));
    uint64_t v39 = [v38 integerValue];

    if (v39 == (id)5)
    {
      id v40 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s evid](v10, "evid"));
      uint64_t v12 = (uint64_t)[v40 longLongValue];

      unint64_t v41 = ASDLogHandleForCategory(40LL);
      unint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        id v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
        uint64_t v44 = [v4 storeItemID];
        *(_DWORD *)id v55 = 138412802;
        *(void *)&v55[4] = v43;
        *(_WORD *)&v55[12] = 2048;
        *(void *)&v55[14] = v44;
        *(_WORD *)&v55[22] = 2048;
        unint64_t v56 = (id)v12;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "[%@] Only checking for newer updates (%lld -> %lld) due to the current update being marked as blocked.",  v55,  0x20u);
      }
    }

    unint64_t v45 = objc_alloc(&OBJC_CLASS___UpdatableApp);
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v12));
    Swift::Int v47 = sub_100270C0C(v45, v4, v46);

    [*(id *)(a1 + 80) addObject:v47];
LABEL_37:

    goto LABEL_38;
  }

  if (v24) {
    [v25 stopAccessing];
  }

  return 1LL;
}

      a4 = 1LL;
LABEL_20:

LABEL_22:
      goto LABEL_23;
    }

    a4 = 1LL;
    goto LABEL_22;
  }

  a4 = 1LL;
LABEL_23:

  return a4;
}
}
}

char *sub_100037D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000079A0((uint64_t *)&unk_10045AC20);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100026D40(a1, (uint64_t)v26, (uint64_t *)&unk_1004594B0);
  if (v27)
  {
    if ((swift_dynamicCast(&v24, v26, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v11 = v25;
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v11);
      goto LABEL_6;
    }
  }

  else
  {
    sub_100015240((uint64_t)v26, (uint64_t *)&unk_1004594B0);
  }

  NSString v12 = 0LL;
LABEL_6:
  sub_100026D40(a2, (uint64_t)v26, (uint64_t *)&unk_1004594B0);
  if (v27)
  {
    uint64_t v13 = type metadata accessor for UUID(0LL);
    int v14 = swift_dynamicCast(v10, v26, (char *)&type metadata for Any + 8, v13, 6LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v10, v14 ^ 1u, 1LL, v13);
  }

  else
  {
    sub_100015240((uint64_t)v26, (uint64_t *)&unk_1004594B0);
    uint64_t v15 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v10, 1LL, 1LL, v15);
  }

  sub_100026D40(a3, (uint64_t)v26, (uint64_t *)&unk_1004594B0);
  if (v27)
  {
    int v16 = swift_dynamicCast(&v24, v26, (char *)&type metadata for Any + 8, &type metadata for String, 6LL);
    if (v16) {
      uint64_t v17 = v24;
    }
    else {
      uint64_t v17 = 0LL;
    }
    if (v16) {
      uint64_t v18 = v25;
    }
    else {
      uint64_t v18 = 0LL;
    }
  }

  else
  {
    sub_100015240((uint64_t)v26, (uint64_t *)&unk_1004594B0);
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
  }

  sub_100026D40(a4, (uint64_t)v26, (uint64_t *)&unk_1004594B0);
  if (v27)
  {
    int v19 = swift_dynamicCast(&v24, v26, (char *)&type metadata for Any + 8, &type metadata for UInt64, 6LL);
    if (v19) {
      uint64_t v20 = v24;
    }
    else {
      uint64_t v20 = 0LL;
    }
    char v21 = v19 ^ 1;
  }

  else
  {
    sub_100015240((uint64_t)v26, (uint64_t *)&unk_1004594B0);
    uint64_t v20 = 0LL;
    char v21 = 1;
  }

  unint64_t v22 = sub_100037828(0LL, v12, (uint64_t)v10, v17, v18, v20, v21);
  sub_100015240(a4, (uint64_t *)&unk_1004594B0);
  sub_100015240(a3, (uint64_t *)&unk_1004594B0);
  sub_100015240(a2, (uint64_t *)&unk_1004594B0);
  sub_100015240(a1, (uint64_t *)&unk_1004594B0);
  return v22;
}

uint64_t sub_100037FB4()
{
  uint64_t v0 = sub_1000079A0(&qword_100459530);
  uint64_t v1 = swift_allocObject(v0, 96LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_100372A30;
  *(void *)(v1 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"log_code");
  *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  *(void *)(v1 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"external_id");
  *(void *)(v1 + 56) = v3;
  *(void *)(v1 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"bundle_id");
  *(void *)(v1 + 72) = v4;
  *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"item_id");
  *(void *)(v1 + 88) = v5;
  return v1;
}

uint64_t sub_100038048(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0((uint64_t *)&unk_10045AC20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void *sub_100038090(void *a1)
{
  uint64_t v1 = a1;
  if ((*(_BYTE *)(*(void *)(a1[3] - 8LL) + 82LL) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (void *)v2;
  }

  return v1;
}

unint64_t sub_1000380CC()
{
  unint64_t result = qword_100459280;
  if (!qword_100459280)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_100459280);
  }

  return result;
}

unint64_t sub_100038110()
{
  unint64_t result = qword_100459288;
  if (!qword_100459288)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_100459288);
  }

  return result;
}

uint64_t type metadata accessor for SKANFetchPostbackRejectedParams()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored31SKANFetchPostbackRejectedParams);
}

uint64_t sub_100038268(uint64_t a1)
{
  if (qword_100458018 != -1) {
    swift_once(&qword_100458018, sub_1000194F8);
  }
  uint64_t v1 = qword_100458B10;
  uint64_t v2 = unk_100458B18;
  swift_bridgeObjectRetain(unk_100458B18);
  XPCDictionary.subscript.setter(1LL, v1, v2);
  uint64_t v3 = qword_100458B30;
  uint64_t v4 = unk_100458B38;
  int64_t v16 = XPC_ACTIVITY_INTERVAL_5_MIN;
  char v17 = 0;
  unint64_t v5 = sub_100036C10();
  swift_bridgeObjectRetain(v4);
  XPCDictionary.subscript.setter(&v16, v3, v4, &type metadata for Int64, v5);
  uint64_t v6 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_UTILITY);
  uint64_t v8 = v7;
  __int128 v9 = xmmword_100458B40;
  swift_bridgeObjectRetain(*((void *)&xmmword_100458B40 + 1));
  XPCDictionary.subscript.setter(v6, v8, v9, *((void *)&v9 + 1));
  __int128 v10 = xmmword_100458B00;
  int64_t v16 = 3600LL;
  char v17 = 0;
  swift_bridgeObjectRetain(*((void *)&xmmword_100458B00 + 1));
  XPCDictionary.subscript.setter(&v16, v10, *((void *)&v10 + 1), &type metadata for Int64, v5);
  uint64_t v11 = qword_100458B50;
  uint64_t v12 = unk_100458B58;
  swift_bridgeObjectRetain(unk_100458B58);
  XPCDictionary.subscript.setter(1LL, v11, v12);
  uint64_t v13 = qword_100458B70;
  uint64_t v14 = unk_100458B78;
  swift_bridgeObjectRetain(unk_100458B78);
  return XPCDictionary.subscript.setter(0LL, v13, v14);
}

const char *sub_100038438()
{
  return "com.apple.appstored.ODPSync";
}

void sub_10003844C(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = static Logger.metrics.getter(v6);
  __int128 v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    uint64_t v14 = _typeName(_:qualified:)(ObjectType, 0LL);
    uint64_t v23 = v4;
    uint64_t v15 = ObjectType;
    unint64_t v17 = v16;
    uint64_t v24 = sub_100088DB4(v14, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, aBlock, v12 + 4, v12 + 12);
    unint64_t v18 = v17;
    uint64_t ObjectType = v15;
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%{public}s] run", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v23);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }

  uint64_t v19 = objc_opt_self(&OBJC_CLASS___MetricsCoordinator);
  id v20 = sub_100233508(v19);
  uint64_t v21 = swift_allocObject(&unk_1003DDB70, 24LL, 7LL);
  *(void *)(v21 + 16) = ObjectType;
  aBlock[4] = (uint64_t)sub_100038A04;
  uint64_t v26 = v21;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_100027DC4;
  aBlock[3] = (uint64_t)&unk_1003DDB88;
  unint64_t v22 = _Block_copy(aBlock);
  swift_release(v26);
  sub_100234DCC((uint64_t)v20, 5LL, 6LL, v22);
  _Block_release(v22);
}

uint64_t sub_1000386A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5);
  __int128 v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a2)
  {
    uint64_t v11 = swift_errorRetain(a2, v8);
    static Logger.appUsage.getter(v11);
    swift_errorRetain(a2, v12);
    uint64_t v14 = swift_errorRetain(a2, v13);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc(22LL, -1LL);
      uint64_t v26 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v27;
      *(_DWORD *)uint64_t v17 = 136446466;
      uint64_t v18 = _typeName(_:qualified:)(a3, 0LL);
      unint64_t v20 = v19;
      uint64_t v28 = sub_100088DB4(v18, v19, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v17 + 12) = 2114;
      swift_errorRetain(a2, v21);
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError(a2);
      uint64_t v28 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v17 + 14, v17 + 22);
      uint64_t v23 = v26;
      uint64_t *v26 = v22;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[%{public}s] Complete with error: %{public}@",  (uint8_t *)v17,  0x16u);
      uint64_t v24 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v23, 1LL, v24);
      swift_slowDealloc(v23, -1LL, -1LL);
      uint64_t v25 = v27;
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      swift_errorRelease(a2);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  return result;
}

uint64_t sub_1000389AC()
{
  return swift_bridgeObjectRelease(*(void *)(v0 + OBJC_IVAR____TtC9appstored15ODPSyncActivity_descriptiveName + 8));
}

uint64_t type metadata accessor for ODPSyncActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored15ODPSyncActivity);
}

uint64_t sub_1000389F4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100038A04(uint64_t a1, uint64_t a2)
{
  return sub_1000386A0(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100038A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100038A1C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_100038A24()
{
  uint64_t v0 = type metadata accessor for UpdatesManager_Swift();
  swift_allocObject(v0, 160LL, 15LL);
  id result = sub_100038F00();
  qword_1004628F8 = (uint64_t)result;
  return result;
}

id sub_100038A5C()
{
  return sub_100038F00();
}

uint64_t sub_100038AD0()
{
  uint64_t v0 = sub_1000079A0(&qword_100458EE0);
  uint64_t v1 = swift_allocObject(v0, 48LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_100373510;
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t v11 = 1LL;
  uint64_t v3 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v11, &type metadata for Int);
  uint64_t v4 = (void *)objc_opt_self(&OBJC_CLASS___SQLiteComparisonPredicate);
  id v5 = [v4 predicateWithProperty:v2 value:v3 comparisonType:4];
  swift_unknownObjectRelease(v3);

  *(void *)(v1 + 32) = v5;
  NSString v6 = String._bridgeToObjectiveC()();
  uint64_t v11 = 5LL;
  uint64_t v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v11, &type metadata for Int);
  id v8 = [v4 predicateWithProperty:v6 value:v7 comparisonType:2];
  swift_unknownObjectRelease(v7);

  *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v8;
  uint64_t v11 = v1;
  uint64_t result = specialized Array._endMutation()(v9);
  qword_100459310 = v11;
  return result;
}

id sub_100038C3C()
{
  id result = sub_100038C58();
  qword_100459318 = (uint64_t)result;
  return result;
}

id sub_100038C58()
{
  uint64_t v0 = sub_1000079A0(&qword_100459DF0);
  uint64_t v1 = swift_allocObject(v0, 56LL, 7LL);
  *(_OWORD *)(v1 + 16) = xmmword_100372E80;
  *(_OWORD *)(v1 + 32) = xmmword_100373B70;
  *(void *)(v1 + 48) = 3LL;
  if (qword_100458060 != -1) {
    swift_once(&qword_100458060, sub_100038AD0);
  }
  uint64_t v17 = qword_100459310;
  swift_bridgeObjectRetain(qword_100459310);
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t v16 = v1;
  swift_bridgeObjectRetain(v1);
  uint64_t v3 = sub_1000079A0((uint64_t *)&unk_100459440);
  uint64_t v4 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(&v16, v3);
  id v5 = (void *)objc_opt_self(&OBJC_CLASS___SQLiteContainsPredicate);
  id v6 = objc_msgSend(v5, "containsPredicateWithProperty:values:", v2, v4, v16);
  swift_bridgeObjectRelease(v1);
  swift_unknownObjectRelease(v4);

  id v7 = v6;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
  unint64_t v9 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v8 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v9 >= v8 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1LL);
  }
  uint64_t v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
  specialized Array._endMutation()(v10);
  uint64_t v11 = v17;
  uint64_t v12 = sub_100055EF4(v17);
  swift_bridgeObjectRelease(v11);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v12);
  id v14 = [(id)objc_opt_self(SQLiteCompoundPredicate) predicateMatchingAllPredicates:isa];

  return v14;
}

void sub_100038E40(uint64_t a1)
{
}

void sub_100038E68(uint64_t a1)
{
}

void sub_100038E8C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = [objc_allocWithZone(NSDateFormatter) init];
  NSString v6 = String._bridgeToObjectiveC()();
  [v5 setDateFormat:v6];

  *a4 = v5;
}

id sub_100038F00()
{
  uint64_t v1 = sub_1000079A0(&qword_100458488);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_defaultActor_initialize(v0);
  *(_BYTE *)(v0 + 112) = 0;
  *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0LL;
  *(_BYTE *)(v0 + 128) = 1;
  *(_OWORD *)(v0 + 136) = xmmword_100373B80;
  uint64_t v4 = type metadata accessor for TVProviderAndProvisionedApps();
  uint64_t v5 = swift_allocObject(v4, 128LL, 15LL);
  swift_retain(v0);
  swift_defaultActor_initialize(v5);
  *(void *)(v5 + 112) = 0LL;
  *(void *)(v5 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0LL;
  *(void *)(v0 + 152) = v5;
  swift_release(v0);
  NSString v6 = (objc_class *)type metadata accessor for UpdatesManager_Swift();
  v13.receiver = (id)v0;
  v13.super_class = v6;
  id v7 = objc_msgSendSuper2(&v13, "init");
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v3, 1LL, 1LL, v8);
  unint64_t v9 = (void *)swift_allocObject(&unk_1003DE370, 40LL, 7LL);
  v9[2] = 0LL;
  v9[3] = 0LL;
  v9[4] = v7;
  id v10 = v7;
  uint64_t v11 = sub_10004DA7C((uint64_t)v3, (uint64_t)&unk_100459560, (uint64_t)v9);
  swift_release(v11);
  return v10;
}

uint64_t sub_100039040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 64) = a4;
  return swift_task_switch(sub_100039058, 0LL, 0LL);
}

uint64_t sub_100039058()
{
  uint64_t v1 = *(void *)(v0 + 64);
  id v2 = [(id)objc_opt_self(NSNotificationCenter) defaultCenter];
  uint64_t v3 = (void *)objc_opt_self(&OBJC_CLASS___ActiveAccountObserver);
  uint64_t v4 = @"AccountStorePrimaryAccountDidChange";
  id v5 = [v3 sharedInstance];
  [v2 addObserver:v1 selector:"handleAccountChangeNotification" name:v4 object:v5];

  id v6 = [v3 activeAccount];
  id v7 = v6;
  if (!v6) {
    goto LABEL_5;
  }
  id v8 = objc_msgSend(v6, "ams_DSID");

  if (!v8)
  {
    id v7 = 0LL;
LABEL_5:
    char v9 = 1;
    goto LABEL_6;
  }

  id v7 = [v8 longLongValue];

  char v9 = 0;
LABEL_6:
  *(_BYTE *)(v0 + 88) = v9;
  *(void *)(v0 + 72) = v7;
  return swift_task_switch(sub_1000391AC, *(void *)(v0 + 64), 0LL);
}

uint64_t sub_1000391AC()
{
  char v1 = *(_BYTE *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  *(void *)(v2 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(v0 + 72);
  *(_BYTE *)(v2 + 128) = v1;
  return swift_task_switch(sub_1000391D0, 0LL, 0LL);
}

uint64_t sub_1000391D0()
{
  uint64_t v1 = objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseStore);
  id v2 = sub_100237D18(v1);
  v0[2] = _NSConcreteStackBlock;
  v0[6] = sub_1000399B4;
  v0[7] = 0LL;
  v0[3] = 1107296256LL;
  v0[4] = sub_100028ECC;
  v0[5] = &unk_1003DE388;
  uint64_t v3 = _Block_copy(v0 + 2);
  swift_release(v0[7]);
  [v2 modifyUsingTransaction:v3];

  _Block_release(v3);
  uint64_t result = swift_isEscapingClosureAtFileLocation(0LL, "", 88LL, 1343LL, 47LL, 1LL);
  if ((result & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v5 = v0[8];
    v0[10] = [objc_allocWithZone((Class)type metadata accessor for UpdatesContext()) init];
    return swift_task_switch(sub_1000392E8, v5, 0LL);
  }

  return result;
}

uint64_t sub_1000392E8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100039458(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain(a2);
  return swift_task_switch(sub_1000394A4, a2, 0LL);
}

uint64_t sub_1000394A4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void (***)(void, void))(v0 + 24);
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
  BOOL v4 = sub_1002FA098(v3);
  swift_release(v1);
  v2[2](v2, v4);
  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003962C(const void *a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(void *)(v2 + 24) = _Block_copy(a1);
  swift_retain(a2);
  return swift_task_switch(sub_100039678, a2, 0LL);
}

uint64_t sub_100039678()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void (***)(void, void))(v0 + 24);
  uint64_t v3 = *(unsigned __int8 *)(v1 + 112);
  *(_BYTE *)(v1 + 112) = 0;
  swift_release(v1);
  v2[2](v2, v3);
  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000396C8(void *a1, char a2, uint64_t a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  v20[0] = 8LL;
  uint64_t v7 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v20, &type metadata for Int);
  id v8 =  [(id)objc_opt_self(SQLiteComparisonPredicate) predicateWithProperty:v6 value:v7 comparisonType:3];
  swift_unknownObjectRelease(v7);

  id v9 = [a1 connection];
  if ((a2 & 1) != 0) {
    id v10 = 0LL;
  }
  else {
    id v10 = v8;
  }
  uint64_t v11 = type metadata accessor for MediaAPIUpdate();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v11);
  id v13 = sub_10024CBB0(ObjCClassFromMetadata, v9, v10);

  uint64_t v14 = swift_allocObject(&unk_1003DEB18, 24LL, 7LL);
  *(void *)(v14 + 16) = a3;
  uint64_t v15 = swift_allocObject(&unk_1003DEB40, 32LL, 7LL);
  *(void *)(v15 + 16) = sub_10004C3AC;
  *(void *)(v15 + 24) = v14;
  v20[4] = sub_10004C530;
  uint64_t v21 = v15;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256LL;
  v20[2] = sub_100056278;
  v20[3] = &unk_1003DEB58;
  uint64_t v16 = _Block_copy(v20);
  uint64_t v17 = v21;
  swift_retain(v15);
  swift_release(v17);
  [v13 enumerateMemoryEntitiesUsingBlock:v16];

  _Block_release(v16);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v15, "", 88LL, 113LL, 43LL, 1LL);
  swift_release(v14);
  uint64_t result = swift_release(v15);
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000398D0(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  unint64_t v7 = *(void *)((*a4 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  unint64_t v6 = *(void *)((*a4 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
  if (v7 >= v6 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1LL);
  }
  uint64_t v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v5);
  return specialized Array._endMutation()(v8);
}

BOOL sub_10003993C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  sub_10001517C(0LL, &qword_100459BF0, off_1003DA108);
  swift_bridgeObjectRetain(v3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  BOOL v5 = sub_10029FAF4(a1, isa);

  return v5;
}

id sub_1000399B8(void *a1)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  return sub_10029FA34(a1, Current - ASDSoftwareUpdateHistoryInterval);
}

uint64_t sub_1000399F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a5;
  unint64_t v7 = (void *)swift_task_alloc(dword_1004593F4);
  *(void *)(v5 + 24) = v7;
  *unint64_t v7 = v5;
  v7[1] = sub_100039A50;
  return sub_10003FF24(a5, v8);
}

uint64_t sub_100039A50(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24LL);
  *(void *)(*(void *)v1 + 32LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100039AAC, 0LL, 0LL);
}

uint64_t sub_100039AAC()
{
  if (*v1) {
    (*v1)(*(void *)(v0 + 32), 0LL);
  }
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100039B1C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000079A0(&qword_100458488);
  __chkstk_darwin(v2);
  BOOL v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1LL, 1LL, v5);
  unint64_t v7 = (void *)swift_allocObject(&unk_1003DE320, 40LL, 7LL);
  uint64_t v7[2] = 0LL;
  uint64_t v8 = v7 + 2;
  v7[3] = 0LL;
  v7[4] = v1;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
  uint64_t v10 = swift_retain(v1);
  if (v9 == 1)
  {
    sub_100015240((uint64_t)v4, &qword_100458488);
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 7168LL;
  }

  else
  {
    unsigned __int8 v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    uint64_t v13 = v14 | 0x1C00LL;
    uint64_t v16 = *v8;
    if (*v8)
    {
      uint64_t v17 = v7[3];
      uint64_t ObjectType = swift_getObjectType(*v8, v15);
      swift_unknownObjectRetain(v16);
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      uint64_t v12 = v19;
      swift_unknownObjectRelease(v16);
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
    }
  }

  uint64_t v20 = swift_allocObject(&unk_1003DE348, 32LL, 7LL);
  *(void *)(v20 + 16) = &unk_100459540;
  *(void *)(v20 + 24) = v7;
  if (v12 | v11)
  {
    v24[0] = 0LL;
    v24[1] = 0LL;
    uint64_t v21 = v24;
    v24[2] = v11;
    v24[3] = v12;
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  uint64_t v22 = swift_task_create(v13, v21, &type metadata for Int, &unk_100459550, v20);
  return swift_release(v22);
}

uint64_t sub_100039CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return swift_task_switch(sub_100039D04, 0LL, 0LL);
}

uint64_t sub_100039D04()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 32) = [objc_allocWithZone((Class)type metadata accessor for UpdatesContext()) init];
  return swift_task_switch(sub_100039D58, v1, 0LL);
}

uint64_t sub_100039D58()
{
  return swift_task_switch(sub_100039D94, 0LL, 0LL);
}

uint64_t sub_100039D94()
{
  **(void **)(v0 + 16) = 0LL;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100039DB0(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[8] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  void v2[9] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[10] = swift_task_alloc(v5);
  v2[11] = swift_task_alloc(v5);
  return swift_task_switch(sub_100039E20, 0LL, 0LL);
}

uint64_t sub_100039E20()
{
  uint64_t v1 = *(void *)(v0 + 48);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 56);
    uint64_t v3 = sub_1000079A0(&qword_100459530);
    uint64_t v4 = swift_allocObject(v3, 48LL, 7LL);
    *(_OWORD *)(v4 + 16) = xmmword_100372930;
    *(void *)(v0 + 16) = v1;
    *(void *)(v4 + 32) = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
    *(void *)(v4 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v5;
    id v6 = objc_allocWithZone((Class)type metadata accessor for LogKey());
    unint64_t v7 = sub_100091AD0( 0LL,  0xE000000000000000LL,  "/",  1LL,  2u,  0LL,  0xE000000000000000LL,  0xD000000000000013LL,  0x8000000100344200LL,  v4,  0LL);
    *(void *)(v0 + 96) = v7;
    swift_bridgeObjectRelease(v4);
    *(void *)(v0 + 104) = *(void *)(v2 + 152);
    uint64_t v8 = (void *)swift_task_alloc(dword_10045A3C4);
    *(void *)(v0 + 112) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100039F68;
    return sub_10007C5DC((uint64_t)v7);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 88));
    swift_task_dealloc(v10);
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

uint64_t sub_100039F68(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112LL);
  *(void *)(*(void *)v1 + 120LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100039FC4, 0LL, 0LL);
}

uint64_t sub_100039FC4()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 48);
    uint64_t v4 = 32LL;
    while (v3 < 0 || *(void *)(v1 + v4) != v3)
    {
      v4 += 16LL;
      if (!--v2) {
        goto LABEL_9;
      }
    }

    uint64_t v5 = swift_bridgeObjectRelease(v1);
    uint64_t v6 = static Logger.updates.getter(v5);
    unint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = *(void *)(v0 + 48);
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v10 = 134349056;
      *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v10 + 4, v10 + 12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}lld is one of the headboard apps", v10, 0xCu);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    uint64_t v11 = *(void *)(v0 + 88);
    uint64_t v12 = *(void *)(v0 + 64);
    uint64_t v13 = *(void *)(v0 + 72);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    uint64_t v14 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 88));
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
  }

  else
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    uint64_t v16 = (void *)swift_task_alloc(dword_10045A3CC);
    *(void *)(v0 + 128) = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_10003A15C;
    return sub_10007D294(*(void *)(v0 + 96));
  }

uint64_t sub_10003A15C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10003A1B8, 0LL, 0LL);
}

uint64_t sub_10003A1B8()
{
  *(void *)(v0 + 24) = *(void *)(v0 + 48);
  uint64_t v1 = *(void **)(v0 + 136);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  uint64_t v4 = v3;
  char v5 = sub_100085C88(v2, v3, v1);
  swift_bridgeObjectRelease(v4);
  uint64_t v6 = swift_bridgeObjectRelease(v1);
  if ((v5 & 1) != 0)
  {
    uint64_t v7 = static Logger.updates.getter(v6);
    os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = *(void *)(v0 + 48);
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v11 = 134349056;
      *(void *)(v0 + 32) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v11 + 4, v11 + 12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}lld is one of the tv provider apps", v11, 0xCu);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    uint64_t v13 = *(void *)(v0 + 72);
    uint64_t v12 = *(void *)(v0 + 80);
    uint64_t v14 = *(void *)(v0 + 64);

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  }

  else
  {
  }

  uint64_t v15 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))(v5 & 1);
}

uint64_t sub_10003A458(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = dword_1004593BC;
  swift_retain(a3);
  uint64_t v7 = (void *)swift_task_alloc(v6);
  v3[4] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10003A4CC;
  return sub_100039DB0(a1);
}

uint64_t sub_10003A4CC(char a1)
{
  uint64_t v3 = *(void (***)(void, void))(*v1 + 24);
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v6 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 32));
  swift_release(v4);
  v3[2](v3, a1 & 1);
  _Block_release(v3);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10003A678(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  swift_retain(a3);
  return swift_task_switch(sub_10003A6D0, a3, 0LL);
}

uint64_t sub_10003A6D0()
{
  uint64_t v1 = (void *)v0[2];
  id v2 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v1;
  id v4 = sub_10006D4CC(7LL, v1, 0LL, 0LL, 0LL, 0, 1, 1, 0LL, 1);
  v0[5] = v4;

  char v5 = (void *)swift_task_alloc(dword_1004593F4);
  v0[6] = v5;
  *char v5 = v0;
  v5[1] = sub_10003A780;
  return sub_10003FF24((uint64_t)v4, v6);
}

uint64_t sub_10003A780(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
  *(void *)(*(void *)v1 + 56LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10003A7E0, v3, 0LL);
}

uint64_t sub_10003A7E0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 32);
  id v4 = *(void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);

  swift_release(v3);
  sub_10001517C(0LL, (unint64_t *)&qword_100459588, &OBJC_CLASS___ASDSoftwareUpdate_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1);
  ((void (**)(void, Class, void))v2)[2](v2, isa, 0LL);

  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003A87C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = a6;
  v7[4] = a7;
  uint64_t v7[2] = a5;
  return swift_task_switch(sub_10003A898, a4, 0LL);
}

uint64_t sub_10003A898()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003AA48()
{
  return sub_1000418C4( (uint64_t)&unk_1003DE2D0,  (uint64_t)&unk_1003DE2F8,  (uint64_t)&unk_100459520,  (uint64_t)&unk_100459528);
}

uint64_t sub_10003AA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch(sub_10003AA84, 0LL, 0LL);
}

uint64_t sub_10003AA84()
{
  id v1 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v2 = sub_10006D4CC(1LL, 0LL, 0LL, 0LL, 0LL, 0, 0, 0, 0LL, 1);
  *(void *)(v0 + 24) = v2;
  uint64_t v3 = (void *)swift_task_alloc(dword_100459404);
  *(void *)(v0 + 32) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10003AB20;
  return sub_100044360((uint64_t)v2);
}

uint64_t sub_10003AB20(uint64_t a1)
{
  return swift_task_switch(sub_10004C4D0, 0LL, 0LL);
}

uint64_t sub_10003AC48(uint64_t a1)
{
  v2[4] = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10003ACA8, v1, 0LL);
}

uint64_t sub_10003ACA8()
{
  uint64_t v1 = *(void **)(v0 + 32);
  id v2 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v1;
  id v4 = sub_10006D4CC(0LL, v1, 0LL, 0LL, 0LL, 0, 0, 0, 0LL, 1);

  static Logger.updates.getter(v5);
  uint64_t v6 = (os_log_s *)v4;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v16 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v9 = 138412546;
    os_log_t log = v7;
    uint64_t v10 = *(void **)((char *)v6 + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v0 + 16) = v10;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v9 + 4, v9 + 12);
    *uint64_t v16 = v10;

    *(_WORD *)(v9 + 12) = 2050;
    *(void *)(v0 + 24) = 0LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v9 + 14, v9 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v8,  "[%@] Refresh update count returning count: %{public}ld",  (uint8_t *)v9,  0x16u);
    uint64_t v12 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v16, 1LL, v12);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
    uint64_t v13 = log;
  }

  else
  {

    uint64_t v13 = v6;
    uint64_t v6 = v7;
  }

  uint64_t v14 = *(void *)(v0 + 56);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 48) + 8LL))(v14, *(void *)(v0 + 40));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_10003B004(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1004593C4;
  id v7 = a1;
  swift_retain(a3);
  os_log_type_t v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  *os_log_type_t v8 = v3;
  v8[1] = sub_10003B07C;
  return sub_10003AC48((uint64_t)a1);
}

uint64_t sub_10003B07C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 40);
  uint64_t v6 = *(void **)(*v2 + 16);
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v7 = *v2;
  swift_task_dealloc(v4);

  swift_release(v5);
  uint64_t v8 = *(void *)(v7 + 32);
  if (v1)
  {
    uint64_t v9 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t))(v8 + 16))(v8);
  }

  else
  {
    (*(void (**)(void, uint64_t, void))(v8 + 16))(*(void *)(v7 + 32), a1, 0LL);
  }

  _Block_release(*(const void **)(v7 + 32));
  return (*(uint64_t (**)(void))(v7 + 8))();
}

uint64_t sub_10003B134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[5] = a5;
  v6[6] = a6;
  v6[4] = a4;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v6[7] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[8] = v9;
  void v6[9] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10003B19C, a6, 0LL);
}

uint64_t sub_10003B19C()
{
  uint64_t v1 = (void *)v0[4];
  uint64_t v2 = v0[5];
  id v3 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v4 = v1;
  id v5 = sub_10006D4CC(8LL, v1, 0LL, 0LL, 0LL, 0, 0, 0, v2, 0);
  v0[10] = v5;

  uint64_t v6 = (void *)swift_task_alloc(dword_100459404);
  v0[11] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10003B250;
  return sub_100044360((uint64_t)v5);
}

uint64_t sub_10003B250(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 48LL);
  swift_task_dealloc(*(void *)(*(void *)v1 + 88LL));
  swift_bridgeObjectRelease(a1);
  return swift_task_switch(sub_10003B2B4, v3, 0LL);
}

uint64_t sub_10003B2B4(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 80);
  static Logger.updates.getter(a1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    id v5 = *(char **)(v1 + 80);
    uint64_t v14 = *(void *)(v1 + 40);
    uint64_t v6 = swift_slowAlloc(22LL, -1LL);
    uint64_t v13 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138412546;
    uint64_t v7 = *(void **)&v5[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    *(void *)(v1 + 16) = v7;
    id v8 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v6 + 4, v6 + 12);
    *uint64_t v13 = v7;

    *(_WORD *)(v6 + 12) = 2050;
    *(void *)(v1 + 24) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v6 + 14, v6 + 22);
    uint64_t v9 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v13, 1LL, v9);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
    uint64_t v10 = v3;
    uint64_t v3 = (os_log_s *)v5;
  }

  else
  {
    uint64_t v10 = *(os_log_s **)(v1 + 80);
  }

  uint64_t v11 = *(void *)(v1 + 72);
  (*(void (**)(uint64_t, void))(*(void *)(v1 + 64) + 8LL))(v11, *(void *)(v1 + 56));
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10003B5B0(uint64_t a1, void *a2, const void *a3, uint64_t a4)
{
  void v4[3] = a2;
  void v4[4] = a4;
  void v4[2] = a1;
  uint64_t v8 = sub_1000079A0(&qword_100458488);
  v4[5] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v4[6] = _Block_copy(a3);
  id v9 = a2;
  swift_retain(a4);
  return swift_task_switch(sub_10003B63C, a4, 0LL);
}

uint64_t sub_10003B63C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void (***)(void, void))(v0 + 48);
  os_log_type_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v2, 1LL, 1LL, v6);
  uint64_t v8 = sub_10004BF20( &qword_100459690,  v7,  (uint64_t (*)(uint64_t))type metadata accessor for UpdatesManager_Swift,  (uint64_t)&unk_100373C08);
  id v9 = (void *)swift_allocObject(&unk_1003DE848, 56LL, 7LL);
  v9[2] = v3;
  v9[3] = v8;
  v9[4] = v4;
  v9[5] = v5;
  v9[6] = v3;
  swift_retain_n(v3, 2LL);
  id v10 = v4;
  uint64_t v11 = sub_10004DA7C(v2, (uint64_t)&unk_100459698, (uint64_t)v9);
  swift_release(v3);

  swift_release(v11);
  v1[2](v1, 0LL);
  _Block_release(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003B750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return swift_task_switch(sub_10003B768, 0LL, 0LL);
}

uint64_t sub_10003B768()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 32) = [objc_allocWithZone((Class)type metadata accessor for UpdatesContext()) init];
  return swift_task_switch(sub_10003B7BC, v1, 0LL);
}

uint64_t sub_10003B7BC()
{
  return swift_task_switch(sub_10004C578, 0LL, 0LL);
}

uint64_t sub_10003BA2C(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  swift_retain(a3);
  return swift_task_switch(sub_10003BA84, a3, 0LL);
}

uint64_t sub_10003BA84()
{
  uint64_t v1 = (void *)v0[2];
  id v2 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v1;
  id v4 = sub_10006D4CC(0LL, v1, 0LL, 0LL, 0LL, 0, 0, 1, 0LL, 1);
  v0[5] = v4;

  uint64_t v5 = (void *)swift_task_alloc(dword_100459404);
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10003BB34;
  return sub_100044360((uint64_t)v4);
}

uint64_t sub_10003BB34(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
  *(void *)(*(void *)v1 + 56LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10004C574, v3, 0LL);
}

uint64_t sub_10003BCC8(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  swift_retain(a3);
  return swift_task_switch(sub_10003BD20, a3, 0LL);
}

uint64_t sub_10003BD20()
{
  uint64_t v1 = (void *)v0[2];
  id v2 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v1;
  id v4 = sub_10006D4CC(1LL, v1, 0LL, 0LL, 0LL, 0, 0, 1, 0LL, 1);
  v0[5] = v4;

  uint64_t v5 = (void *)swift_task_alloc(dword_100459404);
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10003BDD0;
  return sub_100044360((uint64_t)v4);
}

uint64_t sub_10003BDD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
  *(void *)(*(void *)v1 + 56LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10003BE30, v3, 0LL);
}

uint64_t sub_10003BE30()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void (***)(void, void, void))(v0 + 32);
  id v4 = *(void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);

  swift_release(v3);
  sub_10001517C(0LL, (unint64_t *)&qword_100459588, &OBJC_CLASS___ASDSoftwareUpdate_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1);
  ((void (**)(void, Class, void))v2)[2](v2, isa, 0LL);

  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003BECC(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  v2[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10003BF2C, v1, 0LL);
}

uint64_t sub_10003BF2C()
{
  uint64_t v1 = (void *)v0[3];
  id v2 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v1;
  id v4 = sub_10006D4CC(2LL, v1, 0LL, 0LL, 0LL, 0, 1, 0, 0LL, 1);
  v0[8] = v4;

  static Logger.updates.getter(v5);
  id v6 = (char *)v4;
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v15 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v9 = 138412290;
    id v10 = *(void **)&v6[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v0[2] = v10;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v9 + 4, v9 + 12);
    *uint64_t v15 = v10;

    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%@ Refreshing from server for reloadManagedUpdates", v9, 0xCu);
    uint64_t v12 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v15, 1LL, v12);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
  }

  (*(void (**)(void, void))(v0[6] + 8LL))(v0[7], v0[5]);
  uint64_t v13 = (void *)swift_task_alloc(dword_100459404);
  v0[9] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_10003C12C;
  return sub_100044360((uint64_t)v6);
}

uint64_t sub_10003C12C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 80LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10003C18C, v3, 0LL);
}

uint64_t sub_10003C18C()
{
  uint64_t v1 = *(void *)(v0 + 56);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 80));
}

uint64_t sub_10003C300(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  uint64_t v6 = dword_1004593CC;
  id v7 = a1;
  swift_retain(a3);
  os_log_type_t v8 = (void *)swift_task_alloc(v6);
  v3[5] = v8;
  *os_log_type_t v8 = v3;
  v8[1] = sub_10003C37C;
  return sub_10003BECC((uint64_t)v7);
}

uint64_t sub_10003C37C(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 40);
  os_log_type_t v8 = *(void **)(*v2 + 16);
  uint64_t v7 = *(void *)(*v2 + 24);
  uint64_t v9 = *v2;
  swift_task_dealloc(v6);

  swift_release(v7);
  if (v3)
  {
    uint64_t v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    Class isa = 0LL;
    uint64_t v12 = (void *)v10;
  }

  else
  {
    sub_10001517C(0LL, (unint64_t *)&qword_100459588, &OBJC_CLASS___ASDSoftwareUpdate_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    uint64_t v10 = 0LL;
    uint64_t v12 = isa;
  }

  uint64_t v13 = *(void (***)(void, void, void))(v5 + 32);
  ((void (**)(void, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_10003C468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a5;
  uint64_t v7 = (void *)swift_task_alloc(dword_100459404);
  *(void *)(v5 + 24) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10003C4C0;
  return sub_100044360(a5);
}

uint64_t sub_10003C4C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24LL);
  *(void *)(*(void *)v1 + 32LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10004C4D4, 0LL, 0LL);
}

void sub_10003C530(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_1000079A0(&qword_100458488);
  __chkstk_darwin(v9);
  id v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v11, 1LL, 1LL, v12);
  uint64_t v13 = (void *)swift_allocObject(a4, 48LL, 7LL);
  v13[2] = 0LL;
  v13[3] = 0LL;
  v13[4] = a1;
  v13[5] = a3;
  id v14 = a3;
  swift_retain_n(a1, 2LL);
  id v15 = v14;
  uint64_t v16 = sub_10004DA7C((uint64_t)v11, a5, (uint64_t)v13);
  swift_release(v16);
  swift_release(a1);
}

uint64_t sub_10003C620(char a1)
{
  *(_BYTE *)(v2 + 48) = a1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  *(void *)(v2 + 24) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v2 + 32) = v4;
  *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10003C680, v1, 0LL);
}

uint64_t sub_10003C680(uint64_t a1)
{
  uint64_t v2 = static Logger.updates.getter(a1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v18 = *(void *)(v1 + 32);
    uint64_t v19 = *(void *)(v1 + 40);
    uint64_t v5 = *(void *)(v1 + 24);
    int v6 = *(unsigned __int8 *)(v1 + 48);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v7 = 136446210;
    uint64_t v20 = v8;
    if (v6) {
      uint64_t v9 = 0x64656C62616E65LL;
    }
    else {
      uint64_t v9 = 0x64656C6261736964LL;
    }
    if (v6) {
      unint64_t v10 = 0xE700000000000000LL;
    }
    else {
      unint64_t v10 = 0xE800000000000000LL;
    }
    *(void *)(v1 + 16) = sub_100088DB4(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Setting auto updates to %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v5);
  }

  else
  {
    uint64_t v12 = *(void *)(v1 + 32);
    uint64_t v11 = *(void *)(v1 + 40);
    uint64_t v13 = *(void *)(v1 + 24);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  uint64_t v14 = *(void *)(v1 + 40);
  int v15 = *(unsigned __int8 *)(v1 + 48);
  uint64_t v16 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
  sub_1002FA23C(v16, v15);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10003C988(char a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = dword_1004593D4;
  swift_retain(a3);
  uint64_t v7 = (void *)swift_task_alloc(v6);
  v3[4] = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_10003C9FC;
  return sub_10003C620(a1);
}

uint64_t sub_10003C9FC()
{
  uint64_t v1 = *(void (***)(void))(*v0 + 24);
  uint64_t v2 = *(void *)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 32));
  swift_release(v2);
  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10003CA64()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000079A0(&qword_100458488);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v10 = sub_10006D4CC(2LL, 0LL, 0LL, 0LL, 0LL, 0, 0, 0, 0LL, 1);
  uint64_t v11 = objc_opt_self(&OBJC_CLASS___Restrictions);
  id v12 = sub_1002735AC(v11);
  if ((_DWORD)v12)
  {
    static Logger.updates.getter(v12);
    uint64_t v13 = (char *)v10;
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v31 = v5;
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v16 = 138412290;
      uint64_t v29 = v6;
      uint64_t v30 = v4;
      uint64_t v17 = *(void **)&v13[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      unint64_t v32 = v17;
      id v18 = v17;
      uint64_t v5 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 4, v16 + 12);
      uint64_t v19 = v28;
      void *v28 = v17;
      uint64_t v6 = v29;
      uint64_t v4 = v30;

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%@] Setup following migration", v16, 0xCu);
      uint64_t v20 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v19, 1LL, v20);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {

      uint64_t v14 = (os_log_s *)v13;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v24 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v4, 1LL, 1LL, v24);
    uint64_t v22 = (void *)swift_allocObject(&unk_1003DE2A8, 48LL, 7LL);
    void v22[2] = 0LL;
    v22[3] = 0LL;
    v22[4] = v1;
    v22[5] = v13;
    swift_retain(v1);
    uint64_t v23 = &unk_100459510;
  }

  else
  {
    uint64_t v21 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v4, 1LL, 1LL, v21);
    uint64_t v22 = (void *)swift_allocObject(&unk_1003DE280, 48LL, 7LL);
    void v22[2] = 0LL;
    v22[3] = 0LL;
    v22[4] = v1;
    v22[5] = v10;
    swift_retain(v1);
    uint64_t v23 = &unk_100459500;
  }

  uint64_t v25 = sub_10004DA7C((uint64_t)v4, (uint64_t)v23, (uint64_t)v22);
  return swift_release(v25);
}

uint64_t sub_10003CD8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[4] = a5;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v5[5] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[6] = v8;
  v5[7] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = (void *)swift_task_alloc(dword_100459404);
  v5[8] = v9;
  *id v9 = v5;
  v9[1] = sub_10003CE0C;
  return sub_100044360(a5);
}

uint64_t sub_10003CE0C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64LL);
  *(void *)(*(void *)v1 + 72LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10003CE68, 0LL, 0LL);
}

uint64_t sub_10003CE68(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 72);
  static Logger.updates.getter(a1);
  id v4 = v2;
  uint64_t v5 = swift_bridgeObjectRetain(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v22 = v7;
    uint64_t v23 = v6;
    unint64_t v8 = *(void *)(v1 + 72);
    id v9 = *(char **)(v1 + 32);
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v11 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138412546;
    id v12 = *(void **)&v9[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    *(void *)(v1 + 16) = v12;
    id v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v10 + 4, v10 + 12);
    void *v11 = v12;

    *(_WORD *)(v10 + 12) = 2050;
    if (v8 >> 62)
    {
      uint64_t v20 = *(void *)(v1 + 72);
      if (v20 < 0) {
        uint64_t v21 = *(void *)(v1 + 72);
      }
      else {
        uint64_t v21 = v8 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(*(void *)(v1 + 72));
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter(v21);
      swift_bridgeObjectRelease(v20);
    }

    else
    {
      uint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    uint64_t v6 = v23;
    uint64_t v15 = *(void *)(v1 + 72);
    swift_bridgeObjectRelease(v15);
    *(void *)(v1 + 24) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v15);
    _os_log_impl( (void *)&_mh_execute_header,  v23,  v22,  "[%@] Force update sync complete with %{public}ld updates",  (uint8_t *)v10,  0x16u);
    uint64_t v16 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v11, 1LL, v16);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    uint64_t v17 = *(void **)(v1 + 32);
    swift_bridgeObjectRelease_n(*(void *)(v1 + 72), 2LL);
  }

  uint64_t v18 = *(void *)(v1 + 56);
  (*(void (**)(uint64_t, void))(*(void *)(v1 + 48) + 8LL))(v18, *(void *)(v1 + 40));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_10003D0AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000079A0(&qword_100458488);
  __chkstk_darwin(v2);
  id v4 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [objc_allocWithZone((Class)type metadata accessor for UpdatesContext()) init];
  static Logger.updates.getter(v9);
  uint64_t v10 = (char *)v9;
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v28 = v5;
    uint64_t v13 = swift_slowAlloc(12LL, -1LL);
    uint64_t v27 = v6;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v25 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v14 = 138412290;
    uint64_t v26 = v1;
    uint64_t v15 = *(void **)&v10[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    uint64_t v29 = v15;
    id v16 = v15;
    uint64_t v5 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v14 + 4, v14 + 12);
    uint64_t v17 = v25;
    void *v25 = v15;
    uint64_t v1 = v26;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%@] Show Pending Updates Badge", v14, 0xCu);
    uint64_t v18 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v17, 1LL, v18);
    swift_slowDealloc(v17, -1LL, -1LL);
    uint64_t v19 = v14;
    uint64_t v6 = v27;
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    uint64_t v11 = (os_log_s *)v10;
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v20 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v4, 1LL, 1LL, v20);
  uint64_t v21 = (void *)swift_allocObject(&unk_1003DE258, 48LL, 7LL);
  _BYTE v21[2] = 0LL;
  v21[3] = 0LL;
  v21[4] = v1;
  void v21[5] = v10;
  swift_retain(v1);
  uint64_t v22 = sub_10004DA7C((uint64_t)v4, (uint64_t)&unk_1004594F0, (uint64_t)v21);
  return swift_release(v22);
}

uint64_t sub_10003D33C()
{
  return sub_10004B74C(*(uint64_t (**)(void))(v0 + 8));
}

uint64_t sub_10003D354(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[15] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[16] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[17] = swift_task_alloc(v6);
  v3[18] = swift_task_alloc(v6);
  v3[19] = swift_task_alloc(v6);
  return swift_task_switch(sub_10003D3D4, v2, 0LL);
}

uint64_t sub_10003D3D4()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[12];
  uint64_t v3 = (void *)v0[13];
  objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v4 = v3;
  id v5 = sub_10006D4CC(5LL, v3, 0LL, 0LL, 0LL, 0, 0, 1, 0LL, 1);
  v0[20] = v5;

  static Logger.updates.getter(v6);
  id v7 = v5;
  swift_bridgeObjectRetain_n(v2, 2LL);
  unint64_t v8 = (char *)v7;
  id v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v28 = v0[16];
    uint64_t v29 = v0[15];
    uint64_t v30 = v0[19];
    uint64_t v26 = v0[12];
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v27;
    *(_DWORD *)uint64_t v11 = 138412546;
    os_log_type_t v12 = *(void **)&v8[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v0[9] = v12;
    id v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v11 + 4, v11 + 12);
    void *v31 = v12;

    *(_WORD *)(v11 + 12) = 2082;
    v0[10] = v26;
    uint64_t v14 = sub_1000079A0(&qword_1004594D8);
    unint64_t v15 = sub_10004B6B8();
    uint64_t v16 = BidirectionalCollection<>.joined(separator:)(8236LL, 0xE200000000000000LL, v14, v15);
    unint64_t v18 = v17;
    v0[11] = sub_100088DB4(v16, v17, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease_n(v26, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "[%@] Starting update all with order: %{public}s",  (uint8_t *)v11,  0x16u);
    uint64_t v19 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v31, 1LL, v19);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v20(v30, v29);
  }

  else
  {
    uint64_t v21 = v0[19];
    uint64_t v22 = v0[15];
    uint64_t v23 = v1[16];
    uint64_t v24 = v1[12];

    swift_bridgeObjectRelease_n(v24, 2LL);
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v20(v21, v22);
  }

  v1[21] = v20;
  v1[22] = [objc_allocWithZone((Class)PerformUpdatesTask) initWithContext:v8];
  return swift_task_switch(sub_10003D70C, 0LL, 0LL);
}

uint64_t sub_10003D70C()
{
  uint64_t v1 = v0[22];
  uint64_t v2 = swift_task_alloc(32LL);
  v0[23] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[24] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10003D79C;
  return withCheckedContinuation<A>(isolation:function:_:)( v3,  0LL,  0LL,  0x29286E7572LL,  0xE500000000000000LL,  sub_10004C4D8,  v2,  (char *)&type metadata for () + 8);
}

uint64_t sub_10003D79C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 192LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10003D7F8, 0LL, 0LL);
}

uint64_t sub_10003D7F8()
{
  return swift_task_switch(sub_10003D80C, *(void *)(v0 + 112), 0LL);
}

uint64_t sub_10003D80C(uint64_t a1, const char *a2)
{
  id v3 = sub_100250038(*(id *)(v2 + 176), a2);
  id v4 = *(void **)(v2 + 160);
  if (v3)
  {
    id v5 = v3;
    static Logger.updates.getter(v3);
    id v6 = v4;
    id v7 = v5;
    id v8 = v6;
    id v9 = v7;
    os_log_type_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = *(char **)(v2 + 160);
    id v13 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 168);
    uint64_t v15 = *(void *)(v2 + 144);
    uint64_t v16 = *(void *)(v2 + 120);
    if (v12)
    {
      uint64_t v55 = *(void *)(v2 + 120);
      uint64_t v17 = swift_slowAlloc(22LL, -1LL);
      os_log_t log = v10;
      unint64_t v18 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      uint64_t v56 = v53;
      *(_DWORD *)uint64_t v17 = 138412546;
      unint64_t v54 = v13;
      uint64_t v19 = *(void **)&v14[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      *(void *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v19;
      id v20 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 40, v2 + 48, v17 + 4, v17 + 12);
      *unint64_t v18 = v19;

      *(_WORD *)(v17 + 12) = 2082;
      swift_getErrorValue(v9, v2 + 48, v2 + 16);
      uint64_t v21 = Error.localizedDescription.getter(*(void *)(v2 + 24), *(void *)(v2 + 32));
      unint64_t v23 = v22;
      *(void *)(v2 + 64) = sub_100088DB4(v21, v22, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 64, v2 + 72, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease(v23);

      _os_log_impl( (void *)&_mh_execute_header,  log,  v11,  "[%@] Error performing update all task: %{public}s",  (uint8_t *)v17,  0x16u);
      uint64_t v24 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v18, 1LL, v24);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      uint64_t v25 = v54(v15, v55);
    }

    else
    {

      uint64_t v25 = v13(v15, v16);
    }

    unint64_t v36 = *(void **)(v2 + 176);
    uint64_t v37 = *(void *)(v2 + 152);
    uint64_t v38 = *(void **)(v2 + 160);
    uint64_t v40 = *(void *)(v2 + 136);
    uint64_t v39 = *(void *)(v2 + 144);
    swift_willThrow(v25);

    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    return (*(uint64_t (**)(void))(v2 + 8))(0LL);
  }

  else
  {
    static Logger.updates.getter(0LL);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v27 = static os_log_type_t.default.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = *(char **)(v2 + 160);
    if (v28)
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v30 = 138412290;
      uint64_t v32 = *(void **)&v29[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      *(void *)(v2 + 56) = v32;
      id v33 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 56, v2 + 64, v30 + 4, v30 + 12);
      void *v31 = v32;

      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%@] Successfully finished update all with order", v30, 0xCu);
      uint64_t v34 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v31, 1LL, v34);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
      unint64_t v35 = *(os_log_s **)(v2 + 160);
    }

    else
    {

      unint64_t v35 = *(os_log_s **)(v2 + 160);
      uint64_t v26 = v35;
    }

    id v43 = *(void (**)(uint64_t, uint64_t))(v2 + 168);
    unint64_t v42 = *(void **)(v2 + 176);
    uint64_t v44 = *(void *)(v2 + 144);
    uint64_t v45 = *(void *)(v2 + 152);
    uint64_t v46 = *(void *)(v2 + 136);
    uint64_t v47 = *(void *)(v2 + 120);

    v43(v46, v47);
    uint64_t v48 = sub_100250050((uint64_t)v42);
    id v49 = [v42 jobResults];
    uint64_t v50 = sub_10001517C(0LL, &qword_1004594D0, &OBJC_CLASS___ASDJobResult_ptr);
    uint64_t v51 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v49, v50);

    swift_task_dealloc(v45);
    swift_task_dealloc(v44);
    swift_task_dealloc(v46);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v48, v51);
  }

uint64_t sub_10003DDFC(uint64_t a1, void *a2, void *aBlock, uint64_t a4)
{
  void v4[2] = a2;
  void v4[3] = a4;
  void v4[4] = _Block_copy(aBlock);
  uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String);
  v4[5] = v8;
  uint64_t v9 = dword_1004593DC;
  id v10 = a2;
  swift_retain(a4);
  os_log_type_t v11 = (void *)swift_task_alloc(v9);
  v4[6] = v11;
  void *v11 = v4;
  v11[1] = sub_10003DE94;
  return sub_10003D354(v8, (uint64_t)a2);
}

uint64_t sub_10003DE94(char a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = *v3;
  uint64_t v9 = *(void *)(*v3 + 40);
  uint64_t v8 = *(void *)(*v3 + 48);
  uint64_t v10 = *(void *)(*v3 + 24);
  uint64_t v11 = *(void *)(*v3 + 32);
  BOOL v12 = *(void **)(*v3 + 16);
  uint64_t v13 = *v3;
  swift_task_dealloc(v8);

  swift_release(v10);
  swift_bridgeObjectRelease(v9);
  if (v4)
  {
    if (v11)
    {
      uint64_t v14 = *(void (***)(void, void, void, void))(v7 + 32);
      uint64_t v15 = (void *)_convertErrorToNSError(_:)(v4);
      swift_errorRelease(v4);
      ((void (**)(void, void, void, void *))v14)[2](v14, 0LL, 0LL, v15);
      _Block_release(v14);
    }

    else
    {
      swift_errorRelease(v4);
    }
  }

  else
  {
    if (v11)
    {
      uint64_t v16 = *(void (***)(void, void, void, void))(v7 + 32);
      sub_10001517C(0LL, &qword_1004594D0, &OBJC_CLASS___ASDJobResult_ptr);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      ((void (**)(void, void, Class, void))v16)[2](v16, a1 & 1, isa, 0LL);
      _Block_release(v16);
    }

    swift_bridgeObjectRelease(a2);
  }

  return (*(uint64_t (**)(void))(v13 + 8))();
}

uint64_t sub_10003DFC8(uint64_t a1, uint64_t a2)
{
  *(void *)(v3 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = a1;
  *(void *)(v3 + 88) = a2;
  return swift_task_switch(sub_10003DFE0, v2, 0LL);
}

uint64_t sub_10003DFE0()
{
  *(_OWORD *)(v0 + 64) = xmmword_100373B90;
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseStore);
  id v4 = sub_100237D18(v3);
  id v5 = (void *)swift_allocObject(&unk_1003DE1E0, 40LL, 7LL);
  v5[2] = v0 + 64;
  void v5[3] = v2;
  v5[4] = v1;
  uint64_t v6 = swift_allocObject(&unk_1003DE208, 32LL, 7LL);
  *(void *)(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v6 + 16) = sub_10004B69C;
  *(void *)(v6 + 24) = v5;
  *(void *)(v0 + 48) = sub_10004C57C;
  *(void *)(v0 + 56) = v6;
  *(void *)(v0 + 24) = 1107296256LL;
  *(void *)(v0 + 32) = sub_10000CF5C;
  *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = &unk_1003DE220;
  uint64_t v7 = _Block_copy((const void *)(v0 + 16));
  uint64_t v8 = *(void *)(v0 + 56);
  swift_bridgeObjectRetain(v1);
  swift_retain(v6);
  swift_release(v8);
  [v4 readUsingSession:v7];

  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v6, "", 88LL, 439LL, 45LL, 1LL);
  uint64_t result = swift_release(v6);
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v11 = *(void *)(v0 + 72);
    swift_release(v5);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v10, v11);
  }

  return result;
}

uint64_t sub_10003E158(void *a1, uint64_t *a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = sub_100320394(a1, v4);

  if (v5)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    unint64_t v8 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
    unint64_t v8 = 0xF000000000000000LL;
  }

  uint64_t v9 = *a2;
  unint64_t v10 = a2[1];
  *a2 = v6;
  a2[1] = v8;
  return sub_1000188F4(v9, v10);
}

uint64_t sub_10003E30C(uint64_t a1, void *aBlock, uint64_t a3)
{
  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  v3[4] = v7;
  uint64_t v9 = dword_1004593E4;
  swift_retain(a3);
  unint64_t v10 = (void *)swift_task_alloc(v9);
  v3[5] = v10;
  *unint64_t v10 = v3;
  v10[1] = sub_10003E3A8;
  v10[10] = v6;
  v10[11] = v8;
  return swift_task_switch(sub_10003DFE0, a3, 0LL);
}

uint64_t sub_10003E3A8(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *v2;
  uint64_t v7 = *(void *)(*v2 + 32);
  uint64_t v6 = *(void *)(*v2 + 40);
  uint64_t v8 = *(void *)(*v2 + 16);
  uint64_t v9 = *v2;
  swift_task_dealloc(v6);
  swift_bridgeObjectRelease(v7);
  swift_release(v8);
  if (a2 >> 60 == 15)
  {
    Class isa = 0LL;
  }

  else
  {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_1000188F4(a1, a2);
  }

  uint64_t v11 = *(void (***)(void, void))(v5 + 24);
  ((void (**)(void, Class))v11)[2](v11, isa);

  _Block_release(v11);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_10003E59C(void *a1, void *aBlock, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  id v6 = a1;
  swift_retain(a3);
  return swift_task_switch(sub_10003E5F4, a3, 0LL);
}

uint64_t sub_10003E5F4()
{
  uint64_t v1 = (void *)v0[2];
  id v2 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v3 = v1;
  id v4 = sub_10006D4CC(0LL, v1, 0LL, 0LL, 0LL, 0, 0, 0, 0LL, 1);
  v0[5] = v4;

  uint64_t v5 = (void *)swift_task_alloc(dword_1004593F4);
  v0[6] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10003E6A4;
  return sub_10003FF24((uint64_t)v4, v6);
}

uint64_t sub_10003E6A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
  *(void *)(*(void *)v1 + 56LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10003E704, v3, 0LL);
}

uint64_t sub_10003E704()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void (***)(void, void))(v0 + 32);
  id v4 = *(void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);

  swift_release(v3);
  sub_10001517C(0LL, (unint64_t *)&qword_100459588, &OBJC_CLASS___ASDSoftwareUpdate_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v1);
  ((void (**)(void, Class))v2)[2](v2, isa);

  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10003E79C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1000079A0(&qword_100458488);
  __chkstk_darwin(v2);
  id v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v21 = 0;
  id v5 = objc_allocWithZone((Class)type metadata accessor for LogKey());
  uint64_t v6 = sub_100091D84( 0LL,  0xE000000000000000LL,  "/",  1LL,  2u,  0LL,  0xE000000000000000LL,  0xD00000000000001BLL,  0x80000001003441C0LL,  0LL);
  uint64_t v7 = swift_allocObject(&unk_1003DE0A0, 24LL, 7LL);
  *(void *)(v7 + 16) = _swiftEmptyArrayStorage;
  uint64_t v8 = objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseStore);
  id v9 = sub_100237D18(v8);
  unint64_t v10 = (void *)swift_allocObject(&unk_1003DE0C8, 40LL, 7LL);
  v10[2] = v6;
  v10[3] = &v21;
  v10[4] = v7 + 16;
  uint64_t v11 = swift_allocObject(&unk_1003DE0F0, 32LL, 7LL);
  *(void *)(v11 + 16) = sub_10004B580;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_1000366C0;
  uint64_t v20 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100028ECC;
  aBlock[3] = &unk_1003DE108;
  BOOL v12 = _Block_copy(aBlock);
  uint64_t v13 = v20;
  uint64_t v14 = v6;
  swift_retain(v11);
  swift_release(v13);
  [v9 modifyUsingTransaction:v12];

  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v11, "", 88LL, 459LL, 47LL, 1LL);
  swift_release(v11);
  if ((v9 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    if (v21 == 1)
    {
      uint64_t v15 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v4, 1LL, 1LL, v15);
      uint64_t v16 = (void *)swift_allocObject(&unk_1003DE140, 48LL, 7LL);
      void v16[2] = 0LL;
      v16[3] = 0LL;
      v16[4] = v1;
      v16[5] = v7;
      swift_retain(v1);
      swift_retain(v7);
      uint64_t v17 = sub_10004DA7C((uint64_t)v4, (uint64_t)&unk_1004594C8, (uint64_t)v16);
      swift_release(v17);
    }

    swift_release(v7);
    swift_release(v10);
  }

uint64_t sub_10003EA40(void *a1, void *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for MediaAPIUpdateEntity();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v8);
  id v10 = [a1 connection];
  id v11 = sub_10024C1D0(ObjCClassFromMetadata, v10, 0LL);

  BOOL v12 = (void *)swift_allocObject(&unk_1003DE168, 48LL, 7LL);
  v12[2] = a1;
  v12[3] = a2;
  v12[4] = a3;
  void v12[5] = a4;
  uint64_t v13 = swift_allocObject(&unk_1003DE190, 32LL, 7LL);
  *(void *)(v13 + 16) = sub_10004B65C;
  *(void *)(v13 + 24) = v12;
  v20[4] = sub_10002A7F8;
  uint64_t v21 = v13;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 1107296256LL;
  v20[2] = sub_100050A30;
  v20[3] = &unk_1003DE1A8;
  uint64_t v14 = _Block_copy(v20);
  uint64_t v15 = v21;
  id v16 = a1;
  id v17 = a2;
  swift_retain(v13);
  swift_release(v15);
  [v11 enumeratePersistentIDsUsingBlock:v14];

  _Block_release(v14);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation(v13, "", 88LL, 461LL, 41LL, 1LL);
  uint64_t result = swift_release(v13);
  if ((a2 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v19 = *a3;
    swift_release(v12);
    return v19;
  }

  return result;
}

void sub_10003EBDC(uint64_t a1, int a2, int a3, id a4, void *a5, _BYTE *a6, void *a7)
{
  id v12 = [a4 connection];
  id v25 = [objc_allocWithZone((Class)type metadata accessor for MediaAPIUpdateEntity()) initWithPersistentID:a1 onConnection:v12];

  if ([v25 existsInDatabase])
  {
    if (sub_1002A1984((uint64_t)a4, v25, a5))
    {
      *a6 = 1;
      id v13 = sub_1001E26D0(v25, (uint64_t)@"bundle_id");
      if (v13)
      {
        uint64_t v14 = v13;
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
        uint64_t v17 = v16;

        unint64_t v18 = (void *)*a7;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a7);
        *a7 = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v18 = sub_100088568(0LL, v18[2] + 1LL, 1, v18);
          *a7 = v18;
        }

        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        unint64_t v22 = v21 + 1;
        if (v21 >= v20 >> 1)
        {
          uint64_t v24 = sub_100088568((void *)(v20 > 1), v21 + 1, 1, v18);
          unint64_t v22 = v21 + 1;
          unint64_t v18 = v24;
          *a7 = v24;
        }

        v18[2] = v22;
        unint64_t v23 = &v18[2 * v21];
        v23[4] = v15;
        v23[5] = v17;
      }
    }
  }
}

uint64_t sub_10003ED4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = a4;
  *(void *)(v5 + 48) = a5;
  return swift_task_switch(sub_10003ED64, 0LL, 0LL);
}

uint64_t sub_10003ED64()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[6];
  v0[7] = [objc_allocWithZone((Class)type metadata accessor for UpdatesContext()) init];
  swift_beginAccess(v2 + 16, v0 + 2, 0LL, 0LL);
  uint64_t v3 = *(void *)(v2 + 16);
  v0[8] = v3;
  swift_bridgeObjectRetain(v3);
  return swift_task_switch(sub_10003EDE8, v1, 0LL);
}

uint64_t sub_10003EDE8()
{
  uint64_t v1 = *(void *)(v0 + 64);
  sub_10004A644(*(void **)(v0 + 56), 0xD000000000000010LL, 0x80000001003441E0LL, v1);
  swift_bridgeObjectRelease(v1);
  return swift_task_switch(sub_10003EE48, 0LL, 0LL);
}

uint64_t sub_10003EE48()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10003EE8C(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v24 = 0LL;
  uint64_t v8 = objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseStore);
  id v9 = sub_100237D18(v8);
  uint64_t v10 = swift_allocObject(&unk_1003DE028, 32LL, 7LL);
  *(void *)(v10 + 16) = &v24;
  *(void *)(v10 + 24) = ObjectType;
  uint64_t v11 = swift_allocObject(&unk_1003DE050, 32LL, 7LL);
  *(void *)(v11 + 16) = sub_10004B544;
  *(void *)(v11 + 24) = v10;
  v22[3] = sub_10004C57C;
  uint64_t v23 = v11;
  aBlock = _NSConcreteStackBlock;
  v22[0] = 1107296256LL;
  v22[1] = sub_10000CF5C;
  void v22[2] = &unk_1003DE068;
  id v12 = _Block_copy(&aBlock);
  uint64_t v13 = v23;
  swift_retain(v11);
  swift_release(v13);
  [v9 readUsingSession:v12];

  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v11, "", 88LL, 576LL, 54LL, 1LL);
  uint64_t result = swift_release(v11);
  if ((v9 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v15 = static Logger.updates.getter(result);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)unint64_t v18 = 134349056;
      swift_beginAccess(&v24, v20, 0LL, 0LL);
      aBlock = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v22, v18 + 4, v18 + 12);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Current update count is: %{public}ld", v18, 0xCu);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
    swift_beginAccess(&v24, &aBlock, 0LL, 0LL);
    uint64_t v19 = v24;
    swift_release(v10);
    return (uint64_t)v19;
  }

  return result;
}

void sub_10003F110(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for MediaAPIUpdateEntity();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
  uint64_t v6 = qword_100458068;
  uint64_t v7 = @"ROWID";
  if (v6 != -1) {
    swift_once(&qword_100458068, sub_100038C3C);
  }
  uint64_t v8 = (void *)qword_100459318;
  id v9 = [a1 connection];
  id v10 = sub_10024C290(ObjCClassFromMetadata, v7, v8, v9);

  _bridgeAnyObjectToAny(_:)(v15, v10);
  swift_unknownObjectRelease(v10);
  uint64_t v11 = sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
  if ((swift_dynamicCast(&v14, v15, (char *)&type metadata for Any + 8, v11, 6LL) & 1) != 0)
  {
    id v12 = v14;
    id v13 = [v14 integerValue];

    *a2 = v13;
  }

uint64_t sub_10003F250(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0(&qword_100459DF0);
  uint64_t v5 = swift_allocObject(v4, 56LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_100372E80;
  *(_OWORD *)(v5 + 32) = xmmword_100373B70;
  *(void *)(v5 + 48) = 3LL;
  NSString v6 = String._bridgeToObjectiveC()();
  v22[0] = v5;
  swift_bridgeObjectRetain(v5);
  uint64_t v7 = sub_1000079A0((uint64_t *)&unk_100459440);
  uint64_t v8 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v22, v7);
  id v9 = (void *)objc_opt_self(&OBJC_CLASS___SQLiteContainsPredicate);
  id v10 = objc_msgSend(v9, "containsPredicateWithProperty:values:", v6, v8, v22[0]);
  swift_bridgeObjectRelease(v5);
  swift_unknownObjectRelease(v8);

  uint64_t v11 = type metadata accessor for MediaAPIUpdateEntity();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v11);
  id v13 = [a1 connection];
  id v14 = sub_10024C1D0(ObjCClassFromMetadata, v13, v10);

  uint64_t v15 = sub_100056154((uint64_t)&off_1003DB428);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  uint64_t v17 = swift_allocObject(&unk_1003DDE20, 24LL, 7LL);
  *(void *)(v17 + 16) = a2;
  uint64_t v18 = swift_allocObject(&unk_1003DDE48, 32LL, 7LL);
  *(void *)(v18 + 16) = sub_10004B2EC;
  *(void *)(v18 + 24) = v17;
  void v22[4] = sub_10002A7F8;
  uint64_t v23 = v18;
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 1107296256LL;
  void v22[2] = sub_100056278;
  v22[3] = &unk_1003DDE60;
  uint64_t v19 = _Block_copy(v22);
  uint64_t v20 = v23;
  swift_retain(v18);
  swift_release(v20);
  [v14 enumerateMemoryEntitiesWithProperties:isa usingBlock:v19];

  _Block_release(v19);
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = swift_isEscapingClosureAtFileLocation(v18, "", 88LL, 590LL, 95LL, 1LL);
  swift_release(v17);
  uint64_t result = swift_release(v18);
  return result;
}

void sub_10003F4CC(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = type metadata accessor for MediaAPIUpdate();
  if (swift_dynamicCastClass(a1, v6))
  {
    uint64_t v7 = swift_dynamicCastClassUnconditional(a1, v6, 0LL, 0LL, 0LL);
    id v13 = a1;
    id v8 = sub_1000708AC();
    if (v8)
    {
      uint64_t v9 = (uint64_t)v8;
      id v10 = v13;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a4);
      uint64_t v14 = *a4;
      *a4 = 0x8000000000000000LL;
      sub_1000797FC(v7, v9, isUniquelyReferenced_nonNull_native);
      uint64_t v12 = *a4;
      *a4 = v14;

      swift_bridgeObjectRelease(v12);
    }

    else
    {
    }
  }

uint64_t sub_10003F5C0(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[6] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  return swift_task_switch(sub_10003F630, v1, 0LL);
}

uint64_t sub_10003F630()
{
  uint64_t v1 = objc_opt_self(&OBJC_CLASS___Restrictions);
  id v2 = sub_1002735AC(v1);
  if ((_DWORD)v2 && (id v2 = (id)sub_10027362C(v1), (_DWORD)v2))
  {
    uint64_t v3 = *(void *)(*(void *)(v0 + 24) + OBJC_IVAR____TtC9appstored14UpdatesContext_logKey);
    *(void *)(v0 + 72) = v3;
    uint64_t v4 = (void *)swift_task_alloc(dword_10045A3C4);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10003F8AC;
    return sub_10007C5DC(v3);
  }

  else
  {
    uint64_t v6 = *(void **)(v0 + 24);
    static Logger.updates.getter(v2);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    id v10 = *(char **)(v0 + 24);
    if (v9)
    {
      os_log_type_t type = v8;
      uint64_t v11 = swift_slowAlloc(24LL, -1LL);
      uint64_t v12 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v11 = 138412802;
      id v13 = *(void **)&v10[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      *(void *)(v0 + 16) = v13;
      id v14 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v11 + 4, v11 + 12);
      *uint64_t v12 = v13;

      *(_WORD *)(v11 + 12) = 1026;
      *(_DWORD *)(v0 + 96) = sub_1002735AC(v1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 100, v11 + 14, v11 + 18);
      *(_WORD *)(v11 + 18) = 1026;
      *(_DWORD *)(v0 + 10_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = sub_10027362C(v1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 100, v0 + 104, v11 + 20, v11 + 24);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  type,  "[%@] Skipping provisioned app install due to restrictions disabled: auto-downloads: %{BOOL,public}d app-install- allowed: %{BOOL,public}d",  (uint8_t *)v11,  0x18u);
      uint64_t v15 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v12, 1LL, v15);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
    }

    (*(void (**)(void, void))(*(void *)(v0 + 48) + 8LL))(*(void *)(v0 + 56), *(void *)(v0 + 40));
    uint64_t v16 = *(void *)(v0 + 56);
    swift_task_dealloc(*(void *)(v0 + 64));
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

uint64_t sub_10003F8AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 88LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10003F90C, v3, 0LL);
}

uint64_t sub_10003F90C()
{
  uint64_t v1 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
  CFPropertyListRef v2 = (id)sub_1002FA180(v1);
  uint64_t v3 = *(void *)(v0 + 88);
  if (v2)
  {
    uint64_t v4 = (void *)v2;
    uint64_t v58 = sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v58);

    uint64_t v57 = *(void *)(v3 + 16);
    if (v57)
    {
      if ((unint64_t)v5 >> 62)
      {
LABEL_58:
        if (v5 < 0) {
          uint64_t v51 = v5;
        }
        else {
          uint64_t v51 = v5 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v5);
        uint64_t v60 = _CocoaArrayWrapper.endIndex.getter(v51);
        swift_bridgeObjectRelease(v5);
      }

      else
      {
        uint64_t v60 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      }

      unint64_t v6 = 0LL;
      uint64_t v52 = *(void *)(v0 + 72);
      uint64_t v56 = *(void *)(v0 + 88) + 32LL;
      uint64_t v54 = *(void *)(v0 + 48);
      unint64_t v55 = v5 & 0xC000000000000001LL;
      uint64_t v7 = _swiftEmptyArrayStorage;
      uint64_t v53 = v3;
      uint64_t v59 = v5;
      while (1)
      {
        if (v6 >= *(void *)(v3 + 16))
        {
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          goto LABEL_58;
        }

        uint64_t v11 = (void *)(v56 + 16 * v6);
        uint64_t v13 = *v11;
        uint64_t v12 = v11[1];
        id v14 = [objc_allocWithZone(NSNumber) initWithUnsignedLongLong:*v11];
        if (v60)
        {
          if (v55)
          {
            swift_bridgeObjectRetain(v5);
            id v16 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v5);
          }

          else
          {
            uint64_t v15 = *(void **)(v5 + 32);
            swift_bridgeObjectRetain(v5);
            id v16 = v15;
          }

          uint64_t v17 = v16;
          char v18 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

          if ((v18 & 1) != 0)
          {
            uint64_t v5 = v59;
LABEL_15:
            swift_bridgeObjectRelease(v5);
LABEL_16:

            uint64_t v19 = *(void **)(v0 + 24);
            static Logger.updates.getter(v20);
            os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v19);
            os_log_type_t v21 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v8, v21))
            {
              unint64_t v22 = *(void **)(v0 + 72);
              uint64_t v23 = *(void **)(v0 + 24);
              uint64_t v24 = swift_slowAlloc(22LL, -1LL);
              id v25 = (void *)swift_slowAlloc(8LL, -1LL);
              *(_DWORD *)uint64_t v24 = 138412546;
              *(void *)(v24 + 4) = v22;
              void *v25 = v52;
              id v26 = v22;
              uint64_t v3 = v53;

              *(_WORD *)(v24 + 12) = 2050;
              *(void *)(v24 + 14) = v13;
              _os_log_impl( (void *)&_mh_execute_header,  v8,  v21,  "[%@] app with item ID %{public}llu is not eligible as it has been previously installed",  (uint8_t *)v24,  0x16u);
              uint64_t v27 = sub_1000079A0((uint64_t *)&unk_100458F50);
              swift_arrayDestroy(v25, 1LL, v27);
              BOOL v28 = v25;
              uint64_t v5 = v59;
              swift_slowDealloc(v28, -1LL, -1LL);
              swift_slowDealloc(v24, -1LL, -1LL);
            }

            else
            {

              os_log_type_t v8 = *(os_log_s **)(v0 + 24);
            }

            uint64_t v9 = *(void *)(v0 + 64);
            uint64_t v10 = *(void *)(v0 + 40);

            (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v9, v10);
            goto LABEL_8;
          }

          uint64_t v5 = v59;
          if (v60 != 1)
          {
            if (v55)
            {
              uint64_t v32 = specialized _ArrayBuffer._getElementSlowPath(_:)(1LL, v59);
              char v33 = static NSObject.== infix(_:_:)(v32, v14);
              swift_unknownObjectRelease(v32);
              if ((v33 & 1) != 0) {
                goto LABEL_15;
              }
              if (v60 != 2)
              {
                uint64_t v5 = 2LL;
                while (1)
                {
                  uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v59);
                  uint64_t v3 = v5 + 1;
                  if (__OFADD__(v5, 1LL)) {
                    goto LABEL_56;
                  }
                  uint64_t v35 = v34;
                  char v36 = static NSObject.== infix(_:_:)(v34, v14);
                  swift_unknownObjectRelease(v35);
                  if ((v36 & 1) != 0) {
                    goto LABEL_40;
                  }
                  ++v5;
                  if (v3 == v60) {
                    goto LABEL_39;
                  }
                }
              }
            }

            else
            {
              id v37 = *(id *)(v59 + 40);
              char v38 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

              if ((v38 & 1) != 0) {
                goto LABEL_15;
              }
              if (v60 != 2)
              {
                uint64_t v5 = 6LL;
                while (1)
                {
                  uint64_t v3 = v5 - 3;
                  if (__OFADD__(v5 - 4, 1LL)) {
                    goto LABEL_57;
                  }
                  id v39 = *(id *)(v59 + 8 * v5);
                  char v40 = ((uint64_t (*)(void))static NSObject.== infix(_:_:))();

                  if ((v40 & 1) != 0)
                  {
LABEL_40:
                    uint64_t v5 = v59;
                    swift_bridgeObjectRelease(v59);
                    uint64_t v3 = v53;
                    goto LABEL_16;
                  }

                  ++v5;
                  if (v3 == v60)
                  {
LABEL_39:
                    uint64_t v5 = v59;
                    swift_bridgeObjectRelease(v59);
                    uint64_t v3 = v53;
                    goto LABEL_20;
                  }
                }
              }
            }
          }

          swift_bridgeObjectRelease(v59);
        }

uint64_t sub_10003FF24(uint64_t a1, uint64_t a2)
{
  v3[12] = a1;
  v3[13] = v2;
  v3[14] = swift_getObjectType(v2, a2);
  uint64_t v4 = sub_1000079A0((uint64_t *)&unk_100459410);
  v3[15] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v3[16] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[17] = v6;
  v3[18] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10003FFB4, 0LL, 0LL);
}

uint64_t sub_10003FFB4()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = (void *)v0[12];
  v0[8] = _swiftEmptyArrayStorage;
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseStore);
  id v4 = sub_100237D18(v3);
  uint64_t v5 = (void *)swift_allocObject(&unk_1003DDF38, 40LL, 7LL);
  v0[19] = v5;
  v5[2] = v2;
  void v5[3] = v0 + 8;
  v5[4] = v1;
  uint64_t v6 = swift_allocObject(&unk_1003DDF60, 32LL, 7LL);
  v0[2] = _NSConcreteStackBlock;
  *(void *)(v6 + 16) = sub_10004B4F8;
  *(void *)(v6 + 24) = v5;
  v0[6] = sub_10004C57C;
  v0[7] = v6;
  v0[3] = 1107296256LL;
  v0[4] = sub_10000CF5C;
  v0[5] = &unk_1003DDF78;
  uint64_t v7 = _Block_copy(v0 + 2);
  uint64_t v8 = v0[7];
  id v9 = v2;
  swift_retain(v6);
  swift_release(v8);
  [v4 readUsingSession:v7];

  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v6, "", 88LL, 641LL, 45LL, 1LL);
  uint64_t result = swift_release(v6);
  if ((v4 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
    *((_BYTE *)v0 + 176) = sub_1002FA098(v11);
    uint64_t v12 = (void *)swift_task_alloc(dword_1004593EC);
    v0[20] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100040154;
    return sub_10003F5C0(v0[12]);
  }

  return result;
}

uint64_t sub_100040154(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160LL);
  *(void *)(*(void *)v1 + 168LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000401B0, 0LL, 0LL);
}

uint64_t sub_1000401B0()
{
  uint64_t v1 = v0 + 96;
  uint64_t v2 = v0 + 64;
  uint64_t v3 = *(void *)(v0 + 168);
  char v4 = *(_BYTE *)(v0 + 176);
  id v5 = *(id *)(v0 + 96);
  swift_bridgeObjectRetain(v3);
  uint64_t v6 = v3;
  unint64_t v7 = 0LL;
  sub_100049758((uint64_t *)(v0 + 64), v6, v5, v4);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (v11 >= v8) {
    goto LABEL_3;
  }
LABEL_45:
  __break(1u);
LABEL_46:
  if (v2 < 0) {
    uint64_t v51 = v2;
  }
  else {
    uint64_t v51 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t result = _CocoaArrayWrapper.endIndex.getter(v51);
  uint64_t v9 = result;
LABEL_5:
  Swift::Int v68 = (os_log_s **)v1;
  uint64_t v69 = (void *)v0;
  unint64_t v67 = v7;
  if (v9)
  {
    if (v9 >= 1)
    {
      uint64_t v14 = 0LL;
      uint64_t v15 = 0LL;
      id v16 = 0LL;
      unint64_t v7 = v2 & 0xC000000000000001LL;
      uint64_t v1 = 1LL;
      uint64_t v0 = 25LL;
      while (1)
      {
        if (v7) {
          id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v2);
        }
        else {
          id v18 = *(id *)(v2 + 8 * v14 + 32);
        }
        uint64_t v10 = (uint64_t)v18;
        unint64_t v19 = (unint64_t)[v18 updateState];

        if (v19 > 4 || ((1LL << v19) & 0x19) == 0)
        {
          BOOL v17 = __OFADD__(v15, 1LL);
          uint64_t v15 = (os_log_s *)((char *)v15 + 1);
          if (v17)
          {
            __break(1u);
LABEL_41:
            if (v10 < 0) {
              uint64_t v50 = v10;
            }
            else {
              uint64_t v50 = v10 & 0xFFFFFFFFFFFFFF8LL;
            }
            swift_bridgeObjectRetain(v10);
            uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v50);
            swift_bridgeObjectRelease(v10);
            if (v11 < v9) {
              goto LABEL_45;
            }
LABEL_3:
            uint64_t v12 = *(void *)(v0 + 168);
            sub_1000803C4(v9, v11);
            swift_bridgeObjectRelease(v12);
            uint64_t v2 = *(void *)(v0 + 64);
            if (!((unint64_t)v2 >> 62))
            {
              uint64_t v9 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
              uint64_t result = swift_bridgeObjectRetain_n(*(void *)(v0 + 64), 2LL);
              goto LABEL_5;
            }

            goto LABEL_46;
          }
        }

        else
        {
          BOOL v17 = __OFADD__(v16, 1LL);
          id v16 = (os_log_s *)((char *)v16 + 1);
          if (v17)
          {
            __break(1u);
            goto LABEL_20;
          }
        }

        if (v9 == ++v14) {
          goto LABEL_21;
        }
      }
    }

    __break(1u);
    goto LABEL_64;
  }

uint64_t sub_100040844(id a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t isEscapingClosureAtFileLocation = a2;
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC9appstored14UpdatesContext_isVPPLookup) != 1)
  {
    if (qword_100458060 != -1) {
      goto LABEL_13;
    }
    goto LABEL_4;
  }

  NSString v7 = String._bridgeToObjectiveC()();
  aBlock[0] = 8LL;
  uint64_t v8 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(aBlock, &type metadata for Int);
  id v9 =  [(id)objc_opt_self(SQLiteComparisonPredicate) predicateWithProperty:v7 value:v8 comparisonType:6];

  swift_unknownObjectRelease(v8);
  while (1)
  {
    uint64_t v12 = &off_1003DB428;
    if (*(_BYTE *)(isEscapingClosureAtFileLocation + OBJC_IVAR____TtC9appstored14UpdatesContext_includeMetrics) == 1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(&off_1003DB428) & 1) == 0) {
        uint64_t v12 = sub_100088568(0LL, 10LL, 1, &off_1003DB428);
      }
      unint64_t v14 = v12[2];
      unint64_t v13 = v12[3];
      if (v14 >= v13 >> 1) {
        uint64_t v12 = sub_100088568((void *)(v13 > 1), v14 + 1, 1, v12);
      }
      v12[2] = v14 + 1;
      uint64_t v15 = (char *)&v12[2 * v14];
      strcpy(v15 + 32, "metrics_data");
      v15[45] = 0;
      *((_WORD *)v15 + 23) = -5120;
    }

    uint64_t v16 = type metadata accessor for MediaAPIUpdate();
    uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v16);
    id v18 = [a1 connection];
    uint64_t v19 = sub_1000079A0((uint64_t *)&unk_1004594A0);
    uint64_t v20 = swift_allocObject(v19, 64LL, 7LL);
    *(_OWORD *)(v20 + 16) = xmmword_100372930;
    *(void *)(v20 + 56) = &type metadata for String;
    strcpy((char *)(v20 + 32), "install_date");
    *(_BYTE *)(v20 + 45) = 0;
    *(_WORD *)(v20 + 46) = -5120;
    a1 = v9;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v20);
    id v22 = sub_10024CC48(ObjCClassFromMetadata, v18, a1, isa);

    uint64_t v23 = sub_100056154((uint64_t)v12);
    swift_bridgeObjectRelease(v12);
    Class v24 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v23);
    BOOL v25 = (void *)swift_allocObject(&unk_1003DDFB0, 40LL, 7LL);
    v25[2] = isEscapingClosureAtFileLocation;
    v25[3] = a3;
    v25[4] = a4;
    uint64_t v26 = swift_allocObject(&unk_1003DDFD8, 32LL, 7LL);
    *(void *)(v26 + 16) = sub_10004B518;
    *(void *)(v26 + 24) = v25;
    aBlock[4] = sub_10004C530;
    uint64_t v32 = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_100056278;
    aBlock[3] = &unk_1003DDFF0;
    a3 = _Block_copy(aBlock);
    uint64_t v27 = v32;
    id v28 = (id)isEscapingClosureAtFileLocation;
    swift_retain(v26);
    swift_release(v27);
    [v22 enumerateMemoryEntitiesWithProperties:v24 usingBlock:a3];

    _Block_release(a3);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v26, "", 88LL, 658LL, 209LL, 1LL);
    swift_release(v26);
    uint64_t result = swift_release(v25);
    if ((isEscapingClosureAtFileLocation & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_13:
    swift_once(&qword_100458060, sub_100038AD0);
LABEL_4:
    uint64_t v10 = sub_100055EF4(qword_100459310);
    Class v11 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v10);
    id v9 =  [(id)objc_opt_self(SQLiteCompoundPredicate) predicateMatchingAllPredicates:v11];
  }

  return result;
}

void sub_100040C54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Class v11 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_1000079A0((uint64_t *)&unk_100459410);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = (char *)&v77 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v77 - v19;
  uint64_t v21 = type metadata accessor for MediaAPIUpdate();
  uint64_t v22 = swift_dynamicCastClass(a1, v21);
  if (!v22) {
    return;
  }
  uint64_t v23 = (void *)v22;
  id v82 = v11;
  uint64_t v83 = a5;
  int v24 = *(unsigned __int8 *)(a4 + OBJC_IVAR____TtC9appstored14UpdatesContext_isVPPLookup);
  id v84 = a1;
  if (v24 == 1)
  {
    NSString v25 = String._bridgeToObjectiveC()();
    unsigned __int8 v26 = sub_1001E2698(v23, (uint64_t)v25);

    if ((v26 & 8) == 0)
    {
      NSString v27 = String._bridgeToObjectiveC()();
      unsigned __int8 v28 = sub_1001E2698(v23, (uint64_t)v27);

      if ((v28 & 0x10) == 0) {
        goto LABEL_6;
      }
    }
  }

  __int128 v81 = v15;
  uint64_t v29 = sub_100070954();
  if (v30 >> 60 == 15)
  {
LABEL_6:

    return;
  }

  uint64_t v31 = v29;
  unint64_t v32 = v30;
  uint64_t v33 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v87[0] = 0LL;
  id v35 = [v33 JSONObjectWithData:isa options:0 error:v87];

  id v36 = v87[0];
  if (!v35)
  {
    id v49 = v87[0];
    uint64_t v50 = _convertNSErrorToError(_:)(v36);

    swift_willThrow(v51);
    sub_1000188F4(v31, v32);

    swift_errorRelease(v50);
    return;
  }

  uint64_t v80 = v31;
  id v37 = v87[0];
  _bridgeAnyObjectToAny(_:)(v87, v35);
  swift_unknownObjectRelease(v35);
  uint64_t v38 = sub_1000079A0(&qword_100459DC0);
  if ((swift_dynamicCast(v86, v87, (char *)&type metadata for Any + 8, v38, 6LL) & 1) == 0)
  {
    sub_1000188F4(v80, v32);

    return;
  }

  uint64_t v77 = v38;
  unint64_t v78 = v32;
  uint64_t v39 = *(void *)&v86[0];
  uint64_t v40 = sub_10004AC44(*(uint64_t *)&v86[0]);
  swift_bridgeObjectRelease(v39);
  uint64_t v41 = sub_1000709E4(v40);
  swift_bridgeObjectRelease(v40);
  id v42 = objc_allocWithZone(&OBJC_CLASS___ASDSoftwareUpdate);
  Class v43 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v41);
  id v44 = [v42 initWithUpdateDictionary:v43];

  id v79 = v44;
  if (!v44)
  {
    __break(1u);
    return;
  }

  uint64_t v45 = v9;
  unint64_t v46 = v79;
  if (*(_BYTE *)(a4 + OBJC_IVAR____TtC9appstored14UpdatesContext_includeMetrics) == 1)
  {
    NSString v47 = String._bridgeToObjectiveC()();
    id v48 = [v84 valueForProperty:v47];

    if (v48)
    {
      _bridgeAnyObjectToAny(_:)(v86, v48);
      swift_unknownObjectRelease(v48);
    }

    else
    {
      memset(v86, 0, sizeof(v86));
    }

    sub_100026CD4((uint64_t)v86, (uint64_t)v87, (uint64_t *)&unk_1004594B0);
    if (v87[3])
    {
      if ((swift_dynamicCast(&v85, v87, (char *)&type metadata for Any + 8, v77, 6LL) & 1) != 0)
      {
        uint64_t v52 = v85;
        uint64_t v53 = sub_1000709E4(v85);
        swift_bridgeObjectRelease(v52);
        v54.super.Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v53);
LABEL_21:
        [v46 setMetrics:v54.super.isa];

        goto LABEL_22;
      }
    }

    else
    {
      sub_100015240((uint64_t)v87, (uint64_t *)&unk_1004594B0);
    }

    v54.super.Class isa = 0LL;
    goto LABEL_21;
  }

uint64_t sub_100041468(id *a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v5 = v4;
  LODWORD(v51) = a4;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = *a1;
  id v14 = [*a1 bundleIdentifier];
  NSDictionary v54 = v12;
  if (v14)
  {
    uint64_t v15 = v14;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v16 = a3;
    uint64_t v18 = v17;

    NSString v19 = String._bridgeToObjectiveC()();
    uint64_t v20 = v18;
    uint64_t v12 = v54;
    swift_bridgeObjectRelease(v20);
    id v21 = [(id)objc_opt_self(ApplicationProxy) proxyForBundleID:v19];

    a3 = v16;
    if (v21)
    {
      if ([v21 isInstalled])
      {
LABEL_10:

        [v13 setAutoUpdateEnabled:v51 & 1];
        return 0LL;
      }

      uint64_t v22 = *(void *)(a2 + 16);
      if (v22)
      {
        uint64_t v52 = v9;
        uint64_t v53 = v10;
        swift_bridgeObjectRetain(a2);
        uint64_t v23 = 80LL;
        do
        {
          int v24 = *(void **)(a2 + v23);
          unint64_t v25 = (unint64_t)[v21 storeItemID];
          if ((v25 & 0x8000000000000000LL) == 0 && v24 == (void *)v25)
          {
            swift_bridgeObjectRelease(a2);
            goto LABEL_10;
          }

          v23 += 96LL;
          --v22;
        }

        while (v22);

        id v14 = (id)swift_bridgeObjectRelease(a2);
        uint64_t v5 = v4;
        uint64_t v9 = v52;
        uint64_t v10 = v53;
        uint64_t v12 = v54;
      }

      else
      {
      }

      a3 = v16;
    }
  }

  uint64_t v52 = v9;
  uint64_t v53 = v10;
  static Logger.updates.getter(v14);
  id v27 = a3;
  id v28 = v13;
  uint64_t v29 = (char *)v27;
  id v30 = v28;
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  int v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, (os_log_type_t)v32))
  {
    HIDWORD(v48) = v32;
    uint64_t v51 = v5;
    uint64_t v33 = swift_slowAlloc(22LL, -1LL);
    uint64_t v34 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v50 = swift_slowAlloc(32LL, -1LL);
    uint64_t v57 = v50;
    *(_DWORD *)uint64_t v33 = 138412546;
    id v35 = *(void **)&v29[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    uint64_t v55 = (uint64_t)v35;
    id v36 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v33 + 4, v33 + 12);
    id v49 = v34;
    *uint64_t v34 = v35;

    *(_WORD *)(v33 + 12) = 2082;
    id v37 = [v30 bundleIdentifier];
    if (v37)
    {
      uint64_t v38 = v37;
      uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      unint64_t v41 = v40;
    }

    else
    {
      unint64_t v41 = 0xE300000000000000LL;
      uint64_t v39 = 7104878LL;
    }

    uint64_t v42 = v52;
    os_log_type_t v43 = BYTE4(v48);
    uint64_t v55 = sub_100088DB4(v39, v41, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v33 + 14, v33 + 22);

    swift_bridgeObjectRelease(v41);
    _os_log_impl( (void *)&_mh_execute_header,  v31,  v43,  "[%@] Removed non-installed update with bundleID: %{public}s",  (uint8_t *)v33,  0x16u);
    uint64_t v44 = sub_1000079A0((uint64_t *)&unk_100458F50);
    uint64_t v26 = 1LL;
    uint64_t v45 = v49;
    swift_arrayDestroy(v49, 1LL, v44);
    swift_slowDealloc(v45, -1LL, -1LL);
    uint64_t v46 = v50;
    swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v42);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v52);
    return 1LL;
  }

  return v26;
}

uint64_t sub_1000418A0()
{
  return sub_1000418C4( (uint64_t)&unk_1003DDEC0,  (uint64_t)&unk_1003DDEE8,  (uint64_t)&unk_100459468,  (uint64_t)&unk_100459470);
}

uint64_t sub_1000418C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = v4;
  uint64_t v10 = sub_1000079A0(&qword_100458488);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for TaskPriority(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1LL, 1LL, v13);
  uint64_t v15 = (void *)swift_allocObject(a1, 40LL, 7LL);
  void v15[2] = 0LL;
  uint64_t v16 = v15 + 2;
  v15[3] = 0LL;
  void v15[4] = v9;
  int v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13);
  uint64_t v18 = swift_retain(v9);
  if (v17 == 1)
  {
    sub_100015240((uint64_t)v12, &qword_100458488);
    uint64_t v19 = 0LL;
    uint64_t v20 = 0LL;
    uint64_t v21 = 7168LL;
  }

  else
  {
    unsigned __int8 v22 = TaskPriority.rawValue.getter(v18);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    uint64_t v21 = v22 | 0x1C00LL;
    uint64_t v24 = *v16;
    if (*v16)
    {
      uint64_t v25 = v15[3];
      uint64_t ObjectType = swift_getObjectType(*v16, v23);
      swift_unknownObjectRetain(v24);
      uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v25);
      uint64_t v20 = v27;
      swift_unknownObjectRelease(v24);
    }

    else
    {
      uint64_t v19 = 0LL;
      uint64_t v20 = 0LL;
    }
  }

  uint64_t v28 = swift_allocObject(a2, 32LL, 7LL);
  *(void *)(v28 + 16) = a3;
  *(void *)(v28 + 24) = v15;
  if (v20 | v19)
  {
    v32[0] = 0LL;
    v32[1] = 0LL;
    uint64_t v29 = v32;
    _OWORD v32[2] = v19;
    v32[3] = v20;
  }

  else
  {
    uint64_t v29 = 0LL;
  }

  uint64_t v30 = swift_task_create(v21, v29, (char *)&type metadata for () + 8, a4, v28);
  return swift_release(v30);
}

uint64_t sub_100041A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[3] = a4;
  uint64_t v5 = sub_1000079A0(&qword_100458488);
  void v4[4] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v4[5] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[6] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[7] = swift_task_alloc(v8);
  void v4[8] = swift_task_alloc(v8);
  return swift_task_switch(sub_100041B30, 0LL, 0LL);
}

uint64_t sub_100041B30()
{
  id v1 = [(id)objc_opt_self(ActiveAccountObserver) activeAccount];
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, "ams_DSID");
    *(void *)(v0 + 72) = v3;

    if (v3)
    {
      if ([(id)objc_opt_self(AMSDevice) deviceIsAppleTV])
      {
        uint64_t v4 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
        if (sub_1002FA098(v4)) {
          return swift_task_switch(sub_100041C14, *(void *)(v0 + 24), 0LL);
        }
      }
    }
  }

  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 32);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100041C14()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(v1 + 120);
  *(_BYTE *)(v0 + 104) = *(_BYTE *)(v1 + 128);
  return swift_task_switch(sub_100041C3C, 0LL, 0LL);
}

uint64_t sub_100041C3C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v0 + 88) = [*(id *)(v0 + 72) longLongValue];
  return swift_task_switch(sub_100041C88, v1, 0LL);
}

uint64_t sub_100041C88()
{
  uint64_t v1 = *(void *)(v0 + 24);
  *(void *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(v0 + 88);
  *(_BYTE *)(v1 + 128) = 0;
  return swift_task_switch(sub_100041CAC, 0LL, 0LL);
}

uint64_t sub_100041CAC()
{
  if (*(_BYTE *)(v0 + 104) == 1) {
    [*(id *)(v0 + 72) longLongValue];
  }
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 152LL);
  *(void *)(v0 + 96) = v1;
  return swift_task_switch(sub_100041D04, v1, 0LL);
}

uint64_t sub_100041D04()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = *(void *)(v1 + 112);
  if (v2)
  {
    *(void *)(v1 + 112) = 0LL;
    uint64_t v3 = swift_bridgeObjectRelease(v2);
    uint64_t v4 = static Logger.updates.getter(v3);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Cleared cached headboard apps", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v8 = v0[8];
    uint64_t v9 = v0[5];
    uint64_t v10 = v0[6];

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  }

  return swift_task_switch(sub_100041DE4, 0LL, 0LL);
}

uint64_t sub_100041DE4(uint64_t a1)
{
  uint64_t v2 = static Logger.updates.getter(a1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    int v5 = *(unsigned __int8 *)(v1 + 104);
    uint64_t v6 = *(void *)(v1 + 80);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = v7;
    *(_DWORD *)uint64_t v7 = 134349056;
    if (v5) {
      uint64_t v9 = 0LL;
    }
    else {
      uint64_t v9 = v6;
    }
    *(void *)(v1 + 16) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Account changed to: %{public}lld", v8, 0xCu);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  uint64_t v10 = *(void **)(v1 + 72);
  uint64_t v11 = *(void *)(v1 + 32);
  uint64_t v12 = *(void *)(v1 + 24);
  (*(void (**)(void, void))(*(void *)(v1 + 48) + 8LL))(*(void *)(v1 + 56), *(void *)(v1 + 40));
  id v13 = objc_allocWithZone((Class)type metadata accessor for UpdatesContext());
  id v14 = sub_10006D4CC(6LL, 0LL, 0LL, 0LL, 0LL, 0, 0, 0, 0LL, 1);
  uint64_t v15 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v11, 1LL, 1LL, v15);
  uint64_t v16 = (void *)swift_allocObject(&unk_1003DDF10, 48LL, 7LL);
  void v16[2] = 0LL;
  v16[3] = 0LL;
  v16[4] = v12;
  v16[5] = v14;
  swift_retain(v12);
  id v17 = v14;
  uint64_t v18 = sub_10004DA7C(v11, (uint64_t)&unk_100459480, (uint64_t)v16);

  swift_release(v18);
  uint64_t v19 = *(void *)(v1 + 56);
  uint64_t v20 = *(void *)(v1 + 32);
  swift_task_dealloc(*(void *)(v1 + 64));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100041FD0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = swift_retain(a1);
  a3(v5);
  return swift_release(a1);
}

uint64_t sub_100041FFC(char *a1, char *a2)
{
  uint64_t v4 = sub_1000079A0(&qword_100458488);
  __chkstk_darwin(v4);
  id v96 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v89 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (os_log_s *)type metadata accessor for Logger(0LL);
  uint64_t v11 = *((void *)v10 - 1);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v100 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v89 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v89 - v18;
  uint64_t result = sub_10003EE8C(v17, v20);
  id v101 = a2;
  uint64_t v99 = v11;
  if (result >= 1)
  {
    uint64_t v97 = a1;
    uint64_t v98 = result;
    uint64_t v22 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
    BOOL v23 = sub_1002FA098(v22);
    unint64_t v24 = *(void *)&a2[OBJC_IVAR____TtC9appstored14UpdatesContext_reason];
    if (v24 > 8)
    {
      type metadata accessor for LoadSoftwareUpdatesReason(0LL);
      unint64_t v102 = v24;
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v88, &v102, v88, &type metadata for Int);
      __break(1u);
      return result;
    }

    BOOL v25 = v23;
    if (((1LL << v24) & 0x1B9) != 0 || !v23)
    {
      static Logger.updates.getter(v23);
      uint64_t v27 = (char *)v101;
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.default.getter();
      int v30 = v29;
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v31 = swift_slowAlloc(28LL, -1LL);
        int v32 = (void *)swift_slowAlloc(8LL, -1LL);
        id v96 = (char *)swift_slowAlloc(32LL, -1LL);
        unint64_t v102 = (unint64_t)v96;
        *(_DWORD *)uint64_t v31 = 138412802;
        os_log_t v95 = v28;
        LODWORD(v94) = v30;
        uint64_t v33 = v10;
        uint64_t v34 = *(void **)&v27[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
        uint64_t v104 = (uint64_t)v34;
        id v35 = v34;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v31 + 4, v31 + 12);
        void *v32 = v34;
        uint64_t v10 = v33;

        *(_WORD *)(v31 + 12) = 1026;
        LODWORD(v104) = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, (char *)&v104 + 4, v31 + 14, v31 + 18);
        *(_WORD *)(v31 + 18) = 2082;
        uint64_t v36 = sub_10006C838();
        unint64_t v38 = v37;
        uint64_t v104 = sub_100088DB4(v36, v37, (uint64_t *)&v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v31 + 20, v31 + 28);
        swift_bridgeObjectRelease(v38);

        os_log_t v39 = v95;
        _os_log_impl( (void *)&_mh_execute_header,  v95,  (os_log_type_t)v94,  "[%@] Not purchasing updates with auto updates enabled: %{BOOL,public}d reason: %{public}s",  (uint8_t *)v31,  0x1Cu);
        uint64_t v40 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v32, 1LL, v40);
        swift_slowDealloc(v32, -1LL, -1LL);
        unint64_t v41 = v96;
        swift_arrayDestroy(v96, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1LL, -1LL);
        swift_slowDealloc(v31, -1LL, -1LL);

        uint64_t v11 = v99;
        (*(void (**)(char *, os_log_s *))(v99 + 8))(v16, v33);
      }

      else
      {

        uint64_t v11 = v99;
        (*(void (**)(char *, os_log_s *))(v99 + 8))(v16, v10);
      }

      a1 = v97;
    }

    else
    {
      static Logger.updates.getter(v23);
      uint64_t v65 = (char *)v101;
      Class v66 = (os_log_s *)Logger.logObject.getter(v65);
      os_log_type_t v67 = static os_log_type_t.default.getter();
      int v68 = v67;
      if (os_log_type_enabled(v66, v67))
      {
        uint64_t v70 = swift_slowAlloc(28LL, -1LL);
        os_log_t v92 = v66;
        uint64_t v71 = v70;
        unint64_t v94 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v93 = swift_slowAlloc(32LL, -1LL);
        unint64_t v102 = v93;
        *(_DWORD *)uint64_t v71 = 138412802;
        int v91 = v68;
        uint64_t v89 = v71 + 4;
        unint64_t v72 = *(void **)&v65[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
        os_log_t v95 = v10;
        uint64_t v104 = (uint64_t)v72;
        uint64_t v90 = &v105;
        id v73 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v89, v71 + 12);
        *unint64_t v94 = v72;

        *(_WORD *)(v71 + 12) = 1026;
        LODWORD(v104) = 1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, (char *)&v104 + 4, v71 + 14, v71 + 18);
        *(_WORD *)(v71 + 18) = 2082;
        uint64_t v74 = sub_10006C838();
        unint64_t v76 = v75;
        uint64_t v104 = sub_100088DB4(v74, v75, (uint64_t *)&v102);
        uint64_t v10 = v95;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v90, v71 + 20, v71 + 28);
        swift_bridgeObjectRelease(v76);

        os_log_t v77 = v92;
        _os_log_impl( (void *)&_mh_execute_header,  v92,  (os_log_type_t)v91,  "[%@] Purchasing updates with auto updates enabled: %{BOOL,public}d reason: %{public}s",  (uint8_t *)v71,  0x1Cu);
        uint64_t v78 = sub_1000079A0((uint64_t *)&unk_100458F50);
        id v79 = v94;
        swift_arrayDestroy(v94, 1LL, v78);
        swift_slowDealloc(v79, -1LL, -1LL);
        uint64_t v80 = v93;
        swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v80, -1LL, -1LL);
        swift_slowDealloc(v71, -1LL, -1LL);
      }

      else
      {
      }

      uint64_t v81 = (*(uint64_t (**)(char *, os_log_s *))(v99 + 8))(v19, v10);
      a1 = v97;
      static Date.now.getter(v81);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      sub_1002FA330(v22, isa);

      uint64_t v83 = type metadata accessor for TaskPriority(0LL);
      uint64_t v84 = (uint64_t)v96;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56LL))(v96, 1LL, 1LL, v83);
      uint64_t v85 = (void *)swift_allocObject(&unk_1003DDE98, 40LL, 7LL);
      v85[2] = 0LL;
      v85[3] = 0LL;
      v85[4] = v65;
      uint64_t v86 = v65;
      uint64_t v87 = sub_10004DA7C(v84, (uint64_t)&unk_100459458, (uint64_t)v85);
      swift_release(v87);
      uint64_t v11 = v99;
    }

    unint64_t v102 = 0LL;
    unint64_t v103 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(37LL);
    v42._object = (void *)0x8000000100344140LL;
    v42._countAndFlagsBits = 0xD000000000000023LL;
    String.append(_:)(v42);
    v43._countAndFlagsBits = sub_10006C838();
    object = v43._object;
    String.append(_:)(v43);
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v103);
    uint64_t result = v98;
  }

  if ((a1[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_shouldNotifyOfChanges] & 1) != 0
    || *(void *)&a1[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_availableUpdateCount] != result)
  {
    uint64_t v45 = v100;
    static Logger.updates.getter(result);
    id v46 = v101;
    NSString v47 = a1;
    uint64_t v48 = (char *)v46;
    id v49 = v47;
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc(32LL, -1LL);
      uint64_t v53 = (void *)swift_slowAlloc(8LL, -1LL);
      id v101 = (id)swift_slowAlloc(32LL, -1LL);
      unint64_t v102 = (unint64_t)v101;
      *(_DWORD *)uint64_t v52 = 138412802;
      NSDictionary v54 = *(void **)&v48[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      uint64_t v104 = (uint64_t)v54;
      os_log_t v95 = v10;
      id v55 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v52 + 4, v52 + 12);
      *uint64_t v53 = v54;

      *(_WORD *)(v52 + 12) = 2050;
      uint64_t v56 = *(void *)&v49[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_availableUpdateCount];

      uint64_t v104 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v52 + 14, v52 + 22);

      *(_WORD *)(v52 + 22) = 2082;
      uint64_t v57 = sub_10006C838();
      unint64_t v59 = v58;
      uint64_t v104 = sub_100088DB4(v57, v58, (uint64_t *)&v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v52 + 24, v52 + 32);
      swift_bridgeObjectRelease(v59);

      _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "[%@] Notify updates changed with count: %{public}ld reason: %{public}s",  (uint8_t *)v52,  0x20u);
      uint64_t v60 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v53, 1LL, v60);
      swift_slowDealloc(v53, -1LL, -1LL);
      id v61 = v101;
      swift_arrayDestroy(v101, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);

      (*(void (**)(char *, os_log_t))(v99 + 8))(v100, v95);
    }

    else
    {

      (*(void (**)(char *, os_log_s *))(v11 + 8))(v45, v10);
    }

    uint64_t v62 = sub_10006C838();
    unint64_t v64 = v63;
    sub_10004A644(v48, v62, v63, *(void *)&v49[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_bundleIDs]);
    return swift_bridgeObjectRelease(v64);
  }

  return result;
}

uint64_t sub_100042990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return swift_task_switch(sub_1000429A8, 0LL, 0LL);
}

uint64_t sub_1000429A8()
{
  id v1 = [objc_allocWithZone((Class)PerformUpdatesTask) initWithContext:v0[2]];
  v0[3] = v1;
  uint64_t v2 = swift_task_alloc(32LL);
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100042A5C;
  return withCheckedContinuation<A>(isolation:function:_:)( v3,  0LL,  0LL,  0x29286E7572LL,  0xE500000000000000LL,  sub_10004B390,  v2,  (char *)&type metadata for () + 8);
}

uint64_t sub_100042A5C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 40LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100042AB8, 0LL, 0LL);
}

uint64_t sub_100042AB8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100042AE8(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[14] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[15] = v4;
  v2[16] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100042B48, v1, 0LL);
}

id sub_100042B48()
{
  v0[8] = _swiftEmptyArrayStorage;
  v0[9] = _swiftEmptyArrayStorage;
  uint64_t v1 = v0 + 9;
  v0[10] = _swiftEmptyDictionarySingleton;
  id v37 = [objc_allocWithZone(ASDCoastGuard) init];
  id result = [(id)objc_opt_self(LSApplicationWorkspace) defaultWorkspace];
  if (result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (char *)v0[12];
    NSString v5 = String._bridgeToObjectiveC()();
    unsigned __int8 v36 = [v3 applicationIsInstalled:v5];

    uint64_t v6 = sub_10004A944();
    uint64_t v35 = v6;
    uint64_t v7 = *(void *)&v4[OBJC_IVAR____TtC9appstored14UpdatesContext_reason];
    BOOL v9 = v7 == 2 || v7 == 4;
    BOOL v34 = v9;
    static Logger.updates.getter(v6);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = (char *)v0[12];
    if (v12)
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      int v32 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v14 = 138412290;
      uint64_t v33 = v10;
      uint64_t v15 = *(void **)&v13[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      v0[11] = v15;
      id v16 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v14 + 4, v14 + 12);
      void *v32 = v15;
      uint64_t v10 = v33;

      _os_log_impl((void *)&_mh_execute_header, v33, v11, "[%@] ╒ Prepping update request", v14, 0xCu);
      uint64_t v17 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v32, 1LL, v17);
      swift_slowDealloc(v32, -1LL, -1LL);
      uint64_t v18 = v14;
      uint64_t v1 = v0 + 9;
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
    }

    uint64_t v19 = v0[13];
    uint64_t v20 = (void *)v0[12];
    (*(void (**)(void, void))(v0[15] + 8LL))(v0[16], v0[14]);
    uint64_t v21 = (void *)objc_opt_self(&OBJC_CLASS___ApplicationProxy);
    uint64_t v22 = swift_allocObject(&unk_1003DDD08, 80LL, 7LL);
    *(void *)(v22 + 16) = v20;
    *(void *)(v22 + 24) = v35;
    *(_BYTE *)(v22 + 32) = v36;
    *(_BYTE *)(v22 + 33) = v34;
    *(void *)(v22 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v19;
    *(void *)(v22 + 48) = v1;
    *(void *)(v22 + 56) = v37;
    *(void *)(v22 + 64) = v0 + 10;
    *(void *)(v22 + 72) = v0 + 8;
    uint64_t v23 = swift_allocObject(&unk_1003DDD30, 32LL, 7LL);
    *(void *)(v23 + 16) = sub_10004AB84;
    *(void *)(v23 + 24) = v22;
    v0[6] = sub_1000152F8;
    v0[7] = v23;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256LL;
    v0[4] = sub_10004431C;
    v0[5] = &unk_1003DDD48;
    unint64_t v24 = _Block_copy(v0 + 2);
    uint64_t v25 = v0[7];
    id v26 = v20;
    swift_retain(v19);
    id v27 = v37;
    swift_retain(v23);
    swift_release(v25);
    [v21 enumerateApplicationsOfType:0 usingBlock:v24];

    _Block_release(v24);
    LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v23, "", 88LL, 1047LL, 59LL, 1LL);
    id result = (id)swift_release(v23);
    if ((v24 & 1) == 0)
    {
      uint64_t v28 = v0[16];
      uint64_t v29 = v0[8];
      uint64_t v30 = v0[9];
      uint64_t v31 = v0[10];
      swift_release(v22);
      swift_task_dealloc(v28);
      return (id)((uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1])(v29, v30, v31);
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

void sub_100042F24( id a1, uint64_t a2, char *a3, uint64_t a4, char a5, char a6, uint64_t a7, os_log_s *a8, void *a9, os_log_s *a10, void **a11)
{
  uint64_t v207 = a8;
  __int128 v214 = a11;
  os_log_t v212 = a10;
  id v211 = a9;
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v215 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v213 = (char *)&v200 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  id v208 = (os_log_s *)((char *)&v200 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v209 = (char *)&v200 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v210 = (os_log_s *)((char *)&v200 - v24);
  uint64_t v25 = __chkstk_darwin(v23);
  id v27 = (char *)&v200 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v200 - v28;
  if ((a3[OBJC_IVAR____TtC9appstored14UpdatesContext_targetedItemID + 8] & 1) == 0)
  {
    uint64_t v30 = v27;
    uint64_t v31 = a3;
    id v32 = *(id *)&a3[OBJC_IVAR____TtC9appstored14UpdatesContext_targetedItemID];
    BOOL v33 = [a1 storeItemID] == v32;
    a3 = v31;
    id v27 = v30;
    if (!v33) {
      return;
    }
  }

  id v205 = *(id *)&a3[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
  id v34 = [a1 storeItemID];
  uint64_t v35 = *(void *)(a4 + 16);
  uint64_t v202 = v16;
  if (v35 && (unint64_t v36 = sub_100023FE0((uint64_t)v34), (v37 & 1) != 0))
  {
    unint64_t v38 = *(void **)(*(void *)(a4 + 56) + 8 * v36);
    uint64_t v39 = swift_allocObject(&unk_1003DDD80, 24LL, 7LL);
    id v204 = v38;
    id v40 = v38;
    unint64_t v41 = v27;
    Swift::String v42 = a3;
    id v43 = a1;
    uint64_t v44 = sub_100070E2C();

    id v45 = -[objc_class longLongValue](v44, "longLongValue");
    a1 = v43;
    a3 = v42;
    id v27 = v41;
    unint64_t v206 = (void *)v39;
    *(void *)(v39 + 16) = v45;
    uint64_t v16 = v202;
    if ((a5 & 1) != 0) {
      goto LABEL_15;
    }
  }

  else
  {
    id v46 = (void *)swift_allocObject(&unk_1003DDD80, 24LL, 7LL);
    id v204 = 0LL;
    unint64_t v206 = v46;
    v46[2] = 0LL;
    if ((a5 & 1) != 0) {
      goto LABEL_15;
    }
  }

  id v46 = [a1 bundleID];
  if (v46)
  {
    NSString v47 = v46;
    uint64_t v200 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    unint64_t v201 = v48;
    id v49 = a1;
    id v50 = [a1 storeMetadata];
    if (!v50
      || (os_log_type_t v51 = v50, v52 = [v50 deviceBasedVPP], v51, (v52 & 1) == 0))
    {
      id v53 = [v49 isManagedAccount];
      if ((v53 & 1) == 0)
      {
        id v72 = v204;
        if (!v204)
        {
          swift_release(v206);

          swift_bridgeObjectRelease(v201);
          return;
        }

        static Logger.updates.getter(v53);
        uint64_t v113 = a3;
        unint64_t v114 = v201;
        uint64_t v115 = swift_bridgeObjectRetain(v201);
        uint64_t v116 = (os_log_s *)Logger.logObject.getter(v115);
        os_log_type_t v117 = static os_log_type_t.default.getter();
        int v118 = v117;
        if (os_log_type_enabled(v116, v117))
        {
          uint64_t v119 = swift_slowAlloc(22LL, -1LL);
          os_log_t v212 = v116;
          uint64_t v120 = v119;
          uint64_t v121 = swift_slowAlloc(8LL, -1LL);
          LODWORD(v211) = v118;
          uint64_t v122 = (void *)v121;
          uint64_t v213 = (char *)swift_slowAlloc(32LL, -1LL);
          *(void *)&v224[0] = v213;
          *(_DWORD *)uint64_t v120 = 138412546;
          __int128 v214 = (void **)v47;
          id v123 = v205;
          uint64_t v222 = (uint64_t)v205;
          id v124 = v205;
          id v72 = v204;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v223, v120 + 4, v120 + 12);
          *uint64_t v122 = v123;

          *(_WORD *)(v120 + 12) = 2082;
          swift_bridgeObjectRetain(v114);
          uint64_t v222 = sub_100088DB4(v200, v114, (uint64_t *)v224);
          NSString v47 = v214;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v223, v120 + 14, v120 + 22);
          swift_bridgeObjectRelease_n(v114, 3LL);
          os_log_t v125 = v212;
          _os_log_impl( (void *)&_mh_execute_header,  v212,  (os_log_type_t)v211,  "[%@] ├ DRP { %{public}s }",  (uint8_t *)v120,  0x16u);
          uint64_t v126 = sub_1000079A0((uint64_t *)&unk_100458F50);
          swift_arrayDestroy(v122, 1LL, v126);
          swift_slowDealloc(v122, -1LL, -1LL);
          uint64_t v127 = v213;
          swift_arrayDestroy(v213, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v127, -1LL, -1LL);
          swift_slowDealloc(v120, -1LL, -1LL);

          (*(void (**)(char *, uint64_t))(v215 + 8))(v29, v202);
        }

        else
        {

          swift_bridgeObjectRelease_n(v114, 2LL);
          (*(void (**)(char *, uint64_t))(v215 + 8))(v29, v202);
          id v123 = v205;
        }

        uint64_t v148 = objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseStore);
        id v149 = sub_100237D18(v148);
        sub_1002386EC(v149, v47, v123);
        swift_release(v206);

        goto LABEL_57;
      }
    }

    id v46 = (void *)swift_bridgeObjectRelease(v201);
    a1 = v49;
  }

LABEL_15:
  id v203 = a1;
  if ((a6 & 1) != 0)
  {
    static Logger.updates.getter(v46);
    id v54 = a1;
    id v55 = a3;
    id v56 = v54;
    uint64_t v57 = v55;
    id v58 = v56;
    unint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    int v60 = static os_log_type_t.default.getter();
    uint64_t v210 = v59;
    if (os_log_type_enabled(v59, (os_log_type_t)v60))
    {
      LODWORD(v207) = v60;
      uint64_t v209 = a3;
      uint64_t v61 = swift_slowAlloc(42LL, -1LL);
      uint64_t v62 = (void *)swift_slowAlloc(8LL, -1LL);
      id v208 = (os_log_s *)swift_slowAlloc(32LL, -1LL);
      *(void *)&v224[0] = v208;
      *(_DWORD *)uint64_t v61 = 138413058;
      id v63 = v205;
      uint64_t v222 = (uint64_t)v205;
      id v64 = v205;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v223, v61 + 4, v61 + 12);
      void *v62 = v63;
      uint64_t v65 = v62;
      swift_retain(v206);

      *(_WORD *)(v61 + 12) = 2082;
      id v66 = [v58 bundleID];
      if (v66)
      {
        os_log_type_t v67 = v66;
        uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v66);
        unint64_t v70 = v69;
      }

      else
      {
        uint64_t v68 = 7104878LL;
        unint64_t v70 = 0xE300000000000000LL;
      }

      uint64_t v222 = sub_100088DB4(v68, v70, (uint64_t *)v224);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v223, v61 + 14, v61 + 22);

      swift_bridgeObjectRelease(v70);
      *(_WORD *)(v61 + 22) = 2050;
      id v143 = [v58 storeExternalVersionID];

      uint64_t v222 = (uint64_t)v143;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v223, v61 + 24, v61 + 32);

      *(_WORD *)(v61 + 32) = 2050;
      uint64_t v71 = v206;
      swift_beginAccess(v206 + 2, &v216, 0LL, 0LL);
      uint64_t v222 = v71[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v223, v61 + 34, v61 + 42);
      swift_release(v71);
      id v144 = v210;
      _os_log_impl( (void *)&_mh_execute_header,  v210,  (os_log_type_t)v207,  "[%@] ├ FRC { %{public}s evid: %{public}lld currentEvid: %{public}lld }",  (uint8_t *)v61,  0x2Au);
      uint64_t v145 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v65, 1LL, v145);
      swift_slowDealloc(v65, -1LL, -1LL);
      uint64_t v146 = v208;
      swift_arrayDestroy(v208, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v146, -1LL, -1LL);
      swift_slowDealloc(v61, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v215 + 8))(v27, v202);
      a3 = v209;
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v215 + 8))(v27, v202);
      uint64_t v71 = v206;
    }

    id v147 = [v58 storeExternalVersionID];
    swift_beginAccess(v71 + 2, &v217, 1LL, 0LL);
    v71[2] = v147;
LABEL_49:
    id v72 = v204;
    goto LABEL_50;
  }

  uint64_t v71 = v206;
  if (!v206[2])
  {
    os_log_t v95 = v210;
    static Logger.updates.getter(v46);
    id v96 = a1;
    uint64_t v97 = a3;
    id v98 = v96;
    uint64_t v99 = v97;
    id v100 = v98;
    id v101 = (os_log_s *)Logger.logObject.getter(v100);
    int v102 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v101, (os_log_type_t)v102))
    {
      LODWORD(v201) = v102;
      uint64_t v207 = v101;
      uint64_t v209 = a3;
      uint64_t v103 = swift_slowAlloc(32LL, -1LL);
      uint64_t v104 = (void *)swift_slowAlloc(8LL, -1LL);
      id v208 = (os_log_s *)swift_slowAlloc(32LL, -1LL);
      *(void *)&v224[0] = v208;
      *(_DWORD *)uint64_t v103 = 138412802;
      id v105 = v205;
      uint64_t v222 = (uint64_t)v205;
      id v106 = v205;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v223, v103 + 4, v103 + 12);
      *uint64_t v104 = v105;
      uint64_t v107 = v104;

      *(_WORD *)(v103 + 12) = 2082;
      id v108 = [v100 bundleID];
      if (v108)
      {
        BOOL v109 = v108;
        uint64_t v110 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
        unint64_t v112 = v111;
      }

      else
      {
        uint64_t v110 = 7104878LL;
        unint64_t v112 = 0xE300000000000000LL;
      }

      uint64_t v150 = v207;
      uint64_t v222 = sub_100088DB4(v110, v112, (uint64_t *)v224);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v223, v103 + 14, v103 + 22);

      swift_bridgeObjectRelease(v112);
      *(_WORD *)(v103 + 22) = 2050;
      id v151 = [v100 storeExternalVersionID];

      uint64_t v222 = (uint64_t)v151;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v222, v223, v103 + 24, v103 + 32);

      _os_log_impl( (void *)&_mh_execute_header,  v150,  (os_log_type_t)v201,  "[%@] ├ NEW { %{public}s evid: %{public}lld }",  (uint8_t *)v103,  0x20u);
      uint64_t v152 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v107, 1LL, v152);
      swift_slowDealloc(v107, -1LL, -1LL);
      uint64_t v153 = v208;
      swift_arrayDestroy(v208, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v153, -1LL, -1LL);
      swift_slowDealloc(v103, -1LL, -1LL);

      (*(void (**)(os_log_s *, uint64_t))(v215 + 8))(v210, v16);
      a3 = v209;
    }

    else
    {

      (*(void (**)(os_log_s *, uint64_t))(v215 + 8))(v95, v16);
    }

    id v154 = [v100 storeExternalVersionID];
    uint64_t v71 = v206;
    v206[2] = v154;
    goto LABEL_49;
  }

  id v72 = v204;
  if (!v204) {
    goto LABEL_51;
  }
  id v73 = v204;
  BOOL v74 = sub_10004B10C(v73);
  if (v74)
  {
    id v75 = v73;
    unint64_t v76 = v207;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v75);
    unint64_t v78 = *(void *)((*(void *)v76 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v77 = *(void *)((*(void *)v76 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v78 >= v77 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1LL);
    }
    uint64_t v79 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v78, v75);
    specialized Array._endMutation()(v79);
    id v80 = [a1 storeExternalVersionID];
    v71[2] = v80;
    static Logger.updates.getter(v80);
    uint64_t v81 = a3;
    id v82 = v75;
    uint64_t v83 = v81;
    id v84 = v82;
    uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
    os_log_type_t v86 = static os_log_type_t.default.getter();
    int v87 = v86;
    if (os_log_type_enabled(v85, v86))
    {
      uint64_t v88 = swift_slowAlloc(22LL, -1LL);
      LODWORD(v21_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v87;
      uint64_t v89 = v88;
      uint64_t v90 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v89 = 138412546;
      id v91 = v205;
      *(void *)&v224[0] = v205;
      id v208 = v85;
      id v92 = v205;
      id v72 = v204;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v224, (char *)v224 + 8, v89 + 4, v89 + 12);
      *uint64_t v90 = v91;

      *(_WORD *)(v89 + 12) = 2114;
      *(void *)&v224[0] = v84;
      id v84 = v84;
      uint64_t v93 = v208;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v224, (char *)v224 + 8, v89 + 14, v89 + 22);
      v90[1] = v72;

      _os_log_impl( (void *)&_mh_execute_header,  v93,  (os_log_type_t)v210,  "[%@] ├ REL %{public}@",  (uint8_t *)v89,  0x16u);
      uint64_t v94 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v90, 2LL, v94);
      uint64_t v71 = v206;
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v89, -1LL, -1LL);
    }

    else
    {

      uint64_t v93 = (os_log_s *)v84;
    }

    (*(void (**)(char *, uint64_t))(v215 + 8))(v209, v202);
  }

  else
  {
    static Logger.updates.getter(v74);
    uint64_t v128 = a3;
    id v129 = v73;
    uint64_t v130 = v128;
    id v131 = v129;
    uint64_t v132 = (os_log_s *)Logger.logObject.getter(v131);
    os_log_type_t v133 = static os_log_type_t.default.getter();
    int v134 = v133;
    if (os_log_type_enabled(v132, v133))
    {
      uint64_t v135 = swift_slowAlloc(22LL, -1LL);
      uint64_t v209 = a3;
      uint64_t v136 = v135;
      uint64_t v137 = swift_slowAlloc(16LL, -1LL);
      LODWORD(v21_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v134;
      char v138 = (void *)v137;
      *(_DWORD *)uint64_t v136 = 138412546;
      id v139 = v205;
      *(void *)&v224[0] = v205;
      id v140 = v205;
      id v72 = v204;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v224, (char *)v224 + 8, v136 + 4, v136 + 12);
      *char v138 = v139;

      *(_WORD *)(v136 + 12) = 2114;
      *(void *)&v224[0] = v131;
      id v131 = v131;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v224, (char *)v224 + 8, v136 + 14, v136 + 22);
      v138[1] = v72;

      _os_log_impl( (void *)&_mh_execute_header,  v132,  (os_log_type_t)v210,  "[%@] ├ PRE %{public}@",  (uint8_t *)v136,  0x16u);
      uint64_t v141 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v138, 2LL, v141);
      uint64_t v71 = v206;
      swift_slowDealloc(v138, -1LL, -1LL);
      uint64_t v142 = v136;
      a3 = v209;
      swift_slowDealloc(v142, -1LL, -1LL);
    }

    else
    {

      uint64_t v132 = (os_log_s *)v131;
    }

    (*(void (**)(os_log_s *, uint64_t))(v215 + 8))(v208, v202);
  }

  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int64);
  __break(1u);
  return result;
}

  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int64);
  __break(1u);
}

  uint64_t v24 = sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  uint64_t v15 = 1;
  if ((v17 + 42587 > 3 || v17 == -42586) && v17 != -42112 && v17 != -42110) {
    goto LABEL_19;
  }
LABEL_20:

  return v15;
}

  return v5;
}

  return a1;
}

  return v6;
}

  objc_sync_exit(v4);
  return v7;
}

    return 0LL;
  }

  uint64_t v16 = *(id *)(v1 + 16);
  objc_opt_self(&OBJC_CLASS___SQLiteTransporter);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1004623B8);
  uint64_t v17 = sub_1002FA9CC((uint64_t)&OBJC_CLASS___AppDefaultsManager);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  uint64_t v19 = (NSMutableDictionary *)[v18 mutableCopy];

  if (!v19)
  {
    uint64_t v19 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    goto LABEL_17;
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v19, "objectForKeyedSubscript:", @"knownPaths"));
  uint64_t v21 = [v20 mutableCopy];

  if (!v21)
  {
LABEL_17:
    uint64_t v21 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](&OBJC_CLASS___NSMutableArray, "arrayWithObject:", v16));
    goto LABEL_18;
  }

  [v21 addObject:v16];
LABEL_18:
  -[NSMutableDictionary setObject:forKeyedSubscript:](v19, "setObject:forKeyedSubscript:", v21, @"knownPaths");
  sub_1002FA904((uint64_t)&OBJC_CLASS___AppDefaultsManager, v19);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1004623B8);

  uint64_t v23 = sub_1001FF0EC(objc_alloc(&OBJC_CLASS___SQLiteConnectionOptions), *(void **)(v1 + 16));
  uint64_t v24 = v23;
  if (v23) {
    v23[8] = 1;
  }
  uint64_t v25 = sub_1001D6258(objc_alloc(&OBJC_CLASS___SQLiteConnection), v23);
  uint64_t v26 = *(void **)(v1 + 8);
  *(void *)(v1 + 8) = v25;

  id v27 = *(void *)(v1 + 8);
  if (v27) {
    uint64_t v1 = sub_1001D6A98(v27);
  }
  else {
    uint64_t v1 = 0LL;
  }

  return v1;
}

        uint64_t v6 = -[MediaAPIUpdateEntity initWithPersistentID:onConnection:]( objc_alloc(&OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity),  "initWithPersistentID:onConnection:",  v4,  *(void *)(a1 + 40));
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 0LL));
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity updateStatePropertyKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "updateStatePropertyKey"));
        -[SQLiteEntity setValue:forProperty:](v6, "setValue:forProperty:", v15, v16);

        BOOL v9 = *(void *)(a1 + 64);
LABEL_16:
        ++*(void *)(*(void *)(v9 + 8) + 24LL);
      }
    }

    else if (v10 == (id)3)
    {
      os_log_type_t v11 = ASDLogHandleForCategory(6LL);
      BOOL v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = 138543874;
        uint64_t v18 = v5;
        uint64_t v19 = 2048;
        uint64_t v20 = 3LL;
        uint64_t v21 = 2048;
        uint64_t v22 = 0LL;
        uint64_t v13 = "Updating purchasing state for modern update with bundle identifier “%{public}@” from %ld to %ld…";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&v17, 0x20u);
        goto LABEL_15;
      }

      goto LABEL_15;
    }
  }
}
  }

  if (!*(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL)
    && [*(id *)(a1[4] + 56) containsObject:v2])
  {
    uint64_t v18 = ASDLogHandleForCategory(40LL);
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v26 = v2;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "%{public}@ is one of the TV provider apps",  buf,  0xCu);
    }

    *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 1;
  }
}

  return v3;
}

  [v7 setNextUpdateCheck:v12];
  uint64_t v17 = sub_1002FA130((uint64_t)&OBJC_CLASS___AppDefaultsManager);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  if (v18) {
    [v7 setLastUpdateCheck:v18];
  }
  if (v4) {
    v4[2](v4, v7, 0LL);
  }
}

  return v7;
}

    goto LABEL_16;
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionStatus]);
  uint64_t v19 = [v18 statusType];

  uint64_t v20 = ASDLogHandleForCategory(14LL);
  os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v21 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v19 != (id)1)
  {
    if (v21)
    {
      unint64_t v38 = (void *)objc_opt_class(*(void *)(a1 + 32), v22);
      uint64_t v39 = v38;
      id v40 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionStatus]);
      id v45 = 138543874;
      id v46 = v38;
      NSString v47 = 2114;
      unint64_t v48 = @"com.apple.Music";
      id v49 = 2048;
      id v50 = [v40 statusType];
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%{public}@]: Subscription not enabled for %{public}@, status %li",  (uint8_t *)&v45,  0x20u);
    }

    goto LABEL_15;
  }

  if (v21)
  {
    uint64_t v23 = (void *)objc_opt_class(*(void *)(a1 + 32), v22);
    id v45 = 138543618;
    id v46 = v23;
    NSString v47 = 2114;
    unint64_t v48 = @"com.apple.Music";
    uint64_t v24 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%{public}@]: Subscription enabled for %{public}@",  (uint8_t *)&v45,  0x16u);
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionStatus]);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 expirationDate]);
  id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v28 = [v26 compare:v27];

  if (v28 != (id)1)
  {
    unint64_t v41 = ASDLogHandleForCategory(14LL);
    os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v43 = (void *)objc_opt_class(*(void *)(a1 + 32), v42);
      id v45 = 138543618;
      id v46 = v43;
      NSString v47 = 2114;
      unint64_t v48 = @"com.apple.Music";
      uint64_t v14 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%{public}@]: Filtering subscription for %{public}@",  (uint8_t *)&v45,  0x16u);
LABEL_23:

      goto LABEL_15;
    }

    goto LABEL_15;
  }

  uint64_t v29 = sub_1002F4708(*(void *)(a1 + 32), @"com.apple.Music");
  uint64_t v30 = objc_claimAutoreleasedReturnValue(v29);
  if (v30)
  {
    os_log_type_t v11 = (os_log_s *)v30;
    uint64_t v31 = sub_1002F4444(*(void *)(a1 + 32), @"com.apple.Music");
    if (v31)
    {
      id v32 = (uint64_t)v31;
      BOOL v33 = *(void *)(a1 + 32);
      id v34 = (void *)objc_claimAutoreleasedReturnValue([v5 subscriptionStatus]);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 expirationDate]);
      sub_1002F4D0C(v33, v11, v32, v35, *(unsigned __int8 *)(a1 + 40));
    }

    goto LABEL_15;
  }

LABEL_50:
  a1 = v203;
LABEL_51:
  unint64_t v155 = v71 + 2;
  *(void *)&double v156 = swift_beginAccess(v71 + 2, &v222, 0LL, 0LL).n128_u64[0];
  uint64_t v157 = v71[2];
  if (v157 < 1)
  {
    swift_release(v71);
LABEL_57:

    return;
  }

  unsigned int v158 = objc_msgSend(a1, "codeSignatureVersion", v156);
  if (v158 < kMISFutureMinSupportedSignatureVersion)
  {
    unint64_t v159 = (unint64_t)[a1 storeItemID];
    if ((v159 & 0x8000000000000000LL) != 0)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
      __break(1u);
      return;
    }

    if ([v211 isUnrepairableAppWithItemID:v159 externalVersionID:v157])
    {
      id v160 = 0LL;
    }

    else
    {
      id v160 = [a1 storeExternalVersionID];
      swift_beginAccess(v71 + 2, &v218, 1LL, 0LL);
      unint64_t *v155 = 0LL;
    }

    id v161 = a1;
    id v162 = objc_msgSend( objc_allocWithZone(NSNumber),  "initWithLongLong:",  objc_msgSend(a1, "storeItemID"));
    id v163 = [objc_allocWithZone(NSNumber) initWithLongLong:v160];
    if (v163)
    {
      sub_100048A9C((uint64_t)v163, v162);
    }

    else
    {
      uint64_t v164 = sub_100067B8C((unint64_t)v162);

      id v162 = (id)v164;
    }

    a1 = v161;
  }

  if (v72)
  {
    id v165 = v72;
    if (sub_1001E2698(v165, (uint64_t)@"update_state") == (id)5)
    {
      id v166 = sub_100070E2C();
      Class v167 = a3;
      id v168 = -[objc_class longLongValue](v166, "longLongValue");

      swift_beginAccess(v155, &v220, 1LL, 0LL);
      unint64_t *v155 = (unint64_t)v168;
      static Logger.updates.getter(v169);
      id v170 = v167;
      id v171 = v203;
      uint64_t v172 = v170;
      id v173 = v171;
      id v174 = (os_log_s *)Logger.logObject.getter(v173);
      os_log_type_t v175 = static os_log_type_t.default.getter();
      int v176 = v175;
      if (os_log_type_enabled(v174, v175))
      {
        uint64_t v177 = swift_slowAlloc(32LL, -1LL);
        LODWORD(v211) = v176;
        uint64_t v178 = v177;
        BOOL v179 = (void *)swift_slowAlloc(8LL, -1LL);
        os_log_t v212 = v174;
        id v180 = v179;
        uint64_t v210 = (os_log_s *)v179;
        *(_DWORD *)uint64_t v178 = 138412802;
        uint64_t v209 = (char *)(v178 + 4);
        id v181 = v205;
        *(void *)&v224[0] = v205;
        id v182 = v205;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v224, (char *)v224 + 8, v209, v178 + 12);
        void *v180 = v181;
        unint64_t v183 = v212;
        unint64_t v184 = v206;
        swift_retain(v206);

        *(_WORD *)(v178 + 12) = 2050;
        id v185 = [v173 storeItemID];

        *(void *)&v224[0] = v185;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v224, (char *)v224 + 8, v178 + 14, v178 + 22);

        uint64_t v71 = v184;
        *(_WORD *)(v178 + 22) = 2050;
        swift_beginAccess(v155, &v219, 0LL, 0LL);
        *(void *)&v224[0] = v184[2];
        id v72 = v204;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v224, (char *)v224 + 8, v178 + 24, v178 + 32);
        swift_release(v71);
        _os_log_impl( (void *)&_mh_execute_header,  v183,  (os_log_type_t)v211,  "[%@] Only checking for newer updates (%{public}lld -> %{public}lld) due to the current update being marked as blocked.",  (uint8_t *)v178,  0x20u);
        uint64_t v186 = sub_1000079A0((uint64_t *)&unk_100458F50);
        uint64_t v187 = v210;
        swift_arrayDestroy(v210, 1LL, v186);
        swift_slowDealloc(v187, -1LL, -1LL);
        swift_slowDealloc(v178, -1LL, -1LL);
      }

      else
      {

        id v165 = v173;
        unint64_t v183 = (os_log_s *)v173;
        uint64_t v71 = v206;
      }

      (*(void (**)(char *, uint64_t))(v215 + 8))(v213, v202);
    }

    else
    {
    }

    a1 = v203;
  }

  swift_beginAccess(v155, v221, 0LL, 0LL);
  unint64_t v188 = *v155;
  id v189 = a1;
  sub_1000168B4(v189, v188, 0, (uint64_t)v224);

  uint64_t v190 = v214;
  id v191 = *v214;
  sub_100015118(v224);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v191);
  *uint64_t v190 = v191;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    id v191 = sub_100088338(0LL, v191[2] + 1LL, 1, v191);
    *__int128 v214 = v191;
  }

  unint64_t v194 = v191[2];
  unint64_t v193 = v191[3];
  if (v194 >= v193 >> 1)
  {
    id v191 = sub_100088338((void *)(v193 > 1), v194 + 1, 1, v191);
    *__int128 v214 = v191;
  }

  v191[2] = v194 + 1;
  uint64_t v195 = &v191[12 * v194];
  __int128 v196 = v224[1];
  v195[2] = v224[0];
  v195[3] = v196;
  __int128 v197 = v224[2];
  __int128 v198 = v224[3];
  __int128 v199 = v224[5];
  v195[6] = v224[4];
  v195[7] = v199;
  v195[4] = v197;
  v195[5] = v198;

  sub_10004ABE0(v224);
  swift_release(v71);
}

    goto LABEL_51;
  }

  uint64_t v7 = objc_alloc(&OBJC_CLASS___AMSURLRequestEncoder);
  uint64_t v8 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = -[AMSURLRequestEncoder initWithBag:](v7, "initWithBag:", v9);

  os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  BOOL v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ams_activeiTunesAccount"));

  if (v12)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ams_DSID"));
    uint64_t v14 = v13 == 0LL;

    if (!v14) {
      -[AMSURLRequestEncoder setAccount:](v10, "setAccount:", v12);
    }
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( -[AMSURLRequestEncoder requestWithMethod:URL:parameters:]( v10,  "requestWithMethod:URL:parameters:",  2LL,  v76,  0LL));
  uint64_t v88 = 0LL;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 resultWithError:&v88]);
  unint64_t v77 = v88;

  [v16 setCachePolicy:1];
  if (v77)
  {
    uint64_t v17 = ASDLogHandleForCategory(40LL);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      unint64_t v69 = self->_headboardApps;
      *(_DWORD *)buf = 138412546;
      os_log_t v95 = v69;
      id v96 = 2114;
      uint64_t v97 = v77;
      _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "[%@] Error encoding headboard request: %{public}@",  buf,  0x16u);
    }

    uint64_t v19 = 0LL;
  }

  else
  {
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSURLSessionConfiguration ephemeralSessionConfiguration]( &OBJC_CLASS___NSURLSessionConfiguration,  "ephemeralSessionConfiguration"));
    uint64_t v20 = sub_1001F4B70((uint64_t)&OBJC_CLASS___AMSProcessInfo);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    uint64_t v22 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    -[os_log_s ams_configureWithProcessInfo:bag:](v18, "ams_configureWithProcessInfo:bag:", v21, v23);

    -[os_log_s set_sourceApplicationBundleIdentifier:]( v18,  "set_sourceApplicationBundleIdentifier:",  @"com.apple.TVAppStore");
    uint64_t v24 = -[AMSURLSession initWithConfiguration:]( objc_alloc(&OBJC_CLASS___AMSURLSession),  "initWithConfiguration:",  v18);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[AMSURLSession dataTaskPromiseWithRequest:](v24, "dataTaskPromiseWithRequest:", v16));
    int v87 = 0LL;
    osloga = (os_log_t)objc_claimAutoreleasedReturnValue([v25 resultWithTimeout:&v87 error:60.0]);
    unint64_t v77 = v87;
    if (v77)
    {
      uint64_t v26 = ASDLogHandleForCategory(40LL);
      id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        unint64_t v70 = self->_headboardApps;
        *(_DWORD *)buf = 138412546;
        os_log_t v95 = v70;
        id v96 = 2114;
        uint64_t v97 = v77;
        _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "[%@] Headboard error looking up data: %{public}@",  buf,  0x16u);
      }

      uint64_t v19 = 0LL;
    }

    else
    {
      id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s object](osloga, "object"));
      id v72 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKey:](v27, "objectForKey:", @"contentIds"));
      BOOL v74 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKey:](v27, "objectForKey:", @"hideContentIds"));
      id v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v72));
      if ([v74 count]) {
        [v75 removeObjectsInArray:v74];
      }
      uint64_t v28 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v29 arrayForKey:@"headboard-do-not-install"]);
      os_log_type_t v86 = 0LL;
      uint64_t v31 = objc_claimAutoreleasedReturnValue([v30 valueWithError:&v86]);
      id v73 = v86;

      if (v73)
      {
        id v32 = ASDLogHandleForCategory(40LL);
        BOOL v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          uint64_t v71 = self->_headboardApps;
          *(_DWORD *)buf = 138412546;
          os_log_t v95 = v71;
          id v96 = 2114;
          uint64_t v97 = v73;
          _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "[%@] Error checking for HeadBoard do not install list: %{public}@",  buf,  0x16u);
        }
      }

      if (v31) {
        id v34 = (_UNKNOWN **)v31;
      }
      else {
        id v34 = &off_10040DCC0;
      }
      if ([v34 count]) {
        [v75 removeObjectsInArray:v34];
      }
      uint64_t v19 = [v75 copy];
    }
  }

  if (v19)
  {
    uint64_t v35 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    id v84 = 0u;
    uint64_t v85 = 0u;
    id v82 = 0u;
    uint64_t v83 = 0u;
    osos_log_t log = (os_log_s *)v19;
    unint64_t v36 = -[os_log_s countByEnumeratingWithState:objects:count:]( oslog,  "countByEnumeratingWithState:objects:count:",  &v82,  v90,  16LL);
    if (v36)
    {
      char v37 = *(void *)v83;
      do
      {
        for (uint64_t i = 0LL; i != v36; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v83 != v37) {
            objc_enumerationMutation(oslog);
          }
          uint64_t v39 = *(void **)(*((void *)&v82 + 1) + 8LL * (void)i);
          id v40 = objc_autoreleasePoolPush();
          unint64_t v41 = objc_opt_new(&OBJC_CLASS___SoftwareUpdateAppMetadata);
          if ([v39 longLongValue])
          {
            uint64_t v81 = 0LL;
            Swift::String v42 = [v39 longLongValue];
            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v42));
            if (v41) {
              objc_setProperty_nonatomic_copy(v41, v43, v44, 8LL);
            }

            id v45 = -[LSApplicationRecord initWithStoreItemIdentifier:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "initWithStoreItemIdentifier:error:",  v42,  &v81);
            id v46 = v45;
            if (v45)
            {
              NSString v47 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord iTunesMetadata](v45, "iTunesMetadata"));
              id v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v47 versionIdentifier]));
              if (v41) {
                objc_setProperty_nonatomic_copy(v41, v48, v49, 16LL);
              }
            }

            else
            {
              id v50 = ASDLogHandleForCategory(40LL);
              os_log_type_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
              if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
              {
                id v53 = self->_headboardApps;
                *(_DWORD *)buf = 138412546;
                os_log_t v95 = v53;
                id v96 = 2114;
                uint64_t v97 = v81;
                _os_log_error_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_ERROR,  "[%@] Unable to find application record: %{public}@",  buf,  0x16u);
              }

              if (v41) {
                objc_setProperty_nonatomic_copy(v41, v52, &off_10040BDE8, 16LL);
              }
            }

            -[NSMutableArray addObject:](v35, "addObject:", v41);
          }

          objc_autoreleasePoolPop(v40);
        }

        unint64_t v36 = -[os_log_s countByEnumeratingWithState:objects:count:]( oslog,  "countByEnumeratingWithState:objects:count:",  &v82,  v90,  16LL);
      }

      while (v36);
    }

    id v54 = -[NSMutableArray copy](v35, "copy");
    id v55 = *(void **)&self->super._success;
    *(void *)&self->super._success = v54;

    goto LABEL_50;
  }

  bundleVersion = self->_bundleVersion;
  if (bundleVersion) {
    [v3 setObject:bundleVersion forKey:@"bundleVersion"];
  }
  manifestURLString = self->_manifestURLString;
  if (manifestURLString) {
    [v3 setObject:manifestURLString forKey:@"manifestURLString"];
  }
  if ((*(_WORD *)&self->_has & 0x800) != 0)
  {
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", self->_suppressDialogs));
    [v3 setObject:v30 forKey:@"suppressDialogs"];
  }

  betaBuildGroupID = self->_betaBuildGroupID;
  if (betaBuildGroupID) {
    [v3 setObject:betaBuildGroupID forKey:@"betaBuildGroupID"];
  }
  return v3;
}

        if (a4 && v22)
        {
          uint64_t v22 = v22;
          *a4 = v22;
        }

        else if (!a4 && v22)
        {
          NSString v47 = ASDLogHandleForCategory(3LL);
          unint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412546;
            id v54 = v10;
            id v55 = 2114;
            id v56 = v22;
            _os_log_error_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "%@ Complete with error: %{public}@",  buf,  0x16u);
          }
        }

        goto LABEL_58;
      }

      *(_DWORD *)buf = 138412290;
      id v54 = v10;
      id v34 = "%@ Opting out of slot since no apps are installed.";
    }

    else
    {
      uint64_t v30 = sub_1002F9484((uint64_t)&OBJC_CLASS___AppDefaultsManager);
      uint64_t v31 = ASDLogHandleForCategory(3LL);
      id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      BOOL v33 = v32;
      if (!v30)
      {
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          id v54 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v33,  OS_LOG_TYPE_DEFAULT,  "%@ Skipping sbsync because there are no arcade apps",  buf,  0xCu);
        }

        uint64_t v25 = 0;
        goto LABEL_50;
      }

      if (!os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
        goto LABEL_28;
      }
      *(_DWORD *)buf = 138412290;
      id v54 = v10;
      id v34 = "%@ Retrying opt-out of slot because a previous attempt failed";
    }

    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v33, OS_LOG_TYPE_ERROR, v34, buf, 0xCu);
    goto LABEL_28;
  }

  return result;
}

void sub_10004431C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_100044360(uint64_t a1)
{
  v2[60] = a1;
  v2[61] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[62] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[63] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[64] = swift_task_alloc(v5);
  v2[65] = swift_task_alloc(v5);
  v2[66] = swift_task_alloc(v5);
  v2[67] = swift_task_alloc(v5);
  v2[68] = swift_task_alloc(v5);
  v2[69] = swift_task_alloc(v5);
  uint64_t v6 = sub_1000079A0((uint64_t *)&unk_100459410);
  v2[70] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  v2[71] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[72] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[73] = swift_task_alloc(v9);
  v2[74] = swift_task_alloc(v9);
  v2[75] = swift_task_alloc(v9);
  return swift_task_switch(sub_100044468, v1, 0LL);
}

uint64_t sub_100044468()
{
  unint64_t v1 = *(void *)(v0[60] + OBJC_IVAR____TtC9appstored14UpdatesContext_reason);
  v0[76] = v1;
  type metadata accessor for LoadSoftwareUpdatesReason(0LL);
  v0[77] = v2;
  if (v1 > 8)
  {
    v0[40] = v1;
    return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v2, v0 + 40, v2, &type metadata for Int);
  }

  if (((1LL << v1) & 0xD6) != 0)
  {
    uint64_t v3 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
    CFPropertyListRef v4 = (id)sub_1002FA158(v3);
    if (v4)
    {
      unint64_t v5 = (void *)v4;
      uint64_t v6 = v0[74];
      uint64_t v7 = v0[72];
      uint64_t v8 = v0[71];
      uint64_t v9 = v0[70];
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v4);

      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
      v10(v9, v6, v8);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0LL, 1LL, v8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1LL, v8) != 1)
      {
        uint64_t v11 = v0[75];
        uint64_t v12 = v0[73];
        uint64_t v13 = v0[72];
        uint64_t v14 = v0[71];
        uint64_t v15 = (void *)v0[60];
        uint64_t v16 = ((uint64_t (*)(uint64_t, void, uint64_t))v10)(v11, v0[70], v14);
        static Logger.updates.getter(v16);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v11, v14);
        uint64_t v17 = (os_log_s *)Logger.logObject.getter(v15);
        os_log_type_t v18 = static os_log_type_t.default.getter();
        BOOL v19 = os_log_type_enabled(v17, v18);
        uint64_t v20 = v0[75];
        uint64_t v21 = v0[73];
        uint64_t v22 = v0[72];
        uint64_t v23 = v0[71];
        uint64_t v24 = v0[69];
        uint64_t v25 = v0[62];
        uint64_t v44 = v0[63];
        uint64_t v26 = (char *)v0[60];
        if (v19)
        {
          uint64_t v43 = v0[69];
          uint64_t v27 = swift_slowAlloc(22LL, -1LL);
          os_log_type_t type = v18;
          uint64_t v28 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v41 = swift_slowAlloc(32LL, -1LL);
          uint64_t v45 = v41;
          *(_DWORD *)uint64_t v27 = 138412546;
          uint64_t v42 = v20;
          uint64_t v29 = *(void **)&v26[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
          v0[47] = v29;
          id v30 = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 47, v0 + 48, v27 + 4, v27 + 12);
          void *v28 = v29;

          *(_WORD *)(v27 + 12) = 2082;
          uint64_t v31 = sub_10004BF20( (unint64_t *)&qword_100459420,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v23, v31);
          unint64_t v34 = v33;
          v0[51] = sub_100088DB4(v32, v33, &v45);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 51, v0 + 52, v27 + 14, v27 + 22);
          swift_bridgeObjectRelease(v34);
          uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
          v35(v21, v23);
          _os_log_impl( (void *)&_mh_execute_header,  v17,  type,  "[%@] Starting reload for automatic updates, last auto-update completion date: %{public}s",  (uint8_t *)v27,  0x16u);
          uint64_t v36 = sub_1000079A0((uint64_t *)&unk_100458F50);
          swift_arrayDestroy(v28, 1LL, v36);
          swift_slowDealloc(v28, -1LL, -1LL);
          swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v41, -1LL, -1LL);
          swift_slowDealloc(v27, -1LL, -1LL);

          (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v25);
          v35(v42, v23);
        }

        else
        {

          unint64_t v38 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
          v38(v21, v23);

          (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v24, v25);
          v38(v20, v23);
        }

        goto LABEL_12;
      }
    }

    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v0[72] + 56LL))(v0[70], 1LL, 1LL, v0[71]);
    }

    sub_100015240(v0[70], (uint64_t *)&unk_100459410);
  }

LABEL_12:
  uint64_t v39 = (void *)swift_task_alloc(dword_10045940C);
  v0[78] = v39;
  *uint64_t v39 = v0;
  v39[1] = sub_10004489C;
  return sub_100047EA4(v0[60]);
}

  uint64_t v23 = v30;
  uint64_t v24 = *v29;
  *(void *)(*v29 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  id result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))( *(void *)(v24 + 48) + *(void *)(v7 + 72) * a2,  v23,  v6);
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  uint64_t v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }

  __break(1u);
LABEL_15:
  id result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v6);
  __break(1u);
  return result;
}

      if (v36 >= v44)
      {
        __break(1u);
LABEL_108:
        __break(1u);
LABEL_109:
        __break(1u);
LABEL_110:
        __break(1u);
LABEL_111:
        __break(1u);
        goto LABEL_112;
      }

      id v46 = Field.name.getter(v36, v35);
      NSString v47 = v45;
      char v138 = v46;
      id v139 = v45;
      if (v46 == 0x79654B676F6CLL && v45 == 0xE600000000000000LL)
      {
        unint64_t v48 = 0xE600000000000000LL;
        goto LABEL_21;
      }

      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79654B676F6CLL, 0xE600000000000000LL, v46, v45, 0LL) & 1) != 0) {
        goto LABEL_17;
      }
      if (v46 == 6775156 && v47 == 0xE300000000000000LL)
      {
        unint64_t v48 = 0xE300000000000000LL;
        goto LABEL_21;
      }

      if ((_stringCompareWithSmolCheck(_:_:expecting:)(6775156LL, 0xE300000000000000LL, v46, v47, 0LL) & 1) != 0
        || *(void *)"timestamp" == v46 && *(void *)"p" == v47
        || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)"timestamp", *(void *)"p", v46, v47, 0LL) & 1) != 0)
      {
LABEL_17:
        unint64_t v48 = v47;
        goto LABEL_21;
      }

      uint64_t v128 = v36;
      id v129 = a1;
      swift_bridgeObjectRetain(v47);
      swift_arrayDestroy("logKey", 3LL, &type metadata for String);
      BOOL v74 = HIBYTE(v47) & 0xF;
      if ((v47 & 0x2000000000000000LL) == 0) {
        BOOL v74 = v46 & 0xFFFFFFFFFFFFLL;
      }
      if (v74)
      {
        id v75 = 7LL;
        if ((v46 & 0x800000000000000LL) == 0 && (v47 & 0x1000000000000000LL) != 0) {
          id v75 = 11LL;
        }
        unint64_t v76 = v75 | (v74 << 16);
        while (1)
        {
          unint64_t v76 = String.index(before:)(v76, v46, v47);
          unint64_t v78 = v138;
          unint64_t v77 = v139;
          swift_bridgeObjectRetain(v139);
          uint64_t v79 = String.index(after:)(v76, v78, v77);
          swift_bridgeObjectRelease(v77);
          id v80 = HIBYTE(v77) & 0xF;
          if ((v77 & 0x2000000000000000LL) == 0) {
            id v80 = v78 & 0xFFFFFFFFFFFFLL;
          }
          if (v79 >> 14 >= 4 * v80) {
            goto LABEL_54;
          }
          swift_bridgeObjectRetain(v77);
          uint64_t v81 = String.subscript.getter(v76, v78, v77);
          uint64_t v83 = v82;
          swift_bridgeObjectRelease(v77);
          if ((Character._isSingleScalar.getter(v81, v83) & 1) != 0)
          {
            if ((sub_10008A0EC(v81, v83) & 0x100000000LL) != 0) {
              goto LABEL_113;
            }
            id v84 = Unicode.Scalar.properties.getter();
            uint64_t v85 = Unicode.Scalar.Properties.isLowercase.getter(v84);
            (*(void (**)(char *, uint64_t))(v133 + 8))(v8, v6);
            if ((v85 & 1) != 0)
            {
LABEL_68:
              swift_bridgeObjectRelease(v83);
              goto LABEL_69;
            }
          }

          if ((Character._isLowercased.getter(v81, v83) & 1) == 0) {
            break;
          }
          if ((Character._isSingleScalar.getter(v81, v83) & 1) != 0)
          {
            if ((sub_10008A0EC(v81, v83) & 0x100000000LL) != 0) {
              goto LABEL_115;
            }
            os_log_type_t v86 = Unicode.Scalar.properties.getter();
            int v87 = Unicode.Scalar.Properties.isCased.getter(v86);
            (*(void (**)(char *, uint64_t))(v133 + 8))(v8, v6);
            if ((v87 & 1) != 0) {
              goto LABEL_68;
            }
          }

          if ((Character._isUppercased.getter(v81, v83) & 1) == 0) {
            goto LABEL_68;
          }
          uint64_t v88 = Character._isLowercased.getter(v81, v83);
          swift_bridgeObjectRelease(v83);
          if ((v88 & 1) != 0) {
            goto LABEL_82;
          }
LABEL_69:
          uint64_t v89 = v138;
          uint64_t v90 = v139;
          swift_bridgeObjectRetain(v139);
          id v91 = String.subscript.getter(v79, v89, v90);
          uint64_t v93 = v92;
          swift_bridgeObjectRelease(v90);
          if ((Character._isSingleScalar.getter(v91, v93) & 1) != 0)
          {
            if ((sub_10008A0EC(v91, v93) & 0x100000000LL) != 0) {
              goto LABEL_114;
            }
            uint64_t v94 = Unicode.Scalar.properties.getter();
            os_log_t v95 = Unicode.Scalar.Properties.isUppercase.getter(v94);
            (*(void (**)(char *, uint64_t))(v133 + 8))(v8, v6);
            if ((v95 & 1) != 0) {
              goto LABEL_79;
            }
          }

          if ((Character._isUppercased.getter(v91, v93) & 1) != 0)
          {
            if ((Character._isSingleScalar.getter(v91, v93) & 1) != 0)
            {
              if ((sub_10008A0EC(v91, v93) & 0x100000000LL) != 0) {
                goto LABEL_116;
              }
              id v96 = Unicode.Scalar.properties.getter();
              uint64_t v97 = Unicode.Scalar.Properties.isCased.getter(v96);
              (*(void (**)(char *, uint64_t))(v133 + 8))(v8, v6);
              if ((v97 & 1) != 0) {
                goto LABEL_79;
              }
            }

            if ((Character._isUppercased.getter(v91, v93) & 1) == 0)
            {
LABEL_79:
              swift_bridgeObjectRelease(v93);
LABEL_80:
              String.insert(_:at:)(95LL, 0xE100000000000000LL, v79);
              goto LABEL_54;
            }

            id v98 = Character._isLowercased.getter(v91, v93);
            swift_bridgeObjectRelease(v93);
            if ((v98 & 1) == 0) {
              goto LABEL_80;
            }
          }

          else
          {
            swift_bridgeObjectRelease(v93);
          }
  }

  else
  {
    unint64_t v5 = 0LL;
  }

  return v5;
}

  return a1;
}

  return v6;
}

  uint64_t v17 = ASDLogHandleForCategory(14LL);
  os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v19 = *(void **)(a1 + 90);
    uint64_t v20 = *(id *)(a1 + 74);
    uint64_t v21 = v19;
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v20 bundleID]);
    *(_DWORD *)buf = 138412546;
    *(void *)&buf[4] = v19;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Fetching app receipt",  buf,  0x16u);
  }

  id v166 = (void *)objc_claimAutoreleasedReturnValue([v170 URLForKey:@"app-receipt-create"]);
LABEL_42:
  id v168 = -[AMSURLRequestEncoder initWithBag:](objc_alloc(&OBJC_CLASS___AMSURLRequestEncoder), "initWithBag:", v170);
  -[AMSURLRequestEncoder setAccount:](v168, "setAccount:", v171);
  -[AMSURLRequestEncoder setClientInfo:](v168, "setClientInfo:", v169);
  id v63 = *(id *)(a1 + 74);
  id v64 = *(id *)(a1 + v6[587]);
  else {
    uint64_t v65 = [*(id *)(a1 + v6[587]) isEqualToString:AMSAccountMediaTypeAppStoreBeta];
  }

  id v66 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  os_log_type_t v67 = *(void **)(a1 + 50);
  if (v67)
  {
    uint64_t v68 = v67;
  }

  else
  {
    unint64_t v69 = sub_10028B524(a1, *(void **)(a1 + v6[587]));
    uint64_t v68 = (id)objc_claimAutoreleasedReturnValue(v69);
  }

  id v163 = v68;
  uint64_t v164 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v68, "ams_DSID"));
  unint64_t v70 = objc_claimAutoreleasedReturnValue([v63 purchaserDSID]);
  uint64_t v71 = (void *)v70;
  if ((v65 & 1) != 0 || !v164 || !v70)
  {
    unint64_t v77 = (id)v70;
    goto LABEL_66;
  }

  if (([v164 isEqualToNumber:v70] & 1) == 0)
  {
    id v72 = sub_100320738((uint64_t)&OBJC_CLASS___FamilyManager);
    id v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
    BOOL v74 = sub_100320BFC((uint64_t)v73, 1);
    id v75 = (void *)objc_claimAutoreleasedReturnValue(v74);

    if (v75 && [v75 containsObject:v71])
    {
      id v161 = (void *)objc_claimAutoreleasedReturnValue([v63 storefront]);
      unint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v163, "ams_storefront"));
      id v160 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v76 integerValue]));

      if (v161 && v160 && [v160 isEqualToNumber:v161])
      {
        unint64_t v77 = [v164 copy];

        unint64_t v78 = ASDLogHandleForCategory(14LL);
        uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          id v80 = *(void **)(a1 + 90);
          uint64_t v81 = *(id *)(a1 + 74);
          unsigned int v158 = v80;
          id v82 = (void *)objc_claimAutoreleasedReturnValue([v81 bundleID]);
          *(_DWORD *)buf = 138413059;
          *(void *)&buf[4] = v80;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v82;
          *(_WORD *)&buf[22] = 2113;
          uint64_t v192 = v77;
          *(_WORD *)unint64_t v193 = 2114;
          *(void *)&v193[2] = v160;
          _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Using family primary account: %{private}@ and storeFront: %{public}@",  buf,  0x2Au);
        }
      }

      else
      {
        uint64_t v83 = ASDLogHandleForCategory(14LL);
        uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          id v84 = *(void **)(a1 + 90);
          uint64_t v85 = *(id *)(a1 + 74);
          unint64_t v159 = v84;
          os_log_type_t v86 = (void *)objc_claimAutoreleasedReturnValue([v85 bundleID]);
          *(_DWORD *)buf = 138413315;
          *(void *)&buf[4] = v84;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v86;
          *(_WORD *)&buf[22] = 2113;
          uint64_t v192 = v71;
          *(_WORD *)unint64_t v193 = 2114;
          *(void *)&v193[2] = v161;
          *(_WORD *)&v193[10] = 2114;
          *(void *)&v193[12] = v160;
          _os_log_impl( (void *)&_mh_execute_header,  v79,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Using app account: %{private}@ due to different item storeFront: %{public}@ primary accoun t storeFront: %{public}@",  buf,  0x34u);
        }

        unint64_t v77 = v71;
      }
    }

    else
    {
      unint64_t v77 = v71;
    }

LABEL_66:
    uint64_t v71 = v77;
    if (!v77) {
      goto LABEL_68;
    }
  }

  int v87 = (void *)objc_claimAutoreleasedReturnValue([v71 stringValue]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v87, @"dsid");

LABEL_68:
  uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v88, "ams_secureTokenForAccount:", v163));

  if (v89) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v89, @"xToken");
  }
  uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDevice deviceGUID](&OBJC_CLASS___AMSDevice, "deviceGUID"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v90, @"guid");

  id v91 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDevice serialNumber](&OBJC_CLASS___AMSDevice, "serialNumber"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v91, @"serialNumber");

  id v92 = *(void *)(a1 + 114);
  if (v92)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v92, @"vid");
  }

  else
  {
    uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue([v63 deviceIdentifierForVendor]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v93, @"vid");
  }

  uint64_t v94 = *(void *)(a1 + 138);
  LOBYTE(v95) = v94;
  if ((v94 & 1) != 0)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v66,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"want-expired");
    os_log_t v95 = *(void *)(a1 + 138);
  }

  if ((v95 & 2) != 0)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v66,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"want-revoked");
    goto LABEL_79;
  }

  if (v95 & 8 | v94 & 1)
  {
LABEL_79:
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v66,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"want-vpp");
    id v96 = 1;
    goto LABEL_80;
  }

  id v96 = 0;
LABEL_80:
  if ([v63 hasMIDBasedSINF])
  {
    uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDevice serialNumber](&OBJC_CLASS___AMSDevice, "serialNumber"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v97, @"serialNumber");
  }

  id v98 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 74) bundlePath]);
  uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue(+[ASFReceipt receiptFromBundleAtPath:](&OBJC_CLASS___ASFReceipt, "receiptFromBundleAtPath:", v98));

  if ((v65 & 1) != 0)
  {
    id v100 = *(void *)(a1 + 98);
    if (v100)
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v100, @"bundle-id");
    }

    else
    {
      BOOL v109 = (void *)objc_claimAutoreleasedReturnValue([v63 bundleID]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v109, @"bundle-id");
    }

    uint64_t v110 = *(void *)(a1 + 106);
    if (v110)
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v66,  "setObject:forKeyedSubscript:",  v110,  @"version-id");
    }

    else
    {
      unint64_t v111 = (void *)objc_claimAutoreleasedReturnValue([v63 bundleVersion]);
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v66,  "setObject:forKeyedSubscript:",  v111,  @"version-id");
    }
  }

  else
  {
    id v101 = @"adam-id";
    if (v96) {
      id v101 = @"appAdamId";
    }
    int v102 = v101;
    uint64_t v103 = *(id *)(a1 + 130);
    if (!v103) {
      uint64_t v103 = [v63 storeItemID];
    }
    uint64_t v104 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v103));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v104, v102);

    id v105 = @"software-version-external-identifier";
    if (v96) {
      id v105 = @"appExtVrsId";
    }
    id v106 = v105;

    uint64_t v107 = *(id *)(a1 + 122);
    if (!v107) {
      uint64_t v107 = [v63 storeExternalVersionID];
    }
    id v108 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v107));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v66, "setObject:forKeyedSubscript:", v108, v106);
  }

  unint64_t v112 = (void *)objc_claimAutoreleasedReturnValue( -[AMSURLRequestEncoder requestWithMethod:bagURL:parameters:]( v168,  "requestWithMethod:bagURL:parameters:",  4LL,  v166,  v66));
  *(void *)buf = v162;
  id v56 = (void *)objc_claimAutoreleasedReturnValue([v112 resultWithError:buf]);
  uint64_t v113 = *(id *)buf;

  unint64_t v114 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 74) bundleID]);
  uint64_t v115 = [v114 isEqualToString:@"com.apple.news"];

  if (v115) {
    [v56 setValue:@"News" forHTTPHeaderField:AMSHTTPHeaderClientApplication];
  }

  uint64_t v24 = v113;
LABEL_104:
  uint64_t v116 = v24;

  os_log_type_t v117 = v116;
  if (!v117)
  {
    uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLSessionConfiguration defaultSessionConfiguration]( &OBJC_CLASS___NSURLSessionConfiguration,  "defaultSessionConfiguration"));
    uint64_t v122 = [v121 copy];

    objc_msgSend(v122, "ams_configureWithProcessInfo:bag:", v169, v170);
    if (*(_BYTE *)(a1 + 42) || (*(void *)(a1 + 138) & 0xBLL) != 0)
    {
      objc_msgSend(v122, "set_sourceApplicationBundleIdentifier:", @"com.apple.TVAppStore");
    }

    else
    {
      id v123 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 74) bundleID]);
      objc_msgSend(v122, "set_sourceApplicationBundleIdentifier:", v123);
    }

    id v124 = -[AMSURLSession initWithConfiguration:]( objc_alloc(&OBJC_CLASS___AMSURLSession),  "initWithConfiguration:",  v122);
    -[AMSURLSession setDelegate:](v124, "setDelegate:", a1);
    os_log_t v125 = (void *)objc_claimAutoreleasedReturnValue(-[AMSURLSession dataTaskPromiseWithRequest:](v124, "dataTaskPromiseWithRequest:", v56));
    uint64_t v172 = 0LL;
    uint64_t v126 = (void *)objc_claimAutoreleasedReturnValue([v125 resultWithError:&v172]);
    int v118 = v172;
    uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue([v126 object]);

    uint64_t v120 = 0LL;
    if (v118 || !v119) {
      goto LABEL_126;
    }
    uint64_t v127 = (void *)objc_claimAutoreleasedReturnValue([v119 objectForKeyedSubscript:@"status"]);
    uint64_t v128 = v127;
    if (v127 && [v127 integerValue])
    {
      id v129 = [v128 integerValue];
      uint64_t v130 = ASDErrorWithTitleAndMessage(ASDServerErrorDomain, v129, 0LL, 0LL);
      int v118 = (id)objc_claimAutoreleasedReturnValue(v130);
      uint64_t v120 = 0LL;
LABEL_125:

      goto LABEL_126;
    }

    id v131 = (void *)objc_claimAutoreleasedReturnValue([v119 objectForKeyedSubscript:@"receipt"]);
    os_log_type_t v133 = objc_opt_class(&OBJC_CLASS___NSString, v132);
    uint64_t v135 = objc_opt_class(v133, v134);
    if ((objc_opt_isKindOfClass(v131, v135) & 1) != 0)
    {
      uint64_t v137 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v131,  0LL);
    }

    else
    {
      char v138 = objc_opt_class(&OBJC_CLASS___NSData, v136);
      id v140 = objc_opt_class(v138, v139);
      if ((objc_opt_isKindOfClass(v131, v140) & 1) == 0)
      {
        if (v131)
        {
          id v143 = ASDLogHandleForCategory(14LL);
          id v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v143);
          if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
          {
            id v154 = *(void **)(a1 + 90);
            unint64_t v155 = *(id *)(a1 + 74);
            double v156 = v154;
            uint64_t v157 = (void *)objc_claimAutoreleasedReturnValue([v155 bundleID]);
            *(_DWORD *)buf = 138412546;
            *(void *)&buf[4] = v154;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v157;
            _os_log_error_impl( (void *)&_mh_execute_header,  v144,  OS_LOG_TYPE_ERROR,  "[%@] [%{public}@] Receipt format invalid",  buf,  0x16u);
          }

          uint64_t v145 = ASDErrorWithTitleAndMessage( ASDErrorDomain,  507LL,  @"Invalid receipt data",  @"Invalid receipt data");
          int v118 = (id)objc_claimAutoreleasedReturnValue(v145);
          uint64_t v120 = 0LL;
          goto LABEL_121;
        }

        uint64_t v120 = 0LL;
LABEL_120:
        int v118 = 0LL;
LABEL_121:
        uint64_t v141 = (void *)objc_claimAutoreleasedReturnValue([v119 objectForKeyedSubscript:@"revoked"]);

        if (v141 && (objc_opt_respondsToSelector(v141, "BOOLValue") & 1) != 0) {
          *(_BYTE *)(a1 + 43) = [v141 BOOLValue];
        }

        goto LABEL_125;
      }

      uint64_t v137 = v131;
    }

    uint64_t v120 = v137;
    goto LABEL_120;
  }

  int v118 = v117;
  uint64_t v119 = 0LL;
  uint64_t v120 = 0LL;
LABEL_126:
  if (a3) {
    *a3 = v118;
  }

  return v120;
}

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    os_log_type_t v18 = *(void **)(v17 + 8);
    *(void *)(v17 + 8) = 0LL;

    BOOL v19 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) != 0;
  }

  else
  {
    BOOL v19 = 0LL;
  }

  return v19;
}

  uint64_t v15 = 0LL;
LABEL_13:
  if (!*(void *)(*(void *)(a1[4] + 8LL) + 40LL) && a1[6]) {
    *(void *)a1[6] = v15;
  }
}

  osBuild = self->_osBuild;
  if (osBuild) {
    sub_1002FB7F8(v6, osBuild);
  }
  hardwareFamily = self->_hardwareFamily;
  if (hardwareFamily) {
    sub_1002FB3F8(v6, hardwareFamily);
  }
  hardwareModel = self->_hardwareModel;
  if (hardwareModel) {
    sub_1002FB45C(v6, hardwareModel);
  }
  os = self->_os;
  if (os) {
    sub_1002FB668(v6, os);
  }
  if (v7) {
    uint64_t v20 = v7[16];
  }
  else {
    uint64_t v20 = 0LL;
  }
  uint64_t v21 = v20;

  if (!v21)
  {
    if (v7) {
      uint64_t v22 = v7[9];
    }
    else {
      uint64_t v22 = 0LL;
    }
    uint64_t v23 = v22;
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "ams_activeiTunesAccount"));

    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ams_DSID"));
    double v156 = 0LL;
    uint64_t v27 = sub_100224C38((uint64_t)&OBJC_CLASS___SbsyncTask, v26, &v156);
    uint64_t v28 = v156;

    if (v28)
    {
      uint64_t v29 = ASDLogHandleForCategory(4LL);
      id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v137 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ams_DSID"));
        *(_DWORD *)buf = 138412546;
        id v161 = v23;
        id v162 = 2114;
        id v163 = v137;
        _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "[%@] Error looking up subscription bag status for account: %{public}@",  buf,  0x16u);
      }
    }

    if (v27)
    {
      uint64_t v31 = 0;
      uint64_t v32 = 1;
    }

    else
    {
      unint64_t v155 = 0LL;
      uint64_t v32 = sub_1002A648C(self, 1, v23, &v155, 0.0);
      unint64_t v33 = v155;
      if (v33)
      {
        unint64_t v34 = ASDLogHandleForCategory(4LL);
        uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
        {
          char v138 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ams_DSID"));
          *(_DWORD *)buf = 138412802;
          id v161 = v23;
          id v162 = 2114;
          id v163 = v138;
          uint64_t v164 = 2114;
          v165[0] = v33;
          _os_log_error_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_ERROR,  "[%@] Error looking up fsEntitlement status for account: %{public}@ error: %{public}@",  buf,  0x20u);
        }
      }

      uint64_t v31 = v32;
    }

    uint64_t v36 = ASDLogHandleForCategory(14LL);
    char v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = v27;
      unint64_t v38 = v7;
      uint64_t v39 = v11;
      id v40 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ams_DSID"));
      *(_DWORD *)buf = 138413058;
      id v161 = v23;
      id v162 = 2114;
      id v163 = v40;
      uint64_t v164 = 1024;
      LODWORD(v165[0]) = v39;
      uint64_t v7 = v38;
      WORD2(v165[0]) = 1024;
      *(_DWORD *)((char *)v165 + 6) = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "[%@] Subscribed accountID: %{public}@ bag subscribed: %d fsEntitlement subscribed: %{BOOL}d",  buf,  0x22u);
    }

    else {
      uint64_t v42 = 0LL;
    }

    uint64_t v43 = ASDLogHandleForCategory(3LL);
    uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    uint64_t v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
    if (v42)
    {
      if (v45)
      {
        if (v7) {
          id v46 = v7[9];
        }
        else {
          id v46 = 0LL;
        }
        NSString v47 = v46;
        *(_DWORD *)buf = 138412546;
        id v161 = v47;
        id v162 = 2112;
        id v163 = v42;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "[%@] Setting cached subscribed accountID to: %@",  buf,  0x16u);
      }

      uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[ACAccountStore ams_sharedAccountStore]( &OBJC_CLASS___ACAccountStore,  "ams_sharedAccountStore"));
      id v49 = (id)objc_claimAutoreleasedReturnValue(-[os_log_s ams_iTunesAccountWithDSID:](v44, "ams_iTunesAccountWithDSID:", v42));
      if (v7) {
        objc_setProperty_nonatomic_copy(v7, v48, v49, 128LL);
      }
    }

    else
    {
      if (!v45)
      {
LABEL_57:

        goto LABEL_58;
      }

      if (v7) {
        id v50 = v7[9];
      }
      else {
        id v50 = 0LL;
      }
      id v49 = v50;
      *(_DWORD *)buf = 138412290;
      id v161 = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "[%@] Unable to determine the subscription status for the active account",  buf,  0xCu);
    }

    goto LABEL_57;
  }
}

  return v6;
}
}

  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0;
LABEL_23:

  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_BYTE)v10;
}

    BOOL v19 = [v7 count];
    uint64_t v20 = [obj count];
    if (a4) {
      *a4 = 0LL;
    }
    if (v19 == v20) {
      uint64_t v21 = v7;
    }
    else {
      uint64_t v21 = 0LL;
    }
    uint64_t v22 = v21;

    uint64_t v6 = v24;
  }

  else
  {
    uint64_t v22 = 0LL;
  }

  return v22;
}

    os_log_type_t v18 = [v5 count];
    BOOL v19 = [v6 count];
    if (a3) {
      *a3 = 0LL;
    }
    if (v18 == v19) {
      uint64_t v20 = v5;
    }
    else {
      uint64_t v20 = 0LL;
    }
    uint64_t v21 = v20;

    CFPropertyListRef v4 = v23;
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  return v21;
}

uint64_t sub_10004489C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 624);
  uint64_t v5 = *(void *)(*v2 + 488);
  *(void *)(v3 + 632) = a1;
  *(void *)(v3 + 64_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100044900, v5, 0LL);
}

uint64_t sub_100044900()
{
  uint64_t v1 = v0[79];
  uint64_t v2 = (void *)v0[60];
  uint64_t v3 = type metadata accessor for MediaAPIUpdateAvailabilityCheck(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[81] = sub_10000A010(v2, v1);
  uint64_t v4 = (void *)swift_task_alloc(dword_1004585CC);
  v0[82] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100044984;
  return sub_10000A438();
}

uint64_t sub_100044984(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 656LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 488LL);
  *(void *)(*(void *)v1 + 664LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000449E4, v3, 0LL);
}

void sub_1000449E4()
{
  uint64_t v1 = isa + 45;
  uint64_t v2 = isa[83];
  isa[45] = _swiftEmptyArrayStorage;
  uint64_t v3 = sub_100048D6C(*(void *)(v2 + 16), 0);
  specialized Array._endMutation()(v3);
  uint64_t v4 = *(void *)(v2 + 16);
  if (v4)
  {
    uint64_t v5 = (id *)(isa[83] + 32LL);
    do
    {
      id v6 = *v5;
      if ((swift_isUniquelyReferenced_nonNull() & 1) == 0)
      {
        id v7 = objc_allocWithZone((Class)type metadata accessor for MediaAPIUpdate());
        uint64_t v9 = sub_100074BDC(v6, v8);

        id v6 = v9;
      }

      id v10 = v6;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v10);
      unint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v11 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v12 >= v11 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1LL);
      }
      uint64_t v13 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v10);
      specialized Array._endMutation()(v13);

      ++v5;
      --v4;
    }

    while (v4);
  }

  swift_bridgeObjectRelease(isa[83]);
  isa[42] = _swiftEmptyDictionarySingleton;
  Class v14 = (Class)isa[45];
  os_log_type_t type = isa + 45;
  uint64_t v15 = *(void *)(((unint64_t)v14 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(v14);
  while (1)
  {
    __int128 v196 = isa + 42;
    id v180 = isa;
    uint64_t v178 = (id *)(isa + 58);
    if (!v15) {
      break;
    }
    uint64_t v16 = 0LL;
    uint64_t v177 = isa + 59;
    uint64_t v17 = isa[80];
    unint64_t v190 = (unint64_t)v14 & 0xC000000000000001LL;
    uint64_t v18 = v17 & 0xFFFFFFFFFFFFFF8LL;
    uint64_t v179 = v17;
    if (v17 < 0) {
      uint64_t v18 = isa[80];
    }
    os_log_t log = (os_log_t)v18;
    unint64_t v186 = v17 & 0xC000000000000001LL;
    uint64_t v189 = v15;
    while (1)
    {
      Class v22 = v190 ? (Class)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v14) : v14[v16 + 4].isa;
      Class v23 = v22;
      uint64_t v21 = v16 + 1;
      if (__OFADD__(v16, 1LL)) {
        break;
      }
      if ((*((_BYTE *)&v22->isa + OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip) & 1) == 0)
      {
        sub_1000708AC();
        v24.super.super.Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
        Class isa = v24.super.super.isa;
        if (v186)
        {
          uint64_t v25 = __CocoaDictionary.lookup(_:)(v24.super.super.isa, log);
          if (!v25) {
            goto LABEL_38;
          }
          uint64_t v26 = v25;
          *uint64_t v177 = v25;
          uint64_t v27 = sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
          swift_unknownObjectRetain(v26);
          swift_dynamicCast(v178, v177, (char *)&type metadata for Swift.AnyObject + 8, v27, 7LL);
          id v28 = *v178;
          swift_unknownObjectRelease(v26);
        }

        else
        {
          if (!*(void *)(v179 + 16) || (unint64_t v29 = sub_100024010((uint64_t)v24.super.super.isa), (v30 & 1) == 0))
          {
LABEL_38:

LABEL_39:
            goto LABEL_16;
          }

          id v28 = *(id *)(*(void *)(v179 + 56) + 8 * v29);
        }

        if (!v28) {
          goto LABEL_39;
        }
      }

      uint64_t v31 = v14;
      Class v32 = v23;
      Class isa = (void *)sub_100070EF0();
      uint64_t v34 = v33;
      Class v14 = UInt._bridgeToObjectiveC()().super.super.isa;
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v196);
      __int128 v197 = (void *)*v196;
      uint64_t v36 = v197;
      *__int128 v196 = 0x8000000000000000LL;
      unint64_t v38 = sub_100023F7C((uint64_t)isa, v34);
      uint64_t v39 = v36[2];
      BOOL v40 = (v37 & 1) == 0;
      uint64_t v41 = v39 + v40;
      if (__OFADD__(v39, v40)) {
        goto LABEL_124;
      }
      char v42 = v37;
      if (v36[3] >= v41)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          if ((v37 & 1) == 0) {
            goto LABEL_36;
          }
        }

        else
        {
          sub_10007A924();
          uint64_t v36 = v197;
          if ((v42 & 1) == 0) {
            goto LABEL_36;
          }
        }
      }

      else
      {
        sub_100077E70(v41, isUniquelyReferenced_nonNull_native);
        uint64_t v36 = v197;
        unint64_t v43 = sub_100023F7C((uint64_t)isa, v34);
        if ((v42 & 1) != (v44 & 1))
        {
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
          return;
        }

        unint64_t v38 = v43;
        if ((v42 & 1) == 0)
        {
LABEL_36:
          v36[(v38 >> 6) + 8] |= 1LL << v38;
          uint64_t v45 = (void *)(v36[6] + 16 * v38);
          *uint64_t v45 = isa;
          v45[1] = v34;
          *(void *)(v36[7] + 8 * v38) = v14;
          uint64_t v46 = v36[2];
          BOOL v47 = __OFADD__(v46, 1LL);
          uint64_t v48 = v46 + 1;
          if (v47) {
            goto LABEL_125;
          }
          v36[2] = v48;
          swift_bridgeObjectRetain(v34);
          goto LABEL_15;
        }
      }

      uint64_t v19 = v36[7];
      uint64_t v20 = 8 * v38;

      *(void *)(v19 + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v14;
LABEL_15:
      Class isa = (void *)*v196;
      *__int128 v196 = v36;

      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(isa);
      Class v14 = v31;
      uint64_t v15 = v189;
      uint64_t v21 = v16 + 1;
LABEL_16:
      ++v16;
      if (v21 == v15) {
        goto LABEL_42;
      }
    }

    __break(1u);
LABEL_124:
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    __break(1u);
LABEL_130:
    else {
      uint64_t v171 = (unint64_t)v14 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain_n(v14, 2LL);
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter(v171);
    swift_bridgeObjectRelease(v14);
  }

LABEL_42:
  uint64_t v49 = swift_bridgeObjectRelease(v14);
  if (*(void *)(*v196 + 16LL))
  {
    id v50 = (void *)v180[60];
    static Logger.updates.getter(v49);
    uint64_t v51 = v180[42];
    id v52 = v50;
    swift_bridgeObjectRetain_n(v51, 2LL);
    id v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.default.getter();
    BOOL v55 = os_log_type_enabled(v53, v54);
    uint64_t v56 = v180[68];
    uint64_t v57 = v180[62];
    uint64_t v58 = v180[63];
    unint64_t v59 = (char *)v180[60];
    if (v55)
    {
      uint64_t v191 = v180[63];
      uint64_t v194 = v180[62];
      uint64_t v60 = swift_slowAlloc(22LL, -1LL);
      logb = v53;
      uint64_t v61 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v187 = swift_slowAlloc(32LL, -1LL);
      __int128 v197 = (void *)v187;
      *(_DWORD *)uint64_t v60 = 138412546;
      uint64_t v62 = *(void **)&v59[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      os_log_type_t typea = v54;
      v180[56] = v62;
      id v63 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v180 + 56, v180 + 57, v60 + 4, v60 + 12);
      *uint64_t v61 = v62;

      *(_WORD *)(v60 + 12) = 2082;
      uint64_t v64 = sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
      uint64_t v65 = swift_bridgeObjectRetain(v51);
      uint64_t v66 = Dictionary.Keys.description.getter(v65, &type metadata for String, v64, &protocol witness table for String);
      unint64_t v68 = v67;
      swift_bridgeObjectRelease(v51);
      v180[57] = sub_100088DB4(v66, v68, (uint64_t *)&v197);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v180 + 57, v178, v60 + 14, v60 + 22);
      swift_bridgeObjectRelease_n(v51, 2LL);
      swift_bridgeObjectRelease(v68);
      _os_log_impl( (void *)&_mh_execute_header,  logb,  typea,  "[%@] Setting updateAvailability as Available for apps: %{public}s",  (uint8_t *)v60,  0x16u);
      uint64_t v69 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v61, 1LL, v69);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_arrayDestroy(v187, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v187, -1LL, -1LL);
      swift_slowDealloc(v60, -1LL, -1LL);

      unint64_t v70 = *(void (**)(uint64_t, uint64_t))(v191 + 8);
      v70(v56, v194);
    }

    else
    {

      swift_bridgeObjectRelease_n(v51, 2LL);
      unint64_t v70 = *(void (**)(uint64_t, uint64_t))(v58 + 8);
      v70(v56, v57);
    }

    v180[84] = v70;
    id v108 = (void *)objc_opt_self(&OBJC_CLASS___LSApplicationRecord);
    swift_beginAccess(v196, v180 + 36, 0LL, 0LL);
    uint64_t v109 = v180[42];
    v180[85] = sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
    swift_bridgeObjectRetain(v109);
    Class v110 = Dictionary._bridgeToObjectiveC()().super.isa;
    v180[86] = v110;
    swift_bridgeObjectRelease(v109);
    _BYTE v180[7] = (char *)v180 + 732;
    v180[2] = v180;
    v180[3] = sub_100045E0C;
    uint64_t v111 = swift_continuation_init(v180 + 2, 1LL);
    v180[22] = _NSConcreteStackBlock;
    v180[23] = 0x40000000LL;
    v180[24] = sub_10007C198;
    v180[25] = &unk_1003DDC40;
    v180[26] = v111;
    [v108 setUpdateAvailabilityForApplicationsWithBundleIdentifiers:v110 completionHandler:v180 + 22];
    swift_continuation_await(v180 + 2);
    return;
  }

  uint64_t v71 = v180;
  uint64_t isEscapingClosureAtFileLocation = *type;
  uint64_t v73 = (unint64_t)*type >> 62;
  if (!v73)
  {
    Class isa = *(void **)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(*type);
    if (!isa) {
      goto LABEL_54;
    }
    goto LABEL_47;
  }

  while (2)
  {
    if (isEscapingClosureAtFileLocation < 0) {
      uint64_t v172 = isEscapingClosureAtFileLocation;
    }
    else {
      uint64_t v172 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
    Class isa = (void *)_CocoaArrayWrapper.endIndex.getter(v172);
    if (!isa)
    {
LABEL_54:
      swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
      if (!v73)
      {
        uint64_t v74 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
        goto LABEL_56;
      }

      goto LABEL_152;
    }

        goto LABEL_43;
      }

      if (a4 != 3) {
        goto LABEL_43;
      }
    }

    unint64_t v70 = v40;
    uint64_t v73 = v8;
    uint64_t v58 = v8;
    unint64_t v59 = v9;
    uint64_t v60 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = sub_100236FD0;
    id v75 = &unk_1003EDAF8;
    uint64_t v62 = v58;
    *(void *)&unint64_t v76 = v62;
    *((void *)&v76 + 1) = a1;
    id v63 = v59;
    char v77 = v63;
    unint64_t v78 = a5;
    [v61 modifyUsingTransaction:buf];

    uint64_t v64 = ASDLogHandleForCategory(3LL);
    uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v66 = (void *)objc_opt_class(a1, v65);
      uint64_t v69 = v66;
      unint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "componentsJoinedByString:", @", "));
      BOOL v40 = v70;
      unint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "componentsJoinedByString:", @", "));
      *(_DWORD *)buf = 138544130;
      *(void *)&buf[4] = v66;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v63;
      *(_WORD *)&buf[22] = 2114;
      id v75 = v67;
      LOWORD(v76) = 2114;
      *(void *)((char *)&v76 + 2) = v68;
      _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Recorded uninstalled apps: [%{public}@] for types: [%{public}@]",  buf,  0x2Au);
    }

    else
    {
      BOOL v40 = v70;
    }

    uint64_t v8 = v73;
    goto LABEL_42;
  }
}

LABEL_43:
LABEL_44:
  uint64_t v49 = sub_100324100(&self->super._error->super.isa, 0LL);
  id v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
  uint64_t v51 = [v50 isGameCenterEnabled];

  if ((v51 & 1) != 0)
  {
    id v52 = sub_100323C54(&self->super._error->super.isa);
    id v53 = (id *)objc_claimAutoreleasedReturnValue(v52);
    os_log_type_t v54 = ASDLogHandleForCategory(2LL);
    BOOL v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      *(void *)&buf[4] = v53;
      _os_log_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Notifying Game Center of app install",  buf,  0xCu);
    }

    unint64_t v78 = 0LL;
    uint64_t v79 = &v78;
    uint64_t v80 = 0x2050000000LL;
    uint64_t v56 = (id)qword_100462800;
    uint64_t v81 = qword_100462800;
    if (!qword_100462800)
    {
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&buf[16] = sub_100309840;
      uint64_t v83 = &unk_1003ECDF8;
      uint64_t v84 = &v78;
      sub_100309840((uint64_t)buf);
      uint64_t v56 = v79[3];
    }

    uint64_t v57 = v56;
    _Block_object_dispose(&v78, 8);
    uint64_t v58 = sub_1001E26D0(self->super._error, (uint64_t)@"bundle_id");
    unint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&buf[16] = sub_100309734;
    uint64_t v83 = &unk_1003E9CA8;
    uint64_t v84 = v53;
    uint64_t v60 = v53;
    [v57 gameCenterEnabledGameInstalled:v59 withCompletionHandler:buf];
  }

  uint64_t v61 = sub_1001E25D0(self->super._error, (uint64_t)@"metrics_install_type");
  uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
  id v63 = [v62 unsignedCharValue];

  uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(-[NSError valueForProperty:](self->super._error, "valueForProperty:", @"bundle_id"));
  if (v64)
  {
    uint64_t v65 = sub_100233508((uint64_t)&OBJC_CLASS___MetricsCoordinator);
    uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
    *(void *)buf = v64;
    unint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", buf, 1LL));
    sub_100235D6C((uint64_t)v66, v67, v63, 1LL);
  }

LABEL_53:
  unint64_t v68 = sub_100323D88(self->super._error);
  uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
  unint64_t v70 = [v69 isEqualToString:@"com.apple.TVAppStore"];

  if (v70)
  {
    uint64_t v71 = sub_10020FAD4((uint64_t)&OBJC_CLASS___RestoreManager);
    unint64_t v76 = (id)objc_claimAutoreleasedReturnValue(v71);
    sub_100213174((uint64_t)v76);
  }

LABEL_47:
    uint64_t v74 = 0LL;
    id v75 = &OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip;
    while (1)
    {
      unint64_t v76 = (isEscapingClosureAtFileLocation & 0xC000000000000001LL) != 0
          ? (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v74, isEscapingClosureAtFileLocation)
          : *(id *)(isEscapingClosureAtFileLocation + 8 * v74 + 32);
      char v77 = v76[OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip];

      if ((v77 & 1) != 0) {
        break;
      }
      unint64_t v78 = (void *)(v74 + 1);
      if (__OFADD__(v74, 1LL)) {
        goto LABEL_126;
      }
      ++v74;
      if (v78 == isa) {
        goto LABEL_54;
      }
    }

    swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
    v121.super.Class isa = (Class)(v74 + 1);
    if (__OFADD__(v74, 1LL)) {
      goto LABEL_157;
    }
    if (v73) {
      goto LABEL_158;
    }
    if (v121.super.isa != *(Class *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_76:
      uint64_t v73 = v74 + 5;
      while (1)
      {
        unint64_t v134 = v73 - 4;
        Class isa = (void *)(isEscapingClosureAtFileLocation & 0xC000000000000001LL);
        if ((isEscapingClosureAtFileLocation & 0xC000000000000001LL) != 0)
        {
          uint64_t v135 = (_BYTE *)specialized _ArrayBuffer._getElementSlowPath(_:)(v73 - 4, isEscapingClosureAtFileLocation);
        }

        else
        {
          if ((v134 & 0x8000000000000000LL) != 0) {
            goto LABEL_127;
          }
          if (v134 >= *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
            goto LABEL_128;
          }
          uint64_t v135 = *(id *)(isEscapingClosureAtFileLocation + 8 * v73);
        }

        char v136 = v135[*v75];

        if ((v136 & 1) == 0)
        {
          if (v134 != v74)
          {
            if (isa)
            {
              uint64_t v139 = specialized _ArrayBuffer._getElementSlowPath(_:)(v74, isEscapingClosureAtFileLocation);
              id v140 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)( v73 - 4,  isEscapingClosureAtFileLocation);
            }

            else
            {
              if (v74 < 0) {
                goto LABEL_135;
              }
              unint64_t v137 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
              if (v74 >= v137) {
                goto LABEL_136;
              }
              id v138 = *(id *)(isEscapingClosureAtFileLocation + 8 * v74 + 32);
              if ((v134 & 0x8000000000000000LL) != 0) {
                goto LABEL_137;
              }
              if (v134 >= v137) {
                goto LABEL_138;
              }
              uint64_t v139 = (uint64_t)v138;
              id v140 = *(id *)(isEscapingClosureAtFileLocation + 8 * v73);
            }

            Class isa = v140;
            int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(isEscapingClosureAtFileLocation);
            *os_log_type_t type = isEscapingClosureAtFileLocation;
            if (!isUniquelyReferenced_nonNull_bridgeObject
              || isEscapingClosureAtFileLocation < 0
              || (isEscapingClosureAtFileLocation & 0x4000000000000000LL) != 0)
            {
              uint64_t isEscapingClosureAtFileLocation = sub_1000800CC(isEscapingClosureAtFileLocation);
              *os_log_type_t type = isEscapingClosureAtFileLocation;
            }

            uint64_t v142 = *(void **)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL) + 8 * v74 + 0x20);
            *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL) + 8 * v74 + 0x2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = isa;

            specialized Array._endMutation()(v143);
            uint64_t isEscapingClosureAtFileLocation = *type;
            if (!swift_isUniquelyReferenced_nonNull_bridgeObject(*type)
              || isEscapingClosureAtFileLocation < 0
              || (isEscapingClosureAtFileLocation & 0x4000000000000000LL) != 0)
            {
              uint64_t isEscapingClosureAtFileLocation = sub_1000800CC(isEscapingClosureAtFileLocation);
              *os_log_type_t type = isEscapingClosureAtFileLocation;
            }

            if ((v134 & 0x8000000000000000LL) != 0) {
              goto LABEL_139;
            }
            uint64_t v144 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
            if (v134 >= *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_140;
            }
            uint64_t v145 = *(void **)(v144 + 8 * v73);
            *(void *)(v144 + 8 * v73) = v139;

            uint64_t isEscapingClosureAtFileLocation = (uint64_t)type;
            specialized Array._endMutation()(v146);
          }

          BOOL v47 = __OFADD__(v74++, 1LL);
          if (v47) {
            break;
          }
        }

        BOOL v47 = __OFADD__(v134, 1LL);
        uint64_t v147 = v73 - 3;
        if (v47) {
          goto LABEL_129;
        }
        uint64_t isEscapingClosureAtFileLocation = *type;
        if ((unint64_t)*type >> 62)
        {
          if (isEscapingClosureAtFileLocation < 0) {
            uint64_t v149 = *type;
          }
          else {
            uint64_t v149 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
          }
          swift_bridgeObjectRetain(*type);
          uint64_t v148 = _CocoaArrayWrapper.endIndex.getter(v149);
          swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
        }

        else
        {
          uint64_t v148 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
        }

        ++v73;
        if (v147 == v148) {
          goto LABEL_56;
        }
      }

      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
      continue;
    }

    break;
  }

  while (1)
  {
LABEL_56:
    if ((unint64_t)isEscapingClosureAtFileLocation >> 62)
    {
      if (isEscapingClosureAtFileLocation < 0) {
        uint64_t v173 = isEscapingClosureAtFileLocation;
      }
      else {
        uint64_t v173 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
      uint64_t v79 = _CocoaArrayWrapper.endIndex.getter(v173);
      swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
      if (v79 < v74)
      {
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        if (isEscapingClosureAtFileLocation < 0) {
          uint64_t v174 = isEscapingClosureAtFileLocation;
        }
        else {
          uint64_t v174 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
        uint64_t v74 = _CocoaArrayWrapper.endIndex.getter(v174);
        swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
        continue;
      }
    }

    else
    {
      uint64_t v79 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v79 < v74) {
        goto LABEL_150;
      }
    }

    uint64_t v80 = v71[80];
    uint64_t v81 = (void *)v71[60];
    sub_1000803D0(v74, v79);
    v71[39] = 0LL;
    uint64_t v192 = objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseStore);
    id v82 = sub_100237D18(v192);
    uint64_t v83 = (void *)swift_allocObject(&unk_1003DDC68, 48LL, 7LL);
    v71[88] = v83;
    v83[2] = type;
    v83[3] = v81;
    v83[4] = v80;
    v83[5] = v71 + 39;
    uint64_t v195 = (id *)(v71 + 39);
    uint64_t v84 = swift_allocObject(&unk_1003DDC90, 32LL, 7LL);
    *(void *)(v84 + 16) = sub_10004AAC8;
    *(void *)(v84 + 24) = v83;
    v71[14] = sub_1000366C0;
    v71[15] = v84;
    Class v14 = (Class)_NSConcreteStackBlock;
    v71[10] = _NSConcreteStackBlock;
    v71[11] = 1107296256LL;
    v71[12] = sub_100028ECC;
    v71[13] = &unk_1003DDCA8;
    uint64_t v85 = _Block_copy(v71 + 10);
    uint64_t v86 = v71[15];
    id v87 = v81;
    swift_retain(v84);
    swift_release(v86);
    [v82 modifyUsingTransaction:v85];

    _Block_release(v85);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v84, "", 88LL, 1209LL, 60LL, 1LL);
    uint64_t v88 = swift_release(v84);
    if ((isEscapingClosureAtFileLocation & 1) != 0) {
      goto LABEL_151;
    }
    uint64_t v89 = v71 + 44;
    uint64_t v90 = (void *)v71[60];
    static Logger.updates.getter(v88);
    id v91 = (os_log_s *)Logger.logObject.getter(v90);
    os_log_type_t v92 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v91, v92))
    {
      uint64_t v93 = (char *)v71[60];
      uint64_t v94 = swift_slowAlloc(38LL, -1LL);
      os_log_t v95 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_t loga = (os_log_t)swift_slowAlloc(32LL, -1LL);
      __int128 v197 = loga;
      *(_DWORD *)uint64_t v94 = 138413058;
      id v96 = *(void **)&v93[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
      v71[44] = v96;
      id v97 = v96;
      id v98 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v71 + 44, type, v94 + 4, v94 + 12);
      *os_log_t v95 = v96;

      *(_WORD *)(v94 + 12) = 2050;
      swift_beginAccess(v195, v71 + 33, 0LL, 0LL);
      uint64_t v99 = v71[39];
      if (!v99) {
        goto LABEL_164;
      }
      v71[46] = *(void *)(v99 + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_availableUpdateCount);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v71 + 46, v71 + 47, v94 + 14, v94 + 22);
      *(_WORD *)(v94 + 22) = 1026;
      uint64_t v100 = v71[39];
      if (!v100) {
        goto LABEL_165;
      }
      uint64_t v188 = v71[66];
      uint64_t v101 = v71[63];
      os_log_type_t type = (uint64_t *)v71[62];
      int v102 = (void *)v71[60];
      *((_DWORD *)v71 + 182) = *(unsigned __int8 *)(v100 + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_result);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v71 + 91, (char *)v71 + 732, v94 + 24, v94 + 28);
      *(_WORD *)(v94 + 28) = 2082;
      uint64_t v103 = sub_10006C838();
      unint64_t v105 = v104;
      v71[48] = sub_100088DB4(v103, v104, (uint64_t *)&v197);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v71 + 48, v71 + 49, v94 + 30, v94 + 38);

      swift_bridgeObjectRelease(v105);
      _os_log_impl( (void *)&_mh_execute_header,  v91,  v92,  "[%@] Merged %{public}ld app updates into database with result: %{BOOL,public}d reason: %{public}s",  (uint8_t *)v94,  0x26u);
      uint64_t v106 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v98, 1LL, v106);
      swift_slowDealloc(v98, -1LL, -1LL);
      swift_arrayDestroy(loga, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(loga, -1LL, -1LL);
      swift_slowDealloc(v94, -1LL, -1LL);

      uint64_t v107 = *(void (**)(uint64_t, uint64_t *))(v101 + 8);
      v107(v188, type);
      uint64_t v89 = v71 + 44;
      Class v14 = (Class)_NSConcreteStackBlock;
    }

    else
    {
      uint64_t v112 = v71[66];
      unint64_t v114 = (uint64_t *)v71[62];
      uint64_t v113 = v71[63];
      uint64_t v115 = (void *)v71[60];

      uint64_t v107 = *(void (**)(uint64_t, uint64_t *))(v113 + 8);
      v107(v112, v114);
    }

    swift_beginAccess(v195, v71 + 30, 0LL, 0LL);
    if (!*v195)
    {
      __break(1u);
LABEL_164:

      __break(1u);
LABEL_165:

      __break(1u);
LABEL_166:
      __break(1u);
      return;
    }

    unint64_t v116 = v71[76];
    os_log_type_t v117 = (char *)v71[60];
    int v118 = (char *)*v195;
    sub_100041FFC(v118, v117);

    if (v116 > 8)
    {
      uint64_t v170 = v180[77];
      v180[41] = v180[76];
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v170, v180 + 41, v170, &type metadata for Int);
      return;
    }

    if (((1LL << v116) & 0xD6) == 0) {
      goto LABEL_114;
    }
    uint64_t v71 = v180;
    uint64_t v119 = v180[74];
    uint64_t v74 = v180[72];
    id v75 = (uint64_t *)v180[71];
    uint64_t v120 = objc_opt_self(&OBJC_CLASS___AppDefaultsManager);
    Date.init()(v120);
    v121.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t *))(v74 + 8))(v119, v75);
    sub_1002FA380(v120, v121.super.isa);

    uint64_t isEscapingClosureAtFileLocation = (uint64_t)sub_100237D18(v192);
    v180[20] = sub_1000399B8;
    v180[21] = 0LL;
    v180[16] = _NSConcreteStackBlock;
    v180[17] = 1107296256LL;
    v180[18] = sub_100028ECC;
    v180[19] = &unk_1003DDCD0;
    uint64_t v122 = _Block_copy(v180 + 16);
    swift_release(v180[21]);
    [(id)isEscapingClosureAtFileLocation modifyUsingTransaction:v122];

    _Block_release(v122);
    uint64_t v123 = swift_isEscapingClosureAtFileLocation(0LL, "", 88LL, 518LL, 60LL, 1LL);
    if ((v123 & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_157:
    __break(1u);
LABEL_158:
    if (isEscapingClosureAtFileLocation < 0) {
      uint64_t v175 = isEscapingClosureAtFileLocation;
    }
    else {
      uint64_t v175 = isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
    int v176 = (objc_class *)_CocoaArrayWrapper.endIndex.getter(v175);
    swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
    if (v121.super.isa != v176) {
      goto LABEL_76;
    }
  }

  id v124 = (void *)v180[60];
  static Logger.updates.getter(v123);
  os_log_t v125 = (os_log_s *)Logger.logObject.getter(v124);
  os_log_type_t v126 = static os_log_type_t.default.getter();
  BOOL v127 = os_log_type_enabled(v125, v126);
  uint64_t v128 = (char *)v180[60];
  if (v127)
  {
    id v129 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v193 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v129 = 138412290;
    uint64_t v130 = v107;
    id v131 = *(void **)&v128[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v180[43] = v131;
    id v132 = v131;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v180 + 43, v89, v129 + 4, v129 + 12);
    *unint64_t v193 = v131;
    uint64_t v107 = v130;

    _os_log_impl((void *)&_mh_execute_header, v125, v126, "[%@] Cleared expired history", v129, 0xCu);
    uint64_t v133 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v193, 1LL, v133);
    swift_slowDealloc(v193, -1LL, -1LL);
    swift_slowDealloc(v129, -1LL, -1LL);
  }

  else
  {

    os_log_t v125 = (os_log_s *)v180[60];
  }

  uint64_t v150 = v180[65];
  id v151 = (uint64_t *)v180[62];

  v107(v150, v151);
LABEL_114:
  if (sub_10004AAE4())
  {
    uint64_t v152 = v180;
    uint64_t v153 = v180[76];
    uint64_t v154 = v180[74];
    uint64_t v155 = v180[72];
    uint64_t v156 = v180[71];
    id v157 = [objc_allocWithZone(ASDUpdatePollMetrics) init];
    static Date.now.getter(v157);
    Class v158 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v154, v156);
    [v157 setPollTime:v158];

    if (v153 == 1)
    {
      NSString v159 = String._bridgeToObjectiveC()();
    }

    else
    {
      sub_10006C838();
      uint64_t v161 = v160;
      NSString v159 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v161);
    }

    [v157 setReason:v159];

    if (!*v195) {
      goto LABEL_166;
    }
    uint64_t v162 = *v196;
    id v163 = (char *)*v195;
    swift_bridgeObjectRelease(v162);
    uint64_t v164 = *(void *)&v163[OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_bundleIDs];
    swift_bridgeObjectRetain(v164);

    id v165 = sub_100056154(v164);
    swift_bridgeObjectRelease(v164);
    Class v166 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v165);
    [v157 setBundleIDs:v166];

    id v167 = [objc_allocWithZone(ASDUpdateMetricsStore) init];
    [v167 addPoll:v157];
  }

  else
  {
    swift_bridgeObjectRelease(*v196);
    uint64_t v152 = v180;
  }

  id v168 = (void *)swift_task_alloc(dword_1004593F4);
  v152[89] = v168;
  *id v168 = v152;
  v168[1] = sub_100046D00;
  sub_10003FF24(v152[60], v169);
}
}

uint64_t sub_100045E0C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 696) = v2;
  if (v2) {
    uint64_t v3 = sub_100046E4C;
  }
  else {
    uint64_t v3 = sub_100045E6C;
  }
  return swift_task_switch(v3, *(void *)(v1 + 488), 0LL);
}

void sub_100045E6C()
{
  uint64_t v1 = (uint64_t *)(v0 + 360);
  uint64_t v2 = *(void **)(v0 + 480);

  static Logger.updates.getter(v3);
  uint64_t v4 = *(void *)(v0 + 336);
  id v5 = v2;
  swift_bridgeObjectRetain_n(v4, 2LL);
  id v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v124 = *(void *)(v0 + 680);
    uint64_t v132 = *(void *)(v0 + 536);
    uint64_t v133 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
    uint64_t v130 = *(void *)(v0 + 496);
    uint64_t v8 = *(char **)(v0 + 480);
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    id v10 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v128 = swift_slowAlloc(32LL, -1LL);
    uint64_t v136 = v128;
    *(_DWORD *)uint64_t v9 = 138412546;
    unint64_t v11 = *(void **)&v8[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    *(void *)(v0 + 432) = v11;
    id v12 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v9 + 4, v9 + 12);
    *id v10 = v11;
    uint64_t v13 = v10;
    uint64_t v1 = (uint64_t *)(v0 + 360);

    *(_WORD *)(v9 + 12) = 2082;
    uint64_t v14 = swift_bridgeObjectRetain(v4);
    uint64_t v15 = Dictionary.Keys.description.getter(v14, &type metadata for String, v124, &protocol witness table for String);
    unint64_t v17 = v16;
    swift_bridgeObjectRelease(v4);
    *(void *)(v0 + 44_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = sub_100088DB4(v15, v17, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 440, v0 + 448, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease_n(v4, 2LL);
    swift_bridgeObjectRelease(v17);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[%@] Set updateAvailability to Available for apps: %{public}s",  (uint8_t *)v9,  0x16u);
    uint64_t v18 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v13, 1LL, v18);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_arrayDestroy(v128, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v128, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);

    v133(v132, v130);
  }

  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 672);
    uint64_t v20 = *(void *)(v0 + 536);
    uint64_t v21 = *(void *)(v0 + 496);
    Class v22 = *(void **)(v0 + 480);

    swift_bridgeObjectRelease_n(v4, 2LL);
    v19(v20, v21);
  }

  uint64_t isEscapingClosureAtFileLocation = *v1;
  uint64_t v24 = (unint64_t)*v1 >> 62;
  if (v24) {
    goto LABEL_90;
  }
  uint64_t v25 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(*v1);
  if (!v25)
  {
LABEL_13:
    swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
    if (v24) {
      goto LABEL_101;
    }
    uint64_t v26 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
    goto LABEL_15;
  }

uint64_t sub_100046D00(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 712LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 488LL);
  *(void *)(*(void *)v1 + 720LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100046D60, v3, 0LL);
}

uint64_t sub_100046D60()
{
  uint64_t v1 = *(void *)(v0 + 704);
  uint64_t v2 = *(void *)(v0 + 600);
  uint64_t v3 = *(void *)(v0 + 592);
  uint64_t v4 = *(void *)(v0 + 584);
  uint64_t v5 = *(void *)(v0 + 560);
  uint64_t v6 = *(void *)(v0 + 552);
  uint64_t v7 = *(void *)(v0 + 544);
  uint64_t v8 = *(void *)(v0 + 536);
  uint64_t v9 = *(void *)(v0 + 528);
  uint64_t v11 = *(void *)(v0 + 520);
  uint64_t v12 = *(void *)(v0 + 512);
  swift_release(*(void *)(v0 + 648));

  swift_bridgeObjectRelease(*(void *)(v0 + 360));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 720));
}

void sub_100046E4C(uint64_t a1)
{
  uint64_t v2 = v1 + 45;
  uint64_t v3 = v1[87];
  uint64_t v4 = (void *)v1[86];
  uint64_t v5 = (void *)v1[60];
  swift_willThrow(a1);

  static Logger.updates.getter(v6);
  uint64_t v7 = v1[42];
  id v8 = v5;
  swift_errorRetain(v3, v9);
  swift_bridgeObjectRetain(v7);
  id v10 = v8;
  swift_errorRetain(v3, v11);
  uint64_t v12 = swift_bridgeObjectRetain(v7);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t type = v14;
    uint64_t v133 = v1[87];
    uint64_t v134 = v1[85];
    uint64_t v145 = v1[64];
    uint64_t v146 = (void (*)(uint64_t, uint64_t))v1[84];
    uint64_t v143 = v1[62];
    uint64_t v15 = (char *)v1[60];
    os_log_t loga = v13;
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v135 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v139 = swift_slowAlloc(64LL, -1LL);
    v149[0] = v139;
    *(_DWORD *)uint64_t v16 = 138412802;
    unint64_t v17 = *(void **)&v15[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v1[49] = v17;
    id v18 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 49, v1 + 50, v16 + 4, v16 + 12);
    *uint64_t v135 = v17;

    *(_WORD *)(v16 + 12) = 2082;
    swift_getErrorValue(v133, v1 + 50, v1 + 27);
    uint64_t v19 = Error.localizedDescription.getter(v1[28], v1[29]);
    unint64_t v21 = v20;
    v1[52] = sub_100088DB4(v19, v20, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 52, v1 + 53, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease(v21);
    swift_errorRelease(v133);
    swift_errorRelease(v133);
    *(_WORD *)(v16 + 22) = 2082;
    uint64_t v22 = swift_bridgeObjectRetain(v7);
    uint64_t v23 = Dictionary.Keys.description.getter(v22, &type metadata for String, v134, &protocol witness table for String);
    unint64_t v25 = v24;
    swift_bridgeObjectRelease(v7);
    v1[53] = sub_100088DB4(v23, v25, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 53, v1 + 54, v16 + 24, v16 + 32);
    swift_bridgeObjectRelease_n(v7, 2LL);
    swift_bridgeObjectRelease(v25);
    _os_log_impl( (void *)&_mh_execute_header,  loga,  type,  "[%@] Failed to set updateAvailability to Available %{public}s for apps: %{public}s",  (uint8_t *)v16,  0x20u);
    uint64_t v26 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v135, 1LL, v26);
    swift_slowDealloc(v135, -1LL, -1LL);
    swift_arrayDestroy(v139, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v139, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);

    swift_errorRelease(v133);
    v146(v145, v143);
  }

  else
  {
    uint64_t v27 = v1[87];
    id v28 = (void (*)(uint64_t, uint64_t))v1[84];
    uint64_t v29 = v1[64];
    uint64_t v30 = v1[62];
    uint64_t v31 = (void *)v1[60];
    swift_errorRelease(v27);

    swift_errorRelease(v27);
    swift_errorRelease(v27);

    swift_bridgeObjectRelease_n(v7, 2LL);
    v28(v29, v30);
  }

  uint64_t isEscapingClosureAtFileLocation = *v2;
  uint64_t v33 = (unint64_t)*v2 >> 62;
  if (v33) {
    goto LABEL_90;
  }
  uint64_t v34 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(*v2);
  if (!v34)
  {
LABEL_13:
    swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
    if (v33) {
      goto LABEL_101;
    }
    uint64_t v35 = *(void *)((isEscapingClosureAtFileLocation & 0xFFFFFFFFFFFFF8LL) + 0x10);
    goto LABEL_15;
  }

uint64_t sub_100047D9C(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v8 = *a2;
  type metadata accessor for MediaAPIUpdate();
  swift_bridgeObjectRetain(v8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v8);
  BOOL v10 = *(void *)(a3 + OBJC_IVAR____TtC9appstored14UpdatesContext_reason) == 2LL;
  sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
  sub_10004AAF0();
  Class v11 = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v12 = sub_10029FE84(a1, isa, v10, v11);

  uint64_t v13 = *a5;
  *a5 = v12;
  os_log_type_t v14 = v12;

  uint64_t v15 = *((unsigned __int8 *)&v14->super.isa + OBJC_IVAR____TtC9appstored26UpdatesDatabaseMergeResult_result);
  return v15;
}

uint64_t sub_100047EA4(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v2[20] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[21] = v5;
  v2[22] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v2[15] = _swiftEmptyArrayStorage;
  uint64_t v6 = (void *)swift_task_alloc(dword_1004593EC);
  v2[23] = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100047F28;
  return sub_10003F5C0(a1);
}

uint64_t sub_100047F28(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 192LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100047F88, v3, 0LL);
}

uint64_t sub_100047F88()
{
  uint64_t v1 = v0[24];
  if (*(void *)(v1 + 16)) {
    sub_100055AC4(v1);
  }
  else {
    swift_bridgeObjectRelease(v1);
  }
  uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1004593FC);
  v0[25] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_100047FF0;
  return sub_100042AE8(v0[18]);
}

uint64_t sub_100047FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)*v3;
  void v4[8] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  uint64_t v5 = v4[25];
  uint64_t v6 = v4[19];
  v4[26] = a1;
  v4[27] = a2;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100048058, v6, 0LL);
}

uint64_t sub_100048058()
{
  uint64_t v1 = v0[26];
  if (*(void *)(v1 + 16)) {
    uint64_t v2 = sub_100055AC4(v1);
  }
  else {
    uint64_t v2 = swift_bridgeObjectRelease(v1);
  }
  uint64_t v3 = (void *)v0[18];
  static Logger.updates.getter(v2);
  uint64_t v4 = v0[15];
  id v5 = v3;
  swift_bridgeObjectRetain_n(v4, 2LL);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = (char *)v0[18];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    Class v11 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138412546;
    uint64_t v12 = *(void **)&v9[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    v0[16] = v12;
    id v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 17, v10 + 4, v10 + 12);
    void *v11 = v12;

    *(_WORD *)(v10 + 12) = 2050;
    uint64_t v14 = *(void *)(v4 + 16);
    swift_bridgeObjectRelease(v4);
    v0[17] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 17, v0 + 18, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v4);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  type,  "[%@] ╘ Update request contains %{public}ld eligible app(s)",  (uint8_t *)v10,  0x16u);
    uint64_t v15 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v11, 1LL, v15);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v4, 2LL);
  }

  unint64_t v16 = v0[27];
  (*(void (**)(void, void))(v0[21] + 8LL))(v0[22], v0[20]);
  if (v16 >> 62) {
    goto LABEL_11;
  }
  unint64_t v16 = *(void *)((v16 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t v17 = v0[27];
  if (v16)
  {
    while (1)
    {
      uint64_t v18 = objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseStore);
      id v19 = sub_100237D18(v18);
      unint64_t v16 = swift_allocObject(&unk_1003DDBD8, 24LL, 7LL);
      *(void *)(v16 + 16) = v17;
      uint64_t v20 = swift_allocObject(&unk_1003DDC00, 32LL, 7LL);
      unint64_t v21 = sub_100048A6C;
      *(void *)(v20 + 16) = sub_100048A6C;
      *(void *)(v20 + 24) = v16;
      v0[6] = sub_10002B7A4;
      v0[7] = v20;
      v0[2] = _NSConcreteStackBlock;
      v0[3] = 1107296256LL;
      v0[4] = sub_100028ECC;
      v0[5] = &unk_1003DDC18;
      uint64_t v22 = _Block_copy(v0 + 2);
      uint64_t v23 = v0[7];
      swift_retain(v20);
      swift_release(v23);
      [v19 modifyUsingTransaction:v22];

      _Block_release(v22);
      LOBYTE(v22) = swift_isEscapingClosureAtFileLocation(v20, "", 88LL, 1327LL, 64LL, 1LL);
      swift_release(v20);
      __break(1u);
LABEL_11:
      uint64_t v24 = v0[27];
      if (v24 < 0) {
        uint64_t v25 = v0[27];
      }
      else {
        uint64_t v25 = v16 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v0[27]);
      unint64_t v16 = _CocoaArrayWrapper.endIndex.getter(v25);
      swift_bridgeObjectRelease(v24);
      uint64_t v17 = v0[27];
      if (!v16) {
        goto LABEL_15;
      }
    }
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease(v17);
    unint64_t v21 = 0LL;
  }

  uint64_t v26 = v0[11];
  uint64_t v27 = v0[22];
  swift_beginAccess(v0 + 15, v0 + 12, 0LL, 0LL);
  uint64_t v28 = v0[15];
  sub_10001527C((uint64_t)v21, v16);
  swift_task_dealloc(v27);
  return ((uint64_t (*)(uint64_t, uint64_t))v0[1])(v28, v26);
}

BOOL sub_10004840C(void *a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    uint64_t v9 = sub_10001517C(0LL, &qword_100459BF0, off_1003DA108);
    swift_bridgeObjectRetain(v2);
    uint64_t v10 = _bridgeCocoaArray<A>(_:)(v8, v9);
    swift_bridgeObjectRelease(v2);
    uint64_t v2 = v10;
  }

  else
  {
    uint64_t v4 = swift_bridgeObjectRetain(a2);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v4);
    sub_10001517C(0LL, &qword_100459BF0, off_1003DA108);
  }

  sub_10001517C(0LL, &qword_100459BF0, off_1003DA108);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  BOOL v6 = sub_10029FAF4(a1, isa);

  return v6;
}

uint64_t sub_100048500(void *a1)
{
  uint64_t v2 = sub_1000079A0(&qword_100459DF0);
  uint64_t v3 = swift_allocObject(v2, 48LL, 7LL);
  *(_OWORD *)(v3 + 16) = xmmword_100373A90;
  *(_OWORD *)(v3 + 32) = xmmword_100373BA0;
  NSString v4 = String._bridgeToObjectiveC()();
  v19[0] = v3;
  swift_bridgeObjectRetain(v3);
  uint64_t v5 = sub_1000079A0((uint64_t *)&unk_100459440);
  uint64_t v6 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v19, v5);
  os_log_type_t v7 = (void *)objc_opt_self(&OBJC_CLASS___SQLiteContainsPredicate);
  id v8 = objc_msgSend(v7, "containsPredicateWithProperty:values:", v4, v6, v19[0]);
  swift_bridgeObjectRelease(v3);
  swift_unknownObjectRelease(v6);

  uint64_t v9 = type metadata accessor for MediaAPIUpdateEntity();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v9);
  id v11 = [a1 connection];
  id v12 = sub_10024C1D0(ObjCClassFromMetadata, v11, v8);

  uint64_t v13 = swift_allocObject(&unk_1003DE3C0, 24LL, 7LL);
  *(void *)(v13 + 16) = a1;
  uint64_t v14 = swift_allocObject(&unk_1003DE3E8, 32LL, 7LL);
  *(void *)(v14 + 16) = sub_10004BA2C;
  *(void *)(v14 + 24) = v13;
  v19[4] = sub_10004C530;
  uint64_t v20 = v14;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256LL;
  v19[2] = sub_100050A30;
  v19[3] = &unk_1003DE400;
  uint64_t v15 = _Block_copy(v19);
  uint64_t v16 = v20;
  id v17 = a1;
  swift_retain(v14);
  swift_release(v16);
  [v12 enumeratePersistentIDsUsingBlock:v15];

  _Block_release(v15);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v14, "", 88LL, 1346LL, 42LL, 1LL);
  swift_release(v13);
  uint64_t result = swift_release(v14);
  __break(1u);
  return result;
}

uint64_t sub_100048744(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = [a4 connection];
  id v11 = [objc_allocWithZone((Class)type metadata accessor for MediaAPIUpdateEntity()) initWithPersistentID:a1 onConnection:v10];

  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  NSString v13 = String._bridgeToObjectiveC()();
  [v11 setValue:isa forProperty:v13];

  static Logger.updates.getter(v14);
  id v15 = v11;
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v27 = v6;
    uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v19;
    *(_DWORD *)uint64_t v18 = 136446210;
    NSString v20 = String._bridgeToObjectiveC()();
    id v21 = sub_1001E26D0(v15, (uint64_t)v20);

    if (v21)
    {
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      unint64_t v24 = v23;
    }

    else
    {
      unint64_t v24 = 0xE300000000000000LL;
      uint64_t v22 = 7104878LL;
    }

    uint64_t v28 = sub_100088DB4(v22, v24, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v18 + 4, v18 + 12);

    swift_bridgeObjectRelease(v24);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Resetting update state to available on startup: %{public}s",  v18,  0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v27);
  }

  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

uint64_t sub_1000489F8()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for UpdatesManager_Swift()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored20UpdatesManager_Swift);
}

uint64_t sub_100048A3C()
{
  return v0;
}

uint64_t sub_100048A48()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

BOOL sub_100048A6C(void *a1)
{
  return sub_10004840C(a1, *(void *)(v1 + 16));
}

uint64_t sub_100048A74()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100048A84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100048A94(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100048A9C(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  Swift::Int v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) == 0) {
    goto LABEL_7;
  }
  if (v6 < 0) {
    uint64_t v7 = *v2;
  }
  else {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t result = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(result, 1LL))
  {
    Swift::Int v6 = sub_100048B3C(v7, result + 1);
    *uint64_t v3 = v6;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    Swift::Int v11 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_100079934(a1, a2, isUniquelyReferenced_nonNull_native);
    Swift::Int v10 = *v3;
    *uint64_t v3 = v11;
    return swift_bridgeObjectRelease(v10);
  }

  __break(1u);
  return result;
}

Swift::Int sub_100048B3C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1000079A0((uint64_t *)&unk_100459430);
    uint64_t v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    uint64_t v29 = v4;
    uint64_t v5 = __CocoaDictionary.makeIterator()(a1);
    uint64_t v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      uint64_t v10 = sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
      do
      {
        uint64_t v27 = v8;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
        uint64_t v26 = v9;
        swift_dynamicCast(&v27, &v26, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
        uint64_t v4 = v29;
        unint64_t v21 = *(void *)(v29 + 16);
        if (*(void *)(v29 + 24) <= v21)
        {
          sub_100078434(v21 + 1, 1LL);
          uint64_t v4 = v29;
        }

        uint64_t v12 = v27;
        uint64_t v11 = v28;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
        uint64_t v14 = v4 + 64;
        uint64_t v15 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v16 = result & ~v15;
        unint64_t v17 = v16 >> 6;
        if (((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v22 = 0;
          unint64_t v23 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v23 && (v22 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v24 = v17 == v23;
            if (v17 == v23) {
              unint64_t v17 = 0LL;
            }
            v22 |= v24;
            uint64_t v25 = *(void *)(v14 + 8 * v17);
          }

          while (v25 == -1);
          unint64_t v18 = __clz(__rbit64(~v25)) + (v17 << 6);
        }

        *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
        uint64_t v19 = 8 * v18;
        *(void *)(*(void *)(v4 + 48) + v19) = v11;
        *(void *)(*(void *)(v4 + 56) + v19) = v12;
        ++*(void *)(v4 + 16);
        uint64_t v8 = __CocoaDictionary.Iterator.next()();
        uint64_t v9 = v20;
      }

      while (v8);
    }

    swift_release(v5);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)_swiftEmptyDictionarySingleton;
  }

  return v4;
}

uint64_t sub_100048D6C(uint64_t a1, char a2)
{
  uint64_t v5 = *v2;
  uint64_t result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *uint64_t v2 = v5;
  uint64_t v7 = 0LL;
  if ((result & 1) != 0 && (v5 & 0x8000000000000000LL) == 0 && (v5 & 0x4000000000000000LL) == 0)
  {
    if (a1 <= *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      return result;
    }
    uint64_t v7 = 1LL;
  }

  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = v5 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  if (v8 <= a1) {
    uint64_t v9 = a1;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( v7,  v9,  a2 & 1,  v5);
  *uint64_t v2 = result;
  return result;
}

Swift::Int sub_100048E28(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = (void *)sub_10004A1DC(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = v2 + 4;
  v5[1] = v3;
  Swift::Int result = sub_100048E90(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100048E90(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  Swift::Int v73 = result;
  if (result < v3)
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 < -1)
    {
LABEL_114:
      Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
      __break(1u);
      return result;
    }

    uint64_t v76 = v1;
    if (v3 >= 2)
    {
      uint64_t v6 = v5 >> 1;
      uint64_t v7 = sub_1000079A0(&qword_100459490);
      uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v6, v7);
      *(void *)(v8 + 16) = v6;
      uint64_t v71 = (void *)v8;
      __dst = (char *)(v8 + 32);
      goto LABEL_11;
    }

LABEL_10:
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    uint64_t v71 = _swiftEmptyArrayStorage;
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      if (v12 < 2) {
        goto LABEL_88;
      }
      goto LABEL_74;
    }

  uint64_t v36 = ASDLogHandleForCategory(41LL);
  uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)&buf[4] = v243;
    _os_log_error_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_ERROR,  "[%@] Invalid kind for iOS platform manifest",  buf,  0xCu);
  }

  if (a7)
  {
    uint64_t v38 = ASDErrorWithTitleAndMessage( ASDErrorDomain,  851LL,  @"Invalid manifest",  @"Invalid kind for iOS platform manifest");
    uint64_t v39 = 0LL;
    *a7 = (id)objc_claimAutoreleasedReturnValue(v38);
  }

  else
  {
    uint64_t v39 = 0LL;
  }

  BOOL v40 = v244;
LABEL_171:

  return v39;
}

  Swift::Int v13 = 4LL;
LABEL_33:

LABEL_34:
  return v13;
}

    unint64_t v19 = v21;
    unint64_t v17 = 0LL;
    *a7 = v19;
    goto LABEL_15;
  }

  sub_1001E446C(v17, a4, 0LL);
LABEL_15:

  return v17;
}

    goto LABEL_11;
  }

    uint64_t v22 = ASDLogHandleForCategory(8LL);
    char v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v24 = a1[4];
      uint64_t v25 = v24[2];
      uint64_t v26 = v24[5];
      *(_DWORD *)buf = 138412546;
      *(void *)&buf[4] = v25;
      *(_WORD *)&buf[12] = 2114;
      *(void *)&buf[14] = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "[%@] Starting fetch items for accountID: %{public}@",  buf,  0x16u);
    }

    uint64_t v27 = sub_10020365C(a1[4], a1[5], a1[6]);
    uint64_t v28 = objc_claimAutoreleasedReturnValue(v27);
LABEL_21:
    uint64_t v11 = (void *)v28;

    goto LABEL_22;
  }

  uint64_t v5 = ASDLogHandleForCategory(8LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[4];
    uint64_t v8 = v7[2];
    uint64_t v9 = v7[5];
    *(_DWORD *)buf = 138412546;
    *(void *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%@] Starting force refresh to fetch items for accountID: %{public}@",  buf,  0x16u);
  }

  Swift::Int v10 = sub_10020365C(a1[4], a1[5], a1[6]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
LABEL_22:

  return v11;
}

        if (sub_100204440((uint64_t)&OBJC_CLASS___PurchaseHistoryUpdateCommand) >= v13)
        {
          uint64_t v27 = @"time since last update is less than polling interval";
LABEL_49:
          unint64_t v59 = ASDLogHandleForCategory(8LL);
          unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v60 = *(void *)(a1 + 16);
            uint64_t v61 = *(void *)(a1 + 40);
            if (v71)
            {
              [v71 timeIntervalSince1970];
              unint64_t v63 = (uint64_t)v62;
            }

            else
            {
              unint64_t v63 = 0LL;
            }

            uint64_t v64 = *(void *)(a1 + 32) - 1LL;
            if (v64 > 6) {
              unint64_t v65 = @"default";
            }
            else {
              unint64_t v65 = off_1003ECAD0[v64];
            }
            *(_DWORD *)buf = 138413314;
            *(void *)&buf[4] = v60;
            *(_WORD *)&buf[12] = 2114;
            *(void *)&buf[14] = v61;
            *(_WORD *)&buf[22] = 2048;
            uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t))v63;
            *(_WORD *)uint64_t v81 = 2114;
            *(void *)&v81[2] = v65;
            *(_WORD *)&v81[10] = 2114;
            *(void *)&v81[12] = v27;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[%@] Blocking purchase history reload for accountID: %{public}@ last update: %{time_t}ld context: %{public }@ reason: %{public}@",  buf,  0x34u);
          }

          unint64_t v31 = 0LL;
          goto LABEL_57;
        }

    uint64_t v150 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)&v3->super._success, "ams_DSID"));
    if (!v6 || (uint64_t v7 = -[LogKey requestType](v3->_logKey, "requestType"), v6, v7 == (id)2))
    {
      uint64_t v149 = 0;
      goto LABEL_51;
    }

    Swift::Int v13 = sub_1001C66BC((uint64_t)&OBJC_CLASS___PurchaseHistoryManager);
    uint64_t v146 = (void *)objc_claimAutoreleasedReturnValue(v13);
    Swift::Int v14 = ASDLogHandleForCategory(41LL);
    unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      unint64_t v16 = v3->_itemIdentifier;
      *(_DWORD *)buf = 138412290;
      *(void *)&buf[4] = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "[%@] Checking purchase history for items",  buf,  0xCu);
    }

    uint64_t v147 = objc_alloc_init(&OBJC_CLASS___ASDPurchaseHistoryQuery);
    unint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)&v3->super._success, "ams_DSID"));
    objc_msgSend(v147, "setAccountID:", objc_msgSend(v17, "longLongValue"));

    if (v3->_externalVersionIdentifier)
    {
      id v182 = v3->_externalVersionIdentifier;
      unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v182, 1LL));
      [v147 setStoreIDs:v18];
    }

    else
    {
      if (!-[NSString length](v3->_applicationVariant, "length"))
      {
LABEL_25:
        *(void *)buf = 0LL;
        *(void *)&buf[8] = buf;
        *(void *)&buf[16] = 0x3032000000LL;
        uint64_t v178 = sub_100245058;
        uint64_t v179 = sub_100245068;
        id v180 = 0LL;
        v160[0] = _NSConcreteStackBlock;
        v160[1] = 3221225472LL;
        v160[2] = sub_100245070;
        v160[3] = &unk_1003EE1A8;
        uint64_t v162 = buf;
        char v23 = dispatch_semaphore_create(0LL);
        uint64_t v161 = v23;
        sub_1001C6D2C((uint64_t)v146, v147, v160);
        BOOL v24 = dispatch_time(0LL, 120000000000LL);
        uint64_t v145 = v23;
        if (dispatch_semaphore_wait(v23, v24))
        {
          uint64_t v25 = ASDLogHandleForCategory(41LL);
          uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            uint64_t v143 = v3->_itemIdentifier;
            *(_DWORD *)Class v166 = 138412290;
            id v167 = v143;
            _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "[%@] Timed out looking though purchase history",  v166,  0xCu);
          }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

    a2 = 0LL;
LABEL_19:
  }

  return a2;
}

  Property = objc_getProperty(v16, v17, 8LL, 1);
LABEL_11:
  BOOL v24 = Property;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_1002799C0;
  v27[3] = &unk_1003EEC60;
  uint64_t v28 = v12;
  uint64_t v29 = v10;
  uint64_t v25 = v10;
  uint64_t v26 = v12;
  -[SilentRequestPresenter presentEngagementRequest:withClientInfo:resultHandler:]( v18,  "presentEngagementRequest:withClientInfo:resultHandler:",  v11,  v24,  v27);
}

  return v8;
}
}

    if (a5)
    {
      unint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Bundle identifier is required (source = '%ld')",  a2));
      unint64_t v19 = ASDErrorDomain;
      uint64_t v20 = 650LL;
LABEL_12:
      uint64_t v21 = ASDErrorWithDescription(v19, v20, v18);
      *a5 = (id)objc_claimAutoreleasedReturnValue(v21);

      goto LABEL_13;
    }

    goto LABEL_13;
  }

  if (!v9) {
    goto LABEL_10;
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"bundle_id",  v9));
LABEL_4:
  unint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "doesNotContainPredicateWithProperty:values:",  @"IFNULL(app_install.phase, 10)",  &off_10040DFF0));
  v23[0] = v11;
  v23[1] = v12;
  Swift::Int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v23, 2LL));
  Swift::Int v14 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v13));

LABEL_14:
  return v14;
}
}

LABEL_11:
    Swift::Int v10 = 0LL;
    uint64_t v70 = v2;
    uint64_t v11 = *v2;
    uint64_t v9 = (char *)_swiftEmptyArrayStorage;
    Swift::Int v72 = v3;
    do
    {
      Swift::Int v13 = v10 + 1;
      if (v10 + 1 >= v3 || (Swift::Int v13 = v10 + 2, v14 = v3, v10 + 2 >= v3))
      {
        if (v13 >= v3)
        {
          Swift::Int v14 = v13;
        }

        else
        {
          if (__OFSUB__(v13, v10)) {
            goto LABEL_109;
          }
          Swift::Int v14 = v13;
          if (v13 - v10 < v73)
          {
            if (__OFADD__(v10, v73)) {
              goto LABEL_110;
            }
            Swift::Int v14 = v10 + v73 >= v3 ? v3 : v10 + v73;
            if (v14 < v10)
            {
LABEL_111:
              __break(1u);
LABEL_112:
              __break(1u);
LABEL_113:
              __break(1u);
              goto LABEL_114;
            }
          }
        }
      }

      if (v14 < v10) {
        goto LABEL_104;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0) {
        uint64_t v9 = sub_1000495A4(0LL, *((void *)v9 + 2) + 1LL, 1, v9);
      }
      unint64_t v16 = *((void *)v9 + 2);
      unint64_t v15 = *((void *)v9 + 3);
      unint64_t v12 = v16 + 1;
      Swift::Int v74 = v14;
      if (v16 >= v15 >> 1) {
        uint64_t v9 = sub_1000495A4((char *)(v15 > 1), v16 + 1, 1, v9);
      }
      *((void *)v9 + 2) = v12;
      unint64_t v17 = v9 + 32;
      unint64_t v18 = &v9[16 * v16 + 32];
      *(void *)unint64_t v18 = v10;
      *((void *)v18 + 1) = v14;
      if (v16)
      {
        while (1)
        {
          unint64_t v19 = v12 - 1;
          if (v12 >= 4)
          {
            BOOL v24 = &v17[16 * v12];
            uint64_t v25 = *((void *)v24 - 8);
            uint64_t v26 = *((void *)v24 - 7);
            BOOL v30 = __OFSUB__(v26, v25);
            uint64_t v27 = v26 - v25;
            if (v30) {
              goto LABEL_93;
            }
            uint64_t v29 = *((void *)v24 - 6);
            uint64_t v28 = *((void *)v24 - 5);
            BOOL v30 = __OFSUB__(v28, v29);
            uint64_t v22 = v28 - v29;
            char v23 = v30;
            if (v30) {
              goto LABEL_94;
            }
            unint64_t v31 = v12 - 2;
            Class v32 = &v17[16 * v12 - 32];
            uint64_t v34 = *(void *)v32;
            uint64_t v33 = *((void *)v32 + 1);
            BOOL v30 = __OFSUB__(v33, v34);
            uint64_t v35 = v33 - v34;
            if (v30) {
              goto LABEL_96;
            }
            BOOL v30 = __OFADD__(v22, v35);
            uint64_t v36 = v22 + v35;
            if (v30) {
              goto LABEL_99;
            }
            if (v36 >= v27)
            {
              os_log_type_t v54 = &v17[16 * v19];
              uint64_t v56 = *(void *)v54;
              uint64_t v55 = *((void *)v54 + 1);
              BOOL v30 = __OFSUB__(v55, v56);
              uint64_t v57 = v55 - v56;
              if (v30) {
                goto LABEL_103;
              }
              BOOL v47 = v22 < v57;
              goto LABEL_63;
            }
          }

          else
          {
            if (v12 != 3)
            {
              uint64_t v48 = *((void *)v9 + 4);
              uint64_t v49 = *((void *)v9 + 5);
              BOOL v30 = __OFSUB__(v49, v48);
              uint64_t v41 = v49 - v48;
              char v42 = v30;
              goto LABEL_57;
            }

            uint64_t v21 = *((void *)v9 + 4);
            uint64_t v20 = *((void *)v9 + 5);
            BOOL v30 = __OFSUB__(v20, v21);
            uint64_t v22 = v20 - v21;
            char v23 = v30;
          }

          if ((v23 & 1) != 0) {
            goto LABEL_95;
          }
          unint64_t v31 = v12 - 2;
          uint64_t v37 = &v17[16 * v12 - 32];
          uint64_t v39 = *(void *)v37;
          uint64_t v38 = *((void *)v37 + 1);
          BOOL v40 = __OFSUB__(v38, v39);
          uint64_t v41 = v38 - v39;
          char v42 = v40;
          if (v40) {
            goto LABEL_98;
          }
          unint64_t v43 = &v17[16 * v19];
          uint64_t v45 = *(void *)v43;
          uint64_t v44 = *((void *)v43 + 1);
          BOOL v30 = __OFSUB__(v44, v45);
          uint64_t v46 = v44 - v45;
          if (v30) {
            goto LABEL_101;
          }
          if (__OFADD__(v41, v46)) {
            goto LABEL_102;
          }
          if (v41 + v46 >= v22)
          {
            BOOL v47 = v22 < v46;
LABEL_63:
            if (v47) {
              unint64_t v19 = v31;
            }
            goto LABEL_65;
          }

  Swift::Int v14 = *(void *)(*(void *)(v4 + 56) + 8 * a1);
  sub_100068438(a1, v4);
  unint64_t v15 = *v2;
  *uint64_t v2 = v4;
  swift_bridgeObjectRelease(v15);
  return v14;
}

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    *(void *)(v18[6] + 8 * v12) = a3;
    uint64_t v21 = (void *)(v18[7] + 16 * v12);
    *uint64_t v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    char v23 = __OFADD__(v22, 1LL);
    BOOL v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }

    goto LABEL_14;
  }

  sub_10007686C(result, a4 & 1);
  Swift::Int result = sub_100023FE0(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v20 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v20 = a2;
    v20[1] = a3;
    *(_BYTE *)(v18[7] + v12) = a1 & 1;
    uint64_t v21 = v18[2];
    uint64_t v22 = __OFADD__(v21, 1LL);
    char v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain(a3);
    }

    goto LABEL_14;
  }

  sub_10007783C(result, a4 & 1);
  Swift::Int result = sub_100023F7C(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    unint64_t v12 = result;
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v18[(v12 >> 6) + 8] |= 1LL << v12;
    uint64_t v22 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v22 = a2;
    v22[1] = a3;
    *(void *)(v18[7] + 8 * v12) = a1;
    char v23 = v18[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }

    goto LABEL_14;
  }

  sub_100077E7C(v15, a4 & 1, &qword_10045A338);
  uint64_t v20 = sub_100023F7C(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    unint64_t v12 = v20;
    unint64_t v18 = (void *)*v5;
    if ((v16 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v16[(v10 >> 6) + 8] |= 1LL << v10;
    uint64_t v20 = 8 * v10;
    *(void *)(v16[6] + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = a2;
    *(void *)(v16[7] + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = a1;
    uint64_t v21 = v16[2];
    uint64_t v22 = __OFADD__(v21, 1LL);
    char v23 = v21 + 1;
    if (!v22)
    {
      void v16[2] = v23;
      return;
    }

    goto LABEL_14;
  }

  sub_100078184(v13, a3 & 1);
  unint64_t v18 = sub_100023FE0(a2);
  if ((v14 & 1) == (v19 & 1))
  {
    Swift::Int v10 = v18;
    unint64_t v16 = (void *)*v4;
    if ((v14 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v15[(v9 >> 6) + 8] |= 1LL << v9;
    unint64_t v19 = 8 * v9;
    *(void *)(v15[6] + v19) = a2;
    *(void *)(v15[7] + v19) = a1;
    uint64_t v20 = v15[2];
    uint64_t v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (!v21)
    {
      void v15[2] = v22;
      char v23 = a2;
      return;
    }

    goto LABEL_14;
  }

  sub_100078434(v12, a3 & 1);
  unint64_t v17 = sub_100024010((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    uint64_t v9 = v17;
    unint64_t v15 = (void *)*v4;
    if ((v13 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

    v20[(v14 >> 6) + 8] |= 1LL << v14;
    uint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
    void *v25 = a3;
    v25[1] = a4;
    uint64_t v26 = (void *)(v20[7] + 16 * v14);
    char *v26 = a1;
    v26[1] = a2;
    uint64_t v27 = v20[2];
    uint64_t v28 = __OFADD__(v27, 1LL);
    uint64_t v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain(a4);
    }

    goto LABEL_14;
  }

  sub_100078A18(v17, a5 & 1);
  char v23 = sub_100023F7C(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    Swift::Int v14 = v23;
    uint64_t v20 = (void *)*v6;
    if ((v18 & 1) != 0) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }

      Swift::Int v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

  if (v5 >= v2)
  {
    __break(1u);
  }

  else if (qword_1004580A8 == -1)
  {
    goto LABEL_13;
  }

  swift_once(&qword_1004580A8, sub_1000806EC);
LABEL_13:
  if (v5 < *((void *)off_10045A4E8 + 2))
  {
    Swift::Int v14 = *((void *)off_10045A4E8 + 2 * v5 + 5);
    unint64_t v15 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
    swift_bridgeObjectRetain(v14);
    unint64_t v16 = [v15 initWithDouble:round(a1 / v3 * 10.0) / 10.0];
    uint64_t v8 = sub_100080790((uint64_t)v16, 0LL);
    Swift::Int v10 = v17;

    uint64_t v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v14);
    unint64_t v12 = String._bridgeToObjectiveC()();
    Swift::Int v13 = sub_100080AF4(v11, v12);
    goto LABEL_15;
  }

  __break(1u);
}

  uint64_t v20 = 0LL;
LABEL_17:

  return v20;
}

      return;
    }

        Swift::Int v14 = ASDLogHandleForCategory(8LL);
        unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_25;
        }
        unint64_t v16 = *(void *)(a1 + 16);
        unint64_t v17 = *(void *)(a1 + 40);
        if (v71)
        {
          [v71 timeIntervalSince1970];
          unint64_t v19 = (uint64_t)v18;
        }

        else
        {
          unint64_t v19 = 0LL;
        }

        uint64_t v20 = *(void *)(a1 + 32) - 1LL;
        if (v20 > 6) {
          uint64_t v21 = @"default";
        }
        else {
          uint64_t v21 = off_1003ECAD0[v20];
        }
        *(_DWORD *)buf = 138413058;
        *(void *)&buf[4] = v16;
        *(_WORD *)&buf[12] = 2114;
        *(void *)&buf[14] = v17;
        *(_WORD *)&buf[22] = 2048;
        uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t))v19;
        *(_WORD *)uint64_t v81 = 2114;
        *(void *)&v81[2] = v21;
        uint64_t v28 = "[%@] Allowing purchase history reload for accountID: %{public}@ last update: %{time_t}ld context: %{public}@";
        uint64_t v29 = v15;
        BOOL v30 = 42;
        break;
      default:
        Class v32 = ASDLogHandleForCategory(8LL);
        uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT))
        {
          uint64_t v67 = *(void *)(a1 + 16);
          uint64_t v68 = *(void *)(a1 + 32);
          *(_DWORD *)buf = 138412546;
          *(void *)&buf[4] = v67;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v68;
          _os_log_fault_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_FAULT,  "[%@] Unhandled update context value: %lu",  buf,  0x16u);
        }

        uint64_t v27 = 0LL;
        goto LABEL_49;
    }
  }

  else
  {
    uint64_t v22 = ASDLogHandleForCategory(8LL);
    unint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_25;
    }
    char v23 = *(void *)(a1 + 16);
    BOOL v24 = *(void *)(a1 + 40);
    uint64_t v25 = *(void *)(a1 + 32) - 1LL;
    if (v25 > 6) {
      uint64_t v26 = @"default";
    }
    else {
      uint64_t v26 = off_1003ECAD0[v25];
    }
    *(_DWORD *)buf = 138412802;
    *(void *)&buf[4] = v23;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v24;
    *(_WORD *)&buf[22] = 2114;
    uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t))v26;
    uint64_t v28 = "[%@] Proceeding with purchase history reload, no previous reload time recorded for accountID: %{public}@ context: %{public}@";
    uint64_t v29 = v15;
    BOOL v30 = 32;
  }

  _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, buf, v30);
LABEL_25:
  unint64_t v31 = 1LL;
LABEL_57:

LABEL_58:
  return v31;
}

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

  uint64_t v27 = *(__CFString **)(a1 + 40);
  uint64_t v28 = v3;
  uint64_t v29 = v28;
  if (!v27)
  {
    uint64_t v48 = 1LL;
    BOOL v40 = v28;
    goto LABEL_34;
  }

  BOOL v30 = sub_100323C54(v28);
  unint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  Class v32 = sub_100323CB4(v29);
  uint64_t v33 = (id *)objc_claimAutoreleasedReturnValue(v32);
  uint64_t v34 = v33;
  if (!v33)
  {
    uint64_t v35 = ASDLogHandleForCategory(30LL);
    uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      unint64_t v86 = v31;
      _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "[%@]: Allowing start, no policy set, allowing install to start unconditionally",  buf,  0xCu);
    }

    uint64_t v27 = 0LL;
    goto LABEL_20;
  }

  if (sub_1002E63A4(v33) && !sub_1001E2598(v29, (uint64_t)@"approved"))
  {
    uint64_t v27 = @"device security not approved";
    goto LABEL_28;
  }

  if ((sub_1002E656C(v34) & 1) == 0)
  {
    if (sub_1002E6488(v34))
    {
      uint64_t v37 = sub_1001D17B8((uint64_t)&OBJC_CLASS___NetworkMonitor);
      uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (!-[os_log_s isConnected](v36, "isConnected"))
      {
        uint64_t v27 = @"no network available";
        goto LABEL_20;
      }

      uint64_t v38 = (unint64_t)sub_1002E61D0(v34);
      if (-[os_log_s isExpensive](v36, "isExpensive"))
      {
        uint64_t v39 = sub_1002E6130(v34);
        if (v39 == (id *)4)
        {
          uint64_t v27 = @"implicitly denied expensive network by evaluator";
          goto LABEL_20;
        }

        if (v39 == (id *)2)
        {
          uint64_t v27 = @"explicitly denied expensive network by user";
LABEL_20:

          goto LABEL_28;
        }

        if (((unint64_t)v39 & 0xFFFFFFFFFFFFFFFDLL) == 1
          && (sub_10023EF84((unint64_t)-[os_log_s interfaceType](v36, "interfaceType"), v38) & 1) == 0)
        {
          os_log_type_t v54 = ASDLogHandleForCategory(30LL);
          uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            unint64_t v86 = v31;
            _os_log_error_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "[%@]: Expensive network allowed, overriding interface mask",  buf,  0xCu);
          }

          uint64_t v38 = 62LL;
        }
      }

      if (-[os_log_s isConstrained](v36, "isConstrained"))
      {
        uint64_t v56 = sub_1002E6090(v34);
        if (v56 == (id *)4)
        {
          uint64_t v27 = @"implicitly denied low data by evaluator";
          goto LABEL_20;
        }

        if (v56 == (id *)2)
        {
          uint64_t v27 = @"explicitly denied low data by user";
          goto LABEL_20;
        }
      }

      if (!v38)
      {
        uint64_t v57 = ASDLogHandleForCategory(30LL);
        unint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 138412290;
          unint64_t v86 = v31;
          _os_log_error_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_ERROR,  "[%@]: Interface mask unspecified, defaulting to always inexpensive",  buf,  0xCu);
        }

        uint64_t v38 = 60LL;
      }

      if (!sub_10023EF84((unint64_t)-[os_log_s interfaceType](v36, "interfaceType"), v38))
      {
        uint64_t v27 = @"no matching network interface";
        goto LABEL_20;
      }
    }

    if (sub_1002E64CC(v34))
    {
      unint64_t v59 = sub_10021AE84((uint64_t)&OBJC_CLASS___PowerMonitor);
      uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
      if (!sub_10021B288((uint64_t)v36))
      {
        uint64_t v27 = @"no power available";
        goto LABEL_20;
      }

      if (sub_10021B1D0((uint64_t)v36))
      {
        uint64_t v27 = @"low power mode enabled";
        goto LABEL_20;
      }
    }

    if (sub_1002E6444(v34))
    {
      uint64_t v60 = sub_1001E1834((uint64_t)&OBJC_CLASS___DeviceStateMonitor);
      uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
      if (!v61)
      {
        uint64_t v36 = 0LL;
        uint64_t v27 = @"pending data migration";
        goto LABEL_20;
      }
    }

    if (sub_1001E2698(v29, (uint64_t)@"update_type") == (id)1)
    {
      uint64_t v62 = sub_1002E6214((uint64_t)v34);
      unint64_t v63 = objc_claimAutoreleasedReturnValue(v62);
      uint64_t v36 = (os_log_s *)v63;
      if (v63 && !sub_1002EAE98(v63))
      {
        uint64_t v27 = @"pending optimal download window";
        goto LABEL_20;
      }
    }

    uint64_t v64 = sub_1001E2634(v29, (uint64_t)@"last_start_date");
    uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
    if (v36)
    {
      os_log_type_t v83 = v4;
      length = (void *)v27[1].length;
      uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  -[NSMutableArray databaseID](v29, "databaseID")));
      uint64_t v67 = objc_claimAutoreleasedReturnValue([length objectForKeyedSubscript:v66]);

      if (v67) {
        uint64_t v68 = (_UNKNOWN **)v67;
      }
      else {
        uint64_t v68 = &off_10040C8B0;
      }
      unint64_t v69 = v68;
      uint64_t v70 = [v68 unsignedIntegerValue];
      objc_opt_self(&OBJC_CLASS___AppInstallScheduler);
      if ((unint64_t)v70 >= 0x14)
      {
        uint64_t v71 = v69;
        Swift::Int v72 = 10.0;
        uint64_t v4 = v83;
        if ((unint64_t)v70 >= 0x32)
        {
          else {
            Swift::Int v72 = 60.0;
          }
        }

        uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s dateByAddingTimeInterval:](v36, "dateByAddingTimeInterval:", v72));
        [v77 timeIntervalSinceNow];
        if (v78 > 0.0)
        {
          sub_10023D12C((uint64_t)v27, v77);
          uint64_t v27 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"restarting too fast - delaying %.0fs",  *(void *)&v72));

LABEL_90:
          goto LABEL_20;
        }

        unint64_t v69 = v71;
      }

      uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  (char *)[v69 unsignedIntegerValue] + 1));
      uint64_t v80 = (void *)v27[1].length;
      uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  -[NSMutableArray databaseID](v29, "databaseID")));
      [v80 setObject:v79 forKeyedSubscript:v81];

      uint64_t v4 = v83;
    }

    uint64_t v82 = ASDLogHandleForCategory(30LL);
    uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(v82);
    if (os_log_type_enabled((os_log_t)v71, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      unint64_t v86 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v71,  OS_LOG_TYPE_DEFAULT,  "[%@]: Allowing start, all policy conditions were met",  buf,  0xCu);
    }

    uint64_t v27 = 0LL;
    goto LABEL_90;
  }

  uint64_t v27 = @"pending termination";
LABEL_28:

  if (!v27)
  {
    uint64_t v48 = 1LL;
    goto LABEL_36;
  }

  BOOL v40 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v27]);
  if (!v40) {
    BOOL v40 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  }
  uint64_t v41 = sub_100323C54(v29);
  char v42 = (void *)objc_claimAutoreleasedReturnValue(v41);

  if (v42)
  {
    unint64_t v43 = sub_100323C54(v29);
    uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v44 description]);
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v45 componentsSeparatedByString:@"/"]);
    BOOL v47 = (void *)objc_claimAutoreleasedReturnValue([v46 firstObject]);

    -[NSMutableArray addObject:](v40, "addObject:", v47);
  }

  [*(id *)(a1 + 48) setObject:v40 forKeyedSubscript:v27];
  uint64_t v48 = 0LL;
LABEL_34:

LABEL_36:
  return v48;
}
}

    uint64_t v9 = 0;
    goto LABEL_8;
  }

  if (a3 != 2) {
    return 0;
  }
  Swift::Int v3 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = v4;
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v6 = @"dnu-deletable-system-apps-enabled";
  uint64_t v7 = 1LL;
LABEL_7:
  uint64_t v9 = sub_100256DD0(v4, v6, (void *)v7, 1);
LABEL_8:

  return v9;
}

LABEL_57:
          if ((v42 & 1) != 0) {
            goto LABEL_97;
          }
          uint64_t v50 = &v17[16 * v19];
          uint64_t v52 = *(void *)v50;
          uint64_t v51 = *((void *)v50 + 1);
          BOOL v30 = __OFSUB__(v51, v52);
          uint64_t v53 = v51 - v52;
          if (v30) {
            goto LABEL_100;
          }
          if (v53 < v41) {
            goto LABEL_13;
          }
LABEL_65:
          unint64_t v58 = v19 - 1;
          if (v19 - 1 >= v12)
          {
            __break(1u);
LABEL_90:
            __break(1u);
LABEL_91:
            __break(1u);
LABEL_92:
            __break(1u);
LABEL_93:
            __break(1u);
LABEL_94:
            __break(1u);
LABEL_95:
            __break(1u);
LABEL_96:
            __break(1u);
LABEL_97:
            __break(1u);
LABEL_98:
            __break(1u);
LABEL_99:
            __break(1u);
LABEL_100:
            __break(1u);
LABEL_101:
            __break(1u);
LABEL_102:
            __break(1u);
LABEL_103:
            __break(1u);
LABEL_104:
            __break(1u);
LABEL_105:
            __break(1u);
LABEL_106:
            __break(1u);
LABEL_107:
            __break(1u);
LABEL_108:
            __break(1u);
LABEL_109:
            __break(1u);
LABEL_110:
            __break(1u);
            goto LABEL_111;
          }

          if (!v11) {
            goto LABEL_112;
          }
          unint64_t v59 = &v17[16 * v58];
          uint64_t v60 = *(void *)v59;
          uint64_t v61 = &v17[16 * v19];
          uint64_t v62 = *((void *)v61 + 1);
          sub_1000493B4( (char *)(v11 + 8LL * *(void *)v59),  (char *)(v11 + 8LL * *(void *)v61),  v11 + 8 * v62,  __dst);
          if (v76)
          {
LABEL_85:
            swift_bridgeObjectRelease(v9);
            v71[2] = 0LL;
            return swift_bridgeObjectRelease(v71);
          }

          if (v62 < v60) {
            goto LABEL_90;
          }
          if (v19 > *((void *)v9 + 2)) {
            goto LABEL_91;
          }
          *(void *)unint64_t v59 = v60;
          *(void *)&v17[16 * v58 + 8] = v62;
          unint64_t v63 = *((void *)v9 + 2);
          if (v19 >= v63) {
            goto LABEL_92;
          }
          unint64_t v12 = v63 - 1;
          memmove(&v17[16 * v19], v61 + 16, 16 * (v63 - 1 - v19));
          *((void *)v9 + 2) = v63 - 1;
          if (v63 <= 2) {
            goto LABEL_13;
          }
        }
      }

      unint64_t v12 = 1LL;
LABEL_13:
      Swift::Int v3 = v72;
      Swift::Int v10 = v74;
    }

    while (v74 < v72);
    uint64_t v2 = v70;
    if (v12 < 2)
    {
LABEL_88:
      swift_bridgeObjectRelease(v9);
      v71[2] = 0LL;
      return swift_bridgeObjectRelease(v71);
    }

  -[PerformUpdatesTask completeWithSuccess](self, "completeWithSuccess");
  unint64_t v69 = ASDLogHandleForCategory(40LL);
  uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
  if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(-[PerformUpdatesTask context](self, "context"));
    Swift::Int v72 = (void *)objc_claimAutoreleasedReturnValue([v71 logKey]);
    Swift::Int v73 = (void *)objc_claimAutoreleasedReturnValue(-[PerformUpdatesTask context](self, "context"));
    Swift::Int v74 = (void *)objc_claimAutoreleasedReturnValue([v73 humanReadableReason]);
    *(_DWORD *)buf = 138412546;
    *(void *)&buf[4] = v72;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v74;
    _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "[%@] Perform updates complete with reason: %{public}@",  buf,  0x16u);
  }
}

      uint64_t v91 = ASDLogHandleForCategory(14LL);
      uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v93 = (void *)objc_opt_class(v100, v92);
        *(_DWORD *)buf = 138543618;
        uint64_t v122 = v93;
        Class v123 = 2112;
        id v124 = v67;
        uint64_t v79 = v93;
        uint64_t v80 = "[%{public}@] [%@] Wrote app usage";
        goto LABEL_59;
      }

      goto LABEL_60;
    }

    uint64_t v81 = sub_100220B14((uint64_t)&OBJC_CLASS___Storage);
    uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
    uint64_t v71 = v82;
    if (v82)
    {
      os_log_type_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[os_log_s stringByAppendingPathComponent:]( v82,  "stringByAppendingPathComponent:",  @"apps.plist"));
      [v68 writeToFile:v83 atomically:1];
      BOOL v84 = ASDLogHandleForCategory(14LL);
      char v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
      if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      {
        id v87 = (void *)objc_opt_class(v100, v86);
        *(_DWORD *)buf = 138543874;
        uint64_t v122 = v87;
        Class v123 = 2112;
        id v124 = v67;
        uint64_t v125 = 2112;
        uint64_t v126 = v83;
        id v88 = v87;
        _os_log_impl( (void *)&_mh_execute_header,  v85,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%@] Wrote app usage to path: %@",  buf,  0x20u);
      }
    }

    else
    {
      id v89 = ASDLogHandleForCategory(14LL);
      os_log_type_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
      if (!os_log_type_enabled(v83, OS_LOG_TYPE_ERROR)) {
        goto LABEL_56;
      }
      char v94 = (void *)objc_opt_class(v100, v90);
      *(_DWORD *)buf = 138543618;
      uint64_t v122 = v94;
      Class v123 = 2112;
      id v124 = v67;
      char v85 = v94;
      _os_log_error_impl( (void *)&_mh_execute_header,  v83,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%@] Unable to write apps usage due to not being able to find the container path",  buf,  0x16u);
    }

LABEL_56:
    goto LABEL_57;
  }

uint64_t sub_1000493B4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  uint64_t v13 = v12 >> 3;
  uint64_t v22 = __src;
  uint64_t v21 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      unint64_t v16 = &v4[8 * v13];
      uint64_t v20 = v16;
      uint64_t v22 = a2;
      if (v7 < a2 && v11 >= 8)
      {
        unint64_t v17 = (char *)(a3 - 8);
        do
        {
          if (v16 != v17 + 8 || v17 >= v16) {
            *(void *)unint64_t v17 = *((void *)v16 - 1);
          }
          v16 -= 8;
          v17 -= 8;
        }

        while (v16 > v4);
        uint64_t v20 = v16;
      }

      goto LABEL_34;
    }
  }

  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    Swift::Int v14 = &v4[8 * v10];
    uint64_t v20 = v14;
    if ((unint64_t)a2 < a3 && v8 >= 8)
    {
      do
      {
        unint64_t v15 = v4 + 8;
        if (v7 != v4 || v7 >= v15) {
          *(void *)uint64_t v7 = *(void *)v4;
        }
        v7 += 8;
        v4 += 8;
      }

      while (v15 < v14);
      uint64_t v22 = v7;
      uint64_t v21 = v15;
    }

char *sub_1000495A4(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_1000079A0(&qword_100459498);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  Swift::Int v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10004969C(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    char v9 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7]) {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }

  return result;
}

char *sub_100049744(uint64_t a1)
{
  return sub_1000495A4(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

void sub_100049758(uint64_t *a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = a4 & 1;
  unint64_t v9 = *a1;
  uint64_t v10 = swift_bridgeObjectRetain(*a1);
  uint64_t v11 = sub_10004A518(v10, a2, a3, v8);
  if (v4)
  {

    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v9);
    return;
  }

  char v13 = v12;
  uint64_t v14 = v11;
  swift_bridgeObjectRelease(v9);
  if ((v13 & 1) != 0)
  {
    uint64_t v40 = *v7;
    if ((unint64_t)v40 >> 62)
    {
      if (v40 < 0) {
        uint64_t v43 = v40;
      }
      else {
        uint64_t v43 = v40 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v40);
      _CocoaArrayWrapper.endIndex.getter(v43);
      swift_bridgeObjectRelease(a2);
      a2 = v40;
    }
  }

  else
  {
    uint64_t v15 = v14 + 1;
    if (__OFADD__(v14, 1LL)) {
      goto LABEL_60;
    }
    unint64_t v9 = *v7;
    if ((unint64_t)*v7 >> 62)
    {
LABEL_61:
      if ((v9 & 0x8000000000000000LL) != 0LL) {
        uint64_t v41 = v9;
      }
      else {
        uint64_t v41 = v9 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v9);
      uint64_t v42 = _CocoaArrayWrapper.endIndex.getter(v41);
      swift_bridgeObjectRelease(v9);
      uint64_t v16 = v14;
      if (v15 != v42) {
        goto LABEL_7;
      }
    }

    else
    {
      uint64_t v16 = v14;
      if (v15 != *(void *)((v9 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
LABEL_7:
        uint64_t v15 = v16 + 5;
        uint64_t v46 = v7;
        do
        {
          unint64_t v9 = v15 - 4;
          uint64_t v17 = *v7;
          if ((*v7 & 0xC000000000000001LL) != 0)
          {
            uint64_t v18 = v16;
            id v19 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, v17);
          }

          else
          {
            if ((v9 & 0x8000000000000000LL) != 0)
            {
              __break(1u);
LABEL_51:
              __break(1u);
LABEL_52:
              __break(1u);
LABEL_53:
              __break(1u);
LABEL_54:
              __break(1u);
LABEL_55:
              __break(1u);
LABEL_56:
              __break(1u);
LABEL_57:
              __break(1u);
LABEL_58:
              __break(1u);
LABEL_59:
              __break(1u);
LABEL_60:
              __break(1u);
              goto LABEL_61;
            }

            if (v9 >= *(void *)((v17 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
              goto LABEL_51;
            }
            uint64_t v18 = v16;
            id v19 = *(id *)(v17 + 8 * v15);
          }

          uint64_t v20 = v19;
          id v47 = v19;
          uint64_t v14 = a2;
          uint64_t v21 = a2;
          a2 = (uint64_t)a3;
          uint64_t v22 = a3;
          a3 = (void *)v8;
          uint64_t v8 = sub_100041468(&v47, v21, v22, v8);

          if ((v8 & 1) != 0)
          {
            uint64_t v16 = v18;
            uint64_t v7 = v46;
          }

          else
          {
            unint64_t v23 = v18;
            if (v9 != v18)
            {
              uint64_t v7 = v46;
              uint64_t v8 = *v46;
              unint64_t v45 = v23;
              if ((*v46 & 0xC000000000000001LL) != 0)
              {
                id v39 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v23, v8);
                uint64_t v8 = *v46;
              }

              else
              {
                if ((v23 & 0x8000000000000000LL) != 0) {
                  goto LABEL_54;
                }
                if (v23 >= *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
                  goto LABEL_55;
                }
                id v39 = *(id *)(v8 + 8 * v23 + 32);
              }

              id v44 = v39;
              if ((v8 & 0xC000000000000001LL) != 0)
              {
                id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, v8);
                uint64_t v8 = *v46;
              }

              else
              {
                if ((v9 & 0x8000000000000000LL) != 0) {
                  goto LABEL_56;
                }
                if (v9 >= *(void *)((v8 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
                  goto LABEL_57;
                }
                id v24 = *(id *)(v8 + 8 * v15);
              }

              int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v8);
              *uint64_t v46 = v8;
              if (!isUniquelyReferenced_nonNull_bridgeObject || v8 < 0 || (v8 & 0x4000000000000000LL) != 0)
              {
                uint64_t v8 = sub_1000800CC(v8);
                *uint64_t v46 = v8;
              }

              uint64_t v26 = *(void **)((v8 & 0xFFFFFFFFFFFFFF8LL) + 8 * v45 + 0x20);
              *(void *)((v8 & 0xFFFFFFFFFFFFFF8LL) + 8 * v45 + 0x2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v24;

              specialized Array._endMutation()(v27);
              uint64_t v7 = v46;
              uint64_t v28 = *v46;
              int v29 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v46);
              *uint64_t v46 = v28;
              if (!v29 || v28 < 0 || (v28 & 0x4000000000000000LL) != 0)
              {
                uint64_t v28 = sub_1000800CC(v28);
                *uint64_t v46 = v28;
              }

              if ((v9 & 0x8000000000000000LL) != 0) {
                goto LABEL_58;
              }
              uint64_t v30 = v28 & 0xFFFFFFFFFFFFFF8LL;
              if (v9 >= *(void *)((v28 & 0xFFFFFFFFFFFFFF8LL) + 0x10)) {
                goto LABEL_59;
              }
              unint64_t v31 = *(void **)(v30 + 8 * v15);
              *(void *)(v30 + 8 * v15) = v44;

              specialized Array._endMutation()(v32);
              unint64_t v23 = v45;
            }

            BOOL v33 = __OFADD__(v23, 1LL);
            uint64_t v16 = v23 + 1;
            uint64_t v7 = v46;
            if (v33) {
              goto LABEL_53;
            }
          }

          uint64_t v8 = v15 - 3;
          if (__OFADD__(v9, 1LL)) {
            goto LABEL_52;
          }
          uint64_t v34 = *v7;
          if ((unint64_t)*v7 >> 62)
          {
            if (v34 < 0) {
              uint64_t v37 = *v7;
            }
            else {
              uint64_t v37 = v34 & 0xFFFFFFFFFFFFFF8LL;
            }
            uint64_t v38 = v16;
            swift_bridgeObjectRetain(v34);
            uint64_t v35 = _CocoaArrayWrapper.endIndex.getter(v37);
            swift_bridgeObjectRelease(v34);
            uint64_t v16 = v38;
            uint64_t v7 = v46;
          }

          else
          {
            uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFF8LL) + 0x10);
          }

          ++v15;
          BOOL v36 = v8 == v35;
          uint64_t v8 = (uint64_t)a3;
          a3 = (void *)a2;
          a2 = v14;
        }

        while (!v36);
      }
    }
  }

  swift_bridgeObjectRelease(a2);
}

uint64_t sub_100049B44@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  sub_100016B10((uint64_t)(a1 + 2), (uint64_t)(a2 + 2));
  *a2 = v4;
  a2[1] = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_100049B84(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v8 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v9 = ~v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = -v8;
  uint64_t v38 = a1;
  uint64_t v39 = a1 + 64;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  else {
    uint64_t v12 = -1LL;
  }
  uint64_t v40 = v9;
  uint64_t v41 = 0LL;
  uint64_t v42 = v12 & v10;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_10006EBEC(&v36);
  uint64_t v13 = *((void *)&v36 + 1);
  if (!*((void *)&v36 + 1))
  {
LABEL_19:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_100017CC0(v38);
    return swift_release(v44);
  }

  while (1)
  {
    uint64_t v16 = v36;
    sub_100015330(&v37, v35);
    uint64_t v17 = *a5;
    unint64_t v19 = sub_100023F7C(v16, v13);
    uint64_t v20 = *(void *)(v17 + 16);
    BOOL v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      break;
    }
    char v23 = v18;
    if (*(void *)(v17 + 24) >= v22)
    {
      if ((a4 & 1) != 0)
      {
        if ((v18 & 1) != 0) {
          goto LABEL_6;
        }
      }

      else
      {
        sub_10007A1D0();
        if ((v23 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    else
    {
      sub_100076E38(v22, a4 & 1);
      unint64_t v24 = sub_100023F7C(v16, v13);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_22;
      }
      unint64_t v19 = v24;
      if ((v23 & 1) != 0)
      {
LABEL_6:
        uint64_t v14 = 32 * v19;
        sub_100016B10(*(void *)(*a5 + 56) + v14, (uint64_t)v33);
        sub_100016B10((uint64_t)v33, (uint64_t)v34);
        sub_100015340(v33);
        sub_100015340(v35);
        swift_bridgeObjectRelease(v13);
        uint64_t v15 = (void *)(*(void *)(*a5 + 56) + v14);
        sub_100015340(v15);
        sub_100015330(v34, v15);
        goto LABEL_7;
      }
    }

    uint64_t v26 = (void *)*a5;
    *(void *)(*a5 + 8 * (v19 >> 6) + 64) |= 1LL << v19;
    uint64_t v27 = (uint64_t *)(v26[6] + 16 * v19);
    uint64_t *v27 = v16;
    v27[1] = v13;
    sub_100015330(v35, (_OWORD *)(v26[7] + 32 * v19));
    uint64_t v28 = v26[2];
    BOOL v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_21;
    }
    v26[2] = v30;
LABEL_7:
    sub_10006EBEC(&v36);
    uint64_t v13 = *((void *)&v36 + 1);
    a4 = 1;
    if (!*((void *)&v36 + 1)) {
      goto LABEL_19;
    }
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100049DE4(unint64_t a1, unint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1 >> 62;
  if (a1 >> 62) {
    goto LABEL_73;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    if (v6 >= v5) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = *(void *)(a2 + 16);
    }
    unint64_t v42 = a2;
    if (v7 > 0)
    {
      uint64_t v8 = sub_1000079A0(&qword_100459488);
      uint64_t v9 = (void *)swift_allocObject(v8, 8 * v7 + 32, 7LL);
      uint64_t v10 = v9 + 4;
      int64_t v11 = j__malloc_size(v9);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 25;
      }
      uint64_t v13 = v12 >> 3;
      v9[2] = v7;
      v9[3] = 2 * v13;
      uint64_t v14 = v13 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v44 = v4;
      uint64_t v46 = v9;
      if (v4)
      {
        uint64_t v47 = v3 & 0xFFFFFFFFFFFFFF8LL;
        if (v3 < 0) {
          uint64_t v20 = v3;
        }
        else {
          uint64_t v20 = v3 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain_n(v3, 2LL);
        swift_bridgeObjectRetain(a2);
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v20);
        swift_bridgeObjectRelease(v3);
      }

      else
      {
        uint64_t v47 = v3 & 0xFFFFFFFFFFFFFF8LL;
        uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        swift_bridgeObjectRetain(v3);
        swift_bridgeObjectRetain(a2);
      }

      unint64_t v21 = 0LL;
      unint64_t v22 = 0LL;
      a2 = v3 & 0xC000000000000001LL;
      uint64_t v15 = v14 - v7;
      do
      {
        if (v7 == v22)
        {
          __break(1u);
LABEL_66:
          __break(1u);
          goto LABEL_67;
        }

        if (v4 == v22) {
          goto LABEL_66;
        }
        if (a2)
        {
          a1 = specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v3);
          if (v6 == v22) {
            goto LABEL_79;
          }
        }

        else
        {
          if (v22 >= *(void *)(v47 + 16)) {
            goto LABEL_70;
          }
          a1 = (unint64_t)*(id *)(v3 + 32 + 8 * v22);
          if (v6 == v22) {
            goto LABEL_79;
          }
        }

        v10[v22] = a1;
        v21 -= 8LL;
        ++v22;
      }

      while (v7 != v22);
      uint64_t v17 = &v10[v21 / 0xFFFFFFFFFFFFFFF8LL];
      uint64_t v16 = v47;
      if (v44) {
        break;
      }
      goto LABEL_32;
    }

    if (v7 < 0)
    {
      __break(1u);
      goto LABEL_78;
    }

    uint64_t v15 = _swiftEmptyArrayStorage[3] >> 1;
    uint64_t v16 = v3 & 0xFFFFFFFFFFFFFF8LL;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(a2);
    uint64_t v46 = _swiftEmptyArrayStorage;
    uint64_t v17 = &_swiftEmptyArrayStorage[4];
    if (v4) {
      break;
    }
LABEL_32:
    uint64_t v19 = *(void *)(v16 + 16);
    if (v7 == v19) {
      goto LABEL_59;
    }
LABEL_33:
    uint64_t v4 = v3 & 0xC000000000000001LL;
    else {
      uint64_t v23 = v7;
    }
    uint64_t v45 = v19;
    uint64_t v43 = v23;
    while (1)
    {
      if (v4)
      {
        id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v3);
      }

      else
      {
        id v24 = *(id *)(v3 + 8 * v7 + 32);
      }

      char v25 = v24;
      a2 = v7 + 1;
      if (__OFADD__(v7, 1LL)) {
        break;
      }
      if (v6 == v7)
      {
        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v3);

        goto LABEL_61;
      }

      if (v23 == v7) {
        goto LABEL_68;
      }
      if (!v15)
      {
        unint64_t v26 = v46[3];
        int64_t v27 = v26 & 0xFFFFFFFFFFFFFFFELL;
        if (v27 <= 1) {
          uint64_t v28 = 1LL;
        }
        else {
          uint64_t v28 = v27;
        }
        uint64_t v29 = sub_1000079A0(&qword_100459488);
        uint64_t v30 = (void *)swift_allocObject(v29, 8 * v28 + 32, 7LL);
        int64_t v31 = j__malloc_size(v30);
        uint64_t v32 = v31 - 32;
        if (v31 < 32) {
          uint64_t v32 = v31 - 25;
        }
        uint64_t v33 = v32 >> 3;
        _OWORD v30[2] = v28;
        v30[3] = 2 * (v32 >> 3);
        unint64_t v34 = (unint64_t)(v30 + 4);
        uint64_t v35 = v46[3] >> 1;
        if (v46[2])
        {
          __int128 v36 = v46 + 4;
          v46[2] = 0LL;
        }

        uint64_t v17 = (void *)(v34 + 8 * v35);
        uint64_t v15 = (v33 & 0x7FFFFFFFFFFFFFFFLL) - v35;
        swift_release(v46);
        uint64_t v46 = v30;
        uint64_t v4 = v3 & 0xC000000000000001LL;
        uint64_t v19 = v45;
        uint64_t v23 = v43;
      }

      BOOL v37 = __OFSUB__(v15--, 1LL);
      if (v37) {
        goto LABEL_69;
      }
      *v17++ = v25;
      ++v7;
      if (a2 == v19) {
        goto LABEL_59;
      }
    }

LABEL_78:
  __break(1u);
LABEL_79:

  __break(1u);
}

        __int128 v36 = v11 - v18;
        BOOL v37 = __OFSUB__(v11, v18);
        if (v27 >= v17)
        {
          if (v37)
          {
LABEL_157:
            __break(1u);
LABEL_158:
            __break(1u);
LABEL_159:
            __break(1u);
LABEL_160:
            __break(1u);
LABEL_161:
            __break(1u);
LABEL_162:
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
            return result;
          }

          if (v36 > 0)
          {
            uint64_t result = &__src[40 * v17];
            uint64_t v48 = &__src[40 * v18];
            if (v17 != v18 || result >= &v48[40 * v36]) {
              uint64_t result = (char *)memmove(result, v48, 40 * v36);
            }
            uint64_t v19 = __OFADD__(v17, v36);
            v17 += v36;
            if (v19) {
              goto LABEL_161;
            }
            uint64_t v49 = __OFSUB__(v17, *a3);
            if (v17 >= *a3)
            {
              v17 -= *a3;
              if (v49) {
                goto LABEL_165;
              }
            }
          }

          if (v4 >= 1)
          {
            uint64_t result = &__src[40 * v17];
            if (v17 < 0 || v17 >= v4 || v17)
            {
              uint64_t v41 = 40 * v4;
              uint64_t v33 = __src;
              goto LABEL_141;
            }
          }

          goto LABEL_142;
        }

        if (v37)
        {
LABEL_154:
          __break(1u);
          goto LABEL_155;
        }

        if (v36 > 0)
        {
          uint64_t result = &__src[40 * v17];
          unint64_t v38 = &__src[40 * v18];
          if (v17 != v18 || result >= &v38[40 * v36]) {
            uint64_t result = (char *)memmove(result, v38, 40 * v36);
          }
          uint64_t v19 = __OFADD__(v17, v36);
          v17 += v36;
          if (v19) {
            goto LABEL_160;
          }
          unint64_t v39 = __OFSUB__(v17, *a3);
          if (v17 >= *a3)
          {
            v17 -= *a3;
            if (v39) {
              goto LABEL_164;
            }
          }
        }

        uint64_t result = &__src[40 * v17];
        if (v17 < 0 || v17 >= v5 || v17) {
          uint64_t result = (char *)memmove(result, __src, 40 * v5);
        }
        unint64_t v40 = v5;
        if (v5 >= *a3)
        {
          unint64_t v40 = v5 - *a3;
          if (__OFSUB__(v5, *a3)) {
            goto LABEL_162;
          }
        }

        if (v7 < 1) {
          goto LABEL_142;
        }
        uint64_t v33 = &__src[40 * v40];
        if (v40 <= 0 && &v33[40 * v7] > __src && !v40) {
          goto LABEL_142;
        }
        unint64_t v34 = 5 * v7;
        goto LABEL_101;
      }

LABEL_79:
            unint64_t v58 = v117;
            goto LABEL_80;
          }

          NSString v116 = (void *)v79;
          [v122 setAccount:v79];
          uint64_t v80 = ASDLogHandleForCategory(25LL);
          uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
          if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue([v122 logKey]);
            *(_DWORD *)buf = 138412290;
            uint64_t v127 = v82;
            _os_log_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_DEFAULT,  "[%@] Using non-active account that matches the purchaser.",  buf,  0xCu);
          }
        }

        unint64_t v58 = v119;
LABEL_68:

        goto LABEL_80;
      }

uint64_t sub_10004A1C8(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0LL,  a1);
}

uint64_t sub_10004A1DC(void *a1)
{
  return sub_10007FC5C(0, a1[2], 0, a1);
}

uint64_t sub_10004A1F0(uint64_t a1, int *a2)
{
  *(void *)(v2 + 24) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 32) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_10004A258;
  return v5(v2 + 16);
}

uint64_t sub_10004A258()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void **)(*v0 + 24);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 32));
  *uint64_t v2 = *(void *)(v1 + 16);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10004A2A8(char a1)
{
  unint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseStore);
  id v3 = sub_100237D18(v2);
  uint64_t v4 = swift_allocObject(&unk_1003DEA28, 32LL, 7LL);
  *(_BYTE *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = &v21;
  uint64_t v5 = swift_allocObject(&unk_1003DEA50, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_10004C358;
  *(void *)(v5 + 24) = v4;
  uint64_t v19 = sub_10004C57C;
  uint64_t v20 = v5;
  aBlock = _NSConcreteStackBlock;
  uint64_t v16 = 1107296256LL;
  uint64_t v17 = sub_10000CF5C;
  uint64_t v18 = &unk_1003DEA68;
  uint64_t v6 = _Block_copy(&aBlock);
  uint64_t v7 = v20;
  swift_retain(v5);
  swift_release(v7);
  [v3 readUsingSession:v6];

  _Block_release(v6);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v5, "", 88LL, 110LL, 45LL, 1LL);
  uint64_t result = swift_release(v5);
  if ((v3 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    id v9 = sub_100237D18(v2);
    uint64_t v10 = swift_allocObject(&unk_1003DEAA0, 24LL, 7LL);
    *(void *)(v10 + 16) = &v21;
    uint64_t v11 = swift_allocObject(&unk_1003DEAC8, 32LL, 7LL);
    *(void *)(v11 + 16) = sub_10004C384;
    *(void *)(v11 + 24) = v10;
    uint64_t v19 = sub_1000366C0;
    uint64_t v20 = v11;
    aBlock = _NSConcreteStackBlock;
    uint64_t v16 = 1107296256LL;
    uint64_t v17 = sub_100028ECC;
    uint64_t v18 = &unk_1003DEAE0;
    uint64_t v12 = _Block_copy(&aBlock);
    uint64_t v13 = v20;
    swift_retain(v11);
    swift_release(v13);
    [v9 modifyUsingTransaction:v12];

    _Block_release(v12);
    LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v11, "", 88LL, 117LL, 47LL, 1LL);
    uint64_t result = swift_release(v11);
    if ((v9 & 1) == 0)
    {
      uint64_t v14 = v21;
      swift_release(v10);
      swift_release(v4);
      return swift_bridgeObjectRelease(v14);
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10004A518(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v5 = v4;
  LOBYTE(v6) = a4;
  if ((unint64_t)a1 >> 62)
  {
LABEL_15:
    if (a1 < 0) {
      uint64_t v15 = a1;
    }
    else {
      uint64_t v15 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease(a1);
    uint64_t v10 = 0LL;
    if (!v9) {
      return v10;
    }
  }

  else
  {
    uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v10 = 0LL;
    if (!v9) {
      return v10;
    }
  }

  v6 &= 1u;
  while (1)
  {
    id v11 = (a1 & 0xC000000000000001LL) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a1)
        : *(id *)(a1 + 8 * v10 + 32);
    uint64_t v12 = v11;
    id v18 = v11;
    char v13 = sub_100041468(&v18, a2, a3, v6);

    if (v5 || (v13 & 1) != 0) {
      return v10;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_15;
    }

    ++v10;
    if (v14 == v9) {
      return 0LL;
    }
  }

void sub_10004A644(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static Logger.updates.getter(v10);
  id v13 = a1;
  swift_bridgeObjectRetain_n(a3, 2LL);
  uint64_t v14 = (char *)v13;
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v35 = v9;
    uint64_t v18 = v17;
    int64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    uint64_t v37 = v33;
    *(_DWORD *)uint64_t v18 = 138412546;
    os_log_t v32 = v15;
    uint64_t v19 = *(void **)&v14[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey];
    uint64_t v34 = v8;
    uint64_t v36 = (uint64_t)v19;
    uint64_t v30 = a2;
    id v20 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v18 + 4, v18 + 12);
    unint64_t v21 = v31;
    void *v31 = v19;

    *(_WORD *)(v18 + 12) = 2082;
    swift_bridgeObjectRetain(a3);
    uint64_t v36 = sub_100088DB4(v30, a3, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease_n(a3, 3LL);
    os_log_t v22 = v32;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  v16,  "[%@] Sending updates changed notification with reason: %{public}s",  (uint8_t *)v18,  0x16u);
    uint64_t v23 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v21, 1LL, v23);
    swift_slowDealloc(v21, -1LL, -1LL);
    uint64_t v24 = v33;
    swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v34);
  }

  else
  {

    swift_bridgeObjectRelease_n(a3, 2LL);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }

  notify_post("com.apple.appstored.updatesstorechanged");
  swift_bridgeObjectRetain(a4);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a4);
  uint64_t v26 = objc_opt_self(&OBJC_CLASS___ASDNotification);
  id v27 = sub_1002252F4(v26, isa);

  uint64_t v28 = objc_opt_self(&OBJC_CLASS___XPCNotificationCenter);
  id v29 = sub_1002E78A4(v28);
  sub_1002E79EC((uint64_t)v29, v27);
}

uint64_t sub_10004A944()
{
  uint64_t v10 = _swiftEmptyDictionarySingleton;
  uint64_t v0 = objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseStore);
  id v1 = sub_100237D18(v0);
  uint64_t v2 = swift_allocObject(&unk_1003DDDA8, 24LL, 7LL);
  *(void *)(v2 + 16) = &v10;
  uint64_t v3 = swift_allocObject(&unk_1003DDDD0, 32LL, 7LL);
  *(void *)(v3 + 16) = sub_10004B2C4;
  *(void *)(v3 + 24) = v2;
  aBlock[4] = sub_1000152F8;
  uint64_t v9 = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000CF5C;
  aBlock[3] = &unk_1003DDDE8;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v5 = v9;
  swift_retain(v3);
  swift_release(v5);
  [v1 readUsingSession:v4];

  _Block_release(v4);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation(v3, "", 88LL, 587LL, 54LL, 1LL);
  uint64_t result = swift_release(v3);
  if ((v1 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v7 = v10;
    swift_release(v2);
    return (uint64_t)v7;
  }

  return result;
}

uint64_t sub_10004AA9C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004AAC8(void *a1)
{
  return sub_100047D9C(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void ***)(v1 + 40));
}

uint64_t sub_10004AAD4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004AAE4()
{
  return os_variant_has_internal_content("com.apple.appstored");
}

unint64_t sub_10004AAF0()
{
  unint64_t result = qword_100459428;
  if (!qword_100459428)
  {
    uint64_t v1 = sub_10001517C(255LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100459428);
  }

  return result;
}

uint64_t sub_10004AB48()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 40));

  return swift_deallocObject(v0, 80LL, 7LL);
}

void sub_10004AB84(void *a1, uint64_t a2)
{
}

uint64_t sub_10004ABC0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004ABD0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void *sub_10004ABE0(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = (void *)a1[2];
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[7];
  uint64_t v6 = a1[9];
  swift_bridgeObjectRelease(a1[11]);
  swift_bridgeObjectRelease(v2);

  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t sub_10004AC44(uint64_t a1)
{
  uint64_t v2 = sub_1000079A0((uint64_t *)&unk_100459410);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v39 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v39 - v9;
  uint64_t v43 = a1;
  swift_bridgeObjectRetain(a1);
  unint64_t v11 = sub_100017B50();
  if (v11)
  {
    uint64_t v12 = v11;
    if (*(void *)(v11 + 16) && (unint64_t v13 = sub_100023F7C(0xD000000000000011LL, 0x80000001003441A0LL), (v14 & 1) != 0))
    {
      sub_100016B10(*(void *)(v12 + 56) + 32 * v13, (uint64_t)&v41);
      sub_100015330(&v41, v40);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(a1);
      uint64_t v39 = a1;
      sub_100079180(v40, 0x6C616E7265747865LL, 0xEA00000000006449LL, isUniquelyReferenced_nonNull_native);
      uint64_t v16 = v39;
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }

    else
    {
      sub_1000679D0(0x6C616E7265747865LL, 0xEA00000000006449LL, &v41);
      sub_100015240((uint64_t)&v41, (uint64_t *)&unk_1004594B0);
      uint64_t v16 = v43;
    }

    swift_bridgeObjectRetain(v12);
    char v17 = swift_isUniquelyReferenced_nonNull_native(v16);
    *(void *)&__int128 v41 = v16;
    sub_100049B84(v12, (uint64_t)sub_100049B44, 0LL, v17, (uint64_t *)&v41);
    a1 = v41;
    uint64_t v43 = v41;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    if (*(void *)(v12 + 16) && (unint64_t v18 = sub_100023F7C(0x44657361656C6572LL, 0xEB00000000657461LL), (v19 & 1) != 0))
    {
      sub_100016B10(*(void *)(v12 + 56) + 32 * v18, (uint64_t)&v41);
    }

    else
    {
      __int128 v41 = 0u;
      __int128 v42 = 0u;
    }

    swift_bridgeObjectRelease(v12);
    if (!*((void *)&v42 + 1))
    {
      char v25 = (uint64_t *)&unk_1004594B0;
      uint64_t v26 = &v41;
LABEL_26:
      sub_100015240((uint64_t)v26, v25);
      return a1;
    }

    if ((swift_dynamicCast(v40, &v41, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
    {
      uint64_t v20 = *((void *)&v40[0] + 1);
      if (qword_100458078 != -1) {
        swift_once(&qword_100458078, sub_100038E68);
      }
      unint64_t v21 = (void *)qword_100459328;
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      id v23 = [v21 dateFromString:v22];

      if (v23)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v23);

        uint64_t v24 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v8, 0LL, 1LL, v24);
      }

      else
      {
        uint64_t v27 = type metadata accessor for Date(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v8, 1LL, 1LL, v27);
      }

      sub_100026CD4((uint64_t)v8, (uint64_t)v10, (uint64_t *)&unk_100459410);
      if (qword_100458070 != -1) {
        swift_once(&qword_100458070, sub_100038E40);
      }
      uint64_t v28 = (void *)qword_100459320;
      sub_100036C9C((uint64_t)v10, (uint64_t)v5);
      uint64_t v29 = type metadata accessor for Date(0LL);
      uint64_t v30 = *(void *)(v29 - 8);
      Class isa = 0LL;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v5, 1LL, v29) != 1)
      {
        Class isa = Date._bridgeToObjectiveC()().super.isa;
        (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v29);
      }

      id v32 = [v28 stringForObjectValue:isa];
      swift_unknownObjectRelease(isa);
      if (v32)
      {
        uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        uint64_t v35 = v34;

        *((void *)&v42 + 1) = &type metadata for String;
        *(void *)&__int128 v41 = v33;
        *((void *)&v41 + 1) = v35;
        sub_100015330(&v41, v40);
        uint64_t v36 = v43;
        char v37 = swift_isUniquelyReferenced_nonNull_native(v43);
        uint64_t v39 = v36;
        sub_100079180(v40, 0x44657361656C6572LL, 0xEB00000000657461LL, v37);
        a1 = v39;
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }

      else
      {
        sub_1000679D0(0x44657361656C6572LL, 0xEB00000000657461LL, &v41);
        sub_100015240((uint64_t)&v41, (uint64_t *)&unk_1004594B0);
        a1 = v43;
      }

      char v25 = (uint64_t *)&unk_100459410;
      uint64_t v26 = (__int128 *)v10;
      goto LABEL_26;
    }
  }

  return a1;
}

BOOL sub_10004B10C(void *a1)
{
  uint64_t v2 = sub_1000079A0((uint64_t *)&unk_100459410);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v18 - v10;
  id v12 = sub_1001E2634(a1, (uint64_t)@"timestamp");
  if (v12)
  {
    unint64_t v13 = v12;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v12);

    char v14 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v14(v4, v9, v5);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0LL, 1LL, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) != 1)
    {
      uint64_t v15 = ((uint64_t (*)(char *, char *, uint64_t))v14)(v11, v4, v5);
      double v16 = Date.timeIntervalSinceNow.getter(v15);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      return v16 < -1209600.0;
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1LL, 1LL, v5);
  }

  sub_100015240((uint64_t)v4, (uint64_t *)&unk_100459410);
  return 1LL;
}

uint64_t sub_10004B2B4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004B2C4(void *a1)
{
  return sub_10003F250(a1, *(void *)(v1 + 16));
}

uint64_t sub_10004B2CC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004B2DC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10004B2EC(void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10004B2F4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004B304()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10004B330()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_100459454);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100008210;
  v3[2] = v2;
  return swift_task_switch(sub_1000429A8, 0LL, 0LL);
}

uint64_t sub_10004B390(uint64_t a1)
{
  return sub_100065298(a1, *(void **)(v1 + 16));
}

uint64_t sub_10004B39C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100459464);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100008210;
  return sub_100041A9C(a1, v4, v5, v6);
}

uint64_t sub_10004B408(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_100459874);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100459870 + dword_100459870))(a1, v4);
}

uint64_t sub_10004B47C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc(dword_10045947C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100008210;
  v3[2] = v2;
  uint64_t v4 = (void *)swift_task_alloc(dword_100459404);
  v3[3] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_10003C4C0;
  return sub_100044360(v2);
}

uint64_t sub_10004B4F8(void *a1)
{
  return sub_100040844(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10004B504()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10004B518(void *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10004B524()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004B534()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10004B544(void *a1)
{
}

uint64_t sub_10004B54C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004B55C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10004B580(void *a1)
{
  return sub_10003EA40(a1, *(void **)(v1 + 16), *(unsigned __int8 **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10004B58C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004B59C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004B5D0()
{
  uint64_t v2 = swift_task_alloc(dword_1004594C4);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100008210;
  *(_OWORD *)(v2 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v3;
  return swift_task_switch(sub_10003ED64, 0LL, 0LL);
}

uint64_t sub_10004B630()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10004B65C(uint64_t a1, int a2, int a3)
{
}

uint64_t sub_10004B668()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004B678()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10004B69C(void *a1)
{
  return sub_10003E158(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_10004B6A8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10004B6B8()
{
  unint64_t result = qword_1004594E0;
  if (!qword_1004594E0)
  {
    uint64_t v1 = sub_10001528C(&qword_1004594D8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, &qword_1004594E0);
  }

  return result;
}

uint64_t sub_10004B708()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1004594EC);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100008210;
  return sub_100007C40();
}

uint64_t sub_10004B74C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10004B758()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1004594FC);
  *(void *)(v0 + 16) = v1;
  void *v1 = v0;
  v1[1] = sub_100008210;
  return sub_100007C40();
}

uint64_t sub_10004B7A0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_10045950C);
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100008210;
  return sub_10003CD8C(a1, v4, v5, v7, v6);
}

uint64_t sub_10004B81C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_10045951C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100008210;
  v3[2] = v2;
  return swift_task_switch(sub_10003AA84, 0LL, 0LL);
}

uint64_t sub_10004B87C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004B8A4(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_10045953C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100007C40;
  void v5[2] = a1;
  void v5[3] = v4;
  return swift_task_switch(sub_100039D04, 0LL, 0LL);
}

uint64_t sub_10004B908(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10045954C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100007C40;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100459548 + dword_100459548))(a1, v4);
}

uint64_t sub_10004B97C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10004B9A8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_10045955C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100008210;
  v3[8] = v2;
  return swift_task_switch(sub_100039058, 0LL, 0LL);
}

uint64_t sub_10004BA08()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004BA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100048744(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_10004BA34()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004BA48()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10045956C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(void *, void *, uint64_t))((char *)&dword_100459568 + dword_100459568))(v2, v3, v4);
}

uint64_t sub_10004BAC0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_100459594);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(uint64_t, void *, uint64_t))((char *)&dword_100459590 + dword_100459590))(v2, v3, v4);
}

uint64_t sub_10004BB34()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004BB70()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc(dword_1004595B4);
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100008210;
  return ((uint64_t (*)(uint64_t, void *, void *, uint64_t))((char *)&dword_1004595B0 + dword_1004595B0))( v2,  v3,  v5,  v4);
}

uint64_t sub_10004BBF4()
{
  char v2 = *(_BYTE *)(v0 + 16);
  uint64_t v4 = *(void **)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_1004595D4);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(char, void *, uint64_t))((char *)&dword_1004595D0 + dword_1004595D0))(v2, v4, v3);
}

uint64_t sub_10004BC70()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1004595FC);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(void *, void *, uint64_t))((char *)&dword_1004595F8 + dword_1004595F8))(v2, v3, v4);
}

uint64_t sub_10004BCE8()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10045961C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(void *, void *, uint64_t))((char *)&dword_100459618 + dword_100459618))(v2, v3, v4);
}

uint64_t sub_10004BD60()
{
  char v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_10045963C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(void *, void *, uint64_t))((char *)&dword_100459638 + dword_100459638))(v2, v3, v4);
}

uint64_t sub_10004BDD4()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10004BE08(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_10045965C);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100008210;
  void v5[2] = a1;
  void v5[3] = v4;
  return swift_task_switch(sub_10003B768, 0LL, 0LL);
}

uint64_t sub_10004BE6C()
{
  _Block_release(*(const void **)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004BEA0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v5 = (const void *)v0[4];
  uint64_t v4 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc(dword_10045966C);
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100008210;
  return ((uint64_t (*)(uint64_t, void *, const void *, uint64_t))((char *)&dword_100459668 + dword_100459668))( v2,  v3,  v5,  v4);
}

uint64_t sub_10004BF20(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = a3(a2);
    uint64_t result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_10004BF60()
{
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10004BF94(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc(dword_10045968C);
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100008210;
  return sub_10003B134(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10004C018()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1004596A4);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(void *, void *, uint64_t))((char *)&dword_1004596A0 + dword_1004596A0))(v2, v3, v4);
}

uint64_t sub_10004C08C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 56));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_10004C0C8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  __int128 v6 = *(_OWORD *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = swift_task_alloc(dword_1004596C4);
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_100008210;
  *(void *)(v4 + 32) = v3;
  *(_OWORD *)(v4 + 16) = v6;
  return swift_task_switch(sub_10003A898, v2, 0LL);
}

uint64_t sub_10004C148()
{
  _Block_release(*(const void **)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10004C17C()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1004596D4);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(void *, void *, uint64_t))((char *)&dword_1004596D0 + dword_1004596D0))(v2, v3, v4);
}

uint64_t sub_10004C1F4()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10004C220()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1004596F4);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100008210;
  return ((uint64_t (*)(uint64_t, void *, uint64_t))((char *)&dword_1004596F0 + dword_1004596F0))(v2, v3, v4);
}

uint64_t sub_10004C298()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004C2CC()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = (void *)swift_task_alloc(dword_100459714);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100008210;
  v3[2] = v2;
  uint64_t v4 = (void *)swift_task_alloc(dword_1004593F4);
  v3[3] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100039A50;
  return sub_10003FF24(v2, v5);
}

uint64_t sub_10004C348()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004C358(void *a1)
{
  return sub_1000396C8(a1, *(_BYTE *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10004C364()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004C374()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

BOOL sub_10004C384(void *a1)
{
  return sub_10003993C(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_10004C38C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004C39C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004C3AC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1000398D0(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_10004C3B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004C3C8()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_100459724);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100008210;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_100459720 + dword_100459720))(v2, v3);
}

uint64_t sub_10004C438()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004C464()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_100459744);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100008210;
  return ((uint64_t (*)(const void *, uint64_t))((char *)&dword_100459740 + dword_100459740))(v2, v3);
}

id sub_10004C584()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for CrashCoordinator()) init];
  qword_100462900 = (uint64_t)result;
  return result;
}

id sub_10004C5F0(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id result = [a1 error];
  if (result)
  {
    uint64_t v7 = result;
    static Logger.appUsage.getter(result);
    id v8 = v7;
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      uint64_t v17 = swift_slowAlloc(96LL, -1LL);
      uint64_t v21 = v17;
      *(_DWORD *)uint64_t v11 = 136315650;
      uint64_t v20 = sub_100088DB4(0xD000000000000020LL, 0x80000001003443D0LL, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4, v11 + 12);
      *(_WORD *)(v11 + 12) = 2080;
      uint64_t v20 = sub_100088DB4(0xD000000000000022LL, 0x8000000100344400LL, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 14, v11 + 22);
      *(_WORD *)(v11 + 22) = 2080;
      swift_getErrorValue(v8, v19, v18);
      uint64_t v12 = Error.localizedDescription.getter(v18[1], v18[2]);
      unint64_t v14 = v13;
      uint64_t v20 = sub_100088DB4(v12, v13, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 24, v11 + 32);

      swift_bridgeObjectRelease(v14);
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "%s:%s: Biome query completed with error - %s",  (uint8_t *)v11,  0x20u);
      uint64_t v15 = v17;
      swift_arrayDestroy(v17, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    else
    {
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return result;
}

id sub_10004C864(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  id v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  os_log_type_t v10 = (char *)&v49 - v9;
  id result = [a1 eventBody];
  if (result)
  {
    uint64_t v12 = result;
    Date.init(timeIntervalSinceReferenceDate:)([a1 timestamp]);
    id v13 = [v12 bundleID];
    if (v13)
    {
      unint64_t v14 = v13;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v55 = v16;
      uint64_t v56 = v15;

      id v17 = [v12 appVersion];
      if (v17)
      {
        uint64_t v18 = v17;
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
        uint64_t v53 = v20;
        uint64_t v54 = v19;
      }

      else
      {
        uint64_t v53 = 0LL;
        uint64_t v54 = 0LL;
      }

      id v21 = [v12 bundleVersion];
      if (v21)
      {
        NSString v22 = v21;
        uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
        uint64_t v51 = v24;
        uint64_t v52 = v23;
      }

      else
      {
        uint64_t v51 = 0LL;
        uint64_t v52 = 0LL;
      }

      char v25 = (void *)(a2 + 16);
      uint64_t v57 = v5;
      uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v26(v8, v10, v4);
      id v27 = [v12 incidentID];
      if (v27)
      {
        uint64_t v28 = v27;
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
        uint64_t v49 = v30;
        uint64_t v50 = v29;
      }

      else
      {
        uint64_t v49 = 0LL;
        uint64_t v50 = 0LL;
      }

      unsigned __int8 v31 = objc_msgSend(v12, "isBeta", v49, v50);
      unsigned __int8 v32 = [v12 isFirstParty];
      uint64_t v33 = (objc_class *)type metadata accessor for CrashEvent(0LL);
      uint64_t v34 = objc_allocWithZone(v33);
      uint64_t v35 = (uint64_t *)&v34[OBJC_IVAR____TtC9appstored10CrashEvent_appVersion];
      uint64_t v36 = v53;
      *uint64_t v35 = v54;
      v35[1] = v36;
      char v37 = (uint64_t *)&v34[OBJC_IVAR____TtC9appstored10CrashEvent_bundleID];
      uint64_t v38 = v55;
      *char v37 = v56;
      v37[1] = v38;
      uint64_t v39 = (uint64_t *)&v34[OBJC_IVAR____TtC9appstored10CrashEvent_bundleVersion];
      uint64_t v40 = v51;
      *uint64_t v39 = v52;
      v39[1] = v40;
      v26(&v34[OBJC_IVAR____TtC9appstored10CrashEvent_date], v8, v4);
      __int128 v41 = (uint64_t *)&v34[OBJC_IVAR____TtC9appstored10CrashEvent_incidentID];
      uint64_t v42 = v49;
      uint64_t *v41 = v50;
      v41[1] = v42;
      v34[OBJC_IVAR____TtC9appstored10CrashEvent_isBeta] = v31;
      v34[OBJC_IVAR____TtC9appstored10CrashEvent_isSystem] = v32;
      v59.receiver = v34;
      v59.super_class = v33;
      id v43 = objc_msgSendSuper2(&v59, "init");
      uint64_t v44 = *(void (**)(char *, uint64_t))(v57 + 8);
      v44(v8, v4);
      swift_beginAccess(v25, v58, 33LL, 0LL);
      id v45 = v43;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v45);
      unint64_t v47 = *(void *)((*v25 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v46 = *(void *)((*v25 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v47 >= v46 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1LL);
      }
      uint64_t v48 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v45);
      specialized Array._endMutation()(v48);
      swift_endAccess(v58);

      return (id)((uint64_t (*)(char *, uint64_t))v44)(v10, v4);
    }

    else
    {

      return (id)(*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
  }

  return result;
}

void sub_10004CB98(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  v4();
  swift_release(v3);
}

id sub_10004CD20()
{
  uint64_t v1 = OBJC_IVAR____TtC9appstored16CrashCoordinator_appCrashStream;
  uint64_t v2 = v0;
  id v3 = (id)BiomeLibrary(v2);
  id v4 = [v3 OSAnalytics];
  swift_unknownObjectRelease(v3);
  id v5 = [v4 Stability];
  swift_unknownObjectRelease(v4);
  id v6 = [v5 Crash];
  swift_unknownObjectRelease(v5);
  *(void *)&v0[v1] = v6;

  v8.receiver = v2;
  v8.super_class = (Class)type metadata accessor for CrashCoordinator();
  return objc_msgSendSuper2(&v8, "init");
}

uint64_t sub_10004CDF8(void *a1, uint64_t a2, const void *a3, void *a4)
{
  void v4[2] = a1;
  void v4[3] = a4;
  uint64_t v9 = type metadata accessor for Date(0LL);
  void v4[4] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[5] = v10;
  uint64_t v11 = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v4[6] = v11;
  v4[7] = _Block_copy(a3);
  static Date._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v12 = unk_1004597F4;
  uint64_t v16 = (uint64_t (*)(uint64_t))((char *)&dword_1004597F0 + dword_1004597F0);
  id v13 = a1;
  a4;
  unint64_t v14 = (void *)swift_task_alloc(v12);
  void v4[8] = v14;
  void *v14 = v4;
  v14[1] = sub_10004CECC;
  return v16(v11);
}

uint64_t sub_10004CECC(uint64_t a1)
{
  id v3 = *(void (***)(void, void))(*v1 + 56);
  uint64_t v5 = *(void *)(*v1 + 40);
  uint64_t v4 = *(void *)(*v1 + 48);
  uint64_t v7 = *(void **)(*v1 + 24);
  uint64_t v6 = *(void *)(*v1 + 32);
  objc_super v8 = *(void **)(*v1 + 16);
  uint64_t v11 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 64));

  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  type metadata accessor for CrashEvent(0LL);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  ((void (**)(void, Class))v3)[2](v3, isa);

  _Block_release(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v11 + 8))();
}

id sub_10004CFB8(uint64_t a1)
{
  return sub_100034AC8(a1, type metadata accessor for CrashCoordinator);
}

uint64_t type metadata accessor for CrashCoordinator()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored16CrashCoordinator);
}

id sub_10004D08C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1 + *a3;
  uint64_t v4 = *(void *)(v3 + 8);
  if (v4)
  {
    swift_bridgeObjectRetain(*(void *)(v3 + 8));
    NSString v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
  }

  else
  {
    NSString v5 = 0LL;
  }

  return v5;
}

id sub_10004D130()
{
  return sub_100034AC8(0LL, (uint64_t (*)(void))type metadata accessor for CrashEvent);
}

uint64_t sub_10004D1D0()
{
  return type metadata accessor for CrashEvent(0LL);
}

uint64_t type metadata accessor for CrashEvent(uint64_t a1)
{
  uint64_t result = qword_1004597D0;
  if (!qword_1004597D0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CrashEvent);
  }
  return result;
}

uint64_t sub_10004D214(uint64_t a1)
{
  v4[0] = &unk_100373C60;
  v4[1] = &unk_100373C78;
  void v4[2] = &unk_100373C60;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    void v4[4] = &unk_100373C60;
    v4[5] = &unk_100373C90;
    v4[6] = &unk_100373C90;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_10004D2A4()
{
  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10004D2E0()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = v0[3];
  NSString v5 = (const void *)v0[4];
  uint64_t v4 = (void *)v0[5];
  uint64_t v6 = (void *)swift_task_alloc(dword_1004597E4);
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100007C40;
  return ((uint64_t (*)(void *, uint64_t, const void *, void *))((char *)&dword_1004597E0 + dword_1004597E0))( v2,  v3,  v5,  v4);
}

uint64_t sub_10004D360(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  unint64_t v3 = (*(void *)(*(void *)(sub_1000079A0((uint64_t *)&unk_100459410) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[19] = swift_task_alloc(v3);
  v2[20] = swift_task_alloc(v3);
  return swift_task_switch(sub_10004D3CC, 0LL, 0LL);
}

uint64_t sub_10004D3CC()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[17];
  uint64_t v4 = v0[18];
  sub_10004D600();
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, v3, v5);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v7(v2, 0LL, 1LL, v5);
  v7(v1, 1LL, 1LL, v5);
  id v8 = sub_100074E00(v2, v1, 5000LL, 1000LL, 0);
  id v9 =  [*(id *)(v4 + OBJC_IVAR____TtC9appstored16CrashCoordinator_appCrashStream) publisherWithOptions:v8];
  uint64_t v10 = swift_allocObject(&unk_1003DED10, 24LL, 7LL);
  *(void *)(v10 + 16) = _swiftEmptyArrayStorage;
  v0[6] = sub_10004C5F0;
  v0[7] = 0LL;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256LL;
  v0[4] = sub_100074F10;
  v0[5] = &unk_1003DED28;
  uint64_t v11 = _Block_copy(v0 + 2);
  v0[12] = sub_10004D678;
  v0[13] = v10;
  v0[8] = _NSConcreteStackBlock;
  v0[9] = 1107296256LL;
  v0[10] = sub_10004CB98;
  v0[11] = &unk_1003DED50;
  uint64_t v12 = _Block_copy(v0 + 8);
  uint64_t v13 = v0[13];
  swift_retain(v10);
  swift_release(v13);
  id v14 = [v9 sinkWithCompletion:v11 receiveInput:v12];

  _Block_release(v12);
  _Block_release(v11);

  swift_beginAccess(v10 + 16, v0 + 14, 0LL, 0LL);
  uint64_t v15 = *(void *)(v10 + 16);
  swift_bridgeObjectRetain(v15);
  swift_release(v10);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return ((uint64_t (*)(uint64_t))v0[1])(v15);
}

unint64_t sub_10004D600()
{
  unint64_t result = qword_1004597F8;
  if (!qword_1004597F8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___BMPublisherOptions);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004597F8);
  }

  return result;
}

uint64_t sub_10004D63C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10004D660(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004D670(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

id sub_10004D678(void *a1)
{
  return sub_10004C864(a1, v1);
}

BOOL static ASDInstallAttributionVersion.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

unint64_t sub_10004D698()
{
  unint64_t result = qword_100459800;
  if (!qword_100459800)
  {
    type metadata accessor for ASDInstallAttributionVersion(255LL);
    unint64_t result = swift_getWitnessTable(&unk_100372184, v1);
    atomic_store(result, (unint64_t *)&qword_100459800);
  }

  return result;
}

BOOL sub_10004D6E0(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_10004D6F4(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10004D708(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10004D71C(void *a1, void *a2)
{
  return *a2 < *a1;
}

id sub_10004D730(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = type metadata accessor for Locale(0LL);
  uint64_t v4 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1000079A0(&qword_100459808);
  uint64_t v23 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  id v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1000079A0(&qword_100459810);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = [objc_allocWithZone(NSNumberFormatter) init];
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 numberFromString:v14];

  if (v15)
  {
    swift_bridgeObjectRelease(a2);
  }

  else
  {
    v24[0] = a1;
    v24[1] = a2;
    Locale.init(identifier:)(0x4F505F53555F6E65LL, 0xEB00000000584953LL);
    static RegexComponent<>.localizedInteger(locale:)(v6);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v22);
    unint64_t v16 = sub_10004D9AC();
    unint64_t v17 = sub_10004D9F0();
    BidirectionalCollection<>.firstMatch<A, B>(of:)(v9, &type metadata for String, &type metadata for Int, v7, v16, v17);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
    swift_bridgeObjectRelease(a2);
    uint64_t v18 = sub_1000079A0(&qword_100459828);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v12, 1LL, v18) == 1)
    {
      sub_10004DA3C((uint64_t)v12);
      return 0LL;
    }

    else
    {
      Regex.Match.output.getter(v24, v18);
      uint64_t v20 = v24[0];
      (*(void (**)(char *, uint64_t))(v19 + 8))(v12, v18);
      return [objc_allocWithZone(NSNumber) initWithInteger:v20];
    }
  }

  return v15;
}

unint64_t sub_10004D9AC()
{
  unint64_t result = qword_100459818;
  if (!qword_100459818)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100459818);
  }

  return result;
}

unint64_t sub_10004D9F0()
{
  unint64_t result = qword_100459820;
  if (!qword_100459820)
  {
    uint64_t v1 = sub_10001528C(&qword_100459808);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for IntegerFormatStyle<A>, v1);
    atomic_store(result, (unint64_t *)&qword_100459820);
  }

  return result;
}

uint64_t sub_10004DA3C(uint64_t a1)
{
  uint64_t v2 = sub_1000079A0(&qword_100459810);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10004DA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004DAB8(a1, a2, a3, (uint64_t)&unk_1003DEDE8, (uint64_t)&type metadata for () + 8, (uint64_t)&unk_100459470);
}

uint64_t sub_10004DA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10004DAB8(a1, a2, a3, (uint64_t)&unk_1003DEE10, (uint64_t)&type metadata for Int, (uint64_t)&unk_100459550);
}

uint64_t sub_10004DAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for TaskPriority(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a1, 1LL, v12) == 1)
  {
    sub_100015240(a1, &qword_100458488);
    uint64_t v15 = 7168LL;
    uint64_t v16 = *(void *)(a3 + 16);
    if (v16)
    {
LABEL_3:
      uint64_t v17 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v16, v14);
      swift_unknownObjectRetain(v16);
      uint64_t v19 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      uint64_t v21 = v20;
      swift_unknownObjectRelease(v16);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v22 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
    uint64_t v15 = v22 | 0x1C00LL;
    uint64_t v16 = *(void *)(a3 + 16);
    if (v16) {
      goto LABEL_3;
    }
  }

  uint64_t v19 = 0LL;
  uint64_t v21 = 0LL;
LABEL_6:
  uint64_t v23 = swift_allocObject(a4, 32LL, 7LL);
  *(void *)(v23 + 16) = a2;
  *(void *)(v23 + 24) = a3;
  if (v21 | v19)
  {
    v26[0] = 0LL;
    v26[1] = 0LL;
    uint64_t v24 = v26;
    v26[2] = v19;
    v26[3] = v21;
  }

  else
  {
    uint64_t v24 = 0LL;
  }

  return swift_task_create(v15, v24, a5, a6, v23);
}

id sub_10004DDAC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MetricsBridge();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MetricsBridge()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored13MetricsBridge);
}

uint64_t sub_10004DDFC(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10004DE60;
  return v6(a1);
}

uint64_t sub_10004DE60()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_10004DEAC(void *a1)
{
  uint64_t v2 = sub_1000079A0(&qword_100458488);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v5 = type metadata accessor for Metrics();
    id v6 = a1;
    uint64_t inited = swift_initStaticObject(v5, &unk_1004580C8);
    v13[3] = type metadata accessor for AppInstallationEvent();
    v13[4] = sub_10004F998();
    v13[0] = v6;
    uint64_t v8 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v4, 1LL, 1LL, v8);
    sub_10004F9E0((uint64_t)v13, (uint64_t)v12);
    id v9 = (void *)swift_allocObject(&unk_1003DEDC0, 80LL, 7LL);
    v9[2] = 0LL;
    v9[3] = 0LL;
    v9[4] = inited;
    sub_10004FA58(v12, (uint64_t)(v9 + 5));
    id v10 = v6;
    uint64_t v11 = sub_10004DAB8( (uint64_t)v4,  (uint64_t)&unk_100459868,  (uint64_t)v9,  (uint64_t)&unk_1003DEDE8,  (uint64_t)&type metadata for () + 8,  (uint64_t)&unk_100459470);
    swift_release(v11);
    sub_100015340(v13);
  }

void sub_10004E000()
{
}

id sub_10004E650(void *a1)
{
  uint64_t v2 = sub_1000079A0((uint64_t *)&unk_100459B80);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v57 - v6;
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v57 - v13;
  id result = [a1 loadURLEventDictionary];
  if (!result) {
    return result;
  }
  uint64_t v16 = result;
  uint64_t v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( result,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  sub_10004E000();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease(v17);
  uint64_t v63 = v19;
  id v20 = [a1 URLResponse];
  if (v20)
  {
    uint64_t v21 = v20;
    id v22 = [v20 URL];

    if (v22)
    {
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v22);

      uint64_t v23 = 0LL;
    }

    else
    {
      uint64_t v23 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5, v23, 1LL, v8);
    sub_100026CD4((uint64_t)v5, (uint64_t)v7, (uint64_t *)&unk_100459B80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v14, v7, v8);
      *(void *)&__int128 v60 = 0x5574736575716572LL;
      *((void *)&v60 + 1) = 0xEA00000000006C72LL;
      AnyHashable.init<A>(_:)(&v60, &type metadata for String, &protocol witness table for String);
      URL._bridgeToObjectiveC()(v24);
      uint64_t v26 = v25;
      id v27 = sub_1001ED0B4(v25);

      static URL._unconditionallyBridgeFromObjectiveC(_:)(v27);
      uint64_t v28 = URL.absoluteString.getter();
      uint64_t v30 = v29;
      unsigned __int8 v31 = *(void (**)(char *, uint64_t))(v9 + 8);
      v31(v12, v8);
      uint64_t v61 = &type metadata for String;
      *(void *)&__int128 v60 = v28;
      *((void *)&v60 + 1) = v30;
      sub_100015330(&v60, v59);
      uint64_t v32 = v63;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v63);
      uint64_t v58 = v32;
      sub_100079A94(v59, (uint64_t)v62, isUniquelyReferenced_nonNull_native);
      uint64_t v63 = v58;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_100026A3C((uint64_t)v62);
      v31(v14, v8);
      goto LABEL_10;
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1LL, 1LL, v8);
  }

  sub_100015240((uint64_t)v7, (uint64_t *)&unk_100459B80);
LABEL_10:
  id v34 = [a1 URLResponse];
  if (v34)
  {
    uint64_t v35 = v34;
    uint64_t v36 = objc_opt_self(&OBJC_CLASS___NSHTTPURLResponse);
    uint64_t v37 = swift_dynamicCastObjCClass(v35, v36);
    if (v37)
    {
      uint64_t v38 = (void *)v37;
      *(void *)&__int128 v60 = 0xD000000000000010LL;
      *((void *)&v60 + 1) = 0x8000000100344470LL;
      AnyHashable.init<A>(_:)(&v60, &type metadata for String, &protocol witness table for String);
      NSString v39 = String._bridgeToObjectiveC()();
      id v40 = [v38 valueForHTTPHeaderField:v39];

      if (v40)
      {
        uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        uint64_t v43 = v42;

        uint64_t v61 = &type metadata for String;
        *(void *)&__int128 v60 = v41;
        *((void *)&v60 + 1) = v43;
        sub_100015330(&v60, v59);
        uint64_t v44 = v63;
        char v45 = swift_isUniquelyReferenced_nonNull_native(v63);
        uint64_t v58 = v44;
        sub_100079A94(v59, (uint64_t)v62, v45);
        uint64_t v63 = v58;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_100026A3C((uint64_t)v62);
      }

      else
      {
        sub_100067CD8((uint64_t)v62, &v60);
        sub_100026A3C((uint64_t)v62);
        sub_100015240((uint64_t)&v60, (uint64_t *)&unk_1004594B0);
      }
    }
  }

  id v46 = [a1 purchase];
  if (v46)
  {
    unint64_t v47 = v46;
    id v48 = [v46 additionalHeaders];

    if (v48)
    {
      uint64_t v49 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v48,  &type metadata for String,  &type metadata for String,  &protocol witness table for String);

      if (*(void *)(v49 + 16) && (unint64_t v50 = sub_100023F7C(0x6567412D72657355LL, 0xEA0000000000746ELL), (v51 & 1) != 0))
      {
        uint64_t v52 = (uint64_t *)(*(void *)(v49 + 56) + 16 * v50);
        uint64_t v54 = *v52;
        uint64_t v53 = v52[1];
        swift_bridgeObjectRetain(v53);
        swift_bridgeObjectRelease(v49);
        *(void *)&__int128 v60 = 0x6E65674172657375LL;
        *((void *)&v60 + 1) = 0xE900000000000074LL;
        AnyHashable.init<A>(_:)(&v60, &type metadata for String, &protocol witness table for String);
        uint64_t v61 = &type metadata for String;
        *(void *)&__int128 v60 = v54;
        *((void *)&v60 + 1) = v53;
        sub_100015330(&v60, v59);
        uint64_t v55 = v63;
        char v56 = swift_isUniquelyReferenced_nonNull_native(v63);
        uint64_t v58 = v55;
        sub_100079A94(v59, (uint64_t)v62, v56);
        uint64_t v63 = v58;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        sub_100026A3C((uint64_t)v62);
      }

      else
      {
        swift_bridgeObjectRelease(v49);
      }
    }
  }

  return (id)v63;
}

void sub_10004EC00(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1000079A0((uint64_t *)&unk_100459B80);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v121 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  id v124 = (char *)&v116 - v12;
  __chkstk_darwin(v11);
  uint64_t v126 = (char *)&v116 - v13;
  uint64_t v14 = type metadata accessor for URL(0LL);
  uint64_t v127 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v122 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  Class v123 = (char *)&v116 - v17;
  uint64_t v18 = sub_1000079A0(&qword_100459858);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v125 = (char *)&v116 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v116 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v116 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v116 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)&v116 - v31;
  __chkstk_darwin(v30);
  id v34 = (char *)&v116 - v33;
  if (!a2) {
    return;
  }
  uint64_t v119 = v14;
  id v35 = objc_allocWithZone(&OBJC_CLASS___AMSMetricsLoadURLContext);
  id v120 = a2;
  id v36 = objc_msgSend(v35, "initWithTask:metrics:", a1);
  uint64_t v37 = objc_opt_self(&OBJC_CLASS___URLBag);
  id v38 = sub_100255630(v37);
  [v36 setBag:v38];

  if (a3) {
    NSString v39 = (void *)_convertErrorToNSError(_:)(a3);
  }
  else {
    NSString v39 = 0LL;
  }
  [v36 setError:v39];

  [v36 setSession:a4];
  id v40 = objc_allocWithZone(&OBJC_CLASS___AMSMetricsLoadURLEvent);
  id v118 = v36;
  id v117 = [v40 initWithContext:v36];
  id v41 = [v117 dictionaryForPosting];
  uint64_t v42 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v41,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

  sub_10004E000();
  uint64_t v44 = v43;
  swift_bridgeObjectRelease(v42);
  uint64_t v134 = v44;
  v131.value._countAndFlagsBits = 0x6E65674172657375LL;
  v131.value._object = (void *)0xE900000000000074LL;
  AnyHashable.init<A>(_:)(&v131, &type metadata for String, &protocol witness table for String);
  id v45 = [a1 currentRequest];
  if (v45)
  {
    id v46 = v45;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v45);

    uint64_t v47 = type metadata accessor for URLRequest(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))(v32, 0LL, 1LL, v47);
  }

  else
  {
    uint64_t v47 = type metadata accessor for URLRequest(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56LL))(v32, 1LL, 1LL, v47);
  }

  sub_100026CD4((uint64_t)v32, (uint64_t)v34, &qword_100459858);
  type metadata accessor for URLRequest(0LL);
  uint64_t v48 = *(void *)(v47 - 8);
  uint64_t v128 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48);
  if (v128(v34, 1LL, v47) == 1)
  {
    sub_100015240((uint64_t)v34, &qword_100459858);
  }

  else
  {
    v49._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(AMSHTTPHeaderUserAgent);
    object = v49._object;
    Swift::String_optional v51 = URLRequest.value(forHTTPHeaderField:)(v49);
    swift_bridgeObjectRelease(object);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v34, v47);
    if (v51.value._object)
    {
      *((void *)&v132 + 1) = &type metadata for String;
      Swift::String_optional v131 = v51;
      sub_100015330(&v131, v130);
      uint64_t v52 = v134;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v134);
      uint64_t v129 = v52;
      sub_100079A94(v130, (uint64_t)v133, isUniquelyReferenced_nonNull_native);
      uint64_t v134 = v129;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_100026A3C((uint64_t)v133);
      goto LABEL_14;
    }
  }

  sub_100067CD8((uint64_t)v133, &v131);
  sub_100026A3C((uint64_t)v133);
  sub_100015240((uint64_t)&v131, (uint64_t *)&unk_1004594B0);
LABEL_14:
  id v54 = [a1 currentRequest];
  if (v54)
  {
    uint64_t v55 = v54;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v54);

    char v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56);
    v56(v26, 0LL, 1LL, v47);
  }

  else
  {
    char v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56);
    v56(v26, 1LL, 1LL, v47);
  }

  sub_100026CD4((uint64_t)v26, (uint64_t)v29, &qword_100459858);
  if (v128(v29, 1LL, v47) == 1)
  {
    sub_100015240((uint64_t)v29, &qword_100459858);
  }

  else
  {
    v57._countAndFlagsBits = 0xD000000000000013LL;
    v57._object = (void *)0x80000001003444B0LL;
    Swift::String_optional v58 = URLRequest.value(forHTTPHeaderField:)(v57);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v29, v47);
    if (v58.value._object)
    {
      v131.value._countAndFlagsBits = 0xD000000000000010LL;
      v131.value._object = (void *)0x8000000100344470LL;
      AnyHashable.init<A>(_:)(&v131, &type metadata for String, &protocol witness table for String);
      *((void *)&v132 + 1) = &type metadata for String;
      Swift::String_optional v131 = v58;
      sub_100015330(&v131, v130);
      uint64_t v59 = v134;
      char v60 = swift_isUniquelyReferenced_nonNull_native(v134);
      uint64_t v129 = v59;
      sub_100079A94(v130, (uint64_t)v133, v60);
      uint64_t v134 = v129;
      swift_bridgeObjectRelease(0x8000000000000000LL);
      sub_100026A3C((uint64_t)v133);
      uint64_t v61 = v119;
      uint64_t v63 = (uint64_t)v126;
      uint64_t v62 = v127;
      uint64_t v64 = (uint64_t)v125;
      goto LABEL_29;
    }
  }

  v131.value._countAndFlagsBits = 0xD000000000000010LL;
  v131.value._object = (void *)0x8000000100344470LL;
  AnyHashable.init<A>(_:)(&v131, &type metadata for String, &protocol witness table for String);
  id v65 = [a1 response];
  uint64_t v64 = (uint64_t)v125;
  if (!v65) {
    goto LABEL_27;
  }
  uint64_t v66 = v65;
  id v67 = [v65 _allHTTPHeaderFieldsAsArrays];

  if (!v67) {
    goto LABEL_27;
  }
  uint64_t v68 = sub_1000079A0(&qword_1004594D8);
  uint64_t v69 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v67,  &type metadata for String,  v68,  &protocol witness table for String);

  if (!*(void *)(v69 + 16) || (unint64_t v70 = sub_100023F7C(0xD00000000000001BLL, 0x8000000100344490LL), (v71 & 1) == 0))
  {
    swift_bridgeObjectRelease(v69);
LABEL_27:
    sub_100067CD8((uint64_t)v133, &v131);
    sub_100026A3C((uint64_t)v133);
    sub_100015240((uint64_t)&v131, (uint64_t *)&unk_1004594B0);
    goto LABEL_28;
  }

  uint64_t v72 = *(void *)(*(void *)(v69 + 56) + 8 * v70);
  swift_bridgeObjectRetain(v72);
  swift_bridgeObjectRelease(v69);
  *((void *)&v132 + 1) = v68;
  v131.value._countAndFlagsBits = v72;
  sub_100015330(&v131, v130);
  uint64_t v73 = v134;
  char v74 = swift_isUniquelyReferenced_nonNull_native(v134);
  uint64_t v129 = v73;
  sub_100079A94(v130, (uint64_t)v133, v74);
  uint64_t v134 = v129;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  sub_100026A3C((uint64_t)v133);
LABEL_28:
  uint64_t v61 = v119;
  uint64_t v63 = (uint64_t)v126;
  uint64_t v62 = v127;
LABEL_29:
  id v75 = [a1 currentRequest];
  if (v75)
  {
    uint64_t v76 = v75;
    static URLRequest._unconditionallyBridgeFromObjectiveC(_:)(v75);

    uint64_t v77 = 0LL;
  }

  else
  {
    uint64_t v77 = 1LL;
  }

  v56((char *)v64, v77, 1LL, v47);
  sub_100026CD4(v64, (uint64_t)v23, &qword_100459858);
  if (v128(v23, 1LL, v47) == 1)
  {
    sub_100015240((uint64_t)v23, &qword_100459858);
    uint64_t v78 = (uint64_t)v124;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v124, 1LL, 1LL, v61);
    uint64_t v79 = v120;
  }

  else
  {
    uint64_t v78 = (uint64_t)v124;
    URLRequest.url.getter();
    (*(void (**)(char *, uint64_t))(v48 + 8))(v23, v47);
    uint64_t v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
    int v81 = v80(v78, 1LL, v61);
    uint64_t v79 = v120;
    if (v81 != 1)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v62 + 32))(v63, v78, v61);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v63, 0LL, 1LL, v61);
      goto LABEL_43;
    }
  }

  id v82 = [a1 response];
  if (v82)
  {
    os_log_type_t v83 = v82;
    id v84 = [v82 URL];

    if (v84)
    {
      uint64_t v85 = (uint64_t)v121;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v84);

      uint64_t v86 = 0LL;
    }

    else
    {
      uint64_t v86 = 1LL;
      uint64_t v85 = (uint64_t)v121;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v85, v86, 1LL, v61);
    sub_100026CD4(v85, v63, (uint64_t *)&unk_100459B80);
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v62 + 56))(v63, 1LL, 1LL, v61);
  }

  sub_100015240(v78, (uint64_t *)&unk_100459B80);
  uint64_t v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48);
LABEL_43:
  if (v80(v63, 1LL, v61) == 1)
  {
    sub_100015240(v63, (uint64_t *)&unk_100459B80);
  }

  else
  {
    id v87 = v123;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 32))(v123, v63, v61);
    v131.value._countAndFlagsBits = 0x5574736575716572LL;
    v131.value._object = (void *)0xEA00000000006C72LL;
    AnyHashable.init<A>(_:)(&v131, &type metadata for String, &protocol witness table for String);
    URL._bridgeToObjectiveC()(v88);
    uint64_t v90 = v89;
    id v91 = sub_1001ED0B4(v89);

    unint64_t v92 = v122;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v91);

    uint64_t v93 = URL.absoluteString.getter();
    unint64_t v95 = v94;
    id v96 = *(void (**)(char *, uint64_t))(v62 + 8);
    v96(v92, v61);
    *((void *)&v132 + 1) = &type metadata for String;
    v131.value._countAndFlagsBits = v93;
    v131.value._object = v95;
    sub_100015330(&v131, v130);
    uint64_t v97 = v134;
    char v98 = swift_isUniquelyReferenced_nonNull_native(v134);
    uint64_t v129 = v97;
    sub_100079A94(v130, (uint64_t)v133, v98);
    uint64_t v134 = v129;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_100026A3C((uint64_t)v133);
    v96(v87, v61);
  }

  v131.value._countAndFlagsBits = 0x506B726F7774656ELL;
  v131.value._object = (void *)0xEF6C6F636F746F72LL;
  AnyHashable.init<A>(_:)(&v131, &type metadata for String, &protocol witness table for String);
  uint64_t v99 = v134;
  if (*(void *)(v134 + 16) && (unint64_t v100 = sub_1000240BC((uint64_t)v133), (v101 & 1) != 0))
  {
    sub_100016B10(*(void *)(v99 + 56) + 32 * v100, (uint64_t)&v131);
  }

  else
  {
    Swift::String_optional v131 = (Swift::String_optional)0;
    __int128 v132 = 0u;
  }

  sub_100026A3C((uint64_t)v133);
  uint64_t v102 = *((void *)&v132 + 1);
  sub_100015240((uint64_t)&v131, (uint64_t *)&unk_1004594B0);
  if (v102) {
    goto LABEL_51;
  }
  id v103 = [v79 transactionMetrics];
  unint64_t v104 = sub_10004F95C();
  uint64_t v105 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v103, v104);

  if ((unint64_t)v105 >> 62)
  {
    if (v105 < 0) {
      uint64_t v114 = v105;
    }
    else {
      uint64_t v114 = v105 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v105);
    uint64_t v115 = _CocoaArrayWrapper.endIndex.getter(v114);
    swift_bridgeObjectRelease(v105);
    if (v115) {
      goto LABEL_54;
    }
LABEL_64:

    swift_bridgeObjectRelease(v105);
    return;
  }

  if (!*(void *)((v105 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
    goto LABEL_64;
  }
LABEL_54:
  if ((v105 & 0xC000000000000001LL) != 0)
  {
    id v106 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v105);
  }

  else
  {
    if (!*(void *)((v105 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      __break(1u);
      return;
    }

    id v106 = *(id *)(v105 + 32);
  }

  uint64_t v107 = v106;
  swift_bridgeObjectRelease(v105);
  id v108 = [v107 networkProtocolName];

  if (v108)
  {
    uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
    uint64_t v111 = v110;

    v131.value._countAndFlagsBits = 0x506B726F7774656ELL;
    v131.value._object = (void *)0xEF6C6F636F746F72LL;
    AnyHashable.init<A>(_:)(&v131, &type metadata for String, &protocol witness table for String);
    *((void *)&v132 + 1) = &type metadata for String;
    v131.value._countAndFlagsBits = v109;
    v131.value._object = v111;
    sub_100015330(&v131, v130);
    uint64_t v112 = v134;
    char v113 = swift_isUniquelyReferenced_nonNull_native(v134);
    uint64_t v129 = v112;
    sub_100079A94(v130, (uint64_t)v133, v113);
    uint64_t v134 = v129;
    swift_bridgeObjectRelease(0x8000000000000000LL);
    sub_100026A3C((uint64_t)v133);
LABEL_51:

    return;
  }
}

unint64_t sub_10004F95C()
{
  unint64_t result = qword_100458C70;
  if (!qword_100458C70)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSURLSessionTaskTransactionMetrics);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100458C70);
  }

  return result;
}

unint64_t sub_10004F998()
{
  unint64_t result = qword_100459860;
  if (!qword_100459860)
  {
    uint64_t v1 = type metadata accessor for AppInstallationEvent();
    unint64_t result = swift_getWitnessTable(&unk_100374124, v1);
    atomic_store(result, (unint64_t *)&qword_100459860);
  }

  return result;
}

uint64_t sub_10004F9E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10004FA24()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_10004FA58(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10004FA70(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_10045A1CC);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100007C40;
  return sub_10006E134(a1, v4, v5, v6, (uint64_t)(v1 + 5));
}

uint64_t sub_10004FAEC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10004FB88(uint64_t a1)
{
  uint64_t v2 = String.init(cString:)(XPC_ACTIVITY_PRIORITY_UTILITY);
  uint64_t v4 = v3;
  if (qword_100458018 != -1) {
    swift_once(&qword_100458018, sub_1000194F8);
  }
  __int128 v5 = xmmword_100458B40;
  swift_bridgeObjectRetain(*((void *)&xmmword_100458B40 + 1));
  uint64_t result = XPCDictionary.subscript.setter(v2, v4, v5, *((void *)&v5 + 1));
  uint64_t v7 = 15LL;
  if (*(void *)(v1 + OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_syncIntervalMinutes) > 0xFuLL) {
    uint64_t v7 = *(void *)(v1 + OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_syncIntervalMinutes);
  }
  if (v7 < 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  if ((unsigned __int128)(XPC_ACTIVITY_INTERVAL_1_MIN * (__int128)v7) >> 64 != (XPC_ACTIVITY_INTERVAL_1_MIN * v7) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  __int128 v8 = xmmword_100458B00;
  int64_t v23 = XPC_ACTIVITY_INTERVAL_1_MIN * v7;
  char v24 = 0;
  unint64_t v9 = sub_100036C10();
  swift_bridgeObjectRetain(*((void *)&v8 + 1));
  uint64_t result = XPCDictionary.subscript.setter(&v23, v8, *((void *)&v8 + 1), &type metadata for Int64, v9);
  uint64_t v10 = *(void *)(v1 + OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_syncGracePeriodMinutes);
  if (v10 < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }

  if ((unsigned __int128)(XPC_ACTIVITY_INTERVAL_1_MIN * (__int128)v10) >> 64 == (XPC_ACTIVITY_INTERVAL_1_MIN * v10) >> 63)
  {
    uint64_t v11 = qword_100458B30;
    uint64_t v12 = unk_100458B38;
    int64_t v23 = XPC_ACTIVITY_INTERVAL_1_MIN * v10;
    char v24 = 0;
    swift_bridgeObjectRetain(unk_100458B38);
    XPCDictionary.subscript.setter(&v23, v11, v12, &type metadata for Int64, v9);
    uint64_t v13 = qword_100458B10;
    uint64_t v14 = unk_100458B18;
    swift_bridgeObjectRetain(unk_100458B18);
    XPCDictionary.subscript.setter(1LL, v13, v14);
    uint64_t v15 = qword_100458B70;
    uint64_t v16 = unk_100458B78;
    swift_bridgeObjectRetain(unk_100458B78);
    XPCDictionary.subscript.setter(1LL, v15, v16);
    __int128 v17 = xmmword_100458B80;
    swift_bridgeObjectRetain(*((void *)&xmmword_100458B80 + 1));
    XPCDictionary.subscript.setter(0LL, v17, *((void *)&v17 + 1));
    uint64_t v18 = qword_100458B90;
    uint64_t v19 = unk_100458B98;
    int64_t v23 = XPC_ACTIVITY_INTERVAL_30_MIN;
    char v24 = 0;
    swift_bridgeObjectRetain(unk_100458B98);
    XPCDictionary.subscript.setter(&v23, v18, v19, &type metadata for Int64, v9);
    __int128 v20 = xmmword_100458B60;
    swift_bridgeObjectRetain(*((void *)&xmmword_100458B60 + 1));
    XPCDictionary.subscript.setter(1LL, v20, *((void *)&v20 + 1));
    uint64_t v21 = qword_100458B50;
    uint64_t v22 = unk_100458B58;
    swift_bridgeObjectRetain(unk_100458B58);
    return XPCDictionary.subscript.setter(1LL, v21, v22);
  }

LABEL_13:
  __break(1u);
  return result;
}

  if (v3 != v6) {
    goto LABEL_15;
  }
  uint64_t v7 = 1;
  uint64_t v6 = v3;
LABEL_16:
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

    uint64_t result = sub_10008903C(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    __int128 v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  __int128 v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }
  }

  else
  {
    unint64_t v9 = 0LL;
  }

  return v9;
}

  if (a2)
  {
    if (!*(void *)(a1 + 48)) {
      *a2 = v19;
    }
  }
}

      uint64_t v21 = sub_1001960DC((uint64_t)&OBJC_CLASS___ActivityManager, a2);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      if ((sub_100196674(a1, a2) & 1) == 0)
      {
        uint64_t v33 = ASDLogHandleForCategory(0LL);
        id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v62 = 138543362;
          *(void *)&v62[4] = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Skipping register of non-enabled",  v62,  0xCu);
        }

        goto LABEL_33;
      }

      if (os_variant_has_internal_content("com.apple.appstored")
        && (int64_t v23 = sub_1002F8F3C((uint64_t)&OBJC_CLASS___AppDefaultsManager, v22),
            char v24 = (void *)objc_claimAutoreleasedReturnValue(v23),
            v24,
            v24))
      {
        uint64_t v25 = sub_1002F8F3C((uint64_t)&OBJC_CLASS___AppDefaultsManager, v22);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        uint64_t v27 = (uint64_t)[v26 longLongValue];

        uint64_t v28 = ASDLogHandleForCategory(0LL);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        if (!os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_DEFAULT))
        {
LABEL_32:

          uint64_t v44 = sub_100196FB0(a1, v22, v27);
          id v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
          id v46 = sub_100197118(a1, a2, v22, v45, v27, a4, v7);
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);

          sub_1002F8FB8((uint64_t)&OBJC_CLASS___AppDefaultsManager, v34, v22);
LABEL_33:

          goto LABEL_47;
        }

        *(_DWORD *)uint64_t v62 = 138543618;
        *(void *)&v62[4] = v22;
        *(_WORD *)&v62[12] = 2048;
        *(void *)&v62[14] = v27;
        uint64_t v30 = "[%{public}@] Using refresh override interval: %lld";
        uint64_t v31 = (os_log_s *)v29;
        uint64_t v32 = OS_LOG_TYPE_DEFAULT;
      }

      else
      {
        uint64_t v27 = 86400LL;
        switch(a2)
        {
          case 1uLL:
            id v35 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
            id v36 = objc_claimAutoreleasedReturnValue(v35);
            uint64_t v37 = (void *)v36;
            id v38 = @"ocelot-post-interval-seconds";
            goto LABEL_25;
          case 2uLL:
            NSString v39 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
            id v36 = objc_claimAutoreleasedReturnValue(v39);
            uint64_t v37 = (void *)v36;
            id v38 = @"ocelot-post-payout-interval-seconds";
LABEL_25:
            id v40 = 43200LL;
            goto LABEL_28;
          case 3uLL:
            id v41 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
            id v36 = objc_claimAutoreleasedReturnValue(v41);
            uint64_t v37 = (void *)v36;
            id v38 = @"app-usage-analytics-post-interval-seconds";
            id v40 = 21600LL;
            goto LABEL_28;
          case 7uLL:
            uint64_t v42 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
            id v36 = objc_claimAutoreleasedReturnValue(v42);
            uint64_t v37 = (void *)v36;
            id v38 = @"subscription-keybag-refresh-interval-in-seconds";
            id v40 = 86400LL;
LABEL_28:
            uint64_t v27 = (uint64_t)sub_10025730C(v36, v38, (void *)v40, 0);

            break;
          default:
            break;
        }

        uint64_t v43 = ASDLogHandleForCategory(0LL);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v43);
        if (!os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_INFO)) {
          goto LABEL_32;
        }
        *(_DWORD *)uint64_t v62 = 138543618;
        *(void *)&v62[4] = v22;
        *(_WORD *)&v62[12] = 2048;
        *(void *)&v62[14] = v27;
        uint64_t v30 = "[%{public}@] Failed to find bag value. Will default to interval: %lld";
        uint64_t v31 = (os_log_s *)v29;
        uint64_t v32 = OS_LOG_TYPE_INFO;
      }

      _os_log_impl((void *)&_mh_execute_header, v31, v32, v30, v62, 0x16u);
      goto LABEL_32;
    }

    uint64_t v11 = v7;
    objc_opt_self(&OBJC_CLASS___ActivityManager);
    uint64_t v12 = sub_1002F945C((uint64_t)&OBJC_CLASS___AppDefaultsManager);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    uint64_t v14 = v13;
    if (v13)
    {
      [v13 timeIntervalSinceNow];
      if (v15 >= 0.0)
      {
        [v14 timeIntervalSinceNow];
        if (v16 < 1209600.0)
        {
          __int128 v17 = v14;
          uint64_t v18 = ASDLogHandleForCategory(0LL);
          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            [v17 timeIntervalSince1970];
            *(_DWORD *)uint64_t v62 = 138543874;
            *(void *)&v62[4] = @"ArcadePayoutReset";
            *(_WORD *)&v62[12] = 2048;
            *(void *)&v62[14] = (uint64_t)v20;
            *(_WORD *)&v62[22] = 2114;
            uint64_t v63 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Using previously scheduled date: %{time_t}ld with reason: %{public}@",  v62,  0x20u);
          }

LABEL_46:
          uint64_t v59 = (const char *)[@"com.apple.appstored.ArcadeResetPO" UTF8String];
          *(void *)uint64_t v62 = _NSConcreteStackBlock;
          *(void *)&v62[8] = 3221225472LL;
          *(void *)&v62[16] = sub_100198334;
          uint64_t v63 = &unk_1003EA0E0;
          uint64_t v64 = @"ArcadePayoutReset";
          char v60 = v11;
          id v65 = v60;
          uint64_t v66 = v17;
          id v67 = a1;
          uint64_t v61 = v17;
          xpc_activity_register(v59, XPC_ACTIVITY_CHECK_IN, v62);

          goto LABEL_47;
        }

        uint64_t v47 = ASDLogHandleForCategory(0LL);
        uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v62 = 138543618;
          *(void *)&v62[4] = @"ArcadePayoutReset";
          *(_WORD *)&v62[12] = 2114;
          *(void *)&v62[14] = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Scheduled date %{public}@ is invalid, recalculating date.",  v62,  0x16u);
        }
      }
    }

    objc_opt_self(&OBJC_CLASS___ActivityManager);
    Swift::String v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    unint64_t v50 = sub_10019DD34((uint64_t)&OBJC_CLASS___AccountEventCoordinator, v49);
    __int128 v17 = (id)objc_claimAutoreleasedReturnValue(v50);
    Swift::String_optional v51 = ASDLogHandleForCategory(0LL);
    uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
    {
      if (v17)
      {
        [v17 timeIntervalSince1970];
        id v54 = (uint64_t)v53;
      }

      else
      {
        id v54 = 0LL;
      }

      *(_DWORD *)uint64_t v62 = 138543618;
      *(void *)&v62[4] = @"ArcadePayoutReset";
      *(_WORD *)&v62[12] = 2048;
      *(void *)&v62[14] = v54;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_INFO,  "[%{public}@] Next weekStart is: cupertinoTimestamp: %{time_t}ld",  v62,  0x16u);
    }

    uint64_t v55 = ASDLogHandleForCategory(0LL);
    char v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
    {
      if (v17)
      {
        [v17 timeIntervalSince1970];
        Swift::String_optional v58 = (uint64_t)v57;
      }

      else
      {
        Swift::String_optional v58 = 0LL;
      }

      *(_DWORD *)uint64_t v62 = 138543874;
      *(void *)&v62[4] = @"ArcadePayoutReset";
      *(_WORD *)&v62[12] = 2048;
      *(void *)&v62[14] = v58;
      *(_WORD *)&v62[22] = 2114;
      uint64_t v63 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Using new date: %{time_t}ld with reason: %{public}@",  v62,  0x20u);
    }

    sub_1002F95F4((uint64_t)&OBJC_CLASS___AppDefaultsManager, v17);
    goto LABEL_46;
  }
}

LABEL_14:
  return v18;
}

  sub_100237C1C(v12, 7LL);
  sub_100237AD4(*(void *)(a1 + 32), *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
LABEL_14:
}
}
}

  char v71 = 0LL;
  uint64_t v72 = &v71;
  uint64_t v73 = 0x2020000000LL;
  char v74 = 0LL;
  id v67 = 0LL;
  uint64_t v68 = &v67;
  uint64_t v69 = 0x2020000000LL;
  unint64_t v70 = 0LL;
  v66[0] = _NSConcreteStackBlock;
  v66[1] = 3221225472LL;
  void v66[2] = sub_10024F060;
  v66[3] = &unk_1003EE6E0;
  v66[4] = self;
  v66[5] = &v67;
  v66[6] = &v71;
  +[ApplicationProxy enumerateApplicationsOfType:usingBlock:]( &OBJC_CLASS___ApplicationProxy,  "enumerateApplicationsOfType:usingBlock:",  0LL,  v66);
  if (v68[3] >= 1)
  {
    char v24 = ASDLogHandleForCategory(14LL);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = self->_qaVerficationRevokedApps;
      uint64_t v27 = (NSMutableDictionary *)v68[3];
      *(_DWORD *)buf = 138412546;
      id v89 = v26;
      uint64_t v90 = 2048;
      id v91 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "[%@] Attempted migration for %ld app(s)",  buf,  0x16u);
    }
  }

  uint64_t v64 = (char *)-[ApplicationProxy count](self->_soonestExpiring, "count");
  uint64_t v78 = 0u;
  uint64_t v79 = 0u;
  uint64_t v76 = 0u;
  uint64_t v77 = 0u;
  uint64_t v28 = self->_soonestExpiring;
  uint64_t v29 = -[ApplicationProxy countByEnumeratingWithState:objects:count:]( v28,  "countByEnumeratingWithState:objects:count:",  &v76,  buf,  16LL);
  if (!v29)
  {

    uint64_t v30 = 0LL;
    uint64_t v32 = 0LL;
    uint64_t v31 = 0LL;
    goto LABEL_36;
  }

  uint64_t v30 = 0LL;
  uint64_t v31 = 0LL;
  uint64_t v32 = 0LL;
  uint64_t v33 = *(void *)v77;
  while (2)
  {
    for (uint64_t i = 0LL; i != v29; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v77 != v33) {
        objc_enumerationMutation(v28);
      }
      id v35 = (void *)objc_claimAutoreleasedReturnValue( -[ApplicationProxy objectForKeyedSubscript:]( selfa->_soonestExpiring,  "objectForKeyedSubscript:",  *(void *)(*((void *)&v76 + 1) + 8LL * (void)i)));
      id v36 = v35;
      if (v31)
      {
        if (v30)
        {

          goto LABEL_30;
        }

        uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v35 localizedName]);
      }

      else
      {
        uint64_t v37 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v35 storeItemID]));

        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v36 localizedName]);
        uint64_t v32 = (void *)v37;
      }
    }

    uint64_t v29 = -[ApplicationProxy countByEnumeratingWithState:objects:count:]( v28,  "countByEnumeratingWithState:objects:count:",  &v76,  buf,  16LL);
    if (v29) {
      continue;
    }
    break;
  }

LABEL_14:
  return v13;
}

LABEL_14:
  return v13;
}

LABEL_14:
  return v13;
}

  uint64_t v27 = 0LL;
LABEL_14:
  uint64_t v26 = -[NSString hash](self->_redownloadParams, "hash");
  uint64_t v25 = -[NSString hash](self->_artworkURLString, "hash");
  if ((*(_WORD *)&self->_has & 0x20) != 0) {
    char v24 = 2654435761LL * self->_containsMessagesExtension;
  }
  else {
    char v24 = 0LL;
  }
  int64_t v23 = -[NSString hash](self->_itemName, "hash");
  if ((*(_WORD *)&self->_has & 0x200) != 0) {
    uint64_t v22 = 2654435761LL * self->_launchProhibited;
  }
  else {
    uint64_t v22 = 0LL;
  }
  uint64_t v21 = -[NSString hash](self->_messagesArtworkURLString, "hash");
  __int128 v20 = (unint64_t)-[NSData hash](self->_packageDPInfo, "hash");
  uint64_t v19 = (unint64_t)-[NSData hash](self->_packageSINF, "hash");
  uint64_t v18 = -[NSString hash](self->_packageURLString, "hash");
  __int128 v17 = -[NSString hash](self->_storeCohort, "hash");
  uint64_t v16 = -[NSString hash](self->_storeFront, "hash");
  uint64_t v15 = -[NSString hash](self->_vendorName, "hash");
  uint64_t v14 = (unint64_t)-[NSMutableArray hash](self->_provisioningProfiles, "hash");
  uint64_t v4 = -[NSString hash](self->_variantID, "hash");
  __int128 v5 = (__int16)self->_has;
  if ((v5 & 0x400) != 0)
  {
    uint64_t v6 = 2654435761LL * self->_skipIfInstalled;
    if ((v5 & 0x40) != 0)
    {
LABEL_22:
      uint64_t v7 = 2654435761LL * self->_isBeta;
      if ((*(_WORD *)&self->_has & 0x100) != 0) {
        goto LABEL_23;
      }
LABEL_27:
      __int128 v8 = 0LL;
      if ((v5 & 0x80) != 0) {
        goto LABEL_24;
      }
      goto LABEL_28;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
    if ((v5 & 0x40) != 0) {
      goto LABEL_22;
    }
  }

  uint64_t v7 = 0LL;
  if ((*(_WORD *)&self->_has & 0x100) == 0) {
    goto LABEL_27;
  }
LABEL_23:
  __int128 v8 = 2654435761LL * self->_isSystemApp;
  if ((v5 & 0x80) != 0)
  {
LABEL_24:
    unint64_t v9 = 2654435761LL * self->_isStoreApp;
    goto LABEL_29;
  }

  [v4 setNextUpdateCheck:v8];
  uint64_t v14 = sub_1002FA130((uint64_t)&OBJC_CLASS___AppDefaultsManager);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  if (v15) {
    [v4 setLastUpdateCheck:v15];
  }
  if (v3) {
    v3[2](v3, v4, 0LL);
  }
}

      uint64_t v14 = 0LL;
      goto LABEL_14;
    }
  }

  uint64_t v10 = sub_1001E2698((id)self->_sourceType, (uint64_t)@"archive_type");
  if (self->_install) {
    uint64_t v11 = v5;
  }
  else {
    uint64_t v11 = 1;
  }
  uint64_t v13 = objc_alloc(&OBJC_CLASS___ASDBundle);
  uint64_t v14 = sub_100323D88(self->super._error);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  uint64_t v16 = -[ASDBundle initWithIdentifier:](v13, "initWithIdentifier:", v15);

  if (!v16
    || (__int128 v17 = -[ApplicationProxy initWithBundle:](objc_alloc(&OBJC_CLASS___ApplicationProxy), "initWithBundle:", v16),
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[ApplicationProxy validLocationProxy](v17, "validLocationProxy")),
        v17,
        !v18))
  {
    uint64_t v29 = ASDLogHandleForCategory(2LL);
    int64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      uint64_t v30 = sub_100323C54(&self->super._error->super.isa);
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      *(_DWORD *)buf = 138412290;
      *(void *)&buf[4] = v31;
      _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "[%@] Failed to write receipt - application was not found!",  buf,  0xCu);
    }

    goto LABEL_43;
  }

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[NSError valueForProperty:](self->super._error, "valueForProperty:", @"receipt"));
  __int128 v20 = sub_100323C54(&self->super._error->super.isa);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v78 = 0LL;
  uint64_t v22 = sub_1002E6898((uint64_t)&OBJC_CLASS___WriteReceipt, v19, v18, v21, &v78);
  int64_t v23 = (os_log_s *)v78;

  if (v22)
  {
    char v24 = ASDLogHandleForCategory(2LL);
    uint64_t v25 = (id *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = sub_100323C54(&self->super._error->super.isa);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      uint64_t v28 = [v19 length];
      *(_DWORD *)buf = 138412546;
      *(void *)&buf[4] = v27;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v28;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v25,  OS_LOG_TYPE_DEFAULT,  "[%@] Sucessfully wrote receipt (%{bytes}lu)",  buf,  0x16u);
    }

  char v60 = 0LL;
  id v46 = sub_100304244((uint64_t)v39, &v60);
  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
  uint64_t v48 = v60;
  Swift::String v49 = v48;
  if (v47)
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  v47,  @"store_metadata");
    if (v49) {
      goto LABEL_15;
    }
  }

  else
  {
    Swift::String_optional v51 = ASDErrorWithUnderlyingErrorAndDescription(v48, ASDErrorDomain, 825LL, @"Unable to encode metadata");
    uint64_t v52 = objc_claimAutoreleasedReturnValue(v51);

    Swift::String v49 = (void *)v52;
    if (v52)
    {
LABEL_15:
      unint64_t v50 = 0LL;
      if (a3) {
        *a3 = v49;
      }
      goto LABEL_21;
    }
  }

  unint64_t v50 = -[SQLiteMemoryEntity initWithPropertyValues:]( objc_alloc(&OBJC_CLASS___AppInstall),  "initWithPropertyValues:",  v6);
  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v5 assets]);
  v58[0] = _NSConcreteStackBlock;
  v58[1] = 3221225472LL;
  v58[2] = sub_100324BB4;
  v58[3] = &unk_1003F3548;
  uint64_t v59 = v5;
  id v54 = sub_1002B86C0(v53, v58);
  char v56 = (void *)objc_claimAutoreleasedReturnValue(v54);
  if (v50) {
    objc_setProperty_atomic_copy(v50, v55, v56, 40LL);
  }

LABEL_21:
  return v50;
}

const char *sub_10004FE50()
{
  return "com.apple.appstored.activities.TestFlightExtensionSyncActivity";
}

void sub_10004FE64()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = static Logger.testFlightExtension.getter(v4);
  __int128 v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "TestFlightExtensionSyncActivity - run", v10, 2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  uint64_t v11 = objc_opt_self(&OBJC_CLASS___PushService);
  uint64_t v12 = (id *)sub_10028ECBC(v11);
  uint64_t v13 = sub_10028EEE4(v12);

  uint64_t v14 = swift_allocObject(&unk_1003DEE38, 24LL, 7LL);
  *(void *)(v14 + 16) = v1;
  aBlock[4] = sub_1000503A8;
  uint64_t v19 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100027DC4;
  aBlock[3] = &unk_1003DEE50;
  uint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = v19;
  id v17 = v1;
  swift_release(v16);
  sub_100297640((uint64_t)v13, v15);
  _Block_release(v15);
}

uint64_t sub_100050010()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  __int128 v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)&v0[OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_dispatchQueue];
  uint64_t v9 = swift_allocObject(&unk_1003DEE88, 24LL, 7LL);
  *(void *)(v9 + 16) = v0;
  aBlock[4] = sub_1000503E0;
  uint64_t v18 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000657B0;
  aBlock[3] = &unk_1003DEEA0;
  uint64_t v10 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v0);
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_100004DD4( &qword_100458F90,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v12 = sub_1000079A0(&qword_100458F98);
  uint64_t v13 = sub_10002BA14(&qword_100458FA0, &qword_100458F98);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v10);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

void sub_100050228(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_serviceHost);
  v3[4] = nullsub_20;
  v3[5] = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256LL;
  v3[2] = sub_100027DC4;
  v3[3] = &unk_1003DEEC8;
  uint64_t v2 = _Block_copy(v3);
  sub_1003069A8(v1, v2);
  _Block_release(v2);
}

uint64_t sub_1000502D8()
{
  return swift_bridgeObjectRelease(*(void *)(v0
                                             + OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_descriptiveName
                                             + 8));
}

uint64_t type metadata accessor for TestFlightExtensionSyncActivity()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored31TestFlightExtensionSyncActivity);
}

uint64_t sub_100050384()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000503A8()
{
  return sub_100050010();
}

uint64_t sub_1000503C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000503D8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

void sub_1000503E0()
{
}

id sub_1000503E8(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  char v24 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v2, a2);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v3[OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_syncIntervalMinutes] = 0LL;
  *(void *)&v3[OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_syncGracePeriodMinutes] = 0LL;
  uint64_t v23 = OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_dispatchQueue;
  sub_100050644();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v10);
  uint64_t v14 = v3;
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v27 = _swiftEmptyArrayStorage;
  uint64_t v15 = sub_100004DD4( &qword_100458FC0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v16 = sub_1000079A0(&qword_100458FC8);
  uint64_t v17 = sub_10002BA14(&qword_100458FD0, &qword_100458FC8);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v16, v17, v4, v15);
  uint64_t v18 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003CLL,  0x80000001003447E0LL,  v9,  v6,  v13,  0LL);
  *(void *)&v3[v23] = v18;
  *(void *)&v14[OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_deadline] = 0LL;
  uint64_t v19 = &v14[OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_descriptiveName];
  *(void *)uint64_t v19 = 0xD000000000000012LL;
  *((void *)v19 + 1) = 0x8000000100344820LL;
  __int128 v20 = v24;
  *(void *)&v14[OBJC_IVAR____TtC9appstored31TestFlightExtensionSyncActivity_serviceHost] = v24;
  id v21 = v20;

  v26.receiver = v14;
  v26.super_class = ObjectType;
  return objc_msgSendSuper2(&v26, "init");
}

unint64_t sub_100050644()
{
  unint64_t result = qword_100458FB8;
  if (!qword_100458FB8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___OS_dispatch_queue);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100458FB8);
  }

  return result;
}

id sub_10005093C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MediaAPIUpdateEntity();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for MediaAPIUpdateEntity()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity);
}

uint64_t sub_100050990()
{
  uint64_t v1 = objc_opt_self(&OBJC_CLASS___TransactionStore);
  NSString v2 = String._bridgeToObjectiveC()();
  sub_10027DAD8(v1, v2);

  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t type metadata accessor for XPCTransaction()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored14XPCTransaction);
}

uint64_t sub_100050A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  return a4();
}

uint64_t sub_100050A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4);
}

uint64_t sub_100050A5C()
{
  uint64_t v0 = type metadata accessor for GlobalState();
  uint64_t v1 = swift_allocObject(v0, 120LL, 15LL);
  uint64_t result = swift_defaultActor_initialize(v1);
  *(void *)(v1 + 112) = &_swiftEmptySetSingleton;
  qword_1004599A0 = v1;
  return result;
}

uint64_t sub_100050B68()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v1[6] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[7] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[8] = swift_task_alloc(v4);
  void v1[9] = swift_task_alloc(v4);
  return swift_task_switch(sub_100050C04, 0LL, 0LL);
}

uint64_t sub_100050C04()
{
  v0[1].opaque[0] = 0LL;
  v0[1].opaque[1] = 0LL;
  if (qword_100458090 != -1) {
    swift_once(&qword_100458090, sub_100054288);
  }
  uint64_t v1 = v0[2].opaque[1];
  uint64_t v2 = _os_activity_create( (void *)&_mh_execute_header,  "appstored/AppDownloadDoneTask",  (os_activity_t)qword_1004599A8,  OS_ACTIVITY_FLAG_DEFAULT);
  v0[5].opaque[0] = (uint64_t)v2;
  os_activity_scope_enter(v2, v0 + 1);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC9appstored19AppDownloadDoneTask_bag);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC9appstored19AppDownloadDoneTask_store);
  uint64_t v5 = (os_activity_scope_state_s **)swift_task_alloc(dword_100459ADC);
  v0[5].opaque[1] = (uint64_t)v5;
  *uint64_t v5 = v0;
  v5[1] = (os_activity_scope_state_s *)sub_100050D00;
  return sub_1000510CC(v3, v4);
}

uint64_t sub_100050D00()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  *(void *)(*(void *)v1 + 96LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100050ED0;
  }
  else {
    uint64_t v3 = sub_100050DA8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100050DA8()
{
  uint64_t v1 = static Logger.appInstall.getter();
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AppDownloadDoneTask completed successfully", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 48);

  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v9);
  os_activity_scope_leave((os_activity_scope_state_t)(v0 + 16));
  swift_unknownObjectRelease(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100050ED0()
{
  uint64_t v1 = *(void *)(v0 + 96);
  static Logger.appInstall.getter();
  swift_errorRetain(v1, v2);
  uint64_t v4 = swift_errorRetain(v1, v3);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138543362;
    swift_errorRetain(v7, v10);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 32) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 4, v8 + 12);
    *uint64_t v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "AppDownloadDoneTask ended in error: %{public}@", v8, 0xCu);
    uint64_t v12 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v9, 1LL, v12);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 96);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  uint64_t v15 = *(void *)(v0 + 72);
  uint64_t v14 = *(void *)(v0 + 80);
  uint64_t v17 = *(void *)(v0 + 56);
  uint64_t v16 = *(void *)(v0 + 64);
  uint64_t v18 = *(void *)(v0 + 48);

  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v16, v18);
  swift_willThrow(v19);
  os_activity_scope_leave((os_activity_scope_state_t)(v0 + 16));
  swift_unknownObjectRelease(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000510CC(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType(v2, a2);
  v3[20] = a2;
  v3[21] = ObjectType;
  v3[19] = a1;
  uint64_t v7 = type metadata accessor for Logger(0LL);
  v3[22] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[23] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[24] = swift_task_alloc(v9);
  v3[25] = swift_task_alloc(v9);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100459AE8 + dword_100459AE8);
  uint64_t v10 = (void *)swift_task_alloc(unk_100459AEC);
  v3[26] = v10;
  *uint64_t v10 = v3;
  v10[1] = sub_100051190;
  return v12((uint64_t)sub_100051A50, 0LL);
}

uint64_t sub_100051190(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208LL);
  *(void *)(*(void *)v1 + 216LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000511EC, 0LL, 0LL);
}

uint64_t sub_1000511EC()
{
  uint64_t v1 = *(void *)(v0 + 216);
  if (*(void *)(v1 + 16))
  {
    if (qword_100458088 != -1) {
      swift_once(&qword_100458088, sub_100050A5C);
    }
    uint64_t v2 = qword_1004599A0;
    *(void *)(v0 + 224) = qword_1004599A0;
    return swift_task_switch(sub_100051324, v2, 0LL);
  }

  else
  {
    uint64_t v4 = swift_bridgeObjectRelease(v1);
    uint64_t v5 = static Logger.appInstall.getter(v4);
    os_log_type_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No work to do", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v10 = *(void *)(v0 + 184);
    uint64_t v9 = *(void *)(v0 + 192);
    uint64_t v11 = *(void *)(v0 + 176);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    uint64_t v12 = *(void *)(v0 + 192);
    swift_task_dealloc(*(void *)(v0 + 200));
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100051324()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[28];
  swift_retain(v2);
  v0[29] = sub_1000551F4(v1, v2);
  swift_bridgeObjectRelease(v1);
  swift_release(v2);
  return swift_task_switch(sub_100051390, 0LL, 0LL);
}

uint64_t sub_100051390()
{
  uint64_t v1 = *(void *)(v0 + 232);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = v0 + 16;
    uint64_t v3 = *(void **)(v0 + 152);
    *(void *)(v0 + 56) = v0 + 144;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000514F8;
    uint64_t v4 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = _NSConcreteStackBlock;
    uint64_t v5 = (void *)(v0 + 80);
    v5[1] = 0x40000000LL;
    void v5[2] = sub_10002FCB0;
    void v5[3] = &unk_1003DEF80;
    v5[4] = v4;
    [v3 createSnapshotWithCompletion:v5];
    return swift_continuation_await(v2);
  }

  else
  {
    uint64_t v7 = swift_bridgeObjectRelease(v1);
    uint64_t v8 = static Logger.appInstall.getter(v7);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "No work to do", v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    uint64_t v12 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v14 = *(void *)(v0 + 184);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
    uint64_t v15 = *(void *)(v0 + 192);
    swift_task_dealloc(*(void *)(v0 + 200));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000514F8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  if (v2)
  {
    swift_bridgeObjectRelease(*(void *)(v1 + 232));
    uint64_t v3 = sub_100051884;
  }

  else
  {
    uint64_t v3 = sub_100051560;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100051560()
{
  uint64_t v1 = v0[29];
  uint64_t v3 = (void *)v0[20];
  uint64_t v2 = v0[21];
  uint64_t v4 = (void *)v0[18];
  v0[31] = v4;
  uint64_t v5 = sub_1000079A0(&qword_100459530);
  uint64_t v6 = swift_allocObject(v5, 112LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_100373520;
  *(void *)(v6 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"account_id");
  *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v7;
  *(void *)(v6 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"item_id");
  *(void *)(v6 + 56) = v8;
  *(void *)(v6 + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"machine_based");
  *(void *)(v6 + 72) = v9;
  *(void *)(v6 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"request_url");
  *(void *)(v6 + 88) = v10;
  *(void *)(v6 + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"transaction_id");
  *(void *)(v6 + 104) = v11;
  uint64_t v12 = (void *)swift_allocObject(&unk_1003DEFA8, 48LL, 7LL);
  v0[32] = v12;
  __int128 v12[2] = v3;
  v12[3] = v6;
  v12[4] = v4;
  void v12[5] = v2;
  uint64_t v13 = swift_allocObject(&unk_1003DEFD0, 24LL, 7LL);
  v0[33] = v13;
  *(void *)(v13 + 16) = v3;
  uint64_t v14 = (void *)swift_task_alloc(64LL);
  v0[34] = v14;
  void v14[2] = v1;
  v14[3] = sub_100055358;
  v14[4] = v12;
  v14[5] = &unk_100459B00;
  v14[6] = v13;
  uint64_t v15 = async function pointer to withThrowingTaskGroup<A, B>(of:returning:isolation:body:)[1];
  id v16 = v3;
  id v17 = v4;
  uint64_t v18 = (void *)swift_task_alloc(v15);
  v0[35] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100051704;
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

uint64_t sub_100051704()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 272LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 280LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100051760, 0LL, 0LL);
}

uint64_t sub_100051760()
{
  uint64_t v1 = qword_1004599A0;
  *(void *)(v0 + 288) = qword_1004599A0;
  return swift_task_switch(sub_10005177C, v1, 0LL);
}

uint64_t sub_10005177C()
{
  uint64_t v1 = *(void *)(v0 + 288) + 112LL;
  swift_beginAccess(v1, v0 + 120, 33LL, 0LL);
  uint64_t v2 = *(void *)(v0 + 232);
  if (*(void *)(*(void *)v1 + 16LL))
  {
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      uint64_t v4 = (uint64_t *)(v2 + 32);
      swift_bridgeObjectRetain(*(void *)(v0 + 232));
      do
      {
        uint64_t v5 = *v4++;
        sub_1000542B8(v5);
        --v3;
      }

      while (v3);
      swift_bridgeObjectRelease(*(void *)(v0 + 232));
      uint64_t v2 = *(void *)(v0 + 232);
    }
  }

  swift_endAccess(v0 + 120);
  swift_bridgeObjectRelease(v2);
  return swift_task_switch(sub_100051830, 0LL, 0LL);
}

uint64_t sub_100051830()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v2 = *(void **)(v0 + 248);
  swift_release(*(void *)(v0 + 264));
  swift_release(v1);

  uint64_t v3 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 200));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100051884()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 200);
  swift_willThrow();
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000519F0(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_100459AD4;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10002FEB8;
  return sub_100050B68();
}

uint64_t sub_100051A50@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v16 = _swiftEmptyArrayStorage;
  uint64_t v4 = sub_10001517C(0LL, (unint64_t *)&unk_100459C00, off_1003D9C78);
  id v5 = [objc_allocWithZone((Class)SQLiteQueryDescriptor) initWithEntityClass:swift_getObjCClassFromMetadata(v4)];
  id v6 = [a1 connection];
  id v7 = [objc_allocWithZone((Class)SQLiteQuery) initOnConnection:v6 descriptor:v5];

  uint64_t v8 = swift_allocObject(&unk_1003DF288, 24LL, 7LL);
  *(void *)(v8 + 16) = &v16;
  uint64_t v9 = swift_allocObject(&unk_1003DF2B0, 32LL, 7LL);
  *(void *)(v9 + 16) = sub_10005585C;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_1000152F8;
  uint64_t v15 = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100050A30;
  aBlock[3] = &unk_1003DF2C8;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = v15;
  swift_retain(v9);
  swift_release(v11);
  [v7 enumeratePersistentIDsUsingBlock:v10];

  _Block_release(v10);
  LOBYTE(vsub_100015340(v0 + 5) = swift_isEscapingClosureAtFileLocation(v9, "", 105LL, 57LL, 42LL, 1LL);
  uint64_t result = swift_release(v9);
  if ((v5 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v13 = v16;
    uint64_t result = swift_release(v8);
    *a2 = v13;
  }

  return result;
}

uint64_t sub_100051C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  id v6 = (void *)*a4;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a4);
  *a4 = (uint64_t)v6;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_100088B9C(0LL, v6[2] + 1LL, 1, v6);
    id v6 = (void *)result;
    *a4 = result;
  }

  unint64_t v9 = v6[2];
  unint64_t v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)sub_100088B9C((void *)(v8 > 1), v9 + 1, 1, v6);
    id v6 = (void *)result;
  }

  v6[2] = v9 + 1;
  v6[v9 + 4] = a1;
  *a4 = (uint64_t)v6;
  return result;
}

uint64_t sub_100051CD8(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  return swift_task_switch(sub_100051CF4, 0LL, 0LL);
}

uint64_t sub_100051CF4()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = (void *)v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = swift_allocObject(&unk_1003DF1F8, 32LL, 7LL);
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = swift_allocObject(&unk_1003DF220, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_100055778;
  *(void *)(v5 + 24) = v4;
  v0[14] = sub_100055804;
  v0[15] = v5;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256LL;
  v0[12] = sub_100054118;
  v0[13] = &unk_1003DF238;
  id v6 = _Block_copy(v0 + 10);
  v0[28] = v6;
  uint64_t v7 = v0[15];
  swift_retain(v2);
  swift_release(v7);
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_100051E3C;
  uint64_t v8 = swift_continuation_init(v0 + 2, 0LL);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = sub_100054204;
  v0[13] = &unk_1003DF260;
  v0[14] = v8;
  [v1 asyncReadUsingSession:v6 completion:v0 + 10];
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_100051E3C()
{
  return swift_task_switch(sub_100051E88, 0LL, 0LL);
}

uint64_t sub_100051E88()
{
  uint64_t v1 = *(const void **)(v0 + 224);
  sub_1000151F8(v0 + 128, v0 + 160);
  _Block_release(v1);
  sub_1000151F8(v0 + 160, v0 + 80);
  uint64_t v2 = sub_1000079A0((uint64_t *)&unk_1004594B0);
  uint64_t v3 = sub_1000079A0(&qword_100459BF8);
  swift_dynamicCast(v0 + 192, v0 + 80, v2, v3, 7LL);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 192));
}

uint64_t sub_100051F20(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  return swift_task_switch(sub_100051F3C, 0LL, 0LL);
}

uint64_t sub_100051F3C()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = (void *)v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = swift_allocObject(&unk_1003DF168, 32LL, 7LL);
  *(void *)(v4 + 16) = v3;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = swift_allocObject(&unk_1003DF190, 32LL, 7LL);
  *(void *)(v5 + 16) = sub_100055778;
  *(void *)(v5 + 24) = v4;
  v0[14] = sub_1000557B0;
  v0[15] = v5;
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 1107296256LL;
  v0[12] = sub_100054118;
  v0[13] = &unk_1003DF1A8;
  id v6 = _Block_copy(v0 + 10);
  v0[28] = v6;
  uint64_t v7 = v0[15];
  swift_retain(v2);
  swift_release(v7);
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_100052084;
  uint64_t v8 = swift_continuation_init(v0 + 2, 0LL);
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000LL;
  v0[12] = sub_100054204;
  v0[13] = &unk_1003DF1D0;
  v0[14] = v8;
  [v1 asyncReadUsingSession:v6 completion:v0 + 10];
  return swift_continuation_await(v0 + 2);
}

uint64_t sub_100052084()
{
  return swift_task_switch(sub_1000520D0, 0LL, 0LL);
}

uint64_t sub_1000520D0()
{
  uint64_t v1 = *(const void **)(v0 + 224);
  sub_1000151F8(v0 + 128, v0 + 160);
  _Block_release(v1);
  sub_1000151F8(v0 + 160, v0 + 80);
  uint64_t v2 = sub_1000079A0((uint64_t *)&unk_1004594B0);
  uint64_t v3 = sub_10001517C(0LL, &qword_100459BF0, off_1003DA108);
  swift_dynamicCast(v0 + 192, v0 + 80, v2, v3, 7LL);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 192));
}

void *sub_100052174(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject(&unk_1003DF100, 56LL, 7LL);
  v10[2] = a2;
  v10[3] = a1;
  v10[4] = a3;
  v10[5] = a4;
  v10[6] = a5;
  id v11 = a2;
  swift_bridgeObjectRetain(a3);
  id v12 = a4;
  return &unk_100459B60;
}

uint64_t sub_1000521F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[30] = a3;
  v4[31] = a4;
  v4[28] = a1;
  v4[29] = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[32] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[33] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[34] = swift_task_alloc(v7);
  v4[35] = swift_task_alloc(v7);
  v4[36] = swift_task_alloc(v7);
  return swift_task_switch(sub_100052274, 0LL, 0LL);
}

uint64_t sub_100052274()
{
  uint64_t v2 = v0[29];
  uint64_t v1 = v0[30];
  uint64_t v3 = swift_allocObject(&unk_1003DF128, 32LL, 7LL);
  v0[37] = v3;
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = unk_100459B6C;
  unint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100459B68 + dword_100459B68);
  swift_bridgeObjectRetain(v1);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[38] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100052318;
  return v7((uint64_t)sub_10005574C, v3);
}

uint64_t sub_100052318(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 296LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 304LL);
  *(void *)(*(void *)v1 + 312LL) = a1;
  swift_task_dealloc(v2);
  swift_release(v3);
  return swift_task_switch(sub_10005237C, 0LL, 0LL);
}

uint64_t sub_10005237C()
{
  uint64_t v1 = *(void **)(v0 + 248);
  id v2 = [*(id *)(v0 + 312) propertyValues];
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v2,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  uint64_t v4 = sub_100054544(v3, v1);
  *(void *)(v0 + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v4;
  uint64_t v5 = swift_bridgeObjectRelease(v3);
  if (v4)
  {
    uint64_t v6 = v0 + 16;
    id v7 = [(id)objc_opt_self(AMSURLSession) defaultSession];
    id v8 = [v7 dataTaskPromiseWithRequestPromise:v4];
    *(void *)(v0 + 328) = v8;

    *(void *)(v0 + 56) = v0 + 152;
    *(void *)(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1000525DC;
    uint64_t v9 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = _NSConcreteStackBlock;
    uint64_t v10 = (void *)(v0 + 80);
    v10[1] = 0x40000000LL;
    v10[2] = sub_10005F988;
    v10[3] = &unk_1003DF140;
    v10[4] = v9;
    [v8 resultWithTimeout:v10 completion:60.0];
    return swift_continuation_await(v6);
  }

  else
  {
    uint64_t v12 = static Logger.appInstall.getter(v5);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    uint64_t v14 = static os_log_type_t.error.getter();
    BOOL v15 = os_log_type_enabled(v13, (os_log_type_t)v14);
    id v16 = *(void **)(v0 + 312);
    if (v15)
    {
      uint64_t v17 = *(void *)(v0 + 232);
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v18 = 134217984;
      *(void *)(v0 + 184) = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v18 + 4, v18 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  (os_log_type_t)v14,  "Unable to create request for pid=%lld",  v18,  0xCu);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    (*(void (**)(void, void))(*(void *)(v0 + 264) + 8LL))(*(void *)(v0 + 288), *(void *)(v0 + 256));
    uint64_t v19 = *(void *)(v0 + 280);
    uint64_t v20 = *(void *)(v0 + 272);
    swift_task_dealloc(*(void *)(v0 + 288));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 232));
  }

uint64_t sub_1000525DC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 336LL) = v1;
  if (v1) {
    id v2 = sub_1000527E4;
  }
  else {
    id v2 = sub_10005263C;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10005263C()
{
  uint64_t v1 = *(void **)(v0 + 152);

  if ((uint64_t)[v1 responseStatusCode] > 399)
  {
    static Logger.appInstall.getter();
    id v4 = v1;
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v9 = *(void **)(v0 + 312);
    id v8 = *(void **)(v0 + 320);
    if (v7)
    {
      uint64_t v14 = *(void **)(v0 + 320);
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v10 = 134217984;
      *(void *)(v0 + 216) = [v4 responseStatusCode];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v10 + 4, v10 + 12);

      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received HTTP %ld; deleting from queue", v10, 0xCu);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {

      id v4 = v8;
    }

    (*(void (**)(void, void))(*(void *)(v0 + 264) + 8LL))(*(void *)(v0 + 280), *(void *)(v0 + 256));
  }

  else
  {
    uint64_t v3 = *(void **)(v0 + 312);
    id v2 = *(void **)(v0 + 320);
  }

  uint64_t v11 = *(void *)(v0 + 280);
  uint64_t v12 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 232));
}

uint64_t sub_1000527E4(uint64_t a1)
{
  id v2 = *(void **)(v1 + 328);
  uint64_t v3 = *(void *)(v1 + 336);
  swift_willThrow(a1);

  *(void *)(v1 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v3;
  swift_errorRetain(v3, v4);
  uint64_t v5 = sub_1000079A0(&qword_100459B50);
  type metadata accessor for AMSError(0LL);
  uint64_t v7 = v6;
  if (!swift_dynamicCast(v1 + 168, v1 + 160, v5, v6, 0LL))
  {
    uint64_t v17 = *(void **)(v1 + 320);

LABEL_14:
LABEL_15:
    uint64_t v25 = *(void *)(v1 + 280);
    uint64_t v26 = *(void *)(v1 + 288);
    uint64_t v27 = *(void *)(v1 + 272);
    swift_errorRelease(*(void *)(v1 + 160));
    swift_task_dealloc(v26);
    swift_task_dealloc(v25);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  id v8 = *(void **)(v1 + 168);
  type metadata accessor for Code(0LL);
  uint64_t v10 = v9;
  *(void *)(v1 + 176) = 305LL;
  uint64_t v11 = sub_100004DD4( &qword_100459B70,  (uint64_t (*)(uint64_t))type metadata accessor for Code,  (uint64_t)&unk_1003727BC);
  id v12 = v8;
  LOBYTE(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = static _ErrorCodeProtocol.~= infix(_:_:)(v1 + 176, v12, v10, v11);

  if ((v10 & 1) == 0) {
    goto LABEL_13;
  }
  *(void *)(v1 + 192) = v12;
  uint64_t v13 = sub_100004DD4( &qword_100458348,  (uint64_t (*)(uint64_t))type metadata accessor for AMSError,  (uint64_t)&unk_100372750);
  uint64_t v14 = _BridgedStoredNSError.userInfo.getter(v7, v13);
  if (*(void *)(v14 + 16) && (unint64_t v15 = sub_100023F7C(0xD000000000000012LL, 0x8000000100344AF0LL), (v16 & 1) != 0))
  {
    sub_100016B10(*(void *)(v14 + 56) + 32 * v15, v1 + 120);
  }

  else
  {
    *(_OWORD *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0u;
    *(_OWORD *)(v1 + 136) = 0u;
  }

  swift_bridgeObjectRelease(v14);
  if (!*(void *)(v1 + 144))
  {
    uint64_t v30 = *(void **)(v1 + 312);
    uint64_t v29 = *(void **)(v1 + 320);
    sub_100015240(v1 + 120, (uint64_t *)&unk_1004594B0);

    goto LABEL_15;
  }

  if ((swift_dynamicCast(v1 + 200, v1 + 120, (char *)&type metadata for Any + 8, &type metadata for Int, 6LL) & 1) == 0
    || *(void *)(v1 + 200) != 1010LL)
  {
LABEL_13:
    uint64_t v17 = *(void **)(v1 + 320);

    goto LABEL_14;
  }

  uint64_t v18 = swift_errorRelease(*(void *)(v1 + 336));
  uint64_t v19 = static Logger.appInstall.getter(v18);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = *(void *)(v1 + 232);
    uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v23 = 134217984;
    *(void *)(v1 + 208) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 208, v1 + 216, v23 + 4, v23 + 12);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Invalid URL for pid=%lld: ", v23, 0xCu);
    swift_slowDealloc(v23, -1LL, -1LL);
    char v24 = (os_log_s *)v12;
  }

  else
  {
    char v24 = v20;
    uint64_t v20 = (os_log_s *)v12;
  }

  uint64_t v31 = *(void **)(v1 + 320);
  uint64_t v33 = *(void *)(v1 + 264);
  uint64_t v32 = *(void *)(v1 + 272);
  uint64_t v34 = *(void *)(v1 + 256);

  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  swift_errorRelease(*(void *)(v1 + 160));
  uint64_t v35 = *(void *)(v1 + 280);
  uint64_t v36 = *(void *)(v1 + 272);
  swift_task_dealloc(*(void *)(v1 + 288));
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v1 + 8))(*(void *)(v1 + 232));
}

void sub_100052B44(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  id v7 = [a1 connection];
  id v8 = [objc_allocWithZone((Class)AppDoneEntity) initWithPersistentID:a2 onConnection:v7];

  uint64_t v9 = sub_100056154(a3);
  id v10 = objc_allocWithZone((Class)&OBJC_CLASS___SQLiteMemoryEntity);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v9);
  id v12 = [v10 initWithDatabaseEntity:v8 properties:isa];

  *a4 = v12;
}

uint64_t sub_100052C1C(uint64_t a1, char a2, uint64_t a3)
{
  *(_BYTE *)(v3 + 256) = a2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = a3;
  uint64_t v4 = type metadata accessor for Logger(0LL);
  *(void *)(v3 + 208) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 216) = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 224) = swift_task_alloc(v6);
  *(void *)(v3 + 232) = swift_task_alloc(v6);
  *(void *)(v3 + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = swift_task_alloc(v6);
  return swift_task_switch(sub_100052C9C, 0LL, 0LL);
}

uint64_t sub_100052C9C(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(v1 + 256);
  if (v2 == 255)
  {
    uint64_t v3 = static Logger.appInstall.getter(a1);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No more results", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v7 = *(void *)(v1 + 240);
    uint64_t v8 = *(void *)(v1 + 208);
    uint64_t v9 = *(void *)(v1 + 216);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
LABEL_13:
    uint64_t v36 = *(void *)(v1 + 232);
    uint64_t v37 = *(void *)(v1 + 224);
    swift_task_dealloc(*(void *)(v1 + 240));
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  if ((v2 & 1) != 0)
  {
    uint64_t v23 = *(void *)(v1 + 192);
    *(void *)(v1 + 168) = v23;
    sub_1000555C8(v23, 1LL);
    sub_1000555C8(v23, 1LL);
    uint64_t v24 = sub_1000079A0(&qword_100459B50);
    uint64_t v25 = swift_willThrowTypedImpl(v1 + 168, v24, &protocol self-conformance witness table for Error);
    static Logger.appInstall.getter(v25);
    sub_1000555C8(v23, 1LL);
    uint64_t v26 = sub_1000555C8(v23, 1LL);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter();
    BOOL v29 = os_log_type_enabled(v27, v28);
    unsigned __int8 v30 = *(_BYTE *)(v1 + 256);
    uint64_t v31 = *(void *)(v1 + 192);
    if (v29)
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v32 = 138543362;
      sub_1000555C8(v31, 1LL);
      uint64_t v34 = _swift_stdlib_bridgeErrorToNSError(v23);
      *(void *)(v1 + 176) = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 176, v1 + 184, v32 + 4, v32 + 12);
      *uint64_t v33 = v34;
      sub_1000555D4(v31, v30);
      sub_1000555D4(v31, v30);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Error sending songDownloadDone: %{public}@", v32, 0xCu);
      uint64_t v35 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v33, 1LL, v35);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);

      sub_1000555D4(v31, v30);
      sub_1000555D4(v31, v30);
    }

    else
    {
      sub_1000555D4(*(void *)(v1 + 192), *(_BYTE *)(v1 + 256));
      sub_1000555D4(v31, v30);
      sub_1000555EC(v31, 1);
      sub_1000555EC(v31, 1);
    }

    (*(void (**)(void, void))(*(void *)(v1 + 216) + 8LL))(*(void *)(v1 + 224), *(void *)(v1 + 208));
    goto LABEL_13;
  }

  uint64_t v10 = static Logger.appInstall.getter(a1);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = *(void *)(v1 + 192);
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v14 = 134217984;
    *(void *)(v1 + 184) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 184, v1 + 192, v14 + 4, v14 + 12);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "songDownloadDone successfully processed for pid=%lld",  v14,  0xCu);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  uint64_t v15 = v1 + 16;
  uint64_t v17 = *(void *)(v1 + 192);
  char v16 = *(void **)(v1 + 200);
  (*(void (**)(void, void))(*(void *)(v1 + 216) + 8LL))(*(void *)(v1 + 232), *(void *)(v1 + 208));
  uint64_t v18 = swift_allocObject(&unk_1003DF098, 24LL, 7LL);
  *(void *)(v18 + 16) = v17;
  *(void *)(v1 + 112) = sub_100055610;
  *(void *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v18;
  *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = _NSConcreteStackBlock;
  *(void *)(v1 + 88) = 1107296256LL;
  *(void *)(v1 + 96) = sub_100053240;
  *(void *)(v1 + 104) = &unk_1003DF0B0;
  uint64_t v19 = _Block_copy((const void *)(v1 + 80));
  *(void *)(v1 + 248) = v19;
  swift_release(*(void *)(v1 + 120));
  *(void *)(v1 + 16) = v1;
  *(void *)(v1 + 24) = sub_100053130;
  uint64_t v20 = swift_continuation_init(v1 + 16, 0LL);
  *(void *)(v1 + 128) = _NSConcreteStackBlock;
  os_log_type_t v21 = (void *)(v1 + 128);
  v21[1] = 0x40000000LL;
  _BYTE v21[2] = sub_100053290;
  v21[3] = &unk_1003DF0D8;
  v21[4] = v20;
  [v16 asyncModifyUsingTransaction:v19 completion:v21];
  return swift_continuation_await(v15);
}

uint64_t sub_100053130()
{
  return swift_task_switch(sub_10005317C, 0LL, 0LL);
}

uint64_t sub_10005317C()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1000531C8(void *a1, uint64_t a2)
{
  id v3 = [a1 connection];
  id v4 = [objc_allocWithZone((Class)AppDoneEntity) initWithPersistentID:a2 onConnection:v3];

  id v5 = [v4 deleteFromDatabase];
  return v5;
}

uint64_t sub_100053240(uint64_t a1, void *a2)
{
  id v4 = *(uint64_t (**)(void))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  id v5 = a2;
  LOBYTE(v4) = v4();
  swift_release(v3);

  return v4 & 1;
}

uint64_t sub_100053290(uint64_t a1)
{
  return swift_continuation_resume(*(void *)(a1 + 32));
}

uint64_t sub_100053298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[24] = a6;
  v7[25] = a7;
  v7[22] = a4;
  v7[23] = a5;
  v7[20] = a2;
  v7[21] = a3;
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v7[26] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[27] = v9;
  v7[28] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = (*(void *)(*(void *)(sub_1000079A0(&qword_100458488) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v7[29] = swift_task_alloc(v10);
  v7[30] = swift_task_alloc(v10);
  v7[31] = swift_task_alloc(v10);
  v7[32] = swift_task_alloc(v10);
  return swift_task_switch(sub_10005334C, 0LL, 0LL);
}

uint64_t sub_10005334C()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 264) = v2;
  uint64_t v46 = v2;
  if (!v2)
  {
LABEL_15:
    uint64_t v33 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.nextResult()[1]);
    *(void *)(v0 + 304) = v33;
    uint64_t v34 = sub_1000079A0(&qword_100459B38);
    *uint64_t v33 = v0;
    v33[1] = sub_1000536F0;
    uint64_t v35 = v0 + 144;
    return ThrowingTaskGroup.nextResult()(v35, v34);
  }

  uint64_t v45 = v1 + 32;
  uint64_t v3 = type metadata accessor for TaskPriority(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  swift_bridgeObjectRetain(v1);
  uint64_t v5 = 0LL;
  while (1)
  {
    uint64_t v7 = *(void *)(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 256);
    uint64_t v8 = *(uint64_t (**)(uint64_t))(v0 + 176);
    uint64_t v9 = *(void *)(v45 + 8 * v5);
    *(void *)(v0 + 272) = v3;
    *(void *)(v0 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v4;
    *(void *)(v0 + 288) = v44;
    v44(v6, 1LL, 1LL, v3);
    uint64_t v10 = v8(v9);
    uint64_t v12 = v11;
    uint64_t v13 = (void *)swift_allocObject(&unk_1003DEFF8, 48LL, 7LL);
    v13[2] = 0LL;
    v13[3] = 0LL;
    v13[4] = v10;
    void v13[5] = v12;
    uint64_t v14 = (void *)swift_allocObject(&unk_1003DF020, 48LL, 7LL);
    void v14[2] = 0LL;
    uint64_t v15 = v14 + 2;
    v14[3] = 0LL;
    v14[4] = &unk_100459B28;
    v14[5] = v13;
    sub_100055580(v6, v7);
    char v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
    *(void *)(v0 + 296) = v16;
    uint64_t v17 = v16(v7, 1LL, v3);
    uint64_t v18 = *(void *)(v0 + 248);
    if ((_DWORD)v17 == 1)
    {
      sub_100015240(*(void *)(v0 + 248), &qword_100458488);
      uint64_t v20 = 0LL;
      uint64_t v21 = *v15;
      if (*v15) {
        goto LABEL_5;
      }
    }

    else
    {
      unsigned __int8 v27 = TaskPriority.rawValue.getter(v17);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v18, v3);
      uint64_t v20 = v27;
      uint64_t v21 = *v15;
      if (*v15)
      {
LABEL_5:
        uint64_t v22 = v14[3];
        uint64_t ObjectType = swift_getObjectType(v21, v19);
        swift_unknownObjectRetain(v21);
        uint64_t v24 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v22);
        uint64_t v26 = v25;
        swift_unknownObjectRelease(v21);
        goto LABEL_8;
      }
    }

    uint64_t v24 = 0LL;
    uint64_t v26 = 0LL;
LABEL_8:
    uint64_t v28 = **(void **)(v0 + 160);
    uint64_t v29 = v26 | v24;
    if (v26 | v24)
    {
      uint64_t v29 = v0 + 16;
      *(void *)(v0 + 16) = 0LL;
      *(void *)(v0 + 24) = 0LL;
      *(void *)(v0 + 32) = v24;
      *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v26;
    }

    uint64_t v30 = *(void *)(v0 + 256);
    *(void *)(v0 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 1LL;
    *(void *)(v0 + 88) = v29;
    *(void *)(v0 + 96) = v28;
    uint64_t v31 = swift_task_create(v20 | 0x3100, v0 + 80, &type metadata for Int64, &unk_100459B30, v14);
    swift_release(v31);
    uint64_t result = sub_100015240(v30, &qword_100458488);
    if (v5 == 11) {
      break;
    }
    if (v46 == ++v5) {
      goto LABEL_14;
    }
  }

  if (v46 == 12)
  {
LABEL_14:
    swift_bridgeObjectRelease(*(void *)(v0 + 168));
    goto LABEL_15;
  }

  *(void *)(v0 + 312) = 12LL;
  if (*(void *)(v0 + 264) <= 0xCuLL)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v0 + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(*(void *)(v0 + 168) + 128LL);
    uint64_t v36 = static Logger.appInstall.getter(result);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      NSString v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)NSString v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Waiting for next result", v39, 2u);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    uint64_t v41 = *(void *)(v0 + 216);
    uint64_t v40 = *(void *)(v0 + 224);
    uint64_t v42 = *(void *)(v0 + 208);

    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
    uint64_t v43 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.nextResult()[1]);
    *(void *)(v0 + 328) = v43;
    uint64_t v34 = sub_1000079A0(&qword_100459B38);
    *uint64_t v43 = v0;
    v43[1] = sub_100053764;
    uint64_t v35 = v0 + 128;
    return ThrowingTaskGroup.nextResult()(v35, v34);
  }

  return result;
}

uint64_t sub_1000536F0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 304));
  if (v0)
  {
    *(void *)(v2 + 384) = v0;
    uint64_t v3 = sub_100053E48;
  }

  else
  {
    *(void *)(v2 + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(v2 + 144);
    *(_BYTE *)(v2 + 138) = *(_BYTE *)(v2 + 152);
    uint64_t v3 = sub_100053C1C;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100053764()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 328);
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100053C00;
  }

  else
  {
    *(void *)(v2 + 344) = *(void *)(v2 + 128);
    *(_BYTE *)(v2 + 137) = *(_BYTE *)(v2 + 136);
    uint64_t v4 = sub_1000537D8;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000537D8()
{
  int v1 = *(unsigned __int8 *)(v0 + 137);
  if (v1 == 255)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 168));
    uint64_t v2 = *(void *)(v0 + 248);
    uint64_t v4 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 240);
    uint64_t v5 = *(void *)(v0 + 224);
    swift_task_dealloc(*(void *)(v0 + 256));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v7 = *(int **)(v0 + 192);
    sub_1000555C8(*(void *)(v0 + 344), v1 & 1);
    uint64_t v9 = (int *)((char *)v7 + *v7);
    uint64_t v8 = (void *)swift_task_alloc(v7[1]);
    *(void *)(v0 + 352) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1000538B8;
    return ((uint64_t (*)(void, void))v9)(*(void *)(v0 + 344), *(unsigned __int8 *)(v0 + 137));
  }

uint64_t sub_1000538B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 344LL);
  unsigned __int8 v2 = *(_BYTE *)(*(void *)v0 + 137LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 352LL));
  sub_1000555D4(v1, v2);
  return swift_task_switch(sub_10005391C, 0LL, 0LL);
}

uint64_t sub_10005391C()
{
  uint64_t v1 = *(void *)(v0 + 320);
  unsigned __int8 v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v0 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 288))(v4, 1LL, 1LL, v3);
  uint64_t v7 = v6(v1);
  uint64_t v9 = v8;
  uint64_t v10 = (void *)swift_allocObject(&unk_1003DF048, 48LL, 7LL);
  v10[2] = 0LL;
  v10[3] = 0LL;
  v10[4] = v7;
  v10[5] = v9;
  uint64_t v11 = (void *)swift_allocObject(&unk_1003DF070, 48LL, 7LL);
  v11[2] = 0LL;
  v11[3] = 0LL;
  v11[4] = &unk_100459B40;
  v11[5] = v10;
  sub_100055580(v4, v5);
  uint64_t v12 = v2(v5, 1LL, v3);
  if ((_DWORD)v12 == 1)
  {
    sub_100015240(*(void *)(v0 + 232), &qword_100458488);
    uint64_t v13 = 12544LL;
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 272);
    uint64_t v15 = *(void *)(v0 + 280);
    uint64_t v16 = *(void *)(v0 + 232);
    unsigned __int8 v17 = TaskPriority.rawValue.getter(v12);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
    uint64_t v13 = v17 | 0x3100LL;
  }

  uint64_t v18 = **(void **)(v0 + 160);
  uint64_t v19 = *(void *)(v0 + 344);
  uint64_t v20 = *(void *)(v0 + 264);
  uint64_t v21 = *(void *)(v0 + 240);
  uint64_t v22 = *(void *)(v0 + 312) + 1LL;
  *(void *)(v0 + 104) = 1LL;
  *(void *)(v0 + 112) = 0LL;
  *(void *)(v0 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v18;
  unsigned __int8 v23 = *(_BYTE *)(v0 + 137);
  uint64_t v24 = swift_task_create(v13, v0 + 104, &type metadata for Int64, &unk_100459B48, v11);
  swift_release(v24);
  sub_1000555D4(v19, v23);
  uint64_t result = sub_100015240(v21, &qword_100458488);
  if (v22 == v20)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 168));
    uint64_t v26 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.nextResult()[1]);
    *(void *)(v0 + 304) = v26;
    uint64_t v27 = sub_1000079A0(&qword_100459B38);
    void *v26 = v0;
    v26[1] = sub_1000536F0;
    uint64_t v28 = v0 + 144;
    return ThrowingTaskGroup.nextResult()(v28, v27);
  }

  unint64_t v29 = *(void *)(v0 + 312) + 1LL;
  *(void *)(v0 + 312) = v29;
  if (v29 < *(void *)(v0 + 264))
  {
    *(void *)(v0 + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(*(void *)(v0 + 168) + 8 * v29 + 32);
    uint64_t v30 = static Logger.appInstall.getter(result);
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Waiting for next result", v33, 2u);
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    uint64_t v35 = *(void *)(v0 + 216);
    uint64_t v34 = *(void *)(v0 + 224);
    uint64_t v36 = *(void *)(v0 + 208);

    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v34, v36);
    uint64_t v37 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.nextResult()[1]);
    *(void *)(v0 + 328) = v37;
    uint64_t v27 = sub_1000079A0(&qword_100459B38);
    *uint64_t v37 = v0;
    v37[1] = sub_100053764;
    uint64_t v28 = v0 + 128;
    return ThrowingTaskGroup.nextResult()(v28, v27);
  }

  __break(1u);
  return result;
}

uint64_t sub_100053C00()
{
  return swift_unexpectedError(*(void *)(v0 + 336), "_Concurrency/TaskGroup.swift", 28LL, 1LL, 1173LL);
}

uint64_t sub_100053C1C()
{
  int v1 = *(unsigned __int8 *)(v0 + 138);
  if (v1 == 255)
  {
    uint64_t v2 = *(void *)(v0 + 248);
    uint64_t v4 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 240);
    uint64_t v5 = *(void *)(v0 + 224);
    swift_task_dealloc(*(void *)(v0 + 256));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v7 = *(int **)(v0 + 192);
    sub_1000555C8(*(void *)(v0 + 360), v1 & 1);
    uint64_t v9 = (int *)((char *)v7 + *v7);
    uint64_t v8 = (void *)swift_task_alloc(v7[1]);
    *(void *)(v0 + 368) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100053CF4;
    return ((uint64_t (*)(void, void))v9)(*(void *)(v0 + 360), *(unsigned __int8 *)(v0 + 138));
  }

uint64_t sub_100053CF4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 360LL);
  unsigned __int8 v2 = *(_BYTE *)(*(void *)v0 + 138LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 368LL));
  sub_1000555D4(v1, v2);
  return swift_task_switch(sub_100053D58, 0LL, 0LL);
}

uint64_t sub_100053D58()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to ThrowingTaskGroup.nextResult()[1]);
  *(void *)(v0 + 376) = v1;
  uint64_t v2 = sub_1000079A0(&qword_100459B38);
  void *v1 = v0;
  v1[1] = sub_100053DD4;
  return ThrowingTaskGroup.nextResult()(v0 + 144, v2);
}

uint64_t sub_100053DD4()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 376));
  if (v0)
  {
    *(void *)(v2 + 384) = v0;
    uint64_t v3 = sub_100053E48;
  }

  else
  {
    *(void *)(v2 + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(v2 + 144);
    *(_BYTE *)(v2 + 138) = *(_BYTE *)(v2 + 152);
    uint64_t v3 = sub_100053C1C;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100053E48()
{
  return swift_unexpectedError(*(void *)(v0 + 384), "_Concurrency/TaskGroup.swift", 28LL, 1LL, 1173LL);
}

uint64_t sub_100053E64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  uint64_t v4 = (void *)swift_task_alloc(a3[1]);
  *(void *)(v3 + 16) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100053EB8;
  return v6();
}

uint64_t sub_100053EB8(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 16);
  uint64_t v5 = *v2;
  uint64_t v6 = swift_task_dealloc(v4);
  if (!v1) {
    uint64_t v6 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v6);
}

uint64_t sub_100053F0C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc(a4[1]);
  *(void *)(v4 + 24) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100053F64;
  return v7();
}

uint64_t sub_100053F64(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (!v1) {
    **(void **)(v4 + 16) = a1;
  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t type metadata accessor for AppDownloadDoneTask()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored19AppDownloadDoneTask);
}

uint64_t sub_100054044()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for GlobalState()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstoredP33_147681C71569E93911ECFD5EF52BD4E011GlobalState);
}

uint64_t sub_100054088()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000540B4()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_100459AC4);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100008210;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100459AC0 + dword_100459AC0))(v2, v3);
}

id sub_100054118(uint64_t a1, void *a2)
{
  void (*v4)(void *__return_ptr);
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void v13[3];
  uint64_t v14;
  uint64_t v4 = *(void (**)(void *__return_ptr))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = a2;
  v4(v13);
  swift_release(v3);

  uint64_t v6 = v14;
  if (!v14) {
    return 0LL;
  }
  uint64_t v7 = sub_100015F50(v13, v14);
  uint64_t v8 = *(void *)(v6 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *))(v8 + 16))(v10);
  uint64_t v11 = (void *)_bridgeAnythingToObjectiveC<A>(_:)(v10, v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v6);
  sub_100015340(v13);
  return v11;
}

uint64_t sub_100054204(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2)
  {
    *((void *)&v7 + 1) = (char *)&type metadata for Swift.AnyObject + 8;
    *(void *)&__int128 v6 = a2;
  }

  else
  {
    __int128 v6 = 0u;
    __int128 v7 = 0u;
  }

  sub_1000151F8((uint64_t)&v6, (uint64_t)v8);
  uint64_t v4 = *(void *)(*(void *)(v3 + 64) + 40LL);
  swift_unknownObjectRetain(a2);
  sub_1000151F8((uint64_t)v8, v4);
  return swift_continuation_resume(v3);
}

uint64_t sub_100054288()
{
  qword_1004599A8 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain();
}

uint64_t sub_1000542B8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  uint64_t v5 = static Hasher._hash(seed:_:)(*(void *)(*v2 + 40LL), a1);
  uint64_t v6 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v7 = v5 & ~v6;
  if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(v4 + 48);
  if (*(void *)(v8 + 8 * v7) != a1)
  {
    uint64_t v9 = ~v6;
    do
    {
      unint64_t v7 = (v7 + 1) & v9;
      if (((*(void *)(v4 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) == 0) {
        return 0LL;
      }
    }

    while (*(void *)(v8 + 8 * v7) != a1);
  }

  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v11 = *v2;
  uint64_t v15 = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100062A78();
    uint64_t v11 = v15;
  }

  uint64_t v12 = *(void *)(*(void *)(v11 + 48) + 8 * v7);
  sub_1000543C0(v7);
  uint64_t v13 = *v2;
  *uint64_t v2 = v15;
  swift_bridgeObjectRelease(v13);
  return v12;
}

unint64_t sub_1000543C0(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(v3);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        uint64_t v12 = static Hasher._hash(seed:_:)(*(void *)(v3 + 40), *v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v2);
            if (v2 != v6 || (int64_t v2 = v6, v15 >= v11 + 1))
            {
              *uint64_t v15 = *v11;
              int64_t v2 = v6;
            }
          }
        }

        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v16 = *(void *)(v3 + 16);
  BOOL v17 = __OFSUB__(v16, 1LL);
  uint64_t v18 = v16 - 1;
  if (v17)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + 16) = v18;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_100054544(uint64_t a1, void *a2)
{
  uint64_t v154 = type metadata accessor for URLQueryItem(0LL);
  uint64_t v158 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v155 = (char *)&v142 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_1000079A0(&qword_100459B78);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URLComponents(0LL);
  uint64_t v152 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v151 = (char *)&v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_1000079A0((uint64_t *)&unk_100459B80);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v150 = (char *)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v142 - v13;
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v149 = (char *)&v142 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v153 = (char *)&v142 - v19;
  id v20 = [objc_allocWithZone(AMSURLRequestEncoder) initWithBag:a2];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"account_id");
  uint64_t v23 = v22;
  if (!*(void *)(a1 + 16) || (unint64_t v24 = sub_100023F7C(v21, v22), (v25 & 1) == 0))
  {
    __int128 v162 = 0u;
    __int128 v163 = 0u;
    swift_bridgeObjectRelease(v23);
    goto LABEL_7;
  }

  sub_100016B10(*(void *)(a1 + 56) + 32 * v24, (uint64_t)&v162);
  swift_bridgeObjectRelease(v23);
  if (!*((void *)&v163 + 1))
  {
LABEL_7:
    sub_100015240((uint64_t)&v162, (uint64_t *)&unk_1004594B0);
    goto LABEL_8;
  }

  uint64_t v26 = sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
  if ((swift_dynamicCast(&v159, &v162, (char *)&type metadata for Any + 8, v26, 6LL) & 1) != 0)
  {
    uint64_t v27 = v159;
    id v157 = (id)v159;
    id v28 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
    id v29 = objc_msgSend(v28, "ams_iTunesAccountWithDSID:", v27);
    uint64_t v30 = a2;
    id v31 = v29;

    [v20 setAccount:v31];
    a2 = v30;
  }

LABEL_8:
  [v20 setDialogOptions:1];
  unint64_t v161 = sub_10001DCA0((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"machine_based");
  uint64_t v34 = v33;
  if (*(void *)(a1 + 16) && (unint64_t v35 = sub_100023F7C(v32, v33), (v36 & 1) != 0))
  {
    sub_100016B10(*(void *)(a1 + 56) + 32 * v35, (uint64_t)&v162);
  }

  else
  {
    __int128 v162 = 0u;
    __int128 v163 = 0u;
  }

  swift_bridgeObjectRelease(v34);
  if (*((void *)&v163 + 1))
  {
    if ((swift_dynamicCast(&v159, &v162, (char *)&type metadata for Any + 8, &type metadata for Bool, 6LL) & 1) != 0
      && (v159 & 1) != 0)
    {
      id v37 = [(id)objc_opt_self(AMSDevice) serialNumber];
      if (v37)
      {
        os_log_type_t v38 = v37;
        uint64_t v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
        id v148 = v20;
        uint64_t v40 = a2;
        uint64_t v42 = v41;

        unint64_t v43 = v161;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v161);
        unint64_t v161 = 0x8000000000000000LL;
        *(void *)&__int128 v162 = v43;
        uint64_t v45 = v42;
        a2 = v40;
        id v20 = v148;
        sub_100079BCC(v39, v45, 0x754E6C6169726573LL, 0xEC0000007265626DLL, isUniquelyReferenced_nonNull_native);
        unint64_t v46 = v161;
        unint64_t v161 = v162;
      }

      else
      {
        sub_100067DC0(0x754E6C6169726573LL, 0xEC0000007265626DLL);
        unint64_t v46 = v47;
      }

      swift_bridgeObjectRelease(v46);
    }
  }

  else
  {
    sub_100015240((uint64_t)&v162, (uint64_t *)&unk_1004594B0);
  }

  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"request_url");
  uint64_t v50 = v49;
  if (*(void *)(a1 + 16) && (unint64_t v51 = sub_100023F7C(v48, v49), (v52 & 1) != 0))
  {
    sub_100016B10(*(void *)(a1 + 56) + 32 * v51, (uint64_t)&v162);
  }

  else
  {
    __int128 v162 = 0u;
    __int128 v163 = 0u;
  }

  swift_bridgeObjectRelease(v50);
  if (!*((void *)&v163 + 1))
  {
    sub_100015240((uint64_t)&v162, (uint64_t *)&unk_1004594B0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1LL, 1LL, v15);
    goto LABEL_29;
  }

  int v53 = swift_dynamicCast(v14, &v162, (char *)&type metadata for Any + 8, v15, 6LL);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, v53 ^ 1u, 1LL, v15);
  id v54 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  if (v54(v14, 1LL, v15) == 1)
  {
LABEL_29:
    sub_100015240((uint64_t)v14, (uint64_t *)&unk_100459B80);
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"item_id");
    uint64_t v60 = v59;
    if (*(void *)(a1 + 16) && (unint64_t v61 = sub_100023F7C(v58, v59), (v62 & 1) != 0))
    {
      sub_100016B10(*(void *)(a1 + 56) + 32 * v61, (uint64_t)&v162);
    }

    else
    {
      __int128 v162 = 0u;
      __int128 v163 = 0u;
    }

    swift_bridgeObjectRelease(v60);
    if (*((void *)&v163 + 1))
    {
      if ((swift_dynamicCast(&v159, &v162, (char *)&type metadata for Any + 8, &type metadata for Int64, 6LL) & 1) == 0)
      {
LABEL_69:

        goto LABEL_70;
      }

      uint64_t v63 = a2;
      uint64_t v64 = v159;
      uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"transaction_id");
      uint64_t v67 = v66;
      if (*(void *)(a1 + 16) && (unint64_t v68 = sub_100023F7C(v65, v66), (v69 & 1) != 0))
      {
        sub_100016B10(*(void *)(a1 + 56) + 32 * v68, (uint64_t)&v162);
      }

      else
      {
        __int128 v162 = 0u;
        __int128 v163 = 0u;
      }

      swift_bridgeObjectRelease(v67);
      if (*((void *)&v163 + 1))
      {
        if ((swift_dynamicCast(&v159, &v162, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
        {
          uint64_t v112 = v159;
          uint64_t v111 = v160;
          uint64_t v113 = HIBYTE(v160) & 0xF;
          if ((v160 & 0x2000000000000000LL) == 0) {
            uint64_t v113 = v159 & 0xFFFFFFFFFFFFLL;
          }
          if (v113)
          {
            id v114 = [v20 account];
            id v115 = [v63 URLForKey:@"songDownloadDone" account:v114];

            *(void *)&__int128 v162 = v64;
            uint64_t v116 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
            uint64_t v118 = v117;
            unint64_t v119 = v161;
            char v120 = swift_isUniquelyReferenced_nonNull_native(v161);
            unint64_t v161 = 0x8000000000000000LL;
            *(void *)&__int128 v162 = v119;
            sub_100079BCC(v116, v118, 0x6449676E6F73LL, 0xE600000000000000LL, v120);
            uint64_t v121 = v162;
            swift_bridgeObjectRelease(v161);
            char v122 = swift_isUniquelyReferenced_nonNull_native(v121);
            *(void *)&__int128 v162 = v121;
            sub_100079BCC(v112, v111, 0x64616F6C6E776F64LL, 0xEB0000000064692DLL, v122);
            uint64_t v123 = v162;
            swift_bridgeObjectRelease(0x8000000000000000LL);
            Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease(v123);
            id v125 = [v20 requestWithMethod:2 bagURL:v115 parameters:isa];

            return (uint64_t)v125;
          }

          unint64_t v141 = v161;
          swift_bridgeObjectRelease(v160);

          swift_bridgeObjectRelease(v141);
          return 0LL;
        }

        goto LABEL_69;
      }
    }

    sub_100015240((uint64_t)&v162, (uint64_t *)&unk_1004594B0);
LABEL_70:
    swift_bridgeObjectRelease(v161);
    return 0LL;
  }

  uint64_t v147 = (uint64_t (*)(char *, uint64_t, uint64_t))v54;
  uint64_t v55 = v153;
  uint64_t v146 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v146(v153, v14, v15);
  URLComponents.init(url:resolvingAgainstBaseURL:)(v55, 1LL);
  uint64_t v56 = v152;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v152 + 48))(v7, 1LL, v8) == 1)
  {

    (*(void (**)(char *, uint64_t))(v16 + 8))(v55, v15);
    swift_bridgeObjectRelease(v161);
    Swift::String v57 = &qword_100459B78;
LABEL_75:
    sub_100015240((uint64_t)v7, v57);
    return 0LL;
  }

  uint64_t v143 = v16;
  uint64_t v144 = v15;
  id v148 = v20;
  unint64_t v70 = *(uint64_t (**)(char *, char *, uint64_t))(v56 + 32);
  uint64_t v145 = v8;
  uint64_t v71 = v70(v151, v7, v8);
  uint64_t v72 = (void *)URLComponents.queryItems.getter(v71);
  if (!v72) {
    uint64_t v72 = _swiftEmptyArrayStorage;
  }
  uint64_t v73 = v72[2];
  if (!v73)
  {
    swift_bridgeObjectRelease(v72);
LABEL_73:
    uint64_t v126 = v151;
    uint64_t v127 = URLComponents.queryItems.setter(0LL);
    uint64_t v7 = v150;
    URLComponents.url.getter(v127);
    uint64_t v128 = v144;
    int v129 = v147(v7, 1LL, v144);
    id v130 = v148;
    uint64_t v131 = v145;
    __int128 v132 = v153;
    if (v129 != 1)
    {
      uint64_t v134 = v149;
      v146(v149, v7, v128);
      URL._bridgeToObjectiveC()(v135);
      unint64_t v137 = v136;
      unint64_t v138 = v161;
      Class v139 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v138);
      id v125 = [v130 requestWithMethod:2 URL:v137 parameters:v139];

      uint64_t v140 = *(void (**)(char *, uint64_t))(v143 + 8);
      v140(v134, v128);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v126, v131);
      v140(v132, v128);
      return (uint64_t)v125;
    }

    (*(void (**)(char *, uint64_t))(v56 + 8))(v126, v131);
    (*(void (**)(char *, uint64_t))(v143 + 8))(v132, v128);
    swift_bridgeObjectRelease(v161);
    Swift::String v57 = (uint64_t *)&unk_100459B80;
    goto LABEL_75;
  }

  unint64_t v74 = (*(unsigned __int8 *)(v158 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v158 + 80);
  uint64_t v142 = v72;
  id v75 = (char *)v72 + v74;
  uint64_t v76 = *(void **)(v158 + 16);
  uint64_t v156 = *(void *)(v158 + 72);
  id v157 = v76;
  uint64_t v77 = v154;
  uint64_t v78 = v155;
  for (uint64_t i = ((uint64_t (*)(char *, char *, uint64_t))v76)(v155, v75, v154);
        ;
        uint64_t i = ((uint64_t (*)(char *, char *, uint64_t))v157)(v78, v75, v77))
  {
    uint64_t v82 = URLQueryItem.name.getter(i);
    uint64_t v84 = v83;
    uint64_t v85 = URLQueryItem.value.getter();
    unint64_t v87 = v161;
    if (!v86)
    {
      swift_bridgeObjectRetain(v161);
      unint64_t v99 = sub_100023F7C(v82, v84);
      char v101 = v100;
      swift_bridgeObjectRelease(v87);
      if ((v101 & 1) != 0)
      {
        uint64_t v102 = v161;
        char v103 = swift_isUniquelyReferenced_nonNull_native(v161);
        *(void *)&__int128 v162 = v102;
        if ((v103 & 1) == 0)
        {
          sub_10007B000();
          uint64_t v102 = v162;
        }

        swift_bridgeObjectRelease(*(void *)(*(void *)(v102 + 48) + 16 * v99 + 8));
        uint64_t v104 = *(void *)(*(void *)(v102 + 56) + 16 * v99 + 8);
        sub_1000687B0(v99, v102);
        unint64_t v161 = v102;
        swift_bridgeObjectRelease(v104);
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(0x8000000000000000LL);
      }

      else
      {
        swift_bridgeObjectRelease(v84);
      }

      goto LABEL_44;
    }

    uint64_t v88 = v85;
    uint64_t v89 = v86;
    uint64_t v90 = swift_isUniquelyReferenced_nonNull_native(v161);
    unint64_t v161 = 0x8000000000000000LL;
    *(void *)&__int128 v162 = v87;
    unint64_t v92 = sub_100023F7C(v82, v84);
    uint64_t v93 = *(void *)(v87 + 16);
    BOOL v94 = (v91 & 1) == 0;
    uint64_t v95 = v93 + v94;
    if (__OFADD__(v93, v94)) {
      break;
    }
    char v96 = v91;
    if (*(void *)(v87 + 24) >= v95)
    {
      if ((v90 & 1) == 0) {
        sub_10007B000();
      }
    }

    else
    {
      sub_100078A18(v95, v90);
      unint64_t v97 = sub_100023F7C(v82, v84);
      if ((v96 & 1) != (v98 & 1)) {
        goto LABEL_82;
      }
      unint64_t v92 = v97;
    }

    uint64_t v78 = v155;
    uint64_t v105 = (void *)v162;
    if ((v96 & 1) != 0)
    {
      uint64_t v80 = (uint64_t *)(*(void *)(v162 + 56) + 16 * v92);
      swift_bridgeObjectRelease(v80[1]);
      *uint64_t v80 = v88;
      v80[1] = v89;
    }

    else
    {
      *(void *)(v162 + 8 * (v92 >> 6) + 64) |= 1LL << v92;
      id v106 = (uint64_t *)(v105[6] + 16 * v92);
      *id v106 = v82;
      v106[1] = v84;
      uint64_t v107 = (uint64_t *)(v105[7] + 16 * v92);
      *uint64_t v107 = v88;
      v107[1] = v89;
      uint64_t v108 = v105[2];
      BOOL v109 = __OFADD__(v108, 1LL);
      uint64_t v110 = v108 + 1;
      if (v109) {
        goto LABEL_81;
      }
      v105[2] = v110;
      swift_bridgeObjectRetain(v84);
    }

    unint64_t v81 = v161;
    unint64_t v161 = (unint64_t)v105;
    swift_bridgeObjectRelease(v84);
    swift_bridgeObjectRelease(v81);
    uint64_t v77 = v154;
LABEL_44:
    (*(void (**)(char *, uint64_t))(v158 + 8))(v78, v77);
    v75 += v156;
    if (!--v73)
    {
      swift_bridgeObjectRelease(v142);
      uint64_t v56 = v152;
      goto LABEL_73;
    }
  }

  __break(1u);
LABEL_81:
  __break(1u);
LABEL_82:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

  return a1;
}

    uint64_t v7 = 0;
  }

  return a1;
}

  return a1;
}

    uint64_t v7 = 0;
  }

    uint64_t v229 = (void *)v7;
    uint64_t v12 = Property;
    goto LABEL_10;
  }

  if (!a2)
  {
    uint64_t v6 = -[LogKey initWithCategory:base:]( objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey),  "initWithCategory:base:",  @"NonOrdered",  &stru_1003F3E40);
    uint64_t v7 = objc_claimAutoreleasedReturnValue(-[LogKey makeActivity](v6, "makeActivity"));

    Property = self;
    if (self)
    {
      uint64_t v10 = 24LL;
LABEL_7:
      Property = objc_getProperty(Property, v8, v10, 1);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

  uint64_t v12 = 0LL;
  uint64_t v229 = 0LL;
LABEL_10:
  int v227 = v12;
  uint64_t v13 = [v12 count];
  uint64_t v14 = ASDLogHandleForCategory(29LL);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  uint64_t v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v13)
  {
    uint64_t v17 = v229;
    if (v16)
    {
      *(_DWORD *)buf = 138412546;
      *(void *)&buf[4] = v229;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = [v227 count];
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[%@] Attempting metadata lookup for %ld apps",  buf,  0x16u);
    }

    v256 = 0u;
    uint64_t v257 = 0u;
    id v254 = 0u;
    unint64_t v255 = 0u;
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v227 keyEnumerator]);
    unint64_t v228 = [v18 countByEnumeratingWithState:&v254 objects:v275 count:16];
    if (!v228)
    {

      unint64_t v233 = 0LL;
      uint64_t v218 = 0LL;
      goto LABEL_251;
    }

    os_log_t v231 = 0LL;
    unint64_t v233 = 0LL;
    id v225 = *(void *)v255;
    uint64_t v237 = ASDErrorDomain;
    p_superclass = &OBJC_METACLASS___SystemAppLookupItem.superclass;
    uint64_t v226 = v18;
    while (1)
    {
      id v20 = 0LL;
      do
      {
        if (*(void *)v255 != v225) {
          objc_enumerationMutation(v18);
        }
        uint64_t v230 = v20;
        uint64_t v21 = *(void *)(*((void *)&v254 + 1) + 8 * v20);
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
        uint64_t v236 = v21;
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "ams_iTunesAccountWithDSID:", v21));

        unint64_t v24 = objc_alloc(&OBJC_CLASS___RestoreBatchInfo);
        if (self) {
          char v25 = self[2];
        }
        else {
          char v25 = 0LL;
        }
        id v234 = v23;
        if (v24)
        {
          *(void *)buf = v24;
          *(void *)&buf[8] = &OBJC_CLASS___RestoreBatchInfo;
          uint64_t v26 = (RestoreBatchInfo *)objc_msgSendSuper2((objc_super *)buf, "init");
          unint64_t v24 = v26;
          if (v26)
          {
            objc_storeStrong((id *)&v26->_account, v23);
            v24->_batchSize = v25;
            uint64_t v27 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
            hardFailures = v24->_hardFailures;
            v24->_hardFailures = (NSMutableArray *)v27;

            id v29 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
            softFailures = v24->_softFailures;
            v24->_softFailures = (NSMutableArray *)v29;

            id v31 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
            successes = v24->_successes;
            v24->_successes = (NSMutableArray *)v31;

            uint64_t v33 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
            tokenFailures = v24->_tokenFailures;
            v24->_tokenFailures = (NSMutableArray *)v33;
          }
        }

        if (!v232)
        {
          unint64_t v35 = self;
          if (!v24) {
            goto LABEL_235;
          }
          v24->_autoFinish = 1;
          if (!self)
          {
            char v36 = 0;
            goto LABEL_30;
          }

          goto LABEL_29;
        }

        unint64_t v35 = self;
        if (self)
        {
          if (!v24) {
            goto LABEL_235;
          }
          v24->_autoFinish = self[1] & 1;
LABEL_29:
          char v36 = v35[1] & 1;
          goto LABEL_30;
        }

        if (!v24)
        {
LABEL_235:
          os_log_type_t v38 = 1;
          id v37 = v227;
          goto LABEL_31;
        }

        char v36 = 0;
        v24->_autoFinish = 0;
LABEL_30:
        id v37 = v227;
        os_log_type_t v38 = 0;
        v24->_userInitiated = v36;
        v24->_failCoordinators = v224 != 0LL;
LABEL_31:
        uint64_t v39 = (id)objc_claimAutoreleasedReturnValue([v37 objectForKeyedSubscript:v236]);
        uint64_t v40 = v24;
        int v239 = v39;
        unint64_t v244 = v40;
        uint64_t v246 = v38;
        if (![v39 count])
        {
          uint64_t v42 = 0LL;
          goto LABEL_184;
        }

        uint64_t v241 = 0LL;
        uint64_t v41 = 0LL;
        uint64_t v42 = 0LL;
        do
        {
          if (v38)
          {
            if (v41 < (unint64_t)[v39 count])
            {
              batchSize = 0LL;
              goto LABEL_39;
            }
          }

          else
          {
            unint64_t v43 = v40->_batchSize + v41;
            if (v43 < (unint64_t)[v39 count])
            {
              batchSize = (char *)v40->_batchSize;
              goto LABEL_39;
            }
          }

          batchSize = (char *)[v39 count] - v41;
LABEL_39:
          id v243 = batchSize;
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v39 subarrayWithRange:v41]);
          obj = v45;
          if (v42)
          {
            v272 = 0u;
            unint64_t v273 = 0u;
            v270 = 0u;
            uint64_t v271 = 0u;
            unint64_t v46 = [v45 countByEnumeratingWithState:&v270 objects:buf count:16];
            if (v46)
            {
              unint64_t v47 = v46;
              uint64_t v48 = v41;
              uint64_t v49 = *(void *)v271;
              do
              {
                uint64_t v50 = 0LL;
                do
                {
                  if (*(void *)v271 != v49) {
                    objc_enumerationMutation(obj);
                  }
                  unint64_t v51 = *(void **)(*((void *)&v270 + 1) + 8LL * (void)v50);
                  sub_1002D7A84(v51, v42);
                  if ((v38 & 1) != 0) {
                    int v53 = 0LL;
                  }
                  else {
                    int v53 = objc_getProperty(v40, v52, 56LL, 1);
                  }
                  [v53 addObject:v51];
                  uint64_t v50 = (char *)v50 + 1;
                }

                while (v47 != v50);
                id v54 = [obj countByEnumeratingWithState:&v270 objects:buf count:16];
                unint64_t v47 = v54;
              }

              while (v54);
              uint64_t v41 = v48;
            }

            goto LABEL_151;
          }

          uint64_t v55 = v45;
          uint64_t v56 = v40;
          Swift::String v57 = v55;
          uint64_t v58 = sub_1001FF38C((id *)objc_alloc(&OBJC_CLASS___RestoreBatchTask), v57);

          if ((v38 & 1) != 0) {
            uint64_t v60 = 0LL;
          }
          else {
            uint64_t v60 = objc_getProperty(v56, v59, 16LL, 1);
          }
          uint64_t v242 = v41;
          if (v58) {
            objc_setProperty_atomic_copy(v58, v59, v60, 40LL);
          }
          unint64_t v61 = *(void *)(a1 + 16);
          v288 = v58;
          char v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v288,  1LL));
          if (v61) {
            [*(id *)(v61 + 8) addOperations:v62 waitUntilFinished:1];
          }

          if (v58) {
            uint64_t v64 = objc_getProperty(v58, v63, 32LL, 1);
          }
          else {
            uint64_t v64 = 0LL;
          }
          uint64_t v65 = v64;

          if (v65)
          {
            if (v58) {
              uint64_t v67 = objc_getProperty(v58, v66, 32LL, 1);
            }
            else {
              uint64_t v67 = 0LL;
            }
            unint64_t v68 = v67;
          }

          else
          {
            unint64_t v68 = 0LL;
          }

          char v69 = sub_1002EEBC0((uint64_t)&OBJC_CLASS___AppInstallsDatabaseStore);
          unint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
          *(void *)v279 = _NSConcreteStackBlock;
          *(void *)&v279[8] = 3221225472LL;
          *(void *)&v279[16] = sub_100219620;
          v280 = &unk_1003EA9D8;
          uint64_t v71 = v58;
          v281[0] = v71;
          [v70 modifyUsingTransaction:v279];

          if (v58) {
            uint64_t v73 = objc_getProperty(v71, v72, 64LL, 1);
          }
          else {
            uint64_t v73 = 0LL;
          }
          unint64_t v74 = v73;

          if (v74)
          {
            if ((v38 & 1) != 0) {
              uint64_t v76 = 0LL;
            }
            else {
              uint64_t v76 = objc_getProperty(v56, v75, 32LL, 1);
            }
            uint64_t v78 = v76;
            if (v58) {
              uint64_t v79 = objc_getProperty(v71, v77, 64LL, 1);
            }
            else {
              uint64_t v79 = 0LL;
            }
            uint64_t v80 = v79;
            [v78 addObjectsFromArray:v80];

            os_log_type_t v38 = v246;
          }

          if (v58) {
            unint64_t v81 = objc_getProperty(v71, v75, 72LL, 1);
          }
          else {
            unint64_t v81 = 0LL;
          }
          uint64_t v82 = v81;

          if (v82)
          {
            if ((v38 & 1) != 0) {
              uint64_t v84 = 0LL;
            }
            else {
              uint64_t v84 = objc_getProperty(v56, v83, 40LL, 1);
            }
            uint64_t v86 = v84;
            if (v58) {
              unint64_t v87 = objc_getProperty(v71, v85, 72LL, 1);
            }
            else {
              unint64_t v87 = 0LL;
            }
            uint64_t v88 = v87;
            [v86 addObjectsFromArray:v88];

            os_log_type_t v38 = v246;
          }

          if (v58) {
            uint64_t v89 = objc_getProperty(v71, v83, 80LL, 1);
          }
          else {
            uint64_t v89 = 0LL;
          }
          uint64_t v90 = v89;

          if (v90)
          {
            if ((v38 & 1) != 0) {
              unint64_t v92 = 0LL;
            }
            else {
              unint64_t v92 = objc_getProperty(v56, v91, 48LL, 1);
            }
            BOOL v94 = v92;
            if (v58) {
              uint64_t v95 = objc_getProperty(v71, v93, 80LL, 1);
            }
            else {
              uint64_t v95 = 0LL;
            }
            char v96 = v95;
            [v94 addObjectsFromArray:v96];

            os_log_type_t v38 = v246;
          }

          unint64_t v97 = v68;
          uint64_t v42 = v97;
          uint64_t v240 = v97;
          if (!v97) {
            goto LABEL_107;
          }
          if (!ASDErrorIsEqual(v97, v237, 744LL))
          {
            uint64_t v42 = 0LL;
LABEL_107:
            uint64_t v41 = v242;
            goto LABEL_108;
          }

          uint64_t v42 = [v42 copy];
          v266 = 0u;
          v267 = 0u;
          uint64_t v268 = 0u;
          uint64_t v269 = 0u;
          char v98 = v57;
          unint64_t v99 = [v98 countByEnumeratingWithState:&v266 objects:v282 count:16];
          if (v99)
          {
            char v100 = v99;
            char v101 = *(void *)v267;
            do
            {
              uint64_t v102 = 0LL;
              do
              {
                if (*(void *)v267 != v101) {
                  objc_enumerationMutation(v98);
                }
                char v103 = *(void **)(*((void *)&v266 + 1) + 8LL * (void)v102);
                sub_1002D7A84(v103, v42);
                if ((v246 & 1) != 0) {
                  uint64_t v105 = 0LL;
                }
                else {
                  uint64_t v105 = objc_getProperty(v56, v104, 56LL, 1);
                }
                [v105 addObject:v103];
                uint64_t v102 = (char *)v102 + 1;
              }

              while (v100 != v102);
              id v106 = [v98 countByEnumeratingWithState:&v266 objects:v282 count:16];
              char v100 = v106;
            }

            while (v106);
          }

          uint64_t v107 = ASDLogHandleForCategory(29LL);
          uint64_t v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v107);
          os_log_type_t v38 = v246;
          if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
          {
            id v165 = [v98 count];
            if ((v246 & 1) != 0) {
              Class v166 = 0LL;
            }
            else {
              Class v166 = objc_getProperty(v56, v164, 16LL, 1);
            }
            id v167 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v166, "ams_DSID"));
            *(_DWORD *)v279 = 134218242;
            *(void *)&v279[4] = v165;
            *(_WORD *)&v279[12] = 2114;
            *(void *)&v279[14] = v167;
            _os_log_error_impl( (void *)&_mh_execute_header,  v108,  OS_LOG_TYPE_ERROR,  "Failed %ld items for accountID: %{public}@ due to token error",  v279,  0x16u);
          }

          uint64_t v41 = v242;
          BOOL v109 = (_BYTE *)[v39 count] - &v243[v242];
          if (v109 >= 1)
          {
            uint64_t v110 = ASDLogHandleForCategory(29LL);
            uint64_t v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
            if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
            {
              if ((v246 & 1) != 0) {
                id v168 = 0LL;
              }
              else {
                id v168 = objc_getProperty(v56, v112, 16LL, 1);
              }
              uint64_t v169 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v168, "ams_DSID"));
              *(_DWORD *)v279 = 134218242;
              *(void *)&v279[4] = v109;
              *(_WORD *)&v279[12] = 2114;
              *(void *)&v279[14] = v169;
              _os_log_error_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_ERROR,  "Failing out remaining %ld items for accountID: %{public}@ due to token error",  v279,  0x16u);

              uint64_t v41 = v242;
            }
          }

  return a1;
}

      uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
      uint64_t v16 = sub_100323DF4(v9);
      else {
        uint64_t v17 = v15;
      }
      *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = v17;
      [*(id *)(a1 + 40) addObject:v9];
      ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
      goto LABEL_35;
    }

    goto LABEL_34;
  }

  if ((*(unsigned int (**)(void))(*(void *)(a1 + 48) + 16LL))())
  {
    id v31 = ASDLogHandleForCategory(30LL);
    uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v48 = sub_100323DF4(v9);
      uint64_t v49 = sub_100323C54(v9);
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
      *(_DWORD *)unint64_t v51 = 134218242;
      *(void *)&v51[4] = v48;
      *(_WORD *)&v51[12] = 2114;
      *(void *)&v51[14] = v50;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "Jettison candidate (%ld), starting: %{public}@",  v51,  0x16u);
    }

    [*(id *)(*(void *)(a1 + 32) + 32) removeObject:v30];
    sub_1001B47BC(*(id **)(a1 + 32), [v30 databaseID], 10, 1uLL);
    [*(id *)(a1 + 40) addObject:v9];
  }

LABEL_35:
}

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(a1 + 56)));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"event_type",  v6));

LABEL_10:
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v4 connection]);

  uint64_t v13 = *(void **)(a1 + 40);
  uint64_t v15 = sub_1002CBF9C(*(void **)(a1 + 32), v14);
  uint64_t v16 = sub_10024C92C((uint64_t)&OBJC_CLASS___SQLiteEntity, v12, v7, v13, v15);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);

  uint64_t v19 = objc_msgSend(sub_1002CBF9C(*(void **)(a1 + 32), v18), "defaultProperties");
  id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  _BYTE v21[2] = sub_10022D1A8;
  v21[3] = &unk_1003E98A8;
  uint64_t v22 = *(id *)(a1 + 48);
  [v17 enumerateMemoryEntitiesWithProperties:v20 usingBlock:v21];
}

  a1 = a1;
  uint64_t v27 = a1;
LABEL_10:

  return v27;
}
}

uint64_t sub_1000551F4(uint64_t result, uint64_t a2)
{
  uint64_t v3 = v2;
  unint64_t v4 = 0LL;
  unint64_t v5 = *(void *)(result + 16);
  uint64_t v6 = a2 + 112;
  uint64_t v7 = result + 32;
  uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_2:
  if (v4 <= v5) {
    unint64_t v9 = v5;
  }
  else {
    unint64_t v9 = v4;
  }
  while (1)
  {
    if (v5 == v4) {
      return (uint64_t)v8;
    }
    if (v9 == v4) {
      break;
    }
    uint64_t v10 = *(void *)(v7 + 8 * v4++);
    swift_beginAccess(v6, v15, 33LL, 0LL);
    char v11 = sub_100061828(&v16, v10);
    uint64_t result = swift_endAccess(v15);
    if ((v11 & 1) != 0)
    {
      uint64_t result = swift_isUniquelyReferenced_nonNull_native(v8);
      uint64_t v17 = v8;
      uint64_t v14 = v3;
      if ((result & 1) == 0)
      {
        uint64_t result = sub_10007F7BC(0, v8[2] + 1LL, 1);
        uint64_t v8 = v17;
      }

      unint64_t v13 = v8[2];
      unint64_t v12 = v8[3];
      if (v13 >= v12 >> 1)
      {
        uint64_t result = sub_10007F7BC(v12 > 1, v13 + 1, 1);
        uint64_t v8 = v17;
      }

      v8[2] = v13 + 1;
      v8[v13 + 4] = v10;
      uint64_t v3 = v14;
      goto LABEL_2;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_100055324()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void *sub_100055358(uint64_t a1)
{
  return sub_100052174(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100055364()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100055388(uint64_t a1, char a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = (void *)swift_task_alloc(dword_100459AFC);
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100007C40;
  return sub_100052C1C(a1, a2, v6);
}

uint64_t sub_1000553EC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  char v11 = (void *)swift_task_alloc(dword_100459B0C);
  *(void *)(v3 + 16) = v11;
  void *v11 = v3;
  v11[1] = sub_100007C40;
  return sub_100053298(a1, a2, v6, v7, v8, v9, v10);
}

uint64_t sub_100055480()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  unint64_t v4 = (int *)v0[4];
  unint64_t v5 = (void *)swift_task_alloc(dword_100459B1C);
  *(void *)(v1 + 16) = v5;
  *unint64_t v5 = v1;
  v5[1] = sub_100055898;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_100459B18 + dword_100459B18))(v2, v3, v4);
}

uint64_t sub_1000554FC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_100459B24);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100008210;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_100459B20 + dword_100459B20))( a1,  v4,  v5,  v6);
}

uint64_t sub_100055580(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0(&qword_100458488);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000555C8(uint64_t result, uint64_t a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRetain(result, a2);
  }
  return result;
}

uint64_t sub_1000555D4(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255) {
    return sub_1000555EC(result, a2 & 1);
  }
  return result;
}

uint64_t sub_1000555EC(uint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_100055600()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

id sub_100055610(void *a1)
{
  return sub_1000531C8(a1, *(void *)(v1 + 16));
}

uint64_t sub_100055618(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100055628(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100055630()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100055664()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = (void *)swift_task_alloc(dword_100459B5C);
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_1000556D8;
  return sub_1000521F4(v2, v3, v4, v5);
}

uint64_t sub_1000556D8(uint64_t a1)
{
  uint64_t v4 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_100055728()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_10005574C(void *a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_100055754()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void *sub_100055778@<X0>(void *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v4);
  *a1 = v4;
  return result;
}

uint64_t sub_1000557B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v2 + 16);
  *(void *)(a2 + 24) = sub_10001517C(0LL, &qword_100459BF0, off_1003DA108);
  return v4(a1);
}

uint64_t sub_100055804@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v2 + 16);
  *(void *)(a2 + 24) = sub_1000079A0(&qword_100459BF8);
  return v4(a1);
}

uint64_t sub_10005584C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10005585C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100051C30(a1, a2, a3, *(uint64_t **)(v3 + 16));
}

uint64_t sub_100055864()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10005589C(uint64_t a1, void (*a2)(uint64_t *__return_ptr, id *), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = a1;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v22 = a1;
    }
    else {
      uint64_t v22 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v22);
    swift_bridgeObjectRelease(v7);
  }

  else
  {
    uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v9 = *v4;
  uint64_t v10 = *(void *)(*v4 + 16);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8))
  {
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    uint64_t v7 = *(void *)(*v4 + 16);
    sub_10006EB00();
    if (!v23) {
      goto LABEL_14;
    }
    uint64_t v24 = v23;
    while (1)
    {
LABEL_24:
      uint64_t v25 = *v4;
      unint64_t v26 = *(void *)(*v4 + 24);
      int64_t v27 = v26 >> 1;
      if ((uint64_t)(v26 >> 1) < v7 + 1)
      {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v7 + 1, 1LL);
        uint64_t v25 = *v4;
        int64_t v27 = *(void *)(*v4 + 24) >> 1;
        if (v7 < v27)
        {
LABEL_26:
          uint64_t v28 = v25 + 32;
          while (1)
          {
            *(void *)(v28 + 8 * v7++) = v24;
            sub_10006EB00();
            if (!v29) {
              break;
            }
            uint64_t v24 = v29;
            if (v27 == v7)
            {
              uint64_t v7 = v27;
              *(void *)(*v4 + 16) = v27;
              goto LABEL_24;
            }
          }

LABEL_33:
          *(void *)(*v4 + 16) = v7;
          goto LABEL_14;
        }
      }

      else if (v7 < v27)
      {
        goto LABEL_26;
      }

      *(void *)(v25 + 16) = v7;
    }
  }

  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
  *uint64_t v4 = v9;
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || (uint64_t v13 = *(void *)(v9 + 24) >> 1, v13 < v11))
  {
    if (v10 <= v11) {
      v10 += v8;
    }
    swift_bridgeObjectRetain(v9);
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( isUniquelyReferenced_nonNull_native,  v10,  1LL,  v9);
    swift_bridgeObjectRelease(*v4);
    *uint64_t v4 = v9;
    uint64_t v13 = *(void *)(v9 + 24) >> 1;
  }

  uint64_t v14 = *(void *)(v9 + 16);
  uint64_t v15 = v13 - v14;
  uint64_t v16 = sub_100063A7C(v30, v9 + 8 * v14 + 32, v13 - v14, v7, a2, a3);
  if (v16 < v8) {
    goto LABEL_20;
  }
  if (v16 >= 1)
  {
    uint64_t v17 = *(void *)(*v4 + 16);
    BOOL v18 = __OFADD__(v17, v16);
    uint64_t v19 = v17 + v16;
    if (v18)
    {
      __break(1u);
      goto LABEL_33;
    }

    *(void *)(*v4 + 16) = v19;
  }

  if (v16 == v15) {
    goto LABEL_21;
  }
LABEL_14:
  swift_bridgeObjectRelease(v30[0]);
  uint64_t v20 = swift_release(v30[3]);
  return specialized Array._endMutation()(v20);
}

    __break(1u);
    return result;
  }

    uint64_t v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    id v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v5 + 48) + v31);
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      uint64_t v34 = v32;
      swift_bridgeObjectRetain(v33);
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    BOOL v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          BOOL v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v32;
    *(void *)(*(void *)(v8 + 56) + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v36;
  uint64_t v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  unint64_t v35 = 1LL << *(_BYTE *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    os_log_s *v24 = -1LL << v35;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

        unint64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }

      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v20);
      uint64_t v30 = *v29;
      id v31 = v29[1];
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(v29[1]);
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v28);
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v24 = 0;
        uint64_t v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }

          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0LL;
          }
          v24 |= v26;
          int64_t v27 = *(void *)(v13 + 8 * v16);
        }

        while (v27 == -1);
        uint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      *(void *)(*(void *)(v8 + 48) + 8 * v17) = v28;
      BOOL v18 = (void *)(*(void *)(v8 + 56) + 16 * v17);
      *BOOL v18 = v30;
      v18[1] = v31;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v24 - 1) & v24;
    uint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_34:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    id v31 = v30[1];
    uint64_t v33 = *(_BYTE *)(*(void *)(v5 + 56) + v21);
    if ((v38 & 1) == 0) {
      swift_bridgeObjectRetain(v30[1]);
    }
    Hasher.init(_seed:)(v39);
    String.hash(into:)(v39, v32, v31);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      BOOL v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      unint64_t v26 = 0;
      int64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          uint64_t v17 = 0LL;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }

      while (v29 == -1);
      BOOL v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    *uint64_t v19 = v32;
    v19[1] = v31;
    *(_BYTE *)(*(void *)(v8 + 56) + v18) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1LL << *(_BYTE *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v23 = -1LL << v34;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    unint64_t v12 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    id v31 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v22);
    uint64_t v33 = *v31;
    uint64_t v32 = v31[1];
    uint64_t v34 = *(void **)(*(void *)(v6 + 56) + 8 * v22);
    if ((v40 & 1) == 0)
    {
      swift_bridgeObjectRetain(v31[1]);
      unint64_t v35 = v34;
    }

    Hasher.init(_seed:)(v41);
    String.hash(into:)(v41, v33, v32);
    uint64_t result = Hasher._finalize()();
    uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v17 = result & ~v16;
    BOOL v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          BOOL v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = (void *)(*(void *)(v9 + 48) + 16 * v19);
    *uint64_t v20 = v33;
    v20[1] = v32;
    *(void *)(*(void *)(v9 + 56) + 8 * v19) = v34;
    ++*(void *)(v9 + 16);
  }

  swift_release(v6);
  uint64_t v4 = v37;
  uint64_t v24 = (void *)(v6 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v36 = 1LL << *(_BYTE *)(v6 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    os_log_s *v24 = -1LL << v36;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v6);
  *uint64_t v4 = v9;
  return result;
}

        uint64_t v13 = (v23 - 1) & v23;
        uint64_t v21 = __clz(__rbit64(v23)) + (v9 << 6);
      }

      uint64_t v29 = 8 * v21;
      uint64_t v30 = *(void *)(*(void *)(v5 + 48) + v29);
      id v31 = *(void **)(*(void *)(v5 + 56) + v29);
      if ((a2 & 1) == 0) {
        uint64_t v32 = v31;
      }
      uint64_t result = static Hasher._hash(seed:_:)(*(void *)(v8 + 40), v30);
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        BOOL v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          int64_t v27 = v17 == v26;
          if (v17 == v26) {
            uint64_t v17 = 0LL;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v14 + 8 * v17);
        }

        while (v28 == -1);
        BOOL v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }

      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      uint64_t v19 = 8 * v18;
      *(void *)(*(void *)(v8 + 48) + v19) = v30;
      *(void *)(*(void *)(v8 + 56) + v19) = v31;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    id v31 = 8 * v22;
    uint64_t v32 = *(void **)(*(void *)(v5 + 48) + v31);
    uint64_t v33 = *(void **)(*(void *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      uint64_t v34 = v32;
      unint64_t v35 = v33;
    }

    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v8 + 40));
    uint64_t v16 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v17 = result & ~v16;
    BOOL v18 = v17 >> 6;
    if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      uint64_t v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int64_t v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v29 = v18 == v28;
        if (v18 == v28) {
          BOOL v18 = 0LL;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v13 + 8 * v18);
      }

      while (v30 == -1);
      uint64_t v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }

    *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
    uint64_t v20 = 8 * v19;
    *(void *)(*(void *)(v8 + 48) + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v32;
    *(void *)(*(void *)(v8 + 56) + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v33;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v37;
  uint64_t v24 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  char v36 = 1LL << *(_BYTE *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    os_log_s *v24 = -1LL << v36;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

    uint64_t v11 = (v26 - 1) & v26;
    uint64_t v23 = __clz(__rbit64(v26)) + (v14 << 6);
LABEL_34:
    uint64_t v32 = 16 * v23;
    uint64_t v33 = (uint64_t *)(*(void *)(v5 + 48) + v32);
    unint64_t v35 = *v33;
    uint64_t v34 = v33[1];
    char v36 = (uint64_t *)(*(void *)(v5 + 56) + v32);
    id v37 = *v36;
    os_log_type_t v38 = v36[1];
    if ((v43 & 1) == 0)
    {
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRetain(v38);
    }

    Hasher.init(_seed:)(v44);
    String.hash(into:)(v44, v35, v34);
    uint64_t result = Hasher._finalize()();
    uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
    uint64_t v16 = result & ~v15;
    uint64_t v17 = v16 >> 6;
    if (((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      BOOL v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }

        uint64_t v30 = v17 == v29;
        if (v17 == v29) {
          uint64_t v17 = 0LL;
        }
        v28 |= v30;
        id v31 = *(void *)(v12 + 8 * v17);
      }

      while (v31 == -1);
      BOOL v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }

    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t v19 = 16 * v18;
    uint64_t v20 = (void *)(*(void *)(v8 + 48) + v19);
    *uint64_t v20 = v35;
    v20[1] = v34;
    uint64_t v21 = (void *)(*(void *)(v8 + 56) + v19);
    *uint64_t v21 = v37;
    v21[1] = v38;
    ++*(void *)(v8 + 16);
  }

  swift_release(v5);
  uint64_t v3 = v40;
  uint64_t v25 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v39 = 1LL << *(_BYTE *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v25, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    void *v25 = -1LL << v39;
  }
  *(void *)(v5 + 16) = 0LL;
LABEL_43:
  uint64_t result = swift_release(v5);
  *uint64_t v3 = v8;
  return result;
}

  return a1;
}

    sub_1001BD56C((id *)a1);
    return 0LL;
  }

  BOOL v18 = sub_1001D17B8((uint64_t)&OBJC_CLASS___NetworkMonitor);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  uint64_t v20 = [v19 isConnected];

  if ((v20 & 1) == 0)
  {
    uint64_t v41 = [*(id *)(a1 + 32) isBackground];
    if (v16 == -42587)
    {
      if ((v41 & 1) != 0)
      {
        uint64_t v42 = ASDLogHandleForCategory(28LL);
        uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 logKey]);
          *(_DWORD *)buf = 138412290;
          id v130 = v7;
          uint64_t v8 = "[%@] Not displaying subscription expired dialog for background repair";
          goto LABEL_43;
        }

        goto LABEL_44;
      }

      unint64_t v68 = ASDLocalizedString(@"ARCADE_SUBSCRIPTION_EXPIRED");
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
      char v69 = @"ARCADE_VERIFY_SUBSCRIPTION";
    }

    else
    {
      if ((v41 & 1) != 0)
      {
        uint64_t v44 = ASDLogHandleForCategory(28LL);
        uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 logKey]);
          *(_DWORD *)buf = 138412290;
          id v130 = v7;
          uint64_t v8 = "[%@] Not displaying offline dialog for background repair";
          goto LABEL_43;
        }

        goto LABEL_44;
      }

      unint64_t v70 = ASDLocalizedString(@"ARCADE_INTERNET_CONNECTION_REQUIRED");
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
      char v69 = @"ARCADE_CONNECT_TO_THE_INTERNET_TO_OPEN_APP";
    }

    uint64_t v71 = ASDLocalizedString(v69);
    uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
    sub_1001BE334(a1, v6, v72);

    goto LABEL_44;
  }

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "ams_activeiTunesAccount"));

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "ams_activeiTunesAccount"));
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "ams_DSID"));

  if (v22)
  {
    unint64_t v26 = sub_1002A4FE0((uint64_t)&OBJC_CLASS___OcelotManager);
    int64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    uint64_t v127 = 0LL;
    uint64_t v28 = sub_1002A62DC((uint64_t)v27, 1, &v127, 0.0);
    uint64_t v29 = COERCE_DOUBLE(v127);

    if (v29 != 0.0 && ASDErrorIsEqual(*(void *)&v29, ASDErrorDomain, 515LL))
    {
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v30 timeIntervalSinceReferenceDate];
      uint64_t v32 = v31;
      uint64_t v33 = *(double *)(a1 + 40);

      uint64_t v34 = ASDLogHandleForCategory(28LL);
      unint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        char v36 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 logKey]);
        *(_DWORD *)buf = 138412546;
        id v130 = v36;
        uint64_t v131 = 2048;
        __int128 v132 = v32 - v33;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "[%@] Timeout during fsEntitlements lookup elapsedTime: %f",  buf,  0x16u);
      }

      if ([*(id *)(a1 + 32) isBackground])
      {
        id v37 = ASDLogHandleForCategory(28LL);
        os_log_type_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        if (!os_log_type_enabled((os_log_t)v38, OS_LOG_TYPE_DEFAULT))
        {
LABEL_32:

LABEL_76:
          buf[0] = 0;
          goto LABEL_96;
        }

        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 logKey]);
        *(_DWORD *)buf = 138412290;
        id v130 = v39;
        uint64_t v40 = "[%@] Not displaying timeout dialog for background repair";
LABEL_31:
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v38, OS_LOG_TYPE_DEFAULT, v40, buf, 0xCu);

        goto LABEL_32;
      }

      goto LABEL_75;
    }
  }

  else
  {
    uint64_t v28 = 0;
    uint64_t v29 = 0.0;
  }

  has_internal_content = os_variant_has_internal_content("com.apple.appstored");
  if (has_internal_content)
  {
    has_internal_content = sub_1002F98A0((uint64_t)&OBJC_CLASS___AppDefaultsManager);
  }

  uint64_t v48 = 0.0;
  uint64_t v126 = v29;
  uint64_t v49 = v25;
  uint64_t v50 = sub_100224C38((uint64_t)&OBJC_CLASS___SbsyncTask, v25, &v126);
  unint64_t v51 = *(id *)&v126;

  char v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v52 timeIntervalSinceReferenceDate];
  id v54 = v53;
  uint64_t v55 = *(double *)(a1 + 40);

  uint64_t v56 = ASDLogHandleForCategory(28LL);
  Swift::String v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 logKey]);
    *(_DWORD *)buf = 138412802;
    id v130 = v58;
    uint64_t v131 = 2048;
    __int128 v132 = *(double *)&v50;
    uint64_t v133 = 2048;
    uint64_t v134 = v54 - v55;
    _os_log_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEFAULT,  "[%@] Repairing subscription with status: %ld elapsedTime: %f",  buf,  0x20u);
  }

  uint64_t v59 = sub_100223904(objc_alloc(&OBJC_CLASS___SbsyncTask), 0LL);
  uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 logKey]);
  sub_100225094((uint64_t)v59, v60);

  if (v59)
  {
    *((_BYTE *)v59 + 56) = 1;
    v59[10] = 0LL;
  }

  unint64_t v61 = *(void *)(a1 + 48);
  unint64_t v137 = v59;
  char v62 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v137, 1LL));
  if (v61) {
    [*(id *)(v61 + 8) addOperations:v62 waitUntilFinished:1];
  }

  if (!v59)
  {

    uint64_t v48 = 0.0;
    uint64_t v25 = v49;
    goto LABEL_78;
  }

  uint64_t v29 = COERCE_DOUBLE(objc_getProperty(v59, v63, 32LL, 1));

  uint64_t v48 = *((double *)v59 + 11);
  uint64_t v25 = v49;
  if (v29 == 0.0)
  {
LABEL_78:

    uint64_t v29 = 0.0;
    goto LABEL_79;
  }

  uint64_t v64 = ASDErrorDomain;
  if ((ASDErrorIsEqual(*(void *)&v29, ASDErrorDomain, 551LL) & 1) == 0
    && !ASDErrorIsEqual(*(void *)&v29, v64, 550LL))
  {

    if (ASDErrorIsEqual(*(void *)&v29, v64, 515LL))
    {
      uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v73 timeIntervalSinceReferenceDate];
      id v75 = v74;
      uint64_t v76 = *(double *)(a1 + 40);

      uint64_t v77 = ASDLogHandleForCategory(28LL);
      uint64_t v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 logKey]);
        *(_DWORD *)buf = 138412546;
        id v130 = v79;
        uint64_t v131 = 2048;
        __int128 v132 = v75 - v76;
        _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "[%@] Timeout during sbsync elapsedTime: %f",  buf,  0x16u);
      }

      if ([*(id *)(a1 + 32) isBackground])
      {
        uint64_t v80 = ASDLogHandleForCategory(28LL);
        os_log_type_t v38 = (void *)objc_claimAutoreleasedReturnValue(v80);
        if (!os_log_type_enabled((os_log_t)v38, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_32;
        }
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 logKey]);
        *(_DWORD *)buf = 138412290;
        id v130 = v39;
        uint64_t v40 = "[%@] Not showing sbsync timeout dialog for background repair";
        goto LABEL_31;
      }
    }

    uint64_t v34 = [obj countByEnumeratingWithState:&v118 objects:v128 count:16];
    if (v34) {
      continue;
    }
    break;
  }

  uint64_t v30 = 0;
LABEL_39:
  uint64_t v19 = v109;
LABEL_41:

LABEL_42:
  unint64_t v26 = v30 != 0;
LABEL_43:
  unint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"bundle_id"]);
  if (v46)
  {
    unint64_t v47 = sub_1001F8AE0((uint64_t)&OBJC_CLASS___ODRClient, v46);
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    uint64_t v49 = v48 != 0LL;
  }

  else
  {
    uint64_t v49 = 0;
  }

  if (!v26 && !v49)
  {
    uint64_t v50 = ASDLogHandleForCategory(19LL);
    unint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_ERROR,  "No hash matched, and this client is not currently connected, removing assets from device and resetting the localURL.",  buf,  2u);
    }

    char v52 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"local_url"]);
    if (v52)
    {
      int v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v52));
      sub_1001AC35C((uint64_t)&OBJC_CLASS___ODRAssetPack, v53);
    }

    [a1 setObject:0 forKeyedSubscript:@"local_url"];
  }

LABEL_53:
  id v54 = sub_1001F7C8C(v6);
  uint64_t v55 = objc_claimAutoreleasedReturnValue(v54);
  uint64_t v56 = ASDLogHandleForCategory(19LL);
  Swift::String v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v123 = v55;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v57,  OS_LOG_TYPE_DEBUG,  "Setting the fileSize : %{public}@",  buf,  0xCu);
  }

  uint64_t v58 = sub_1001F7A90(v6);
  uint64_t v59 = objc_claimAutoreleasedReturnValue(v58);
  uint64_t v60 = ASDLogHandleForCategory(19LL);
  unint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
  if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v123 = v59;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEBUG,  "Setting the downloadSize : %{public}@",  buf,  0xCu);
  }

  char v62 = sub_1001F7994(v6);
  uint64_t v63 = objc_claimAutoreleasedReturnValue(v62);
  uint64_t v64 = ASDLogHandleForCategory(19LL);
  uint64_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v123 = v63;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEBUG,  "Setting the chunk size : %{public}@",  buf,  0xCu);
  }

  obja = (id)v55;

  uint64_t v66 = sub_1001F7AB4(v6);
  uint64_t v67 = objc_claimAutoreleasedReturnValue(v66);
  unint64_t v68 = ASDLogHandleForCategory(19LL);
  char v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v123 = v67;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v69,  OS_LOG_TYPE_DEBUG,  "Setting the hashes : %{public}@",  buf,  0xCu);
  }

  uint64_t v110 = (void *)v67;
  uint64_t v111 = (void *)v59;

  unint64_t v70 = sub_1001F7B84(v6);
  uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
  uint64_t v72 = ASDLogHandleForCategory(19LL);
  uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v123 = (uint64_t)v71;
    _os_log_debug_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "Setting the MD5 : %{public}@", buf, 0xCu);
  }

  unint64_t v74 = sub_1001F79DC(v6);
  id v75 = objc_claimAutoreleasedReturnValue(v74);
  uint64_t v76 = ASDLogHandleForCategory(19LL);
  uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
  if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v123 = v75;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEBUG,  "Setting Download Priority: %{public}@",  buf,  0xCu);
  }

  uint64_t v78 = sub_1001F7AFC(v6);
  uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
  uint64_t v80 = ASDLogHandleForCategory(19LL);
  unint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
  if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
  {
    id v106 = [v79 BOOLValue];
    *(_DWORD *)buf = 67109120;
    LODWORD(v123) = v106;
    _os_log_debug_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEBUG, "Setting isStreamable: %{BOOL}d", buf, 8u);
  }

  uint64_t v108 = (void *)v75;

  uint64_t v82 = sub_1001F7970(v6);
  uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
  uint64_t v84 = ASDLogHandleForCategory(19LL);
  uint64_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
  if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v123 = (uint64_t)v83;
    _os_log_debug_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "Setting bundleID: %{public}@", buf, 0xCu);
  }

  uint64_t v107 = (void *)v63;

  uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue([v6 propertyValues]);
  [a1 setValuesWithDictionary:v86];

  unint64_t v87 = sub_1001F7B20(v6);
  uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
  uint64_t v89 = ASDLogHandleForCategory(19LL);
  uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
  if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v123 = (uint64_t)v88;
    _os_log_debug_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "Setting local URL: %{public}@", buf, 0xCu);
  }

  char v91 = (void *)objc_claimAutoreleasedReturnValue([v88 absoluteString]);
  [a1 setObject:v91 forKeyedSubscript:@"local_url"];

  unint64_t v92 = sub_1001F7CB0(v6);
  uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
  BOOL v94 = (void *)objc_claimAutoreleasedReturnValue([v93 absoluteString]);

  if ([v79 BOOLValue])
  {
    uint64_t v95 = a1;
    char v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v94));
  }

  else
  {
    uint64_t v95 = a1;
    unint64_t v97 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"bundle_id"]);
    char v98 = ASDLogHandleForCategory(19LL);
    unint64_t v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
    if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      uint64_t v123 = (uint64_t)v97;
      _os_log_debug_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEBUG, "BundleID: %{public}@", buf, 0xCu);
    }

    char v100 = sub_1002D92D0((uint64_t)&OBJC_CLASS___ODRApplication, v97);
    char v101 = (void *)objc_claimAutoreleasedReturnValue(v100);
    uint64_t v102 = sub_1002D9924((uint64_t)v101, v94, 0LL);
    char v96 = (void *)objc_claimAutoreleasedReturnValue(v102);
  }

  char v103 = ASDLogHandleForCategory(19LL);
  uint64_t v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
  if (os_log_type_enabled(v104, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    uint64_t v123 = (uint64_t)v96;
    _os_log_debug_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEBUG, "Setting SourceURL: %{public}@", buf, 0xCu);
  }

  uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue([v96 absoluteString]);
  [v95 setObject:v105 forKeyedSubscript:@"source_url"];

LABEL_79:
}

  char v52 = sub_1001ABC48(v11);
  int v53 = (void *)objc_claimAutoreleasedReturnValue(v52);

  if (v53)
  {
    id v54 = sub_1001ABC48(v11);
    uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
    sub_1002FB020((id *)v15, v55);
  }

  uint64_t v56 = sub_1001ABCB4(v11);
  Swift::String v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
  uint64_t v58 = v57 == 0LL;

  if (!v58)
  {
    uint64_t v59 = sub_1001ABCB4(v11);
    uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
    sub_1002FB23C((id *)v15, v60);
  }

  unint64_t v61 = sub_1001AC038(v11);
  char v62 = (void *)objc_claimAutoreleasedReturnValue(v61);

  if (v62)
  {
    uint64_t v63 = sub_1001AC038(v11);
    uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
    sub_1002FB928((id *)v15, v64);
  }

  if (a3 == 2)
  {
    if (v12 && v12[4] == 1LL)
    {
      if (v11) {
        uint64_t v65 = [v11[4] copy];
      }
      else {
        uint64_t v65 = 0LL;
      }
      if (objc_msgSend(v65, "count", v76, v77, v78, v79, v80)) {
        sub_1002FB394((id *)v15, v65);
      }
    }

    else
    {
      uint64_t v65 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "valueForProperty:", @"usage_time", v76, v77, v78, v79, v80));
    }

    goto LABEL_54;
  }

  if (a3 == 1)
  {
    uint64_t v65 = (id)objc_claimAutoreleasedReturnValue([v11 valueForProperty:@"event_subtype"]);
LABEL_54:
  }

  uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "valueForProperty:", @"count", v76, v77, v78, v79, v80));

  _Block_object_dispose(&v84, 8);
LABEL_58:

  return v15;
}

  *(_BYTE *)(v6 + 203) = self->_isSystemApp;
  *(_WORD *)(v6 + 208) |= 0x100u;
  if ((*(_WORD *)&self->_has & 0x80) != 0)
  {
LABEL_24:
    *(_BYTE *)(v6 + 202) = self->_isStoreApp;
    *(_WORD *)(v6 + 208) |= 0x80u;
  }
}

  return a1;
}

uint64_t sub_100055AB8(uint64_t a1)
{
  return sub_100055C1C(a1, (uint64_t (*)(uint64_t, void, uint64_t))sub_100063440);
}

uint64_t sub_100055AC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = (void *)*v1;
  int64_t v4 = *(void *)(*v1 + 16LL);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  uint64_t isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }

  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100088338(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v9 = (unint64_t)&v3[12 * v8 + 4];
  if (a1 + 32 < v9 + 96 * v2 && v9 < a1 + 32 + 96 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease(a1);
    void *v1 = v3;
    return result;
  }

  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }

  if (v5 < 0)
  {
LABEL_17:
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize with negative count",  51LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1090LL,  0);
    goto LABEL_18;
  }

  uint64_t v11 = (unint64_t)(v9 + 4);
  BOOL v12 = a2 + 96 * a3;
  if (v12 >= (unint64_t)&v9[12 * v5 + 4] || v11 >= v12 + 96 * v5)
  {
    swift_arrayInitWithCopy(v11);
    return v9;
  }

  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
LABEL_18:
  __break(1u);
  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1LL);
  unint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

        uint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1LL << result) - 1;
  }

  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  uint64_t v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

  *a1 = v8;
  if ((a6 & 0x8000000000000000LL) != 0) {
    return 0LL;
  }
  else {
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
  }
}
}
}
}

    int64_t v5 = 0LL;
  }

uint64_t sub_100055C1C(uint64_t a1, uint64_t (*a2)(uint64_t, void, uint64_t))
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v18 = a1;
    }
    else {
      uint64_t v18 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v6 = *v2;
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v8 = v7 + v5;
    if (!__OFADD__(v7, v5)) {
      goto LABEL_5;
    }
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  if (v6 < 0) {
    uint64_t v19 = *v2;
  }
  else {
    uint64_t v19 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v2);
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v6);
  uint64_t v8 = v7 + v5;
  if (__OFADD__(v7, v5)) {
    goto LABEL_29;
  }
LABEL_5:
  uint64_t v6 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v2);
  *uint64_t v2 = v6;
  uint64_t v7 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000LL) == 0 && (v6 & 0x4000000000000000LL) == 0)
  {
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v7 = 1LL;
  }

  uint64_t v11 = *(void *)((v6 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (1)
  {
    if (v11 <= v8) {
      uint64_t v11 = v8;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v7, v11, 1LL, v6);
    swift_bridgeObjectRelease(*v2);
    *uint64_t v2 = v6;
    uint64_t v10 = v6 & 0xFFFFFFFFFFFFFF8LL;
LABEL_15:
    uint64_t result = a2(v10 + 8LL * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_30:
    __break(1u);
LABEL_31:
    if (v6 < 0) {
      uint64_t v20 = v6;
    }
    else {
      uint64_t v20 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v6);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v6);
  }

  if (v13 < 1) {
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  BOOL v15 = __OFADD__(v14, v13);
  uint64_t v16 = v14 + v13;
  if (!v15)
  {
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8LL) + 0x1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v16;
LABEL_19:
    uint64_t v17 = swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v17);
  }

  __break(1u);
  return result;
}

void *sub_100055DD8(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    uint64_t v11 = &_swiftEmptyArrayStorage;
    sub_10007F7D8(0, v1, 0);
    int64_t v4 = (uint64_t *)(a1 + 32);
    uint64_t v2 = &_swiftEmptyArrayStorage;
    do
    {
      uint64_t v5 = *v4++;
      uint64_t v9 = v5;
      swift_dynamicCast(v10, &v9, &type metadata for Int64, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10007F7D8(0, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10007F7D8(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v11;
      }

      v2[2] = v7 + 1;
      sub_100015330(v10, &v2[4 * v7 + 4]);
      --v1;
    }

    while (v1);
  }

  return v2;
}

uint64_t sub_100055EF4(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  uint64_t v3 = &_swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  uint64_t v17 = &_swiftEmptyArrayStorage;
  uint64_t result = sub_10007F7D8(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000LL) == 0)
  {
    if ((a1 & 0xC000000000000001LL) != 0)
    {
      for (uint64_t i = 0LL; i != v2; ++i)
      {
        id v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        uint64_t v6 = sub_10001517C(0LL, &qword_100459DE8, &off_1003DA110);
        swift_dynamicCast(v16, &v15, v6, (char *)&type metadata for Any + 8, 7LL);
        uint64_t v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_10007F7D8(0, v3[2] + 1LL, 1);
          uint64_t v3 = v17;
        }

        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10007F7D8(v7 > 1, v8 + 1, 1);
          uint64_t v3 = v17;
        }

        v3[2] = v8 + 1;
        sub_100015330(v16, &v3[4 * v8 + 4]);
      }
    }

    else
    {
      uint64_t v9 = (id *)(a1 + 32);
      uint64_t v10 = sub_10001517C(0LL, &qword_100459DE8, &off_1003DA110);
      do
      {
        id v15 = *v9;
        id v11 = v15;
        swift_dynamicCast(v16, &v15, v10, (char *)&type metadata for Any + 8, 7LL);
        uint64_t v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_10007F7D8(0, v3[2] + 1LL, 1);
          uint64_t v3 = v17;
        }

        unint64_t v13 = v3[2];
        unint64_t v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          sub_10007F7D8(v12 > 1, v13 + 1, 1);
          uint64_t v3 = v17;
        }

        v3[2] = v13 + 1;
        sub_100015330(v16, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }

      while (v2);
    }

    return (uint64_t)v3;
  }

  __break(1u);
  return result;
}

void *sub_100056154(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = &_swiftEmptyArrayStorage;
  if (v1)
  {
    id v11 = &_swiftEmptyArrayStorage;
    sub_10007F7D8(0, v1, 0);
    uint64_t v2 = &_swiftEmptyArrayStorage;
    int64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *v4;
      v9[0] = *(v4 - 1);
      v9[1] = v5;
      swift_bridgeObjectRetain(v5);
      swift_dynamicCast(v10, v9, &type metadata for String, (char *)&type metadata for Any + 8, 7LL);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10007F7D8(0, v2[2] + 1LL, 1);
        uint64_t v2 = v11;
      }

      unint64_t v7 = v2[2];
      unint64_t v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10007F7D8(v6 > 1, v7 + 1, 1);
        uint64_t v2 = v11;
      }

      v4 += 2;
      v2[2] = v7 + 1;
      sub_100015330(v10, &v2[4 * v7 + 4]);
      --v1;
    }

    while (v1);
  }

  return v2;
}

void sub_100056278(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void (**)(void))(a1 + 32);
  id v3 = a2;
  v2();
}

uint64_t sub_1000562C4(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1000562E4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PurchaseCandidate(0LL);
  uint64_t v38 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v37 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v36 = (uint64_t)&v30 - v6;
  int64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = _swiftEmptyArrayStorage;
  if (!v7) {
    return (uint64_t)v8;
  }
  uint64_t v30 = v1;
  uint64_t v40 = _swiftEmptyArrayStorage;
  sub_10007F7A0(0, v7, 0);
  uint64_t result = sub_100063D58(a1);
  uint64_t v11 = result;
  uint64_t v12 = 0LL;
  uint64_t v13 = a1 + 64;
  uint64_t v31 = a1 + 80;
  int64_t v32 = v7;
  uint64_t v34 = a1 + 64;
  uint64_t v35 = a1;
  uint64_t v33 = v10;
  while ((v11 & 0x8000000000000000LL) == 0 && v11 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v16 = (unint64_t)v11 >> 6;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v10) {
      goto LABEL_26;
    }
    uint64_t v17 = v36;
    sub_1000649D4(*(void *)(a1 + 56) + *(void *)(v38 + 72) * v11, v36);
    uint64_t v18 = v37;
    sub_100064A54(v17, v37);
    uint64_t v39 = *(void *)(v18 + 32);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
    uint64_t v21 = v20;
    sub_100064A18(v18);
    unint64_t v8 = v40;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v40);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_10007F7A0(0, v8[2] + 1LL, 1);
      unint64_t v8 = v40;
    }

    unint64_t v23 = v8[2];
    unint64_t v22 = v8[3];
    if (v23 >= v22 >> 1)
    {
      uint64_t result = sub_10007F7A0(v22 > 1, v23 + 1, 1);
      unint64_t v8 = v40;
    }

    v8[2] = v23 + 1;
    uint64_t v24 = &v8[2 * v23];
    void v24[4] = v19;
    v24[5] = v21;
    a1 = v35;
    int64_t v14 = 1LL << *(_BYTE *)(v35 + 32);
    if (v11 >= v14) {
      goto LABEL_27;
    }
    uint64_t v13 = v34;
    uint64_t v25 = *(void *)(v34 + 8 * v16);
    if ((v25 & (1LL << v11)) == 0) {
      goto LABEL_28;
    }
    LODWORD(v1_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v33;
    if (*(_DWORD *)(v35 + 36) != (_DWORD)v33) {
      goto LABEL_29;
    }
    unint64_t v26 = v25 & (-2LL << (v11 & 0x3F));
    if (v26)
    {
      int64_t v14 = __clz(__rbit64(v26)) | v11 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v15 = v32;
    }

    else
    {
      unint64_t v27 = v16 + 1;
      unint64_t v28 = (unint64_t)(v14 + 63) >> 6;
      int64_t v15 = v32;
      if (v16 + 1 < v28)
      {
        unint64_t v29 = *(void *)(v34 + 8 * v27);
        if (v29)
        {
LABEL_22:
          int64_t v14 = __clz(__rbit64(v29)) + (v27 << 6);
        }

        else
        {
          while (v28 - 2 != v16)
          {
            unint64_t v29 = *(void *)(v31 + 8 * v16++);
            if (v29)
            {
              unint64_t v27 = v16 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }

    ++v12;
    uint64_t v11 = v14;
    if (v12 == v15) {
      return (uint64_t)v8;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1000565BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20);
    String.hash(into:)(v20, a1, a2);
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if (((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      uint64_t v12 = v11[1];
      BOOL v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0LL) & 1) != 0) {
        return 1LL;
      }
      uint64_t v15 = ~v7;
      unint64_t v16 = (v8 + 1) & v15;
      if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
      {
        while (1)
        {
          uint64_t v17 = (void *)(v10 + 16 * v16);
          uint64_t v18 = v17[1];
          BOOL v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
            break;
          }
          uint64_t result = 0LL;
          unint64_t v16 = (v16 + 1) & v15;
          if (((*(void *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0) {
            return result;
          }
        }

        return 1LL;
      }
    }
  }

  return 0LL;
}

BOOL sub_1000566F0(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0LL;
  }
  uint64_t v4 = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), a1);
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) == 0) {
    return 0LL;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (*(void *)(v8 + 8 * v6) == a1) {
    return 1LL;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
    return 0LL;
  }
  do
  {
    uint64_t v12 = *(void *)(v8 + 8 * v11);
    BOOL result = v12 == a1;
    if (v12 == a1) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }

  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1000569D8()
{
  v1[45] = v0;
  uint64_t v2 = sub_1000079A0((uint64_t *)&unk_10045AC20);
  v1[46] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v1[47] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[48] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[49] = swift_task_alloc(v5);
  v1[50] = swift_task_alloc(v5);
  uint64_t v6 = sub_1000079A0((uint64_t *)&unk_100459D30);
  v1[51] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for PurchaseCandidate(0LL);
  v1[52] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v1[53] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[54] = swift_task_alloc(v9);
  v1[55] = swift_task_alloc(v9);
  v1[56] = swift_task_alloc(v9);
  v1[57] = swift_task_alloc(v9);
  v1[58] = swift_task_alloc(v9);
  v1[59] = swift_task_alloc(v9);
  v1[60] = swift_task_alloc(v9);
  v1[61] = swift_task_alloc(v9);
  v1[62] = swift_task_alloc(v9);
  v1[63] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  v1[64] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v1[65] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[66] = swift_task_alloc(v12);
  v1[67] = swift_task_alloc(v12);
  v1[68] = swift_task_alloc(v12);
  v1[69] = swift_task_alloc(v12);
  v1[70] = swift_task_alloc(v12);
  v1[71] = swift_task_alloc(v12);
  v1[72] = swift_task_alloc(v12);
  v1[73] = swift_task_alloc(v12);
  v1[74] = swift_task_alloc(v12);
  v1[75] = swift_task_alloc(v12);
  return swift_task_switch(sub_100056BC0, 0LL, 0LL);
}

id sub_100056BC0(uint64_t a1)
{
  uint64_t v2 = v1 + 26;
  uint64_t v3 = (void **)(v1 + 45);
  uint64_t v4 = (void *)v1[45];
  static Logger.purchase.getter(a1);
  unint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v184 = v1[75];
    uint64_t v174 = v1[65];
    uint64_t v179 = v1[64];
    uint64_t v7 = (char *)v1[45];
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    unint64_t v9 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t typea = swift_slowAlloc(32LL, -1LL);
    v192[0] = typea;
    *(_DWORD *)uint64_t v8 = 138412546;
    uint64_t v10 = *(void **)&v7[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
    v1[44] = v10;
    id v11 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 44, v1 + 45, v8 + 4, v8 + 12);
    *unint64_t v9 = v10;

    *(_WORD *)(v8 + 12) = 2082;
    uint64_t v12 = *(void *)&v7[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_itemIDs];
    __n128 v13 = swift_bridgeObjectRetain(v12);
    uint64_t v14 = Array.description.getter(v13);
    unint64_t v16 = v15;
    swift_bridgeObjectRelease(v12);
    uint64_t v17 = v14;
    uint64_t v2 = v1 + 26;
    v1[25] = sub_100088DB4(v17, v16, v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 25, v1 + 26, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease(v16);

    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%@] Purchasing batch: %{public}s", (uint8_t *)v8, 0x16u);
    uint64_t v18 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v9, 1LL, v18);
    BOOL v19 = v9;
    uint64_t v3 = (void **)(v1 + 45);
    swift_slowDealloc(v19, -1LL, -1LL);
    swift_arrayDestroy(typea, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(typea, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v174 + 8);
    v20(v184, v179);
  }

  else
  {
    uint64_t v21 = v1[75];
    uint64_t v22 = v1[65];
    uint64_t v23 = v1[64];
    uint64_t v24 = (void *)v1[45];

    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v20(v21, v23);
  }

  v1[76] = v20;
  id result = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (result)
  {
    unint64_t v26 = result;
    id v27 = objc_msgSend(result, "ams_activeiTunesAccount");
    v1[77] = v27;

    id v180 = v27;
    if (v27)
    {
      unint64_t v29 = v1 + 20;
      uint64_t v30 = (char *)*v3;
      uint64_t v31 = _swiftEmptyDictionarySingleton;
      v1[20] = _swiftEmptyArrayStorage;
      v1[17] = _swiftEmptyDictionarySingleton;
      uint64_t v146 = v30;
      uint64_t v149 = v1;
      uint64_t v32 = *(void *)&v30[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_itemIDs];
      uint64_t v189 = *(void *)(v32 + 16);
      if (v189)
      {
        uint64_t v140 = v1 + 17;
        os_log_t log = (os_log_t)(v1 + 43);
        Class v166 = (void **)(v1 + 42);
        uint64_t v157 = v1[52];
        unint64_t v160 = (void *)v1[63];
        uint64_t v143 = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey;
        uint64_t v152 = v3;
        swift_bridgeObjectRetain(v32);
        uint64_t v33 = 0LL;
        *(void *)os_log_type_t type = v1 + 20;
        uint64_t v175 = v20;
        uint64_t v185 = v32;
        do
        {
          uint64_t v40 = *(void *)(v32 + 8 * v33 + 32);
          char v41 = sub_100064240(v40);
          unint64_t v44 = v43;
          if ((v41 & 1) != 0)
          {
            type metadata accessor for ASDError(0LL);
            uint64_t v46 = v45;
            *(void *)os_log_t log = 506LL;
            unint64_t v47 = sub_10006D16C((uint64_t)_swiftEmptyArrayStorage);
            uint64_t v48 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
            _BridgedStoredNSError.init(_:userInfo:)(v166, log, v47, v46, v48);
            uint64_t v49 = *v166;
            id v50 = [objc_allocWithZone(ASDPurchaseResponseItem) init];
            if (v44)
            {
              if (v44 == 1) {
                unint64_t v51 = 0xE200000000000000LL;
              }
              else {
                unint64_t v51 = v44;
              }
              NSString v52 = String._bridgeToObjectiveC()();
              swift_bridgeObjectRelease(v51);
            }

            else
            {
              NSString v52 = 0LL;
            }

            [v50 _setBundleID:v52];

            Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
            [v50 _setItemID:isa];

            id v54 = v49;
            uint64_t v55 = (void *)_convertErrorToNSError(_:)(v54);

            [v50 _setError:v55];
            id v56 = v50;
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v56);
            unint64_t v58 = *(void *)((*v29 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
            unint64_t v57 = *(void *)((*v29 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
            uint64_t v20 = v175;
            if (v58 >= v57 >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1LL);
            }
            uint64_t v59 = (void *)v1[45];
            uint64_t v60 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v58, v56);
            uint64_t v61 = specialized Array._endMutation()(v60);
            static Logger.purchase.getter(v61);
            char v62 = (os_log_s *)Logger.logObject.getter(v59);
            os_log_type_t v63 = static os_log_type_t.default.getter();
            BOOL v64 = os_log_type_enabled(v62, v63);
            uint64_t v65 = (void *)v1[45];
            if (v64)
            {
              uint64_t v66 = swift_slowAlloc(22LL, -1LL);
              uint64_t v67 = (void *)swift_slowAlloc(8LL, -1LL);
              *(_DWORD *)uint64_t v66 = 138412546;
              unint64_t v68 = *(void **)&v146[v143];
              *(void *)(v66 + 4) = v68;
              *uint64_t v67 = v68;
              id v69 = v68;

              *(_WORD *)(v66 + 12) = 2050;
              *(void *)(v66 + 14) = v40;
              _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "[%@] Skipping itemID: %{public}lld due to activeInstall",  (uint8_t *)v66,  0x16u);
              uint64_t v70 = sub_1000079A0((uint64_t *)&unk_100458F50);
              swift_arrayDestroy(v67, 1LL, v70);
              uint64_t v71 = v67;
              uint64_t v20 = v175;
              uint64_t v1 = v149;
              swift_slowDealloc(v71, -1LL, -1LL);
              swift_slowDealloc(v66, -1LL, -1LL);
              uint64_t v72 = v54;
            }

            else
            {

              uint64_t v72 = *v152;
              char v62 = (os_log_s *)v54;
            }

            uint64_t v32 = v185;
            uint64_t v73 = v1[74];
            uint64_t v74 = v1[64];

            v20(v73, v74);
            unint64_t v29 = *(void **)type;
          }

          else
          {
            uint64_t v35 = v1[62];
            uint64_t v34 = (void *)v1[63];
            sub_1000649C0(v42, v43);
            id v36 = v180;
            UUID.init()();
            *uint64_t v34 = v36;
            v160[1] = 0LL;
            v160[2] = 0LL;
            v160[3] = 0LL;
            v160[4] = v40;
            *(void *)((char *)v34 + *(int *)(v157 + 36)) = 0LL;
            uint64_t v37 = (void *)((char *)v34 + *(int *)(v157 + 40));
            *uint64_t v37 = 0LL;
            v37[1] = 0LL;
            sub_1000649D4((uint64_t)v34, v35);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1[17]);
            v192[0] = v1[17];
            v1[17] = 0x8000000000000000LL;
            sub_100079D40(v35, v40, isUniquelyReferenced_nonNull_native);
            uint64_t v39 = v1[17];
            v1[17] = v192[0];
            swift_bridgeObjectRelease(v39);
            sub_100064A18((uint64_t)v34);
            uint64_t v32 = v185;
          }

          ++v33;
        }

        while (v189 != v33);
        uint64_t v28 = swift_bridgeObjectRelease(v32);
        uint64_t v31 = (void *)*v140;
        uint64_t v3 = v152;
      }

      if (v31[2])
      {
        swift_bridgeObjectRetain(v31);
        uint64_t v76 = sub_1000562E4(v75);
        v1[78] = v76;
        swift_bridgeObjectRelease(v31);
        uint64_t v77 = (void *)swift_task_alloc(dword_100459D4C);
        v1[79] = v77;
        *uint64_t v77 = v1;
        v77[1] = sub_100057A60;
        uint64_t v78 = v1[45];
        v77[16] = v76;
        v77[17] = v78;
        return (id)swift_task_switch(sub_10005A440, 0LL, 0LL);
      }

      char v98 = (void *)v1[45];
      static Logger.purchase.getter(v28);
      unint64_t v99 = (os_log_s *)Logger.logObject.getter(v98);
      os_log_type_t v100 = static os_log_type_t.default.getter();
      BOOL v101 = os_log_type_enabled(v99, v100);
      uint64_t v102 = (char *)v1[45];
      if (v101)
      {
        unint64_t v190 = v1 + 18;
        char v103 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v104 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)char v103 = 138412290;
        uint64_t v105 = *(void **)&v102[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
        v149[18] = v105;
        id v106 = v105;
        uint64_t v1 = v149;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v190, v149 + 19, v103 + 4, v103 + 12);
        *uint64_t v104 = v105;

        _os_log_impl((void *)&_mh_execute_header, v99, v100, "[%@] No candidates to purchase", v103, 0xCu);
        uint64_t v107 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v104, 1LL, v107);
        swift_slowDealloc(v104, -1LL, -1LL);
        swift_slowDealloc(v103, -1LL, -1LL);
        uint64_t v108 = (char *)v149[45];
      }

      else
      {

        uint64_t v108 = (char *)*v3;
        unint64_t v99 = (os_log_s *)*v3;
      }

      uint64_t v124 = v1[68];
      uint64_t v125 = v1[64];

      v20(v124, v125);
      uint64_t v126 = v1[20];
      id v127 = objc_allocWithZone(&OBJC_CLASS___ASDPurchaseResponse);
      sub_10001517C(0LL, &qword_100459D40, &OBJC_CLASS___ASDPurchaseResponseItem_ptr);
      Class v128 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v126);
      id v129 = [v127 initWithPurchaseResponseItems:v128];

      id v130 = *(void **)&v108[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse];
      *(void *)&v108[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse] = v129;

      uint64_t v131 = v1[75];
      uint64_t v132 = v1[74];
      uint64_t v133 = v1[73];
      uint64_t v134 = v1[72];
      uint64_t v135 = v1[71];
      uint64_t v136 = v1[70];
      uint64_t v137 = v1[69];
      uint64_t v138 = v1[68];
      uint64_t v139 = v1[67];
      uint64_t v142 = v1[66];
      uint64_t v145 = v1[63];
      uint64_t v148 = v1[62];
      uint64_t v151 = v1[61];
      uint64_t v154 = v1[60];
      uint64_t v156 = v1[59];
      uint64_t v159 = v1[58];
      uint64_t v162 = v1[57];
      os_log_t logb = (os_log_t)v1[56];
      uint64_t v168 = v1[55];
      *(void *)typed = v1[54];
      uint64_t v178 = v1[51];
      uint64_t v183 = v1[50];
      uint64_t v188 = v1[49];
      uint64_t v191 = v1[46];
      swift_bridgeObjectRelease(v1[17]);
      swift_task_dealloc(v131);
      swift_task_dealloc(v132);
      swift_task_dealloc(v133);
      swift_task_dealloc(v134);
      swift_task_dealloc(v135);
      swift_task_dealloc(v136);
      swift_task_dealloc(v137);
      swift_task_dealloc(v138);
      swift_task_dealloc(v139);
      swift_task_dealloc(v142);
      swift_task_dealloc(v145);
      swift_task_dealloc(v148);
      swift_task_dealloc(v151);
      swift_task_dealloc(v154);
      swift_task_dealloc(v156);
      swift_task_dealloc(v159);
      swift_task_dealloc(v162);
      swift_task_dealloc(logb);
      swift_task_dealloc(v168);
      swift_task_dealloc(*(void *)typed);
      swift_task_dealloc(v178);
      swift_task_dealloc(v183);
      swift_task_dealloc(v188);
      swift_task_dealloc(v191);
      uint64_t v123 = (uint64_t (*)(void))v1[1];
    }

    else
    {
      int v176 = v20;
      uint64_t v79 = (void *)v1[45];
      static Logger.purchase.getter(v28);
      uint64_t v80 = (os_log_s *)Logger.logObject.getter(v79);
      os_log_type_t v81 = static os_log_type_t.error.getter(v80);
      BOOL v82 = os_log_type_enabled(v80, v81);
      uint64_t v83 = v1[67];
      uint64_t v84 = v1[64];
      uint64_t v85 = (char *)v1[45];
      if (v82)
      {
        os_log_type_t typeb = v81;
        uint64_t v86 = swift_slowAlloc(22LL, -1LL);
        unint64_t v87 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v181 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v86 = 138412546;
        v192[0] = v181;
        uint64_t v186 = v84;
        uint64_t v88 = *(void **)&v85[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
        v1[26] = v88;
        id v89 = v88;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v2, v1 + 27, v86 + 4, v86 + 12);
        *unint64_t v87 = v88;

        *(_WORD *)(v86 + 12) = 2082;
        uint64_t v90 = *(void *)&v85[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_itemIDs];
        __n128 v91 = swift_bridgeObjectRetain(v90);
        uint64_t v92 = Array.description.getter(v91);
        unint64_t v94 = v93;
        swift_bridgeObjectRelease(v90);
        v1[21] = sub_100088DB4(v92, v94, v192);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 21, v1 + 22, v86 + 14, v86 + 22);
        swift_bridgeObjectRelease(v94);

        _os_log_impl( (void *)&_mh_execute_header,  v80,  typeb,  "[%@] Account required to install %{public}s",  (uint8_t *)v86,  0x16u);
        uint64_t v95 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v87, 1LL, v95);
        swift_slowDealloc(v87, -1LL, -1LL);
        swift_arrayDestroy(v181, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v181, -1LL, -1LL);
        swift_slowDealloc(v86, -1LL, -1LL);

        uint64_t v97 = v186;
        uint64_t v96 = v83;
      }

      else
      {

        uint64_t v96 = v83;
        uint64_t v97 = v84;
      }

      v176(v96, v97);
      type metadata accessor for ASDError(0LL);
      uint64_t v110 = v109;
      v1[36] = 509LL;
      unint64_t v111 = sub_10006D16C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v112 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
      uint64_t v113 = _BridgedStoredNSError.init(_:userInfo:)(v1 + 39, v1 + 36, v111, v110, v112);
      swift_willThrow(v113);
      uint64_t v114 = v1[74];
      uint64_t v115 = v1[73];
      uint64_t v116 = v1[72];
      uint64_t v117 = v1[71];
      uint64_t v118 = v1[70];
      uint64_t v119 = v1[69];
      uint64_t v120 = v1[68];
      uint64_t v121 = v1[67];
      uint64_t v122 = v1[66];
      uint64_t v141 = v1[63];
      uint64_t v144 = v1[62];
      uint64_t v147 = v1[61];
      uint64_t v150 = v1[60];
      uint64_t v153 = v1[59];
      uint64_t v155 = v1[58];
      uint64_t v158 = v1[57];
      uint64_t v161 = v1[56];
      os_log_t loga = (os_log_t)v1[55];
      uint64_t v167 = v1[54];
      *(void *)typec = v1[51];
      uint64_t v177 = v1[50];
      uint64_t v182 = v1[49];
      uint64_t v187 = v1[46];
      swift_task_dealloc(v1[75]);
      swift_task_dealloc(v114);
      swift_task_dealloc(v115);
      swift_task_dealloc(v116);
      swift_task_dealloc(v117);
      swift_task_dealloc(v118);
      swift_task_dealloc(v119);
      swift_task_dealloc(v120);
      swift_task_dealloc(v121);
      swift_task_dealloc(v122);
      swift_task_dealloc(v141);
      swift_task_dealloc(v144);
      swift_task_dealloc(v147);
      swift_task_dealloc(v150);
      swift_task_dealloc(v153);
      swift_task_dealloc(v155);
      swift_task_dealloc(v158);
      swift_task_dealloc(v161);
      swift_task_dealloc(loga);
      swift_task_dealloc(v167);
      swift_task_dealloc(*(void *)typec);
      swift_task_dealloc(v177);
      swift_task_dealloc(v182);
      swift_task_dealloc(v187);
      uint64_t v123 = (uint64_t (*)(void))v1[1];
    }

    return (id)v123();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100057A60(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 632LL);
  v3[80] = a1;
  v3[81] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    unint64_t v5 = sub_100059BB8;
  }

  else
  {
    swift_bridgeObjectRelease(v3[78]);
    unint64_t v5 = sub_100057AD8;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

void sub_100057AD8()
{
  uint64_t v1 = *(void *)(v0 + 640);
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_3:
  __n128 v91 = (uint64_t *)(v0 + 136);
  if (!v2) {
    goto LABEL_22;
  }
  if (v2 >= 1)
  {
    uint64_t v3 = 0LL;
    uint64_t v76 = v0 + 328;
    uint64_t v74 = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey;
    uint64_t v75 = *(void *)(v0 + 360);
    uint64_t v87 = *(void *)(v0 + 488);
    uint64_t v90 = *(void *)(v0 + 424);
    uint64_t v86 = *(void *)(v0 + 416);
    unint64_t v4 = v1 & 0xC000000000000001LL;
    uint64_t v89 = *(void *)(v0 + 640) + 32LL;
    uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
    uint64_t v88 = v2;
    unint64_t v85 = v1 & 0xC000000000000001LL;
    do
    {
      if (v4) {
        id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, *(void *)(v0 + 640));
      }
      else {
        id v5 = *(id *)(v89 + 8 * v3);
      }
      os_log_type_t v6 = v5;
      uint64_t v7 = sub_100245F88((uint64_t)v5);
      uint64_t v8 = *v91;
      if (*(void *)(*v91 + 16) && (unint64_t v9 = sub_100023FE0(v7), (v10 & 1) != 0))
      {
        uint64_t v12 = *(void *)(v0 + 480);
        uint64_t v11 = *(void *)(v0 + 488);
        sub_1000649D4(*(void *)(v8 + 56) + *(void *)(v90 + 72) * v9, v12);
        sub_100064A54(v12, v11);
        swift_beginAccess(v11, v0 + 16, 1LL, 0LL);
        uint64_t v13 = *(int *)(v86 + 36);
        uint64_t v14 = *(void **)(v11 + v13);
        *(void *)(v11 + v13) = v6;
        unint64_t v15 = v6;

        unint64_t v16 = sub_100245F18(v15);
        uint64_t v17 = v16;
        if (v16)
        {
          uint64_t v18 = sub_1002C5058(v16);

          if (v18)
          {
            id v19 = (id)sub_1001AD81C((uint64_t)v18);

            uint64_t v18 = (id *)static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
            uint64_t v17 = v20;
          }

          else
          {
            uint64_t v17 = 0LL;
          }
        }

        else
        {
          uint64_t v18 = 0LL;
        }

        uint64_t v21 = *(void *)(v0 + 488);
        uint64_t v23 = *(void *)(v0 + 408);
        uint64_t v22 = *(void *)(v0 + 416);
        uint64_t v24 = *(void **)(v0 + 360);
        uint64_t v25 = *(void *)(v87 + 16);
        *(void *)(v87 + 8) = v18;
        *(void *)(v87 + 16) = v17;
        swift_bridgeObjectRelease(v25);
        uint64_t v26 = sub_100245F88((uint64_t)v15);
        sub_1000649D4(v21, v23);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v90 + 56))(v23, 0LL, 1LL, v22);
        uint64_t v27 = sub_1000658B8(v23, v26);
        static Logger.purchase.getter(v27);
        uint64_t v28 = (os_log_s *)Logger.logObject.getter(v24);
        os_log_type_t v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v82 = *(void *)(v0 + 584);
          uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
          uint64_t v80 = v15;
          uint64_t v81 = *(void *)(v0 + 512);
          uint64_t v77 = *(void *)(v0 + 488);
          uint64_t v30 = *(void **)(v0 + 360);
          os_log_t log = v28;
          uint64_t v31 = swift_slowAlloc(22LL, -1LL);
          uint64_t v32 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v79 = swift_slowAlloc(32LL, -1LL);
          uint64_t v92 = v79;
          *(_DWORD *)uint64_t v31 = 138412546;
          uint64_t v33 = *(void **)(v75 + v74);
          *(void *)(v0 + 32_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v33;
          id v34 = v33;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v76, v31 + 4, v31 + 12);
          void *v32 = v33;

          *(_WORD *)(v31 + 12) = 2082;
          uint64_t v35 = sub_10005A90C();
          unint64_t v37 = v36;
          *(void *)(v0 + 328) = sub_100088DB4(v35, v36, &v92);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v76, v0 + 336, v31 + 14, v31 + 22);
          swift_bridgeObjectRelease(v37);
          _os_log_impl( (void *)&_mh_execute_header,  log,  v29,  "[%@][%{public}s] Added batch candidate",  (uint8_t *)v31,  0x16u);
          uint64_t v38 = sub_1000079A0((uint64_t *)&unk_100458F50);
          swift_arrayDestroy(v32, 1LL, v38);
          swift_slowDealloc(v32, -1LL, -1LL);
          swift_arrayDestroy(v79, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v79, -1LL, -1LL);
          swift_slowDealloc(v31, -1LL, -1LL);

          v84(v82, v81);
          sub_100064A18(v77);
          uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
        }

        else
        {
          uint64_t v39 = *(void *)(v0 + 584);
          uint64_t v40 = *(void *)(v0 + 512);
          uint64_t v41 = *(void *)(v0 + 488);
          uint64_t v42 = *(void **)(v0 + 360);

          v83(v39, v40);
          sub_100064A18(v41);
        }

        uint64_t v2 = v88;
        unint64_t v4 = v85;
      }

      else
      {
      }

      ++v3;
    }

    while (v2 != v3);
LABEL_22:
    uint64_t v1 = v0 + 88;
    swift_bridgeObjectRelease(*(void *)(v0 + 640));
    *(void *)(v0 + 656) = [(id)objc_opt_self(LSApplicationWorkspace) defaultWorkspace];
    swift_beginAccess(v91, v0 + 112, 0LL, 0LL);
    uint64_t v43 = *(void *)(v0 + 136);
    *(void *)(v0 + 664) = v43;
    char v44 = *(_BYTE *)(v43 + 32);
    *(_BYTE *)(v0 + 812) = v44;
    uint64_t v45 = 1LL << v44;
    if (v45 < 64) {
      uint64_t v46 = ~(-1LL << v45);
    }
    else {
      uint64_t v46 = -1LL;
    }
    unint64_t v47 = v46 & *(void *)(v43 + 64);
    *(void *)(v0 + 672) = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey;
    uint64_t v48 = *(void *)(v0 + 608);
    *(void *)(v0 + 688) = v48;
    *(void *)(v0 + 68_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v48;
    swift_bridgeObjectRetain(v43);
    int64_t v49 = 0LL;
    while (1)
    {
      if (v47)
      {
        unint64_t v50 = __clz(__rbit64(v47));
        v47 &= v47 - 1;
        unint64_t v51 = v50 | (v49 << 6);
        uint64_t v52 = *(void *)(v0 + 664);
      }

      else
      {
        int64_t v53 = v49 + 1;
        if (__OFADD__(v49, 1LL))
        {
          __break(1u);
          goto LABEL_52;
        }

        int64_t v54 = (unint64_t)((1LL << *(_BYTE *)(v0 + 812)) + 63) >> 6;
        uint64_t v52 = *(void *)(v0 + 664);
        if (v53 >= v54) {
          goto LABEL_49;
        }
        uint64_t v55 = v52 + 64;
        unint64_t v56 = *(void *)(v52 + 64 + 8 * v53);
        ++v49;
        if (!v56)
        {
          int64_t v49 = v53 + 1;
          if (v53 + 1 >= v54) {
            goto LABEL_49;
          }
          unint64_t v56 = *(void *)(v55 + 8 * v49);
          if (!v56)
          {
            int64_t v49 = v53 + 2;
            if (v53 + 2 >= v54) {
              goto LABEL_49;
            }
            unint64_t v56 = *(void *)(v55 + 8 * v49);
            if (!v56)
            {
              int64_t v49 = v53 + 3;
              if (v53 + 3 >= v54) {
                goto LABEL_49;
              }
              unint64_t v56 = *(void *)(v55 + 8 * v49);
              if (!v56)
              {
                int64_t v57 = v53 + 4;
                if (v57 >= v54)
                {
LABEL_49:
                  uint64_t v65 = *(void **)(v0 + 616);
                  swift_release(v52);
                  uint64_t v66 = *(void *)(v0 + 136);
                  swift_bridgeObjectRetain(v66);
                  sub_10005B9E0(v67, v65);
                  uint64_t v69 = v68;
                  *(void *)(v0 + 752) = v68;
                  swift_bridgeObjectRelease(v66);
                  uint64_t v70 = (void *)swift_task_alloc(dword_100459D5C);
                  *(void *)(v0 + 76_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v70;
                  *uint64_t v70 = v0;
                  v70[1] = sub_100058AE8;
                  sub_10005C47C(v69, *(void *)(v0 + 616));
                  return;
                }

                unint64_t v56 = *(void *)(v55 + 8 * v57);
                if (!v56)
                {
                  while (1)
                  {
                    int64_t v49 = v57 + 1;
                    if (__OFADD__(v57, 1LL)) {
                      break;
                    }
                    if (v49 >= v54) {
                      goto LABEL_49;
                    }
                    unint64_t v56 = *(void *)(v55 + 8 * v49);
                    ++v57;
                    if (v56) {
                      goto LABEL_44;
                    }
                  }

LABEL_52:
                  __break(1u);
LABEL_53:
                  if (v1 < 0) {
                    uint64_t v73 = v1;
                  }
                  else {
                    uint64_t v73 = v1 & 0xFFFFFFFFFFFFFF8LL;
                  }
                  swift_bridgeObjectRetain(v1);
                  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v73);
                  swift_bridgeObjectRelease(v1);
                  goto LABEL_3;
                }

                int64_t v49 = v57;
              }
            }
          }
        }

  uint64_t v58 = ASDLogHandleForCategory(14LL);
  uint64_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v60 = selfa->_qaVerficationRevokedApps;
    uint64_t v61 = (NSMutableDictionary *)v72[3];
    *(_DWORD *)buf = 138412546;
    uint64_t v89 = v60;
    uint64_t v90 = 2048;
    __n128 v91 = v61;
    _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "[%@] Receipt refresh complete for %ld app(s)",  buf,  0x16u);
  }

  LOBYTE(selfa->super.super._keepAlive) = 1;
  objc_setProperty_atomic_copy(selfa, v62, 0LL, 32LL);
  _Block_object_dispose(&v67, 8);
  _Block_object_dispose(&v71, 8);
}

LABEL_44:
        unint64_t v47 = (v56 - 1) & v56;
        unint64_t v51 = __clz(__rbit64(v56)) + (v49 << 6);
      }

      *(void *)(v0 + 704) = v49;
      *(void *)(v0 + 696) = v47;
      uint64_t v59 = *(void *)(v0 + 464);
      uint64_t v58 = *(void *)(v0 + 472);
      uint64_t v60 = *(void *)(v0 + 416);
      sub_1000649D4(*(void *)(v52 + 56) + *(void *)(*(void *)(v0 + 424) + 72LL) * v51, v58);
      sub_100064A54(v58, v59);
      swift_beginAccess(v59, v0 + 88, 1LL, 0LL);
      uint64_t v61 = *(id **)(v59 + *(int *)(v60 + 36));
      if (v61)
      {
        char v62 = sub_100245F18(v61);
        *(void *)(v0 + 712) = v62;
        if (v62)
        {
          os_log_type_t v63 = v62;
          BOOL v64 = sub_1002C5058(v62);
          *(void *)(v0 + 72_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v64;
          if (v64)
          {
            uint64_t v71 = *(void *)(*(void *)(v0 + 360) + *(void *)(v0 + 672));
            *(void *)(v0 + 728) = v71;
            uint64_t v72 = (void *)swift_task_alloc(dword_100459D54);
            *(void *)(v0 + 736) = v72;
            void *v72 = v0;
            v72[1] = sub_100058248;
            sub_10005AA54(*(void *)(v0 + 464), v71);
            return;
          }
        }
      }

      sub_100064A18(*(void *)(v0 + 464));
    }
  }

  __break(1u);
}

        return 0LL;
      }

      goto LABEL_33;
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ams_activeiTunesAccount"));
  if (v13)
  {
  }

  else
  {
    uint64_t v14 = [*(id *)(a1 + 8) isArcade];

    if (v14)
    {
      if ([*(id *)(a1 + 32) isBackground])
      {
        unint64_t v15 = ASDLogHandleForCategory(28LL);
        os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 logKey]);
          *(_DWORD *)buf = 138412290;
          id v130 = v7;
          uint64_t v8 = "[%@] Not showing login dialog for background repair";
          goto LABEL_43;
        }
      }

      else
      {
        global_queue = dispatch_get_global_queue(21LL, 0LL);
        os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(global_queue);
        v125[0] = _NSConcreteStackBlock;
        v125[1] = 3221225472LL;
        v125[2] = sub_1001BD8C8;
        v125[3] = &unk_1003E9880;
        v125[4] = a1;
        dispatch_async((dispatch_queue_t)v6, v125);
      }

      goto LABEL_44;
    }
  }

  unint64_t v16 = sub_1001BC1E8((uint64_t)&OBJC_CLASS___ArcadeRepair, *(void **)(a1 + 8), *(void **)(a1 + 32));
  os_unfair_lock_lock_with_options(a1 + 20, 0x10000LL);
  *(_DWORD *)(a1 + 16) = v16;
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 20));
  if (v16 == -42110) {
    return 0LL;
  }
  if (v16 == -42584)
  {
    if ([*(id *)(a1 + 32) isBackground])
    {
      uint64_t v17 = ASDLogHandleForCategory(28LL);
      os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([(id)a1 logKey]);
        *(_DWORD *)buf = 138412290;
        id v130 = v7;
        uint64_t v8 = "[%@] Not displaying revoked dialog for background repair";
        goto LABEL_43;
      }

      goto LABEL_44;
    }
}

    v6[2](v6);
    goto LABEL_68;
  }

  if (a3 <= 900)
  {
    if (a3 > 721)
    {
      if (a3 != 722)
      {
        if (a3 != 730) {
          goto LABEL_37;
        }
        uint64_t v38 = objc_alloc(&OBJC_CLASS___AnonymousPingTask);
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSURL URLWithString:]( &OBJC_CLASS___NSURL,  "URLWithString:",  @"https://xp.apple.com/report/2/xp_app_buy?clientId=0&sf=143441&adamId=123"));
        uint64_t v131 = v39;
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v131, 1LL));
        id v34 = (_TtC9appstored6LogKey *)sub_10031E1DC(v38, v40);

        uint64_t v41 = sub_10020F1C0((uint64_t)&OBJC_CLASS___TaskQueue);
        uint64_t v42 = (id *)objc_claimAutoreleasedReturnValue(v41);
        id v130 = v34;
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v130, 1LL));
        if (v42) {
          [v42[1] addOperations:v43 waitUntilFinished:1];
        }
        goto LABEL_64;
      }

      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", @"http://www.apple.com"));
      os_log_type_t v29 = @"Some app";
      uint64_t v80 = v28;
      uint64_t v81 = 2LL;
    }

    else
    {
      if (a3 == 720)
      {
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", @"http://www.apple.com"));
        os_log_type_t v29 = &stru_1003F3E40;
      }

      else
      {
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", @"http://www.apple.com"));
        os_log_type_t v29 = @"Some app";
      }

      uint64_t v80 = v28;
      uint64_t v81 = 1LL;
    }

    uint64_t v90 = sub_10023FFB4((uint64_t)&OBJC_CLASS___UPPManifestDialogRequest, v80, v29, v81);
    id v34 = (_TtC9appstored6LogKey *)objc_claimAutoreleasedReturnValue(v90);

    uint64_t v42 = -[AMSSystemAlertDialogTask initWithRequest:]( objc_alloc(&OBJC_CLASS___AMSSystemAlertDialogTask),  "initWithRequest:",  v34);
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 present]);
    [v43 waitUntilFinishedWithTimeout:120.0];
LABEL_64:

LABEL_88:
    v6[2](v6);
    goto LABEL_89;
  }

  switch(a3)
  {
    case 901LL:
      uint64_t v12 = ASDLogHandleForCategory(14LL);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Testing Katana Arcade Entitlement Updates",  buf,  2u);
      }

      uint64_t v14 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
      unint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[KatanaSubscriptionCoordinator shared]( &OBJC_CLASS____TtC9appstored29KatanaSubscriptionCoordinator,  "shared"));
      unint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "ams_activeiTunesAccount"));

      uint64_t v126 = 0LL;
      uint64_t v18 = sub_10027580C((uint64_t)self, v17, &v126);
      id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      uint64_t v20 = v126;
      uint64_t v21 = [v15 updateSubscriptionInfoWithEntitlement:v19 account:v17 logKey:v14];
      uint64_t v22 = ASDLogHandleForCategory(14LL);
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)uint64_t v133 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Testing arcade cached update with result: %{BOOL}d",  buf,  8u);
      }

      v6[2](v6);
      goto LABEL_99;
    case 902LL:
      id v34 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
      uint64_t v61 = ASDLogHandleForCategory(14LL);
      char v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)uint64_t v133 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "[%@] Removing stale Katana supplemental account data for active account",  buf,  0xCu);
      }

      unint64_t v36 = (NSDateInterval *)objc_claimAutoreleasedReturnValue( +[KatanaSubscriptionCoordinator shared]( &OBJC_CLASS____TtC9appstored29KatanaSubscriptionCoordinator,  "shared"));
      os_log_type_t v63 = -[NSDateInterval removeStaleSubscriptionInfoWithLogKey:]( v36,  "removeStaleSubscriptionInfoWithLogKey:",  v34);
      BOOL v64 = ASDLogHandleForCategory(14LL);
      unint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
      if (!os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_44;
      }
      *(_DWORD *)buf = 138412546;
      *(void *)uint64_t v133 = v34;
      *(_WORD *)&v133[8] = 1024;
      LODWORD(v134) = v63;
      uint64_t v55 = "[%@] Removed stale Katana subscription info with success: %{BOOL}d";
      unint64_t v56 = v50;
      int64_t v57 = 18;
      goto LABEL_43;
    case 903LL:
      id v34 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
      uint64_t v65 = ASDLogHandleForCategory(14LL);
      uint64_t v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)uint64_t v133 = v34;
        _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "[%@] Migrating Katana supplemental account data for active account",  buf,  0xCu);
      }

      uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
      unint64_t v36 = (NSDateInterval *)objc_claimAutoreleasedReturnValue(objc_msgSend(v67, "ams_activeiTunesAccount"));

      uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue( +[KatanaSubscriptionCoordinator shared]( &OBJC_CLASS____TtC9appstored29KatanaSubscriptionCoordinator,  "shared"));
      uint64_t v69 = [v68 migrateSubscriptionStateWithAccount:v36 logKey:v34];
      uint64_t v70 = ASDLogHandleForCategory(14LL);
      uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
      if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_61;
      }
      *(_DWORD *)buf = 138412546;
      *(void *)uint64_t v133 = v34;
      *(_WORD *)&v133[8] = 1024;
      LODWORD(v134) = v69;
      uint64_t v72 = "[%@] Migrated Katana subscription info with success: %{BOOL}d";
      uint64_t v73 = v71;
      uint64_t v74 = 18;
      goto LABEL_60;
    case 904LL:
      uint64_t v75 = ASDLogHandleForCategory(14LL);
      uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "Sending arcade account event", buf, 2u);
      }

      uint64_t v77 = sub_1002A4FE0((uint64_t)&OBJC_CLASS___OcelotManager);
      uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(v77);
      sub_1002AA99C((uint64_t)v78);

      uint64_t v79 = ASDLogHandleForCategory(14LL);
      uint64_t v26 = (AppUsageManager *)objc_claimAutoreleasedReturnValue(v79);
      if (!os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_97;
      }
      *(_WORD *)buf = 0;
      uint64_t v60 = "Sent arcade account event";
      goto LABEL_53;
    default:
      if (a3 == 999)
      {
        uint64_t v82 = ASDLogHandleForCategory(14LL);
        uint64_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "Checking app intents", buf, 2u);
        }

        id v34 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
        uint64_t v84 = objc_alloc(&OBJC_CLASS___NSDateInterval);
        unint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));
        uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate distantFuture](&OBJC_CLASS___NSDate, "distantFuture"));
        unint64_t v36 = -[NSDateInterval initWithStartDate:endDate:](v84, "initWithStartDate:endDate:", v85, v86);

        uint64_t v87 = objc_alloc(&OBJC_CLASS____TtC9appstored7Intents);
        uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue( -[Intents intentUsageWithDateInterval:logKey:]( v87,  "intentUsageWithDateInterval:logKey:",  v36,  v34));

        uint64_t v88 = ASDLogHandleForCategory(14LL);
        uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v89 = [v68 count];
          *(_DWORD *)buf = 134217984;
          *(void *)uint64_t v133 = v89;
          uint64_t v72 = "Checked app intents returned: %lu launches";
          uint64_t v73 = v71;
          uint64_t v74 = 12;
LABEL_60:
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, v72, buf, v74);
        }

          if (*(void *)&self->super._success != 2LL)
          {
LABEL_48:
            uint64_t v69 = 0LL;
            goto LABEL_58;
          }

          uint64_t v66 = objc_alloc(&OBJC_CLASS___LSApplicationRecord);
          uint64_t v67 = sub_100323D88(self->super._error);
          uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
          uint64_t v65 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( v66,  "initWithBundleIdentifier:allowPlaceholder:error:",  v68,  0LL,  0LL);

          if (v65 && -[LSApplicationRecord isBeta](v65, "isBeta"))
          {

            goto LABEL_48;
          }

          uint64_t v75 = ASDLogHandleForCategory(2LL);
          uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
          if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
          {
            uint64_t v169 = (void *)self->_automaticType;
            if (v169) {
              uint64_t v169 = objc_getProperty(v169, v77, 80LL, 1);
            }
            uint64_t v170 = v169;
            *(_DWORD *)buf = 138412290;
            *(void *)&buf[4] = v170;
            _os_log_error_impl( (void *)&_mh_execute_header,  v76,  OS_LOG_TYPE_ERROR,  "[%@] Canceling automatic installation because beta version of app is not installed",  buf,  0xCu);
          }

          uint64_t v78 = ASDErrorDomain;
          uint64_t v79 = @"User does not have this beta app installed on device";
          uint64_t v80 = 604LL;
          goto LABEL_53;
        }

        uint64_t v83 = ASDLogHandleForCategory(2LL);
        uint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
        if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
        {
          uint64_t v171 = (void *)self->_automaticType;
          if (v171) {
            uint64_t v171 = objc_getProperty(v171, v85, 80LL, 1);
          }
          uint64_t v172 = v171;
          *(_DWORD *)buf = 138412290;
          *(void *)&buf[4] = v172;
          _os_log_error_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_ERROR,  "[%@] Automatic downloads are not permitted",  buf,  0xCu);
        }

        uint64_t v73 = ASDErrorDomain;
        uint64_t v74 = @"Restrictions prohibit automatic downloads";
      }

      else
      {
        uint64_t v70 = ASDLogHandleForCategory(2LL);
        uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
        {
          uint64_t v167 = (void *)self->_automaticType;
          if (v167) {
            uint64_t v167 = objc_getProperty(v167, v72, 80LL, 1);
          }
          uint64_t v168 = v167;
          *(_DWORD *)buf = 138412290;
          *(void *)&buf[4] = v168;
          _os_log_error_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_ERROR,  "[%@] Automatic downloads have been disabled",  buf,  0xCu);
        }

        uint64_t v73 = ASDErrorDomain;
        uint64_t v74 = @"User has disabled automatic downloads";
      }

      uint64_t v86 = ASDErrorWithDescription(v73, 602LL, v74);
      uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(v86);
LABEL_57:
      uint64_t v55 = v82;
      if (v55) {
        goto LABEL_30;
      }
LABEL_58:
      uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue( -[NSError valueForProperty:]( self->super._error,  "valueForProperty:",  @"supports_32bit_only"));
      uint64_t v88 = [v87 BOOLValue];

      if (v88)
      {
        uint64_t v89 = ASDLogHandleForCategory(2LL);
        uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
        if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
        {
          id v165 = (void *)self->_automaticType;
          if (v165) {
            id v165 = objc_getProperty(v165, v91, 80LL, 1);
          }
          Class v166 = v165;
          *(_DWORD *)buf = 138412290;
          *(void *)&buf[4] = v166;
          _os_log_error_impl( (void *)&_mh_execute_header,  v90,  OS_LOG_TYPE_ERROR,  "[%@] Application only supports 32-bit architecture",  buf,  0xCu);
        }

        uint64_t v92 = ASDErrorWithDescription(ASDErrorDomain, 751LL, @"Application only supports 32-bit architecture");
        unint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
      }

      else
      {
        unint64_t v93 = 0LL;
      }

      unint64_t v94 = v93;
      unint64_t v56 = v94;

      if (v94) {
        goto LABEL_31;
      }
      if (+[AMSDevice deviceIsAppleTV](&OBJC_CLASS___AMSDevice, "deviceIsAppleTV")
        && (uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue(-[NSError valueForProperty:](self->super._error, "valueForProperty:", @"restore_type")),
            uint64_t v96 = [v95 integerValue],
            v95,
            v96 == (id)1))
      {
        uint64_t v187 = 0LL;
        uint64_t v97 = sub_1001E5794(v21, &v187);
        uint64_t v22 = v187;
        if ((v97 & 1) == 0)
        {
          char v98 = sub_1002CD610( (uint64_t)&OBJC_CLASS___AppInstallPreambleResponse,  -[NSError databaseID](self->super._error, "databaseID"),  v21,  v22);
          int64_t v54 = objc_claimAutoreleasedReturnValue(v98);
          goto LABEL_26;
        }
      }

      else
      {
        uint64_t v22 = 0LL;
      }

      if (!v21)
      {
LABEL_114:
        sub_1001EB088((uint64_t)&OBJC_CLASS___AppProgressCoordinator, self->super._error, @"Restart");
        uint64_t v156 = (void *)objc_claimAutoreleasedReturnValue( -[SQLiteMemoryEntity valueForProperty:]( self->_install,  "valueForProperty:",  @"data_promise_id"));
        if (v156)
        {
          uint64_t v181 = v22;
          uint64_t v157 = sub_1002204FC(objc_alloc(&OBJC_CLASS___CoordinatorPromiseProvider), v21, &v181);
          uint64_t v158 = v181;

          uint64_t v159 = sub_100220630(v157, v156, 0LL);
          unint64_t v160 = (void *)objc_claimAutoreleasedReturnValue(v159);
          if ([v160 isComplete])
          {
            uint64_t v161 = -[NSError databaseID](self->super._error, "databaseID");
            uint64_t v162 = v21;
            objc_opt_self(&OBJC_CLASS___AppInstallPreambleResponse);
            uint64_t v41 = sub_1002CE7BC((id *)objc_alloc(&OBJC_CLASS___AppInstallPreambleResponse), v161, (void *)3, v162, 0LL);

LABEL_121:
            uint64_t v22 = v158;
            goto LABEL_33;
          }
        }

        else
        {
          uint64_t v158 = v22;
        }

        uint64_t v164 = -[NSError databaseID](self->super._error, "databaseID");
        uint64_t v157 = v21;
        objc_opt_self(&OBJC_CLASS___AppInstallPreambleResponse);
        uint64_t v41 = sub_1002CE7BC((id *)objc_alloc(&OBJC_CLASS___AppInstallPreambleResponse), v164, (void *)1, v157, 0LL);
        goto LABEL_121;
      }

      if ([v21 conformsToProtocol:&OBJC_PROTOCOL___IXCoordinatorWithPlaceholderPromise]
        && [v21 creatorIdentifier] == (id)1
        && (sub_1001E4DA0(v21) & 1) == 0)
      {
        unint64_t v99 = ASDLogHandleForCategory(2LL);
        os_log_type_t v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v102 = (void *)self->_automaticType;
          if (v102) {
            uint64_t v102 = objc_getProperty(v102, v101, 80LL, 1);
          }
          char v103 = v102;
          *(_DWORD *)buf = 138412290;
          *(void *)&buf[4] = v103;
          _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_DEFAULT,  "[%@] Setting a placeholder promise in Preamble because the coordinator doesn't already have one",  buf,  0xCu);
        }

        uint64_t v104 = self->super._error;
        install = self->_install;
        uint64_t v186 = v22;
        id v106 = sub_10026D48C(v104, install, &v186);
        uint64_t v107 = (id)objc_claimAutoreleasedReturnValue(v106);
        uint64_t v108 = v186;

        uint64_t v185 = v108;
        uint64_t v109 = sub_10026C808((uint64_t)v107, &v185);
        uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue(v109);
        unint64_t v111 = v185;

        if (v110)
        {
          uint64_t v184 = v111;
          uint64_t v112 = sub_1001E606C(v21, v110, &v184);
          uint64_t v22 = v184;

          if ((v112 & 1) != 0)
          {

            goto LABEL_79;
          }

          [v110 cancelForReason:v22 client:1 error:0];
        }

        else
        {
          uint64_t v22 = v111;
        }

        uint64_t v173 = sub_1002CD610( (uint64_t)&OBJC_CLASS___AppInstallPreambleResponse,  -[NSError databaseID](self->super._error, "databaseID"),  v21,  v22);
        uint64_t v41 = (id *)objc_claimAutoreleasedReturnValue(v173);

        goto LABEL_137;
      }

uint64_t sub_100058248(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 736LL);
  *(void *)(*(void *)v1 + 744LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000582A4, 0LL, 0LL);
}

uint64_t sub_1000582A4()
{
  uint64_t v1 = *(void **)(v0 + 744);
  if (v1)
  {
    uint64_t v2 = (uint64_t)sub_1001E4BFC(*(void **)(v0 + 744));
    if ((v2 & 1) == 0
      || (uint64_t v3 = objc_opt_self(&OBJC_CLASS___IXInitiatingAppInstallCoordinator),
          (uint64_t v2 = swift_dynamicCastObjCClass(v1, v3)) == 0))
    {
      uint64_t v33 = *(void **)(v0 + 360);
      static Logger.purchase.getter(v2);
      id v34 = v1;
      id v35 = v33;
      id v36 = v34;
      id v37 = v35;
      id v38 = v36;
      uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
      os_log_type_t v40 = static os_log_type_t.default.getter();
      id v106 = v39;
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v97 = *(void *)(v0 + 744);
        uint64_t v41 = *(void **)(v0 + 728);
        unint64_t v99 = *(void **)(v0 + 712);
        os_log_type_t v100 = *(void **)(v0 + 720);
        uint64_t v104 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
        uint64_t v101 = *(void *)(v0 + 512);
        uint64_t v103 = *(void *)(v0 + 576);
        uint64_t v96 = *(void *)(v0 + 464);
        uint64_t v42 = *(void **)(v0 + 360);
        uint64_t v43 = swift_slowAlloc(38LL, -1LL);
        char v44 = (void *)swift_slowAlloc(16LL, -1LL);
        uint64_t v98 = swift_slowAlloc(32LL, -1LL);
        uint64_t v107 = v98;
        *(_DWORD *)uint64_t v43 = 138413058;
        *(void *)(v0 + 176) = v41;
        id v45 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v43 + 4, v43 + 12);
        *char v44 = v41;

        *(_WORD *)(v43 + 12) = 2082;
        uint64_t v46 = sub_10005A90C();
        unint64_t v48 = v47;
        *(void *)(v0 + 184) = sub_100088DB4(v46, v47, &v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v43 + 14, v43 + 22);
        swift_bridgeObjectRelease(v48);
        *(_WORD *)(v43 + 22) = 2112;
        *(void *)(v0 + 192) = v38;
        id v49 = v38;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v43 + 24, v43 + 32);
        v44[1] = v97;

        *(_WORD *)(v43 + 32) = 1024;
        LODWORD(v48) = sub_1001E4BFC(v49);

        *(_DWORD *)(v0 + 808) = v48;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 808, v0 + 812, v43 + 34, v43 + 38);

        _os_log_impl( (void *)&_mh_execute_header,  v106,  v40,  "[%@][%{public}s] Skipping install with existing invalid coordinator: %@ AppStore isAppDRI: %{BOOL}d",  (uint8_t *)v43,  0x26u);
        uint64_t v50 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v44, 2LL, v50);
        swift_slowDealloc(v44, -1LL, -1LL);
        swift_arrayDestroy(v98, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v98, -1LL, -1LL);
        swift_slowDealloc(v43, -1LL, -1LL);

        v104(v103, v101);
        uint64_t result = sub_100064A18(v96);
        uint64_t v52 = *(void *)(v0 + 608);
      }

      else
      {
        int64_t v57 = *(void **)(v0 + 720);
        uint64_t v58 = *(void **)(v0 + 712);
        uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v0 + 680);
        uint64_t v60 = *(void *)(v0 + 576);
        uint64_t v61 = *(void *)(v0 + 512);
        uint64_t v62 = *(void *)(v0 + 464);
        os_log_type_t v63 = *(void **)(v0 + 360);

        v59(v60, v61);
        uint64_t result = sub_100064A18(v62);
        uint64_t v52 = *(void *)(v0 + 680);
      }

      uint64_t v53 = v52;
      goto LABEL_21;
    }

    uint64_t v105 = v0 + 64;
    uint64_t v4 = *(void *)(v0 + 656);
    uint64_t v5 = *(void *)(v0 + 464);
    os_log_type_t v6 = *(void **)(v5 + 24);
    *(void *)(v5 + 24) = v2;
    id v7 = v1;

    if (!v4) {
      goto LABEL_19;
    }
    uint64_t v8 = *(void *)(v0 + 712);
    id v9 = *(id *)(v0 + 656);
    NSString v10 = (id)sub_1001AD81C(v8);
    if (!v10)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v12 = v11;
      NSString v10 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
    }

    NSString v13 = (id)sub_1001AD81C(*(void *)(v0 + 720));
    if (!v13)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v15 = v14;
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v15);
    }

    id v16 = [*(id *)(v0 + 656) createDeviceIdentifierWithVendorName:v10 bundleIdentifier:v13];

    if (v16)
    {
      uint64_t v18 = *(void *)(v0 + 384);
      uint64_t v17 = *(void *)(v0 + 392);
      uint64_t v20 = *(void *)(v0 + 368);
      uint64_t v19 = *(void *)(v0 + 376);
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

      uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32);
      v21(v20, v17, v19);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v20, 0LL, 1LL, v19);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v20, 1LL, v19) != 1)
      {
        uint64_t v102 = *(void **)(v0 + 656);
        uint64_t v22 = *(void *)(v0 + 464);
        uint64_t v23 = *(void *)(v0 + 416);
        uint64_t v24 = *(void *)(v0 + 400);
        uint64_t v25 = *(void *)(v0 + 376);
        uint64_t v26 = *(void *)(v0 + 384);
        uint64_t v27 = ((uint64_t (*)(uint64_t, void, uint64_t))v21)(v24, *(void *)(v0 + 368), v25);
        uint64_t v28 = UUID.uuidString.getter(v27);
        uint64_t v30 = v29;

        (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
        uint64_t v31 = (uint64_t *)(v22 + *(int *)(v23 + 40));
        uint64_t v32 = v31[1];
        uint64_t *v31 = v28;
        v31[1] = v30;
        swift_bridgeObjectRelease(v32);
LABEL_19:
        uint64_t v65 = *(void **)(v0 + 720);
        uint64_t v66 = *(void **)(v0 + 712);
        uint64_t v67 = *(void *)(v0 + 464);
        uint64_t v68 = *(void *)(v0 + 416);
        uint64_t v69 = *(void *)(v0 + 424);
        uint64_t v70 = *(void *)(v0 + 408);
        uint64_t v71 = *(void *)(v67 + 32);
        sub_1000649D4(v67, v70);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(v70, 0LL, 1LL, v68);
        swift_beginAccess(v0 + 136, v105, 33LL, 0LL);
        sub_1000658B8(v70, v71);
        swift_endAccess(v105);

        uint64_t v56 = v67;
        goto LABEL_20;
      }
    }

    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 384) + 56LL))( *(void *)(v0 + 368),  1LL,  1LL,  *(void *)(v0 + 376));
    }

    uint64_t v64 = *(void *)(v0 + 368);

    sub_100015240(v64, (uint64_t *)&unk_10045AC20);
    goto LABEL_19;
  }

  int64_t v54 = *(void **)(v0 + 720);
  uint64_t v55 = *(void *)(v0 + 464);

  uint64_t v56 = v55;
LABEL_20:
  uint64_t result = sub_100064A18(v56);
  uint64_t v53 = *(void *)(v0 + 688);
  uint64_t v52 = *(void *)(v0 + 680);
LABEL_21:
  int64_t v72 = *(void *)(v0 + 704);
  unint64_t v73 = *(void *)(v0 + 696);
  *(void *)(v0 + 688) = v53;
  *(void *)(v0 + 68_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v52;
  while (v73)
  {
    unint64_t v74 = __clz(__rbit64(v73));
    v73 &= v73 - 1;
    unint64_t v75 = v74 | (v72 << 6);
    uint64_t result = *(void *)(v0 + 664);
LABEL_41:
    *(void *)(v0 + 704) = v72;
    *(void *)(v0 + 696) = v73;
    uint64_t v82 = *(void *)(v0 + 464);
    uint64_t v81 = *(void *)(v0 + 472);
    uint64_t v83 = *(void *)(v0 + 416);
    sub_1000649D4(*(void *)(result + 56) + *(void *)(*(void *)(v0 + 424) + 72LL) * v75, v81);
    sub_100064A54(v81, v82);
    swift_beginAccess(v82, v0 + 88, 1LL, 0LL);
    uint64_t v84 = *(id **)(v82 + *(int *)(v83 + 36));
    if (v84)
    {
      unint64_t v85 = sub_100245F18(v84);
      *(void *)(v0 + 712) = v85;
      if (v85)
      {
        uint64_t v86 = v85;
        uint64_t v87 = sub_1002C5058(v85);
        *(void *)(v0 + 72_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v87;
        if (v87)
        {
          uint64_t v94 = *(void *)(*(void *)(v0 + 360) + *(void *)(v0 + 672));
          *(void *)(v0 + 728) = v94;
          uint64_t v95 = (void *)swift_task_alloc(dword_100459D54);
          *(void *)(v0 + 736) = v95;
          *uint64_t v95 = v0;
          v95[1] = sub_100058248;
          return sub_10005AA54(*(void *)(v0 + 464), v94);
        }
      }
    }

    uint64_t result = sub_100064A18(*(void *)(v0 + 464));
  }

  int64_t v76 = v72 + 1;
  if (__OFADD__(v72, 1LL))
  {
    __break(1u);
    goto LABEL_48;
  }

  int64_t v77 = (unint64_t)((1LL << *(_BYTE *)(v0 + 812)) + 63) >> 6;
  uint64_t result = *(void *)(v0 + 664);
  if (v76 >= v77) {
    goto LABEL_45;
  }
  uint64_t v78 = result + 64;
  unint64_t v79 = *(void *)(result + 64 + 8 * v76);
  ++v72;
  if (v79) {
    goto LABEL_40;
  }
  int64_t v72 = v76 + 1;
  if (v76 + 1 >= v77) {
    goto LABEL_45;
  }
  unint64_t v79 = *(void *)(v78 + 8 * v72);
  if (v79) {
    goto LABEL_40;
  }
  int64_t v72 = v76 + 2;
  if (v76 + 2 >= v77) {
    goto LABEL_45;
  }
  unint64_t v79 = *(void *)(v78 + 8 * v72);
  if (v79) {
    goto LABEL_40;
  }
  int64_t v72 = v76 + 3;
  if (v76 + 3 >= v77) {
    goto LABEL_45;
  }
  unint64_t v79 = *(void *)(v78 + 8 * v72);
  if (v79)
  {
LABEL_40:
    unint64_t v73 = (v79 - 1) & v79;
    unint64_t v75 = __clz(__rbit64(v79)) + (v72 << 6);
    goto LABEL_41;
  }

  int64_t v80 = v76 + 4;
  if (v80 >= v77)
  {
LABEL_45:
    uint64_t v88 = *(void **)(v0 + 616);
    swift_release(result);
    uint64_t v89 = *(void *)(v0 + 136);
    swift_bridgeObjectRetain(v89);
    sub_10005B9E0(v90, v88);
    uint64_t v92 = v91;
    *(void *)(v0 + 752) = v91;
    swift_bridgeObjectRelease(v89);
    unint64_t v93 = (void *)swift_task_alloc(dword_100459D5C);
    *(void *)(v0 + 76_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v93;
    *unint64_t v93 = v0;
    v93[1] = sub_100058AE8;
    return sub_10005C47C(v92, *(void *)(v0 + 616));
  }

  unint64_t v79 = *(void *)(v78 + 8 * v80);
  if (v79)
  {
    int64_t v72 = v80;
    goto LABEL_40;
  }

  while (1)
  {
    int64_t v72 = v80 + 1;
    if (__OFADD__(v80, 1LL)) {
      break;
    }
    if (v72 >= v77) {
      goto LABEL_45;
    }
    unint64_t v79 = *(void *)(v78 + 8 * v72);
    ++v80;
    if (v79) {
      goto LABEL_40;
    }
  }

LABEL_48:
  __break(1u);
  return result;
}

        uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v12 valueForProperty:@"cumulative_user_count"]);
        unint64_t v51 = v50;
        if (v50) {
          sub_1002FB14C((void *)v18, (uint64_t)[v50 integerValue]);
        }
        uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v12 valueForProperty:@"usage_time"]);
        uint64_t v53 = v52;
        if ((!v3 || *((void *)v3 + 4) != 4LL) && v52) {
          sub_1002FB32C((void *)v18, (uint64_t)[v52 longLongValue]);
        }
        int64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v12 valueForProperty:@"week_start_time"]);
        uint64_t v55 = v54;
        if (v54)
        {
          uint64_t v56 = sub_1001E84AC(v54);
          int64_t v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
          if (v57) {
            sub_1002FBB90((id *)v18, v57);
          }

          NSString v10 = &OBJC_IVAR___ODRApplication__variantID;
        }

        if (v18) {
          -[NSMutableArray addObject:](v64, "addObject:", v18);
        }

        uint64_t v11 = (char *)v11 + 1;
      }

      while (v67 != v11);
      uint64_t v58 = [obj countByEnumeratingWithState:&v69 objects:v73 count:16];
      uint64_t v67 = v58;
      if (!v58)
      {
LABEL_65:

        id v9 = v61;
        uint64_t v4 = v62;
        break;
      }
    }
  }

  -[NSMutableArray addObjectsFromArray:](v4, "addObjectsFromArray:", v64, v61, v62);
  uint64_t v59 = -[NSMutableArray copy](v4, "copy");

  return v59;
}

    id v38 = *(void **)(a1 + 32);
    os_log_type_t v40 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    uint64_t v39 = (uint64_t)WeakRetained;
    goto LABEL_49;
  }

  uint64_t v41 = ASDLogHandleForCategory(19LL);
  uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    char v44 = *(id *)(a1 + 32);
    if (v44) {
      char v44 = objc_getProperty(v44, v43, 184LL, 1);
    }
    id v45 = v44;
    uint64_t v46 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412546;
    unint64_t v79 = v45;
    int64_t v80 = 2114;
    uint64_t v81 = v46;
    _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "[%@] Error, no destination path for download: %{public}@",  buf,  0x16u);
  }

  id v49 = a1 + 32;
  unint64_t v47 = *(void **)(a1 + 32);
  unint64_t v48 = *(void *)(v49 + 8);
  uint64_t v50 = ASDErrorWithTitleAndMessage(@"_OnDemandResourcesErrorDomain", 120LL, &stru_1003F3E40, &stru_1003F3E40);
  unint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
  sub_100313F34(v48, v47, v51);

LABEL_50:
}

uint64_t sub_100058AE8(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 760LL);
  v4[96] = a1;
  v4[97] = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_bridgeObjectRelease(v4[20]);
    os_log_type_t v6 = sub_10005A1BC;
  }

  else
  {
    swift_bridgeObjectRetain(a1);
    os_log_type_t v6 = sub_100058B6C;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

void sub_100058B6C()
{
  uint64_t v1 = *(void *)(v0 + 768);
  unint64_t v146 = (unint64_t)v1 >> 62;
  uint64_t v147 = v1;
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v11 = *(void *)(v0 + 768);
    }
    else {
      uint64_t v11 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v11);
    uint64_t v13 = v1;
    uint64_t v2 = v12;
    swift_bridgeObjectRelease(v13);
    if (v2) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v2)
    {
LABEL_3:
      if (v2 < 1) {
        goto LABEL_67;
      }
      uint64_t v3 = 0LL;
      uint64_t v4 = *(void *)(v0 + 768) + 32LL;
      do
      {
        if ((v147 & 0xC000000000000001LL) != 0) {
          id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v3, *(void *)(v0 + 768));
        }
        else {
          id v5 = *(id *)(v4 + 8 * v3);
        }
        id v7 = v5;
        id v8 = sub_1002CBA30(v5, v6);
        if (v8)
        {
          id v9 = v8;
          id v10 = [v8 longLongValue];

          sub_100061828(&v182, (uint64_t)v10);
        }

        ++v3;
      }

      while (v2 != v3);
    }
  }

  uint64_t v148 = v0 + 256;
  uint64_t v144 = v0 + 272;
  uint64_t v14 = (void *)(v0 + 160);
  uint64_t v15 = *(void *)(v0 + 448);
  uint64_t v164 = (void *)(v0 + 240);
  Class v166 = (void **)(v0 + 232);
  uint64_t v145 = *(void **)(v0 + 440);
  swift_bridgeObjectRelease(*(void *)(v0 + 768));
  uint64_t v16 = *(void *)(v0 + 136);
  uint64_t v170 = v16 + 64;
  uint64_t v17 = -1LL;
  uint64_t v18 = -1LL << *(_BYTE *)(v16 + 32);
  if (-v18 < 64) {
    uint64_t v17 = ~(-1LL << -(char)v18);
  }
  unint64_t v19 = v17 & *(void *)(v16 + 64);
  int64_t v172 = (unint64_t)(63 - v18) >> 6;
  uint64_t v174 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
  swift_bridgeObjectRetain(v16);
  int64_t v20 = 0LL;
  uint64_t v149 = v15;
  uint64_t v168 = v16;
  if (!v19) {
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v177 = (v19 - 1) & v19;
  int64_t v179 = v20;
  for (unint64_t i = __clz(__rbit64(v19)) | (v20 << 6); ; unint64_t i = __clz(__rbit64(v23)) + (v24 << 6))
  {
    uint64_t v26 = *(void *)(v0 + 448);
    uint64_t v27 = *(void *)(v0 + 456);
    sub_1000649D4(*(void *)(v16 + 56) + *(void *)(*(void *)(v0 + 424) + 72LL) * i, v27);
    sub_100064A54(v27, v26);
    BOOL v28 = sub_1000566F0(*(void *)(v15 + 32), (uint64_t)&_swiftEmptySetSingleton);
    uint64_t v29 = *(void *)(v0 + 448);
    uint64_t v30 = *(void **)(v0 + 360);
    if (!v28)
    {
      uint64_t v40 = *(void *)(v0 + 432);
      static Logger.purchase.getter(v28);
      sub_1000649D4(v29, v40);
      uint64_t v41 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v42 = static os_log_type_t.error.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = *(void *)(v0 + 672);
        uint64_t v159 = *(void *)(v0 + 512);
        uint64_t v162 = *(void *)(v0 + 560);
        uint64_t v153 = *(void *)(v0 + 432);
        char v44 = *(char **)(v0 + 360);
        uint64_t v45 = swift_slowAlloc(22LL, -1LL);
        uint64_t v46 = (void *)swift_slowAlloc(8LL, -1LL);
        uint64_t v156 = swift_slowAlloc(32LL, -1LL);
        uint64_t v182 = v156;
        *(_DWORD *)uint64_t v45 = 138412546;
        unint64_t v47 = *(void **)&v44[v43];
        *(void *)(v0 + 248) = v47;
        id v48 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v148, v45 + 4, v45 + 12);
        *uint64_t v46 = v47;

        *(_WORD *)(v45 + 12) = 2082;
        uint64_t v49 = sub_10005A90C();
        unint64_t v51 = v50;
        *(void *)(v0 + 256) = sub_100088DB4(v49, v50, &v182);
        uint64_t v15 = v149;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v148, v0 + 264, v45 + 14, v45 + 22);
        unint64_t v52 = v51;
        uint64_t v14 = (void *)(v0 + 160);
        swift_bridgeObjectRelease(v52);
        sub_100064A18(v153);
        _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "[%@][%{public}s] Failed to find item in purchase response",  (uint8_t *)v45,  0x16u);
        uint64_t v53 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v46, 1LL, v53);
        swift_slowDealloc(v46, -1LL, -1LL);
        swift_arrayDestroy(v156, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v156, -1LL, -1LL);
        swift_slowDealloc(v45, -1LL, -1LL);

        uint64_t v55 = v159;
        uint64_t v54 = v162;
      }

      else
      {
        uint64_t v56 = *(void *)(v0 + 560);
        uint64_t v57 = *(void *)(v0 + 512);
        uint64_t v58 = *(void *)(v0 + 432);
        uint64_t v59 = *(void **)(v0 + 360);

        sub_100064A18(v58);
        uint64_t v54 = v56;
        uint64_t v55 = v57;
      }

      v174(v54, v55);
      type metadata accessor for ASDError(0LL);
      uint64_t v61 = v60;
      *uint64_t v164 = 742LL;
      unint64_t v62 = sub_10006D16C((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v63 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
      _BridgedStoredNSError.init(_:userInfo:)(v166, v164, v62, v61, v63);
      uint64_t v64 = *v166;
      id v65 = objc_msgSend(objc_allocWithZone(ASDPurchaseResponseItem), "init", v144);
      uint64_t v66 = *(void *)(v15 + 16);
      uint64_t v16 = v168;
      if (v66)
      {
        swift_bridgeObjectRetain(*(void *)(v15 + 16));
        NSString v67 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v66);
      }

      else
      {
        NSString v67 = 0LL;
      }

      [v65 _setBundleID:v67];

      Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
      [v65 _setItemID:isa];

      id v69 = v64;
      uint64_t v70 = (void *)_convertErrorToNSError(_:)(v69);

      [v65 _setError:v70];
      id v71 = v65;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v71);
      unint64_t v73 = *(void *)((*v14 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v72 = *(void *)((*v14 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v73 >= v72 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1LL);
      }
      unint64_t v74 = *(void **)(v0 + 448);
      uint64_t v75 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v73, v71);
      specialized Array._endMutation()(v75);
      id v76 = v69;
      sub_10005CB0C(v74, (uint64_t)v76);

      uint64_t v39 = (uint64_t)v74;
      goto LABEL_47;
    }

    uint64_t v31 = *(void *)(v0 + 440);
    static Logger.purchase.getter(v28);
    sub_1000649D4(v29, v31);
    uint64_t v32 = (void *)Logger.logObject.getter(v30);
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled((os_log_t)v32, v33))
    {
      uint64_t v34 = *(void *)(v0 + 568);
      uint64_t v35 = *(void *)(v0 + 512);
      uint64_t v37 = *(void *)(v0 + 440);
      uint64_t v36 = *(void *)(v0 + 448);
      id v38 = *(void **)(v0 + 360);

      sub_100064A18(v37);
      v174(v34, v35);
      uint64_t v39 = v36;
LABEL_47:
      sub_100064A18(v39);
      goto LABEL_48;
    }

    uint64_t v77 = *(void *)(v0 + 672);
    uint64_t v78 = *(char **)(v0 + 360);
    uint64_t v79 = swift_slowAlloc(22LL, -1LL);
    int64_t v80 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v175 = swift_slowAlloc(32LL, -1LL);
    uint64_t v181 = v175;
    *(_DWORD *)uint64_t v79 = 138412546;
    uint64_t v81 = *(void **)&v78[v77];
    *(void *)(v79 + 4) = v81;
    *int64_t v80 = v81;
    id v82 = v81;

    *(_WORD *)(v79 + 12) = 2082;
    uint64_t v182 = 5849665LL;
    unint64_t v183 = 0xE300000000000000LL;
    uint64_t v83 = UUID.uuidString.getter();
    unint64_t v85 = v84;
    uint64_t v86 = sub_100092034(8LL, v83, v84);
    uint64_t v88 = v87;
    uint64_t v90 = v89;
    uint64_t v92 = v91;
    swift_bridgeObjectRelease(v85);
    v93._countAndFlagsBits = static String._fromSubstring(_:)(v86, v88, v90, v92);
    object = v93._object;
    String.append(_:)(v93);
    swift_bridgeObjectRelease(object);
    swift_bridgeObjectRelease(v92);
    v95._countAndFlagsBits = 47LL;
    v95._object = (void *)0xE100000000000000LL;
    String.append(_:)(v95);
    uint64_t v96 = v145[2];
    if (v96)
    {
      uint64_t v97 = v145[1];
      uint64_t v98 = (void *)v145[2];
    }

    else
    {
      uint64_t v97 = 0LL;
      uint64_t v98 = (void *)0xE000000000000000LL;
    }

    uint64_t v99 = *(void *)(v0 + 568);
    uint64_t v154 = *(void *)(v0 + 512);
    uint64_t v100 = *(void *)(v0 + 440);
    uint64_t v157 = *(void *)(v0 + 448);
    unint64_t v160 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
    swift_bridgeObjectRetain(v96);
    v101._countAndFlagsBits = v97;
    v101._object = v98;
    String.append(_:)(v101);
    swift_bridgeObjectRelease(v98);
    v102._countAndFlagsBits = 58LL;
    v102._object = (void *)0xE100000000000000LL;
    String.append(_:)(v102);
    *(void *)(v0 + 264) = v145[4];
    v103._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
    uint64_t v104 = v103._object;
    String.append(_:)(v103);
    swift_bridgeObjectRelease(v104);
    unint64_t v105 = v183;
    *(void *)(v79 + 14) = sub_100088DB4(v182, v183, &v181);
    swift_bridgeObjectRelease(v105);
    sub_100064A18(v100);
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v32,  v33,  "[%@][%{public}s] Found purchase response item",  (uint8_t *)v79,  0x16u);
    uint64_t v106 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v80, 1LL, v106);
    swift_slowDealloc(v80, -1LL, -1LL);
    swift_arrayDestroy(v175, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v175, -1LL, -1LL);
    swift_slowDealloc(v79, -1LL, -1LL);

    v160(v99, v154);
    sub_100064A18(v157);
    uint64_t v174 = *(void (**)(uint64_t, uint64_t))(v0 + 688);
    uint64_t v15 = v149;
    uint64_t v14 = (void *)(v0 + 160);
    uint64_t v16 = v168;
LABEL_48:
    unint64_t v19 = v177;
    int64_t v20 = v179;
    if (v177) {
      goto LABEL_18;
    }
LABEL_19:
    int64_t v22 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
      goto LABEL_66;
    }

    if (v22 >= v172) {
      goto LABEL_54;
    }
    unint64_t v23 = *(void *)(v170 + 8 * v22);
    int64_t v24 = v20 + 1;
    if (!v23)
    {
      int64_t v24 = v20 + 2;
      if (v20 + 2 >= v172) {
        goto LABEL_54;
      }
      unint64_t v23 = *(void *)(v170 + 8 * v24);
      if (!v23)
      {
        int64_t v24 = v20 + 3;
        if (v20 + 3 >= v172) {
          goto LABEL_54;
        }
        unint64_t v23 = *(void *)(v170 + 8 * v24);
        if (!v23)
        {
          int64_t v24 = v20 + 4;
          if (v20 + 4 >= v172) {
            goto LABEL_54;
          }
          unint64_t v23 = *(void *)(v170 + 8 * v24);
          if (!v23) {
            break;
          }
        }
      }
    }

uint64_t sub_100059908(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 792LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 784LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 768LL);
  *(void *)(*(void *)v1 + 800LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  return swift_task_switch(sub_10005997C, 0LL, 0LL);
}

uint64_t sub_10005997C()
{
  uint64_t v1 = *(void *)(v0 + 800);
  if (v1) {
    sub_100055C1C(v1, (uint64_t (*)(uint64_t, void, uint64_t))sub_100063868);
  }
  uint64_t v2 = *(void **)(v0 + 752);
  uint64_t v3 = *(void **)(v0 + 656);
  uint64_t v4 = *(void **)(v0 + 616);
  uint64_t v5 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 160);
  id v7 = objc_allocWithZone(&OBJC_CLASS___ASDPurchaseResponse);
  sub_10001517C(0LL, &qword_100459D40, &OBJC_CLASS___ASDPurchaseResponseItem_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v6);
  id v9 = [v7 initWithPurchaseResponseItems:isa];

  id v10 = *(void **)(v5 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse);
  *(void *)(v5 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse) = v9;

  uint64_t v11 = *(void *)(v0 + 600);
  uint64_t v12 = *(void *)(v0 + 592);
  uint64_t v13 = *(void *)(v0 + 584);
  uint64_t v14 = *(void *)(v0 + 576);
  uint64_t v15 = *(void *)(v0 + 568);
  uint64_t v16 = *(void *)(v0 + 560);
  uint64_t v17 = *(void *)(v0 + 552);
  uint64_t v18 = *(void *)(v0 + 544);
  uint64_t v19 = *(void *)(v0 + 536);
  uint64_t v21 = *(void *)(v0 + 528);
  uint64_t v22 = *(void *)(v0 + 504);
  uint64_t v23 = *(void *)(v0 + 496);
  uint64_t v24 = *(void *)(v0 + 488);
  uint64_t v25 = *(void *)(v0 + 480);
  uint64_t v26 = *(void *)(v0 + 472);
  uint64_t v27 = *(void *)(v0 + 464);
  uint64_t v28 = *(void *)(v0 + 456);
  uint64_t v29 = *(void *)(v0 + 448);
  uint64_t v30 = *(void *)(v0 + 440);
  uint64_t v31 = *(void *)(v0 + 432);
  uint64_t v32 = *(void *)(v0 + 408);
  uint64_t v33 = *(void *)(v0 + 400);
  uint64_t v34 = *(void *)(v0 + 392);
  uint64_t v35 = *(void *)(v0 + 368);
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100059BB8()
{
  uint64_t v1 = v0 + 136;
  uint64_t v2 = *(void *)(v0 + 648);
  uint64_t v3 = *(void **)(v0 + 360);
  uint64_t v4 = swift_bridgeObjectRelease(*(void *)(v0 + 624));
  static Logger.purchase.getter(v4);
  id v5 = v3;
  swift_errorRetain(v2, v6);
  id v7 = v5;
  uint64_t v9 = swift_errorRetain(v2, v8);
  id v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter(v10);
  os_log_t log = v10;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v63 = *(void *)(v0 + 648);
    uint64_t v66 = *(void *)(v0 + 528);
    NSString v67 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
    uint64_t v65 = *(void *)(v0 + 512);
    uint64_t v12 = *(char **)(v0 + 360);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = (void *)swift_slowAlloc(16LL, -1LL);
    uint64_t v64 = swift_slowAlloc(32LL, -1LL);
    uint64_t v69 = v64;
    *(_DWORD *)uint64_t v13 = 138412802;
    os_log_type_t type = v11;
    uint64_t v15 = *(void **)&v12[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
    *(void *)(v0 + 28_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v15;
    id v16 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v13 + 4, v13 + 12);
    void *v14 = v15;
    uint64_t v1 = v0 + 136;

    *(_WORD *)(v13 + 12) = 2082;
    swift_beginAccess(v0 + 136, v0 + 40, 0LL, 0LL);
    uint64_t v17 = *(void *)(v0 + 136);
    __n128 v18 = swift_bridgeObjectRetain(v17);
    uint64_t v19 = Dictionary.description.getter(v18);
    unint64_t v21 = v20;
    swift_bridgeObjectRelease(v17);
    *(void *)(v0 + 296) = sub_100088DB4(v19, v21, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v13 + 22) = 2112;
    swift_errorRetain(v63, v22);
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError(v63);
    *(void *)(v0 + 304) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v13 + 24, v13 + 32);
    v14[1] = v23;
    swift_errorRelease(v63);
    swift_errorRelease(v63);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  type,  "[%@] Encountered error looking up MAPI data for: [%{public}s] error: %@",  (uint8_t *)v13,  0x20u);
    uint64_t v24 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v14, 2LL, v24);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1LL, -1LL);
    uint64_t v25 = v13;
    p_info = (__objc2_class_ro **)(&OBJC_METACLASS____TtC9appstored23StoreKitExternalGateway + 32);
    swift_slowDealloc(v25, -1LL, -1LL);

    swift_errorRelease(v63);
    v67(v66, v65);
  }

  else
  {
    p_info = &OBJC_METACLASS____TtC9appstored23StoreKitExternalGateway.info;
    uint64_t v27 = *(void *)(v0 + 648);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
    uint64_t v29 = *(void *)(v0 + 528);
    uint64_t v30 = *(void *)(v0 + 512);
    uint64_t v31 = *(void **)(v0 + 360);
    swift_errorRelease(v27);

    swift_errorRelease(v27);
    swift_errorRelease(v27);

    v28(v29, v30);
  }

  *(void *)(v0 + 656) = [(id)objc_opt_self(LSApplicationWorkspace) defaultWorkspace];
  swift_beginAccess(v1, v0 + 112, 0LL, 0LL);
  uint64_t v32 = *(void *)(v0 + 136);
  *(void *)(v0 + 664) = v32;
  char v33 = *(_BYTE *)(v32 + 32);
  *(_BYTE *)(v0 + 812) = v33;
  uint64_t v34 = 1LL << v33;
  if (v34 < 64) {
    uint64_t v35 = ~(-1LL << v34);
  }
  else {
    uint64_t v35 = -1LL;
  }
  unint64_t v36 = v35 & *(void *)(v32 + 64);
  *(void *)(v0 + 672) = p_info[390];
  uint64_t v37 = *(void *)(v0 + 608);
  *(void *)(v0 + 688) = v37;
  *(void *)(v0 + 68_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v37;
  swift_bridgeObjectRetain(v32);
  int64_t v38 = 0LL;
  while (v36)
  {
    unint64_t v39 = __clz(__rbit64(v36));
    v36 &= v36 - 1;
    unint64_t v40 = v39 | (v38 << 6);
    uint64_t v41 = *(void *)(v0 + 664);
LABEL_27:
    *(void *)(v0 + 704) = v38;
    *(void *)(v0 + 696) = v36;
    uint64_t v48 = *(void *)(v0 + 464);
    uint64_t v47 = *(void *)(v0 + 472);
    uint64_t v49 = *(void *)(v0 + 416);
    sub_1000649D4(*(void *)(v41 + 56) + *(void *)(*(void *)(v0 + 424) + 72LL) * v40, v47);
    sub_100064A54(v47, v48);
    swift_beginAccess(v48, v0 + 88, 1LL, 0LL);
    unint64_t v50 = *(id **)(v48 + *(int *)(v49 + 36));
    if (v50)
    {
      unint64_t v51 = sub_100245F18(v50);
      *(void *)(v0 + 712) = v51;
      if (v51)
      {
        unint64_t v52 = v51;
        uint64_t v53 = sub_1002C5058(v51);
        *(void *)(v0 + 72_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v53;
        if (v53)
        {
          uint64_t v60 = *(void *)(*(void *)(v0 + 360) + *(void *)(v0 + 672));
          *(void *)(v0 + 728) = v60;
          uint64_t v61 = (void *)swift_task_alloc(dword_100459D54);
          *(void *)(v0 + 736) = v61;
          *uint64_t v61 = v0;
          v61[1] = sub_100058248;
          sub_10005AA54(*(void *)(v0 + 464), v60);
          return;
        }
      }
    }

    sub_100064A18(*(void *)(v0 + 464));
  }

  int64_t v42 = v38 + 1;
  if (__OFADD__(v38, 1LL))
  {
    __break(1u);
    goto LABEL_34;
  }

  int64_t v43 = (unint64_t)((1LL << *(_BYTE *)(v0 + 812)) + 63) >> 6;
  uint64_t v41 = *(void *)(v0 + 664);
  if (v42 >= v43) {
    goto LABEL_31;
  }
  uint64_t v44 = v41 + 64;
  unint64_t v45 = *(void *)(v41 + 64 + 8 * v42);
  ++v38;
  if (v45) {
    goto LABEL_26;
  }
  int64_t v38 = v42 + 1;
  if (v42 + 1 >= v43) {
    goto LABEL_31;
  }
  unint64_t v45 = *(void *)(v44 + 8 * v38);
  if (v45) {
    goto LABEL_26;
  }
  int64_t v38 = v42 + 2;
  if (v42 + 2 >= v43) {
    goto LABEL_31;
  }
  unint64_t v45 = *(void *)(v44 + 8 * v38);
  if (v45) {
    goto LABEL_26;
  }
  int64_t v38 = v42 + 3;
  if (v42 + 3 >= v43) {
    goto LABEL_31;
  }
  unint64_t v45 = *(void *)(v44 + 8 * v38);
  if (v45)
  {
LABEL_26:
    unint64_t v36 = (v45 - 1) & v45;
    unint64_t v40 = __clz(__rbit64(v45)) + (v38 << 6);
    goto LABEL_27;
  }

  int64_t v46 = v42 + 4;
  if (v46 >= v43)
  {
LABEL_31:
    uint64_t v54 = *(void **)(v0 + 616);
    swift_release(v41);
    uint64_t v55 = *(void *)(v0 + 136);
    swift_bridgeObjectRetain(v55);
    sub_10005B9E0(v56, v54);
    uint64_t v58 = v57;
    *(void *)(v0 + 752) = v57;
    swift_bridgeObjectRelease(v55);
    uint64_t v59 = (void *)swift_task_alloc(dword_100459D5C);
    *(void *)(v0 + 76_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v59;
    *uint64_t v59 = v0;
    v59[1] = sub_100058AE8;
    sub_10005C47C(v58, *(void *)(v0 + 616));
    return;
  }

  unint64_t v45 = *(void *)(v44 + 8 * v46);
  if (v45)
  {
    int64_t v38 = v46;
    goto LABEL_26;
  }

  while (1)
  {
    int64_t v38 = v46 + 1;
    if (__OFADD__(v46, 1LL)) {
      break;
    }
    if (v38 >= v43) {
      goto LABEL_31;
    }
    unint64_t v45 = *(void *)(v44 + 8 * v38);
    ++v46;
    if (v45) {
      goto LABEL_26;
    }
  }

uint64_t sub_10005A1BC()
{
  uint64_t v1 = (void *)_convertErrorToNSError(_:)(*(void *)(v0 + 776));
  id v2 = (id)ASDErrorWithSafeUserInfo(v1);

  if (!v2)
  {
    type metadata accessor for ASDError(0LL);
    uint64_t v4 = v3;
    *(void *)(v0 + 224) = 500LL;
    unint64_t v5 = sub_10006D16C((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v6 = sub_100004DD4( (unint64_t *)&qword_100458220,  (uint64_t (*)(uint64_t))type metadata accessor for ASDError,  (uint64_t)&unk_1003727F8);
    _BridgedStoredNSError.init(_:userInfo:)((void *)(v0 + 216), v0 + 224, v5, v4, v6);
    id v2 = *(id *)(v0 + 216);
  }

  uint64_t v7 = *(void *)(v0 + 776);
  uint64_t v8 = *(void **)(v0 + 752);
  uint64_t v9 = *(void **)(v0 + 656);
  id v10 = *(void **)(v0 + 616);
  uint64_t v11 = *(void *)(v0 + 136);
  swift_bridgeObjectRetain(v11);
  sub_10005D80C(v12, (uint64_t)v2);
  uint64_t v13 = swift_bridgeObjectRelease(v11);
  swift_willThrow(v13);

  swift_errorRelease(v7);
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  uint64_t v14 = *(void *)(v0 + 592);
  uint64_t v15 = *(void *)(v0 + 584);
  uint64_t v16 = *(void *)(v0 + 576);
  uint64_t v17 = *(void *)(v0 + 568);
  uint64_t v18 = *(void *)(v0 + 560);
  uint64_t v19 = *(void *)(v0 + 552);
  uint64_t v20 = *(void *)(v0 + 544);
  uint64_t v21 = *(void *)(v0 + 536);
  uint64_t v22 = *(void *)(v0 + 528);
  uint64_t v24 = *(void *)(v0 + 504);
  uint64_t v25 = *(void *)(v0 + 496);
  uint64_t v26 = *(void *)(v0 + 488);
  uint64_t v27 = *(void *)(v0 + 480);
  uint64_t v28 = *(void *)(v0 + 472);
  uint64_t v29 = *(void *)(v0 + 464);
  uint64_t v30 = *(void *)(v0 + 456);
  uint64_t v31 = *(void *)(v0 + 448);
  uint64_t v32 = *(void *)(v0 + 440);
  uint64_t v33 = *(void *)(v0 + 432);
  uint64_t v34 = *(void *)(v0 + 408);
  uint64_t v35 = *(void *)(v0 + 400);
  uint64_t v36 = *(void *)(v0 + 392);
  uint64_t v37 = *(void *)(v0 + 368);
  swift_task_dealloc(*(void *)(v0 + 600));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005A428(uint64_t a1)
{
  *(void *)(v2 + 128) = a1;
  *(void *)(v2 + 136) = v1;
  return swift_task_switch(sub_10005A440, 0LL, 0LL);
}

uint64_t sub_10005A440()
{
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0[17];
  uint64_t v3 = objc_opt_self(&OBJC_CLASS___URLBag);
  id v4 = sub_100255630(v3);
  id v5 = objc_allocWithZone(&OBJC_CLASS___AMSMediaTask);
  NSString v6 = String._bridgeToObjectiveC()();
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v5 initWithType:0 clientIdentifier:v6 clientVersion:v7 bag:v4];
  v0[18] = v8;

  Class isa = Array._bridgeToObjectiveC()().super.isa;
  [v8 setItemIdentifiers:isa];

  uint64_t v10 = objc_opt_self(&OBJC_CLASS___AMSProcessInfo);
  id v11 = sub_1001F4ADC(v10);
  [v8 setClientInfo:v11];

  uint64_t v12 = *(void *)(*(void *)(v2 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey)
                  + OBJC_IVAR____TtC9appstored6LogKey_value
                  + 8);
  swift_bridgeObjectRetain(v12);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v12);
  [v8 setLogKey:v13];

  unint64_t v14 = sub_10001DCA0((uint64_t)&off_1003DB510);
  Class v15 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  [v8 setAdditionalQueryParams:v15];

  id v16 = [v8 perform];
  v0[19] = v16;
  v0[7] = v0 + 15;
  v0[2] = v0;
  v0[3] = sub_10005A698;
  uint64_t v17 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  uint64_t v18 = v0 + 10;
  v18[1] = 0x40000000LL;
  v18[2] = sub_10005F988;
  void v18[3] = &unk_1003DF4D0;
  v18[4] = v17;
  [v16 resultWithCompletion:v18];
  return swift_continuation_await(v1);
}

uint64_t sub_10005A698()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 160LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10005A8C4;
  }
  else {
    uint64_t v2 = sub_10005A6F8;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10005A6F8()
{
  uint64_t v1 = *(void **)(v0 + 120);
  id v2 = [v1 responseDataItems];
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = sub_1000079A0(&qword_100459DE0);
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

    uint64_t v6 = *(void *)(v5 + 16);
    if (v6)
    {
      swift_bridgeObjectRetain(v5);
      for (uint64_t i = 0LL; i != v6; ++i)
      {
        uint64_t v9 = *(void *)(v5 + 8 * i + 32);
        uint64_t v10 = objc_allocWithZone((Class)&OBJC_CLASS___MediaApp);
        swift_bridgeObjectRetain(v9);
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v9);
        uint64_t v12 = sub_100245DF0(v10, isa);

        if (v12)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
          unint64_t v15 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
          unint64_t v14 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
          if (v15 >= v14 >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v14 > 1, v15 + 1, 1LL);
          }
          uint64_t v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, v12);
          specialized Array._endMutation()(v8);
        }
      }

      swift_bridgeObjectRelease(v5);
    }

    id v16 = *(void **)(v0 + 144);
    uint64_t v17 = *(void **)(v0 + 152);
    swift_bridgeObjectRelease(v5);
  }

  else
  {
    uint64_t v18 = *(void **)(v0 + 144);
    uint64_t v19 = *(void **)(v0 + 152);
  }

  return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_10005A8C4()
{
  uint64_t v1 = *(void **)(v0 + 152);
  id v2 = *(void **)(v0 + 144);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005A90C()
{
  uint64_t v1 = v0;
  type metadata accessor for PurchaseCandidate(0LL);
  uint64_t v2 = UUID.uuidString.getter();
  unint64_t v4 = v3;
  uint64_t v5 = sub_100092034(8LL, v2, v3);
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease(v4);
  v12._countAndFlagsBits = static String._fromSubstring(_:)(v5, v7, v9, v11);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(object);
  v14._countAndFlagsBits = 47LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  uint64_t v15 = *(void *)(v1 + 16);
  if (v15)
  {
    uint64_t v16 = *(void *)(v1 + 8);
    uint64_t v17 = *(void **)(v1 + 16);
  }

  else
  {
    uint64_t v16 = 0LL;
    uint64_t v17 = (void *)0xE000000000000000LL;
  }

  swift_bridgeObjectRetain(v15);
  v18._countAndFlagsBits = v16;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v17);
  v19._countAndFlagsBits = 58LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  uint64_t v21 = v20._object;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v21);
  return 5849665LL;
}

uint64_t sub_10005AA54(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  unint64_t v4 = (*(void *)(*(void *)(type metadata accessor for PurchaseCandidate(0LL) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[19] = swift_task_alloc(v4);
  v3[20] = swift_task_alloc(v4);
  v3[21] = swift_task_alloc(v4);
  v3[22] = swift_task_alloc(v4);
  v3[23] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v3[24] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[25] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[26] = swift_task_alloc(v7);
  v3[27] = swift_task_alloc(v7);
  v3[28] = swift_task_alloc(v7);
  v3[29] = swift_task_alloc(v7);
  v3[30] = swift_task_alloc(v7);
  return swift_task_switch(sub_10005AB6C, 0LL, 0LL);
}

uint64_t sub_10005AB6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 128);
  int64_t v172 = (void *)(v1 + 32);
  unint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
    unint64_t v39 = *(void **)(v1 + 144);
    uint64_t v40 = *(void *)(v1 + 152);
    static Logger.purchase.getter(a1);
    sub_1000649D4(v2, v40);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v42 = static os_log_type_t.error.getter(v41);
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v45 = *(void *)(v1 + 200);
    uint64_t v44 = *(void *)(v1 + 208);
    uint64_t v46 = *(void *)(v1 + 192);
    uint64_t v48 = *(char **)(v1 + 144);
    uint64_t v47 = *(void *)(v1 + 152);
    if (v43)
    {
      *(void *)Class v166 = *(void *)(v1 + 200);
      uint64_t v49 = swift_slowAlloc(22LL, -1LL);
      os_log_type_t v155 = v42;
      unint64_t v50 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v159 = swift_slowAlloc(32LL, -1LL);
      v174[0] = v159;
      *(_DWORD *)uint64_t v49 = 138412546;
      uint64_t v152 = v41;
      unint64_t v51 = *(void **)&v48[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      *(void *)(v1 + 16) = v51;
      id v52 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v49 + 4, v49 + 12);
      *unint64_t v50 = v51;

      *(_WORD *)(v49 + 12) = 2082;
      uint64_t v53 = sub_10005A90C();
      unint64_t v55 = v54;
      *(void *)(v1 + 24) = sub_100088DB4(v53, v54, v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v172, v49 + 14, v49 + 22);
      swift_bridgeObjectRelease(v55);
      sub_100064A18(v47);
      _os_log_impl( (void *)&_mh_execute_header,  v152,  v155,  "[%@][%{public}s] Failed to find bundleID",  (uint8_t *)v49,  0x16u);
      uint64_t v56 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v50, 1LL, v56);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_arrayDestroy(v159, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v159, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(*(void *)v166 + 8LL))(v44, v46);
LABEL_17:
      uint64_t v173 = 0LL;
      goto LABEL_18;
    }

    sub_100064A18(v47);
    unint64_t v72 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
LABEL_16:
    v72(v44, v46);
    goto LABEL_17;
  }

  unint64_t v4 = (void **)(v1 + 56);
  uint64_t v5 = *(void *)(v2 + 8);
  id v6 = objc_allocWithZone(&OBJC_CLASS___IXApplicationIdentity);
  swift_bridgeObjectRetain_n(v3, 2LL);
  NSString v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  id v8 = [v6 initWithBundleIdentifier:v7];

  if (!v8)
  {
    uint64_t v57 = *(void *)(v1 + 160);
    uint64_t v58 = *(void **)(v1 + 144);
    uint64_t v59 = *(void *)(v1 + 128);
    static Logger.purchase.getter(v9);
    sub_1000649D4(v59, v57);
    id v60 = v58;
    swift_bridgeObjectRetain(v3);
    uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v167 = static os_log_type_t.error.getter(v61);
    BOOL v62 = os_log_type_enabled(v61, v167);
    uint64_t v44 = *(void *)(v1 + 216);
    uint64_t v46 = *(void *)(v1 + 192);
    uint64_t v63 = *(void *)(v1 + 200);
    uint64_t v170 = *(void *)(v1 + 160);
    uint64_t v64 = *(char **)(v1 + 144);
    if (v62)
    {
      uint64_t v65 = swift_slowAlloc(32LL, -1LL);
      uint64_t v144 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_t v153 = (os_log_t)swift_slowAlloc(64LL, -1LL);
      v174[0] = (uint64_t)v153;
      *(_DWORD *)uint64_t v65 = 138412802;
      uint64_t v163 = v46;
      uint64_t v149 = v61;
      uint64_t v66 = *(void **)&v64[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      *int64_t v172 = v66;
      id v67 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v172, v1 + 40, v65 + 4, v65 + 12);
      *uint64_t v144 = v66;

      *(_WORD *)(v65 + 12) = 2082;
      uint64_t v68 = sub_10005A90C();
      unint64_t v70 = v69;
      *(void *)(v1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = sub_100088DB4(v68, v69, v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v65 + 14, v65 + 22);
      swift_bridgeObjectRelease(v70);
      sub_100064A18(v170);
      *(_WORD *)(v65 + 22) = 2080;
      swift_bridgeObjectRetain(v3);
      *(void *)(v1 + 48) = sub_100088DB4(v5, v3, v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 48, v1 + 56, v65 + 24, v65 + 32);
      swift_bridgeObjectRelease_n(v3, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v149,  v167,  "[%@][%{public}s] Failed to create an app identify for %s",  (uint8_t *)v65,  0x20u);
      uint64_t v71 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v144, 1LL, v71);
      swift_slowDealloc(v144, -1LL, -1LL);
      swift_arrayDestroy(v153, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v153, -1LL, -1LL);
      swift_slowDealloc(v65, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v44, v163);
      goto LABEL_17;
    }

    sub_100064A18(v170);
    swift_bridgeObjectRelease_n(v3, 2LL);

    unint64_t v72 = *(void (**)(uint64_t, uint64_t))(v63 + 8);
    goto LABEL_16;
  }

  *(void *)uint64_t v165 = v1 + 112;
  uint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___IXAppInstallCoordinator);
  *unint64_t v4 = 0LL;
  uint64_t v11 = (id *)[v10 existingCoordinatorForAppWithIdentity:v8 error:v1 + 56];
  Swift::String v12 = *v4;
  if (v11)
  {
    uint64_t v13 = *(void *)(v1 + 184);
    Swift::String v14 = v11;
    uint64_t v15 = *(void **)(v1 + 144);
    uint64_t v16 = *(void *)(v1 + 128);
    id v17 = v12;
    uint64_t v18 = swift_bridgeObjectRelease(v3);
    static Logger.purchase.getter(v18);
    sub_1000649D4(v16, v13);
    id v19 = v15;
    uint64_t v173 = v14;
    Swift::String v20 = v14;
    id v21 = v19;
    uint64_t v22 = v20;
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.default.getter();
    BOOL v25 = os_log_type_enabled(v23, v24);
    uint64_t v26 = *(void *)(v1 + 240);
    uint64_t v27 = *(void *)(v1 + 192);
    uint64_t v162 = *(void *)(v1 + 200);
    uint64_t v28 = *(void *)(v1 + 184);
    uint64_t v29 = *(char **)(v1 + 144);
    if (v25)
    {
      uint64_t v143 = *(void *)(v1 + 184);
      uint64_t v169 = v8;
      uint64_t v30 = swift_slowAlloc(28LL, -1LL);
      os_log_type_t type = v24;
      uint64_t v31 = (void *)swift_slowAlloc(8LL, -1LL);
      os_log_t v151 = (os_log_t)swift_slowAlloc(32LL, -1LL);
      v174[0] = (uint64_t)v151;
      *(_DWORD *)uint64_t v30 = 138412802;
      *(void *)uint64_t v154 = v26;
      uint64_t v158 = v27;
      uint64_t v32 = *(void **)&v29[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      *(void *)(v1 + 112) = v32;
      id v33 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(*(void *)v165, v1 + 120, v30 + 4, v30 + 12);
      void *v31 = v32;

      *(_WORD *)(v30 + 12) = 2082;
      uint64_t v34 = sub_10005A90C();
      unint64_t v36 = v35;
      *(void *)(v1 + 12_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = sub_100088DB4(v34, v35, v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease(v36);
      sub_100064A18(v143);
      *(_WORD *)(v30 + 22) = 1024;
      unsigned int v37 = sub_1001E4BFC(v22);

      *(_DWORD *)(v1 + 248) = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 248, v1 + 252, v30 + 24, v30 + 28);

      _os_log_impl( (void *)&_mh_execute_header,  v23,  type,  "[%@][%{public}s] Returning existing coordinator with appDRI: %{BOOL}d",  (uint8_t *)v30,  0x1Cu);
      uint64_t v38 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v31, 1LL, v38);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_arrayDestroy(v151, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v151, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);

      (*(void (**)(os_log_type_t *, uint64_t))(v162 + 8))(*(os_log_type_t **)v154, v158);
    }

    else
    {

      sub_100064A18(v28);
      (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v26, v27);
    }

    goto LABEL_18;
  }

  uint64_t v171 = v8;
  uint64_t v164 = (void *)(v1 + 96);
  unint64_t v73 = *(char **)(v1 + 136);
  id v74 = v12;
  uint64_t v75 = _convertNSErrorToError(_:)(v12);

  swift_willThrow(v76);
  swift_errorRelease(v75);
  uint64_t v77 = [objc_allocWithZone((Class)CoordinatorBuilder) init];
  uint64_t v78 = (char *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  sub_1002DF3B4(v77, v78);

  sub_1002DF3D4((uint64_t)v77, 1LL);
  sub_10026D388(v77, v73);
  sub_1002DF3C8((uint64_t)v77, 1LL);
  sub_1002DF3E0((uint64_t)v77, 0LL);
  *(void *)(v1 + 64) = 0LL;
  uint64_t v79 = (id *)sub_1002DF048(v77, (void *)(v1 + 64));
  int64_t v80 = *(void **)(v1 + 64);
  if (!v79)
  {
    id v94 = v80;
    uint64_t v95 = _convertNSErrorToError(_:)(v80);

    swift_willThrow(v96);
    uint64_t v97 = *(void *)(v1 + 168);
    uint64_t v98 = *(void **)(v1 + 144);
    uint64_t v99 = *(void *)(v1 + 128);
    static Logger.purchase.getter(v100);
    sub_1000649D4(v99, v97);
    id v101 = v98;
    swift_errorRetain(v95, v102);
    id v103 = v101;
    uint64_t v105 = swift_errorRetain(v95, v104);
    uint64_t v106 = (os_log_s *)Logger.logObject.getter(v105);
    os_log_type_t v107 = static os_log_type_t.error.getter(v106);
    BOOL v108 = os_log_type_enabled(v106, v107);
    uint64_t v109 = *(void *)(v1 + 224);
    uint64_t v110 = *(void *)(v1 + 192);
    uint64_t v111 = *(void *)(v1 + 200);
    uint64_t v112 = *(void *)(v1 + 168);
    uint64_t v113 = *(char **)(v1 + 144);
    if (v108)
    {
      uint64_t v114 = swift_slowAlloc(32LL, -1LL);
      os_log_t log = (os_log_t)v112;
      uint64_t v115 = (void *)swift_slowAlloc(16LL, -1LL);
      uint64_t v156 = swift_slowAlloc(32LL, -1LL);
      v174[0] = v156;
      *(_DWORD *)uint64_t v114 = 138412802;
      uint64_t v150 = v106;
      *(void *)uint64_t v168 = v109;
      id v116 = *(void **)&v113[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      uint64_t v160 = v111;
      *(void *)(v1 + 72) = v116;
      id v117 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 72, v1 + 80, v114 + 4, v114 + 12);
      void *v115 = v116;

      *(_WORD *)(v114 + 12) = 2082;
      uint64_t v118 = sub_10005A90C();
      unint64_t v120 = v119;
      *(void *)(v1 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = sub_100088DB4(v118, v119, v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 80, v1 + 88, v114 + 14, v114 + 22);
      swift_bridgeObjectRelease(v120);
      sub_100064A18((uint64_t)log);
      *(_WORD *)(v114 + 22) = 2112;
      swift_errorRetain(v95, v121);
      uint64_t v122 = _swift_stdlib_bridgeErrorToNSError(v95);
      *(void *)(v1 + 88) = v122;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v164, v114 + 24, v114 + 32);
      v115[1] = v122;
      swift_errorRelease(v95);
      swift_errorRelease(v95);
      _os_log_impl( (void *)&_mh_execute_header,  v150,  v107,  "[%@][%{public}s] Failed to create coordinator due to error: %@",  (uint8_t *)v114,  0x20u);
      uint64_t v123 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v115, 2LL, v123);
      swift_slowDealloc(v115, -1LL, -1LL);
      swift_arrayDestroy(v156, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v156, -1LL, -1LL);
      swift_slowDealloc(v114, -1LL, -1LL);

      swift_errorRelease(v95);
      (*(void (**)(os_log_type_t *, uint64_t))(v160 + 8))(*(os_log_type_t **)v168, v110);
    }

    else
    {

      swift_errorRelease(v95);
      sub_100064A18(v112);
      swift_errorRelease(v95);
      swift_errorRelease(v95);

      (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v109, v110);
    }

    goto LABEL_17;
  }

  uint64_t v81 = v79;
  id v82 = *(id **)(v1 + 128);
  id v83 = v80;
  sub_10005EA0C(v81, v82);
  uint64_t v173 = v81;
  uint64_t v124 = *(void *)(v1 + 176);
  uint64_t v125 = *(void **)(v1 + 144);
  uint64_t v126 = *(void *)(v1 + 128);
  static Logger.purchase.getter(v127);
  sub_1000649D4(v126, v124);
  Class v128 = (os_log_s *)Logger.logObject.getter(v125);
  os_log_type_t v129 = static os_log_type_t.default.getter();
  BOOL v130 = os_log_type_enabled(v128, v129);
  uint64_t v131 = *(void *)(v1 + 232);
  uint64_t v132 = *(void *)(v1 + 192);
  uint64_t v133 = *(void *)(v1 + 200);
  uint64_t v134 = *(void *)(v1 + 176);
  uint64_t v135 = *(char **)(v1 + 144);
  if (v130)
  {
    uint64_t v136 = swift_slowAlloc(22LL, -1LL);
    uint64_t v145 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t typea = swift_slowAlloc(32LL, -1LL);
    v174[0] = typea;
    *(_DWORD *)uint64_t v136 = 138412546;
    *(void *)uint64_t v157 = v133;
    uint64_t v161 = v132;
    uint64_t v137 = *(void **)&v135[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
    *uint64_t v164 = v137;
    id v138 = v137;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v164, v1 + 104, v136 + 4, v136 + 12);
    *uint64_t v145 = v137;

    *(_WORD *)(v136 + 12) = 2082;
    uint64_t v139 = sub_10005A90C();
    unint64_t v141 = v140;
    *(void *)(v1 + 104) = sub_100088DB4(v139, v140, v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 104, *(void *)v165, v136 + 14, v136 + 22);
    swift_bridgeObjectRelease(v141);
    sub_100064A18(v134);
    _os_log_impl( (void *)&_mh_execute_header,  v128,  v129,  "[%@][%{public}s] Created coordinator",  (uint8_t *)v136,  0x16u);
    uint64_t v142 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v145, 1LL, v142);
    swift_slowDealloc(v145, -1LL, -1LL);
    swift_arrayDestroy(typea, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(typea, -1LL, -1LL);
    swift_slowDealloc(v136, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(*(void *)v157 + 8LL))(v131, v161);
  }

  else
  {

    sub_100064A18(v134);
    (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v131, v132);
  }

LABEL_18:
  uint64_t v84 = *(void *)(v1 + 232);
  uint64_t v86 = *(void *)(v1 + 216);
  uint64_t v85 = *(void *)(v1 + 224);
  uint64_t v87 = *(void *)(v1 + 208);
  uint64_t v89 = *(void *)(v1 + 176);
  uint64_t v88 = *(void *)(v1 + 184);
  uint64_t v91 = *(void *)(v1 + 160);
  uint64_t v90 = *(void *)(v1 + 168);
  uint64_t v92 = *(void *)(v1 + 152);
  swift_task_dealloc(*(void *)(v1 + 240));
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v88);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  return (*(uint64_t (**)(id *))(v1 + 8))(v173);
}
}

  id v21 = (void *)objc_claimAutoreleasedReturnValue([v10 userInfo]);
  uint64_t v22 = objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:NSUnderlyingErrorKey]);

  if (v22)
  {
    uint64_t v23 = sub_1001E5384(v11, v9, a3, a4, v22);
    os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    uint64_t v10 = (id)v22;
LABEL_26:

    goto LABEL_27;
  }

  os_log_type_t v24 = 0LL;
LABEL_27:

  return v24;
}
}

  uint64_t v23 = v76;
  if (*(_BYTE *)(*(void *)(v76[6] + 8) + 24LL))
  {
    os_log_type_t v24 = ASDLogHandleForCategory(19LL);
    BOOL v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "A required asset pack is not available locally. Not continuing with the conditionally pin.",  buf,  2u);
    }

    uint64_t v23 = v76;
    uint64_t v26 = *(_BYTE *)(*(void *)(v76[6] + 8) + 24LL) ^ 1;
  }

  else
  {
    uint64_t v26 = 1;
  }

  *(_BYTE *)(*(void *)(v23[7] + 8) + 24LL) = v26;
  uint64_t v27 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v28 = *(void *)(v76[8] + 8);
  uint64_t v29 = *(void **)(v28 + 40);
  *(void *)(v28 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v27;

  if (!*(_BYTE *)(*(void *)(v23[7] + 8) + 24LL)) {
    goto LABEL_57;
  }
  uint64_t v84 = 0u;
  uint64_t v85 = 0u;
  id v83 = 0u;
  id v82 = 0u;
  obj = v72;
  uint64_t v30 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v82,  v103,  16LL);
  if (!v30) {
    goto LABEL_45;
  }
  uint64_t v31 = *(void *)v83;
  id v74 = _NSODRURLKey;
  uint64_t v71 = _NSODRSandboxExtensionKey;
  while (2)
  {
    uint64_t v32 = 0LL;
    while (2)
    {
      if (*(void *)v83 != v31) {
        objc_enumerationMutation(obj);
      }
      id v33 = *(void **)(*((void *)&v82 + 1) + 8 * v32);
      uint64_t v34 = (uint64_t)sub_1001F7BA8(v33);
      unint64_t v35 = sub_1001F7B20(v33);
      unint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
      unsigned int v37 = v36;
      if (v34)
      {
        if (v34 >= 1)
        {
          uint64_t v99 = v74;
          uint64_t v100 = v36;
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v100,  &v99,  1LL));
          unint64_t v39 = *(void **)(*(void *)(v76[8] + 8) + 40LL);
          uint64_t v40 = sub_1001F7970(v33);
          uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
          [v39 setObject:v38 forKey:v41];
          goto LABEL_38;
        }
      }

      else
      {
        os_log_type_t v42 = v36;
        BOOL v43 = [v42 fileSystemRepresentation];
        uint64_t v44 = ASDLogHandleForCategory(19LL);
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v53 = sub_1001F7970(v33);
          unint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
          *(_DWORD *)buf = 138543618;
          *(void *)&buf[4] = v54;
          *(_WORD *)&buf[12] = 2082;
          *(void *)&buf[14] = v43;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEBUG,  "AssetPack will be newly pinned, attempting to get sandbox extension. [BundleID: %{public}@ Path: %{public}s]",  buf,  0x16u);
        }

        uint64_t v46 = sub_1001FCC04(v76[5], (uint64_t)v43);
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v46);
        uint64_t v47 = ASDLogHandleForCategory(19LL);
        uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        uint64_t v49 = v48;
        if (!v38)
        {
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(void *)&buf[4] = v43;
            _os_log_error_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "Unable to get sandbox token for path [%{public}s]",  buf,  0xCu);
          }

          *(_BYTE *)(*(void *)(v76[6] + 8) + 24LL) = 1;
          unint64_t v55 = *(void *)(v76[8] + 8);
          uint64_t v56 = *(void **)(v55 + 40);
          *(void *)(v55 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0LL;

          goto LABEL_45;
        }

        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&buf[4] = v43;
          _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "Got a sandbox token for url [%{public}s]",  buf,  0xCu);
        }

        v101[0] = v74;
        v101[1] = v71;
        v102[0] = v42;
        v102[1] = v38;
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v102,  v101,  2LL));
        unint64_t v50 = *(void **)(*(void *)(v76[8] + 8) + 40LL);
        unint64_t v51 = sub_1001F7970(v33);
        id v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
        [v50 setObject:v41 forKey:v52];

LABEL_38:
      }

      if (v30 != (id)++v32) {
        continue;
      }
      break;
    }

    uint64_t v30 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v82,  v103,  16LL);
    if (v30) {
      continue;
    }
    break;
  }
}

  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([a1[17] accountIdentifier]);

  if (!v46) {
    goto LABEL_25;
  }
  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([a1[17] accountIdentifier]);
  uint64_t v49 = objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "ams_iTunesAccountWithDSID:", v48));
  unint64_t v50 = a1[5];
  a1[5] = (id)v49;

  unint64_t v51 = a1[5];
  id v52 = ASDLogHandleForCategory(41LL);
  uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
  unint64_t v54 = v53;
  if (!v51)
  {
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
      goto LABEL_24;
    }
    uint64_t v68 = a1[15];
    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue([a1[17] accountIdentifier]);
    *(_DWORD *)buf = 138412546;
    uint64_t v71 = v68;
    unint64_t v72 = 2114;
    unint64_t v73 = v56;
    _os_log_error_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "[%@] Unable to find specified account using accountID: %{public}@",  buf,  0x16u);
    goto LABEL_22;
  }

  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v55 = a1[15];
    uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "ams_DSID"));
    *(_DWORD *)buf = 138412546;
    uint64_t v71 = v55;
    unint64_t v72 = 2114;
    unint64_t v73 = v56;
    _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "[%@] Using account specified in request: %{public}@",  buf,  0x16u);
LABEL_22:
  }
}
}

      if ([v20 count])
      {
        if ([v20 count] == (id)1)
        {
          id v21 = ASDLogHandleForCategory(15LL);
          uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v23 = *(void **)(a1 + 48);
            os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue([v20 firstObject]);
            *(_DWORD *)buf = 138543618;
            uint64_t v61 = v23;
            BOOL v62 = 2114;
            uint64_t v63 = v24;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Completed with 1 result: %{public}@",  buf,  0x16u);
          }

          goto LABEL_27;
        }

        uint64_t v30 = ASDLogHandleForCategory(15LL);
        uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v31 = *(void **)(a1 + 48);
          uint64_t v32 = [v20 count];
          *(_DWORD *)buf = 138543618;
          uint64_t v61 = v31;
          BOOL v62 = 2048;
          uint64_t v63 = v32;
          uint64_t v27 = "%{public}@ Completed with %lu result(s)";
          uint64_t v28 = v22;
          uint64_t v29 = 22;
          goto LABEL_26;
        }
      }

      else
      {
        BOOL v25 = ASDLogHandleForCategory(15LL);
        uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v26 = *(void **)(a1 + 48);
          *(_DWORD *)buf = 138543362;
          uint64_t v61 = v26;
          uint64_t v27 = "%{public}@ Completed with no results";
          uint64_t v28 = v22;
          uint64_t v29 = 12;
LABEL_26:
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);
        }
      }

    uint64_t v10 = 0LL;
    goto LABEL_19;
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationExtensionRecord containingBundleRecord](v11, "containingBundleRecord"));
  Swift::String v20 = objc_opt_class(&OBJC_CLASS___LSApplicationRecord, v19);
  isKindOfClass = objc_opt_isKindOfClass(v18, v20);

  if ((isKindOfClass & 1) == 0)
  {
    uint64_t v22 = ASDLogHandleForCategory(14LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationExtensionRecord containingBundleRecord](v11, "containingBundleRecord"));
      *(_DWORD *)buf = 138543362;
      uint64_t v28 = v24;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Extension record's containing bundle record not expected type: %{public}@",  buf,  0xCu);
    }

    goto LABEL_18;
  }

  uint64_t v5 = (LSApplicationRecord *)objc_claimAutoreleasedReturnValue(-[LSApplicationExtensionRecord containingBundleRecord](v11, "containingBundleRecord"));

LABEL_6:
  self = sub_1002F6528((id *)&self->super.isa, v5);
  uint64_t v10 = self;
LABEL_19:

  return v10;
}

void sub_10005B9E0(uint64_t a1, void *a2)
{
  id v100 = a2;
  uint64_t v113 = type metadata accessor for Logger(0LL);
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v5 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = type metadata accessor for PurchaseCandidate(0LL);
  uint64_t v119 = *(void *)(v114 - 8);
  uint64_t v6 = __chkstk_darwin(v114);
  id v8 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v118 = (uint64_t)&v96 - v10;
  __chkstk_darwin(v9);
  Swift::String v12 = (char *)&v96 - v11;
  id v13 = objc_allocWithZone(&OBJC_CLASS___AMSBuyParams);
  NSString v14 = String._bridgeToObjectiveC()();
  id v15 = [v13 initWithString:v14];

  id v116 = v2;
  uint64_t v16 = *(void *)&v2[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_additionalBuyParams];
  id v17 = &selRef_resumeApp_withCompletionHandler_;
  uint64_t v107 = a1;
  uint64_t v106 = v5;
  uint64_t v105 = v8;
  uint64_t v115 = v12;
  if (!v16) {
    goto LABEL_29;
  }
  uint64_t v18 = *(void *)(v16 + 64);
  unint64_t v120 = (void *)(v16 + 64);
  uint64_t v19 = 1LL << *(_BYTE *)(v16 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  int64_t v117 = v22 - 1;
  swift_bridgeObjectRetain(v16);
  int64_t v23 = 0LL;
  if (!v21) {
    goto LABEL_9;
  }
LABEL_7:
  unint64_t v28 = __clz(__rbit64(v21));
  v21 &= v21 - 1;
  unint64_t v29 = v28 | (v23 << 6);
  while (2)
  {
    uint64_t v30 = *(void *)(v16 + 56);
    uint64_t v31 = (void *)(*(void *)(v16 + 48) + 16 * v29);
    uint64_t v32 = v31[1];
    *(void *)&__int128 v121 = *v31;
    *((void *)&v121 + 1) = v32;
    sub_100016B10(v30 + 32 * v29, (uint64_t)v122);
    swift_bridgeObjectRetain(v32);
    while (1)
    {
      sub_100026CD4((uint64_t)&v121, (uint64_t)&v123, &qword_100459DC8);
      uint64_t v36 = *((void *)&v123 + 1);
      if (!*((void *)&v123 + 1))
      {
        swift_release(v16);
        id v17 = &selRef_resumeApp_withCompletionHandler_;
        a1 = v107;
        uint64_t v5 = v106;
        id v8 = v105;
        Swift::String v12 = v115;
LABEL_29:
        NSString v99 = String._bridgeToObjectiveC()();
        uint64_t v37 = *(void *)&v116[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_itemIDs];
        int64_t v38 = *(void *)(v37 + 16);
        if (v38)
        {
          id v97 = v15;
          uint64_t v104 = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey;
          uint64_t v110 = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_itemMetadata;
          id v103 = (char *)&v121 + 8;
          __n128 v39 = swift_bridgeObjectRetain(v37);
          uint64_t v40 = 0LL;
          uint64_t v98 = 0LL;
          unint64_t v120 = _swiftEmptyArrayStorage;
          v39.n128_u64[0] = 138412546LL;
          __n128 v102 = v39;
          id v101 = (char *)&type metadata for Any + 8;
          uint64_t v41 = v116;
          uint64_t v111 = v37;
          int64_t v117 = v38;
          do
          {
            if (*(void *)(a1 + 16))
            {
              uint64_t v42 = *(void *)(v37 + 8 * v40 + 32);
              unint64_t v43 = sub_100023FE0(v42);
              if ((v44 & 1) != 0)
              {
                uint64_t v45 = v118;
                sub_1000649D4(*(void *)(a1 + 56) + *(void *)(v119 + 72) * v43, v118);
                uint64_t v46 = sub_100064A54(v45, (uint64_t)v12);
                if (*((void *)v12 + 3))
                {
                  static Logger.purchase.getter(v46);
                  sub_1000649D4((uint64_t)v12, (uint64_t)v8);
                  uint64_t v47 = (uint64_t)v8;
                  uint64_t v48 = v41;
                  uint64_t v49 = v5;
                  unint64_t v50 = (os_log_s *)Logger.logObject.getter(v48);
                  os_log_type_t v51 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v50, v51))
                  {
                    uint64_t v52 = swift_slowAlloc(22LL, -1LL);
                    uint64_t v53 = swift_slowAlloc(8LL, -1LL);
                    uint64_t v108 = v42;
                    unint64_t v54 = (void *)v53;
                    uint64_t v109 = swift_slowAlloc(32LL, -1LL);
                    *(void *)&__int128 v123 = v109;
                    *(_DWORD *)uint64_t v52 = v102.n128_u32[0];
                    unint64_t v55 = *(void **)&v41[v104];
                    *(void *)&__int128 v121 = v55;
                    id v56 = v55;
                    uint64_t v57 = v103;
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v103, v52 + 4, v52 + 12);
                    *unint64_t v54 = v55;

                    *(_WORD *)(v52 + 12) = 2082;
                    uint64_t v58 = (uint64_t)v105;
                    uint64_t v59 = sub_10005A90C();
                    unint64_t v61 = v60;
                    *(void *)&__int128 v121 = sub_100088DB4(v59, v60, (uint64_t *)&v123);
                    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v57, v52 + 14, v52 + 22);
                    swift_bridgeObjectRelease(v61);
                    sub_100064A18(v58);
                    _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "[%@][%{public}s] Attempting batch purchase",  (uint8_t *)v52,  0x16u);
                    uint64_t v62 = sub_1000079A0((uint64_t *)&unk_100458F50);
                    uint64_t v63 = v54;
                    uint64_t v42 = v108;
                    swift_arrayDestroy(v63, 1LL, v62);
                    a1 = v107;
                    swift_slowDealloc(v63, -1LL, -1LL);
                    uint64_t v64 = v109;
                    swift_arrayDestroy(v109, 1LL, v101);
                    swift_slowDealloc(v64, -1LL, -1LL);
                    swift_slowDealloc(v52, -1LL, -1LL);

                    uint64_t v5 = v106;
                    (*(void (**)(char *, uint64_t))(v112 + 8))(v106, v113);
                    id v8 = (char *)v58;
                  }

                  else
                  {

                    sub_100064A18(v47);
                    (*(void (**)(char *, uint64_t))(v112 + 8))(v49, v113);
                    uint64_t v5 = v49;
                    id v8 = (char *)v47;
                  }

                  uint64_t v65 = v120;
                  uint64_t v126 = _swiftEmptyDictionarySingleton;
                  Swift::String v12 = v115;
                  *(void *)&__int128 v123 = *((void *)v115 + 4);
                  uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
                  *((void *)&v124 + 1) = &type metadata for String;
                  *(void *)&__int128 v123 = v66;
                  *((void *)&v123 + 1) = v67;
                  sub_100015330(&v123, &v121);
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v126);
                  uint64_t v125 = v126;
                  uint64_t v126 = (void *)0x8000000000000000LL;
                  sub_100079180(&v121, 0x41656C62616C6173LL, 0xED000064496D6164LL, isUniquelyReferenced_nonNull_native);
                  unint64_t v69 = v126;
                  uint64_t v126 = v125;
                  swift_bridgeObjectRelease(v69);
                  unint64_t v70 = &v12[*(int *)(v114 + 40)];
                  uint64_t v71 = *((void *)v70 + 1);
                  if (v71)
                  {
                    uint64_t v72 = *(void *)v70;
                    *((void *)&v124 + 1) = &type metadata for String;
                    *(void *)&__int128 v123 = v72;
                    *((void *)&v123 + 1) = v71;
                    sub_100015330(&v123, &v121);
                    swift_bridgeObjectRetain(v71);
                    char v73 = swift_isUniquelyReferenced_nonNull_native(v126);
                    uint64_t v125 = v126;
                    uint64_t v126 = (void *)0x8000000000000000LL;
                    sub_100079180(&v121, 6580598LL, 0xE300000000000000LL, v73);
                    id v74 = v126;
                    uint64_t v126 = v125;
                    swift_bridgeObjectRelease(v74);
                  }

                  uint64_t v41 = v116;
                  uint64_t v75 = *(void *)&v116[v110];
                  if (v75)
                  {
                    if (*(void *)(v75 + 16))
                    {
                      unint64_t v76 = sub_100023FE0(v42);
                      if ((v77 & 1) != 0)
                      {
                        sub_100016B10(*(void *)(v75 + 56) + 32 * v76, (uint64_t)&v123);
                        uint64_t v78 = sub_1000079A0(&qword_100459DC0);
                        uint64_t v79 = swift_dynamicCast(&v121, &v123, (char *)&type metadata for Any + 8, v78, 6LL);
                        if ((v79 & 1) != 0)
                        {
                          uint64_t v80 = v121;
                          __chkstk_darwin(v79);
                          *(&v96 - 2) = (uint64_t)&v126;
                          uint64_t v81 = v98;
                          sub_100063DE0(v80, (void (*)(uint64_t, uint64_t, _BYTE *, __n128))sub_100064B4C);
                          uint64_t v98 = v81;
                          uint64_t v65 = v120;
                          swift_bridgeObjectRelease(v80);
                        }
                      }
                    }
                  }

                  id v82 = v126;
                  swift_bridgeObjectRetain(v126);
                  if ((swift_isUniquelyReferenced_nonNull_native(v65) & 1) == 0) {
                    uint64_t v65 = sub_100088780(0LL, v65[2] + 1LL, 1, v65);
                  }
                  id v83 = v65;
                  unint64_t v84 = v65[2];
                  unint64_t v120 = v83;
                  unint64_t v85 = v83[3];
                  if (v84 >= v85 >> 1) {
                    unint64_t v120 = sub_100088780((void *)(v85 > 1), v84 + 1, 1, v120);
                  }
                  uint64_t v86 = v120;
                  v120[2] = v84 + 1;
                  v86[v84 + 4] = v82;
                  sub_100064A18((uint64_t)v12);
                  swift_bridgeObjectRelease(v126);
                  uint64_t v37 = v111;
                }

                else
                {
                  sub_100064A18((uint64_t)v12);
                }

                int64_t v38 = v117;
              }
            }

            ++v40;
          }

          while (v38 != v40);
          swift_bridgeObjectRelease(v37);
          id v15 = v97;
          id v17 = &selRef_resumeApp_withCompletionHandler_;
          uint64_t v87 = v120;
        }

        else
        {
          uint64_t v87 = _swiftEmptyArrayStorage;
        }

        sub_1000079A0(&qword_100459DC0);
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v87);
        uint64_t v89 = v99;
        objc_msgSend(v15, v17[275], isa, v99);

        id v90 = objc_msgSend(v100, "ams_DSID");
        if (v90)
        {
          uint64_t v91 = v90;
          id v92 = [v90 stringValue];

          static String._unconditionallyBridgeFromObjectiveC(_:)(v92);
          uint64_t v94 = v93;

          NSString v95 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v94);
          objc_msgSend(v15, v17[275], v95, AMSBuyParamPropertyDsid);
        }

        return;
      }

      sub_100015330(&v124, &v121);
      NSString v24 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v36);
      uint64_t v25 = *((void *)&v122[0] + 1);
      uint64_t v26 = sub_100015F50(&v121, *((uint64_t *)&v122[0] + 1));
      uint64_t v27 = _bridgeAnythingToObjectiveC<A>(_:)(v26, v25);
      [v15 setParameter:v27 forKey:v24];

      swift_unknownObjectRelease(v27);
      sub_100015340(&v121);
      if (v21) {
        goto LABEL_7;
      }
LABEL_9:
      int64_t v33 = v23 + 1;
      if (__OFADD__(v23, 1LL))
      {
        __break(1u);
        goto LABEL_58;
      }

      if (v33 < v22)
      {
        unint64_t v34 = v120[v33];
        if (v34) {
          goto LABEL_12;
        }
        int64_t v35 = v23 + 2;
        ++v23;
        if (v33 + 1 < v22)
        {
          unint64_t v34 = v120[v35];
          if (v34) {
            goto LABEL_15;
          }
          int64_t v23 = v33 + 1;
          if (v33 + 2 < v22)
          {
            unint64_t v34 = v120[v33 + 2];
            if (v34)
            {
              v33 += 2LL;
              goto LABEL_12;
            }

            int64_t v35 = v33 + 3;
            int64_t v23 = v33 + 2;
            if (v33 + 3 < v22) {
              break;
            }
          }
        }
      }

uint64_t sub_10005C47C(uint64_t a1, uint64_t a2)
{
  v3[26] = a2;
  v3[27] = v2;
  v3[25] = a1;
  uint64_t v4 = type metadata accessor for NSFastEnumerationIterator(0LL);
  v3[28] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[29] = v5;
  v3[30] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10005C4E0, 0LL, 0LL);
}

uint64_t sub_10005C4E0()
{
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  uint64_t v4 = objc_opt_self(&OBJC_CLASS___URLBag);
  id v5 = sub_100255630(v4);
  id v6 = [objc_allocWithZone(AMSPurchaseQueueConfiguration) initWithBag:v5];
  v0[31] = v6;

  [v6 setDelegate:v1];
  id v7 = [objc_allocWithZone(AMSPurchaseQueue) initWithConfiguration:v6];
  v0[32] = v7;
  id v8 = [objc_allocWithZone(AMSPurchase) initWithPurchaseType:0 buyParams:v3];
  v0[33] = v8;
  [v8 setAccount:v2];
  uint64_t v9 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey)
                 + OBJC_IVAR____TtC9appstored6LogKey_value
                 + 8);
  swift_bridgeObjectRetain(v9);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  [v8 setLogUUID:v10];

  uint64_t v11 = *(void *)(v1 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_client + 8);
  if (!v11
    || ((uint64_t v12 = *(void *)(v1 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_client), v12 != 0xD000000000000012LL)
     || v11 != 0x8000000100344E00LL)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, 0xD000000000000012LL, 0x8000000100344E00LL, 0LL) & 1) == 0)
  {
    [v8 setSendBlindedData:1];
  }

  id v13 = v0 + 2;
  uint64_t v14 = objc_opt_self(&OBJC_CLASS___AMSProcessInfo);
  id v15 = sub_1001F4ADC(v14);
  [v8 setClientInfo:v15];

  uint64_t v16 = sub_1000079A0(&qword_100458EE0);
  uint64_t v17 = swift_allocObject(v16, 40LL, 7LL);
  *(_OWORD *)(v17 + 16) = xmmword_100373960;
  *(void *)(v17 + 32) = v8;
  uint64_t v24 = v17;
  specialized Array._endMutation()(v17);
  sub_10001517C(0LL, &qword_100459D98, &OBJC_CLASS___AMSPurchase_ptr);
  id v18 = v8;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v24);
  id v20 = [v7 enquePurchases:isa];
  v0[34] = v20;

  v0[7] = v0 + 23;
  v0[2] = v0;
  v0[3] = sub_10005C7D4;
  uint64_t v21 = swift_continuation_init(v0 + 2, 1LL);
  v0[10] = _NSConcreteStackBlock;
  int64_t v22 = v0 + 10;
  v22[1] = 0x40000000LL;
  void v22[2] = sub_10005F988;
  v22[3] = &unk_1003DF4B8;
  void v22[4] = v21;
  [v20 resultWithCompletion:v22];
  return swift_continuation_await(v13);
}

uint64_t sub_10005C7D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  *(void *)(*(void *)v0 + 280LL) = v1;
  if (v1) {
    uint64_t v2 = sub_10005CAA0;
  }
  else {
    uint64_t v2 = sub_10005C834;
  }
  return swift_task_switch(v2, 0LL, 0LL);
}

uint64_t sub_10005C834()
{
  uint64_t v1 = *(void **)(v0 + 184);
  uint64_t v2 = NSArray.makeIterator()();
  NSFastEnumerationIterator.next()(v2);
  if (*(void *)(v0 + 144))
  {
    uint64_t v3 = (id *)(v0 + 192);
    do
    {
      sub_100015330((_OWORD *)(v0 + 120), (_OWORD *)(v0 + 152));
      uint64_t v5 = sub_10001517C(0LL, &qword_100459DA0, &OBJC_CLASS___AMSPurchaseResult_ptr);
      uint64_t v4 = swift_dynamicCast(v3, v0 + 152, (char *)&type metadata for Any + 8, v5, 6LL);
      if ((v4 & 1) != 0)
      {
        id v6 = *v3;
        id v7 = (objc_class *)[*v3 responseDictionary];
        Class isa = v7;
        if (v7)
        {
          uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v7,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

          Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v9);
        }

        uint64_t v10 = objc_opt_self(&OBJC_CLASS___StoreItemResponse);
        id v11 = sub_1002EB678(v10, isa, 0);

        if (v11)
        {
          id v12 = v11;
          id v14 = sub_1002EC0FC(v12, v13);
          if (v14)
          {
            id v15 = v14;
            uint64_t v16 = sub_10001517C(0LL, &qword_100459D90, &off_1003DA128);
            uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v15, v16);

            sub_100055C1C(v17, (uint64_t (*)(uint64_t, void, uint64_t))sub_100063654);
          }
        }
      }

      NSFastEnumerationIterator.next()(v4);
    }

    while (*(void *)(v0 + 144));
  }

  uint64_t v19 = *(void **)(v0 + 264);
  id v18 = *(void **)(v0 + 272);
  uint64_t v21 = *(void **)(v0 + 248);
  id v20 = *(void **)(v0 + 256);
  uint64_t v22 = *(void *)(v0 + 240);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 232) + 8LL))(v22, *(void *)(v0 + 224));

  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_10005CAA0()
{
  uint64_t v1 = *(void **)(v0 + 272);
  uint64_t v3 = *(void **)(v0 + 256);
  uint64_t v2 = *(void **)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v5 = *(void **)(v0 + 248);
  swift_willThrow();

  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10005CB0C(void *a1, uint64_t a2)
{
  uint64_t v160 = type metadata accessor for PurchaseCandidate(0LL);
  uint64_t v5 = __chkstk_darwin(v160);
  uint64_t v155 = (uint64_t)&v148 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v163 = (char *)&v148 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  os_log_t v161 = (os_log_t)((char *)&v148 - v10);
  __chkstk_darwin(v9);
  id v12 = (char *)&v148 - v11;
  uint64_t v164 = type metadata accessor for Logger(0LL);
  uint64_t v159 = *(void *)(v164 - 8);
  uint64_t v13 = __chkstk_darwin(v164);
  id v15 = (char *)&v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = (char *)&v148 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v157 = (char *)&v148 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  int64_t v23 = (char *)&v148 - v22;
  static Logger.purchase.getter(v21);
  sub_1000649D4((uint64_t)a1, (uint64_t)v12);
  id v24 = v2;
  swift_errorRetain(a2, v25);
  uint64_t v26 = (os_log_s *)v24;
  uint64_t v27 = a2;
  uint64_t v29 = swift_errorRetain(a2, v28);
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.error.getter();
  int v32 = v31;
  BOOL v33 = os_log_type_enabled(v30, v31);
  uint64_t v156 = v15;
  uint64_t v162 = v18;
  uint64_t v158 = v26;
  if (v33)
  {
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    uint64_t v154 = a1;
    uint64_t v35 = v34;
    uint64_t v36 = (void *)swift_slowAlloc(16LL, -1LL);
    os_log_t v153 = (void *)swift_slowAlloc(32LL, -1LL);
    id v167 = v153;
    *(_DWORD *)uint64_t v35 = 138412802;
    os_log_t v152 = v30;
    uint64_t v37 = v27;
    int64_t v38 = *(void **)((char *)v26 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey);
    uint64_t v165 = (uint64_t)v38;
    LODWORD(v151) = v32;
    id v39 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v35 + 4, v35 + 12);
    *uint64_t v36 = v38;

    *(_WORD *)(v35 + 12) = 2082;
    uint64_t v40 = sub_10005A90C();
    unint64_t v42 = v41;
    uint64_t v165 = sub_100088DB4(v40, v41, (uint64_t *)&v167);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v35 + 14, v35 + 22);
    swift_bridgeObjectRelease(v42);
    sub_100064A18((uint64_t)v12);
    *(_WORD *)(v35 + 22) = 2114;
    swift_errorRetain(v37, v43);
    uint64_t v44 = _swift_stdlib_bridgeErrorToNSError(v37);
    uint64_t v165 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v35 + 24, v35 + 32);
    v36[1] = v44;
    id v18 = v162;
    swift_errorRelease(v37);
    uint64_t v27 = v37;
    swift_errorRelease(v37);
    uint64_t v30 = v152;
    _os_log_impl( (void *)&_mh_execute_header,  v152,  (os_log_type_t)v151,  "[%@][%{public}s] Purchase failed due to error: %{public}@",  (uint8_t *)v35,  0x20u);
    uint64_t v45 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v36, 2LL, v45);
    swift_slowDealloc(v36, -1LL, -1LL);
    uint64_t v46 = v153;
    swift_arrayDestroy(v153, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    uint64_t v47 = v35;
    a1 = v154;
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  else
  {

    sub_100064A18((uint64_t)v12);
    swift_errorRelease(v27);
    swift_errorRelease(v27);
  }

  uint64_t v48 = *(void (**)(char *, uint64_t))(v159 + 8);
  v48(v23, v164);
  os_log_t v49 = v161;
  unint64_t v50 = *(id **)((char *)a1 + *(int *)(v160 + 36));
  uint64_t v51 = (uint64_t)v163;
  if (v50)
  {
    uint64_t v52 = sub_100245F18(v50);
    if (v52)
    {
      uint64_t v53 = v52;
      id v54 = (id)sub_1001AD81C((uint64_t)v52);

      uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      id v56 = v55;

      unint64_t v58 = a1[2];
      if (v58)
      {
        os_log_t v152 = (os_log_t)a1[1];
        os_log_t v153 = v56;
        static Logger.purchase.getter(v57);
        sub_1000649D4((uint64_t)a1, (uint64_t)v49);
        uint64_t v59 = v158;
        swift_bridgeObjectRetain_n(v58, 2LL);
        unint64_t v60 = v59;
        unint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
        os_log_type_t v62 = static os_log_type_t.default.getter();
        int v63 = v62;
        if (os_log_type_enabled(v61, v62))
        {
          uint64_t v64 = swift_slowAlloc(32LL, -1LL);
          uint64_t v160 = (uint64_t)v48;
          uint64_t v65 = v64;
          uint64_t v66 = (void *)swift_slowAlloc(8LL, -1LL);
          os_log_t v151 = (void *)swift_slowAlloc(64LL, -1LL);
          id v167 = v151;
          *(_DWORD *)uint64_t v65 = 138412802;
          int v150 = v63;
          os_log_t v149 = v61;
          uint64_t v67 = v27;
          uint64_t v68 = *(void **)((char *)v60 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey);
          uint64_t v165 = (uint64_t)v68;
          uint64_t v154 = a1;
          id v69 = v68;
          uint64_t v70 = v164;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v65 + 4, v65 + 12);
          *uint64_t v66 = v68;
          uint64_t v27 = v67;

          *(_WORD *)(v65 + 12) = 2082;
          uint64_t v71 = sub_10005A90C();
          unint64_t v73 = v72;
          uint64_t v165 = sub_100088DB4(v71, v72, (uint64_t *)&v167);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v65 + 14, v65 + 22);
          swift_bridgeObjectRelease(v73);
          sub_100064A18((uint64_t)v49);
          *(_WORD *)(v65 + 22) = 2080;
          swift_bridgeObjectRetain(v58);
          uint64_t v165 = sub_100088DB4((uint64_t)v152, v58, (uint64_t *)&v167);
          a1 = v154;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v65 + 24, v65 + 32);
          swift_bridgeObjectRelease_n(v58, 3LL);
          os_log_t v74 = v149;
          _os_log_impl( (void *)&_mh_execute_header,  v149,  (os_log_type_t)v150,  "[%@][%{public}s] Removing vid for bundleID: %s",  (uint8_t *)v65,  0x20u);
          uint64_t v75 = sub_1000079A0((uint64_t *)&unk_100458F50);
          swift_arrayDestroy(v66, 1LL, v75);
          swift_slowDealloc(v66, -1LL, -1LL);
          unint64_t v76 = v151;
          swift_arrayDestroy(v151, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v76, -1LL, -1LL);
          uint64_t v77 = v65;
          uint64_t v48 = (void (*)(char *, uint64_t))v160;
          swift_slowDealloc(v77, -1LL, -1LL);

          v48(v157, v70);
        }

        else
        {

          sub_100064A18((uint64_t)v49);
          swift_bridgeObjectRelease_n(v58, 2LL);
          v48(v157, v164);
        }

        id v79 = [(id)objc_opt_self(LSApplicationWorkspace) defaultWorkspace];
        uint64_t v51 = (uint64_t)v163;
        if (v79)
        {
          uint64_t v80 = v79;
          uint64_t v81 = v153;
          NSString v82 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v81);
          NSString v83 = String._bridgeToObjectiveC()();
          [v80 removeDeviceIdentifierForVendorName:v82 bundleIdentifier:v83];

LABEL_15:
          id v18 = v162;
          goto LABEL_16;
        }

        uint64_t v78 = v153;
      }

      else
      {
        uint64_t v78 = v56;
      }

      swift_bridgeObjectRelease(v78);
      goto LABEL_15;
    }
  }

LABEL_16:
  unint64_t v84 = (void *)a1[3];
  if (v84)
  {
    id v85 = v84;
    static Logger.purchase.getter(v85);
    sub_1000649D4((uint64_t)a1, v51);
    uint64_t v86 = v158;
    id v87 = v85;
    uint64_t v88 = v86;
    uint64_t v89 = (char *)v87;
    id v90 = (os_log_s *)Logger.logObject.getter(v89);
    os_log_type_t v91 = static os_log_type_t.default.getter();
    int v92 = v91;
    BOOL v93 = os_log_type_enabled(v90, v91);
    uint64_t v163 = v89;
    if (v93)
    {
      uint64_t v94 = swift_slowAlloc(32LL, -1LL);
      NSString v95 = (char *)swift_slowAlloc(8LL, -1LL);
      uint64_t v157 = v95;
      os_log_t v161 = (os_log_t)swift_slowAlloc(64LL, -1LL);
      id v167 = v161;
      *(_DWORD *)uint64_t v94 = 138412802;
      LODWORD(v159) = v92;
      uint64_t v160 = (uint64_t)v48;
      uint64_t v96 = *(void **)((char *)v88 + OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey);
      uint64_t v158 = v90;
      id v97 = (char *)v88;
      uint64_t v165 = (uint64_t)v96;
      id v98 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v94 + 4, v94 + 12);
      *(void *)NSString v95 = v96;

      *(_WORD *)(v94 + 12) = 2082;
      uint64_t v99 = sub_10005A90C();
      unint64_t v101 = v100;
      uint64_t v165 = sub_100088DB4(v99, v100, (uint64_t *)&v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v94 + 14, v94 + 22);
      swift_bridgeObjectRelease(v101);
      sub_100064A18(v51);
      *(_WORD *)(v94 + 22) = 2082;
      id v102 = [v163 identity];
      id v103 = [v102 bundleID];

      uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)(v103);
      unint64_t v106 = v105;

      uint64_t v107 = v164;
      uint64_t v108 = v104;
      uint64_t v88 = (os_log_s *)v97;
      uint64_t v165 = sub_100088DB4(v108, v106, (uint64_t *)&v167);
      uint64_t v89 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v94 + 24, v94 + 32);

      unint64_t v109 = v106;
      uint64_t v48 = (void (*)(char *, uint64_t))v160;
      swift_bridgeObjectRelease(v109);
      uint64_t v110 = v158;
      _os_log_impl( (void *)&_mh_execute_header,  v158,  (os_log_type_t)v159,  "[%@][%{public}s] Canceling: %{public}s",  (uint8_t *)v94,  0x20u);
      uint64_t v111 = sub_1000079A0((uint64_t *)&unk_100458F50);
      uint64_t v112 = v157;
      swift_arrayDestroy(v157, 1LL, v111);
      swift_slowDealloc(v112, -1LL, -1LL);
      os_log_t v113 = v161;
      swift_arrayDestroy(v161, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v113, -1LL, -1LL);
      swift_slowDealloc(v94, -1LL, -1LL);

      uint64_t v114 = v162;
      uint64_t v115 = v107;
    }

    else
    {

      sub_100064A18(v51);
      uint64_t v114 = v18;
      uint64_t v115 = v164;
    }

    v48(v114, v115);
    id v116 = (void *)_convertErrorToNSError(_:)(v27);
    id v167 = 0LL;
    unsigned int v117 = [v89 cancelForReason:v116 client:1 error:&v167];

    id v118 = v167;
    if (v117)
    {
      id v119 = v167;
    }

    else
    {
      id v120 = v167;
      uint64_t v121 = _convertNSErrorToError(_:)(v118);

      uint64_t v123 = swift_willThrow(v122);
      __int128 v124 = v156;
      static Logger.purchase.getter(v123);
      uint64_t v125 = v155;
      sub_1000649D4((uint64_t)a1, v155);
      uint64_t v126 = v88;
      swift_errorRetain(v121, v127);
      Class v128 = v126;
      uint64_t v130 = swift_errorRetain(v121, v129);
      uint64_t v131 = (os_log_s *)Logger.logObject.getter(v130);
      os_log_type_t v132 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v131, v132))
      {
        uint64_t v133 = swift_slowAlloc(32LL, -1LL);
        os_log_t v161 = v131;
        uint64_t v134 = v125;
        uint64_t v135 = v133;
        uint64_t v136 = swift_slowAlloc(16LL, -1LL);
        uint64_t v160 = (uint64_t)v48;
        uint64_t v137 = (void *)v136;
        uint64_t v162 = (char *)swift_slowAlloc(32LL, -1LL);
        id v167 = v162;
        *(_DWORD *)uint64_t v135 = 138412802;
        id v138 = *(void **)&v128[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
        uint64_t v165 = (uint64_t)v138;
        id v139 = v138;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v135 + 4, v135 + 12);
        *uint64_t v137 = v138;

        *(_WORD *)(v135 + 12) = 2082;
        uint64_t v140 = sub_10005A90C();
        unint64_t v142 = v141;
        uint64_t v165 = sub_100088DB4(v140, v141, (uint64_t *)&v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v135 + 14, v135 + 22);
        swift_bridgeObjectRelease(v142);
        sub_100064A18(v134);
        *(_WORD *)(v135 + 22) = 2114;
        swift_errorRetain(v121, v143);
        uint64_t v144 = _swift_stdlib_bridgeErrorToNSError(v121);
        uint64_t v165 = v144;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v165, &v166, v135 + 24, v135 + 32);
        v137[1] = v144;
        swift_errorRelease(v121);
        swift_errorRelease(v121);
        os_log_t v145 = v161;
        _os_log_impl( (void *)&_mh_execute_header,  v161,  v132,  "[%@][%{public}s] Coordinator cancelation failed with error: %{public}@",  (uint8_t *)v135,  0x20u);
        uint64_t v146 = sub_1000079A0((uint64_t *)&unk_100458F50);
        swift_arrayDestroy(v137, 2LL, v146);
        swift_slowDealloc(v137, -1LL, -1LL);
        uint64_t v147 = v162;
        swift_arrayDestroy(v162, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v147, -1LL, -1LL);
        swift_slowDealloc(v135, -1LL, -1LL);

        swift_errorRelease(v121);
        ((void (*)(char *, uint64_t))v160)(v156, v164);
      }

      else
      {

        swift_errorRelease(v121);
        sub_100064A18(v125);
        swift_errorRelease(v121);
        swift_errorRelease(v121);

        v48(v124, v164);
      }
    }
  }

  *a1 = a4;
  a1[1] = v11;
  a1[2] = (uint64_t)a5;
  a1[3] = a6;
  return v11;
}

  if (!v4) {
    goto LABEL_22;
  }
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  if ([v4 BOOLValue])
  {
    -[SQLiteMemoryEntity setValue:forProperty:](v13, "setValue:forProperty:", &off_10040BEF0, @"event_type");
    id v15 = @"active_start_time";
    uint64_t v16 = v13;
    uint64_t v17 = v14;
  }

  else
  {
    -[SQLiteMemoryEntity setValue:forProperty:](v13, "setValue:forProperty:", v14, @"active_end_time");
    id v15 = @"event_type";
    uint64_t v17 = (os_log_s *)&off_10040BF08;
    uint64_t v16 = v13;
  }

  -[SQLiteMemoryEntity setValue:forProperty:](v16, "setValue:forProperty:", v17, v15);
  id v18 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  _BYTE v21[2] = sub_10019E990;
  v21[3] = &unk_1003EA680;
  uint64_t v13 = v13;
  uint64_t v22 = v13;
  uint64_t v25 = v7;
  int64_t v23 = v2;
  id v24 = v4;
  [v19 modifyUsingTransaction:v21];

LABEL_24:
}

  uint64_t v19 = v13;

LABEL_17:
  return v19;
}

  return a1;
}

    uint64_t v9 = v12;
    goto LABEL_17;
  }

  uint64_t v19 = ASDLogHandleForCategory(29LL);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v19);
  if (os_log_type_enabled((os_log_t)v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138412546;
    id v24 = v5;
    uint64_t v25 = 2114;
    uint64_t v26 = v9;
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v11,  OS_LOG_TYPE_ERROR,  "[%@] Failed to create coordinator builder with error: %{public}@",  buf,  0x16u);
  }

      goto LABEL_17;
    }
  }

  uint64_t v11 = 0;
LABEL_17:

  return v11;
}

LABEL_17:
  return v8;
}
}

void sub_10005D80C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PurchaseCandidate(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = a1 + 64;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(a1 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v13 << 6);
      goto LABEL_5;
    }

    int64_t v16 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v16 >= v12) {
      goto LABEL_23;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v13;
    if (!v17)
    {
      int64_t v13 = v16 + 1;
      if (v16 + 1 >= v12) {
        goto LABEL_23;
      }
      unint64_t v17 = *(void *)(v8 + 8 * v13);
      if (!v17)
      {
        int64_t v13 = v16 + 2;
        if (v16 + 2 >= v12) {
          goto LABEL_23;
        }
        unint64_t v17 = *(void *)(v8 + 8 * v13);
        if (!v17)
        {
          int64_t v13 = v16 + 3;
          if (v16 + 3 >= v12) {
            goto LABEL_23;
          }
          unint64_t v17 = *(void *)(v8 + 8 * v13);
          if (!v17) {
            break;
          }
        }
      }
    }

LABEL_25:
  __break(1u);
}

    int64_t v13 = (v21 - 1) & v21;
    uint64_t v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_26:
    int64_t v23 = v7;
    id v24 = *(void *)(v7 + 48);
    uint64_t v25 = *(void *)(v40 + 72);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v40 + 32);
    v26(v6, v24 + v25 * v19, v4);
    uint64_t v27 = *(void *)(v9 + 40);
    uint64_t v28 = sub_100004DD4( (unint64_t *)&unk_100459E20,  (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component,  (uint64_t)&protocol conformance descriptor for Calendar.Component);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v27, v4, v28);
    uint64_t v29 = -1LL << *(_BYTE *)(v9 + 32);
    uint64_t v30 = result & ~v29;
    os_log_type_t v31 = v30 >> 6;
    if (((-1LL << v30) & ~*(void *)(v14 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1LL << v30) & ~*(void *)(v14 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      int v32 = 0;
      BOOL v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_40;
        }

        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          os_log_type_t v31 = 0LL;
        }
        v32 |= v34;
        uint64_t v35 = *(void *)(v14 + 8 * v31);
      }

      while (v35 == -1);
      unint64_t v17 = __clz(__rbit64(~v35)) + (v31 << 6);
    }

    *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v9 + 48) + v17 * v25, v6, v4);
    ++*(void *)(v9 + 16);
    uint64_t v7 = v23;
  }

  uint64_t v22 = v20 + 3;
  if (v22 < v38)
  {
    uint64_t v21 = v39[v22];
    if (!v21)
    {
      while (1)
      {
        int64_t v16 = v22 + 1;
        if (__OFADD__(v22, 1LL)) {
          goto LABEL_41;
        }
        if (v16 >= v38) {
          goto LABEL_35;
        }
        uint64_t v21 = v39[v16];
        ++v22;
        if (v21) {
          goto LABEL_25;
        }
      }
    }

    int64_t v16 = v22;
    goto LABEL_25;
  }

    unint64_t v14 = (v22 - 1) & v22;
    uint64_t v20 = __clz(__rbit64(v22)) + (v17 << 6);
LABEL_26:
    id v24 = *(void *)(v5 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v7, *(void *)(v8 + 48) + v24 * v20, v4);
    uint64_t v25 = *(void *)(v10 + 40);
    uint64_t v26 = sub_100004DD4( (unint64_t *)&unk_100459E20,  (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component,  (uint64_t)&protocol conformance descriptor for Calendar.Component);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v4, v26);
    uint64_t v27 = -1LL << *(_BYTE *)(v10 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1LL << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      int64_t v18 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v30 = 0;
      os_log_type_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        int v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0LL;
        }
        v30 |= v32;
        BOOL v33 = *(void *)(v15 + 8 * v29);
      }

      while (v33 == -1);
      int64_t v18 = __clz(__rbit64(~v33)) + (v29 << 6);
    }

    *(void *)(v15 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
    uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v5 + 32))( *(void *)(v10 + 48) + v18 * v24,  v7,  v4);
    ++*(void *)(v10 + 16);
  }

  int64_t v23 = v21 + 3;
  if (v23 >= v37)
  {
LABEL_35:
    uint64_t result = swift_release_n(v8, 2LL);
    uint64_t v2 = v35;
    goto LABEL_37;
  }

  uint64_t v22 = *(void *)(v36 + 8 * v23);
  if (v22)
  {
    unint64_t v17 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    unint64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v17 >= v37) {
      goto LABEL_35;
    }
    uint64_t v22 = *(void *)(v36 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

  __break(1u);
}

    unint64_t v11 = (v29 - 1) & v29;
    uint64_t v19 = __clz(__rbit64(v29)) + (v14 << 6);
    if ((v44 & 1) != 0)
    {
LABEL_13:
      uint64_t v20 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v19);
      uint64_t v21 = *v20;
      uint64_t v22 = v20[1];
      int64_t v23 = *(void *)(v5 + 56) + 320 * v19;
      unint64_t v58 = *(void *)(v23 + 16);
      uint64_t v48 = *(_BYTE *)(v23 + 8);
      os_log_t v49 = *(_BYTE *)(v23 + 24);
      uint64_t v59 = *(void *)(v23 + 32);
      id v56 = *(void *)v23;
      uint64_t v57 = *(void *)(v23 + 40);
      unint64_t v61 = *(void *)(v23 + 48);
      int v63 = *(void *)(v23 + 64);
      unint64_t v50 = *(_BYTE *)(v23 + 56);
      uint64_t v51 = *(_BYTE *)(v23 + 72);
      uint64_t v65 = *(void *)(v23 + 80);
      uint64_t v66 = *(void *)(v23 + 96);
      uint64_t v52 = *(_BYTE *)(v23 + 88);
      uint64_t v53 = *(_BYTE *)(v23 + 104);
      id v54 = *(_BYTE *)(v23 + 120);
      id v69 = *(void *)(v23 + 112);
      uint64_t v70 = *(void *)(v23 + 128);
      unint64_t v72 = *(void *)(v23 + 144);
      uint64_t v45 = *(_BYTE *)(v23 + 136);
      uint64_t v46 = *(_BYTE *)(v23 + 152);
      uint64_t v47 = *(_BYTE *)(v23 + 168);
      uint64_t v77 = *(void *)(v23 + 176);
      os_log_t v74 = *(void *)(v23 + 184);
      uint64_t v75 = *(void *)(v23 + 160);
      id v79 = *(void *)(v23 + 192);
      id v24 = *(_BYTE *)(v23 + 200);
      uint64_t v25 = *(_BYTE *)(v23 + 264);
      unint64_t v55 = *(_BYTE *)(v23 + 312);
      os_log_type_t v62 = *(void *)(v23 + 208);
      unint64_t v60 = *(void *)(v23 + 216);
      uint64_t v64 = *(void *)(v23 + 224);
      uint64_t v26 = *(_BYTE *)(v23 + 232);
      uint64_t v67 = *(void *)(v23 + 248);
      uint64_t v68 = *(void *)(v23 + 240);
      uint64_t v71 = *(void *)(v23 + 256);
      unint64_t v73 = *(void *)(v23 + 272);
      unint64_t v76 = *(void *)(v23 + 280);
      uint64_t v78 = *(void *)(v23 + 288);
      uint64_t v80 = *(void *)(v23 + 296);
      uint64_t v81 = *(void *)(v23 + 304);
      NSString v82 = *(_BYTE *)(v23 + 313);
      goto LABEL_27;
    }

    int64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 8 * v15;
    unint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 16 * v15;
    uint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    uint64_t v21 = *v19;
    uint64_t v20 = v19[1];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = (void *)(*(void *)(v4 + 56) + v18);
    *uint64_t v22 = v21;
    v22[1] = v20;
    uint64_t result = (void *)swift_bridgeObjectRetain(v20);
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  id v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    uint64_t v9 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    int64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    int64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_100016B10(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    sub_100015330(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  id v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    int64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    int64_t v18 = v17[1];
    uint64_t v20 = 320 * v15;
    memcpy(__dst, (const void *)(*(void *)(v2 + 56) + 320 * v15), 0x13AuLL);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v21 = v19;
    v21[1] = v18;
    memcpy((void *)(*(void *)(v4 + 56) + v20), __dst, 0x13AuLL);
    swift_bridgeObjectRetain(v18);
    uint64_t result = sub_1000266A4(__dst);
  }

  id v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v2);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  int64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    uint64_t v9 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    int64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = *v16;
    unint64_t v17 = v16[1];
    LOBYTE(v16) = *(_BYTE *)(*(void *)(v2 + 56) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + 16 * v15);
    *uint64_t v19 = v18;
    v19[1] = v17;
    *(_BYTE *)(*(void *)(v4 + 56) + v1sub_100015340(v0 + 5) = (_BYTE)v16;
    uint64_t result = (void *)swift_bridgeObjectRetain(v17);
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    int64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 32 * v15;
    sub_100016B10(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    sub_100015330(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    uint64_t result = v17;
  }

  uint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    uint64_t v9 = v21;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }

    int64_t v13 = (v24 - 1) & v24;
    int64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    unint64_t v17 = 16 * v16;
    int64_t v18 = (void *)(*(void *)(v3 + 48) + 16 * v16);
    uint64_t v19 = v18[1];
    uint64_t v20 = 8 * v16;
    uint64_t v21 = *(void **)(*(void *)(v3 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v5 + 48) + v17);
    *uint64_t v22 = *v18;
    v22[1] = v19;
    *(void *)(*(void *)(v5 + 56) + v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v21;
    swift_bridgeObjectRetain(v19);
    uint64_t result = v21;
  }

  uint64_t v25 = v23 + 2;
  if (v25 >= v14) {
    goto LABEL_26;
  }
  id v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    uint64_t v10 = v25;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    id v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }

    int64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = v17;
  }

  uint64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    uint64_t v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    int64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 8 * v15;
    unint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    int64_t v18 = *(void **)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    uint64_t v19 = v17;
    uint64_t result = v18;
  }

  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  uint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    int64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 40 * v15;
    sub_100017C44(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    unint64_t v17 = 32 * v15;
    sub_100016B10(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    int64_t v18 = *(void *)(v4 + 48) + v16;
    uint64_t v19 = v25[0];
    uint64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)int64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    uint64_t result = sub_100015330(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }

  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    uint64_t v9 = v23;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }

    int64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    int64_t v16 = 16 * v15;
    unint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    int64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v23 = v19;
    v23[1] = v18;
    id v24 = (void *)(*(void *)(v4 + 56) + v16);
    void *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain(v18);
    uint64_t result = (void *)swift_bridgeObjectRetain(v22);
  }

  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  uint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    uint64_t v9 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    uint64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

    unint64_t v15 = (v23 - 1) & v23;
    int64_t v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    uint64_t v19 = 8 * v18;
    uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
    uint64_t v21 = *(void *)(v26 + 72) * v18;
    sub_1000649D4(*(void *)(v5 + 56) + v21, (uint64_t)v4);
    *(void *)(*(void *)(v7 + 48) + v19) = v20;
    uint64_t result = (void *)sub_100064A54((uint64_t)v4, *(void *)(v7 + 56) + v21);
  }

  id v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    uint64_t result = (void *)swift_release(v5);
    uint64_t v1 = v25;
    goto LABEL_28;
  }

  int64_t v23 = *(void *)(v9 + 8 * v24);
  if (v23)
  {
    int64_t v12 = v24;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    int64_t v23 = *(void *)(v9 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }

    uint64_t v28 = *a5;
    *(void *)(v7 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = a4;
    *(void *)(v7 + 48) = v28;
    *(void *)(v7 + 24) = [*(id *)(v7 + 8) length];
    *(void *)(v7 + 16) = [*(id *)(v7 + 8) bytes];
    uint64_t v29 = lzma_code(v7 + 16, 0LL);
    if (!v29)
    {
LABEL_60:
      if (*(void *)(v7 + 24))
      {
        memmove([*(id *)(v7 + 8) mutableBytes], *(const void **)(v7 + 16), *(void *)(v7 + 24));
        uint64_t v48 = *(void *)(v7 + 24);
      }

      else
      {
        uint64_t v48 = 0LL;
      }

      [*(id *)(v7 + 8) setLength:v48];
      *a5 = (char *)*a5 - *(void *)(v7 + 48);
      os_log_t v49 = ASDLogHandleForCategory(7LL);
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v49);
      if (!os_log_type_enabled((os_log_t)v43, OS_LOG_TYPE_DEBUG)) {
        goto LABEL_64;
      }
      unint64_t v50 = *a5;
      *(_DWORD *)buf = 134217984;
      id v56 = v50;
      uint64_t v45 = "(LZMADecoder) Decoded %{iec-bytes}lu";
      goto LABEL_68;
    }

    uint64_t v30 = v29;
    if (v29 != 1)
    {
      if (v29 != 10)
      {
        if (a6)
        {
          uint64_t v40 = ASDLogHandleForCategory(7LL);
          unint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v56) = v30;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEBUG,  "(LZMADecoder) Entering error state (%d)",  buf,  8u);
          }

          uint64_t v9 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  ASDErrorDomain,  v30 + 410LL,  0LL));
          goto LABEL_5;
        }

        return 0LL;
      }

      os_log_type_t v31 = ASDLogHandleForCategory(7LL);
      int v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "(LZMADecoder) Output buffer completely full",  buf,  2u);
      }

      goto LABEL_59;
    }

    uint64_t v37 = *(void *)(v7 + 160);
    if (v37)
    {
      uint64_t v51 = 0LL;
      int64_t v38 = sub_100239270(v37, &v51);
      id v39 = v51;
      int v32 = (os_log_s *)v51;
      if ((v38 & 1) == 0)
      {
        *(void *)(v7 + 184) = 4LL;
        objc_storeStrong((id *)(v7 + 176), v39);
        if (a6) {
          *a6 = v32;
        }

        return 0LL;
      }
    }

    else
    {
      int v32 = 0LL;
    }

    uint64_t v46 = ASDLogHandleForCategory(7LL);
    uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v56) = 1;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_DEBUG,  "(LZMADecoder) Entering finished state (%d)",  buf,  8u);
    }

    *(void *)(v7 + 184) = 3LL;
LABEL_59:

    goto LABEL_60;
  }

  return result;
}

  uint64_t v45 = -[NSString copyWithZone:](self->_bundleVersion, "copyWithZone:", a3, (void)v52);
  uint64_t v46 = *(void **)(v6 + 80);
  *(void *)(v6 + 8_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v45;

  uint64_t v47 = -[NSString copyWithZone:](self->_manifestURLString, "copyWithZone:", a3);
  uint64_t v48 = *(void **)(v6 + 104);
  *(void *)(v6 + 104) = v47;

  if ((*(_WORD *)&self->_has & 0x800) != 0)
  {
    *(_BYTE *)(v6 + 206) = self->_suppressDialogs;
    *(_WORD *)(v6 + 208) |= 0x800u;
  }

  os_log_t v49 = -[NSString copyWithZone:](self->_betaBuildGroupID, "copyWithZone:", a3);
  unint64_t v50 = *(void **)(v6 + 64);
  *(void *)(v6 + 64) = v49;

  return (id)v6;
}

  return v10;
}
}
}

  return a1;
}

    uint64_t v44 = [v5 count];
    uint64_t v45 = [v6 count];
    if (a3) {
      *a3 = 0LL;
    }
    if (v44 == v45) {
      uint64_t v46 = v5;
    }
    else {
      uint64_t v46 = 0LL;
    }
    uint64_t v47 = v46;

    uint64_t v4 = v51;
  }

  else
  {
    uint64_t v47 = 0LL;
  }

  return v47;
}

uint64_t sub_10005D9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  void v4[8] = a1;
  v4[9] = a2;
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v4[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[13] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[14] = swift_task_alloc(v7);
  v4[15] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for PurchaseCandidate(0LL);
  v4[16] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[17] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[18] = swift_task_alloc(v10);
  v4[19] = swift_task_alloc(v10);
  v4[20] = swift_task_alloc(v10);
  return swift_task_switch(sub_10005DA74, 0LL, 0LL);
}

uint64_t sub_10005DA74()
{
  *(void *)(v0 + 32) = _swiftEmptyArrayStorage;
  uint64_t v1 = *(void *)(v0 + 64);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v93 = *(void *)(v0 + 64);
    }
    else {
      uint64_t v93 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t result = _CocoaArrayWrapper.endIndex.getter(v93);
    uint64_t v2 = result;
    *(void *)(v0 + 168) = result;
    if (result) {
      goto LABEL_3;
    }
LABEL_30:
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    unint64_t v84 = _swiftEmptyArrayStorage;
LABEL_31:
    uint64_t v94 = *(void *)(v0 + 152);
    uint64_t v95 = *(void *)(v0 + 144);
    uint64_t v97 = *(void *)(v0 + 112);
    uint64_t v96 = *(void *)(v0 + 120);
    swift_task_dealloc(*(void *)(v0 + 160));
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    return (*(uint64_t (**)(void *))(v0 + 8))(v84);
  }

  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  uint64_t result = swift_bridgeObjectRetain(v1);
  *(void *)(v0 + 168) = v2;
  if (!v2) {
    goto LABEL_30;
  }
LABEL_3:
  *(void *)(v0 + 176) = OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey;
  if (v2 >= 1)
  {
    uint64_t v4 = 0LL;
    uint64_t v5 = v0 + 16;
    while (1)
    {
      *(void *)(v0 + 184) = v4;
      uint64_t v11 = *(void *)(v0 + 64);
      if ((v11 & 0xC000000000000001LL) != 0) {
        id v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v11);
      }
      else {
        id v12 = *(id *)(v11 + 8 * v4 + 32);
      }
      unint64_t v14 = v12;
      *(void *)(v0 + 192) = v12;
      unint64_t v15 = (unint64_t)sub_1002CBA30(v12, v13);
      if (v15
        && (int64_t v16 = (void *)v15,
            uint64_t v17 = *(void *)(v0 + 80),
            id v18 = [(id)v15 longLongValue],
            v16,
            *(void *)(v17 + 16))
        && (unint64_t v15 = sub_100023FE0((uint64_t)v18), (v19 & 1) != 0))
      {
        uint64_t v20 = *(void *)(v0 + 152);
        uint64_t v21 = *(void *)(v0 + 160);
        sub_1000649D4(*(void *)(*(void *)(v0 + 80) + 56LL) + *(void *)(*(void *)(v0 + 136) + 72LL) * v15, v20);
        uint64_t v22 = sub_100064A54(v20, v21);
        int64_t v23 = *(void **)(v21 + 24);
        *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v23;
        if (v23)
        {
          uint64_t v85 = *(void *)(v0 + 160);
          uint64_t v86 = *(void *)(v0 + 88);
          uint64_t v87 = *(void *)(v0 + 72);
          uint64_t v88 = (void *)swift_task_alloc(64LL);
          *(void *)(v0 + 208) = v88;
          v88[2] = v86;
          v88[3] = v85;
          v88[4] = v23;
          v88[5] = v14;
          v88[6] = v87;
          uint64_t v89 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
          id v90 = v23;
          os_log_type_t v91 = (void *)swift_task_alloc(v89);
          *(void *)(v0 + 216) = v91;
          uint64_t v92 = sub_1000079A0(&qword_100459D70);
          void *v91 = v0;
          v91[1] = sub_10005E174;
          return withCheckedContinuation<A>(isolation:function:_:)( v0 + 56,  0LL,  0LL,  0xD000000000000027LL,  0x8000000100344D90LL,  sub_100064A98,  v88,  v92);
        }

        uint64_t v24 = *(void *)(v0 + 160);
        uint64_t v25 = *(void *)(v0 + 144);
        uint64_t v26 = *(void **)(v0 + 88);
        static Logger.purchase.getter(v22);
        sub_1000649D4(v24, v25);
        uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
        os_log_type_t v28 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v27, v28))
        {
          os_log_type_t v99 = v28;
          unint64_t v101 = v27;
          uint64_t v29 = *(void *)(v0 + 176);
          uint64_t v30 = *(void *)(v0 + 144);
          os_log_type_t v31 = *(char **)(v0 + 88);
          uint64_t v32 = swift_slowAlloc(22LL, -1LL);
          BOOL v33 = (void *)swift_slowAlloc(8LL, -1LL);
          uint64_t v100 = swift_slowAlloc(32LL, -1LL);
          *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v100;
          *(_DWORD *)uint64_t v32 = 138412546;
          uint64_t v34 = *(void **)&v31[v29];
          *(void *)(v32 + 4) = v34;
          id v98 = v33;
          *BOOL v33 = v34;
          id v35 = v34;

          *(_WORD *)(v32 + 12) = 2082;
          *(void *)(v0 + 16) = 5849665LL;
          *(void *)(v0 + 24) = 0xE300000000000000LL;
          uint64_t v36 = UUID.uuidString.getter();
          unint64_t v38 = v37;
          uint64_t v39 = sub_100092034(8LL, v36, v37);
          uint64_t v41 = v40;
          uint64_t v42 = v5;
          uint64_t v44 = v43;
          uint64_t v46 = v45;
          swift_bridgeObjectRelease(v38);
          uint64_t v47 = v44;
          uint64_t v5 = v42;
          v48._countAndFlagsBits = static String._fromSubstring(_:)(v39, v41, v47, v46);
          object = v48._object;
          String.append(_:)(v48);
          swift_bridgeObjectRelease(object);
          swift_bridgeObjectRelease(v46);
          v50._countAndFlagsBits = 47LL;
          v50._object = (void *)0xE100000000000000LL;
          String.append(_:)(v50);
          uint64_t v51 = *(void *)(v30 + 16);
          uint64_t v52 = *(void *)(v0 + 144);
          if (v51)
          {
            uint64_t v53 = *(void *)(v52 + 8);
            id v54 = *(void **)(v30 + 16);
          }

          else
          {
            uint64_t v53 = 0LL;
            id v54 = (void *)0xE000000000000000LL;
          }

          uint64_t v75 = v101;
          uint64_t v76 = *(void *)(v0 + 120);
          uint64_t v77 = *(void *)(v0 + 104);
          uint64_t v102 = *(void *)(v0 + 96);
          swift_bridgeObjectRetain(v51);
          v78._countAndFlagsBits = v53;
          v78._object = v54;
          String.append(_:)(v78);
          swift_bridgeObjectRelease(v54);
          v79._countAndFlagsBits = 58LL;
          v79._object = (void *)0xE100000000000000LL;
          String.append(_:)(v79);
          *(void *)(v0 + 48) = *(void *)(v52 + 32);
          v80._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
          uint64_t v81 = v80._object;
          String.append(_:)(v80);
          swift_bridgeObjectRelease(v81);
          unint64_t v82 = *(void *)(v0 + 24);
          *(void *)(v32 + 14) = sub_100088DB4(*(void *)(v0 + 16), v82, (uint64_t *)(v0 + 40));
          swift_bridgeObjectRelease(v82);
          sub_100064A18(v52);
          _os_log_impl( (void *)&_mh_execute_header,  v75,  v99,  "[%@][%{public}s] Skipping purchase import missing coordinator",  (uint8_t *)v32,  0x16u);
          uint64_t v83 = sub_1000079A0((uint64_t *)&unk_100458F50);
          swift_arrayDestroy(v98, 1LL, v83);
          swift_slowDealloc(v98, -1LL, -1LL);
          swift_arrayDestroy(v100, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v100, -1LL, -1LL);
          swift_slowDealloc(v32, -1LL, -1LL);

          (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v76, v102);
        }

        else
        {
          uint64_t v70 = *(void *)(v0 + 144);
          uint64_t v71 = *(void *)(v0 + 120);
          uint64_t v72 = *(void *)(v0 + 96);
          uint64_t v73 = *(void *)(v0 + 104);
          os_log_t v74 = *(void **)(v0 + 88);

          sub_100064A18(v70);
          (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v71, v72);
        }

        sub_100064A18(*(void *)(v0 + 160));
      }

      else
      {
        unint64_t v55 = *(void **)(v0 + 88);
        static Logger.purchase.getter(v15);
        id v56 = v55;
        id v57 = v14;
        id v58 = v56;
        id v59 = v57;
        unint64_t v7 = (os_log_s *)Logger.logObject.getter(v59);
        os_log_type_t v60 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v7, v60))
        {
          uint64_t v61 = *(void *)(v0 + 176);
          os_log_type_t v62 = *(char **)(v0 + 88);
          uint64_t v63 = swift_slowAlloc(22LL, -1LL);
          uint64_t v64 = (void *)swift_slowAlloc(16LL, -1LL);
          *(_DWORD *)uint64_t v63 = 138412546;
          uint64_t v65 = *(void **)&v62[v61];
          *(void *)(v63 + 4) = v65;
          *uint64_t v64 = v65;
          id v66 = v65;

          *(_WORD *)(v63 + 12) = 2114;
          id v68 = sub_1002CBA30(v59, v67);
          *(void *)(v63 + 14) = v68;
          v64[1] = v68;

          _os_log_impl( (void *)&_mh_execute_header,  v7,  v60,  "[%@][%{public}@] Skipping purchase due to missing purchase candidate",  (uint8_t *)v63,  0x16u);
          uint64_t v69 = sub_1000079A0((uint64_t *)&unk_100458F50);
          swift_arrayDestroy(v64, 2LL, v69);
          swift_slowDealloc(v64, -1LL, -1LL);
          swift_slowDealloc(v63, -1LL, -1LL);
        }

        else
        {
          uint64_t v6 = *(void **)(v0 + 88);

          unint64_t v7 = (os_log_s *)v59;
        }

        uint64_t v9 = *(void *)(v0 + 104);
        uint64_t v8 = *(void *)(v0 + 112);
        uint64_t v10 = *(void *)(v0 + 96);

        (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
      }

      uint64_t v4 = *(void *)(v0 + 184) + 1LL;
      if (v4 == *(void *)(v0 + 168))
      {
        swift_bridgeObjectRelease(*(void *)(v0 + 64));
        unint64_t v84 = *(void **)(v0 + 32);
        goto LABEL_31;
      }
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_10005E174()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 208LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 216LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10005E1D0, 0LL, 0LL);
}

uint64_t sub_10005E1D0()
{
  uint64_t v2 = *(void **)(v0 + 192);
  uint64_t v1 = *(void **)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 160);
  sub_100055C1C(*(void *)(v0 + 56), (uint64_t (*)(uint64_t, void, uint64_t))sub_100063868);

  sub_100064A18(v3);
  uint64_t v4 = *(void *)(v0 + 184) + 1LL;
  if (v4 == *(void *)(v0 + 168))
  {
LABEL_2:
    swift_bridgeObjectRelease(*(void *)(v0 + 64));
    uint64_t v5 = *(void *)(v0 + 32);
    uint64_t v6 = *(void *)(v0 + 152);
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v9 = *(void *)(v0 + 112);
    uint64_t v8 = *(void *)(v0 + 120);
    swift_task_dealloc(*(void *)(v0 + 160));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
  }

  while (1)
  {
    *(void *)(v0 + 184) = v4;
    uint64_t v16 = *(void *)(v0 + 64);
    id v17 = (v16 & 0xC000000000000001LL) != 0
        ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v16)
        : *(id *)(v16 + 8 * v4 + 32);
    char v19 = v17;
    *(void *)(v0 + 192) = v17;
    unint64_t v20 = (unint64_t)sub_1002CBA30(v17, v18);
    if (v20)
    {
      uint64_t v21 = (void *)v20;
      uint64_t v22 = *(void *)(v0 + 80);
      id v23 = [(id)v20 longLongValue];

      if (*(void *)(v22 + 16))
      {
        unint64_t v20 = sub_100023FE0((uint64_t)v23);
        if ((v24 & 1) != 0) {
          break;
        }
      }
    }

    id v58 = *(void **)(v0 + 88);
    static Logger.purchase.getter(v20);
    id v59 = v58;
    id v60 = v19;
    id v61 = v59;
    id v62 = v60;
    id v12 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v63))
    {
      uint64_t v64 = *(void *)(v0 + 176);
      uint64_t v65 = *(char **)(v0 + 88);
      uint64_t v66 = swift_slowAlloc(22LL, -1LL);
      uint64_t v67 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v66 = 138412546;
      id v68 = *(void **)&v65[v64];
      *(void *)(v66 + 4) = v68;
      *uint64_t v67 = v68;
      id v69 = v68;

      *(_WORD *)(v66 + 12) = 2114;
      id v71 = sub_1002CBA30(v62, v70);
      *(void *)(v66 + 14) = v71;
      v67[1] = v71;

      _os_log_impl( (void *)&_mh_execute_header,  v12,  v63,  "[%@][%{public}@] Skipping purchase due to missing purchase candidate",  (uint8_t *)v66,  0x16u);
      uint64_t v72 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v67, 2LL, v72);
      swift_slowDealloc(v67, -1LL, -1LL);
      swift_slowDealloc(v66, -1LL, -1LL);
    }

    else
    {
      uint64_t v11 = *(void **)(v0 + 88);

      id v12 = (os_log_s *)v62;
    }

    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v13 = *(void *)(v0 + 112);
    uint64_t v15 = *(void *)(v0 + 96);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
LABEL_6:
    uint64_t v4 = *(void *)(v0 + 184) + 1LL;
    if (v4 == *(void *)(v0 + 168)) {
      goto LABEL_2;
    }
  }

  uint64_t v25 = *(void *)(v0 + 152);
  uint64_t v26 = *(void *)(v0 + 160);
  sub_1000649D4(*(void *)(*(void *)(v0 + 80) + 56LL) + *(void *)(*(void *)(v0 + 136) + 72LL) * v20, v25);
  uint64_t v27 = sub_100064A54(v25, v26);
  os_log_type_t v28 = *(void **)(v26 + 24);
  *(void *)(v0 + 20_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v28;
  uint64_t v29 = *(void **)(v0 + 88);
  uint64_t v30 = *(void *)(v0 + 160);
  if (!v28)
  {
    uint64_t v31 = *(void *)(v0 + 144);
    static Logger.purchase.getter(v27);
    sub_1000649D4(v30, v31);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      os_log_type_t v94 = v33;
      uint64_t v34 = *(void *)(v0 + 176);
      uint64_t v35 = *(void *)(v0 + 144);
      uint64_t v36 = *(char **)(v0 + 88);
      uint64_t v37 = swift_slowAlloc(22LL, -1LL);
      unint64_t v38 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v95 = swift_slowAlloc(32LL, -1LL);
      *(void *)(v0 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v95;
      *(_DWORD *)uint64_t v37 = 138412546;
      uint64_t v39 = *(void **)&v36[v34];
      *(void *)(v37 + 4) = v39;
      uint64_t v93 = v38;
      void *v38 = v39;
      id v40 = v39;

      *(_WORD *)(v37 + 12) = 2082;
      *(void *)(v0 + 16) = 5849665LL;
      *(void *)(v0 + 24) = 0xE300000000000000LL;
      uint64_t v41 = UUID.uuidString.getter();
      unint64_t v43 = v42;
      uint64_t v44 = sub_100092034(8LL, v41, v42);
      uint64_t v46 = v45;
      uint64_t v48 = v47;
      uint64_t v50 = v49;
      swift_bridgeObjectRelease(v43);
      v51._countAndFlagsBits = static String._fromSubstring(_:)(v44, v46, v48, v50);
      object = v51._object;
      String.append(_:)(v51);
      swift_bridgeObjectRelease(object);
      swift_bridgeObjectRelease(v50);
      v53._countAndFlagsBits = 47LL;
      v53._object = (void *)0xE100000000000000LL;
      String.append(_:)(v53);
      uint64_t v54 = *(void *)(v35 + 16);
      uint64_t v55 = *(void *)(v0 + 144);
      if (v54)
      {
        uint64_t v56 = *(void *)(v55 + 8);
        id v57 = *(void **)(v35 + 16);
      }

      else
      {
        uint64_t v56 = 0LL;
        id v57 = (void *)0xE000000000000000LL;
      }

      uint64_t v78 = *(void *)(v0 + 104);
      uint64_t v91 = *(void *)(v0 + 96);
      uint64_t v92 = *(void *)(v0 + 120);
      swift_bridgeObjectRetain(v54);
      v79._countAndFlagsBits = v56;
      v79._object = v57;
      String.append(_:)(v79);
      swift_bridgeObjectRelease(v57);
      v80._countAndFlagsBits = 58LL;
      v80._object = (void *)0xE100000000000000LL;
      String.append(_:)(v80);
      *(void *)(v0 + 48) = *(void *)(v55 + 32);
      v81._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      unint64_t v82 = v81._object;
      String.append(_:)(v81);
      swift_bridgeObjectRelease(v82);
      unint64_t v83 = *(void *)(v0 + 24);
      *(void *)(v37 + 14) = sub_100088DB4(*(void *)(v0 + 16), v83, (uint64_t *)(v0 + 40));
      swift_bridgeObjectRelease(v83);
      sub_100064A18(v55);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  v94,  "[%@][%{public}s] Skipping purchase import missing coordinator",  (uint8_t *)v37,  0x16u);
      uint64_t v84 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v93, 1LL, v84);
      swift_slowDealloc(v93, -1LL, -1LL);
      swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v95, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v92, v91);
    }

    else
    {
      uint64_t v73 = *(void *)(v0 + 144);
      uint64_t v74 = *(void *)(v0 + 120);
      uint64_t v75 = *(void *)(v0 + 96);
      uint64_t v76 = *(void *)(v0 + 104);
      uint64_t v77 = *(void **)(v0 + 88);

      sub_100064A18(v73);
      (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v74, v75);
    }

    sub_100064A18(*(void *)(v0 + 160));
    goto LABEL_6;
  }

  uint64_t v85 = *(void *)(v0 + 72);
  uint64_t v86 = (void *)swift_task_alloc(64LL);
  *(void *)(v0 + 208) = v86;
  _OWORD v86[2] = v29;
  v86[3] = v30;
  v86[4] = v28;
  v86[5] = v19;
  v86[6] = v85;
  uint64_t v87 = async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1];
  id v88 = v28;
  uint64_t v89 = (void *)swift_task_alloc(v87);
  *(void *)(v0 + 216) = v89;
  uint64_t v90 = sub_1000079A0(&qword_100459D70);
  *uint64_t v89 = v0;
  v89[1] = sub_10005E174;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 56,  0LL,  0LL,  0xD000000000000027LL,  0x8000000100344D90LL,  sub_100064A98,  v86,  v90);
}

uint64_t sub_10005E9AC(const void *a1, void *a2)
{
  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  uint64_t v4 = dword_100459D24;
  a2;
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v2[4] = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10002FEB8;
  return sub_1000569D8();
}

void sub_10005EA0C(id *a1, id *a2)
{
  uint64_t v177 = a1;
  uint64_t v4 = type metadata accessor for PurchaseCandidate(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v158 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v158 - v9;
  __chkstk_darwin(v8);
  uint64_t v172 = (uint64_t)&v158 - v11;
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v179 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v158 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = (char *)&v158 - v17;
  __chkstk_darwin(v16);
  uint64_t v175 = (char *)&v158 - v19;
  uint64_t v20 = sub_1000079A0((uint64_t *)&unk_100459B80);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v173 = (uint64_t)&v158 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v171 = (uint64_t)&v158 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v174 = (uint64_t)&v158 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v158 - v28;
  __chkstk_darwin(v27);
  os_log_t v176 = (os_log_t)((char *)&v158 - v30);
  uint64_t v31 = *(int *)(v4 + 36);
  uint64_t v180 = a2;
  uint64_t v32 = *(id **)((char *)a2 + v31);
  if (!v32) {
    goto LABEL_8;
  }
  uint64_t v32 = sub_100245F18(v32);
  if (!v32) {
    goto LABEL_8;
  }
  os_log_type_t v33 = v32;
  uint64_t v178 = v12;
  uint64_t v34 = sub_1002C5058(v32);
  if (!v34)
  {

    uint64_t v12 = v178;
LABEL_8:
    static Logger.purchase.getter(v32);
    sub_1000649D4((uint64_t)v180, (uint64_t)v7);
    Swift::String v51 = v2;
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = static os_log_type_t.error.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = swift_slowAlloc(22LL, -1LL);
      uint64_t v180 = (id *)v15;
      uint64_t v55 = v54;
      uint64_t v56 = swift_slowAlloc(8LL, -1LL);
      os_log_t v176 = v52;
      id v57 = (void *)v56;
      uint64_t v177 = (id *)swift_slowAlloc(32LL, -1LL);
      uint64_t v182 = v177;
      *(_DWORD *)uint64_t v55 = 138412546;
      uint64_t v178 = v12;
      id v58 = *(void **)&v51[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      uint64_t v181 = (uint64_t)v58;
      id v59 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v55 + 4, v55 + 12);
      *id v57 = v58;

      *(_WORD *)(v55 + 12) = 2082;
      uint64_t v60 = sub_10005A90C();
      unint64_t v62 = v61;
      uint64_t v181 = sub_100088DB4(v60, v61, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease(v62);
      sub_100064A18((uint64_t)v7);
      os_log_t v63 = v176;
      _os_log_impl( (void *)&_mh_execute_header,  v176,  v53,  "[%@][%{public}s] Metadata missing platform attributes",  (uint8_t *)v55,  0x16u);
      uint64_t v64 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v57, 1LL, v64);
      swift_slowDealloc(v57, -1LL, -1LL);
      uint64_t v65 = v177;
      swift_arrayDestroy(v177, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);

      (*(void (**)(id *, uint64_t))(v179 + 8))(v180, v178);
    }

    else
    {

      sub_100064A18((uint64_t)v7);
      (*(void (**)(char *, uint64_t))(v179 + 8))(v15, v12);
    }

    return;
  }

  uint64_t v35 = v34;
  id v36 = sub_1001E4DA0(v177);
  if ((v36 & 1) != 0)
  {
    static Logger.purchase.getter(v36);
    sub_1000649D4((uint64_t)v180, (uint64_t)v10);
    uint64_t v37 = v2;
    unint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.default.getter();
    int v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v41 = swift_slowAlloc(22LL, -1LL);
      unint64_t v42 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v180 = (id *)swift_slowAlloc(32LL, -1LL);
      uint64_t v182 = v180;
      *(_DWORD *)uint64_t v41 = 138412546;
      LODWORD(v177) = v40;
      os_log_t v176 = v38;
      unint64_t v43 = *(void **)&v37[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      uint64_t v169 = v33;
      uint64_t v170 = v35;
      uint64_t v181 = (uint64_t)v43;
      id v44 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v41 + 4, v41 + 12);
      *unint64_t v42 = v43;

      *(_WORD *)(v41 + 12) = 2082;
      uint64_t v45 = sub_10005A90C();
      unint64_t v47 = v46;
      uint64_t v181 = sub_100088DB4(v45, v46, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v41 + 14, v41 + 22);
      swift_bridgeObjectRelease(v47);
      sub_100064A18((uint64_t)v10);
      os_log_t v48 = v176;
      _os_log_impl( (void *)&_mh_execute_header,  v176,  (os_log_type_t)v177,  "[%@][%{public}s] Already has a placeholder",  (uint8_t *)v41,  0x16u);
      uint64_t v49 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v42, 1LL, v49);
      swift_slowDealloc(v42, -1LL, -1LL);
      uint64_t v50 = v180;
      swift_arrayDestroy(v180, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {

      sub_100064A18((uint64_t)v10);
    }

    (*(void (**)(char *, uint64_t))(v179 + 8))(v18, v178);
  }

  else
  {
    uint64_t v170 = v35;
    id v66 = (id)sub_1001AD81C((uint64_t)v35);
    NSString v67 = v66;
    id v68 = (char *)v66;
    if (!v66)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      id v69 = v33;
      uint64_t v71 = v70;
      id v68 = (char *)String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v71);
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v73 = v72;
      NSString v67 = String._bridgeToObjectiveC()();
      uint64_t v74 = v73;
      os_log_type_t v33 = v69;
      swift_bridgeObjectRelease(v74);
    }

    uint64_t v164 = v68;
    id v75 = v180[4];
    NSString v166 = v67;
    id v167 = v75;
    id v76 = v66;
    uint64_t v169 = v33;
    id v77 = (id)sub_100245F88((uint64_t)v33);
    NSString v78 = v77;
    Swift::String v79 = (char *)v77;
    if (!v77)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v81 = v80;
      Swift::String v79 = (char *)String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v81);
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v83 = v82;
      NSString v78 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v83);
    }

    uint64_t v163 = v79;
    NSString v165 = v78;
    id v84 = v77;
    id v85 = (id)sub_1001AD828((uint64_t)v170);
    uint64_t v86 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v85,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

    id v87 = objc_allocWithZone(&OBJC_CLASS___AMSMediaArtwork);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v86);
    id v89 = [v87 initWithDictionary:isa];

    id v90 =  objc_msgSend( v89,  "URLWithSize:cropStyle:format:",  AMSMediaArtworkCropStyleBoundedBox,  AMSMediaArtworkFormatPNG,  128.0,  128.0);
    id v168 = v89;
    if (v90)
    {
      uint64_t v91 = v90;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v90);

      uint64_t v92 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v92 - 8) + 56LL))(v29, 0LL, 1LL, v92);
    }

    else
    {
      uint64_t v93 = type metadata accessor for URL(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56LL))(v29, 1LL, 1LL, v93);
    }

    uint64_t v94 = v178;
    uint64_t v95 = v175;
    os_log_t v96 = v176;
    uint64_t v97 = v174;
    uint64_t v98 = sub_100026CD4((uint64_t)v29, (uint64_t)v176, (uint64_t *)&unk_100459B80);
    static Logger.purchase.getter(v98);
    uint64_t v99 = v172;
    sub_1000649D4((uint64_t)v180, v172);
    sub_100064B54((uint64_t)v96, v97);
    uint64_t v100 = v2;
    unint64_t v101 = (os_log_s *)Logger.logObject.getter(v100);
    int v102 = static os_log_type_t.info.getter();
    BOOL v103 = os_log_type_enabled(v101, (os_log_type_t)v102);
    uint64_t v162 = v100;
    if (v103)
    {
      int v159 = v102;
      os_log_t v161 = v101;
      uint64_t v104 = swift_slowAlloc(32LL, -1LL);
      unint64_t v105 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v160 = (id *)swift_slowAlloc(64LL, -1LL);
      uint64_t v182 = v160;
      *(_DWORD *)uint64_t v104 = 138412802;
      uint64_t v106 = v97;
      uint64_t v107 = *(void **)&v100[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
      uint64_t v181 = (uint64_t)v107;
      id v108 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v104 + 4, v104 + 12);
      uint64_t v158 = v105;
      *unint64_t v105 = v107;

      *(_WORD *)(v104 + 12) = 2082;
      uint64_t v109 = sub_10005A90C();
      unint64_t v111 = v110;
      uint64_t v181 = sub_100088DB4(v109, v110, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v104 + 14, v104 + 22);
      swift_bridgeObjectRelease(v111);
      sub_100064A18(v99);
      *(_WORD *)(v104 + 22) = 2080;
      uint64_t v112 = v171;
      sub_100064B54(v106, v171);
      uint64_t v113 = type metadata accessor for URL(0LL);
      uint64_t v114 = *(void *)(v113 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v114 + 48))(v112, 1LL, v113) == 1)
      {
        sub_100015240(v112, (uint64_t *)&unk_100459B80);
        unint64_t v115 = 0xE200000000000000LL;
        uint64_t v116 = 16718LL;
      }

      else
      {
        uint64_t v116 = URL.absoluteString.getter();
        unint64_t v115 = v118;
        (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v112, v113);
      }

      unsigned int v117 = v169;
      uint64_t v181 = sub_100088DB4(v116, v115, (uint64_t *)&v182);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, &v182, v104 + 24, v104 + 32);
      swift_bridgeObjectRelease(v115);
      sub_100015240(v174, (uint64_t *)&unk_100459B80);
      os_log_t v119 = v161;
      _os_log_impl( (void *)&_mh_execute_header,  v161,  (os_log_type_t)v159,  "[%@][%{public}s] Found metadata. artworkURL: %s",  (uint8_t *)v104,  0x20u);
      uint64_t v120 = sub_1000079A0((uint64_t *)&unk_100458F50);
      uint64_t v121 = v158;
      swift_arrayDestroy(v158, 1LL, v120);
      swift_slowDealloc(v121, -1LL, -1LL);
      uint64_t v122 = v160;
      swift_arrayDestroy(v160, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v122, -1LL, -1LL);
      swift_slowDealloc(v104, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v179 + 8))(v175, v178);
      os_log_t v96 = v176;
    }

    else
    {

      sub_100064A18(v99);
      sub_100015240(v97, (uint64_t *)&unk_100459B80);

      (*(void (**)(char *, uint64_t))(v179 + 8))(v95, v94);
      unsigned int v117 = v169;
    }

    id v123 = [objc_allocWithZone((Class)PlaceholderBuilder) init];
    uint64_t v124 = v173;
    sub_100064B54((uint64_t)v96, v173);
    uint64_t v125 = type metadata accessor for URL(0LL);
    uint64_t v126 = *(void *)(v125 - 8);
    Class v128 = 0LL;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v126 + 48))(v124, 1LL, v125) != 1)
    {
      URL._bridgeToObjectiveC()(v127);
      Class v128 = v129;
      (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v124, v125);
    }

    sub_10026D374(v123, v128);

    uint64_t v130 = v163;
    sub_10026D39C(v123, v163);

    uint64_t v131 = v164;
    sub_10026D388(v123, v164);

    sub_10026D3BC(v123, *(char **)&v162[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey]);
    sub_10026D3B0((uint64_t)v123, 1LL);
    sub_10026D3D0((uint64_t)v123, 0LL);
    os_log_type_t v132 = (id *)[objc_allocWithZone(MIStoreMetadata) init];
    uint64_t v133 = v117;
    NSString v134 = (id)sub_1001AD81C((uint64_t)v117);
    if (!v134)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      uint64_t v136 = v135;
      NSString v134 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v136);
    }

    [v132 setArtistName:v134];

    uint64_t v137 = v166;
    [v132 setSoftwareVersionBundleID:v166];

    id v138 = v165;
    [v132 setItemName:v165];

    id v139 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
    id v140 = [v139 initWithLongLong:v167];
    [v132 setItemID:v140];

    id v141 = *v180;
    id v142 = objc_msgSend(*v180, "ams_DSID");
    [v132 setPurchaserID:v142];

    id v143 = objc_msgSend(v141, "ams_altDSID");
    [v132 setAltDSID:v143];

    NSString v144 = String._bridgeToObjectiveC()();
    [v132 setSourceApp:v144];

    sub_10026D3DC(v123, (char *)v132);
    uint64_t v182 = 0LL;
    id v145 = sub_10026C808((uint64_t)v123, &v182);
    uint64_t v146 = v182;
    uint64_t v147 = v168;
    if (v145)
    {
      uint64_t v148 = v145;
      uint64_t v182 = 0LL;
      os_log_t v149 = v146;
      unsigned int v150 = sub_1001E606C(v177, v148, &v182);
      os_log_t v151 = v182;
      if (v150)
      {
        os_log_t v152 = v182;
        sub_100015240((uint64_t)v96, (uint64_t *)&unk_100459B80);

        return;
      }

      uint64_t v156 = v182;
      _convertNSErrorToError(_:)(v151);

      swift_willThrow(v157);
      os_log_type_t v132 = v170;
      uint64_t v155 = (id *)v147;
      uint64_t v147 = v123;
      id v123 = v148;
    }

    else
    {
      os_log_t v153 = v182;
      _convertNSErrorToError(_:)(v146);

      swift_willThrow(v154);
      uint64_t v155 = v170;
    }

    sub_100015240((uint64_t)v96, (uint64_t *)&unk_100459B80);
  }

uint64_t sub_10005F930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000657E4((uint64_t)v6, a1, a2);
}

uint64_t sub_10005F98C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10001517C(0LL, (unint64_t *)&unk_100458ED0, off_1003D9CA0);
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v10);
  id v12 = [a1 connection];
  id v13 = sub_10024C1D0(ObjCClassFromMetadata, v12, a2);

  uint64_t v14 = sub_100056154(a3);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  uint64_t v16 = swift_allocObject(&unk_1003DF570, 32LL, 7LL);
  *(void *)(v16 + 16) = a4;
  *(void *)(v16 + 24) = a5;
  uint64_t v17 = swift_allocObject(&unk_1003DF598, 32LL, 7LL);
  *(void *)(v17 + 16) = sub_100064BF4;
  *(void *)(v17 + 24) = v16;
  v21[4] = sub_1000152F8;
  uint64_t v22 = v17;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1107296256LL;
  _BYTE v21[2] = sub_100056278;
  v21[3] = &unk_1003DF5B0;
  id v18 = _Block_copy(v21);
  uint64_t v19 = v22;
  swift_retain(v17);
  swift_release(v19);
  [v13 enumerateMemoryEntitiesWithProperties:isa usingBlock:v18];

  _Block_release(v18);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation(v17, "", 99LL, 368LL, 78LL, 1LL);
  swift_release(v16);
  uint64_t result = swift_release(v17);
  return result;
}

uint64_t sub_10005FB50(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, _BYTE *a5)
{
  uint64_t v8 = objc_opt_self(&OBJC_CLASS___AppInstall);
  uint64_t result = swift_dynamicCastObjCClass(a1, v8);
  if (result)
  {
    uint64_t v10 = (void *)result;
    id v11 = a1;
    id v12 = sub_100323D88(v10);
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v16 = v15;
    }

    else
    {

      uint64_t v14 = 0LL;
      uint64_t v16 = 0LL;
    }

    uint64_t v17 = a4[1];
    *a4 = v14;
    a4[1] = v16;
    uint64_t result = swift_bridgeObjectRelease(v17);
    *a5 = 1;
  }

  return result;
}

uint64_t sub_10005FBFC(id *a1, void *a2, void *a3, void *a4, id *a5, os_log_s *a6)
{
  os_log_t v140 = a6;
  id v141 = a5;
  id v139 = a4;
  id v142 = a1;
  uint64_t v8 = sub_1000079A0((uint64_t *)&unk_100459D80);
  uint64_t v135 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v135 + 64);
  __chkstk_darwin(v8);
  NSString v134 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v138 = type metadata accessor for PurchaseCandidate(0LL);
  uint64_t v10 = __chkstk_darwin(v138);
  id v12 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v132 = (uint64_t)&v126 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v126 - v15;
  uint64_t v143 = type metadata accessor for Logger(0LL);
  uint64_t v137 = *(void *)(v143 - 8);
  uint64_t v17 = __chkstk_darwin(v143);
  uint64_t v19 = (char *)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v136 = (char *)&v126 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v126 - v23;
  static Logger.purchase.getter(v22);
  NSString v144 = a3;
  sub_1000649D4((uint64_t)a3, (uint64_t)v16);
  id v145 = a2;
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v145);
  os_log_type_t v26 = static os_log_type_t.default.getter();
  BOOL v27 = os_log_type_enabled(v25, v26);
  uint64_t v133 = v19;
  uint64_t v131 = v12;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc(22LL, -1LL);
    uint64_t v29 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v129 = (void *)swift_slowAlloc(32LL, -1LL);
    aBlock[0] = v129;
    *(_DWORD *)uint64_t v28 = 138412546;
    os_log_t v127 = v25;
    uint64_t v130 = v9;
    id v30 = v145;
    uint64_t v31 = *(void **)&v145[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
    uint64_t v146 = (uint64_t)v31;
    uint64_t v128 = v8;
    id v32 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v28 + 4, v28 + 12);
    *uint64_t v29 = v31;
    uint64_t v33 = v143;

    *(_WORD *)(v28 + 12) = 2082;
    uint64_t v34 = sub_10005A90C();
    unint64_t v36 = v35;
    uint64_t v146 = sub_100088DB4(v34, v35, (uint64_t *)aBlock);
    uint64_t v8 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease(v36);
    sub_100064A18((uint64_t)v16);
    os_log_t v37 = v127;
    os_log_type_t v38 = v26;
    p_info = (__objc2_class_ro **)(&OBJC_METACLASS____TtC9appstored23StoreKitExternalGateway + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v127,  v38,  "[%@][%{public}s] Attempting purchase import",  (uint8_t *)v28,  0x16u);
    uint64_t v40 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v29, 1LL, v40);
    swift_slowDealloc(v29, -1LL, -1LL);
    uint64_t v41 = v129;
    swift_arrayDestroy(v129, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);

    uint64_t v42 = v33;
    uint64_t v9 = v130;
    uint64_t v137 = *(void *)(v137 + 8);
    ((void (*)(char *, uint64_t))v137)(v24, v42);
  }

  else
  {
    id v43 = v145;

    sub_100064A18((uint64_t)v16);
    uint64_t v137 = *(void *)(v137 + 8);
    ((void (*)(char *, uint64_t))v137)(v24, v143);
    p_info = &OBJC_METACLASS____TtC9appstored23StoreKitExternalGateway.info;
  }

  id v44 = [objc_allocWithZone((Class)PurchaseInfo) init];
  [v44 setCoordinator:v139];
  uint64_t v45 = v144;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v44 setExternalID:isa];

  id v139 = *(id *)((char *)&p_info[390]->flags + (void)v145);
  objc_msgSend(v44, "setBatchLogKey:");
  [v44 setLogCode:@"ABY"];
  [v44 setArcade:1];
  unint64_t v47 = v141;
  id v49 = sub_1002CBA1C(v141, v48);
  [v44 setBundleID:v49];

  [v44 setAccount:*v45];
  [v44 setClientType:0];
  id v51 = sub_1002CBA30(v47, v50);
  if (v51)
  {
    os_log_type_t v53 = v51;
    [v44 setItemID:v51];
  }

  id v54 = sub_1002CBA44(v47, v52);
  uint64_t v56 = v142;
  if (v54)
  {
    id v57 = v54;
    [v44 setItemName:v54];
  }

  id v58 = sub_1002CBA08(v47, v55);
  if (v58)
  {
    id v59 = v58;
    [v44 setVendorName:v58];
  }

  id v60 = [objc_allocWithZone(NSNumber) initWithUnsignedChar:1];
  [v44 setMetricsType:v60];

  [v44 setPurchaseType:0];
  [v44 setCoordinatorIntent:1];
  [v44 setCoordinatorImportance:3];
  [v44 setBuyParams:v140];
  uint64_t v61 = objc_opt_self(&OBJC_CLASS___AMSProcessInfo);
  id v62 = sub_1001F4ADC(v61);
  if (!v62) {
    __break(1u);
  }
  os_log_t v63 = v62;
  [v44 setClientInfo:v62];

  [v44 updateGeneratedProperties];
  uint64_t v64 = sub_10020DA60((id *)objc_allocWithZone((Class)&OBJC_CLASS___PurchaseBatch), v44, 0LL);
  id v66 = v134;
  uint64_t v65 = v135;
  (*(void (**)(char *, id *, uint64_t))(v135 + 16))(v134, v56, v8);
  uint64_t v67 = *(unsigned __int8 *)(v65 + 80);
  uint64_t v68 = (v67 + 16) & ~v67;
  uint64_t v69 = swift_allocObject(&unk_1003DF478, v68 + v9, v67 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v69 + v68, v66, v8);
  aBlock[4] = sub_100064B0C;
  uint64_t v149 = v69;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_10004CB98;
  aBlock[3] = &unk_1003DF490;
  uint64_t v70 = (char *)_Block_copy(aBlock);
  swift_release(v149);
  sub_10020EAE8(v64, v70);
  _Block_release(v70);
  uint64_t v71 = sub_1000079A0(&qword_100458EE0);
  uint64_t v72 = swift_allocObject(v71, 40LL, 7LL);
  *(_OWORD *)(v72 + 16) = xmmword_100373960;
  *(void *)(v72 + 32) = v47;
  aBlock[0] = (id)v72;
  specialized Array._endMutation()(v72);
  id v73 = aBlock[0];
  uint64_t v74 = (id *)objc_allocWithZone((Class)&OBJC_CLASS___PurchaseImportTask);
  sub_10001517C(0LL, &qword_100459D90, &off_1003DA128);
  id v75 = v47;
  id v76 = (char *)v44;
  id v77 = v64;
  Class v78 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v73);
  Swift::String v79 = sub_1001CCCA4(v74, v78, v76, v77);

  aBlock[0] = 0LL;
  unsigned int v80 = [v145 runSubTask:v79 returningError:aBlock];
  id v81 = aBlock[0];
  if (v80)
  {
    id v142 = v79;
    static Logger.purchase.getter(aBlock[0]);
    uint64_t v82 = v132;
    sub_1000649D4((uint64_t)v144, v132);
    uint64_t v83 = v145;
    id v84 = (os_log_s *)Logger.logObject.getter(v83);
    os_log_type_t v85 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v84, v85))
    {
      uint64_t v86 = swift_slowAlloc(22LL, -1LL);
      id v87 = (void *)swift_slowAlloc(8LL, -1LL);
      id v88 = (void *)swift_slowAlloc(32LL, -1LL);
      id v141 = v77;
      id v89 = v88;
      aBlock[0] = v88;
      *(_DWORD *)uint64_t v86 = 138412546;
      id v145 = v76;
      id v90 = v139;
      uint64_t v146 = (uint64_t)v139;
      id v91 = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v86 + 4, v86 + 12);
      *id v87 = v90;

      *(_WORD *)(v86 + 12) = 2082;
      uint64_t v92 = v132;
      uint64_t v93 = sub_10005A90C();
      unint64_t v95 = v94;
      uint64_t v146 = sub_100088DB4(v93, v94, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v86 + 14, v86 + 22);
      swift_bridgeObjectRelease(v95);
      sub_100064A18(v92);
      _os_log_impl( (void *)&_mh_execute_header,  v84,  v85,  "[%@][%{public}s] Purchase import succeeded",  (uint8_t *)v86,  0x16u);
      uint64_t v96 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v87, 1LL, v96);
      swift_slowDealloc(v87, -1LL, -1LL);
      swift_arrayDestroy(v89, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1LL, -1LL);
      swift_slowDealloc(v86, -1LL, -1LL);
    }

    else
    {

      sub_100064A18(v82);
    }

    uint64_t v124 = v136;
  }

  else
  {
    id v141 = v77;
    id v97 = aBlock[0];
    uint64_t v98 = _convertNSErrorToError(_:)(v81);

    swift_willThrow(v99);
    aBlock[0] = _swiftEmptyArrayStorage;
    uint64_t v100 = CheckedContinuation.resume(returning:)(aBlock, v8);
    unint64_t v101 = v133;
    static Logger.purchase.getter(v100);
    uint64_t v102 = (uint64_t)v131;
    sub_1000649D4((uint64_t)v144, (uint64_t)v131);
    BOOL v103 = v145;
    swift_errorRetain(v98, v104);
    unint64_t v105 = v103;
    uint64_t v107 = swift_errorRetain(v98, v106);
    id v108 = (os_log_s *)Logger.logObject.getter(v107);
    os_log_type_t v109 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v108, v109))
    {
      uint64_t v110 = swift_slowAlloc(32LL, -1LL);
      id v142 = v79;
      uint64_t v111 = v110;
      uint64_t v112 = swift_slowAlloc(16LL, -1LL);
      os_log_t v140 = v108;
      uint64_t v113 = (void *)v112;
      NSString v144 = (void *)swift_slowAlloc(32LL, -1LL);
      aBlock[0] = v144;
      *(_DWORD *)uint64_t v111 = 138412802;
      id v145 = v76;
      id v114 = v139;
      uint64_t v146 = (uint64_t)v139;
      id v115 = v139;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v111 + 4, v111 + 12);
      void *v113 = v114;

      *(_WORD *)(v111 + 12) = 2082;
      uint64_t v116 = sub_10005A90C();
      unint64_t v118 = v117;
      uint64_t v146 = sub_100088DB4(v116, v117, (uint64_t *)aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v111 + 14, v111 + 22);
      swift_bridgeObjectRelease(v118);
      sub_100064A18(v102);
      *(_WORD *)(v111 + 22) = 2112;
      swift_errorRetain(v98, v119);
      uint64_t v120 = _swift_stdlib_bridgeErrorToNSError(v98);
      uint64_t v146 = v120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, &v147, v111 + 24, v111 + 32);
      v113[1] = v120;
      swift_errorRelease(v98);
      swift_errorRelease(v98);
      os_log_t v121 = v140;
      _os_log_impl( (void *)&_mh_execute_header,  v140,  v109,  "[%@][%{public}s] Failed to purchase import error: %@",  (uint8_t *)v111,  0x20u);
      uint64_t v122 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v113, 2LL, v122);
      swift_slowDealloc(v113, -1LL, -1LL);
      id v123 = v144;
      swift_arrayDestroy(v144, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v123, -1LL, -1LL);
      swift_slowDealloc(v111, -1LL, -1LL);

      swift_errorRelease(v98);
      uint64_t v124 = v133;
    }

    else
    {

      swift_errorRelease(v98);
      sub_100064A18(v102);
      swift_errorRelease(v98);
      swift_errorRelease(v98);

      uint64_t v124 = v101;
    }
  }

  return ((uint64_t (*)(char *, uint64_t))v137)(v124, v143);
}

uint64_t sub_1000608DC(void *a1)
{
  id v1 = [a1 items];
  uint64_t v2 = sub_10001517C(0LL, &qword_100459D40, &OBJC_CLASS___ASDPurchaseResponseItem_ptr);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v1, v2);

  uint64_t v6 = v3;
  uint64_t v4 = sub_1000079A0((uint64_t *)&unk_100459D80);
  return CheckedContinuation.resume(returning:)(&v6, v4);
}

void sub_100060968(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_1000079A0(&qword_100459CF8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = objc_opt_self(&OBJC_CLASS___InteractiveRequestPresenter);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v6);
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = (v10 + 24) & ~v10;
  uint64_t v12 = swift_allocObject(&unk_1003DF3B0, v11 + v8, v10 | 7);
  *(void *)(v12 + 16) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))( v12 + v11,  (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
  aBlock[4] = sub_100064880;
  uint64_t v16 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100060BB4;
  aBlock[3] = &unk_1003DF3C8;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v16;
  swift_retain(a3);
  swift_release(v14);
  sub_100278198(v9, a2, v13);
  _Block_release(v13);
}

void sub_100060AC0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (_BYTE *)(a3 + 16);
  if (a2 && (swift_beginAccess(a3 + 16, &v10, 0LL, 0LL), (*v4 & 1) == 0))
  {
    swift_beginAccess(v4, v13, 1LL, 0LL);
    *uint64_t v4 = 1;
    v12[0] = a2;
    swift_errorRetain(a2, v8);
    uint64_t v9 = sub_1000079A0(&qword_100459CF8);
    CheckedContinuation.resume(throwing:)(v12, v9);
  }

  else
  {
    swift_beginAccess(v4, v13, 0LL, 0LL);
    if ((*v4 & 1) == 0)
    {
      swift_beginAccess(v4, v12, 1LL, 0LL);
      *uint64_t v4 = 1;
      uint64_t v11 = a1;
      id v6 = a1;
      uint64_t v7 = sub_1000079A0(&qword_100459CF8);
      CheckedContinuation.resume(returning:)(&v11, v7);
    }
  }

void sub_100060BB4(uint64_t a1, void *a2, void *a3)
{
  id v6 = *(void (**)(void *, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  swift_retain(v5);
  id v8 = a2;
  id v7 = a3;
  v6(a2, a3);
  swift_release(v5);
}

uint64_t sub_100060D74(void *a1, void *a2, void *a3, void *aBlock, void *a5)
{
  v5[4] = a3;
  v5[5] = a5;
  void v5[2] = a1;
  void v5[3] = a2;
  v5[6] = _Block_copy(aBlock);
  uint64_t v10 = unk_100459CE4;
  uint64_t v16 = (uint64_t (*)(uint64_t))((char *)&dword_100459CE0 + dword_100459CE0);
  id v11 = a1;
  id v12 = a2;
  id v13 = a3;
  a5;
  uint64_t v14 = (void *)swift_task_alloc(v10);
  v5[7] = v14;
  void *v14 = v5;
  v14[1] = sub_100060E20;
  return v16((uint64_t)v11);
}

uint64_t sub_100060E20(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = *(void *)(*v2 + 56);
  id v7 = *(void **)(*v2 + 32);
  id v6 = *(void **)(*v2 + 40);
  uint64_t v9 = *(void **)(*v2 + 16);
  id v8 = *(void **)(*v2 + 24);
  uint64_t v10 = *v2;
  swift_task_dealloc(v5);

  id v11 = *(void (***)(void, void, void))(v10 + 48);
  if (v3)
  {
    id v12 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(void, void, void *))v11)[2](v11, 0LL, v12);

    _Block_release(v11);
  }

  else
  {
    ((void (**)(void, void *, void))v11)[2](v11, a1, 0LL);
    _Block_release(v11);
  }

  return (*(uint64_t (**)(void))(v10 + 8))();
}

uint64_t type metadata accessor for PurchaseArcadeBatchTask()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored23PurchaseArcadeBatchTask);
}

uint64_t sub_100060FF0()
{
  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100061034()
{
  uint64_t v2 = (void *)v0[2];
  uint64_t v3 = (void *)v0[3];
  uint64_t v4 = (void *)v0[4];
  uint64_t v5 = (void *)v0[5];
  id v6 = (void *)v0[6];
  id v7 = (void *)swift_task_alloc(dword_100459CD4);
  *(void *)(v1 + 16) = v7;
  *id v7 = v1;
  v7[1] = sub_100008210;
  return ((uint64_t (*)(void *, void *, void *, void *, void *))((char *)&dword_100459CD0 + dword_100459CD0))( v2,  v3,  v4,  v5,  v6);
}

void *sub_1000610BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3)) {
    goto LABEL_16;
  }
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  if (v5 > 0)
  {
    uint64_t v8 = sub_1000079A0(&qword_100458700);
    uint64_t v9 = (void *)swift_allocObject(v8, 96 * v5 + 32, 7LL);
    size_t v10 = j__malloc_size(v9);
    void v9[2] = v5;
    v9[3] = 2 * ((uint64_t)(v10 - 32) / 96);
    if (v4 != a3) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }

  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v4 == a3)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

void *sub_100061248(unint64_t a1)
{
  uint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      unint64_t v4 = _swiftEmptyArrayStorage;
    }

    else
    {
      uint64_t v3 = sub_1000079A0(&qword_100458EE0);
      unint64_t v4 = (void *)swift_allocObject(v3, 8 * v2 + 32, 7LL);
      int64_t v5 = j__malloc_size(v4);
      uint64_t v6 = v5 - 32;
      if (v5 < 32) {
        uint64_t v6 = v5 - 25;
      }
      void v4[2] = v2;
      void v4[3] = (2 * (v6 >> 3)) | 1;
    }

    swift_bridgeObjectRetain(v1);
    uint64_t v7 = sub_100063440((unint64_t)(v4 + 4), v2, v1);
    uint64_t v1 = v8;
    swift_bridgeObjectRelease(v7);
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    if (v1 < 0) {
      uint64_t v9 = v1;
    }
    else {
      uint64_t v9 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(v1);
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }

  return v4;
}

void *sub_10006133C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v3 = sub_1000079A0(&qword_100459DF8);
  unint64_t v4 = (void *)swift_allocObject(v3, 8 * v1 + 32, 7LL);
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  void v4[2] = v1;
  void v4[3] = 2 * (v6 >> 3);
  uint64_t v7 = sub_100063BC4(&v10, v4 + 4, v1, a1);
  uint64_t v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100017CC0(v8);
  if (v7 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }

  return v4;
}

uint64_t sub_100061420(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_100004DD4( (unint64_t *)&unk_100459E20,  v12,  (uint64_t)&protocol conformance descriptor for Calendar.Component);
  swift_bridgeObjectRetain(v10);
  unint64_t v35 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v31 = v3;
    uint64_t v32 = a1;
    uint64_t v33 = ~v15;
    uint64_t v34 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      uint64_t v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_100004DD4( &qword_100458950,  (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component,  (uint64_t)&protocol conformance descriptor for Calendar.Component);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v35, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v34 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v33;
      uint64_t v17 = v21;
      uint64_t v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease(v21);
        uint64_t v3 = v31;
        a1 = v32;
        uint64_t v26 = v34;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease(v21);
    v25(v35, v6);
    v22(v32, *(void *)(*v31 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease(v10);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v28 = v35;
    v20(v9, v35, v6);
    uint64_t v36 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1000621E8((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    uint64_t v29 = *v3;
    *uint64_t v3 = v36;
    swift_bridgeObjectRelease(v29);
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_10006167C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v24, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    unint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease(a3);
      swift_bridgeObjectRelease(v7);
      uint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease(v7);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v24[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_1000623EC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  uint64_t v23 = *v3;
  *uint64_t v3 = v24[0];
  swift_bridgeObjectRelease(v23);
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_100061828(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:_:)(*(void *)(v6 + 40), a2);
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_100062584(a2, v9, isUniquelyReferenced_nonNull_native);
    uint64_t v14 = *v3;
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease(v14);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(void *)(v10 + 8 * v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v10 + 8 * v9) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_100061920(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1000079A0((uint64_t *)&unk_100459E30);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_39;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  os_log_type_t v39 = (void *)(v7 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  os_log_t v37 = v2;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  uint64_t result = swift_retain(v7);
  int64_t v16 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }

    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v20 >= v38) {
      goto LABEL_35;
    }
    unint64_t v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v21 = v39[v16];
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v21 = v39[v16];
        if (!v21) {
          break;
        }
      }
    }

Swift::Int sub_100061C8C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000079A0(&qword_100459E00);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    char v32 = v2;
    unint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    Swift::Int result = swift_retain(v3);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                uint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *unint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

uint64_t sub_100061F68(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000079A0(&qword_100459D68);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v8 = (uint64_t *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v28 = -1LL << v9;
    BOOL v29 = v2;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64) {
                  bzero((void *)(v3 + 56), 8 * v12);
                }
                else {
                  *uint64_t v8 = v28;
                }
                uint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

uint64_t sub_1000621E8(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  BOOL v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100061920(v12);
  }

  else
  {
    if (v11 > v10)
    {
      sub_1000626A4();
      goto LABEL_12;
    }

    sub_100062C0C(v12);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_100004DD4( (unint64_t *)&unk_100459E20,  (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component,  (uint64_t)&protocol conformance descriptor for Calendar.Component);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_100004DD4( &qword_100458950,  (uint64_t (*)(uint64_t))&type metadata accessor for Calendar.Component,  (uint64_t)&protocol conformance descriptor for Calendar.Component);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1000623EC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_100061C8C(v11);
  }

  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1000628C8();
      goto LABEL_22;
    }

    sub_100062F34(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28);
  String.hash(into:)(v28, v8, a2);
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    uint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

uint64_t sub_100062584(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_100061F68(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_100062A78();
      goto LABEL_14;
    }

    sub_1000631E0(v8);
  }

  uint64_t v9 = *v3;
  uint64_t result = static Hasher._hash(seed:_:)(*(void *)(*v3 + 40), v5);
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(void *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for Int64);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v11 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v13 + 48) + 8 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

    BOOL v29 = *(void *)(v0 + 888);
    uint64_t v30 = *(void *)(v0 + 856);
    uint64_t v31 = *(void *)(v0 + 816);
    char v32 = *(char **)(v0 + 808);
    unint64_t v33 = &v32[*(void *)(v0 + 880)];
    BOOL v34 = &v32[*(void *)(v0 + 872)];
    sub_1000744EC(*(id *)&v32[*(void *)(v0 + 848)]);
    sub_1000744EC(*(id *)&v32[v30]);
    swift_bridgeObjectRelease(*((void *)v34 + 1));
    sub_100074520(*(void *)v33, *((void *)v33 + 1));
    uint64_t v35 = *(void **)&v32[v29];

    swift_deallocPartialClassInstance(v32, v31, 97LL, 7LL);
    uint64_t v36 = 0LL;
LABEL_15:
    swift_task_dealloc(*(void *)(v0 + 840));
    (*(void (**)(id))(v0 + 8))(v36);
    return;
  }

  uint64_t v41 = (void *)v40;
  if (qword_100458058 != -1) {
    swift_once(&qword_100458058, sub_100038A24);
  }
  uint64_t v42 = [v41 iTunesMetadata];
  id v43 = (uint64_t)[v42 storeItemIdentifier];

  if (v43 < 0)
  {
    __break(1u);
  }

  else
  {
    id v44 = (void *)swift_task_alloc(dword_1004593BC);
    *(void *)(v0 + 936) = v44;
    *id v44 = v0;
    v44[1] = sub_1000725C4;
    sub_100039DB0(v43);
  }

      unint64_t v7 = v5;
      return v7 << 16;
    }

    uint64_t v9 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000LL) == 0) {
      uint64_t v9 = a2 & 0xFFFFFFFFFFFFLL;
    }
    if (v5 != v9) {
      return _StringGuts.foreignScalarAlign(_:)();
    }
  }

  return result;
}

    uint64_t v17 = ASDLogHandleForCategory(28LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = 138543618;
      uint64_t v20 = v9;
      uint64_t v21 = 1024;
      char v22 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[FP/%{public}@] Will not attempt fairplay recovery do to launchable fairplayStatus: %d",  (uint8_t *)&v19,  0x12u);
    }

    uint64_t v11 = 0;
    goto LABEL_17;
  }

  uint64_t v11 = 0;
LABEL_18:

  return v11;
}

  return v10;
}
}

      BOOL v15 = v8;
      objc_opt_self(&OBJC_CLASS___AMSProcessInfo);
      uint64_t v16 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, v15, kCFURLPOSIXPathStyle, 0);

      if (!v16)
      {
LABEL_23:

LABEL_24:
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[AMSProcessInfo bundleIdentifier](v4, "bundleIdentifier"));

        if (v24)
        {
          if (v3)
          {
LABEL_26:
            [v3 auditToken];
LABEL_29:
            BOOL v26 = -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", v28, 32LL);
            -[AMSProcessInfo setAuditTokenData:](v4, "setAuditTokenData:", v26);

            goto LABEL_30;
          }
        }

        else
        {
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString lastPathComponent](v8, "lastPathComponent"));
          -[AMSProcessInfo setBundleIdentifier:](v4, "setBundleIdentifier:", v25);

          -[AMSProcessInfo setClientVersion:](v4, "setClientVersion:", @"1.0");
          if (v3) {
            goto LABEL_26;
          }
        }

        memset(v28, 0, 32);
        goto LABEL_29;
      }

      uint64_t v17 = CFBundleCopyInfoDictionaryForURL(v16);
      CFRelease(v16);

      uint64_t v9 = v17;
      if (!v17) {
        goto LABEL_24;
      }
LABEL_16:
      BOOL v18 = (void *)objc_claimAutoreleasedReturnValue(-[__CFURL objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", kCFBundleIdentifierKey));
      uint64_t v20 = objc_opt_class(&OBJC_CLASS___NSString, v19);
      if ((objc_opt_isKindOfClass(v18, v20) & 1) != 0) {
        -[AMSProcessInfo setBundleIdentifier:](v4, "setBundleIdentifier:", v18);
      }
      char v22 = (void *)objc_claimAutoreleasedReturnValue( -[__CFURL objectForKeyedSubscript:]( v9,  "objectForKeyedSubscript:",  _kCFBundleShortVersionStringKey));
      if (!v22) {
        char v22 = (void *)objc_claimAutoreleasedReturnValue(-[__CFURL objectForKeyedSubscript:](v9, "objectForKeyedSubscript:", kCFBundleVersionKey));
      }
      uint64_t v23 = objc_opt_class(&OBJC_CLASS___NSString, v21);
      if ((objc_opt_isKindOfClass(v22, v23) & 1) != 0) {
        -[AMSProcessInfo setClientVersion:](v4, "setClientVersion:", v22);
      }

      goto LABEL_23;
    }
  }

  uint64_t v8 = 0LL;
LABEL_30:

  return v4;
}
          }
        }
      }

      uint64_t v5 = [obj countByEnumeratingWithState:&v26 objects:v32 count:16];
    }

    while (v5);
  }
}

  return a1;
}

        uint64_t v17 = ASDLogHandleForCategory(14LL);
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v18 = *(const __CFString **)(a2 + 152);
          if (!v18) {
            BOOL v18 = @"Universal";
          }
          uint64_t v20 = 138543618;
          uint64_t v21 = v4;
          char v22 = 2114;
          uint64_t v23 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[StoreAsset]: Selected delta for version %{public}@ variant %{public}@",  (uint8_t *)&v20,  0x16u);
        }

        a2 = 1LL;
        goto LABEL_19;
      }

      if (![v7 count]) {
        goto LABEL_14;
      }
      uint64_t v16 = ASDLogHandleForCategory(14LL);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v2_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0;
        uint64_t v13 = "[StoreAsset]: Rejecting delta - installed app is universal";
        uint64_t v14 = v9;
        BOOL v15 = 2;
        goto LABEL_9;
      }
    }

    else
    {
      uint64_t v11 = ASDLogHandleForCategory(14LL);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(__CFString **)(a2 + 136);
        uint64_t v20 = 138543618;
        uint64_t v21 = v12;
        char v22 = 2114;
        uint64_t v23 = v4;
        uint64_t v13 = "[StoreAsset]: Rejecting delta - version %{public}@ does not match installed version %{public}@";
        uint64_t v14 = v9;
        BOOL v15 = 22;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, v13, (uint8_t *)&v20, v15);
      }
    }

  uint64_t v19 = 0LL;
LABEL_22:

LABEL_23:
  return v19;
}
}

    char v22 = [v32 count];
    uint64_t v23 = [obj count];
    if (a4) {
      *a4 = 0LL;
    }
    if (v22 == v23) {
      uint64_t v24 = v32;
    }
    else {
      uint64_t v24 = 0LL;
    }
    uint64_t v25 = v24;

    uint64_t v5 = v27;
  }

  else
  {
    uint64_t v25 = 0LL;
  }

  return v25;
}

void *sub_1000626A4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1000079A0((uint64_t *)&unk_100459E30);
  uint64_t v6 = *v0;
  uint64_t v7 = static _SetStorage.copy(original:)(*v0);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release(v6);
LABEL_30:
    uint64_t *v1 = v8;
    return result;
  }

  uint64_t v25 = v1;
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  unint64_t v11 = (unint64_t)((1LL << *(_BYTE *)(v8 + 32)) + 63) >> 6;
  int64_t v13 = 0LL;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  uint64_t v14 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(v6 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v21 >= v17) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v17) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v10 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v17) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v10 + 8 * v13);
        if (!v22) {
          break;
        }
      }
    }

LABEL_27:
    unint64_t v16 = (v22 - 1) & v22;
    unint64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    unint64_t v20 = *(void *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v20, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))( *(void *)(v8 + 48) + v20,  v5,  v2);
  }

  int64_t v23 = v21 + 3;
  if (v23 >= v17)
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v6);
    uint64_t v1 = v25;
    goto LABEL_30;
  }

  unint64_t v22 = *(void *)(v10 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_27;
  }

  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v10 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v21 - 1) & v21;
    uint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = v17[1];
    unint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  unint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  int64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    uint64_t v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v12 = (v17 - 1) & v17;
    uint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v1sub_100015340(v0 + 5) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }

  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v9 = v18;
    goto LABEL_27;
  }

  while (1)
  {
    uint64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }

    uint64_t v6 = (v15 - 1) & v15;
    int64_t v13 = __clz(__rbit64(v15)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_28:
    unint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v13);
    unint64_t v20 = *v18;
    unint64_t v19 = v18[1];
    sub_100016B10(*(void *)(a1 + 56) + 32 * v13, (uint64_t)v41);
    *(void *)&uint64_t v40 = v20;
    *((void *)&v40 + 1) = v19;
    _OWORD v38[2] = v40;
    v39[0] = v41[0];
    v39[1] = v41[1];
    *(void *)&v38[0] = v20;
    *((void *)&v38[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v30, v38, &type metadata for String, &type metadata for AnyHashable, 7LL);
    sub_100015330(v39, v33);
    BOOL v34 = v30;
    uint64_t v35 = v31;
    uint64_t v36 = v32;
    sub_100015330(v33, v37);
    uint64_t v30 = v34;
    uint64_t v31 = v35;
    char v32 = v36;
    sub_100015330(v37, v38);
    sub_100015330(v38, &v34);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v3[5]);
    int64_t v21 = -1LL << *((_BYTE *)v3 + 32);
    unint64_t v22 = result & ~v21;
    int64_t v23 = v22 >> 6;
    if (((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)]) != 0)
    {
      uint64_t v10 = __clz(__rbit64((-1LL << v22) & ~*(void *)&v7[8 * (v22 >> 6)])) | v22 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v24 = 0;
      uint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }

        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          int64_t v23 = 0LL;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)&v7[8 * v23];
      }

      while (v27 == -1);
      uint64_t v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }

    *(void *)&v7[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8LL] |= 1LL << v10;
    unint64_t v11 = v3[6] + 40 * v10;
    *(_OWORD *)unint64_t v11 = v30;
    *(_OWORD *)(v11 + 16) = v31;
    *(void *)(v11 + 32) = v32;
    uint64_t result = (uint64_t)sub_100015330(&v34, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }

  int64_t v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_100017CC0(a1);
    return (uint64_t)v3;
  }

  uint64_t v15 = *(void *)(v29 + 8 * v17);
  if (v15)
  {
    unint64_t v16 = v9 + 5;
    goto LABEL_27;
  }

  while (1)
  {
    unint64_t v16 = v17 + 1;
    if (__OFADD__(v17, 1LL)) {
      break;
    }
    if (v16 >= v28) {
      goto LABEL_37;
    }
    uint64_t v15 = *(void *)(v29 + 8 * v16);
    ++v17;
    if (v15) {
      goto LABEL_27;
    }
  }

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    uint64_t v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      unint64_t v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

      unint64_t v16 = 2;
      uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v16,  1092LL,  0);
      __break(1u);
      return result;
    }
}

  options = self->_options;
  if (options) {
    (*((void (**)(ASDRepairOptions *, void, void, void))options + 2))(options, 0LL, 0LL, 0LL);
  }
LABEL_29:
}
}

      goto LABEL_28;
    }
  }

  if (v16)
  {
    int64_t v23 = ASDLogHandleForCategory(2LL);
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = sub_10021B614(v6);
      BOOL v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      int64_t v38 = 138412290;
      os_log_type_t v39 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[%@] Resuming installation paused for policy",  (uint8_t *)&v38,  0xCu);
    }

    -[SQLiteEntity setValue:forProperty:](v6, "setValue:forProperty:", &off_10040C898, @"phase");
    uint64_t v27 = sub_1001E2734(v6, (uint64_t)@"coordinator_id");
    unint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (v20)
    {
      uint64_t v28 = sub_1001E26D0(v6, (uint64_t)@"bundle_id");
      BOOL v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      uint64_t v30 = sub_1001E4E80((uint64_t)&OBJC_CLASS___lib_IXAppInstallCoordinatorTag, v20, v29);
      char v32 = (void *)objc_claimAutoreleasedReturnValue(v30);
      Property = *(id *)(a1 + 32);
      if (Property) {
        Property = objc_getProperty(Property, v31, 24LL, 1);
      }
      BOOL v34 = Property;
      sub_1001EBED8((uint64_t)v34, v32);
    }

    else
    {
      uint64_t v35 = ASDLogHandleForCategory(2LL);
      BOOL v29 = (void *)objc_claimAutoreleasedReturnValue(v35);
      if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_ERROR))
      {
        uint64_t v36 = sub_10021B614(v6);
        os_log_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
        int64_t v38 = 138412290;
        os_log_type_t v39 = v37;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v29,  OS_LOG_TYPE_ERROR,  "[%@] Unable to resume coordinator, no identifier was recorded",  (uint8_t *)&v38,  0xCu);
      }
    }

    goto LABEL_27;
  }

      unint64_t v33 = *(void *)(a1 + 56);
      BOOL v34 = [v20 copy];
      (*(void (**)(uint64_t, id, uint64_t))(v33 + 16))(v33, v34, v54[5]);

      goto LABEL_32;
    }
  }

  else
  {

    objc_storeStrong(&v58, obj);
  }

  uint64_t v35 = ASDLogHandleForCategory(15LL);
  uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    os_log_t v37 = *(void **)(a1 + 48);
    int64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v37 processInfo]);
    os_log_type_t v39 = (id)objc_claimAutoreleasedReturnValue([v38 bundleIdentifier]);
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) predicateFormat]);
    uint64_t v41 = v54[5];
    *(_DWORD *)buf = 138544130;
    uint64_t v61 = v37;
    id v62 = 2114;
    os_log_t v63 = v39;
    uint64_t v64 = 2114;
    uint64_t v65 = v40;
    id v66 = 2114;
    uint64_t v67 = v41;
    _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "%{public}@ Query failed for %{public}@: %{public}@ error: %{public}@",  buf,  0x2Au);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
LABEL_32:
  _Block_object_dispose(&v53, 8);
}

      uint64_t v45 = v23;
      if (!v25) {
        goto LABEL_35;
      }
LABEL_36:
      if (v39 == (id)++v41)
      {
        id v49 = [v37 countByEnumeratingWithState:&v65 objects:v70 count:16];
        os_log_type_t v39 = v49;
        if (!v49) {
          goto LABEL_41;
        }
        goto LABEL_17;
      }
    }
  }

  uint64_t v24 = ASDLogHandleForCategory(14LL);
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    uint64_t v27 = (void *)objc_opt_class(a1, v26);
    *(_DWORD *)buf = 138544130;
    uint64_t v72 = v27;
    id v73 = 2114;
    uint64_t v74 = v7;
    id v75 = 2114;
    id v76 = v23;
    id v77 = 1024;
    Class v78 = a2;
    uint64_t v28 = v27;
    _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] Family circle request resulted in error: [%{public}@] isBackground: %{BOOL}d",  buf,  0x26u);
  }

LABEL_32:
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

      unint64_t v11 = (char *)v11 + 1;
    }

    while (v9 != v11);
    id v49 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v67,  v79,  16LL);
    uint64_t v9 = v49;
  }

  while (v49);
LABEL_36:

  uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  id v51 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v50, "ams_activeiTunesAccount"));

  if (v51
    && (uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "ams_DSID")), v52, v52)
    && (os_log_type_t v53 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "ams_DSID")),
        id v54 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:v53]),
        v53,
        v54))
  {
    uint64_t v55 = ASDLogHandleForCategory(3LL);
    uint64_t v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
    {
      os_log_t v63 = objc_getProperty(v54, v57, 8LL, 1);
      uint64_t v64 = sub_1001A4800(v63);
      uint64_t v65 = (AccountActiveTime *)objc_claimAutoreleasedReturnValue(v64);
      *(_DWORD *)buf = 138543362;
      uint64_t v74 = v65;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEBUG,  "[AccountEventTimeline] Setting current time as the end time for last active account: %{public}@",  buf,  0xCu);
    }

    id v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v58 timeIntervalSinceReferenceDate];
    v54[3] = v59;
    -[NSMutableArray addObject:](v1, "addObject:", v54);
  }

  else
  {
    id v60 = ASDLogHandleForCategory(3LL);
    id v54 = (void *)objc_claimAutoreleasedReturnValue(v60);
    if (os_log_type_enabled((os_log_t)v54, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v54,  OS_LOG_TYPE_DEBUG,  "[AccountEventTimeline] Skipping final event where which did not have a matching starting event",  buf,  2u);
    }
  }

  uint64_t v61 = -[NSMutableArray copy](v1, "copy");
  return v61;
}

      uint64_t v6 = v42;
      uint64_t v5 = v43;
    }
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  return v10;
}

  objc_setProperty_atomic_copy(self, v21, v22, 32LL);
  LOBYTE(self->super._keepAlive) = v23;
  -[Task lock](self, "lock");
  os_log_type_t v53 = -[NSError copy](self->super._error, "copy");
  -[Task unlock](self, "unlock");
  id v54 = (void (**)(id, BOOL, id))objc_retainBlock(v53);

  if (v54)
  {
    v54[2](v54, v23, v22);
    sub_1002305A8(self, 0LL);
  }
}

  return a1;
}

  [v18 setStatus:v15];
  [v18 setExtensions:sub_100325A60(v4)];
  if ([v18 isInstalled])
  {
    int64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v4 URL]);
    os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 path]);
    [v18 setBundlePath:v39];

    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v4 executableURL]);
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 path]);
    [v18 setExecutablePath:v41];
  }

  else
  {
    uint64_t v42 = *(void **)(a1 + 32);
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
    id v43 = sub_1002B19FC(v42, v40);
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(v43);
    [v18 setRemoteProgress:v41];
  }

  id v44 = (void *)objc_claimAutoreleasedReturnValue([v4 shortVersionString]);
  [v18 setBundleShortVersion:v44];

  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v4 exactBundleVersion]);
  [v18 setBundleVersion:v45];

  unint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v20 artistName]);
  [v18 setArtistName:v46];

  if ([v20 storeFront])
  {
    unint64_t v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v20 storeFront]));
    [v18 setStoreFront:v47];
  }

  else
  {
    [v18 setStoreFront:0];
  }

LABEL_39:
  return v18;
}

  uint64_t v52 = [v13 copy];

LABEL_33:
  return v52;
}

void *sub_1000628C8()
{
  uint64_t v1 = v0;
  sub_1000079A0(&qword_100459E00);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

LABEL_30:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

    __break(1u);
    goto LABEL_31;
  }

  uint64_t v10 = 0LL;
  uint64_t v8 = 0LL;
  int64_t v9 = a3[1];
LABEL_6:
  uint64_t v11 = v5 < v7;
  unint64_t v12 = v8 != 0;
  int64_t v13 = v11 && v12;
  if (v11 && v12) {
    unint64_t v14 = v10;
  }
  else {
    unint64_t v14 = 0LL;
  }
  if (v11 && v12) {
    unint64_t v15 = v8;
  }
  else {
    unint64_t v15 = 0LL;
  }
  if (v9 < 1)
  {
    int64_t v9 = 0LL;
    goto LABEL_20;
  }

  if (!a4)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }

  uint64_t v16 = &a4[40 * v4];
  if (v16 != __dst || &v16[40 * v9] <= __dst) {
    memmove(__dst, v16, 40 * v9);
  }
LABEL_20:
  if (!v13 || v15 <= 0) {
    return;
  }
  if (!v14)
  {
LABEL_32:
    __break(1u);
    return;
  }

  uint64_t v18 = &__dst[40 * v9];
  if (v18 != v14 || v18 >= &v14[40 * v15]) {
    memmove(v18, v14, 40 * v15);
  }
}

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  uint64_t v42 = *(id *)(*(void *)(a1 + 40) + 8LL);
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 8LL), v10);
  id v43 = *(void *)(a1 + 40);
  id v44 = *(void **)(v43 + 40);
  v75[0] = _NSConcreteStackBlock;
  v75[1] = 3221225472LL;
  v75[2] = sub_1001EE19C;
  void v75[3] = &unk_1003E9880;
  v75[4] = v43;
  sub_1002C11C4(v44, v75);
  uint64_t v45 = ASDLogHandleForCategory(14LL);
  unint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    os_log_t v48 = p_info;
    id v49 = (void *)objc_opt_class(*(void *)(a1 + 40), v47);
    uint64_t v50 = v49;
    id v51 = (void *)objc_claimAutoreleasedReturnValue([(id)v25 hashedDescription]);
    *(_DWORD *)buf = 138543618;
    *(void *)&buf[4] = v49;
    p_info = v48;
    *(_WORD *)&buf[12] = 2114;
    *(void *)&buf[14] = v51;
    _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Posting notification after active iTunes account changed: %{public}@",  buf,  0x16u);
  }

  uint64_t v52 = *(void **)(a1 + 40);
  os_log_type_t v53 = v42;
  id v54 = v52;
  objc_opt_self(p_info + 86);
  global_queue = dispatch_get_global_queue(21LL, 0LL);
  uint64_t v56 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  *(void *)buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&buf[16] = sub_1001EE3C4;
  id v77 = &unk_1003E9DC0;
  Class v78 = v53;
  Swift::String v79 = v54;
  id v57 = v54;
  uint64_t v28 = (os_log_s *)v53;
  dispatch_async(v56, buf);

LABEL_33:
}

  if ((uint64_t)v64 > 0)
  {
    if (v31)
    {
      if (v64 == (char *)2 && v30)
      {
        int64_t v38 = ASDLocalizedString(@"REVOKED_MESSAGE_SPECIFIC_PAIR");
        os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
        os_log_t v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSString localizedStringWithFormat:]( &OBJC_CLASS___NSString,  "localizedStringWithFormat:",  v39,  v31,  v30));
      }

      else
      {
        uint64_t v41 = ASDLocalizedString(@"REVOKED_MESSAGE_SPECIFIC_PLURAL");
        os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue(v41);
        os_log_t v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSString localizedStringWithFormat:]( &OBJC_CLASS___NSString,  "localizedStringWithFormat:",  v39,  v64 - 1,  v31));
      }

      goto LABEL_38;
    }

      os_log_t v37 = ASDLogHandleForCategory(25LL);
      int64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue([v11 logKey]);
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v11 bundleID]);
        *(_DWORD *)buf = 138412546;
        os_log_t v127 = v39;
        uint64_t v128 = 2114;
        uint64_t v129 = v40;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "[%@][%{public}@] No installed app found. Defaulting coordinator intent to IXCoordinatorIntentInitiating",  buf,  0x16u);
      }

      [v11 setCoordinatorIntent:1];
      uint64_t v41 = 0LL;
      goto LABEL_83;
    }

      BOOL v26 = 0LL;
      goto LABEL_31;
    }

    unint64_t v12 = v9;
    objc_opt_self(v8);
    uint64_t v35 = 0LL;
    cf[0] = 0LL;
    int64_t v13 = _CFPropertyListCreateFiltered( kCFAllocatorDefault,  v12,  0LL,  +[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", @"NSBundleResourceRequestTags"),  cf,  &v35);

    if ((v13 & 1) != 0)
    {
      unint64_t v14 = CFGetTypeID(cf[0]);
      if (v14 == CFDictionaryGetTypeID())
      {
        unint64_t v15 = (void *)cf[0];
        uint64_t v16 = v11;
        goto LABEL_16;
      }

      unint64_t v33 = NSDebugDescriptionErrorKey;
      BOOL v34 = @"Manifest is not a dictionary";
      unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
    }

    else if (v35)
    {
      unint64_t v33 = NSUnderlyingErrorKey;
      BOOL v34 = (const __CFString *)v35;
      unint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v34,  &v33,  1LL));
      CFRelease(v35);
    }

    else
    {
      unint64_t v19 = 0LL;
    }

    uint64_t v16 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  _NSBundleResourceRequestErrorDomain,  101LL,  v19));

    unint64_t v15 = 0LL;
LABEL_16:
    int64_t v20 = v16;

    if (v15)
    {
      uint64_t v18 = v15;
      objc_opt_self(v8);
      unint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      int64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v18 objectForKeyedSubscript:@"NSBundleResourceRequestTags"]);

      if (v22)
      {
        cf[0] = _NSConcreteStackBlock;
        cf[1] = (CFTypeRef)3221225472LL;
        cf[2] = sub_1002EEB18;
        cf[3] = &unk_1003F2408;
        int64_t v23 = v21;
        os_log_t v37 = v23;
        [v22 enumerateKeysAndObjectsUsingBlock:cf];

        int64_t v17 = [v23 copy];
      }

      else
      {
        uint64_t v35 = NSDebugDescriptionErrorKey;
        cf[0] = @"Manifest has no tags";
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  cf,  &v35,  1LL));
        if (a3) {
          *a3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  _NSBundleResourceRequestErrorDomain,  101LL,  v25));
        }

        int64_t v17 = 0LL;
      }
    }

    else
    {
      uint64_t v35 = NSUnderlyingErrorKey;
      cf[0] = v20;
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  cf,  &v35,  1LL));
      if (a3) {
        *a3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  _NSBundleResourceRequestErrorDomain,  101LL,  v24));
      }

      uint64_t v18 = 0LL;
      int64_t v17 = 0LL;
    }

    goto LABEL_26;
  }

void *sub_100062A78()
{
  uint64_t v1 = v0;
  sub_1000079A0(&qword_100459D68);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    uint64_t *v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_100062C0C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_1000079A0((uint64_t *)&unk_100459E30);
  uint64_t v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0LL);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release(v8);
LABEL_37:
    *uint64_t v2 = v10;
    return result;
  }

  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 56);
  uint64_t v35 = v2;
  uint64_t v36 = v8 + 56;
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v37 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 56;
  uint64_t result = swift_retain(v8);
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v19 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v20 = v19 | (v17 << 6);
      goto LABEL_26;
    }

    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v21 >= v37) {
      goto LABEL_35;
    }
    unint64_t v22 = *(void *)(v36 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v37) {
        goto LABEL_35;
      }
      unint64_t v22 = *(void *)(v36 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v37) {
          goto LABEL_35;
        }
        unint64_t v22 = *(void *)(v36 + 8 * v17);
        if (!v22) {
          break;
        }
      }
    }

LABEL_39:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_40:
    goto LABEL_41;
  }

  uint64_t v5 = ASDLogHandleForCategory(26LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    uint64_t v52 = self->_token;
    *(_DWORD *)buf = 138412290;
    *(void *)&buf[4] = v52;
    _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "[%@] Skipping push register since there is no account.",  buf,  0xCu);
  }

  objc_opt_self(&OBJC_CLASS___NSError);
  unint64_t v7 = ASDErrorWithDescription(ASDErrorDomain, 1103LL, @"No account found.");
  uint64_t v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  -[Task completeWithError:](self, "completeWithError:", v8);
LABEL_41:
}
}

Swift::Int sub_100062F34(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000079A0(&qword_100459E00);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  unint64_t v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  Swift::Int result = swift_retain(v3);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  static Logger.updates.getter([v10 setExpectedSoftwarePlatform:1]);
  uint64_t v69 = v2;
  uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
  uint64_t v71 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v72 = swift_slowAlloc(22LL, -1LL);
    os_log_type_t v85 = v3;
    uint64_t v3 = v72;
    id v73 = swift_slowAlloc(32LL, -1LL);
    v91[0] = v73;
    *(_DWORD *)uint64_t v3 = 136446466;
    uint64_t v74 = sub_100071244();
    id v76 = v75;
    *(void *)&v90[0] = sub_100088DB4(v74, v75, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v90, (char *)v90 + 8, v3 + 4, v3 + 12);

    swift_bridgeObjectRelease(v76);
    *(_WORD *)(v3 + 12) = 2050;

    *(void *)&v90[0] = 1LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v90, (char *)v90 + 8, v3 + 14, v3 + 22);

    _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "(UpdateMemoryEntity) %{public}s expectedSoftwarePlatform=%{public}ld",  (uint8_t *)v3,  0x16u);
    swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1LL, -1LL);
    id v77 = v3;
    LOBYTE(v3) = v85;
    swift_slowDealloc(v77, -1LL, -1LL);

    (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v89, v88);
  }

  else
  {

    (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v54, v88);
  }

  Class v78 = v86;
  if ([v10 expectedSoftwarePlatform] != (id)2)
  {
    [v10 setCoordinatorIntent:2];
    if ((v3 & 1) != 0) {
      Swift::String v79 = 2LL;
    }
    else {
      Swift::String v79 = 1LL;
    }
    [v10 setCoordinatorImportance:v79];
  }

  [v10 updateGeneratedProperties];
  if (v78)
  {
    unsigned int v80 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
    id v81 = [objc_allocWithZone(NSNumber) initWithUnsignedLongLong:v78];
    uint64_t v82 = objc_msgSend(v80, "ams_iTunesAccountWithDSID:", v81);

    if (v82)
    {
      [v10 setAccount:v82];
    }
  }

  return v10;
}

uint64_t sub_1000631E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_1000079A0(&qword_100459D68);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  unint64_t v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_100063440(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100064C0C(&qword_100459E18, &qword_100459E08);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_1000079A0(&qword_100459E08);
          uint64_t v13 = sub_10007B3CC(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_100063654(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100064C0C((unint64_t *)&unk_100459DB0, &qword_100459DA8);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_1000079A0(&qword_100459DA8);
          uint64_t v13 = sub_10007B424(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_100063868(unint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a3 >> 62;
  if ((unint64_t)a3 >> 62)
  {
    if (a3 < 0) {
      uint64_t v16 = a3;
    }
    else {
      uint64_t v16 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a3);
    if (!v7) {
      return a3;
    }
  }

  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (!v7) {
      return a3;
    }
  }

  if (!a1) {
    goto LABEL_25;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8LL;
  if (v6)
  {
    if (a3 < 0) {
      uint64_t v10 = a3;
    }
    else {
      uint64_t v10 = a3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a3);
    uint64_t v11 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(a3);
    if (v11 <= a2)
    {
      if (v7 >= 1)
      {
        sub_100064C0C(&qword_100459D78, &qword_100459D70);
        swift_bridgeObjectRetain(a3);
        for (unint64_t i = 0LL; i != v7; ++i)
        {
          sub_1000079A0(&qword_100459D70);
          uint64_t v13 = sub_10007B424(v18, i, a3);
          id v15 = *v14;
          ((void (*)(void (**)(id *), void))v13)(v18, 0LL);
          *(void *)(a1 + 8 * i) = v15;
        }

        swift_bridgeObjectRelease(a3);
        return a3;
      }

      goto LABEL_24;
    }

uint64_t sub_100063A7C( uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, id *), uint64_t a6)
{
  if (a2)
  {
    uint64_t v11 = a3;
    if (a3)
    {
      if (a3 < 0) {
        goto LABEL_18;
      }
      uint64_t v6 = a2;
      if ((unint64_t)a4 >> 62)
      {
LABEL_19:
        if (a4 < 0) {
          uint64_t v17 = a4;
        }
        else {
          uint64_t v17 = a4 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(a4);
        uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v17);
        swift_bridgeObjectRelease(a4);
        if (v12) {
          goto LABEL_6;
        }
      }

      else
      {
        uint64_t v12 = *(void *)((a4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
        if (v12)
        {
LABEL_6:
          unint64_t v13 = 0LL;
          uint64_t v18 = v11--;
          do
          {
            if ((a4 & 0xC000000000000001LL) != 0)
            {
              id v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v13, a4);
            }

            else
            {
              if (v13 >= *(void *)((a4 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
              {
                __break(1u);
LABEL_18:
                __break(1u);
                goto LABEL_19;
              }

              id v14 = *(id *)(a4 + 8 * v13 + 32);
            }

            id v15 = v14;
            id v20 = v14;
            a5(&v19, &v20);

            *(void *)(v6 + 8 * v13) = v19;
            if (v11 == v13)
            {
              uint64_t v11 = v18;
              goto LABEL_16;
            }

            ++v13;
          }

          while (v12 != v13);
        }
      }

      uint64_t v11 = v12;
    }
  }

  else
  {
    uint64_t v11 = 0LL;
  }

void *sub_100063BC4(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1LL;
  uint64_t v6 = -1LL << *(_BYTE *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0LL;
    a3 = 0LL;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }

  if (!a3)
  {
    int64_t v8 = 0LL;
    goto LABEL_35;
  }

  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v8 = 0LL;
  uint64_t v9 = 0LL;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }

  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    goto LABEL_37;
  }

  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2LL;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }

  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }

  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0LL;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0LL;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }

  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1LL)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0LL;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }

    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }

LABEL_38:
  __break(1u);
  return result;
}

    int64_t v10 = 0;
    goto LABEL_39;
  }

  if (a1 != 45)
  {
    int64_t v8 = (a1 - 48);
    uint64_t v18 = v4 - 1;
    if (v18)
    {
      id v20 = (unsigned __int8 *)v23 + 1;
      while (1)
      {
        uint64_t v21 = *v20 - 48;
        if (v21 > 9) {
          goto LABEL_36;
        }
        if (!is_mul_ok(v8, 0xAuLL)) {
          goto LABEL_36;
        }
        unint64_t v14 = __CFADD__(10 * v8, v21);
        int64_t v8 = 10 * v8 + v21;
        if (v14) {
          goto LABEL_36;
        }
        int64_t v10 = 0;
        ++v20;
        if (!--v18) {
          goto LABEL_39;
        }
      }
    }

    goto LABEL_38;
  }

  if (v4)
  {
    if (v4 != 1 && (BYTE1(a1) - 48) <= 9u)
    {
      uint64_t v2 = 0LL;
      int64_t v8 = -(uint64_t)(BYTE1(a1) - 48);
      if (BYTE1(a1) == 48)
      {
        unint64_t v11 = v4 - 2;
        if (v11)
        {
          unint64_t v12 = (unsigned __int8 *)v23 + 2;
          while (1)
          {
            int64_t v13 = *v12 - 48;
            if (v13 > 9) {
              goto LABEL_36;
            }
            if (!is_mul_ok(v8, 0xAuLL)) {
              goto LABEL_36;
            }
            unint64_t v14 = 10 * v8 >= v13;
            int64_t v8 = 10 * v8 - v13;
            if (!v14) {
              goto LABEL_36;
            }
            int64_t v10 = 0;
            ++v12;
            if (!--v11) {
              goto LABEL_39;
            }
          }
        }

        goto LABEL_38;
      }

      goto LABEL_53;
    }

          PBReaderRecallMark(a3, v30);

LABEL_66:
          if (*(void *)((char *)a3 + OBJC_IVAR___PBDataReader__pos) >= *(void *)((char *)a3
                                                                                    + OBJC_IVAR___PBDataReader__length))
            goto LABEL_67;
          break;
        case 6u:
          id v20 = 0;
          uint64_t v21 = 0;
          int64_t v15 = 0LL;
          *(_BYTE *)&self->_has |= 4u;
          while (2)
          {
            unint64_t v22 = *(void *)((char *)a3 + OBJC_IVAR___PBDataReader__pos);
            if (v22 == -1LL || v22 >= *(void *)((char *)a3 + OBJC_IVAR___PBDataReader__length))
            {
              *((_BYTE *)a3 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              unint64_t v23 = *(_BYTE *)(*(void *)((char *)a3 + OBJC_IVAR___PBDataReader__bytes) + v22);
              *(void *)((char *)a3 + OBJC_IVAR___PBDataReader__pos) = v22 + 1;
              v15 |= (unint64_t)(v23 & 0x7F) << v20;
              if (v23 < 0)
              {
                v20 += 7;
                int64_t v10 = v21++ >= 9;
                if (v10)
                {
                  int64_t v15 = 0LL;
                  goto LABEL_60;
                }

                continue;
              }
            }

            break;
          }

          if (*((_BYTE *)a3 + OBJC_IVAR___PBDataReader__error)) {
            int64_t v15 = 0LL;
          }
LABEL_60:
          unint64_t v28 = 24LL;
          goto LABEL_65;
        case 7u:
          char v24 = 0;
          unint64_t v25 = 0;
          int64_t v15 = 0LL;
          *(_BYTE *)&self->_has |= 1u;
          while (2)
          {
            BOOL v26 = *(void *)((char *)a3 + OBJC_IVAR___PBDataReader__pos);
            if (v26 == -1LL || v26 >= *(void *)((char *)a3 + OBJC_IVAR___PBDataReader__length))
            {
              *((_BYTE *)a3 + OBJC_IVAR___PBDataReader__error) = 1;
            }

            else
            {
              uint64_t v27 = *(_BYTE *)(*(void *)((char *)a3 + OBJC_IVAR___PBDataReader__bytes) + v26);
              *(void *)((char *)a3 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
              v15 |= (unint64_t)(v27 & 0x7F) << v24;
              if (v27 < 0)
              {
                v24 += 7;
                int64_t v10 = v25++ >= 9;
                if (v10)
                {
                  int64_t v15 = 0LL;
                  goto LABEL_64;
                }

                continue;
              }
            }

            break;
          }

          if (*((_BYTE *)a3 + OBJC_IVAR___PBDataReader__error)) {
            int64_t v15 = 0LL;
          }
LABEL_64:
          unint64_t v28 = 8LL;
LABEL_65:
          *(void *)&self->PBRequest_opaque[v28] = v15;
          goto LABEL_66;
        default:
          uint64_t v18 = PBReaderSkipValueWithTag(a3);
          if (!v18) {
            return v18;
          }
          goto LABEL_66;
      }
    }
  }

uint64_t sub_100063D58(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 0LL;
    return __clz(__rbit64(v1)) + v2;
  }

  char v5 = *(_BYTE *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1LL << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 64LL;
    return __clz(__rbit64(v1)) + v2;
  }

  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2) {
    unint64_t v7 = 2LL;
  }
  unint64_t v8 = v7 - 2;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 64LL;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64LL;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }

  return v3;
}

void sub_100063DE0(uint64_t a1, void (*a2)(uint64_t, uint64_t, _BYTE *, __n128))
{
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }

    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_25;
    }

    if (v15 >= v7) {
      goto LABEL_23;
    }
    unint64_t v16 = *(void *)(v20 + 8 * v15);
    ++v8;
    if (!v16)
    {
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v16 = *(void *)(v20 + 8 * v8);
      if (!v16)
      {
        int64_t v8 = v15 + 2;
        if (v15 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v16 = *(void *)(v20 + 8 * v8);
        if (!v16)
        {
          int64_t v8 = v15 + 3;
          if (v15 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v16 = *(void *)(v20 + 8 * v8);
          if (!v16) {
            break;
          }
        }
      }
    }

id sub_100063FA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v5, a2);
  swift_bridgeObjectRelease(a2);
  *(void *)&v5[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_purchaseResponse] = 0LL;
  uint64_t v12 = v5;
  uint64_t v13 = swift_bridgeObjectRetain(a1);
  __n128 v14 = sub_10006133C(v13);
  swift_bridgeObjectRelease(a1);
  *(void *)&v12[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_itemIDs] = v14;
  *(void *)&v12[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_itemMetadata] = a1;
  int64_t v15 = &v12[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_client];
  *(void *)int64_t v15 = a3;
  *((void *)v15 + 1) = a4;
  *(void *)&v12[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey] = a5;
  *(void *)&v12[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_additionalBuyParams] = 0LL;
  id v16 = a5;

  v18.receiver = v12;
  v18.super_class = ObjectType;
  return objc_msgSendSuper2(&v18, "init");
}

uint64_t sub_10006408C(uint64_t a1)
{
  uint64_t v2 = sub_1000079A0(&qword_100459DF0);
  uint64_t v3 = swift_allocObject(v2, 56LL, 7LL);
  *(_OWORD *)(v3 + 16) = xmmword_100372E80;
  *(_OWORD *)(v3 + 32) = xmmword_100373500;
  *(void *)(v3 + 48) = -40LL;
  uint64_t v4 = sub_1000079A0(&qword_100458EE0);
  uint64_t v5 = swift_allocObject(v4, 48LL, 7LL);
  *(_OWORD *)(v5 + 16) = xmmword_100373510;
  static String._unconditionallyBridgeFromObjectiveC(_:)(@"item_id");
  uint64_t v7 = v6;
  id v8 = [objc_allocWithZone(NSNumber) initWithLongLong:a1];
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  unint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___SQLiteComparisonPredicate);
  id v11 = v8;
  id v12 = [v10 predicateWithProperty:v9 value:v11 comparisonType:1];

  *(void *)(v5 + 32) = v12;
  uint64_t v13 = (void *)objc_opt_self(&OBJC_CLASS___SQLiteContainsPredicate);
  __n128 v14 = @"IFNULL(app_install.phase, 10)";
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v3);
  id v16 = [v13 doesNotContainPredicateWithProperty:v14 values:isa];

  *(void *)(v5 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v16;
  specialized Array._endMutation()(v17);
  return v5;
}

uint64_t sub_100064240(uint64_t a1)
{
  uint64_t v1 = sub_10006408C(a1);
  uint64_t v2 = sub_100055EF4(v1);
  swift_bridgeObjectRelease(v1);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v2);
  id v4 = [(id)objc_opt_self(SQLiteCompoundPredicate) predicateMatchingAllPredicates:isa];

  uint64_t v5 = sub_1000079A0(&qword_100459530);
  uint64_t v6 = swift_allocObject(v5, 64LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_100373A90;
  *(void *)(v6 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"item_id");
  *(void *)(v6 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v7;
  *(void *)(v6 + 48) = static String._unconditionallyBridgeFromObjectiveC(_:)(@"bundle_id");
  *(void *)(v6 + 56) = v8;
  v21[0] = 0LL;
  v21[1] = 0LL;
  unsigned __int8 v20 = 0;
  uint64_t v9 = objc_opt_self(&OBJC_CLASS___AppInstallsDatabaseStore);
  id v10 = sub_1002EEBC0(v9);
  id v11 = (void *)swift_allocObject(&unk_1003DF4F8, 48LL, 7LL);
  v11[2] = v4;
  v11[3] = v6;
  v11[4] = v21;
  v11[5] = &v20;
  uint64_t v12 = swift_allocObject(&unk_1003DF520, 32LL, 7LL);
  *(void *)(v12 + 16) = sub_100064BC8;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = sub_1000152F8;
  uint64_t v19 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_10000CF5C;
  aBlock[3] = &unk_1003DF538;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v19;
  id v15 = v4;
  swift_retain(v12);
  swift_release(v14);
  [v10 readUsingSession:v13];

  _Block_release(v13);
  LOBYTE(v1sub_100015340(v0 + 5) = swift_isEscapingClosureAtFileLocation(v12, "", 99LL, 366LL, 55LL, 1LL);
  uint64_t result = swift_release(v12);
  if ((v15 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v17 = v20;
    swift_release(v11);
    return v17;
  }

  return result;
}

uint64_t sub_100064468(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for Logger(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000644C8, 0LL, 0LL);
}

uint64_t sub_1000644C8()
{
  uint64_t v1 = (void *)v0[5];
  static Logger.purchase.getter();
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (char *)v0[5];
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    id v16 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    uint64_t v6 = *(void **)&v4[OBJC_IVAR____TtC9appstored23PurchaseArcadeBatchTask_logKey];
    v0[3] = v6;
    id v7 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v5 + 4, v5 + 12);
    *id v16 = v6;

    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "[%@] Attempting interactive authentication for batch purchase",  v5,  0xCu);
    uint64_t v8 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v16, 1LL, v8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    uint64_t v9 = (void *)v0[5];
  }

  uint64_t v10 = v0[4];
  (*(void (**)(void, void))(v0[7] + 8LL))(v0[8], v0[6]);
  uint64_t v11 = swift_allocObject(&unk_1003DF388, 17LL, 7LL);
  v0[9] = v11;
  *(_BYTE *)(v11 + 16) = 0;
  uint64_t v12 = swift_task_alloc(32LL);
  v0[10] = v12;
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  uint64_t v13 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[11] = v13;
  uint64_t v14 = sub_1000079A0((uint64_t *)&unk_100459CE8);
  *uint64_t v13 = v0;
  v13[1] = sub_1000646EC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000021LL,  0x8000000100344CF0LL,  sub_100064800,  v12,  v14);
}

uint64_t sub_1000646EC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1000647A8;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 80));
    uint64_t v4 = sub_100064758;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100064758()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 64);
    swift_release(*(void *)(v0 + 72));
    swift_task_dealloc(v2);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000647A8()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 64);
  swift_release(*(void *)(v0 + 72));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000647F0()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

void sub_100064800(uint64_t a1)
{
}

uint64_t sub_100064808()
{
  uint64_t v1 = sub_1000079A0(&qword_100459CF8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100064880(void *a1, uint64_t a2)
{
}

uint64_t sub_1000648D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000648E4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000648EC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100064918()
{
  uint64_t v2 = *(const void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_100459D04);
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100007C40;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_100459D00 + dword_100459D00))(v2, v3);
}

uint64_t type metadata accessor for PurchaseCandidate(uint64_t a1)
{
  uint64_t result = qword_100459E98;
  if (!qword_100459E98) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PurchaseCandidate);
  }
  return result;
}

uint64_t sub_1000649C0(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_1000649D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PurchaseCandidate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100064A18(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PurchaseCandidate(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_100064A54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PurchaseCandidate(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100064A98(id *a1)
{
  return sub_10005FBFC( a1,  *(void **)(v1 + 16),  *(void **)(v1 + 24),  *(void **)(v1 + 32),  *(id **)(v1 + 40),  *(os_log_s **)(v1 + 48));
}

uint64_t sub_100064AA8()
{
  uint64_t v1 = sub_1000079A0((uint64_t *)&unk_100459D80);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100064B0C(void *a1)
{
  return sub_1000608DC(a1);
}

uint64_t sub_100064B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005F930(a1, a2, a3);
}

uint64_t sub_100064B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0((uint64_t *)&unk_100459B80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100064B9C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100064BC8(void *a1)
{
  return sub_10005F98C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100064BD4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100064BE4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100064BF4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10005FB50(a1, a2, a3, *(uint64_t **)(v3 + 16), *(_BYTE **)(v3 + 24));
}

uint64_t sub_100064BFC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100064C0C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v4 = sub_10001528C(a2);
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }

  return result;
}

char *sub_100064C4C(char *a1, char **a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    id v7 = &v4[(v3 + 16LL) & ~(unint64_t)v3];
    swift_retain(v4);
  }

  else
  {
    id v7 = a1;
    uint64_t v8 = a2[2];
    *((void *)a1 + 1) = a2[1];
    *((void *)a1 + 2) = v8;
    uint64_t v10 = a2[3];
    uint64_t v9 = a2[4];
    *((void *)a1 + 3) = v10;
    *((void *)a1 + 4) = v9;
    uint64_t v11 = a3[8];
    uint64_t v12 = &a1[v11];
    uint64_t v13 = (uint64_t)a2 + v11;
    uint64_t v14 = type metadata accessor for UUID(0LL);
    id v15 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL);
    id v16 = v4;
    swift_bridgeObjectRetain(v8);
    uint64_t v17 = v10;
    v15(v12, v13, v14);
    uint64_t v18 = a3[9];
    uint64_t v19 = a3[10];
    unsigned __int8 v20 = *(char **)((char *)a2 + v18);
    *(void *)&v7[v18] = v20;
    uint64_t v21 = &v7[v19];
    unint64_t v22 = (char **)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *(void *)uint64_t v21 = *v22;
    *((void *)v21 + 1) = v23;
    id v24 = v20;
    swift_bridgeObjectRetain(v23);
  }

  return v7;
}

uint64_t sub_100064D3C(uint64_t a1, int *a2)
{
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v4 = a1 + a2[8];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);

  return swift_bridgeObjectRelease(*(void *)(a1 + a2[10] + 8));
}

void *sub_100064DB8(void *a1, uint64_t a2, int *a3)
{
  id v7 = *(void **)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v6;
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void **)(a2 + 24);
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = *(void *)(a2 + 32);
  uint64_t v10 = a3[8];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  id v15 = v7;
  swift_bridgeObjectRetain(v8);
  id v16 = v9;
  v14(v11, v12, v13);
  uint64_t v17 = a3[9];
  uint64_t v18 = a3[10];
  uint64_t v19 = *(void **)(a2 + v17);
  *(void *)((char *)a1 + v17) = v19;
  unsigned __int8 v20 = (void *)((char *)a1 + v18);
  uint64_t v21 = (void *)(a2 + v18);
  uint64_t v22 = v21[1];
  *unsigned __int8 v20 = *v21;
  v20[1] = v22;
  id v23 = v19;
  swift_bridgeObjectRetain(v22);
  return a1;
}

uint64_t sub_100064E80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void **)a2;
  id v7 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v8 = v6;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void **)(a1 + 24);
  uint64_t v12 = *(void **)(a2 + 24);
  *(void *)(a1 + 24) = v12;
  id v13 = v12;

  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  uint64_t v17 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  uint64_t v18 = a3[9];
  uint64_t v19 = *(void **)(a1 + v18);
  unsigned __int8 v20 = *(void **)(a2 + v18);
  *(void *)(a1 + v18) = v20;
  id v21 = v20;

  uint64_t v22 = a3[10];
  id v23 = (void *)(a1 + v22);
  id v24 = (void *)(a2 + v22);
  *id v23 = *v24;
  uint64_t v25 = v24[1];
  uint64_t v26 = v23[1];
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  return a1;
}

uint64_t sub_100064F78(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_100065008(uint64_t a1, void *a2, int *a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = a2[2];
  uint64_t v8 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = a2[1];
  *(void *)(a1 + 16) = v7;
  swift_bridgeObjectRelease(v8);
  uint64_t v9 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = a2[3];

  *(void *)(a1 + 32) = a2[4];
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  uint64_t v14 = a3[9];
  uint64_t v15 = *(void **)(a1 + v14);
  *(void *)(a1 + v14) = *(void *)((char *)a2 + v14);

  uint64_t v16 = a3[10];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)((char *)a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  uint64_t v21 = v17[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_1000650D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000650E0);
}

uint64_t sub_1000650E0(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 32)],  a2,  v8);
  }

uint64_t sub_10006515C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100065168);
}

char *sub_100065168(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)uint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 32)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1000651DC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_100373E28;
  void v4[2] = &unk_100373E40;
  void v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = &unk_100373E40;
    v4[6] = &unk_100373E28;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_100065298(uint64_t a1, void *a2)
{
  uint64_t v23 = a1;
  id v24 = a2;
  uint64_t v2 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v27 = *(void *)(v2 - 8);
  uint64_t v28 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_1000079A0(&qword_100459EF0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100050644();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v11);
  uint64_t v15 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  uint64_t v16 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  static DispatchWorkItemFlags.assignCurrentContext.getter(v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))( (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v23,  v5);
  uint64_t v17 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  uint64_t v19 = swift_allocObject(&unk_1003DF5E8, v18 + v7, v17 | 7);
  uint64_t v20 = v24;
  *(void *)(v19 + 16) = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))( v19 + v18,  (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v5);
  aBlock[4] = sub_1000656C0;
  uint64_t v30 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000657B0;
  aBlock[3] = &unk_1003DF600;
  uint64_t v21 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v4, v10, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v4, v28);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v26);
  return swift_release(v30);
}

void sub_1000654F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0(&qword_100459EF0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (id *)[objc_allocWithZone((Class)TaskQueue) init];
  sub_10020F2F0(v7, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))( (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_1003DF638, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))( v10 + v9,  (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v4);
  aBlock[4] = sub_100065770;
  uint64_t v13 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000657B0;
  aBlock[3] = &unk_1003DF650;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release(v13);
  sub_10020F304(v7, (uint64_t)v11);
  _Block_release(v11);
}

uint64_t sub_100065648()
{
  uint64_t v1 = sub_1000079A0(&qword_100459EF0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000656C0()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_1000079A0(&qword_100459EF0) - 8) + 80LL);
  sub_1000654F8(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1000656F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_100065704(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10006570C()
{
  uint64_t v1 = sub_1000079A0(&qword_100459EF0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100065770()
{
  uint64_t v0 = sub_1000079A0(&qword_100459EF0);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_1000657B0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1000657E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (*(void *)(a1 + 24))
  {
    sub_100015330((_OWORD *)a1, v11);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_100079180(v11, a2, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v8 = *v3;
    *uint64_t v4 = v10;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v8);
  }

  else
  {
    sub_100015240(a1, (uint64_t *)&unk_1004594B0);
    sub_1000679D0(a2, a3, v11);
    swift_bridgeObjectRelease(a3);
    return sub_100015240((uint64_t)v11, (uint64_t *)&unk_1004594B0);
  }

uint64_t sub_1000658B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_1000079A0((uint64_t *)&unk_100459D30);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for PurchaseCandidate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(a1, 1LL, v9) == 1)
  {
    sub_100015240(a1, (uint64_t *)&unk_100459D30);
    unint64_t v13 = sub_100023FE0(a2);
    if ((v14 & 1) != 0)
    {
      unint64_t v15 = v13;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      uint64_t v17 = *v3;
      uint64_t v24 = *v3;
      *uint64_t v3 = 0x8000000000000000LL;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_10007B1B8();
        uint64_t v17 = v24;
      }

      sub_100064A54(*(void *)(v17 + 56) + *(void *)(v10 + 72) * v15, (uint64_t)v8);
      sub_100068984(v15, v17);
      uint64_t v18 = *v3;
      *uint64_t v3 = v17;
      swift_bridgeObjectRelease(v18);
      uint64_t v19 = 0LL;
    }

    else
    {
      uint64_t v19 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, v19, 1LL, v9);
    return sub_100015240((uint64_t)v8, (uint64_t *)&unk_100459D30);
  }

  else
  {
    sub_100064A54(a1, (uint64_t)v12);
    char v20 = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v24 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_100079D40((uint64_t)v12, a2, v20);
    uint64_t v21 = *v3;
    *uint64_t v3 = v24;
    return swift_bridgeObjectRelease(v21);
  }

void sub_100065A80(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100065AC0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100065BAC + 4 * byte_100373E68[a2]))(0x6973726556707061LL);
}

uint64_t sub_100065BAC(uint64_t a1)
{
  if (a1 == 0x6973726556707061LL && v1 == 0xEA00000000006E6FLL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6973726556707061LL, 0xEA00000000006E6FLL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006E6FLL);
  return v2 & 1;
}

void sub_100065CF4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_100065D60(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100065DD8 + 4 * byte_100373E74[a2]))(0x6D61466E656B6F74LL);
}

uint64_t sub_100065DD8(uint64_t a1)
{
  if (a1 == 0x6D61466E656B6F74LL && v1 == 0xED00006449796C69LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6D61466E656B6F74LL, 0xED00006449796C69LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xED00006449796C69LL);
  return v2 & 1;
}

uint64_t sub_100065E98(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0) {
    unint64_t v3 = 0x7079546E656B6F74LL;
  }
  else {
    unint64_t v3 = 0xD000000000000015LL;
  }
  if (v2) {
    unint64_t v4 = 0x8000000100341DF0LL;
  }
  else {
    unint64_t v4 = 0xE900000000000065LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v5 = 0x7079546E656B6F74LL;
  }
  else {
    unint64_t v5 = 0xD000000000000015LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v6 = 0xE900000000000065LL;
  }
  else {
    unint64_t v6 = 0x8000000100341DF0LL;
  }
  if (v3 == v5 && v4 == v6)
  {
    char v7 = 1;
    unint64_t v6 = v4;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0LL);
  }

  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_100065F44(char a1)
{
  __asm { BR              X11 }

uint64_t sub_100065F9C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100066000 + 4 * byte_100373E7C[a2]))(0x6164705566666964LL);
}

uint64_t sub_100066000(uint64_t a1)
{
  if (a1 == 0x6164705566666964LL && v1 == 0xEA00000000006574LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6164705566666964LL, 0xEA00000000006574LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xEA00000000006574LL);
  return v2 & 1;
}

uint64_t sub_1000660A0(char a1, unsigned __int8 a2)
{
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v2 = 1635018093LL;
    }
    else {
      uint64_t v2 = 1701869940LL;
    }
    unint64_t v3 = 0xE400000000000000LL;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        uint64_t v5 = 1635018093LL;
      }
      else {
        uint64_t v5 = 1701869940LL;
      }
      unint64_t v6 = 0xE400000000000000LL;
      if (v2 != v5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    }
  }

  else
  {
    unint64_t v3 = 0xE200000000000000LL;
    uint64_t v2 = 25705LL;
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }

  unint64_t v6 = 0xE200000000000000LL;
  uint64_t v5 = 25705LL;
  if (v2 != 25705)
  {
LABEL_15:
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, v5, v6, 0LL);
    goto LABEL_16;
  }

void sub_100066180(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000661B8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_100066264 + 4 * byte_100373E85[a2]))(0x4E646C697542736FLL);
}

uint64_t sub_100066264(uint64_t a1)
{
  if (a1 == 0x4E646C697542736FLL && v1 == 0xED00007265626D75LL) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x4E646C697542736FLL, 0xED00007265626D75LL, 0LL);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xED00007265626D75LL);
  return v2 & 1;
}

uint64_t sub_100066354(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10006638C + 4 * byte_100373E8A[a1]))( 0x6569766552707061LL,  0xE900000000000077LL);
}

uint64_t sub_10006638C()
{
  return 0x79754270696C63LL;
}

uint64_t sub_1000663A4()
{
  return 0x79754265726F7473LL;
}

uint64_t sub_1000663BC()
{
  return 0x6F725065726F7473LL;
}

uint64_t sub_1000663E0()
{
  return 0x64655265726F7473LL;
}

uint64_t sub_1000665C4()
{
  return 0x6E496D6574737973LL;
}

uint64_t sub_1000665E8(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100066D24(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100066354);
}

Swift::Int sub_1000665F4(uint64_t a1, uint64_t a2)
{
  return sub_100066DBC(a1, a2, (uint64_t (*)(uint64_t))sub_100066354);
}

uint64_t sub_100066600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100066E2C(a1, a2, a3, (uint64_t (*)(void))sub_100066354);
}

Swift::Int sub_10006660C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100066E78(a1, a2, a3, (uint64_t (*)(uint64_t))sub_100066354);
}

uint64_t sub_100066618@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100069868(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100066644@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100066354(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10006666C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100069A54();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000666C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100069A54();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100066714(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100066744 + 4 * byte_100373EA0[a1]))( 0x6369706F74LL,  0xE500000000000000LL);
}

uint64_t sub_100066744()
{
  return 0x436C6C6174736E69LL;
}

uint64_t sub_100066768()
{
  return 0x7364496D616461LL;
}

uint64_t sub_100066780()
{
  return 0x646F43726F727265LL;
}

uint64_t sub_1000667D0()
{
  return 0x446C6C6174736E69LL;
}

unint64_t sub_1000667F4()
{
  return 0xD000000000000014LL;
}

uint64_t sub_100066810()
{
  return 0x6F724665726F7473LL;
}

unint64_t sub_100066830()
{
  return 0xD000000000000019LL;
}

uint64_t sub_100066850(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100066880 + 4 * byte_100373EAA[a1]))( 0x6369706F74LL,  0xE500000000000000LL);
}

uint64_t sub_100066880()
{
  return 0x436C6C6174736E69LL;
}

uint64_t sub_1000668A4()
{
  return 0x7364496D616461LL;
}

uint64_t sub_1000668BC()
{
  return 0x646F43726F727265LL;
}

uint64_t sub_10006690C()
{
  return 0x446C6C6174736E69LL;
}

unint64_t sub_100066930()
{
  return 0xD000000000000014LL;
}

uint64_t sub_10006694C()
{
  return 0x6F724665726F7473LL;
}

unint64_t sub_10006696C()
{
  return 0xD000000000000019LL;
}

void sub_10006698C(char *a1)
{
}

void sub_100066998()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_1000669EC()
{
  return Hasher._finalize()();
}

void sub_100066A5C()
{
  __asm { BR              X10 }

uint64_t sub_100066AA0(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xEA00000000006574LL);
}

void sub_100066AFC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_100066B4C()
{
  return Hasher._finalize()();
}

unint64_t sub_100066BBC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000699C8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100066BE8()
{
  return ((uint64_t (*)(void))((char *)sub_100066C20 + 4 * byte_100373EC0[*v0]))();
}

void sub_100066C20(void *a1@<X8>)
{
  *a1 = 0x6164705566666964LL;
  a1[1] = 0xEA00000000006574LL;
}

uint64_t sub_100066C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100069A10();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100066CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100069A10();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100066D18(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_100066D24(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_100066714);
}

uint64_t sub_100066D24( unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = *a2;
  uint64_t v7 = a5(*a1);
  uint64_t v9 = v8;
  uint64_t v10 = a5(v6);
  if (v7 == v10 && v9 == v11)
  {
    char v14 = 1;
    uint64_t v13 = v9;
  }

  else
  {
    uint64_t v13 = v11;
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);
  }

  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

Swift::Int sub_100066DB0(uint64_t a1, uint64_t a2)
{
  return sub_100066DBC(a1, a2, (uint64_t (*)(uint64_t))sub_100066714);
}

Swift::Int sub_100066DBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5 = *v3;
  Hasher.init(_seed:)(v10);
  uint64_t v6 = a3(v5);
  uint64_t v8 = v7;
  String.hash(into:)(v10, v6, v7);
  swift_bridgeObjectRelease(v8);
  return Hasher._finalize()();
}

uint64_t sub_100066E20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100066E2C(a1, a2, a3, (uint64_t (*)(void))sub_100066714);
}

uint64_t sub_100066E2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(*v4);
  uint64_t v8 = v7;
  String.hash(into:)(a1, v6, v7);
  return swift_bridgeObjectRelease(v8);
}

Swift::Int sub_100066E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100066E78(a1, a2, a3, (uint64_t (*)(uint64_t))sub_100066714);
}

Swift::Int sub_100066E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6 = *v4;
  Hasher.init(_seed:)(v11);
  uint64_t v7 = a4(v6);
  uint64_t v9 = v8;
  String.hash(into:)(v11, v7, v8);
  swift_bridgeObjectRelease(v9);
  return Hasher._finalize()();
}

unint64_t sub_100066ED8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100069BC0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100066F04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100066714(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100066F2C()
{
  return sub_100066850(*v0);
}

unint64_t sub_100066F34@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100069BC0(a1);
  *a2 = result;
  return result;
}

void sub_100066F58(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_100066F64(uint64_t a1)
{
  unint64_t v2 = sub_100069A98();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100066F8C(uint64_t a1)
{
  unint64_t v2 = sub_100069A98();
  return CodingKey.debugDescription.getter(a1, v2);
}

id sub_100067174()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppInstallationEvent();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppInstallationEvent()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored20AppInstallationEvent);
}

uint64_t sub_10006729C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_1000079A0(&qword_100459FF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100015F50(a1, v9);
  unint64_t v11 = sub_100069A98();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AppInstallationEvent.CodingKeys,  &type metadata for AppInstallationEvent.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *(void *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_topic);
  LOBYTE(v28) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12);
  if (!v2)
  {
    LOBYTE(v28) = *(_BYTE *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_context);
    char v29 = 1;
    unint64_t v13 = sub_100069ADC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v29, v5, &type metadata for AppInstallationEvent.Context, v13);
    uint64_t v28 = *(void *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_adamIDs);
    char v29 = 2;
    uint64_t v14 = sub_1000079A0(&qword_1004594D8);
    unint64_t v15 = sub_100069B20();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v29, v5, v14, v15);
    uint64_t v16 = *(void *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_errorCode);
    uint64_t v17 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_errorCode + 8);
    LOBYTE(v28) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v28, v5);
    uint64_t v18 = *(void *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_errorDomain);
    uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_errorDomain + 8);
    LOBYTE(v28) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v28, v5);
    uint64_t v20 = *(void *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_eventType);
    LOBYTE(v28) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v20);
    uint64_t v21 = *(void *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_installDuration);
    uint64_t v22 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_installDuration + 8);
    LOBYTE(v28) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v28, v5);
    LOBYTE(v28) = *(_BYTE *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_packageType);
    char v29 = 7;
    unint64_t v23 = sub_100069B7C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v28,  &v29,  v5,  &type metadata for AppInstallationEvent.PackageType,  v23);
    uint64_t v24 = *(void *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_storeFrontID);
    uint64_t v25 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_storeFrontID + 8);
    LOBYTE(v28) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v28, v5);
    double v26 = *(double *)(v3 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_sampleRate);
    LOBYTE(v28) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(&v28, v5, v26);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t storeEnumTagSinglePayload for AppInstallationEvent.PackageType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100067604 + 4 * byte_100373EC9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100067638 + 4 * byte_100373EC4[v4]))();
}

uint64_t sub_100067638(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067640(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100067648LL);
  }
  return result;
}

uint64_t sub_100067654(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006765CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100067660(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100067668(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppInstallationEvent.PackageType()
{
  return &type metadata for AppInstallationEvent.PackageType;
}

uint64_t getEnumTagSinglePayload for AppInstallationEvent.Context(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xEB) {
    goto LABEL_17;
  }
  if (a2 + 21 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 21) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 21;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 21;
    }
  }

uint64_t storeEnumTagSinglePayload for AppInstallationEvent.Context( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 21 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 21) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEA) {
    return ((uint64_t (*)(void))((char *)&loc_100067760 + 4 * byte_100373ED3[v4]))();
  }
  *a1 = a2 + 21;
  return ((uint64_t (*)(void))((char *)sub_100067794 + 4 * byte_100373ECE[v4]))();
}

uint64_t sub_100067794(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006779C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000677A4LL);
  }
  return result;
}

uint64_t sub_1000677B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000677B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 21;
  return result;
}

uint64_t sub_1000677BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000677C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppInstallationEvent.Context()
{
  return &type metadata for AppInstallationEvent.Context;
}

unint64_t sub_1000677E4()
{
  unint64_t result = qword_100459FC8;
  if (!qword_100459FC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373FE4, &type metadata for AppInstallationEvent.Context);
    atomic_store(result, (unint64_t *)&qword_100459FC8);
  }

  return result;
}

unint64_t sub_10006782C()
{
  unint64_t result = qword_100459FD0;
  if (!qword_100459FD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1003740D4, &type metadata for AppInstallationEvent.PackageType);
    atomic_store(result, (unint64_t *)&qword_100459FD0);
  }

  return result;
}

uint64_t sub_100067870(void *a1)
{
  return sub_10006729C(a1);
}

unint64_t sub_100067890(uint64_t a1)
{
  unint64_t result = sub_1000678B4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000678B4()
{
  unint64_t result = qword_100459FD8;
  if (!qword_100459FD8)
  {
    uint64_t v1 = type metadata accessor for AppInstallationEvent();
    unint64_t result = swift_getWitnessTable(&unk_1003740FC, v1);
    atomic_store(result, (unint64_t *)&qword_100459FD8);
  }

  return result;
}

id sub_1000678F8(uint64_t a1, uint64_t a2, char a3)
{
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v12 = 0LL;
  id v7 = [v3 initWithBundleIdentifier:v6 allowPlaceholder:a3 & 1 error:&v12];

  id v8 = v12;
  if (v7)
  {
    id v9 = v12;
  }

  else
  {
    id v10 = v12;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow();
  }

  return v7;
}

double sub_1000679D0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  unint64_t v9 = sub_100023F7C(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    uint64_t v12 = *v4;
    uint64_t v15 = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10007A1D0();
      uint64_t v12 = v15;
    }

    swift_bridgeObjectRelease(*(void *)(*(void *)(v12 + 48) + 16 * v9 + 8));
    sub_100015330((_OWORD *)(*(void *)(v12 + 56) + 32 * v9), a3);
    sub_100067EA4(v9, v12);
    uint64_t v13 = *v4;
    *uint64_t v4 = v12;
    swift_bridgeObjectRelease(v13);
  }

  else
  {
    double result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }

  return result;
}

uint64_t sub_100067AC0(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100023F7C(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 2LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *int v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10007A5AC();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(unsigned __int8 *)(*(void *)(v10 + 56) + v7);
  sub_100068264(v7, v10);
  uint64_t v12 = *v3;
  *int v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_100067B8C(unint64_t a1)
{
  int v2 = v1;
  Swift::Int v4 = *v1;
  if ((v4 & 0xC000000000000001LL) == 0)
  {
LABEL_8:
    swift_bridgeObjectRetain(v4);
    a1 = sub_100024010(a1);
    char v12 = v11;
    swift_bridgeObjectRelease(v4);
    if ((v12 & 1) != 0)
    {
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
      Swift::Int v4 = *v2;
      Swift::Int v17 = *v2;
      *int v2 = 0x8000000000000000LL;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_10007AC78();
        Swift::Int v4 = v17;
      }

      goto LABEL_11;
    }

    return 0LL;
  }

  if (v4 < 0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v4);
  id v6 = (id)a1;
  uint64_t v7 = __CocoaDictionary.lookup(_:)(v6, v5);

  if (!v7)
  {
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  swift_unknownObjectRelease(v7);
  uint64_t v8 = __CocoaDictionary.count.getter(v5);
  Swift::Int v4 = sub_100048B3C(v5, v8);
  swift_retain(v4);
  a1 = sub_100024010((uint64_t)v6);
  char v10 = v9;
  swift_release(v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }

double sub_100067CD8@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  int v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_1000240BC(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v10 = *v3;
    uint64_t v13 = *v3;
    *int v3 = 0x8000000000000000LL;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10007AE1C();
      uint64_t v10 = v13;
    }

    sub_100026A3C(*(void *)(v10 + 48) + 40 * v7);
    sub_100015330((_OWORD *)(*(void *)(v10 + 56) + 32 * v7), a2);
    sub_1000685E8(v7, v10);
    uint64_t v11 = *v3;
    *int v3 = v10;
    swift_bridgeObjectRelease(v11);
  }

  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }

  return result;
}

uint64_t sub_100067DC0(uint64_t a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  unint64_t v7 = sub_100023F7C(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0) {
    return 0LL;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v10 = *v3;
  uint64_t v14 = *v3;
  *int v3 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10007B000();
    uint64_t v10 = v14;
  }

  swift_bridgeObjectRelease(*(void *)(*(void *)(v10 + 48) + 16 * v7 + 8));
  uint64_t v11 = *(void *)(*(void *)(v10 + 56) + 16 * v7);
  sub_1000687B0(v7, v10);
  uint64_t v12 = *v3;
  *int v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

unint64_t sub_100067EA4(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v27);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v27, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          Swift::Int v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          uint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (_OWORD *)(v18 + 32 * v3);
          uint64_t v20 = (_OWORD *)(v18 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 2))
          {
            __int128 v9 = v20[1];
            *uint64_t v19 = *v20;
            v19[1] = v9;
            int64_t v3 = v6;
          }
        }

unint64_t sub_100068078(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        __int128 v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          double result = v17 + 320 * v3;
          uint64_t v18 = (const void *)(v17 + 320 * v6);
          if (320 * v3 < (uint64_t)(320 * v6)
            || result >= (unint64_t)v18 + 320
            || (v19 = v3 == v6, int64_t v3 = v6, !v19))
          {
            double result = (unint64_t)memmove((void *)result, v18, 0x140uLL);
            int64_t v3 = v6;
          }
        }

unint64_t sub_100068264(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        __int128 v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          uint64_t v18 = (_BYTE *)(v17 + v3);
          BOOL v19 = (_BYTE *)(v17 + v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *uint64_t v18 = *v19;
            int64_t v3 = v6;
          }
        }

void sub_100068438(unint64_t a1, uint64_t a2)
{
  int64_t v3 = a1;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (a1 + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    uint64_t v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(a2 + 40);
        id v11 = *(id *)(*(void *)(a2 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(a2 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v3);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1) {
              *uint64_t v17 = *v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (void *)(v19 + 8 * v3);
            uint64_t v21 = (void *)(v19 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 1))
            {
              *uint64_t v20 = *v21;
              int64_t v3 = v6;
            }
          }
        }

        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << a1) - 1;
  }

  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

unint64_t sub_1000685E8(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        sub_100017C44(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        Swift::Int v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        double result = sub_100026A3C((uint64_t)v28);
        Swift::Int v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            uint64_t v14 = *(void *)(a2 + 48);
            unint64_t v15 = v14 + 40 * v3;
            uint64_t v16 = (__int128 *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              __int128 v17 = *v16;
              __int128 v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)unint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }

            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              __int128 v9 = v21[1];
              *uint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }

        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    uint64_t v24 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v24 = *v22;
    uint64_t v23 = (-1LL << result) - 1;
  }

  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  BOOL v26 = __OFSUB__(v25, 1LL);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

unint64_t sub_1000687B0(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        __int128 v9 = (uint64_t *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        Swift::Int v12 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease(v11);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }

        else if (v13 >= v8)
        {
          goto LABEL_11;
        }

        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          uint64_t v14 = *(void *)(a2 + 48);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *unint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          __int128 v18 = (_OWORD *)(v17 + 16 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 1))
          {
            *__int128 v18 = *v19;
            int64_t v3 = v6;
          }
        }

unint64_t sub_100068984(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v9 = *(void *)(a2 + 48);
        uint64_t v10 = (void *)(v9 + 8 * v6);
        double result = static Hasher._hash(seed:_:)(*(void *)(a2 + 40), *v10);
        unint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
        }

        else if (v11 < v8 && v3 < (uint64_t)v11)
        {
          goto LABEL_6;
        }

        uint64_t v14 = (void *)(v9 + 8 * v3);
        if (v3 != v6 || v14 >= v10 + 1) {
          void *v14 = *v10;
        }
        uint64_t v15 = *(void *)(a2 + 56);
        uint64_t v16 = *(void *)(*(void *)(type metadata accessor for PurchaseCandidate(0LL) - 8) + 72LL);
        int64_t v17 = v16 * v3;
        double result = v15 + v16 * v3;
        int64_t v18 = v16 * v6;
        unint64_t v19 = v15 + v16 * v6 + v16;
        if (v17 < v18 || result >= v19)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }

        else
        {
          int64_t v3 = v6;
          if (v17 == v18) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }

        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1LL << v3) - 1;
  }

  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1LL << result) - 1;
  }

  *uint64_t v21 = v23 & v22;
  uint64_t v24 = *(void *)(a2 + 16);
  BOOL v25 = __OFSUB__(v24, 1LL);
  uint64_t v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }

  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }

  return result;
}

uint64_t sub_100068B40(void *a1, char a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v185 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"CLP");
  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v8 == v11 && v10 == v12)
  {
    swift_bridgeObjectRelease_n(v10, 2LL);
    goto LABEL_17;
  }

  uint64_t v14 = v12;
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v11, v12, 0LL);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(v14);
  if ((v15 & 1) != 0)
  {
LABEL_17:

    return 1LL;
  }

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"BUY");
  uint64_t v18 = v17;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v16 == v19 && v18 == v20) {
    goto LABEL_13;
  }
  uint64_t v22 = v20;
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0LL);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v22);
  if ((v23 & 1) != 0)
  {
LABEL_14:

    return 2LL;
  }

  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"LGY");
  uint64_t v18 = v25;
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v28 = v26;
  if (v24 == v27 && v18 == v26) {
    goto LABEL_13;
  }
  char v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v18, v27, v26, 0LL);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v28);
  if ((v30 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"ABY");
  uint64_t v18 = v32;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v35 = v33;
  if (v31 == v34 && v18 == v33)
  {
LABEL_13:
    swift_bridgeObjectRelease_n(v18, 2LL);
    goto LABEL_14;
  }

  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v18, v34, v33, 0LL);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v35);
  if ((v36 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"BYQ");
  uint64_t v39 = v38;
  uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v42 = v40;
  if (v37 == v41 && v39 == v40)
  {
    swift_bridgeObjectRelease_n(v39, 2LL);
LABEL_27:

    return 7LL;
  }

  char v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v37, v39, v41, v40, 0LL);
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v42);
  if ((v43 & 1) != 0) {
    goto LABEL_27;
  }
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"DIS");
  uint64_t v46 = v45;
  uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v49 = v47;
  if (v44 == v48 && v46 == v47)
  {
    swift_bridgeObjectRelease_n(v46, 2LL);
    goto LABEL_32;
  }

  char v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v46, v48, v47, 0LL);
  swift_bridgeObjectRelease(v46);
  swift_bridgeObjectRelease(v49);
  if ((v50 & 1) != 0)
  {
LABEL_32:

    if ((a2 & 1) != 0) {
      return 14LL;
    }
    else {
      return 13LL;
    }
  }

  uint64_t v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"PTV");
  uint64_t v53 = v52;
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v56 = v54;
  if (v51 == v55 && v53 == v54)
  {
    swift_bridgeObjectRelease_n(v53, 2LL);
    goto LABEL_39;
  }

  char v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v51, v53, v55, v54, 0LL);
  swift_bridgeObjectRelease(v53);
  swift_bridgeObjectRelease(v56);
  if ((v57 & 1) != 0)
  {
LABEL_39:

    if ((a2 & 1) != 0) {
      return 18LL;
    }
    else {
      return 17LL;
    }
  }

  uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"VPP");
  uint64_t v60 = v59;
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v63 = v61;
  if (v58 == v62 && v60 == v61) {
    goto LABEL_44;
  }
  char v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v60, v62, v61, 0LL);
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(v63);
  if ((v64 & 1) != 0) {
    goto LABEL_46;
  }
  uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"VPF");
  uint64_t v60 = v66;
  uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v69 = v67;
  if (v65 == v68 && v60 == v67)
  {
LABEL_44:
    swift_bridgeObjectRelease_n(v60, 2LL);
    goto LABEL_46;
  }

  char v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v60, v68, v67, 0LL);
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(v69);
  if ((v70 & 1) != 0)
  {
LABEL_46:

    if ((a2 & 1) != 0) {
      return 16LL;
    }
    else {
      return 15LL;
    }
  }

  uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"RSD");
  uint64_t v73 = v72;
  uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v76 = v74;
  if (v71 == v75 && v73 == v74)
  {
    swift_bridgeObjectRelease_n(v73, 2LL);
LABEL_56:

    return 9LL;
  }

  char v77 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v73, v75, v74, 0LL);
  swift_bridgeObjectRelease(v73);
  swift_bridgeObjectRelease(v76);
  if ((v77 & 1) != 0) {
    goto LABEL_56;
  }
  uint64_t v78 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"RSP");
  uint64_t v80 = v79;
  uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v83 = v81;
  if (v78 == v82 && v80 == v81) {
    goto LABEL_59;
  }
  char v84 = _stringCompareWithSmolCheck(_:_:expecting:)(v78, v80, v82, v81, 0LL);
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v83);
  if ((v84 & 1) != 0) {
    goto LABEL_61;
  }
  uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"RSR");
  uint64_t v80 = v86;
  uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v89 = v87;
  if (v85 == v88 && v80 == v87)
  {
LABEL_59:
    swift_bridgeObjectRelease_n(v80, 2LL);
LABEL_61:

    return 3LL;
  }

  char v90 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v80, v88, v87, 0LL);
  swift_bridgeObjectRelease(v80);
  swift_bridgeObjectRelease(v89);
  if ((v90 & 1) != 0) {
    goto LABEL_61;
  }
  uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"RTV");
  uint64_t v93 = v92;
  uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v96 = v94;
  if (v91 == v95 && v93 == v94)
  {
    swift_bridgeObjectRelease_n(v93, 2LL);
LABEL_69:

    return 19LL;
  }

  char v97 = _stringCompareWithSmolCheck(_:_:expecting:)(v91, v93, v95, v94, 0LL);
  swift_bridgeObjectRelease(v93);
  swift_bridgeObjectRelease(v96);
  if ((v97 & 1) != 0) {
    goto LABEL_69;
  }
  uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"SYS");
  uint64_t v100 = v99;
  uint64_t v102 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v103 = v101;
  if (v98 == v102 && v100 == v101)
  {
    swift_bridgeObjectRelease_n(v100, 2LL);
LABEL_74:

    return 21LL;
  }

  char v104 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v100, v102, v101, 0LL);
  swift_bridgeObjectRelease(v100);
  swift_bridgeObjectRelease(v103);
  if ((v104 & 1) != 0) {
    goto LABEL_74;
  }
  uint64_t v105 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"APR");
  uint64_t v107 = v106;
  uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v110 = v108;
  if (v105 == v109 && v107 == v108)
  {
    swift_bridgeObjectRelease_n(v107, 2LL);
LABEL_79:

    return 0LL;
  }

  char v111 = _stringCompareWithSmolCheck(_:_:expecting:)(v105, v107, v109, v108, 0LL);
  swift_bridgeObjectRelease(v107);
  swift_bridgeObjectRelease(v110);
  if ((v111 & 1) != 0) {
    goto LABEL_79;
  }
  uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"TFA");
  uint64_t v114 = v113;
  uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v117 = v115;
  if (v112 == v116 && v114 == v115) {
    goto LABEL_82;
  }
  char v118 = _stringCompareWithSmolCheck(_:_:expecting:)(v112, v114, v116, v115, 0LL);
  swift_bridgeObjectRelease(v114);
  swift_bridgeObjectRelease(v117);
  if ((v118 & 1) != 0) {
    goto LABEL_87;
  }
  uint64_t v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"TFU");
  uint64_t v114 = v120;
  uint64_t v122 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v123 = v121;
  if (v119 == v122 && v114 == v121)
  {
LABEL_82:
    swift_bridgeObjectRelease_n(v114, 2LL);
LABEL_87:

    return 10LL;
  }

  char v124 = _stringCompareWithSmolCheck(_:_:expecting:)(v119, v114, v122, v121, 0LL);
  swift_bridgeObjectRelease(v114);
  swift_bridgeObjectRelease(v123);
  if ((v124 & 1) != 0) {
    goto LABEL_87;
  }
  uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"TFB");
  uint64_t v127 = v126;
  uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v130 = v128;
  if (v125 == v129 && v127 == v128)
  {
    swift_bridgeObjectRelease_n(v127, 2LL);
LABEL_92:

    return 12LL;
  }

  char v131 = _stringCompareWithSmolCheck(_:_:expecting:)(v125, v127, v129, v128, 0LL);
  swift_bridgeObjectRelease(v127);
  swift_bridgeObjectRelease(v130);
  if ((v131 & 1) != 0) {
    goto LABEL_92;
  }
  uint64_t v132 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"UPD");
  uint64_t v134 = v133;
  uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v137 = v135;
  if (v132 == v136 && v134 == v135) {
    goto LABEL_95;
  }
  char v138 = _stringCompareWithSmolCheck(_:_:expecting:)(v132, v134, v136, v135, 0LL);
  swift_bridgeObjectRelease(v134);
  swift_bridgeObjectRelease(v137);
  if ((v138 & 1) != 0) {
    goto LABEL_100;
  }
  uint64_t v139 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"UPB");
  uint64_t v134 = v140;
  uint64_t v142 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v143 = v141;
  if (v139 == v142 && v134 == v141) {
    goto LABEL_95;
  }
  char v144 = _stringCompareWithSmolCheck(_:_:expecting:)(v139, v134, v142, v141, 0LL);
  swift_bridgeObjectRelease(v134);
  swift_bridgeObjectRelease(v143);
  if ((v144 & 1) != 0) {
    goto LABEL_100;
  }
  uint64_t v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"UPA");
  uint64_t v134 = v146;
  uint64_t v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v149 = v147;
  if (v145 == v148 && v134 == v147) {
    goto LABEL_95;
  }
  char v150 = _stringCompareWithSmolCheck(_:_:expecting:)(v145, v134, v148, v147, 0LL);
  swift_bridgeObjectRelease(v134);
  swift_bridgeObjectRelease(v149);
  if ((v150 & 1) != 0) {
    goto LABEL_100;
  }
  uint64_t v151 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"UPI");
  uint64_t v134 = v152;
  uint64_t v154 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v155 = v153;
  if (v151 == v154 && v134 == v153) {
    goto LABEL_95;
  }
  char v156 = _stringCompareWithSmolCheck(_:_:expecting:)(v151, v134, v154, v153, 0LL);
  swift_bridgeObjectRelease(v134);
  swift_bridgeObjectRelease(v155);
  if ((v156 & 1) != 0) {
    goto LABEL_100;
  }
  uint64_t v157 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"AUA");
  uint64_t v134 = v158;
  uint64_t v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v161 = v159;
  if (v157 == v160 && v134 == v159) {
    goto LABEL_95;
  }
  char v162 = _stringCompareWithSmolCheck(_:_:expecting:)(v157, v134, v160, v159, 0LL);
  swift_bridgeObjectRelease(v134);
  swift_bridgeObjectRelease(v161);
  if ((v162 & 1) != 0) {
    goto LABEL_100;
  }
  uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"AUB");
  uint64_t v134 = v164;
  uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v167 = v165;
  if (v163 == v166 && v134 == v165)
  {
LABEL_95:
    swift_bridgeObjectRelease_n(v134, 2LL);
LABEL_100:

    return 5LL;
  }

  char v168 = _stringCompareWithSmolCheck(_:_:expecting:)(v163, v134, v166, v165, 0LL);
  swift_bridgeObjectRelease(v134);
  swift_bridgeObjectRelease(v167);
  if ((v168 & 1) != 0) {
    goto LABEL_100;
  }
  uint64_t v169 = static String._unconditionallyBridgeFromObjectiveC(_:)(@"WRD");
  uint64_t v171 = v170;
  uint64_t v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v174 = v172;
  if (v169 == v173 && v171 == v172)
  {
    swift_bridgeObjectRelease_n(v171, 2LL);
  }

  else
  {
    char v175 = _stringCompareWithSmolCheck(_:_:expecting:)(v169, v171, v173, v172, 0LL);
    swift_bridgeObjectRelease(v171);
    uint64_t v176 = swift_bridgeObjectRelease(v174);
    if ((v175 & 1) == 0)
    {
      static Logger.metrics.getter(v176);
      id v177 = a1;
      uint64_t v178 = (os_log_s *)Logger.logObject.getter(v177);
      os_log_type_t v179 = static os_log_type_t.error.getter(v178);
      if (os_log_type_enabled(v178, v179))
      {
        uint64_t v180 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v181 = swift_slowAlloc(32LL, -1LL);
        uint64_t v188 = v181;
        *(_DWORD *)uint64_t v180 = 136446210;
        uint64_t v186 = v180 + 4;
        uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
        unint64_t v184 = v183;
        uint64_t v187 = sub_100088DB4(v182, v183, &v188);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v187, &v188, v186, v180 + 12);

        swift_bridgeObjectRelease(v184);
        _os_log_impl((void *)&_mh_execute_header, v178, v179, "No install context found for %{public}s", v180, 0xCu);
        swift_arrayDestroy(v181, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v181, -1LL, -1LL);
        swift_slowDealloc(v180, -1LL, -1LL);
      }

      else
      {
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return 2LL;
    }
  }

  return 20LL;
}

uint64_t sub_100069868(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1003DB550, a1, a2, &unk_1004580D8);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x16) {
    return 22LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000698B8(void *a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    if (sub_1001E2698(a1, (uint64_t)@"package_type") == (id)1)
    {
      id v3 = sub_1001E26D0(a1, (uint64_t)@"delta_algorithm");
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
        uint64_t v7 = v6;

        if (v5 == 0x666669647862LL && v7 == 0xE600000000000000LL)
        {
          swift_bridgeObjectRelease(0xE600000000000000LL);

          return 2LL;
        }

        else
        {
          char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x666669647862LL, 0xE600000000000000LL, v5, v7, 0LL);
          swift_bridgeObjectRelease(v7);

          if ((v9 & 1) != 0) {
            return 2LL;
          }
          else {
            return 1LL;
          }
        }
      }

      else
      {

        return 1LL;
      }
    }

    else
    {

      return 3LL;
    }
  }

  else
  {

    return 0LL;
  }

unint64_t sub_1000699C8(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DB780, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4) {
    return 4LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_100069A10()
{
  unint64_t result = qword_100459FE0;
  if (!qword_100459FE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037405C, &type metadata for AppInstallationEvent.PackageType);
    atomic_store(result, (unint64_t *)&qword_100459FE0);
  }

  return result;
}

unint64_t sub_100069A54()
{
  unint64_t result = qword_100459FE8;
  if (!qword_100459FE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373F6C, &type metadata for AppInstallationEvent.Context);
    atomic_store(result, (unint64_t *)&qword_100459FE8);
  }

  return result;
}

unint64_t sub_100069A98()
{
  unint64_t result = qword_100459FF8;
  if (!qword_100459FF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037423C, &type metadata for AppInstallationEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100459FF8);
  }

  return result;
}

unint64_t sub_100069ADC()
{
  unint64_t result = qword_10045A000;
  if (!qword_10045A000)
  {
    unint64_t result = swift_getWitnessTable(&unk_100373F1C, &type metadata for AppInstallationEvent.Context);
    atomic_store(result, (unint64_t *)&qword_10045A000);
  }

  return result;
}

unint64_t sub_100069B20()
{
  unint64_t result = qword_10045A008;
  if (!qword_10045A008)
  {
    uint64_t v1 = sub_10001528C(&qword_1004594D8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10045A008);
  }

  return result;
}

unint64_t sub_100069B7C()
{
  unint64_t result = qword_10045A010;
  if (!qword_10045A010)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037400C, &type metadata for AppInstallationEvent.PackageType);
    atomic_store(result, (unint64_t *)&qword_10045A010);
  }

  return result;
}

unint64_t sub_100069BC0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DB800, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0xA) {
    return 10LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100069C08()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [objc_allocWithZone(AMSMetricsIdentifierStore) init];
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 setDomain:v2];

  uint64_t v3 = objc_opt_self(&OBJC_CLASS___URLBag);
  id v4 = sub_100255630(v3);
  double v5 = sub_10025716C(v4, v0, 0, 86400.0);

  [v1 setResetInterval:v5];
  id v6 = objc_allocWithZone(&OBJC_CLASS___AMSProcessInfo);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithBundleIdentifier:v7];

  [v1 setClientInfo:v8];
  uint64_t v9 = sub_1000079A0(&qword_100458EE0);
  uint64_t v10 = swift_allocObject(v9, 40LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_100373960;
  NSString v11 = String._bridgeToObjectiveC()();
  id v12 =  [(id)objc_opt_self(AMSMetricsIdentifierKey) keyWithName:v11 crossDeviceSync:0];

  *(void *)(v10 + 32) = v12;
  v21[0] = v10;
  specialized Array._endMutation()(v13);
  sub_10001517C(0LL, (unint64_t *)&qword_10045A028, &OBJC_CLASS___AMSMetricsIdentifierKey_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  id v15 = [v1 generateEventFieldsForKeys:isa];

  uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v15,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  *(void *)&__int128 v22 = 0x6449746E65696C63LL;
  *((void *)&v22 + 1) = 0xE800000000000000LL;
  AnyHashable.init<A>(_:)(&v22, &type metadata for String, &protocol witness table for String);
  if (*(void *)(v16 + 16) && (unint64_t v17 = sub_1000240BC((uint64_t)v21), (v18 & 1) != 0))
  {
    sub_100016B10(*(void *)(v16 + 56) + 32 * v17, (uint64_t)&v22);
  }

  else
  {
    __int128 v22 = 0u;
    __int128 v23 = 0u;
  }

  swift_bridgeObjectRelease(v16);
  sub_100026A3C((uint64_t)v21);
  if (*((void *)&v23 + 1))
  {
    else {
      return 0LL;
    }
  }

  else
  {
    sub_100015240((uint64_t)&v22, (uint64_t *)&unk_1004594B0);
    return 0LL;
  }

unint64_t sub_100069F44(void *a1)
{
  id v2 = sub_1001E26D0(a1, (uint64_t)@"log_code");
  if (!v2) {
    return sub_10001DA2C((uint64_t)_swiftEmptyArrayStorage);
  }
  uint64_t v3 = v2;
  uint64_t v4 = sub_1000079A0(&qword_10045A018);
  uint64_t inited = swift_initStackObject(v4, v42);
  *(_OWORD *)(inited + 16) = xmmword_100373A90;
  *(void *)(inited + 32) = @"UPP";
  uint64_t v6 = inited + 32;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = @"MNF";
  NSString v7 = @"UPP";
  id v8 = @"MNF";
  char v9 = sub_100085DB0((uint64_t)v3, inited);
  swift_setDeallocating(inited);
  uint64_t v10 = *(void *)(inited + 16);
  type metadata accessor for AppInstallLogCode(0LL);
  swift_arrayDestroy(v6, v10, v11);
  if ((v9 & 1) == 0)
  {
    id v12 = sub_100323DD0(a1);
    if (v12)
    {
      uint64_t v13 = v12;
      id v14 = [v12 longLongValue];

      if (v14)
      {
        uint64_t v15 = sub_1000079A0(&qword_100459DF8);
        uint64_t v16 = swift_allocObject(v15, 40LL, 7LL);
        *(_OWORD *)(v16 + 16) = xmmword_100372930;
        *(void *)(v16 + 32) = v14;
        uint64_t v38 = (void *)sub_1000079A0(&qword_100459BF8);
        *(void *)&__int128 v37 = v16;
        sub_100015330(&v37, &v39);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
        sub_100079180(&v39, 0x7364496D616461LL, 0xE700000000000000LL, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease(0x8000000000000000LL);
        id v18 = v3;
        char v19 = sub_100323C2C(a1);
        unsigned __int8 v20 = sub_100068B40(v18, v19);
        uint64_t v21 = sub_100066354(v20);
        uint64_t v38 = &type metadata for String;
        *(void *)&__int128 v37 = v21;
        *((void *)&v37 + 1) = v22;
        sub_100015330(&v37, &v39);
        char v23 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
        *(void *)&v36[0] = _swiftEmptyDictionarySingleton;
        sub_100079180(&v39, 0x436C6C6174736E69LL, 0xEE00747865746E6FLL, v23);
        uint64_t v41 = _swiftEmptyDictionarySingleton;
        swift_bridgeObjectRelease(0x8000000000000000LL);
        id v24 = sub_1001E27FC(a1, (uint64_t)@"metrics_fields");
        if (v24)
        {
          uint64_t v25 = v24;
          uint64_t v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v24,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);

          *(void *)&__int128 v39 = 0x746E6F4365676170LL;
          *((void *)&v39 + 1) = 0xEB00000000747865LL;
          AnyHashable.init<A>(_:)(&v39, &type metadata for String, &protocol witness table for String);
          if (*(void *)(v26 + 16) && (unint64_t v27 = sub_1000240BC((uint64_t)&v37), (v28 & 1) != 0))
          {
            sub_100016B10(*(void *)(v26 + 56) + 32 * v27, (uint64_t)&v39);
          }

          else
          {
            __int128 v39 = 0u;
            __int128 v40 = 0u;
          }

          swift_bridgeObjectRelease(v26);
          sub_100026A3C((uint64_t)&v37);
          if (!*((void *)&v40 + 1))
          {
            sub_100015240((uint64_t)&v39, (uint64_t *)&unk_1004594B0);
            sub_1000679D0(0x746E6F4365676170LL, 0xEB00000000747865LL, v36);
            sub_100015240((uint64_t)v36, (uint64_t *)&unk_1004594B0);
            uint64_t v32 = sub_100069C08();
            if (v33) {
              goto LABEL_17;
            }
            goto LABEL_19;
          }

          sub_100015330(&v39, v36);
          char v31 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
          sub_100079180(v36, 0x746E6F4365676170LL, 0xEB00000000747865LL, v31);
          uint64_t v41 = _swiftEmptyDictionarySingleton;
          swift_bridgeObjectRelease(0x8000000000000000LL);
        }

        uint64_t v32 = sub_100069C08();
        if (v33)
        {
LABEL_17:
          uint64_t v38 = &type metadata for String;
          *(void *)&__int128 v37 = v32;
          *((void *)&v37 + 1) = v33;
          sub_100015330(&v37, &v39);
          uint64_t v34 = v41;
          char v35 = swift_isUniquelyReferenced_nonNull_native(v41);
          *(void *)&v36[0] = v34;
          sub_100079180(&v39, 0x6449746E65696C63LL, 0xE800000000000000LL, v35);
          unint64_t v29 = *(void *)&v36[0];

          swift_bridgeObjectRelease(0x8000000000000000LL);
          return v29;
        }

unint64_t sub_10006A38C(void *a1)
{
  uint64_t v2 = sub_1000079A0(&qword_10045A018);
  uint64_t inited = swift_initStackObject(v2, v39);
  *(_OWORD *)(inited + 16) = xmmword_100373A90;
  *(void *)(inited + 32) = @"UPP";
  uint64_t v4 = inited + 32;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = @"MNF";
  double v5 = @"UPP";
  uint64_t v6 = @"MNF";
  id v7 = [a1 logCode];
  char v8 = sub_100085DB0((uint64_t)v7, inited);

  swift_setDeallocating(inited);
  uint64_t v9 = *(void *)(inited + 16);
  type metadata accessor for AppInstallLogCode(0LL);
  swift_arrayDestroy(v4, v9, v10);
  if ((v8 & 1) != 0) {
    return sub_10001DA2C((uint64_t)_swiftEmptyArrayStorage);
  }
  id v12 = [a1 buyParams];
  NSString v13 = String._bridgeToObjectiveC()();
  id v14 = [v12 objectForKeyedSubscript:v13];

  if (v14)
  {
    _bridgeAnyObjectToAny(_:)(v36, v14);
    swift_unknownObjectRelease(v14);
  }

  else
  {
    memset(v36, 0, sizeof(v36));
  }

  sub_1000151F8((uint64_t)v36, (uint64_t)&v37);
  if (!v38)
  {
    sub_100015240((uint64_t)&v37, (uint64_t *)&unk_1004594B0);
    goto LABEL_10;
  }

  if ((swift_dynamicCast(&v35, &v37, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
LABEL_10:
    uint64_t v16 = _swiftEmptyDictionarySingleton;
    goto LABEL_11;
  }

  uint64_t v38 = &type metadata for String;
  __int128 v37 = v35;
  sub_100015330(&v37, v36);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  *(void *)&__int128 v35 = _swiftEmptyDictionarySingleton;
  sub_100079180(v36, 0x746E6F4365676170LL, 0xEB00000000747865LL, isUniquelyReferenced_nonNull_native);
  uint64_t v16 = (void *)v35;
  swift_bridgeObjectRelease(0x8000000000000000LL);
LABEL_11:
  id v17 = [a1 itemID];
  id v18 = [v17 longLongValue];

  if (v18)
  {
    uint64_t v19 = sub_1000079A0(&qword_100459530);
    uint64_t v20 = swift_allocObject(v19, 48LL, 7LL);
    *(_OWORD *)(v20 + 16) = xmmword_100372930;
    id v21 = [a1 itemID];
    id v22 = [v21 stringValue];

    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    uint64_t v25 = v24;

    *(void *)(v20 + 32) = v23;
    *(void *)(v20 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v25;
    uint64_t v38 = (void *)sub_1000079A0(&qword_1004594D8);
    *(void *)&__int128 v37 = v20;
    sub_100015330(&v37, v36);
    char v26 = swift_isUniquelyReferenced_nonNull_native(v16);
    *(void *)&__int128 v35 = v16;
    sub_100079180(v36, 0x7364496D616461LL, 0xE700000000000000LL, v26);
    uint64_t v16 = (void *)v35;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  unsigned __int8 v27 = sub_100068B40( [a1 logCode],  objc_msgSend(a1, "updateType") != 0);
  uint64_t v28 = sub_100066354(v27);
  uint64_t v38 = &type metadata for String;
  *(void *)&__int128 v37 = v28;
  *((void *)&v37 + 1) = v29;
  sub_100015330(&v37, v36);
  char v30 = swift_isUniquelyReferenced_nonNull_native(v16);
  *(void *)&__int128 v35 = v16;
  sub_100079180(v36, 0x436C6C6174736E69LL, 0xEE00747865746E6FLL, v30);
  uint64_t v11 = v35;
  swift_bridgeObjectRelease(0x8000000000000000LL);
  uint64_t v31 = sub_100069C08();
  if (v32)
  {
    uint64_t v38 = &type metadata for String;
    *(void *)&__int128 v37 = v31;
    *((void *)&v37 + 1) = v32;
    sub_100015330(&v37, v36);
    char v33 = swift_isUniquelyReferenced_nonNull_native(v11);
    *(void *)&__int128 v35 = v11;
    sub_100079180(v36, 0x6449746E65696C63LL, 0xE800000000000000LL, v33);
    uint64_t v11 = v35;
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  return v11;
}

uint64_t sub_10006A7D0(uint64_t result)
{
  uint64_t v1 = result;
  if (!((unint64_t)result >> 62))
  {
    uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
    return sub_10001DA2C((uint64_t)_swiftEmptyArrayStorage);
  }

  if (result < 0) {
    uint64_t v30 = result;
  }
  else {
    uint64_t v30 = result & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(result);
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v30);
  unint64_t result = swift_bridgeObjectRelease(v1);
  if (!v2) {
    return sub_10001DA2C((uint64_t)_swiftEmptyArrayStorage);
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
    goto LABEL_33;
  }

  unint64_t v3 = v1 & 0xC000000000000001LL;
  swift_bridgeObjectRetain(v1);
  uint64_t v4 = 0LL;
  double v5 = _swiftEmptyArrayStorage;
  do
  {
    if (v3) {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v1);
    }
    else {
      id v7 = *(id *)(v1 + 8 * v4 + 32);
    }
    char v8 = v7;
    id v9 = sub_100323DD0(v7);
    if (v9)
    {
      uint64_t v10 = v9;
      if ([v9 longLongValue])
      {
        id v11 = [v10 stringValue];
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        uint64_t v14 = v13;

        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0) {
          double v5 = sub_100088568(0LL, v5[2] + 1LL, 1, v5);
        }
        unint64_t v16 = v5[2];
        unint64_t v15 = v5[3];
        if (v16 >= v15 >> 1) {
          double v5 = sub_100088568((void *)(v15 > 1), v16 + 1, 1, v5);
        }
        void v5[2] = v16 + 1;
        uint64_t v6 = &v5[2 * v16];
        v6[4] = v12;
        v6[5] = v14;
        unint64_t v3 = v1 & 0xC000000000000001LL;
      }
    }

    ++v4;
  }

  while (v2 != v4);
  swift_bridgeObjectRelease(v1);
  if (!v5[2])
  {
    unint64_t result = swift_bridgeObjectRelease(v5);
    if (v3) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }

  char v33 = (void *)sub_1000079A0(&qword_1004594D8);
  *(void *)&__int128 v32 = v5;
  sub_100015330(&v32, v31);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100079180(v31, 0x7364496D616461LL, 0xE700000000000000LL, isUniquelyReferenced_nonNull_native);
  unint64_t result = swift_bridgeObjectRelease(0x8000000000000000LL);
  if (!v3)
  {
LABEL_21:
    if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      id v18 = *(id *)(v1 + 32);
      goto LABEL_23;
    }

uint64_t sub_10006AB8C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  id v11 = (char *)&v64 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v64 - v12;
  uint64_t v14 = objc_opt_self(&OBJC_CLASS___URLBag);
  id v15 = sub_100255630(v14);
  id v16 = sub_1002563D0(v15, @"hideableSystemApps");

  id v68 = 0LL;
  id v17 = [v16 valueWithError:&v68];

  id v18 = v68;
  if (!v17)
  {
    id v35 = v68;
    uint64_t v36 = _convertNSErrorToError(_:)(v18);

    uint64_t v38 = swift_willThrow(v37);
    static Logger.metrics.getter(v38);
    swift_errorRetain(v36, v39);
    uint64_t v41 = swift_errorRetain(v36, v40);
    uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
    os_log_type_t v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v65 = v4;
      uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v45 = (void *)swift_slowAlloc(32LL, -1LL);
      id v68 = v45;
      *(_DWORD *)uint64_t v44 = 136446210;
      uint64_t v66 = v36;
      swift_errorRetain(v36, v46);
      uint64_t v47 = sub_1000079A0(&qword_100459B50);
      uint64_t v48 = String.init<A>(describing:)(&v66, v47);
      unint64_t v50 = v49;
      uint64_t v66 = sub_100088DB4(v48, v49, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v44 + 4, v44 + 12);
      swift_bridgeObjectRelease(v50);
      swift_errorRelease(v36);
      swift_errorRelease(v36);
      _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "Failed to fetch system apps from the bag: %{public}s",  v44,  0xCu);
      swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v44, -1LL, -1LL);

      swift_errorRelease(v36);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v65);
      return 0LL;
    }

    swift_errorRelease(v36);
    swift_errorRelease(v36);
    swift_errorRelease(v36);

    uint64_t v55 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v56 = v8;
LABEL_27:
    v55(v56, v4);
    return 0LL;
  }

  id v68 = 0LL;
  id v19 = v18;
  uint64_t v20 = sub_1000079A0(&qword_1004587A8);
  static Array._conditionallyBridgeFromObjectiveC(_:result:)(v17, &v68, v20);

  NSString v22 = v68;
  if (!v68)
  {
    uint64_t v51 = static Logger.metrics.getter(v21);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = static os_log_type_t.error.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "System apps from the bag aren't in the expected format",  v54,  2u);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    uint64_t v55 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v56 = v11;
    goto LABEL_27;
  }

  uint64_t v23 = *((void *)v68 + 2);
  if (!v23)
  {
LABEL_24:
    uint64_t v57 = swift_bridgeObjectRelease(v22);
    static Logger.metrics.getter(v57);
    uint64_t v58 = swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
    os_log_type_t v60 = static os_log_type_t.error.getter(v59);
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v62 = (void *)swift_slowAlloc(32LL, -1LL);
      id v68 = v62;
      uint64_t v65 = v4;
      *(_DWORD *)uint64_t v61 = 136446210;
      swift_bridgeObjectRetain(a2);
      uint64_t v66 = sub_100088DB4(a1, a2, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67, v61 + 4, v61 + 12);
      swift_bridgeObjectRelease_n(a2, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "No system app found for %{public}s", v61, 0xCu);
      swift_arrayDestroy(v62, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1LL, -1LL);
      swift_slowDealloc(v61, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v65);
      return 0LL;
    }

    swift_bridgeObjectRelease_n(a2, 2LL);
    uint64_t v55 = *(void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v56 = v13;
    goto LABEL_27;
  }

  swift_bridgeObjectRetain(v68);
  uint64_t v24 = 0LL;
  while (1)
  {
    uint64_t v25 = v22[v24 + 4];
    if (!*(void *)(v25 + 16)) {
      goto LABEL_6;
    }
    swift_bridgeObjectRetain(v22[v24 + 4]);
    unint64_t v26 = sub_100023F7C(0x692D656C646E7562LL, 0xE900000000000064LL);
    if ((v27 & 1) != 0)
    {
      uint64_t v28 = (void *)(*(void *)(v25 + 56) + 16 * v26);
      uint64_t v29 = v28[1];
      BOOL v30 = *v28 == a1 && v29 == a2;
      if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v28, v29, a1, a2, 0LL) & 1) != 0) {
        break;
      }
    }

    swift_bridgeObjectRelease(v25);
LABEL_6:
    if (v23 == ++v24)
    {
      swift_bridgeObjectRelease(v22);
      goto LABEL_24;
    }
  }

  swift_bridgeObjectRelease_n(v22, 2LL);
  if (*(void *)(v25 + 16))
  {
    unint64_t v31 = sub_100023F7C(25705LL, 0xE200000000000000LL);
    if ((v32 & 1) != 0)
    {
      char v33 = (uint64_t *)(*(void *)(v25 + 56) + 16 * v31);
      uint64_t v34 = *v33;
      swift_bridgeObjectRetain(v33[1]);
      swift_bridgeObjectRelease(v25);
      return v34;
    }
  }

  swift_bridgeObjectRelease(v25);
  return 0LL;
}

id sub_10006B174(void *a1, void *a2)
{
  id v209 = a2;
  uint64_t v4 = sub_1000079A0((uint64_t *)&unk_100459410);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v195 = (uint64_t)&v188 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v188 - v8;
  __chkstk_darwin(v7);
  uint64_t v200 = (char *)&v188 - v10;
  uint64_t v11 = type metadata accessor for Date(0LL);
  unint64_t v201 = *(void **)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v194 = (char *)&v188 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  __int128 v198 = (char *)&v188 - v14;
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  __int128 v196 = (char *)&v188 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  __int128 v199 = (char *)&v188 - v20;
  __chkstk_darwin(v19);
  __int128 v197 = (char *)&v188 - v21;
  NSString v22 = (void (*)(char *, uint64_t, uint64_t))&v2[OBJC_IVAR____TtC9appstored20AppInstallationEvent_topic];
  *(void *)NSString v22 = 0xD000000000000014LL;
  *((void *)v22 + 1) = 0x80000001003450A0LL;
  id v208 = v22;
  uint64_t v207 = OBJC_IVAR____TtC9appstored20AppInstallationEvent_supplementalFields;
  *(void *)&v2[OBJC_IVAR____TtC9appstored20AppInstallationEvent_supplementalFields] = &off_1003DB910;
  *(void *)&v2[OBJC_IVAR____TtC9appstored20AppInstallationEvent_defaultIdentifierResetInterval] = 0x40F5180000000000LL;
  v2[OBJC_IVAR____TtC9appstored20AppInstallationEvent_manateeDomain] = 0;
  uint64_t v23 = OBJC_IVAR____TtC9appstored20AppInstallationEvent_identifierResetIntervalBagKey;
  uint64_t v24 = v2;
  NSString v25 = String._bridgeToObjectiveC()();
  uint64_t v206 = v23;
  *(void *)&v2[v23] = v25;
  v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_includeClientID] = 1;
  unint64_t v26 = &v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_diagnosticsSubmissionBugType];
  void *v26 = 0LL;
  v26[1] = 0LL;
  v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_preventSampling] = 2;
  uint64_t v204 = OBJC_IVAR____TtC9appstored20AppInstallationEvent_basePropertiesToRemove;
  *(void *)&v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_basePropertiesToRemove] = 0LL;
  uint64_t v205 = OBJC_IVAR____TtC9appstored20AppInstallationEvent_eventTimeOverride;
  *(void *)&v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_eventTimeOverride] = 0LL;
  char v27 = &v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_eventType];
  strcpy(&v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_eventType], "packageInstall");
  v27[15] = -18;
  id v28 = sub_1001E26D0(a1, (uint64_t)@"log_code");
  if (!v28)
  {

LABEL_9:
    goto LABEL_10;
  }

  id v29 = v28;
  uint64_t v189 = v11;
  unint64_t v193 = v9;
  uint64_t v190 = v16;
  uint64_t v191 = v15;
  id v203 = v24;
  uint64_t v202 = a1;
  uint64_t v30 = sub_1000079A0(&qword_10045A018);
  uint64_t inited = swift_initStackObject(v30, v217);
  *(_OWORD *)(inited + 16) = xmmword_100373A90;
  *(void *)(inited + 32) = @"UPP";
  uint64_t v32 = inited + 32;
  *(void *)(inited + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = @"MNF";
  static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  uint64_t v34 = v33;
  id v35 = v29;
  NSString v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
  uint64_t v37 = @"UPP";
  uint64_t v38 = @"MNF";
  LOBYTE(v34) = sub_100085DB0((uint64_t)v36, inited);

  swift_setDeallocating(inited);
  uint64_t v39 = *(void *)(inited + 16);
  type metadata accessor for AppInstallLogCode(0LL);
  swift_arrayDestroy(v32, v39, v40);
  if ((v34 & 1) != 0)
  {

    uint64_t v24 = v203;
LABEL_10:
    swift_bridgeObjectRelease(*((void *)v208 + 1));
    swift_bridgeObjectRelease(*(void *)&v2[v207]);

    swift_bridgeObjectRelease(v26[1]);
    swift_bridgeObjectRelease(*(void *)&v24[v204]);

    uint64_t v45 = *((void *)v27 + 1);
    swift_bridgeObjectRelease(v45);
    uint64_t v46 = type metadata accessor for AppInstallationEvent();
    swift_deallocPartialClassInstance(v24, v46, 232LL, 7LL);
    return 0LL;
  }

  id v192 = v35;
  BOOL v41 = sub_10006D9EC();
  uint64_t v24 = v203;
  if (!v41)
  {

    goto LABEL_9;
  }

  uint64_t v42 = v202;
  os_log_type_t v43 = sub_10021B614(v202);
  *(void *)&v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_logKey] = v43;
  if ((sub_1001E2598(v42, (uint64_t)@"redownload") & 1) != 0)
  {
    char v44 = 4;
  }

  else
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v192);
    uint64_t v50 = v49;
    NSString v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v50);
    char v52 = sub_10021B5C4(v42);
    char v44 = sub_100068B40(v51, v52);
  }

  id v53 = v209;
  v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_context] = v44;
  uint64_t v54 = sub_100296DB0(v42, (uint64_t)@"failure_error");
  if (v54
    && (__int128 v214 = v54,
        uint64_t v55 = sub_1000079A0(&qword_100459B50),
        uint64_t v56 = sub_10001517C(0LL, &qword_100458C78, &OBJC_CLASS___NSError_ptr),
        (swift_dynamicCast(&v212, &v214, v55, v56, 6LL) & 1) != 0))
  {
    uint64_t v57 = (void *)v212;
    id v58 = [(id)v212 code];
    uint64_t v59 = &v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_errorCode];
    *(void *)uint64_t v59 = v58;
    v59[8] = 0;
    id v60 = [v57 domain];
    uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    uint64_t v63 = v62;

    uint64_t v64 = (uint64_t *)&v203[OBJC_IVAR____TtC9appstored20AppInstallationEvent_errorDomain];
    *uint64_t v64 = v61;
    v64[1] = v63;
    uint64_t v42 = v202;
    uint64_t v24 = v203;
  }

  else
  {
    uint64_t v65 = &v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_errorCode];
    *(void *)uint64_t v65 = 0LL;
    v65[8] = 1;
    uint64_t v66 = &v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_errorDomain];
    *uint64_t v66 = 0LL;
    v66[1] = 0LL;
  }

  id v67 = v53;
  char v68 = sub_10021B5C4(v42);
  id v209 = v67;
  v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_packageType] = sub_1000698B8(v67, v68);
  id v69 = [v42 valueForProperty:@"metrics_fields"];
  if (v69)
  {
    id v70 = v69;
    _bridgeAnyObjectToAny(_:)(&v212, v69);
    swift_unknownObjectRelease(v70);
  }

  else
  {
    __int128 v212 = 0u;
    __int128 v213 = 0u;
  }

  sub_1000151F8((uint64_t)&v212, (uint64_t)&v214);
  if (v216)
  {
    uint64_t v71 = sub_1000079A0(&qword_100459DE0);
    if (swift_dynamicCast(&v210, &v214, (char *)&type metadata for Any + 8, v71, 6LL))
    {
      uint64_t v72 = v210;
      goto LABEL_25;
    }
  }

  else
  {
    sub_100015240((uint64_t)&v214, (uint64_t *)&unk_1004594B0);
  }

  uint64_t v72 = _swiftEmptyDictionarySingleton;
LABEL_25:
  *(void *)&v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_additionalFields] = v72;
  if (qword_100458098 != -1) {
    swift_once(&qword_100458098, sub_10006D870);
  }
  uint64_t v73 = objc_opt_self(&OBJC_CLASS___URLBag);
  id v74 = sub_100255630(v73);
  NSString v75 = String._bridgeToObjectiveC()();
  double v76 = sub_1002572F8(v74, v75, 0.0);

  *(double *)&v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_sampleRate] = v76;
  id v77 = sub_1001E26D0(v42, (uint64_t)@"storefront");
  if (v77)
  {
    uint64_t v78 = v77;
    uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v77);
    unint64_t v81 = v80;

    id v82 = (id)sub_10007BCDC(v79, v81);
    if ((v83 & 1) == 0)
    {
      char v84 = 0;
      goto LABEL_50;
    }
  }

  else
  {
    id v85 = sub_10021B6D0(v42);
    if (v85)
    {
      uint64_t v86 = v85;
      uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      uint64_t v89 = v88;

      id v90 = objc_allocWithZone(&OBJC_CLASS___LSApplicationRecord);
      id v91 = sub_1000678F8(v87, v89, 0);
      uint64_t v101 = v91;
      if (v91)
      {
        id v186 = [v91 iTunesMetadata];
        id v187 = [v186 storeFront];

        if (v187)
        {
          id v100 = [v101 iTunesMetadata];
          id v82 = [v100 storeFront];
          char v84 = 0;
LABEL_49:

LABEL_50:
          uint64_t v110 = (uint64_t)v200;
          char v111 = &v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_storeFrontID];
          *(void *)char v111 = v82;
          v111[8] = v84;
          id v112 = sub_10021B880(v42);
          if (v112)
          {
            uint64_t v113 = v112;
            id v114 = [v112 stringValue];

            uint64_t v115 = static String._unconditionallyBridgeFromObjectiveC(_:)(v114);
            uint64_t v117 = v116;

            swift_bridgeObjectRetain(v117);
            uint64_t v118 = (uint64_t)v193;
            id v119 = v192;
            uint64_t v120 = v189;
LABEL_52:
            uint64_t v121 = sub_1000079A0(&qword_100459530);
            uint64_t v122 = (void *)swift_allocObject(v121, 48LL, 7LL);
            *((_OWORD *)v122 + 1) = xmmword_100372930;
            v122[4] = v115;
            v122[5] = v117;
            goto LABEL_64;
          }

          uint64_t v123 = sub_100066354(v24[OBJC_IVAR____TtC9appstored20AppInstallationEvent_context]);
          uint64_t v125 = v124;
          if (v123 == 0x6E496D6574737973LL && v124 == 0xED00006C6C617473LL)
          {
            swift_bridgeObjectRelease(0xED00006C6C617473LL);
            uint64_t v118 = (uint64_t)v193;
            id v119 = v192;
            uint64_t v120 = v189;
            uint64_t v126 = v197;
          }

          else
          {
            char v127 = _stringCompareWithSmolCheck(_:_:expecting:)( v123,  v124,  0x6E496D6574737973LL,  0xED00006C6C617473LL,  0LL);
            id v128 = (id)swift_bridgeObjectRelease(v125);
            uint64_t v118 = (uint64_t)v193;
            id v119 = v192;
            uint64_t v120 = v189;
            uint64_t v126 = v197;
            if ((v127 & 1) == 0) {
              goto LABEL_60;
            }
          }

          id v128 = sub_10021B6D0(v42);
          if (v128)
          {
            uint64_t v129 = v128;
            uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
            unint64_t v132 = v131;

            uint64_t v115 = sub_10006AB8C(v130, v132);
            uint64_t v117 = v133;
            unint64_t v134 = v132;
            uint64_t v110 = (uint64_t)v200;
            id v128 = (id)swift_bridgeObjectRelease(v134);
            if (v117)
            {
              swift_bridgeObjectRetain(v117);
              goto LABEL_52;
            }
          }

LABEL_104:
  __break(1u);
  return result;
}

uint64_t getEnumTagSinglePayload for AppInstallationEvent.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }

uint64_t storeEnumTagSinglePayload for AppInstallationEvent.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_10006C6E0 + 4 * byte_100373EDD[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_10006C714 + 4 * byte_100373ED8[v4]))();
}

uint64_t sub_10006C714(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006C71C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006C724LL);
  }
  return result;
}

uint64_t sub_10006C730(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006C738LL);
  }
  *(_BYTE *)id result = a2 + 9;
  return result;
}

uint64_t sub_10006C73C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006C744(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppInstallationEvent.CodingKeys()
{
  return &type metadata for AppInstallationEvent.CodingKeys;
}

unint64_t sub_10006C764()
{
  unint64_t result = qword_10045A030;
  if (!qword_10045A030)
  {
    unint64_t result = swift_getWitnessTable(&unk_100374214, &type metadata for AppInstallationEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10045A030);
  }

  return result;
}

unint64_t sub_10006C7AC()
{
  unint64_t result = qword_10045A038;
  if (!qword_10045A038)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037414C, &type metadata for AppInstallationEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10045A038);
  }

  return result;
}

unint64_t sub_10006C7F4()
{
  unint64_t result = qword_10045A040;
  if (!qword_10045A040)
  {
    unint64_t result = swift_getWitnessTable(&unk_100374174, &type metadata for AppInstallationEvent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10045A040);
  }

  return result;
}

uint64_t sub_10006C838()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC9appstored14UpdatesContext_reason);
  uint64_t result = 0x746E756F636341LL;
  switch(v1)
  {
    case 0LL:
      uint64_t result = 0x6C61756E614DLL;
      break;
    case 1LL:
      uint64_t result = 0x756F72676B636142LL;
      break;
    case 2LL:
      uint64_t result = 0x6F6974617267694DLL;
      break;
    case 3LL:
      uint64_t result = 0x65726F74736552LL;
      break;
    case 4LL:
      uint64_t result = 0x6E6F7268636E7953LL;
      break;
    case 5LL:
      uint64_t result = 0x4120657461647055LL;
      break;
    case 6LL:
      return result;
    case 7LL:
      uint64_t result = 5063757LL;
      break;
    case 8LL:
      uint64_t result = 0x2068736572666552LL;
      break;
    default:
      type metadata accessor for LoadSoftwareUpdatesReason(0LL);
      uint64_t v4 = v1;
      uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v3, &v4, v3, &type metadata for Int);
      __break(1u);
      break;
  }

  return result;
}

uint64_t sub_10006CC54(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(a1, 0LL);
  }
  swift_errorRetain(a1, a2);
  a3(0LL, a1);
  return sub_10006D860(a1, 1);
}

void sub_10006CDB4(objc_class *a1, uint64_t a2, uint64_t a3)
{
  Class isa = a1;
  if (a1)
  {
    sub_10006D130();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
  }

  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)(a2);
  }
  else {
    uint64_t v6 = 0LL;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);
}

uint64_t sub_10006CEEC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (a2)
  {
    unint64_t v7 = sub_10006D130();
    uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }

  swift_retain(v5);
  id v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_10006CF68(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  if (a1)
  {
    if (!a2) {
      return a3();
    }
  }

  else if (!a2)
  {
    type metadata accessor for ASDError(0LL);
    uint64_t v8 = v7;
    uint64_t v11 = 500LL;
    unint64_t v9 = sub_10006D16C((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v10 = sub_10006D294();
    _BridgedStoredNSError.init(_:userInfo:)(&v12, &v11, v9, v8, v10);
    uint64_t v6 = v12;
    goto LABEL_6;
  }

  uint64_t v6 = a2;
LABEL_6:
  swift_errorRetain(a2, a2);
  ((void (*)(uint64_t, uint64_t))a3)(v6, 1LL);
  return swift_errorRelease(v6);
}

uint64_t type metadata accessor for UpdatesContext()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored14UpdatesContext);
}

uint64_t sub_10006D0EC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10006D110(uint64_t a1, uint64_t a2)
{
  return sub_10006CF68(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_10006D118(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006D128(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10006D130()
{
  unint64_t result = qword_100459588;
  if (!qword_100459588)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___ASDSoftwareUpdate);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100459588);
  }

  return result;
}

unint64_t sub_10006D16C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_1000079A0(&qword_1004588C0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10006D340(v7, (uint64_t)&v16);
    uint64_t v8 = v16;
    uint64_t v9 = v17;
    unint64_t result = sub_10006D2DC(v16, v17);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = (unint64_t)sub_100015330(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 48LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10006D294()
{
  unint64_t result = qword_100458220;
  if (!qword_100458220)
  {
    type metadata accessor for ASDError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1003727F8, v1);
    atomic_store(result, (unint64_t *)&qword_100458220);
  }

  return result;
}

unint64_t sub_10006D2DC(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = Hasher._finalize()();
  return sub_10006D388(a1, a2, v4);
}

uint64_t sub_10006D340(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0(&qword_100458D48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10006D388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1LL << *(_BYTE *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if (((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
  {
    uint64_t v9 = *(void *)(v3 + 48);
    unint64_t v10 = (void *)(v9 + 16 * i);
    uint64_t v11 = v10[1];
    if ((*v10 != a1 || v11 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
    {
      uint64_t v13 = ~v5;
      unint64_t i = (i + 1) & v13;
      if (((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0)
      {
        BOOL v14 = (void *)(v9 + 16 * i);
        uint64_t v15 = v14[1];
        if ((*v14 != a1 || v15 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0LL) & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v13; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFF8LL)) >> i) & 1) != 0; unint64_t i = (i + 1) & v13)
          {
            uint64_t v17 = (void *)(v9 + 16 * i);
            uint64_t v18 = v17[1];
            if (*v17 == a1 && v18 == a2) {
              break;
            }
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0) {
              break;
            }
          }
        }
      }
    }
  }

  return i;
}

id sub_10006D4CC( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, uint64_t a9, char a10)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v10, a2);
  uint64_t v18 = (uint64_t *)&v10[OBJC_IVAR____TtC9appstored14UpdatesContext_callbackHandler];
  *uint64_t v18 = a4;
  v18[1] = a5;
  v10[OBJC_IVAR____TtC9appstored14UpdatesContext_includeMetrics] = a6;
  v10[OBJC_IVAR____TtC9appstored14UpdatesContext_isVPPLookup] = a7;
  if (!a3)
  {
    if (a2)
    {
      uint64_t v21 = v10;
      sub_10001B678(a4, a5);
      id v20 = sub_100316C6C(a2, v22);
      if (v20) {
        goto LABEL_8;
      }
    }

    else
    {
      uint64_t v23 = v10;
      sub_10001B678(a4, a5);
    }

    id v20 = [objc_allocWithZone((Class)type metadata accessor for LogKey()) init];
    goto LABEL_8;
  }

  uint64_t v19 = v10;
  sub_10001B678(a4, a5);
  id v20 = a3;
LABEL_8:
  *(void *)&v10[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey] = v20;
  *(void *)&v10[OBJC_IVAR____TtC9appstored14UpdatesContext_reason] = a1;
  *(void *)&v10[OBJC_IVAR____TtC9appstored14UpdatesContext_requestToken] = a2;
  v10[OBJC_IVAR____TtC9appstored14UpdatesContext_userInitiated] = a8 & 1;
  uint64_t v24 = &v10[OBJC_IVAR____TtC9appstored14UpdatesContext_targetedItemID];
  *(void *)uint64_t v24 = a9;
  v24[8] = a10 & 1;
  id v25 = a2;
  id v26 = a3;

  v30.receiver = v10;
  v30.super_class = ObjectType;
  return objc_msgSendSuper2(&v30, "init");
}

id sub_10006D648( uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, void *a9)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v9, a2);
  if (a4)
  {
    uint64_t v18 = swift_allocObject(&unk_1003DFA00, 32LL, 7LL);
    *(void *)(v18 + 16) = a4;
    *(void *)(v18 + 24) = a5;
    uint64_t v19 = (uint64_t (**)(uint64_t, char))&v9[OBJC_IVAR____TtC9appstored14UpdatesContext_callbackHandler];
    *uint64_t v19 = sub_10006D854;
    v19[1] = (uint64_t (*)(uint64_t, char))v18;
  }

  else
  {
    id v20 = &v9[OBJC_IVAR____TtC9appstored14UpdatesContext_callbackHandler];
    *id v20 = 0LL;
    v20[1] = 0LL;
  }

  v9[OBJC_IVAR____TtC9appstored14UpdatesContext_includeMetrics] = a6 & 1;
  v9[OBJC_IVAR____TtC9appstored14UpdatesContext_isVPPLookup] = a7 & 1;
  if (a3)
  {
    uint64_t v21 = v9;
    sub_10001B678(a4, a5);
    id v22 = a3;
    goto LABEL_11;
  }

  if (a2)
  {
    uint64_t v23 = v9;
    sub_10001B678(a4, a5);
    id v22 = sub_100316C6C(a2, v24);
    if (v22) {
      goto LABEL_11;
    }
  }

  else
  {
    id v25 = v9;
    sub_10001B678(a4, a5);
  }

  id v22 = [objc_allocWithZone((Class)type metadata accessor for LogKey()) init];
LABEL_11:
  *(void *)&v9[OBJC_IVAR____TtC9appstored14UpdatesContext_logKey] = v22;
  *(void *)&v9[OBJC_IVAR____TtC9appstored14UpdatesContext_reason] = a1;
  *(void *)&v9[OBJC_IVAR____TtC9appstored14UpdatesContext_requestToken] = a2;
  v9[OBJC_IVAR____TtC9appstored14UpdatesContext_userInitiated] = a8 & 1;
  id v26 = a2;
  id v27 = a3;
  if (a9) {
    id v28 = [a9 longLongValue];
  }
  else {
    id v28 = 0LL;
  }
  id v29 = &v9[OBJC_IVAR____TtC9appstored14UpdatesContext_targetedItemID];
  *(void *)id v29 = v28;
  v29[8] = a9 == 0LL;

  v32.receiver = v9;
  v32.super_class = ObjectType;
  return objc_msgSendSuper2(&v32, "init");
}

uint64_t sub_10006D828()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10006D84C(objc_class *a1, uint64_t a2)
{
}

uint64_t sub_10006D854(uint64_t a1, char a2)
{
  return sub_10006CC54(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_10006D860(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  else {
    return swift_bridgeObjectRelease(a1);
  }
}

id sub_10006D870()
{
  id result = [objc_allocWithZone((Class)type metadata accessor for QOSMetrics()) init];
  qword_10045A0B0 = (uint64_t)result;
  return result;
}

id sub_10006D8F0()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for QOSMetrics();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for QOSMetrics()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored10QOSMetrics);
}

uint64_t sub_10006D944(uint64_t result, double a2, double a3)
{
  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }

  double v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000LL) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  uint64_t v6 = result;
  uint64_t v7 = 0LL;
  id result = swift_stdlib_random(&v7, 8LL);
  return result;
}

BOOL sub_10006D9EC()
{
  if (qword_100458098 != -1) {
    swift_once(&qword_100458098, sub_10006D870);
  }
  if (qword_100458010 != -1) {
    swift_once(&qword_100458010, sub_1000173FC);
  }
  uint64_t v0 = *(void *)(qword_100462888 + OBJC_IVAR____TtC9appstored17RestrictionsCache_lockedCachedValues);
  swift_retain(v0);
  os_unfair_lock_lock((os_unfair_lock_t)(v0 + 20));
  sub_1000174F4((_BYTE *)(v0 + 16), &v9);
  os_unfair_lock_unlock((os_unfair_lock_t)(v0 + 20));
  int v1 = v9;
  swift_release(v0);
  if (v1 != 1) {
    return 0LL;
  }
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___URLBag);
  id v3 = sub_100255630(v2);
  NSString v4 = String._bridgeToObjectiveC()();
  double v5 = sub_1002572F8(v3, v4, 0.0);

  if (v5 <= 0.0) {
    return 0LL;
  }
  sub_10006D944(v6, 0.0, 1.0);
  return v7 < v5;
}

uint64_t sub_10006DB44@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v17 = a1;
  uint64_t v4 = type metadata accessor for AppInstallationEvent();
  uint64_t v5 = sub_10007086C((unint64_t *)&qword_100459FD8, (uint64_t)&unk_1003740FC);
  uint64_t result = dispatch thunk of JSONEncoder.encode<A>(_:)(&v17, v4, v5);
  if (!v2)
  {
    uint64_t v8 = result;
    unint64_t v9 = v7;
    unint64_t v10 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v16 = 0LL;
    id v12 = [v10 JSONObjectWithData:isa options:4 error:&v16];

    id v13 = v16;
    if (v12)
    {
      _bridgeAnyObjectToAny(_:)(a2, v12);
      sub_100007B14(v8, v9);
      return swift_unknownObjectRelease(v12);
    }

    else
    {
      BOOL v14 = v13;
      _convertNSErrorToError(_:)(v13);

      swift_willThrow(v15);
      return sub_100007B14(v8, v9);
    }
  }

  return result;
}

void sub_10006DC9C(char *a1)
{
}

void sub_10006DCA8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_10006DCE8()
{
  return Hasher._finalize()();
}

void sub_10006DD8C()
{
  __asm { BR              X10 }

uint64_t sub_10006DDBC(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xED00007265626D75LL);
}

void sub_10006DE4C()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }

Swift::Int sub_10006DE88()
{
  return Hasher._finalize()();
}

unint64_t sub_10006DF2C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_10006EFCC(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10006DF58()
{
  return ((uint64_t (*)(void))((char *)sub_10006DF7C + 4 * byte_1003742BF[*v0]))();
}

void sub_10006DF7C(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_10006DFA4(char *a1@<X8>)
{
  a1[15] = -18;
}

void sub_10006DFE0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

Swift::Int sub_10006E004()
{
  return Hasher._finalize()();
}

uint64_t sub_10006E058(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000026LL, 0x8000000100342100LL);
}

Swift::Int sub_10006E074()
{
  return Hasher._finalize()();
}

uint64_t sub_10006E0C4@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DB9D0, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_10006E114(void *a1@<X8>)
{
  *a1 = 0xD000000000000026LL;
  a1[1] = 0x8000000100342100LL;
}

uint64_t sub_10006E134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a5;
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v5[15] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[16] = v7;
  v5[17] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10006E194, 0LL, 0LL);
}

uint64_t sub_10006E194()
{
  uint64_t v1 = (void **)sub_100015F50(*(void **)(v0 + 112), *(void *)(*(void *)(v0 + 112) + 24LL));
  id v2 = sub_1000701B0(*v1);
  *(void *)(v0 + 144) = v2;
  if (v2)
  {
    Swift::String v3 = v2;
    uint64_t v4 = *(void *)(v0 + 112);
    static Logger.metrics.getter(v2);
    sub_10004F9E0(v4, v0 + 16);
    uint64_t v5 = sub_10004F9E0(v4, v0 + 56);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v9 = *(void *)(v0 + 136);
    uint64_t v11 = *(void *)(v0 + 120);
    if (v8)
    {
      uint64_t v32 = *(void *)(v0 + 120);
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      os_log_type_t type = v7;
      id v13 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = v30;
      *(_DWORD *)uint64_t v12 = 138412546;
      uint64_t v31 = v10;
      os_log_t log = v6;
      *(void *)(v0 + 96) = v14;
      id v15 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v12 + 4, v12 + 12);
      *id v13 = v14;
      sub_100015340((void *)(v0 + 16));
      *(_WORD *)(v12 + 12) = 2082;
      uint64_t v17 = *v16;
      unint64_t v18 = v16[1];
      swift_bridgeObjectRetain(v18);
      *(void *)(v0 + 104) = sub_100088DB4(v17, v18, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease(v18);
      sub_100015340((void *)(v0 + 56));
      _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "[%@] Enqueuing event for topic: %{public}s",  (uint8_t *)v12,  0x16u);
      uint64_t v19 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v13, 1LL, v19);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v9, v32);
    }

    else
    {
      sub_100015340((void *)(v0 + 16));
      sub_100015340((void *)(v0 + 56));

      (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    }

    id v21 = objc_allocWithZone((Class)type metadata accessor for ASEMetrics());
    *(void *)(v0 + 152) = sub_10002E0DC(0LL);
    uint64_t v22 = sub_1000079A0(&qword_100458EE0);
    uint64_t v23 = swift_allocObject(v22, 40LL, 7LL);
    *(_OWORD *)(v23 + 16) = xmmword_100373960;
    *(void *)(v23 + 32) = v3;
    uint64_t v33 = v23;
    specialized Array._endMutation()(v23);
    uint64_t v24 = v33;
    *(void *)(v0 + 16_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v33;
    uint64_t v25 = dword_1004590DC;
    id v26 = v3;
    id v27 = (void *)swift_task_alloc(v25);
    *(void *)(v0 + 168) = v27;
    void *v27 = v0;
    v27[1] = sub_10006E504;
    return sub_10002E5D4(v24, 1);
  }

  else
  {
    swift_task_dealloc(*(void *)(v0 + 136));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10006E504()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160LL);
  id v2 = *(void **)(*(void *)v0 + 152LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 168LL));
  swift_bridgeObjectRelease(v1);

  return swift_task_switch(sub_10006E568, 0LL, 0LL);
}

uint64_t sub_10006E568()
{
  swift_task_dealloc(*(void *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10006E5A0()
{
  return swift_deallocClassInstance(v0, 16LL, 7LL);
}

uint64_t type metadata accessor for Metrics()
{
  return objc_opt_self(&OBJC_CLASS____TtC9appstored7Metrics);
}

uint64_t storeEnumTagSinglePayload for ManateeDomain(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10006E610 + 4 * byte_1003742C4[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10006E630 + 4 * byte_1003742C9[v4]))();
  }
}

_BYTE *sub_10006E610(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_10006E630(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10006E638(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10006E640(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_10006E648(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_10006E650(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ManateeDomain()
{
  return &type metadata for ManateeDomain;
}

uint64_t getEnumTagSinglePayload for SupplementalField(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xFC) {
    goto LABEL_17;
  }
  if (a2 + 4 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 4) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 4;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 4;
    }
  }

uint64_t storeEnumTagSinglePayload for SupplementalField(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_10006E748 + 4 * byte_1003742D3[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10006E77C + 4 * byte_1003742CE[v4]))();
}

uint64_t sub_10006E77C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006E784(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10006E78CLL);
  }
  return result;
}

uint64_t sub_10006E798(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10006E7A0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_10006E7A4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006E7AC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SupplementalField()
{
  return &type metadata for SupplementalField;
}

unint64_t sub_10006E7CC()
{
  unint64_t result = qword_10045A1B8;
  if (!qword_10045A1B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037439C, &type metadata for SupplementalField);
    atomic_store(result, (unint64_t *)&qword_10045A1B8);
  }

  return result;
}

unint64_t sub_10006E814()
{
  unint64_t result = qword_10045A1C0;
  if (!qword_10045A1C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10037443C, &type metadata for ManateeDomain);
    atomic_store(result, &qword_10045A1C0);
  }

  return result;
}

uint64_t sub_10006E858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1 + 40;
  uint64_t v3 = a2 + 40;
  sub_100017C44(a1, a2);
  return sub_100016B10(v2, v3);
}

uint64_t sub_10006E888(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v9 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(a1 + 64);
  uint64_t v12 = -v9;
  uint64_t v42 = a1;
  uint64_t v43 = a1 + 64;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  else {
    uint64_t v13 = -1LL;
  }
  uint64_t v44 = v10;
  uint64_t v45 = 0LL;
  uint64_t v46 = v13 & v11;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  swift_bridgeObjectRetain(a1);
  swift_retain(a3);
  sub_10006EDD0((uint64_t)&v38);
  if (!*((void *)&v39 + 1))
  {
LABEL_19:
    swift_release(a3);
    swift_bridgeObjectRelease(a1);
    sub_100017CC0(v42);
    return swift_release(v48);
  }

  while (1)
  {
    __int128 v35 = v38;
    __int128 v36 = v39;
    uint64_t v37 = v40;
    sub_100015330(&v41, v34);
    uint64_t v15 = *a5;
    unint64_t v17 = sub_1000240BC((uint64_t)&v35);
    uint64_t v18 = *(void *)(v15 + 16);
    BOOL v19 = (v16 & 1) == 0;
    uint64_t v20 = v18 + v19;
    if (__OFADD__(v18, v19)) {
      break;
    }
    char v21 = v16;
    if (*(void *)(v15 + 24) >= v20)
    {
      if ((a4 & 1) != 0)
      {
        if ((v16 & 1) != 0) {
          goto LABEL_6;
        }
      }

      else
      {
        sub_10007AE1C();
        if ((v21 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    else
    {
      sub_100078704(v20, a4 & 1);
      unint64_t v22 = sub_1000240BC((uint64_t)&v35);
      if ((v21 & 1) != (v23 & 1)) {
        goto LABEL_22;
      }
      unint64_t v17 = v22;
      if ((v21 & 1) != 0)
      {
LABEL_6:
        sub_100016B10(*(void *)(*a5 + 56) + 32 * v17, (uint64_t)v32);
        sub_100016B10((uint64_t)v32, (uint64_t)v33);
        sub_100015340(v32);
        sub_100015340(v34);
        sub_100026A3C((uint64_t)&v35);
        BOOL v14 = (void *)(*(void *)(*a5 + 56) + 32 * v17);
        sub_100015340(v14);
        sub_100015330(v33, v14);
        goto LABEL_7;
      }
    }

    uint64_t v24 = (void *)*a5;
    *(void *)(*a5 + 8 * (v17 >> 6) + 64) |= 1LL << v17;
    uint64_t v25 = v24[6] + 40 * v17;
    __int128 v26 = v35;
    __int128 v27 = v36;
    *(void *)(v25 + 32) = v37;
    *(_OWORD *)uint64_t v25 = v26;
    *(_OWORD *)(v25 + 16) = v27;
    sub_100015330(v34, (_OWORD *)(v24[7] + 32 * v17));
    uint64_t v28 = v24[2];
    BOOL v29 = __OFADD__(v28, 1LL);
    uint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_21;
    }
    void v24[2] = v30;
LABEL_7:
    sub_10006EDD0((uint64_t)&v38);
    a4 = 1;
    if (!*((void *)&v39 + 1)) {
      goto LABEL_19;
    }
  }

  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

void sub_10006EB00()
{
  void (*v7)(uint64_t *__return_ptr, id *);
  uint64_t v8;
  id v9;
  uint64_t v2 = *v0;
  unint64_t v1 = v0[1];
  if (!((unint64_t)*v0 >> 62))
  {
    if (v1 == *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10)) {
      return;
    }
LABEL_8:
    if ((v2 & 0xC000000000000001LL) == 0)
    {
      if ((v1 & 0x8000000000000000LL) != 0)
      {
        __break(1u);
      }

      else if (v1 < *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
        id v5 = *(id *)(v2 + 8 * v1 + 32);
        goto LABEL_12;
      }

      __break(1u);
LABEL_17:
      __break(1u);
      return;
    }

    id v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v1, v2);
LABEL_12:
    unsigned int v6 = v5;
    if (!__OFADD__(v1, 1LL))
    {
      v0[1] = v1 + 1;
      BOOL v7 = (void (*)(uint64_t *__return_ptr, id *))v0[2];
      uint64_t v9 = v5;
      v7(&v8, &v9);

      return;
    }

    goto LABEL_17;
  }

  if (v2 < 0) {
    uint64_t v3 = *v0;
  }
  else {
    uint64_t v3 = v2 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v0);
  uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v3);
  swift_bridgeObjectRelease(v2);
  if (v1 != v4) {
    goto LABEL_8;
  }
}

uint64_t sub_10006EBEC@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    uint64_t v11 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v10);
    uint64_t v13 = *v11;
    uint64_t v12 = v11[1];
    sub_100016B10(*(void *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(void *)&__int128 v23 = v13;
    *((void *)&v23 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }

  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    unint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }

    int64_t v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        unint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          unint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            unint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            int64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              unint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  memset(v24, 0, sizeof(v24));
  __int128 v23 = 0u;
LABEL_23:
  uint64_t *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  _OWORD v1[3] = v7;
  v1[4] = v9;
  BOOL v19 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_100026CD4((uint64_t)&v23, (uint64_t)v22, &qword_100459DC8);
  if (*((void *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    void v21[2] = v22[2];
    v19(v21);
    return sub_100015240((uint64_t)v21, (uint64_t *)&unk_100459DD0);
  }

  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }

  return result;
}

uint64_t sub_10006EDD0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    sub_100017C44(*(void *)(v3 + 48) + 40 * v10, (uint64_t)v25);
    sub_100016B10(*(void *)(v3 + 56) + 32 * v10, (uint64_t)&v25[2] + 8);
    goto LABEL_23;
  }

  int64_t v11 = v5 + 1;
  if (__OFADD__(v5, 1LL))
  {
    __break(1u);
    return result;
  }

  int64_t v12 = (unint64_t)(v6 + 64) >> 6;
  if (v11 < v12)
  {
    unint64_t v13 = *(void *)(v4 + 8 * v11);
    if (v13)
    {
LABEL_7:
      uint64_t v9 = (v13 - 1) & v13;
      unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
      int64_t v7 = v11;
      goto LABEL_3;
    }

    int64_t v14 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v12)
    {
      unint64_t v13 = *(void *)(v4 + 8 * v14);
      if (v13)
      {
LABEL_10:
        int64_t v11 = v14;
        goto LABEL_7;
      }

      int64_t v7 = v5 + 2;
      if (v5 + 3 < v12)
      {
        unint64_t v13 = *(void *)(v4 + 8 * (v5 + 3));
        if (v13)
        {
          int64_t v11 = v5 + 3;
          goto LABEL_7;
        }

        int64_t v14 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v12)
        {
          unint64_t v13 = *(void *)(v4 + 8 * v14);
          if (v13) {
            goto LABEL_10;
          }
          int64_t v11 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v12)
          {
            unint64_t v13 = *(void *)(v4 + 8 * v11);
            if (v13) {
              goto LABEL_7;
            }
            int64_t v7 = v12 - 1;
            int64_t v15 = v5 + 6;
            while (v12 != v15)
            {
              unint64_t v13 = *(void *)(v4 + 8 * v15++);
              if (v13)
              {
                int64_t v11 = v15 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }

  uint64_t v9 = 0LL;
  uint64_t v26 = 0LL;
  memset(v25, 0, sizeof(v25));
LABEL_23:
  uint64_t *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  _OWORD v1[3] = v7;
  v1[4] = v9;
  unint64_t v16 = (void (*)(_OWORD *))v1[5];
  uint64_t result = sub_100026CD4((uint64_t)v25, (uint64_t)&v20, (uint64_t *)&unk_10045A1D0);
  if (*((void *)&v21 + 1))
  {
    void v18[2] = v22;
    void v18[3] = v23;
    uint64_t v19 = v24;
    v18[0] = v20;
    v18[1] = v21;
    v16(v18);
    return sub_100015240((uint64_t)v18, &qword_1004588C8);
  }

  else
  {
    *(void *)(a1 + 64) = 0LL;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }

  return result;
}

unint64_t sub_10006EFCC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003DB938, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_10006F014(void *a1)
{
  uint64_t v26 = type metadata accessor for AppInstallationEvent();
  uint64_t v27 = sub_10007086C((unint64_t *)&qword_100459860, (uint64_t)&unk_100374124);
  v25[0] = a1;
  if ((*(_BYTE *)(*sub_100015F50(v25, v26) + OBJC_IVAR____TtC9appstored20AppInstallationEvent_manateeDomain) & 1) != 0
    || (Swift::String v2 = *(void **)(*sub_100015F50(v25, v26)
                      + OBJC_IVAR____TtC9appstored20AppInstallationEvent_identifierResetIntervalBagKey)) == 0LL)
  {
    id v23 = a1;
    uint64_t v22 = 0LL;
  }

  else
  {
    id v3 = objc_allocWithZone(&OBJC_CLASS___AMSMetricsIdentifierStore);
    id v4 = a1;
    id v5 = v2;
    id v6 = [v3 init];
    NSString v7 = String._bridgeToObjectiveC()();
    [v6 setDomain:v7];

    uint64_t v8 = objc_opt_self(&OBJC_CLASS___URLBag);
    id v9 = sub_100255630(v8);
    double v10 = sub_1002572F8(v9, v5, 86400.0);

    [v6 setResetInterval:v10];
    id v11 = objc_allocWithZone(&OBJC_CLASS___AMSProcessInfo);
    NSString v12 = String._bridgeToObjectiveC()();
    id v13 = [v11 initWithBundleIdentifier:v12];

    [v6 setClientInfo:v13];
    NSString v14 = String._bridgeToObjectiveC()();
    id v15 =  [(id)objc_opt_self(AMSMetricsIdentifierKey) keyWithName:v14 crossDeviceSync:0];

    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v16);
    unint64_t v18 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    unint64_t v17 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v18 >= v17 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1LL);
    }
    uint64_t v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v18, v15);
    specialized Array._endMutation()(v19);
    sub_100070830();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    id v21 = [v6 generateEventFieldsForKeys:isa];

    uint64_t v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v21,  &type metadata for AnyHashable,  (char *)&type metadata for Any + 8,  &protocol witness table for AnyHashable);
  }

  sub_100015340(v25);
  return v22;
}

void *sub_10006F31C(void *a1)
{
  uint64_t v22 = type metadata accessor for Locale(0LL);
  uint64_t v21 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  __int128 v20 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_1000079A0(&qword_100459808);
  void v18[3] = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  void v18[2] = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_1000079A0(&qword_100459810);
  __chkstk_darwin(v4);
  id v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AppInstallationEvent();
  uint64_t v30 = v7;
  uint64_t v31 = sub_10007086C((unint64_t *)&qword_100459860, (uint64_t)&unk_100374124);
  BOOL v29 = a1;
  uint64_t v8 = *(void *)(*sub_100015F50(&v29, v7) + OBJC_IVAR____TtC9appstored20AppInstallationEvent_supplementalFields);
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    v18[1] = v6;
    uint64_t v26 = v8 + 32;
    id v10 = a1;
    uint64_t v27 = v8;
    swift_bridgeObjectRetain(v8);
    unint64_t v24 = 0x8000000100344470LL;
    id v23 = (char *)&type metadata for Any + 8;
    uint64_t v25 = v9;
    if (*(void *)(v27 + 16)) {
      __asm { BR              X8 }
    }

    __break(1u);
    JUMPOUT(0x10006FC54LL);
  }

  id v11 = a1;
  NSString v12 = _swiftEmptyDictionarySingleton;
  id v13 = (void **)sub_100015F50(&v29, v30);
  uint64_t v14 = sub_10006F014(*v13);
  if (v14)
  {
    uint64_t v15 = v14;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    v28[0] = (uint64_t)_swiftEmptyDictionarySingleton;
    sub_10006E888(v15, (uint64_t)sub_10006E858, 0LL, isUniquelyReferenced_nonNull_native, v28);
    NSString v12 = (void *)v28[0];
    swift_bridgeObjectRelease(0x8000000000000000LL);
  }

  sub_100015340(&v29);
  return v12;
}

uint64_t sub_10006FCA8(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  __chkstk_darwin(v2);
  uint64_t v22 = type metadata accessor for AppInstallationEvent();
  uint64_t v23 = sub_10007086C((unint64_t *)&qword_100459860, (uint64_t)&unk_100374124);
  v21[0] = a1;
  uint64_t v3 = sub_100015F50(v21, v22);
  uint64_t v4 = type metadata accessor for DictionaryEncoder();
  uint64_t inited = swift_initStackObject(v4, v20);
  uint64_t v6 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v7 = JSONEncoder.init()(a1);
  *(void *)(inited + 16) = v7;
  sub_10006DB44(*v3, v19);
  swift_release(v7);
  uint64_t v8 = sub_1000079A0(&qword_100459DE0);
  if ((swift_dynamicCast(v18, v19, (char *)&type metadata for Any + 8, v8, 6LL) & 1) != 0)
  {
    uint64_t v9 = v18[0];
    id v10 = (void **)sub_100015F50(v21, v22);
    id v11 = sub_10006F31C(*v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
    v19[0] = v9;
    sub_10006E888((uint64_t)v11, (uint64_t)sub_10006E858, 0LL, isUniquelyReferenced_nonNull_native, v19);
    uint64_t v13 = v19[0];
    swift_bridgeObjectRelease(0x8000000000000000LL);
    uint64_t v14 = sub_100015F50(v21, v22);
    uint64_t v15 = *(void *)(*v14 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_additionalFields);
    if (v15)
    {
      swift_bridgeObjectRetain(*(void *)(*v14 + OBJC_IVAR____TtC9appstored20AppInstallationEvent_additionalFields));
      char v16 = swift_isUniquelyReferenced_nonNull_native(v13);
      v19[0] = v13;
      sub_10006E888(v15, (uint64_t)sub_10006E858, 0LL, v16, v19);
      uint64_t v13 = v19[0];
      swift_bridgeObjectRelease(0x8000000000000000LL);
    }
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  sub_100015340(v21);
  return v13;
}

id sub_1000701B0(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for AppInstallationEvent();
  uint64_t v46 = v6;
  uint64_t v47 = sub_10007086C((unint64_t *)&qword_100459860, (uint64_t)&unk_100374124);
  v45[0] = a1;
  uint64_t v7 = (void *)*sub_100015F50(v45, v6);
  id v8 = a1;
  uint64_t v9 = sub_10006FCA8(v7);
  if (v9)
  {
    uint64_t v10 = v9;
    static Logger.metrics.getter(v9);
    sub_10004F9E0((uint64_t)v45, (uint64_t)v44);
    uint64_t v11 = sub_10004F9E0((uint64_t)v45, (uint64_t)v43);
    NSString v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc(22LL, -1LL);
      uint64_t v40 = v2;
      uint64_t v15 = v14;
      uint64_t v16 = swift_slowAlloc(8LL, -1LL);
      uint64_t v38 = v3;
      unint64_t v17 = (void *)v16;
      uint64_t v39 = swift_slowAlloc(32LL, -1LL);
      uint64_t v42 = v39;
      *(_DWORD *)uint64_t v15 = 138412546;
      unint64_t v18 = *(void **)(*sub_100015F50(v44, v44[3]) + OBJC_IVAR____TtC9appstored20AppInstallationEvent_logKey);
      uint64_t v41 = (uint64_t)v18;
      id v19 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v15 + 4, v15 + 12);
      *unint64_t v17 = v18;
      sub_100015340(v44);
      *(_WORD *)(v15 + 12) = 2082;
      __int128 v20 = (uint64_t *)(*sub_100015F50(v43, v43[3]) + OBJC_IVAR____TtC9appstored20AppInstallationEvent_topic);
      uint64_t v22 = *v20;
      unint64_t v21 = v20[1];
      swift_bridgeObjectRetain(v21);
      uint64_t v41 = sub_100088DB4(v22, v21, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v15 + 14, v15 + 22);
      swift_bridgeObjectRelease(v21);
      sub_100015340(v43);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "[%@] Building AMSMetricsEvent for topic: %{public}s",  (uint8_t *)v15,  0x16u);
      uint64_t v23 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v17, 1LL, v23);
      swift_slowDealloc(v17, -1LL, -1LL);
      uint64_t v24 = v39;
      swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v40);
    }

    else
    {
      sub_100015340(v44);
      sub_100015340(v43);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    }

    id v26 = objc_allocWithZone(&OBJC_CLASS___AMSMetricsEvent);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v10);
    id v25 = [v26 initWithUnderlyingDictionary:isa];

    if (*(void *)(*sub_100015F50(v45, v46) + OBJC_IVAR____TtC9appstored20AppInstallationEvent_eventTimeOverride)) {
      objc_msgSend(v25, "setEventTime:");
    }
    uint64_t v28 = *sub_100015F50(v45, v46) + OBJC_IVAR____TtC9appstored20AppInstallationEvent_diagnosticsSubmissionBugType;
    uint64_t v29 = *(void *)(v28 + 8);
    if (v29)
    {
      swift_bridgeObjectRetain(*(void *)(v28 + 8));
      NSString v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v29);
      [v25 setDiagnosticsSubmissionBugType:v30];
    }

    if (v31 != 2) {
      [v25 setPreventSampling:v31 & 1];
    }
    [v25 setAnonymous:1];
    uint64_t v32 = *(void *)(*sub_100015F50(v45, v46) + OBJC_IVAR____TtC9appstored20AppInstallationEvent_basePropertiesToRemove);
    if (v32)
    {
      int64_t v33 = *(void *)(v32 + 16);
      if (v33)
      {
        v44[0] = _swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v32);
        sub_10007F7A0(0, v33, 0);
        __asm { BR              X9 }
      }

      uint64_t v34 = sub_100056154((uint64_t)_swiftEmptyArrayStorage);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      Class v35 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v34);
      [v25 removePropertiesForKeys:v35];
    }
  }

  else
  {
    id v25 = 0LL;
  }

  sub_100015340(v45);
  return v25;
}

uint64_t sub_1000707E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000079A0((uint64_t *)&unk_1004594B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100070830()
{
  unint64_t result = qword_10045A028;
  if (!qword_10045A028)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___AMSMetricsIdentifierKey);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10045A028);
  }

  return result;
}

uint64_t sub_10007086C(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for AppInstallationEvent();
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

id sub_1000708AC()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___itemID];
  if (v0[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___itemID + 8] != 1) {
    return *(id *)v1;
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = sub_1001E25D0(v0, (uint64_t)v2);

  if (v3)
  {
    id v4 = [v3 longLongValue];
  }

  else
  {
    id v4 = 0LL;
  }

  *(void *)uint64_t v1 = v4;
  v1[8] = 0;
  return v4;
}

uint64_t sub_100070954()
{
  uint64_t v1 = v0;
  NSString v2 = (uint64_t *)&v0[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___metadata];
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___metadata];
  unint64_t v4 = *(void *)&v0[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___metadata + 8];
  uint64_t v5 = v3;
  if (v4 >> 60 == 11)
  {
    uint64_t v5 = sub_100072FB8(v1);
    uint64_t v6 = *v2;
    unint64_t v7 = v2[1];
    *NSString v2 = v5;
    v2[1] = v8;
    sub_10007450C(v5, v8);
    sub_100074520(v6, v7);
  }

  sub_100074534(v3, v4);
  return v5;
}

uint64_t sub_1000709E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_1000079A0(&qword_10045A2F0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  unint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v28) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v29 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v28) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v29 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v28) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v29 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v28) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v29 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

id sub_100070DA8()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___updateState];
  if (v0[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___updateState + 8] != 1) {
    return *(id *)v1;
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = sub_1001E2698(v0, (uint64_t)v2);

  *(void *)uint64_t v1 = v3;
  v1[8] = 0;
  return v3;
}

objc_class *sub_100070E2C()
{
  uint64_t v1 = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___evid;
  NSString v2 = *(void **)&v0[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___evid];
  if (v2)
  {
    id v3 = *(objc_class **)&v0[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___evid];
  }

  else
  {
    uint64_t v4 = v0;
    NSString v5 = String._bridgeToObjectiveC()();
    Class isa = (Class)sub_1001E25D0(v0, (uint64_t)v5);

    if (!isa)
    {
      sub_10001517C(0LL, (unint64_t *)&qword_100458228, &OBJC_CLASS___NSNumber_ptr);
      Class isa = NSNumber.init(integerLiteral:)(0LL).super.super.isa;
    }

    unint64_t v7 = *(void **)&v4[v1];
    *(void *)&v4[v1] = isa;
    id v3 = isa;

    NSString v2 = 0LL;
  }

  id v8 = v2;
  return v3;
}

uint64_t sub_100070EF0()
{
  uint64_t v1 = (uint64_t *)&v0[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___bundleID];
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___bundleID + 8];
  if (v2)
  {
    uint64_t v3 = *v1;
  }

  else
  {
    NSString v4 = String._bridgeToObjectiveC()();
    id v5 = sub_1001E26D0(v0, (uint64_t)v4);

    if (v5)
    {
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      unint64_t v7 = v6;
    }

    else
    {
      uint64_t v3 = 0LL;
      unint64_t v7 = 0xE000000000000000LL;
    }

    uint64_t v8 = v1[1];
    uint64_t *v1 = v3;
    v1[1] = v7;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRelease(v8);
    uint64_t v2 = 0LL;
  }

  swift_bridgeObjectRetain(v2);
  return v3;
}

id sub_100070FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType(v3, a2);
  *(void *)&v3[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___metadataDictionary] = 1LL;
  *(void *)&v3[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___platformSpecificAttributesDictionary] = 1LL;
  v3[OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip] = 0;
  uint64_t v8 = &v3[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___bundleID];
  *uint64_t v8 = 0LL;
  v8[1] = 0LL;
  *(_OWORD *)&v3[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___metadata] = xmmword_100374470;
  *(void *)&v3[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___evid] = 0LL;
  int64_t v9 = &v3[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___itemID];
  *(void *)int64_t v9 = 0LL;
  v9[8] = 1;
  unint64_t v10 = &v3[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___updateState];
  *(void *)unint64_t v10 = 0LL;
  v10[8] = 1;
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  Class v12 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a3);
  v15.receiver = v3;
  v15.super_class = ObjectType;
  id v13 = objc_msgSendSuper2(&v15, "initWithDatabaseID:propertyValues:externalPropertyValues:", a1, isa, v12);

  return v13;
}

uint64_t sub_100071244()
{
  uint64_t v0 = sub_1000079A0((uint64_t *)&unk_100459410);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = 0LL;
  unint64_t v29 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(59LL);
  v3._countAndFlagsBits = 0x656C646E7562207BLL;
  v3._object = (void *)0xEC000000203A4449LL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = sub_100070EF0();
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 0x3A44496D65746920LL;
  v6._object = (void *)0xE900000000000020LL;
  String.append(_:)(v6);
  v27[1] = sub_1000708AC();
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
  uint64_t v8 = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v8);
  v9._countAndFlagsBits = 0x203A6469766520LL;
  v9._object = (void *)0xE700000000000000LL;
  String.append(_:)(v9);
  unint64_t v10 = sub_100070E2C();
  id v11 = -[objc_class description](v10, "description");
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  int64_t v14 = v13;

  v15._countAndFlagsBits = v12;
  v15._object = v14;
  String.append(_:)(v15);

  swift_bridgeObjectRelease(v14);
  v16._object = (void *)0x8000000100345680LL;
  v16._countAndFlagsBits = 0xD000000000000015LL;
  String.append(_:)(v16);
  sub_1000714AC((uint64_t)v2);
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v2, 1LL, v17) == 1)
  {
    sub_100015240((uint64_t)v2, (uint64_t *)&unk_100459410);
LABEL_5:
    uint64_t v21 = 0LL;
    unint64_t v23 = (void *)0xE000000000000000LL;
    goto LABEL_6;
  }

  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v18 + 8))(v2, v17);
  id v20 = sub_1001E83D8(isa);

  if (!v20) {
    goto LABEL_5;
  }
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  unint64_t v23 = v22;

LABEL_6:
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  v25._countAndFlagsBits = 32032LL;
  v25._object = (void *)0xE200000000000000LL;
  String.append(_:)(v25);
  return v28;
}

uint64_t sub_1000714AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1000079A0((uint64_t *)&unk_100459410);
  __chkstk_darwin(v2);
  Swift::String v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_1000079A0(&qword_100458560);
  __chkstk_darwin(v5);
  Swift::String v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Class v8 = sub_100071914();
  if (!v8) {
    goto LABEL_8;
  }
  Class v9 = v8;
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = sub_1001DF5F4(v9, v10);

  if (!v11)
  {

    Class v8 = 0LL;
LABEL_8:
    uint64_t v19 = type metadata accessor for Date(v8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56LL))( a1,  1LL,  1LL,  v19);
  }

  id v12 = [objc_allocWithZone(NSDateFormatter) init];
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 setDateFormat:v13];

  [v12 setLenient:1];
  TimeZone.init(secondsFromGMT:)(0LL);
  uint64_t v14 = type metadata accessor for TimeZone(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v7, 1LL, v14) != 1)
  {
    Class isa = TimeZone._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v7, v14);
  }

  [v12 setTimeZone:isa];

  id v17 = [v12 dateFromString:v11];
  if (v17)
  {
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v17);

    uint64_t v18 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v4, 0LL, 1LL, v18);
  }

  else
  {

    uint64_t v21 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v4, 1LL, 1LL, v21);
  }

  return sub_100026CD4((uint64_t)v4, a1, (uint64_t *)&unk_100459410);
}

void *sub_100071768()
{
  uint64_t v1 = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___metadataDictionary;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___metadataDictionary);
  uint64_t v3 = v2;
  if (v2 == (void *)1)
  {
    uint64_t v4 = sub_100070954();
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = v4;
      unint64_t v7 = v5;
      Class v8 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      v21[0] = 0LL;
      id v10 = [v8 JSONObjectWithData:isa options:0 error:v21];

      id v11 = v21[0];
      if (v10)
      {
        id v12 = v21[0];
        _bridgeAnyObjectToAny(_:)(v21, v10);
        sub_1000188F4(v6, v7);
        swift_unknownObjectRelease(v10);
        uint64_t v13 = sub_10001517C(0LL, &qword_10045A2E8, &OBJC_CLASS___NSDictionary_ptr);
        if ((swift_dynamicCast(&v20, v21, (char *)&type metadata for Any + 8, v13, 6LL) & 1) != 0)
        {
          uint64_t v3 = v20;
LABEL_8:
          id v17 = *(void **)(v0 + v1);
          *(void *)(v0 + v1) = v3;
          id v18 = v3;
          sub_1000744EC(v17);
          goto LABEL_9;
        }
      }

      else
      {
        id v14 = v21[0];
        uint64_t v15 = _convertNSErrorToError(_:)(v11);

        swift_willThrow(v16);
        sub_1000188F4(v6, v7);
        swift_errorRelease(v15);
      }
    }

    uint64_t v3 = 0LL;
    goto LABEL_8;
  }

Class sub_100071914()
{
  uint64_t v1 = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___platformSpecificAttributesDictionary;
  uint64_t v2 = *(objc_class **)(v0
                      + OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___platformSpecificAttributesDictionary);
  Class v3 = v2;
  if (v2 == (objc_class *)1)
  {
    Class v3 = sub_100071980();
    uint64_t v4 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v3;
    unint64_t v5 = v3;
    sub_1000744EC(v4);
  }

  sub_1000744FC(v2);
  return v3;
}

Class sub_100071980()
{
  uint64_t v0 = sub_100071768();
  if (!v0) {
    return 0LL;
  }
  uint64_t v1 = v0;
  unint64_t v5 = 0LL;
  static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)( v0,  &v5,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  Class isa = v5;
  if (v5)
  {
    unint64_t v3 = sub_100017B50();
    swift_bridgeObjectRelease(isa);
    if (v3)
    {
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v3);
      return isa;
    }

    return 0LL;
  }

  return isa;
}

uint64_t sub_100071A38(uint64_t a1, uint64_t a2)
{
  v3[101] = v2;
  v3[100] = a2;
  v3[99] = a1;
  v3[102] = swift_getObjectType(v2, a2);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  v3[103] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[104] = v5;
  v3[105] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100071AD8, 0LL, 0LL);
}

void sub_100071AD8()
{
  uint64_t v1 = *(_BYTE **)(v0 + 808);
  uint64_t v2 = *(void *)(v0 + 792);
  uint64_t v3 = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___metadataDictionary;
  *(void *)(v0 + 848) = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___metadataDictionary;
  *(void *)&v1[v3] = 1LL;
  uint64_t v4 = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___platformSpecificAttributesDictionary;
  *(void *)(v0 + 856) = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___platformSpecificAttributesDictionary;
  *(void *)&v1[v4] = 1LL;
  uint64_t v5 = OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip;
  *(void *)(v0 + 864) = OBJC_IVAR____TtC9appstored14MediaAPIUpdate_isAppClip;
  v1[v5] = 0;
  uint64_t v6 = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___bundleID;
  *(void *)(v0 + 872) = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___bundleID;
  unint64_t v7 = &v1[v6];
  *unint64_t v7 = 0LL;
  v7[1] = 0LL;
  uint64_t v8 = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___metadata;
  *(void *)(v0 + 88_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___metadata;
  *(_OWORD *)&v1[v8] = xmmword_100374470;
  uint64_t v9 = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___evid;
  *(void *)(v0 + 888) = OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___evid;
  *(void *)&v1[v9] = 0LL;
  id v10 = &v1[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___itemID];
  *(void *)id v10 = 0LL;
  v10[8] = 1;
  id v11 = &v1[OBJC_IVAR____TtC9appstored14MediaAPIUpdate____lazy_storage___updateState];
  *(void *)id v11 = 0LL;
  v11[8] = 1;
  uint64_t v12 = *(void *)(v2 + 16);
  uint64_t v13 = v1;
  if (!v12
    || (unint64_t v14 = sub_100023F7C(25705LL, 0xE200000000000000LL), (v15 & 1) == 0)
    || (sub_100016B10(*(void *)(*(void *)(v0 + 792) + 56LL) + 32 * v14, v0 + 480),
        (swift_dynamicCast(v0 + 600, v0 + 480, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0))
  {
    uint64_t v27 = *(void **)(v0 + 800);
    uint64_t v28 = *(void *)(v0 + 792);
LABEL_13:
    swift_bridgeObjectRelease(v28);

    goto LABEL_14;
  }

  uint64_t v16 = sub_10007BF40(*(void *)(v0 + 600), *(void *)(v0 + 608));
  *(void *)(v0 + 896) = v16;
  if ((v17 & 1) != 0 || (uint64_t v18 = v16, (v19 = sub_100017B50()) == 0))
  {
    uint64_t v37 = *(void *)(v0 + 792);

    swift_bridgeObjectRelease(v37);
    goto LABEL_14;
  }

  unint64_t v20 = v19;
  if (!*(void *)(v19 + 16)
    || (unint64_t v21 = sub_100023F7C(0x6449656C646E7562LL, 0xE800000000000000LL), (v22 & 1) == 0)
    || (sub_100016B10(*(void *)(v20 + 56) + 32 * v21, v0 + 512),
        (swift_dynamicCast(v0 + 680, v0 + 512, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0))
  {
    uint64_t v38 = *(void **)(v0 + 800);
    swift_bridgeObjectRelease(*(void *)(v0 + 792));
    swift_bridgeObjectRelease(v20);

    goto LABEL_14;
  }

  uint64_t v23 = *(void *)(v0 + 680);
  *(void *)(v0 + 904) = v23;
  uint64_t v24 = *(void *)(v0 + 688);
  *(void *)(v0 + 912) = v24;
  if (*(void *)(v20 + 16) && (unint64_t v25 = sub_100023F7C(0xD000000000000011LL, 0x80000001003441A0LL), (v26 & 1) != 0))
  {
    sub_100016B10(*(void *)(v20 + 56) + 32 * v25, v0 + 544);
  }

  else
  {
    *(_OWORD *)(v0 + 544) = 0u;
    *(_OWORD *)(v0 + 56_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0u;
  }

  swift_bridgeObjectRelease(v20);
  if (!*(void *)(v0 + 568))
  {
    uint64_t v45 = *(void **)(v0 + 800);
    swift_bridgeObjectRelease(*(void *)(v0 + 792));
    swift_bridgeObjectRelease(v24);

    sub_100015240(v0 + 544, (uint64_t *)&unk_1004594B0);
    goto LABEL_14;
  }

  char v39 = swift_dynamicCast(v0 + 784, v0 + 544, (char *)&type metadata for Any + 8, &type metadata for Int64, 6LL);
  uint64_t v27 = *(void **)(v0 + 800);
  if ((v39 & 1) == 0)
  {
    swift_bridgeObjectRelease(*(void *)(v0 + 792));
    uint64_t v28 = v24;
    goto LABEL_13;
  }

  *(void *)(v0 + 92_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)(v0 + 784);
  uint64_t v40 = sub_100074548(v18, v23, v24, v27);
  *(void *)(v0 + 928) = v40;
  if (!v40)
  {
    uint64_t v46 = *(void *)(v0 + 792);
    uint64_t v47 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v46);
    *(void *)(v0 + 776) = 0LL;
    id v49 = [v47 dataWithJSONObject:isa options:0 error:v0 + 776];

    id v50 = *(id *)(v0 + 776);
    if (v49)
    {

      uint64_t v88 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v49);
      unint64_t v52 = v51;

      uint64_t v90 = *(void *)(v0 + 920);
      uint64_t v86 = *(void *)(v0 + 904);
      uint64_t v87 = *(void *)(v0 + 912);
      uint64_t v92 = *(void *)(v0 + 896);
      uint64_t v95 = *(void *)(v0 + 808);
      uint64_t v97 = *(void *)(v0 + 816);
      id v99 = *(void **)(v0 + 800);
      uint64_t v53 = sub_1000079A0(&qword_10045A308);
      uint64_t inited = swift_initStackObject(v53, v0 + 16);
      *(_OWORD *)(inited + 16) = xmmword_100374480;
      *(void *)(v0 + 728) = 0xD000000000000015LL;
      *(void *)(v0 + 736) = 0x8000000100341E60LL;
      unint64_t v55 = v52;
      sub_100007AD0(v88, v52);
      AnyHashable.init<A>(_:)(v0 + 728, &type metadata for String, &protocol witness table for String);
      *(void *)(inited + 96) = &type metadata for Int;
      *(void *)(inited + 72) = 0LL;
      *(void *)(v0 + 696) = 0x695F656C646E7562LL;
      *(void *)(v0 + 704) = 0xE900000000000064LL;
      AnyHashable.init<A>(_:)(v0 + 696, &type metadata for String, &protocol witness table for String);
      *(void *)(inited + 168) = &type metadata for String;
      *(void *)(inited + 144) = v86;
      *(void *)(inited + 152) = v87;
      *(void *)(v0 + 664) = 0xD000000000000019LL;
      *(void *)(v0 + 672) = 0x8000000100341E80LL;
      AnyHashable.init<A>(_:)(v0 + 664, &type metadata for String, &protocol witness table for String);
      *(void *)(inited + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = &type metadata for Int64;
      *(void *)(inited + 216) = v90;
      *(void *)(v0 + 648) = 0x64695F6D657469LL;
      *(void *)(v0 + 656) = 0xE700000000000000LL;
      AnyHashable.init<A>(_:)(v0 + 648, &type metadata for String, &protocol witness table for String);
      *(void *)(inited + 312) = &type metadata for Int64;
      *(void *)(inited + 288) = v92;
      *(void *)(v0 + 632) = 0x617461646174656DLL;
      *(void *)(v0 + 64_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0xE800000000000000LL;
      AnyHashable.init<A>(_:)(v0 + 632, &type metadata for String, &protocol witness table for String);
      *(void *)(inited + 384) = &type metadata for Data;
      *(void *)(inited + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v88;
      *(void *)(inited + 368) = v52;
      strcpy((char *)(v0 + 616), "update_state");
      *(_BYTE *)(v0 + 629) = 0;
      *(_WORD *)(v0 + 63_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = -5120;
      AnyHashable.init<A>(_:)(v0 + 616, &type metadata for String, &protocol witness table for String);
      *(void *)(inited + 456) = &type metadata for Int;
      *(void *)(inited + 432) = 0LL;
      unint64_t v56 = sub_10001DB60(inited);
      Class v57 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v56);
      unint64_t v58 = sub_10001DB60((uint64_t)_swiftEmptyArrayStorage);
      Class v59 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v58);
      *(void *)(v0 + 712) = v95;
      *(void *)(v0 + 72_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v97;
      id v36 = objc_msgSendSuper2( (objc_super *)(v0 + 712),  "initWithDatabaseID:propertyValues:externalPropertyValues:",  0,  v57,  v59);

      sub_100007B14(v88, v55);
      goto LABEL_15;
    }

    id v60 = v50;
    uint64_t v61 = *(void *)(v0 + 912);
    uint64_t v62 = *(void **)(v0 + 800);
    uint64_t v63 = _convertNSErrorToError(_:)(v50);

    uint64_t v65 = swift_willThrow(v64);
    static Logger.updates.getter(v65);
    id v66 = v62;
    swift_errorRetain(v63, v67);
    id v68 = v66;
    swift_bridgeObjectRetain(v61);
    uint64_t v70 = swift_errorRetain(v63, v69);
    uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
    os_log_type_t v72 = static os_log_type_t.error.getter();
    BOOL v73 = os_log_type_enabled(v71, v72);
    unint64_t v74 = *(void *)(v0 + 912);
    if (v73)
    {
      uint64_t v91 = *(void *)(v0 + 904);
      uint64_t v101 = *(void *)(v0 + 840);
      uint64_t v98 = *(void *)(v0 + 832);
      uint64_t v100 = *(void *)(v0 + 824);
      os_log_type_t type = v72;
      NSString v75 = *(void **)(v0 + 800);
      os_log_t log = v71;
      uint64_t v76 = swift_slowAlloc(32LL, -1LL);
      uint64_t v89 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v96 = swift_slowAlloc(64LL, -1LL);
      v102[0] = v96;
      *(_DWORD *)uint64_t v76 = 138412802;
      *(void *)(v0 + 768) = v75;
      id v77 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 768, v0 + 776, v76 + 4, v76 + 12);
      *uint64_t v89 = v75;

      *(_WORD *)(v76 + 12) = 2082;
      swift_bridgeObjectRetain(v74);
      *(void *)(v0 + 76_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = sub_100088DB4(v91, v74, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 760, v0 + 768, v76 + 14, v76 + 22);
      swift_bridgeObjectRelease_n(v74, 3LL);
      *(_WORD *)(v76 + 22) = 2082;
      swift_getErrorValue(v63, v0 + 752, v0 + 576);
      uint64_t v78 = Error.localizedDescription.getter(*(void *)(v0 + 584), *(void *)(v0 + 592));
      unint64_t v80 = v79;
      *(void *)(v0 + 744) = sub_100088DB4(v78, v79, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752, v76 + 24, v76 + 32);
      swift_bridgeObjectRelease(v80);
      swift_errorRelease(v63);
      swift_errorRelease(v63);
      _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "[%@] Error serializing update metadata for %{public}s: %{public}s",  (uint8_t *)v76,  0x20u);
      uint64_t v81 = sub_1000079A0((uint64_t *)&unk_100458F50);
      swift_arrayDestroy(v89, 1LL, v81);
      swift_slowDealloc(v89, -1LL, -1LL);
      swift_arrayDestroy(v96, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v96, -1LL, -1LL);
      swift_slowDealloc(v76, -1LL, -1LL);

      swift_errorRelease(v63);
      (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v101, v100);
    }

    else
    {
      uint64_t v82 = *(void *)(v0 + 840);
      uint64_t v83 = *(void *)(v0 + 832);
      uint64_t v84 = *(void *)(v0 + 824);
      id v85 = *(void **)(v0 + 800);
      swift_errorRelease(v63);

      swift_bridgeObjectRelease_n(v74, 2LL);
      swift_errorRelease(v63);
      swift_errorRelease(v63);

      (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v82, v84);
    }

uint64_t sub_1000725C4(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 936LL);
  *(_BYTE *)(*(void *)v1 + 944LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10007264C, 0LL, 0LL);
}

uint64_t sub_10007264C()
{
  if ((*(_BYTE *)(*(void *)(v0 + 808) + *(void *)(v0 + 864)) & 1) != 0
    || ([*(id *)(v0 + 928) isPlaceholder] & 1) != 0)
  {
    unsigned int v1 = 0;
  }

  else
  {
    int v2 = *(unsigned __int8 *)(v0 + 944);
    unsigned int v1 = [*(id *)(v0 + 928) applicationHasMIDBasedSINF] & (v2 ^ 1);
  }

  else {
    BOOL v75 = 0;
  }
  id v3 = sub_1003261E8(*(void **)(v0 + 928));
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 DSPersonID];
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = objc_msgSend((id)objc_opt_self(ACAccountStore), "ams_sharedAccountStore");
      id v8 = objc_msgSend(v7, "ams_iTunesAccountWithDSID:", v6);

      if (v8)
      {
        unsigned int v9 = objc_msgSend(v8, "ams_isManagedAppleID");

        uint64_t v6 = v8;
      }

      else
      {
        unsigned int v9 = 0;
      }
    }

    else
    {
      unsigned int v9 = 0;
    }
  }

  else
  {
    unsigned int v9 = 0;
  }

  uint64_t v10 = *(void *)(v0 + 792);
  id v11 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v10);
  *(void *)(v0 + 776) = 0LL;
  id v13 = [v11 dataWithJSONObject:isa options:0 error:v0 + 776];

  id v14 = *(id *)(v0 + 776);
  if (v13)
  {
    unsigned int v15 = v1;

    uint64_t v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v13);
    unint64_t v18 = v17;

    if (v75)
    {
      if (v15) {
        uint64_t v19 = 12LL;
      }
      else {
        uint64_t v19 = 4LL;
      }
      if ((v9 & 1) == 0) {
        goto LABEL_31;
      }
    }

    else
    {
      if (v15) {
        uint64_t v19 = 8LL;
      }
      else {
        uint64_t v19 = 0LL;
      }
      if (!v9) {
        goto LABEL_31;
      }
    }

    v19 |= 0x10uLL;
LABEL_31:
    uint64_t v65 = *(void *)(v0 + 920);
    uint64_t v43 = *(void *)(v0 + 912);
    uint64_t v44 = *(void *)(v0 + 904);
    uint64_t v67 = *(void *)(v0 + 896);
    uint64_t v69 = *(void *)(v0 + 808);
    *(void *)uint64_t typea = *(void *)(v0 + 816);
    id v77 = *(void **)(v0 + 800);
    uint64_t v45 = sub_1000079A0(&qword_10045A308);
    uint64_t inited = swift_initStackObject(v45, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_100374480;
    *(void *)(v0 + 728) = 0xD000000000000015LL;
    *(void *)(v0 + 736) = 0x8000000100341E60LL;
    sub_100007AD0(v16, v18);
    AnyHashable.init<A>(_:)(v0 + 728, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 96) = &type metadata for Int;
    *(void *)(inited + 72) = v19;
    *(void *)(v0 + 696) = 0x695F656C646E7562LL;
    *(void *)(v0 + 704) = 0xE900000000000064LL;
    AnyHashable.init<A>(_:)(v0 + 696, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 168) = &type metadata for String;
    *(void *)(inited + 144) = v44;
    *(void *)(inited + 152) = v43;
    *(void *)(v0 + 664) = 0xD000000000000019LL;
    *(void *)(v0 + 672) = 0x8000000100341E80LL;
    AnyHashable.init<A>(_:)(v0 + 664, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 24_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = &type metadata for Int64;
    *(void *)(inited + 216) = v65;
    *(void *)(v0 + 648) = 0x64695F6D657469LL;
    *(void *)(v0 + 656) = 0xE700000000000000LL;
    AnyHashable.init<A>(_:)(v0 + 648, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 312) = &type metadata for Int64;
    *(void *)(inited + 288) = v67;
    *(void *)(v0 + 632) = 0x617461646174656DLL;
    *(void *)(v0 + 64_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = 0xE800000000000000LL;
    AnyHashable.init<A>(_:)(v0 + 632, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 384) = &type metadata for Data;
    *(void *)(inited + 36_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = v16;
    *(void *)(inited + 368) = v18;
    unint64_t v47 = v18;
    strcpy((char *)(v0 + 616), "update_state");
    *(_BYTE *)(v0 + 629) = 0;
    *(_WORD *)(v0 + 63_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = -5120;
    AnyHashable.init<A>(_:)(v0 + 616, &type metadata for String, &protocol witness table for String);
    *(void *)(inited + 456) = &type metadata for Int;
    *(void *)(inited + 432) = 0LL;
    unint64_t v48 = sub_10001DB60(inited);
    Class v49 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v48);
    unint64_t v50 = sub_10001DB60((uint64_t)_swiftEmptyArrayStorage);
    Class v51 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v50);
    *(void *)(v0 + 712) = v69;
    *(void *)(v0 + 72_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = *(void *)typea;
    id v52 = objc_msgSendSuper2( (objc_super *)(v0 + 712),  "initWithDatabaseID:propertyValues:externalPropertyValues:",  0,  v49,  v51);

    sub_100007B14(v16, v47);
    goto LABEL_34;
  }

  unint64_t v20 = v14;
  uint64_t v21 = *(void *)(v0 + 912);
  char v22 = *(void **)(v0 + 800);
  uint64_t v23 = _convertNSErrorToError(_:)(v14);

  uint64_t v25 = swift_willThrow(v24);
  static Logger.updates.getter(v25);
  id v26 = v22;
  swift_errorRetain(v23, v27);
  id v28 = v26;
  swift_bridgeObjectRetain(v21);
  uint64_t v30 = swift_errorRetain(v23, v29);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.error.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  unint64_t v34 = *(void *)(v0 + 912);
  if (v33)
  {
    uint64_t v66 = *(void *)(v0 + 904);
    uint64_t v73 = *(void *)(v0 + 832);
    unint64_t v74 = *(objc_super **)(v0 + 824);
    uint64_t v76 = *(void *)(v0 + 840);
    os_log_type_t type = v32;
    __int128 v35 = *(void **)(v0 + 800);
    os_log_t log = v31;
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    uint64_t v37 = (void *)swift_slowAlloc(8LL, -1LL);
    uint64_t v72 = swift_slowAlloc(64LL, -1LL);
    v78[0] = v72;
    *(_DWORD *)uint64_t v36 = 138412802;
    *(void *)(v0 + 768) = v35;
    id v38 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 768, v0 + 776, v36 + 4, v36 + 12);
    *uint64_t v37 = v35;

    *(_WORD *)(v36 + 12) = 2082;
    swift_bridgeObjectRetain(v34);
    *(void *)(v0 + 76_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000041LL,  0x8000000100342DF0LL,  "appstored/Activity.swift",  24LL,  2LL,  49LL, 0) = sub_100088DB4(v66, v34, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 760, v0 + 768, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease_n(v34, 3LL);
    *(_WORD *)(v36 + 22) = 2082;
    swift_getErrorValue(v23, v0 + 752, v0 + 576);
    uint64_t v39 = Error.localizedDescription.getter(*(void *)(v0 + 584), *(void *)(v0 + 592));
    unint64_t v41 = v40;
    *(void *)(v0 + 744) = sub_100088DB4(v39, v40, v78);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752, v36 + 24, v36 + 32);
    swift_bridgeObjectRelease(v41);
    swift_errorRelease(v23);
    swift_errorRelease(v23);
    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "[%@] Error serializing update metadata for %{public}s: %{public}s",  (uint8_t *)v36,  0x20u);
    uint64_t v42 = sub_1000079A0((uint64_t *)&unk_100458F50);
    swift_arrayDestroy(v37, 1LL, v42);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_arrayDestroy(v72, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);

    swift_errorRelease(v23);
    (*(void (**)(uint64_t, objc_super *))(v73 + 8))(v76, v74);
  }

  else
  {
    uint64_t v53 = *(void *)(v0 + 840);
    uint64_t v54 = *(void *)(v0 + 832);
    uint64_t v55 = *(void *)(v0 + 824);
    unint64_t v56 = *(void **)(v0 + 800);
    swift_errorRelease(v23);

    swift_bridgeObjectRelease_n(v34, 2LL);
    swift_errorRelease(v23);
    swift_errorRelease(v23);

    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
  }

  uint64_t v57 = *(void *)(v0 + 888);
  uint64_t v58 = *(void *)(v0 + 856);
  uint64_t v59 = *(void *)(v0 + 816);
  id v60 = *(char **)(v0 + 808);
  uint64_t v61 = &v60[*(void *)(v0 + 880)];
  uint64_t v62 = &v60[*(void *)(v0 + 872)];
  sub_1000744EC(*(id *)&v60[*(void *)(v0 + 848)]);
  sub_1000744EC(*(id *)&v60[v58]);
  swift_bridgeObjectRelease(*((void *)v62 + 1));
  sub_100074520(*(void *)v61, *((void *)v61 + 1));
  uint64_t v63 = *(void **)&v60[v57];

  swift_deallocPartialClassInstance(v60, v59, 97LL, 7LL);
  id v52 = 0LL;
LABEL_34:
  swift_task_dealloc(*(void *)(v0 + 840));
  return (*(uint64_t (**)(id))(v0 + 8))(v52);
}