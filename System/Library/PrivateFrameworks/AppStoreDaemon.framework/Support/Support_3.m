void sub_100228950(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id v5;
  void v6[5];
  id v7;
  v3 = a2;
  if (a1)
  {
    v4 = *(void *)(a1 + 8);
    v6[1] = 3221225472LL;
    v6[2] = sub_1002289CC;
    v6[3] = &unk_1003EABD0;
    v5 = v3;
    v6[0] = _NSConcreteStackBlock;
    v6[4] = a1;
    v7 = v3;
    sub_1001D6D30(v4, v6);

    v3 = v5;
  }
}

uint64_t sub_1002289CC(uint64_t a1)
{
  return 1LL;
}

BOOL sub_1002289F4(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  unsigned __int8 v6 = [v5 fileExistsAtPath:v4];

  return v6 ^ 1;
}

uint64_t sub_100229840(uint64_t a1, void *a2)
{
  v3 = *(void **)(a1 + 32);
  v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v13 = 0LL;
  id v6 = sub_10030D868(v5, v3, (objc_class *)[v4 appEventEntityClass], &v13);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  id v8 = v13;
  [v7 count];

  if (v8)
  {
    uint64_t v9 = ASDLogHandleForCategory(3LL);
    v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
      *(_DWORD *)buf = 138412546;
      v15 = v12;
      __int16 v16 = 2114;
      id v17 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[%@] Importing payout event(s) error: %{public}@",  buf,  0x16u);
    }
  }

  return 1LL;
}

void sub_100229EE4(void **a1, void *a2)
{
  v3 = (void *)objc_claimAutoreleasedReturnValue([a2 connection]);
  id v4 = sub_10024C8BC((uint64_t)SQLiteEntity, v3, a1[4], [a1[5] appEventEntityClass]);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v4);

  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(objc_msgSend(a1[5], "appEventEntityClass"), "defaultProperties"));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100229FC0;
  v9[3] = &unk_1003ECE70;
  id v6 = a1[6];
  v7 = a1[5];
  id v10 = v6;
  v11 = v7;
  [v8 enumerateMemoryEntitiesWithProperties:v5 usingBlock:v9];
}

void sub_100229FC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 32) addObject:v3];
  uint64_t v4 = ASDLogHandleForCategory(3LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
    id v7 = sub_1001ABC24(v3);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v9 = sub_1001AB610(v3);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    int v11 = 138412802;
    v12 = v6;
    __int16 v13 = 2114;
    v14 = v8;
    __int16 v15 = 2114;
    __int16 v16 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Added existing qualified event for accountID: %{public}@",  (uint8_t *)&v11,  0x20u);
  }
}

id sub_10022A0F0(uint64_t a1)
{
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCConnection currentConnection](&OBJC_CLASS___NSXPCConnection, "currentConnection"));
  v2 = v1;
  if (v1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 userInfo]);
    uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSDictionary, v4);
    if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"XPCServiceClientUserInfoKey"]);
      if (v6)
      {
        id v7 = v6;
        id v8 = v7;
LABEL_14:

        goto LABEL_15;
      }

      uint64_t v11 = ASDLogHandleForCategory(14LL);
      v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)v14 = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "(XPCServiceClient) There is no service client - call was probably racing the teardown of the connection",  v14,  2u);
      }

      id v7 = 0LL;
    }

    else
    {
      uint64_t v10 = ASDLogHandleForCategory(14LL);
      id v7 = (id)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  OS_LOG_TYPE_ERROR,  "(XPCServiceClient) There is no connection context - tokens can only be created from service client connections",  buf,  2u);
      }
    }

    id v8 = 0LL;
    goto LABEL_14;
  }

  uint64_t v9 = ASDLogHandleForCategory(14LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__int16 v16 = 0;
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  OS_LOG_TYPE_ERROR,  "(XPCServiceClient) There is no current connection - tokens can only be created at the point an XPC call enters",  v16,  2u);
  }

  id v8 = 0LL;
LABEL_15:

  return v8;
}

XPCServiceClient *sub_10022A284(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  id v7 = a2;
  objc_opt_self(a1);
  id v8 = objc_alloc(&OBJC_CLASS___XPCServiceClient);
  id v9 = v7;
  id v10 = v6;
  if (v8)
  {
    v27.receiver = v8;
    v27.super_class = (Class)&OBJC_CLASS___XPCServiceClient;
    uint64_t v11 = (XPCServiceClient *)objc_msgSendSuper2(&v27, "init");
    id v8 = v11;
    if (v11)
    {
      objc_storeWeak((id *)&v11->_connection, v9);
      objc_storeStrong((id *)&v8->_catalog, a3);
      id WeakRetained = objc_loadWeakRetained((id *)&v8->_connection);
      __int16 v13 = sub_1001F4BE8((uint64_t)&OBJC_CLASS___AMSProcessInfo, WeakRetained);
      uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);
      processInfo = v8->_processInfo;
      v8->_processInfo = (AMSProcessInfo *)v14;

      uint64_t v16 = ASDLogHandleForCategory(14LL);
      id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = (void *)objc_claimAutoreleasedReturnValue(-[AMSProcessInfo bundleIdentifier](v8->_processInfo, "bundleIdentifier"));
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "(XPCServiceClient) Received connection from client: %{public}@",  buf,  0xCu);
      }

      v19 = objc_alloc(&OBJC_CLASS___XPCServiceEntitlements);
      id v20 = objc_loadWeakRetained((id *)&v8->_connection);
      v21 = v20;
      if (v20)
      {
        [v20 auditToken];
      }

      else
      {
        *(_OWORD *)buf = 0u;
        __int128 v31 = 0u;
      }

      id v22 = objc_loadWeakRetained((id *)&v8->_connection);
      v23 = (XPCServiceEntitlements *)sub_1001AA658(v19, buf, [v22 processIdentifier]);
      entitlements = v8->_entitlements;
      v8->_entitlements = v23;

      v28 = @"XPCServiceClientUserInfoKey";
      v29 = v8;
      v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v29,  &v28,  1LL));
      [v9 setUserInfo:v25];
    }
  }

  return v8;
}

void *sub_10022A4C0(void *result)
{
  if (result)
  {
    v1 = result;
    v2 = (void *)result[4];
    if (!v2)
    {
      if (os_variant_has_internal_content("com.apple.appstored"))
      {
        uint64_t v3 = v1[5];
        uint64_t v4 = @"Diagnostic";
        if (v3)
        {
          uint64_t v5 = sub_1001AA8DC(v3, v4, 0LL);
        }

        else
        {

          uint64_t v5 = 0LL;
        }

        id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v5));
        id v9 = sub_1002B5E74((uint64_t)&OBJC_CLASS___Optional, v8);
        uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
        uint64_t v11 = (void *)v1[4];
        v1[4] = v10;
      }

      else
      {
        id v6 = sub_1002B5E08((uint64_t)&OBJC_CLASS___Optional);
        uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
        id v8 = (void *)v1[4];
        v1[4] = v7;
      }

      v2 = (void *)v1[4];
    }

    v12 = sub_1002B5EC8(v2, &__kCFBooleanFalse);
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    id v14 = [v13 BOOLValue];

    return v14;
  }

  return result;
}

void sub_10022A654(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  uint64_t v10 = a5;
  if (a1)
  {
    if (!v9)
    {
      NSErrorUserInfoKey v23 = NSDebugDescriptionErrorKey;
      v24 = @"Service is not available.";
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v24,  &v23,  1LL));
      id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  ASDErrorDomain,  512LL,  v16));
      v10[2](v10, 0LL, v17);

      goto LABEL_9;
    }

    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = a3;
    id v13 = a4;
    if (v11)
    {
      if ((sub_1001AA8DC(v11, a3, a4) & 1) != 0)
      {
        uint64_t v14 = v9[2](v9);
        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        ((void (**)(id, void *, void *))v10)[2](v10, v15, 0LL);

        goto LABEL_9;
      }
    }

    else
    {
      v18 = v13;
    }

    NSErrorUserInfoKey v21 = NSDebugDescriptionErrorKey;
    id v22 = @"Not entitled for this service.";
    v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  ASDErrorDomain,  505LL,  v19));
    v10[2](v10, 0LL, v20);
  }

void sub_10022A858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10022B248(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10022B31C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10022B3F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10022B4C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10022B6B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10022B70C(void *a1)
{
  if (a1)
  {
    obj = a1;
    objc_sync_enter(obj);
    v1 = (void *)obj[7];
    obj[7] = 0LL;

    objc_sync_exit(obj);
  }

__CFString *sub_10022B844(uint64_t a1, unint64_t a2)
{
  if (a2 > 0xA) {
    return 0LL;
  }
  else {
    return off_1003ED8D0[a2];
  }
}

id sub_10022B880(void *a1, unsigned int a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    v36 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    id v9 = sub_10022BB24((uint64_t)a1, v7, a2, v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ([v10 count])
    {
      id v31 = v7;
      __int128 v39 = 0u;
      __int128 v40 = 0u;
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      id obj = (id)objc_claimAutoreleasedReturnValue([v10 keyEnumerator]);
      id v11 = [obj countByEnumeratingWithState:&v37 objects:v47 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v38;
        uint64_t v33 = a2;
        uint64_t v34 = *(void *)v38;
        unsigned int v32 = a2;
        do
        {
          for (i = 0LL; i != v12; i = (char *)i + 1)
          {
            if (*(void *)v38 != v13) {
              objc_enumerationMutation(obj);
            }
            __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:*(void *)(*((void *)&v37 + 1) + 8 * (void)i)]);
            uint64_t v16 = ASDLogHandleForCategory(14LL);
            id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            {
              v19 = (void *)objc_opt_class(a1, v18);
              id v20 = v8;
              id v21 = v19;
              id v22 = sub_1001ABC24(v15);
              id v23 = v12;
              v24 = a1;
              v25 = v10;
              v26 = (void *)objc_claimAutoreleasedReturnValue(v22);
              *(_DWORD *)buf = 138412802;
              v42 = v19;
              __int16 v43 = 2114;
              v44 = v26;
              __int16 v45 = 2048;
              uint64_t v46 = v33;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_INFO,  "[%@]: Adding event for app with bundleID: %{public}@ type: %ld",  buf,  0x20u);

              uint64_t v10 = v25;
              a1 = v24;
              id v12 = v23;

              id v8 = v20;
              a2 = v32;
              uint64_t v13 = v34;
            }

            objc_super v27 = sub_10022BEF4(a1, v15, a2, v8);
            v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
            if (v28) {
              -[NSMutableArray addObject:](v36, "addObject:", v28);
            }
          }

          id v12 = [obj countByEnumeratingWithState:&v37 objects:v47 count:16];
        }

        while (v12);
      }

      id v7 = v31;
    }

    id v29 = -[NSMutableArray copy](v36, "copy");
  }

  else
  {
    id v29 = 0LL;
  }

  return v29;
}

id sub_10022BB24(uint64_t a1, void *a2, int a3, void *a4)
{
  id v6 = a2;
  __int128 v37 = a4;
  v35 = v6;
  if (a1)
  {
    id v7 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    id obj = v6;
    id v8 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v41, v45, 16, v6);
    if (v8)
    {
      id v9 = v8;
      uint64_t v40 = *(void *)v42;
      BOOL v11 = a3 != 2 || v37 == 0LL;
      BOOL v36 = v11;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v42 != v40) {
            objc_enumerationMutation(obj);
          }
          uint64_t v13 = *(void **)(*((void *)&v41 + 1) + 8LL * (void)i);
          id v14 = sub_1001ABD64(v13);
          __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v7, "objectForKey:", v15));

          if (v16)
          {
            id v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v7, "objectForKey:", v15));
            uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v13 valueForProperty:@"count"]);
            v19 = (char *)[v18 integerValue];

            id v20 = (void *)objc_claimAutoreleasedReturnValue([v17 valueForProperty:@"count"]);
            id v21 = [v20 integerValue];

            id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  &v19[(void)v21]));
            [v17 setValue:v22 forProperty:@"count"];

            if (a3 == 2)
            {
              if (v37 && v37[4] == 1LL)
              {
                id v23 = (void *)objc_claimAutoreleasedReturnValue([v13 valueForProperty:@"launch_time"]);
                if (v23)
                {
                  v24 = (void *)objc_claimAutoreleasedReturnValue( +[AMSMetrics serverTimeFromDate:]( &OBJC_CLASS___AMSMetrics,  "serverTimeFromDate:",  v23));
                  v25 = (void *)objc_claimAutoreleasedReturnValue([v13 valueForProperty:@"usage_time"]);
                  sub_1001AB65C((uint64_t)v17, v24, v25, 0LL, 0LL);
                }
              }

              else
              {
                id v29 = (void *)objc_claimAutoreleasedReturnValue([v13 valueForProperty:@"usage_time"]);
                v30 = (char *)[v29 integerValue];

                id v31 = (void *)objc_claimAutoreleasedReturnValue([v17 valueForProperty:@"usage_time"]);
                id v32 = [v31 integerValue];

                id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  &v30[(void)v32]));
                [v17 setValue:v23 forProperty:@"usage_time"];
              }
            }
          }

          else
          {
            if (!v36 && v37[4] == 1LL)
            {
              v26 = (void *)objc_claimAutoreleasedReturnValue([v13 valueForProperty:@"launch_time"]);
              if (v26)
              {
                objc_super v27 = (void *)objc_claimAutoreleasedReturnValue(+[AMSMetrics serverTimeFromDate:](&OBJC_CLASS___AMSMetrics, "serverTimeFromDate:", v26));
                v28 = (void *)objc_claimAutoreleasedReturnValue([v13 valueForProperty:@"usage_time"]);
                sub_1001AB65C((uint64_t)v13, v27, v28, 0LL, 0LL);
              }
            }

            -[NSMutableDictionary setObject:forKey:](v7, "setObject:forKey:", v13, v15);
          }
        }

        id v9 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
      }

      while (v9);
    }

    id v33 = -[NSMutableDictionary copy](v7, "copy");
  }

  else
  {
    id v33 = 0LL;
  }

  return v33;
}

AppUsageMetricsEvent *sub_10022BEF4(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (!a1)
  {
    __int16 v15 = 0LL;
    goto LABEL_58;
  }

  uint64_t v84 = 0LL;
  v85 = &v84;
  uint64_t v86 = 0x3032000000LL;
  v87 = sub_10022C61C;
  v88 = sub_10022C62C;
  id v89 = 0LL;
  id v9 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  v76 = _NSConcreteStackBlock;
  uint64_t v77 = 3221225472LL;
  v78 = sub_10022C634;
  v79 = &unk_1003ED868;
  v83 = &v84;
  v80 = a1;
  BOOL v11 = (id *)v7;
  v81 = v11;
  id v12 = v8;
  id v82 = v12;
  [v10 readUsingSession:&v76];

  uint64_t v13 = (void *)v85[5];
  if (v13)
  {
    id v14 = sub_10022C808(a1, v13, a3, v12);
    __int16 v15 = (AppUsageMetricsEvent *)objc_claimAutoreleasedReturnValue(v14);
    goto LABEL_22;
  }

  uint64_t v16 = objc_alloc(&OBJC_CLASS___AppUsageMetricsEvent);
  if (v12) {
    id v17 = (void *)v12[19];
  }
  else {
    id v17 = 0LL;
  }
  id v18 = v17;
  __int16 v15 = -[AppUsageMetricsEvent initWithTopic:](v16, "initWithTopic:", v18, v76, v77, v78, v79, v80, v81);

  if (!v15)
  {
    uint64_t v19 = ASDLogHandleForCategory(14LL);
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      id v73 = (id)objc_opt_class(a1, v21);
      if (v12) {
        v74 = (void *)v12[19];
      }
      else {
        v74 = 0LL;
      }
      id v75 = v74;
      *(_DWORD *)buf = 138412546;
      id v91 = v73;
      __int16 v92 = 2114;
      id v93 = v75;
      _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "[%@]: Failed to create event with topic: %{public}@",  buf,  0x16u);
    }
  }

  sub_1002FAD68((uint64_t)v15, a3);
  if (!v12)
  {
    int64_t v22 = 0LL;
    if (!v15) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  int64_t v22 = v12[4];
  if (v15) {
LABEL_11:
  }
    v15->_appUsageType = v22;
LABEL_12:
  if (sub_1001ABF30(v11))
  {
    id v23 = sub_1001ABF30(v11);
    sub_1002FAF40(v15, (uint64_t)v23);
  }

  id v24 = sub_1001ABC24(v11);
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  sub_1002FAFBC((id *)v15, v25);

  id v26 = sub_1001ABC48(v11);
  objc_super v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  sub_1002FB020((id *)v15, v27);

  if (sub_1001ABF70(v11))
  {
    unsigned __int8 v28 = sub_1001ABF70(v11);
    if (v15)
    {
      v15->_clip = v28;
      objc_setProperty_nonatomic_copy(v15, v29, @"clip", 96LL);
    }
  }

  id v30 = sub_1001ABCB4(v11);
  id v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  sub_1002FB23C((id *)v15, v31);

  id v32 = sub_1001ABFF0(v11);
  id v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
  sub_1002FB5E8((id *)v15, v33);

  id v34 = sub_1001AC014(v11);
  BOOL v36 = (void *)objc_claimAutoreleasedReturnValue(v34);
  if (v15) {
    objc_setProperty_nonatomic_copy(v15, v35, v36, 192LL);
  }

  id v37 = sub_1001AC038(v11);
  __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  sub_1002FB928((id *)v15, v38);

  id v39 = sub_1001AC05C(v11);
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
  sub_1002FB98C((id *)v15, v40);

  [a1 decorateMetricsEvent:v15 context:v12];
LABEL_22:
  if (!v12 || v12[4] != 1LL) {
    goto LABEL_33;
  }
  if (v11) {
    id v41 = sub_1001E2698(v11, (uint64_t)@"app_platform");
  }
  else {
    id v41 = 0LL;
  }
  __int128 v42 = sub_10022B844((uint64_t)&OBJC_CLASS___AppUsageBaseManager, (unint64_t)v41);
  __int128 v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
  -[AppUsageMetricsEvent setProperty:forBodyKey:](v15, "setProperty:forBodyKey:", v43, @"appPlatform");

  id v44 = sub_1001ABC90(v11);
  __int16 v45 = (void *)objc_claimAutoreleasedReturnValue(v44);

  if (v45)
  {
    id v46 = sub_1001ABC90(v11);
    v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
    sub_1002FAE60((id *)v15, v47);
  }

  else
  {
    v66 = (void *)v85[5];
    if (!v66) {
      goto LABEL_29;
    }
    id v67 = sub_1002C8B88(v66);
    v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
    BOOL v69 = v68 == 0LL;

    if (v69) {
      goto LABEL_29;
    }
    id v70 = sub_1002C8B88((void *)v85[5]);
    v47 = (void *)objc_claimAutoreleasedReturnValue(v70);
    sub_1002FAE60((id *)v15, v47);
  }

LABEL_29:
  id v48 = sub_1001ABC6C(v11);
  v49 = (void *)objc_claimAutoreleasedReturnValue(v48);

  if (v49)
  {
    id v50 = sub_1001ABC6C(v11);
    v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
    sub_1002FB0E8((id *)v15, v51);
  }

void sub_10022C5E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10022C61C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10022C62C(uint64_t a1)
{
}

void sub_10022C634(void *a1, void *a2)
{
  uint64_t v4 = a1[4];
  uint64_t v3 = (void *)a1[5];
  id v5 = a2;
  id v6 = sub_1001ABC24(v3);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 connection]);

  id v9 = (void *)a1[6];
  id v21 = v7;
  id v10 = v8;
  id v11 = v9;
  if (v4)
  {
    uint64_t v23 = 0LL;
    id v24 = &v23;
    uint64_t v25 = 0x3032000000LL;
    id v26 = sub_10022C61C;
    objc_super v27 = sub_10022C62C;
    id v28 = 0LL;
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"bundle_id",  v21));
    id v14 = (void *)objc_opt_class(&OBJC_CLASS___AppMetadataEntity, v13);
    id v15 = sub_10024C8BC((uint64_t)&OBJC_CLASS___SQLiteEntity, v10, v12, v14);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    id v17 = (void *)objc_claimAutoreleasedReturnValue(+[AppMetadataEntity defaultProperties](&OBJC_CLASS___AppMetadataEntity, "defaultProperties"));
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_10022D544;
    v22[3] = &unk_1003E9920;
    v22[4] = &v23;
    [v16 enumerateMemoryEntitiesWithProperties:v17 usingBlock:v22];

    id v18 = (id)v24[5];
    _Block_object_dispose(&v23, 8);
  }

  else
  {
    id v18 = 0LL;
  }

  uint64_t v19 = *(void *)(a1[7] + 8LL);
  id v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = v18;
}

void sub_10022C7EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

AppUsageMetricsEvent *sub_10022C808(void *a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (!a1)
  {
    id v12 = 0LL;
    goto LABEL_27;
  }

  id v9 = objc_alloc(&OBJC_CLASS___AppUsageMetricsEvent);
  if (v8) {
    id v10 = (void *)v8[19];
  }
  else {
    id v10 = 0LL;
  }
  id v11 = v10;
  id v12 = -[AppUsageMetricsEvent initWithTopic:](v9, "initWithTopic:", v11);

  if (!v12)
  {
    uint64_t v13 = ASDLogHandleForCategory(14LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v41 = (void *)objc_opt_class(a1, v15);
      id v42 = v41;
      if (v8) {
        __int128 v43 = (void *)v8[19];
      }
      else {
        __int128 v43 = 0LL;
      }
      id v44 = v43;
      int v45 = 138412546;
      id v46 = v41;
      __int16 v47 = 2114;
      id v48 = v44;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "[%@]: Failed to create event with topic: %{public}@",  (uint8_t *)&v45,  0x16u);
    }
  }

  sub_1002FAD68((uint64_t)v12, a3);
  if (v8)
  {
    int64_t v16 = v8[4];
    if (!v12) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  int64_t v16 = 0LL;
  if (v12) {
LABEL_9:
  }
    v12->_appUsageType = v16;
LABEL_10:
  if (sub_1002C8C34(v7))
  {
    id v17 = sub_1002C8C34(v7);
    sub_1002FAF40(v12, (uint64_t)v17);
  }

  if (!v8 || v8[4] != 1LL) {
    goto LABEL_19;
  }
  if (!v7)
  {
    id v18 = 0LL;
    goto LABEL_17;
  }

  if (sub_1001E2698(v7, (uint64_t)@"app_platform") != (id)99999)
  {
    id v18 = sub_1001E2698(v7, (uint64_t)@"app_platform");
LABEL_17:
    uint64_t v19 = sub_10022B844((uint64_t)&OBJC_CLASS___AppUsageBaseManager, (unint64_t)v18);
    id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    -[AppUsageMetricsEvent setProperty:forBodyKey:](v12, "setProperty:forBodyKey:", v20, @"appPlatform");
  }

  id v21 = sub_1002C8710(v7);
  int64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  sub_1002FB0E8((id *)v12, v22);

LABEL_19:
  id v23 = sub_1002C860C(v7);
  id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  sub_1002FAFBC((id *)v12, v24);

  id v25 = sub_1002C8BAC(v7);
  id v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
  sub_1002FB020((id *)v12, v26);

  if (sub_1002C8C74(v7))
  {
    unsigned __int8 v27 = sub_1002C8C74(v7);
    if (v12)
    {
      v12->_clip = v27;
      objc_setProperty_nonatomic_copy(v12, v28, @"clip", 96LL);
    }
  }

  id v29 = sub_1002C8654(v7);
  id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  sub_1002FB23C((id *)v12, v30);

  id v31 = sub_1002C8630(v7);
  id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
  sub_1002FB5E8((id *)v12, v32);

  id v33 = sub_1002C8BD0(v7);
  v35 = (void *)objc_claimAutoreleasedReturnValue(v33);
  if (v12) {
    objc_setProperty_nonatomic_copy(v12, v34, v35, 192LL);
  }

  id v36 = sub_1002C8CF4(v7);
  id v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
  sub_1002FB928((id *)v12, v37);

  id v38 = sub_1002C8D18(v7);
  id v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
  sub_1002FB98C((id *)v12, v39);

  [a1 decorateMetricsEvent:v12 context:v8];
LABEL_27:

  return v12;
}

id sub_10022CBCC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v28 = v7;
  if (a1)
  {
    id v31 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    id obj = v7;
    id v9 = [obj countByEnumeratingWithState:&v33 objects:v43 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v34;
      uint64_t v29 = a2;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v34 != v11) {
            objc_enumerationMutation(obj);
          }
          uint64_t v13 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)i);
          uint64_t v14 = ASDLogHandleForCategory(14LL);
          uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            id v17 = (void *)objc_opt_class(a1, v16);
            id v32 = v17;
            id v18 = sub_1001ABC24(v13);
            uint64_t v19 = a1;
            uint64_t v20 = v11;
            uint64_t v21 = a2;
            id v22 = v8;
            id v23 = (void *)objc_claimAutoreleasedReturnValue(v18);
            *(_DWORD *)buf = 138412802;
            id v38 = v17;
            __int16 v39 = 2114;
            uint64_t v40 = v23;
            __int16 v41 = 2048;
            uint64_t v42 = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "[%@]: Adding event for app with bundleID: %{public}@ type: %ld",  buf,  0x20u);

            id v8 = v22;
            a2 = v21;
            uint64_t v11 = v20;
            a1 = v19;
          }

          id v24 = sub_10022BEF4(a1, v13, a2, v8);
          id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          if (v25) {
            -[NSMutableArray addObject:](v31, "addObject:", v25);
          }
        }

        id v10 = [obj countByEnumeratingWithState:&v33 objects:v43 count:16];
      }

      while (v10);
    }

    id v26 = -[NSMutableArray copy](v31, "copy");
  }

  else
  {
    id v26 = 0LL;
  }

  return v26;
}

id sub_10022CE24(void *a1, char a2, void *a3)
{
  if (a1)
  {
    uint64_t v3 = sub_10022CE44((uint64_t)a1, a2, a3, 0LL);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v3);
  }

  return a1;
}

NSMutableArray *sub_10022CE44(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    id v9 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    id v10 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10022CF4C;
    v16[3] = &unk_1003ED890;
    id v17 = v7;
    char v20 = a2;
    id v18 = v8;
    id v12 = v9;
    uint64_t v19 = v12;
    [v11 readUsingSession:v16];

    uint64_t v13 = v19;
    uint64_t v14 = v12;
  }

  else
  {
    uint64_t v14 = 0LL;
  }

  return v14;
}

void sub_10022CF4C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  if (v3 && *(void *)(v3 + 32) == 4LL)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (!v5 || *(void *)(v5 + 32) != 3LL) {
      goto LABEL_8;
    }
  }

  if (!*(_BYTE *)(v5 + 8))
  {
LABEL_9:
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedChar:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedChar:",  *(unsigned __int8 *)(a1 + 56)));
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"event_type",  v8));
    v23[0] = v9;
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"has_been_posted",  &off_10040C838));
    v23[1] = v10;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v23, 2LL));
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v11));

    goto LABEL_10;
  }

id sub_10022D1A8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

id sub_10022D1B4(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  v1 = (void *)MGCopyAnswer(@"ProductType", 0LL);
  if (v1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @"0123456789"));
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSScanner scannerWithString:](&OBJC_CLASS___NSScanner, "scannerWithString:", v1));
    if ([v3 isAtEnd])
    {
      id v4 = 0LL;
    }

    else
    {
      id v6 = 0LL;
      [v3 scanUpToCharactersFromSet:v2 intoString:&v6];
      id v4 = v6;
    }
  }

  else
  {
    id v4 = 0LL;
  }

  return v4;
}

id sub_10022D27C(void *a1)
{
  if (a1) {
    a1 = (void *)MGCopyAnswer(@"ProductType", 0LL);
  }
  return a1;
}

__CFString *sub_10022D2A0(__CFString *result)
{
  if (result)
  {
    unsigned int v1 = MGGetSInt32Answer(@"DeviceClassNumber", 0xFFFFFFFFLL) - 1;
    if (v1 > 5) {
      return 0LL;
    }
    else {
      return off_1003ED928[v1];
    }
  }

  return result;
}

__CFString *sub_10022D2E4(__CFString *result)
{
  if (result)
  {
    unsigned int v1 = MGGetSInt32Answer(@"DeviceClassNumber", 0xFFFFFFFFLL) - 1;
    if (v1 > 5) {
      return 0LL;
    }
    else {
      return off_1003ED958[v1];
    }
  }

  return result;
}

BOOL sub_10022D328(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  id v6 = a3;
  if (!a1) {
    goto LABEL_17;
  }
  if (v5)
  {
    [v5 doubleValue];
    if (v7 >= 2.22044605e-16)
    {
      id v8 = v5;
    }

    else
    {

      id v8 = &off_10040E210;
    }
  }

  else
  {
    int has_internal_content = os_variant_has_internal_content("com.apple.appstored");
    id v10 = &off_10040E200;
    id v8 = v10;
  }

  int v11 = os_variant_has_internal_content("com.apple.appstored");
  if (v6 && v11)
  {
    uint64_t v5 = (_UNKNOWN **)v6;

    uint64_t v12 = ASDLogHandleForCategory(14LL);
    id v8 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v23 = (id)objc_opt_class(a1, v13);
      __int16 v24 = 2114;
      id v25 = v5;
      id v14 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_DEFAULT,  "[%@]: Using defaults based app usage post sampling override: %{public}@",  buf,  0x16u);
    }
  }

  else
  {
    int v15 = os_variant_has_internal_content("com.apple.appstored");
    id v16 = &off_10040E1F0;
    if (!v15) {
      id v16 = v8;
    }
    uint64_t v5 = v16;
  }

  [v5 doubleValue];
  if (v17 >= 2.22044605e-16)
  {
    if (qword_1004623C0 != -1) {
      dispatch_once(&qword_1004623C0, &stru_1003ED8B0);
    }
    double v18 = drand48();
    [v5 doubleValue];
    BOOL v21 = v18 < v19;
  }

  else
  {
LABEL_17:
    BOOL v21 = 0;
  }

  return v21;
}

void sub_10022D52C(id a1)
{
  uint32_t v1 = arc4random();
  srand48(v1);
}

void sub_10022D544(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
}

id sub_10022D6AC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10022D724;
  block[3] = &unk_1003E9EA8;
  block[4] = objc_opt_self(a1);
  if (qword_1004623D0 != -1) {
    dispatch_once(&qword_1004623D0, block);
  }
  return (id)qword_1004623C8;
}

void sub_10022D724(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  v2 = (void *)qword_1004623C8;
  qword_1004623C8 = (uint64_t)v1;
}

void sub_10022D748(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = nullsub_21;
    v6[3] = &unk_1003E9DC0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10022D7D8(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10022D834;
    block[3] = &unk_1003E9880;
    block[4] = a1;
    dispatch_async(v1, block);
  }

void sub_10022D834(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v26 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
    id v2 = sub_10022E268(v1);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v3));

    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(+[LSDatabaseContext sharedDatabaseContext](&OBJC_CLASS___LSDatabaseContext, "sharedDatabaseContext"));
    unsigned int v23 = [v24 startAccessingReturningError:0];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    id v25 = v4;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 keyEnumerator]);
    id v7 = [v6 countByEnumeratingWithState:&v28 objects:v38 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v29;
      do
      {
        for (i = 0LL; i != v8; i = (char *)i + 1)
        {
          if (*(void *)v29 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)i);
          uint64_t v12 = objc_autoreleasePoolPush();
          uint64_t v13 = objc_alloc(&OBJC_CLASS___LSApplicationRecord);
          id v27 = 0LL;
          id v14 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( v13,  "initWithBundleIdentifier:allowPlaceholder:error:",  v11,  1LL,  &v27);
          id v15 = v27;
          if (!v14) {
            [v5 addObject:v11];
          }

          objc_autoreleasePoolPop(v12);
        }

        id v8 = [v6 countByEnumeratingWithState:&v28 objects:v38 count:16];
      }

      while (v8);
    }

    if (v23) {
      [v24 stopAccessing];
    }
    if (objc_msgSend(v5, "count", v1))
    {
      [v25 removeObjectsForKeys:v5];
      uint64_t v16 = ASDLogHandleForCategory(14LL);
      double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        double v19 = (void *)objc_opt_class(v22, v18);
        id v20 = v19;
        BOOL v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "componentsJoinedByString:", @", "));
        *(_DWORD *)buf = 138543874;
        __int128 v33 = v19;
        __int16 v34 = 2114;
        __int128 v35 = v26;
        __int16 v36 = 2114;
        id v37 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Removed [%{public}@]",  buf,  0x20u);
      }

      sub_10022E8BC(v22, v25, v26);
    }
  }

void sub_10022DAF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10022DB84;
    v6[3] = &unk_1003E9DC0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10022DB84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  id v3 = v2;
  if (v1) {
    BOOL v4 = v2 == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    BOOL v58 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
    uint64_t v60 = v1;
    id v5 = sub_10022E268(v1);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v6));

    __int128 v74 = 0u;
    __int128 v75 = 0u;
    __int128 v72 = 0u;
    __int128 v73 = 0u;
    id v59 = v3;
    id v8 = v3;
    id v9 = [v8 countByEnumeratingWithState:&v72 objects:v76 count:16];
    if (!v9) {
      goto LABEL_51;
    }
    id v10 = v9;
    p_superclass = &OBJC_METACLASS___ODRMutableApplication.superclass;
    uint64_t v12 = *(void *)v73;
    id v61 = v8;
    v62 = v7;
    uint64_t v70 = *(void *)v73;
    while (1)
    {
      uint64_t v13 = 0LL;
      id v68 = v10;
      do
      {
        if (*(void *)v73 != v12) {
          objc_enumerationMutation(v8);
        }
        uint64_t v14 = *(void *)(*((void *)&v72 + 1) + 8LL * (void)v13);
        if (v14) {
          id v15 = *(void **)(v14 + 8);
        }
        else {
          id v15 = 0LL;
        }
        id v16 = v15;
        double v17 = (AppLedgerItem *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v16]);
        if (v17
          || ((uint64_t v18 = objc_alloc(&OBJC_CLASS___AppLedgerItem), !v14) ? (v19 = 0LL) : (v19 = *(void **)(v14 + 48)),
              id v20 = v19,
              double v17 = -[AppLedgerItem initWithBundleID:itemID:](v18, "initWithBundleID:itemID:", v16, v20),
              v20,
              [v7 setObject:v17 forKeyedSubscript:v16],
              uint64_t v12 = v70,
              v17))
        {
          BOOL v21 = sub_1002DEEE4((id *)objc_alloc((Class)p_superclass + 39), (void *)v14);
          if (!v21) {
            goto LABEL_40;
          }
          -[AppLedgerItem addInstall:](v17, "addInstall:", v21);
          if (!v14 || (*(void *)(v14 + 40) & 0xFFFFFFFFFFFFFFFELL) != 0x12) {
            goto LABEL_40;
          }
          id v22 = *(id *)(v14 + 56);
          unsigned int v23 = v17;
          id v24 = v22;
          id v25 = v23;
          id v71 = v24;
          id v26 = (void *)objc_claimAutoreleasedReturnValue(-[AppLedgerItem installs](v23, "installs"));
          if ([v26 count] == (id)2)
          {
            BOOL v69 = v25;
            id v27 = (void *)objc_claimAutoreleasedReturnValue(-[AppLedgerItem installs](v25, "installs"));
            __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v27 firstObject]);
            if (v28)
            {
              uint64_t v29 = v28[2];

              BOOL v4 = v29 == 80;
              id v10 = v68;
              id v25 = v69;
              if (!v4)
              {
LABEL_39:

                p_superclass = (__objc2_class **)(&OBJC_METACLASS___ODRMutableApplication + 8);
LABEL_40:

                goto LABEL_41;
              }

              __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(-[AppLedgerItem installs](v69, "installs"));
              id v26 = (void *)objc_claimAutoreleasedReturnValue([v30 lastObject]);

              __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(-[AppLedgerItem installs](v69, "installs"));
              uint64_t v32 = objc_claimAutoreleasedReturnValue([v31 firstObject]);

              if (v26)
              {
                BOOL v33 = v26[6] == 0LL;
                __int16 v34 = (void *)v26[1];
              }

              else
              {
                __int16 v34 = 0LL;
                BOOL v33 = 1LL;
              }

              id v35 = v34;
              [v35 timeIntervalSinceReferenceDate];
              double v37 = v36;
              if (v32) {
                id v38 = *(void **)(v32 + 8);
              }
              else {
                id v38 = 0LL;
              }
              id v39 = v38;
              [v39 timeIntervalSinceReferenceDate];
              uint64_t v41 = (uint64_t)(v37 - v40);

              if (v41 <= 0) {
                unint64_t v42 = 0LL;
              }
              else {
                unint64_t v42 = v41 / 0x15180uLL;
              }
              v80[0] = @"bundleID";
              uint64_t v81 = objc_claimAutoreleasedReturnValue(-[AppLedgerItem bundleIdentifier](v69, "bundleIdentifier", v58));
              v80[1] = @"claimedVersionID";
              v66 = (void *)v81;
              unint64_t v63 = v42;
              if (v32) {
                __int128 v43 = *(void **)(v32 + 24);
              }
              else {
                __int128 v43 = 0LL;
              }
              id v44 = v43;
              uint64_t v82 = objc_claimAutoreleasedReturnValue([v44 stringValue]);
              v80[2] = @"updateVersionID";
              id v67 = (void *)v32;
              v64 = (void *)v82;
              id v65 = v44;
              if (v26) {
                int v45 = (void *)v26[3];
              }
              else {
                int v45 = 0LL;
              }
              id v46 = v45;
              __int16 v47 = (void *)objc_claimAutoreleasedReturnValue([v46 stringValue]);
              v83 = v47;
              v80[3] = @"wasFullUpdate";
              id v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v33));
              uint64_t v84 = v48;
              v80[4] = @"timeToUpdate";
              v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLong:](&OBJC_CLASS___NSNumber, "numberWithLong:", v63));
              v85 = v49;
              id v50 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v81,  v80,  5LL));

              uint64_t v51 = ASDLogHandleForCategory(14LL);
              id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
              if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
              {
                id v54 = (void *)objc_opt_class(v60, v53);
                *(_DWORD *)buf = 138543874;
                *(void *)&uint8_t buf[4] = v54;
                *(_WORD *)&buf[12] = 2114;
                *(void *)&buf[14] = v71;
                *(_WORD *)&buf[22] = 2114;
                v78 = v50;
                id v55 = v54;
                _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] We have an update of a factory claim update event: %{public}@",  buf,  0x20u);
              }

              *(void *)buf = _NSConcreteStackBlock;
              *(void *)&buf[8] = 3221225472LL;
              *(void *)&uint8_t buf[16] = sub_10022EC9C;
              v78 = &unk_1003ED990;
              id v79 = v50;
              id v56 = v50;
              AnalyticsSendEventLazy(@"com.apple.appstored.ClaimUpdates", buf);

              id v8 = v61;
              id v7 = v62;
            }

            else
            {
              id v67 = v27;
              id v56 = 0LL;
            }

            id v10 = v68;
            id v25 = v69;
            uint64_t v12 = v70;
          }

          goto LABEL_39;
        }

id sub_10022E158(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  id v8 = sub_10022E218;
  id v9 = sub_10022E228;
  id v10 = 0LL;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10022E230;
  v4[3] = &unk_1003E9BE0;
  v4[4] = a1;
  v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

uint64_t sub_10022E218(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10022E228(uint64_t a1)
{
}

void sub_10022E230(uint64_t a1)
{
  id v2 = sub_10022E268(*(void *)(a1 + 32));
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

id sub_10022E268(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  id v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
  id v3 = sub_10022EC54();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (!v4)
  {
    uint64_t v20 = ASDLogHandleForCategory(14LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543618;
      id v44 = (id)objc_opt_class(a1, v21);
      __int16 v45 = 2114;
      id v46 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] Unable to generate the path for ledger",  buf,  0x16u);
    }

    goto LABEL_16;
  }

  uint64_t v5 = -[NSData initWithContentsOfFile:](objc_alloc(&OBJC_CLASS___NSData), "initWithContentsOfFile:", v4);
  if (!v5)
  {
LABEL_16:
    double v19 = &__NSDictionary0__struct;
    goto LABEL_17;
  }

  uint64_t v6 = ASDLogHandleForCategory(14LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543618;
    id v44 = (id)objc_opt_class(a1, v8);
    __int16 v45 = 2114;
    id v46 = v2;
    id v9 = v44;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Loaded ledger",  buf,  0x16u);
  }

  id v41 = 0LL;
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v5,  0LL,  0LL,  &v41));
  id v11 = v41;
  uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSDictionary, v12);
  id v14 = v10;
  id v15 = 0LL;
  if ((objc_opt_isKindOfClass(v14, v13) & 1) != 0) {
    id v15 = v14;
  }

  if (v11)
  {
    uint64_t v16 = ASDLogHandleForCategory(14LL);
    double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      __int16 v34 = (void *)objc_opt_class(a1, v18);
      *(_DWORD *)buf = 138543874;
      id v44 = v34;
      __int16 v45 = 2114;
      id v46 = v2;
      __int16 v47 = 2114;
      id v48 = v11;
      id v35 = v34;
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] Failed to deserialize the cached ledger. Error: %{public}@",  buf,  0x20u);
    }
  }

  else if (v15)
  {
    BOOL v33 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"apps"]);

    if (v33)
    {
      double v19 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"apps"]);
      goto LABEL_13;
    }
  }

  double v19 = &__NSDictionary0__struct;
LABEL_13:

LABEL_17:
  if (v19)
  {
    double v36 = v2;
    id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    id v23 = v19;
    id v24 = [v23 countByEnumeratingWithState:&v37 objects:v42 count:16];
    if (v24)
    {
      id v25 = v24;
      uint64_t v26 = *(void *)v38;
      do
      {
        for (i = 0LL; i != v25; i = (char *)i + 1)
        {
          if (*(void *)v38 != v26) {
            objc_enumerationMutation(v23);
          }
          uint64_t v28 = *(void *)(*((void *)&v37 + 1) + 8LL * (void)i);
          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v28]);
          __int128 v30 = -[AppLedgerItem initWithDictionary:]( objc_alloc(&OBJC_CLASS___AppLedgerItem),  "initWithDictionary:",  v29);
          if (v30) {
            [v22 setObject:v30 forKeyedSubscript:v28];
          }
        }

        id v25 = [v23 countByEnumeratingWithState:&v37 objects:v42 count:16];
      }

      while (v25);
    }

    id v31 = [v22 copy];
    id v2 = v36;
  }

  else
  {
    id v31 = &__NSDictionary0__struct;
  }

  return v31;
}

void sub_10022E670(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10022E6FC;
    v6[3] = &unk_1003E9DC0;
    v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10022E6FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(id *)(a1 + 40);
  id v3 = v2;
  if (v1) {
    BOOL v4 = v2 == 0LL;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
    uint64_t v6 = ASDLogHandleForCategory(14LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = (void *)objc_opt_class(v1, v8);
      id v10 = v9;
      id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "componentsJoinedByString:", @", "));
      int v19 = 138543874;
      uint64_t v20 = v9;
      __int16 v21 = 2114;
      id v22 = v5;
      __int16 v23 = 2114;
      id v24 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Removing [%{public}@]",  (uint8_t *)&v19,  0x20u);
    }

    id v12 = sub_10022E268(v1);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v13));

    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 allKeys]);
    id v16 = [v15 count];

    [v14 removeObjectsForKeys:v3];
    double v17 = (void *)objc_claimAutoreleasedReturnValue([v14 allKeys]);
    id v18 = [v17 count];

    if (v16 > v18) {
      sub_10022E8BC(v1, v14, v5);
    }
  }
}

void sub_10022E8BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_10022ECA4;
  v33[3] = &unk_1003ED9B8;
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v34 = v7;
  [v6 enumerateKeysAndObjectsUsingBlock:v33];

  v41[0] = @"version";
  v41[1] = @"apps";
  v42[0] = &off_10040E220;
  v42[1] = v7;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v42,  v41,  2LL));
  id v9 = sub_10022EC54();
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if (v10)
  {
    id v32 = 0LL;
    id v11 = (id)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v8,  200LL,  0LL,  &v32));
    id v12 = v32;
    uint64_t v13 = v12;
    if (!v11)
    {
      uint64_t v25 = ASDLogHandleForCategory(14LL);
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        id v27 = (void *)objc_opt_class(a1, v26);
        *(_DWORD *)buf = 138543874;
        double v36 = v27;
        __int16 v37 = 2112;
        id v38 = v5;
        __int16 v39 = 2114;
        id v40 = v13;
        id v28 = v27;
        _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%@] Failed to serialize ledger. Error: %{public}@",  buf,  0x20u);
      }

      goto LABEL_12;
    }

    id v31 = v12;
    unsigned __int8 v14 = [v11 writeToFile:v10 options:1 error:&v31];
    id v15 = v31;

    uint64_t v16 = ASDLogHandleForCategory(14LL);
    double v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    id v18 = v17;
    if ((v14 & 1) != 0)
    {
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v20 = (void *)objc_opt_class(a1, v19);
        *(_DWORD *)buf = 138543874;
        double v36 = v20;
        __int16 v37 = 2112;
        id v38 = v5;
        __int16 v39 = 2112;
        id v40 = v10;
        id v21 = v20;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "[%{public}@] [%@] Wrote the ledger to: %@",  buf,  0x20u);
LABEL_16:
      }
    }

    else if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      __int128 v30 = (void *)objc_opt_class(a1, v29);
      *(_DWORD *)buf = 138543874;
      double v36 = v30;
      __int16 v37 = 2112;
      id v38 = v5;
      __int16 v39 = 2114;
      id v40 = v15;
      id v21 = v30;
      _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%@] Failed to write ledger. Error: %{public}@",  buf,  0x20u);
      goto LABEL_16;
    }

    uint64_t v13 = v15;
LABEL_12:

    goto LABEL_13;
  }

  uint64_t v22 = ASDLogHandleForCategory(14LL);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR))
  {
    id v24 = (void *)objc_opt_class(a1, v23);
    *(_DWORD *)buf = 138543618;
    double v36 = v24;
    __int16 v37 = 2112;
    id v38 = v5;
    id v11 = v24;
    _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%@] Unable to generate the path in order to cache ledger",  buf,  0x16u);
LABEL_13:
  }
}

id sub_10022EC54()
{
  id v0 = sub_100220DDC((uint64_t)&OBJC_CLASS___Storage);
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 stringByAppendingPathComponent:@"appledger.plist"]);

  return v2;
}

id sub_10022EC9C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_10022ECA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 dictionaryRepresentation]);
  [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v5];
}

void sub_10022ED10(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS|DISPATCH_BLOCK_ASSIGN_CURRENT, a2);
  dispatch_async(v3, v4);
}

dispatch_queue_t sub_10022ED60(const char *a1, dispatch_qos_class_t a2)
{
  dispatch_queue_attr_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v5 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v4);
  dispatch_queue_attr_t v6 = dispatch_queue_attr_make_with_qos_class(v5, a2, 0);
  id v7 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v6);
  dispatch_queue_t v8 = dispatch_queue_create(a1, v7);

  return v8;
}

id sub_10022EDCC(uint64_t a1)
{
  if (qword_1004623E0 != -1) {
    dispatch_once(&qword_1004623E0, &stru_1003ED9D8);
  }
  return (id)qword_1004623D8;
}

void sub_10022EE10(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___OcelotService);
  id v2 = (void *)qword_1004623D8;
  qword_1004623D8 = (uint64_t)v1;
}

void sub_1002301A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  if (*(void *)(a1 + 40))
  {
    id v18 = v7;
    dispatch_queue_t v8 = (void *)objc_claimAutoreleasedReturnValue([a2 firstObject]);
    id v9 = v8;
    if (v8)
    {
      else {
        id v10 = @"Paid";
      }
      [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"fsEntitlementsState"];
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 appAdamID]);
      [*(id *)(a1 + 32) setObject:v11 forKeyedSubscript:@"fsEntitlementsAdamID"];

      id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 offerID]);
      [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:@"fsEntitlementsOfferID"];
    }

    uint64_t v15 = a1 + 32;
    uint64_t v13 = *(void *)(a1 + 32);
    uint64_t v14 = *(void *)(v15 + 8);
    uint64_t v16 = ASDErrorWithSafeUserInfo(v18);
    double v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    (*(void (**)(uint64_t, uint64_t, void *))(v14 + 16))(v14, v13, v17);

    id v7 = v18;
  }
}

void *sub_100230530(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___RescueAbandonedPlaceholderOperation;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[5];
      a1[5] = v4;
    }
  }

  return a1;
}

void *sub_1002305A8(void *result, void *a2)
{
  if (result)
  {
    id v2 = result;
    id v3 = a2;
    [v2 lock];
    id v4 = [v3 copy];

    id v5 = (void *)v2[6];
    v2[6] = v4;

    return [v2 unlock];
  }

  return result;
}

id *sub_100230C60(id *a1, void *a2, void *a3, char a4)
{
  id v8 = a2;
  id v9 = a3;
  if (a1)
  {
    v14.receiver = a1;
    v14.super_class = (Class)&OBJC_CLASS___UpdatesTask;
    a1 = (id *)objc_msgSendSuper2(&v14, "init");
    if (a1)
    {
      id v10 = v8;
      if (!v8)
      {
        id v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
        id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_activeiTunesAccount"));
      }

      objc_storeStrong(a1 + 5, v10);
      if (!v8)
      {
      }

      objc_storeStrong(a1 + 6, a3);
      *((_BYTE *)a1 + 56) = a4;
      id v11 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
      id v12 = a1[8];
      a1[8] = v11;
    }
  }

  return a1;
}

id sub_100231980(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v5.receiver = a1;
    v5.super_class = (Class)&OBJC_CLASS___PushDiagnostic;
    a1 = objc_msgSendSuper2(&v5, "init");
    if (a1) {
      sub_10028EF00((uint64_t)v3, a1, 99LL);
    }
  }

  return a1;
}

uint64_t sub_100231D68(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = a1;
  objc_opt_self(&OBJC_CLASS___NWPath);
  uint64_t v2 = 0LL;
  while (1)
  {
    uint64_t v3 = qword_10038A8B8[v2];
    if (++v2 == 4)
    {
      uint64_t v3 = 0LL;
      break;
    }
  }

  return v3;
}

void sub_100231E50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v3 setInteger:a2 forKey:@"ODRSimulatedDownloadsBandwidthKey"];

  id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v4 synchronize];
}

id sub_100231EC0(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v2 = [v1 integerForKey:@"ODRSimulatedDownloadsBandwidthKey"];

  return v2;
}

id sub_100232E24(void *a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 objectForKey:@"contentRatingsBySystem"]);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSDictionary, v2);
  if ((objc_opt_isKindOfClass(v1, v3) & 1) == 0) {
    goto LABEL_4;
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v1 objectForKey:@"appsApple"]);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSDictionary, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) == 0)
  {

LABEL_4:
    id v4 = 0LL;
  }

  return v4;
}

void sub_1002331DC(uint64_t a1)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_3;
  }
  uint64_t v23 = 0LL;
  id v24 = &v23;
  uint64_t v25 = 0x2020000000LL;
  uint64_t v26 = 0LL;
  id v2 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  *(void *)buf = _NSConcreteStackBlock;
  *(void *)&buf[8] = 3221225472LL;
  *(void *)&uint8_t buf[16] = sub_1002365F0;
  id v28 = &unk_1003EDAA8;
  uint64_t v29 = &v23;
  [v3 readUsingSession:buf];

  uint64_t v4 = v24[3];
  _Block_object_dispose(&v23, 8);
  if (!v4)
  {
LABEL_3:
    uint64_t v5 = ASDLogHandleForCategory(3LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = (void *)objc_opt_class(*(void *)(a1 + 32), v7);
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138543618;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v9;
      id v10 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Metrics coordinator initializing app metadata",  buf,  0x16u);
    }

    uint64_t v11 = *(void *)(a1 + 32);
    if (v11) {
      sub_100236B54(v11, 0LL, *(void **)(a1 + 40));
    }
  }

  id v12 = sub_100233450((uint64_t)&OBJC_CLASS___MetricsCoordinator, 6LL);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (!v13)
  {
    sub_100233490((uint64_t)&OBJC_CLASS___MetricsCoordinator, 6LL);
    objc_super v14 = sub_100233450((uint64_t)&OBJC_CLASS___MetricsCoordinator, 6LL);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v14);
    uint64_t v15 = ASDLogHandleForCategory(3LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = (void *)objc_opt_class(*(void *)(a1 + 32), v17);
      uint64_t v19 = *(void *)(a1 + 40);
      id v20 = v18;
      if (v13)
      {
        [v13 timeIntervalSince1970];
        uint64_t v22 = (uint64_t)v21;
      }

      else
      {
        uint64_t v22 = 0LL;
      }

      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v19;
      *(_WORD *)&buf[22] = 2048;
      id v28 = (void *)v22;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Metrics coordinator first time recording events. Setting the start time as %{time_t}ld",  buf,  0x20u);
    }
  }
}

void sub_100233430( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__CFString *sub_100233450(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_opt_self(a1);
  uint64_t v4 = (__CFString *)sub_10023365C(v3, a2);
  if (v4)
  {
    id v5 = sub_1002F8C58((uint64_t)&OBJC_CLASS___AppDefaultsManager, v4);
    uint64_t v4 = (__CFString *)objc_claimAutoreleasedReturnValue(v5);
  }

  return v4;
}

void sub_100233490(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_opt_self(a1);
  uint64_t v4 = sub_1002335A4(v3, a2);
  if (v4)
  {
    id v5 = (const __CFString *)v4;
    id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    sub_1002F8D94((uint64_t)&OBJC_CLASS___AppDefaultsManager, v6, v5);
  }

id sub_100233508(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100233580;
  block[3] = &unk_1003E9EA8;
  block[4] = objc_opt_self(a1);
  if (qword_1004623F0 != -1) {
    dispatch_once(&qword_1004623F0, block);
  }
  return (id)qword_1004623E8;
}

void sub_100233580(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_1004623E8;
  qword_1004623E8 = (uint64_t)v1;
}

uint64_t sub_1002335A4(uint64_t a1, uint64_t a2)
{
  else {
    return (uint64_t)*(&off_1003EDB68 + a2 - 1);
  }
}

void sub_1002335E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_opt_self(a1);
  uint64_t v4 = sub_10023365C(v3, a2);
  if (v4)
  {
    id v5 = (const __CFString *)v4;
    id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    sub_1002F8D94((uint64_t)&OBJC_CLASS___AppDefaultsManager, v6, v5);
  }

uint64_t sub_10023365C(uint64_t a1, uint64_t a2)
{
  else {
    return (uint64_t)*(&off_1003EDB98 + a2 - 1);
  }
}

__CFString *sub_10023369C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_opt_self(a1);
  uint64_t v4 = (__CFString *)sub_1002335A4(v3, a2);
  if (v4)
  {
    id v5 = sub_1002F8C58((uint64_t)&OBJC_CLASS___AppDefaultsManager, v4);
    uint64_t v4 = (__CFString *)objc_claimAutoreleasedReturnValue(v5);
  }

  return v4;
}

id sub_1002336DC(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v2 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100233784;
  v6[3] = &unk_1003EA6A8;
  id v4 = v1;
  id v7 = v4;
  [v3 readUsingSession:v6];

  return v4;
}

void sub_100233784(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 connection]);
  id v4 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppMetadataEntity, v3, 0LL);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v4);

  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[AppMetadataEntity defaultProperties](&OBJC_CLASS___AppMetadataEntity, "defaultProperties"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10023384C;
  v7[3] = &unk_1003E98A8;
  id v8 = *(id *)(a1 + 32);
  [v6 enumerateMemoryEntitiesWithProperties:v5 usingBlock:v7];
}

void sub_10023384C(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = sub_1002C860C(v5);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v4) {
    [*(id *)(a1 + 32) setObject:v5 forKey:v4];
  }
}

void sub_1002338A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = v7;
  if (a1)
  {
    uint64_t v9 = *(dispatch_queue_s **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100233940;
    v10[3] = &unk_1003EDA30;
    v10[4] = a1;
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    id v11 = v7;
    dispatch_async(v9, v10);
  }
}

void sub_100233940(void *a1)
{
  double v21 = -[KeepAlive initWithName:]( objc_alloc(&OBJC_CLASS___KeepAlive),  "initWithName:",  @"com.apple.appstored.MetricsCoordinator.getEvents");
  id v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
  uint64_t v4 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v6 = a1[4];
  id v5 = (void *)a1[5];
  id v7 = v2;
  id v8 = v5;
  if (v6)
  {
    sub_100233CCC(v6, v7, v3);
    id v9 = sub_100236668(v4);
    id v10 = (id *)objc_claimAutoreleasedReturnValue(v9);
    id v11 = v10;
    if (v10 && [v10 shouldCollectMetrics])
    {
      objc_setProperty_nonatomic_copy(v11, v12, *(id *)(v6 + 8), 24LL);
      objc_setProperty_nonatomic_copy(v11, v13, v7, 32LL);
      id v14 = sub_1002336DC(v6);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      objc_storeStrong(v11 + 5, v15);

      id v22 = 0LL;
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v11 getAppEventsWithError:&v22]);
      id v17 = v22;
      if (v8) {
        v8[2](v8, v16, v17);
      }
    }

    else
    {
      if (!v8)
      {
LABEL_12:

        goto LABEL_13;
      }

      uint64_t v18 = ASDErrorDomain;
      objc_opt_self(&OBJC_CLASS___MetricsCoordinator);
      else {
        uint64_t v19 = *(&off_1003EDBE8 + v4 - 1);
      }
      id v17 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Handler not found for type: %@",  v19));
      uint64_t v20 = ASDErrorWithTitleAndMessage(v18, 507LL, v17, 0LL);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v20);
      v8[2](v8, 0LL, v16);
    }

    goto LABEL_12;
  }

void sub_100233B14(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100233BA4;
    block[3] = &unk_1003EC880;
    block[4] = a1;
    id v9 = v5;
    uint64_t v10 = a3;
    dispatch_async(v7, block);
  }
}

void sub_100233BA4(uint64_t *a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
  uint64_t v3 = ASDLogHandleForCategory(3LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (void *)objc_opt_class(a1[4], v5);
    uint64_t v7 = a1[5];
    int v9 = 138543874;
    uint64_t v10 = v6;
    __int16 v11 = 2112;
    uint64_t v12 = v2;
    __int16 v13 = 2114;
    uint64_t v14 = v7;
    id v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] [%{public}@] May be uninstalled",  (uint8_t *)&v9,  0x20u);
  }

  sub_100233CCC(a1[4], v2, a1[6]);
  sub_100234B58(a1[4], 2LL, v2, a1[6]);
  sub_100234B58(a1[4], 5LL, v2, a1[6]);
}

void sub_100233CCC(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  if (a1)
  {
    char v5 = sub_1002B824C((uint64_t)&OBJC_CLASS___LaunchCoordinator);
    id v6 = sub_1002336DC(a1);
    v139 = (void *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v7 = sub_100233450((uint64_t)&OBJC_CLASS___MetricsCoordinator, 6LL);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v142 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    uint64_t v9 = ASDLogHandleForCategory(3LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    v141 = v8;
    uint64_t v148 = a1;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = (void *)objc_opt_class(a1, v11);
      id v13 = v12;
      if (v8)
      {
        [v8 timeIntervalSince1970];
        id v8 = (void *)(uint64_t)v14;
      }

      if (v142)
      {
        [v142 timeIntervalSince1970];
        uint64_t v16 = (uint64_t)v15;
      }

      else
      {
        uint64_t v16 = 0LL;
      }

      id v17 = sub_10023695C((uint64_t)&OBJC_CLASS___MetricsCoordinator, a3);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      *(_DWORD *)buf = 138544386;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v4;
      *(_WORD *)&buf[22] = 2048;
      v169 = (os_log_s *)v8;
      *(_WORD *)v170 = 2048;
      *(void *)&v170[2] = v16;
      *(_WORD *)&v170[10] = 2114;
      *(void *)&v170[12] = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Record launches checking for launches from: %{time_t}ld to %{time_t}ld sourceType: %{public}@",  buf,  0x34u);

      id v8 = v141;
      a1 = v148;
    }

    v143 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    v146 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v20 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
    double v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_1002364B8;
    v169 = (os_log_s *)&unk_1003EA6A8;
    id v22 = v19;
    *(void *)v170 = v22;
    [v21 readUsingSession:buf];

    v149 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    v144 = v22;
    if ([v22 count])
    {
      uint64_t v23 = ASDLogHandleForCategory(3LL);
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = (void *)objc_opt_class(a1, v25);
        id v27 = v26;
        id v28 = (void *)objc_claimAutoreleasedReturnValue([v144 allValues]);
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "componentsJoinedByString:", @", "));
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v26;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v4;
        *(_WORD *)&buf[22] = 2114;
        v169 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Previously active launches: %{public}@",  buf,  0x20u);

        a1 = v148;
      }
    }

    id v158 = 0LL;
    id v30 = sub_1002B7554((uint64_t)&OBJC_CLASS___LaunchCoordinator, v5, v8, v142, v144, &v158);
    id v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    id v32 = (os_log_s *)v158;
    if (v32)
    {
      uint64_t v33 = ASDLogHandleForCategory(3LL);
      id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        v136 = (void *)objc_opt_class(a1, v35);
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v136;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v4;
        *(_WORD *)&buf[22] = 2114;
        v169 = v32;
        id v137 = v136;
        _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "[%{public}@/%@] Failed to lookup launches with error: %{public}@",  buf,  0x20u);
      }
    }

    v138 = v32;
    __int128 v156 = 0u;
    __int128 v157 = 0u;
    __int128 v154 = 0u;
    __int128 v155 = 0u;
    id obj = v31;
    id v36 = [obj countByEnumeratingWithState:&v154 objects:v167 count:16];
    if (v36)
    {
      id v37 = v36;
      uint64_t v38 = *(void *)v155;
      do
      {
        for (i = 0LL; i != v37; i = (char *)i + 1)
        {
          if (*(void *)v155 != v38) {
            objc_enumerationMutation(obj);
          }
          uint64_t v40 = *(void *)(*((void *)&v154 + 1) + 8LL * (void)i);
          if (v40
            && ((id v41 = (os_log_s *)*(id *)(v40 + 40)) != 0LL
             || (id v41 = (os_log_s *)*(id *)(v40 + 128)) != 0LL))
          {
            id v42 = *(id *)(v40 + 16);
            if (!v42 || (int v43 = *(unsigned __int8 *)(v40 + 9), v42, !v43))
            {
              uint64_t v50 = ASDLogHandleForCategory(3LL);
              uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v53 = (void *)objc_opt_class(a1, v52);
                *(_DWORD *)buf = 138543874;
                *(void *)&uint8_t buf[4] = v53;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v4;
                *(_WORD *)&buf[22] = 2114;
                v169 = v41;
                id v54 = v53;
                _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] [%{public}@] Skipping active launch",  buf,  0x20u);
              }

              v49 = v146;
              goto LABEL_33;
            }

            id v44 = (void *)objc_claimAutoreleasedReturnValue([v144 objectForKeyedSubscript:v41]);

            if (v44) {
              [v149 addObject:v41];
            }
            id v45 = *(id *)(v40 + 16);
            id v46 = *(id *)(v40 + 24);
            [v45 timeIntervalSinceDate:v46];
            double v48 = v47;

            if (v48 > 1.0)
            {
              v49 = v143;
LABEL_33:
              [v49 addObject:v40];
              goto LABEL_39;
            }

            uint64_t v55 = ASDLogHandleForCategory(3LL);
            id v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              BOOL v58 = (void *)objc_opt_class(a1, v57);
              id v59 = v58;
              uint64_t v60 = (os_log_s *)*(id *)(v40 + 40);
              *(_DWORD *)buf = 138543874;
              *(void *)&uint8_t buf[4] = v58;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v4;
              *(_WORD *)&buf[22] = 2114;
              v169 = v60;
              _os_log_impl( (void *)&_mh_execute_header,  v56,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] [%{public}@] Skipping too short event launch",  buf,  0x20u);

              a1 = v148;
            }
          }

          else
          {
            uint64_t v61 = ASDLogHandleForCategory(3LL);
            id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
            if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_39;
            }
            unint64_t v63 = (void *)objc_opt_class(a1, v62);
            *(_DWORD *)buf = 138543874;
            *(void *)&uint8_t buf[4] = v63;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v4;
            *(_WORD *)&buf[22] = 2114;
            v169 = (os_log_s *)v40;
            id v56 = v63;
            _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] [%{public}@] Skipping bundle / containingBundleID-less launch",  buf,  0x20u);
          }

LABEL_39:
        }

        id v37 = [obj countByEnumeratingWithState:&v154 objects:v167 count:16];
      }

      while (v37);
    }

    if ([v146 count])
    {
      uint64_t v64 = ASDLogHandleForCategory(3LL);
      id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        id v67 = (void *)objc_opt_class(v148, v66);
        id v68 = v67;
        BOOL v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v146, "componentsJoinedByString:", @", "));
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v67;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v4;
        *(_WORD *)&buf[22] = 2114;
        v169 = v69;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Saving active launches: %{public}@",  buf,  0x20u);
      }

      id v145 = v4;

      id v70 = v146;
      id v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      __int128 v162 = 0u;
      __int128 v163 = 0u;
      __int128 v164 = 0u;
      __int128 v165 = 0u;
      id v72 = v70;
      id v73 = [v72 countByEnumeratingWithState:&v162 objects:buf count:16];
      if (v73)
      {
        id v74 = v73;
        uint64_t v75 = *(void *)v163;
        do
        {
          for (j = 0LL; j != v74; j = (char *)j + 1)
          {
            if (*(void *)v163 != v75) {
              objc_enumerationMutation(v72);
            }
            uint64_t v77 = *(void *)(*((void *)&v162 + 1) + 8LL * (void)j);
            if (v77)
            {
              unsigned int v78 = *(_DWORD *)(v77 + 12) - 4;
              if (v78 <= 2)
              {
                id v79 = sub_1002CFA2C(objc_alloc(&OBJC_CLASS___LaunchEvent), (v78 + 5));
                id v80 = *(id *)(v77 + 24);
                if (v79) {
                  [v79 setValue:v80 forProperty:@"launch_start_time"];
                }

                sub_1002D01E0(v79, *(unsigned __int8 *)(v77 + 8));
                id v81 = *(id *)(v77 + 40);
                if (v79) {
                  [v79 setValue:v81 forProperty:@"bundle_id"];
                }

                id v82 = *(id *)(v77 + 32);
                sub_1002D023C(v79, v82);

                [v71 addObject:v79];
              }
            }
          }

          id v74 = [v72 countByEnumeratingWithState:&v162 objects:buf count:16];
        }

        while (v74);
      }

      if ([v71 count])
      {
        id v83 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
        uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue(v83);
        v159[0] = _NSConcreteStackBlock;
        v159[1] = 3221225472LL;
        v159[2] = sub_1002369A0;
        v159[3] = &unk_1003EC538;
        id v160 = v71;
        uint64_t v161 = v148;
        [v84 modifyUsingTransaction:v159];
      }

      id v4 = v145;
    }

    __int128 v152 = 0u;
    __int128 v153 = 0u;
    __int128 v150 = 0u;
    __int128 v151 = 0u;
    v85 = (void *)objc_claimAutoreleasedReturnValue([v144 allValues]);
    id v86 = [v85 countByEnumeratingWithState:&v150 objects:v166 count:16];
    v87 = v149;
    if (v86)
    {
      id v88 = v86;
      uint64_t v89 = *(void *)v151;
      do
      {
        v90 = 0LL;
        do
        {
          if (*(void *)v151 != v89) {
            objc_enumerationMutation(v85);
          }
          id v91 = *(id **)(*((void *)&v150 + 1) + 8LL * (void)v90);
          if (v91) {
            id v92 = v91[5];
          }
          else {
            id v92 = 0LL;
          }
          id v93 = v92;
          if (([v87 containsObject:v93] & 1) == 0)
          {
            if (v91 && (id v94 = v91[3]) != 0LL)
            {
              v95 = v94;
              [v94 timeIntervalSinceDate:*(void *)(v148 + 24)];
              double v97 = v96;

              v87 = v149;
              if (v97 >= 0.0) {
                goto LABEL_78;
              }
              uint64_t v98 = ASDLogHandleForCategory(3LL);
              v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
              if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
              {
                v101 = (void *)objc_opt_class(v148, v100);
                v102 = *(void **)(v148 + 24);
                id v103 = v101;
                if (v102)
                {
                  [v102 timeIntervalSince1970];
                  uint64_t v105 = (uint64_t)v104;
                }

                else
                {
                  uint64_t v105 = 0LL;
                }

                *(_DWORD *)buf = 138544130;
                *(void *)&uint8_t buf[4] = v101;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v4;
                *(_WORD *)&buf[22] = 2114;
                v169 = (os_log_s *)v91;
                *(_WORD *)v170 = 2048;
                *(void *)&v170[2] = v105;
                _os_log_impl( (void *)&_mh_execute_header,  v99,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Removing active launch: %{public}@ that occurred before the system up date: %{time_t}ld",  buf,  0x2Au);

                v87 = v149;
              }

              id v93 = v91[5];
              [v87 addObject:v93];
            }

            else
            {
              v87 = v149;
            }
          }

LABEL_78:
          v90 = (char *)v90 + 1;
        }

        while (v88 != v90);
        id v106 = [v85 countByEnumeratingWithState:&v150 objects:v166 count:16];
        id v88 = v106;
      }

      while (v106);
    }

    if ([v87 count])
    {
      id v107 = (id)objc_claimAutoreleasedReturnValue([v87 allObjects]);
      id v108 = v4;
      id v109 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
      v110 = (void *)objc_claimAutoreleasedReturnValue(v109);
      *(void *)buf = _NSConcreteStackBlock;
      *(void *)&buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = sub_100236DCC;
      v169 = (os_log_s *)&unk_1003EDAD0;
      id v111 = v107;
      *(void *)v170 = v111;
      *(void *)&v170[8] = v148;
      id v112 = v108;
      *(void *)&v170[16] = v112;
      [v110 modifyUsingTransaction:buf];
    }

    if ([v143 count])
    {
      uint64_t v113 = ASDLogHandleForCategory(3LL);
      v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
      if (os_log_type_enabled(v114, OS_LOG_TYPE_INFO))
      {
        v116 = (void *)objc_opt_class(v148, v115);
        id v117 = v116;
        v118 = (os_log_s *)[v143 count];
        *(_DWORD *)buf = 138543874;
        *(void *)&uint8_t buf[4] = v116;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v4;
        *(_WORD *)&buf[22] = 2048;
        v169 = v118;
        _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_INFO,  "[%{public}@/%@] Discovered %ld launch(s)",  buf,  0x20u);
      }

      id v119 = [v143 copy];
      v120 = objc_alloc_init(&OBJC_CLASS___CrossfireMetricsHandler);
      p_isa = (id *)&v120->super.super.isa;
      if (v120 && -[CrossfireMetricsHandler shouldCollectMetrics](v120, "shouldCollectMetrics"))
      {
        objc_setProperty_nonatomic_copy(p_isa, v122, v4, 32LL);
        objc_storeStrong(p_isa + 5, v139);
        [p_isa recordLaunches:v119];
      }

      v123 = objc_alloc_init(&OBJC_CLASS___ArcadePayoutMetricsHandler);
      v124 = (id *)&v123->super.super.isa;
      if (v123 && -[ArcadePayoutMetricsHandler shouldCollectMetrics](v123, "shouldCollectMetrics"))
      {
        objc_setProperty_nonatomic_copy(v124, v125, v4, 32LL);
        objc_storeStrong(v124 + 5, v139);
        [v124 recordLaunches:v119];
      }

      v126 = objc_alloc_init(&OBJC_CLASS___ArcadeMetricsHandler);
      v127 = (id *)&v126->super.super.isa;
      if (v126 && -[ArcadeMetricsHandler shouldCollectMetrics](v126, "shouldCollectMetrics"))
      {
        objc_setProperty_nonatomic_copy(v127, v128, v4, 32LL);
        objc_storeStrong(v127 + 5, v139);
        [v127 recordLaunches:v119];
      }

      v87 = v149;
    }

    sub_100233490((uint64_t)&OBJC_CLASS___MetricsCoordinator, 6LL);
    uint64_t v129 = ASDLogHandleForCategory(3LL);
    v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
    if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
    {
      v132 = (void *)objc_opt_class(v148, v131);
      id v133 = v132;
      v134 = sub_10023695C((uint64_t)&OBJC_CLASS___MetricsCoordinator, a3);
      v135 = (os_log_s *)objc_claimAutoreleasedReturnValue(v134);
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v132;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v4;
      *(_WORD *)&buf[22] = 2114;
      v169 = v135;
      _os_log_impl( (void *)&_mh_execute_header,  v130,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Record launches complete for sourceType: %{public}@",  buf,  0x20u);

      v87 = v149;
    }
  }
}

void sub_100234B58(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = sub_100236AA8(a1, a2, v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = v9;
    if (v9 && [v9 shouldCollectMetrics])
    {
      if (a2 == 5)
      {
        objc_setProperty_nonatomic_copy(v10, v11, *(id *)(a1 + 8), 24LL);
        uint64_t v12 = ASDLogHandleForCategory(3LL);
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          double v15 = (void *)objc_opt_class(a1, v14);
          id v16 = v15;
          objc_opt_self(&OBJC_CLASS___MetricsCoordinator);
          id v17 = *(void **)(a1 + 8);
          uint64_t v18 = sub_10023695C((uint64_t)&OBJC_CLASS___MetricsCoordinator, a4);
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
          int v27 = 138544386;
          id v28 = v15;
          __int16 v29 = 2112;
          id v30 = v7;
          __int16 v31 = 2114;
          id v32 = @"ODP";
          __int16 v33 = 2114;
          id v34 = v17;
          __int16 v35 = 2114;
          id v36 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] [%{public}@] Recording supplemental metrics with activeAccountID: %{public}@ sourceType: %{public}@",  (uint8_t *)&v27,  0x34u);
        }
      }

      else
      {
        uint64_t v20 = ASDLogHandleForCategory(3LL);
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          id v22 = (void *)objc_opt_class(a1, v21);
          id v23 = v22;
          objc_opt_self(&OBJC_CLASS___MetricsCoordinator);
          else {
            id v24 = *(&off_1003EDBC8 + a2 - 1);
          }
          uint64_t v25 = sub_10023695C((uint64_t)&OBJC_CLASS___MetricsCoordinator, a4);
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
          int v27 = 138544130;
          id v28 = v22;
          __int16 v29 = 2112;
          id v30 = v7;
          __int16 v31 = 2114;
          id v32 = v24;
          __int16 v33 = 2114;
          id v34 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] [%{public}@] Recording supplemental metrics for sourceType: %{public}@",  (uint8_t *)&v27,  0x2Au);
        }
      }

      [v10 recordSupplementalAppMetricsEvents];
    }
  }
}

void sub_100234DCC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = v7;
  if (a1)
  {
    uint64_t v9 = *(dispatch_queue_s **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100234E6C;
    v10[3] = &unk_1003EDA30;
    v10[4] = a1;
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    id v11 = v7;
    dispatch_async(v9, v10);
  }
}

void sub_100234E6C(uint64_t a1)
{
  uint64_t v19 = -[KeepAlive initWithName:]( objc_alloc(&OBJC_CLASS___KeepAlive),  "initWithName:",  @"com.apple.appstored.MetricsCoordinator.post");
  id v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = (void (**)(id, uint64_t, void))*(id *)(a1 + 40);
  if (v5)
  {
    sub_100233CCC(v5, v2, v3);
    id v7 = sub_100236668(v4);
    id v8 = (id *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = v8;
    if (v8 && [v8 shouldCollectMetrics])
    {
      uint64_t v10 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
      objc_setProperty_nonatomic_copy(v9, v11, *(id *)(v5 + 8), 24LL);
      objc_setProperty_nonatomic_copy(v9, v12, v10, 32LL);
      id v13 = sub_1002336DC(v5);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      objc_storeStrong(v9 + 5, v14);

      [v9 postMetrics];
      if (v6) {
        v6[2](v6, 1LL, 0LL);
      }
    }

    else
    {
      if (!v6)
      {
LABEL_12:

        goto LABEL_13;
      }

      uint64_t v15 = ASDErrorDomain;
      objc_opt_self(&OBJC_CLASS___MetricsCoordinator);
      else {
        id v16 = *(&off_1003EDBE8 + v4 - 1);
      }
      uint64_t v10 = (_TtC9appstored6LogKey *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Handler not found for type: %@",  v16,  v19));
      uint64_t v17 = ASDErrorWithTitleAndMessage(v15, 507LL, v10, 0LL);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      ((void (**)(id, uint64_t, void *))v6)[2](v6, 0LL, v18);
    }

    goto LABEL_12;
  }

void sub_10023502C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002350BC;
    block[3] = &unk_1003EC880;
    block[4] = a1;
    id v9 = v5;
    uint64_t v10 = a3;
    dispatch_async(v7, block);
  }
}

void sub_1002350BC(uint64_t a1)
{
  id v2 = -[KeepAlive initWithName:]( objc_alloc(&OBJC_CLASS___KeepAlive),  "initWithName:",  @"com.apple.appstored.MetricsCoordinator.recordDeleted");
  sub_100235114(*(void *)(a1 + 32), *(void **)(a1 + 40), 0, 3, *(void *)(a1 + 48));
}

void sub_100235114(uint64_t a1, void *a2, unsigned int a3, int a4, uint64_t a5)
{
  id v8 = a2;
  if (a1)
  {
    id v9 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
    if (a4 == 1)
    {
      uint64_t v10 = ASDLogHandleForCategory(3LL);
      SEL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = (void *)objc_opt_class(a1, v12);
        id v14 = v13;
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "componentsJoinedByString:", @", "));
        id v16 = sub_10023695C((uint64_t)&OBJC_CLASS___MetricsCoordinator, a5);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        *(_DWORD *)buf = 138544130;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2114;
        uint64_t v75 = v15;
        LOWORD(v76) = 2114;
        *(void *)((char *)&v76 + 2) = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Recording installed apps: [%{public}@] sourceType: %{public}@",  buf,  0x2Au);

LABEL_8:
      }
    }

    else
    {
      if (a4 != 3) {
        goto LABEL_10;
      }
      uint64_t v18 = ASDLogHandleForCategory(3LL);
      SEL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = (void *)objc_opt_class(a1, v19);
        id v14 = v20;
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "componentsJoinedByString:", @", "));
        id v22 = sub_10023695C((uint64_t)&OBJC_CLASS___MetricsCoordinator, a5);
        id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        *(_DWORD *)buf = 138544130;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2114;
        uint64_t v75 = v21;
        LOWORD(v76) = 2114;
        *(void *)((char *)&v76 + 2) = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Recording uninstalled apps: [%{public}@] sourceType: %{public}@",  buf,  0x2Au);

        goto LABEL_8;
      }
    }

LABEL_10:
    uint64_t v24 = ASDLogHandleForCategory(3LL);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = (void *)objc_opt_class(a1, v26);
      id v28 = v27;
      __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "componentsJoinedByString:", @", "));
      id v30 = sub_10023695C((uint64_t)&OBJC_CLASS___MetricsCoordinator, a5);
      __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      *(_DWORD *)buf = 138544130;
      *(void *)&uint8_t buf[4] = v27;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2114;
      uint64_t v75 = v29;
      LOWORD(v76) = 2114;
      *(void *)((char *)&v76 + 2) = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Preparing with apps: [%{public}@] sourceType: %{public}@",  buf,  0x2Au);
    }

    sub_100233CCC(a1, v9, a5);
    sub_100234B58(a1, 2LL, v9, a5);
    sub_100234B58(a1, 5LL, v9, a5);
    uint64_t v32 = ASDLogHandleForCategory(3LL);
    __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v35 = (void *)objc_opt_class(a1, v34);
      id v36 = v35;
      id v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "componentsJoinedByString:", @", "));
      uint64_t v38 = sub_10023695C((uint64_t)&OBJC_CLASS___MetricsCoordinator, a5);
      __int16 v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      *(_DWORD *)buf = 138544130;
      *(void *)&uint8_t buf[4] = v35;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2114;
      uint64_t v75 = v37;
      LOWORD(v76) = 2114;
      *(void *)((char *)&v76 + 2) = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Recording events for apps: [%{public}@] sourceType: %{public}@",  buf,  0x2Au);
    }

    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v41 = sub_100236AA8(a1, 1LL, v9);
    id v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
    int v43 = v42;
    if (a5 != 4 && v42 && [v42 shouldCollectMetrics])
    {
      objc_opt_self(&OBJC_CLASS___MetricsCoordinator);
      [v40 addObject:@"Crossfire"];
      if (a4 == 1)
      {
        [v43 recordInstallEventsForBundleIDs:v8 installType:a3];
      }

      else if (a4 == 3)
      {
        [v43 recordDeletedBundleIDs:v8];
      }
    }

    id v44 = sub_100236AA8(a1, 3LL, v9);
    id v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
    id v46 = v45;
    if (v45 && [v45 shouldCollectMetrics])
    {
      objc_opt_self(&OBJC_CLASS___MetricsCoordinator);
      [v40 addObject:@"Summary"];
      if (a4 == 1)
      {
        [v46 recordInstallEventsForBundleIDs:v8 installType:a3];
      }

      else if (a4 == 3)
      {
        [v46 recordDeletedBundleIDs:v8];
      }
    }

    double v47 = sub_100236AA8(a1, 5LL, v9);
    double v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    v49 = v48;
    if (v48 && [v48 shouldCollectMetrics])
    {
      objc_opt_self(&OBJC_CLASS___MetricsCoordinator);
      [v40 addObject:@"ODP"];
      if (a4 == 1)
      {
        [v49 recordInstallEventsForBundleIDs:v8 installType:a3];
        goto LABEL_32;
      }

      if (a4 != 3)
      {
LABEL_43:

        goto LABEL_44;
      }

      [v49 recordDeletedBundleIDs:v8];
    }

    else
    {
      if (a4 == 1)
      {
LABEL_32:
        sub_100236B54(a1, v8, v9);
        uint64_t v50 = ASDLogHandleForCategory(3LL);
        uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v53 = (void *)objc_opt_class(a1, v52);
          id v72 = v53;
          id v54 = v40;
          id v55 = v8;
          id v56 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "componentsJoinedByString:", @", "));
          uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "componentsJoinedByString:", @", "));
          *(_DWORD *)buf = 138544130;
          *(void *)&uint8_t buf[4] = v53;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2114;
          uint64_t v75 = v56;
          LOWORD(v76) = 2114;
          *(void *)((char *)&v76 + 2) = v57;
          _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Recorded installed apps: [%{public}@] for types: [%{public}@]",  buf,  0x2Au);

          uint64_t v40 = v54;
          id v8 = v55;
        }

void sub_1002358F8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  id v8 = v7;
  if (a1)
  {
    id v9 = *(dispatch_queue_s **)(a1 + 16);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100235998;
    v10[3] = &unk_1003EDA30;
    v10[4] = a1;
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    id v11 = v7;
    dispatch_async(v9, v10);
  }
}

void sub_100235998(void *a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
  uint64_t v4 = a1[6];
  uint64_t v3 = a1[7];
  uint64_t v6 = a1[4];
  id v5 = (void *)a1[5];
  id v8 = v2;
  id v7 = v5;
  if (v6)
  {
    sub_100233CCC(v6, v8, v3);
    sub_100234B58(v6, v4, v8, v3);
    if (v7) {
      v7[2](v7, 1LL, 0LL);
    }
  }
}

void sub_100235A38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = v6;
  if (a1)
  {
    id v8 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100235ACC;
    block[3] = &unk_1003EDA58;
    block[4] = a1;
    uint64_t v11 = a2;
    id v10 = v6;
    dispatch_async(v8, block);
  }
}

void sub_100235ACC(uint64_t a1)
{
  uint64_t v24 = -[KeepAlive initWithName:]( objc_alloc(&OBJC_CLASS___KeepAlive),  "initWithName:",  @"com.apple.appstored.MetricsCoordinator.record");
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (void (**)(id, uint64_t, void))*(id *)(a1 + 40);
  if (v3)
  {
    id v5 = -[KeepAlive initWithName:]( objc_alloc(&OBJC_CLASS___KeepAlive),  "initWithName:",  @"com.apple.appstored.MetricsHandler.reset");
    id v6 = sub_100236668(v2);
    id v7 = (id *)objc_claimAutoreleasedReturnValue(v6);
    id v8 = v7;
    if (v7 && [v7 shouldCollectMetrics])
    {
      uint64_t v9 = ASDLogHandleForCategory(3LL);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = (void *)objc_opt_class(v3, v11);
        id v13 = v12;
        objc_opt_self(&OBJC_CLASS___MetricsCoordinator);
        else {
          id v14 = *(&off_1003EDBE8 + v2 - 1);
        }
        *(_DWORD *)buf = 138543618;
        uint64_t v26 = v12;
        __int16 v27 = 2114;
        id v28 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%{public}@] Reset metrics",  buf,  0x16u);
      }

      uint64_t v17 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
      objc_setProperty_nonatomic_copy(v8, v20, *(id *)(v3 + 8), 24LL);
      objc_setProperty_nonatomic_copy(v8, v21, v17, 32LL);
      id v22 = sub_1002336DC(v3);
      id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      objc_storeStrong(v8 + 5, v23);

      [v8 resetMetrics];
      v4[2](v4, 1LL, 0LL);
    }

    else
    {
      if (!v4)
      {
LABEL_16:

        goto LABEL_17;
      }

      uint64_t v15 = ASDErrorDomain;
      objc_opt_self(&OBJC_CLASS___MetricsCoordinator);
      else {
        id v16 = *(&off_1003EDBE8 + v2 - 1);
      }
      uint64_t v17 = (_TtC9appstored6LogKey *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Handler not found for type: %@",  v16,  v24));
      uint64_t v18 = ASDErrorWithTitleAndMessage(v15, 507LL, v17, 0LL);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      ((void (**)(id, uint64_t, void *))v4)[2](v4, 0LL, v19);
    }

    goto LABEL_16;
  }

void sub_100235D6C(uint64_t a1, void *a2, char a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = v7;
  if (a1)
  {
    uint64_t v9 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100235E18;
    block[3] = &unk_1003EDA80;
    block[4] = a1;
    char v14 = a3;
    id v12 = 0LL;
    uint64_t v13 = a4;
    id v11 = v7;
    dispatch_async(v9, block);
  }
}

void sub_100235E18(uint64_t a1)
{
  uint64_t v2 = -[KeepAlive initWithName:]( objc_alloc(&OBJC_CLASS___KeepAlive),  "initWithName:",  @"com.apple.appstored.MetricsCoordinator.recordInstalls");
  sub_100235114(*(void *)(a1 + 32), *(void **)(a1 + 40), *(unsigned __int8 *)(a1 + 64), 1, *(void *)(a1 + 56));
}

void sub_100235E70(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100235F04;
    block[3] = &unk_1003EDA58;
    block[4] = a1;
    uint64_t v10 = a2;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_100235F04(uint64_t *a1)
{
  uint64_t v4 = -[KeepAlive initWithName:]( objc_alloc(&OBJC_CLASS___KeepAlive),  "initWithName:",  @"com.apple.appstored.MetricsCoordinator.recordLaunches");
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
  sub_100233CCC(a1[4], v2, a1[6]);
  uint64_t v3 = a1[5];
  if (v3) {
    (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, 1LL, 0LL);
  }
}

void sub_100235F84(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100236018;
    block[3] = &unk_1003EDA58;
    block[4] = a1;
    uint64_t v10 = a2;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_100236018(uint64_t *a1)
{
  uint64_t v2 = -[KeepAlive initWithName:]( objc_alloc(&OBJC_CLASS___KeepAlive),  "initWithName:",  @"com.apple.appstored.MetricsHandler.recordDeleted");
  id v3 = sub_1002336DC(a1[4]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v38 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
  if ([v4 count])
  {
    __int16 v35 = v2;
    id v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(+[LSDatabaseContext sharedDatabaseContext](&OBJC_CLASS___LSDatabaseContext, "sharedDatabaseContext"));
    unsigned int v32 = [v33 startAccessingReturningError:0];
    __int128 v39 = 0u;
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v42 = 0u;
    uint64_t v34 = v4;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 keyEnumerator]);
    id v6 = [v5 countByEnumeratingWithState:&v39 objects:v49 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v40;
      id v36 = a1;
      do
      {
        id v9 = 0LL;
        do
        {
          if (*(void *)v40 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v39 + 1) + 8LL * (void)v9);
          id v11 = objc_autoreleasePoolPush();
          id v12 = (void *)objc_claimAutoreleasedReturnValue( +[ApplicationProxy proxyForBundleID:]( &OBJC_CLASS___ApplicationProxy,  "proxyForBundleID:",  v10));
          if (([v12 isInstalled] & 1) != 0
            || ([v12 isOffloaded] & 1) != 0
            || [v12 isPlaceholder])
          {
            uint64_t v13 = ASDLogHandleForCategory(3LL);
            char v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
            {
              SEL v21 = (void *)objc_opt_class(a1[4], v15);
              *(_DWORD *)buf = 138543874;
              id v44 = v21;
              __int16 v45 = 2112;
              id v46 = v38;
              __int16 v47 = 2114;
              double v48 = v10;
              id v22 = v21;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[%{public}@/%@] [Sync] [%{public}@] Not recording uninstall non candidate install type",  buf,  0x20u);
            }
          }

          else if (sub_10023643C(a1[4], v12))
          {
            uint64_t v16 = ASDLogHandleForCategory(3LL);
            uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v19 = (void *)objc_opt_class(a1[4], v18);
              *(_DWORD *)buf = 138543874;
              id v44 = v19;
              __int16 v45 = 2112;
              id v46 = v38;
              __int16 v47 = 2114;
              double v48 = v10;
              id v20 = v19;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] [Sync] [%{public}@] Recording uninstall",  buf,  0x20u);

              a1 = v36;
            }

            [v37 addObject:v10];
          }

          objc_autoreleasePoolPop(v11);
          id v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id v23 = [v5 countByEnumeratingWithState:&v39 objects:v49 count:16];
        id v7 = v23;
      }

      while (v23);
    }

    if (v32) {
      [v33 stopAccessing];
    }
    uint64_t v4 = v34;
    uint64_t v2 = v35;
    if ([v37 count])
    {
      uint64_t v24 = ASDLogHandleForCategory(3LL);
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v27 = (void *)objc_opt_class(a1[4], v26);
        id v28 = a1;
        id v29 = v27;
        id v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "componentsJoinedByString:", @", "));
        *(_DWORD *)buf = 138543874;
        id v44 = v27;
        __int16 v45 = 2112;
        id v46 = v38;
        __int16 v47 = 2114;
        double v48 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] [Sync] Found apps that were deleted event for bundleIDs: [%{public}@]",  buf,  0x20u);

        a1 = v28;
      }

      sub_100235114(a1[4], v37, 0, 3, a1[6]);
    }
  }

  uint64_t v31 = a1[5];
  if (v31) {
    (*(void (**)(uint64_t, uint64_t, void))(v31 + 16))(v31, 1LL, 0LL);
  }
}

uint64_t sub_10023643C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if ([v3 isStoreOriginated]
      && (![v4 hasMIDBasedSINF] || objc_msgSend(v4, "isAppClip")))
    {
      else {
        a1 = (uint64_t)[v4 isOffloaded];
      }
    }

    else
    {
      a1 = 0LL;
    }
  }

  return a1;
}

void sub_1002364B8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 connection]);
  id v4 = sub_10024C1D0((uint64_t)&OBJC_CLASS___ActiveLaunchEventEntity, v3, 0LL);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v4);

  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[ActiveLaunchEventEntity defaultProperties]( &OBJC_CLASS___ActiveLaunchEventEntity,  "defaultProperties"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100236580;
  v7[3] = &unk_1003E98A8;
  id v8 = *(id *)(a1 + 32);
  [v6 enumerateMemoryEntitiesWithProperties:v5 usingBlock:v7];
}

void sub_100236580(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = sub_1002CFD24(v7);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
  {
    id v5 = sub_1002CFFE8(v7);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:v4];
  }
}

void sub_1002365F0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 connection]);
  id v4 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppMetadataEntity, v3, 0LL);
  id v5 = (id)objc_claimAutoreleasedReturnValue(v4);

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v5 countOfEntities];
}

id sub_100236668(uint64_t a1)
{
  switch(a1)
  {
    case 1LL:
      id v1 = &off_1003D9CD0;
      break;
    case 3LL:
      id v1 = off_1003D9CB0;
      break;
    case 4LL:
      id v1 = &off_1003D9CB8;
      break;
    default:
      return 0LL;
  }

  return objc_alloc_init(*v1);
}

void sub_10023673C(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"DSID"]);

  if (v4)
  {
    id v5 = sub_1001DEDF8(v3, @"DSID");
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"active"]);

  if (v6)
  {
    id v7 = sub_1001DEDF8(v3, @"active");
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v7);
  }

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"signout"]);

  if (v3 && v8) {
    sub_1001DEDAC(v3, @"signout", 0LL);
  }
  if ([v6 BOOLValue] && *(void *)(*(void *)(a1 + 40) + 8))
  {
    uint64_t v9 = ASDLogHandleForCategory(3LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = (void *)objc_opt_class(*(void *)(a1 + 40), v11);
      uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8LL);
      id v14 = v12;
      int v16 = 138544386;
      uint64_t v17 = v12;
      __int16 v18 = 2112;
      uint64_t v19 = v2;
      __int16 v20 = 2114;
      uint64_t v21 = v13;
      __int16 v22 = 2114;
      id v23 = v4;
      __int16 v24 = 1024;
      unsigned int v25 = [v6 BOOLValue];
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] Not recording metrics following change from accountID: %{public}@ to accountID: %{public}@ active: %{BOOL}d",  (uint8_t *)&v16,  0x30u);
    }
  }

  else {
    uint64_t v15 = 0LL;
  }
  objc_storeStrong((id *)(*(void *)(a1 + 40) + 8LL), v15);
}

CFStringRef sub_10023695C(uint64_t a1, uint64_t a2)
{
  else {
    return *(&off_1003EDC10 + a2 - 1);
  }
}

uint64_t sub_1002369A0(uint64_t a1, void *a2)
{
  id v4 = *(void **)(a1 + 32);
  id v13 = 0LL;
  id v5 = sub_10030E2BC(a2, v4, &v13);
  id v6 = v13;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(3LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = (void *)objc_opt_class(*(void *)(a1 + 40), v9);
      *(_DWORD *)buf = 138543618;
      uint64_t v15 = v11;
      __int16 v16 = 2114;
      id v17 = v6;
      id v12 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%{public}@] Failed to record active launches due to error: %{public}@",  buf,  0x16u);
    }
  }

  return 1LL;
}

id *sub_100236AA8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = sub_100236668(a2);
  uint64_t v7 = (id *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (v7 && [v7 shouldCollectMetrics])
  {
    objc_setProperty_nonatomic_copy(v8, v9, *(id *)(a1 + 8), 24LL);
    objc_setProperty_nonatomic_copy(v8, v10, v5, 32LL);
    id v11 = sub_1002336DC(a1);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    objc_storeStrong(v8 + 5, v12);

    id v13 = v8;
  }

  else
  {
    id v13 = 0LL;
  }

  return v13;
}

void sub_100236B54(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_100237244;
  v21[3] = &unk_1003EDB20;
  id v20 = v5;
  id v22 = v20;
  uint64_t v23 = a1;
  id v8 = v6;
  id v24 = v8;
  id v25 = v7;
  id v9 = v7;
  +[ApplicationProxy enumerateApplicationsOfType:usingBlock:]( &OBJC_CLASS___ApplicationProxy,  "enumerateApplicationsOfType:usingBlock:",  0LL,  v21);
  id v10 = v9;
  uint64_t v29 = 0LL;
  id v30 = &v29;
  uint64_t v31 = 0x3032000000LL;
  unsigned int v32 = sub_1002373FC;
  __int16 v33 = sub_10023740C;
  id v34 = 0LL;
  id v11 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_100237414;
  v26[3] = &unk_1003EDB48;
  id v13 = v10;
  id v27 = v13;
  id v28 = &v29;
  [v12 modifyUsingTransaction:v26];

  if (v30[5])
  {
    uint64_t v14 = ASDLogHandleForCategory(3LL);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      id v17 = (void *)objc_opt_class(a1, v16);
      uint64_t v18 = v30[5];
      *(_DWORD *)buf = 138543618;
      id v36 = v17;
      __int16 v37 = 2114;
      uint64_t v38 = v18;
      id v19 = v17;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[%{public}@] Unable to record current apps due to error: %{public}@",  buf,  0x16u);
    }
  }

  _Block_object_dispose(&v29, 8);
}

void sub_100236DA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_100236DCC(uint64_t a1, void *a2)
{
  id v22 = a2;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id obj = *(id *)(a1 + 32);
  id v3 = [obj countByEnumeratingWithState:&v23 objects:v33 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v24;
    *(void *)&__int128 v4 = 138543874LL;
    __int128 v20 = v4;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v24 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v23 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"bundle_id",  v8,  v20));
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v22 connection]);
        id v11 = sub_10024C088((uint64_t)&OBJC_CLASS___ActiveLaunchEventEntity, v10, v9);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

        [v12 deleteFromDatabase];
        uint64_t v13 = ASDLogHandleForCategory(3LL);
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = (void *)objc_opt_class(*(void *)(a1 + 40), v15);
          uint64_t v17 = *(void *)(a1 + 48);
          *(_DWORD *)buf = v20;
          id v28 = v16;
          __int16 v29 = 2112;
          uint64_t v30 = v17;
          __int16 v31 = 2114;
          uint64_t v32 = v8;
          id v18 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] [%{public}@] Removed active app launch",  buf,  0x20u);
        }
      }

      id v5 = [obj countByEnumeratingWithState:&v23 objects:v33 count:16];
    }

    while (v5);
  }

  return 1LL;
}

uint64_t sub_100236FD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v24 = (void *)a1;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v29 objects:v41 count:16];
  if (v4)
  {
    id v6 = v4;
    uint64_t v27 = *(void *)v30;
    uint64_t v7 = &OBJC_METACLASS___TestFlightUploadSubTask;
    *(void *)&__int128 v5 = 138544130LL;
    __int128 v22 = v5;
    id v23 = v3;
    do
    {
      for (i = 0LL; i != v6; i = (char *)i + 1)
      {
        if (*(void *)v30 != v27) {
          objc_enumerationMutation(obj);
        }
        uint64_t v28 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([&v7[98] predicateWithProperty:@"bundle_id" equalToValue:v22]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
        id v11 = sub_10024C088((uint64_t)&OBJC_CLASS___AppMetadataEntity, v10, v9);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

        [v12 deleteFromDatabase];
        uint64_t v13 = ASDLogHandleForCategory(3LL);
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = (void *)objc_opt_class(v24[5], v15);
          uint64_t v17 = v24[7];
          uint64_t v26 = v24[6];
          id v18 = v16;
          id v19 = sub_10023695C((uint64_t)&OBJC_CLASS___MetricsCoordinator, v17);
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
          *(_DWORD *)buf = v22;
          id v34 = v16;
          __int16 v35 = 2112;
          uint64_t v36 = v26;
          __int16 v37 = 2114;
          uint64_t v38 = v20;
          __int16 v39 = 2114;
          uint64_t v40 = v28;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] [%{public}@] [%{public}@] Removed metadata following deletion",  buf,  0x2Au);

          id v3 = v23;
          uint64_t v7 = &OBJC_METACLASS___TestFlightUploadSubTask;
        }
      }

      id v6 = [obj countByEnumeratingWithState:&v29 objects:v41 count:16];
    }

    while (v6);
  }

  return 1LL;
}

void sub_100237244(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  __int128 v5 = *(void **)(a1 + 32);
  if (!v5
    || (id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]),
        unsigned int v7 = [v5 containsObject:v6],
        v6,
        v7))
  {
    if (sub_10023643C(*(void *)(a1 + 40), v4))
    {
      id v8 = sub_1002C8134(objc_alloc(&OBJC_CLASS___AppMetadata), v4);
      uint64_t v9 = ASDLogHandleForCategory(3LL);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = (void *)objc_opt_class(*(void *)(a1 + 40), v11);
        uint64_t v13 = *(void *)(a1 + 48);
        id v14 = v12;
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleID]);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v4 shortVersionString]);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleVersion]);
        int v18 = 138544386;
        id v19 = v12;
        __int16 v20 = 2112;
        uint64_t v21 = v13;
        __int16 v22 = 2114;
        id v23 = v15;
        __int16 v24 = 2114;
        __int128 v25 = v16;
        __int16 v26 = 2114;
        uint64_t v27 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%@] [%{public}@] Writing metadata for version: %{public}@ bundleVersion: %{public}@",  (uint8_t *)&v18,  0x34u);
      }

      [*(id *)(a1 + 56) addObject:v8];
    }
  }
}

uint64_t sub_1002373FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10023740C(uint64_t a1)
{
}

uint64_t sub_100237414(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v6 = (objc_class *)objc_opt_class(&OBJC_CLASS___AppMetadataEntity, v5);
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v7 + 40);
  id v8 = sub_10030DC7C(v3, v4, v6, &obj);
  objc_storeStrong((id *)(v7 + 40), obj);

  return 1LL;
}

id sub_1002374D4(void *a1)
{
  if (a1)
  {
    id v1 = sub_1002374F4(a1, 40LL);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }

  return a1;
}

id sub_1002374F4(void *a1, uint64_t a2)
{
  if (!a1) {
    return a1;
  }
  uint64_t v9 = 0LL;
  id v3 = a1;
  sub_100156B68((uint64_t)[v3 bytes], (uint64_t)objc_msgSend(v3, "length"), a2, (uint64_t)&v9);
  if (!v4)
  {
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v9));
    return a1;
  }

  int v5 = v4;
  uint64_t v6 = ASDLogHandleForCategory(2LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 67109376;
    int v11 = a2;
    __int16 v12 = 1024;
    int v13 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to read %d (error %d)", buf, 0xEu);
  }

  return 0LL;
}

id sub_100237608(void *a1)
{
  if (a1)
  {
    id v1 = sub_1002374F4(a1, 41LL);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }

  return a1;
}

uint64_t sub_100237628(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = sub_1002374F4(a1, 42LL);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  uint64_t v3 = [v2 isEqualToNumber:&off_10040C868] ^ 1;

  return v3;
}

id sub_100237674(void *a1)
{
  if (a1)
  {
    id v1 = sub_1002374F4(a1, 1LL);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }

  return a1;
}

void sub_1002377C8(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = (dispatch_source_t *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v7 = WeakRetained;
    unint64_t data = dispatch_source_get_data(WeakRetained[2]);
    int v4 = (dispatch_queue_t *)objc_loadWeakRetained(v1);
    int v5 = v4;
    if (v4)
    {
      dispatch_assert_queue_V2(v4[1]);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[dispatch_queue_t delegate](v5, "delegate"));
      [v6 stream:v5 handleEvent:data];
    }

    id WeakRetained = v7;
  }
}

void sub_100237904( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10023791C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10023792C(uint64_t a1)
{
}

void sub_100237934(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 32LL));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = WeakRetained;
}

id sub_1002379E8(uint64_t a1)
{
  return objc_storeWeak((id *)(*(void *)(a1 + 32) + 32LL), *(id *)(a1 + 40));
}

void sub_100237AA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100237AC0(uint64_t a1)
{
}

void sub_100237AD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = *(void **)(a1 + 24);
    v6[1] = 3221225472LL;
    v6[2] = sub_100237B54;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v5 = v3;
    v6[0] = _NSConcreteStackBlock;
    id v7 = v3;
    sub_1002C11C4(v4, v6);

    id v3 = v5;
  }
}

void sub_100237B54(uint64_t a1)
{
}

void sub_100237BF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100237C08(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 48LL);
  return result;
}

void sub_100237C1C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100237C78;
    v3[3] = &unk_1003E9E38;
    v3[4] = a1;
    v3[5] = a2;
    sub_1002C11C4(v2, v3);
  }

uint64_t sub_100237C78(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 48LL) = *(void *)(result + 40);
  return result;
}

id sub_100237D18(uint64_t a1)
{
  if (qword_100462400 != -1) {
    dispatch_once(&qword_100462400, &stru_1003EDC68);
  }
  return (id)qword_1004623F8;
}

void sub_100237D5C(id a1)
{
  id v1 = objc_alloc(&OBJC_CLASS___AppUpdatesDatabaseStore);
  id v2 = sub_100185934((uint64_t)&OBJC_CLASS___Environment);
  id v7 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue(v2);
  id v3 = sub_1001859DC(v7);
  int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = -[SQLiteDatabaseStore initWithDatabase:](v1, "initWithDatabase:", v4);
  uint64_t v6 = (void *)qword_1004623F8;
  qword_1004623F8 = (uint64_t)v5;
}

BOOL sub_100237E34(BOOL a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = v7;
  if (a1)
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000LL;
    char v18 = 0;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100237F1C;
    v10[3] = &unk_1003EDCB8;
    uint64_t v13 = a4;
    uint64_t v14 = a3;
    id v11 = v7;
    __int16 v12 = &v15;
    [(id)a1 modifyUsingTransaction:v10];
    a1 = *((_BYTE *)v16 + 24) != 0;

    _Block_object_dispose(&v15, 8);
  }

  return a1;
}

void sub_100237F04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100237F1C(void *a1, void *a2)
{
  id v3 = a2;
  int v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"bundle_id",  a1[4]));
  if (+[UpdatesManager shouldUseModernUpdates](&OBJC_CLASS___UpdatesManager, "shouldUseModernUpdates")) {
    id v5 = &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity;
  }
  else {
    id v5 = &OBJC_CLASS___AppUpdateEntity;
  }
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v7 = sub_10024C088((uint64_t)v5, v6, v4);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  if ([v8 existsInDatabase])
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1[6]));
    [v8 setValue:v9 forProperty:@"package_type"];

    if (sub_1001E2698(v8, (uint64_t)@"update_state") == (id)a1[7])
    {
      uint64_t v10 = ASDLogHandleForCategory(40LL);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = a1[4];
        uint64_t v13 = a1[7];
        *(_DWORD *)buf = 138543618;
        uint64_t v56 = v12;
        __int16 v57 = 2048;
        uint64_t v58 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Ignoring request to set update state of %{public}@, current state is already %ld",  buf,  0x16u);
      }
    }

    else
    {
      *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = 1;
      uint64_t v14 = a1[7];
      uint64_t v15 = ASDLogHandleForCategory(40LL);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      if (v14 == 1)
      {
        if (v17)
        {
          uint64_t v18 = a1[4];
          *(_DWORD *)buf = 138543362;
          uint64_t v56 = v18;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Updated state to installed for bundleID: %{public}@",  buf,  0xCu);
        }

        id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v8 setValue:v19 forProperty:@"install_date"];

        __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1[7]));
        [v8 setValue:v20 forProperty:@"update_state"];

        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 valueForProperty:@"metrics_data"]);
        if (v11)
        {
          uint64_t v21 = -[UpdateItemMetrics initWithData:](objc_alloc(&OBJC_CLASS___UpdateItemMetrics), "initWithData:", v11);
          if (!v21) {
            uint64_t v21 = objc_opt_new(&OBJC_CLASS___UpdateItemMetrics);
          }
          __int16 v22 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent());
          id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
          sub_100193B10((uint64_t)v21, v23, ASDUpdateItemMetricsInstallComplete);

          if (v21) {
            id v24 = -[NSMutableDictionary copy](v21->_metricsData, "copy");
          }
          else {
            id v24 = 0LL;
          }
          [v8 setValue:v24 forProperty:@"metrics_data"];

          __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
          if (v21) {
            id v26 = -[NSMutableDictionary copy](v21->_metricsData, "copy");
          }
          else {
            id v26 = 0LL;
          }
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 objectForKey:ASDUpdateItemMetricsAvailableDate]);

          if (v27)
          {
            id v46 = v11;
            __int16 v47 = v8;
            double v48 = v4;
            id v49 = v3;
            [v27 doubleValue];
            __int16 v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v28 / 3600.0));
            objc_msgSend(v25, "setObject:forKey:");
            __int128 v52 = 0u;
            __int128 v53 = 0u;
            __int128 v50 = 0u;
            __int128 v51 = 0u;
            __int128 v29 = (void *)objc_claimAutoreleasedReturnValue( +[ASDUpdateMetricsEvent relativeMetricsKeys]( &OBJC_CLASS___ASDUpdateMetricsEvent,  "relativeMetricsKeys"));
            id v30 = [v29 countByEnumeratingWithState:&v50 objects:v54 count:16];
            if (v30)
            {
              id v31 = v30;
              uint64_t v32 = *(void *)v51;
              do
              {
                __int16 v33 = 0LL;
                do
                {
                  if (*(void *)v51 != v32) {
                    objc_enumerationMutation(v29);
                  }
                  uint64_t v34 = *(void *)(*((void *)&v50 + 1) + 8LL * (void)v33);
                  if (v21) {
                    id v35 = -[NSMutableDictionary copy](v21->_metricsData, "copy");
                  }
                  else {
                    id v35 = 0LL;
                  }
                  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v35 objectForKey:v34]);

                  if (v36)
                  {
                    [v36 doubleValue];
                    double v38 = v37;
                    [v27 doubleValue];
                    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  (v38 - v39) / 3600.0));
                    [v25 setObject:v40 forKey:v34];
                  }

                  __int16 v33 = (char *)v33 + 1;
                }

                while (v31 != v33);
                id v41 = [v29 countByEnumeratingWithState:&v50 objects:v54 count:16];
                id v31 = v41;
              }

              while (v41);
            }

            int v4 = v48;
            id v3 = v49;
            id v11 = v46;
            id v8 = v47;
          }

          sub_10030F080((uint64_t)&OBJC_CLASS___Analytics, v25, 33LL);
        }
      }

      else
      {
        if (v17)
        {
          uint64_t v42 = a1[4];
          uint64_t v43 = a1[7];
          *(_DWORD *)buf = 138543618;
          uint64_t v56 = v42;
          __int16 v57 = 2048;
          uint64_t v58 = v43;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Resetting update state for: %{public}@ to %ld",  buf,  0x16u);
        }

        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1[7]));
        [v8 setValue:v11 forProperty:@"update_state"];
      }
    }
  }

  return 1LL;
}

void sub_1002384B8(void *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100238558;
    v7[3] = &unk_1003EDC90;
    id v8 = v6;
    id v9 = v5;
    [a1 modifyUsingTransaction:v7];
  }
}

uint64_t sub_100238558(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v19 = *(void *)(a1 + 32);
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v19, 1LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"bundle_id",  v4));

  if (+[UpdatesManager shouldUseModernUpdates](&OBJC_CLASS___UpdatesManager, "shouldUseModernUpdates")) {
    id v6 = &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity;
  }
  else {
    id v6 = &OBJC_CLASS___AppUpdateEntity;
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v8 = sub_10024C088((uint64_t)v6, v7, v5);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  if (v9)
  {
    sub_1002A1984((uint64_t)v3, v9, *(void **)(a1 + 40));
  }

  else
  {
    uint64_t v10 = ASDLogHandleForCategory(40LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      int v15 = 138412546;
      uint64_t v16 = v12;
      __int16 v17 = 2114;
      uint64_t v18 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%@] Unable to reset purchase state for update with bundleID: %{public}@",  (uint8_t *)&v15,  0x16u);
    }
  }

  return 1LL;
}

void sub_1002386EC(void *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10023878C;
    v7[3] = &unk_1003EDC90;
    id v8 = v6;
    id v9 = v5;
    [a1 modifyUsingTransaction:v7];
  }
}

uint64_t sub_10023878C(uint64_t a1, void *a2)
{
  uint64_t v19 = *(void *)(a1 + 32);
  id v3 = a2;
  int v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v19, 1LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"bundle_id",  v4));

  if (+[UpdatesManager shouldUseModernUpdates](&OBJC_CLASS___UpdatesManager, "shouldUseModernUpdates")) {
    id v6 = &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity;
  }
  else {
    id v6 = &OBJC_CLASS___AppUpdateEntity;
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);

  id v8 = sub_10024C088((uint64_t)v6, v7, v5);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  if (v9)
  {
    [v9 deleteFromDatabase];
  }

  else
  {
    uint64_t v10 = ASDLogHandleForCategory(40LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v12 = *(void *)(a1 + 40);
      int v15 = 138412546;
      uint64_t v16 = v12;
      __int16 v17 = 2114;
      uint64_t v18 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%@] Unable to drop update with bundleID: %{public}@",  (uint8_t *)&v15,  0x16u);
    }
  }

  return 1LL;
}

BOOL sub_10023891C(BOOL a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    uint64_t v15 = 0LL;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x2020000000LL;
    char v18 = 0;
    if ([v7 count])
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      v10[2] = sub_100238A28;
      v10[3] = &unk_1003EDD08;
      id v11 = v7;
      id v12 = v8;
      uint64_t v13 = &v15;
      uint64_t v14 = a2;
      [(id)a1 modifyUsingTransaction:v10];
    }

    a1 = *((_BYTE *)v16 + 24) != 0;
    _Block_object_dispose(&v15, 8);
  }

  return a1;
}

void sub_100238A10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100238A28(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"bundle_id",  *(void *)(a1 + 32)));
  unsigned int v5 = +[UpdatesManager shouldUseModernUpdates](&OBJC_CLASS___UpdatesManager, "shouldUseModernUpdates");
  char v6 = v5;
  if (v5) {
    id v7 = &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity;
  }
  else {
    id v7 = &OBJC_CLASS___AppUpdateEntity;
  }
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v9 = sub_10024C1D0((uint64_t)v7, v8, v4);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_100238B54;
  v15[3] = &unk_1003EDCE0;
  char v20 = v6;
  id v16 = v3;
  id v11 = *(id *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = v12;
  id v17 = v11;
  id v13 = v3;
  [v10 enumeratePersistentIDsUsingBlock:v15];

  return 1LL;
}

void sub_100238B54(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 64)) {
    int v4 = &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity;
  }
  else {
    int v4 = &OBJC_CLASS___AppUpdateEntity;
  }
  id v5 = objc_alloc(v4);
  char v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  id v7 = [v5 initWithPersistentID:a2 onConnection:v6];

  if ([v7 existsInDatabase])
  {
    uint64_t v8 = ASDLogHandleForCategory(40LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      id v11 = sub_1001E26D0(v7, (uint64_t)@"bundle_id");
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      uint64_t v13 = *(void *)(a1 + 56);
      int v15 = 138412802;
      uint64_t v16 = v10;
      __int16 v17 = 2114;
      uint64_t v18 = v12;
      __int16 v19 = 2048;
      uint64_t v20 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%@][%{public}@] Setting update state to %ld",  (uint8_t *)&v15,  0x20u);
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", *(void *)(a1 + 56)));
    [v7 setValue:v14 forProperty:@"update_state"];

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }
}

BOOL sub_100238CE4(BOOL a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  char v6 = v5;
  if (a1)
  {
    uint64_t v12 = 0LL;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2020000000LL;
    char v15 = 0;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100238DC0;
    v8[3] = &unk_1003EDD30;
    uint64_t v10 = &v12;
    uint64_t v11 = a2;
    id v9 = v5;
    [(id)a1 modifyUsingTransaction:v8];
    a1 = *((_BYTE *)v13 + 24) != 0;

    _Block_object_dispose(&v12, 8);
  }

  return a1;
}

void sub_100238DA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100238DC0(uint64_t a1, void *a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_1002A138C( a2,  *(void *)(a1 + 48),  *(void **)(a1 + 32));
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_100238E30(id a1, int64_t a2, int64_t *a3, id *a4)
{
  if (a2 > 14499)
  {
    if (a2 <= 14501)
    {
      if (a2 == 14500)
      {
        int v4 = &stru_1003EDE10;
        int64_t v5 = 14501LL;
      }

      else
      {
        int v4 = &stru_1003EDE30;
        int64_t v5 = 14502LL;
      }

      goto LABEL_24;
    }

    if (a2 == 14502)
    {
      int v4 = &stru_1003EDE50;
      int64_t v5 = 16000LL;
      goto LABEL_24;
    }

    if (a2 == 16000)
    {
      int v4 = &stru_1003EDE70;
      int64_t v5 = 16004LL;
      goto LABEL_24;
    }

    if (a2 != 16004) {
      return;
    }
    int v4 = &stru_1003EDE90;
LABEL_22:
    int64_t v5 = 17000LL;
    goto LABEL_24;
  }

  if (a2 > 13000)
  {
    switch(a2)
    {
      case 13001LL:
        int v4 = &stru_1003EDDB0;
        int64_t v5 = 14000LL;
        break;
      case 14000LL:
        int v4 = &stru_1003EDDD0;
        int64_t v5 = 14001LL;
        break;
      case 14001LL:
        int v4 = &stru_1003EDDF0;
        int64_t v5 = 14500LL;
        break;
      default:
        return;
    }

    goto LABEL_24;
  }

  if (!a2)
  {
    int v4 = &stru_1003EDD70;
    goto LABEL_22;
  }

  if (a2 != 13000) {
    return;
  }
  int v4 = &stru_1003EDD90;
  int64_t v5 = 13001LL;
LABEL_24:
  *a3 = v5;
  id v6 = *a4;
  *a4 = v4;
}

void sub_100238F70(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS app_updates (pid INTEGER, bundle_id TEXT, current_version_release_date DATETIME, device_families INTEGER, install_date DATETIME, is_background INTEGER NOT NULL DEFAULT 0, is_b2b_custom_app INTEGER NOT NULL DEFAULT 0, is_code_signature_update INTEGER NOT NULL DEFAULT 0, is_offloaded INTEGER NOT NULL DEFAULT 0, is_per_device INTEGER NOT NULL DEFAULT 0, is_profile_validated INTEGER NOT NULL DEFAULT 0, metrics_data JSON, package_type INTEGER, purchase_id INTEGER DEFAULT 0, release_date DATETIME, software_platform INTEGER NOT NULL DEFAULT 0, store_item_data JSON, store_item_id INTEGER NOT NULL DEFAULT 0, store_software_version_id INTEGER, timestamp DATETIME DEFAULT (timestamp()), update_state INTEGER NOT NULL DEFAULT 0, UNIQUE(bundle_id) ON CONFLICT REPLACE,PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS mapi_app_update (pid INTEGER, BOOLean_property_mask INTEGER NOT NULL DEFAULT 0, bundle_id TEXT NOT NULL, install_date DATETIME, item_id INTEGER NOT NULL DEFAULT 0, metadata BLOB, metrics_data JSON, package_type INTEGER, store_software_version_id INTEGER, timestamp DATETIME DEFAULT (timestamp()), update_state INTEGER NOT NULL DEFAULT 0, UNIQUE(bundle_id) ON CONFLICT REPLACE,PRIMARY KEY (pid));",
      1,
      0LL);
  }
}

void sub_100238FC8(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1002E981C((uint64_t)a2, @"DELETE FROM app_updates WHERE is_profile_validated = 1;", 1, 0LL);
  }
}

void sub_100238FEC(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1002E981C( (uint64_t)a2,  @"ALTER TABLE app_updates ADD COLUMN current_version_release_date DATETIME;",
  }
      1,
      0LL);
}

void sub_100239010(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_updates ADD COLUMN device_families INTEGER;", 1, 0LL);
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE app_updates ADD COLUMN software_platform INTEGER NOT NULL DEFAULT 0;",
      1,
      0LL);
  }
}

void sub_10023906C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  int v4 = a2;
  int has_internal_content = os_variant_has_internal_content("com.apple.appstored");
  id v3 = v4;
  if (v4 && has_internal_content)
  {
    sub_1002E981C((uint64_t)v4, @"DELETE FROM app_updates WHERE is_app_clip", 0, 0LL);
    id v3 = v4;
  }
}

void sub_1002390C0(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1002E981C( (uint64_t)a2,  @"ALTER TABLE app_updates ADD COLUMN is_code_signature_update INTEGER NOT NULL DEFAULT 0;",
  }
      1,
      0LL);
}

void sub_1002390E4(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1002E981C( (uint64_t)a2,  @"CREATE TABLE IF NOT EXISTS mapi_app_update (pid INTEGER, BOOLean_property_mask INTEGER NOT NULL DEFAULT 0, bundle_id TEXT NOT NULL, install_date DATETIME, item_id INTEGER NOT NULL DEFAULT 0, metadata BLOB, metrics_data JSON, package_type INTEGER, store_software_version_id INTEGER, timestamp DATETIME DEFAULT (timestamp()), update_state INTEGER NOT NULL DEFAULT 0, UNIQUE(bundle_id) ON CONFLICT REPLACE,PRIMARY KEY (pid));",
  }
      1,
      0LL);
}

void sub_100239108(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1002E981C( (uint64_t)a2,  @"ALTER TABLE app_updates ADD COLUMN is_b2b_custom_app INTEGER NOT NULL DEFAULT 0;",
  }
      1,
      0LL);
}

void sub_10023912C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_updates ADD COLUMN package_type INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE mapi_app_update ADD COLUMN package_type INTEGER;", 0, 0LL);
  }
}

id sub_100239190(id a1, void *a2, unint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)&OBJC_CLASS___DigestVerifier;
    a1 = objc_msgSendSuper2(&v16, "init");
    if (a1)
    {
      id v6 = [v5 copy];
      id v7 = (void *)*((void *)a1 + 1);
      *((void *)a1 + 1) = v6;

      *((void *)a1 + 5) = a3;
      *((void *)a1 + 6) = a3;
      uint64_t v8 = *((void *)a1 + 1);
      if (v8 && (unint64_t v9 = *(unsigned int *)(v8 + 8), (_DWORD)v9))
      {
        *((void *)a1 + 3) = a3 / v9;
        if (a3 % v9)
        {
LABEL_11:
          *((_BYTE *)a1 + 32) = 1;
          goto LABEL_12;
        }
      }

      else
      {
        *((void *)a1 + 3) = 0LL;
      }

      uint64_t v10 = objc_alloc(&OBJC_CLASS___HashDigest);
      uint64_t v11 = *((void *)a1 + 1);
      if (v11) {
        uint64_t v12 = *(void *)(v11 + 24);
      }
      else {
        uint64_t v12 = 0LL;
      }
      uint64_t v13 = sub_1002C8E8C(v10, v12);
      uint64_t v14 = (void *)*((void *)a1 + 2);
      *((void *)a1 + 2) = v13;

      goto LABEL_11;
    }
  }

uint64_t sub_100239270(uint64_t a1, void *a2)
{
  uint64_t v2 = a1;
  if (!a1) {
    return v2;
  }
  id v4 = sub_1002C8F1C(*(void *)(a1 + 16), a2);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  unint64_t v6 = *(void *)(v2 + 24);
  id v7 = *(void **)(v2 + 8);
  if (v7) {
    id v7 = (void *)v7[2];
  }
  uint64_t v8 = v7;
  id v9 = [v8 count];

  if (v6 >= (unint64_t)v9)
  {
    id v20 = *(id *)(v2 + 24);
    uint64_t v21 = *(void **)(v2 + 8);
    if (v21) {
      uint64_t v21 = (void *)v21[2];
    }
    __int16 v22 = v21;
    if (v20 == [v22 count])
    {
      uint64_t v24 = *(void *)(v2 + 40);
      uint64_t v23 = *(void *)(v2 + 48);

      if (v23 == v24) {
        goto LABEL_27;
      }
      if (!a2)
      {
LABEL_20:
        *(_BYTE *)(v2 + 32) = 0;
        goto LABEL_27;
      }
    }

    else
    {

      if (!a2) {
        goto LABEL_20;
      }
    }

    uint64_t v25 = ASDErrorWithDescription( ASDErrorDomain,  710LL,  @"More data was received than there are hashes to verify");
    *a2 = (id)objc_claimAutoreleasedReturnValue(v25);
    goto LABEL_20;
  }

  if (v5)
  {
    uint64_t v10 = *(void **)(v2 + 8);
    if (v10) {
      uint64_t v10 = (void *)v10[2];
    }
    uint64_t v11 = v10;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectAtIndexedSubscript:*(void *)(v2 + 24)]);
    *(_BYTE *)(v2 + 32) = [v5 isEqualToString:v12];

    if (!*(_BYTE *)(v2 + 32))
    {
      uint64_t v13 = ASDLogHandleForCategory(10LL);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        id v35 = *(void **)(v2 + 8);
        if (v35) {
          id v35 = (void *)v35[2];
        }
        uint64_t v36 = v35;
        double v37 = (void *)objc_claimAutoreleasedReturnValue([v36 objectAtIndexedSubscript:*(void *)(v2 + 24)]);
        *(_DWORD *)buf = 138412546;
        double v39 = v5;
        __int16 v40 = 2112;
        id v41 = v37;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Invalid hash '%@' expected '%@'",  buf,  0x16u);
      }

      if (a2)
      {
        char v15 = *(void **)(v2 + 8);
        if (v15) {
          char v15 = (void *)v15[2];
        }
        objc_super v16 = v15;
        __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectAtIndexedSubscript:*(void *)(v2 + 24)]);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Invalid hash '%@' expected '%@'",  v5,  v17));

        uint64_t v19 = ASDErrorWithDescription(ASDErrorDomain, 710LL, v18);
        *a2 = (id)objc_claimAutoreleasedReturnValue(v19);
      }

      goto LABEL_27;
    }
  }

  else
  {
    uint64_t v26 = ASDLogHandleForCategory(10LL);
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      double v28 = *(void **)(v2 + 24);
      *(_DWORD *)buf = 134217984;
      double v39 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Skipped chunk digest at index %lu",  buf,  0xCu);
    }

    *(_BYTE *)(v2 + 32) = 1;
  }

  *(void *)(v2 + 4_Block_object_dispose(va, 8) = *(void *)(v2 + 40);
  ++*(void *)(v2 + 24);
LABEL_27:
  if (*(_BYTE *)(v2 + 32))
  {
    __int128 v29 = objc_alloc(&OBJC_CLASS___HashDigest);
    uint64_t v30 = *(void *)(v2 + 8);
    if (v30) {
      uint64_t v31 = *(void *)(v30 + 24);
    }
    else {
      uint64_t v31 = 0LL;
    }
    uint64_t v32 = sub_1002C8E8C(v29, v31);
  }

  else
  {
    uint64_t v32 = 0LL;
  }

  __int16 v33 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = v32;

  uint64_t v2 = *(_BYTE *)(v2 + 32) != 0;
  return v2;
}

uint64_t sub_1002395A8(uint64_t result, char *a2, unint64_t a3, void *a4)
{
  if (result)
  {
    uint64_t v4 = result;
    if (!*(_BYTE *)(result + 32)) {
      return 0LL;
    }
    id v5 = a2;
    uint64_t v6 = *(void *)(result + 8);
    if (v6 && (unint64_t v7 = *(unsigned int *)(v6 + 8), (_DWORD)v7))
    {
      unint64_t v8 = *(void *)(result + 40);
      unint64_t v9 = v7 + (v8 / v7) * (_DWORD)v7 - *(_DWORD *)(result + 40);
      unint64_t v10 = a3 - v9;
      if (a3 >= v9)
      {
        *(void *)(result + 40) = v8 + v9;
        sub_1002C908C(*(void *)(result + 16), a2, v9);
        result = sub_100239270(v4, a4);
        if (!(_DWORD)result) {
          return result;
        }
        a2 = &v5[v9];
        *(void *)(v4 + 40) += v10;
        uint64_t v12 = *(void *)(v4 + 16);
        LODWORD(a3) = v10;
        goto LABEL_11;
      }
    }

    else
    {
      unint64_t v8 = *(void *)(result + 40);
    }

    *(void *)(result + 40) = v8 + a3;
    uint64_t v12 = *(void *)(result + 16);
LABEL_11:
    sub_1002C908C(v12, a2, a3);
    return *(_BYTE *)(v4 + 32) != 0;
  }

  return result;
}

uint64_t sub_100239684(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    if (*(_BYTE *)(a1 + 32))
    {
      uint64_t v7 = *(void *)(a1 + 8);
      if (!v7
        || (unint64_t v8 = *(unsigned int *)(v7 + 8), !(_DWORD)v8)
        || (unint64_t v9 = v8
               + (*(void *)(a1 + 40) / v8) * (_DWORD)v8
               - *(void *)(a1 + 40),
            (unint64_t)[v5 length] < v9))
      {
        sub_10023980C(a1, v6);
LABEL_7:
        a1 = *(_BYTE *)(a1 + 32) != 0;
        goto LABEL_26;
      }

      unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subdataWithRange:", 0, v9));
      sub_10023980C(a1, v10);

      if (sub_100239270(a1, a3))
      {
        for (; v9 < (unint64_t)[v6 length]; v9 += v15)
        {
          uint64_t v11 = *(void *)(a1 + 8);
          if (v11) {
            uint64_t v12 = (char *)*(unsigned int *)(v11 + 8);
          }
          else {
            uint64_t v12 = 0LL;
          }
          uint64_t v13 = (char *)[v6 length];
          if (&v13[-v9] < v12) {
            uint64_t v12 = &v13[-v9];
          }
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "subdataWithRange:", v9, v12));
          sub_10023980C(a1, v14);

          uint64_t v15 = *(void *)(a1 + 8);
          if (v15) {
            objc_super v16 = (char *)*(unsigned int *)(v15 + 8);
          }
          else {
            objc_super v16 = 0LL;
          }
          if (v12 == v16)
          {
            uint64_t v15 = *(void *)(a1 + 8);
          }

          if (v15) {
            uint64_t v15 = *(unsigned int *)(v15 + 8);
          }
        }

        goto LABEL_7;
      }
    }

    a1 = 0LL;
  }

void sub_10023980C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    *(void *)(a1 + 40) += [v3 length];
    sub_1002C90C4(*(id *)(a1 + 16), v3);
  }

id sub_100239890(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 options]);
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 clientInfo]);
    uint64_t v4 = v3;
    if (v3)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 accountMediaType]);
      id v6 = [v5 isEqualToString:AMSAccountMediaTypeAppStoreSandbox];
    }

    else
    {
      id v6 = 0LL;
    }
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}

void sub_100239924(void *a1)
{
  if (a1)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1 options]);
    id v6 = [v2 copy];

    [v6 setAuthenticationType:1];
    [v6 setAllowServerDialogs:0];
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 debugReason]);
    uint64_t v4 = v3;
    if (v3)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByAppendingFormat:@" %@", @"(forced silent authentication)"]);
      [v6 setDebugReason:v5];
    }

    else
    {
      [v6 setDebugReason:@"(forced silent authentication)"];
    }

    [a1 setOptions:v6];
  }

void sub_1002399F8(void *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 options]);
    id v8 = [v4 copy];

    [v8 setProxyAppBundleID:v3];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v8 debugReason]);
    id v6 = v5;
    if (v5)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [v5 stringByAppendingFormat:@" %@", @"(forced proxied authentication)"]);
      [v8 setDebugReason:v7];
    }

    else
    {
      [v8 setDebugReason:@"(forced proxied authentication)"];
    }

    [a1 setOptions:v8];
  }

BOOL sub_100239C28(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 24) |= 1u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            uint64_t v18 = &OBJC_IVAR___TFMemoryUsage__availableBytes;
            goto LABEL_37;
          }

          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            uint64_t v14 = 0LL;
            uint64_t v18 = &OBJC_IVAR___TFMemoryUsage__availableBytes;
            goto LABEL_40;
          }
        }

        uint64_t v18 = &OBJC_IVAR___TFMemoryUsage__availableBytes;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v14 = 0LL;
        }
LABEL_40:
        *(void *)(a1 + *v1_Block_object_dispose(va, 8) = v14;
        goto LABEL_41;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0LL;
    *(_BYTE *)(a1 + 24) |= 2u;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        uint64_t v18 = &OBJC_IVAR___TFMemoryUsage__totalBytes;
        goto LABEL_38;
      }

      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        uint64_t v14 = 0LL;
        uint64_t v18 = &OBJC_IVAR___TFMemoryUsage__totalBytes;
        goto LABEL_40;
      }
    }

    uint64_t v18 = &OBJC_IVAR___TFMemoryUsage__totalBytes;
LABEL_37:
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id *sub_10023A10C(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (a1)
  {
    v18.receiver = a1;
    v18.super_class = (Class)&OBJC_CLASS___PushTypesTask;
    char v16 = (id *)objc_msgSendSuper2(&v18, "init");
    a1 = v16;
    if (v16)
    {
      objc_storeStrong(v16 + 7, a3);
      objc_storeStrong(a1 + 8, a4);
      objc_storeStrong(a1 + 10, a5);
      a1[9] = a2;
      objc_storeStrong(a1 + 5, a6);
    }
  }

  return a1;
}

id sub_10023AC00(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"bundle_id"]);
  }
  return a1;
}

id sub_10023AC24(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"bundle_key"]);
  }
  return a1;
}

id sub_10023AC48(id result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result valueForProperty:@"always_preserved"]);
    id v2 = [v1 BOOLValue];

    return v2;
  }

  return result;
}

id sub_10023AC88(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"name"]);
  }
  return a1;
}

double sub_10023ACAC(void *a1)
{
  if (!a1) {
    return 0.0;
  }
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"preservation_priority"]);
  [v1 doubleValue];
  double v3 = v2;

  return v3;
}

void sub_10023ACFC(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
    [a1 setValue:v3 forProperty:@"always_preserved"];
  }

void sub_10023AD58(void *a1)
{
  if (a1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    [a1 setValue:v2 forProperty:@"preservation_priority"];
  }

id *sub_10023AEE4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)&OBJC_CLASS___PromptForAccountTask;
    a1 = (id *)objc_msgSendSuper2(&v10, "init");
    if (a1)
    {
      id v7 = [v5 copy];
      id v8 = a1[5];
      a1[5] = v7;

      objc_storeStrong(a1 + 8, a3);
      *((_BYTE *)a1 + 49) = 1;
    }
  }

  return a1;
}

void sub_10023B500( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10023B554(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10023B564(uint64_t a1)
{
}

void sub_10023B56C(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v6 = a3;
  uint64_t v7 = ASDErrorWithSafeUserInfo(v6);
  uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void *sub_10023B694(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = [a1 init];
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 1, a2);
      id v6 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v7 = (void *)a1[2];
      a1[2] = v6;
    }
  }

  return a1;
}

id *sub_10023B704(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    a1 = [a1 init];
    if (a1)
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"attempts"]);
      uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber, v5);
      if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0) {
        a1[3] = [v4 integerValue];
      }
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"type"]);

      uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSString, v8);
      if ((objc_opt_isKindOfClass(v7, v9) & 1) != 0) {
        objc_storeStrong(a1 + 1, v7);
      }
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"values"]);

      uint64_t v12 = objc_opt_class(&OBJC_CLASS___NSDictionary, v11);
      if ((objc_opt_isKindOfClass(v10, v12) & 1) != 0) {
        objc_storeStrong(a1 + 2, v10);
      }
    }
  }

  return a1;
}

void *sub_10023B818(void *result)
{
  if (result)
  {
    id v1 = result;
    id v2 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v1[3]));
    -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v3, @"attempts");

    uint64_t v4 = v1[1];
    if (v4) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v4, @"type");
    }
    uint64_t v5 = v1[2];
    if (v5) {
      -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v5, @"values");
    }
    id v6 = -[NSMutableDictionary copy](v2, "copy");

    return v6;
  }

  return result;
}

id sub_10023B8C4(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) objectForKey:a2]);
  id v3 = [v2 copy];

  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSNull, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {

    return 0LL;
  }

  return v3;
}

void sub_10023B928(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = (uint64_t)v7;
    if (!v7) {
      uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    }
    id v7 = (id)v6;
    [*(id *)(a1 + 16) setObject:v6 forKey:v5];
  }
}

id sub_10023B9CC(uint64_t a1)
{
  if (qword_100462410 != -1) {
    dispatch_once(&qword_100462410, &stru_1003EDF18);
  }
  return (id)qword_100462408;
}

void sub_10023BA10(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AppInstallScheduler);
  id v2 = (void *)qword_100462408;
  qword_100462408 = (uint64_t)v1;
}

void sub_10023BBC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2
    && ([*(id *)(v2 + 72) modifyUsingTransaction:&stru_1003EE130], (uint64_t v3 = *(void *)(a1 + 32)) != 0))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    id v5 = sub_10028715C((uint64_t)&OBJC_CLASS___CellularMonitor);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    [v4 addObserver:v3 selector:"_handlePolicyNotificationWithMonitorStateDidChangeNotification:" name:@"CellularStateDidChangeNotification" object:v6];

    id v7 = sub_1001D17B8((uint64_t)&OBJC_CLASS___NetworkMonitor);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    [v4 addObserver:v3 selector:"_handlePolicyNotificationWithMonitorStateDidChangeNotification:" name:@"NetworkStateDidChangeNotification" object:v8];

    id v9 = sub_10021AE84((uint64_t)&OBJC_CLASS___PowerMonitor);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    [v4 addObserver:v3 selector:"_handlePolicyNotificationWithMonitorStateDidChangeNotification:" name:@"PowerStateDidChangeNotification" object:v10];

    id v11 = sub_1003034E4((uint64_t)&OBJC_CLASS___ThermalPressureMonitor);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    [v4 addObserver:v3 selector:"_handlePolicyNotificationWithMonitorStateDidChangeNotification:" name:@"ThermalPressureStateDidChangeNotification" object:v12];

    uint64_t v13 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v13 = 0LL;
  }

  sub_10023BE68(v13);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = @"Checking for coordinators following start";
  if (v14)
  {
    uint64_t v16 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
    uint64_t v17 = ASDLogHandleForCategory(30LL);
    objc_super v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = 138412546;
      double v28 = v16;
      __int16 v29 = 2114;
      uint64_t v30 = @"Checking for coordinators following start";
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[%@] Checking for incomplete coordinators with reason: %{public}@",  (uint8_t *)&v27,  0x16u);
    }

    char v19 = objc_alloc_init(&OBJC_CLASS___CompleteRestoreCoordinatorsTask);
    unint64_t v21 = v19;
    if (v19)
    {
      objc_setProperty_nonatomic_copy(v19, v20, @"com.apple.appstored", 40LL);
      objc_setProperty_nonatomic_copy(v21, v22, v16, 48LL);
      objc_setProperty_nonatomic_copy(v21, v23, @"Checking for coordinators following start", 56LL);
    }

    id v24 = sub_10020F1C0((uint64_t)&OBJC_CLASS___TaskQueue);
    uint64_t v25 = objc_claimAutoreleasedReturnValue(v24);
    uint64_t v26 = (void *)v25;
    if (v25) {
      [*(id *)(v25 + 8) addOperation:v21];
    }
  }
}

void sub_10023BE68(uint64_t a1)
{
  if (a1)
  {
    uint64_t v9 = 0LL;
    uint64_t v10 = &v9;
    uint64_t v11 = 0x3032000000LL;
    uint64_t v12 = sub_10023C89C;
    uint64_t v13 = sub_10023C8AC;
    id v14 = 0LL;
    id v1 = *(void **)(a1 + 72);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10023EE00;
    v8[3] = &unk_1003EAAD0;
    void v8[4] = &v9;
    [v1 readUsingSession:v8];
    if (v10[5])
    {
      uint64_t v2 = ASDLogHandleForCategory(30LL);
      uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = v10[5];
        *(_DWORD *)buf = 138543362;
        uint64_t v16 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Scheduling next optimal download for %{public}@",  buf,  0xCu);
      }

      id v5 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      sub_1001970EC(v6, 10LL, @"OptimalDownloadWindow", (void *)v10[5], @"Wait for optimal download window");
    }

    else
    {
      id v7 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v7);
      sub_100197D28((uint64_t)v6, 10LL);
    }

    _Block_object_dispose(&v9, 8);
  }

void sub_10023BFF4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10023C018(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(dispatch_queue_s **)(a1 + 8);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10023C074;
    v3[3] = &unk_1003E9E38;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_async(v2, v3);
  }

void sub_10023C074(uint64_t a1)
{
}

void sub_10023C080(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    uint64_t v4 = ASDLogHandleForCategory(30LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = sub_1002C9490(a2);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Polling scheduler: [%{public}@]",  (uint8_t *)&buf,  0xCu);
    }

    memset(v63, 0, sizeof(v63));
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    uint64_t v8 = sub_10020F2D0(*(id **)(a1 + 64));
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    id v11 = [v9 countByEnumeratingWithState:v63 objects:&buf count:16];
    if (v11)
    {
      uint64_t v12 = **(void **)&v63[16];
      while (2)
      {
        for (i = 0LL; i != v11; i = (char *)i + 1)
        {
          if (**(void **)&v63[16] != v12) {
            objc_enumerationMutation(v9);
          }
          id v14 = *(void **)(*(void *)&v63[8] + 8LL * (void)i);
          uint64_t v15 = objc_opt_class(&OBJC_CLASS___SystemAppBootstrapTask, v10);
          uint64_t v17 = objc_opt_class(v15, v16);
          if ((objc_opt_isKindOfClass(v14, v17) & 1) != 0 && ([v14 isCancelled] & 1) == 0)
          {
            uint64_t v21 = ASDLogHandleForCategory(30LL);
            SEL v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)id v49 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_INFO,  "Skipping system app bootstrap - pending task already exists",  v49,  2u);
            }

            goto LABEL_22;
          }
        }

        id v11 = [v9 countByEnumeratingWithState:v63 objects:&buf count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

    *(void *)id v49 = 0LL;
    __int128 v50 = v49;
    uint64_t v51 = 0x3032000000LL;
    __int128 v52 = sub_10023C89C;
    __int128 v53 = sub_10023C8AC;
    id v54 = 0LL;
    objc_super v18 = *(dispatch_queue_t ***)(a1 + 72);
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_10023C8B4;
    v48[3] = &unk_1003EDF68;
    v48[4] = v49;
    sub_1002EFA60(v18, v48);
    char v19 = (void *)*((void *)v50 + 5);
    if (v19)
    {
      objc_initWeak(&location, v19);
      id v41 = _NSConcreteStackBlock;
      uint64_t v42 = 3221225472LL;
      uint64_t v43 = sub_10023CA6C;
      id v44 = &unk_1003EE018;
      objc_copyWeak(&v46, &location);
      uint64_t v45 = a1;
      [*((id *)v50 + 5) setCompletionBlock:&v41];
      uint64_t v20 = *(void *)(a1 + 64);
      if (v20) {
        objc_msgSend(*(id *)(v20 + 8), "addOperation:", *((void *)v50 + 5), v41, v42, v43, v44);
      }
      objc_destroyWeak(&v46);
      objc_destroyWeak(&location);
    }

    else
    {
      sub_10023D070(a1);
    }

    _Block_object_dispose(v49, 8);

LABEL_22:
    SEL v23 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v24 = sub_1003034E4((uint64_t)&OBJC_CLASS___ThermalPressureMonitor);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
    BOOL v26 = sub_100303810((uint64_t)v25);

    if (v26) {
      uint64_t v27 = 1LL;
    }
    else {
      uint64_t v27 = 3LL;
    }
    if (v26)
    {
      uint64_t v28 = ASDLogHandleForCategory(30LL);
      __int16 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Limiting maximum active count due to thermal pressure",  (uint8_t *)&buf,  2u);
      }
    }

    uint64_t v30 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v31 = *(dispatch_queue_t ***)(a1 + 72);
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    uint64_t v56 = sub_10023DC34;
    __int16 v57 = &unk_1003EE0F0;
    uint64_t v61 = v27;
    uint64_t v58 = a1;
    id v59 = v30;
    uint64_t v32 = v23;
    id v60 = v32;
    BOOL v62 = v26;
    __int16 v33 = v30;
    sub_1002EFA60(v31, &buf);
    LOBYTE(v30) = -[NSMutableArray count](v32, "count") == 0LL;
    uint64_t v34 = ASDLogHandleForCategory(30LL);
    id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
    if ((v30 & 1) != 0)
    {
      if (v36)
      {
        *(_WORD *)unint64_t v63 = 0;
        double v38 = "Polling completed, started 0 installations";
        double v39 = v35;
        uint32_t v40 = 2;
        goto LABEL_34;
      }
    }

    else if (v36)
    {
      id v37 = -[NSMutableArray count](v32, "count");
      *(_DWORD *)unint64_t v63 = 134218242;
      *(void *)&v63[4] = v37;
      *(_WORD *)&v63[12] = 2114;
      *(void *)&v63[14] = v32;
      double v38 = "Polling completed, started %lu installation(s): %{public}@";
      double v39 = v35;
      uint32_t v40 = 22;
LABEL_34:
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, v38, v63, v40);
    }
  }

void sub_10023C52C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21)
{
}

void sub_10023C568(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10023C5C4;
    block[3] = &unk_1003E9880;
    block[4] = a1;
    dispatch_async(v1, block);
  }

void sub_10023C5C4(uint64_t a1)
{
}

void *sub_10023C5CC(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v3 = (void *)v1[9];
    uint64_t v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472LL;
    uint64_t v8 = sub_10023C6B4;
    uint64_t v9 = &unk_1003ED090;
    uint64_t v10 = v2;
    uint64_t v4 = v2;
    [v3 readUsingSession:&v6];
    id v11 = @"items";
    uint64_t v12 = v4;
    id v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL,  v6,  v7,  v8,  v9));
  }

  return v1;
}

void sub_10023C6B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v5 = sub_1002FD344((uint64_t)&OBJC_CLASS___AppInstallPredicates);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v4, v6);
  id v9 = (id)objc_claimAutoreleasedReturnValue(v7);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10023C7A0;
  v10[3] = &unk_1003EB478;
  id v11 = v3;
  id v12 = *(id *)(a1 + 32);
  id v8 = v3;
  [v9 enumeratePersistentIDsUsingBlock:v10];
}

void sub_10023C7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc(&OBJC_CLASS___AppInstallEntity);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  id v12 = -[SQLiteEntity initWithPersistentID:onConnection:](v4, "initWithPersistentID:onConnection:", a2, v5);

  uint64_t v6 = *(void **)(a1 + 40);
  id v7 = sub_10021B614(v12);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v12, "valueForProperty:", @"phase"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v12, "valueForProperty:", @"coordinator_id"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ phase: %@ coordinator: %@",  v8,  v9,  v10));
  [v6 addObject:v11];
}

uint64_t sub_10023C89C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10023C8AC(uint64_t a1)
{
}

uint64_t sub_10023C8B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10023CA4C;
  v13[3] = &unk_1003EDF40;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v14 = v4;
  sub_100226D4C(v3, 1LL, v13);

  id v5 = -[NSMutableArray count](v4, "count");
  uint64_t v6 = ASDLogHandleForCategory(30LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = -[NSMutableArray count](v4, "count");
      *(_DWORD *)__int128 buf = 134217984;
      id v16 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Queuing %lu system app(s) for bootstrap",  buf,  0xCu);
    }

    uint64_t v10 = sub_1001862B4((id *)objc_alloc(&OBJC_CLASS___SystemAppBootstrapTask), v4);
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v8 = *(os_log_s **)(v11 + 40);
    *(void *)(v11 + 40) = v10;
  }

  else if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Skipping system app bootstrap - no installations pending",  buf,  2u);
  }

  return 1LL;
}

uint64_t sub_10023CA4C(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void sub_10023CA6C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(dispatch_queue_s **)(v3 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10023CAF0;
  v6[3] = &unk_1003E9DC0;
  id v7 = WeakRetained;
  uint64_t v8 = v3;
  id v5 = WeakRetained;
  dispatch_async(v4, v6);
}

void sub_10023CAF0(uint64_t a1)
{
  uint64_t v2 = *(_BYTE **)(a1 + 32);
  if (v2 && (v2[24] & 1) != 0)
  {
    objc_super v18 = *(dispatch_queue_t ***)(*(void *)(a1 + 40) + 72LL);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    void v23[2] = sub_10023CDDC;
    v23[3] = &unk_1003EDFF0;
    id v24 = v2;
    sub_1002EFA60(v18, v23);
    sub_10023D070(*(void *)(a1 + 40));
    sub_10023C080(*(void *)(a1 + 40), 4LL);
  }

  else
  {
    uint64_t v3 = ASDLogHandleForCategory(30LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v5, 32LL, 1);
      }
      id v20 = Property;
      LODWORD(handler) = 138543362;
      *(void *)((char *)&handler + 4) = v20;
      _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "Bootstrapping system applications will be reset after error: %{public}@",  (uint8_t *)&handler,  0xCu);
    }

    uint64_t v6 = *(void **)(a1 + 32);
    id v7 = *(dispatch_queue_t ***)(*(void *)(a1 + 40) + 72LL);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10023D0C4;
    v21[3] = &unk_1003EDFF0;
    id v22 = v6;
    sub_1002EFA60(v7, v21);
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8)
    {
      dispatch_assert_queue_V2(*(dispatch_queue_t *)(v8 + 8));
      if (!*(void *)(v8 + 40))
      {
        id v9 = *(void **)(v8 + 48);
        if (!v9)
        {
          uint64_t v10 = objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:", 3600.0));
          uint64_t v11 = *(void **)(v8 + 48);
          *(void *)(v8 + 4_Block_object_dispose(va, 8) = v10;

          id v9 = *(void **)(v8 + 48);
        }

        [v9 timeIntervalSinceNow];
        if (v12 > 0.0)
        {
          dispatch_source_t v13 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(v8 + 8));
          id v14 = *(void **)(v8 + 40);
          *(void *)(v8 + 40) = v13;

          uint64_t v15 = *(dispatch_source_s **)(v8 + 40);
          dispatch_time_t v16 = dispatch_time(0LL, 300000000000LL);
          dispatch_source_set_timer(v15, v16, 0x45D964B800uLL, 0xDF8475800uLL);
          objc_initWeak(&location, (id)v8);
          uint64_t v17 = *(dispatch_source_s **)(v8 + 40);
          *(void *)&__int128 handler = _NSConcreteStackBlock;
          *((void *)&handler + 1) = 3221225472LL;
          uint64_t v27 = sub_10023F098;
          uint64_t v28 = &unk_1003ECBA0;
          objc_copyWeak(&v29, &location);
          dispatch_source_set_event_handler(v17, &handler);
          dispatch_resume(*(dispatch_object_t *)(v8 + 40));
          objc_destroyWeak(&v29);
          objc_destroyWeak(&location);
        }
      }
    }
  }

uint64_t sub_10023CDDC(uint64_t a1, void *a2)
{
  id v4 = a2;
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 48LL, 1);
  }
  id v6 = Property;
  id v7 = sub_1002B87DC(v6, &stru_1003EDFA8);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = sub_1001B4F00(v4, v8);

  id v11 = *(id *)(a1 + 32);
  if (v11) {
    id v11 = objc_getProperty(v11, v10, 48LL, 1);
  }
  id v12 = v11;
  id v13 = sub_1002B87DC(v12, &stru_1003EDFC8);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id obj = v14;
  id v15 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v30;
    uint64_t v18 = ASDErrorDomain;
    do
    {
      for (i = 0LL; i != v16; i = (char *)i + 1)
      {
        if (*(void *)v30 != v17) {
          objc_enumerationMutation(obj);
        }
        id v20 = *(void **)(*((void *)&v29 + 1) + 8LL * (void)i);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 valueForProperty:@"failure_error"]);
        uint64_t v23 = objc_opt_class(&OBJC_CLASS___NSData, v22);
        if ((objc_opt_isKindOfClass(v21, v23) & 1) != 0) {
          id v25 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___NSError, v24),  v21,  0LL);
        }
        else {
          id v25 = (id)ASDErrorWithDescription(v18, 825LL, @"Metadata not found");
        }
        BOOL v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        sub_1001B1ABC((id *)v4, (uint64_t)[v20 databaseID], v26, 1);
      }

      id v16 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
    }

    while (v16);
  }

  return 1LL;
}

BOOL sub_10023D020(id a1, AppInstall *a2)
{
  return sub_1001E2698(a2, (uint64_t)@"phase") != (id)-20LL;
}

BOOL sub_10023D048(id a1, AppInstall *a2)
{
  return sub_1001E2698(a2, (uint64_t)@"phase") == (id)-20LL;
}

void sub_10023D070(uint64_t a1)
{
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
    uint64_t v2 = *(void **)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;

    uint64_t v3 = *(dispatch_source_s **)(a1 + 40);
    if (v3)
    {
      dispatch_source_cancel(v3);
      id v4 = *(void **)(a1 + 40);
      *(void *)(a1 + 40) = 0LL;
    }
  }

uint64_t sub_10023D0C4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v4 = a2;
  if (v2) {
    id Property = objc_getProperty(v2, v3, 32LL, 1);
  }
  else {
    id Property = 0LL;
  }
  id v6 = Property;
  sub_100226A94(v4, 1LL, v6);

  return 1LL;
}

void sub_10023D12C(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 8));
  if (v4)
  {
    id v5 = *(void **)(a1 + 16);
    if (!v5 || ([v5 timeIntervalSinceDate:v4], v6 >= 0.0))
    {
      objc_storeStrong((id *)(a1 + 16), a2);
      id v7 = *(dispatch_source_s **)(a1 + 24);
      if (v7) {
        dispatch_source_cancel(v7);
      }
      uint64_t v8 = ASDLogHandleForCategory(30LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 138543362;
        id v19 = v4;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Starting flap timer to fire at: %{public}@",  buf,  0xCu);
      }

      dispatch_source_t v10 = dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  *(dispatch_queue_t *)(a1 + 8));
      id v11 = *(void **)(a1 + 24);
      *(void *)(a1 + 24) = v10;

      id v12 = *(void **)(a1 + 16);
      id v13 = *(dispatch_source_s **)(a1 + 24);
      if (v12)
      {
        [v12 timeIntervalSinceNow];
        dispatch_time_t v15 = dispatch_time(0LL, 1000000000 * (uint64_t)v14);
      }

      else
      {
        dispatch_time_t v15 = 0LL;
      }

      dispatch_source_set_timer(v13, v15, 0xFFFFFFFFFFFFFFFFLL, 0x12A05F200uLL);
      id v16 = *(dispatch_source_s **)(a1 + 24);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472LL;
      handler[2] = sub_10023D2DC;
      handler[3] = &unk_1003E9880;
      handler[4] = a1;
      dispatch_source_set_event_handler(v16, handler);
      dispatch_resume(*(dispatch_object_t *)(a1 + 24));
    }
  }
}

uint64_t sub_10023D2DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 16);
  *(void *)(v2 + 16) = 0LL;

  return sub_10023C080(*(void *)(a1 + 32), 0x40000LL);
}

id sub_10023D3BC(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
}

void sub_10023D448(uint64_t a1)
{
  BOOL v2 = *(_BYTE *)(*(void *)(a1 + 32) + 32LL) == 0;
  uint64_t v3 = ASDLogHandleForCategory(30LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v5)
    {
      double v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Monitor state did change: %{public}@",  (uint8_t *)&buf,  0xCu);
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
    unsigned int v8 = [v7 isEqualToString:@"ThermalPressureStateDidChangeNotification"];

    if (v8)
    {
      id v9 = sub_1003034E4((uint64_t)&OBJC_CLASS___ThermalPressureMonitor);
      dispatch_source_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      BOOL v11 = sub_100303810((uint64_t)v10);

      if (v11)
      {
        *(void *)&__int128 buf = 0LL;
        *((void *)&buf + 1) = &buf;
        uint64_t v34 = 0x3032000000LL;
        id v35 = sub_10023C89C;
        BOOL v36 = sub_10023C8AC;
        id v37 = 0LL;
        id v12 = *(dispatch_queue_t ***)(*(void *)(a1 + 32) + 72LL);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472LL;
        v28[2] = sub_10023D78C;
        v28[3] = &unk_1003EDF68;
        v28[4] = &buf;
        sub_1002EFA60(v12, v28);
        if ([*(id *)(*((void *)&buf + 1) + 40) count])
        {
          id v13 = sub_1002B86C0(*(id *)(*((void *)&buf + 1) + 40LL), &stru_1003EE058);
          double v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
          uint64_t v15 = ASDLogHandleForCategory(30LL);
          id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            id v24 = [v14 count];
            *(_DWORD *)__int128 v29 = 134218242;
            id v30 = v24;
            __int16 v31 = 2114;
            __int128 v32 = v14;
            _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Jettisoned %lu installation(s) due to thermal pressure: %{public}@",  v29,  0x16u);
          }
        }

        _Block_object_dispose(&buf, 8);
      }
    }

    else
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) name]);
      unsigned int v18 = [v17 isEqualToString:@"NetworkStateDidChangeNotification"];

      if (v18)
      {
        id v19 = sub_1001D17B8((uint64_t)&OBJC_CLASS___NetworkMonitor);
        id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        unsigned __int8 v21 = [v20 isConstrained];
        unsigned __int8 v22 = [v20 isExpensive];
        uint64_t v23 = *(void **)(*(void *)(a1 + 32) + 72LL);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472LL;
        v25[2] = sub_10023D7DC;
        v25[3] = &unk_1003EE0A0;
        unsigned __int8 v26 = v22;
        unsigned __int8 v27 = v21;
        [v23 modifyUsingTransaction:v25];
      }
    }

    sub_10023C080(*(void *)(a1 + 32), 4096LL);
  }

  else
  {
    if (v5)
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "Ignoring policy state change notifications",  (uint8_t *)&buf,  2u);
    }
  }

void sub_10023D760(_Unwind_Exception *a1)
{
}

uint64_t sub_10023D78C(uint64_t a1, void *a2)
{
  id v3 = sub_100227098(a2, 1uLL, 4uLL);
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  double v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  return 1LL;
}

id sub_10023D7D4(id a1, AppInstall *a2)
{
  return sub_100323C54(a2);
}

uint64_t sub_10023D7DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"IFNULL(app_install.phase, 10)",  &off_10040C880));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v6 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v5, v4);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10023D8D4;
  v10[3] = &unk_1003EE080;
  id v11 = v3;
  __int16 v12 = *(_WORD *)(a1 + 32);
  id v8 = v3;
  [v7 enumeratePersistentIDsUsingBlock:v10];

  return 1LL;
}

void sub_10023D8D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc(&OBJC_CLASS___AppInstallEntity);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  id v6 = -[SQLiteEntity initWithPersistentID:onConnection:](v4, "initWithPersistentID:onConnection:", a2, v5);

  id v7 = sub_10021B7AC(v6);
  id v8 = (id *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (!*(_BYTE *)(a1 + 40)
    || ((dispatch_source_t v10 = sub_1002E6130(v8), (unint64_t)v10 <= 4) ? (v11 = ((1LL << (char)v10) & 0x15) == 0) : (v11 = 1), v11))
  {
    int v16 = 1;
  }

  else
  {
    uint64_t v12 = ASDLogHandleForCategory(2LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      double v14 = sub_10021B614(v6);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      int v38 = 138412290;
      double v39 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%@] Installation remaining paused for expensive network",  (uint8_t *)&v38,  0xCu);
    }

    int v16 = 0;
  }

  if (*(_BYTE *)(a1 + 41))
  {
    uint64_t v17 = sub_1002E6090(v9);
    if ((unint64_t)v17 <= 4 && ((1LL << (char)v17) & 0x15) != 0)
    {
      uint64_t v19 = ASDLogHandleForCategory(2LL);
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v21 = sub_10021B614(v6);
        unsigned __int8 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        int v38 = 138412290;
        double v39 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[%@] Installation remaining paused for low data network",  (uint8_t *)&v38,  0xCu);
      }

uint64_t sub_10023DC34(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 56);
  v57[0] = _NSConcreteStackBlock;
  v57[1] = 3221225472LL;
  v57[2] = sub_10023E188;
  v57[3] = &unk_1003EE0C8;
  uint64_t v5 = (AppSchedulerResult *)v3;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  uint64_t v58 = v5;
  uint64_t v59 = v6;
  id v60 = v7;
  p_isa = (id *)&v5->super.isa;
  id v8 = sub_10022773C(v5, v4, v57);
  self = (void *)objc_claimAutoreleasedReturnValue(v8);
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  uint64_t v48 = a1;
  id v9 = *(id *)(a1 + 40);
  id v10 = [v9 countByEnumeratingWithState:&v53 objects:v66 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v54;
    do
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v54 != v12) {
          objc_enumerationMutation(v9);
        }
        double v14 = *(void **)(*((void *)&v53 + 1) + 8LL * (void)i);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v48 + 40) objectForKeyedSubscript:v14]);
        uint64_t v16 = ASDLogHandleForCategory(21LL);
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "componentsJoinedByString:", @", "));
          *(_DWORD *)__int128 buf = 138543618;
          unint64_t v63 = v14;
          __int16 v64 = 2114;
          __int128 v65 = v18;
          _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "[com.apple.appstored.Scheduler] Denied start: %{public}@ - %{public}@ ",  buf,  0x16u);
        }
      }

      id v11 = [v9 countByEnumeratingWithState:&v53 objects:v66 count:16];
    }

    while (v11);
  }

  id v20 = objc_alloc_init(&OBJC_CLASS___NSMutableOrderedSet);
  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  id Property = self;
  if (self) {
    id Property = objc_getProperty(self, v19, 16LL, 1);
  }
  id obj = Property;
  id v22 = [obj countByEnumeratingWithState:&v49 objects:v61 count:16];
  id v46 = v20;
  if (v22)
  {
    id v23 = v22;
    uint64_t v24 = *(void *)v50;
    do
    {
      for (j = 0LL; j != v23; j = (char *)j + 1)
      {
        if (*(void *)v50 != v24) {
          objc_enumerationMutation(obj);
        }
        unsigned __int8 v26 = *(void **)(*((void *)&v49 + 1) + 8LL * (void)j);
        id v27 = sub_100323C54(v26);
        id v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
        if (v28) {
          [*(id *)(v48 + 48) addObject:v28];
        }
        id v29 = sub_1001E2634(v26, (uint64_t)@"last_start_date");
        id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        if (!v30)
        {
          __int16 v31 = *(void **)(*(void *)(v48 + 32) + 56LL);
          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v26 databaseID]));
          [v31 setObject:0 forKeyedSubscript:v32];

          id v20 = v46;
        }

        __int16 v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v26 databaseID]));
        -[NSMutableOrderedSet addObject:](v20, "addObject:", v33);
      }

      id v23 = [obj countByEnumeratingWithState:&v49 objects:v61 count:16];
    }

    while (v23);
  }

  if (-[NSMutableOrderedSet count](v20, "count"))
  {
    if (p_isa) {
      id WeakRetained = objc_loadWeakRetained(p_isa + 2);
    }
    else {
      id WeakRetained = 0LL;
    }
    [WeakRetained startInstallIDs:v46 transaction:p_isa];

    id v20 = v46;
  }

  if (!self || !self[1] || *(_BYTE *)(*(void *)(v48 + 32) + 32LL) && *(_BYTE *)(v48 + 64))
  {
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"phase",  &off_10040DDE0));
    BOOL v36 = (void *)objc_claimAutoreleasedReturnValue([p_isa connection]);
    id v37 = sub_10024C290((uint64_t)&OBJC_CLASS___AppInstallEntity, @"ROWID", v35, v36);
    int v38 = (void *)objc_claimAutoreleasedReturnValue(v37);

    if (v38 && ![v38 isEqualToNumber:&off_10040C8B0])
    {
      uint64_t v42 = ASDLogHandleForCategory(30LL);
      uint32_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138543362;
        unint64_t v63 = v38;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "%{public}@ waiting installation(s), observing monitor state change notifications",  buf,  0xCu);
      }

      char v41 = 0;
    }

    else
    {
      uint64_t v39 = ASDLogHandleForCategory(30LL);
      uint32_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v40,  OS_LOG_TYPE_DEFAULT,  "No waiting installations, ignoring monitor state change notifications",  buf,  2u);
      }

      char v41 = 1;
    }

    id v20 = v46;

    *(_BYTE *)(*(void *)(v48 + 32) + 32LL) = v41;
  }

  return 1LL;
}

uint64_t sub_10023E188(uint64_t a1, void *a2)
{
  id v3 = a2;
  v84[0] = @"bytes_total";
  v84[1] = @"initial_odr_size";
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v84, 2LL));
  uint64_t v5 = sub_100323CB4(v3);
  uint64_t v6 = (id *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = sub_1002E6130(v6);
  if (((unint64_t)sub_1002E6090(v6) & (unint64_t)v7) == 0)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    id v9 = sub_100323E4C(v3, v8, v4);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

    id v11 = sub_100323EF0(v3, v10);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = (uint64_t)sub_1002E6130(v6);
    if (!v13)
    {
      uint64_t v14 = ASDLogHandleForCategory(30LL);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        id v73 = sub_100323C54(v3);
        id v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
        *(_DWORD *)__int128 buf = 138412290;
        id v86 = v74;
        _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[%@]: Expensive network not evaluated, repairing...",  buf,  0xCu);
      }

      id v16 = sub_10028715C((uint64_t)&OBJC_CLASS___CellularMonitor);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      id v18 = sub_100287480(v17);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      if (!v19) {
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[ASDCellularIdentity nullIdentity](&OBJC_CLASS___ASDCellularIdentity, "nullIdentity"));
      }
      id v20 = sub_1001BB300((uint64_t)&OBJC_CLASS___ExpensiveNetworkEvaluator, v19);
      unsigned __int8 v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      uint64_t v13 = sub_1001BB3D8((uint64_t)v21, v12);
    }

    uint64_t v22 = (uint64_t)sub_1002E6090(v6);
    if (v22)
    {
      if (v6)
      {
LABEL_10:
        sub_1002E6174((uint64_t)v6, v13);
        sub_1002E60D4((uint64_t)v6, v22);
        sub_100323D30(v3, v6);
        id v23 = objc_alloc(&OBJC_CLASS___AppInstallEntity);
        id v24 = [v3 databaseID];
        id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
        unsigned __int8 v26 = -[SQLiteEntity initWithPersistentID:onConnection:](v23, "initWithPersistentID:onConnection:", v24, v25);

        sub_10021B828(v26, v6);
        goto LABEL_11;
      }
    }

    else
    {
      uint64_t v50 = ASDLogHandleForCategory(30LL);
      __int128 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        uint64_t v75 = sub_100323C54(v3);
        __int128 v76 = (void *)objc_claimAutoreleasedReturnValue(v75);
        *(_DWORD *)__int128 buf = 138412290;
        id v86 = v76;
        _os_log_error_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_ERROR,  "[%@]: Low data network not evaluated, repairing...",  buf,  0xCu);
      }

      __int128 v52 = objc_alloc_init(&OBJC_CLASS___LowDataNetworkEvaluator);
      uint64_t v22 = sub_1001C94A0((uint64_t)v52, v12);

      if (v6) {
        goto LABEL_10;
      }
    }

    __int128 v53 = sub_1002E5EDC((uint64_t)&OBJC_CLASS___AppInstallPolicy);
    uint64_t v6 = (id *)objc_claimAutoreleasedReturnValue(v53);
    goto LABEL_10;
  }

BOOL sub_10023EAF4(id a1, AppInstallsDatabaseTransaction *a2)
{
  BOOL v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[AppInstallsDatabaseSession connection](v2, "connection"));
  uint64_t v18 = 0LL;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2020000000LL;
  uint64_t v21 = 0LL;
  id v4 = sub_1002FE18C((uint64_t)&OBJC_CLASS___AppInstallPredicates, 1LL);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v3, v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  v15[2] = sub_10023ECEC;
  v15[3] = &unk_1003EAAA8;
  id v8 = v3;
  id v16 = v8;
  uint64_t v17 = &v18;
  [v7 enumeratePersistentIDsUsingBlock:v15];
  if (v19[3])
  {
    uint64_t v9 = ASDLogHandleForCategory(30LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v14 = v19[3];
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v23 = v14;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Requesting scheduler poll for %lu reset installation(s) after daemon start",  buf,  0xCu);
    }

    if (v2)
    {
      uint64_t v12 = objc_getProperty(v2, v11, 24LL, 1);
      if (v12) {
        v12[16] |= 0x8000uLL;
      }
    }

    else
    {
      uint64_t v12 = 0LL;
    }
  }

  _Block_object_dispose(&v18, 8);
  return 1;
}

void sub_10023ECC4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10023ECEC(uint64_t a1, uint64_t a2)
{
  id v3 = -[SQLiteEntity initWithPersistentID:onConnection:]( objc_alloc(&OBJC_CLASS___AppInstallEntity),  "initWithPersistentID:onConnection:",  a2,  *(void *)(a1 + 32));
  uint64_t v4 = ASDLogHandleForCategory(2LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    id v6 = sub_10021B614(v3);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    int v8 = 138412290;
    uint64_t v9 = v7;
    _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[%@] Resetting bootstrap phase after daemon restart",  (uint8_t *)&v8,  0xCu);
  }

  -[SQLiteEntity setValue:forProperty:](v3, "setValue:forProperty:", &off_10040C8C8, @"bootstrapped");
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_10023EE00(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteNullPredicate isNotNullPredicateWithProperty:]( &OBJC_CLASS___SQLiteNullPredicate,  "isNotNullPredicateWithProperty:",  @"optimal_download_start"));
  v15[0] = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"IFNULL(app_install.phase, 10)",  &off_10040C898));
  v15[1] = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v15, 2LL));
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v6));

  int v8 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v9 = sub_10024C55C((uint64_t)&OBJC_CLASS___AppInstallEntity, @"optimal_download_start", v7, v8);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  if (v10)
  {
    [v10 doubleValue];
    uint64_t v12 = objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  v11 + 10.0));
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
}

uint64_t sub_10023EF84(unint64_t a1, unint64_t a2)
{
  if (!a2) {
    return 1LL;
  }
  switch(a1)
  {
    case 0uLL:
      uint64_t result = (a2 >> 3) & 1;
      break;
    case 1uLL:
      uint64_t result = (a2 >> 4) & 1;
      break;
    case 2uLL:
      uint64_t result = (a2 >> 1) & 1;
      break;
    case 3uLL:
      uint64_t result = (a2 >> 5) & 1;
      break;
    case 4uLL:
      uint64_t result = (a2 >> 2) & 1;
      break;
    default:
      uint64_t v4 = ASDLogHandleForCategory(30LL);
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_FAULT))
      {
        id v6 = sub_10023F1C8(a1);
        id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        int v8 = 138543362;
        id v9 = v7;
        _os_log_fault_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_FAULT,  "Returning no match, encountered new interface type: %{public}@",  (uint8_t *)&v8,  0xCu);
      }

      uint64_t result = 0LL;
      break;
  }

  return result;
}

void sub_10023F098(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v2 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained[6] timeIntervalSinceNow];
    if (v3 <= 0.0)
    {
      uint64_t v4 = ASDLogHandleForCategory(30LL);
      uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v8[0] = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Poll timer duration exceeded 1 hour - halting timer",  (uint8_t *)v8,  2u);
      }

      dispatch_assert_queue_V2((dispatch_queue_t)v2[1]);
      id v6 = (dispatch_source_s *)v2[5];
      if (v6)
      {
        dispatch_source_cancel(v6);
        id v7 = v2[5];
        v2[5] = 0LL;
      }
    }

    sub_10023C080(v2, 0x40000LL);
  }
}

NSString *sub_10023F1C8(unint64_t a1)
{
  if (a1 >= 5) {
    uint64_t v1 = -[NSString initWithFormat:](objc_alloc(&OBJC_CLASS___NSString), "initWithFormat:", @"unknown (%ld)", a1);
  }
  else {
    uint64_t v1 = (NSString *)*(&off_1003EE150 + a1);
  }
  return v1;
}

id sub_10023F220(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (objc_class *)objc_opt_self(a1);
  id v5 = v3;
  objc_opt_self(&OBJC_CLASS___AppPackage);
  id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 assetType]);
  unsigned __int8 v8 = [v7 isEqualToString:@"delta-package"];

  if ((v8 & 1) != 0)
  {
    id v9 = &off_10040C8E0;
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 assetType]);
    unsigned int v11 = [v10 isEqualToString:@"media"];

    if (!v11)
    {
      uint64_t v15 = 0LL;
      goto LABEL_35;
    }

    id v9 = &off_10040C8F8;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v9, @"package_type");
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v5 assetURL]);
  id v13 = sub_1001F56FC(v12);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v14, @"package_url");

  uint64_t v15 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v6,  "objectForKeyedSubscript:",  @"package_url"));
  if (!v15) {
    goto LABEL_35;
  }
  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v5 isLocallyCacheable]));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  v16,  @"locate_asset_cache");

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v5 variantID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v17, @"variant_id");

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v5 bytesTotal]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v18, @"bytes_total");

  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v5 initialODRSize]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  v19,  @"initial_odr_size");

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v5 sinfs]);
  if (v20)
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v5 sinfs]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v21,  0LL,  0LL,  0LL));

    if ([v22 count])
    {
      uint64_t v23 = (id *)sub_10018988C(objc_alloc(&OBJC_CLASS___StoreDRM), v22);
      id v24 = v23;
      if (v23)
      {
        id v25 = sub_100189964(v23, @"sinf");
        unsigned __int8 v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v26, @"sinf");

        id v27 = sub_100189964(v24, @"dpInfo");
        id v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v28, @"dp_info");
      }
    }
  }

  id v29 = (void *)objc_claimAutoreleasedReturnValue([v5 dPInfo]);

  if (v29)
  {
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v5 dPInfo]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v30, @"dp_info");
  }

  __int16 v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v5 isZipStreamable]));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v31, @"streaming_zip");

  __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v5 numberOfBytesToHash]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v32, @"hash_size");

  __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v5 numberOfBytesToHash]);
  id v34 = [v33 unsignedLongLongValue];

  if (v34)
  {
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v5 hashArrayData]);

    if (v35)
    {
      id v37 = (void *)objc_claimAutoreleasedReturnValue([v5 hashArrayData]);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v37,  0LL,  0LL,  0LL));
    }

    uint64_t v38 = objc_opt_class(&OBJC_CLASS___NSArray, v36);
    if ((objc_opt_isKindOfClass(v35, v38) & 1) == 0 || ![v35 count])
    {
      uint64_t v47 = ASDLogHandleForCategory(2LL);
      uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int128 v53 = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_ERROR,  "We did not receive any hash data, skipping hash verification",  v53,  2u);
      }

      -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  &off_10040C910,  @"hash_size");
      goto LABEL_33;
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v35, @"hash_array");
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v5 hashType]);
    uint32_t v40 = v39;
    if (v39)
    {
      id v41 = [v39 integerValue];
      if (v41 == (id)1)
      {
        uint64_t v50 = &off_10040C928;
        goto LABEL_32;
      }

      if (!v41)
      {
LABEL_30:
        uint64_t v50 = &off_10040C8E0;
LABEL_32:
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v6,  "setObject:forKeyedSubscript:",  v50,  @"hash_type",  *(_OWORD *)v53);

LABEL_33:
        goto LABEL_34;
      }

      uint64_t v42 = ASDLogHandleForCategory(2LL);
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 v53 = 138543362;
        *(void *)&v53[4] = v40;
        id v44 = "Guessing MD5 hashing type - but we received an unknown value (%{public}@)";
        uint64_t v45 = v43;
        uint32_t v46 = 12;
LABEL_40:
        _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, v44, v53, v46);
      }
    }

    else
    {
      uint64_t v49 = ASDLogHandleForCategory(2LL);
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int128 v53 = 0;
        id v44 = "Guessing MD5 hashing type - but we received no value";
        uint64_t v45 = v43;
        uint32_t v46 = 2;
        goto LABEL_40;
      }
    }

    goto LABEL_30;
  }

id sub_10023F818(id a1, unint64_t a2, int a3)
{
  id v3 = a1;
  if (a1)
  {
    if ((unint64_t)[a1 length] <= a2)
    {
      id v7 = v3;
    }

    else
    {
      if (a3)
      {
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 substringToIndex:a2]);
        id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@...", v6));

        return v3;
      }

      id v7 = (id)objc_claimAutoreleasedReturnValue([v3 substringToIndex:a2]);
    }

    id v3 = v7;
  }

  return v3;
}

id sub_10023F8C4(void *a1, unint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableCharacterSet alphanumericCharacterSet]( &OBJC_CLASS___NSMutableCharacterSet,  "alphanumericCharacterSet"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSCharacterSet characterSetWithCharactersInString:]( &OBJC_CLASS___NSCharacterSet,  "characterSetWithCharactersInString:",  @".()-"));
    [v4 formUnionWithCharacterSet:v5];

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 invertedSet]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([a1 componentsSeparatedByCharactersInSet:v6]);
    unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 componentsJoinedByString:&stru_1003F3E40]);

    id v9 = sub_10023F818(v8, a2, 1);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  }

  else
  {
    id v10 = 0LL;
  }

  return v10;
}

XPCNotificationSource *sub_10023FA70(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a5;
  objc_opt_self(a1);
  unsigned int v11 = objc_alloc(&OBJC_CLASS___XPCNotificationSource);
  id v12 = a3;
  id v13 = a4;
  if (v11)
  {
    id v14 = v9;
    id v15 = v10;
    v22.receiver = v11;
    v22.super_class = (Class)&OBJC_CLASS___XPCNotificationSource;
    id v16 = (XPCNotificationSource *)objc_msgSendSuper2(&v22, "init");
    unsigned int v11 = v16;
    if (v16)
    {
      objc_storeStrong((id *)&v16->_applicableEntitlement.name, a3);
      objc_storeStrong((id *)&v11->_applicableEntitlement.legacyName, a4);
      uint64_t v17 = (NSString *)[v14 copy];
      name = v11->_name;
      v11->_name = v17;

      id v19 = [v15 copy];
      id mergeHandler = v11->_mergeHandler;
      v11->_id mergeHandler = v19;
    }
  }

  else
  {
  }

  return v11;
}

void sub_10023FBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10023FC04(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSKeybag sharedInstance](&OBJC_CLASS___AMSKeybag, "sharedInstance"));
  id v9 = 0LL;
  unsigned __int8 v5 = [v4 importKeybagWithData:v3 error:&v9];

  id v6 = v9;
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = ASDLogHandleForCategory(25LL);
    unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543362;
      id v11 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to import keybag data for account error: %{public}@",  buf,  0xCu);
    }
  }
}

id sub_10023FD08(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  objc_opt_self(a1);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSKeybag sharedInstance](&OBJC_CLASS___AMSKeybag, "sharedInstance"));
  uint64_t v7 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_DSID"));

  if (v7) {
    unsigned __int8 v8 = v7;
  }
  else {
    unsigned __int8 v8 = &off_10040C940;
  }
  id v14 = 0LL;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 keybagSyncDataWithAccountID:v8 transactionType:a3 error:&v14]);
  id v10 = v14;

  if (!v9)
  {
    uint64_t v11 = ASDLogHandleForCategory(25LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543362;
      id v16 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Failed to obtain keybay data for account error: %{public}@",  buf,  0xCu);
    }
  }

  return v9;
}

id sub_10023FE48(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  objc_opt_self(a1);
  unsigned __int8 v8 = (void *)objc_claimAutoreleasedReturnValue(+[AMSKeybag sharedInstance](&OBJC_CLASS___AMSKeybag, "sharedInstance"));
  id v9 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ams_DSID"));

  if (v9) {
    id v10 = v9;
  }
  else {
    id v10 = &off_10040C940;
  }
  id v17 = 0LL;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 keybagSyncDataWithAccountID:v10 transactionType:a3 error:&v17]);
  id v12 = v17;

  if (!v11)
  {
    uint64_t v13 = ASDLogHandleForCategory(25LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543362;
      id v19 = v12;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failed to obtain keybag data for account error: %{public}@",  buf,  0xCu);
    }

    if (a4) {
      *a4 = v12;
    }
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 base64EncodedStringWithOptions:0]);

  return v15;
}

id sub_10023FFB4(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  id v7 = a3;
  id v8 = a2;
  objc_opt_self(a1);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 host]);

  id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "_lp_userVisibleHost"));
  id v11 = sub_10023F8C4(v10, 0x20uLL);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  if (a4 >= 2)
  {
    uint64_t v13 = ASDLocalizedString(@"CONFIRM_EXTERNAL_MANIFEST_DOWNLOAD_BODY");
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString localizedStringWithFormat:]( &OBJC_CLASS___NSString,  "localizedStringWithFormat:",  v14,  a4,  v12));
LABEL_9:

    goto LABEL_10;
  }

  if (a4 == 1)
  {
    id v16 = sub_10023F818(v7, 0x1F4uLL, 1);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v16);
    if ([v14 length])
    {
      uint64_t v17 = ASDLocalizedString(@"CONFIRM_EXTERNAL_MANIFEST_DOWNLOAD_BODY_SPECIFIC");
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      id v19 = +[NSString localizedStringWithFormat:](&OBJC_CLASS___NSString, "localizedStringWithFormat:", v18, v12, v14);
    }

    else
    {
      uint64_t v20 = ASDLocalizedString(@"CONFIRM_EXTERNAL_MANIFEST_DOWNLOAD_BODY");
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v20);
      id v19 = +[NSString localizedStringWithFormat:](&OBJC_CLASS___NSString, "localizedStringWithFormat:", v18, 1LL, v12);
    }

    id v15 = (void *)objc_claimAutoreleasedReturnValue(v19);

    goto LABEL_9;
  }

  id v15 = 0LL;
LABEL_10:
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDialogRequest requestWithTitle:message:]( &OBJC_CLASS___AMSDialogRequest,  "requestWithTitle:message:",  v15,  0LL));
  uint64_t v22 = ASDLocalizedString(@"CANCEL");
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  id v24 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDialogAction actionWithTitle:identifier:]( &OBJC_CLASS___AMSDialogAction,  "actionWithTitle:identifier:",  v23,  @"UPPManifestDialogActionCancel"));

  [v21 setDefaultAction:v24];
  uint64_t v25 = ASDLocalizedString(@"INSTALL");
  unsigned __int8 v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
  id v27 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDialogAction actionWithTitle:identifier:]( &OBJC_CLASS___AMSDialogAction,  "actionWithTitle:identifier:",  v26,  @"UPPManifestDialogActionInstall"));

  v30[0] = v24;
  v30[1] = v27;
  id v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v30, 2LL));
  [v21 setButtonActions:v28];

  return v21;
}

id sub_100240228(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  objc_opt_self(a1);
  uint64_t v10 = ASDLogHandleForCategory(41LL);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v55 = v9;
    __int16 v56 = 2114;
    id v57 = v7;
    _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "[%@] Could not load download manifest with underlying error: %{public}@",  buf,  0x16u);
  }

  uint64_t v12 = ASDErrorDomain;
  if (ASDErrorIsEqual(v7, ASDErrorDomain, 855LL))
  {
    id v51 = v8;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 userInfo]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"UPPManifestErrorUserInfoKeyExistingName"]);
    objc_opt_class(&OBJC_CLASS___NSString, v15);
    id v16 = sub_1001B2BD8(v14);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    id v18 = sub_10023F818(v17, 0x20uLL, 1);
    id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v7 userInfo]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKeyedSubscript:@"UPPManifestErrorUserInfoKeyManifestName"]);
    objc_opt_class(&OBJC_CLASS___NSString, v22);
    id v23 = sub_1001B2BD8(v21);
    id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    id v25 = sub_10023F818(v24, 0x20uLL, 1);
    unsigned __int8 v26 = (void *)objc_claimAutoreleasedReturnValue(v25);

    uint64_t v27 = ASDLocalizedString(@"EXTERNAL_MANIFEST_ALREADY_INSTALLED_ERROR_TITLE");
    id v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v28, v19));

    id v30 = v9;
    if ([v26 isEqualToString:v19])
    {
      uint64_t v31 = ASDLocalizedString(@"EXTERNAL_MANIFEST_ALREADY_INSTALLED_SAME_NAME_ERROR_BODY");
      __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      __int16 v33 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v32, v19, v49, v50);
    }

    else
    {
      uint64_t v44 = ASDLocalizedString(@"EXTERNAL_MANIFEST_ALREADY_INSTALLED_OTHER_NAME_ERROR_BODY");
      __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(v44);
      __int16 v33 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v32, v26, v19, v19);
    }

    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(v33);

    uint32_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDialogRequest requestWithTitle:message:]( &OBJC_CLASS___AMSDialogRequest,  "requestWithTitle:message:",  v29,  v42));
    uint64_t v45 = ASDLocalizedString(@"OK");
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v45);
    uint32_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDialogAction actionWithTitle:](&OBJC_CLASS___AMSDialogAction, "actionWithTitle:", v43));
    __int128 v53 = v46;
    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v53, 1LL));
    [v40 setButtonActions:v47];

    id v9 = v30;
    id v8 = v51;
  }

  else
  {
    if (!v8)
    {
      uint32_t v40 = 0LL;
      goto LABEL_14;
    }

    id v34 = (void *)objc_claimAutoreleasedReturnValue([v8 host]);
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v34, "_lp_userVisibleHost"));
    id v36 = sub_10023F8C4(v35, 0x20uLL);
    id v19 = (void *)objc_claimAutoreleasedReturnValue(v36);

    else {
      id v37 = @"EXTERNAL_MANIFEST_ERROR_FORMAT_%@";
    }
    uint64_t v38 = ASDLocalizedString(v37);
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
    unsigned __int8 v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v39, v19));

    uint32_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDialogRequest requestWithTitle:message:]( &OBJC_CLASS___AMSDialogRequest,  "requestWithTitle:message:",  v26,  0LL));
    uint64_t v41 = ASDLocalizedString(@"OK");
    id v29 = (void *)objc_claimAutoreleasedReturnValue(v41);
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDialogAction actionWithTitle:](&OBJC_CLASS___AMSDialogAction, "actionWithTitle:", v29));
    __int128 v52 = v42;
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v52, 1LL));
    [v40 setButtonActions:v43];
  }

LABEL_14:
  return v40;
}

void *sub_100240668(void *result)
{
  if (result) {
    return (void *)([result isEqualToNumber:&off_10040C958] ^ 1);
  }
  return result;
}

__CFString *sub_10024068C(unint64_t a1)
{
  if (a1 >= 4) {
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unknown Class: %ld",  a1));
  }
  else {
    return off_1003EE1F0[a1];
  }
}

__CFString *sub_1002406DC(unint64_t a1)
{
  if (a1 >= 6) {
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unknown Class: %ld",  a1));
  }
  else {
    return off_1003EE210[a1];
  }
}

void sub_100240984(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = ASDLogHandleForCategory(41LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (!v5)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logUUID]);
    int v11 = 138412546;
    uint64_t v12 = v10;
    __int16 v13 = 2114;
    id v14 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%@] Interactive authentication for volume purchase completed with error: %{public}@",  (uint8_t *)&v11,  0x16u);
    goto LABEL_4;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logUUID]);
    int v11 = 138412546;
    uint64_t v12 = v10;
    __int16 v13 = 2114;
    id v14 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%@] Interactive authentication for volume purchase completed with result: %{public}@",  (uint8_t *)&v11,  0x16u);
LABEL_4:
  }

void sub_100240AF0(id a1)
{
  id v1 = objc_alloc(&OBJC_CLASS___AMSPurchaseQueueConfiguration);
  id v2 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v8 = [v1 initWithBag:v3];

  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___ManagedPurchaseQueueDelegate);
  id v5 = (void *)qword_100462428;
  qword_100462428 = (uint64_t)v4;

  [v8 setDelegate:qword_100462428];
  id v6 = -[AMSPurchaseQueue initWithConfiguration:]( objc_alloc(&OBJC_CLASS___AMSPurchaseQueue),  "initWithConfiguration:",  v8);
  uint64_t v7 = (void *)qword_100462420;
  qword_100462420 = (uint64_t)v6;
}

id *sub_100240B98(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  uint64_t v7 = a3;
  if (!a1) {
    goto LABEL_32;
  }
  v69.receiver = a1;
  v69.super_class = (Class)&OBJC_CLASS___ManagedApplicationTask;
  id v8 = (id *)objc_msgSendSuper2(&v69, "init");
  a1 = v8;
  if (!v8) {
    goto LABEL_32;
  }
  objc_storeStrong(v8 + 17, a2);
  uint64_t v9 = objc_claimAutoreleasedReturnValue([a1[17] bundleIdentifier]);
  id v10 = a1[8];
  a1[8] = (id)v9;

  uint64_t v11 = objc_claimAutoreleasedReturnValue([a1[17] bundleVersion]);
  id v12 = a1[9];
  a1[9] = (id)v11;

  uint64_t v13 = objc_claimAutoreleasedReturnValue([a1[17] itemIdentifier]);
  id v14 = a1[13];
  a1[13] = (id)v13;

  uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  id v16 = a1[16];
  a1[16] = (id)v15;

  else {
    uint64_t v17 = v7;
  }
  objc_storeStrong(a1 + 10, v17);
  id v18 = -[KeepAlive initWithName:]( objc_alloc(&OBJC_CLASS___KeepAlive),  "initWithName:",  @"ManagedApplicationTask");
  id v19 = a1[14];
  a1[14] = v18;

  *((_BYTE *)a1 + 144) = [a1[17] skipDownloads];
  if (a1[8])
  {
    uint64_t v20 = objc_claimAutoreleasedReturnValue(+[ApplicationProxy proxyForBundleID:](&OBJC_CLASS___ApplicationProxy, "proxyForBundleID:"));
    id v21 = a1[7];
    a1[7] = (id)v20;

    id v22 = a1[7];
    if (v22)
    {
      if ((uint64_t)[v22 storeItemID] >= 1)
      {
        uint64_t v23 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [a1[7] storeItemID]));
        id v24 = a1[13];
        a1[13] = (id)v23;

        uint64_t v25 = objc_claimAutoreleasedReturnValue([a1[7] thinningVariantID]);
        id v26 = a1[6];
        a1[6] = (id)v25;

        uint64_t v27 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [a1[7] storeExternalVersionID]));
        id v28 = a1[11];
        a1[11] = (id)v27;
      }

      *((_BYTE *)a1 + 96) = [a1[7] isInstalled];
    }

    goto LABEL_17;
  }

  uint64_t v29 = objc_claimAutoreleasedReturnValue([a1[17] externalVersionIdentifier]);
  id v30 = a1[11];
  a1[11] = (id)v29;

  uint64_t v31 = objc_claimAutoreleasedReturnValue(+[ApplicationProxy proxyForItemID:](&OBJC_CLASS___ApplicationProxy, "proxyForItemID:", a1[13]));
  id v32 = a1[7];
  a1[7] = (id)v31;

  id v33 = a1[7];
  if (!v33)
  {
LABEL_17:
    sub_10024127C(a1);
    goto LABEL_18;
  }

  uint64_t v34 = objc_claimAutoreleasedReturnValue([v33 thinningVariantID]);
  id v35 = a1[6];
  a1[6] = (id)v34;

  uint64_t v36 = objc_claimAutoreleasedReturnValue([a1[7] bundleID]);
  id v37 = a1[8];
  a1[8] = (id)v36;

  uint64_t v38 = objc_claimAutoreleasedReturnValue([a1[7] bundleVersion]);
  id v39 = a1[9];
  a1[9] = (id)v38;

  *((_BYTE *)a1 + 96) = [a1[7] isInstalled];
  sub_10024127C(a1);
  if (!a1[11] && [a1[7] isFactoryInstall])
  {
    uint64_t v40 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [a1[7] storeExternalVersionID]));
    id v41 = a1[11];
    a1[11] = (id)v40;

    uint64_t v42 = ASDLogHandleForCategory(41LL);
    uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      id v44 = a1[15];
      id v45 = a1[11];
      *(_DWORD *)__int128 buf = 138412546;
      id v71 = v44;
      __int16 v72 = 2114;
      id v73 = v45;
      _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "[%@] Factory VPP claim using evid: %{public}@",  buf,  0x16u);
    }
  }

void sub_10024127C(void *a1)
{
  if (a1)
  {
    id v2 = objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey);
    id v3 = sub_100241534((uint64_t)a1);
    id v6 = (id)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v4 = -[LogKey initWithBatchLogKey:logCode:externalID:bundleID:itemID:]( v2,  "initWithBatchLogKey:logCode:externalID:bundleID:itemID:",  0LL,  v6,  a1[16],  a1[8],  a1[13]);
    id v5 = (void *)a1[15];
    a1[15] = v4;
  }

PurchaseInfo *sub_10024130C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = objc_alloc_init(&OBJC_CLASS___PurchaseInfo);
    -[PurchaseInfo setBundleID:](v4, "setBundleID:", *(void *)(a1 + 64));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) accountIdentifier]);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);

      if (v6) {
        -[PurchaseInfo setAccount:](v4, "setAccount:", *(void *)(a1 + 40));
      }
    }

    -[PurchaseInfo setClientType:](v4, "setClientType:", 1LL);
    -[PurchaseInfo setExternalID:](v4, "setExternalID:", *(void *)(a1 + 128));
    id v7 = sub_100241534(a1);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    -[PurchaseInfo setLogCode:](v4, "setLogCode:", v8);

    -[PurchaseInfo setItemID:](v4, "setItemID:", *(void *)(a1 + 104));
    id v9 = sub_1001DF594(v3, ASDManagedLookupBundleDisplayName);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    -[PurchaseInfo setItemName:](v4, "setItemName:", v10);

    id v11 = sub_1001DF594(v3, ASDManagedLookupVendorName);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    -[PurchaseInfo setVendorName:](v4, "setVendorName:", v12);

    -[PurchaseInfo setRequireUniversal:]( v4,  "setRequireUniversal:",  _os_feature_enabled_impl("AppStoreDaemon", "EnableVPPThinning") ^ 1);
    -[PurchaseInfo setMetricsType:](v4, "setMetricsType:", &off_10040C970);
    -[PurchaseInfo setPurchaseType:](v4, "setPurchaseType:", 0LL);
    if (*(_BYTE *)(a1 + 96)) {
      uint64_t v13 = 2LL;
    }
    else {
      uint64_t v13 = 1LL;
    }
    -[PurchaseInfo setCoordinatorIntent:](v4, "setCoordinatorIntent:", v13);
    -[PurchaseInfo setCoordinatorImportance:](v4, "setCoordinatorImportance:", 3LL);
    id v14 = sub_1001DF594(v3, ASDManagedLookupFreeBuyParams);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (v15)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue(+[AMSBuyParams buyParamsWithString:](&OBJC_CLASS___AMSBuyParams, "buyParamsWithString:", v15));
      -[PurchaseInfo setBuyParams:](v4, "setBuyParams:", v16);
    }

    id v17 = sub_100241580(a1);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    -[PurchaseInfo setClientInfo:](v4, "setClientInfo:", v18);

    -[PurchaseInfo updateGeneratedProperties](v4, "updateGeneratedProperties");
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

id sub_100241534(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 136) requestType];
  id v2 = (id *)&off_1003EAF28;
  id v3 = &off_1003EAF40;
  if (v1 != (id)3) {
    id v3 = &off_1003EAF38;
  }
  if (v1 != (id)2) {
    id v2 = (id *)v3;
  }
  return *v2;
}

id sub_100241580(uint64_t a1)
{
  id v2 = sub_1001F4ADC((uint64_t)&OBJC_CLASS___AMSProcessInfo);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = v3;
  if (*(void *)(a1 + 80))
  {
    objc_msgSend(v3, "setBundleIdentifier:");
    [v4 setClientVersion:@"1.0"];
  }

  return v4;
}

void sub_1002429B4(_Unwind_Exception *a1)
{
}

BOOL sub_1002429F8(uint64_t a1, void *a2, void *a3, uint64_t *a4, void *a5)
{
  id v8 = a3;
  if (!a1)
  {
    BOOL v72 = 0LL;
    goto LABEL_46;
  }

  int v215 = *(unsigned __int8 *)(a1 + 144);
  id v9 = objc_opt_new(&OBJC_CLASS___AMSBuyParams);
  id v10 = v9;
  uint64_t v11 = *(void *)(a1 + 104);
  if (v11) {
    -[AMSBuyParams setParameter:forKey:](v9, "setParameter:forKey:", v11, AMSBuyParamPropertyItemId);
  }
  id v12 = *(void **)(a1 + 88);
  if (v12)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", 0xFFFFFFFFLL));
    unsigned __int8 v14 = [v12 isEqualToNumber:v13];

    if ((v14 & 1) == 0) {
      -[AMSBuyParams setParameter:forKey:]( v10,  "setParameter:forKey:",  *(void *)(a1 + 88),  AMSBuyParamPropertyExternalVersionId);
    }
  }

  if (*(void *)(a1 + 64))
  {
    uint64_t v15 = *(void **)(a1 + 56);
    if (v15 && (uint64_t)[v15 storeExternalVersionID] >= 1)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [*(id *)(a1 + 56) storeExternalVersionID]));
      -[AMSBuyParams setParameter:forKey:]( v10,  "setParameter:forKey:",  v16,  AMSBuyParamPropertyExistingExternalVersionId);

      id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) deviceIdentifierForVendor]);
      if (v17) {
        -[AMSBuyParams setParameter:forKey:](v10, "setParameter:forKey:", v17, AMSBuyParamPropertyVendorID);
      }
    }

    -[AMSBuyParams setParameter:forKey:](v10, "setParameter:forKey:", *(void *)(a1 + 64), AMSBuyParamPropertyBundleId);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) sinf]);
    if (v18) {
      -[AMSBuyParams setParameter:forKey:](v10, "setParameter:forKey:", v18, AMSBuyParamPropertySinfData);
    }
  }

  uint64_t v19 = *(void *)(a1 + 72);
  if (v19) {
    -[AMSBuyParams setParameter:forKey:](v10, "setParameter:forKey:", v19, AMSBuyParamPropertyBundleVersion);
  }
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDevice serialNumber](&OBJC_CLASS___AMSDevice, "serialNumber"));
  -[AMSBuyParams setParameter:forKey:](v10, "setParameter:forKey:", v20, AMSBuyParamPropertySerialNumber);

  id v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ams_DSID"));
  if (v22)
  {
    uint64_t v23 = objc_opt_class(&OBJC_CLASS___NSNumber, v21);
    if ((objc_opt_isKindOfClass(v22, v23) & 1) != 0)
    {
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v22 stringValue]);
      -[AMSBuyParams setParameter:forKey:](v10, "setParameter:forKey:", v24, AMSBuyParamPropertyDsid);
    }
  }

  v222 = v8;
  if ([*(id *)(a1 + 136) requestType])
  {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [*(id *)(a1 + 136) requestType]));
    -[AMSBuyParams setParameter:forKey:](v10, "setParameter:forKey:", v25, AMSBuyParamPropertyRequestType);
  }

  id v26 = -[AMSPurchase initWithPurchaseType:buyParams:]( objc_alloc(&OBJC_CLASS___AMSPurchase),  "initWithPurchaseType:buyParams:",  5LL,  v10);
  -[AMSPurchase setIgnoreRequirePasswordRestriction:](v26, "setIgnoreRequirePasswordRestriction:", 1LL);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 120) description]);
  -[AMSPurchase setLogUUID:](v26, "setLogUUID:", v27);

  id v28 = sub_100241580(a1);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  -[AMSPurchase setClientInfo:](v26, "setClientInfo:", v29);

  id v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) accountIdentifier]);
  if (v30 && (uint64_t v31 = *(void *)(a1 + 40), v30, v31))
  {
    -[AMSPurchase setAccount:](v26, "setAccount:", *(void *)(a1 + 40));
  }

  else
  {
    id v32 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    id v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v32, "ams_activeiTunesAccount"));
    -[AMSPurchase setAccount:](v26, "setAccount:", v33);
  }

  uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  if (_os_feature_enabled_impl("AppStoreDaemon", "EnableVPPThinning"))
  {
    id v35 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device);
    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
    id v37 = [v36 copyThinningHeadersForPlatform:1];
    [v34 addEntriesFromDictionary:v37];
  }

  id v38 = sub_1002C61AC((uint64_t)&OBJC_CLASS___Daemon);

  if ([v34 count]) {
    -[AMSPurchase setAdditionalHeaders:](v26, "setAdditionalHeaders:", v34);
  }
  objc_opt_self(&OBJC_CLASS___ManagedApplicationTask);
  v223 = v34;
  v224 = v10;
  if (qword_100462418 != -1) {
    dispatch_once(&qword_100462418, &stru_1003EE180);
  }
  id v39 = (id)qword_100462420;
  v238 = v26;
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v238, 1LL));
  id v41 = (void *)objc_claimAutoreleasedReturnValue([v39 enquePurchases:v40]);

  id v232 = 0LL;
  v221 = v41;
  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v41 resultWithError:&v232]);
  id v43 = v232;
  id v44 = v43;
  if (v43 && ASDErrorIsEqual(v43, AMSErrorDomain, 305LL))
  {
    id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 userInfo]);
    uint32_t v46 = v42;
    uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v45 objectForKeyedSubscript:AMSErrorUserInfoKeyServerErrorCode]);
    uint64_t v48 = a2;
    uint64_t v49 = v26;
    uint64_t v50 = a1;
    id v51 = [v47 integerValue];

    uint64_t v52 = ASDServerErrorDomain;
    __int128 v53 = a4;
    uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v44 localizedFailureReason]);
    id v55 = v51;
    a1 = v50;
    id v26 = v49;
    a2 = v48;
    uint64_t v56 = ASDErrorWithTitleAndMessage(v52, v55, v54, 0LL);
    uint64_t v57 = objc_claimAutoreleasedReturnValue(v56);

    a4 = v53;
    id v44 = (id)v57;
    uint64_t v42 = v46;
  }

  uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v42 firstObject]);
  id v59 = v58;
  if (v58)
  {
    uint64_t v60 = objc_claimAutoreleasedReturnValue([v58 correlationID]);
    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v59 responseDictionary]);
    v216 = (void *)v60;
    if (v44)
    {
      v214 = v26;
      BOOL v62 = a4;
      id v218 = v61;
      uint64_t v63 = ASDLogHandleForCategory(41LL);
      id v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v65 = *(void **)(a1 + 120);
        *(_DWORD *)__int128 buf = 138412802;
        id v246 = v65;
        __int16 v247 = 2114;
        *(void *)v248 = v44;
        *(_WORD *)&v248[8] = 2114;
        uint64_t v249 = v60;
        _os_log_impl( (void *)&_mh_execute_header,  v64,  OS_LOG_TYPE_DEFAULT,  "[%@] Request resulted in error: %{public}@ storeCorrelationID: %{public}@",  buf,  0x20u);
      }

      BOOL v66 = 0;
      int v219 = 0;
      int v217 = 0;
      LOBYTE(v67) = 0;
      int v68 = 0;
      objc_super v69 = v221;
      id v8 = v222;
LABEL_142:

      uint64_t v61 = v218;
      a4 = v62;
      id v26 = v214;
      goto LABEL_143;
    }

    if (!v61)
    {
      BOOL v66 = 0;
      int v219 = 0;
      int v217 = 0;
      id v44 = 0LL;
      LOBYTE(v67) = 0;
      int v68 = 0;
      objc_super v69 = v221;
      id v8 = v222;
LABEL_143:

      BOOL v70 = v68 != 0;
      if (v219 && v217)
      {
        uint64_t v71 = 1LL;
        if (!a4) {
          goto LABEL_43;
        }
      }

      else
      {
        if (v219) {
          BOOL v169 = v217 == 0;
        }
        else {
          BOOL v169 = 0;
        }
        char v170 = !v169;
        char v171 = v170 ^ 1 | v67;
        uint64_t v172 = 2LL;
        if (!v169) {
          uint64_t v172 = 3LL;
        }
        uint64_t v173 = 4LL;
        if (!v66) {
          uint64_t v173 = 0LL;
        }
        if ((v171 & 1) != 0) {
          uint64_t v71 = v172;
        }
        else {
          uint64_t v71 = v173;
        }
        if (!a4) {
          goto LABEL_43;
        }
      }

      goto LABEL_42;
    }

    id v218 = v61;
    v211 = a2;
    v212 = a4;
    uint64_t v226 = a1;
    v214 = v26;
    v209 = v59;
    v210 = v42;
    if (!_os_feature_enabled_impl("AppStoreDaemon", "EnableVPPThinning"))
    {
      id v90 = sub_1002EB678((uint64_t)&OBJC_CLASS___StoreItemResponse, v218, 1);
      id Property = (id *)objc_claimAutoreleasedReturnValue(v90);
      id v93 = Property;
      if (Property) {
        id Property = (id *)objc_getProperty(Property, v92, 56LL, 1);
      }
      id v80 = Property;
      if ([*(id *)(a1 + 48) length])
      {
        uint64_t v94 = ASDLogHandleForCategory(41LL);
        v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
        if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
        {
          v178 = *(void **)(v226 + 120);
          uint64_t v179 = *(void *)(v226 + 48);
          *(_DWORD *)__int128 buf = 138412546;
          id v246 = v178;
          __int16 v247 = 2114;
          *(void *)v248 = v179;
          _os_log_error_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_ERROR,  "[%@]: Will not attempt sinf update for app due to variantID: %{public}@",  buf,  0x16u);
        }
      }

      else
      {
        if (*(_BYTE *)(a1 + 96))
        {
          v95 = (os_log_s *)objc_claimAutoreleasedReturnValue([v218 objectForKey:@"replacementSinf"]);
          if (v95)
          {
            uint64_t v97 = objc_opt_class(&OBJC_CLASS___NSData, v96);
            int v217 = objc_opt_isKindOfClass(v95, v97) & 1;
          }

          else
          {
            int v217 = 0;
          }

          int v219 = sub_1002444A8(v226, v80, v95);
          uint64_t v116 = ASDLogHandleForCategory(41LL);
          id v117 = (os_log_s *)objc_claimAutoreleasedReturnValue(v116);
          if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
          {
            v118 = *(void **)(v226 + 120);
            *(_DWORD *)__int128 buf = 138412802;
            id v246 = v118;
            __int16 v247 = 1024;
            *(_DWORD *)v248 = v219;
            *(_WORD *)&v248[4] = 1024;
            *(_DWORD *)&v248[6] = v217;
            _os_log_impl( (void *)&_mh_execute_header,  v117,  OS_LOG_TYPE_DEFAULT,  "[%@] Inline sinf update complete with result: %{BOOL}d used replacementSinf: %{BOOL}d",  buf,  0x18u);
          }

          goto LABEL_97;
        }

        uint64_t v114 = ASDLogHandleForCategory(41LL);
        v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v115 = *(void **)(v226 + 120);
          *(_DWORD *)__int128 buf = 138412290;
          id v246 = v115;
          _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "[%@] No app to attempt an inline update",  buf,  0xCu);
        }
      }

      int v219 = 0;
      int v217 = 0;
LABEL_97:

      v124 = v80;
      v213 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
      __int128 v234 = 0u;
      __int128 v235 = 0u;
      __int128 v236 = 0u;
      __int128 v237 = 0u;
      v125 = v124;
      id v126 = [v125 countByEnumeratingWithState:&v234 objects:buf count:16];
      v227 = v125;
      if (v126)
      {
        id v128 = v126;
        uint64_t v129 = *(void *)v235;
        while (2)
        {
          v130 = 0LL;
          do
          {
            if (*(void *)v235 != v129) {
              objc_enumerationMutation(v125);
            }
            uint64_t v131 = *(_BYTE **)(*((void *)&v234 + 1) + 8LL * (void)v130);
            if (v131)
            {
              id v132 = objc_retainAutoreleasedReturnValue(objc_getProperty(*(id *)(*((void *)&v234 + 1)
                                                                               + 8LL * (void)v130), v127, 96LL, 1));
              id v134 = objc_getProperty(v131, v133, 208LL, 1);
            }

            else
            {
              id v132 = 0LL;
              id v134 = 0LL;
            }

            id v135 = v134;
            v136 = (void *)objc_claimAutoreleasedReturnValue([v135 stringValue]);
            if ([v132 length])
            {
              if ([v136 length])
              {
                id v137 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v226 + 104) stringValue]);
                unsigned int v138 = [v136 isEqualToString:v137];

                v125 = v227;
                if (v138)
                {
                  id v140 = [v132 copy];
                  -[NSMutableDictionary setObject:forKey:](v213, "setObject:forKey:", v140, ASDManagedLookupBundleID);

                  if (v131)
                  {
                    v141 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  v131[19] & 1));
                    -[NSMutableDictionary setObject:forKey:]( v213,  "setObject:forKey:",  v141,  ASDManagedLookupIs32BitOnly);

                    id v143 = objc_getProperty(v131, v142, 216LL, 1);
                    id v145 = v143;
                    if (v143 && [v143 length])
                    {
                      id v146 = [v145 copy];
                      -[NSMutableDictionary setObject:forKey:]( v213,  "setObject:forKey:",  v146,  ASDManagedLookupBundleDisplayName);
                    }

                    id v147 = objc_getProperty(v131, v144, 144LL, 1);
                    v149 = v147;
                    if (v147)
                    {
                      id v150 = [v147 copy];
                      -[NSMutableDictionary setObject:forKey:]( v213,  "setObject:forKey:",  v150,  @"softwareVersionExternalIdentifier");
                    }

                    __int128 v151 = objc_getProperty(v131, v148, 72LL, 1);
                    uint64_t v131 = v151;
                    if (v151) {
                      __int128 v151 = objc_getProperty(v151, v152, 80LL, 1);
                    }
                  }

                  else
                  {
                    v208 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
                    -[NSMutableDictionary setObject:forKey:]( v213,  "setObject:forKey:",  v208,  ASDManagedLookupIs32BitOnly);

                    v149 = 0LL;
                    id v145 = 0LL;
                    __int128 v151 = 0LL;
                  }

                  __int128 v153 = v151;

                  if (v153)
                  {
                    id v154 = [v153 copy];
                    -[NSMutableDictionary setObject:forKey:]( v213,  "setObject:forKey:",  v154,  ASDManagedLookupUncompressedSize);
                  }

                  v125 = v227;
                  goto LABEL_123;
                }
              }
            }

            v130 = (char *)v130 + 1;
          }

          while (v128 != v130);
          id v139 = [v125 countByEnumeratingWithState:&v234 objects:buf count:16];
          id v128 = v139;
          if (v139) {
            continue;
          }
          break;
        }
      }

LABEL_123:
      uint64_t v155 = ASDLogHandleForCategory(41LL);
      __int128 v156 = (os_log_s *)objc_claimAutoreleasedReturnValue(v155);
      if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v157 = *(void *)(v226 + 120);
        id v158 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v213, "objectForKey:", @"bundleDisplayName"));
        *(_DWORD *)v239 = 138412802;
        uint64_t v240 = v157;
        __int16 v241 = 2114;
        v242 = v158;
        __int16 v243 = 2114;
        v244 = v213;
        _os_log_impl( (void *)&_mh_execute_header,  v156,  OS_LOG_TYPE_DEFAULT,  "[%@] bundleDisplayName: %{public}@ metatdata: %{public}@",  v239,  0x20u);

        v125 = v227;
      }

      objc_super v69 = v221;
      id v8 = v222;
      uint64_t v42 = v210;
      if (-[NSMutableDictionary count](v213, "count"))
      {
        v159 = -[NSMutableDictionary initWithDictionary:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithDictionary:",  v213);
        if ([v222 count]) {
          -[NSMutableDictionary addEntriesFromDictionary:](v159, "addEntriesFromDictionary:", v222);
        }
        if (v211) {
          void *v211 = -[NSMutableDictionary copy](v159, "copy");
        }
      }

      if (v215 | v219)
      {
        BOOL v62 = v212;
        id v44 = 0LL;
        LOBYTE(v67) = 0;
        BOOL v160 = v219 == 0;
        BOOL v161 = v215 != 0;
        BOOL v66 = v161 && v160;
        if (v161 && v160) {
          int v68 = 1;
        }
        else {
          int v68 = v219;
        }
      }

      else
      {
        BOOL v62 = v212;
        uint64_t v162 = ASDLogHandleForCategory(41LL);
        __int128 v163 = (os_log_s *)objc_claimAutoreleasedReturnValue(v162);
        if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v164 = *(void **)(v226 + 120);
          uint64_t v165 = *(void *)(v226 + 88);
          *(_DWORD *)__int128 buf = 138412546;
          id v246 = v164;
          __int16 v247 = 2114;
          *(void *)v248 = v165;
          _os_log_impl( (void *)&_mh_execute_header,  v163,  OS_LOG_TYPE_DEFAULT,  "[%@] Installing vpp application with evid: %{public}@",  buf,  0x16u);
        }

        v166 = sub_10024130C(v226, v222);
        v167 = (void *)objc_claimAutoreleasedReturnValue(v166);
        [v167 setAccount:*(void *)(v226 + 40)];
        [v167 setSuppressEvaluatorDialogs:1];
        v168 = sub_1001CCCA4((id *)objc_alloc(&OBJC_CLASS___PurchaseImportTask), v227, v167, 0LL);
        id v229 = 0LL;
        unsigned int v67 = [(id)v226 runSubTask:v168 returningError:&v229];
        id v44 = v229;
        if (v67) {
          int v68 = 1;
        }
        else {
          int v68 = v219;
        }

        BOOL v66 = 0;
      }

      id v59 = v209;
      id v64 = (os_log_s *)v227;
      goto LABEL_142;
    }

    if (!*(_BYTE *)(a1 + 96))
    {
      int v217 = 0;
      id v80 = 0LL;
LABEL_94:
      id v121 = sub_1002EB678((uint64_t)&OBJC_CLASS___StoreItemResponse, v218, 0);
      v122 = (id *)objc_claimAutoreleasedReturnValue(v121);
      id v93 = v122;
      if (v122) {
        v122 = (id *)objc_getProperty(v122, v123, 56LL, 1);
      }
      int v219 = 0;
      v95 = (os_log_s *)v80;
      id v80 = v122;
      goto LABEL_97;
    }

    id v74 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) thinningVariantID]);
    BOOL v75 = v74 == 0LL;

    id v76 = sub_1002EB678((uint64_t)&OBJC_CLASS___StoreItemResponse, v218, v75);
    id v77 = (id)objc_claimAutoreleasedReturnValue(v76);
    id v79 = v77;
    if (v77) {
      id v77 = objc_getProperty(v77, v78, 56LL, 1);
    }
    id v80 = (id *)v77;
    if ([v80 count] != (id)1)
    {
      uint64_t v98 = ASDLogHandleForCategory(41LL);
      id v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
      if (os_log_type_enabled(v81, OS_LOG_TYPE_ERROR))
      {
        v99 = *(void **)(a1 + 120);
        id v100 = [v80 count];
        *(_DWORD *)__int128 buf = 138412546;
        id v246 = v99;
        __int16 v247 = 2048;
        *(void *)v248 = v100;
        _os_log_error_impl( (void *)&_mh_execute_header,  v81,  OS_LOG_TYPE_ERROR,  "[%@]: Will not attempt sinf update for app because we did not receive the expected number of purchases in response: %lu@",  buf,  0x16u);
      }

      goto LABEL_93;
    }

    id v81 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue([v80 objectAtIndexedSubscript:0]);
    id v83 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) bundleID]);
    if (v83
      && (!v81 ? (id v84 = 0LL) : (id v84 = objc_getProperty(v81, v82, 96LL, 1)),
          id v85 = v84,
          v85,
          v85))
    {
      if (v81) {
        id v87 = objc_getProperty(v81, v86, 96LL, 1);
      }
      else {
        id v87 = 0LL;
      }
      id v88 = v87;
      unsigned __int8 v89 = [v83 isEqualToString:v88];

      if ((v89 & 1) == 0) {
        goto LABEL_91;
      }
    }

    else
    {
      id v101 = [*(id *)(v226 + 56) storeItemID];
      if (!v101)
      {

LABEL_91:
        uint64_t v119 = ASDLogHandleForCategory(41LL);
        v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v119);
        if (os_log_type_enabled(v120, OS_LOG_TYPE_ERROR))
        {
          v228 = v80;
          v180 = *(void **)(v226 + 120);
          v181 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v226 + 56) bundleID]);
          id v220 = [*(id *)(v226 + 56) storeItemID];
          v183 = v180;
          if (v81)
          {
            id v184 = objc_getProperty(v81, v182, 96LL, 1);
            id v186 = objc_getProperty(v81, v185, 208LL, 1);
            v187 = v184;
          }

          else
          {
            id v184 = 0LL;
            v187 = 0LL;
            id v186 = 0LL;
          }

          id v188 = v186;
          *(_DWORD *)__int128 buf = 138413314;
          id v246 = v183;
          __int16 v247 = 2114;
          *(void *)v248 = v181;
          *(_WORD *)&v248[8] = 2048;
          uint64_t v249 = (uint64_t)v220;
          __int16 v250 = 2114;
          id v251 = v184;
          __int16 v252 = 2114;
          id v253 = v188;
          _os_log_error_impl( (void *)&_mh_execute_header,  v120,  OS_LOG_TYPE_ERROR,  "[%@]: Will not attempt sinf update for app because the existing app does not match the purchase response: %{ public}@/%lld@ vs %{public}@/%{public}@",  buf,  0x34u);

          id v80 = v228;
        }

LABEL_93:
        int v217 = 0;
        goto LABEL_94;
      }

      id v103 = v101;
      double v104 = v80;
      if (v81) {
        id v105 = objc_getProperty(v81, v102, 208LL, 1);
      }
      else {
        id v105 = 0LL;
      }
      id v106 = v105;
      id v107 = [v106 unsignedLongLongValue];

      id v80 = v104;
      if (!v107 || v103 != v107) {
        goto LABEL_91;
      }
    }

    id v108 = sub_1001DEFF8(v218, @"replacementSinf");
    id v109 = (void *)objc_claimAutoreleasedReturnValue(v108);
    if (v109)
    {
      uint64_t v110 = ASDLogHandleForCategory(41LL);
      id v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
      if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
      {
        id v112 = *(void **)(v226 + 120);
        *(_DWORD *)__int128 buf = 138412290;
        id v246 = v112;
        _os_log_impl( (void *)&_mh_execute_header,  v111,  OS_LOG_TYPE_DEFAULT,  "[%@] Commerce response contained replacement key, attempting to update sinf",  buf,  0xCu);
      }

      int v217 = 1;
      unsigned int v113 = 1;
      if ((sub_10024412C(v226, v109) & 1) != 0)
      {
LABEL_165:

        if (v113)
        {
          v175 = (id *)v226;
          if ([*(id *)(v226 + 56) isFactoryInstall])
          {
            if ([*(id *)(v226 + 136) requestType] == (id)1
              || [*(id *)(v226 + 136) requestType] == (id)3)
            {
              v176 = (void *)objc_claimAutoreleasedReturnValue( +[ACAccountStore ams_sharedAccountStore]( &OBJC_CLASS___ACAccountStore,  "ams_sharedAccountStore"));
              v177 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v176, "ams_activeiTunesAccount"));
            }

            else
            {
              v177 = 0LL;
            }

            v189 = (void *)objc_claimAutoreleasedReturnValue([v80 objectAtIndexedSubscript:0]);
            v190 = sub_1002CB4AC(v189, v177, 0);

            if (v190)
            {
              v191 = *(void **)(v226 + 64);
              id v231 = 0LL;
              unsigned int v192 = sub_10030456C(v190, v191, 0LL, &v231);
              id v193 = v231;
              uint64_t v194 = ASDLogHandleForCategory(41LL);
              v195 = (os_log_s *)objc_claimAutoreleasedReturnValue(v194);
              v196 = v195;
              if (v192)
              {
                if (os_log_type_enabled(v195, OS_LOG_TYPE_DEFAULT))
                {
                  v197 = *(void **)(v226 + 120);
                  *(_DWORD *)__int128 buf = 138412290;
                  id v246 = v197;
                  _os_log_impl( (void *)&_mh_execute_header,  v196,  OS_LOG_TYPE_DEFAULT,  "[%@] Updated iTunesMetadata.plist",  buf,  0xCu);
                }
              }

              else if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
              {
                v207 = *(void **)(v226 + 120);
                *(_DWORD *)__int128 buf = 138412546;
                id v246 = v207;
                __int16 v247 = 2114;
                *(void *)v248 = v193;
                _os_log_error_impl( (void *)&_mh_execute_header,  v196,  OS_LOG_TYPE_ERROR,  "[%@] iTunesMetadata.plist update failed with error: %{public}@",  buf,  0x16u);
              }
            }

            v175 = (id *)v226;
          }

          uint64_t v198 = ASDLogHandleForCategory(41LL);
          v199 = (os_log_s *)objc_claimAutoreleasedReturnValue(v198);
          if (os_log_type_enabled(v199, OS_LOG_TYPE_DEFAULT))
          {
            id v200 = v175[15];
            *(_DWORD *)__int128 buf = 138412290;
            id v246 = v200;
            _os_log_impl( (void *)&_mh_execute_header,  v199,  OS_LOG_TYPE_DEFAULT,  "[%@] Fetching receipt after sinf update",  buf,  0xCu);
          }

          v201 = sub_1001A60D0((id *)objc_alloc(&OBJC_CLASS___AppReceiptTask), v175[7]);
          id v93 = v201;
          if (v201)
          {
            objc_setProperty_nonatomic_copy(v201, v202, v175[5], 56LL);
            v93[9] = (id)8;
            objc_setProperty_nonatomic_copy(v93, v203, v175[15], 64LL);
            *((_BYTE *)v93 + 4_Block_object_dispose((const void *)(v1 - 176), 8) = 1;
          }

          id v230 = 0LL;
          [v175 runSubTask:v93 returningError:&v230];
          v95 = (os_log_s *)v230;
          if (v95)
          {
            uint64_t v204 = ASDLogHandleForCategory(41LL);
            v205 = (os_log_s *)objc_claimAutoreleasedReturnValue(v204);
            if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR))
            {
              v206 = *(void **)(v226 + 120);
              *(_DWORD *)__int128 buf = 138412546;
              id v246 = v206;
              __int16 v247 = 2114;
              *(void *)v248 = v95;
              _os_log_error_impl( (void *)&_mh_execute_header,  v205,  OS_LOG_TYPE_ERROR,  "[%@] Receipt refresh failed with error: %{public}@",  buf,  0x16u);
            }
          }

          int v219 = 1;
          goto LABEL_97;
        }

        goto LABEL_94;
      }
    }

    else
    {
      int v217 = 0;
    }

    v174 = (void *)objc_claimAutoreleasedReturnValue([v80 objectAtIndexedSubscript:0]);
    unsigned int v113 = sub_1002442BC(v226, v174);

    goto LABEL_165;
  }

  BOOL v70 = 0;
  uint64_t v71 = 0LL;
  objc_super v69 = v221;
  id v8 = v222;
  if (a4) {
LABEL_42:
  }
    *a4 = v71;
LABEL_43:
  if (a5) {
    *a5 = v44;
  }
  BOOL v233 = v70;

  BOOL v72 = v233;
LABEL_46:

  return v72;
}

id sub_10024412C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = -[IXApplicationIdentity initWithBundleIdentifier:]( objc_alloc(&OBJC_CLASS___IXApplicationIdentity),  "initWithBundleIdentifier:",  *(void *)(a1 + 64));
  id v13 = 0LL;
  id v5 = sub_1001E52B4((uint64_t)&OBJC_CLASS___IXAppInstallCoordinator, v4, 0LL, v3, (uint64_t)&v13);

  id v6 = v13;
  uint64_t v7 = ASDLogHandleForCategory(41LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if ((_DWORD)v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 120);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v15 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%@] Successfully replaced SINF for existing app",  buf,  0xCu);
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v12 = *(void *)(a1 + 120);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v15 = v12;
    __int16 v16 = 2114;
    id v17 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%@] Attempt to replace SINF resulted in error: %{public}@",  buf,  0x16u);
  }

  return v5;
}

id sub_1002442BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (!v3 || (id v6 = objc_getProperty(v3, v4, 72LL, 1)) == 0LL)
  {
    id v8 = 0LL;
    goto LABEL_10;
  }

  id v8 = v6;
  id v9 = objc_getProperty(v6, v7, 144LL, 1);
  if (!v9)
  {
LABEL_10:
    uint64_t v20 = ASDLogHandleForCategory(41LL);
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = *(void *)(a1 + 120);
      int v24 = 138412290;
      uint64_t v25 = v23;
      _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "[%@]: Will not attempt sinf update for app because the purchase response did not provide sinf data",  (uint8_t *)&v24,  0xCu);
    }

    uint64_t v10 = 0LL;
    goto LABEL_13;
  }

  uint64_t v10 = v9;
  id v11 = [*(id *)(a1 + 56) storeExternalVersionID];
  if (!v11
    || (id v13 = v11,
        id v14 = objc_getProperty(v5, v12, 144LL, 1),
        id v15 = [v14 unsignedLongLongValue],
        v14,
        v13 != v15))
  {
LABEL_13:
    id v19 = 0LL;
    goto LABEL_14;
  }

  uint64_t v16 = ASDLogHandleForCategory(41LL);
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = *(void *)(a1 + 120);
    int v24 = 138412290;
    uint64_t v25 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[%@] Existing app has matching evid, attempting to update sinf",  (uint8_t *)&v24,  0xCu);
  }

  id v19 = sub_10024412C(a1, v10);
LABEL_14:

  return v19;
}

uint64_t sub_1002444A8(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v103 = a3;
  uint64_t v5 = ASDLogHandleForCategory(41LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void **)(a1 + 120);
    *(_DWORD *)__int128 buf = 138412290;
    id v116 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@] Attempting to update sinf", buf, 0xCu);
  }

  __int128 v112 = 0u;
  __int128 v113 = 0u;
  __int128 v110 = 0u;
  __int128 v111 = 0u;
  id obj = v4;
  id v8 = [obj countByEnumeratingWithState:&v110 objects:v119 count:16];
  if (!v8)
  {
    char v11 = 0;
    goto LABEL_103;
  }

  id v10 = v8;
  char v11 = 0;
  uint64_t v106 = *(void *)v111;
  *(void *)&__int128 v9 = 138412546LL;
  __int128 v98 = v9;
  uint64_t v12 = (id *)a1;
  do
  {
    id v13 = 0LL;
    id v104 = v10;
    do
    {
      if (*(void *)v111 != v106) {
        objc_enumerationMutation(obj);
      }
      id v14 = *(void **)(*((void *)&v110 + 1) + 8LL * (void)v13);
      uint64_t v16 = objc_autoreleasePoolPush();
      if (v14)
      {
        id v17 = objc_getProperty(v14, v15, 96LL, 1);
        id Property = objc_getProperty(v14, v18, 208LL, 1);
      }

      else
      {
        id v17 = 0LL;
        id Property = 0LL;
      }

      id v20 = Property;
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 stringValue]);
      if (![v17 length] || !objc_msgSend(v21, "length"))
      {
        int v40 = 1;
        goto LABEL_68;
      }

      id v22 = (void *)objc_claimAutoreleasedReturnValue([v12[13] stringValue]);
      unsigned int v23 = [v21 isEqualToString:v22];

      if (v23)
      {
        id v25 = v12[7];
        if (v25)
        {
          id v27 = (id)objc_claimAutoreleasedReturnValue([v25 md5]);
          if (v14)
          {
            id v28 = objc_getProperty(v14, v26, 72LL, 1);
            id v30 = v28;
            if (v28) {
              id v28 = objc_getProperty(v28, v29, 112LL, 1);
            }
          }

          else
          {
            id v30 = 0LL;
            id v28 = 0LL;
          }

          id v31 = v28;

          if (v27 && [v31 length])
          {
            unsigned __int8 v33 = [v31 isEqualToString:v27];
            uint64_t v34 = ASDLogHandleForCategory(41LL);
            log = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
            BOOL v35 = os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT);
            if ((v33 & 1) != 0)
            {
              id v100 = v31;
              if (v35)
              {
                id v36 = v12[15];
                *(_DWORD *)__int128 buf = 138412290;
                id v116 = v36;
                _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "[%@] Updated sinf with MD5 match",  buf,  0xCu);
              }

              char v37 = 0;
              int v38 = 0;
              int v39 = 1;
              goto LABEL_38;
            }

            if (v35)
            {
              id v73 = v12[15];
              *(_DWORD *)__int128 buf = 138412290;
              id v116 = v73;
              _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "[%@] sinf update failed due to MD5 miss-match",  buf,  0xCu);
            }

LABEL_65:
            char v11 = 0;
LABEL_66:

            int v40 = 0;
            goto LABEL_67;
          }

          id v100 = v31;
          if (v14) {
            id v41 = objc_getProperty(v14, v32, 144LL, 1);
          }
          else {
            id v41 = 0LL;
          }
          id v99 = v27;
          log = (os_log_s *)v41;
          uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v12[7] storeExternalVersionID]));
          if ([v12[7] isInstalled]
            && (![v12[7] isInstalled]
             || ([v42 isEqualToNumber:log] & 1) != 0))
          {
            uint64_t v43 = ASDLogHandleForCategory(41LL);
            id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              id v45 = *(void **)(a1 + 120);
              unsigned int v46 = [*(id *)(a1 + 56) isInstalled];
              unsigned int v47 = [v42 isEqualToNumber:log];
              *(_DWORD *)__int128 buf = 138412802;
              id v116 = v45;
              __int16 v117 = 1024;
              LODWORD(v118[0]) = v46;
              WORD2(v118[0]) = 1024;
              *(_DWORD *)((char *)v118 + 6) = v47;
              _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "[%@] Attempting sinf swap for matching. Installed: %{BOOL}d evid matches: %{BOOL}d",  buf,  0x18u);
            }

            char v37 = 0;
            int v38 = 1;
          }

          else
          {
            uint64_t v48 = ASDLogHandleForCategory(41LL);
            id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v49 = *(void **)(a1 + 120);
              unsigned int v50 = [*(id *)(a1 + 56) isInstalled];
              unsigned int v51 = [v42 isEqualToNumber:log];
              *(_DWORD *)__int128 buf = 138412802;
              id v116 = v49;
              __int16 v117 = 1024;
              LODWORD(v118[0]) = v50;
              WORD2(v118[0]) = 1024;
              *(_DWORD *)((char *)v118 + 6) = v51;
              _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "[%@] Skipping sinf swap. Installed: %{BOOL}d evid matches: %{BOOL}d",  buf,  0x18u);
            }

            int v38 = 0;
            char v37 = 1;
          }

          int v39 = 0;
          id v27 = v99;
LABEL_38:
        }

        else
        {
          char v37 = 0;
          int v38 = 0;
          int v39 = 0;
        }

        uint64_t v52 = v103;
        if (v103)
        {
LABEL_47:
          if (v52) {
            char v61 = v37;
          }
          else {
            char v61 = 1;
          }
          id v103 = v52;
          if ((v61 & 1) == 0)
          {
            uint64_t v62 = objc_opt_class(&OBJC_CLASS___NSData, v24);
            if ((objc_opt_isKindOfClass(v52, v62) & 1) != 0)
            {
              uint64_t v63 = -[IXApplicationIdentity initWithBundleIdentifier:]( objc_alloc(&OBJC_CLASS___IXApplicationIdentity),  "initWithBundleIdentifier:",  v17);
              id v109 = 0LL;
              unsigned int v64 = sub_1001E52B4( (uint64_t)&OBJC_CLASS___IXAppInstallCoordinator,  v63,  0LL,  v52,  (uint64_t)&v109);
              id v27 = v109;
              uint64_t v65 = ASDLogHandleForCategory(41LL);
              BOOL v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
              unsigned int v67 = v66;
              if (v64)
              {
                if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
                {
                  int v68 = *(void **)(a1 + 120);
                  *(_DWORD *)__int128 buf = 138412290;
                  id v116 = v68;
                  _os_log_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_DEFAULT,  "[%@] Successfully updated sinf",  buf,  0xCu);
                }

                uint64_t v12 = (id *)a1;
                if ([*(id *)(a1 + 56) isFactoryInstall])
                {
                  if ([*(id *)(a1 + 136) requestType] == (id)1
                    || [*(id *)(a1 + 136) requestType] == (id)3)
                  {
                    objc_super v69 = (void *)objc_claimAutoreleasedReturnValue( +[ACAccountStore ams_sharedAccountStore]( &OBJC_CLASS___ACAccountStore,  "ams_sharedAccountStore",  v98));
                    BOOL v70 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "ams_activeiTunesAccount"));
                  }

                  else
                  {
                    BOOL v70 = 0LL;
                  }

                  id v74 = sub_1002CB4AC(v14, v70, 0);
                  BOOL v75 = v74;
                  if (v74)
                  {
                    id v108 = 0LL;
                    unsigned int v76 = sub_10030456C(v74, v17, 0LL, &v108);
                    id v77 = v108;
                    uint64_t v78 = ASDLogHandleForCategory(41LL);
                    id v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
                    id v80 = v79;
                    if (v76)
                    {
                      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                      {
                        id v81 = *(void **)(a1 + 120);
                        *(_DWORD *)__int128 buf = 138412290;
                        id v116 = v81;
                        _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "[%@] Updated iTunesMetadata.plist",  buf,  0xCu);
                      }
                    }

                    else if (os_log_type_enabled(v79, OS_LOG_TYPE_ERROR))
                    {
                      v95 = *(void **)(a1 + 120);
                      *(_DWORD *)__int128 buf = v98;
                      id v116 = v95;
                      __int16 v117 = 2114;
                      v118[0] = v77;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_ERROR,  "[%@] iTunesMetadata.plist update failed with error: %{public}@",  buf,  0x16u);
                    }

                    uint64_t v12 = (id *)a1;
                  }
                }

                id v82 = v12[7];
                uint64_t v83 = ASDLogHandleForCategory(41LL);
                id v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
                id v27 = v84;
                if (v82)
                {
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
                  {
                    id v85 = v12[15];
                    *(_DWORD *)__int128 buf = 138412290;
                    id v116 = v85;
                    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v27,  OS_LOG_TYPE_DEFAULT,  "[%@] Fetching receipt",  buf,  0xCu);
                  }

                  id v86 = sub_1001A60D0((id *)objc_alloc(&OBJC_CLASS___AppReceiptTask), v12[7]);
                  id v27 = v86;
                  if (v86)
                  {
                    objc_setProperty_nonatomic_copy(v86, v87, v12[5], 56LL);
                    *((void *)v27 + 9) = 8LL;
                    objc_setProperty_nonatomic_copy(v27, v88, v12[15], 64LL);
                    *((_BYTE *)v27 + 4_Block_object_dispose((const void *)(v1 - 176), 8) = 1;
                  }

                  id v107 = 0LL;
                  objc_msgSend(v12, "runSubTask:returningError:", v27, &v107, v98);
                  id v89 = v107;
                  if (v89)
                  {
                    uint64_t v90 = ASDLogHandleForCategory(41LL);
                    id v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
                    if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
                    {
                      id v93 = v12[15];
                      *(_DWORD *)__int128 buf = v98;
                      id v116 = v93;
                      __int16 v117 = 2114;
                      v118[0] = v89;
                      _os_log_error_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_ERROR,  "[%@] Receipt refresh failed with error: %{public}@",  buf,  0x16u);
                    }
                  }
                }

                else if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
                {
                  id v94 = v12[15];
                  *(_DWORD *)__int128 buf = 138412290;
                  id v116 = v94;
                  _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v27,  OS_LOG_TYPE_ERROR,  "[%@] Receipt refresh failed - application not found",  buf,  0xCu);
                }

                char v11 = 1;
              }

              else
              {
                if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
                {
                  id v92 = *(void **)(a1 + 120);
                  *(_DWORD *)__int128 buf = v98;
                  id v116 = v92;
                  __int16 v117 = 2114;
                  v118[0] = v27;
                  _os_log_error_impl( (void *)&_mh_execute_header,  v67,  OS_LOG_TYPE_ERROR,  "[%@] Sinf update resulted in error: %{public}@",  buf,  0x16u);
                }

                char v11 = 0;
                uint64_t v12 = (id *)a1;
              }

              goto LABEL_66;
            }
          }
        }

        else
        {
          if ((v38 | v39) == 1)
          {
            if (v14)
            {
              id v53 = objc_getProperty(v14, v24, 72LL, 1);
              id v55 = v53;
              uint64_t v56 = a1;
              if (v53) {
                id v53 = objc_getProperty(v53, v54, 144LL, 1);
              }
            }

            else
            {
              id v55 = 0LL;
              id v53 = 0LL;
              uint64_t v56 = a1;
            }

            id v57 = v53;

            uint64_t v58 = ASDLogHandleForCategory(41LL);
            id v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v60 = *(void **)(v56 + 120);
              *(_DWORD *)__int128 buf = 138412290;
              id v116 = v60;
              _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "[%@] Using sinf data for from download",  buf,  0xCu);
            }

            uint64_t v52 = v57;
            goto LABEL_47;
          }

          id v103 = 0LL;
        }

        uint64_t v12 = (id *)a1;
        uint64_t v71 = ASDLogHandleForCategory(41LL);
        id v27 = (id)objc_claimAutoreleasedReturnValue(v71);
        if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v72 = *(void **)(a1 + 120);
          *(_DWORD *)__int128 buf = 138412290;
          id v116 = v72;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v27,  OS_LOG_TYPE_DEFAULT,  "[%@] Did not perform an inline update of the sinf",  buf,  0xCu);
        }

        goto LABEL_65;
      }

      int v40 = 1;
LABEL_67:
      id v10 = v104;
LABEL_68:

      objc_autoreleasePoolPop(v16);
      if (!v40) {
        goto LABEL_103;
      }
      id v13 = (char *)v13 + 1;
    }

    while (v10 != v13);
    id v96 = [obj countByEnumeratingWithState:&v110 objects:v119 count:16];
    id v10 = v96;
  }

  while (v96);
LABEL_103:

  unsigned __int8 v114 = v11 & 1;
  return v114;
}

uint64_t sub_100245058(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100245068(uint64_t a1)
{
}

void sub_100245070(uint64_t a1, void *a2)
{
  id v4 = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1002450BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v42 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 items]);
  id v7 = [v6 count];

  if (v7)
  {
    int v40 = a3;
    id v41 = v5;
    __int128 v55 = 0u;
    __int128 v56 = 0u;
    __int128 v53 = 0u;
    __int128 v54 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([v5 items]);
    id v45 = [obj countByEnumeratingWithState:&v53 objects:v58 count:16];
    if (!v45) {
      goto LABEL_37;
    }
    uint64_t v44 = *(void *)v54;
    p_vtable = &OBJC_METACLASS___MetricsCoordinator.vtable;
    uint64_t v48 = a1;
    while (1)
    {
      for (i = 0LL; i != v45; i = (char *)i + 1)
      {
        if (*(void *)v54 != v44) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v53 + 1) + 8LL * (void)i);
        char v11 = (void *)objc_claimAutoreleasedReturnValue([v10 results]);
        if ([v11 count])
        {
          unsigned int v46 = v11;
          unsigned int v47 = i;
          __int128 v51 = 0u;
          __int128 v52 = 0u;
          __int128 v49 = 0u;
          __int128 v50 = 0u;
          id v12 = v11;
          id v13 = [v12 countByEnumeratingWithState:&v49 objects:v57 count:16];
          if (v13)
          {
            id v14 = v13;
            uint64_t v15 = *(void *)v50;
            do
            {
              for (j = 0LL; j != v14; j = (char *)j + 1)
              {
                if (*(void *)v50 != v15) {
                  objc_enumerationMutation(v12);
                }
                id v17 = *(void **)(*((void *)&v49 + 1) + 8LL * (void)j);
                SEL v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
                id v19 = v17;
                id v20 = @"VPP Free Purchase";
                objc_opt_self(p_vtable + 142);
                id v21 = [v19 status];
                if (v21)
                {
                  if (v21 == (id)1)
                  {
                    uint64_t v28 = ASDLogHandleForCategory(14LL);
                    unsigned int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
                    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
                    {
                      int v24 = (void *)objc_claimAutoreleasedReturnValue([v19 bundleID]);
                      id v25 = (void *)objc_claimAutoreleasedReturnValue([v19 error]);
                      *(_DWORD *)__int128 buf = 138543874;
                      uint64_t v60 = v24;
                      __int16 v61 = 2114;
                      uint64_t v62 = v25;
                      __int16 v63 = 2114;
                      unsigned int v64 = @"VPP Free Purchase";
                      _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Import failed for bundleID: %{public}@ error: %{public}@ reason: %{public}@",  buf,  0x20u);
                      goto LABEL_23;
                    }
                  }

                  else
                  {
                    if (v21 != (id)2) {
                      goto LABEL_25;
                    }
                    uint64_t v22 = ASDLogHandleForCategory(14LL);
                    unsigned int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
                    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                    {
                      int v24 = (void *)objc_claimAutoreleasedReturnValue([v19 persistentID]);
                      id v25 = (void *)objc_claimAutoreleasedReturnValue([v19 bundleID]);
                      *(_DWORD *)__int128 buf = 138543874;
                      uint64_t v60 = v24;
                      __int16 v61 = 2114;
                      uint64_t v62 = v25;
                      __int16 v63 = 2114;
                      unsigned int v64 = @"VPP Free Purchase";
                      id v26 = v23;
                      id v27 = "Import success for job: %{public}@ / %{public}@ reason: %{public}@";
                      goto LABEL_22;
                    }
                  }
                }

                else
                {
                  uint64_t v29 = ASDLogHandleForCategory(14LL);
                  unsigned int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
                  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
                  {
                    int v24 = (void *)objc_claimAutoreleasedReturnValue([v19 persistentID]);
                    id v25 = (void *)objc_claimAutoreleasedReturnValue([v19 bundleID]);
                    *(_DWORD *)__int128 buf = 138543874;
                    uint64_t v60 = v24;
                    __int16 v61 = 2114;
                    uint64_t v62 = v25;
                    __int16 v63 = 2114;
                    unsigned int v64 = @"VPP Free Purchase";
                    id v26 = v23;
                    id v27 = "Skipped duplicate job: %{public}@ / %{public}@ reason: %{public}@";
LABEL_22:
                    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v27, buf, 0x20u);
LABEL_23:

                    p_vtable = (void **)(&OBJC_METACLASS___MetricsCoordinator + 24);
                    a1 = v48;
                  }
                }

LABEL_25:
              }

              id v14 = [v12 countByEnumeratingWithState:&v49 objects:v57 count:16];
            }

            while (v14);
          }

          id v30 = *(void **)(a1 + 40);
          char v11 = v46;
          i = v47;
          if (v30) {
            [v30 addObjectsFromArray:v12];
          }
        }

        else
        {
          id v31 = (void *)objc_claimAutoreleasedReturnValue([v10 purchase]);
          id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 bundleID]);

          uint64_t v33 = ASDLogHandleForCategory(41LL);
          uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
          BOOL v35 = os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
          if (v32)
          {
            if (v35)
            {
              id v36 = *(void **)(*(void *)(a1 + 48) + 120LL);
              *(_DWORD *)__int128 buf = 138412802;
              uint64_t v60 = v36;
              __int16 v61 = 2114;
              uint64_t v62 = v32;
              __int16 v63 = 2114;
              unsigned int v64 = v42;
              _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "[%@] Free purchase failed for bundleID: %{public}@ error: %{public}@",  buf,  0x20u);
            }
          }

          else if (v35)
          {
            char v37 = *(void **)(*(void *)(a1 + 48) + 120LL);
            int v38 = (void *)objc_claimAutoreleasedReturnValue([v10 purchase]);
            int v39 = (void *)objc_claimAutoreleasedReturnValue([v38 buyParameters]);
            *(_DWORD *)__int128 buf = 138412802;
            uint64_t v60 = v37;
            __int16 v61 = 2114;
            uint64_t v62 = v39;
            __int16 v63 = 2114;
            unsigned int v64 = v42;
            _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "[%@] Free purchase failed with buyParams: %{public}@ error: %{public}@",  buf,  0x20u);
          }
        }
      }

      id v45 = [obj countByEnumeratingWithState:&v53 objects:v58 count:16];
      if (!v45)
      {
LABEL_37:

        a3 = v40;
        id v5 = v41;
        break;
      }
    }
  }

  if (v42) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), a3);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

id *sub_100245744(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    if ((os_variant_has_internal_content("com.apple.appstored") & 1) != 0)
    {
      v10.receiver = a1;
      v10.super_class = (Class)&OBJC_CLASS___PresentTapToRadarRequestFlow;
      id v8 = (id *)objc_msgSendSuper2(&v10, "init");
      a1 = v8;
      if (v8)
      {
        objc_storeStrong(v8 + 2, a2);
        objc_storeStrong(a1 + 1, a3);
      }
    }

    else
    {

      a1 = 0LL;
    }
  }

  return a1;
}

void sub_1002457F8(uint64_t a1)
{
  if (a1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"INTERNAL ONLY\n%@",  *(void *)(a1 + 16)));
    id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@\n\nPlease file a radar! It's quick and easy.",  *(void *)(a1 + 8)));
    id v4 = v2;
    objc_opt_self(&OBJC_CLASS___PresentTapToRadarRequestFlow);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDialogRequest requestWithTitle:message:]( &OBJC_CLASS___AMSDialogRequest,  "requestWithTitle:message:",  v4,  v3));

    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDialogAction actionWithTitle:style:]( &OBJC_CLASS___AMSDialogAction,  "actionWithTitle:style:",  @"File A Radar",  0LL));
    [v6 setIdentifier:@"FILE_RADAR_IDENTIFIER"];
    [v5 addButtonAction:v6];
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDialogAction actionWithTitle:style:]( &OBJC_CLASS___AMSDialogAction,  "actionWithTitle:style:",  @"No Thanks",  2LL));
    [v5 addButtonAction:v7];
    [v5 setDefaultAction:v6];

    id v8 = -[AMSSystemAlertDialogTask initWithRequest:]( objc_alloc(&OBJC_CLASS___AMSSystemAlertDialogTask),  "initWithRequest:",  v5);
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue(-[AMSSystemAlertDialogTask present](v8, "present"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100245998;
    v10[3] = &unk_1003EB450;
    void v10[4] = a1;
    [v9 addFinishBlock:v10];
  }

void sub_100245998(uint64_t a1, void *a2)
{
  id v2 = *(id **)(a1 + 32);
  id v3 = a2;
  id v4 = v3;
  if (v2)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 selectedActionIdentifier]);
    unsigned int v6 = [v5 isEqual:@"FILE_RADAR_IDENTIFIER"];

    if (v6)
    {
      if (objc_getProperty(v2, v7, 24LL, 1))
      {
        id Property = (uint64_t (**)(void))objc_getProperty(v2, v8, 24LL, 1);
        uint64_t v10 = Property[2]();
        char v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      }

      else
      {
        char v11 = 0LL;
      }

      id v12 = v2[2];
      id v13 = v11;
      objc_opt_self(&OBJC_CLASS___PresentTapToRadarRequestFlow);
      id v14 = objc_alloc_init(&OBJC_CLASS___NSURLComponents);
      -[NSURLComponents setScheme:](v14, "setScheme:", @"tap-to-radar");
      -[NSURLComponents setHost:](v14, "setHost:", @"new");
      uint64_t v15 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v16 = -[NSURLQueryItem initWithName:value:]( objc_alloc(&OBJC_CLASS___NSURLQueryItem),  "initWithName:value:",  @"ComponentName",  @"App Store");
      -[NSMutableArray addObject:](v15, "addObject:", v16);

      id v17 = -[NSURLQueryItem initWithName:value:]( objc_alloc(&OBJC_CLASS___NSURLQueryItem),  "initWithName:value:",  @"ComponentVersion",  @"New Bugs");
      -[NSMutableArray addObject:](v15, "addObject:", v17);

      SEL v18 = -[NSURLQueryItem initWithName:value:]( objc_alloc(&OBJC_CLASS___NSURLQueryItem),  "initWithName:value:",  @"ComponentID",  @"685220");
      -[NSMutableArray addObject:](v15, "addObject:", v18);

      id v19 = -[NSURLQueryItem initWithName:value:]( objc_alloc(&OBJC_CLASS___NSURLQueryItem),  "initWithName:value:",  @"Classification",  @"Serious Bug");
      -[NSMutableArray addObject:](v15, "addObject:", v19);

      id v20 = -[NSURLQueryItem initWithName:value:]( objc_alloc(&OBJC_CLASS___NSURLQueryItem),  "initWithName:value:",  @"Reproducibility",  @"I Didn't Try");
      -[NSMutableArray addObject:](v15, "addObject:", v20);

      id v21 = -[NSURLQueryItem initWithName:value:]( objc_alloc(&OBJC_CLASS___NSURLQueryItem),  "initWithName:value:",  @"AutoDiagnostics",  @"phone");
      -[NSMutableArray addObject:](v15, "addObject:", v21);

      if (v12 && [v12 length])
      {
        uint64_t v22 = -[NSURLQueryItem initWithName:value:]( objc_alloc(&OBJC_CLASS___NSURLQueryItem),  "initWithName:value:",  @"Title",  v12);
        -[NSMutableArray addObject:](v15, "addObject:", v22);
      }

      if (v13 && [v13 length])
      {
        unsigned int v23 = -[NSURLQueryItem initWithName:value:]( objc_alloc(&OBJC_CLASS___NSURLQueryItem),  "initWithName:value:",  @"Description",  v13);
        -[NSMutableArray addObject:](v15, "addObject:", v23);
      }

      -[NSURLComponents setQueryItems:](v14, "setQueryItems:", v15);
      int v24 = (void *)objc_claimAutoreleasedReturnValue(-[NSURLComponents URL](v14, "URL"));

      id v25 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationWorkspace defaultWorkspace]( &OBJC_CLASS___LSApplicationWorkspace,  "defaultWorkspace"));
      v27[0] = _NSConcreteStackBlock;
      v27[1] = 3221225472LL;
      v27[2] = sub_100245CE4;
      v27[3] = &unk_1003EE248;
      id v28 = v24;
      id v26 = v24;
      [v25 openURL:v26 configuration:0 completionHandler:v27];
    }
  }
}

void sub_100245CE4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t v5 = ASDLogHandleForCategory(14LL);
    unsigned int v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138543618;
      uint64_t v9 = v7;
      __int16 v10 = 2114;
      id v11 = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Tap-to-radar failed: %{public}@ error: %{public}@",  (uint8_t *)&v8,  0x16u);
    }
  }
}

void *sub_100245DF0(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v17.receiver = a1;
    v17.super_class = (Class)&OBJC_CLASS___MediaApp;
    a1 = objc_msgSendSuper2(&v17, "init");
    if (a1)
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"id"]);
      id v5 = [v4 copy];

      uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v6);
      if ((objc_opt_isKindOfClass(v5, v7) & 1) == 0) {
        goto LABEL_6;
      }
      a1[3] = [v5 longLongValue];
      int v8 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"href"]);
      id v9 = [v8 copy];
      __int16 v10 = (void *)a1[4];
      a1[4] = v9;

      uint64_t v11 = a1[4];
      uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSString, v12);
      if ((objc_opt_isKindOfClass(v11, v13) & 1) != 0)
      {
        id v14 = [v3 copy];
        uint64_t v15 = (void *)a1[1];
        a1[1] = v14;
      }

      else
      {
LABEL_6:
        uint64_t v15 = v5;
        id v5 = a1;
        a1 = 0LL;
      }
    }
  }

  return a1;
}

id *sub_100245F18(id *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    id v2 = a1[2];
    if (!v2)
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue([a1[1] objectForKeyedSubscript:@"attributes"]);
      if (v3)
      {
        id v4 = sub_1002C4E9C((id *)objc_alloc(&OBJC_CLASS___MediaAppAttributes), v3);
        id v5 = v1[2];
        v1[2] = v4;
      }

      id v2 = v1[2];
    }

    a1 = (id *)v2;
  }

  return a1;
}

uint64_t sub_100245F88(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

void sub_100246730( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, id location, id a41)
{
}

void sub_100246794(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = ASDLogHandleForCategory(9LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v8 = 138543618;
    id v9 = (id)objc_opt_class(WeakRetained, v6);
    __int16 v10 = 2114;
    id v11 = v3;
    id v7 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[%{public}@]: Client was disconnected: %{public}@",  (uint8_t *)&v8,  0x16u);
  }

  sub_10024688C(WeakRetained, v3);
}

void sub_10024688C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v5 = v3;
    sub_10030B200((uint64_t)v3);
    uint64_t v4 = a1;
    objc_sync_enter(v4);
    [v4[1] removeObject:v5];
    objc_sync_exit(v4);

    id v3 = v5;
  }
}

void sub_1002468E8(_Unwind_Exception *a1)
{
}

void sub_1002468FC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = ASDLogHandleForCategory(9LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v8 = 138543618;
    id v9 = (id)objc_opt_class(WeakRetained, v6);
    __int16 v10 = 2114;
    id v11 = v3;
    id v7 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[%{public}@]: Client lost connection: %{public}@",  (uint8_t *)&v8,  0x16u);
  }

  sub_10024688C(WeakRetained, v3);
}

void sub_100246AA0(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100246AFC;
    block[3] = &unk_1003E9880;
    block[4] = a1;
    dispatch_async(v1, block);
  }

void sub_100246AFC(uint64_t a1)
{
  uint64_t v1 = ASDLogHandleForCategory(6LL);
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Performing cleanup on startup", buf, 2u);
  }

  if (!*(void *)(a1 + 32)) {
    goto LABEL_48;
  }
  id v3 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "doesNotContainPredicateWithProperty:values:",  @"IFNULL(app_install.phase, 10)",  &off_10040DE28));
  *(void *)&__int128 v72 = _NSConcreteStackBlock;
  *((void *)&v72 + 1) = 3221225472LL;
  uint64_t v73 = (uint64_t)sub_1002483A4;
  id v74 = &unk_1003EE390;
  id v5 = v3;
  BOOL v75 = v5;
  sub_1002483BC(v4, &v72);

  uint64_t v6 = ASDLogHandleForCategory(6LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = -[NSMutableSet count](v5, "count");
    LODWORD(v72) = 134217984;
    *(void *)((char *)&v72 + 4) = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "╒ Cleaning up stale coordinators. %lu active coordinator IDs:",  (uint8_t *)&v72,  0xCu);
  }

  if (-[NSMutableSet count](v5, "count"))
  {
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    __int128 v68 = 0u;
    __int128 v69 = 0u;
    id v9 = v5;
    id v10 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v9,  "countByEnumeratingWithState:objects:count:",  &v68,  buf,  16LL);
    if (v10)
    {
      uint64_t v11 = *(void *)v69;
      do
      {
        for (i = 0LL; i != v10; i = (char *)i + 1)
        {
          if (*(void *)v69 != v11) {
            objc_enumerationMutation(v9);
          }
          uint64_t v13 = *(void *)(*((void *)&v68 + 1) + 8LL * (void)i);
          uint64_t v14 = ASDLogHandleForCategory(6LL);
          uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v72) = 138543362;
            *(void *)((char *)&v72 + 4) = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "┊   %{public}@",  (uint8_t *)&v72,  0xCu);
          }
        }

        id v10 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v9,  "countByEnumeratingWithState:objects:count:",  &v68,  buf,  16LL);
      }

      while (v10);
    }
  }

  else
  {
    uint64_t v16 = ASDLogHandleForCategory(6LL);
    id v9 = (NSMutableSet *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v72) = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v9, OS_LOG_TYPE_DEFAULT, "┊   <none>", (uint8_t *)&v72, 2u);
    }
  }

  *(void *)&__int128 v72 = 0LL;
  *((void *)&v72 + 1) = &v72;
  uint64_t v73 = 0x2020000000LL;
  id v74 = 0LL;
  id v55 = 0LL;
  *(void *)uint64_t v58 = _NSConcreteStackBlock;
  *(void *)&v58[8] = 3221225472LL;
  *(void *)&v58[16] = sub_100248D20;
  id v59 = &unk_1003EBF88;
  objc_super v17 = v5;
  uint64_t v60 = v17;
  __int16 v61 = &v72;
  unsigned int v18 = +[IXAppInstallCoordinator enumerateCoordinatorsWithError:usingBlock:]( &OBJC_CLASS___IXAppInstallCoordinator,  "enumerateCoordinatorsWithError:usingBlock:",  &v55,  v58);
  id v19 = v55;
  if (v18)
  {
    uint64_t v20 = ASDLogHandleForCategory(6LL);
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(*((void *)&v72 + 1) + 24LL);
      *(_DWORD *)__int128 v56 = 67109376;
      LODWORD(v57[0]) = 1;
      WORD2(v57[0]) = 2048;
      *(void *)((char *)v57 + 6) = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "╘ Coordinator cleanup complete with result: %d cancel count: %ld",  v56,  0x12u);
    }
  }

  else
  {
    uint64_t v23 = ASDLogHandleForCategory(6LL);
    id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 v56 = 138543362;
      v57[0] = v19;
      _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "╘ Coordinator cleanup complete with error: %{public}@",  v56,  0xCu);
    }
  }

  _Block_object_dispose(&v72, 8);
  if (!*(void *)(a1 + 32)) {
    goto LABEL_48;
  }
  int v24 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  *(void *)__int128 buf = _NSConcreteStackBlock;
  uint64_t v63 = 3221225472LL;
  unsigned int v64 = sub_100248F1C;
  uint64_t v65 = &unk_1003EE390;
  id v25 = v24;
  BOOL v66 = v25;
  sub_1002483BC(0LL, buf);
  if (!-[NSMutableDictionary count](v25, "count")) {
    goto LABEL_30;
  }
  *(void *)&__int128 v72 = 0LL;
  *(void *)&__int128 v68 = _NSConcreteStackBlock;
  *((void *)&v68 + 1) = 3221225472LL;
  *(void *)&__int128 v69 = sub_10024908C;
  *((void *)&v69 + 1) = &unk_1003EBFB0;
  *(void *)&__int128 v70 = v25;
  +[IXAppInstallCoordinator enumerateCoordinatorsWithError:usingBlock:]( &OBJC_CLASS___IXAppInstallCoordinator,  "enumerateCoordinatorsWithError:usingBlock:",  &v72,  &v68);
  id v26 = (id)v72;

  if (v26)
  {
    uint64_t v27 = ASDLogHandleForCategory(6LL);
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint64_t v58 = 138543362;
      *(void *)&v58[4] = v26;
      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "%{public}@", v58, 0xCu);
    }
  }

  else
  {
LABEL_30:
    if (-[NSMutableDictionary count](v25, "count"))
    {
      id v26 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v25, "allValues"));
      uint64_t v29 = ASDLogHandleForCategory(6LL);
      id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        id v31 = -[NSMutableDictionary count](v25, "count");
        id v32 = (void *)objc_claimAutoreleasedReturnValue([v26 componentsJoinedByString:@","]);
        *(_DWORD *)uint64_t v58 = 134218242;
        *(void *)&v58[4] = v31;
        *(_WORD *)&v58[12] = 2114;
        *(void *)&v58[14] = v32;
        _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Cleaning up %lu stale install(s): %{public}@",  v58,  0x16u);
      }

      sub_100248B84(v26);
    }

    else
    {
      uint64_t v33 = ASDLogHandleForCategory(6LL);
      id v26 = (id)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled((os_log_t)v26, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v26, OS_LOG_TYPE_INFO, "No stale installs", v58, 2u);
      }
    }
  }

  if (!*(void *)(a1 + 32)) {
    goto LABEL_48;
  }
  uint64_t v34 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
  BOOL v35 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"source_type",  &off_10040C9E8));
  *(void *)&__int128 v68 = v35;
  id v36 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"IFNULL(app_install.bootstrapped, 2)",  &off_10040C988));
  *((void *)&v68 + 1) = v36;
  char v37 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:value:comparisonType:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:value:comparisonType:",  @"restore_state",  &off_10040CA00,  2LL));
  *(void *)&__int128 v69 = v37;
  int v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v68, 3LL));
  int v39 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v38));

  id v40 = sub_1002EEBC0((uint64_t)&OBJC_CLASS___AppInstallsDatabaseStore);
  id v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
  *(void *)__int128 buf = _NSConcreteStackBlock;
  uint64_t v63 = 3221225472LL;
  unsigned int v64 = sub_1002493CC;
  uint64_t v65 = &unk_1003EBCA0;
  BOOL v66 = v39;
  unsigned int v67 = v34;
  uint64_t v42 = v34;
  uint64_t v43 = v39;
  [v41 modifyUsingTransaction:buf];

  if (!*(void *)(a1 + 32))
  {
LABEL_48:
    __int128 v49 = 0LL;
LABEL_41:
    *(void *)__int128 buf = 0LL;
    *(void *)&__int128 v68 = 0LL;
    sub_1002476B4(v49, 1, &__NSArray0__struct, buf, &v68);
    if ((uint64_t)(v68 + *(void *)buf) >= 1)
    {
      __int128 v50 = (void *)objc_claimAutoreleasedReturnValue(+[UpdatesManager sharedManager](&OBJC_CLASS___UpdatesManager, "sharedManager"));
      [v50 noteUpdatesStateChanged:@"Post Cleanup" logKey:0];
    }

    goto LABEL_45;
  }

  CFPropertyListRef v44 = sub_1002FA108((uint64_t)&OBJC_CLASS___AppDefaultsManager);
  id v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
  unsigned int v46 = v45;
  if (v45)
  {
    [v45 timeIntervalSinceNow];
    BOOL v48 = v47 < -86400.0;

    if (!v48)
    {
      __int128 v49 = *(void **)(a1 + 32);
      goto LABEL_41;
    }
  }

  if (sub_100247434(*(void **)(a1 + 32), 1, 0LL) >= 1)
  {
    __int128 v51 = (void *)objc_claimAutoreleasedReturnValue(+[UpdatesManager sharedManager](&OBJC_CLASS___UpdatesManager, "sharedManager"));
    [v51 noteUpdatesStateChanged:@"Post Stale Cleanup" logKey:0];
  }

void sub_10024740C(_Unwind_Exception *a1)
{
}

uint64_t sub_100247434(void *a1, int a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = ASDLogHandleForCategory(6LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Cleaning up updates", buf, 2u);
    }

    if (a2) {
      sub_1002FA1F4((uint64_t)&OBJC_CLASS___AppDefaultsManager);
    }
    uint64_t v26 = 0LL;
    uint64_t v27 = 0LL;
    sub_1002476B4(a1, a2, v5, &v27, &v26);
    if ([v5 count])
    {
      id v8 = objc_opt_new(&OBJC_CLASS___NSMutableOrderedSet);
      id v9 = sub_1002EEBC0((uint64_t)&OBJC_CLASS___AppInstallsDatabaseStore);
      id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v20 = _NSConcreteStackBlock;
      uint64_t v21 = 3221225472LL;
      uint64_t v22 = sub_1002490E8;
      uint64_t v23 = &unk_1003ECFC8;
      id v24 = v5;
      uint64_t v11 = v8;
      id v25 = v11;
      [v10 readUsingSession:&v20];

      if (-[NSMutableOrderedSet count](v11, "count", v20, v21, v22, v23))
      {
        uint64_t v12 = ASDLogHandleForCategory(6LL);
        uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableOrderedSet array](v11, "array"));
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "componentsJoinedByString:", @", "));
          *(_DWORD *)__int128 buf = 138543362;
          uint64_t v29 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Canceling jobs for deletedApps: [%{public}@]",  buf,  0xCu);
        }

        sub_100248B84(v11);
      }
    }

    uint64_t v16 = ASDLogHandleForCategory(6LL);
    objc_super v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v29 = (void *)(v26 + v27);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Update clean up complete with %ld changes",  buf,  0xCu);
    }

    uint64_t v18 = v26 + v27;
  }

  else
  {
    uint64_t v18 = 0LL;
  }

  return v18;
}

void sub_1002476B4(void *a1, char a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  if (a1)
  {
    id v10 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[LSDatabaseContext sharedDatabaseContext](&OBJC_CLASS___LSDatabaseContext, "sharedDatabaseContext"));
    uint64_t v42 = _NSConcreteStackBlock;
    uint64_t v43 = 3221225472LL;
    CFPropertyListRef v44 = sub_10024869C;
    id v45 = &unk_1003EE420;
    id v46 = a1;
    double v47 = v10;
    uint64_t v12 = v10;
    [v11 accessUsingBlock:&v42];

    id v13 = -[NSMutableDictionary copy](v12, "copy");
    uint64_t v38 = 0LL;
    int v39 = &v38;
    uint64_t v40 = 0x2020000000LL;
    uint64_t v41 = 0LL;
    uint64_t v34 = 0LL;
    BOOL v35 = &v34;
    uint64_t v36 = 0x2020000000LL;
    uint64_t v37 = 0LL;
    uint64_t v14 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "doesNotContainPredicateWithProperty:values:",  @"IFNULL(app_install.phase, 10)",  &off_10040DE10));
    id v16 = sub_1002EEBC0((uint64_t)&OBJC_CLASS___AppInstallsDatabaseStore);
    objc_super v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    uint64_t v42 = _NSConcreteStackBlock;
    uint64_t v43 = 3221225472LL;
    CFPropertyListRef v44 = sub_10024822C;
    id v45 = &unk_1003ECFC8;
    id v46 = v15;
    uint64_t v18 = v14;
    double v47 = (NSMutableDictionary *)v18;
    id v19 = v15;
    [v17 readUsingSession:&v42];

    uint64_t v20 = v47;
    uint64_t v21 = v18;

    LOBYTE(v19) = +[UpdatesManager shouldUseModernUpdates](&OBJC_CLASS___UpdatesManager, "shouldUseModernUpdates");
    id v22 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_100249684;
    v26[3] = &unk_1003EE498;
    char v32 = (char)v19;
    id v27 = v9;
    id v30 = &v34;
    char v33 = a2;
    id v31 = &v38;
    id v24 = v21;
    id v28 = v24;
    id v25 = v13;
    id v29 = v25;
    [v23 modifyUsingTransaction:v26];

    if (a5) {
      *a5 = v35[3];
    }
    if (a4) {
      *a4 = v39[3];
    }

    _Block_object_dispose(&v34, 8);
    _Block_object_dispose(&v38, 8);
  }
}

void sub_100247954( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10024797C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100247A28;
    block[3] = &unk_1003EA390;
    block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_100247A28(uint64_t a1)
{
  uint64_t v2 = sub_100247434(*(void **)(a1 + 32), 0, *(void **)(a1 + 40));
  id v3 = *(void **)(a1 + 48);
  if (v3)
  {
    uint64_t v4 = v2;
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100247AD0;
    v7[3] = &unk_1003EE2C8;
    id v8 = v3;
    uint64_t v9 = v4;
    dispatch_async(v6, v7);
  }

uint64_t sub_100247AD0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40));
}

void sub_100247AE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = ASDLogHandleForCategory(6LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Cleaning up updates following app being registered",  buf,  2u);
    }

    uint64_t v9 = *(dispatch_queue_s **)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100247BD0;
    v10[3] = &unk_1003E9FF8;
    id v11 = v5;
    id v12 = v6;
    dispatch_async(v9, v10);
  }
}

void sub_100247BD0(uint64_t a1)
{
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x2020000000LL;
  v13[3] = 0LL;
  id v2 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100247D00;
  v10[3] = &unk_1003EE318;
  id v11 = *(id *)(a1 + 32);
  id v12 = v13;
  [v3 modifyUsingTransaction:v10];

  uint64_t v4 = *(void **)(a1 + 40);
  if (v4)
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100248214;
    v7[3] = &unk_1003EE340;
    id v8 = v4;
    uint64_t v9 = v13;
    dispatch_async(v6, v7);
  }

  _Block_object_dispose(v13, 8);
}

void sub_100247CE8(_Unwind_Exception *a1)
{
}

BOOL sub_100247D00(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToLongLong:",  @"update_state",  0LL));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"bundle_id",  *(void *)(a1 + 32)));
  v20[0] = v5;
  v20[1] = v4;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v20, 2LL));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v6));

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v9 = sub_10024CBB0((uint64_t)&OBJC_CLASS___AppUpdateMemoryEntity, v8, v7);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  v19[0] = @"bundle_id";
  v19[1] = @"store_software_version_id";
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v19, 2LL));
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100247ED8;
  v16[3] = &unk_1003EE2F0;
  uint64_t v12 = *(void *)(a1 + 40);
  id v17 = v3;
  uint64_t v18 = v12;
  id v13 = v3;
  [v10 enumerateMemoryEntitiesWithProperties:v11 usingBlock:v16];
  BOOL v14 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) > 0LL;

  return v14;
}

void sub_100247ED8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_autoreleasePoolPush();
  id v5 = v3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleID]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 evid]);
  id v8 = [v7 unsignedLongLongValue];

  if (v8)
  {
    id v9 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "initWithBundleIdentifier:allowPlaceholder:error:",  v6,  0LL,  0LL);
    if (v9)
    {
      id v10 = v9;
      id v11 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord iTunesMetadata](v9, "iTunesMetadata"));
      id v12 = [v11 versionIdentifier];

      if (v12 <= v8)
      {
        if (v12 != v8)
        {
          uint64_t v25 = ASDLogHandleForCategory(6LL);
          uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            int v27 = 138543874;
            id v28 = v6;
            __int16 v29 = 2048;
            id v30 = v12;
            __int16 v31 = 2048;
            id v32 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Skipping changing update state of bundleID: %{public}@ to installed app evid: %llu with update evid: %llu",  (uint8_t *)&v27,  0x20u);
          }

          goto LABEL_13;
        }

        id v19 = objc_alloc(&OBJC_CLASS___AppUpdateEntity);
        id v20 = [v5 databaseID];
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
        uint64_t v16 = -[SQLiteEntity initWithPersistentID:onConnection:](v19, "initWithPersistentID:onConnection:", v20, v21);

        id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        -[os_log_s setValue:forProperty:](v16, "setValue:forProperty:", v22, @"install_date");

        -[os_log_s setValue:forProperty:](v16, "setValue:forProperty:", &off_10040C988, @"update_state");
        uint64_t v23 = ASDLogHandleForCategory(6LL);
        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = 138543874;
          id v28 = v6;
          __int16 v29 = 2048;
          id v30 = v8;
          __int16 v31 = 2048;
          id v32 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Updated update state of bundleID: %{public}@ to installed app evid: %llu equals update evid: %llu",  (uint8_t *)&v27,  0x20u);
        }
      }

      else
      {
        id v13 = objc_alloc(&OBJC_CLASS___AppUpdateEntity);
        id v14 = [v5 databaseID];
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
        uint64_t v16 = -[SQLiteEntity initWithPersistentID:onConnection:](v13, "initWithPersistentID:onConnection:", v14, v15);

        -[os_log_s deleteFromDatabase](v16, "deleteFromDatabase");
        uint64_t v17 = ASDLogHandleForCategory(6LL);
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          int v27 = 138543874;
          id v28 = v6;
          __int16 v29 = 2048;
          id v30 = v12;
          __int16 v31 = 2048;
          id v32 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Removed update with bundleID: %{public}@ due to newly installed app evid: %llu being greater than update evid: %llu",  (uint8_t *)&v27,  0x20u);
        }
      }

      ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
LABEL_13:
    }
  }

  objc_autoreleasePoolPop(v4);
}

uint64_t sub_100248214(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
}

void sub_10024822C(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 connection]);
  id v4 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v3, *(void **)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  id v9 = @"bundle_id";
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v9, 1LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100248338;
  v7[3] = &unk_1003EE368;
  id v8 = *(id *)(a1 + 40);
  [v5 enumeratePersistentIDsAndProperties:v6 usingBlock:v7];
}

void sub_100248338(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = (id)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"bundle_id"]);
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___NSString, v4);
  if ((objc_opt_isKindOfClass(v6, v5) & 1) != 0) {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

id *sub_1002483A4(id *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3)
  {
    if (a5 != 50) {
      return (id *)objc_msgSend(result[4], "addObject:");
    }
  }

  return result;
}

void sub_1002483BC(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = sub_1002EEBC0((uint64_t)&OBJC_CLASS___AppInstallsDatabaseStore);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100248478;
  v9[3] = &unk_1003EE3B8;
  id v8 = v3;
  id v10 = v8;
  id v7 = v4;
  id v11 = v7;
  [v6 readUsingSession:v9];
}

void sub_100248478(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 connection]);
  id v4 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v3, *(void **)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  v9[0] = @"coordinator_id";
  v9[1] = @"phase";
  v9[2] = @"bundle_id";
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v9, 3LL));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100248598;
  v7[3] = &unk_1003EE4C0;
  id v8 = *(id *)(a1 + 40);
  [v5 enumeratePersistentIDsAndProperties:v6 usingBlock:v7];
}

void sub_100248598(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"coordinator_id"]);
  objc_opt_class(&OBJC_CLASS___NSUUID, v6);
  id v7 = sub_1001B2BD8(v5);
  id v13 = (id)objc_claimAutoreleasedReturnValue(v7);

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"phase"]);
  [v8 integerValue];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"bundle_id"]);
  objc_opt_class(&OBJC_CLASS___NSString, v10);
  id v11 = sub_1001B2BD8(v9);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10024869C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationRecord enumeratorWithOptions:]( &OBJC_CLASS___LSApplicationRecord,  "enumeratorWithOptions:",  0LL));
  [v2 setFilter:&stru_1003EE3F8];
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  id obj = v2;
  id v3 = [obj countByEnumeratingWithState:&v48 objects:v59 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v49;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v49 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
        uint64_t v8 = ASDLogHandleForCategory(14LL);
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          id v11 = (void *)objc_opt_class(*(void *)(a1 + 32), v10);
          *(_DWORD *)__int128 buf = 138412546;
          __int128 v53 = v11;
          __int16 v54 = 2112;
          id v55 = v7;
          id v12 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[%@]: Including application: %@", buf, 0x16u);
        }

        id v13 = *(void **)(a1 + 40);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 iTunesMetadata]);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v14 storeItemIdentifier]));
        [v13 setObject:&__kCFBooleanFalse forKeyedSubscript:v15];
      }

      id v4 = [obj countByEnumeratingWithState:&v48 objects:v59 count:16];
    }

    while (v4);
  }

  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationRecord enumeratorWithOptions:]( &OBJC_CLASS___LSApplicationRecord,  "enumeratorWithOptions:",  64LL));
  id v16 = [v42 countByEnumeratingWithState:&v44 objects:v58 count:16];
  if (v16)
  {
    id v18 = v16;
    uint64_t v19 = *(void *)v45;
    *(void *)&__int128 v17 = 138412546LL;
    __int128 v41 = v17;
    do
    {
      for (j = 0LL; j != v18; j = (char *)j + 1)
      {
        if (*(void *)v45 != v19) {
          objc_enumerationMutation(v42);
        }
        uint64_t v21 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)j);
        id v22 = objc_msgSend(v21, "placeholderFailureReason", v41);
        uint64_t v23 = ASDLogHandleForCategory(14LL);
        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        uint64_t v25 = v24;
        if (v22 == (id)4)
        {
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            int v27 = (void *)objc_opt_class(*(void *)(a1 + 32), v26);
            id v28 = v27;
            __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v21 bundleIdentifier]);
            *(_DWORD *)__int128 buf = 138412802;
            __int128 v53 = v27;
            __int16 v54 = 2114;
            id v55 = v29;
            __int16 v56 = 2048;
            uint64_t v57 = 4LL;
            _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "[%@]: Application is not installed: %{public}@ and is 32-bit: %ld",  buf,  0x20u);
          }

          uint64_t v30 = ASDLogHandleForCategory(14LL);
          __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            char v33 = (void *)objc_opt_class(*(void *)(a1 + 32), v32);
            *(_DWORD *)__int128 buf = v41;
            __int128 v53 = v33;
            __int16 v54 = 2112;
            id v55 = v21;
            id v34 = v33;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_INFO,  "[%@]: Including application: %@",  buf,  0x16u);
          }

          uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
          BOOL v35 = *(void **)(a1 + 40);
          id v36 = (id)objc_claimAutoreleasedReturnValue([v21 iTunesMetadata]);
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v36 storeItemIdentifier]));
          [v35 setObject:v25 forKeyedSubscript:v37];
        }

        else
        {
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_INFO)) {
            goto LABEL_24;
          }
          int v39 = (void *)objc_opt_class(*(void *)(a1 + 32), v38);
          id v36 = v39;
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v21 bundleIdentifier]);
          *(_DWORD *)__int128 buf = 138412802;
          __int128 v53 = v39;
          __int16 v54 = 2114;
          id v55 = v40;
          __int16 v56 = 2048;
          uint64_t v57 = (uint64_t)v22;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_INFO,  "[%@]: Application is not installed: %{public}@ and not 32-bit: %ld",  buf,  0x20u);
        }

LABEL_24:
      }

      id v18 = [v42 countByEnumeratingWithState:&v44 objects:v58 count:16];
    }

    while (v18);
  }
}

BOOL sub_100248B48(id a1, LSApplicationRecord *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord iTunesMetadata](a2, "iTunesMetadata"));
  BOOL v3 = [v2 storeItemIdentifier] != 0;

  return v3;
}

void sub_100248B84(void *a1)
{
  id v1 = a1;
  id v2 = sub_1002EEBC0((uint64_t)&OBJC_CLASS___AppInstallsDatabaseStore);
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100248C14;
  v5[3] = &unk_1003EA9D8;
  id v4 = v1;
  id v6 = v4;
  [v3 modifyUsingTransaction:v5];
}

uint64_t sub_100248C14(uint64_t a1, void *a2)
{
  BOOL v3 = a2;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v11;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v11 != v7) {
          objc_enumerationMutation(v4);
        }
        sub_1001B345C( v3,  (uint64_t)objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * (void)v8), "longLongValue", (void)v10),  (NSError *)0xFFFFFFFFFFFFFFE2);
        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v6);
  }

  return 1LL;
}

uint64_t sub_100248D20(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 creatorIdentifier] != (id)1)
  {
LABEL_6:
    uint64_t v9 = 1LL;
    goto LABEL_7;
  }

  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
  LOBYTE(v4) = [v4 containsObject:v5];

  if ((v4 & 1) != 0)
  {
    uint64_t v7 = ASDLogHandleForCategory(6LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138543362;
      id v18 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "├ Active:    %{public}@",  (uint8_t *)&v17,  0xCu);
    }

    goto LABEL_6;
  }

  uint64_t v11 = sub_1001E4C1C((uint64_t)v3, v6);
  uint64_t v12 = ASDLogHandleForCategory(6LL);
  __int128 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
  if (v11 == 3)
  {
    if (v14)
    {
      int v17 = 138543362;
      id v18 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "├ Leaving untracked Home Screen Sync coordinator: %{public}@",  (uint8_t *)&v17,  0xCu);
    }

    uint64_t v9 = 0LL;
  }

  else
  {
    if (v14)
    {
      int v17 = 138543362;
      id v18 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "├ Untracked: %{public}@",  (uint8_t *)&v17,  0xCu);
    }

    uint64_t v15 = ASDErrorWithTitleAndMessage(ASDErrorDomain, 520LL, 0LL, 0LL);
    id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    uint64_t v9 = 1LL;
    [v3 cancelForReason:v16 client:1 error:0];

    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  }

void sub_100248F1C(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v9 = a3;
  id v10 = a4;
  uint64_t v11 = ASDLogHandleForCategory(6LL);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (a5 == 50)
  {
    if (v13)
    {
      int v16 = 138543362;
      id v17 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Skipping active install in postamble",  (uint8_t *)&v16,  0xCu);
    }
  }

  else
  {
    if (v13)
    {
      BOOL v14 = sub_1002C9300(a5);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      int v16 = 138543874;
      id v17 = v10;
      __int16 v18 = 2114;
      uint64_t v19 = v15;
      __int16 v20 = 2114;
      id v21 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Found active install in phase: %{public}@ coordinatorID: %{public}@",  (uint8_t *)&v16,  0x20u);
    }

    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
    [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:v9];
  }
}

BOOL sub_10024908C(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 uniqueIdentifier]);
  [v3 setObject:0 forKeyedSubscript:v4];

  return [*(id *)(a1 + 32) count] != 0;
}

void sub_1002490E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  uint64_t v24 = a1;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v26 objects:v32 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v27;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v27 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v26 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"bundle_id",  v8));
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
        id v11 = sub_10024C088((uint64_t)&OBJC_CLASS___AppInstallEntity, v10, v9);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

        if ([v12 existsInDatabase])
        {
          id v13 = -[LSApplicationRecord initForInstallMachineryWithBundleIdentifier:placeholder:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "initForInstallMachineryWithBundleIdentifier:placeholder:error:",  v8,  1LL,  0LL);
          BOOL v14 = (char *)[v13 installType];
          uint64_t v15 = (uint64_t)sub_1001E2698(v12, (uint64_t)@"IFNULL(app_install.phase, 10)");
          if ((unint64_t)(v14 - 7) <= 2)
          {
            int v16 = -[LogKey initWithAppInstallEntity:]( objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey),  "initWithAppInstallEntity:",  v12);
            uint64_t v17 = ASDLogHandleForCategory(6LL);
            __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              __int16 v31 = v16;
              uint64_t v19 = v18;
              __int16 v20 = "[%@] Skipping cancellation, this looks like a promotion failure";
              goto LABEL_13;
            }

            goto LABEL_14;
          }

          if (v15 >= -19)
          {
            id v21 = *(void **)(v24 + 40);
            id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v12 persistentID]));
            [v21 addObject:v22];

            int v16 = -[LogKey initWithAppInstallEntity:]( objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey),  "initWithAppInstallEntity:",  v12);
            uint64_t v23 = ASDLogHandleForCategory(6LL);
            __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412290;
              __int16 v31 = v16;
              uint64_t v19 = v18;
              __int16 v20 = "[%@] Scheduling install cancellation following app deletion";
LABEL_13:
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
            }

uint64_t sub_1002493CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v5 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v4, *(void **)(a1 + 32));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1002494D8;
  v11[3] = &unk_1003EB478;
  id v12 = v3;
  id v13 = *(id *)(a1 + 40);
  id v7 = v3;
  [v6 enumeratePersistentIDsUsingBlock:v11];
  if (v7)
  {
    id v9 = objc_getProperty(v7, v8, 24LL, 1);
    if (v9) {
      v9[16] |= 0x200000uLL;
    }
  }

  else
  {
    id v9 = 0LL;
  }

  return 1LL;
}

void sub_1002494D8(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___AppInstallEntity);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  uint64_t v6 = -[SQLiteEntity initWithPersistentID:onConnection:](v4, "initWithPersistentID:onConnection:", a2, v5);

  uint64_t v7 = ASDLogHandleForCategory(6LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = sub_10021B614(v6);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    int v18 = 138412546;
    uint64_t v19 = v9;
    __int16 v20 = 2112;
    id v21 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[%@] [%@] Resetting restore bootstrap",  (uint8_t *)&v18,  0x16u);
  }

  -[SQLiteEntity setValue:forProperty:](v6, "setValue:forProperty:", &off_10040C9E8, @"bootstrapped");
  id v12 = sub_1001E2698(v6, (uint64_t)@"restore_type");
  else {
    BOOL v14 = v12 == (id)2;
  }
  if (v14)
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v13, 24LL, 1);
    }
    id v16 = Property;
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
    sub_1001EB5D8((uint64_t)v16, v17);
  }
}

BOOL sub_100249684(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(_BYTE *)(a1 + 72))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
    uint64_t v6 = objc_alloc(&OBJC_CLASS___SQLiteQueryDescriptor);
    uint64_t v8 = objc_opt_class(&OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity, v7);
    uint64_t v10 = objc_opt_class(&OBJC_CLASS____TtC9appstored14MediaAPIUpdate, v9);
    id v11 = sub_10024BAF8(v6, v8, v10);
    id v13 = v11;
    if (v11) {
      objc_setProperty_nonatomic_copy(v11, v12, &off_10040DE40, 40LL);
    }
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity installDatePropertyKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "installDatePropertyKey"));
    uint64_t v52 = v14;
    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v52, 1LL));
    if (v13) {
      objc_setProperty_nonatomic_copy(v13, v15, v16, 40LL);
    }

    id v17 = -[SQLiteQuery initOnConnection:descriptor:]( objc_alloc(&OBJC_CLASS___SQLiteQuery),  "initOnConnection:descriptor:",  v5,  v13);
    int v18 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "BOOLeanPropertyMaskKey"));
    v51[0] = v18;
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity bundleIDPropertyKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "bundleIDPropertyKey"));
    v51[1] = v19;
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity updateStatePropertyKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "updateStatePropertyKey"));
    v51[2] = v20;
    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v51, 3LL));

    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_100249AB0;
    v43[3] = &unk_1003EE448;
    id v44 = *(id *)(a1 + 32);
    id v45 = v5;
    char v48 = *(_BYTE *)(a1 + 73);
    __int128 v47 = *(_OWORD *)(a1 + 56);
    id v46 = *(id *)(a1 + 40);
    id v22 = v5;
    [v17 enumerateMemoryEntitiesWithProperties:v21 usingBlock:v43];
    uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)
        + *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v24 = objc_alloc(&OBJC_CLASS___SQLiteQueryDescriptor);
    uint64_t v26 = objc_opt_class(&OBJC_CLASS___AppUpdateEntity, v25);
    uint64_t v28 = objc_opt_class(&OBJC_CLASS___AppUpdateMemoryEntity, v27);
    __int128 v29 = sub_10024BAF8(v24, v26, v28);
    id v13 = v29;
    if (v29) {
      objc_setProperty_nonatomic_copy(v29, v30, &off_10040DE58, 40LL);
    }
    __int128 v50 = @"install_date";
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v50, 1LL));
    if (v13) {
      objc_setProperty_nonatomic_copy(v13, v31, v32, 48LL);
    }

    char v33 = objc_alloc(&OBJC_CLASS___SQLiteQuery);
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v4 connection]);
    id v17 = -[SQLiteQuery initOnConnection:descriptor:](v33, "initOnConnection:descriptor:", v34, v13);

    v49[0] = @"bundle_id";
    v49[1] = @"update_state";
    v49[2] = @"store_item_id";
    v49[3] = @"is_offloaded";
    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v49, 4LL));
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_100249D40;
    v36[3] = &unk_1003EE470;
    id v37 = *(id *)(a1 + 48);
    id v38 = *(id *)(a1 + 32);
    id v39 = v4;
    char v42 = *(_BYTE *)(a1 + 73);
    __int128 v41 = *(_OWORD *)(a1 + 56);
    id v40 = *(id *)(a1 + 40);
    [v17 enumerateMemoryEntitiesWithProperties:v21 usingBlock:v36];
    uint64_t v23 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)
        + *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);

    id v22 = v37;
  }

  return v23 > 0;
}

void sub_100249AB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 databaseID];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
  if (([v3 isOffloaded] & 1) == 0
    && [*(id *)(a1 + 32) containsObject:v5])
  {
    uint64_t v6 = -[MediaAPIUpdateEntity initWithPersistentID:onConnection:]( objc_alloc(&OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity),  "initWithPersistentID:onConnection:",  v4,  *(void *)(a1 + 40));
    -[SQLiteEntity deleteFromDatabase](v6, "deleteFromDatabase");
    uint64_t v7 = ASDLogHandleForCategory(6LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138543362;
      int v18 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Removed modern update with bundle identifier “%{public}@” because the associated app was uninstalled.",  (uint8_t *)&v17,  0xCu);
    }

    uint64_t v9 = *(void *)(a1 + 56);
    goto LABEL_16;
  }

  if (*(_BYTE *)(a1 + 72))
  {
    id v10 = [v3 updateState];
    if (v10 == (id)4)
    {
      if (([*(id *)(a1 + 48) containsObject:v5] & 1) == 0)
      {
        uint64_t v14 = ASDLogHandleForCategory(6LL);
        id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = 138543874;
          int v18 = v5;
          __int16 v19 = 2048;
          uint64_t v20 = 4LL;
          __int16 v21 = 2048;
          uint64_t v22 = 0LL;
          id v13 = "Updating purchased state for modern update with bundle identifier “%{public}@” from %ld to %ld…";
          goto LABEL_14;
        }

void sub_100249D40(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 itemID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForProperty:@"update_state"]);
  id v7 = [v6 integerValue];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForProperty:@"is_offloaded"]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v4]);
  id v10 = v9;
  if (!v9 || ([v9 isEqualToNumber:v8] & 1) == 0)
  {
    if ([*(id *)(a1 + 40) count]
      && v5
      && [*(id *)(a1 + 40) containsObject:v5])
    {
      uint64_t v11 = objc_alloc(&OBJC_CLASS___AppUpdateEntity);
      id v12 = [v3 databaseID];
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) connection]);
      uint64_t v14 = -[SQLiteEntity initWithPersistentID:onConnection:](v11, "initWithPersistentID:onConnection:", v12, v13);

      -[SQLiteEntity deleteFromDatabase](v14, "deleteFromDatabase");
      uint64_t v15 = ASDLogHandleForCategory(6LL);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = 138543362;
        __int16 v31 = v5;
        int v17 = "Removed uninstalled update with bundleID: %{public}@";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, (uint8_t *)&v30, 0xCu);
        goto LABEL_17;
      }

      goto LABEL_17;
    }

    if (!v10)
    {
      __int16 v21 = objc_alloc(&OBJC_CLASS___AppUpdateEntity);
      id v22 = [v3 databaseID];
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) connection]);
      uint64_t v14 = -[SQLiteEntity initWithPersistentID:onConnection:](v21, "initWithPersistentID:onConnection:", v22, v23);

      -[SQLiteEntity deleteFromDatabase](v14, "deleteFromDatabase");
      uint64_t v24 = ASDLogHandleForCategory(6LL);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        int v30 = 138543362;
        __int16 v31 = v5;
        int v17 = "Removed update with bundleID: %{public}@ due to no matching app";
        goto LABEL_16;
      }

void *sub_10024A834(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)&OBJC_CLASS___SQLitePreparedStatement;
    uint64_t v6 = objc_msgSendSuper2(&v10, "init");
    a1 = v6;
    if (v6)
    {
      v6[1] = a2;
      id v7 = [v5 copy];
      uint64_t v8 = (void *)a1[2];
      a1[2] = v7;
    }
  }

  return a1;
}

void sub_10024ABCC(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  [v2 addObject:v3];
}

void sub_10024AE00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10024AE18(uint64_t result)
{
  return result;
}

id sub_10024B090(uint64_t a1, uint64_t a2)
{
  int v5 = 1;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    id v3 = *(void **)(v2 + 56);
  }
  else {
    id v3 = 0LL;
  }
  return [v3 applyBinding:a2 atIndex:&v5];
}

void sub_10024B164( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10024B17C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = v2[2];
  if (v3) {
    uint64_t v3 = *(void *)(v3 + 8);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10024B1FC;
  v6[3] = &unk_1003EE520;
  v6[6] = v3;
  uint64_t v4 = *(void *)(a1 + 40);
  void v6[4] = v2;
  void v6[5] = v4;
  [v2 enumeratePersistentIDsUsingBlock:v6];
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_10024B1FC(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(*(void *)(a1 + 32) + 8)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v6 deleteFromDatabase];
  *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) ^ 1;
}

void sub_10024B3EC(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc_init(*(Class *)(a1 + 40));
  [v4 setDatabaseID:a2];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10024B454(uint64_t a1, uint64_t a2, void *a3)
{
  int v5 = *(objc_class **)(a1 + 40);
  id v6 = a3;
  id v7 = objc_alloc_init(v5);
  [v7 setDatabaseID:a2];
  [v7 setValuesWithDictionary:v6];

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10024B55C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10024B634(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v14 = 1;
  [a1[4] applyBinding:v5 atIndex:&v14];
  id v7 = [a1[5] count];
  v13[0] = 0LL;
  v13[1] = v13;
  v13[2] = 0x2020000000LL;
  v13[3] = 0LL;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10024B73C;
  v8[3] = &unk_1003EE5E8;
  id v12 = v7;
  id v9 = a1[5];
  id v10 = a1[6];
  uint64_t v11 = v13;
  sub_1001BF214((uint64_t)v5, v8);

  _Block_object_dispose(v13, 8);
}

void sub_10024B724( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
}

void sub_10024B73C(void *a1, void *a2, void *a3)
{
  id v13 = a2;
  id v5 = a3;
  id v6 = objc_autoreleasePoolPush();
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithCapacity:",  a1[7]));
  if (v13)
  {
    uint64_t v8 = (void *)a1[4];
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10024B870;
    v14[3] = &unk_1003EE5C0;
    id v9 = v7;
    id v15 = v9;
    id v10 = (sqlite3_stmt **)v13;
    id v16 = v10;
    [v8 enumerateObjectsUsingBlock:v14];
    uint64_t v11 = a1[5];
    sqlite3_int64 v12 = sqlite3_column_int64(v10[6], 0);
    ++*(void *)(*(void *)(a1[6] + 8LL) + 24LL);
    (*(void (**)(uint64_t, sqlite3_int64, id))(v11 + 16))(v11, v12, v9);
  }

  objc_autoreleasePoolPop(v6);
}

void sub_10024B870(uint64_t a1, void *a2, int a3)
{
  id v4 = *(void **)(a1 + 40);
  unsigned int v5 = a3 + 1;
  id v6 = a2;
  id v7 = sub_1002E7544(v4, v5);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v6];
}

void *sub_10024BAF8(void *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    v5.receiver = result;
    v5.super_class = (Class)&OBJC_CLASS___SQLiteQueryDescriptor;
    uint64_t result = objc_msgSendSuper2(&v5, "init");
    if (result)
    {
      result[1] = a2;
      result[3] = a3;
    }
  }

  return result;
}

id sub_10024C088(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_opt_self(a1);
  uint64_t v17 = 0LL;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x3032000000LL;
  uint64_t v20 = sub_10024C1B8;
  __int16 v21 = sub_10024C1C8;
  id v22 = 0LL;
  id v8 = sub_10024C1D0(v7, v5, v6);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10024C234;
  v13[3] = &unk_1003EE638;
  id v15 = &v17;
  uint64_t v16 = v7;
  id v10 = v5;
  id v14 = v10;
  [v9 enumeratePersistentIDsUsingBlock:v13];
  id v11 = (id)v18[5];

  _Block_object_dispose(&v17, 8);
  return v11;
}

void sub_10024C1A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10024C1B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10024C1C8(uint64_t a1)
{
}

id sub_10024C1D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = objc_opt_self(a1);
  id v8 = sub_10024C688(v7, v6, v5, 0LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  return v9;
}

void sub_10024C234(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 onConnection:*(void *)(a1 + 32)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = 1;
}

id sub_10024C290(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  uint64_t v10 = objc_opt_self(a1);
  id v11 = sub_10024C30C(v10, v9, @"COUNT", v8, v7);
  sqlite3_int64 v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  return v12;
}

id sub_10024C30C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = (void *)objc_opt_self(a1);
  uint64_t v29 = 0LL;
  int v30 = &v29;
  uint64_t v31 = 0x3032000000LL;
  __int16 v32 = sub_10024C1B8;
  uint64_t v33 = sub_10024C1C8;
  id v34 = 0LL;
  id v14 = -[SQLiteQueryDescriptor initWithEntityClass:]( objc_alloc(&OBJC_CLASS___SQLiteQueryDescriptor),  "initWithEntityClass:",  v13);
  uint64_t v16 = v14;
  if (v14) {
    objc_setProperty_nonatomic_copy(v14, v15, v11, 56LL);
  }
  uint64_t v17 = objc_alloc(&OBJC_CLASS___NSString);
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v13 disambiguatedSQLForProperty:v9]);
  uint64_t v19 = -[NSString initWithFormat:](v17, "initWithFormat:", @"%@(%@)", v10, v18);

  id v35 = v9;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v35, 1LL));
  __int16 v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObject:](&OBJC_CLASS___NSArray, "arrayWithObject:", v19));
  id v22 = -[SQLiteQueryDescriptor _newSelectSQLWithProperties:columns:]( v16,  "_newSelectSQLWithProperties:columns:",  v20,  v21);

  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472LL;
  v26[2] = sub_10024C9B4;
  v26[3] = &unk_1003EBBD8;
  uint64_t v23 = v16;
  uint64_t v27 = v23;
  id v28 = &v29;
  sub_1001D64E8((uint64_t)v12, v22, v26);
  id v24 = (id)v30[5];

  _Block_object_dispose(&v29, 8);
  return v24;
}

void sub_10024C534( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_10024C55C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  uint64_t v10 = objc_opt_self(a1);
  id v11 = sub_10024C30C(v10, v9, @"MIN", v8, v7);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  return v12;
}

_UNKNOWN **sub_10024C5D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  uint64_t v10 = objc_opt_self(a1);
  id v11 = sub_10024C30C(v10, v9, @"SUM", v8, v7);
  id v12 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(v11);

  uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSNumber, v13);
  if ((objc_opt_isKindOfClass(v12, v14) & 1) != 0) {
    id v15 = v12;
  }
  else {
    id v15 = &off_10040CA18;
  }
  uint64_t v16 = v15;

  return v16;
}

id sub_10024C688(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  uint64_t v10 = objc_opt_self(a1);
  id v11 = sub_10024C700(v10, v9, v8, v7, 0LL);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  return v12;
}

id sub_10024C700(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a5;
  id v10 = a4;
  id v11 = a3;
  id v12 = a2;
  uint64_t v13 = (void *)objc_opt_self(a1);
  id v14 = sub_10024C794((uint64_t)v13, v12, v11, v10, v9, v13);
  id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

  return v15;
}

id sub_10024C794(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a2;
  objc_opt_self(a1);
  id v15 = objc_alloc(&OBJC_CLASS___SQLiteQueryDescriptor);
  id v16 = [a6 memoryEntityClass];
  if (v15
    && (id v17 = v16,
        v25.receiver = v15,
        v25.super_class = (Class)&OBJC_CLASS___SQLiteQueryDescriptor,
        (uint64_t v18 = objc_msgSendSuper2(&v25, "init")) != 0))
  {
    uint64_t v20 = v18;
    v18[1] = a6;
    v18[3] = v17;
    objc_setProperty_nonatomic_copy(v18, v19, v12, 48LL);
    objc_setProperty_nonatomic_copy(v20, v21, v13, 40LL);
    objc_setProperty_nonatomic_copy(v20, v22, v11, 56LL);
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  id v23 = -[SQLiteQuery initOnConnection:descriptor:]( objc_alloc(&OBJC_CLASS___SQLiteQuery),  "initOnConnection:descriptor:",  v14,  v20);

  return v23;
}

id sub_10024C8BC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = objc_opt_self(a1);
  id v10 = sub_10024C794(v9, v8, v7, 0LL, 0LL, a4);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  return v11;
}

id sub_10024C92C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a4;
  id v10 = a3;
  id v11 = a2;
  uint64_t v12 = objc_opt_self(a1);
  id v13 = sub_10024C794(v12, v11, v10, v9, 0LL, a5);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  return v14;
}

void sub_10024C9B4(uint64_t a1, void *a2)
{
  int v7 = 1;
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3) {
    id v4 = *(void **)(v3 + 56);
  }
  else {
    id v4 = 0LL;
  }
  id v5 = a2;
  [v4 applyBinding:v5 atIndex:&v7];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10024CA58;
  v6[3] = &unk_1003EB1E0;
  void v6[4] = *(void *)(a1 + 40);
  sub_1001BF214((uint64_t)v5, v6);
}

void sub_10024CA58(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = sub_1002E7544(a2, 0);
  uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  *a4 = 1;
}

id sub_10024CAA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_opt_self(a1);
  uint64_t v13 = 0LL;
  id v14 = &v13;
  uint64_t v15 = 0x3032000000LL;
  id v16 = sub_10024C1B8;
  id v17 = sub_10024C1C8;
  id v18 = 0LL;
  id v8 = sub_10024CBB0(v7, v5, v6);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10024CC14;
  v12[3] = &unk_1003E9920;
  v12[4] = &v13;
  [v9 enumerateMemoryEntitiesUsingBlock:v12];
  id v10 = (id)v14[5];

  _Block_object_dispose(&v13, 8);
  return v10;
}

void sub_10024CB98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10024CBB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = objc_opt_self(a1);
  id v8 = sub_10024CC48(v7, v6, v5, 0LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  return v9;
}

void sub_10024CC14(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
}

id sub_10024CC48(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = a2;
  id v10 = (void *)objc_opt_self(a1);
  id v11 = objc_alloc(&OBJC_CLASS___SQLiteQueryDescriptor);
  id v12 = [v10 databaseEntityClass];
  if (v11
    && (id v13 = v12,
        v20.receiver = v11,
        v20.super_class = (Class)&OBJC_CLASS___SQLiteQueryDescriptor,
        (id v14 = objc_msgSendSuper2(&v20, "init")) != 0))
  {
    id v16 = v14;
    v14[1] = v13;
    v14[3] = v10;
    objc_setProperty_nonatomic_copy(v14, v15, v8, 48LL);
    objc_setProperty_nonatomic_copy(v16, v17, v7, 56LL);
  }

  else
  {
    id v16 = 0LL;
  }

  id v18 = -[SQLiteQuery initOnConnection:descriptor:]( objc_alloc(&OBJC_CLASS___SQLiteQuery),  "initOnConnection:descriptor:",  v9,  v16);

  return v18;
}

void sub_10024CF6C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

id sub_10024CF8C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _calculatePurgeableSpace];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = result;
  return result;
}

id sub_10024D088(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_purgeForDesiredSpace:", objc_msgSend(*(id *)(a1 + 40), "longLongValue"));
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = result;
  return result;
}

id sub_10024D160(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _calculatePurgeableSpace];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = result;
  return result;
}

void sub_10024D21C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10024D234(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"IFNULL(app_install.phase, 10)",  &off_10040CAA8));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v5 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v4, v9);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10024D31C;
  v10[3] = &unk_1003EAAA8;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v3;
  uint64_t v12 = v7;
  id v8 = v3;
  [v6 enumeratePersistentIDsUsingBlock:v10];
}

void sub_10024D31C(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___AppInstallEntity);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  id v6 = -[SQLiteEntity initWithPersistentID:onConnection:](v4, "initWithPersistentID:onConnection:", a2, v5);

  memset(&v13, 0, sizeof(v13));
  id v7 = objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v6, "valueForProperty:", @"download_path"));
  int v8 = stat( (const char *)objc_msgSend( v7,  "fileSystemRepresentation",  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0),  &v13);
  blkcnt_t st_blocks = v13.st_blocks;
  if (v8) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = v13.st_blocks < 1;
  }
  if (!v10)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) += v13.st_blocks << 9;
    uint64_t v11 = ASDLogHandleForCategory(10LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v15 = v7;
      __int16 v16 = 2048;
      blkcnt_t v17 = st_blocks << 9;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Purgable asset: %{public}@ size: %{bytes}ld",  buf,  0x16u);
    }
  }
}

void sub_10024D650( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

uint64_t sub_10024D688(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10024D698(uint64_t a1)
{
}

void sub_10024D6A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"IFNULL(app_install.phase, 10)",  &off_10040CAA8));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v5 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v4, v9);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10024D788;
  v10[3] = &unk_1003EAAA8;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v3;
  uint64_t v12 = v7;
  id v8 = v3;
  [v6 enumeratePersistentIDsUsingBlock:v10];
}

void sub_10024D788(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___AppInstallEntity);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  id v6 = -[SQLiteEntity initWithPersistentID:onConnection:](v4, "initWithPersistentID:onConnection:", a2, v5);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity valueForProperty:](v6, "valueForProperty:", @"download_path"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  if ([v8 fileExistsAtPath:v7])
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 attributesOfItemAtPath:v7 error:0]);
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:NSFileSize]);
    if ([v10 unsignedLongLongValue])
    {
      blkcnt_t v17 = (void *)objc_claimAutoreleasedReturnValue([v9 fileModificationDate]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
      id v12 = sub_10021B6D0(v6);
      stat v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      id v14 = sub_10021B614(v6);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      v18[0] = @"date";
      v18[1] = @"installID";
      v19[0] = v17;
      v19[1] = v11;
      v18[2] = @"size";
      v18[3] = @"bundleID";
      void v19[2] = v10;
      v19[3] = v13;
      v18[4] = @"logKey";
      v19[4] = v15;
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v19,  v18,  5LL));
      [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v16];
    }
  }
}

uint64_t sub_10024D990(void *a1, void *a2)
{
  SEL v22 = a2;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id obj = *(id *)(*(void *)(a1[4] + 8LL) + 40LL);
  id v3 = [obj countByEnumeratingWithState:&v23 objects:v29 count:16];
  if (v3)
  {
    id v5 = v3;
    uint64_t v6 = *(void *)v24;
    *(void *)&__int128 v4 = 138412290LL;
    __int128 v20 = v4;
LABEL_3:
    uint64_t v7 = 0LL;
    while (1)
    {
      if (*(void *)v24 != v6) {
        objc_enumerationMutation(obj);
      }
      id v8 = *(void **)(*((void *)&v23 + 1) + 8 * v7);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", @"installID", v20));
      BOOL v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"size"]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"bundleID"]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:@"logKey"]);
      uint64_t v13 = ASDLogHandleForCategory(10LL);
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = v20;
        id v28 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[%@] Canceling download due to CacheDelete policy",  buf,  0xCu);
      }

      sub_1001B345C(v22, (uint64_t)[v9 longLongValue], (NSError *)0xFFFFFFFFFFFFFFE2);
      id v15 = sub_1002B0944((uint64_t)&OBJC_CLASS___ProgressCache);
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      sub_1002B0F20((uint64_t)v16, v11);

      *(void *)(*(void *)(a1[5] + 8) + 24) += [v10 unsignedLongLongValue];
      uint64_t v17 = a1[6];
      uint64_t v18 = *(void *)(*(void *)(a1[5] + 8LL) + 24LL);

      if (v18 > v17) {
        break;
      }
      if (v5 == (id)++v7)
      {
        id v5 = [obj countByEnumeratingWithState:&v23 objects:v29 count:16];
        if (v5) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  return 1LL;
}

SystemAppLookupTask *sub_10024DC0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  __int128 v4 = objc_alloc(&OBJC_CLASS___SystemAppLookupTask);
  id v5 = v3;
  if (v4)
  {
    v9.receiver = v4;
    v9.super_class = (Class)&OBJC_CLASS___SystemAppLookupTask;
    __int128 v4 = (SystemAppLookupTask *)objc_msgSendSuper2(&v9, "init");
    if (v4)
    {
      uint64_t v6 = -[NSArray initWithArray:copyItems:](objc_alloc(&OBJC_CLASS___NSArray), "initWithArray:copyItems:", v5, 1LL);
      uint64_t v7 = *(void **)&v4->super._success;
      *(void *)&v4->super._success = v6;
    }
  }

  return v4;
}

uint64_t sub_10024DCC0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10024DCD0(uint64_t a1)
{
}

void sub_10024DCD8(uint64_t a1)
{
  dispatch_semaphore_t v2 = dispatch_semaphore_create(0LL);
  id v3 = objc_alloc_init(&OBJC_CLASS___MADownloadOptions);
  [v3 setAllowsCellularAccess:1];
  [v3 setAllowsExpensiveAccess:1];
  [v3 setCanUseLocalCacheServer:1];
  [v3 setDiscretionary:0];
  [v3 setRequiresPowerPluggedIn:0];
  [v3 setTimeoutIntervalForResource:60];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10024DDDC;
  v6[3] = &unk_1003EE688;
  uint64_t v4 = *(void *)(a1 + 32);
  dispatch_semaphore_t v7 = v2;
  uint64_t v8 = v4;
  id v5 = v2;
  +[MAAsset startCatalogDownload:options:completionWithError:]( &OBJC_CLASS___MAAsset,  "startCatalogDownload:options:completionWithError:",  @"com.apple.MobileAsset.SystemApp",  v3,  v6);
  dispatch_semaphore_wait(v5, 0xFFFFFFFFFFFFFFFFLL);
}

void sub_10024DDDC(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), a3);
  if (a2)
  {
    uint64_t v7 = ASDLogHandleForCategory(14LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 134218242;
      uint64_t v10 = a2;
      __int16 v11 = 2114;
      id v12 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to update MobileAsset catalog with result %ld: %{public}@",  (uint8_t *)&v9,  0x16u);
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id sub_10024E578(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  [v6 setDoNotBlockOnNetworkStatus:1];
  [v6 setDoNotBlockBeforeFirstUnlock:1];
  [v6 addKeyValuePair:@"AppBundleID" with:v5];

  [v6 addKeyValuePair:@"BuildID" with:*(void *)(a1 + 32)];
  [v6 addKeyValuePair:@"SystemImageID" with:*(void *)(a1 + 40)];
  [v6 returnTypes:5];
  id v7 = [v6 queryMetaDataSync];

  return v7;
}

id sub_10024E664(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[AMSProcessInfo currentProcess](&OBJC_CLASS___AMSProcessInfo, "currentProcess"));
  dispatch_semaphore_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[AMSUserAgent userAgentForProcessInfo:](&OBJC_CLASS___AMSUserAgent, "userAgentForProcessInfo:", v1));

  return v2;
}

void sub_10024F024( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, char a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26)
{
}

void sub_10024F060(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_autoreleasePoolPush();
  if (([v3 hasMIDBasedSINF] & 1) != 0
    || ![v3 missingRequiredSINF]
    || ![v3 isConfiguratorInstall])
  {
    if ([v3 isInstalled]
      && [v3 isStoreOriginated]
      && ([v3 isAppClip] & 1) == 0)
    {
      id v40 = (void *)objc_claimAutoreleasedReturnValue([v3 bundlePath]);
      id v11 = (id)objc_claimAutoreleasedReturnValue(+[ASFReceipt receiptFromBundleAtPath:](&OBJC_CLASS___ASFReceipt, "receiptFromBundleAtPath:", v40));

      if (v11 && ([v11 isVPPLicensed] & 1) != 0)
      {
        uint64_t v13 = a1[4];
        id v41 = v3;
        id v11 = v11;
        if (!v13) {
          goto LABEL_99;
        }
LABEL_19:
        __int16 v16 = sub_1001A60D0((id *)objc_alloc(&OBJC_CLASS___AppReceiptTask), v3);
        uint64_t v18 = v16;
        if (v16) {
          objc_setProperty_nonatomic_copy(v16, v17, *(id *)(v13 + 144), 64LL);
        }
        if (v11)
        {
          unsigned int v19 = [v11 isVPPLicensed];
          if (v18)
          {
            if (v19) {
              v18[9] = (id)8;
            }
          }
        }

        __int128 v20 = sub_1002F75B4((id *)v3);
        id Property = (id)objc_claimAutoreleasedReturnValue(v20);
        __int128 v23 = Property;
        if (Property) {
          id Property = objc_getProperty(Property, v22, 16LL, 1);
        }
        id v24 = Property;

        if (v24)
        {
          if (v23)
          {
            id v26 = objc_getProperty(v23, v25, 16LL, 1);
            if (v26)
            {
              uint64_t v27 = v26;
              id v28 = (void *)objc_claimAutoreleasedReturnValue( +[ACAccountStore ams_sharedAccountStore]( &OBJC_CLASS___ACAccountStore,  "ams_sharedAccountStore"));
              uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "ams_iTunesAccountWithDSID:", v27));

              if (v18) {
                objc_setProperty_nonatomic_copy(v18, v30, v29, 56LL);
              }
            }
          }
        }

        id v120 = 0LL;
        unsigned __int8 v31 = [(id)v13 runSubTask:v18 returningError:&v120];
        id v32 = v120;
        if (v18)
        {
          id v33 = v18[10];
          id v34 = v33;
          if ((v31 & 1) != 0)
          {
            if (v33
              && (([v33 isRevoked] & 1) != 0 || *((_BYTE *)v18 + 49))
              && [v34 isVPPLicensed]
              && ([v3 hasMIDBasedSINF] & 1) == 0
              && (sub_1001EED68((void *)v13, v3) & 1) == 0)
            {
              id v35 = *(void **)(v13 + 112);
              id v116 = v34;
              id v36 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
              [v35 setObject:v3 forKeyedSubscript:v36];

              id v34 = v116;
            }

            goto LABEL_42;
          }
        }

        else
        {
          id v34 = 0LL;
          if ((v31 & 1) != 0)
          {
LABEL_42:
            if (os_variant_has_internal_content("com.apple.appstored"))
            {
              __int16 v117 = v34;
              id v37 = *(void **)(v13 + 112);
              id v38 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
              id v39 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKeyedSubscript:v38]);
              if (v39 || (char v42 = *(void **)(v13 + 128)) == 0LL)
              {
              }

              else
              {
                id v110 = v32;
                uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
                unsigned int v44 = [v42 containsObject:v43];

                if (v44)
                {
                  id v45 = *(void **)(v13 + 112);
                  id v46 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
                  [v45 setObject:v3 forKeyedSubscript:v46];

                  uint64_t v47 = ASDLogHandleForCategory(14LL);
                  char v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
                  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
                  {
                    __int128 v49 = *(void **)(v13 + 144);
                    id v50 = v49;
                    __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
                    *(_DWORD *)__int128 buf = 138412546;
                    v123 = v49;
                    __int16 v124 = 2114;
                    uint64_t v125 = (uint64_t)v51;
                    _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Marking as QA revoked",  buf,  0x16u);
                  }
                }

                id v32 = v110;
              }

              id v34 = v117;
            }

            goto LABEL_98;
          }
        }

        unsigned __int8 v114 = v23;
        uint64_t v52 = ASDLogHandleForCategory(14LL);
        __int128 v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          id v112 = v32;
          id v94 = *(void **)(v13 + 144);
          id v95 = v94;
          uint64_t v119 = v34;
          id v96 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
          *(_DWORD *)__int128 buf = 138412802;
          v123 = v94;
          id v32 = v112;
          __int16 v124 = 2114;
          uint64_t v125 = (uint64_t)v96;
          __int16 v126 = 2114;
          uint64_t v127 = (uint64_t)v112;
          _os_log_error_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "[%@] [%{public}@] Failed to get receipt with error: %{public}@",  buf,  0x20u);

          id v34 = v119;
        }

        if (!v11)
        {
          __int128 v23 = v114;
LABEL_98:

LABEL_99:
          ++*(void *)(*(void *)(a1[6] + 8LL) + 24LL);
LABEL_100:

          goto LABEL_101;
        }

        id v111 = v32;
        id v54 = v3;
        id v55 = (void *)objc_claimAutoreleasedReturnValue([v11 expirationDate]);
        __int128 v113 = v54;
        v118 = v34;
        if (os_variant_has_internal_content("com.apple.appstored"))
        {
          __int16 v56 = *(void **)(v13 + 120);
          uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v54 bundleID]);
          uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v56 objectForKeyedSubscript:v57]);

          if (v58)
          {
            id v59 = *(void **)(v13 + 120);
            uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v54 bundleID]);
            __int16 v61 = (void *)objc_claimAutoreleasedReturnValue([v59 objectForKeyedSubscript:v60]);

            uint64_t v62 = ASDLogHandleForCategory(14LL);
            uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
            __int128 v23 = v114;
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v64 = *(void **)(v13 + 144);
              id v108 = v64;
              uint64_t v106 = (void *)objc_claimAutoreleasedReturnValue([v113 bundleID]);
              if (v61)
              {
                [v61 timeIntervalSince1970];
                uint64_t v66 = (uint64_t)v65;
              }

              else
              {
                uint64_t v66 = 0LL;
              }

              *(_DWORD *)__int128 buf = 138412802;
              v123 = v64;
              __int16 v124 = 2114;
              uint64_t v125 = (uint64_t)v106;
              __int16 v126 = 2048;
              uint64_t v127 = v66;
              _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Using QA receipt expiration date: %{time_t}ld ",  buf,  0x20u);
            }

            id v34 = v118;
            if (!v61) {
              goto LABEL_97;
            }
          }

          else
          {
            __int16 v61 = v55;
            __int128 v23 = v114;
            id v34 = v118;
            if (!v55)
            {
LABEL_97:

              id v32 = v111;
              goto LABEL_98;
            }
          }
        }

        else
        {
          __int16 v61 = v55;
          __int128 v23 = v114;
          if (!v55) {
            goto LABEL_97;
          }
        }

        unsigned int v67 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v61 timeIntervalSinceDate:v67];
        int v69 = (int)v68;
        if ((int)v68 < 1)
        {
LABEL_96:

          id v34 = v118;
          goto LABEL_97;
        }

        id v104 = v61;
        id v107 = v67;
        id v70 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
        __int128 v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
        id v121 = 0LL;
        id v72 = sub_100255D10((uint64_t)v71, (uint64_t)@"receipt-expiration-warning-threshold", &v121);
        id v109 = (void *)objc_claimAutoreleasedReturnValue(v72);
        id v73 = v121;

        id v105 = v73;
        if (v73)
        {
          uint64_t v74 = ASDLogHandleForCategory(14LL);
          BOOL v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            uint64_t v97 = *(void **)(v13 + 144);
            id v103 = v97;
            uint64_t v98 = objc_claimAutoreleasedReturnValue([v113 bundleID]);
            *(_DWORD *)__int128 buf = 138412802;
            v123 = v97;
            __int16 v124 = 2114;
            uint64_t v125 = v98;
            id v99 = (void *)v98;
            __int16 v126 = 2114;
            uint64_t v127 = (uint64_t)v105;
            _os_log_error_impl( (void *)&_mh_execute_header,  v75,  OS_LOG_TYPE_ERROR,  "[%@] [%{public}@] Falling back to default threshold following error loading bag key: %{public}@",  buf,  0x20u);
          }
        }

        double v76 = (double)v69;
        double v77 = 604800.0;
        if (v109)
        {
          uint64_t v78 = v113;
          __int16 v61 = v104;
        }

        else
        {
          uint64_t v78 = v113;
          __int16 v61 = v104;
        }

        uint64_t v79 = ASDLogHandleForCategory(14LL);
        id v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
        BOOL v81 = os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT);
        if (v77 >= v76)
        {
          if (v81)
          {
            id v86 = v78;
            id v87 = *(void **)(v13 + 144);
            id v102 = v87;
            SEL v88 = (void *)objc_claimAutoreleasedReturnValue([v86 bundleID]);
            if (v107)
            {
              [v107 timeIntervalSince1970];
              objc_msgSend(v61, "timeIntervalSince1970", (uint64_t)v89);
            }

            else
            {
              objc_msgSend(v61, "timeIntervalSince1970", 0);
            }

            *(_DWORD *)__int128 buf = 138413314;
            v123 = v87;
            __int16 v124 = 2114;
            uint64_t v125 = (uint64_t)v88;
            __int16 v126 = 2048;
            uint64_t v127 = (uint64_t)(v76 / 86400.0);
            __int16 v128 = 2048;
            uint64_t v129 = v100;
            __int16 v130 = 2048;
            uint64_t v131 = (uint64_t)v90;
            _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Receipt expiration in %ld days today: %{time_t}ld expiration: %{time_t}ld",  buf,  0x34u);

            uint64_t v78 = v113;
            __int128 v23 = v114;
          }

          id v91 = *(void **)(v13 + 88);
          id v92 = (void *)objc_claimAutoreleasedReturnValue([v78 bundleID]);
          [v91 setObject:v61 forKeyedSubscript:v92];

          if (*(void *)(v13 + 104) && objc_msgSend(v61, "compare:") == (id)1) {
            goto LABEL_95;
          }
          objc_storeStrong((id *)(v13 + 104), v61);
          id v93 = v113;
          id v80 = *(os_log_s **)(v13 + 96);
          *(void *)(v13 + 96) = v93;
        }

        else if (v81)
        {
          id v82 = *(void **)(v13 + 144);
          id v115 = v82;
          id v101 = (void *)objc_claimAutoreleasedReturnValue([v113 bundleID]);
          if (v107)
          {
            [v107 timeIntervalSince1970];
            uint64_t v84 = (uint64_t)v83;
          }

          else
          {
            uint64_t v84 = 0LL;
          }

          [v61 timeIntervalSince1970];
          *(_DWORD *)__int128 buf = 138413314;
          v123 = v82;
          __int16 v124 = 2114;
          uint64_t v125 = (uint64_t)v101;
          __int16 v126 = 2048;
          uint64_t v127 = (uint64_t)(v76 / 86400.0);
          __int16 v128 = 2048;
          uint64_t v129 = v84;
          __int16 v130 = 2048;
          uint64_t v131 = (uint64_t)v85;
          _os_log_impl( (void *)&_mh_execute_header,  v80,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] [Silent] Receipt expiration in %ld days today: %{time_t}ld expiration: %{time_t}ld",  buf,  0x34u);
        }

LABEL_95:
        unsigned int v67 = v107;
        goto LABEL_96;
      }

      char v12 = 1;
    }

    else
    {
      id v11 = 0LL;
      char v12 = 0;
    }

    uint64_t v13 = a1[4];
    if (!v13) {
      goto LABEL_100;
    }
    char v14 = v12 ^ 1;
    if (!*(_BYTE *)(v13 + 136)) {
      char v14 = 1;
    }
    if ((v14 & 1) != 0) {
      goto LABEL_100;
    }
    id v15 = v3;
    id v11 = v11;
    goto LABEL_19;
  }

  uint64_t v5 = ASDLogHandleForCategory(14LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[4];
    if (v7) {
      uint64_t v8 = *(void **)(v7 + 144);
    }
    else {
      uint64_t v8 = 0LL;
    }
    id v9 = v8;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
    *(_DWORD *)__int128 buf = 138412546;
    v123 = v8;
    __int16 v124 = 2114;
    uint64_t v125 = (uint64_t)v10;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Receipt refresh migrating VPP app",  buf,  0x16u);
  }

  sub_1001EED68((void *)a1[4], v3);
  ++*(void *)(*(void *)(a1[5] + 8LL) + 24LL);
LABEL_101:
  objc_autoreleasePoolPop(v4);
}

id sub_10024FF64(id result)
{
  if (result)
  {
    id v1 = result;
    dispatch_semaphore_t v2 = (void *)objc_claimAutoreleasedReturnValue([result completionBlock]);

    if (v2)
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 completionBlock]);
      id v4 = [v3 copy];

      dispatch_queue_global_t global_queue = dispatch_get_global_queue(21LL, 0LL);
      id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      uint64_t v8 = _NSConcreteStackBlock;
      uint64_t v9 = 3221225472LL;
      uint64_t v10 = sub_100250144;
      id v11 = &unk_1003E9D48;
      char v12 = v1;
      id v13 = v4;
      id v7 = v4;
      dispatch_async(v6, &v8);
    }

    return objc_msgSend(v1, "setCompletionBlock:", 0, v8, v9, v10, v11, v12);
  }

  return result;
}

id sub_100250038(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 32LL, 1);
  }
  return result;
}

uint64_t sub_100250050(uint64_t result)
{
  if (result) {
    return *(_BYTE *)(result + 24) & 1;
  }
  return result;
}

uint64_t sub_100250144(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

InstallTestFlightAppsTask *sub_100250250(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  id v9 = a2;
  uint64_t v10 = objc_opt_self(a1);
  id v11 = objc_alloc(&OBJC_CLASS___InstallTestFlightAppsTask);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_1002503B0;
  v21[3] = &unk_1003EE848;
  uint64_t v23 = v10;
  char v12 = (NSArray *)v7;
  SEL v22 = v12;
  BOOL v24 = v8 != 0LL;
  id v13 = sub_1002B86C0(v9, v21);
  char v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

  id v15 = v14;
  if (v11)
  {
    v25.receiver = v11;
    v25.super_class = (Class)&OBJC_CLASS___InstallTestFlightAppsTask;
    id v11 = (InstallTestFlightAppsTask *)objc_msgSendSuper2(&v25, "init");
    if (v11)
    {
      id v16 = [v15 copy];
      uint64_t v17 = *(void **)&v11->super._success;
      *(void *)&v11->super._success = v16;
    }
  }

  LOBYTE(v11->super._error) = v8 != 0LL;
  installs = v11->_installs;
  v11->_installs = v12;
  unsigned int v19 = v12;

  return v11;
}

AppInstall *sub_1002503B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v105 = a1;
  uint64_t v6 = a1 + 32;
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(v6 + 8);
  id v7 = v3;
  id v8 = v5;
  uint64_t v9 = objc_opt_self(v4);
  uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 processInfo]);

  char v12 = (void *)objc_claimAutoreleasedReturnValue([v11 bundleIdentifier]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v12, @"client_id");

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v13, @"bundle_id");

  char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v14, @"external_id");

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleID]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[ApplicationProxy proxyForBundleID:](&OBJC_CLASS___ApplicationProxy, "proxyForBundleID:", v15));

  else {
    uint64_t v17 = &off_10040CAF0;
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v17,  @"coordinator_intent");
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v7 account]);
  id v19 = sub_1002521D4((uint64_t)&OBJC_CLASS___ACAccountStore, v18);
  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

  if (v20)
  {
    SEL v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "ams_DSID"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v21, @"account_id");

    SEL v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "ams_altDSID"));
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v22, @"alt_dsid");

    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v20 username]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v23, @"apple_id");
  }

  BOOL v24 = (void *)objc_claimAutoreleasedReturnValue([v7 artworkURL]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v24, @"artwork_url");

  objc_super v25 = (void *)objc_claimAutoreleasedReturnValue([v7 itemID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v25, @"item_id");

  id v26 = (void *)objc_claimAutoreleasedReturnValue([v7 itemName]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v26, @"bundle_name");

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v7 receipt]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v27, @"receipt");

  id v28 = (void *)objc_claimAutoreleasedReturnValue([v7 bundleVersion]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v28, @"bundle_version");

  [v7 softwarePlatform];
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v29,  @"software_platform");

  uint64_t v30 = objc_claimAutoreleasedReturnValue([v7 placeholderEntitlements]);
  if (v30)
  {
    id v106 = 0LL;
    unsigned __int8 v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v30,  1LL,  &v106));
    id v32 = v106;
    if (v31)
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v31,  @"placeholder_entitlements");
    }

    else
    {
      uint64_t v33 = ASDLogHandleForCategory(2LL);
      id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138543618;
        *(void *)&uint8_t buf[4] = v30;
        __int16 v108 = 2114;
        id v109 = v32;
        _os_log_error_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_ERROR,  "Failed to encode placeholder entitlements: %{public}@ error: %{public}@",  buf,  0x16u);
      }
    }
  }

  id v35 = (void *)objc_claimAutoreleasedReturnValue([v7 messagesArtworkURL]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v35,  @"messages_artwork_url");

  id v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v7 hasMessagesExtension]));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v36,  @"has_messages_extension");

  id v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v7 isLaunchProhibited]));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v37,  @"launch_prohibited");

  id v38 = (void *)objc_claimAutoreleasedReturnValue([v7 storeFront]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v38, @"storefront");

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"approved");
  else {
    id v39 = &off_10040CB20;
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v39,  @"metrics_install_type");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  &off_10040CB38,  @"source_type");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  &off_10040CB38,  @"bootstrapped");
  id v103 = (void *)v30;
  if ([v7 userInitiated])
  {
    id v40 = &off_1003EAF80;
    id v41 = &off_10040CB50;
    char v42 = &off_1003ED268;
  }

  else
  {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  &off_10040CB38,  @"automatic_type");
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  &off_10040CB68,  @"priority");
    id v40 = &off_1003EAF78;
    id v41 = (_UNKNOWN **)&__kCFBooleanTrue;
    char v42 = &off_1003ED2B0;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v41, *v42);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", *v40, @"log_code");
  id v43 = v7;
  objc_opt_self(v9);
  unsigned int v44 = objc_alloc_init(&OBJC_CLASS___MIStoreMetadata);
  id v45 = (void *)objc_claimAutoreleasedReturnValue([v43 vendorName]);
  -[MIStoreMetadata setArtistName:](v44, "setArtistName:", v45);

  -[MIStoreMetadata setKind:](v44, "setKind:", @"software");
  id v46 = (void *)objc_claimAutoreleasedReturnValue([v43 itemID]);
  -[MIStoreMetadata setItemID:](v44, "setItemID:", v46);

  uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v43 itemName]);
  -[MIStoreMetadata setItemName:](v44, "setItemName:", v47);

  char v48 = (void *)objc_claimAutoreleasedReturnValue([v43 externalVersionIdentifier]);
  -[MIStoreMetadata setBetaExternalVersionIdentifier:](v44, "setBetaExternalVersionIdentifier:", v48);

  __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([v43 betaBuildGroupID]);
  -[MIStoreMetadata setBetaBuildGroupID:](v44, "setBetaBuildGroupID:", v49);

  id v50 = (void *)objc_claimAutoreleasedReturnValue([v43 bundleID]);
  -[MIStoreMetadata setSoftwareVersionBundleID:](v44, "setSoftwareVersionBundleID:", v50);

  -[MIStoreMetadata setHasMessagesExtension:]( v44,  "setHasMessagesExtension:",  [v43 hasMessagesExtension]);
  -[MIStoreMetadata setLaunchProhibited:](v44, "setLaunchProhibited:", [v43 isLaunchProhibited]);
  __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v43 initialODRSize]);
  -[MIStoreMetadata setInitialODRSize:](v44, "setInitialODRSize:", v51);

  -[MIStoreMetadata setSourceApp:](v44, "setSourceApp:", @"com.apple.TestFlight");
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v43 storeCohort]);
  -[MIStoreMetadata setStoreCohort:](v44, "setStoreCohort:", v52);

  __int128 v53 = (void *)objc_claimAutoreleasedReturnValue([v43 storeFront]);
  -[MIStoreMetadata setStorefront:](v44, "setStorefront:", v53);

  id v54 = (void *)objc_claimAutoreleasedReturnValue([v43 packageSINF]);
  if (v54 && v44) {
    sub_100304410(v44, v54, 0);
  }
  id v55 = (void *)objc_claimAutoreleasedReturnValue([v43 genre]);
  __int16 v56 = (void *)objc_claimAutoreleasedReturnValue([v55 genre]);
  -[MIStoreMetadata setGenre:](v44, "setGenre:", v56);

  uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v43 genre]);
  uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v57 genreID]);
  -[MIStoreMetadata setGenreID:](v44, "setGenreID:", v58);

  id v59 = (void *)objc_claimAutoreleasedReturnValue([v43 subGenres]);
  id v60 = sub_1002B86C0(v59, &stru_1003EE8C8);
  __int16 v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
  -[MIStoreMetadata setSubGenres:](v44, "setSubGenres:", v61);

  if (v20) {
    sub_1003042C8(v44, v20);
  }
  id v104 = v16;
  id v62 = sub_100304244((uint64_t)v44, 0LL);
  uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v10, "setObject:forKeyedSubscript:", v63, @"store_metadata");

  unsigned int v64 = -[SQLiteMemoryEntity initWithPropertyValues:]( objc_alloc(&OBJC_CLASS___AppInstall),  "initWithPropertyValues:",  v10);
  double v65 = (void *)objc_claimAutoreleasedReturnValue([v43 account]);
  -[SQLiteMemoryEntity setValue:forExternalProperty:](v64, "setValue:forExternalProperty:", v65, @"account");

  uint64_t v66 = sub_1002E5EDC((uint64_t)&OBJC_CLASS___AppInstallPolicy);
  unsigned int v67 = (id *)objc_claimAutoreleasedReturnValue(v66);
  sub_100323D30(v64, v67);
  id v68 = v43;
  uint64_t v69 = objc_opt_self(v9);
  id v70 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v71 = (void *)objc_claimAutoreleasedReturnValue([v68 packageDPInfo]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v70, "setObject:forKeyedSubscript:", v71, @"dp_info");

  id v72 = (void *)objc_claimAutoreleasedReturnValue([v68 packageSINF]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v70, "setObject:forKeyedSubscript:", v72, @"sinf");

  id v73 = (void *)objc_claimAutoreleasedReturnValue([v68 initialODRSize]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v70,  "setObject:forKeyedSubscript:",  v73,  @"initial_odr_size");

  uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([v68 packageURL]);
  BOOL v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 1LL));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v70, "setObject:forKeyedSubscript:", v75, @"archive_type");

  double v76 = (void *)objc_claimAutoreleasedReturnValue([v68 packageURL]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v70, "setObject:forKeyedSubscript:", v76, @"package_url");

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v70,  "setObject:forKeyedSubscript:",  &off_10040CB80,  @"package_type");
  double v77 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v68 packageCompression]));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v70, "setObject:forKeyedSubscript:", v77, @"compression");

  uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v68 packageSize]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v70, "setObject:forKeyedSubscript:", v78, @"bytes_total");

  uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([v68 variantID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v70, "setObject:forKeyedSubscript:", v79, @"variant_id");

  id v80 = (void *)objc_claimAutoreleasedReturnValue([v68 provisioningProfiles]);
  id v81 = [v80 count];

  if (v81)
  {
    id v82 = (id)objc_claimAutoreleasedReturnValue([v68 provisioningProfiles]);
    objc_opt_self(v69);
    id v83 = sub_1002B86C0(v82, &stru_1003EE908);
    uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue(v83);

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v70,  "setObject:forKeyedSubscript:",  v84,  @"provisioning_profiles");
  }

  double v85 = -[SQLiteMemoryEntity initWithPropertyValues:]( objc_alloc(&OBJC_CLASS___AppPackage),  "initWithPropertyValues:",  v70);

  if (v85)
  {
    *(void *)__int128 buf = v85;
    id v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", buf, 1LL));
    if (v64) {
      objc_setProperty_atomic_copy(v64, v86, v87, 40LL);
    }
  }

  uint64_t v88 = ASDLogHandleForCategory(2LL);
  double v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v90 = *(void *)(v105 + 32);
    id v91 = (void *)objc_claimAutoreleasedReturnValue([v68 bundleID]);
    unsigned int v92 = [v68 userInitiated];
    *(_DWORD *)__int128 buf = 138543874;
    *(void *)&uint8_t buf[4] = v90;
    __int16 v108 = 2114;
    id v109 = v91;
    __int16 v110 = 1024;
    LODWORD(v111) = v92;
    _os_log_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Starting TestFlight installation for %{public}@ userInitiated = %{BOOL}d",  buf,  0x1Cu);
  }

  if (*(_BYTE *)(v105 + 48))
  {
    -[SQLiteMemoryEntity setValue:forProperty:]( v64,  "setValue:forProperty:",  &__kCFBooleanTrue,  @"remote_install");
    -[SQLiteMemoryEntity setValue:forProperty:](v64, "setValue:forProperty:", &off_10040CAC0, v102);
    id v93 = (void *)objc_claimAutoreleasedReturnValue([v68 companionBundleID]);

    if (v93)
    {
      id v94 = (void *)objc_claimAutoreleasedReturnValue([v68 companionBundleID]);
      -[SQLiteMemoryEntity setValue:forProperty:](v64, "setValue:forProperty:", v94, @"companion_bundle_id");
    }

    else
    {
      id v94 = (void *)objc_claimAutoreleasedReturnValue([v68 itemID]);
      if (v94)
      {
        id v106 = 0LL;
        id v95 = -[LSApplicationRecord initWithStoreItemIdentifier:error:]( [LSApplicationRecord alloc],  "initWithStoreItemIdentifier:error:",  [v94 unsignedLongLongValue],  &v106);
        id v96 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord bundleIdentifier](v95, "bundleIdentifier"));

        if (v96)
        {
          uint64_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord bundleIdentifier](v95, "bundleIdentifier"));
          -[SQLiteMemoryEntity setValue:forProperty:](v64, "setValue:forProperty:", v97, @"companion_bundle_id");
        }

        else
        {
          uint64_t v98 = ASDLogHandleForCategory(2LL);
          uint64_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
          if (os_log_type_enabled(v97, OS_LOG_TYPE_ERROR))
          {
            uint64_t v100 = *(void *)(v105 + 32);
            id v101 = (void *)objc_claimAutoreleasedReturnValue([v68 bundleID]);
            *(_DWORD *)__int128 buf = 138543874;
            *(void *)&uint8_t buf[4] = v100;
            __int16 v108 = 2114;
            id v109 = v101;
            __int16 v110 = 2114;
            id v111 = v106;
            _os_log_error_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_ERROR,  "[%{public}@] Received request to install %{public}@ remotely but we don't have a companion bundle ID for i t. Error: %{public}@",  buf,  0x20u);
          }
        }
      }
    }
  }

  return v64;
}

id sub_100251170(id *a1)
{
  if (a1)
  {
    [a1 lock];
    id v2 = [a1[8] copy];
    [a1 unlock];
  }

  else
  {
    id v2 = 0LL;
  }

  return v2;
}

AppInstallPolicy *__cdecl sub_1002516F8(id a1, BOOL a2, AppInstallPolicy *a3)
{
  return a3;
}

id sub_10025170C(id a1, ASDTestFlightAppGenre *a2)
{
  id v2 = a2;
  id v3 = objc_alloc(&OBJC_CLASS___MIStoreMetadataSubGenre);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[ASDTestFlightAppGenre genre](v2, "genre"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[ASDTestFlightAppGenre genreID](v2, "genreID"));

  id v6 = [v3 initWithGenre:v4 genreID:v5];
  return v6;
}

id sub_10025178C(id a1, NSData *a2)
{
  return -[NSData base64EncodedStringWithOptions:](a2, "base64EncodedStringWithOptions:", 0LL);
}

id *sub_1002517EC(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)&OBJC_CLASS___PushRegisterTask;
    char v14 = (id *)objc_msgSendSuper2(&v16, "init");
    a1 = v14;
    if (v14)
    {
      objc_storeStrong(v14 + 5, a2);
      objc_storeStrong(a1 + 6, a3);
      objc_storeStrong(a1 + 7, a4);
      objc_storeStrong(a1 + 8, a5);
    }
  }

  return a1;
}

id *sub_100252094(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___DispatchQueue;
    uint64_t v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

id sub_100252108(uint64_t a1)
{
  if (qword_100462430 != -1) {
    dispatch_once(&qword_100462430, &stru_1003EE928);
  }
  return (id)qword_100462438;
}

void sub_10025214C(id a1)
{
  id v1 = objc_alloc(&OBJC_CLASS___DispatchQueue);
  dispatch_queue_attr_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  id v3 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v2);
  dispatch_queue_t v4 = dispatch_queue_create("com.apple.appstored.DispatchQueue.default", v3);
  uint64_t v5 = sub_100252094((id *)&v1->super.isa, v4);

  id v6 = (void *)qword_100462438;
  qword_100462438 = (uint64_t)v5;
}

id sub_1002521D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  dispatch_queue_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ams_altDSID"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ams_DSID"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 username]);
  objc_super v7 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ams_iTunesAccounts"));

  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_100252318;
  v17[3] = &unk_1003EE950;
  id v18 = v4;
  id v19 = v5;
  id v20 = v6;
  id v9 = v6;
  id v10 = v5;
  id v11 = v4;
  id v12 = sub_1002B84E4(v8, v17);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  char v14 = v13;
  if (!v13) {
    id v13 = v3;
  }
  id v15 = v13;

  return v15;
}

uint64_t sub_100252318(void *a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_altDSID"));
  if (([v5 isEqualToString:a1[4]] & 1) == 0)
  {
    uint64_t v7 = a1[5];
    if (v7
      && (dispatch_queue_attr_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_DSID")),
          ([v2 isEqualToNumber:a1[5]] & 1) != 0))
    {
      uint64_t v6 = 1LL;
    }

    else
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 username]);
      uint64_t v6 = (uint64_t)[v8 isEqualToString:a1[6]];

      if (!v7) {
        goto LABEL_8;
      }
    }

    goto LABEL_8;
  }

  uint64_t v6 = 1LL;
LABEL_8:

  return v6;
}

NSError *sub_1002523CC(int a1)
{
  id v4 = sqlite3_errstr(a1);
  if (v4 && *v4)
  {
    NSErrorUserInfoKey v8 = NSLocalizedDescriptionKey;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v4));
    id v9 = v5;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  uint64_t v7 = -[NSError initWithDomain:code:userInfo:]( objc_alloc(&OBJC_CLASS___NSError),  "initWithDomain:code:userInfo:",  @"SQLiteErrorDomain",  a1,  v6);

  return v7;
}

void sub_1002524D4(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 UUIDString]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 substringToIndex:8]);

  id v7 = sub_1002526A8(v3, 0LL);
  NSErrorUserInfoKey v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = sub_1002526A8(v3, 1LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 stringByAppendingString:v6]);
  id v22 = 0LL;
  [v11 moveItemAtPath:v8 toPath:v12 error:&v22];
  id v13 = v22;

  char v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v10 stringByAppendingString:v6]);
  id v21 = v13;
  [v14 moveItemAtPath:v10 toPath:v15 error:&v21];
  id v16 = v21;

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByAppendingString:v6]);
  id v20 = v16;
  [v17 moveItemAtPath:v3 toPath:v18 error:&v20];

  id v19 = v20;
  if (a2 && v19) {
    *a2 = v19;
  }
}

id sub_1002526A8(void *a1, uint64_t a2)
{
  id v4 = a1;
  uint64_t v5 = v4;
  if (!a2)
  {
    uint64_t v6 = @"-shm";
    goto LABEL_5;
  }

  if (a2 == 1)
  {
    uint64_t v6 = @"-wal";
LABEL_5:
    dispatch_queue_attr_t v2 = (void *)objc_claimAutoreleasedReturnValue([v4 stringByAppendingString:v6]);
  }

  return v2;
}

BOOL sub_10025270C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSFileManager);
  id v5 = sub_1002526A8(v3, 0LL);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v16 = 0LL;
  -[NSFileManager removeItemAtPath:error:](v4, "removeItemAtPath:error:", v6, &v16);
  id v7 = v16;

  id v8 = sub_1002526A8(v3, 1LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v15 = v7;
  -[NSFileManager removeItemAtPath:error:](v4, "removeItemAtPath:error:", v9, &v15);
  id v10 = v15;

  id v14 = v10;
  BOOL v11 = -[NSFileManager removeItemAtPath:error:](v4, "removeItemAtPath:error:", v3, &v14);

  id v12 = v14;
  if (a2 && v12) {
    *a2 = v12;
  }

  return v11;
}

uint64_t sub_10025281C(sqlite3 **a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  ppDb = 0LL;
  if (v3)
  {
    id v6 = objc_getProperty(v3, v4, 24LL, 1);
    if (*((_BYTE *)v5 + 8))
    {
      int v7 = 2;
      goto LABEL_7;
    }
  }

  else
  {
    id v6 = 0LL;
  }

  id v8 = objc_alloc_init(&OBJC_CLASS___NSFileManager);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 stringByDeletingLastPathComponent]);
  -[NSFileManager createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v8,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v9,  1LL,  0LL,  0LL);

  if (!v5)
  {
    id v11 = 0LL;
    int v7 = 6;
    goto LABEL_19;
  }

  int v7 = 6;
LABEL_7:
  id v10 = *((id *)v5 + 5);
  if (v10)
  {
    id v11 = v10;
    if ([v11 isEqualToString:NSFileProtectionNone])
    {
      int v12 = 0x400000;
    }

    else if ([v11 isEqualToString:NSFileProtectionComplete])
    {
      int v12 = 0x100000;
    }

    else if ([v11 isEqualToString:NSFileProtectionCompleteUnlessOpen])
    {
      int v12 = 0x200000;
    }

    else if ([v11 isEqualToString:NSFileProtectionCompleteUntilFirstUserAuthentication])
    {
      int v12 = 3145728;
    }

    else
    {
      int v12 = 0;
    }

    v7 |= v12;
  }

  else
  {
    id v11 = 0LL;
  }

void sub_100252E18(void *a1, void *a2)
{
  id v5 = a2;
  if (a1)
  {
    id Property = (void (**)(id, id))objc_getProperty(a1, v3, 32LL, 1);
    if (Property) {
      Property[2](Property, v5);
    }
  }
}

id sub_100252E6C(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(7LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "(SZStreamConsumer) Finishing extractor stream",  buf,  2u);
  }

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100252F1C;
  v7[3] = &unk_1003E9CA8;
  void v7[4] = v4;
  return [v5 finishStreamWithCompletionBlock:v7];
}

void sub_100252F1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory(7LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    int v8 = 138412290;
    id v9 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "(SZStreamConsumer) Extractor stream finished, error = %@",  (uint8_t *)&v8,  0xCu);
  }

  [*(id *)(*(void *)(a1 + 32) + 24) close];
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(void **)(v6 + 24);
  *(void *)(v6 + 24) = 0LL;
}

void sub_100252FF4(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(7LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)id v33 = 0;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "(SZStreamConsumer) Reading available data",  v33,  2u);
  }

  *(void *)id v33 = 0LL;
  id v34 = v33;
  uint64_t v35 = 0x3032000000LL;
  uint64_t v36 = sub_100253398;
  id v37 = sub_1002533A8;
  id v38 = 0LL;
  dispatch_semaphore_t v4 = dispatch_semaphore_create(0LL);
  uint64_t v5 = 0LL;
  uint64_t v28 = ASDErrorDomain;
  *(void *)&__int128 v6 = 138543362LL;
  __int128 v27 = v6;
  while (objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "hasBytesAvailable", v27))
  {
    int v7 = objc_autoreleasePoolPush();
    int v8 = -[NSMutableData initWithLength:](objc_alloc(&OBJC_CLASS___NSMutableData), "initWithLength:", 0x100000LL);
    id v9 = *(void **)(*(void *)(a1 + 32) + 24LL);
    id v10 = v8;
    id v11 = -[NSMutableData mutableBytes](v10, "mutableBytes");
    id v12 = -[NSMutableData length](v10, "length");
    id v13 = (id *)(v34 + 40);
    id obj = (id)*((void *)v34 + 5);
    uint64_t v14 = (uint64_t)[v9 readBytes:v11 length:v12 error:&obj];
    objc_storeStrong(v13, obj);
    if (v14 < 1)
    {
      if (v14 < 0)
      {
        if (!*((void *)v34 + 5))
        {
          uint64_t v21 = ASDErrorWithDescription(v28, 814LL, @"A stream failed, but did not return an error");
          uint64_t v22 = objc_claimAutoreleasedReturnValue(v21);
          uint64_t v23 = (void *)*((void *)v34 + 5);
          *((void *)v34 + 5) = v22;
        }

        uint64_t v24 = ASDLogHandleForCategory(7LL);
        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = *((void *)v34 + 5);
          *(_DWORD *)__int128 buf = v27;
          uint64_t v40 = v26;
          _os_log_error_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_ERROR,  "(SZStreamConsumer) Error occurred upstream: %{public}@",  buf,  0xCu);
        }

        sub_100252E18(*(void **)(a1 + 32), *((void **)v34 + 5));
        char v18 = 0;
        goto LABEL_16;
      }

      if (++v5 != 3)
      {
        char v18 = 1;
        goto LABEL_16;
      }

      uint64_t v19 = ASDLogHandleForCategory(7LL);
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "(SZStreamConsumer) Looped 3 times but no more data was available",  buf,  2u);
      }

      char v18 = 0;
      uint64_t v5 = 3LL;
    }

    else
    {
      -[NSMutableData setLength:](v10, "setLength:", v14);
      id v15 = *(void **)(*(void *)(a1 + 32) + 16LL);
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472LL;
      v29[2] = sub_1002533B0;
      v29[3] = &unk_1003EE978;
      uint64_t v31 = v33;
      id v16 = v4;
      BOOL v30 = v16;
      [v15 supplyBytes:v10 withCompletionBlock:v29];
      dispatch_semaphore_wait(v16, 0xFFFFFFFFFFFFFFFFLL);
      uint64_t v17 = (void *)*((void *)v34 + 5);
      if (v17)
      {
        sub_100252E18(*(void **)(a1 + 32), v17);
        char v18 = 0;
      }

      else
      {
        char v18 = 1;
      }

      id v20 = (os_log_s *)v30;
    }

LABEL_16:
    objc_autoreleasePoolPop(v7);
    if ((v18 & 1) == 0) {
      break;
    }
  }

  _Block_object_dispose(v33, 8);
}

void sub_100253368( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100253398(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002533A8(uint64_t a1)
{
}

void sub_1002533B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory(7LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    int v9 = 138412290;
    id v10 = v3;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "(SZStreamConsumer) Bytes supplied, error = %@",  (uint8_t *)&v9,  0xCu);
  }

  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  int v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v3;
  id v8 = v3;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id *sub_1002534D8(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)&OBJC_CLASS___IAPInfoDAAPRequestEncoder;
    id v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

id sub_1002539B8(uint64_t a1)
{
  if (qword_100462440 != -1) {
    dispatch_once(&qword_100462440, &stru_1003EE998);
  }
  return (id)qword_100462448;
}

void sub_1002539FC(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___Migrator);
  uint64_t v2 = (void *)qword_100462448;
  qword_100462448 = (uint64_t)v1;
}

void sub_100253B04(uint64_t a1)
{
  int v2 = sub_100253DA8((uint64_t)&OBJC_CLASS___Migrator);
  uint64_t v3 = ASDLogHandleForCategory(17LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (v5)
    {
      id v12 = sub_1001EA32C(*(id **)(*(void *)(a1 + 32) + 8LL));
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "componentsJoinedByString:", @", "));
      *(_DWORD *)__int128 buf = 138543362;
      v23[0] = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Queuing up previously unfinished migrations: [%{public}@]",  buf,  0xCu);
    }

    id v15 = *(void **)(a1 + 32);
    uint64_t v16 = v15[1];
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    void v20[2] = sub_100253E1C;
    v20[3] = &unk_1003EE9C0;
    uint64_t v21 = v15;
    sub_1001EA248(v16, v20);
    sub_100253F78(*(void *)(a1 + 32));
    id v8 = v21;
    goto LABEL_15;
  }

  if (v5)
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Performing initial migration", buf, 2u);
  }

  sub_1001EA098(*(void *)(*(void *)(a1 + 32) + 8LL));
  uint64_t v6 = *(void *)(a1 + 32);
  if (v6)
  {
    id v7 = sub_1001E1834((uint64_t)&OBJC_CLASS___DeviceStateMonitor);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = ASDLogHandleForCategory(17LL);
    objc_super v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v11)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Bootstrap - Proceeding to migration",  buf,  2u);
      }

      sub_1002542E4(v6, 1uLL);
    }

    else
    {
      if (v11)
      {
        *(_DWORD *)__int128 buf = 67109376;
        LODWORD(v23[0]) = 0;
        WORD2(v23[0]) = 1024;
        *(_DWORD *)((char *)v23 + 6) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Bootstrap -  Creating observer to migrate when os setup is complete: %d migrator complete: %d",  buf,  0xEu);
      }

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      id v18 = sub_1001E1834((uint64_t)&OBJC_CLASS___DeviceStateMonitor);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      [v17 addObserver:v6 selector:"_handleMonitorStateDidChangeNotification:" name:@"DeviceStateDidChangeNotification" object:v19];
    }

uint64_t sub_100253DA8(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDevice buildVersion](&OBJC_CLASS___AMSDevice, "buildVersion"));
  CFPropertyListRef v2 = sub_1002FA704((uint64_t)&OBJC_CLASS___AppDefaultsManager);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = v3;
  if (v3) {
    uint64_t v5 = [v3 isEqualToString:v1] ^ 1;
  }
  else {
    uint64_t v5 = 1LL;
  }

  return v5;
}

void sub_100253E1C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a2;
  if (v2)
  {
    uint64_t v9 = v3;
    if (v3) {
      uint64_t v4 = (void *)v3[1];
    }
    else {
      uint64_t v4 = 0LL;
    }
    id v5 = v4;
    if ([v5 isEqualToString:@"AutomaticUpdates"])
    {
      uint64_t v6 = off_1003D9E38;
    }

    else if ([v5 isEqualToString:@"Miscellaneous"])
    {
      uint64_t v6 = off_1003D9E40;
    }

    else if ([v5 isEqualToString:@"Arcade"])
    {
      uint64_t v6 = off_1003D9E30;
    }

    else if ([v5 isEqualToString:@"DemotedApplications"])
    {
      uint64_t v6 = off_1003D9E50;
    }

    else if ([v5 isEqualToString:@"UpdateHistory"])
    {
      uint64_t v6 = off_1003D9E58;
    }

    else if ([v5 isEqualToString:@"ODR"])
    {
      uint64_t v6 = off_1003D9E48;
    }

    else
    {
      if (![v5 isEqualToString:@"ValidateAppleIDs"])
      {
LABEL_20:

        uint64_t v3 = v9;
        goto LABEL_21;
      }

      uint64_t v6 = &off_1003D9E60;
    }

    id v7 = [objc_alloc(*v6) initWithConfiguration:v9];
    if (v7)
    {
      id v8 = v7;
      sub_100255034(v2, v7, 0);
    }

    goto LABEL_20;
  }

void sub_100253F78(uint64_t a1)
{
  if (a1)
  {
    id v2 = sub_1001D17B8((uint64_t)&OBJC_CLASS___NetworkMonitor);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    unsigned __int8 v4 = [v3 isConnected];

    if ((v4 & 1) != 0)
    {
      sub_100254908(a1);
    }

    else
    {
      uint64_t v5 = ASDLogHandleForCategory(17LL);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)objc_super v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Waiting for network before running migrations",  v10,  2u);
      }

      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      id v8 = sub_1001D17B8((uint64_t)&OBJC_CLASS___NetworkMonitor);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      [v7 addObserver:a1 selector:"_handleNetworkStateDidChangeNotification:" name:@"NetworkStateDidChangeNotification" object:v9];
    }
  }

BOOL sub_100254120(uint64_t a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___MigratorConfigurationStore);
  if ((sub_100253DA8((uint64_t)&OBJC_CLASS___Migrator) & 1) != 0)
  {
    BOOL v2 = 1LL;
  }

  else if (v1)
  {
    BOOL v2 = -[NSMutableDictionary count](v1->_configuration, "count") != 0LL;
  }

  else
  {
    BOOL v2 = 0LL;
  }

  return v2;
}

BOOL sub_100254188(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100254224;
    block[3] = &unk_1003EC880;
    uint64_t v11 = a1;
    uint64_t v12 = a2;
    id v10 = v5;
    dispatch_async(v7, block);
  }

  return a1 != 0;
}

void sub_100254224(void *a1)
{
  uint64_t v2 = ASDLogHandleForCategory(17LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[6];
    int v6 = 138543618;
    uint64_t v7 = v4;
    __int16 v8 = 2048;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Performing migration for clientID: %{public}@ migrationType: %ld",  (uint8_t *)&v6,  0x16u);
  }

  sub_1002542E4(a1[5], a1[6]);
}

void sub_1002542E4(uint64_t a1, unint64_t a2)
{
  if (!a1) {
    return;
  }
  CFPropertyListRef v4 = sub_1002FA704((uint64_t)&OBJC_CLASS___AppDefaultsManager);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  int v6 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDevice buildVersion](&OBJC_CLASS___AMSDevice, "buildVersion"));
  sub_1002FA83C((uint64_t)&OBJC_CLASS___AppDefaultsManager, v6);
  sub_1002FA754((uint64_t)&OBJC_CLASS___AppDefaultsManager);
  uint64_t v7 = ASDLogHandleForCategory(17LL);
  __int16 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543618;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&_BYTE buf[12] = 2114;
    *(void *)&buf[14] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Migrating from build: %{public}@ to build: %{public}@",  buf,  0x16u);
  }

  ASDDebugLog(2LL, @"[Migrator] Migrating from build: %@ to build: %@");
  if (a2 != 1)
  {
    uint64_t v15 = (a2 >> 1) & 1;
    uint64_t v14 = (a2 >> 3) & 1;
    if ((a2 & 4) != 0) {
      goto LABEL_9;
    }
LABEL_17:
    if (!(_DWORD)v14) {
      goto LABEL_12;
    }
LABEL_18:
    uint64_t v21 = ASDLogHandleForCategory(17LL);
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Migrate from different device", buf, 2u);
    }

    if ((v15 & 1) != 0) {
      goto LABEL_13;
    }
    goto LABEL_21;
  }

  uint64_t v33 = 0LL;
  id v34 = &v33;
  uint64_t v35 = 0x2020000000LL;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))off_100462450;
  uint64_t v36 = off_100462450;
  if (!off_100462450)
  {
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_100255190;
    id v38 = &unk_1003ECDF8;
    id v39 = &v33;
    sub_100255190((uint64_t)buf);
    uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v34[3];
  }

  _Block_object_dispose(&v33, 8);
  if (!v9)
  {
    id v32 = dlerror();
    abort_report_np("%s", v32);
    __break(1u);
  }

  unsigned int v13 = v9(v10, v11, v12);
  LODWORD(v14) = (v13 >> 3) & 1;
  LODWORD(v15) = (v13 >> 1) & 1;
  if ((v13 & 4) == 0) {
    goto LABEL_17;
  }
LABEL_9:
  uint64_t v16 = ASDLogHandleForCategory(17LL);
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Restore from backup migration", buf, 2u);
  }

  if ((v14 & 1) != 0) {
    goto LABEL_18;
  }
LABEL_12:
  if ((_DWORD)v15)
  {
LABEL_13:
    uint64_t v18 = ASDLogHandleForCategory(17LL);
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Upgrade Migration", buf, 2u);
    }

    int v20 = 1;
    goto LABEL_22;
  }

void sub_10025474C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
}

void sub_1002547C4(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(17LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = sub_1001D17B8((uint64_t)&OBJC_CLASS___NetworkMonitor);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v13[0] = 67109120;
    v13[1] = [v5 isConnected];
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Network changed. Connected: %d",  (uint8_t *)v13,  8u);
  }

  id v6 = sub_1001D17B8((uint64_t)&OBJC_CLASS___NetworkMonitor);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  unsigned int v8 = [v7 isConnected];

  if (v8)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    uint64_t v10 = *(void *)(a1 + 32);
    id v11 = sub_1001D17B8((uint64_t)&OBJC_CLASS___NetworkMonitor);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    [v9 removeObserver:v10 name:@"NetworkStateDidChangeNotification" object:v12];

    sub_100254908(*(void *)(a1 + 32));
  }

void sub_100254908(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = ASDLogHandleForCategory(17LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Attempting to load bag", buf, 2u);
    }

    id v4 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    id v37 = 0LL;
    id v6 = sub_100255E30((uint64_t)v5, (uint64_t)@"available-software-updates", &v37);
    id v7 = v37;

    uint64_t v8 = ASDLogHandleForCategory(17LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = v9;
    if (v7)
    {
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138543362;
        id v54 = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Attempting migration anyway following bag load error: %{public}@",  buf,  0xCu);
      }
    }

    else if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Attempting migrations following bag load",  buf,  2u);
    }

    id v11 = objc_alloc_init(&OBJC_CLASS___TaskQueue);
    p_isa = (id *)&v11->super.isa;
    if (v11) {
      -[NSOperationQueue setName:](v11->_operationQueue, "setName:", @"com.apple.appstored.MigrateQueue");
    }
    uint64_t v36 = v7;
    id v13 = [*(id *)(a1 + 24) copy];
    [*(id *)(a1 + 24) removeAllObjects];
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v42 = 0u;
    __int128 v43 = 0u;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    id v15 = v13;
    id v16 = [v15 countByEnumeratingWithState:&v42 objects:buf count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v43;
      do
      {
        for (i = 0LL; i != v17; i = (char *)i + 1)
        {
          if (*(void *)v43 != v18) {
            objc_enumerationMutation(v15);
          }
          int v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v42 + 1) + 8 * (void)i) migratorType]);
          -[NSMutableArray addObject:](v14, "addObject:", v20);
        }

        id v17 = [v15 countByEnumeratingWithState:&v42 objects:buf count:16];
      }

      while (v17);
    }

    uint64_t v21 = ASDLogHandleForCategory(17LL);
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = -[NSMutableArray count](v14, "count");
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v14, "componentsJoinedByString:", @", "));
      *(_DWORD *)__int128 v49 = 134218242;
      id v50 = v23;
      __int16 v51 = 2114;
      uint64_t v52 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Performing %ld migration(s): [%{public}@]",  v49,  0x16u);
    }

    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    id v25 = v15;
    id v26 = [v25 countByEnumeratingWithState:&v38 objects:v49 count:16];
    if (v26)
    {
      id v27 = v26;
      uint64_t v28 = *(void *)v39;
      do
      {
        for (j = 0LL; j != v27; j = (char *)j + 1)
        {
          if (*(void *)v39 != v28) {
            objc_enumerationMutation(v25);
          }
          BOOL v30 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)j);
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 migratorType]);
          sub_1001EA458(*(id **)(a1 + 8), (uint64_t)v31);
          char v48 = v30;
          id v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v48,  1LL));
          if (p_isa) {
            [p_isa[1] addOperations:v32 waitUntilFinished:1];
          }

          uint64_t v33 = ASDLogHandleForCategory(17LL);
          id v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id v46 = 138543362;
            uint64_t v47 = v31;
            _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Migration complete for: %{public}@",  v46,  0xCu);
          }

          uint64_t v35 = *(id **)(a1 + 8);
          if (v35)
          {
            [v35[1] removeObjectForKey:v31];
            sub_1001EA0AC(v35, 1);
          }
        }

        id v27 = [v25 countByEnumeratingWithState:&v38 objects:v49 count:16];
      }

      while (v27);
    }
  }

void sub_100254DD8(uint64_t a1)
{
  id v2 = sub_1001E1834((uint64_t)&OBJC_CLASS___DeviceStateMonitor);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3 && sub_100253DA8((uint64_t)&OBJC_CLASS___Migrator))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = sub_1001E1834((uint64_t)&OBJC_CLASS___DeviceStateMonitor);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    [v4 removeObserver:v5 name:@"DeviceStateDidChangeNotification" object:v7];

    uint64_t v8 = ASDLogHandleForCategory(17LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1_Block_object_dispose(va, 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Device state changed and ready to migrate.",  (uint8_t *)&v18,  2u);
    }

    sub_1002542E4(*(void *)(a1 + 32), 1uLL);
  }

  else
  {
    if ((sub_100253DA8((uint64_t)&OBJC_CLASS___Migrator) & 1) != 0)
    {
      uint64_t v10 = ASDLogHandleForCategory(17LL);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        int v18 = 67109376;
        LODWORD(v19[0]) = v3 != 0LL;
        WORD2(v19[0]) = 1024;
        *(_DWORD *)((char *)v19 + 6) = v19[0];
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Device state changed setup not ready for migrate. Setup complete: %d migrator complete: %d",  (uint8_t *)&v18,  0xEu);
      }
    }

    else
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      uint64_t v13 = *(void *)(a1 + 32);
      id v14 = sub_1001E1834((uint64_t)&OBJC_CLASS___DeviceStateMonitor);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      [v12 removeObserver:v13 name:@"DeviceStateDidChangeNotification" object:v15];

      uint64_t v16 = ASDLogHandleForCategory(17LL);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v17 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDevice buildVersion](&OBJC_CLASS___AMSDevice, "buildVersion"));
        int v18 = 138543362;
        v19[0] = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Device state changed setup fired after we have already performed a migration for build: %{public}@",  (uint8_t *)&v18,  0xCu);
      }
    }
  }
}

void sub_100255034(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a3)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    id v8 = [v5 copyConfiguration];
    sub_1001EA4B8(v7, v8);
  }

  uint64_t v9 = *(void **)(a1 + 24);
  if (!v9)
  {
    uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v11 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v10;

    uint64_t v9 = *(void **)(a1 + 24);
  }

  [v9 addObject:v6];
  uint64_t v12 = ASDLogHandleForCategory(17LL);
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 migratorType]);
    int v15 = 138543362;
    uint64_t v16 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "Queuing migration task: %{public}@",  (uint8_t *)&v15,  0xCu);
  }
}

void *sub_100255190(uint64_t a1)
{
  id v5 = 0LL;
  if (!qword_100462458)
  {
    __int128 v6 = off_1003EE9E0;
    uint64_t v7 = 0LL;
    qword_100462458 = _sl_dlopen(&v6, &v5);
    uint64_t v3 = v5;
    id v2 = (void *)qword_100462458;
    if (qword_100462458)
    {
      if (!v5) {
        goto LABEL_5;
      }
    }

    else
    {
      uint64_t v3 = (char *)abort_report_np("%s", v5);
    }

    free(v3);
    goto LABEL_5;
  }

  id v2 = (void *)qword_100462458;
LABEL_5:
  uint64_t result = dlsym(v2, "DMGetUserDataDisposition");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = result;
  off_100462450 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_100255280(void *a1)
{
  if (a1)
  {
    if (([a1 isRemoteInstall] & 1) == 0)
    {
      id v2 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device);
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
      id v7 = objc_msgSend(v3, "copyThinningHeadersForPlatform:", objc_msgSend(a1, "expectedSoftwarePlatform"));

      if (v7)
      {
        id v4 = (void *)objc_claimAutoreleasedReturnValue([a1 additionalHeaders]);
        id v5 = [v4 mutableCopy];

        if (v5)
        {
          [v5 addEntriesFromDictionary:v7];
          id v6 = [v5 copy];
          [a1 setAdditionalHeaders:v6];
        }

        else
        {
          [a1 setAdditionalHeaders:v7];
        }
      }
    }
  }

void sub_100255364(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if ([v3 isInstalled])
    {
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v4 deviceIdentifierForVendor]);
      if (!v5)
      {
LABEL_16:
        uint64_t v17 = ASDLogHandleForCategory(25LL);
        id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
          goto LABEL_17;
        }
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([a1 logKey]);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v21 = v16;
        _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[%@] Cannot determine vendor ID for purchase",  buf,  0xCu);
LABEL_15:

LABEL_17:
        goto LABEL_18;
      }
    }

    else
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([a1 vendorName]);

      if (!v6) {
        goto LABEL_16;
      }
      id v7 = (void *)objc_claimAutoreleasedReturnValue([a1 bundleID]);
      if (!v7)
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([a1 vendorName]);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 UUIDString]);
        id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"xyz.%@.%@",  v8,  v10));

        uint64_t v11 = ASDLogHandleForCategory(25LL);
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          int v18 = (void *)objc_claimAutoreleasedReturnValue([a1 logKey]);
          uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([a1 vendorName]);
          *(_DWORD *)__int128 buf = 138412802;
          uint64_t v21 = v18;
          __int16 v22 = 2114;
          id v23 = v7;
          __int16 v24 = 2114;
          id v25 = v19;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "[%@] Creating temporary bundle identifier %{public}@ for vendor %{public}@",  buf,  0x20u);
        }

        [a1 setTemporaryBundleID:v7];
      }

      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationWorkspace defaultWorkspace]( &OBJC_CLASS___LSApplicationWorkspace,  "defaultWorkspace"));
      id v14 = (void *)objc_claimAutoreleasedReturnValue([a1 vendorName]);
      int v15 = (void *)objc_claimAutoreleasedReturnValue([v13 createDeviceIdentifierWithVendorName:v14 bundleIdentifier:v7]);

      if (v15)
      {
        id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue([v15 UUIDString]);
        [a1 setGeneratedVendorID:1];
      }

      else
      {
        id v5 = 0LL;
      }

      if (!v5) {
        goto LABEL_16;
      }
    }

    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([a1 buyParams]);
    [v16 setParameter:v5 forKey:AMSBuyParamPropertyVendorID];
    goto LABEL_15;
  }

id sub_100255630(uint64_t a1)
{
  if (qword_100462468 != -1) {
    dispatch_once(&qword_100462468, &stru_1003EE9F8);
  }
  return (id)qword_100462460;
}

void sub_100255674(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___URLBag);
  id v2 = (void *)qword_100462460;
  qword_100462460 = (uint64_t)v1;
}

id sub_10025569C(uint64_t a1)
{
  if (qword_100462478 != -1) {
    dispatch_once(&qword_100462478, &stru_1003EEA18);
  }
  return (id)qword_100462470;
}

void sub_1002556E0(id a1)
{
  id v1 = sub_100255710(objc_alloc(&OBJC_CLASS___URLBag), 1);
  id v2 = (void *)qword_100462470;
  qword_100462470 = (uint64_t)v1;
}

id sub_100255710(void *a1, int a2)
{
  if (!a1) {
    return 0LL;
  }
  v12.receiver = a1;
  v12.super_class = (Class)&OBJC_CLASS___URLBag;
  id v3 = objc_msgSendSuper2(&v12, "init");
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[AMSProcessInfo currentProcess](&OBJC_CLASS___AMSProcessInfo, "currentProcess"));
    id v5 = v4;
    if (a2) {
      [v4 setAccountMediaType:AMSAccountMediaTypeAppStoreSandbox];
    }
    uint64_t v6 = objc_claimAutoreleasedReturnValue( +[AMSBag bagForProfile:profileVersion:processInfo:]( &OBJC_CLASS___AMSBag,  "bagForProfile:profileVersion:processInfo:",  @"appstored",  @"1",  v5));
    id v7 = (void *)*((void *)v3 + 1);
    *((void *)v3 + 1) = v6;

    *((_DWORD *)v3 + 4) = 0;
    id v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v9 = (void *)*((void *)v3 + 3);
    *((void *)v3 + 3) = v8;

    id v10 = *((id *)v3 + 1);
    objc_opt_self(&OBJC_CLASS___URLBag);
    [v10 setDefaultValue:&__kCFBooleanFalse forKey:@"arcade-in-spotlight-enabled"];
    [v10 setDefaultValue:&off_10040CB98 forKey:@"min-keybag-repair-interval-seconds"];
    [v10 setDefaultValue:&__kCFBooleanTrue forKey:@"enable-sip-check"];
  }

  return v3;
}

void sub_10025585C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = (os_unfair_lock_s *)(a1 + 16);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    id v5 = *(void **)(a1 + 32);
    if (v5 && ([v5 isExpired] & 1) == 0)
    {
      id v10 = *(id *)(a1 + 32);
      os_unfair_lock_unlock(v4);
      v3[2](v3, v10, 0LL);
    }

    else
    {
      id v6 = [*(id *)(a1 + 24) count];
      id v7 = *(void **)(a1 + 24);
      id v8 = [v3 copy];
      [v7 addObject:v8];

      os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
      if (!v6)
      {
        uint64_t v9 = *(void **)(a1 + 8);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472LL;
        v11[2] = sub_100255960;
        v11[3] = &unk_1003EEA40;
        void v11[4] = a1;
        [v9 createSnapshotWithCompletion:v11];
      }
    }
  }
}

void sub_100255960(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
  uint64_t v7 = *(void *)(a1 + 32);
  if (v5)
  {
    id v8 = v5;
    uint64_t v9 = *(void **)(v7 + 32);
    *(void *)(v7 + 32) = v8;
    id v10 = v6;
  }

  else
  {
    id v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v9 = v6;
    if (!*(void *)(v7 + 32)) {
      goto LABEL_5;
    }
  }

  uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v6 = v10;
LABEL_5:
  id v12 = v11;
  id v13 = *(id *)(*(void *)(a1 + 32) + 24LL);
  id v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void **)(v15 + 24);
  *(void *)(v15 + 24) = v14;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 16LL));
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v17 = v13;
  id v18 = [v17 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v23;
    do
    {
      uint64_t v21 = 0LL;
      do
      {
        if (*(void *)v23 != v20) {
          objc_enumerationMutation(v17);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v22 + 1) + 8LL * (void)v21) + 16LL))(*(void *)(*((void *)&v22 + 1) + 8LL * (void)v21));
        uint64_t v21 = (char *)v21 + 1;
      }

      while (v19 != v21);
      id v19 = [v17 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }

    while (v19);
  }
}

void sub_100255B0C(id a1, AMSSnapshotBag *a2, NSError *a3)
{
  id v3 = a3;
  uint64_t v4 = ASDLogHandleForCategory(5LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138543362;
      id v12 = v3;
      uint64_t v7 = "Failed to prefetch bag snapshot: %{public}@";
      id v8 = v6;
      os_log_type_t v9 = OS_LOG_TYPE_DEFAULT;
      uint32_t v10 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v8, v9, v7, (uint8_t *)&v11, v10);
    }
  }

  else if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    LOWORD(v11) = 0;
    uint64_t v7 = "Prefetched bag snapshot";
    id v8 = v6;
    os_log_type_t v9 = OS_LOG_TYPE_INFO;
    uint32_t v10 = 2;
    goto LABEL_6;
  }
}

id sub_100255BF0(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) arrayForKey:a2]);
  id v9 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 valueWithError:&v9]);
  id v6 = v9;

  if (a3)
  {
    uint64_t v7 = ASDErrorWithSafeUserInfo(v6);
    *a3 = (id)objc_claimAutoreleasedReturnValue(v7);
  }

  return v5;
}

id sub_100255C80(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) BOOLForKey:a2]);
  id v9 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 valueWithError:&v9]);
  id v6 = v9;

  if (a3)
  {
    uint64_t v7 = ASDErrorWithSafeUserInfo(v6);
    *a3 = (id)objc_claimAutoreleasedReturnValue(v7);
  }

  return v5;
}

id sub_100255D10(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) integerForKey:a2]);
  id v9 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 valueWithError:&v9]);
  id v6 = v9;

  if (a3)
  {
    uint64_t v7 = ASDErrorWithSafeUserInfo(v6);
    *a3 = (id)objc_claimAutoreleasedReturnValue(v7);
  }

  return v5;
}

id sub_100255DA0(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) stringForKey:a2]);
  id v9 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 valueWithError:&v9]);
  id v6 = v9;

  if (a3)
  {
    uint64_t v7 = ASDErrorWithSafeUserInfo(v6);
    *a3 = (id)objc_claimAutoreleasedReturnValue(v7);
  }

  return v5;
}

id sub_100255E30(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) URLForKey:a2]);
  id v9 = 0LL;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 valueWithError:&v9]);
  id v6 = v9;

  if (a3)
  {
    uint64_t v7 = ASDErrorWithSafeUserInfo(v6);
    *a3 = (id)objc_claimAutoreleasedReturnValue(v7);
  }

  return v5;
}

id sub_100255EC0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) arrayForKey:a2]);
    id v7 = (id)objc_claimAutoreleasedReturnValue([v6 valueWithError:0]);

    if (!v7) {
      id v7 = v5;
    }
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

id sub_100255F38(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) stringForKey:a2]);
    id v7 = (id)objc_claimAutoreleasedReturnValue([v6 valueWithError:0]);

    if (!v7) {
      id v7 = v5;
    }
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

id *sub_100255FB0(id *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([result[1] BOOLForKey:a2]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 valueWithError:0]);

    if (!v5) {
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a3));
    }
    id v6 = [v5 BOOLValue];

    return (id *)v6;
  }

  return result;
}

double sub_100256030(uint64_t a1, uint64_t a2, double a3)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) doubleForKey:a2]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 valueWithError:0]);

  if (!v5) {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a3));
  }
  [v5 doubleValue];
  double v7 = v6;

  return v7;
}

id *sub_1002560B8(id *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([result[1] integerForKey:a2]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 valueWithError:0]);

    if (!v5) {
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a3));
    }
    id v6 = [v5 integerValue];

    return (id *)v6;
  }

  return result;
}

id sub_100256138(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) BOOLForKey:a2]);
    id v13 = 0LL;
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 valueWithError:&v13]);
    unint64_t v10 = (unint64_t)v13;

    if (!v9 && ASDErrorIsEqual(v10, AMSErrorDomain, 204LL))
    {

      unint64_t v10 = 0LL;
    }

    if (a4)
    {
      uint64_t v11 = ASDErrorWithSafeUserInfo(v10);
      *a4 = (id)objc_claimAutoreleasedReturnValue(v11);
    }

    if (!(v9 | v10)) {
      uint64_t v9 = (uint64_t)v7;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return (id)v9;
}

id sub_10025621C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) integerForKey:a2]);
    id v13 = 0LL;
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 valueWithError:&v13]);
    unint64_t v10 = (unint64_t)v13;

    if (!v9 && ASDErrorIsEqual(v10, AMSErrorDomain, 204LL))
    {

      unint64_t v10 = 0LL;
    }

    if (a4)
    {
      uint64_t v11 = ASDErrorWithSafeUserInfo(v10);
      *a4 = (id)objc_claimAutoreleasedReturnValue(v11);
    }

    if (!(v9 | v10)) {
      uint64_t v9 = (uint64_t)v7;
    }
  }

  else
  {
    uint64_t v9 = 0LL;
  }

  return (id)v9;
}

id sub_100256300(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    id v7 = a4;
    id v8 = a2;
    uint64_t v9 = objc_alloc_init(&OBJC_CLASS___AMSPromise);
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[AMSPromise completionHandlerAdapter](v9, "completionHandlerAdapter"));
    sub_10025585C(a1, v10);

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[AMSPromise thenWithBlock:](v9, "thenWithBlock:", v7));
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[AMSBagValue bagValueWithKey:valueType:valuePromise:]( &OBJC_CLASS___AMSBagValue,  "bagValueWithKey:valueType:valuePromise:",  v8,  a3,  v11));
  }

  else
  {
    id v12 = 0LL;
  }

  return v12;
}

id sub_1002563D0(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100256460;
    v7[3] = &unk_1003EEAA8;
    id v8 = v3;
    id v5 = sub_100256300((uint64_t)a1, v8, 0LL, v7);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }

  return a1;
}

id sub_100256460(uint64_t a1, void *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a2 arrayForKey:*(void *)(a1 + 32)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 valuePromise]);

  return v3;
}

id sub_1002564A0(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100256530;
    v7[3] = &unk_1003EEAA8;
    id v8 = v3;
    id v5 = sub_100256300((uint64_t)a1, v8, 1LL, v7);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }

  return a1;
}

id sub_100256530(uint64_t a1, void *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a2 BOOLForKey:*(void *)(a1 + 32)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 valuePromise]);

  return v3;
}

id sub_100256570(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100256600;
    v7[3] = &unk_1003EEAA8;
    id v8 = v3;
    id v5 = sub_100256300((uint64_t)a1, v8, 2LL, v7);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }

  return a1;
}

id sub_100256600(uint64_t a1, void *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a2 doubleForKey:*(void *)(a1 + 32)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 valuePromise]);

  return v3;
}

id sub_100256640(uint64_t a1, void *a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1002566CC;
  v7[3] = &unk_1003EEAA8;
  id v3 = a2;
  id v8 = v3;
  id v4 = sub_100256300(a1, v3, 3LL, v7);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

id sub_1002566CC(uint64_t a1, void *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a2 integerForKey:*(void *)(a1 + 32)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 valuePromise]);

  return v3;
}

id sub_10025670C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10025679C;
    v7[3] = &unk_1003EEAA8;
    id v8 = v3;
    id v5 = sub_100256300((uint64_t)a1, v8, 4LL, v7);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }

  return a1;
}

id sub_10025679C(uint64_t a1, void *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a2 stringForKey:*(void *)(a1 + 32)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 valuePromise]);

  return v3;
}

id sub_1002567DC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10025686C;
    v7[3] = &unk_1003EEAA8;
    id v8 = v3;
    id v5 = sub_100256300((uint64_t)a1, v8, 5LL, v7);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }

  return a1;
}

id sub_10025686C(uint64_t a1, void *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a2 URLForKey:*(void *)(a1 + 32)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 valuePromise]);

  return v3;
}

id sub_1002568AC(id a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    id v9 = sub_1002563D0(a1, v7);
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    id v17 = 0LL;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 valueWithError:&v17]);
    id v12 = v17;

    if (!v12 && v11)
    {
      a1 = v11;
LABEL_13:

      goto LABEL_14;
    }

    a1 = v8;

    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 domain]);
    if ([v13 isEqualToString:AMSErrorDomain] && objc_msgSend(v12, "code") == (id)204)
    {

      if ((a4 & 1) == 0) {
        goto LABEL_13;
      }
    }

    else
    {
    }

    uint64_t v14 = ASDLogHandleForCategory(5LL);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v19 = v7;
      __int16 v20 = 2114;
      id v21 = v12;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "Error reading key %{public}@: %{public}@",  buf,  0x16u);
    }

    goto LABEL_13;
  }

void sub_100256A34(void *a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = sub_1002563D0(a1, v7);
    unint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100256AF8;
    v11[3] = &unk_1003EEAD0;
    char v14 = a3;
    id v12 = v7;
    id v13 = v8;
    [v10 valueWithCompletion:v11];
  }
}

void sub_100256AF8(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = v7;
  if (v7)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 domain]);
    if ([v9 isEqualToString:AMSErrorDomain] && objc_msgSend(v8, "code") == (id)204)
    {
      int v10 = *(unsigned __int8 *)(a1 + 48);

      if (!v10) {
        goto LABEL_10;
      }
    }

    else
    {
    }

    uint64_t v11 = ASDLogHandleForCategory(5LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      int v14 = 138543618;
      uint64_t v15 = v13;
      __int16 v16 = 2114;
      id v17 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Error reading key %{public}@: %{public}@",  (uint8_t *)&v14,  0x16u);
    }
  }

id sub_100256C3C(void *a1, void *a2, void *a3)
{
  if (a1)
  {
    id v3 = sub_1002568AC(a1, a2, a3, 1);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v3);
  }

  return a1;
}

id sub_100256C5C(void *a1, void *a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_10025670C(a1, v5);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v16 = 0LL;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 valueWithError:&v16]);
  id v10 = v16;

  if (v10 || !v9)
  {
    id v11 = v6;

    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 domain]);
    uint64_t v13 = ASDLogHandleForCategory(5LL);
    int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v18 = v5;
      __int16 v19 = 2114;
      id v20 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Error reading key %{public}@: %{public}@",  buf,  0x16u);
    }

    id v9 = v11;
  }

  return v9;
}

id sub_100256DD0(void *a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  if (!a1)
  {
    id v13 = 0LL;
    goto LABEL_14;
  }

  id v8 = sub_1002564A0(a1, v7);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v18 = 0LL;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 valueWithError:&v18]);
  id v11 = v18;

  id v12 = [v10 BOOLValue];
  if (v11 || (id v13 = v12, !v10))
  {
    int v14 = (void *)objc_claimAutoreleasedReturnValue([v11 domain]);
    if ([v14 isEqualToString:AMSErrorDomain] && objc_msgSend(v11, "code") == (id)204)
    {

      if ((a4 & 1) == 0)
      {
LABEL_12:
        id v13 = a3;
        goto LABEL_13;
      }
    }

    else
    {
    }

    uint64_t v15 = ASDLogHandleForCategory(5LL);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v20 = v7;
      __int16 v21 = 2114;
      id v22 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Error reading key %{public}@: %{public}@",  buf,  0x16u);
    }

    goto LABEL_12;
  }

void sub_100256F54(void *a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = sub_1002564A0(a1, v7);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100257018;
    v11[3] = &unk_1003EEAD0;
    char v14 = a3;
    id v12 = v7;
    id v13 = v8;
    [v10 valueWithCompletion:v11];
  }
}

void sub_100257018(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = v6;
  if (!a2 || v6)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
    if ([v8 isEqualToString:AMSErrorDomain] && objc_msgSend(v7, "code") == (id)204)
    {
      int v9 = *(unsigned __int8 *)(a1 + 48);

      if (!v9)
      {
LABEL_12:
        (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL, v7);
        goto LABEL_13;
      }
    }

    else
    {
    }

    uint64_t v10 = ASDLogHandleForCategory(5LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138543618;
      uint64_t v14 = v12;
      __int16 v15 = 2114;
      id v16 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Error reading key %{public}@: %{public}@",  (uint8_t *)&v13,  0x16u);
    }

    goto LABEL_12;
  }

  (*(void (**)(void, id, void))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [a2 BOOLValue],  0);
LABEL_13:
}

double sub_10025716C(void *a1, void *a2, char a3, double a4)
{
  id v7 = a2;
  if (!a1)
  {
    double v13 = 0.0;
    goto LABEL_14;
  }

  id v8 = sub_100256570(a1, v7);
  int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v18 = 0LL;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 valueWithError:&v18]);
  id v11 = v18;

  [v10 doubleValue];
  if (v11 || (double v13 = v12, !v10))
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v11 domain]);
    if ([v14 isEqualToString:AMSErrorDomain] && objc_msgSend(v11, "code") == (id)204)
    {

      if ((a3 & 1) == 0)
      {
LABEL_12:
        double v13 = a4;
        goto LABEL_13;
      }
    }

    else
    {
    }

    uint64_t v15 = ASDLogHandleForCategory(5LL);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v20 = v7;
      __int16 v21 = 2114;
      id v22 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Error reading key %{public}@: %{public}@",  buf,  0x16u);
    }

    goto LABEL_12;
  }

double sub_1002572F8(void *a1, void *a2, double a3)
{
  if (a1) {
    return sub_10025716C(a1, a2, 1, a3);
  }
  else {
    return 0.0;
  }
}

id sub_10025730C(uint64_t a1, void *a2, void *a3, char a4)
{
  id v7 = a2;
  if (!a1)
  {
    id v13 = 0LL;
    goto LABEL_14;
  }

  id v8 = sub_100256640(a1, v7);
  int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v18 = 0LL;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 valueWithError:&v18]);
  id v11 = v18;

  id v12 = [v10 integerValue];
  if (v11 || (id v13 = v12, !v10))
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v11 domain]);
    if ([v14 isEqualToString:AMSErrorDomain] && objc_msgSend(v11, "code") == (id)204)
    {

      if ((a4 & 1) == 0)
      {
LABEL_12:
        id v13 = a3;
        goto LABEL_13;
      }
    }

    else
    {
    }

    uint64_t v15 = ASDLogHandleForCategory(5LL);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v20 = v7;
      __int16 v21 = 2114;
      id v22 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "Error reading key %{public}@: %{public}@",  buf,  0x16u);
    }

    goto LABEL_12;
  }

void sub_100257490(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = sub_100256640(a1, v7);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100257554;
    v11[3] = &unk_1003EEAD0;
    char v14 = a3;
    id v12 = v7;
    id v13 = v8;
    [v10 valueWithCompletion:v11];
  }
}

void sub_100257554(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  id v7 = v6;
  if (!a2 || v6)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 domain]);
    if ([v8 isEqualToString:AMSErrorDomain] && objc_msgSend(v7, "code") == (id)204)
    {
      int v9 = *(unsigned __int8 *)(a1 + 48);

      if (!v9)
      {
LABEL_12:
        (*(void (**)(void, void, void *))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL, v7);
        goto LABEL_13;
      }
    }

    else
    {
    }

    uint64_t v10 = ASDLogHandleForCategory(5LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138543618;
      uint64_t v14 = v12;
      __int16 v15 = 2114;
      id v16 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Error reading key %{public}@: %{public}@",  (uint8_t *)&v13,  0x16u);
    }

    goto LABEL_12;
  }

  (*(void (**)(void, id, void))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [a2 integerValue],  0);
LABEL_13:
}

AMSPromise *__cdecl sub_100257768(id a1, NSDictionary *a2)
{
  id v2 = -[NSDictionary mutableCopy](a2, "mutableCopy");
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"MZFinance"]);
  id v4 = [v3 mutableCopy];

  [v4 removeObjectsInArray:&off_10040DE70];
  if ([v4 count])
  {

    id v4 = 0LL;
  }

  [v2 setObject:v4 forKeyedSubscript:@"MZFinance"];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"MZBuy"]);
  id v6 = [v5 mutableCopy];

  [v6 removeObjectsInArray:&off_10040DE70];
  if ([v6 count])
  {

    id v6 = 0LL;
  }

  [v2 setObject:v6 forKeyedSubscript:@"MZBuy"];
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSPromise promiseWithResult:](&OBJC_CLASS___AMSPromise, "promiseWithResult:", v2));

  return (AMSPromise *)v7;
}

ODRAssetDownloadRequest *sub_1002578E0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = objc_opt_self(a1);
  uint64_t v14 = objc_opt_new(&OBJC_CLASS___ODRAssetDownloadRequest);
  id v16 = v14;
  if (v14)
  {
    objc_setProperty_atomic_copy(v14, v15, v11, 248LL);
    id v17 = sub_1002D9D08((uint64_t)v11);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    objc_setProperty_atomic_copy(v16, v19, v18, 104LL);
  }

  else
  {
    id v99 = sub_1002D9D08((uint64_t)v11);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(v99);
  }

  id v20 = sub_1001F7970(v9);
  id v22 = (void *)objc_claimAutoreleasedReturnValue(v20);
  if (v16) {
    objc_setProperty_atomic_copy(v16, v21, v22, 112LL);
  }

  id v23 = sub_1001AC304(v9);
  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
  __int128 v25 = sub_1001E3B50(v24);
  id v27 = (void *)objc_claimAutoreleasedReturnValue(v25);
  if (v16) {
    objc_setProperty_atomic_copy(v16, v26, v27, 120LL);
  }

  id v28 = sub_10020CB38(v10);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  id v30 = sub_1001ACFD4(v9, v29);
  id v32 = (void *)objc_claimAutoreleasedReturnValue(v30);
  if (v16) {
    objc_setProperty_atomic_copy(v16, v31, v32, 136LL);
  }

  id v33 = sub_1001F7A90(v9);
  id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
  id v35 = [v34 longLongValue];
  if (v16) {
    v16->_downloadSize = (int64_t)v35;
  }

  id v36 = sub_1001F79DC(v9);
  id v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
  [v37 doubleValue];
  if (v16) {
    v16->_double loadingPriority = v38;
  }

  id v39 = sub_1001F7C8C(v9);
  __int128 v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
  id v41 = [v40 longLongValue];
  if (v16) {
    v16->_expectedDiskUsage = (int64_t)v41;
  }

  id v42 = sub_1001F8198(v9);
  __int128 v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
  __int128 v45 = v43;
  if (v16)
  {
    objc_setProperty_atomic_copy(v16, v44, v43, 160LL);

    if (v10) {
      unsigned __int8 v46 = sub_1001E2598(v10, (uint64_t)@"is_store_based");
    }
    else {
      unsigned __int8 v46 = 0;
    }
    v16->_storeBased = v46;
  }

  else
  {

    if (v10) {
      sub_1001E2598(v10, (uint64_t)@"is_store_based");
    }
  }

  id v47 = sub_1001F7AFC(v9);
  char v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
  unsigned __int8 v49 = [v48 BOOLValue];
  if (v16) {
    v16->_streamable = v49;
  }

  id v50 = sub_1002D9D08((uint64_t)v11);
  __int16 v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
  id v52 = sub_1001F7970(v9);
  __int128 v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
  id v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@-%@", v51, v53));
  if (v16) {
    objc_setProperty_atomic(v16, v54, v55, 240LL);
  }

  unsigned __int8 v56 = sub_10020CAC8(v10);
  if (v16)
  {
    v16->_useLocalCache = v56;
    v16->_qosClass = 9;
    id Property = objc_getProperty(v16, v57, 240LL, 1);
  }

  else
  {
    id Property = 0LL;
  }

  id v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.appstored.odrAssetDownload.%@",  Property));
  __int16 v61 = (void *)objc_claimAutoreleasedReturnValue(+[KeepAlive keepAliveWithName:](&OBJC_CLASS___KeepAlive, "keepAliveWithName:", v59));
  if (v16) {
    objc_setProperty_atomic(v16, v60, v61, 264LL);
  }

  id v62 = objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey);
  if (v16) {
    double loadingPriority = v16->_loadingPriority;
  }
  else {
    double loadingPriority = 0.0;
  }
  objc_opt_self(v13);
  unsigned int v64 = @"ODR";
  if (loadingPriority > 0.0) {
    unsigned int v64 = @"ODP";
  }
  if (loadingPriority == 1.0) {
    unsigned int v64 = @"ODI";
  }
  double v65 = v64;
  uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v12 description]);

  if (v16)
  {
    id v68 = -[LogKey initWithCode:base:ID:](v62, "initWithCode:base:ID:", v65, v66, objc_getProperty(v16, v67, 112LL, 1));
    objc_setProperty_atomic(v16, v69, v68, 184LL);

    if (v16->_streamable)
    {
      id v74 = sub_1001F7CB0(v9);
      __int128 v71 = (void *)objc_claimAutoreleasedReturnValue(v74);
      objc_setProperty_atomic_copy(v16, v75, v71, 216LL);
      goto LABEL_38;
    }
  }

  else
  {
  }

  id v70 = sub_1001E26D0(v9, (uint64_t)@"source_url");
  __int128 v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
  id v73 = (NSURL *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v71));
  if (!v16) {
    goto LABEL_49;
  }
  objc_setProperty_atomic_copy(v16, v72, v73, 216LL);

LABEL_38:
  if (-[NSURL isFileURL](v16->_sourceURL, "isFileURL"))
  {
    sourceURL = v16->_sourceURL;
    id v102 = 0LL;
    unsigned __int8 v77 = -[NSURL checkResourceIsReachableAndReturnError:](sourceURL, "checkResourceIsReachableAndReturnError:", &v102);
    id v78 = v102;
    __int128 v71 = v78;
    if ((v77 & 1) != 0)
    {
LABEL_50:

      goto LABEL_51;
    }

    id v100 = v78;
    id v101 = 0LL;
    uint64_t v79 = v16->_bundleKey;
    id v80 = sub_1002D9B68(v16->_application, (uint64_t)&v101);
    id v81 = v80;
    if (v80)
    {
      id v82 = sub_10020CD10((uint64_t)v80, v79);
      id v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
      uint64_t application = (uint64_t)v16->_application;
      id v85 = sub_1001F7CB0(v83);
      id v86 = (void *)objc_claimAutoreleasedReturnValue(v85);
      id v87 = (void *)objc_claimAutoreleasedReturnValue([v86 absoluteString]);
      id v88 = sub_1002D9924(application, v87, &v101);
      uint64_t v89 = objc_claimAutoreleasedReturnValue(v88);
    }

    else
    {
      uint64_t v89 = 0LL;
    }

    id v73 = (NSURL *)v101;
    uint64_t v90 = v16->_sourceURL;
    v16->_sourceURL = (NSURL *)v89;

    id v91 = v16->_sourceURL;
    uint64_t v92 = ASDLogHandleForCategory(19LL);
    id v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
    id v94 = v93;
    if (v91)
    {
      __int128 v71 = v100;
      if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
      {
        logKey = v16->_logKey;
        id v96 = v16->_sourceURL;
        *(_DWORD *)__int128 buf = 138412546;
        id v104 = logKey;
        __int16 v105 = 2114;
        id v106 = v96;
        _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "[%@] Resource was located at URL: %{public}@",  buf,  0x16u);
      }
    }

    else
    {
      __int128 v71 = v100;
      if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR))
      {
        uint64_t v98 = v16->_logKey;
        *(_DWORD *)__int128 buf = 138412546;
        id v104 = v98;
        __int16 v105 = 2114;
        id v106 = v73;
        _os_log_error_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_ERROR,  "[%@] Resource was not found with error: %{public}@",  buf,  0x16u);
      }
    }

LABEL_49:
    goto LABEL_50;
  }

void sub_1002580A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1002580C0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = ASDLogHandleForCategory(19LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (WeakRetained) {
      id Property = objc_getProperty(WeakRetained, v4, 184LL, 1);
    }
    else {
      id Property = 0LL;
    }
    int v8 = 138412290;
    id v9 = Property;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[%@] Received cancellation request.",  (uint8_t *)&v8,  0xCu);
  }

  if (WeakRetained) {
    id v7 = objc_getProperty(WeakRetained, v6, 96LL, 1);
  }
  else {
    id v7 = 0LL;
  }
  [v7 cancel];
}

void sub_1002581AC(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (a1)
  {
    [*(id *)(a1 + 40) lock];
    if (*(_BYTE *)(a1 + 8))
    {
      id v3 = *(void **)(a1 + 24);
      if (v3)
      {
        sub_100258268((uint64_t)v7, v3);
      }

      else
      {
        if (v7) {
          v7[24] = *(void *)(a1 + 192);
        }
        sub_1002583B0((uint64_t)v7);
      }
    }

    id v4 = *(void **)(a1 + 16);
    if (!v4)
    {
      id v5 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
      id v6 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v5;

      id v4 = *(void **)(a1 + 16);
    }

    [v4 addObject:v7];
    if (v7 && (*((_BYTE *)v7 + 82) & 1) != 0) {
      ++*(void *)(a1 + 48);
    }
    [*(id *)(a1 + 40) unlock];
  }
}

void sub_100258268(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    [*(id *)(a1 + 40) lock];
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 1;
    objc_storeStrong((id *)(a1 + 24), a2);
    sub_100258598(a1, v4);
    [*(id *)(a1 + 256) finishWithError:v4];
    __int128 v10 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    id v5 = *(id *)(a1 + 16);
    id v6 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v11;
      do
      {
        id v9 = 0LL;
        do
        {
          if (*(void *)v11 != v8) {
            objc_enumerationMutation(v5);
          }
          sub_100258268(*(void *)(*((void *)&v10 + 1) + 8LL * (void)v9), v4);
          id v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }

      while (v7);
    }

    objc_msgSend(*(id *)(a1 + 40), "unlock", (void)v10);
  }
}

void sub_1002583B0(uint64_t a1)
{
  if (a1)
  {
    [*(id *)(a1 + 40) lock];
    *(_BYTE *)(a1 + _Block_object_dispose(va, 8) = 1;
    uint64_t v2 = objc_opt_new(&OBJC_CLASS___ODRAssetDownloadResponse);
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSURL fileURLWithPath:isDirectory:]( &OBJC_CLASS___NSURL,  "fileURLWithPath:isDirectory:",  *(void *)(a1 + 136),  1LL));
    id v5 = v3;
    if (v2)
    {
      objc_setProperty_atomic_copy(v2, v4, v3, 8LL);

      id v6 = (void *)(a1 + 192);
      v2->_pinCount = *(void *)(a1 + 192);
    }

    else
    {

      id v6 = (void *)(a1 + 192);
    }

    sub_100258598(a1, 0LL);
    [*(id *)(a1 + 256) finishWithResult:v2];
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v7 = *(id *)(a1 + 16);
    id v8 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v14;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v14 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
          if (v12) {
            *(void *)(v12 + 192) = *v6;
          }
          sub_1002583B0(v12);
        }

        id v9 = [v7 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v9);
    }

    objc_msgSend(*(id *)(a1 + 40), "unlock", (void)v13);
  }

id *sub_100258544(id *result, uint64_t a2)
{
  if (result)
  {
    id v3 = result;
    [result[5] lock];
    uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
    id v5 = v3[4];
    v3[4] = (id)v4;

    return (id *)[v3[5] unlock];
  }

  return result;
}

void sub_100258598(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && *(void *)(a1 + 56))
  {
    uint64_t v4 = ASDLogHandleForCategory(19LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    id v6 = v5;
    if (v3)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = *(void *)(a1 + 184);
        int v9 = 138412546;
        uint64_t v10 = v7;
        __int16 v11 = 2114;
        id v12 = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "[%@]: Completing coordinator promise: %{public}@",  (uint8_t *)&v9,  0x16u);
      }
    }

    else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 184);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%@]: Completing coordinator promise",  (uint8_t *)&v9,  0xCu);
    }

    [*(id *)(a1 + 56) setComplete:1];
  }
}

void *sub_1002586C4(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = sub_100220D98((uint64_t)&OBJC_CLASS___Storage);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    id v1 = (void *)objc_claimAutoreleasedReturnValue([v3 stringByAppendingPathComponent:v1[14]]);
  }

  return v1;
}

SZExtractor *sub_100258710(uint64_t a1)
{
  if (a1)
  {
    id v2 = objc_alloc(&OBJC_CLASS___SZExtractor);
    id v3 = sub_1002586C4((void *)a1);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    id v6 = *(void **)(a1 + 160);
    if (v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"hash_type"]);
      if (v7)
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 160) objectForKeyedSubscript:@"bytes_to_hash"]);
        uint64_t v9 = (uint64_t)[v8 integerValue];

        if (v9 >= 1)
        {
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 160) objectForKeyedSubscript:@"hash_array"]);
          if (v10)
          {
            __int16 v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v10,  0LL,  0LL,  0LL));
            uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSArray, v12);
            if ((objc_opt_isKindOfClass(v11, v13) & 1) != 0 && [v11 count])
            {
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  SZExtractorOptionsDenyInvalidSymlinks);
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v11,  SZExtractorOptionsHashesArray);
              __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v9));
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v14,  SZExtractorOptionsHashedChunkSize);

              id v15 = [v7 integerValue];
              __int128 v16 = &SZExtractorHashTypeMD5;
              if (v15) {
                __int128 v16 = &SZExtractorHashTypeSHA1;
              }
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  *v16,  SZExtractorOptionsHashType);
            }
          }
        }
      }
    }

    id v17 = -[NSMutableDictionary copy](v5, "copy");

    id v18 = -[SZExtractor initWithPath:options:](v2, "initWithPath:options:", v4, v17);
  }

  else
  {
    id v18 = 0LL;
  }

  return v18;
}

void *sub_100258910(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = (void *)a1[7];
    if (!v2)
    {
      id v3 = -[IXPromisedOutOfBandTransfer initWithName:client:diskSpaceNeeded:]( objc_alloc(&OBJC_CLASS___IXPromisedOutOfBandTransfer),  "initWithName:client:diskSpaceNeeded:",  a1[14],  1LL,  a1[19]);
      uint64_t v4 = (void *)v1[7];
      v1[7] = v3;

      id v2 = (void *)v1[7];
    }

    a1 = v2;
  }

  return a1;
}

AssetRequestProperties *sub_100258968(uint64_t a1)
{
  if (!a1)
  {
    id v3 = 0LL;
    return v3;
  }

  id v2 = objc_opt_new(&OBJC_CLASS___AssetRequestProperties);
  id v3 = v2;
  if (v2)
  {
    v2->_qosClass = *(_DWORD *)(a1 + 88);
    v2->_expectedDiskUsage = *(void *)(a1 + 152);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  id v6 = v4;
  if (v3)
  {
    objc_setProperty_atomic(v3, v5, v4, 104LL);

    v3->_locateAssetCache = *(_BYTE *)(a1 + 85);
  }

  else
  {
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)(a1 + 176)));
  uint64_t v9 = v7;
  if (v3)
  {
    objc_setProperty_atomic(v3, v8, v7, 112LL);

    objc_setProperty_atomic(v3, v10, *(id *)(a1 + 184), 128LL);
    uint64_t v12 = (_BYTE *)(a1 + 80);
    v3->_discretionaryType = *(unsigned __int8 *)(a1 + 80);
    v3->_connectionPool = 2LL;
    uint64_t v13 = 104LL;
    if (*(void *)(a1 + 232) == 1LL) {
      uint64_t v13 = 168LL;
    }
    objc_setProperty_atomic(v3, v11, *(id *)(a1 + v13), 144LL);
  }

  else
  {

    uint64_t v12 = (_BYTE *)(a1 + 80);
  }

  [*(id *)(a1 + 40) lock];
  if (*(void *)(a1 + 32))
  {
    [*(id *)(a1 + 40) unlock];
    unsigned __int8 v14 = [*(id *)(a1 + 32) BOOLValue];
    if (!v3) {
      goto LABEL_16;
    }
LABEL_14:
    v3->_allowsCellularAccess = v14;
    if (*(_BYTE *)(a1 + 83)) {
      v3->_requestReason = 7LL;
    }
    goto LABEL_16;
  }

  unsigned __int8 v14 = 1;
  uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  __int128 v16 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v15;

  [*(id *)(a1 + 40) unlock];
  if (v3) {
    goto LABEL_14;
  }
LABEL_16:
  if (*v12) {
    uint64_t v17 = 400LL;
  }
  else {
    uint64_t v17 = 300LL;
  }
  SEL v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v17));
  if (v3) {
    objc_setProperty_atomic(v3, v18, v19, 184LL);
  }

  return v3;
}

void sub_100258B78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 attributesOfItemAtPath:*(void *)(a1 + 136) error:0]);
    id v6 = v5;
    if (v5)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:NSFileType]);
      unsigned int v8 = [v7 isEqualToString:NSFileTypeSymbolicLink];
      char v9 = v8;
      if (v8)
      {
        unsigned int v10 = [v4 removeItemAtPath:*(void *)(a1 + 136) error:0];
        uint64_t v11 = ASDLogHandleForCategory(19LL);
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          uint64_t v29 = *(void *)(a1 + 184);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v36 = v29;
          __int16 v37 = 1024;
          LODWORD(v3_Block_object_dispose(va, 8) = v10;
          _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[%@] Cleaning up symlink (success %d)....",  buf,  0x12u);
        }
      }
    }

    else
    {
      char v9 = 0;
    }

    if ([v4 fileExistsAtPath:*(void *)(a1 + 136)])
    {
      uint64_t v13 = ASDLogHandleForCategory(19LL);
      unsigned __int8 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v27 = *(void *)(a1 + 184);
        uint64_t v28 = *(void *)(a1 + 136);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v36 = v27;
        __int16 v37 = 2114;
        uint64_t v38 = v28;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[%@] Simulated download path already existed. success(YES): %{public}@",  buf,  0x16u);
      }

      v3[2](v3, 0LL);
    }

    else
    {
      uint64_t v15 = sub_100259108(*(void **)(a1 + 216));
      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
      uint64_t v17 = (uint64_t)[v16 integerForKey:@"ODRSimulatedDownloadsBandwidthKey"];

      *(void *)(a1 + 64) = 0LL;
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      void v30[2] = sub_100258EE8;
      v30[3] = &unk_1003EEB38;
      v30[4] = a1;
      id v31 = v4;
      char v33 = 0;
      char v34 = v9;
      id v32 = v3;
      id v18 = v30;
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(21LL, 0LL);
      id v20 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      __int16 v21 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, v20);
      if (v21)
      {
        unint64_t v22 = v17 << 20;
        if (v17 < 1) {
          unint64_t v22 = 20971520LL;
        }
        double v23 = fmax((double)((unint64_t)v15 / v22), 5.0);
        if (v23 >= 10.0) {
          double v24 = 100000000.0;
        }
        else {
          double v24 = v23 / 100.0 * 1000000000.0;
        }
        dispatch_time_t v25 = dispatch_time(0LL, (uint64_t)v24);
        dispatch_source_set_timer(v21, v25, (unint64_t)v24, 0x5F5E100uLL);
        dispatch_source_set_event_handler(v21, v18);
        dispatch_resume(v21);
      }

      id v26 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v21;
    }
  }
}

void sub_100258EE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 64) >= 0x64uLL)
  {
    id v3 = *(dispatch_source_s **)(v2 + 72);
    if (v3)
    {
      dispatch_source_cancel(v3);
      uint64_t v4 = *(void **)(v2 + 72);
      *(void *)(v2 + 72) = 0LL;

      uint64_t v2 = *(void *)(a1 + 32);
    }

    id v5 = *(void **)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 216) path]);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 136LL);
    id v19 = 0LL;
    unsigned int v8 = [v5 copyItemAtPath:v6 toPath:v7 error:&v19];
    id v9 = v19;

    uint64_t v10 = ASDLogHandleForCategory(19LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 184LL);
      int v16 = *(unsigned __int8 *)(a1 + 56);
      int v17 = *(unsigned __int8 *)(a1 + 57);
      *(_DWORD *)__int128 buf = 138413058;
      uint64_t v21 = v15;
      __int16 v22 = 1024;
      *(_DWORD *)double v23 = v8;
      *(_WORD *)&void v23[4] = 1024;
      *(_DWORD *)&v23[6] = v16;
      __int16 v24 = 1024;
      int v25 = v17;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[%@] Simulated download success(%{BOOL}d): existed(%{BOOL}d) was symlink(%{BOOL}d)",  buf,  0x1Eu);
    }

    if (v8)
    {
      uint64_t v12 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    }

    else
    {
      uint64_t v13 = ASDLogHandleForCategory(19LL);
      unsigned __int8 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 184LL);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v21 = v18;
        __int16 v22 = 2114;
        *(void *)double v23 = v9;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "[%@] simulated download failed with error %{public}@",  buf,  0x16u);
      }

      uint64_t v12 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    }

    v12();
  }

char *sub_100259108(void *a1)
{
  id v1 = a1;
  char v22 = 0;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 path]);
  unsigned int v4 = [v2 fileExistsAtPath:v3 isDirectory:&v22];

  if (v4)
  {
    if (v22)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:",  NSURLLocalizedNameKey,  NSURLLocalizedTypeDescriptionKey,  0LL));
      id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      id v21 = 0LL;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( [v6 contentsOfDirectoryAtURL:v1 includingPropertiesForKeys:v5 options:4 error:&v21]);
      id v8 = v21;

      __int128 v19 = 0u;
      __int128 v20 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      id v9 = v7;
      id v10 = [v9 countByEnumeratingWithState:&v17 objects:v23 count:16];
      if (v10)
      {
        id v11 = v10;
        uint64_t v12 = 0LL;
        uint64_t v13 = *(void *)v18;
        do
        {
          for (i = 0LL; i != v11; i = (char *)i + 1)
          {
            if (*(void *)v18 != v13) {
              objc_enumerationMutation(v9);
            }
            v12 += sub_100259108(*(void *)(*((void *)&v17 + 1) + 8LL * (void)i));
          }

          id v11 = [v9 countByEnumeratingWithState:&v17 objects:v23 count:16];
        }

        while (v11);
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      uint64_t v15 = v9;
    }

    else
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      id v8 = (id)objc_claimAutoreleasedReturnValue([v1 path]);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 attributesOfItemAtPath:v8 error:0]);
      id v9 = (id)objc_claimAutoreleasedReturnValue([v15 objectForKey:NSFileSize]);
      uint64_t v12 = (char *)[v9 unsignedIntegerValue];
    }
  }

  else
  {
    uint64_t v12 = 0LL;
  }

  return v12;
}

id sub_10025947C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = sub_1002594CC(objc_alloc(&OBJC_CLASS___StoreAsset), v3, 1LL);

  return v4;
}

id sub_1002594CC(id a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (a1)
  {
    v78.receiver = a1;
    v78.super_class = (Class)&OBJC_CLASS___StoreAsset;
    id v6 = objc_msgSendSuper2(&v78, "init");
    a1 = v6;
    if (v6)
    {
      v6[3] = a3;
      uint64_t v7 = (void *)v6[12];
      v6[12] = &off_10040CBB0;

      id v8 = v5;
      id v9 = sub_1001DF594(v8, @"URL");
      uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
      id v11 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 4) = v10;

      *((void *)a1 + 2) = 1LL;
      id v12 = sub_1001DF1DC(v8, @"asset-info");
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      id v14 = sub_1001DEDF8(v13, @"file-size");
      uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
      int v16 = (void *)*((void *)a1 + 6);
      *((void *)a1 + 6) = v15;

      id v17 = sub_1001DEDF8(v8, @"initialODRSize");
      uint64_t v18 = objc_claimAutoreleasedReturnValue(v17);
      __int128 v19 = (void *)*((void *)a1 + 13);
      *((void *)a1 + 13) = v18;

      id v20 = sub_1001DF594(v8, @"algorithm");
      uint64_t v21 = objc_claimAutoreleasedReturnValue(v20);
      char v22 = (void *)*((void *)a1 + 8);
      *((void *)a1 + _Block_object_dispose(va, 8) = v21;

      id v23 = sub_1001DEDF8(v8, @"uncompressedSize");
      uint64_t v24 = objc_claimAutoreleasedReturnValue(v23);
      int v25 = (void *)*((void *)a1 + 10);
      *((void *)a1 + 10) = v24;

      id v26 = sub_1001DF1DC(v8, @"chunks");
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      uint64_t v28 = v27;
      if (v27)
      {
        id v29 = sub_1001DEC94(v27, @"clearHashes");
        id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        id v31 = sub_1002D6554(v30);
        id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
        uint64_t v33 = objc_claimAutoreleasedReturnValue([v32 allObjects]);
        char v34 = (void *)*((void *)a1 + 7);
        *((void *)a1 + 7) = v33;

        id v35 = sub_1001DEC94(v28, @"hashes");
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        id v37 = sub_1002D6554(v36);
        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        uint64_t v39 = objc_claimAutoreleasedReturnValue([v38 allObjects]);
        __int128 v40 = (void *)*((void *)a1 + 11);
        *((void *)a1 + 11) = v39;

        id v41 = sub_1001DEDF8(v28, @"chunkSize");
        uint64_t v42 = objc_claimAutoreleasedReturnValue(v41);
        __int128 v43 = (void *)*((void *)a1 + 15);
        *((void *)a1 + 15) = v42;
      }

      id v44 = sub_1001DF594(v8, @"md5");
      uint64_t v45 = objc_claimAutoreleasedReturnValue(v44);
      unsigned __int8 v46 = (void *)*((void *)a1 + 14);
      *((void *)a1 + 14) = v45;

      id v47 = sub_1001DF1DC(v8, @"local-server-info");
      char v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
      *((_BYTE *)a1 + _Block_object_dispose(va, 8) = v48 != 0LL;

      if (v8) {
        unsigned __int8 v49 = sub_1001DEDAC(v8, @"isStreamable", 0LL);
      }
      else {
        unsigned __int8 v49 = 0;
      }
      *((_BYTE *)a1 + 9) = v49;
      id v50 = sub_1001DEC94(v8, @"priorVariantIdentifiers");
      __int16 v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
      id v52 = sub_1002D6554(v51);
      __int128 v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      uint64_t v54 = objc_claimAutoreleasedReturnValue([v53 allObjects]);
      id v55 = (void *)*((void *)a1 + 16);
      *((void *)a1 + 16) = v54;

      id v56 = sub_1001DEDF8(v8, @"priorVersionExternalIdentifier");
      uint64_t v57 = objc_claimAutoreleasedReturnValue(v56);
      uint64_t v58 = (void *)*((void *)a1 + 17);
      *((void *)a1 + 17) = v57;

      id v59 = sub_1001DEC94(v8, @"sinfs");
      id v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
      if ([v60 count])
      {
        __int16 v61 = (id *)sub_10018988C(objc_alloc(&OBJC_CLASS___StoreDRM), v60);
        id v62 = v61;
        if (v61)
        {
          uint64_t v63 = sub_100189964(v61, @"sinf");
          uint64_t v64 = objc_claimAutoreleasedReturnValue(v63);
          double v65 = (void *)*((void *)a1 + 18);
          *((void *)a1 + 1_Block_object_dispose(va, 8) = v64;

          uint64_t v66 = sub_100189964(v62, @"dpInfo");
          uint64_t v67 = objc_claimAutoreleasedReturnValue(v66);
          id v68 = (void *)*((void *)a1 + 9);
          *((void *)a1 + 9) = v67;
        }
      }

      else
      {
        SEL v69 = sub_1001DEFF8(v8, @"sinf");
        uint64_t v70 = objc_claimAutoreleasedReturnValue(v69);
        id v62 = (id *)*((void *)a1 + 18);
        *((void *)a1 + 1_Block_object_dispose(va, 8) = v70;
      }

      id v71 = sub_1001DF594(v8, @"variantId");
      uint64_t v72 = objc_claimAutoreleasedReturnValue(v71);
      id v73 = (void *)*((void *)a1 + 19);
      *((void *)a1 + 19) = v72;

      if ([*((id *)a1 + 19) length]) {
        id v74 = (VariantDescriptor *)sub_1001D34AC((uint64_t)&OBJC_CLASS___VariantDescriptor, *((void **)a1 + 19));
      }
      else {
        id v74 = sub_1001D34F8((uint64_t)&OBJC_CLASS___VariantDescriptor);
      }
      uint64_t v75 = objc_claimAutoreleasedReturnValue(v74);
      double v76 = (void *)*((void *)a1 + 20);
      *((void *)a1 + 20) = v75;
    }
  }

  return a1;
}

id sub_1002598A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = sub_1001DEC94(v3, @"deltaPackages");
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  id v6 = sub_1002D64A4(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = sub_10031D77C(v7, &stru_1003EEB58);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = &__NSArray0__struct;
  }
  id v11 = v10;

  return v11;
}

id sub_100259940(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  id v3 = sub_1002594CC(objc_alloc(&OBJC_CLASS___StoreAsset), v2, 3LL);

  return v3;
}

id sub_100259988(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  objc_opt_self(a1);
  if (a3)
  {
    id v6 = sub_1001D34F8((uint64_t)&OBJC_CLASS___VariantDescriptor);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100259A6C;
    v12[3] = &unk_1003EEB80;
    id v13 = (id)objc_claimAutoreleasedReturnValue(v6);
    id v7 = v13;
    id v8 = sub_1002B84E4(v5, v12);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  }

  else
  {
    id v10 = sub_1002B84E4(v5, &stru_1003EEBC0);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if (!v9) {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
    }
  }

  return v9;
}

uint64_t sub_100259A6C(uint64_t a1, id self)
{
  if (self) {
    id Property = objc_getProperty(self, (SEL)self, 160LL, 1);
  }
  else {
    id Property = 0LL;
  }
  return sub_1001D3D68((uint64_t)Property, *(void **)(a1 + 32));
}

BOOL sub_100259AA8(id a1, StoreAsset *a2)
{
  BOOL v2 = 1;
  if (a2)
  {
    id Property = objc_getProperty(a2, (SEL)a2, 160LL, 1);
    if (Property) {
      return (Property[16] & 1) == 0;
    }
  }

  return v2;
}

id sub_100259AEC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = a2;
  objc_opt_self(a1);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_100259BB4;
  v15[3] = &unk_1003EEBE8;
  id v16 = v7;
  id v17 = v8;
  id v10 = v8;
  id v11 = v7;
  id v12 = sub_1002B84E4(v9, v15);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

  return v13;
}

uint64_t sub_100259BB4(uint64_t a1, uint64_t a2)
{
  id v3 = *(void **)(a1 + 40);
  id v4 = (__CFString *)*(id *)(a1 + 32);
  id v5 = v3;
  if (a2)
  {
    if ((-[__CFString isEqualToNumber:](v4, "isEqualToNumber:", *(void *)(a2 + 136)) & 1) != 0)
    {
      id v6 = -[__CFString length](v5, "length");
      id v7 = *(void **)(a2 + 128);
      if (v6)
      {
        if (([v7 containsObject:v5] & 1) == 0)
        {
          uint64_t v8 = ASDLogHandleForCategory(14LL);
          id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            id v10 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a2 + 128), "componentsJoinedByString:", @", "));
            int v20 = 138543618;
            uint64_t v21 = v10;
            __int16 v22 = 2114;
            id v23 = v5;
            _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "[StoreAsset]: Rejecting delta - no applicable variants (%{public}@) for installed variant %{public}@",  (uint8_t *)&v20,  0x16u);
          }

          goto LABEL_10;
        }

char *sub_10025A12C(char *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)&OBJC_CLASS___PerformPurchaseTask;
    id v5 = (char *)objc_msgSendSuper2(&v9, "init");
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)(v5 + 42), a2);
      uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      id v7 = *(void **)(a1 + 66);
      *(void *)(a1 + 66) = v6;
    }
  }

  return a1;
}

InteractiveRequestPresenter *sub_10025A1CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 58);
    if (!v4)
    {
      uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      uint64_t v6 = *(void **)(a1 + 58);
      *(void *)(a1 + 5_Block_object_dispose(va, 8) = v5;

      id v4 = *(void **)(a1 + 58);
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
    uint64_t v8 = (InteractiveRequestPresenter *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v7]);

    if (!v8)
    {
      uint64_t v8 = objc_opt_new(&OBJC_CLASS___InteractiveRequestPresenter);
      objc_super v9 = *(void **)(a1 + 58);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueIdentifier]);
      [v9 setObject:v8 forKeyedSubscript:v10];

      uint64_t v11 = ASDLogHandleForCategory(25LL);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v3 logUUID]);
        int v15 = 138543362;
        uint64_t v16 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "[%{public}@] Created interactive presenter",  (uint8_t *)&v15,  0xCu);
      }
    }
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  return v8;
}

void sub_10025A778(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(25LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
      uint64_t v15 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v21 = v14;
      __int16 v22 = 2114;
      uint64_t v23 = v15;
      __int16 v24 = 2114;
      id v25 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%@] Client %{public}@ failed authentication request with error %{public}@",  buf,  0x20u);
    }
  }

  dispatch_queue_global_t global_queue = dispatch_get_global_queue(21LL, 0LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(global_queue);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10025A904;
  v16[3] = &unk_1003EA570;
  id v11 = *(id *)(a1 + 48);
  id v18 = v6;
  id v19 = v11;
  id v17 = v5;
  id v12 = v6;
  id v13 = v5;
  sub_10022ED10(v10, v16);
}

uint64_t sub_10025A904(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_10025AE70(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(25LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      objc_super v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logUUID]);
      int v10 = 138543618;
      id v11 = v9;
      __int16 v12 = 2114;
      id v13 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%{public}@] Interactive dialog request failed: %{public}@",  (uint8_t *)&v10,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10025AF7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(25LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      objc_super v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 138412802;
      __int16 v12 = v9;
      __int16 v13 = 2114;
      uint64_t v14 = v10;
      __int16 v15 = 2114;
      id v16 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%@] Client %{public}@ failed dialog request with error %{public}@",  (uint8_t *)&v11,  0x20u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10025B40C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(25LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      objc_super v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logUUID]);
      int v10 = 138543618;
      int v11 = v9;
      __int16 v12 = 2114;
      id v13 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%{public}@] Interactive engagement request failed: %{public}@",  (uint8_t *)&v10,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10025B518(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(25LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      objc_super v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logUUID]);
      uint64_t v10 = *(void *)(a1 + 40);
      int v11 = 138543874;
      __int16 v12 = v9;
      __int16 v13 = 2114;
      uint64_t v14 = v10;
      __int16 v15 = 2114;
      id v16 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%{public}@] Client %{public}@ failed enagement request with error %{public}@",  (uint8_t *)&v11,  0x20u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10025C6EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_10025C70C(uint64_t a1, void *a2)
{
  BOOL v2 = *(void **)(a1 + 32);
  id v3 = a2;
  [v2 setDelegate:0];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);

  id v5 = sub_1001DF1DC(v4, AMSErrorUserInfoKeyServerPayload);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if (v6 && sub_1002EC1B8(v6))
  {
    uint64_t v7 = ASDLogHandleForCategory(25LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed purchase had a trigger queue check.",  v11,  2u);
    }

    id v9 = sub_1001995C0((uint64_t)&OBJC_CLASS___PurchaseManager);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    [v10 checkStoreQueue:1];
  }
}

uint64_t sub_10025C7FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10025C80C(uint64_t a1)
{
}

void sub_10025C814(uint64_t a1, void *a2)
{
  __int128 v110 = 0u;
  __int128 v111 = 0u;
  __int128 v112 = 0u;
  __int128 v113 = 0u;
  id obj = a2;
  id v3 = [obj countByEnumeratingWithState:&v110 objects:v122 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v111;
    uint64_t v95 = *(void *)v111;
    uint64_t v92 = a1;
    do
    {
      id v6 = 0LL;
      id v94 = v4;
      do
      {
        if (*(void *)v111 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v110 + 1) + 8LL * (void)v6);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "purchase", v92));
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueIdentifier]);

        if (v9)
        {
          uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 66) objectForKeyedSubscript:v9]);
          if (v10)
          {
            int v11 = (void *)v10;
            id v100 = v9;
            __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[MetricsBridge metricsFieldsFromResult:]( &OBJC_CLASS____TtC9appstored13MetricsBridge,  "metricsFieldsFromResult:",  v7));
            __int16 v13 = (NSMutableDictionary *)[v12 mutableCopy];

            if (!v13) {
              __int16 v13 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
            }
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v11 buyParams]);
            uint64_t v15 = objc_claimAutoreleasedReturnValue([v14 parameterForKey:@"mtPageContext"]);

            if (v15) {
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v13,  "setObject:forKeyedSubscript:",  v15,  @"pageContext");
            }
            id v99 = (void *)v15;
            id v101 = v6;
            id v16 = (void *)objc_claimAutoreleasedReturnValue([v11 buyParams]);
            uint64_t v17 = objc_claimAutoreleasedReturnValue([v16 parameterForKey:@"extRefApp2"]);

            if (v17) {
              -[NSMutableDictionary setObject:forKeyedSubscript:]( v13,  "setObject:forKeyedSubscript:",  v17,  @"refApp");
            }
            [v11 setQosMetricsFields:v13];
            objc_msgSend(v11, "setDidShowPaymentSheet:", objc_msgSend(v7, "didShowPaymentSheet"));
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);

            uint64_t v98 = (void *)v17;
            if (v18)
            {
              id v19 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
              uint64_t v20 = ASDErrorWithSafeUserInfo(v19);
              uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
              __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v11 account]);
              uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "ams_DSID"));
              __int16 v24 = sub_1002EBF84((uint64_t)&OBJC_CLASS___StoreItemResponse, v21, v23);
              id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
              [v11 setItemResponse:v25];

              uint64_t v5 = v95;
              uint64_t v26 = *(void *)(*(void *)(a1 + 32) + 42LL);
              id v6 = v101;
              if (v26 && *(_BYTE *)(v26 + 24) && !*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
              {
                uint64_t v27 = objc_claimAutoreleasedReturnValue([v7 error]);
                uint64_t v28 = *(void *)(*(void *)(a1 + 48) + 8LL);
                id v29 = *(id *)(v28 + 40);
                *(void *)(v28 + 40) = v27;
                goto LABEL_67;
              }

LABEL_69:
        id v6 = (char *)v6 + 1;
      }

      while (v6 != v4);
      id v91 = [obj countByEnumeratingWithState:&v110 objects:v122 count:16];
      id v4 = v91;
    }

    while (v91);
  }

  [*(id *)(a1 + 40) setDelegate:0];
}

  PBDataWriterWriteBOOLField(v5, self->_isSystemApp, 26LL);
  if ((*(_WORD *)&self->_has & 0x80) != 0) {
LABEL_54:
  }
    PBDataWriterWriteBOOLField(v5, self->_isStoreApp, 27LL);
LABEL_55:
  bundleVersion = self->_bundleVersion;
  if (bundleVersion) {
    PBDataWriterWriteStringField(v5, bundleVersion, 28LL);
  }
  manifestURLString = self->_manifestURLString;
  if (manifestURLString) {
    PBDataWriterWriteStringField(v5, manifestURLString, 29LL);
  }
  if ((*(_WORD *)&self->_has & 0x800) != 0) {
    PBDataWriterWriteBOOLField(v5, self->_suppressDialogs, 30LL);
  }
  betaBuildGroupID = self->_betaBuildGroupID;
  if (betaBuildGroupID) {
    PBDataWriterWriteStringField(v5, betaBuildGroupID, 31LL);
  }
}
}

void sub_10025D0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = ASDErrorWithSafeUserInfo(a3);
  id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v5);
}

void sub_10025D27C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(25LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138543618;
      uint64_t v11 = v9;
      __int16 v12 = 2114;
      id v13 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%{public}@] Error in dialog task: %{public}@",  (uint8_t *)&v10,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void *sub_10025D3E0(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)&OBJC_CLASS___MigratorPromotionTask;
    a1 = objc_msgSendSuper2(&v12, "init");
    if (a1)
    {
      id v7 = [v5 copy];
      uint64_t v8 = (void *)a1[6];
      a1[6] = v7;

      id v9 = [v6 copy];
      int v10 = (void *)a1[7];
      a1[7] = v9;
    }
  }

  return a1;
}

id *sub_10025D76C(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)&OBJC_CLASS___DetermineSizeForURLTask;
    uint64_t v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 8, a2);
      objc_storeStrong(a1 + 5, a3);
    }
  }

  return a1;
}

void *sub_10025E0B8(void *a1, void *a2)
{
  uint64_t v4 = a2;
  if (a1)
  {
    id v5 = [a1 init];
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 7, a2);
      id v6 = sub_1001E2734(v4, (uint64_t)@"external_id");
      uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
      uint64_t v8 = (void *)a1[5];
      a1[5] = v7;

      id v9 = sub_100323C54(v4);
      uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
      uint64_t v11 = (void *)a1[9];
      a1[9] = v10;
    }
  }

  return a1;
}

void sub_10025EC4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t sub_10025EC90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10025ECA0(uint64_t a1)
{
}

AppInstallImportResult *sub_10025ECA8(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  id v9 = a4;
  objc_opt_self(a1);
  uint64_t v10 = objc_alloc_init(&OBJC_CLASS___AppInstallImportResult);
  v10->_status = 2LL;
  coordinator = v10->_coordinator;
  v10->_coordinator = v7;
  objc_super v12 = v7;

  externalID = v10->_externalID;
  v10->_externalID = v8;
  uint64_t v14 = v8;

  uint64_t v15 = ASDErrorWithSafeUserInfo(v9);
  uint64_t v16 = objc_claimAutoreleasedReturnValue(v15);

  error = v10->_error;
  v10->_error = (NSError *)v16;

  return v10;
}

BOOL sub_10025ED68(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  id v5 = *(void **)(a1[4] + 56LL);
  uint64_t v6 = *(void *)(a1[6] + 8LL);
  id v9 = *(void **)(v6 + 40);
  uint64_t v8 = (id *)(v6 + 40);
  id v7 = v9;
  id obj = v9;
  if (v3)
  {
    sub_1001B3EA0(v3, v5, 0, &obj, &v17);
    id v7 = obj;
  }

  else
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
  }

  objc_storeStrong(v8, v7);
  uint64_t v10 = *(void *)(a1[5] + 8LL);
  __int128 v11 = v18;
  *(_OWORD *)(v10 + 32) = v17;
  *(_OWORD *)(v10 + 4_Block_object_dispose(va, 8) = v11;
  uint64_t v12 = *(void *)(a1[5] + 8LL);
  uint64_t v13 = *(void *)(v12 + 56);
  if (v13 == 2)
  {
    if (*(_BYTE *)(a1[4] + 49LL))
    {
      sub_1001B510C((uint64_t)v4, *(void *)(v12 + 32));
      uint64_t v13 = *(void *)(*(void *)(a1[5] + 8LL) + 56LL);
    }

    else
    {
      uint64_t v13 = 2LL;
    }
  }

  BOOL v14 = v13 != 0;

  return v14;
}

uint64_t sub_10025EE84(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___AppInstallEntity);
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 32LL);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v7 = -[SQLiteEntity initWithPersistentID:onConnection:](v4, "initWithPersistentID:onConnection:", v5, v6);

  sub_10021B828(v7, *(id **)(a1 + 32));
  if (sub_1002E6090(*(id **)(a1 + 32)) == (id *)2)
  {
    uint64_t v8 = ASDLogHandleForCategory(2LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = sub_10021B614(v7);
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      int v18 = 138412290;
      id v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%@] Explicitly denied for low data network - canceling installation",  (uint8_t *)&v18,  0xCu);
    }

    if (v3) {
      id Property = objc_getProperty(v3, v12, 24LL, 1);
    }
    else {
      id Property = 0LL;
    }
    id v14 = Property;
    uint64_t v15 = sub_10021C40C(v7, -30LL);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    sub_1001EB714((uint64_t)v14, v16);
  }

  return 1LL;
}

void *sub_10025F414(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  v10.receiver = a1;
  v10.super_class = (Class)&OBJC_CLASS___ODRSpaceReduction;
  id v3 = objc_msgSendSuper2(&v10, "init");
  uint64_t v4 = v3;
  if (v3)
  {
    v3[1] = a2;
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v6 = (void *)v4[2];
    v4[2] = v5;

    if (a2 >= 1)
    {
      do
      {
        if (a2 >= 52428800) {
          uint64_t v7 = 52428800LL;
        }
        else {
          uint64_t v7 = a2;
        }
        a2 -= v7;
        uint64_t v8 = sub_1001E2A68((id *)objc_alloc(&OBJC_CLASS___ODRPreallocatedFile), (void *)v7);
        [(id)v4[2] addObject:v8];
      }

      while (a2 > 0);
    }
  }

  return v4;
}

void *sub_10025F4EC(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v11.receiver = a1;
    v11.super_class = (Class)&OBJC_CLASS___PushMessage;
    a1 = objc_msgSendSuper2(&v11, "init");
    if (a1)
    {
      uint64_t v4 = sub_10029885C(v3);
      uint64_t v5 = objc_claimAutoreleasedReturnValue(v4);
      uint64_t v6 = (void *)a1[1];
      a1[1] = v5;

      uint64_t v7 = sub_100298878(v3);
      uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
      id v9 = (void *)a1[2];
      a1[2] = v8;
    }
  }

  return a1;
}

void **sub_10025F578(void **a1)
{
  if (a1)
  {
    id v1 = sub_1001DEDF8(a1[1], @"0");
    a1 = (void **)objc_claimAutoreleasedReturnValue(v1);
  }

  return a1;
}

void **sub_10025F5A0(void **result)
{
  if (result) {
    return (void **)sub_1001DF39C(result[1], @"1", (id)0xFFFFFFFFFFFFFFFFLL);
  }
  return result;
}

id *sub_10025F5BC(id *a1)
{
  if (a1) {
    a1 = (id *)a1[1];
  }
  return a1;
}

void **sub_10025F5D8(void **a1, void *a2)
{
  if (a1)
  {
    id v2 = sub_1001DEDF8(a1[1], a2);
    a1 = (void **)objc_claimAutoreleasedReturnValue(v2);
  }

  return a1;
}

id *sub_10025F5F8(id *a1, uint64_t a2)
{
  if (a1) {
    a1 = (id *)objc_claimAutoreleasedReturnValue([a1[1] objectForKeyedSubscript:a2]);
  }
  return a1;
}

BOOL sub_10025F828(BOOL result, void *a2, void *a3)
{
  if (result)
  {
    uint64_t v4 = result;
    *(_BYTE *)(result + 56) = 1;
    id v5 = a2;
    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v7 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose(va, 8) = v6;

    [v5 acceptVisitor:v4 flags:1];
    int v8 = *(unsigned __int8 *)(v4 + 56);
    if (a3 && !*(_BYTE *)(v4 + 56))
    {
      if ([*(id *)(v4 + 48) count]) {
        id v9 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v4 + 48), "componentsJoinedByString:", @", "));
      }
      else {
        id v9 = @"Unknown validation error";
      }
      uint64_t v10 = ASDErrorDomain;
      NSErrorUserInfoKey v12 = NSDebugDescriptionErrorKey;
      uint64_t v13 = v9;
      objc_super v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
      *a3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v10,  507LL,  v11));

      int v8 = *(unsigned __int8 *)(v4 + 56);
    }

    return v8 != 0;
  }

  return result;
}

id sub_10025FAEC(_TtC9appstored6LogKey **a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  id v69 = v9;
  uint64_t v70 = v8;
  if (!a1)
  {
    uint64_t v40 = 0LL;
    goto LABEL_32;
  }

  id v10 = v9;
  objc_super v11 = objc_alloc(&OBJC_CLASS___AMSURLRequestEncoder);
  id v12 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  id v14 = -[AMSURLRequestEncoder initWithBag:](v11, "initWithBag:", v13);

  -[AMSURLRequestEncoder setRequestEncoding:](v14, "setRequestEncoding:", 1LL);
  -[AMSURLRequestEncoder setUrlKnownToBeTrusted:](v14, "setUrlKnownToBeTrusted:", 1LL);
  -[AMSURLRequestEncoder setMescalType:](v14, "setMescalType:", 1LL);
  uint64_t v15 = sub_1001B03DC(a1[5]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 description]);
  -[AMSURLRequestEncoder setLogUUID:](v14, "setLogUUID:", v17);

  id v18 = sub_1001B0354(a1[5]);
  uint64_t v19 = objc_claimAutoreleasedReturnValue(v18);
  if (v19)
  {
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "ams_iTunesAccountWithDSID:", v19));

    if (v21)
    {
      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "ams_DSID"));

      if (v22) {
        -[AMSURLRequestEncoder setAccount:](v14, "setAccount:", v21);
      }
    }
  }

  id v67 = (void *)v19;
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( -[AMSURLRequestEncoder requestWithMethod:URL:parameters:]( v14,  "requestWithMethod:URL:parameters:",  a2,  v8,  v10));
  id v72 = 0LL;
  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 resultWithError:&v72]);
  id v25 = v72;

  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([a1 contentTypeHeaderValue]);
  if (v26) {
    [v24 setValue:v26 forHTTPHeaderField:@"Content-Type"];
  }
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([a1 acceptHeaderValue]);
  if (v27) {
    [v24 setValue:v27 forHTTPHeaderField:@"Accept"];
  }
  if (v25)
  {
    uint64_t v28 = ASDLogHandleForCategory(38LL);
    id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
    {
      uint64_t v58 = a1[5];
      id v59 = sub_1001B03DC(v58);
      id v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
      *(_DWORD *)__int128 buf = 138412546;
      id v74 = v60;
      __int16 v75 = 2114;
      double v76 = v70;
      _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "[%@]: Failed to create a request with %{public}@",  buf,  0x16u);
    }

    uint64_t v30 = ASDErrorWithSafeUserInfo(v25);
    id v31 = (id)objc_claimAutoreleasedReturnValue(v30);
    uint64_t v32 = a5;
  }

  else
  {
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLSessionConfiguration ephemeralSessionConfiguration]( &OBJC_CLASS___NSURLSessionConfiguration,  "ephemeralSessionConfiguration"));
    objc_msgSend(v33, "set_sourceApplicationBundleIdentifier:", @"com.apple.TVAppStore");
    id v34 = sub_1001F4B70((uint64_t)&OBJC_CLASS___AMSProcessInfo);
    id v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    id v36 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    id v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
    objc_msgSend(v33, "ams_configureWithProcessInfo:bag:", v35, v37);

    id v38 = -[AMSURLSession initWithConfiguration:]( objc_alloc(&OBJC_CLASS___AMSURLSession),  "initWithConfiguration:",  v33);
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(-[AMSURLSession dataTaskPromiseWithRequest:](v38, "dataTaskPromiseWithRequest:", v24));
    id v71 = 0LL;
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v39 resultWithError:&v71]);
    id v41 = v71;
    id v25 = v41;
    uint64_t v66 = v39;
    if (v41)
    {
      uint64_t v63 = v24;
      id v61 = [v41 code];
      unsigned int v42 = (void *)objc_claimAutoreleasedReturnValue([v25 userInfo]);
      __int128 v43 = (void *)objc_claimAutoreleasedReturnValue([v42 objectForKeyedSubscript:AMSErrorUserInfoKeyStatusCode]);

      uint64_t v64 = v38;
      id v62 = v43;
      if (v43) {
        id v44 = [v43 integerValue];
      }
      else {
        id v44 = v61;
      }
      unsigned __int8 v46 = (void *)objc_claimAutoreleasedReturnValue([v25 userInfo]);
      id v47 = (void *)objc_claimAutoreleasedReturnValue([v46 objectForKeyedSubscript:NSLocalizedDescriptionKey]);
      id v48 = v47;
      double v65 = v33;
      if (v47) {
        id v49 = v47;
      }
      else {
        id v49 = (id)objc_claimAutoreleasedReturnValue([v25 localizedDescription]);
      }
      id v50 = v49;

      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v25 userInfo]);
      id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 objectForKeyedSubscript:NSLocalizedFailureReasonErrorKey]);
      __int128 v53 = v52;
      if (v52) {
        id v54 = v52;
      }
      else {
        id v54 = (id)objc_claimAutoreleasedReturnValue([v25 localizedFailureReason]);
      }
      id v55 = v54;

      uint64_t v56 = ASDErrorWithTitleAndMessage(ASDErrorDomain, v44, v55, v50);
      id v31 = (id)objc_claimAutoreleasedReturnValue(v56);

      uint64_t v32 = a5;
      id v38 = v64;
      uint64_t v33 = v65;
      __int16 v24 = v63;
    }

    else
    {
      id v45 = v40;
      id v31 = 0LL;
      uint64_t v32 = a5;
    }

    if (!v25) {
      goto LABEL_31;
    }
  }

  uint64_t v40 = 0LL;
  if (v32 && v31)
  {
    id v31 = v31;
    uint64_t v40 = 0LL;
    *uint64_t v32 = v31;
  }

id *sub_100260028(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = -[NSURLComponents initWithURL:resolvingAgainstBaseURL:]( objc_alloc(&OBJC_CLASS___NSURLComponents),  "initWithURL:resolvingAgainstBaseURL:",  v3,  0LL);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSURLComponents queryItems](v4, "queryItems"));
    uint64_t v6 = (NSMutableArray *)[v5 mutableCopy];

    if (!v6) {
      uint64_t v6 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    }
    uint64_t v7 = +[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%d", sub_1001B0378(a1[5]));
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLQueryItem queryItemWithName:value:]( &OBJC_CLASS___NSURLQueryItem,  "queryItemWithName:value:",  @"attempt",  v8));
    -[NSMutableArray addObject:](v6, "addObject:", v9);

    if (os_variant_has_internal_content("com.apple.appstored"))
    {
      if (sub_1002601F4(@"disableAuth"))
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLQueryItem queryItemWithName:value:]( &OBJC_CLASS___NSURLQueryItem,  "queryItemWithName:value:",  @"no_weak_token_auth",  @"true"));
        -[NSMutableArray addObject:](v6, "addObject:", v10);
      }

      if (sub_1002601F4(@"disableMescal"))
      {
        objc_super v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLQueryItem queryItemWithName:value:]( &OBJC_CLASS___NSURLQueryItem,  "queryItemWithName:value:",  @"no_mescal_auth",  @"true"));
        -[NSMutableArray addObject:](v6, "addObject:", v11);
      }
    }

    -[NSURLComponents setQueryItems:](v4, "setQueryItems:", v6);
    uint64_t v12 = objc_claimAutoreleasedReturnValue(-[NSURLComponents URL](v4, "URL"));
    uint64_t v13 = (void *)v12;
    if (v12) {
      id v14 = (void *)v12;
    }
    else {
      id v14 = v3;
    }
    a1 = v14;
  }

  return a1;
}

id sub_1002601F4(void *a1)
{
  id v1 = a1;
  CFPropertyListRef v2 = sub_1002FA9A4((uint64_t)&OBJC_CLASS___AppDefaultsManager);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v1]);

  if ((objc_opt_respondsToSelector(v4, "BOOLValue") & 1) != 0) {
    id v5 = [v4 BOOLValue];
  }
  else {
    id v5 = 0LL;
  }

  return v5;
}

id sub_100260290(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)&OBJC_CLASS___ODRDeveloperToolsClient;
    a1 = objc_msgSendSuper2(&v10, "init");
    if (a1)
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___ODRDeveloperToolsProtocol));
      [v3 setExportedInterface:v4];

      id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___ODRDeveloperToolsProtocol));
      [v3 setRemoteObjectInterface:v5];

      [v3 setExportedObject:a1];
      [v3 resume];
      uint64_t v6 = ASDLogHandleForCategory(19LL);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)id v9 = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Created the developer tools client.",  v9,  2u);
      }
    }
  }

  return a1;
}

void sub_100260504( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100260520(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100260530(uint64_t a1)
{
}

void sub_100260538(uint64_t a1, void *a2)
{
  id v30 = a2;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v3 = sub_1002EEAF8(*(id **)(a1 + 32));
  id obj = (id)objc_claimAutoreleasedReturnValue(v3);
  id v31 = [obj countByEnumeratingWithState:&v36 objects:v43 count:16];
  if (v31)
  {
    uint64_t v28 = *(void *)v37;
    uint64_t v29 = a1;
    do
    {
      for (i = 0LL; i != v31; i = (char *)i + 1)
      {
        if (*(void *)v37 != v28) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void *)(*((void *)&v36 + 1) + 8LL * (void)i);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v5));
        id v7 = sub_100187ED4(v30, v6, *(void *)(a1 + 40));
        id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

        __int128 v34 = 0u;
        __int128 v35 = 0u;
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        id v9 = v8;
        id v10 = [v9 countByEnumeratingWithState:&v32 objects:v42 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = 0LL;
          uint64_t v13 = *(void *)v33;
          double v14 = 0.0;
          unint64_t v15 = -1LL;
          do
          {
            for (j = 0LL; j != v11; j = (char *)j + 1)
            {
              if (*(void *)v33 != v13) {
                objc_enumerationMutation(v9);
              }
              __int128 v17 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)j);
              sub_100195BCC(v17);
              double v14 = v14 + v18;
              id v19 = sub_1001F7C8C(v17);
              uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
              v12 += (uint64_t)[v20 unsignedLongLongValue];

              unint64_t v21 = sub_100195CC0(v17);
              if (v21 < v15) {
                unint64_t v15 = v21;
              }
            }

            id v11 = [v9 countByEnumeratingWithState:&v32 objects:v42 count:16];
          }

          while (v11);
        }

        else
        {
          uint64_t v12 = 0LL;
          double v14 = 0.0;
          unint64_t v15 = -1LL;
        }

        if ([v9 count]) {
          double v14 = v14 / (double)(unint64_t)[v9 count];
        }
        a1 = v29;
        v40[0] = @"ODRTag_PercentageCompleteKey";
        __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v14));
        v41[0] = v22;
        v40[1] = @"ODRTag_TimestampKey";
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        v41[1] = v23;
        v40[2] = @"ODRTag_StatusKey";
        __int16 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v15));
        void v41[2] = v24;
        v40[3] = @"ODRTag_SizeKey";
        id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v12));
        v40[4] = @"ODRTag_TagNameKey";
        v41[3] = v25;
        v41[4] = v5;
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v41,  v40,  5LL));

        [*(id *)(*(void *)(*(void *)(v29 + 48) + 8) + 40) addObject:v26];
      }

      id v31 = [obj countByEnumeratingWithState:&v36 objects:v43 count:16];
    }

    while (v31);
  }
}

void sub_100260B00(_Unwind_Exception *a1)
{
}

void sub_100260B2C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  id v5 = sub_100188A28(v4, v3);
  id v13 = (id)objc_claimAutoreleasedReturnValue(v5);
  id v6 = sub_1002B86C0(v13, &stru_1003EED68);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v7));
  id v9 = sub_100187ED4(v4, v8, *(void *)(a1 + 32));
  uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);

  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

id sub_100260BE4(id a1, ODRTag *a2)
{
  return sub_10023AC88(a2);
}

void sub_100260FB8(_Unwind_Exception *a1)
{
}

void sub_100260FF4(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v3));
  id v5 = sub_100187ED4(v4, v9, a1[5]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);

  uint64_t v7 = *(void *)(a1[6] + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_100261294( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1002612BC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = WeakRetained;
  if (WeakRetained) {
    id WeakRetained = objc_getProperty(WeakRetained, v3, 32LL, 1);
  }
  id v5 = WeakRetained;
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

id sub_1002613EC(uint64_t a1)
{
  if (qword_100462488 != -1) {
    dispatch_once(&qword_100462488, &stru_1003EEE00);
  }
  return (id)qword_100462480;
}

void sub_100261430(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___LaunchServicesCatalog);
  id v2 = sub_1002B0944((uint64_t)&OBJC_CLASS___ProgressCache);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v14 = v3;
  if (v1)
  {
    v15.receiver = v1;
    v15.super_class = (Class)&OBJC_CLASS___LaunchServicesCatalog;
    uint64_t v1 = objc_msgSendSuper2(&v15, "init");
    if (v1)
    {
      dispatch_queue_attr_t v4 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      id v5 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v4);
      dispatch_queue_t v6 = dispatch_queue_create("com.apple.AppStoreDaemon.LaunchServicesCatalog", v5);
      dispatchQueue = v1->_dispatchQueue;
      v1->_dispatchQueue = (OS_dispatch_queue *)v6;

      objc_storeStrong((id *)&v1->_progressCache, v3);
      id v8 = sub_1001BE868((id *)objc_alloc(&OBJC_CLASS___LibraryExpressionClassifier), v1);
      id v9 = sub_100297F00((id *)objc_alloc(&OBJC_CLASS___LibraryQueryPlanner), v8);
      planner = v1->_planner;
      v1->_planner = (LibraryQueryPlanner *)v9;

      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v11 addObserver:v1 selector:"_handleAppRegisteredNotification:" name:@"com.apple.LaunchServices.applicationRegistered" object:0];
      [v11 addObserver:v1 selector:"_handleAppUnregisteredNotification:" name:@"com.apple.LaunchServices.applicationUnregistered" object:0];
      [v11 addObserver:v1 selector:"_handleBagChangedNotification:" name:AMSBagChangedNotification object:0];
      [v11 addObserver:v1 selector:"_handleBagInvalidatedNotification:" name:AMSBagInvalidatedNotification object:0];
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationWorkspace defaultWorkspace]( &OBJC_CLASS___LSApplicationWorkspace,  "defaultWorkspace"));
      [v12 addObserver:v1];
    }
  }

  id v13 = (void *)qword_100462480;
  qword_100462480 = (uint64_t)v1;
}

id sub_1002616E4(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v14 = 0LL;
  objc_super v15 = &v14;
  uint64_t v16 = 0x3032000000LL;
  __int128 v17 = sub_1002617F4;
  double v18 = sub_100261804;
  id v19 = 0LL;
  uint64_t v8 = 0LL;
  id v9 = &v8;
  uint64_t v10 = 0x3032000000LL;
  uint64_t v11 = sub_1002617F4;
  uint64_t v12 = sub_100261804;
  id v13 = 0LL;
  uint64_t v3 = *(dispatch_queue_s **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10026180C;
  block[3] = &unk_1003EEE28;
  void block[4] = a1;
  void block[5] = &v8;
  block[6] = &v14;
  dispatch_async_and_wait(v3, block);
  dispatch_queue_attr_t v4 = (void *)v15[5];
  if (a2)
  {
    if (!v4)
    {
      *a2 = (id) v9[5];
      dispatch_queue_attr_t v4 = (void *)v15[5];
    }
  }

  id v5 = v4;
  _Block_object_dispose(&v8, 8);

  _Block_object_dispose(&v14, 8);
  return v5;
}

uint64_t sub_1002617F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100261804(uint64_t a1)
{
}

void sub_10026180C(uint64_t *a1)
{
  id v2 = *(void **)(a1[4] + 48);
  if (v2)
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v2 keyEnumerator]);
    uint64_t v3 = objc_claimAutoreleasedReturnValue([v10 allObjects]);
    uint64_t v4 = *(void *)(a1[6] + 8);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = v3;

    dispatch_queue_t v6 = v10;
  }

  else
  {
    uint64_t v7 = ASDErrorWithUserInfoAndFormat(512LL, 0LL, @"System application mapping was not available");
    uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = *(void *)(a1[5] + 8);
    dispatch_queue_t v6 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
}

void sub_1002618A4(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    uint64_t v9 = sub_100263EC8;
    uint64_t v10 = &unk_1003E9880;
    dispatch_semaphore_t v11 = dispatch_semaphore_create(0LL);
    uint64_t v4 = v11;
    id v5 = v3;
    dispatch_queue_t v6 = v8;
    uint64_t v7 = v6;
    if (*(_BYTE *)(a1 + 40)) {
      v9((uint64_t)v6);
    }
    else {
      sub_100263874(a1, v5, 1, v6);
    }

    dispatch_semaphore_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
  }

void sub_1002619FC(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100261AA4;
  v7[3] = &unk_1003EEE50;
  id v2 = *(void **)(a1 + 32);
  void v7[4] = *(void *)(a1 + 40);
  id v3 = sub_1002B86C0(v2, v7);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16LL));
  id v6 = [v4 copy];
  [WeakRetained catalogRegisteredApps:v6];
}

id sub_100261AA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___LSApplicationRecord);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);

  id v6 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( v4,  "initWithBundleIdentifier:allowPlaceholder:error:",  v5,  0LL,  0LL);
  if (v6)
  {
    id v7 = sub_100261B3C(*(void *)(a1 + 32), v6);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  return v8;
}

id sub_100261B3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!a1)
  {
    id v18 = 0LL;
    goto LABEL_39;
  }

  uint64_t v5 = [v3 isBeta];
  if (v4) {
    uint64_t v6 = 2 * ([v4 applicationFamilyID] != 0);
  }
  else {
    uint64_t v6 = 0LL;
  }
  uint64_t v7 = v6 | v5;
  else {
    uint64_t v8 = 4LL;
  }
  unsigned int v9 = [v4 isLaunchProhibited];
  uint64_t v10 = 16LL;
  if (!v9) {
    uint64_t v10 = 0LL;
  }
  uint64_t v11 = v7 | v8 | v10;
  else {
    uint64_t v12 = 0LL;
  }
  unsigned int v13 = [v4 isPlaceholder];
  uint64_t v14 = 128LL;
  if (!v13) {
    uint64_t v14 = 0LL;
  }
  uint64_t v15 = v11 | v12 | v14;
  id v16 = objc_alloc(&OBJC_CLASS___ASDApp);
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
  id v18 = [v16 initWithBundleID:v17];

  id v19 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedName]);
  [v18 setLocalizedName:v19];

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v4 iTunesMetadata]);
  id v21 = [v20 storeItemIdentifier];
  if (v21)
  {
    id v22 = v21;
LABEL_18:
    [v18 setStoreItemID:v22];
    if ([v4 isBeta])
    {
      objc_msgSend(v18, "setStoreExternalVersionID:", objc_msgSend(v20, "betaVersionIdentifier"));
    }

    else
    {
      uint64_t v26 = v15 | 0x100;
      objc_msgSend(v18, "setStoreExternalVersionID:", objc_msgSend(v20, "versionIdentifier"));
      if ((v15 & 0x200) == 0)
      {
        id v27 = (id)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
        uint64_t v28 = sub_1002B19FC(*(void **)(a1 + 32), v27);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

        if (v29)
        {
          id v30 = 0LL;
        }

        else
        {
          uint64_t v55 = 0LL;
          uint64_t v56 = &v55;
          uint64_t v57 = 0x3032000000LL;
          uint64_t v58 = sub_1002617F4;
          id v59 = sub_100261804;
          id v60 = 0LL;
          id v31 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
          id v49 = _NSConcreteStackBlock;
          uint64_t v50 = 3221225472LL;
          uint64_t v51 = sub_100263ED0;
          id v52 = &unk_1003EBC50;
          id v54 = &v55;
          id v53 = v27;
          [v32 readUsingSession:&v49];

          id v30 = (id)v56[5];
          _Block_object_dispose(&v55, 8);
        }

        if (v30)
        {
          __int128 v33 = (void *)objc_claimAutoreleasedReturnValue(+[AMSBuyParams buyParamsWithString:](&OBJC_CLASS___AMSBuyParams, "buyParamsWithString:", v30));
          __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v33 parameterForKey:AMSBuyParamPropertyAppExtVrsId]);
          __int128 v35 = v34;
          if (v34)
          {
            id v36 = [v34 longLongValue];
            if (v36 > [v20 versionIdentifier])
            {
              uint64_t v26 = v15 | 0x108;
              [v18 setUpdateBuyParams:v30];
            }
          }
        }
      }

      uint64_t v15 = v26;
    }

    __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "storeCohort", v49, v50, v51, v52));
    [v18 setStoreCohort:v37];

    goto LABEL_32;
  }

  uint64_t v23 = *(void **)(a1 + 48);
  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
  id v25 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:v24]);
  id v22 = [v25 unsignedLongLongValue];

  if (v22)
  {
    v15 |= 0x200uLL;
    goto LABEL_18;
  }

void sub_100262030( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002620C4(uint64_t a1)
{
  id v2 = sub_1002B86C0(*(id *)(a1 + 32), &stru_1003EEE90);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v2);
  if ([v4 count])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16LL));
    [WeakRetained catalogUnregisteredBundleIDs:v4];
  }
}

id sub_100262128(id a1, LSApplicationProxy *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationProxy appState](v2, "appState"));
  unsigned int v4 = [v3 isPlaceholder];

  if (!v4
    || (uint64_t v5 = objc_alloc(&OBJC_CLASS___LSApplicationRecord),
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationProxy bundleIdentifier](v2, "bundleIdentifier")),
        v7 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( v5,  "initWithBundleIdentifier:allowPlaceholder:error:",  v6,  0LL,  0LL),  v6,  v7,  uint64_t v8 = 0LL,  !v7))
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationProxy bundleIdentifier](v2, "bundleIdentifier"));
  }

  return v8;
}

void sub_100262358( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100262370(uint64_t a1)
{
  id v2 = sub_100297F74(*(void *)(*(void *)(a1 + 32) + 24LL), *(void **)(a1 + 40));
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1002624B4(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a3)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 8LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100262570;
    block[3] = &unk_1003EA390;
    id v8 = v5;
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(void **)(a1 + 40);
    id v12 = v8;
    uint64_t v13 = v9;
    id v14 = v10;
    dispatch_async(v7, block);
  }
}

void sub_100262570(uint64_t a1)
{
  id v21 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v22 objects:v35 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v23;
    do
    {
      for (i = 0LL; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v23 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);
        if (v7)
        {
          id v8 = sub_10026285C(*(id *)(a1 + 40), v7);
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
          if (v9)
          {
            objc_msgSend(v9, "setAutoUpdateEnabled:", objc_msgSend(v6, "autoUpdateEnabled"));
            id v10 = *(id *)(a1 + 40);
            id v11 = v7;
            if (v10)
            {
              uint64_t v29 = 0LL;
              id v30 = &v29;
              uint64_t v31 = 0x3032000000LL;
              __int128 v32 = sub_1002617F4;
              __int128 v33 = sub_100261804;
              id v34 = 0LL;
              id v12 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
              uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
              v26[0] = _NSConcreteStackBlock;
              v26[1] = 3221225472LL;
              v26[2] = sub_100263E88;
              v26[3] = &unk_1003EBC50;
              uint64_t v28 = &v29;
              id v27 = v11;
              [v13 readUsingSession:v26];

              id v10 = (id)v30[5];
              _Block_object_dispose(&v29, 8);
            }

            [v9 setRawUpdateData:v10];
            id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 installDate]);
            [v9 setUpdateInstallDate:v14];

            id v15 = sub_1002B0944((uint64_t)&OBJC_CLASS___ProgressCache);
            id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
            __int128 v17 = sub_1002B19FC(v16, v11);
            id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
            [v9 setRemoteProgress:v18];

            -[NSMutableArray addObject:](v21, "addObject:", v9);
          }
        }
      }

      id v3 = [v2 countByEnumeratingWithState:&v22 objects:v35 count:16];
    }

    while (v3);
  }

  uint64_t v19 = *(void *)(a1 + 48);
  id v20 = -[NSMutableArray copy](v21, "copy");
  (*(void (**)(uint64_t, id, void))(v19 + 16))(v19, v20, 0LL);
}

void sub_10026283C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

id sub_10026285C(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    uint64_t v4 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "initWithBundleIdentifier:allowPlaceholder:error:",  v3,  1LL,  0LL);

    if (v4)
    {
      id v5 = sub_100261B3C((uint64_t)v2, v4);
      id v2 = (id)objc_claimAutoreleasedReturnValue(v5);
    }

    else
    {
      id v2 = 0LL;
    }
  }

  return v2;
}

void sub_100262988(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleID]);
  id v4 = sub_10026285C(v2, v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  if (!v5)
  {
    uint64_t v12 = ASDLogHandleForCategory(14LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v26 = (void *)objc_opt_class(*(void *)(a1 + 32), v13);
      id v27 = *(void **)(a1 + 40);
      id v28 = v26;
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v27 bundleID]);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v31 = v26;
      __int16 v32 = 2114;
      __int128 v33 = v29;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] Unable to launch. App not found",  buf,  0x16u);
    }

    goto LABEL_7;
  }

  if ([v5 isPlaceholder])
  {
    uint64_t v6 = ASDLogHandleForCategory(14LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)objc_opt_class(*(void *)(a1 + 32), v8);
      id v10 = v9;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleID]);
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v31 = v9;
      __int16 v32 = 2114;
      __int128 v33 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] Unable to launch messsages extension for placeholder",  buf,  0x16u);
    }

void sub_100262D24(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleID]);
  id v4 = sub_10026285C(v2, v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  if (v5)
  {
    if (([v5 isPlaceholder] & 1) == 0
      && ![v5 isLaunchProhibited])
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue( +[FBSOpenApplicationService serviceWithDefaultShellEndpoint]( &OBJC_CLASS___FBSOpenApplicationService,  "serviceWithDefaultShellEndpoint"));
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleID]);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      v22[2] = sub_100262FC4;
      v22[3] = &unk_1003EEF08;
      id v25 = *(id *)(a1 + 48);
      id v16 = v5;
      uint64_t v17 = *(void *)(a1 + 32);
      id v23 = v16;
      uint64_t v24 = v17;
      [v14 openApplication:v15 withOptions:0 completion:v22];

      goto LABEL_9;
    }

    uint64_t v6 = ASDLogHandleForCategory(14LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = (void *)objc_opt_class(*(void *)(a1 + 32), v8);
      id v10 = v9;
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleID]);
      *(_DWORD *)__int128 buf = 138544130;
      id v27 = v9;
      __int16 v28 = 2114;
      uint64_t v29 = v11;
      __int16 v30 = 1024;
      unsigned int v31 = [v5 isPlaceholder];
      __int16 v32 = 1024;
      unsigned int v33 = [v5 isLaunchProhibited];
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] Unable to launch. isPlaceholder: %{BOOL}d launchProhibited: %{BOOL}d",  buf,  0x22u);
    }
  }

  else
  {
    uint64_t v12 = ASDLogHandleForCategory(14LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      id v18 = (void *)objc_opt_class(*(void *)(a1 + 32), v13);
      uint64_t v19 = *(void **)(a1 + 40);
      id v20 = v18;
      id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 bundleID]);
      *(_DWORD *)__int128 buf = 138543618;
      id v27 = v18;
      __int16 v28 = 2114;
      uint64_t v29 = v21;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] Unable to locate app to launch",  buf,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_9:
}

void sub_100262FC4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = FBSOpenApplicationErrorDomain;
  if (ASDErrorIsEqual(v4, FBSOpenApplicationErrorDomain, 5LL))
  {
    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
LABEL_13:
    v6();
    goto LABEL_14;
  }

  if (!ASDErrorIsEqual(v4, FBSOpenApplicationServiceErrorDomain, 1LL))
  {
    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_13;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundlePath]);

  if (!v7)
  {
    uint64_t v11 = ASDLogHandleForCategory(14LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = (void *)objc_opt_class(*(void *)(a1 + 40), v13);
      id v15 = *(void **)(a1 + 32);
      id v16 = v14;
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 bundleID]);
      int v18 = 138543618;
      uint64_t v19 = v14;
      __int16 v20 = 2114;
      id v21 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Unable to launch because there is no bundle path",  (uint8_t *)&v18,  0x16u);
    }

    uint64_t v6 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
    goto LABEL_13;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:NSUnderlyingErrorKey]);

  else {
    uint64_t v10 = 2LL;
  }
  (*(void (**)(void, uint64_t))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v10);

LABEL_14:
}

id sub_100263244(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationRecord enumeratorWithOptions:]( &OBJC_CLASS___LSApplicationRecord,  "enumeratorWithOptions:",  0LL));
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1002632E8;
  v8[3] = &unk_1003EEF30;
  void v8[4] = *(void *)(a1 + 32);
  id v3 = sub_10031D8C8(v2, v8);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = sub_10031D99C(v4, *(void **)(a1 + 40));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  return v6;
}

id sub_1002632E8(uint64_t a1, void *a2)
{
  id v2 = sub_100261B3C(*(void *)(a1 + 32), a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3) {
    id v4 = sub_1002B5E74((uint64_t)&OBJC_CLASS___Optional, v3);
  }
  else {
    id v4 = sub_1002B5E08((uint64_t)&OBJC_CLASS___Optional);
  }
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

id sub_1002633E0(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[LSDatabaseContext sharedDatabaseContext](&OBJC_CLASS___LSDatabaseContext, "sharedDatabaseContext"));
  unsigned int v4 = [v3 startAccessingReturningError:0];
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v15;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        id v10 = sub_10026285C(*(id *)(a1 + 40), *(void **)(*((void *)&v14 + 1) + 8LL * (void)v9));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        if (v11) {
          -[NSMutableArray addObject:](v2, "addObject:", v11, (void)v14);
        }

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v7);
  }

  if (v4) {
    [v3 stopAccessing];
  }
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectEnumerator](v2, "objectEnumerator", (void)v14));

  return v12;
}

id sub_100263604(uint64_t a1)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10026372C;
  v14[3] = &unk_1003EEF80;
  id v2 = *(void **)(a1 + 32);
  void v14[4] = *(void *)(a1 + 40);
  id v3 = sub_1002B86C0(v2, v14);
  unsigned int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationRecord enumeratorWithOptions:]( &OBJC_CLASS___LSApplicationRecord,  "enumeratorWithOptions:",  0LL));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10026373C;
  v11[3] = &unk_1003EEFA8;
  id v12 = v4;
  id v13 = *(id *)(a1 + 32);
  id v6 = v4;
  [v5 setFilter:v11];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10026381C;
  v10[3] = &unk_1003EEF30;
  void v10[4] = *(void *)(a1 + 40);
  id v7 = sub_10031D8C8(v5, v10);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  return v8;
}

id sub_10026372C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:a2];
}

uint64_t sub_10026373C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
  if (v4
    && (id v5 = (void *)v4,
        id v6 = *(void **)(a1 + 32),
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]),
        LOBYTE(v6) = [v6 containsObject:v7],
        v7,
        v5,
        (v6 & 1) != 0))
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 iTunesMetadata]);
    id v10 = v9;
    if (v9)
    {
      uint64_t v11 = *(void **)(a1 + 40);
      id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v9 storeItemIdentifier]));
      uint64_t v8 = (uint64_t)[v11 containsObject:v12];
    }

    else
    {
      uint64_t v8 = 0LL;
    }
  }

  return v8;
}

id sub_10026381C(uint64_t a1, void *a2)
{
  id v2 = sub_100261B3C(*(void *)(a1 + 32), a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3) {
    uint64_t v4 = sub_1002B5E74((uint64_t)&OBJC_CLASS___Optional, v3);
  }
  else {
    uint64_t v4 = sub_1002B5E08((uint64_t)&OBJC_CLASS___Optional);
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  return v5;
}

void sub_100263874(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    *(_BYTE *)(a1 + 40) = 0;
    id v9 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_100263958;
    v11[3] = &unk_1003EEFF8;
    void v11[4] = a1;
    id v12 = v7;
    id v13 = v8;
    char v14 = a3;
    sub_100256A34(v10, @"hideableSystemApps", 0, v11);
  }
}

void sub_100263958(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100263A58;
  v12[3] = &unk_1003EEFD0;
  id v7 = *(void **)(a1 + 40);
  void v12[4] = *(void *)(a1 + 32);
  id v13 = v7;
  id v8 = v5;
  id v14 = v8;
  id v9 = v6;
  id v15 = v9;
  id v16 = *(id *)(a1 + 48);
  id v10 = objc_retainBlock(v12);
  uint64_t v11 = v10;
  if (*(_BYTE *)(a1 + 56)) {
    ((void (*)(void *))v10[2])(v10);
  }
  else {
    dispatch_async(*(dispatch_queue_t *)(*(void *)(a1 + 32) + 8LL), v10);
  }
}

uint64_t sub_100263A58(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 40))
  {
    id v3 = *(void **)(a1 + 48);
    uint64_t v4 = *(void **)(a1 + 56);
    id v5 = *(id *)(a1 + 40);
    id v6 = v3;
    id v7 = v4;
    uint64_t v8 = ASDLogHandleForCategory(14LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    id v10 = v9;
    if (v6)
    {
      id v45 = v7;
      uint64_t v47 = v1;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = (void *)objc_opt_class(v2, v11);
        id v13 = v12;
        *(_DWORD *)__int128 buf = 138543874;
        id v61 = v12;
        __int16 v62 = 2048;
        id v63 = [v6 count];
        __int16 v64 = 2114;
        id v65 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[%{public}@]: Loading %lu system app mappings: %{public}@",  buf,  0x20u);
      }

      uint64_t v44 = v2;
      id v46 = v5;

      id v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( NSMutableDictionary,  "dictionaryWithCapacity:",  [v6 count]));
      id v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithCapacity:]( NSMutableDictionary,  "dictionaryWithCapacity:",  [v6 count]));
      __int128 v50 = 0u;
      __int128 v51 = 0u;
      __int128 v52 = 0u;
      __int128 v53 = 0u;
      id v14 = sub_1002D64A4(v6);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      id v16 = [v15 countByEnumeratingWithState:&v50 objects:buf count:16];
      if (v16)
      {
        id v17 = v16;
        uint64_t v18 = *(void *)v51;
        do
        {
          for (i = 0LL; i != v17; i = (char *)i + 1)
          {
            if (*(void *)v51 != v18) {
              objc_enumerationMutation(v15);
            }
            __int16 v20 = *(void **)(*((void *)&v50 + 1) + 8LL * (void)i);
            id v21 = sub_1001DF594(v20, @"bundle-id");
            __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            id v23 = sub_1001DF594(v20, @"id");
            uint64_t v24 = objc_claimAutoreleasedReturnValue(v23);
            id v25 = (void *)v24;
            if (v22) {
              BOOL v26 = v24 == 0;
            }
            else {
              BOOL v26 = 1;
            }
            if (!v26)
            {
              id v27 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  sub_1001F56A8(v24));
              __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
              [v49 setObject:v28 forKeyedSubscript:v22];

              uint64_t v29 = +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  sub_1001F56A8((uint64_t)v25));
              __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
              [v48 setObject:v22 forKeyedSubscript:v30];
            }
          }

          id v17 = [v15 countByEnumeratingWithState:&v50 objects:buf count:16];
        }

        while (v17);
      }

      uint64_t v31 = ASDLogHandleForCategory(14LL);
      __int16 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      id v7 = v45;
      id v10 = (os_log_s *)v49;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v40 = (void *)objc_opt_class(v44, v33);
        id v41 = v40;
        id v42 = [v49 count];
        *(_DWORD *)id v54 = 138412802;
        uint64_t v55 = v40;
        __int16 v56 = 2048;
        id v57 = v42;
        __int16 v58 = 2112;
        id v59 = v49;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEBUG,  "[%@]: Found mappings for %lu system apps: %@",  v54,  0x20u);
      }

      id v34 = [v49 copy];
      __int128 v35 = *(void **)(v44 + 48);
      *(void *)(v44 + 4_Block_object_dispose(va, 8) = v34;

      id v36 = [v48 copy];
      __int128 v37 = *(void **)(v44 + 56);
      *(void *)(v44 + 56) = v36;

      *(_BYTE *)(v44 + 40) = 1;
      id v5 = v46;
      uint64_t v1 = v47;
    }

    else if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138412802;
      id v61 = (id)objc_opt_class(v2, v38);
      __int16 v62 = 2114;
      id v63 = v5;
      __int16 v64 = 2114;
      id v65 = v7;
      id v43 = v61;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[%@]: Failed to fetch system application map: %{public}@ error: %{public}@",  buf,  0x20u);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(v1 + 64) + 16LL))();
}

void sub_100263E88(uint64_t a1, id a2)
{
  id v3 = sub_100320394(a2, *(void **)(a1 + 32));
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

uint64_t sub_100263EC8(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_100263ED0(uint64_t a1, id a2)
{
  id v3 = sub_1003200F0(a2, *(void **)(a1 + 32));
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_100263FD0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"bundleIDs"]);
  id v4 = [v3 copy];

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100264154;
  v14[3] = &unk_1003EF020;
  void v14[4] = *(void *)(a1 + 40);
  id v5 = sub_1002B86C0(v4, v14);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if ([v6 count])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16LL));
    id v8 = [v6 copy];
    [WeakRetained catalogRegisteredApps:v8];
  }

  else
  {
    uint64_t v9 = ASDLogHandleForCategory(14LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      id v12 = (void *)objc_opt_class(*(void *)(a1 + 40), v11);
      *(_DWORD *)__int128 buf = 138412290;
      id v16 = v12;
      id v13 = v12;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[%@] Apps registered notification did not contain any apps",  buf,  0xCu);
    }
  }
}

id sub_100264154(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "initWithBundleIdentifier:allowPlaceholder:error:",  v3,  0LL,  0LL);

  id v5 = sub_100261B3C(*(void *)(a1 + 32), v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  return v6;
}

void sub_100264278(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[LSDatabaseContext sharedDatabaseContext](&OBJC_CLASS___LSDatabaseContext, "sharedDatabaseContext"));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10026435C;
  v7[3] = &unk_1003EF048;
  id v8 = *(id *)(a1 + 32);
  id v6 = v2;
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v9 = v6;
  uint64_t v10 = v4;
  [v3 accessUsingBlock:v7];

  if (-[NSMutableArray count](v6, "count"))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16LL));
    [WeakRetained catalogUnregisteredBundleIDs:v6];
  }
}

void sub_10026435C(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (i = 0LL; i != v4; i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        id v8 = objc_alloc(&OBJC_CLASS___LSApplicationRecord);
        uint64_t v9 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( v8,  "initWithBundleIdentifier:allowPlaceholder:error:",  v7,  0LL,  0LL,  (void)v10);
        if (!v9) {
          [*(id *)(a1 + 40) addObject:v7];
        }
        sub_1002B0F20(*(void *)(*(void *)(a1 + 48) + 32LL), v7);
      }

      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }
}

void sub_1002644F0(uint64_t a1)
{
}

void sub_100264568(uint64_t a1)
{
}

void sub_10026467C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_100462490;
  qword_100462490 = (uint64_t)v1;
}

void sub_100264818(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
  uint64_t v3 = ASDLogHandleForCategory(37LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v49 = v2;
    __int16 v50 = 2114;
    __int128 v51 = @"com.apple.appstored";
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%@] Starting subscription coordinator for client: %{public}@",  buf,  0x16u);
  }

  id v5 = sub_100264D64(*(void **)(a1 + 32), 1uLL, v2);
  __int128 v39 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v6 = sub_100264DA8(*(void *)(a1 + 32), 1LL, v39);
  id v7 = (__CFString *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = sub_100264D64(*(void **)(a1 + 32), 0LL, v2);
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v9 = sub_100264DA8(*(void *)(a1 + 32), 0LL, v44);
  id v42 = (__CFString *)objc_claimAutoreleasedReturnValue(v9);
  id v10 = sub_100264D64(*(void **)(a1 + 32), 2uLL, v2);
  id v43 = (void *)objc_claimAutoreleasedReturnValue(v10);
  id v11 = sub_100264DA8(*(void *)(a1 + 32), 2LL, v43);
  id v41 = (__CFString *)objc_claimAutoreleasedReturnValue(v11);
  id v12 = sub_100264D64(*(void **)(a1 + 32), 3uLL, v2);
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  id v14 = sub_100264DA8(*(void *)(a1 + 32), 3LL, v13);
  uint64_t v47 = (__CFString *)objc_claimAutoreleasedReturnValue(v14);
  id v15 = sub_100264D64(*(void **)(a1 + 32), 4uLL, v2);
  id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  id v17 = sub_100264DA8(*(void *)(a1 + 32), 4LL, v16);
  id v46 = (__CFString *)objc_claimAutoreleasedReturnValue(v17);
  id v18 = sub_100264D64(*(void **)(a1 + 32), 5uLL, v2);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  id v20 = sub_100264DA8(*(void *)(a1 + 32), 5LL, v19);
  id v45 = (__CFString *)objc_claimAutoreleasedReturnValue(v20);
  id v21 = sub_100264D64(*(void **)(a1 + 32), 6uLL, v2);
  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  id v23 = sub_100264DA8(*(void *)(a1 + 32), 6LL, v22);
  uint64_t v24 = (__CFString *)objc_claimAutoreleasedReturnValue(v23);
  id v25 = sub_100264D64(*(void **)(a1 + 32), 7uLL, v2);
  BOOL v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
  id v27 = sub_100264DA8(*(void *)(a1 + 32), 7LL, v26);
  uint64_t v40 = (__CFString *)objc_claimAutoreleasedReturnValue(v27);
  __int16 v28 = v7;
  if (v7
    || (__int16 v28 = v42) != 0LL
    || (__int16 v28 = v41) != 0LL
    || (__int16 v28 = v47) != 0LL
    || (__int16 v28 = v46) != 0LL
    || (__int16 v28 = v45) != 0LL
    || (__int16 v28 = v24) != 0LL
    || (__int16 v28 = v40) != 0LL)
  {
    uint64_t v29 = *(void *)(a1 + 32);
    __int16 v30 = v28;
    uint64_t v31 = *(void **)(v29 + 16);
    *(void *)(v29 + 16) = v30;
  }

  if (v47 || v46 || v45 || v24)
  {
    uint64_t v32 = ASDLogHandleForCategory(37LL);
    uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 buf = 138413314;
      id v49 = v2;
      __int16 v50 = 2114;
      __int128 v51 = v47;
      __int16 v52 = 2114;
      __int128 v53 = v46;
      __int16 v54 = 2114;
      uint64_t v55 = v45;
      __int16 v56 = 2114;
      id v57 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "[%@] Starting with musicAccountID: %{public}@ tvAccountID: %{public}@ iCloudAccountID: %{public}@ podcastAccountID: %{public}@",  buf,  0x34u);
    }
  }

  uint64_t v34 = ASDLogHandleForCategory(37LL);
  __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    id v36 = *(__CFString **)(*(void *)(a1 + 32) + 16LL);
    *(_DWORD *)__int128 buf = 138413058;
    id v49 = v2;
    __int16 v50 = 2114;
    __int128 v51 = v42;
    __int16 v52 = 2114;
    __int128 v53 = v7;
    __int16 v54 = 2114;
    uint64_t v55 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "[%@] Starting with newsAccountID: %{public}@ appStoreAccountID: %{public}@ lastAccount: %{public}@",  buf,  0x2Au);
  }

  sub_100264E38(*(void **)(a1 + 32), 0LL, v44, 0);
  sub_100264E38(*(void **)(a1 + 32), 1LL, v39, 0);
  sub_100264E38(*(void **)(a1 + 32), 2LL, v43, 0);
  sub_100264E38(*(void **)(a1 + 32), 3LL, v13, 0);
  sub_100264E38(*(void **)(a1 + 32), 4LL, v16, 0);
  sub_100264E38(*(void **)(a1 + 32), 5LL, v19, 0);
  sub_100264E38(*(void **)(a1 + 32), 6LL, v22, 0);
  sub_100264E38(*(void **)(a1 + 32), 7LL, v26, 0);
  uint64_t v37 = ASDLogHandleForCategory(37LL);
  uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    id v49 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "[%@] Subscription coordinator startup complete",  buf,  0xCu);
  }
}

id sub_100264D64(void *a1, unint64_t a2, void *a3)
{
  if (a1)
  {
    if (a2 > 7) {
      uint64_t v3 = @"Unknown";
    }
    else {
      uint64_t v3 = off_1003EF2D8[a2];
    }
    a1 = (void *)objc_claimAutoreleasedReturnValue([a3 prependingCategory:v3]);
  }

  return a1;
}

id sub_100264DA8(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    id v3 = sub_100266A9C(a2, a3, 1);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (v4)
    {
      id v5 = (void **)sub_1002D8060(objc_alloc(&OBJC_CLASS___SubscriptionEntitlementsResponse), v4);
      id v6 = v5;
      if (v5)
      {
        id v7 = sub_1002D80F4(v5);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      }

      else
      {
        id v8 = 0LL;
      }
    }

    else
    {
      id v8 = 0LL;
    }
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

void sub_100264E38(void *a1, uint64_t a2, void *a3, int a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
    uint64_t v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
    if (!v9
      || (id v10 = (void *)v9,
          id v11 = (void *)a1[2],
          id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID")),
          LOBYTE(v11) = [v11 isEqualToNumber:v12],
          v12,
          v10,
          (v11 & 1) == 0))
    {
      if (v8)
      {
        __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));

        uint64_t v14 = ASDLogHandleForCategory(37LL);
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        id v16 = v15;
        if (v13)
        {
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            id v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
            int v19 = 138412546;
            id v20 = v7;
            __int16 v21 = 2114;
            __int128 v22 = v17;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[%@] Clearing cached subscription entitlements after account change to: %{public}@",  (uint8_t *)&v19,  0x16u);
          }
        }

        else if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        {
          int v19 = 138412290;
          id v20 = v7;
          _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "[%@] Active account has nil DSID. Clearing cached subscription entitlements",  (uint8_t *)&v19,  0xCu);
        }
      }

      else
      {
        uint64_t v18 = ASDLogHandleForCategory(37LL);
        id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          int v19 = 138412290;
          id v20 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[%@] Clearing cached after account sign out",  (uint8_t *)&v19,  0xCu);
        }
      }

      sub_100268F84(a1, a2, v7);
      sub_100268944((uint64_t)a1, a2, v7, 0LL, a4, 1);
    }
  }
}

void sub_1002650FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100265188;
    v6[3] = &unk_1003E9FF8;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_100265188(uint64_t a1)
{
  unsigned __int8 v9 = 0;
  id v2 = sub_10026521C(*(void **)(a1 + 32), 1uLL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = sub_100265280(*(void *)(a1 + 32), 1LL, v3, (char *)&v9);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = sub_1002D853C((uint64_t)v5);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  (*(void (**)(uint64_t, void *, void, void))(v6 + 16))(v6, v8, v9, 0LL);
}

id sub_10026521C(void *a1, unint64_t a2)
{
  if (a1)
  {
    id v4 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
    id v5 = sub_100264D64(a1, a2, v4);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

void *sub_100265280(uint64_t a1, uint64_t a2, void *a3, char *a4)
{
  id v7 = a3;
  if (!a1)
  {
    __int16 v21 = 0LL;
    goto LABEL_14;
  }

  id v8 = sub_100266A9C(a2, v7, 0);
  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (v9)
  {
    id v10 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    id v12 = v11;
    if (v11) {
      double v13 = sub_10025716C(v11, @"fsEntitlementsRefreshIntervalInSeconds", 1, 14400.0);
    }
    else {
      double v13 = 0.0;
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:@"cacheTimestamp"]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 dateByAddingTimeInterval:v13]);

    if (v15
      && (id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
          id v17 = [v15 compare:v16],
          v16,
          v17 == (id)1))
    {
      char v18 = 0;
    }

    else
    {
      uint64_t v19 = ASDLogHandleForCategory(37LL);
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = 138412290;
        id v24 = v7;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[%@] Cached subscription entitlements have expired",  (uint8_t *)&v23,  0xCu);
      }

      char v18 = 1;
    }

    __int16 v21 = sub_1002D8060(objc_alloc(&OBJC_CLASS___SubscriptionEntitlementsResponse), v9);

    if (!a4) {
      goto LABEL_13;
    }
  }

  else
  {
    __int16 v21 = 0LL;
    char v18 = 1;
    if (!a4) {
      goto LABEL_13;
    }
  }

  *a4 = v18;
LABEL_13:

LABEL_14:
  return v21;
}

void sub_100265464(void *a1, unint64_t a2, void *a3, BOOL a4, BOOL a5, uint64_t a6, void *a7)
{
  id v12 = a3;
  id v13 = a7;
  if (a1)
  {
    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___SubscriptionRequestInfo);
    id v15 = sub_10026521C(a1, a2);
    id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    char v18 = v16;
    if (v14)
    {
      objc_setProperty_atomic(v14, v17, v16, 16LL);

      v14->_segment = a2;
      objc_setProperty_atomic(v14, v19, v12, 32LL);
      v14->_ignoreCaches = a4;
      v14->_isBackground = a5;
      v14->_notifyExternal = 1;
    }

    else
    {
    }

    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    void v20[2] = sub_100265584;
    v20[3] = &unk_1003EF0B0;
    id v21 = v13;
    sub_100265614((uint64_t)a1, v14, v20);
  }
}

void sub_100265584(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    unsigned __int8 v9 = v3;
    if (v3)
    {
      id v5 = v3[2];
      BOOL v6 = *((_BYTE *)v9 + 8) != 0;
      BOOL v7 = *((_BYTE *)v9 + 9) != 0;
      id v8 = v9[3];
    }

    else
    {
      BOOL v7 = 0LL;
      id v5 = 0LL;
      BOOL v6 = 0LL;
      id v8 = 0LL;
    }

    (*(void (**)(uint64_t, id, BOOL, BOOL, id))(v4 + 16))(v4, v5, v6, v7, v8);

    id v3 = v9;
  }
}

void sub_100265614(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    BOOL v7 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100266F24;
    block[3] = &unk_1003EA390;
    id v9 = v5;
    uint64_t v10 = a1;
    id v11 = v6;
    dispatch_async(v7, block);
  }
}

void sub_1002656BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    id v9 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10026578C;
    v11[3] = &unk_1003EF0D8;
    void v11[4] = a1;
    uint64_t v14 = a2;
    id v12 = v7;
    id v13 = v8;
    sub_10025585C((uint64_t)v10, v11);
  }
}

void sub_10026578C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(dispatch_queue_s **)(v2 + 8);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100265820;
  v6[3] = &unk_1003EEEE0;
  uint64_t v5 = *(void *)(a1 + 56);
  void v6[4] = v2;
  uint64_t v9 = v5;
  id v7 = v3;
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v4, v6);
}

void sub_100265820(uint64_t a1)
{
  id v2 = sub_10026521C(*(void **)(a1 + 32), *(void *)(a1 + 56));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = ASDLogHandleForCategory(37LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 48LL, 1);
    }
    id v8 = Property;
    *(_DWORD *)__int128 buf = 138412546;
    char v18 = v3;
    __int16 v19 = 2114;
    id v20 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] Requesting cached subscription entitlements for clientID: %{public}@",  buf,  0x16u);
  }

  char v16 = 0;
  uint64_t v9 = sub_100265280(*(void *)(a1 + 32), *(void *)(a1 + 56), v3, &v16);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = sub_1002D811C((uint64_t)v10);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = ASDLogHandleForCategory(37LL);
  uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = [v12 count];
    *(_DWORD *)__int128 buf = 138412546;
    char v18 = v3;
    __int16 v19 = 2048;
    id v20 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[%@] Returning %lu subscription entitlement(s)",  buf,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1002659CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  if (v2)
  {
    uint64_t v4 = ASDLogHandleForCategory(37LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] Marking the cached subscription entitlements as expired",  (uint8_t *)&v9,  0xCu);
    }

    id v6 = sub_100266A9C(v1, v3, 0);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    id v8 = [v7 mutableCopy];

    if (v8)
    {
      [v8 removeObjectForKey:@"cacheTimestamp"];
      sub_10026875C(v2, v8, v1, v3, 1, 1);
    }
  }
}

void sub_100265B98(uint64_t a1)
{
}

void sub_100265BB0(id *a1, void *a2, void *a3, unint64_t a4, int a5, int a6)
{
  id v11 = a2;
  id v12 = a3;
  if (a1)
  {
    id v13 = sub_10026521C(a1, a4);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    if (v11)
    {
      int v27 = a5;
      int v28 = a6;
      id v15 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
      uint64_t v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "ams_DSID"));
      if (v16
        && (id v17 = (void *)v16,
            char v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "ams_DSID")),
            unsigned int v19 = [v12 isEqualToNumber:v18],
            v18,
            v17,
            v19))
      {
        uint64_t v20 = ASDLogHandleForCategory(37LL);
        id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "ams_DSID"));
          *(_DWORD *)__int128 buf = 138412546;
          __int16 v30 = v14;
          __int16 v31 = 2114;
          id v32 = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "[%@] Setting cached subscriptions for account: %{public}@",  buf,  0x16u);
        }

        id v23 = [v11 mutableCopy];
        id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v23 setObject:v24 forKeyedSubscript:@"cacheTimestamp"];

        sub_10026875C((uint64_t)a1, v23, a4, v14, v27, v28);
        objc_storeStrong(a1 + 2, a3);
      }

      else
      {
        uint64_t v25 = ASDLogHandleForCategory(37LL);
        id v23 = (id)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled((os_log_t)v23, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "ams_DSID"));
          *(_DWORD *)__int128 buf = 138412802;
          __int16 v30 = v14;
          __int16 v31 = 2114;
          id v32 = v12;
          __int16 v33 = 2114;
          uint64_t v34 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v23,  OS_LOG_TYPE_DEFAULT,  "[%@] Not setting cached subscriptions because accountID: %{public}@ does not match active accountID: %{public}@",  buf,  0x20u);
        }
      }
    }

    else
    {
      sub_100268F84(a1, a4, v14);
    }

    +[TVTopShelfContentProvider _topShelfContentDidChangeForApplicationBundleIdentifier:]( &OBJC_CLASS___TVTopShelfContentProvider,  "_topShelfContentDidChangeForApplicationBundleIdentifier:",  @"com.apple.Arcade");
  }
}

NSUUID *sub_100265E38(uint64_t a1)
{
  return  -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  @"876F12EE-055C-49EB-8909-3BE6753CA832");
}

void sub_100265E64(void *a1)
{
  if (a1)
  {
    uint64_t v2 = sub_100265E38((uint64_t)&OBJC_CLASS___SubscriptionEntitlementsCoordinator);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    id v4 = sub_10026521C(a1, 1uLL);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    id v6 = sub_1002663AC();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    v9[2] = sub_1002665C4;
    void v9[3] = &unk_1003E9B18;
    id v10 = v5;
    id v11 = v3;
    id v7 = v3;
    id v8 = v5;
    [v6 clearStatusCondition:v7 completionHandler:v9];
  }

void sub_100265F2C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  id v8 = v7;
  if (v6)
  {
    id v33 = v7;
    int v9 = sub_1002D811C(*(void *)(a1 + 40));
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    id v10 = (id)objc_claimAutoreleasedReturnValue(v9);
    id v11 = [v10 countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v35;
      while (2)
      {
        for (i = 0LL; i != v12; i = (char *)i + 1)
        {
          if (*(void *)v35 != v13) {
            objc_enumerationMutation(v10);
          }
          id v15 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)i);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 familyID]);
          id v17 = [v16 integerValue];
          id v18 = [v6 integerValue];

          if (v17 == v18)
          {
            unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([v15 expiryDate]);
            uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
            id v21 = [v19 compare:v20];

            __int128 v22 = *(void **)(a1 + 48);
            if (v21 == (id)1)
            {
              id v8 = v33;
              if (v22)
              {
                id v23 = sub_100265E38((uint64_t)&OBJC_CLASS___SubscriptionEntitlementsCoordinator);
                id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
                id v25 = sub_10026521C(v22, 1uLL);
                BOOL v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
                id v27 = sub_1002663AC();
                *(void *)__int128 buf = _NSConcreteStackBlock;
                *(void *)&uint8_t buf[8] = 3221225472LL;
                *(void *)&uint8_t buf[16] = sub_100266460;
                uint64_t v40 = &unk_1003E9B18;
                id v41 = v26;
                id v42 = v24;
                id v28 = v24;
                id v29 = v26;
                [v27 setStatusCondition:v28 completionHandler:buf];
              }
            }

            else
            {
              sub_100265E64(*(void **)(a1 + 48));
              id v8 = v33;
            }

            goto LABEL_19;
          }
        }

        id v12 = [v10 countByEnumeratingWithState:&v34 objects:v38 count:16];
        if (v12) {
          continue;
        }
        break;
      }
    }

    sub_100265E64(*(void **)(a1 + 48));
    id v8 = v33;
LABEL_19:
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v30 = ASDLogHandleForCategory(37LL);
    __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      uint64_t v32 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v32;
      *(_WORD *)&_BYTE buf[12] = 2112;
      *(void *)&buf[14] = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_ERROR,  "[%@] Did not find arcade sub group id bag key, error: %@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }
}

void sub_10026621C(void *a1)
{
  if (a1)
  {
    id v2 = sub_10026521C(a1, 1uLL);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    uint64_t v4 = ASDLogHandleForCategory(37LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v15 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] Updating arcade ad status condition",  buf,  0xCu);
    }

    id v6 = objc_alloc_init(&OBJC_CLASS___SubscriptionRequestInfo);
    id v8 = v6;
    if (v6)
    {
      objc_setProperty_atomic(v6, v7, v3, 16LL);
      v8->_segment = 1LL;
    }

    int v9 = sub_100316A0C((uint64_t)&OBJC_CLASS___XPCRequestToken, 1);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    id v12 = v10;
    if (v8)
    {
      objc_setProperty_atomic(v8, v11, v10, 32LL);

      v8->_ignoreCaches = 0;
      *(_WORD *)&v8->_notifyExternal = 1;
    }

    else
    {
    }

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    _DWORD v13[2] = sub_10026639C;
    v13[3] = &unk_1003EF150;
    void v13[4] = a1;
    sub_100265614((uint64_t)a1, v8, v13);
  }

void sub_10026639C(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    sub_100265E64(*(void **)(a1 + 32));
  }
}

id sub_1002663AC()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  id v0 = (void *)qword_1004624A0;
  uint64_t v7 = qword_1004624A0;
  if (!qword_1004624A0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10026919C;
    v3[3] = &unk_1003ECDF8;
    v3[4] = &v4;
    sub_10026919C((uint64_t)v3);
    id v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100266448( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100266460(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory(37LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      int v12 = 138412802;
      uint64_t v13 = v6;
      __int16 v14 = 2114;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      id v17 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[%@] Did set status condition: %{public}@ error: %{public}@",  (uint8_t *)&v12,  0x20u);
    }
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    sub_1002F8E70((uint64_t)&OBJC_CLASS___AppDefaultsManager, v8);

    uint64_t v9 = ASDLogHandleForCategory(37LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      int v12 = 138412546;
      uint64_t v13 = v10;
      __int16 v14 = 2114;
      uint64_t v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] Did set status condition: %{public}@",  (uint8_t *)&v12,  0x16u);
    }
  }
}

void sub_1002665C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory(37LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      uint64_t v7 = *(void *)(a1 + 40);
      int v12 = 138412802;
      uint64_t v13 = v6;
      __int16 v14 = 2114;
      uint64_t v15 = v7;
      __int16 v16 = 2114;
      id v17 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[%@] Did clear status condition: %{public}@ error: %{public}@",  (uint8_t *)&v12,  0x20u);
    }
  }

  else
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    sub_1002F8E70((uint64_t)&OBJC_CLASS___AppDefaultsManager, v8);

    uint64_t v9 = ASDLogHandleForCategory(37LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      int v12 = 138412546;
      uint64_t v13 = v10;
      __int16 v14 = 2114;
      uint64_t v15 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] Did clear status condition: %{public}@",  (uint8_t *)&v12,  0x16u);
    }
  }
}

id sub_100266A9C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  id v6 = sub_100266CD4(a1, v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithContentsOfFile:](&OBJC_CLASS___NSData, "dataWithContentsOfFile:", v7));
  if (v8)
  {
    if (a3)
    {
      uint64_t v9 = ASDLogHandleForCategory(37LL);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v22 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[%@] Subscription entitlement cached on device",  buf,  0xCu);
      }
    }

    id v20 = 0LL;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v8,  0LL,  0LL,  &v20));
    uint64_t v13 = (os_log_s *)v20;
    if (v13)
    {
      uint64_t v14 = ASDLogHandleForCategory(37LL);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412546;
        id v22 = v5;
        __int16 v23 = 2114;
        id v24 = v13;
        _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[%@] Failed to read the subscription entitlements from disk error: %{public}@",  buf,  0x16u);
      }
    }

    uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSDictionary, v12);
    if ((objc_opt_isKindOfClass(v11, v16) & 1) != 0 && [v11 count]) {
      id v17 = v11;
    }
    else {
      id v17 = 0LL;
    }
  }

  else
  {
    uint64_t v18 = ASDLogHandleForCategory(37LL);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v22 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%@] Subscription entitlement not cached on device",  buf,  0xCu);
    }

    id v17 = 0LL;
  }

  return v17;
}

id sub_100266CD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(a1)
  {
    case 0LL:
      id v4 = sub_100220DDC((uint64_t)&OBJC_CLASS___Storage);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      id v6 = v5;
      uint64_t v7 = @"SubscriptionEntitlements_v2.plist";
      goto LABEL_13;
    case 1LL:
      id v10 = sub_100220DDC((uint64_t)&OBJC_CLASS___Storage);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v10);
      id v6 = v5;
      uint64_t v7 = @"SubscriptionEntitlementsAppStore_v2.plist";
      goto LABEL_13;
    case 2LL:
      id v11 = sub_100220DDC((uint64_t)&OBJC_CLASS___Storage);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v11);
      id v6 = v5;
      uint64_t v7 = @"SubscriptionEntitlementsActivity_v2.plist";
      goto LABEL_13;
    case 3LL:
      id v12 = sub_100220DDC((uint64_t)&OBJC_CLASS___Storage);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v12);
      id v6 = v5;
      uint64_t v7 = @"SubscriptionEntitlementsMusic_v2.plist";
      goto LABEL_13;
    case 4LL:
      id v13 = sub_100220DDC((uint64_t)&OBJC_CLASS___Storage);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v13);
      id v6 = v5;
      uint64_t v7 = @"SubscriptionEntitlementsTV_v2.plist";
      goto LABEL_13;
    case 5LL:
      id v14 = sub_100220DDC((uint64_t)&OBJC_CLASS___Storage);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v14);
      id v6 = v5;
      uint64_t v7 = @"SubscriptionEntitlementsiCloud_v2.plist";
      goto LABEL_13;
    case 6LL:
      id v15 = sub_100220DDC((uint64_t)&OBJC_CLASS___Storage);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v15);
      id v6 = v5;
      uint64_t v7 = @"SubscriptionEntitlementsPodcast_v2.plist";
      goto LABEL_13;
    case 7LL:
      id v16 = sub_100220DDC((uint64_t)&OBJC_CLASS___Storage);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v16);
      id v6 = v5;
      uint64_t v7 = @"SubscriptionEntitlementsHWBundle_v2.plist";
LABEL_13:
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v5 stringByAppendingPathComponent:v7]);

      if (!v17) {
        goto LABEL_14;
      }
      goto LABEL_17;
    default:
      uint64_t v8 = ASDLogHandleForCategory(37LL);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        int v21 = 138412290;
        id v22 = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%@] Unable to determine the path",  (uint8_t *)&v21,  0xCu);
      }

LABEL_14:
      uint64_t v18 = ASDLogHandleForCategory(37LL);
      unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v21 = 138412290;
        id v22 = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "[%@] Path to cached entitlement is nil",  (uint8_t *)&v21,  0xCu);
      }

      id v17 = 0LL;
LABEL_17:

      return v17;
  }

void sub_100266F24(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 24);
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = *(void *)(a1 + 40);
  if (!v4)
  {

LABEL_9:
    id v16 = *(void **)(a1 + 32);
    id v17 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 88LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002670D4;
    block[3] = &unk_1003EC880;
    id v18 = v16;
    uint64_t v19 = *(void *)(a1 + 40);
    id v21 = v18;
    uint64_t v22 = v19;
    uint64_t v23 = v3;
    dispatch_async(v17, block);

    return;
  }

  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v4 + 8));
  id v5 = *(void **)(v4 + 96);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v3));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:v6]);

  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  if (v8)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v8 + 8));
    id v10 = *(void **)(v8 + 96);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v3));
    id v12 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v11]);

    if (!v12) {
      id v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    }
    id v13 = [v9 copy];
    -[NSMutableArray addObject:](v12, "addObject:", v13);

    id v14 = *(void **)(v8 + 96);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v3));
    [v14 setObject:v12 forKeyedSubscript:v15];
  }

  if (!v7) {
    goto LABEL_9;
  }
}

void sub_1002670D4(void *a1, const char *a2)
{
  id Property = (id)a1[4];
  if (Property)
  {
    id Property = objc_getProperty(Property, a2, 32LL, 1);
    if (Property) {
      id Property = objc_getProperty(Property, v4, 48LL, 1);
    }
  }

  id v6 = Property;
  id v7 = (id)a1[4];
  if (v7) {
    id v7 = objc_getProperty(v7, v5, 32LL, 1);
  }
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 processInfo]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 bundleIdentifier]);
  unsigned __int8 v10 = [v6 isEqualToString:v9];

  uint64_t v11 = ASDLogHandleForCategory(37LL);
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if ((v10 & 1) != 0)
  {
    if (v13)
    {
      id v15 = (id)a1[4];
      if (v15) {
        id v15 = objc_getProperty(v15, v14, 16LL, 1);
      }
      id v17 = v15;
      id v18 = (id)a1[4];
      if (v18)
      {
        id v18 = objc_getProperty(v18, v16, 32LL, 1);
        if (v18) {
          id v18 = objc_getProperty(v18, v19, 48LL, 1);
        }
      }

      id v20 = v18;
      id v21 = v20;
      uint64_t v22 = a1[4];
      if (v22) {
        LODWORD(v22) = *(unsigned __int8 *)(v22 + 8);
      }
      *(_DWORD *)__int128 buf = 138412802;
      id v47 = v17;
      __int16 v48 = 2114;
      id v49 = v20;
      __int16 v50 = 1024;
      LODWORD(v51) = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[%@] Requesting subscription entitlements for clientID: %{public}@ ignoresCaches: %{BOOL}d",  buf,  0x1Cu);
LABEL_30:
    }
  }

  else if (v13)
  {
    id v23 = (id)a1[4];
    if (v23) {
      id v23 = objc_getProperty(v23, v14, 16LL, 1);
    }
    id v17 = v23;
    id v25 = (id)a1[4];
    if (v25)
    {
      id v25 = objc_getProperty(v25, v24, 32LL, 1);
      if (v25) {
        id v25 = objc_getProperty(v25, v26, 48LL, 1);
      }
    }

    id v21 = v25;
    id v28 = (id)a1[4];
    if (v28)
    {
      id v28 = objc_getProperty(v28, v27, 32LL, 1);
      if (v28) {
        id v28 = objc_getProperty(v28, v29, 56LL, 1);
      }
    }

    id v31 = v28;
    id v32 = (id)a1[4];
    if (v32) {
      id v32 = objc_getProperty(v32, v30, 32LL, 1);
    }
    id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 processInfo]);
    uint64_t v34 = objc_claimAutoreleasedReturnValue([v33 bundleIdentifier]);
    __int128 v35 = (void *)v34;
    uint64_t v36 = a1[4];
    if (v36) {
      LODWORD(v36) = *(unsigned __int8 *)(v36 + 8);
    }
    *(_DWORD *)__int128 buf = 138413314;
    id v47 = v17;
    __int16 v48 = 2114;
    id v49 = v21;
    __int16 v50 = 2114;
    id v51 = v31;
    __int16 v52 = 2114;
    uint64_t v53 = v34;
    __int16 v54 = 1024;
    int v55 = v36;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[%@] Requesting subscription entitlements for clientID: %{public}@ requestingBundleID: %{public}@ processInfoID: % {public}@ ignoresCaches: %{BOOL}d",  buf,  0x30u);

    goto LABEL_30;
  }

  __int128 v37 = (void *)a1[4];
  uint64_t v38 = a1[5];
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472LL;
  void v42[2] = sub_1002673F0;
  v42[3] = &unk_1003EF1E0;
  id v39 = v37;
  uint64_t v40 = a1[5];
  uint64_t v41 = a1[6];
  id v43 = v39;
  uint64_t v44 = v40;
  uint64_t v45 = v41;
  sub_100267750(v38, v39, v42);
}

void sub_1002673F0(void *a1, uint64_t a2, char a3, char a4, void *a5)
{
  id v9 = a5;
  unsigned __int8 v10 = sub_1002D811C(a2);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = ASDLogHandleForCategory(37LL);
  BOOL v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    id v15 = (void *)a1[4];
    if (v15) {
      id Property = objc_getProperty(v15, v14, 16LL, 1);
    }
    else {
      id Property = 0LL;
    }
    *(_DWORD *)__int128 buf = 138412546;
    id v30 = Property;
    __int16 v31 = 2048;
    id v32 = [v11 count];
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%@] Returning %lu subscription entitlement(s)",  buf,  0x16u);
  }

  uint64_t v17 = a1[5];
  uint64_t v18 = a1[6];
  uint64_t v19 = *(dispatch_queue_s **)(v17 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100267590;
  block[3] = &unk_1003EF1B8;
  char v27 = a3;
  char v28 = a4;
  id v23 = v11;
  id v24 = v9;
  uint64_t v25 = v17;
  uint64_t v26 = v18;
  id v20 = v9;
  id v21 = v11;
  dispatch_async(v19, block);
}

void sub_100267590(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___SubscriptionEntitlementsResult);
  uint64_t v4 = v2;
  if (v2)
  {
    objc_setProperty_nonatomic_copy(v2, v3, *(id *)(a1 + 32), 16LL);
    v4->_resultFromCache = *(_BYTE *)(a1 + 64);
    v4->_cacheExpired = *(_BYTE *)(a1 + 65);
    objc_storeStrong((id *)&v4->_error, *(id *)(a1 + 40));
  }

  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v17 = v4;
  if (v6)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v6 + 8));
    id v7 = *(void **)(v6 + 96);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v5));
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v8]);

    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v10 = v9;
    id v11 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v19;
      do
      {
        id v14 = 0LL;
        do
        {
          if (*(void *)v19 != v13) {
            objc_enumerationMutation(v10);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v18 + 1) + 8LL * (void)v14) + 16LL))();
          id v14 = (char *)v14 + 1;
        }

        while (v12 != v14);
        id v12 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }

      while (v12);
    }

    id v15 = *(void **)(v6 + 96);
    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v5));
    [v15 setObject:0 forKeyedSubscript:v16];
  }
}

void sub_100267750(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002677F8;
    block[3] = &unk_1003E9FD0;
    id v9 = v5;
    uint64_t v10 = a1;
    id v11 = v6;
    dispatch_async(v7, block);
  }
}

void sub_1002677F8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
  if (v2)
  {
    buf[0] = 0;
    uint64_t v3 = *(void *)(a1 + 32);
    if (v3)
    {
      if (*(_BYTE *)(v3 + 8))
      {
        id v4 = 0LL;
        goto LABEL_16;
      }

      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(v3 + 24);
      id Property = objc_getProperty(*(id *)(a1 + 32), (SEL)v3, 16LL, 1);
    }

    else
    {
      uint64_t v14 = 0LL;
      id Property = 0LL;
      uint64_t v13 = *(void *)(a1 + 40);
    }

    id v16 = sub_100265280(v13, v14, Property, (char *)buf);
    id v4 = (id)objc_claimAutoreleasedReturnValue(v16);
    if (v4 && !buf[0])
    {
      id v17 = sub_1001E1834((uint64_t)&OBJC_CLASS___DeviceStateMonitor);
      __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_100267D48;
      v21[3] = &unk_1003EF208;
      id v19 = *(id *)(a1 + 32);
      uint64_t v20 = *(void *)(a1 + 40);
      id v22 = v19;
      uint64_t v23 = v20;
      id v24 = v2;
      id v4 = v4;
      id v25 = v4;
      id v26 = *(id *)(a1 + 48);
      sub_1001E1C1C((uint64_t)v18, v21);

LABEL_17:
      goto LABEL_18;
    }

    uint64_t v3 = *(void *)(a1 + 32);
LABEL_16:
    sub_100267A70(*(void *)(a1 + 40), (void *)v3, v2, v4, *(void **)(a1 + 48));
    goto LABEL_17;
  }

  uint64_t v5 = ASDLogHandleForCategory(37LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = *(id *)(a1 + 32);
    if (v8)
    {
      id v10 = objc_getProperty(v8, v7, 16LL, 1);
      id v8 = *(id *)(a1 + 32);
      if (v8) {
        id v8 = objc_getProperty(v8, v9, 32LL, 1);
      }
    }

    else
    {
      id v10 = 0LL;
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 processInfo]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138412546;
    id v28 = v10;
    __int16 v29 = 2114;
    id v30 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%@] No active account when fetching subscriptions for clientID: %{public}@",  buf,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_18:
}

void sub_100267A70(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    uint64_t v13 = ASDLogHandleForCategory(37LL);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (v9) {
        id Property = objc_getProperty(v9, v15, 16LL, 1);
      }
      else {
        id Property = 0LL;
      }
      id v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ams_DSID"));
      *(_DWORD *)__int128 buf = 138412546;
      id v39 = Property;
      __int16 v40 = 2114;
      uint64_t v41 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[%@] Fetching subscriptions for accountID: %{public}@",  buf,  0x16u);
    }

    id v19 = objc_alloc(&OBJC_CLASS___SubscriptionEntitlementsRequest);
    if (v9)
    {
      id v20 = objc_getProperty(v9, v18, 32LL, 1);
      id v22 = objc_getProperty(v9, v21, 16LL, 1);
    }

    else
    {
      id v20 = 0LL;
      id v22 = 0LL;
    }

    uint64_t v23 = sub_100222A18((id *)&v19->super.isa, v20, v22);

    if (v23) {
      objc_setProperty_atomic(v23, v24, v10, 8LL);
    }
    if (v9)
    {
      id v25 = objc_msgSend(objc_getProperty(v9, v24, 32, 1), "processInfo");
      char v27 = (void *)objc_claimAutoreleasedReturnValue(v25);
      if (v23) {
        objc_setProperty_atomic(v23, v26, v27, 16LL);
      }

      if (*((_BYTE *)v9 + 9))
      {
        BOOL v28 = 0;
        if (!v23) {
          goto LABEL_19;
        }
      }

      else
      {
        BOOL v28 = *((_BYTE *)v9 + 8) != 0;
        if (!v23)
        {
LABEL_19:
          v33[0] = _NSConcreteStackBlock;
          v33[1] = 3221225472LL;
          v33[2] = sub_100267EB8;
          v33[3] = &unk_1003EF278;
          void v33[4] = a1;
          id v34 = v10;
          id v35 = v9;
          id v37 = v12;
          id v36 = v11;
          sub_100222A94((uint64_t)v23, v33);

          goto LABEL_20;
        }
      }

      *((_BYTE *)v23 + 40) = v28;
      __int16 v29 = (void *)*((void *)v9 + 3);
    }

    else
    {
      id v30 = (void *)objc_claimAutoreleasedReturnValue([0 processInfo]);
      id v32 = v30;
      if (!v23)
      {

        goto LABEL_19;
      }

      objc_setProperty_atomic(v23, v31, v30, 16LL);

      __int16 v29 = 0LL;
      *((_BYTE *)v23 + 40) = 0;
    }

    v23[6] = v29;
    goto LABEL_19;
  }

void sub_100267D48(uint64_t a1, char a2)
{
  uint64_t v4 = ASDLogHandleForCategory(37LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if ((a2 & 1) != 0)
  {
    if (v6)
    {
      id v8 = *(void **)(a1 + 32);
      if (v8) {
        id Property = objc_getProperty(v8, v7, 16LL, 1);
      }
      else {
        id Property = 0LL;
      }
      id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ams_DSID"));
      int v12 = 138412546;
      id v13 = Property;
      __int16 v14 = 2114;
      id v15 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] Returning cached subscriptions response for account: %{public}@",  (uint8_t *)&v12,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    if (v6)
    {
      id v11 = *(id *)(a1 + 32);
      if (v11) {
        id v11 = objc_getProperty(v11, v7, 16LL, 1);
      }
      int v12 = 138412290;
      id v13 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] Getting fresh entitlements refresh for this boot",  (uint8_t *)&v12,  0xCu);
    }

    sub_100267A70( *(void *)(a1 + 40),  *(void **)(a1 + 32),  *(void **)(a1 + 48),  *(void **)(a1 + 56),  *(void **)(a1 + 64));
  }

void sub_100267EB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  block[0] = _NSConcreteStackBlock;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 8);
  block[2] = sub_100267FB0;
  block[3] = &unk_1003EF250;
  block[1] = 3221225472LL;
  id v13 = v5;
  uint64_t v14 = v7;
  id v15 = v8;
  id v16 = *(id *)(a1 + 48);
  id v19 = *(id *)(a1 + 64);
  id v17 = *(id *)(a1 + 56);
  id v18 = v6;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v9, block);
}

void sub_100267FB0(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  if (v3)
  {
    uint64_t v4 = *(id **)(a1 + 40);
    id v5 = objc_getProperty(v3, a2, 8LL, 1);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "ams_DSID"));
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7)
    {
      unint64_t v8 = *(void *)(v7 + 24);
      BOOL v9 = *(_BYTE *)(v7 + 11) != 0;
      BOOL v10 = *(unsigned __int8 *)(v7 + 10) != 0;
    }

    else
    {
      BOOL v9 = 0;
      unint64_t v8 = 0LL;
      BOOL v10 = 0;
    }

    sub_100265BB0(v4, v5, v6, v8, v9, v10);

    uint64_t v11 = ASDLogHandleForCategory(37LL);
    int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id Property = *(id *)(a1 + 56);
      if (Property) {
        id Property = objc_getProperty(Property, v13, 16LL, 1);
      }
      *(_DWORD *)uint64_t v41 = 138412290;
      *(void *)&v41[4] = Property;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[%@] Returning updated subscriptions response",  v41,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
    id v15 = sub_1001E1834((uint64_t)&OBJC_CLASS___DeviceStateMonitor);
    id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    sub_1001E1CD8((uint64_t)v16);

    uint64_t v17 = *(void *)(a1 + 56);
    if (v17 && *(void *)(v17 + 24) == 1LL)
    {
      id v18 = *(void **)(a1 + 40);
      id v19 = *(id *)(a1 + 32);
      id v20 = &stru_1003EF228;
      if (v18)
      {
        id v21 = sub_10026521C(v18, 1uLL);
        id v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        uint64_t v23 = ASDLogHandleForCategory(37LL);
        id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)uint64_t v41 = 138412290;
          *(void *)&v41[4] = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[%@] Setting arcade ad status condition",  v41,  0xCu);
        }

        if (v19)
        {
          id v25 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
          id v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
          id v27 = sub_10025670C(v26, @"arcade-iap-family-id");
          BOOL v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
          *(void *)uint64_t v41 = _NSConcreteStackBlock;
          *(void *)&v41[8] = 3221225472LL;
          *(void *)&v41[16] = sub_100265F2C;
          id v42 = &unk_1003EF128;
          id v43 = v22;
          __int16 v29 = &stru_1003EF228;
          id v46 = &stru_1003EF228;
          id v44 = v19;
          uint64_t v45 = v18;
          [v28 valueWithCompletion:v41];
        }

        else
        {
          uint64_t v39 = ASDLogHandleForCategory(37LL);
          __int16 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint64_t v41 = 138412290;
            *(void *)&v41[4] = v22;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "[%@] Entitlement nil", v41, 0xCu);
          }

          sub_100265E64(v18);
        }
      }
    }
  }

  else
  {
    uint64_t v30 = *(void *)(a1 + 64);
    uint64_t v31 = ASDLogHandleForCategory(37LL);
    id v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    BOOL v33 = os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
    if (v30)
    {
      if (v33)
      {
        id v35 = *(id *)(a1 + 56);
        if (v35) {
          id v35 = objc_getProperty(v35, v34, 16LL, 1);
        }
        uint64_t v36 = *(void *)(a1 + 72);
        *(_DWORD *)uint64_t v41 = 138412546;
        *(void *)&v41[4] = v35;
        *(_WORD *)&v41[12] = 2114;
        *(void *)&v41[14] = v36;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "[%@] Returning cached subscription response due to request error: %{public}@",  v41,  0x16u);
      }
    }

    else if (v33)
    {
      id v37 = *(id *)(a1 + 56);
      if (v37) {
        id v37 = objc_getProperty(v37, v34, 16LL, 1);
      }
      uint64_t v38 = *(void *)(a1 + 72);
      *(_DWORD *)uint64_t v41 = 138412546;
      *(void *)&v41[4] = v37;
      *(_WORD *)&v41[12] = 2114;
      *(void *)&v41[14] = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "[%@] No cached subscriptions available, returning error: %{public}@",  v41,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

void sub_1002684FC(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(37LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v33 = 138412290;
    uint64_t v34 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[%@] Updating after account changed - inside dispatch queue",  (uint8_t *)&v33,  0xCu);
  }

  id v5 = *(void **)(a1 + 40);
  id v6 = sub_100264D64(v5, 0LL, *(void **)(a1 + 32));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  sub_100264E38(v5, 0LL, v7, 1);

  unint64_t v8 = *(void **)(a1 + 40);
  id v9 = sub_100264D64(v8, 1uLL, *(void **)(a1 + 32));
  BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  sub_100264E38(v8, 1LL, v10, 1);

  uint64_t v11 = *(void **)(a1 + 40);
  id v12 = sub_100264D64(v11, 2uLL, *(void **)(a1 + 32));
  id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  sub_100264E38(v11, 2LL, v13, 1);

  uint64_t v14 = *(void **)(a1 + 40);
  id v15 = sub_100264D64(v14, 3uLL, *(void **)(a1 + 32));
  id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  sub_100264E38(v14, 3LL, v16, 1);

  uint64_t v17 = *(void **)(a1 + 40);
  id v18 = sub_100264D64(v17, 4uLL, *(void **)(a1 + 32));
  id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  sub_100264E38(v17, 4LL, v19, 1);

  id v20 = *(void **)(a1 + 40);
  id v21 = sub_100264D64(v20, 5uLL, *(void **)(a1 + 32));
  id v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
  sub_100264E38(v20, 5LL, v22, 1);

  uint64_t v23 = *(void **)(a1 + 40);
  id v24 = sub_100264D64(v23, 6uLL, *(void **)(a1 + 32));
  id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  sub_100264E38(v23, 6LL, v25, 1);

  id v26 = *(void **)(a1 + 40);
  id v27 = sub_100264D64(v26, 7uLL, *(void **)(a1 + 32));
  BOOL v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  sub_100264E38(v26, 7LL, v28, 1);

  __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
  uint64_t v30 = objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "ams_DSID"));
  uint64_t v31 = *(void *)(a1 + 40);
  id v32 = *(void **)(v31 + 16);
  *(void *)(v31 + 16) = v30;
}

void sub_10026875C(uint64_t a1, void *a2, uint64_t a3, void *a4, int a5, int a6)
{
  id v11 = a2;
  id v12 = a4;
  id v13 = sub_100266CD4(a3, v12);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  if ([v14 length])
  {
    id v21 = 0LL;
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v11,  200LL,  0LL,  &v21));
    id v16 = v21;
    if (v16)
    {
      uint64_t v17 = ASDLogHandleForCategory(37LL);
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412546;
        id v23 = v12;
        __int16 v24 = 2114;
        id v25 = v16;
        _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "[%@] Failed to write the subscription entitlements to disk error: %{public}@",  buf,  0x16u);
      }
    }

    else
    {
      if (([v15 writeToFile:v14 atomically:1] & 1) == 0)
      {
        uint64_t v19 = ASDLogHandleForCategory(37LL);
        id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v23 = v12;
          _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "[%@] Failed to write the subscription entitlements to disk with unknown error:",  buf,  0xCu);
        }
      }

      sub_100268944(a1, a3, v12, v11, a5, a6);
    }
  }
}

void sub_100268944(uint64_t a1, uint64_t a2, void *a3, void *a4, int a5, int a6)
{
  id v11 = a3;
  id v12 = a4;
  switch(a2)
  {
    case 0LL:
      id v13 = "com.apple.appstored.NewsSubEntitlementsCacheUpdated";
      goto LABEL_18;
    case 1LL:
      if (a6)
      {
        uint64_t v16 = ASDLogHandleForCategory(37LL);
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v23) = 138412290;
          *(void *)((char *)&v23 + 4) = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[%@] Notifying external subscription changed",  (uint8_t *)&v23,  0xCu);
        }

        notify_post("com.apple.appstored.AppStoreSubEntitlementsCacheUpdated");
      }

      if (a5)
      {
        id v18 = v12;
        id v19 = v11;
        id v20 = *(dispatch_queue_s **)(a1 + 88);
        *(void *)&__int128 v23 = _NSConcreteStackBlock;
        *((void *)&v23 + 1) = 3221225472LL;
        __int16 v24 = sub_100268B80;
        id v25 = &unk_1003E97D0;
        id v21 = v18;
        id v26 = v21;
        id v22 = v19;
        id v27 = v22;
        uint64_t v28 = a1;
        dispatch_async(v20, &v23);
      }

      break;
    case 2LL:
      id v13 = "com.apple.appstored.ActivitySubEntitlementsCacheUpdated";
      goto LABEL_18;
    case 3LL:
      id v13 = "com.apple.appstored.MusicSubEntitlementsCacheUpdated";
      goto LABEL_18;
    case 4LL:
      id v13 = "com.apple.appstored.TVSubEntitlementsCacheUpdated";
      goto LABEL_18;
    case 5LL:
      id v13 = "com.apple.appstored.iCloudSubEntitlementsCacheUpdated";
      goto LABEL_18;
    case 6LL:
      id v13 = "com.apple.appstored.PodcastSubEntitlementsCacheUpdated";
      goto LABEL_18;
    case 7LL:
      id v13 = "com.apple.appstored.HWBundleSubEntitlementsCacheUpdated";
LABEL_18:
      notify_post(v13);
      break;
    default:
      uint64_t v14 = ASDLogHandleForCategory(37LL);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(v23) = 138412290;
        *(void *)((char *)&v23 + 4) = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[%@] Unable to cache invalid segment",  (uint8_t *)&v23,  0xCu);
      }

      break;
  }
}

void sub_100268B80(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    p_isa = sub_1002D8060(objc_alloc(&OBJC_CLASS___SubscriptionEntitlementsResponse), *(void **)(a1 + 32));
    uint64_t v3 = sub_1002D811C((uint64_t)p_isa);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = ASDLogHandleForCategory(37LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v25 = v7;
      __int16 v26 = 2048;
      id v27 = [v4 count];
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%@] Notifying internal cached subscription changed with %ld entitlements",  buf,  0x16u);
    }

    id v8 = sub_1002A4FE0((uint64_t)&OBJC_CLASS___OcelotManager);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    sub_1002A5AD8((uint64_t)v9, v4, *(void **)(a1 + 40));
  }

  else
  {
    BOOL v10 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));

    if (v10)
    {
      id v11 = objc_alloc_init(&OBJC_CLASS___SubscriptionRequestInfo);
      p_isa = &v11->super.isa;
      if (v11)
      {
        objc_setProperty_atomic(v11, v12, *(id *)(a1 + 40), 16LL);
        p_isa[3] = 1LL;
      }

      id v13 = sub_100316A0C((uint64_t)&OBJC_CLASS___XPCRequestToken, 1);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      uint64_t v16 = v14;
      if (p_isa)
      {
        objc_setProperty_atomic(p_isa, v15, v14, 32LL);

        *((_BYTE *)p_isa + _Block_object_dispose(va, 8) = 0;
        *((_WORD *)p_isa + 5) = 0;
      }

      else
      {
      }

      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472LL;
      v22[2] = sub_100268E04;
      v22[3] = &unk_1003EF2A0;
      uint64_t v17 = *(void *)(a1 + 48);
      id v23 = *(id *)(a1 + 40);
      sub_100267750(v17, p_isa, v22);
    }

    else
    {
      uint64_t v18 = ASDLogHandleForCategory(37LL);
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v25 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[%@] Notifying internal subscription changed following signout",  buf,  0xCu);
      }

      id v21 = sub_1002A4FE0((uint64_t)&OBJC_CLASS___OcelotManager);
      p_isa = (void *)objc_claimAutoreleasedReturnValue(v21);
      sub_1002A5AD8((uint64_t)p_isa, &__NSArray0__struct, *(void **)(a1 + 40));
    }
  }
}

void sub_100268E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a5;
  if (v7)
  {
    uint64_t v8 = ASDLogHandleForCategory(37LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v17 = 138412546;
      uint64_t v18 = v10;
      __int16 v19 = 2114;
      id v20 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%@] Notifying internal subscription changed resulted in error: %{public}@",  (uint8_t *)&v17,  0x16u);
    }
  }

  else
  {
    id v11 = sub_1002D811C(a2);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v12 = ASDLogHandleForCategory(37LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      int v17 = 138412546;
      uint64_t v18 = v14;
      __int16 v19 = 2048;
      id v20 = -[os_log_s count](v9, "count");
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%@] Notifying internal subscription changed to a new user with %ld entitlements",  (uint8_t *)&v17,  0x16u);
    }

    id v15 = sub_1002A4FE0((uint64_t)&OBJC_CLASS___OcelotManager);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    sub_1002A5AD8((uint64_t)v16, v9, *(void **)(a1 + 32));
  }
}

void sub_100268F84(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = ASDLogHandleForCategory(37LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%@] Clearing cached subscription entitlements",  (uint8_t *)&v11,  0xCu);
  }

  id v8 = sub_100266CD4(a2, v5);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  [v10 removeItemAtPath:v9 error:0];

  if (a2 == 1) {
    sub_100265E64(a1);
  }
}

Class sub_10026919C(uint64_t a1)
{
  id v5 = 0LL;
  uint64_t v2 = (const char *)&unk_100462000;
  if (!qword_1004624A8)
  {
    __int128 v6 = off_1003EF2C0;
    uint64_t v7 = 0LL;
    qword_1004624A8 = _sl_dlopen(&v6, &v5);
    uint64_t v3 = v5;
    if (!qword_1004624A8)
    {
      abort_report_np("%s", v5);
      goto LABEL_7;
    }

    if (v5) {
      goto LABEL_8;
    }
  }

  while (1)
  {
    uint64_t v2 = "ADStatusConditions";
    Class result = objc_getClass("ADStatusConditions");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
      break;
    }
LABEL_7:
    uint64_t v3 = (char *)abort_report_np("Unable to find class %s", v2);
LABEL_8:
    free(v3);
  }

  qword_1004624A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

id sub_1002692AC(uint64_t a1)
{
  v2[0] = @"bundle_id";
  v2[1] = @"session_reporter_key";
  v2[2] = @"last_refresh";
  return (id)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v2,  3LL));
}

void sub_100269690(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 144);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      __int128 v6 = *(void **)(a1 + 144);
      *(void *)(a1 + 144) = v5;

      uint64_t v4 = *(void **)(a1 + 144);
    }

    [v4 addObject:v7];
    id v3 = v7;
  }
}

uint64_t sub_100269D30(uint64_t a1, uint64_t a2)
{
  while (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      break;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      break;
    }
    switch((v6 >> 3))
    {
      case 1u:
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_WORD *)(a1 + 208) |= 0x10u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            break;
          }
          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            goto LABEL_127;
          }
          v12 += 7;
          BOOL v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_129;
          }
        }

        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_127:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_129:
        *(_DWORD *)(a1 + 176) = v14;
        continue;
      case 2u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v20 = 40LL;
        goto LABEL_125;
      case 3u:
        uint64_t v21 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v21);
        uint64_t v20 = 48LL;
        goto LABEL_125;
      case 4u:
        uint64_t v22 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v22);
        uint64_t v20 = 72LL;
        goto LABEL_125;
      case 5u:
        char v23 = 0;
        unsigned int v24 = 0;
        uint64_t v25 = 0LL;
        *(_WORD *)(a1 + 208) |= 1u;
        while (2)
        {
          unint64_t v26 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v26 == -1LL || v26 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v27 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 1;
            v25 |= (unint64_t)(v27 & 0x7F) << v23;
            if (v27 < 0)
            {
              v23 += 7;
              BOOL v9 = v24++ >= 9;
              if (v9)
              {
                uint64_t v25 = 0LL;
                goto LABEL_133;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v25 = 0LL;
        }
LABEL_133:
        uint64_t v93 = 8LL;
        goto LABEL_146;
      case 6u:
        uint64_t v28 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v28);
        uint64_t v20 = 88LL;
        goto LABEL_125;
      case 7u:
        char v29 = 0;
        unsigned int v30 = 0;
        uint64_t v25 = 0LL;
        *(_WORD *)(a1 + 208) |= 2u;
        while (2)
        {
          unint64_t v31 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v31 == -1LL || v31 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v32 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31 + 1;
            v25 |= (unint64_t)(v32 & 0x7F) << v29;
            if (v32 < 0)
            {
              v29 += 7;
              BOOL v9 = v30++ >= 9;
              if (v9)
              {
                uint64_t v25 = 0LL;
                goto LABEL_137;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v25 = 0LL;
        }
LABEL_137:
        uint64_t v93 = 16LL;
        goto LABEL_146;
      case 8u:
        char v33 = 0;
        unsigned int v34 = 0;
        uint64_t v25 = 0LL;
        *(_WORD *)(a1 + 208) |= 4u;
        while (2)
        {
          unint64_t v35 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v35 == -1LL || v35 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v36 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v35);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35 + 1;
            v25 |= (unint64_t)(v36 & 0x7F) << v33;
            if (v36 < 0)
            {
              v33 += 7;
              BOOL v9 = v34++ >= 9;
              if (v9)
              {
                uint64_t v25 = 0LL;
                goto LABEL_141;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v25 = 0LL;
        }
LABEL_141:
        uint64_t v93 = 24LL;
        goto LABEL_146;
      case 9u:
        char v37 = 0;
        unsigned int v38 = 0;
        uint64_t v25 = 0LL;
        *(_WORD *)(a1 + 208) |= 8u;
        while (2)
        {
          unint64_t v39 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v39 == -1LL || v39 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v40 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39 + 1;
            v25 |= (unint64_t)(v40 & 0x7F) << v37;
            if (v40 < 0)
            {
              v37 += 7;
              BOOL v9 = v38++ >= 9;
              if (v9)
              {
                uint64_t v25 = 0LL;
                goto LABEL_145;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v25 = 0LL;
        }
LABEL_145:
        uint64_t v93 = 32LL;
LABEL_146:
        *(void *)(a1 + v93) = v25;
        continue;
      case 0xAu:
        uint64_t v41 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v41);
        uint64_t v20 = 152LL;
        goto LABEL_125;
      case 0xBu:
        uint64_t v42 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v42);
        uint64_t v20 = 56LL;
        goto LABEL_125;
      case 0xCu:
        char v43 = 0;
        unsigned int v44 = 0;
        uint64_t v45 = 0LL;
        *(_WORD *)(a1 + 208) |= 0x20u;
        while (2)
        {
          unint64_t v46 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v46 == -1LL || v46 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v47 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46 + 1;
            v45 |= (unint64_t)(v47 & 0x7F) << v43;
            if (v47 < 0)
            {
              v43 += 7;
              BOOL v9 = v44++ >= 9;
              if (v9)
              {
                uint64_t v45 = 0LL;
                goto LABEL_150;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v45 = 0LL;
        }
LABEL_150:
        BOOL v94 = v45 != 0;
        uint64_t v95 = 200LL;
        goto LABEL_175;
      case 0xDu:
        uint64_t v48 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v48);
        uint64_t v20 = 96LL;
        goto LABEL_125;
      case 0xEu:
        char v49 = 0;
        unsigned int v50 = 0;
        uint64_t v51 = 0LL;
        *(_WORD *)(a1 + 208) |= 0x200u;
        while (2)
        {
          unint64_t v52 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v52 == -1LL || v52 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v53 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v52);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52 + 1;
            v51 |= (unint64_t)(v53 & 0x7F) << v49;
            if (v53 < 0)
            {
              v49 += 7;
              BOOL v9 = v50++ >= 9;
              if (v9)
              {
                uint64_t v51 = 0LL;
                goto LABEL_154;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v51 = 0LL;
        }
LABEL_154:
        BOOL v94 = v51 != 0;
        uint64_t v95 = 204LL;
        goto LABEL_175;
      case 0xFu:
        uint64_t v54 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v54);
        uint64_t v20 = 112LL;
        goto LABEL_125;
      case 0x10u:
        uint64_t Data = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(Data);
        uint64_t v20 = 120LL;
        goto LABEL_125;
      case 0x11u:
        uint64_t v56 = PBReaderReadData(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v56);
        uint64_t v20 = 128LL;
        goto LABEL_125;
      case 0x12u:
        uint64_t v57 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v57);
        uint64_t v20 = 136LL;
        goto LABEL_125;
      case 0x13u:
        uint64_t v58 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v58);
        uint64_t v20 = 160LL;
        goto LABEL_125;
      case 0x14u:
        uint64_t v59 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v59);
        uint64_t v20 = 168LL;
        goto LABEL_125;
      case 0x15u:
        uint64_t v60 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v60);
        uint64_t v20 = 192LL;
        goto LABEL_125;
      case 0x16u:
        uint64_t v61 = PBReaderReadData(a2);
        __int16 v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
        if (v62) {
          sub_100269690(a1, v62);
        }

        continue;
      case 0x17u:
        uint64_t v63 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v63);
        uint64_t v20 = 184LL;
        goto LABEL_125;
      case 0x18u:
        char v64 = 0;
        unsigned int v65 = 0;
        uint64_t v66 = 0LL;
        *(_WORD *)(a1 + 208) |= 0x400u;
        while (2)
        {
          unint64_t v67 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v67 == -1LL || v67 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v68 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v67);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v67 + 1;
            v66 |= (unint64_t)(v68 & 0x7F) << v64;
            if (v68 < 0)
            {
              v64 += 7;
              BOOL v9 = v65++ >= 9;
              if (v9)
              {
                uint64_t v66 = 0LL;
                goto LABEL_158;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v66 = 0LL;
        }
LABEL_158:
        BOOL v94 = v66 != 0;
        uint64_t v95 = 205LL;
        goto LABEL_175;
      case 0x19u:
        char v69 = 0;
        unsigned int v70 = 0;
        uint64_t v71 = 0LL;
        *(_WORD *)(a1 + 208) |= 0x40u;
        while (2)
        {
          unint64_t v72 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v72 == -1LL || v72 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v73 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v72);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v72 + 1;
            v71 |= (unint64_t)(v73 & 0x7F) << v69;
            if (v73 < 0)
            {
              v69 += 7;
              BOOL v9 = v70++ >= 9;
              if (v9)
              {
                uint64_t v71 = 0LL;
                goto LABEL_162;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v71 = 0LL;
        }
LABEL_162:
        BOOL v94 = v71 != 0;
        uint64_t v95 = 201LL;
        goto LABEL_175;
      case 0x1Au:
        char v74 = 0;
        unsigned int v75 = 0;
        uint64_t v76 = 0LL;
        *(_WORD *)(a1 + 208) |= 0x100u;
        while (2)
        {
          unint64_t v77 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v77 == -1LL || v77 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v78 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v77);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v77 + 1;
            v76 |= (unint64_t)(v78 & 0x7F) << v74;
            if (v78 < 0)
            {
              v74 += 7;
              BOOL v9 = v75++ >= 9;
              if (v9)
              {
                uint64_t v76 = 0LL;
                goto LABEL_166;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v76 = 0LL;
        }
LABEL_166:
        BOOL v94 = v76 != 0;
        uint64_t v95 = 203LL;
        goto LABEL_175;
      case 0x1Bu:
        char v79 = 0;
        unsigned int v80 = 0;
        uint64_t v81 = 0LL;
        *(_WORD *)(a1 + 208) |= 0x80u;
        while (2)
        {
          unint64_t v82 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v82 == -1LL || v82 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v83 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v82);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v82 + 1;
            v81 |= (unint64_t)(v83 & 0x7F) << v79;
            if (v83 < 0)
            {
              v79 += 7;
              BOOL v9 = v80++ >= 9;
              if (v9)
              {
                uint64_t v81 = 0LL;
                goto LABEL_170;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          uint64_t v81 = 0LL;
        }
LABEL_170:
        BOOL v94 = v81 != 0;
        uint64_t v95 = 202LL;
        goto LABEL_175;
      case 0x1Cu:
        uint64_t v84 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v84);
        uint64_t v20 = 80LL;
        goto LABEL_125;
      case 0x1Du:
        uint64_t v85 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v85);
        uint64_t v20 = 104LL;
        goto LABEL_125;
      case 0x1Eu:
        char v86 = 0;
        unsigned int v87 = 0;
        uint64_t v88 = 0LL;
        *(_WORD *)(a1 + 208) |= 0x800u;
        break;
      case 0x1Fu:
        uint64_t v91 = PBReaderReadString(a2);
        uint64_t v19 = objc_claimAutoreleasedReturnValue(v91);
        uint64_t v20 = 64LL;
LABEL_125:
        uint64_t v92 = *(void **)(a1 + v20);
        *(void *)(a1 + v20) = v19;

        continue;
      default:
        uint64_t result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result) {
          return result;
        }
        continue;
    }

    while (1)
    {
      unint64_t v89 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v89 == -1LL || v89 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v90 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v89);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v89 + 1;
      v88 |= (unint64_t)(v90 & 0x7F) << v86;
      if ((v90 & 0x80) == 0) {
        goto LABEL_172;
      }
      v86 += 7;
      BOOL v9 = v87++ >= 9;
      if (v9)
      {
        uint64_t v88 = 0LL;
        goto LABEL_174;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_172:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      uint64_t v88 = 0LL;
    }
LABEL_174:
    BOOL v94 = v88 != 0;
    uint64_t v95 = 206LL;
LABEL_175:
    *(_BYTE *)(a1 + v95) = v94;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_10026BE5C(void *a1)
{
  uint64_t v2 = ASDLogHandleForCategory(2LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = a1[4];
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v11 = v9;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "[%{public}@] itms-services requests are not valid on this hardware and will be ignored",  buf,  0xCu);
  }

  uint64_t v4 = ASDErrorDomain;
  uint64_t v5 = a1[6];
  unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"itms-services requests are not valid on this hardware and will be ignored: %@",  a1[5]));
  uint64_t v7 = ASDErrorWithDescription(v4, 531LL, v6);
  char v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v8);
}

void sub_10026C020(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(41LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v18 = v4;
    __int16 v19 = 2114;
    uint64_t v20 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Status requested by %{public}@",  buf,  0x16u);
  }

  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___ManagedAppStatusTask);
  objc_initWeak((id *)buf, v7);
  uint64_t v11 = _NSConcreteStackBlock;
  uint64_t v12 = 3221225472LL;
  unsigned int v13 = sub_10026C1E8;
  uint64_t v14 = &unk_1003EEDB8;
  objc_copyWeak(&v16, (id *)buf);
  id v15 = *(id *)(a1 + 40);
  -[ManagedAppStatusTask setCompletionBlock:](v7, "setCompletionBlock:", &v11);
  id v8 = sub_10020F1C0((uint64_t)&OBJC_CLASS___TaskQueue);
  uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);
  int v10 = (void *)v9;
  if (v9) {
    objc_msgSend(*(id *)(v9 + 8), "addOperation:", v7, v11, v12, v13, v14);
  }

  objc_destroyWeak(&v16);
  objc_destroyWeak((id *)buf);
}

void sub_10026C1C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10026C1E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = WeakRetained;
  if (WeakRetained) {
    id WeakRetained = objc_getProperty(WeakRetained, v3, 48LL, 1);
  }
  id v5 = WeakRetained;
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

void sub_10026C2CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  ASDErrorDomain,  911LL,  0LL));
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10026C400(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(41LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);
    int v11 = 138543874;
    uint64_t v12 = v4;
    __int16 v13 = 2114;
    uint64_t v14 = v5;
    __int16 v15 = 2114;
    id v16 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ New Manifest Request: %{public}@ by %{public}@",  (uint8_t *)&v11,  0x20u);
  }

  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  ASDErrorDomain,  500LL,  0LL));
  int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestIdentifier]);
  (*(void (**)(uint64_t, void *, void *))(v8 + 16))(v8, v9, v10);
}

void sub_10026C61C(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(41LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);
    int v13 = 138543874;
    uint64_t v14 = v4;
    __int16 v15 = 2114;
    uint64_t v16 = v5;
    __int16 v17 = 2114;
    uint64_t v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ New VPP Request: %{public}@ by %{public}@",  (uint8_t *)&v13,  0x20u);
  }

  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  ASDErrorDomain,  911LL,  0LL));
  int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) bundleIdentifier]);
  int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) itemIdentifier]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) requestIdentifier]);
  (*(void (**)(uint64_t, void *, void *, void *, void *))(v8 + 16))(v8, v9, v10, v11, v12);
}

id sub_10026C808(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0LL;
  }
  if (*(void *)(a1 + 112) != 1LL)
  {
    uint64_t v6 = ASDLogHandleForCategory(31LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = v7;
    os_signpost_id_t v9 = *(void *)(a1 + 8);
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_INTERVAL_BEGIN,  v9,  "App::Placeholder/Configure",  "",  buf,  2u);
    }

    if (![*(id *)(a1 + 48) length] || !objc_msgSend(*(id *)(a1 + 40), "length"))
    {
      uint64_t v35 = ASDErrorWithDescription(ASDErrorDomain, 802LL, v34);
      id v36 = (id)objc_claimAutoreleasedReturnValue(v35);
LABEL_32:

      uint64_t v16 = v36;
      goto LABEL_33;
    }

    id v10 = objc_alloc(&OBJC_CLASS___IXPlaceholder);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    uint64_t v13 = *(void *)(a1 + 80);
    id v88 = 0LL;
    id v14 = [v10 initAppPlaceholderWithBundleName:v11 bundleID:v12 installType:v13 client:1 error:&v88];
    id v15 = v88;
    uint64_t v16 = v15;
    if (!v14)
    {
LABEL_33:
      id v5 = v16;
      id v4 = 0LL;
      id v36 = v5;
      goto LABEL_34;
    }

    id v87 = v15;
    id v4 = v14;
    uint64_t v17 = *(void *)(a1 + 120);
    NSErrorUserInfoKey v91 = 0LL;
    unsigned int v18 = [v4 setMetadata:v17 error:&v91];
    __int16 v19 = v91;
    if (!v18)
    {
      LOBYTE(v23) = 0;
LABEL_77:

      id v36 = v87;
      if ((v23 & 1) != 0)
      {
        id v5 = 0LL;
LABEL_34:
        uint64_t v37 = ASDLogHandleForCategory(31LL);
        unsigned int v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        unint64_t v39 = v38;
        os_signpost_id_t v40 = *(void *)(a1 + 8);
        if (v40 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v38))
        {
          *(_WORD *)char v90 = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v39,  OS_SIGNPOST_INTERVAL_END,  v40,  "App::Placeholder/Configure",  "",  v90,  2u);
        }

        goto LABEL_38;
      }

      uint64_t v78 = ASDErrorDomain;
      if (v36)
      {
        NSErrorUserInfoKey v91 = NSUnderlyingErrorKey;
        *(void *)__int128 buf = v36;
        char v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  buf,  &v91,  1LL));
        unsigned int v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v78,  802LL,  v79));
      }

      else
      {
        unsigned int v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  ASDErrorDomain,  802LL,  0LL));
      }

      [v4 cancelForReason:v34 client:1 error:0];

      goto LABEL_32;
    }

    uint64_t v20 = *(void **)(a1 + 72);
    if (v20 && [v20 count])
    {
      id v21 = [[IXPromisedInMemoryDictionary alloc] initWithName:@"Entitlements" client:1 dictionary:*(void *)(a1 + 72)];
      if (([v4 setEntitlementsPromise:v21 error:&v87] & 1) == 0)
      {
        uint64_t v53 = ASDLogHandleForCategory(2LL);
        uint64_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
        if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
        {
          id Property = objc_getProperty((id)a1, v55, 88LL, 1);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = Property;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v19;
          _os_log_error_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_ERROR,  "[%@] Failed to set placeholder entitlements: %{public}@",  buf,  0x16u);
        }

        LOBYTE(v23) = 0;
        unsigned int v24 = v19;
        goto LABEL_76;
      }
    }

    id v22 = objc_alloc_init(&OBJC_CLASS___IXPlaceholderAttributes);
    id v21 = v22;
    if (*(void *)(a1 + 64)) {
      objc_msgSend(v22, "setCompanionBundleIdentifierForWatchApp:");
    }
    if (*(_BYTE *)(a1 + 19)) {
      [v21 setLaunchProhibited:1];
    }
    if (*(_BYTE *)(a1 + 16)) {
      [v21 setArcadeApp:1];
    }
    if (*(_BYTE *)(a1 + 20)) {
      [v21 setLsRequiresPostProcessing:1];
    }
    [v21 setUiDeviceFamily:*(void *)(a1 + 104)];
    *(void *)char v90 = v19;
    LODWORD(v23) = [v4 setPlaceholderAttributes:v21 error:v90];
    unsigned int v24 = (NSString *)*(id *)v90;

    if (!(_DWORD)v23)
    {
LABEL_76:

      __int16 v19 = v24;
      goto LABEL_77;
    }

    uint64_t v25 = ASDLogHandleForCategory(31LL);
    unint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    char v27 = v26;
    os_signpost_id_t v28 = *(void *)(a1 + 8);
    if (v28 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v26))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v27,  OS_SIGNPOST_INTERVAL_BEGIN,  v28,  "App::Placeholder/Artwork",  "",  buf,  2u);
    }

    if (*(void *)(a1 + 24))
    {
      uint64_t v29 = ASDLogHandleForCategory(2LL);
      unsigned int v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        id v32 = objc_getProperty((id)a1, v31, 88LL, 1);
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v32;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "[%@] Using supplied artwork data", buf, 0xCu);
      }

      id v33 = [[IXPromisedInMemoryData alloc] initWithName:@"Artwork" client:1 data:*(void *)(a1 + 24)];
    }

    else
    {
      uint64_t v56 = *(void *)(a1 + 32);
      uint64_t v57 = ASDLogHandleForCategory(2LL);
      uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
      uint64_t v59 = v58;
      if (!v56)
      {
        if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
        {
          id v82 = objc_getProperty((id)a1, v68, 88LL, 1);
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v82;
          _os_log_error_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "[%@] Artwork was neither provided, nor a location to load it from",  buf,  0xCu);
        }

        id v33 = 0LL;
        id v69 = 0LL;
        goto LABEL_70;
      }

      if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
      {
        id v61 = objc_getProperty((id)a1, v60, 88LL, 1);
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v61;
        _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_INFO,  "[%@] Requesting placeholder artwork",  buf,  0xCu);
      }

      __int16 v62 = *(void **)(a1 + 32);
      id v64 = objc_getProperty((id)a1, v63, 88LL, 1);
      int v65 = *(unsigned __int8 *)(a1 + 17);
      id v66 = v62;
      id v67 = v64;
      objc_opt_self(&OBJC_CLASS___PlaceholderBuilder);
      if (v66)
      {
        id v33 = [[IXPromisedTransferToPath alloc] initWithName:@"artwork" client:1 diskSpaceNeeded:0];
        if ([v66 isFileURL])
        {
          [v33 setShouldCopy:1];
          [v33 setTransferPath:v66];
          [v33 setComplete:1];
        }

        else
        {
          BOOL v83 = v65 != 0;
          id v70 = sub_1002072F0((uint64_t)&OBJC_CLASS___ArtworkLoader);
          uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
          *(void *)__int128 buf = _NSConcreteStackBlock;
          *(void *)&uint8_t buf[8] = 3221225472LL;
          *(void *)&uint8_t buf[16] = sub_10026D210;
          uint64_t v93 = &unk_1003EF338;
          id v94 = v67;
          id v33 = v33;
          id v95 = v33;
          sub_10020735C(v71, v66, v83, buf);
        }
      }

      else
      {
        id v33 = 0LL;
      }
    }

    if (!v33)
    {
      id v69 = 0LL;
LABEL_72:
      uint64_t v75 = ASDLogHandleForCategory(31LL);
      uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
      char v23 = v76;
      os_signpost_id_t v77 = *(void *)(a1 + 8);
      if (v77 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v76))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_INTERVAL_END,  v77,  "App::Placeholder/Artwork",  "",  buf,  2u);
      }

      buf[0] = 1;
      LOBYTE(v23) = buf[0];
      goto LABEL_76;
    }

    id v89 = 0LL;
    unsigned __int8 v72 = [v4 setIconPromise:v33 error:&v89];
    id v69 = v89;
    if ((v72 & 1) != 0) {
      goto LABEL_72;
    }
    uint64_t v73 = ASDLogHandleForCategory(2LL);
    uint64_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
    {
      id v81 = objc_getProperty((id)a1, v74, 88LL, 1);
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v81;
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)&buf[14] = v69;
      _os_log_error_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "[%@] Non-fatal error occurred when setting placeholder artwork: %{public}@",  buf,  0x16u);
    }

void sub_10026D210(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  uint64_t v8 = ASDLogHandleForCategory(2LL);
  os_signpost_id_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = v9;
  if (v6)
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v13 = 138412290;
      uint64_t v14 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_INFO,  "[%@] Artwork request completed successfully",  (uint8_t *)&v13,  0xCu);
    }

    [*(id *)(a1 + 40) setShouldCopy:0];
    [*(id *)(a1 + 40) setTransferPath:v6];
    [*(id *)(a1 + 40) setComplete:1];
  }

  else
  {
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138412546;
      uint64_t v14 = v12;
      __int16 v15 = 2114;
      id v16 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[%@] Artwork request failed with error: %{public}@",  (uint8_t *)&v13,  0x16u);
    }

    [*(id *)(a1 + 40) cancelForReason:v7 client:1 error:0];
  }
}

void sub_10026D374(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 32LL);
  }
}

void sub_10026D388(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 40LL);
  }
}

void sub_10026D39C(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 48LL);
  }
}

uint64_t sub_10026D3B0(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 80) = a2;
  }
  return result;
}

void sub_10026D3BC(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 88LL);
  }
}

uint64_t sub_10026D3D0(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 112) = a2;
  }
  return result;
}

void sub_10026D3DC(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 120LL);
  }
}

PlaceholderBuilder *sub_10026D48C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___PlaceholderBuilder);
    id v7 = sub_100323C54(a1);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v9 = sub_1001E2698(a1, (uint64_t)@"source_type");
    uint64_t v10 = ASDLogHandleForCategory(2LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v12)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v64 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%@] Skipping store metadata for non-store installation",  buf,  0xCu);
      }
    }

    else
    {
      if (v12)
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v64 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%@] Decoding persisted store metadata",  buf,  0xCu);
      }

      id v13 = sub_100324100(a1, a3);
      uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);
      if (!v14)
      {
        unsigned int v38 = 0LL;
LABEL_62:

        goto LABEL_63;
      }

      uint64_t v11 = (os_log_s *)v14;
      id v15 = sub_1001E26D0(v5, (uint64_t)@"variant_id");
      id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      -[os_log_s setVariantID:](v11, "setVariantID:", v16);

      if (v6) {
        objc_setProperty_atomic(v6, v17, v11, 120LL);
      }
    }

    unsigned __int8 v18 = sub_1001E2598(a1, (uint64_t)@"arcade");
    if (v6) {
      v6->_arcade = v18;
    }
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"artwork_url"]);
    if (v6) {
      objc_setProperty_atomic(v6, v19, v20, 32LL);
    }

    id v22 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"bundle_id"]);
    if (v6) {
      objc_setProperty_atomic(v6, v21, v22, 40LL);
    }

    unsigned int v24 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"bundle_name"]);
    if (v6) {
      objc_setProperty_atomic(v6, v23, v24, 48LL);
    }

    unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"bundle_version"]);
    if (v6) {
      objc_setProperty_atomic(v6, v25, v26, 56LL);
    }

    os_signpost_id_t v28 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"companion_bundle_id"]);
    if (v6) {
      objc_setProperty_atomic(v6, v27, v28, 64LL);
    }

    uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"has_messages_extension"]);
    unsigned __int8 v30 = [v29 BOOLValue];
    if (v6) {
      v6->_hasMessagesExtension = v30;
    }

    unint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"launch_prohibited"]);
    unsigned __int8 v32 = [v31 BOOLValue];
    if (v6) {
      v6->_launchProhibited = v32;
    }

    unsigned int v34 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"messages_artwork_url"]);
    if (v6) {
      objc_setProperty_atomic(v6, v33, v34, 96LL);
    }

    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"source_type"]);
    id v36 = [v35 integerValue];
    if (v6)
    {
      v6->_sourceType = (int64_t)v36;

      if (v6->_sourceType == 3) {
        v6->_enforceATS = 1;
      }
      v6->_installType = 1LL;
      if (sub_1001E2698(a1, (uint64_t)@"restore_type"))
      {
        uint64_t v37 = 2LL;
        goto LABEL_48;
      }

      if (sub_1001E2698(a1, (uint64_t)@"update_type") == (id)1)
      {
        uint64_t v37 = 5LL;
        goto LABEL_48;
      }
    }

    else
    {

      if (sub_1001E2698(a1, (uint64_t)@"restore_type")
        || sub_1001E2698(a1, (uint64_t)@"update_type") == (id)1)
      {
        goto LABEL_49;
      }
    }

    if (sub_1001E2698(a1, (uint64_t)@"automatic_type") == (id)2)
    {
      unint64_t v39 = objc_autoreleasePoolPush();
      os_signpost_id_t v40 = objc_alloc(&OBJC_CLASS___LSApplicationRecord);
      if (v6)
      {
        unsigned __int8 v42 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( v40,  "initWithBundleIdentifier:allowPlaceholder:error:",  objc_getProperty(v6, v41, 40LL, 1),  0LL,  0LL);
        uint64_t v43 = 5LL;
        if (!v42) {
          uint64_t v43 = 3LL;
        }
        v6->_installType = v43;
      }

      else
      {
        unsigned __int8 v42 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( v40,  "initWithBundleIdentifier:allowPlaceholder:error:",  0LL,  0LL,  0LL);
      }

      objc_autoreleasePoolPop(v39);
      goto LABEL_49;
    }

    id v44 = sub_1001E2698(a1, (uint64_t)@"automatic_type");
    if (!v6 || !v44)
    {
LABEL_49:
      unsigned __int8 v46 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"placeholder_entitlements"]);
      if (v46)
      {
        uint64_t v47 = objc_opt_class(&OBJC_CLASS___NSDictionary, v45);
        uint64_t v49 = objc_opt_class(&OBJC_CLASS___NSArray, v48);
        uint64_t v51 = objc_opt_class(&OBJC_CLASS___NSString, v50);
        uint64_t v53 = +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  v47,  v49,  v51,  objc_opt_class(&OBJC_CLASS___NSNumber, v52),  0LL);
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
        id v62 = 0LL;
        int v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v54,  v46,  &v62));
        id v56 = v62;
        uint64_t v57 = ASDLogHandleForCategory(2LL);
        uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
        uint64_t v59 = v58;
        if (v55)
        {
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412546;
            id v64 = v8;
            __int16 v65 = 2114;
            id v66 = v55;
            _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "[%@] Supplied placeholder entitlements: %{public}@",  buf,  0x16u);
          }

          if (v6) {
            objc_setProperty_atomic(v6, v60, v55, 72LL);
          }
        }

        else
        {
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138412546;
            id v64 = v8;
            __int16 v65 = 2114;
            id v66 = v56;
            _os_log_error_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "[%@] Failed to decode placeholder entitlements error: %{public}@",  buf,  0x16u);
          }
        }
      }

      if (v6) {
        objc_setProperty_atomic(v6, v45, v8, 88LL);
      }
      unsigned int v38 = v6;

      goto LABEL_62;
    }

    uint64_t v37 = 3LL;
LABEL_48:
    v6->_installType = v37;
    goto LABEL_49;
  }

  unsigned int v38 = 0LL;
LABEL_63:

  return v38;
}

id sub_10026E174(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:]( SQLiteComparisonPredicate,  "predicateWithProperty:equalToLongLong:",  @"dsid",  [a2 longLongValue]));
    id v4 = sub_10026E1E8(v2, v3);
    id v2 = (id)objc_claimAutoreleasedReturnValue(v4);
  }

  return v2;
}

id sub_10026E1E8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v14[0] = @"adam_id";
  v14[1] = @"app_adam_id";
  v14[2] = @"purchase_date";
  v14[3] = @"last_modified_date";
  void v14[4] = @"expiration_date";
  void v14[5] = @"type";
  v14[6] = @"intro_offer_status";
  v14[7] = @"sub_family_id";
  v14[8] = @"auto_renew_status";
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v14, 9LL));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1 connection]);
  id v7 = sub_10024C1D0((uint64_t)&OBJC_CLASS___IAPInfoIAPEntity, v6, v3);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10026E914;
  v12[3] = &unk_1003EE368;
  id v13 = v4;
  id v9 = v4;
  [v8 enumeratePersistentIDsAndProperties:v5 usingBlock:v12];
  id v10 = -[NSMutableArray copy](v9, "copy");

  return v10;
}

id sub_10026E380(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if ([v5 count])
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:]( SQLiteComparisonPredicate,  "predicateWithProperty:equalToLongLong:",  @"dsid",  [v6 longLongValue]));
      v13[0] = v7;
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"adam_id",  v5));
      v13[1] = v8;
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v13, 2LL));
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v9));

      id v11 = sub_10026E1E8(a1, v10);
      a1 = (void *)objc_claimAutoreleasedReturnValue(v11);
    }

    else
    {
      a1 = &__NSArray0__struct;
    }
  }

  return a1;
}

id sub_10026E4D8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if ([v5 count])
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:]( SQLiteComparisonPredicate,  "predicateWithProperty:equalToLongLong:",  @"dsid",  [v6 longLongValue]));
      v13[0] = v7;
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"app_adam_id",  v5));
      v13[1] = v8;
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v13, 2LL));
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v9));

      id v11 = sub_10026E1E8(a1, v10);
      a1 = (void *)objc_claimAutoreleasedReturnValue(v11);
    }

    else
    {
      a1 = &__NSArray0__struct;
    }
  }

  return a1;
}

id sub_10026E630(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_10026E6C8((uint64_t)&OBJC_CLASS___IAPInfoDatabaseSession, a2);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = sub_10026E72C(a1, v4);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    if ((objc_opt_respondsToSelector(v6, "doubleValue") & 1) != 0)
    {
      [v6 doubleValue];
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSince1970:"));
    }

    else
    {
      id v7 = 0LL;
    }
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

id sub_10026E6C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@",  @"LastUpdatedTimestampPropertyKey",  v3));

  return v4;
}

id sub_10026E72C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = 0LL;
  BOOL v12 = &v11;
  uint64_t v13 = 0x3032000000LL;
  uint64_t v14 = sub_10026EB0C;
  id v15 = sub_10026EB1C;
  id v16 = 0LL;
  uint64_t v4 = *(void *)(a1 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_10026EB24;
  v8[3] = &unk_1003EBBD8;
  id v5 = v3;
  id v9 = v5;
  id v10 = &v11;
  sub_1001D64E8(v4, @"SELECT value FROM iap_info_db_properties WHERE key = ?", v8);
  id v6 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_10026E80C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_10026E824(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_10026E8B0((uint64_t)&OBJC_CLASS___IAPInfoDatabaseSession, a2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = sub_10026E72C(a1, v4);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    if (v6) {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v6 intValue]));
    }
    else {
      id v7 = 0LL;
    }
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

id sub_10026E8B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@",  @"ServerRevisionPropertyKey",  v3));

  return v4;
}

void sub_10026E914(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v17 = objc_alloc_init(&OBJC_CLASS___ASDMutableIAPInfo);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"adam_id"]);
  -[ASDMutableIAPInfo setAdamId:](v17, "setAdamId:", v5);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"app_adam_id"]);
  -[ASDMutableIAPInfo setAppAdamId:](v17, "setAppAdamId:", v6);

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"purchase_date"]);
  -[ASDMutableIAPInfo setPurchaseDate:](v17, "setPurchaseDate:", v7);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"last_modified_date"]);
  -[ASDMutableIAPInfo setLastModifiedDate:](v17, "setLastModifiedDate:", v8);

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"expiration_date"]);
  -[ASDMutableIAPInfo setExpirationDate:](v17, "setExpirationDate:", v9);

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"type"]);
  -[ASDMutableIAPInfo setType:](v17, "setType:", [v10 unsignedCharValue]);

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"intro_offer_status"]);
  unsigned int v12 = [v11 intValue];

  -[ASDMutableIAPInfo setHasUsedFreeOffer:](v17, "setHasUsedFreeOffer:", v12 & 1);
  -[ASDMutableIAPInfo setHasUsedIntroPricingOffer:](v17, "setHasUsedIntroPricingOffer:", (v12 >> 1) & 1);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"sub_family_id"]);
  -[ASDMutableIAPInfo setSubscriptionFamilyId:](v17, "setSubscriptionFamilyId:", v13);

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"auto_renew_status"]);
  -[ASDMutableIAPInfo setAutoRenewStatus:](v17, "setAutoRenewStatus:", [v14 BOOLValue]);

  id v15 = *(void **)(a1 + 32);
  id v16 = -[ASDMutableIAPInfo copy](v17, "copy");
  [v15 addObject:v16];
}

uint64_t sub_10026EB0C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10026EB1C(uint64_t a1)
{
}

void sub_10026EB24(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10026EBA4;
  v5[3] = &unk_1003EB1E0;
  void v5[4] = *(void *)(a1 + 40);
  sub_1001BF214((uint64_t)v4, v5);
}

void sub_10026EBA4(uint64_t a1, void *a2)
{
  id v3 = sub_1002E7544(a2, 0);
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

BOOL sub_10026ECBC(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1 originalRequest]);
  if (!v2)
  {
    uint64_t v7 = ASDLogHandleForCategory(14LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "(AMSDialogResult) No original request available, assuming the request was canceled",  v14,  2u);
    }

    BOOL v6 = 1LL;
    goto LABEL_16;
  }

  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue([a1 selectedActionIdentifier]);
  if (!v3)
  {
    uint64_t v8 = ASDLogHandleForCategory(14LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "(AMSDialogResult) No selected action identifier available, assuming the request was canceled",  buf,  2u);
    }

    goto LABEL_14;
  }

  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 locateActionWithIdentifier:v3]);
  if (!v4)
  {
    uint64_t v9 = ASDLogHandleForCategory(14LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned int v12 = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "(AMSDialogResult) No selected action not found, assuming the request was canceled",  v12,  2u);
    }

    uint64_t v5 = 0LL;
LABEL_14:
    BOOL v6 = 1LL;
    goto LABEL_15;
  }

  uint64_t v5 = v4;
  BOOL v6 = -[os_log_s style](v4, "style") == (id)2;
LABEL_15:

LABEL_16:
  return v6;
}

id *sub_10026EE3C(id *a1, void *a2, void *a3)
{
  id v6 = a3;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)&OBJC_CLASS___SQLiteStatement;
    uint64_t v7 = (id *)objc_msgSendSuper2(&v9, "init");
    a1 = v7;
    if (v7)
    {
      objc_storeStrong(v7 + 1, a3);
      a1[2] = a2;
      objc_storeStrong(a1 + 3, a1);
    }
  }

  return a1;
}

uint64_t sub_10026EEC4(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  id v2 = *(sqlite3_stmt **)(a1 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = sqlite3_finalize(v2);
  uint64_t v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 16) = 0LL;
  *(void *)(a1 + 24) = 0LL;

  return v3;
}

uint64_t sub_10026EF0C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(sqlite3_stmt **)(result + 16);
    if (v1)
    {
      return sqlite3_stmt_readonly(v1) != 0;
    }

    else
    {
      +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Statement already finalized");
      return 1LL;
    }
  }

  return result;
}

uint64_t sub_10026EF5C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(sqlite3_stmt **)(result + 16);
    if (v1)
    {
      return sqlite3_step(v1);
    }

    else
    {
      +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Statement already finalized");
      return 21LL;
    }
  }

  return result;
}

Bulletin *sub_10026F67C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 content]);

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 userInfo]);
  id v6 = objc_alloc(&OBJC_CLASS___Bulletin);
  id v8 = v5;
  if (!v6)
  {
    id v10 = 0LL;
    goto LABEL_20;
  }

  uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSDictionary, v7);
  if ((objc_opt_isKindOfClass(v8, v9) & 1) == 0)
  {
    id v10 = 0LL;
LABEL_19:

    goto LABEL_20;
  }

  id v10 = -[Bulletin init](v6, "init");
  if (v10)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"actiontitle"]);
    uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSString, v12);
    if ((objc_opt_isKindOfClass(v11, v13) & 1) != 0)
    {
      uint64_t v14 = (NSString *)[v11 copy];
      actionButtonTitle = v10->_actionButtonTitle;
      v10->_actionButtonTitle = v14;
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"actionurl"]);

    uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSString, v17);
    if ((objc_opt_isKindOfClass(v16, v18) & 1) != 0)
    {
      __int16 v19 = -[NSURL initWithString:](objc_alloc(&OBJC_CLASS___NSURL), "initWithString:", v16);
      actionButtonURL = v10->_actionButtonURL;
      v10->_actionButtonURL = v19;
    }

    id v21 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"date"]);

    uint64_t v23 = objc_opt_class(&OBJC_CLASS___NSDate, v22);
    if ((objc_opt_isKindOfClass(v21, v23) & 1) != 0)
    {
      unsigned int v24 = (NSDate *)[v21 copy];
      creationDate = v10->_creationDate;
      v10->_creationDate = v24;
    }

    unint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"msg"]);

    uint64_t v28 = objc_opt_class(&OBJC_CLASS___NSString, v27);
    if ((objc_opt_isKindOfClass(v26, v28) & 1) != 0)
    {
      uint64_t v29 = (NSString *)[v26 copy];
      message = v10->_message;
      v10->_message = v29;
    }

    unint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"rid"]);

    uint64_t v33 = objc_opt_class(&OBJC_CLASS___NSString, v32);
    if ((objc_opt_isKindOfClass(v31, v33) & 1) != 0)
    {
      unsigned int v34 = (NSString *)[v31 copy];
      recordID = v10->_recordID;
      v10->_recordID = v34;
    }

    id v36 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"title"]);

    uint64_t v38 = objc_opt_class(&OBJC_CLASS___NSString, v37);
    if ((objc_opt_isKindOfClass(v36, v38) & 1) != 0)
    {
      unint64_t v39 = (NSString *)[v36 copy];
      title = v10->_title;
      v10->_title = v39;
    }

    id v6 = (Bulletin *)objc_claimAutoreleasedReturnValue([v8 objectForKey:@"url"]);

    uint64_t v42 = objc_opt_class(&OBJC_CLASS___NSString, v41);
    if ((objc_opt_isKindOfClass(v6, v42) & 1) != 0)
    {
      uint64_t v43 = -[NSURL initWithString:](objc_alloc(&OBJC_CLASS___NSURL), "initWithString:", v6);
      launchURL = v10->_launchURL;
      v10->_launchURL = v43;
    }

    goto LABEL_19;
  }

id sub_10026F960(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_alloc_init((Class)objc_opt_self(a1));
  uint64_t v9 = v7;
  if (v7)
  {
    objc_setProperty_nonatomic_copy(v7, v8, v6, 48LL);
    objc_setProperty_nonatomic_copy(v9, v10, v5, 64LL);
  }

  return v9;
}

void sub_10026F9D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 actionIdentifier]);
    uint64_t v6 = ASDLogHandleForCategory(9LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v32 = (id)objc_opt_class(a1, v8);
      __int16 v33 = 2114;
      id v34 = v5;
      id v9 = v32;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%{public}@]: Handling notification response with actionId: %{public}@",  buf,  0x16u);
    }

    if ([v5 isEqualToString:UNNotificationDefaultActionIdentifier])
    {
      uint64_t v10 = 24LL;
    }

    else
    {
      if ([v5 isEqualToString:UNNotificationDismissActionIdentifier])
      {
LABEL_17:

        goto LABEL_18;
      }

      uint64_t v10 = 16LL;
    }

    id v11 = *(id *)(a1 + v10);
    if (v11)
    {
      uint64_t v12 = v11;
      v29[0] = FBSOpenApplicationOptionKeyPromptUnlockDevice;
      v29[1] = FBSOpenApplicationOptionKeyUnlockDevice;
      v30[0] = &__kCFBooleanTrue;
      v30[1] = &__kCFBooleanTrue;
      v29[2] = FBSOpenApplicationOptionKeyLaunchOrigin;
      void v30[2] = @"appstored";
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v30,  v29,  3LL));
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v4 notification]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 request]);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 identifier]);
      unsigned int v17 = [v16 isEqualToString:@"com.apple.appstored.authenticate.watch"];

      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationWorkspace defaultWorkspace]( &OBJC_CLASS___LSApplicationWorkspace,  "defaultWorkspace"));
      __int16 v19 = v18;
      if (v17)
      {
        uint64_t v28 = 0LL;
        uint64_t v20 = (id *)&v28;
        [v18 openSensitiveURL:v12 withOptions:v13 error:&v28];
      }

      else
      {
        uint64_t v27 = 0LL;
        uint64_t v20 = (id *)&v27;
        [v18 openURL:v12 withOptions:v13 error:&v27];
      }

      id v21 = *v20;

      if (v21)
      {
        uint64_t v22 = ASDLogHandleForCategory(9LL);
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          uint64_t v25 = (void *)objc_opt_class(a1, v24);
          *(_DWORD *)__int128 buf = 138543618;
          id v32 = v25;
          __int16 v33 = 2114;
          id v34 = v21;
          id v26 = v25;
          _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "[%{public}@]: Error opening URL. Error: %{public}@",  buf,  0x16u);
        }
      }
    }

    goto LABEL_17;
  }

uint64_t sub_10026FCC0(uint64_t a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___UNMutableNotificationContent);
    -[UNMutableNotificationContent setTitle:](v2, "setTitle:", *(void *)(v1 + 64));
    -[UNMutableNotificationContent setBody:](v2, "setBody:", *(void *)(v1 + 48));
    id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)(v1 + 8);
    if (v5) {
      -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v5, @"actiontitle");
    }
    uint64_t v6 = *(void **)(v1 + 16);
    if (v6)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 absoluteString]);
      -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v7, @"actionurl");
    }

    uint64_t v8 = *(void *)(v1 + 32);
    if (v8) {
      -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v8, @"date");
    }
    id v9 = *(void **)(v1 + 24);
    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 absoluteString]);
      -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v10, @"url");
    }

    uint64_t v11 = *(void *)(v1 + 48);
    if (v11) {
      -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v11, @"msg");
    }
    uint64_t v12 = *(void *)(v1 + 56);
    if (v12) {
      -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v12, @"rid");
    }
    uint64_t v13 = *(void *)(v1 + 64);
    if (v13) {
      -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v13, @"title");
    }
    -[UNMutableNotificationContent setUserInfo:](v2, "setUserInfo:", v4);

    -[UNMutableNotificationContent setCategoryIdentifier:]( v2,  "setCategoryIdentifier:",  @"asd-notification-default");
    -[UNMutableNotificationContent setShouldBackgroundDefaultAction:](v2, "setShouldBackgroundDefaultAction:", 1LL);
    id v14 = *(id *)(v1 + 40);
    id v15 = v14;
    if (v14) {
      -[UNMutableNotificationContent setInterruptionLevel:]( v2,  "setInterruptionLevel:",  [v14 unsignedIntegerValue]);
    }
    if (*(void *)(v1 + 72))
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue( +[UNNotificationIcon iconForApplicationIdentifier:]( &OBJC_CLASS___UNNotificationIcon,  "iconForApplicationIdentifier:"));
      -[UNMutableNotificationContent setIcon:](v2, "setIcon:", v16);

      if ([*(id *)(v1 + 72) isEqualToString:@"com.apple.Bridge"])
      {
        uint64_t v17 = ASDLocalizedString(@"APPLE_WATCH_APP_NAME");
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        -[UNMutableNotificationContent setHeader:](v2, "setHeader:", v18);
      }

      else
      {
        __int16 v19 = objc_alloc(&OBJC_CLASS___LSApplicationRecord);
        uint64_t v20 = *(void *)(v1 + 72);
        id v30 = 0LL;
        id v21 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( v19,  "initWithBundleIdentifier:allowPlaceholder:error:",  v20,  0LL,  &v30);
        id v22 = v30;
        if (v22)
        {
          uint64_t v23 = ASDLogHandleForCategory(9LL);
          uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            id v26 = (void *)objc_opt_class(v1, v25);
            uint64_t v27 = *(void *)(v1 + 72);
            *(_DWORD *)__int128 buf = 138543874;
            id v32 = v26;
            __int16 v33 = 2114;
            uint64_t v34 = v27;
            __int16 v35 = 2114;
            id v36 = v22;
            id v28 = v26;
            _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "[%{public}@]: Error looking up record for %{public}@: %{public}@",  buf,  0x20u);
          }
        }

        else
        {
          uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord localizedName](v21, "localizedName"));
          -[UNMutableNotificationContent setHeader:](v2, "setHeader:", v24);
        }
      }
    }

    uint64_t v1 = objc_claimAutoreleasedReturnValue( +[UNNotificationRequest requestWithIdentifier:content:trigger:]( &OBJC_CLASS___UNNotificationRequest,  "requestWithIdentifier:content:trigger:",  *(void *)(v1 + 56),  v2,  0LL));
  }

  return v1;
}

__CFString *sub_10027010C(uint64_t a1)
{
  if ((int)a1 > 20)
  {
    switch((_DWORD)a1)
    {
      case 0x15:
        return @"QOS_CLASS_DEFAULT";
      case 0x21:
        return @"QOS_CLASS_USER_INTERACTIVE";
      case 0x19:
        return @"QOS_CLASS_USER_INITIATED";
    }

    goto LABEL_16;
  }

  if (!(_DWORD)a1) {
    return @"QOS_CLASS_UNSPECIFIED";
  }
  if ((_DWORD)a1 == 9) {
    return @"QOS_CLASS_BACKGROUND";
  }
  if ((_DWORD)a1 != 17)
  {
LABEL_16:
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unknown Class: %u",  a1));
    return v1;
  }

  uint64_t v1 = @"QOS_CLASS_UTILITY";
  return v1;
}

id sub_1002701C0(void *a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[RBSProcessPredicate predicateMatchingBundleIdentifier:]( &OBJC_CLASS___RBSProcessPredicate,  "predicateMatchingBundleIdentifier:",  a2));
  id v7 = v5;
  v16.receiver = a1;
  v16.super_class = (Class)&OBJC_CLASS___ProcessTerminator;
  id v8 = objc_msgSendSuper2(&v16, "init");
  if (v8)
  {
    id v9 = -[NSConditionLock initWithCondition:](objc_alloc(&OBJC_CLASS___NSConditionLock), "initWithCondition:", 0LL);
    uint64_t v10 = (void *)*((void *)v8 + 1);
    *((void *)v8 + 1) = v9;

    id v11 = [[RBSTerminateContext alloc] initWithExplanation:v7];
    [v11 setMaximumTerminationResistance:30];
    uint64_t v12 = -[RBSTerminationAssertion initWithPredicate:context:]( objc_alloc(&OBJC_CLASS___RBSTerminationAssertion),  "initWithPredicate:context:",  v6,  v11);
    uint64_t v13 = (void *)*((void *)v8 + 2);
    *((void *)v8 + 2) = v12;

    [*((id *)v8 + 2) addObserver:v8];
  }

  id v14 = v8;
  return v14;
}

uint64_t sub_10027033C(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0LL;
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSinceNow:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSinceNow:"));
  id v5 = *(void **)(a1 + 16);
  id v15 = 0LL;
  uint64_t v6 = (uint64_t)[v5 acquireWithError:&v15];
  id v7 = v15;
  id v8 = v7;
  if ((_DWORD)v6)
  {
    if ([*(id *)(a1 + 8) lockWhenCondition:1 beforeDate:v4])
    {
      [*(id *)(a1 + 8) unlock];
      uint64_t v6 = 1LL;
      goto LABEL_8;
    }

    id v14 = v4;
    uint64_t v11 = ASDErrorWithUserInfoAndFormat(515LL, 0LL, @"Process failed to exit before %@");
    uint64_t v10 = objc_claimAutoreleasedReturnValue(v11);

    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v9 = ASDErrorWithUnderlyingErrorAndDescription( v7,  ASDErrorDomain,  507LL,  @"Failed to aquire termination assertion");
    uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
  }

  id v8 = (void *)v10;
LABEL_8:
  objc_msgSend(*(id *)(a1 + 16), "removeObserver:", a1, v14);
  [*(id *)(a1 + 16) invalidate];
  uint64_t v12 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0LL;

  if (a2 && (v6 & 1) == 0) {
    *a2 = v8;
  }

  return v6;
}

id *sub_1002704F0(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)&OBJC_CLASS___IAPInfoUpdateRequest;
    id v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

void sub_100270588(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (!a1) {
    goto LABEL_33;
  }
  id Property = *(id *)(a1 + 16);
  if (Property) {
    id Property = objc_getProperty(Property, v3, 8LL, 1);
  }
  id v6 = Property;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ams_DSID"));

  if (!v7)
  {
    id v20 = sub_1001861DC(4LL, 0LL);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v4[2](v4, 0LL, v21);

    goto LABEL_33;
  }

  uint64_t v8 = *(void *)(a1 + 8);
  id v51 = 0LL;
  id v9 = sub_100255E30(v8, (uint64_t)@"iap-daap/base-url", &v51);
  objc_super v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = v51;
  uint64_t v12 = v11;
  if (!v10)
  {
    id v16 = v11;
    goto LABEL_12;
  }

  uint64_t v13 = *(void *)(a1 + 8);
  id v50 = v12;
  id v14 = sub_10025621C(v13, (uint64_t)@"iap-daap/database-id", &off_10040CCA0, &v50);
  id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  id v16 = v50;

  if (!v15)
  {

    goto LABEL_12;
  }

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"databases/%ld/update",  [v15 integerValue]));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v10 URLByAppendingPathComponent:v17]);

  if (!v18)
  {
LABEL_12:
    uint64_t v22 = ASDLogHandleForCategory(14LL);
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      unsigned __int8 v46 = (void *)objc_opt_class(a1, v24);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v53 = v46;
      __int16 v54 = 2114;
      id v55 = v16;
      id v47 = v46;
      _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "[%@]: Failed to construct request URL error: %{public}@",  buf,  0x16u);
    }

    id v25 = sub_1001861DC(2LL, (uint64_t)v16);
    id v19 = (id)objc_claimAutoreleasedReturnValue(v25);
    uint64_t v18 = 0LL;
    goto LABEL_15;
  }

  id v19 = 0LL;
LABEL_15:

  id v26 = v19;
  if (v18)
  {
    id v28 = objc_alloc(&OBJC_CLASS___PurchaseHistoryUpdateDAAPRequestEncoder);
    id v29 = *(id *)(a1 + 16);
    if (v29) {
      id v29 = objc_getProperty(v29, v27, 32LL, 1);
    }
    id v30 = v29;
    unint64_t v31 = sub_1001AA51C((id *)&v28->super.isa, v30);

    __int16 v33 = sub_1002AF430((id *)objc_alloc(&OBJC_CLASS___DAAPURLRequest), v31, v18);
    id v34 = *(id *)(a1 + 16);
    if (v34) {
      id v34 = objc_getProperty(v34, v32, 8LL, 1);
    }
    id v36 = v34;
    if (v33) {
      objc_setProperty_atomic(v33, v35, v36, 24LL);
    }

    id v38 = *(id *)(a1 + 16);
    if (v38) {
      id v38 = objc_getProperty(v38, v37, 16LL, 1);
    }
    id v40 = v38;
    if (v33) {
      objc_setProperty_atomic(v33, v39, v40, 40LL);
    }

    id v42 = *(id *)(a1 + 16);
    if (v42) {
      id v42 = objc_getProperty(v42, v41, 24LL, 1);
    }
    id v44 = v42;
    if (v33) {
      objc_setProperty_atomic(v33, v43, v44, 48LL);
    }

    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_100270954;
    v48[3] = &unk_1003EB8D0;
    v48[4] = a1;
    uint64_t v49 = v4;
    sub_1002AF4C8((uint64_t)v33, v48);
  }

  else
  {
    id v45 = sub_1001861DC(2LL, (uint64_t)v26);
    unint64_t v31 = (id *)objc_claimAutoreleasedReturnValue(v45);
    v4[2](v4, 0LL, v31);
  }

LABEL_33:
}

void sub_100270954(uint64_t a1, void *a2, void *a3)
{
  id v22 = a2;
  id v5 = a3;
  uint64_t v6 = (uint64_t)v22;
  if (!v22)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = (uint64_t)v5;
    goto LABEL_5;
  }

  if ((char *)[v22 responseStatusCode] - 300 > (char *)0xFFFFFFFFFFFFFF9BLL)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v22 data]);
    objc_super v10 = v11;
    if (!v11)
    {
      uint64_t v18 = *(void *)(a1 + 40);
      id v19 = sub_1001861DC(0LL, 0LL);
      id v16 = (id)objc_claimAutoreleasedReturnValue(v19);
      (*(void (**)(uint64_t, void, id))(v18 + 16))(v18, 0LL, v16);
      goto LABEL_16;
    }

    if (*(void *)(a1 + 32))
    {
      id v12 = v11;
      uint64_t v13 = sub_1001F6C38((id *)objc_alloc(&OBJC_CLASS___PurchaseHistoryUpdateDAAPResponseDecoder), v12);

      sub_1001F6CAC((uint64_t)v13);
      if (v13) {
        id Property = objc_getProperty(v13, v14, 24LL, 1);
      }
      else {
        id Property = 0LL;
      }
      id v16 = Property;

      uint64_t v17 = *(void *)(a1 + 40);
      if (v16)
      {
        (*(void (**)(uint64_t, id, void))(v17 + 16))(v17, v16, 0LL);
LABEL_16:

        goto LABEL_17;
      }
    }

    else
    {
      uint64_t v17 = *(void *)(a1 + 40);
    }

    id v20 = sub_1001861DC(0LL, 0LL);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0LL, v21);

    id v16 = 0LL;
    goto LABEL_16;
  }

  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = 1LL;
  uint64_t v8 = 0LL;
LABEL_5:
  id v9 = sub_1001861DC(v6, v8);
  objc_super v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v10);
LABEL_17:
}

ACAccount *sub_100270B2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = (ACAccount *)objc_claimAutoreleasedReturnValue([v3 appleID]);

  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifieriTunesStore]);

    id v4 = -[ACAccount initWithAccountType:](objc_alloc(&OBJC_CLASS___ACAccount), "initWithAccountType:", v6);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 appleID]);
    -[ACAccount setUsername:](v4, "setUsername:", v7);

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 altDSID]);
    -[ACAccount ams_setAltDSID:](v4, "ams_setAltDSID:", v8);
  }

  return v4;
}

id sub_100270C0C(id a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v20.receiver = a1;
    v20.super_class = (Class)&OBJC_CLASS___UpdatableApp;
    a1 = objc_msgSendSuper2(&v20, "init");
    if (a1)
    {
      uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 bundleID]);
      uint64_t v8 = (void *)*((void *)a1 + 1);
      *((void *)a1 + 1) = v7;

      uint64_t v9 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v5 storeItemID]));
      objc_super v10 = (void *)*((void *)a1 + 6);
      *((void *)a1 + 6) = v9;

      uint64_t v11 = objc_claimAutoreleasedReturnValue([v5 storefront]);
      id v12 = (void *)*((void *)a1 + 7);
      *((void *)a1 + 7) = v11;

      if (v6) {
        id v13 = v6;
      }
      else {
        id v13 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v5 storeExternalVersionID]));
      }
      id v14 = (void *)*((void *)a1 + 5);
      *((void *)a1 + 5) = v13;

      *((_BYTE *)a1 + 16) = v6 != 0LL;
      *((_BYTE *)a1 + 17) = [v5 isB2BCustomApp];
      uint64_t v15 = objc_claimAutoreleasedReturnValue([v5 downloaderDSID]);
      id v16 = (void *)*((void *)a1 + 3);
      *((void *)a1 + 3) = v15;

      uint64_t v17 = objc_claimAutoreleasedReturnValue([v5 purchaserDSID]);
      uint64_t v18 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 4) = v17;
    }
  }

  return a1;
}

id *sub_100270D60(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)&OBJC_CLASS___UpdatableApp;
    uint64_t v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 6, a2);
      objc_storeStrong(a1 + 5, a3);
    }
  }

  return a1;
}

id sub_100271044(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 80) hasBytesAvailable];
  if ((_DWORD)result)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }

  else
  {
    id result = [*(id *)(*(void *)(a1 + 32) + 80) streamStatus];
    BOOL v3 = result == (id)5 && *(void *)(*(void *)(a1 + 32) + 72LL) != 0LL;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v3;
  }

  return result;
}

void sub_10027129C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002712B8(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(7LL);
  BOOL v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(void *)(a1 + 48);
    int v9 = 134217984;
    uint64_t v10 = v8;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEBUG,  "(FairPlayStreamReader) Upstream event code %lu",  (uint8_t *)&v9,  0xCu);
  }

  if ((*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) & 0x10) != 0)
  {
    uint64_t v4 = ASDLogHandleForCategory(7LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v9) = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "(FairPlayStreamReader) Upstream end encountered, requesting one more read",  (uint8_t *)&v9,  2u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) &= ~0x10uLL;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) |= 2uLL;
  }

  if ((char *)[*(id *)(a1 + 32) streamStatus] - 2 >= (char *)4)
  {
    uint64_t v6 = ASDLogHandleForCategory(7LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(v9) = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "(FairPlayStreamReader) Dropping events for closed stream",  (uint8_t *)&v9,  2u);
    }

    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0LL;
  }

uint64_t sub_10027155C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10027156C(uint64_t a1)
{
}

void sub_100271574(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) streamStatus];
  uint64_t v3 = *(void *)(a1 + 32);
  if (v2 == (id)7)
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([(id)v3 streamError]);
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

    return;
  }

  if (*(void *)(v3 + 72))
  {
    id v7 = (char *)[*(id *)(v3 + 72) length];
    memcpy(*(void **)(a1 + 56), [*(id *)(*(void *)(a1 + 32) + 72) bytes], (size_t)v7);
    uint64_t v8 = *(void *)(a1 + 32);
    int v9 = *(void **)(v8 + 72);
    *(void *)(v8 + 72) = 0LL;

    uint64_t v3 = *(void *)(a1 + 32);
  }

  else
  {
    id v7 = 0LL;
  }

  uint64_t v10 = *(void **)(v3 + 80);
  uint64_t v11 = &v7[*(void *)(a1 + 56)];
  uint64_t v12 = *(void *)(a1 + 64) - (void)v7;
  uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v13 + 40);
  unint64_t v14 = (unint64_t)[v10 readBytes:v11 length:v12 error:&obj];
  objc_storeStrong((id *)(v13 + 40), obj);
  if ((v14 & 0x8000000000000000LL) != 0) {
    goto LABEL_40;
  }
  if ([*(id *)(*(void *)(a1 + 32) + 80) streamStatus] == (id)5) {
    unsigned int v15 = [*(id *)(*(void *)(a1 + 32) + 80) hasBytesAvailable] ^ 1;
  }
  else {
    unsigned int v15 = 0;
  }
  unint64_t v16 = (unint64_t)&v7[v14];
  uint64_t v17 = ASDLogHandleForCategory(7LL);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    id v40 = [*(id *)(*(void *)(a1 + 32) + 80) streamStatus];
    unsigned int v41 = [*(id *)(*(void *)(a1 + 32) + 80) hasBytesAvailable];
    *(_DWORD *)__int128 buf = 134218240;
    *(void *)unsigned __int8 v46 = v40;
    *(_WORD *)&v46[8] = 1024;
    *(_DWORD *)&v46[10] = v41;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "(FairPlayStreamReader) Upstream status = %lu; bytes available = %{BOOL}d",
      buf,
      0x12u);
  }

  if (v15)
  {
    sub_100237C1C(*(void *)(a1 + 32), 5LL);
    uint64_t v19 = *(void *)(a1 + 32);
    if (v19) {
      dispatch_source_merge_data(*(dispatch_source_t *)(v19 + 16), 0x10uLL);
    }
  }

  if (!v16)
  {
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0LL;
    uint64_t v32 = ASDLogHandleForCategory(7LL);
    __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "(FairPlayStreamReader) Zero bytes available, zero bytes decrypted",  buf,  2u);
    }

    unint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    goto LABEL_36;
  }

  uint64_t v20 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v23 = *(void **)(v20 + 40);
  id v21 = (id *)(v20 + 40);
  id v22 = v23;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_30;
  }
  unint64_t v24 = v16 >> 15;
  char v25 = v15 ^ 1;
  if ((v25 & 1) != 0)
  {
LABEL_30:
    uint64_t v31 = 0LL;
  }

  else
  {
    uint64_t v26 = *(void *)(a1 + 56);
    uint64_t v27 = malloc(4LL * (v24 + 1));
    __b = v27;
    if ((_DWORD)v24)
    {
      memset_pattern16(v27, &unk_10038A790, 4LL * (v16 >> 15));
      uint64_t v27 = __b;
    }

    if (v15 && (v16 & 0x7FFF) != 0)
    {
      *((_DWORD *)v27 + v24) = v16 & 0x7FFF;
      LODWORD(v24) = v24 + 1;
    }

    *(_DWORD *)__int128 buf = v24;
    *(void *)&uint8_t v46[4] = v27;
    *(void *)&v46[12] = v26;
    unint64_t v47 = v16;
    sub_10017E8FC();
    if ((_DWORD)v28)
    {
      id v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Decryption failed (error: %d)",  v28));
      uint64_t v30 = ASDErrorWithDescription(ASDErrorDomain, 711LL, v29);
      id v22 = (id)objc_claimAutoreleasedReturnValue(v30);

      uint64_t v31 = -1LL;
    }

    else
    {
      uint64_t v31 = v15 ? v16 : ((_DWORD)v24 << 15);
    }

    free(__b);
  }

  objc_storeStrong(v21, v22);
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v31;
  unint64_t v34 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
  if ((v34 & 0x8000000000000000LL) != 0)
  {
LABEL_40:
    sub_100237AD4(*(void *)(a1 + 32), *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
    sub_100237C1C(*(void *)(a1 + 32), 7LL);
    return;
  }

__CFString *sub_100271A54(uint64_t a1, int a2)
{
  char v3 = a2 - 1;
  else {
    uint64_t v4 = 0LL;
  }
  return v4;
}

NSNumber *sub_100271AB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  [v3 timeIntervalSince1970];
  double v5 = v4;

  return +[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", (uint64_t)(v5 * 1000.0));
}

void sub_1002729CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_100272A08(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100272A18(uint64_t a1)
{
}

void sub_100272A20(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  id v10 = (id)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"bundle_id",  v3));
  double v5 = (void *)objc_claimAutoreleasedReturnValue([v4 connection]);

  id v6 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppUsageSessionEntity, v5, v10);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  id v8 = sub_1002692AC((uint64_t)&OBJC_CLASS___AppUsageSessionEntity);
  int v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100272B20;
  v11[3] = &unk_1003E9920;
  void v11[4] = *(void *)(a1 + 40);
  [v7 enumerateMemoryEntitiesWithProperties:v9 usingBlock:v11];
}

void sub_100272B20(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
}

uint64_t sub_100272B54(uint64_t a1, void *a2)
{
  uint64_t v21 = *(void *)(a1 + 32);
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v21, 1LL));
  id v14 = 0LL;
  id v5 = sub_10030DF24(v3, v4, &v14);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  id v7 = v14;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v6 count] != 0;

  if (v7)
  {
    uint64_t v8 = ASDLogHandleForCategory(3LL);
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
      uint64_t v11 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412802;
      unint64_t v16 = v10;
      __int16 v17 = 2114;
      uint64_t v18 = v11;
      __int16 v19 = 2114;
      id v20 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Error creating fresh app usage session entity. Error: %{public}@",  buf,  0x20u);
    }
  }

  uint64_t v12 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);

  return v12;
}

id *sub_100272D14(id *a1)
{
  if (a1)
  {
    id v2 = a1 + 2;
    id v1 = a1[2];
    if (!v1)
    {
      objc_opt_self(&OBJC_CLASS___MetricsHandler);
      unsigned int v3 = MGGetSInt32Answer(@"DeviceClassNumber", 0xFFFFFFFFLL) - 1;
      if (v3 > 5) {
        id v4 = @"Unknown";
      }
      else {
        id v4 = off_1003EF540[v3];
      }
      objc_storeStrong(v2, v4);
      id v1 = *v2;
    }

    a1 = (id *)v1;
  }

  return a1;
}

id *sub_100272DAC(id *a1)
{
  if (a1)
  {
    id v2 = a1 + 1;
    id v1 = a1[1];
    if (!v1)
    {
      objc_opt_self(&OBJC_CLASS___MetricsHandler);
      unsigned int v3 = MGGetSInt32Answer(@"DeviceClassNumber", 0xFFFFFFFFLL) - 1;
      if (v3 > 5) {
        id v4 = @"Unknown";
      }
      else {
        id v4 = off_1003EF570[v3];
      }
      objc_storeStrong(v2, v4);
      id v1 = *v2;
    }

    a1 = (id *)v1;
  }

  return a1;
}

BOOL sub_100272EF0(uint64_t a1, void *a2)
{
  unsigned int v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 57);
  id v7 = a2;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 connection]);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([v3 createAppEventsForBundleIDs:v4 eventType:v5 installType:v6 connection:v8]);

  id v10 = *(objc_class **)(a1 + 48);
  id v20 = 0LL;
  id v11 = sub_10030D868(v7, v9, v10, &v20);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  id v13 = v20;
  id v14 = [v12 count];

  if (v13)
  {
    uint64_t v15 = ASDLogHandleForCategory(3LL);
    unint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
      __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "componentsJoinedByString:", @", "));
      *(_DWORD *)__int128 buf = 138412802;
      id v22 = v18;
      __int16 v23 = 2114;
      unint64_t v24 = v19;
      __int16 v25 = 2114;
      id v26 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "[%@] Error creating entity for bundleIDs: [%{public}@] error: %{public}@",  buf,  0x20u);
    }
  }

  return v14 != 0LL;
}

uint64_t sub_100273138(uint64_t a1, void *a2)
{
  unsigned int v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v13 = 0LL;
  id v6 = sub_10030D868(v5, v3, (objc_class *)[v4 appEventEntityClass], &v13);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  id v8 = v13;
  [v7 count];

  if (v8)
  {
    uint64_t v9 = ASDLogHandleForCategory(3LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v15 = v12;
      __int16 v16 = 2114;
      id v17 = v8;
      _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[%@] Importing launch event(s) failed with error: %{public}@",  buf,  0x16u);
    }
  }

  return 1LL;
}

id sub_10027356C(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
  id v2 = [v1 isAppAnalyticsAllowed];

  return v2;
}

id sub_1002735AC(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
  id v2 = [v1 isAutomaticAppDownloadsAllowed];

  return v2;
}

id sub_1002735EC(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
  id v2 = [v1 isDiagnosticSubmissionAllowed];

  return v2;
}

BOOL sub_10027362C(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
  if ([v1 effectiveBoolValueForSetting:MCFeatureAppInstallationAllowed] == 2)
  {
    BOOL v2 = 0LL;
  }

  else
  {
    unsigned int v3 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
    BOOL v2 = [v3 effectiveBoolValueForSetting:MCFeatureUIAppInstallationAllowed] != 2;
  }

  return v2;
}

NSNumber *sub_1002736B8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = objc_opt_self(a1);
  objc_opt_self(v3);
  if (a2 > 2)
  {
    id v4 = 0LL;
LABEL_6:
    id v6 = -[NSNumber initWithInteger:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithInteger:", 1000LL);
    goto LABEL_7;
  }

  id v4 = *(id *)*(&off_1003EF5A0 + a2);
  if (!v4) {
    goto LABEL_6;
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
  id v6 = (NSNumber *)objc_claimAutoreleasedReturnValue([v5 effectiveValueForSetting:v4]);

  if (!v6) {
    goto LABEL_6;
  }
LABEL_7:

  return v6;
}

double sub_10027375C(void *a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    v8.receiver = a1;
    v8.super_class = (Class)&OBJC_CLASS___ProgressPortions;
    id v5 = (char *)objc_msgSendSuper2(&v8, "init");
    if (v5)
    {
      if (a3 < 1)
      {
        double result = 0.6;
        *(_OWORD *)(v5 + _Block_object_dispose(va, 8) = xmmword_10038A970;
      }

      else
      {
        *((void *)v5 + 2) = 0x3FC3333333333333LL;
        double v7 = (double)a2 / (double)(a3 + a2) * 0.85;
        *((double *)v5 + 1) = v7;
        double result = 0.85 - v7;
        *((double *)v5 + 3) = result;
        *((void *)v5 + 4) = a3;
      }
    }
  }

  return result;
}

void *sub_10027385C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = v5;
    v16.receiver = a1;
    v16.super_class = (Class)&OBJC_CLASS___AssetRequest;
    a1 = objc_msgSendSuper2(&v16, "_initWithCFURLRequest:", [v7 _CFURLRequest]);
    if (a1)
    {
      id v8 = [v6 copy];
      uint64_t v9 = (void *)a1[2];
      a1[2] = v8;

      if (!a1[2])
      {
        id v10 = objc_alloc_init(&OBJC_CLASS___AssetRequestProperties);
        id v11 = (void *)a1[2];
        a1[2] = v10;
      }

      unsigned int v12 = [v7 allowsCellularAccess];
      if (!v6 || !v12 || (v6[9] & 1) == 0) {
        [a1 setAllowsCellularAccess:0];
      }
      unsigned int v13 = [v7 allowsConstrainedNetworkAccess];
      if (!v6 || !v13 || (v6[10] & 1) == 0) {
        [a1 setAllowsConstrainedNetworkAccess:0];
      }
      unsigned int v14 = [v7 allowsExpensiveNetworkAccess];
      if (!v6 || !v14 || (v6[11] & 1) == 0) {
        [a1 setAllowsExpensiveNetworkAccess:0];
      }
    }
  }

  return a1;
}

void *sub_10027399C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    id v5 = a3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSURLRequest requestWithURL:](&OBJC_CLASS___NSURLRequest, "requestWithURL:", a2));
    id v7 = sub_10027385C(v3, v6, v5);

    uint64_t v3 = v7;
  }

  return v3;
}

id sub_100273BF0(id result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLProtocol propertyForKey:inRequest:]( &OBJC_CLASS___NSURLProtocol,  "propertyForKey:inRequest:",  @"AssetRequetPropertyRangeOffset",  result));
    id v2 = [v1 unsignedLongLongValue];

    return v2;
  }

  return result;
}

void sub_100273C3C(void *a1, uint64_t a2)
{
  if (a1)
  {
    if (a2)
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", a2));
      +[NSURLProtocol setProperty:forKey:inRequest:]( &OBJC_CLASS___NSURLProtocol,  "setProperty:forKey:inRequest:",  v4,  @"AssetRequetPropertyRangeOffset",  a1);

      id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"bytes=%llu-", a2));
      [a1 setValue:v5 forHTTPHeaderField:@"Range"];
    }

    else
    {
      +[NSURLProtocol removePropertyForKey:inRequest:]( &OBJC_CLASS___NSURLProtocol,  "removePropertyForKey:inRequest:",  @"AssetRequetPropertyRangeOffset",  a1);
      [a1 setValue:0 forHTTPHeaderField:@"Range"];
    }
  }

id sub_100273D34(uint64_t a1)
{
  if (qword_1004624B8 != -1) {
    dispatch_once(&qword_1004624B8, &stru_1003EF5B8);
  }
  return (id)qword_1004624B0;
}

void sub_100273D78(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___DiagnosticService);
  id v2 = (void *)qword_1004624B0;
  qword_1004624B0 = (uint64_t)v1;
}

void sub_100273E18(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 16);
    v6[1] = 3221225472LL;
    v6[2] = sub_100273E98;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v5 = v3;
    v6[0] = _NSConcreteStackBlock;
    id v7 = v3;
    sub_1002C11C4(v4, v6);

    id v3 = v5;
  }
}

void sub_100273E98(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v8 + 1) + 8 * (void)v6),  "_unboostingRemoteObjectProxy",  (void)v8));
        [v7 receiveMessage:*(void *)(a1 + 40)];

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_100274034(uint64_t a1)
{
  id v2 = -[NSXPCConnection initWithListenerEndpoint:]( objc_alloc(&OBJC_CLASS___NSXPCConnection),  "initWithListenerEndpoint:",  *(void *)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___DiagnosticListener));
  -[NSXPCConnection setRemoteObjectInterface:](v2, "setRemoteObjectInterface:", v3);

  [*(id *)(*(void *)(a1 + 40) + 8) addObject:v2];
  objc_initWeak(&location, v2);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_1002741B4;
  v6[3] = &unk_1003EF5E0;
  void v6[4] = *(void *)(a1 + 40);
  objc_copyWeak(&v7, &location);
  -[NSXPCConnection setInterruptionHandler:](v2, "setInterruptionHandler:", v6);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10027428C;
  v4[3] = &unk_1003EF5E0;
  v4[4] = *(void *)(a1 + 40);
  objc_copyWeak(&v5, &location);
  -[NSXPCConnection setInvalidationHandler:](v2, "setInvalidationHandler:", v4);
  -[NSXPCConnection resume](v2, "resume");
  objc_destroyWeak(&v5);
  objc_destroyWeak(&v7);
  objc_destroyWeak(&location);
}

void sub_100274184(_Unwind_Exception *a1)
{
}

void sub_1002741B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 16);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100274248;
  v3[3] = &unk_1003EF5E0;
  v3[4] = v1;
  objc_copyWeak(&v4, (id *)(a1 + 40));
  sub_1002C11C4(v2, v3);
  objc_destroyWeak(&v4);
}

void sub_100274234(_Unwind_Exception *a1)
{
}

void sub_100274248(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [v1 removeObject:WeakRetained];
}

void sub_10027428C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 16);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100274320;
  v3[3] = &unk_1003EF5E0;
  v3[4] = v1;
  objc_copyWeak(&v4, (id *)(a1 + 40));
  sub_1002C11C4(v2, v3);
  objc_destroyWeak(&v4);
}

void sub_10027430C(_Unwind_Exception *a1)
{
}

void sub_100274320(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [v1 removeObject:WeakRetained];
}

uint64_t sub_100274550(uint64_t a1, uint64_t a2)
{
  return 1LL;
}

void sub_100274580(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 connection]);
  id v4 = sub_1002FD344((uint64_t)&OBJC_CLASS___AppInstallPredicates);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v3, v5);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(+[AppInstall defaultProperties](&OBJC_CLASS___AppInstall, "defaultProperties"));
  id v9 = [v8 mutableCopy];

  unsigned int v13 = @"IFNULL(app_install.phase, 10)";
  __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v13, 1LL));
  [v9 addObjectsFromArray:v10];

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_1002746D4;
  v11[3] = &unk_1003ED7B0;
  id v12 = *(id *)(a1 + 32);
  [v7 enumerateMemoryEntitiesWithProperties:v9 usingBlock:v11];
}

void sub_1002746D4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = a2;
  id v4 = sub_1001E2698(v3, (uint64_t)@"IFNULL(app_install.phase, 10)");
  id v5 = sub_100323C54(v3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);

  [v2 appendFormat:@"\n  (%3ld) %@", v4, v6];
}

LABEL_61:
        v6[2](v6);
      }

      else
      {
        if (a3 != 1001) {
          goto LABEL_37;
        }
        uint64_t v30 = ASDLogHandleForCategory(14LL);
        uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Checking for one account", buf, 2u);
        }

        uint64_t v32 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
        __int16 v33 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
        unint64_t v34 = (_TtC9appstored6LogKey *)objc_claimAutoreleasedReturnValue(objc_msgSend(v33, "ams_activeiTunesAccount"));

        uint64_t v35 = objc_alloc(&OBJC_CLASS____TtC9appstored23AccountCacheCoordinator);
        v123[0] = _NSConcreteStackBlock;
        v123[1] = 3221225472LL;
        v123[2] = sub_100275A28;
        v123[3] = &unk_1003EF608;
        __int16 v124 = v32;
        uint64_t v125 = v6;
        uint64_t v36 = v32;
        -[AccountCacheCoordinator oneAccountDSID:logKey:completionHandler:]( v35,  "oneAccountDSID:logKey:completionHandler:",  v34,  v36,  v123);

        uint64_t v37 = v124;
LABEL_67:
      }

      break;
  }

void sub_1002756EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory(14LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138412290;
      id v9 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Authorize complete with error: %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_DSID"));
    int v8 = 138412290;
    id v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Authorize complete for account: %@",  (uint8_t *)&v8,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

id sub_10027580C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    uint64_t v29 = 0LL;
    uint64_t v30 = &v29;
    uint64_t v31 = 0x3032000000LL;
    uint64_t v32 = sub_100275AFC;
    __int16 v33 = sub_100275B0C;
    id v34 = 0LL;
    uint64_t v23 = 0LL;
    unint64_t v24 = &v23;
    uint64_t v25 = 0x3032000000LL;
    id v26 = sub_100275AFC;
    uint64_t v27 = sub_100275B0C;
    id v28 = 0LL;
    if (v5)
    {
      dispatch_semaphore_t v7 = dispatch_semaphore_create(0LL);
      int v8 = (void *)objc_claimAutoreleasedReturnValue( +[SubscriptionEntitlementsCoordinator sharedInstance]( &OBJC_CLASS___SubscriptionEntitlementsCoordinator,  "sharedInstance"));
      id v9 = sub_100316A0C((uint64_t)&OBJC_CLASS___XPCRequestToken, 1);
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      void v19[2] = sub_100275B14;
      v19[3] = &unk_1003EF638;
      uint64_t v21 = &v23;
      id v22 = &v29;
      __int128 v11 = v7;
      id v20 = v11;
      sub_100265464(v8, 1uLL, v10, 0, 0, 0LL, v19);

      dispatch_time_t v12 = dispatch_time(0LL, 20000000000LL);
      if (dispatch_semaphore_wait(v11, v12))
      {
        uint64_t v13 = ASDErrorWithTitleAndMessage(ASDErrorDomain, 515LL, 0LL, 0LL);
        uint64_t v14 = objc_claimAutoreleasedReturnValue(v13);
        uint64_t v15 = (void *)v30[5];
        void v30[5] = v14;
      }

      if (a3)
      {
        objc_super v16 = (void *)v30[5];
        if (v16) {
          *a3 = v16;
        }
      }

      id v17 = (id)v24[5];
    }

    else
    {
      id v17 = 0LL;
    }

    _Block_object_dispose(&v23, 8);

    _Block_object_dispose(&v29, 8);
  }

  else
  {
    id v17 = 0LL;
  }

  return v17;
}

void sub_100275A00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100275A28(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory(14LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    id v10 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] oneAccountDSID returned: %@",  (uint8_t *)&v7,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100275AFC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100275B0C(uint64_t a1)
{
}

void sub_100275B14(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a2;
  id v8 = a5;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v15;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v15 != v11) {
          objc_enumerationMutation(v7);
        }
        uint64_t v13 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        if ([v13 segment] == (id)1) {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v13);
        }
      }

      id v10 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v10);
  }

  if (v8) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a5);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1002769B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

uint64_t sub_1002769D4(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Testing sbsync if subscribed complete", v5, 2u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100276A54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"IFNULL(app_install.phase, 10)",  &off_10040CCD0));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v6 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v5, v4);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  id v8 = [v7 countOfEntities];
  __int128 v15 = _NSConcreteStackBlock;
  uint64_t v16 = 3221225472LL;
  __int128 v17 = sub_100276BF0;
  uint64_t v18 = &unk_1003EAAA8;
  id v9 = v3;
  uint64_t v10 = *(void *)(a1 + 32);
  id v19 = v9;
  uint64_t v20 = v10;
  [v7 enumeratePersistentIDsUsingBlock:&v15];
  uint64_t v11 = ASDLogHandleForCategory(40LL);
  dispatch_time_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), "count", v15, v16, v17, v18);
    *(_DWORD *)__int128 buf = 134218240;
    id v22 = v13;
    __int16 v23 = 2048;
    id v24 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Cleared optimal download window from %ld updates (%ld total updates)",  buf,  0x16u);
  }

  return 1LL;
}

void sub_100276BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc(&OBJC_CLASS___AppInstallEntity);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  __int128 v14 = -[SQLiteEntity initWithPersistentID:onConnection:](v4, "initWithPersistentID:onConnection:", a2, v5);

  id v6 = sub_10021B7AC(v14);
  id v7 = (id *)objc_claimAutoreleasedReturnValue(v6);
  id v8 = sub_1002E6214((uint64_t)v7);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  if (v9)
  {
    id v10 = sub_1001E26D0(v14, (uint64_t)@"bundle_id");
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if (!v11)
    {
      dispatch_time_t v12 = sub_10021B614(v14);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v13 description]);
    }

    [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v11];
    sub_1002E62D4((uint64_t)v7, 0LL);
    sub_10021B828(v14, v7);
  }
}

BOOL sub_100276CF0(uint64_t a1, id a2)
{
  id v3 = sub_100304E60(a2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) count] != 0;
}

void sub_100276D74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    id v7 = v3;
    if (!v4)
    {
      uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v6 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose((const void *)(v9 - 96), 8) = v5;

      uint64_t v4 = *(void **)(a1 + 8);
    }

    [v4 addObject:v7];
    id v3 = v7;
  }
}

id *sub_100277570(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = sub_1002775BC((id *)objc_alloc(&OBJC_CLASS___CallerRequestPresenter), v3);

  return v4;
}

id *sub_1002775BC(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___CallerRequestPresenter;
    uint64_t v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

void sub_100277630(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  objc_opt_self(a1);
  uint64_t v15 = 0LL;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x3032000000LL;
  uint64_t v18 = sub_10027775C;
  id v19 = sub_10027776C;
  uint64_t v20 = sub_1002775BC((id *)objc_alloc(&OBJC_CLASS___CallerRequestPresenter), v8);
  id v10 = (void *)v16[5];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100277774;
  v12[3] = &unk_1003EF660;
  id v11 = v9;
  id v13 = v11;
  __int128 v14 = &v15;
  [v10 presentAuthenticateRequest:v7 resultHandler:v12];

  _Block_object_dispose(&v15, 8);
}

void sub_100277744( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10027775C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10027776C(uint64_t a1)
{
}

void sub_100277774(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;
}

void sub_1002778D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = ASDLogHandleForCategory(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v5)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v12 = 138543362;
    id v13 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Authentication request completed successfully",  (uint8_t *)&v12,  0xCu);
    goto LABEL_4;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v12 = 138543618;
    id v13 = v10;
    __int16 v14 = 2114;
    id v15 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%{public}@] Authentication request failed: %{public}@",  (uint8_t *)&v12,  0x16u);
LABEL_4:
  }

void sub_100277B0C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = ASDLogHandleForCategory(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v5)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v12 = 138543362;
    id v13 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Dialog request completed successfully",  (uint8_t *)&v12,  0xCu);
    goto LABEL_4;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v12 = 138543618;
    id v13 = v10;
    __int16 v14 = 2114;
    id v15 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%{public}@] Dialog request failed: %{public}@",  (uint8_t *)&v12,  0x16u);
LABEL_4:
  }

void sub_100277D18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = ASDLogHandleForCategory(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v5)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v12 = 138543362;
    id v13 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Engagement request completed successfully",  (uint8_t *)&v12,  0xCu);
    goto LABEL_4;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v12 = 138543618;
    id v13 = v10;
    __int16 v14 = 2114;
    id v15 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%{public}@] Engagement request failed: %{public}@",  (uint8_t *)&v12,  0x16u);
LABEL_4:
  }

id sub_100277E88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = objc_opt_self(a1);
  uint64_t v21 = 0LL;
  id v22 = &v21;
  uint64_t v23 = 0x3032000000LL;
  id v24 = sub_10027775C;
  uint64_t v25 = sub_10027776C;
  id v26 = 0LL;
  uint64_t v15 = 0LL;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x3032000000LL;
  uint64_t v18 = sub_10027775C;
  id v19 = sub_10027776C;
  id v20 = 0LL;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100278004;
  v11[3] = &unk_1003EF6B0;
  id v13 = &v21;
  __int16 v14 = &v15;
  uint64_t v7 = dispatch_semaphore_create(0LL);
  int v12 = v7;
  sub_10027808C(v6, v5, v11);
  dispatch_semaphore_wait(v7, 0xFFFFFFFFFFFFFFFFLL);
  id v8 = (void *)v22[5];
  if (a3 && !v8)
  {
    *a3 = (id) v16[5];
    id v8 = (void *)v22[5];
  }

  id v9 = v8;

  _Block_object_dispose(&v15, 8);
  _Block_object_dispose(&v21, 8);

  return v9;
}

void sub_100277FE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100278004(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10027808C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_self(a1);
  uint64_t v12 = 0LL;
  id v13 = &v12;
  uint64_t v14 = 0x3032000000LL;
  uint64_t v15 = sub_10027775C;
  uint64_t v16 = sub_10027776C;
  uint64_t v17 = objc_alloc_init(&OBJC_CLASS___InteractiveRequestPresenter);
  uint64_t v7 = (void *)v13[5];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1002782E0;
  void v9[3] = &unk_1003EF688;
  id v8 = v6;
  id v10 = v8;
  id v11 = &v12;
  [v7 presentDialogRequest:v5 resultHandler:v9];

  _Block_object_dispose(&v12, 8);
}

void sub_100278180( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100278198(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  objc_opt_self(a1);
  uint64_t v12 = 0LL;
  id v13 = &v12;
  uint64_t v14 = 0x3032000000LL;
  uint64_t v15 = sub_10027775C;
  uint64_t v16 = sub_10027776C;
  uint64_t v17 = objc_alloc_init(&OBJC_CLASS___InteractiveRequestPresenter);
  uint64_t v7 = (void *)v13[5];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_1002782A4;
  void v9[3] = &unk_1003EF660;
  id v8 = v6;
  id v10 = v8;
  id v11 = &v12;
  [v7 presentAuthenticateRequest:v5 resultHandler:v9];

  _Block_object_dispose(&v12, 8);
}

void sub_10027828C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002782A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;
}

void sub_1002782E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = 0LL;
}

void sub_1002784A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002784BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = ASDLogHandleForCategory(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (v5)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v14 = 138543362;
    uint64_t v15 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Authentication request completed successfully",  (uint8_t *)&v14,  0xCu);
    goto LABEL_4;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v14 = 138543618;
    uint64_t v15 = v10;
    __int16 v16 = 2114;
    id v17 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%{public}@] Authentication request failed: %{public}@",  (uint8_t *)&v14,  0x16u);
LABEL_4:
  }

void sub_10027876C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100278784(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = ASDLogHandleForCategory(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (v5)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v15 = 138412290;
    __int16 v16 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%@] Dialog request completed successfully",  (uint8_t *)&v15,  0xCu);
    goto LABEL_4;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v15 = 138412546;
    __int16 v16 = v10;
    __int16 v17 = 2114;
    id v18 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%@] Dialog request failed: %{public}@",  (uint8_t *)&v15,  0x16u);
LABEL_4:
  }

void sub_100278C20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100278C48(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = ASDLogHandleForCategory(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (v5)
  {
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_6;
    }
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v14 = 138543362;
    int v15 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Authentication request completed successfully",  (uint8_t *)&v14,  0xCu);
    goto LABEL_4;
  }

  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v14 = 138543618;
    int v15 = v10;
    __int16 v16 = 2114;
    id v17 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%{public}@] Authentication request failed: %{public}@",  (uint8_t *)&v14,  0x16u);
LABEL_4:
  }

void **sub_100279068(void **a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 currentRequest]);
    id v4 = sub_1001E3CD0(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

    if (v5)
    {
      id v6 = sub_1001856A8(v2[1], v5);
      uint64_t v2 = (void **)objc_claimAutoreleasedReturnValue(v6);
    }

    else
    {
      uint64_t v2 = 0LL;
    }
  }

  return v2;
}

void sub_1002792E8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = ASDLogHandleForCategory(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (a2)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v12 = 138543362;
      uint64_t v13 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Authentication request completed successfully",  (uint8_t *)&v12,  0xCu);
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 138543618;
    uint64_t v13 = v11;
    __int16 v14 = 2114;
    id v15 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%{public}@] Authentication request failed: %{public}@",  (uint8_t *)&v12,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10027963C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = ASDLogHandleForCategory(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (a2)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v12 = 138543362;
      uint64_t v13 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Dialog request completed successfully",  (uint8_t *)&v12,  0xCu);
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 138543618;
    uint64_t v13 = v11;
    __int16 v14 = 2114;
    id v15 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%{public}@] Dialog request failed: %{public}@",  (uint8_t *)&v12,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002799C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = ASDLogHandleForCategory(14LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (a2)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v12 = 138543362;
      uint64_t v13 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Engagement request completed successfully",  (uint8_t *)&v12,  0xCu);
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 138543618;
    uint64_t v13 = v11;
    __int16 v14 = 2114;
    id v15 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%{public}@] Engagement request failed: %{public}@",  (uint8_t *)&v12,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100279CF4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)]);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_opt_class(*(void *)(a1 + 32), v3);
    id v5 = *(void **)(a1 + 48);
    id v6 = v4;
    id v7 = [v5 count];
    id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "componentsJoinedByString:", @", "));
    int v9 = 138413058;
    uint64_t v10 = v4;
    __int16 v11 = 2048;
    id v12 = v7;
    __int16 v13 = 2112;
    __int16 v14 = v2;
    __int16 v15 = 2112;
    __int16 v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "[%@]: Canceling %lu job(s) for client %@: %@",  (uint8_t *)&v9,  0x2Au);
  }

  sub_100279E5C(*(void *)(a1 + 32), *(void **)(a1 + 48), &stru_1003EF748);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100279E4C(id a1, AppInstallsDatabaseTransaction *a2, int64_t a3)
{
}

void sub_100279E5C(uint64_t a1, void *a2, void *a3)
{
  id v10 = a3;
  if (a1)
  {
    id v5 = sub_1002B86C0(a2, &stru_1003EF810);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    id v7 = sub_1002EEBC0((uint64_t)&OBJC_CLASS___AppInstallsDatabaseStore);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10027BE34;
    v11[3] = &unk_1003EF888;
    id v12 = v6;
    id v13 = v10;
    id v9 = v6;
    [v8 modifyUsingTransaction:v11];
  }
}

void sub_10027A00C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)]);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_opt_class(*(void *)(a1 + 32), v3);
    id v5 = *(void **)(a1 + 48);
    id v6 = v4;
    id v7 = [v5 count];
    id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "componentsJoinedByString:", @", "));
    int v9 = 138413058;
    id v10 = v4;
    __int16 v11 = 2048;
    id v12 = v7;
    __int16 v13 = 2112;
    __int16 v14 = v2;
    __int16 v15 = 2112;
    __int16 v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "[%@]: Finishing %lu job(s) for client %@: %@",  (uint8_t *)&v9,  0x2Au);
  }

  sub_100279E5C(*(void *)(a1 + 32), *(void **)(a1 + 48), &stru_1003EF768);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10027A15C(id a1, AppInstallsDatabaseTransaction *a2, int64_t a3)
{
}

void sub_10027A228(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)]);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    id v4 = (void *)objc_opt_class(*(void *)(a1 + 32), v3);
    int v9 = 138412546;
    id v10 = v4;
    __int16 v11 = 2112;
    id v12 = v2;
    id v5 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "[%@]: Fetching all jobs for client %@",  (uint8_t *)&v9,  0x16u);
  }

  id v6 = sub_10027A334(*(void **)(a1 + 32), v2);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(void, void *, uint64_t))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v7, v8);
}

id sub_10027A334(void *a1, void *a2)
{
  if (a1)
  {
    id v2 = sub_10027A5B8(a1, 0LL, a2);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v2);
  }

  return a1;
}

void sub_10027A43C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)]);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    id v4 = (void *)objc_opt_class(*(void *)(a1 + 32), v3);
    id v5 = *(void **)(a1 + 48);
    id v6 = v4;
    id v7 = [v5 count];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "componentsJoinedByString:", @", "));
    int v13 = 138413058;
    __int16 v14 = v4;
    __int16 v15 = 2048;
    id v16 = v7;
    __int16 v17 = 2112;
    id v18 = v2;
    __int16 v19 = 2112;
    id v20 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "[%@]: Fetching %lu job(s) for client %@: %@",  (uint8_t *)&v13,  0x2Au);
  }

  int v9 = *(void **)(a1 + 32);
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSOrderedSet orderedSetWithArray:]( &OBJC_CLASS___NSOrderedSet,  "orderedSetWithArray:",  *(void *)(a1 + 48)));
  id v11 = sub_10027A5B8(v9, v10, v2);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

id sub_10027A5B8(id a1, void *a2, void *a3)
{
  id v3 = a1;
  if (a1)
  {
    id v5 = a3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 array]);
    id v7 = sub_1002B86C0(v6, &stru_1003EF8F8);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    id v9 = sub_10027C0EC(v3, v8, v5);
    id v3 = (id)objc_claimAutoreleasedReturnValue(v9);
  }

  return v3;
}

void sub_10027A71C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)]);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_opt_class(*(void *)(a1 + 32), v3);
    id v5 = *(void **)(a1 + 48);
    id v6 = v4;
    id v7 = [v5 count];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "componentsJoinedByString:", @", "));
    int v9 = 138413058;
    id v10 = v4;
    __int16 v11 = 2048;
    id v12 = v7;
    __int16 v13 = 2112;
    __int16 v14 = v2;
    __int16 v15 = 2112;
    id v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "[%@]: Pausing %lu job(s) for client %@: %@",  (uint8_t *)&v9,  0x2Au);
  }

  sub_100279E5C(*(void *)(a1 + 32), *(void **)(a1 + 48), &stru_1003EF788);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10027A874(id a1, AppInstallsDatabaseTransaction *a2, int64_t a3)
{
  if (a2) {
    sub_1001B47BC((id *)&a2->super.super.isa, (void *)a3, -10LL, 2uLL);
  }
}

void sub_10027A974(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)]);
  sub_1002085F4((uint64_t)v2, *(void **)(a1 + 48));
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_opt_class(*(void *)(a1 + 32), v3);
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v21 = v4;
    __int16 v22 = 2112;
    uint64_t v23 = v2;
    id v5 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "[%@]: Registered legacy client: %@",  buf,  0x16u);
  }

  id v6 = sub_10027A334(*(void **)(a1 + 32), v2);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v9 = v7;
  id v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v16;
    do
    {
      __int16 v13 = 0LL;
      do
      {
        if (*(void *)v16 != v12) {
          objc_enumerationMutation(v9);
        }
        __int16 v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  objc_msgSend(*(id *)(*((void *)&v15 + 1) + 8 * (void)v13), "persistentID", (void)v15)));
        -[NSMutableArray addObject:](v8, "addObject:", v14);

        __int16 v13 = (char *)v13 + 1;
      }

      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v11);
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  sub_100207D20((uint64_t)v2, v9);
}

void sub_10027AC64(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)]);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_opt_class(*(void *)(a1 + 32), v3);
    id v5 = *(void **)(a1 + 48);
    id v6 = v4;
    id v7 = [v5 count];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "componentsJoinedByString:", @", "));
    int v9 = 138413058;
    id v10 = v4;
    __int16 v11 = 2048;
    id v12 = v7;
    __int16 v13 = 2112;
    __int16 v14 = v2;
    __int16 v15 = 2112;
    __int128 v16 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "[%@]: Resuming %lu job(s) for client %@: %@",  (uint8_t *)&v9,  0x2Au);
  }

  sub_100279E5C(*(void *)(a1 + 32), *(void **)(a1 + 48), &stru_1003EF7A8);
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_10027ADBC(id a1, AppInstallsDatabaseTransaction *a2, int64_t a3)
{
}

void sub_10027B1B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10027B240;
    v6[3] = &unk_1003E9DC0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_10027B240(uint64_t a1)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_10027B32C;
  v8[3] = &unk_1003EF7D0;
  id v2 = *(void **)(a1 + 32);
  void v8[4] = *(void *)(a1 + 40);
  [v2 enumerateKeysAndObjectsUsingBlock:v8];
  uint64_t v3 = *(void *)(a1 + 40);
  if (!*(_BYTE *)(v3 + 32))
  {
    sub_10027B344(v3, *(void **)(a1 + 32));
    *(_BYTE *)(*(void *)(a1 + 40) + 32LL) = 1;
    dispatch_time_t v4 = dispatch_time(0LL, 500000000LL);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(dispatch_queue_s **)(v5 + 16);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10027B3D8;
    v7[3] = &unk_1003E9880;
    void v7[4] = v5;
    dispatch_after(v4, v6, v7);
  }

id sub_10027B32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) setObject:a3 forKeyedSubscript:a2];
}

void sub_10027B344(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10027CBF8;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_10027B3D8(uint64_t a1)
{
}

void sub_10027B3E0(uint64_t a1)
{
  if (a1)
  {
    if ([*(id *)(a1 + 24) count])
    {
      sub_10027B344(a1, *(void **)(a1 + 24));
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v13 = 0u;
      __int128 v14 = 0u;
      id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) allKeys]);
      id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v3)
      {
        id v4 = v3;
        uint64_t v5 = *(void *)v14;
        do
        {
          for (i = 0LL; i != v4; i = (char *)i + 1)
          {
            if (*(void *)v14 != v5) {
              objc_enumerationMutation(v2);
            }
            uint64_t v7 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
            uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) objectForKeyedSubscript:v7]);
            unsigned int v9 = [v8 isEqualToNumber:&off_10040CCE8];

            if (v9) {
              [*(id *)(a1 + 24) setObject:0 forKeyedSubscript:v7];
            }
          }

          id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
        }

        while (v4);
      }

      dispatch_time_t v10 = dispatch_time(0LL, 500000000LL);
      __int16 v11 = *(dispatch_queue_s **)(a1 + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10027B5B4;
      block[3] = &unk_1003E9880;
      void block[4] = a1;
      dispatch_after(v10, v11, block);
    }

    else
    {
      *(_BYTE *)(a1 + 32) = 0;
    }
  }

uint64_t sub_10027B5B4(uint64_t a1)
{
  return sub_10027B3E0(*(void *)(a1 + 32));
}

void sub_10027B990( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location, id a22)
{
}

void sub_10027B9D8(uint64_t a1)
{
  id v2 = -[JobManagerClient initWithConnection:]( objc_alloc(&OBJC_CLASS___JobManagerClient),  "initWithConnection:",  *(void *)(a1 + 32));
  [*(id *)(*(void *)(a1 + 40) + 8) setObject:v2 forKey:*(void *)(a1 + 32)];
}

id sub_10027BA30(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableOrderedSet);
    id v5 = sub_1002EEBC0((uint64_t)&OBJC_CLASS___AppInstallsDatabaseStore);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    unsigned int v9 = _NSConcreteStackBlock;
    uint64_t v10 = 3221225472LL;
    __int16 v11 = sub_10027BB00;
    id v12 = &unk_1003ECFC8;
    id v13 = v3;
    __int128 v14 = v4;
    uint64_t v7 = v4;
    [v6 readUsingSession:&v9];

    a1 = -[NSMutableOrderedSet copy](v7, "copy", v9, v10, v11, v12);
  }

  return a1;
}

void sub_10027BB00(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 connection]);
  id v4 = sub_100207C34(*(id *)(a1 + 32));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v3, v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  __int16 v11 = @"external_id";
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v11, 1LL));
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_10027BC20;
  void v9[3] = &unk_1003EE368;
  id v10 = *(id *)(a1 + 40);
  [v7 enumeratePersistentIDsAndProperties:v8 usingBlock:v9];
}

void sub_10027BC20(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"external_id"]);
  id v5 = *(void **)(a1 + 32);
  id v8 = v4;
  if (v4)
  {
    v10[0] = 0LL;
    v10[1] = 0LL;
    objc_msgSend(v4, "getUUIDBytes:", v10, v4);
    uint64_t v6 = v10[0];
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v6, v8));
  [v5 addObject:v7];
}

void sub_10027BCD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 8), "objectEnumerator", 0));
    id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v12;
      do
      {
        id v8 = 0LL;
        do
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8LL * (void)v8);
          id v10 = objc_autoreleasePoolPush();
          v3[2](v3, v9);
          objc_autoreleasePoolPop(v10);
          id v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }

      while (v6);
    }
  }
}

id sub_10027BE04(id a1, NSNumber *a2)
{
  return sub_1001DB464((uint64_t)&OBJC_CLASS___NSUUID, -[NSNumber longLongValue](a2, "longLongValue"));
}

uint64_t sub_10027BE34(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_10027BF7C;
  v17[3] = &unk_1003EF838;
  id v18 = v4;
  id v5 = sub_1002B86C0(v18, v17);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v6));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v9 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v8, v7);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10027C030;
  v14[3] = &unk_1003EF860;
  id v11 = *(id *)(a1 + 40);
  id v15 = v3;
  id v16 = v11;
  id v12 = v3;
  [v10 enumeratePersistentIDsUsingBlock:v14];

  return 1LL;
}

id sub_10027BF7C(uint64_t a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firstObject]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 UUIDString]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 substringToIndex:18]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@%%", v3));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:value:comparisonType:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:value:comparisonType:",  @"external_id",  v4,  7LL));

  return v5;
}

uint64_t sub_10027C030(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, void, uint64_t))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  a2);
}

uint64_t sub_10027C044(uint64_t result, uint64_t a2)
{
  if (result)
  {
    double result = 9LL;
    if (a2 <= -16)
    {
      uint64_t v3 = 3LL;
      if (a2 != -20) {
        uint64_t v3 = 9LL;
      }
      if (a2 == -30) {
        uint64_t v3 = 0LL;
      }
      if (a2 == -40) {
        return 4LL;
      }
      else {
        return v3;
      }
    }

    else
    {
      char v2 = a2 + 5;
      if ((unint64_t)(a2 + 5) <= 0x37)
      {
        if (((1LL << v2) & 0x84200000000001LL) != 0) {
          return 5LL;
        }
        if (((1LL << v2) & 0x2100000) != 0) {
          return 7LL;
        }
        if (a2 == 30) {
          return 2LL;
        }
      }

      if (a2 == -15 || a2 == -10) {
        return 6LL;
      }
    }
  }

  return result;
}

id sub_10027C0EC(id a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = a3;
    uint64_t v7 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    id v8 = sub_100207C34(v6);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](&OBJC_CLASS___NSMutableArray, "arrayWithObject:", v9));
    if (v5)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"external_id",  v5));
      [v10 addObject:v11];
    }

    id v12 = sub_1002EEBC0((uint64_t)&OBJC_CLASS___AppInstallsDatabaseStore);
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10027C244;
    v17[3] = &unk_1003EF8D8;
    id v18 = v10;
    id v19 = a1;
    id v20 = v7;
    __int128 v14 = v7;
    id v15 = v10;
    [v13 readUsingSession:v17];

    a1 = -[NSMutableArray copy](v14, "copy");
  }

  return a1;
}

void sub_10027C244(void *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v3));
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 connection]);

  id v7 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppInstallEntity, v6, v5);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  v13[0] = @"bundle_id";
  v13[1] = @"external_id";
  void v13[2] = @"failure_error";
  v13[3] = @"item_id";
  void v13[4] = @"IFNULL(app_install.phase, 10)";
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v13, 5LL));
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10027C3B4;
  v11[3] = &unk_1003EF8B0;
  id v10 = (void *)a1[6];
  void v11[4] = a1[5];
  id v12 = v10;
  [v8 enumeratePersistentIDsAndProperties:v9 usingBlock:v11];
}

void sub_10027C3B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v21 = (id)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"external_id"]);
  id v5 = objc_alloc(&OBJC_CLASS___ASDJob);
  if (v21)
  {
    v23[0] = 0LL;
    v23[1] = 0LL;
    [v21 getUUIDBytes:v23];
    uint64_t v6 = v23[0];
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  id v7 = objc_msgSend(v5, "initWithPersistentID:", v6, v21);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"bundle_id"]);
  [v7 setBundleID:v8];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"item_id"]);
  objc_msgSend(v7, "setStoreItemID:", objc_msgSend(v9, "unsignedLongLongValue"));

  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", @"IFNULL(app_install.phase, 10)"));
  objc_msgSend(v7, "setPhase:", sub_10027C044(v10, (uint64_t)objc_msgSend(v11, "integerValue")));

  [v7 setType:2];
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"failure_error"]);

  uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSData, v13);
  if ((objc_opt_isKindOfClass(v12, v14) & 1) != 0)
  {
    id v16 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___NSError, v15),  v12,  0LL);
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    [v7 setFailureError:v17];
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) objectForKeyedSubscript:v22]);
  id v19 = v18;
  if (v18) {
    [v18 doubleValue];
  }
  else {
    double v20 = -1.0;
  }
  [v7 setPercentComplete:v20];
  [*(id *)(a1 + 40) addObject:v7];
}

id sub_10027C5DC(id a1, NSNumber *a2)
{
  return sub_1001DB464((uint64_t)&OBJC_CLASS___NSUUID, -[NSNumber longLongValue](a2, "longLongValue"));
}

void sub_10027C60C(uint64_t a1)
{
  char v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) objectForKey:*(void *)(a1 + 40)]);
  [*(id *)(*(void *)(a1 + 32) + 8) removeObjectForKey:*(void *)(a1 + 40)];
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_opt_class(*(void *)(a1 + 32), v3);
    int v6 = 138412546;
    id v7 = v4;
    __int16 v8 = 2112;
    id v9 = v2;
    id v5 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "[%@]: Client %@ disconnected",  (uint8_t *)&v6,  0x16u);
  }
}

void sub_10027C700(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v3 = ASDLogHandleForCategory(9LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    int v6 = (void *)objc_opt_class(WeakRetained, v5);
    int v7 = *(_DWORD *)(a1 + 40);
    int v9 = 138543618;
    uint64_t v10 = v6;
    __int16 v11 = 1024;
    int v12 = v7;
    id v8 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_ERROR,  "[%{public}@]: Connection interrupted for pid: %i",  (uint8_t *)&v9,  0x12u);
  }
}

void sub_10027C7E4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = ASDLogHandleForCategory(9LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v7 = (void *)objc_opt_class(WeakRetained, v6);
    int v8 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)uint64_t v13 = 138543618;
    *(void *)&void v13[4] = v7;
    *(_WORD *)&v13[12] = 1024;
    *(_DWORD *)&v13[14] = v8;
    id v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "[%{public}@]: Connection invalidated from pid: %i",  v13,  0x12u);
  }

  id v10 = v3;
  __int16 v11 = v10;
  if (WeakRetained)
  {
    int v12 = (dispatch_queue_s *)WeakRetained[2];
    *(void *)uint64_t v13 = _NSConcreteStackBlock;
    *(void *)&v13[8] = 3221225472LL;
    *(void *)&v13[16] = sub_10027C60C;
    uint64_t v14 = &unk_1003E9DC0;
    uint64_t v15 = WeakRetained;
    id v16 = v10;
    dispatch_sync(v12, v13);
  }
}

void sub_10027C93C(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_10027C9AC;
  void v2[3] = &unk_1003EF920;
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = v1;
  sub_10027BCD8(v3, v2);
}

void sub_10027C9AC(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = sub_10027C0EC(*(id *)(a1 + 32), *(void **)(a1 + 40), v5);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if ([v4 count]) {
    sub_100207D20((uint64_t)v5, v4);
  }
}

void sub_10027CA08(uint64_t a1)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10027CA90;
  v5[3] = &unk_1003EF948;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = v3;
  uint64_t v7 = v4;
  id v8 = *(id *)(a1 + 48);
  sub_10027BCD8(v2, v5);
}

void sub_10027CA90(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  if (v3)
  {
    v17[0] = 0LL;
    v17[1] = 0LL;
    [v3 getUUIDBytes:v17];
    uint64_t v5 = v17[0];
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v5));
  uint64_t v7 = +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  sub_10027C044(*(void *)(a1 + 40), (uint64_t)[*(id *)(a1 + 48) integerValue]));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v15 = v6;
  id v16 = v8;
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
  sub_10020824C((uint64_t)v4, v9);

  uint64_t v14 = v6;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v14, 1LL));
  int v12 = v6;
  uint64_t v13 = v8;
  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v13,  &v12,  1LL));
  sub_100207EF4((uint64_t)v4, v10, v11);
}

void sub_10027CBF8(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_10027CC68;
  void v2[3] = &unk_1003EF920;
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = v1;
  sub_10027BCD8(v3, v2);
}

void sub_10027CC68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10027BA30(*(id *)(a1 + 32), v3);
  uint64_t v5 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [*(id *)(a1 + 40) count]);
  id v6 = *(void **)(a1 + 40);
  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 3221225472LL;
  id v16 = sub_10027CE10;
  __int128 v17 = &unk_1003EF970;
  id v7 = v4;
  id v18 = v7;
  id v8 = v5;
  id v19 = v8;
  [v6 enumerateKeysAndObjectsUsingBlock:&v14];
  if (-[NSMutableDictionary count](v8, "count", v14, v15, v16, v17))
  {
    uint64_t v9 = ASDLogHandleForCategory(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      int v12 = (void *)objc_opt_class(*(void *)(a1 + 32), v11);
      *(_DWORD *)__int128 buf = 138412802;
      id v21 = v12;
      __int16 v22 = 2112;
      id v23 = v3;
      __int16 v24 = 2112;
      uint64_t v25 = v8;
      id v13 = v12;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEBUG,  "[%@]: Sending progress: %@ -> %@",  buf,  0x20u);
    }

    sub_100208420((uint64_t)v3, v8);
  }
}

void sub_10027CE10(uint64_t a1, void *a2, void *a3)
{
  id v7 = a3;
  if (a2)
  {
    v9[0] = 0LL;
    v9[1] = 0LL;
    [a2 getUUIDBytes:v9];
    uint64_t v5 = v9[0];
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v5, v7));
}

void sub_10027CED4(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    id v6 = (void *)objc_opt_class(*(void *)(a1 + 32), v4);
    uint64_t v7 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412546;
    id v13 = v6;
    __int16 v14 = 2112;
    uint64_t v15 = v7;
    id v8 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[%@]: NOTIFY STATES: %@", buf, 0x16u);
  }

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_10027CFF8;
  void v9[3] = &unk_1003EF920;
  uint64_t v5 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = v5;
  sub_10027BCD8(v10, v9);
}

void sub_10027CFF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10027BA30(*(id *)(a1 + 32), v3);
  uint64_t v5 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [*(id *)(a1 + 40) count]);
  id v6 = *(void **)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_10027D1A4;
  v15[3] = &unk_1003EF998;
  id v7 = v4;
  id v16 = v7;
  id v8 = v5;
  uint64_t v9 = *(void *)(a1 + 32);
  __int128 v17 = v8;
  uint64_t v18 = v9;
  [v6 enumerateKeysAndObjectsUsingBlock:v15];
  if (-[NSMutableDictionary count](v8, "count"))
  {
    uint64_t v10 = ASDLogHandleForCategory(9LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      id v13 = (void *)objc_opt_class(*(void *)(a1 + 32), v12);
      *(_DWORD *)__int128 buf = 138412802;
      double v20 = v13;
      __int16 v21 = 2112;
      id v22 = v3;
      __int16 v23 = 2112;
      __int16 v24 = v8;
      id v14 = v13;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "[%@]: NOTIFY CLIENT: %@ -> %@",  buf,  0x20u);
    }

    sub_10020824C((uint64_t)v3, v8);
  }
}

void sub_10027D1A4(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  if (a2)
  {
    v11[0] = 0LL;
    v11[1] = 0LL;
    [a2 getUUIDBytes:v11];
    uint64_t v5 = v11[0];
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v5, v9));
  if ([*(id *)(a1 + 32) containsObject:v6])
  {
    id v7 = +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  sub_10027C044(*(void *)(a1 + 48), (uint64_t)[v10 integerValue]));
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    [*(id *)(a1 + 40) setObject:v8 forKeyedSubscript:v6];
  }
}

double *sub_10027D2EC(void *a1, double a2)
{
  if (!a1) {
    return 0LL;
  }
  v8.receiver = a1;
  v8.super_class = (Class)&OBJC_CLASS___ODRDataSampler;
  id v3 = (double *)objc_msgSendSuper2(&v8, "init");
  id v4 = v3;
  if (v3)
  {
    v3[4] = a2;
    uint64_t v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v6 = (void *)*((void *)v4 + 2);
    *((void *)v4 + 2) = v5;

    *((_BYTE *)v4 + 24) = 0;
  }

  return v4;
}

void sub_10027D36C(void *a1)
{
  if (a1)
  {
    id obj = a1;
    objc_sync_enter(obj);
    if (!obj[24])
    {
      obj[24] = 1;
      sub_10027D3E8(obj);
    }

    objc_sync_exit(obj);
  }

void sub_10027D3D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id obj)
{
}

void sub_10027D3E8(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_sync_enter(v1);
    if (*((_BYTE *)v1 + 24))
    {
      uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 takeSample]);
      if (v2) {
        [v1[2] addObject:v2];
      }
      dispatch_time_t v3 = dispatch_time(0LL, 1000000000LL);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10027D4F8;
      block[3] = &unk_1003E9880;
      void block[4] = v1;
      dispatch_after(v3, &_dispatch_main_q, block);
    }

    objc_sync_exit(v1);
  }

void sub_10027D4A0(_Unwind_Exception *a1)
{
}

void sub_10027D4B4(void *a1)
{
  if (a1)
  {
    id obj = a1;
    objc_sync_enter(obj);
    if (obj[24]) {
      obj[24] = 0;
    }
    objc_sync_exit(obj);
  }

uint64_t sub_10027D4F8(uint64_t a1)
{
  return sub_10027D3E8(*(void *)(a1 + 32));
}

id sub_10027D508(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_sync_enter(v1);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1[2] valueForKeyPath:@"@avg.self"]);
    objc_sync_exit(v1);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return v2;
}

void sub_10027D560(_Unwind_Exception *a1)
{
}

id sub_10027D574(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_sync_enter(v1);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1[2] valueForKeyPath:@"@min.self"]);
    objc_sync_exit(v1);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return v2;
}

void sub_10027D5CC(_Unwind_Exception *a1)
{
}

id sub_10027D5E0(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    objc_sync_enter(v1);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1[2] valueForKeyPath:@"@max.self"]);
    objc_sync_exit(v1);
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return v2;
}

void sub_10027D638(_Unwind_Exception *a1)
{
}

id sub_10027D70C(uint64_t a1)
{
  if (qword_1004624C8 != -1) {
    dispatch_once(&qword_1004624C8, &stru_1003EF9B8);
  }
  return (id)qword_1004624C0;
}

void sub_10027D750(id a1)
{
  uint64_t v1 = -[TransactionStore init]_0(objc_alloc(&OBJC_CLASS___TransactionStore));
  uint64_t v2 = (void *)qword_1004624C0;
  qword_1004624C0 = (uint64_t)v1;
}

_DWORD *sub_10027D89C(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___LogTransactions);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  dispatch_time_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 40), "keyEnumerator", 0));
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v11;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v3);
        }
        sub_10031F7E8((uint64_t)v2, *(void **)(*((void *)&v10 + 1) + 8LL * (void)v7));
        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v5);
  }

  objc_super v8 = sub_1002D5F64(v2, (uint64_t)"Transactions");
  return v8;
}

void sub_10027DA08(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  id v5 = sub_10027D70C(v4);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  sub_10027DA58((uint64_t)v6, v3);
}

void sub_10027DA58(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(dispatch_queue_s **)(a1 + 8);
    block[1] = 3221225472LL;
    block[2] = sub_10027DBC8;
    block[3] = &unk_1003E9DC0;
    void block[4] = a1;
    id v5 = v3;
    block[0] = _NSConcreteStackBlock;
    id v7 = v3;
    dispatch_sync(v4, block);

    id v3 = v5;
  }
}

void sub_10027DAD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  id v5 = sub_10027D70C(v4);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  sub_10027DB28((uint64_t)v6, v3);
}

void sub_10027DB28(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_time_t v4 = dispatch_time(0LL, *(void *)(a1 + 24));
    id v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10027DD04;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_after(v4, v5, v6);
  }
}

void sub_10027DBC8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) countForObject:*(void *)(a1 + 40)];
  uint64_t v3 = ASDLogHandleForCategory(14LL);
  dispatch_time_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v2 == (id)1)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v8 = 138543362;
      uint64_t v9 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[Transaction] Started transaction: %{public}@",  (uint8_t *)&v8,  0xCu);
    }

    dispatch_time_t v4 = (os_log_s *)os_transaction_create([*(id *)(a1 + 40) UTF8String]);
    [*(id *)(*(void *)(a1 + 32) + 40) setObject:v4 forKeyedSubscript:*(void *)(a1 + 40)];
  }

  else if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = 138543362;
    uint64_t v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[Transaction] Joined transaction: %{public}@",  (uint8_t *)&v8,  0xCu);
  }
}

void sub_10027DD04(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) countForObject:*(void *)(a1 + 40)];
  uint64_t v3 = ASDLogHandleForCategory(14LL);
  dispatch_time_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_INFO);
  if (v2)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v8 = 138543362;
      uint64_t v9 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[Transaction] Left transaction: %{public}@",  (uint8_t *)&v8,  0xCu);
    }
  }

  else
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v8 = 138543362;
      uint64_t v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "[Transaction] Ended transaction: %{public}@",  (uint8_t *)&v8,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 40) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
  }

void sub_10027DF9C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___UpdatesManager);
  id v2 = (void *)qword_1004624D8;
  qword_1004624D8 = (uint64_t)v1;
}

void sub_10027E134( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10027E14C(uint64_t a1, char a2)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10027E314(_Unwind_Exception *a1)
{
}

uint64_t sub_10027E338(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10027E348(uint64_t a1)
{
}

void sub_10027E350(uint64_t a1)
{
}

void sub_10027E364(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40)));
  uint64_t v3 = *(void *)(a1 + 32);
  dispatch_time_t v4 = *(void **)(v3 + 8);
  *(void *)(v3 + _Block_object_dispose((const void *)(v1 - 128), 8) = v2;
}

id sub_10027E3A0(uint64_t a1, void *a2)
{
  return sub_10029F8BC(a2, *(_BYTE *)(a1 + 32) == 0);
}

void sub_10027E410(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 8);
  *(void *)(v1 + _Block_object_dispose((const void *)(v1 - 128), 8) = 0LL;
}

void sub_10027E638(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___UpdatesManager_ObjC);
  uint64_t v2 = (void *)qword_1004624E8;
  qword_1004624E8 = (uint64_t)v1;
}

void sub_10027E840(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    dispatch_time_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver sharedInstance](&OBJC_CLASS___ActiveAccountObserver, "sharedInstance"));
    [v3 addObserver:v2 selector:"_handleAccountChangedNotification" name:@"AccountStorePrimaryAccountDidChange" object:v4];
  }

  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
  uint64_t v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_DSID"));
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(void **)(v7 + 16);
  *(void *)(v7 + 16) = v6;
}

void sub_10027E90C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    dispatch_async(*(dispatch_queue_t *)(v2 + 32), &stru_1003EFE00);
  }
}

void sub_10027EA1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10027EBA4(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    id v3 = a2;
    dispatch_time_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);

    id v5 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppUpdateEntity, v4, 0LL);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }

  else
  {
    id v7 = a2;
    int v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_per_device",  &__kCFBooleanFalse));
    v16[0] = v8;
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_b2b_custom_app",  &__kCFBooleanFalse));
    v16[1] = v9;
    __int128 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v16, 2LL));
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v10));

    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v7 connection]);
    id v13 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppUpdateEntity, v12, v11);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v13);
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_10027ED80;
  v14[3] = &unk_1003E98A8;
  id v15 = *(id *)(a1 + 32);
  [v6 enumerateMemoryEntitiesUsingBlock:v14];
}

id sub_10027ED80(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

BOOL sub_10027ED8C(uint64_t a1, void *a2)
{
  return sub_10029FAF4(a2, *(void **)(a1 + 32));
}

void sub_10027EE44(void *a1)
{
  LOBYTE(v2) = 1;
  id v3 = -[UpdatesContext initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:]( objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext),  "initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:",  7LL,  a1[4],  0LL,  a1[6],  0LL,  1LL,  v2,  0LL);
  sub_10027EEB0(a1[5], v3);
}

void sub_10027EEB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  dispatch_time_t v4 = v3;
  if (a1)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 callbackHandler]);

    if (v5)
    {
      uint64_t v35 = 0LL;
      uint64_t v36 = &v35;
      uint64_t v37 = 0x3032000000LL;
      uint64_t v38 = sub_10027E338;
      unint64_t v39 = sub_10027E348;
      id v40 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
      id v6 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472LL;
      v31[2] = sub_10028289C;
      v31[3] = &unk_1003EFC58;
      id v8 = v4;
      id v32 = v8;
      uint64_t v33 = a1;
      id v34 = &v35;
      [v7 readUsingSession:v31];

      v30[0] = 0LL;
      v30[1] = v30;
      void v30[2] = 0x2020000000LL;
      void v30[3] = 0LL;
      v29[0] = 0LL;
      v29[1] = v29;
      v29[2] = 0x2020000000LL;
      void v29[3] = 0LL;
      if ([(id)v36[5] count])
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
        __int128 v10 = *(void **)(a1 + 64);
        v27[0] = _NSConcreteStackBlock;
        v27[1] = 3221225472LL;
        v27[2] = sub_100282F58;
        v27[3] = &unk_1003E9DC0;
        void v27[4] = a1;
        id v11 = v9;
        id v28 = v11;
        sub_1002C11C4(v10, v27);
        LOBYTE(v10) = sub_1002FA098((uint64_t)&OBJC_CLASS___AppDefaultsManager);
        __int128 v12 = (void *)v36[5];
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472LL;
        void v20[2] = sub_100283070;
        v20[3] = &unk_1003EFC80;
        id v13 = v11;
        id v21 = v13;
        __int16 v23 = &v35;
        char v26 = (char)v10;
        id v22 = v8;
        __int16 v24 = v30;
        uint64_t v25 = v29;
        [v12 enumerateObjectsWithOptions:2 usingBlock:v20];
      }

      id v14 = *(dispatch_queue_s **)(a1 + 24);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100283250;
      block[3] = &unk_1003EFCA8;
      id v16 = v8;
      __int128 v17 = v30;
      uint64_t v18 = v29;
      id v19 = &v35;
      dispatch_async(v14, block);

      _Block_object_dispose(v29, 8);
      _Block_object_dispose(v30, 8);

      _Block_object_dispose(&v35, 8);
    }
  }
}

void sub_10027F148( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, char a34)
{
}

void sub_10027F204(uint64_t a1)
{
}

void sub_10027F2B8(uint64_t a1)
{
  v12[0] = 0LL;
  v12[1] = v12;
  v12[2] = 0x3032000000LL;
  v12[3] = sub_10027E338;
  void v12[4] = sub_10027E348;
  id v13 = 0LL;
  id v2 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_10027F3F0;
  void v9[3] = &unk_1003EBC50;
  id v11 = v12;
  id v10 = *(id *)(a1 + 32);
  [v3 readUsingSession:v9];

  dispatch_time_t v4 = *(void **)(a1 + 48);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 24LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10027F430;
  v6[3] = &unk_1003EE340;
  id v7 = v4;
  id v8 = v12;
  dispatch_async(v5, v6);

  _Block_object_dispose(v12, 8);
}

void sub_10027F3D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_10027F3F0(uint64_t a1, id a2)
{
  id v3 = sub_100320394(a2, *(void **)(a1 + 32));
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

uint64_t sub_10027F430(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

void sub_10027F4F0(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext);
  uint64_t v3 = *(void *)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10027F5AC;
  v6[3] = &unk_1003EECD8;
  id v7 = *(id *)(a1 + 48);
  LOBYTE(v5) = 0;
  uint64_t v4 = -[UpdatesContext initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:]( v2,  "initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:",  0LL,  v3,  0LL,  v6,  0LL,  0LL,  v5,  0LL);
  sub_10027EEB0(*(void *)(a1 + 40), v4);
}

uint64_t sub_10027F5AC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!a2) {
    a2 = &__NSArray0__struct;
  }
  return (*(uint64_t (**)(uint64_t, void *))(v2 + 16))(v2, a2);
}

void sub_10027F620()
{
}

uint64_t sub_10027F754(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10027F794(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = ASDLogHandleForCategory(40LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 logKey]);
      int v10 = 138412546;
      id v11 = v9;
      __int16 v12 = 2114;
      id v13 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[%@] Sending updates changed notification with reason: %{public}@",  (uint8_t *)&v10,  0x16u);
    }

    notify_post("com.apple.appstored.updatesstorechanged");
  }
}

void sub_10027F8E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = ASDLogHandleForCategory(40LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Post processing update metrics",  (uint8_t *)v11,  2u);
    }

    uint64_t v4 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    id v5 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_100283AB8;
    v11[3] = &unk_1003EB9C8;
    uint64_t v7 = v4;
    __int16 v12 = v7;
    uint64_t v13 = v1;
    [v6 readUsingSession:v11];

    if (-[NSMutableArray count](v7, "count"))
    {
      id v8 = sub_1002C0BC0((uint64_t)&OBJC_CLASS___UpdateMetricsManager);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      sub_1002C0CC8((uint64_t)v9, v7);
    }

    int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    sub_1002FA2E0((uint64_t)&OBJC_CLASS___AppDefaultsManager, v10);
  }

void sub_10027FA84(uint64_t a1)
{
  uint64_t v2 = -[UpdatesContext initWithReason:]( objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext),  "initWithReason:",  1LL);
  sub_10027FAD0(*(void *)(a1 + 32), v2);
}

void sub_10027FAD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v5 = v3;
    if (+[AMSDevice deviceIsAppleTV](&OBJC_CLASS___AMSDevice, "deviceIsAppleTV")
      && (![v5 userInitiated] || !*(_BYTE *)(a1 + 48)))
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 logKey]);
      sub_1002820B0(a1, v4);
    }

    sub_10028046C((void *)a1, v5);
    id v3 = v5;
  }
}

void sub_10027FBAC(uint64_t a1)
{
  if ((+[AMSDevice deviceIsAppleTV](&OBJC_CLASS___AMSDevice, "deviceIsAppleTV") & 1) == 0
    && !sub_1002F99F4((uint64_t)&OBJC_CLASS___AppDefaultsManager)
    && !sub_1002FA098((uint64_t)&OBJC_CLASS___AppDefaultsManager))
  {
    sub_1002F9AAC((uint64_t)&OBJC_CLASS___AppDefaultsManager, 1);
    uint64_t v2 = -[UpdatesContext initWithReason:]( objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext),  "initWithReason:",  3LL);
    sub_10027FAD0(*(void *)(a1 + 32), v2);
  }

void sub_10027FCBC()
{
}

void sub_10027FD80(void *a1)
{
  LOBYTE(v_Block_object_dispose(va, 8) = 0;
  uint64_t v2 = -[UpdatesContext initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:]( objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext),  "initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:",  0LL,  a1[4],  0LL,  0LL,  0LL,  0LL,  v8,  0LL);
  uint64_t v3 = ASDLogHandleForCategory(40LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[UpdatesContext logKey](v2, "logKey"));
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v13 = v5;
    __int16 v14 = 2048;
    uint64_t v15 = 0LL;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%@] Refresh update count returning count: %ld",  buf,  0x16u);
  }

  id v6 = (void *)a1[6];
  if (v6)
  {
    uint64_t v7 = *(dispatch_queue_s **)(a1[5] + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10027FEDC;
    block[3] = &unk_1003EE2C8;
    id v10 = v6;
    uint64_t v11 = 0LL;
    dispatch_async(v7, block);
  }
}

uint64_t sub_10027FEDC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(a1 + 40),  0LL);
}

void sub_10027FF9C(void *a1)
{
  uint64_t v2 = objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext);
  uint64_t v3 = a1[4];
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a1[7]));
  LOBYTE(v_Block_object_dispose(va, 8) = 0;
  id v5 = -[UpdatesContext initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:]( v2,  "initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:",  8LL,  v3,  0LL,  0LL,  0LL,  0LL,  v8,  v4);

  sub_10027FAD0(a1[5], v5);
  id v6 = (void *)a1[6];
  if (v6)
  {
    uint64_t v7 = *(dispatch_queue_s **)(a1[5] + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10028008C;
    block[3] = &unk_1003EA158;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

uint64_t sub_10028008C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100280144(void *a1)
{
  LOBYTE(v2) = 0;
  uint64_t v3 = -[UpdatesContext initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:]( objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext),  "initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:",  1LL,  a1[4],  0LL,  a1[6],  0LL,  0LL,  v2,  0LL);
  sub_10027FAD0(a1[5], v3);
}

void sub_100280254(void *a1)
{
  LOBYTE(v2) = 1;
  uint64_t v3 = -[UpdatesContext initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:]( objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext),  "initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:",  0LL,  a1[4],  0LL,  a1[6],  0LL,  0LL,  v2,  0LL);
  sub_10027FAD0(a1[5], v3);
}

void sub_100280368(uint64_t a1)
{
  LOBYTE(v6) = 0;
  uint64_t v2 = -[UpdatesContext initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:]( objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext),  "initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:",  2LL,  *(void *)(a1 + 32),  0LL,  *(void *)(a1 + 48),  0LL,  1LL,  v6,  0LL);
  uint64_t v3 = ASDLogHandleForCategory(40LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[UpdatesContext logKey](v2, "logKey"));
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v8 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%@] Refreshing from server for reloadManagedUpdates",  buf,  0xCu);
  }

  sub_10028046C(*(void **)(a1 + 40), v2);
}

void sub_10028046C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v49 = v3;
    id v5 = v3;
    id v51 = v4;
    uint64_t v6 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    id v50 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    if (sub_1002735AC((uint64_t)&OBJC_CLASS___Restrictions)
      && sub_10027362C((uint64_t)&OBJC_CLASS___Restrictions))
    {
      CFPropertyListRef v7 = sub_1002FA180((uint64_t)&OBJC_CLASS___AppDefaultsManager);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      uint64_t v9 = (void *)a1[8];
      location[0] = _NSConcreteStackBlock;
      location[1] = (id)3221225472LL;
      location[2] = sub_100284BA8;
      location[3] = &unk_1003E9B40;
      location[4] = a1;
      id v60 = v8;
      id v61 = v5;
      id v62 = v6;
      id v10 = v8;
      sub_1002C11C4(v9, location);
    }

    else
    {
      uint64_t v11 = ASDLogHandleForCategory(40LL);
      __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 logKey]);
        *(_DWORD *)__int128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v13;
        *(_WORD *)&_BYTE buf[12] = 1024;
        *(_DWORD *)&buf[14] = sub_1002735AC((uint64_t)&OBJC_CLASS___Restrictions);
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = sub_10027362C((uint64_t)&OBJC_CLASS___Restrictions);
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[%@] Skipping provisioned app install due to restrictions disabled: auto-downloads: %{BOOL}d app-install-allowed: %{BOOL}d",  buf,  0x18u);
      }
    }

    id v14 = objc_alloc_init(&OBJC_CLASS___ASDCoastGuard);
    uint64_t v15 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    id v16 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_100283364;
    id v67 = &unk_1003EFCD0;
    char v68 = v15;
    uint64_t v18 = v15;
    [v17 readUsingSession:buf];

    id v19 = -[NSMutableDictionary copy](v18, "copy");
    double v20 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
    unsigned __int8 v21 = [v20 applicationIsInstalled:@"com.apple.TVAppStore"];

    BOOL v22 = [v5 reason] == (id)2 || objc_msgSend(v5, "reason") == (id)4;
    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v5 bridgedTargetedItemID]);
    BOOL v24 = v23 == 0LL;

    if (v24)
    {
      uint64_t v26 = -1LL;
    }

    else
    {
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v5 bridgedTargetedItemID]);
      uint64_t v26 = (uint64_t)[v25 integerValue];
    }

    uint64_t v27 = ASDLogHandleForCategory(40LL);
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v5 logKey]);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "[%@] ╒ Prepping update request", buf, 0xCu);
    }

    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_100284DF4;
    id v67 = &unk_1003EFDE0;
    uint64_t v75 = v26;
    uint64_t v30 = (NSMutableDictionary *)v5;
    char v68 = v30;
    id v31 = v19;
    unsigned __int8 v76 = v21;
    BOOL v77 = v22;
    id v69 = v31;
    id v70 = a1;
    id v32 = v50;
    uint64_t v71 = v32;
    id v33 = v14;
    id v72 = v33;
    uint64_t v34 = v51;
    uint64_t v73 = v34;
    uint64_t v35 = v6;
    char v74 = v35;
    +[ApplicationProxy enumerateApplicationsOfType:usingBlock:]( &OBJC_CLASS___ApplicationProxy,  "enumerateApplicationsOfType:usingBlock:",  0LL,  buf);
    uint64_t v36 = ASDLogHandleForCategory(40LL);
    uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary logKey](v30, "logKey"));
      id v39 = -[NSMutableArray count](v35, "count");
      *(_DWORD *)SEL v63 = 138412546;
      *(void *)&v63[4] = v38;
      *(_WORD *)&v63[12] = 2048;
      *(void *)&v63[14] = v39;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "[%@] ╘ Update request contains %ld candidate(s)",  v63,  0x16u);
    }

    if (-[NSMutableArray count](v32, "count"))
    {
      id v40 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
      unsigned int v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
      *(void *)SEL v63 = _NSConcreteStackBlock;
      *(void *)&v63[8] = 3221225472LL;
      *(void *)&v63[16] = sub_100285510;
      id v64 = &unk_1003EFAB8;
      __int16 v65 = v32;
      [v41 modifyUsingTransaction:v63];

      char v42 = 1;
    }

    else
    {
      char v42 = 0;
    }

    uint64_t v43 = v74;
    id v44 = v35;

    id v45 = sub_1002E837C((id *)objc_alloc(&OBJC_CLASS___UpdatesBatchTask), v44, v30);
    objc_initWeak((id *)buf, a1);
    objc_initWeak(location, v45);
    v52[0] = _NSConcreteStackBlock;
    v52[1] = 3221225472LL;
    v52[2] = sub_100283E5C;
    v52[3] = &unk_1003EFD90;
    objc_copyWeak(&v56, (id *)buf);
    objc_copyWeak(&v57, location);
    uint64_t v53 = v30;
    unsigned __int8 v46 = v44;
    __int16 v54 = v46;
    unint64_t v47 = v34;
    id v55 = v47;
    char v58 = v42;
    [v45 setCompletionBlock:v52];
    uint64_t v48 = a1[9];
    if (v48) {
      [*(id *)(v48 + 8) addOperation:v45];
    }

    objc_destroyWeak(&v57);
    objc_destroyWeak(&v56);
    objc_destroyWeak(location);
    objc_destroyWeak((id *)buf);

    id v3 = v49;
  }
}

void sub_100280AF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id location, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, id a37)
{
}

void sub_100280BAC(uint64_t a1)
{
}

void sub_100280D34(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setup following migration", buf, 2u);
  }

  unsigned int v4 = sub_1002735AC((uint64_t)&OBJC_CLASS___Restrictions);
  id v5 = objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext);
  uint64_t v6 = v5;
  if (v4)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100280EA0;
    v12[3] = &unk_1003EFB00;
    uint64_t v13 = (_TtC9appstored14UpdatesContext *)*(id *)(a1 + 32);
    LOBYTE(v11) = 0;
    CFPropertyListRef v7 = -[UpdatesContext initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:]( v6,  "initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:",  2LL,  0LL,  0LL,  v12,  0LL,  0LL,  v11,  0LL);
    uint64_t v8 = ASDLogHandleForCategory(40LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Checking for updates", buf, 2u);
    }

    sub_10027FAD0(*(void *)(a1 + 40), v7);
    id v10 = v13;
  }

  else
  {
    id v10 = -[UpdatesContext initWithReason:](v5, "initWithReason:", 2LL);
  }
}

void sub_100280EA0(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = ASDLogHandleForCategory(40LL);
  unsigned int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 134217984;
    id v6 = [v2 count];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Force update sync complete with %lu updates",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_100280FAC()
{
  id v0 = objc_alloc_init(&OBJC_CLASS____TtC9appstored14UpdatesContext);
  uint64_t v1 = ASDLogHandleForCategory(40LL);
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[UpdatesContext logKey](v0, "logKey"));
    int v4 = 138412290;
    int v5 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "[%@] Show Pending Updates Badge",  (uint8_t *)&v4,  0xCu);
  }
}

void sub_100281144(uint64_t a1)
{
  LOBYTE(v10) = 1;
  id v2 = -[UpdatesContext initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:]( objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext),  "initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:",  5LL,  *(void *)(a1 + 32),  0LL,  0LL,  0LL,  0LL,  v10,  0LL);
  uint64_t v3 = ASDLogHandleForCategory(40LL);
  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = (void *)objc_claimAutoreleasedReturnValue(-[UpdatesContext logKey](v2, "logKey"));
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "componentsJoinedByString:", @", "));
    *(_DWORD *)__int128 buf = 138412546;
    __int128 v17 = v5;
    __int16 v18 = 2112;
    id v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%@] Starting update all with order: %@",  buf,  0x16u);
  }

  CFPropertyListRef v7 = -[PerformUpdatesTask initWithContext:](objc_alloc(&OBJC_CLASS___PerformUpdatesTask), "initWithContext:", v2);
  -[PerformUpdatesTask setOrderedBundleIDs:](v7, "setOrderedBundleIDs:", *(void *)(a1 + 40));
  objc_initWeak((id *)buf, v7);
  objc_initWeak(&location, v2);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_100281390;
  v11[3] = &unk_1003EFB28;
  objc_copyWeak(&v13, (id *)buf);
  objc_copyWeak(&v14, &location);
  id v8 = *(id *)(a1 + 56);
  void v11[4] = *(void *)(a1 + 48);
  id v12 = v8;
  -[PerformUpdatesTask setCompletionBlock:](v7, "setCompletionBlock:", v11);
  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 72LL);
  if (v9) {
    [*(id *)(v9 + 8) addOperation:v7];
  }

  objc_destroyWeak(&v14);
  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
  objc_destroyWeak((id *)buf);
}

void sub_100281358( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_100281390(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  id v4 = objc_loadWeakRetained((id *)(a1 + 56));
  int v5 = *(void **)(a1 + 40);
  if (v5)
  {
    id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    __int128 v17 = _NSConcreteStackBlock;
    uint64_t v18 = 3221225472LL;
    id v19 = sub_1002815C4;
    double v20 = &unk_1003E9D48;
    id v22 = v5;
    id v21 = WeakRetained;
    dispatch_async(v6, &v17);
    CFPropertyListRef v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date", v17, v18, v19, v20));
    sub_1002FA380((uint64_t)&OBJC_CLASS___AppDefaultsManager, v7);
  }

  if (WeakRetained) {
    id Property = objc_getProperty(WeakRetained, v3, 32LL, 1);
  }
  else {
    id Property = 0LL;
  }
  id v9 = Property;

  uint64_t v10 = ASDLogHandleForCategory(40LL);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  id v12 = v11;
  if (v9)
  {
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v4 logKey]);
      if (WeakRetained) {
        id v15 = objc_getProperty(WeakRetained, v13, 32LL, 1);
      }
      else {
        id v15 = 0LL;
      }
      id v16 = v15;
      *(_DWORD *)__int128 buf = 138412546;
      BOOL v24 = v14;
      __int16 v25 = 2114;
      id v26 = v16;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[%@] Error performing update all task: %{public}@",  buf,  0x16u);

      goto LABEL_12;
    }
  }

  else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v4 logKey]);
    *(_DWORD *)__int128 buf = 138412290;
    BOOL v24 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[%@] Successfully finished update all with order",  buf,  0xCu);
LABEL_12:
  }
}

void sub_1002815C4(uint64_t a1)
{
  uint64_t v4 = a1 + 32;
  id v2 = *(_BYTE **)(a1 + 32);
  uint64_t v3 = *(void *)(v4 + 8);
  if (v2) {
    uint64_t v5 = v2[24] & 1;
  }
  else {
    uint64_t v5 = 0LL;
  }
  id v9 = (id)objc_claimAutoreleasedReturnValue([v2 jobResults]);
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, v6, 32LL, 1);
  }
  id v8 = Property;
  (*(void (**)(uint64_t, uint64_t, id, id))(v3 + 16))(v3, v5, v9, v8);
}

void sub_1002816B4(uint64_t a1)
{
  uint64_t v11 = 0LL;
  id v12 = &v11;
  uint64_t v13 = 0x2020000000LL;
  char v14 = 0;
  id v2 = -[LogKey initWithBase:]( objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey),  "initWithBase:",  @"Pending Update Verification");
  id v3 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1002817E8;
  v8[3] = &unk_1003EE318;
  uint64_t v5 = v2;
  id v9 = v5;
  uint64_t v10 = &v11;
  [v4 modifyUsingTransaction:v8];

  if (*((_BYTE *)v12 + 24))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    CFPropertyListRef v7 = objc_alloc_init(&OBJC_CLASS____TtC9appstored14UpdatesContext);
    sub_10027F794(v6, @"Updates modified", v7);
  }

  _Block_object_dispose(&v11, 8);
}

void sub_1002817D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1002817E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v5 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppUpdateEntity, v4, 0LL);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1002818C8;
  v12[3] = &unk_1003EFB50;
  id v13 = v3;
  id v7 = *(id *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v14 = v7;
  uint64_t v15 = v8;
  id v9 = v3;
  [v6 enumeratePersistentIDsUsingBlock:v12];
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);

  return v10;
}

void sub_1002818C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc(&OBJC_CLASS___AppUpdateEntity);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  uint64_t v6 = -[SQLiteEntity initWithPersistentID:onConnection:](v4, "initWithPersistentID:onConnection:", a2, v5);

  if (-[SQLiteEntity existsInDatabase](v6, "existsInDatabase")
    && sub_1002A1984(*(void *)(a1 + 32), v6, *(void **)(a1 + 40)))
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }
}

void sub_1002819DC(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored14UpdatesContext);
  uint64_t v3 = ASDLogHandleForCategory(40LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(-[UpdatesContext logKey](v2, "logKey"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "componentsJoinedByString:", @", "));
    *(_DWORD *)__int128 buf = 138412546;
    id v13 = v5;
    __int16 v14 = 2114;
    uint64_t v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%@] Cleaning up following removal of apps: [%{public}@]",  buf,  0x16u);
  }

  id v7 = objc_alloc_init(&OBJC_CLASS___CleanupManager);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100281B48;
  v10[3] = &unk_1003EFB78;
  uint64_t v8 = *(void **)(a1 + 32);
  void v10[4] = *(void *)(a1 + 40);
  uint64_t v11 = v2;
  id v9 = v2;
  sub_10024797C((uint64_t)v7, v8, v10);
}

void sub_100281B48(uint64_t a1, uint64_t a2)
{
  if (a2 >= 1)
  {
    uint64_t v14 = v2;
    uint64_t v15 = v3;
    uint64_t v6 = *(void **)(a1 + 40);
    id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100281BD8;
    block[3] = &unk_1003EC880;
    id v8 = v6;
    uint64_t v9 = *(void *)(a1 + 32);
    id v11 = v8;
    uint64_t v12 = v9;
    uint64_t v13 = a2;
    dispatch_async(v7, block);
  }

void sub_100281BD8(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    uint64_t v5 = *(void *)(a1 + 48);
    int v6 = 138412546;
    id v7 = v4;
    __int16 v8 = 2048;
    uint64_t v9 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[%@] Removed %ld uninstalled updates",  (uint8_t *)&v6,  0x16u);
  }

  sub_10027F794(*(void *)(a1 + 40), @"App removed", *(void **)(a1 + 32));
}

void sub_100281D34(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___CleanupManager);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100281DA8;
  v4[3] = &unk_1003EFBA0;
  uint64_t v3 = *(void **)(a1 + 32);
  v4[4] = *(void *)(a1 + 40);
  sub_100247AE0((uint64_t)v2, v3, v4);
}

void sub_100281DA8(uint64_t a1, uint64_t a2)
{
  if (a2 >= 1)
  {
    v6[6] = v2;
    void v6[7] = v3;
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(dispatch_queue_s **)(v4 + 32);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100281E08;
    v6[3] = &unk_1003E9E38;
    void v6[4] = v4;
    void v6[5] = a2;
    dispatch_async(v5, v6);
  }

void sub_100281E08(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored14UpdatesContext);
  uint64_t v3 = ASDLogHandleForCategory(40LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[UpdatesContext logKey](v2, "logKey"));
    uint64_t v6 = *(void *)(a1 + 40);
    int v7 = 138412546;
    __int16 v8 = v5;
    __int16 v9 = 2048;
    uint64_t v10 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%@]: Corrected %ld installed updates",  (uint8_t *)&v7,  0x16u);
  }

  sub_10027F794(*(void *)(a1 + 32), @"External App installed", v2);
}

void sub_100281F7C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    id v2 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10028201C;
    v4[3] = &unk_1003EFAB8;
    id v5 = *(id *)(a1 + 32);
    [v3 modifyUsingTransaction:v4];
  }

uint64_t sub_10028201C(uint64_t a1, void *a2)
{
  return sub_10029FDA4(a2, *(void *)(a1 + 32));
}

uint64_t sub_10028202C(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  unsigned __int8 v5 = sub_10029FA34(v3, Current - ASDSoftwareUpdateHistoryInterval);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v5;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
}

uint64_t sub_100282094(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL),  0LL);
}

void sub_1002820B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 64);
    v6[1] = 3221225472LL;
    v6[2] = sub_100282130;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v5 = v3;
    v6[0] = _NSConcreteStackBlock;
    id v7 = v3;
    sub_1002C11C4(v4, v6);

    id v3 = v5;
  }
}

void sub_100282130(uint64_t a1)
{
  if (!*(_BYTE *)(*(void *)(a1 + 32) + 48LL))
  {
    id v2 = objc_alloc_init(&OBJC_CLASS___FetchTVProviderAppsTask);
    uint64_t v4 = v2;
    if (v2) {
      objc_setProperty_nonatomic_copy(v2, v3, *(id *)(a1 + 40), 56LL);
    }
    id v52 = 0LL;
    unsigned int v5 = -[Task runTaskReturningError:](v4, "runTaskReturningError:", &v52);
    id v6 = v52;
    id v7 = v6;
    if (v5)
    {
      *(_BYTE *)(*(void *)(a1 + 32) + 48LL) = 1;
      id v44 = v6;
      id v45 = v4;
      uint64_t v46 = a1;
      if (v4) {
        __int16 v8 = *(void **)&v4->super._success;
      }
      else {
        __int16 v8 = 0LL;
      }
      id v9 = v8;
      unint64_t v47 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
      CFPropertyListRef v10 = sub_1002FA180((uint64_t)&OBJC_CLASS___AppDefaultsManager);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      __int128 v48 = 0u;
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      __int128 v51 = 0u;
      id v12 = v9;
      id v13 = [v12 countByEnumeratingWithState:&v48 objects:v57 count:16];
      if (v13)
      {
        id v14 = v13;
        uint64_t v15 = *(void *)v49;
        do
        {
          id v16 = 0LL;
          do
          {
            if (*(void *)v49 != v15) {
              objc_enumerationMutation(v12);
            }
            uint64_t v17 = *(void *)(*((void *)&v48 + 1) + 8LL * (void)v16);
            if (v17) {
              uint64_t v18 = *(void **)(v17 + 8);
            }
            else {
              uint64_t v18 = 0LL;
            }
            id v19 = v18;

            if (v19)
            {
              double v20 = objc_autoreleasePoolPush();
              id v21 = objc_alloc(&OBJC_CLASS___LSApplicationRecord);
              if (v17) {
                id v22 = *(void **)(v17 + 8);
              }
              else {
                id v22 = 0LL;
              }
              id v23 = v22;
              BOOL v24 = -[LSApplicationRecord initWithStoreItemIdentifier:error:]( v21,  "initWithStoreItemIdentifier:error:",  [v23 unsignedLongLongValue],  0);

              if (!v24
                && v11
                && (!v17 ? (__int16 v25 = 0LL) : (__int16 v25 = *(void **)(v17 + 8)),
                    id v26 = v25,
                    unsigned int v27 = [v11 containsObject:v26],
                    v26,
                    v27))
              {
                uint64_t v28 = ASDLogHandleForCategory(40LL);
                uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
                if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
                {
                  if (v17) {
                    uint64_t v30 = *(void **)(v17 + 8);
                  }
                  else {
                    uint64_t v30 = 0LL;
                  }
                  uint64_t v31 = *(void *)(v46 + 40);
                  id v32 = v30;
                  *(_DWORD *)__int128 buf = 138412546;
                  uint64_t v54 = v31;
                  __int16 v55 = 2114;
                  id v56 = v32;
                  _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[%@] Will not lookup previously installed provisioned app with itemID: %{public}@",  buf,  0x16u);
                }
              }

              else
              {
                -[NSMutableArray addObject:](v47, "addObject:", v17, v44);
              }

              objc_autoreleasePoolPop(v20);
            }

            id v16 = (char *)v16 + 1;
          }

          while (v14 != v16);
          id v33 = [v12 countByEnumeratingWithState:&v48 objects:v57 count:16];
          id v14 = v33;
        }

        while (v33);
      }

      id v34 = -[NSMutableArray copy](v47, "copy");
      uint64_t v35 = *(void *)(v46 + 32);
      uint64_t v36 = *(void **)(v35 + 80);
      *(void *)(v35 + 80) = v34;

      uint64_t v4 = v45;
      if (v45) {
        error = v45->super._error;
      }
      else {
        error = 0LL;
      }
      id v7 = v44;
      uint64_t v38 = error;
      id v39 = -[NSError copy](v38, "copy");
      uint64_t v40 = *(void *)(v46 + 32);
      unsigned int v41 = *(void **)(v40 + 56);
      *(void *)(v40 + 56) = v39;
    }

    else
    {
      uint64_t v42 = ASDLogHandleForCategory(40LL);
      id v12 = (id)objc_claimAutoreleasedReturnValue(v42);
      if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v54 = v43;
        __int16 v55 = 2114;
        id v56 = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  OS_LOG_TYPE_ERROR,  "[%@] Software update headboard completed with error: %{public}@",  buf,  0x16u);
      }
    }
  }

void sub_100282500(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = ASDLogHandleForCategory(40LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  __int16 v8 = v7;
  if (!a2)
  {
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
    int v10 = 138543618;
    id v11 = v5;
    __int16 v12 = 2114;
    id v13 = v9;
    _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to set updateAvailability to Available (%{public}@) for apps: %{public}@",  (uint8_t *)&v10,  0x16u);
    goto LABEL_4;
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
    int v10 = 138543362;
    id v11 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Set updateAvailability to Available for apps: %{public}@",  (uint8_t *)&v10,  0xCu);
LABEL_4:
  }

BOOL sub_100282638(id a1, AppUpdateMemoryEntity *a2)
{
  return !-[AppUpdateMemoryEntity isAppClip](a2, "isAppClip");
}

uint64_t sub_100282654(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = a2;
  id v6 = [v4 reason];
  id v7 = *(void **)(a1 + 48);
  __int16 v8 = *(void **)(a1 + 56);
  id v9 = (void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
  int v10 = (char *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL);
  uint64_t v11 = *(void *)(*(void *)(a1 + 88) + 8LL);
  id obj = *(id *)(v11 + 40);
  LOBYTE(v3) = sub_1002A0AA0(v5, v3, (uint64_t)v6, v7, v8, v9, v10, &obj);

  objc_storeStrong((id *)(v11 + 40), obj);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = (_BYTE)v3;
  uint64_t v12 = ASDLogHandleForCategory(40LL);
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
    int v16 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) humanReadableReason]);
    *(_DWORD *)__int128 buf = 138413058;
    id v21 = v14;
    __int16 v22 = 2048;
    uint64_t v23 = v15;
    __int16 v24 = 1024;
    int v25 = v16;
    __int16 v26 = 2114;
    unsigned int v27 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%@] Merged %ld app updates into database with result: %d reason: %{public}@",  buf,  0x26u);
  }

  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL);
}

void sub_1002827E4(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v5 = 138412290;
    id v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[%@] Cleared expired history",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_10028289C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___SQLiteQueryDescriptor);
  id v6 = -[SQLiteQueryDescriptor initWithEntityClass:]( v4,  "initWithEntityClass:",  objc_opt_class(&OBJC_CLASS___AppUpdateEntity, v5));
  id v33 = @"DESC";
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v33, 1LL));
  if (v6) {
    objc_setProperty_nonatomic_copy(v6, v7, v8, 40LL);
  }

  id v32 = @"release_date";
  int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v32, 1LL));
  if (v6) {
    objc_setProperty_nonatomic_copy(v6, v9, v10, 48LL);
  }

  if ([*(id *)(a1 + 32) isVPPLookup])
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_per_device",  &__kCFBooleanTrue));
    v31[0] = v11;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_b2b_custom_app",  &__kCFBooleanTrue));
    v31[1] = v12;
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v31, 2LL));
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v13));

    if (v6) {
      objc_setProperty_nonatomic_copy(v6, v15, v14, 56LL);
    }
  }

  else
  {
    id v16 = sub_100282C00(*(void *)(a1 + 40));
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v17));

    if (v6) {
      objc_setProperty_nonatomic_copy(v6, v19, v18, 56LL);
    }
  }

  double v20 = objc_alloc(&OBJC_CLASS___SQLiteQuery);
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);

  id v22 = -[SQLiteQuery initOnConnection:descriptor:](v20, "initOnConnection:descriptor:", v21, v6);
  v30[0] = @"device_families";
  v30[1] = @"install_date";
  void v30[2] = @"is_background";
  void v30[3] = @"is_b2b_custom_app";
  void v30[4] = @"is_per_device";
  void v30[5] = @"package_type";
  v30[6] = @"software_platform";
  v30[7] = @"store_item_data";
  v30[8] = @"timestamp";
  v30[9] = @"update_state";
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v30, 10LL));
  if ([*(id *)(a1 + 32) includeMetrics])
  {
    uint64_t v24 = objc_claimAutoreleasedReturnValue([v23 arrayByAddingObject:@"metrics_data"]);

    uint64_t v23 = (void *)v24;
  }

  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_100282D50;
  v27[3] = &unk_1003EE2F0;
  id v25 = *(id *)(a1 + 32);
  uint64_t v26 = *(void *)(a1 + 48);
  id v28 = v25;
  uint64_t v29 = v26;
  [v22 enumerateMemoryEntitiesWithProperties:v23 usingBlock:v27];
}

id sub_100282C00(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_per_device",  &__kCFBooleanFalse));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_b2b_custom_app",  &__kCFBooleanFalse,  v1));
  v8[1] = v2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_offloaded",  &__kCFBooleanFalse));
  void v8[2] = v3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_code_signature_update",  &__kCFBooleanFalse));
  v8[3] = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:value:comparisonType:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:value:comparisonType:",  @"update_state",  &off_10040CD90,  2LL));
  void v8[4] = v5;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v8, 5LL));

  return v6;
}

void sub_100282D50(uint64_t a1, void *a2)
{
  id v17 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v17 valueForProperty:@"store_item_data"]);
  id v4 = [[ASDSoftwareUpdate alloc] initWithUpdateDictionary:v3];
  if ([*(id *)(a1 + 32) includeMetrics])
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v17 valueForProperty:@"metrics_data"]);
    [v4 setMetrics:v5];
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v17 valueForProperty:@"update_state"]);
  else {
    id v7 = 0LL;
  }
  __int16 v8 = (void *)objc_claimAutoreleasedReturnValue([v17 valueForProperty:@"package_type"]);

  else {
    uint64_t v9 = -1LL;
  }
  int v10 = (void *)objc_claimAutoreleasedReturnValue([v17 valueForProperty:@"is_background"]);

  char v11 = objc_opt_respondsToSelector(v10, "BOOLValue");
  uint64_t v12 = v7;
  if ((v11 & 1) != 0)
  {
    unsigned int v13 = objc_msgSend(v10, "BOOLValue", v7);
    else {
      id v14 = 0LL;
    }
    if (v13) {
      uint64_t v12 = v14;
    }
    else {
      uint64_t v12 = v7;
    }
  }

  [v4 setUpdateState:v12];
  [v4 setRawUpdateState:v7];
  [v4 setPackageType:v9];
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v17 valueForProperty:@"install_date"]);
  [v4 setInstallDate:v15];

  id v16 = (void *)objc_claimAutoreleasedReturnValue([v17 valueForProperty:@"timestamp"]);
  [v4 setTimestamp:v16];

  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v4];
}

void sub_100282F58(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "headboardProvisionedApps", 0));
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)v6);
        __int16 v8 = *(void **)(a1 + 40);
        if (v7) {
          id v7 = (void *)v7[1];
        }
        uint64_t v9 = v7;
        [v8 addObject:v9];

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }
}

void sub_100283070(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
  if (!v6) {
    goto LABEL_5;
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ApplicationProxy proxyForBundleID:](&OBJC_CLASS___ApplicationProxy, "proxyForBundleID:", v6));
  if (([v7 isInstalled] & 1) != 0
    || (__int16 v8 = *(void **)(a1 + 32),
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v5 storeItemIdentifier])),  LOBYTE(v8) = objc_msgSend(v8, "containsObject:", v9),  v9,  (v8 & 1) != 0))
  {
    [v5 setAutoUpdateEnabled:*(unsigned __int8 *)(a1 + 72)];

LABEL_5:
    unint64_t v10 = (unint64_t)[v5 updateState];
    if (v10 <= 4 && ((1LL << v10) & 0x19) != 0) {
      uint64_t v11 = *(void *)(a1 + 56);
    }
    else {
      uint64_t v11 = *(void *)(a1 + 64);
    }
    ++*(void *)(*(void *)(v11 + 8) + 24LL);
    goto LABEL_10;
  }

  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) removeObjectAtIndex:a3];
  uint64_t v12 = ASDLogHandleForCategory(40LL);
  __int128 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    int v16 = 138412546;
    id v17 = v14;
    __int16 v18 = 2114;
    id v19 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%@] Removed non installed update with bundleID: %{public}@",  (uint8_t *)&v16,  0x16u);
  }

LABEL_10:
}

void sub_100283250(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
    int v8 = 138412802;
    uint64_t v9 = v4;
    __int16 v10 = 2048;
    uint64_t v11 = v5;
    __int16 v12 = 2048;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[%@] Returning %lu available and %lu recent update(s)",  (uint8_t *)&v8,  0x20u);
  }

  id v7 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) callbackHandler]);
  v7[2](v7, *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), 0LL);
}

void sub_100283364(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"update_state",  &off_10040DED0));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);

  id v5 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppUpdateEntity, v4, v9);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  id v7 = sub_1001BFBBC((uint64_t)&OBJC_CLASS___AppUpdateEntity);
  int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100283470;
  v10[3] = &unk_1003E98A8;
  id v11 = *(id *)(a1 + 32);
  [v6 enumerateMemoryEntitiesWithProperties:v8 usingBlock:v10];
}

void sub_100283470(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 itemID]);
  if (v3) {
    [*(id *)(a1 + 32) setObject:v4 forKey:v3];
  }
}

void sub_10028351C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ams_DSID"));

  if (+[AMSDevice deviceIsAppleTV](&OBJC_CLASS___AMSDevice, "deviceIsAppleTV")
    && sub_1002FA098((uint64_t)&OBJC_CLASS___AppDefaultsManager))
  {
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if (*(void *)(v4 + 16))
      {
        uint64_t v4 = *(void *)(a1 + 32);
      }

      objc_storeStrong((id *)(v4 + 16), v3);
      if (*(_BYTE *)(*(void *)(a1 + 32) + 48LL))
      {
        uint64_t v11 = ASDLogHandleForCategory(40LL);
        __int16 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Resetting hasLoadedTVProviderApps",  buf,  2u);
        }

        *(_BYTE *)(*(void *)(a1 + 32) + 48LL) = 0;
      }

      uint64_t v13 = ASDLogHandleForCategory(40LL);
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v17 = v3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Account changed to: %@", buf, 0xCu);
      }

      LOBYTE(v15) = 0;
      __int16 v10 = -[UpdatesContext initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:]( objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext),  "initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:",  6LL,  0LL,  0LL,  &stru_1003EFCF0,  0LL,  0LL,  v15,  0LL);
      sub_10027FAD0(*(void *)(a1 + 32), v10);
      goto LABEL_17;
    }

void sub_10028375C(id a1, NSArray *a2, NSError *a3)
{
  id v3 = a3;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory(40LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = 138543362;
      uint64_t v7 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Error performing update for account change: %{public}@",  (uint8_t *)&v6,  0xCu);
    }
  }
}

void sub_100283810(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", a1[6]));
  uint64_t v3 = a1[4];
  uint64_t v4 = objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey);
  id v28 = v2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v28, 1LL));
  int v6 = -[LogKey initWithBase:IDs:](v4, "initWithBase:IDs:", @"DSID-less apps check", v5);
  sub_1002820B0(v3, v6);

  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v7 = *(id *)(a1[4] + 80LL);
  id v8 = [v7 countByEnumeratingWithState:&v21 objects:v27 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v22;
    while (2)
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v7);
        }
        __int16 v12 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        if (v12) {
          __int16 v12 = (void *)v12[1];
        }
        uint64_t v13 = v12;
        id v14 = [v13 longLongValue];
        id v15 = (id)a1[6];

        if (v14 == v15)
        {
          uint64_t v16 = ASDLogHandleForCategory(40LL);
          id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          {
            double v20 = (void *)a1[6];
            *(_DWORD *)__int128 buf = 134217984;
            uint64_t v26 = v20;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "%lld is one of the headboard apps",  buf,  0xCu);
          }

          *(_BYTE *)(*(void *)(a1[5] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
          goto LABEL_15;
        }
      }

      id v9 = [v7 countByEnumeratingWithState:&v21 objects:v27 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }

void sub_100283AB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v19[0] = @"is_background";
  v19[1] = @"install_date";
  void v19[2] = @"store_item_data";
  v19[3] = @"update_state";
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v19, 4LL));
  CFPropertyListRef v5 = sub_1002FA158((uint64_t)&OBJC_CLASS___AppDefaultsManager);
  int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (!v6) {
    int v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  -75600.0));
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v8 = sub_10024CBB0((uint64_t)&OBJC_CLASS___AppUpdateMemoryEntity, v7, 0LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_100283C54;
  v14[3] = &unk_1003EFD40;
  id v15 = v6;
  id v16 = v3;
  id v10 = *(id *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 40);
  id v17 = v10;
  uint64_t v18 = v11;
  id v12 = v3;
  id v13 = v6;
  [v9 enumerateMemoryEntitiesWithProperties:v4 usingBlock:v14];
}

void sub_100283C54(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForProperty:@"update_state"]);
  id v5 = [v4 integerValue];

  int v6 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForProperty:@"install_date"]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForProperty:@"is_background"]);
  unsigned int v8 = [v7 BOOLValue];

  if (v6) {
    BOOL v9 = [*(id *)(a1 + 32) compare:v6] != (id)1;
  }
  else {
    BOOL v9 = 0;
  }
  if (v5 == (id)1) {
    unsigned int v10 = v8;
  }
  else {
    unsigned int v10 = 0;
  }
  if (v10 == 1)
  {
    uint64_t v11 = objc_alloc(&OBJC_CLASS___AppUpdateEntity);
    id v12 = [v3 databaseID];
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connection]);
    id v14 = -[SQLiteEntity initWithPersistentID:onConnection:](v11, "initWithPersistentID:onConnection:", v12, v13);

    if (v9 && sub_1002C0C60((uint64_t)&OBJC_CLASS___UpdateMetricsManager))
    {
      id v15 = sub_1001BFCE8(v14);
      id v16 = (id)objc_claimAutoreleasedReturnValue(v15);
      if (v16) {
        [*(id *)(a1 + 48) addObject:v16];
      }
      goto LABEL_14;
    }
  }

  else
  {
    uint64_t v17 = ASDLogHandleForCategory(40LL);
    id v14 = (UpdateItemMetrics *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = (void *)objc_opt_class(*(void *)(a1 + 56), v18);
      id v16 = v19;
      int v20 = 138543618;
      __int128 v21 = v19;
      __int16 v22 = 2048;
      id v23 = [v3 databaseID];
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v14,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Skipping manual update notification for %lld",  (uint8_t *)&v20,  0x16u);
LABEL_14:
    }
  }
}

void sub_100283E5C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v3 = objc_loadWeakRetained((id *)(a1 + 64));
  uint64_t v4 = (dispatch_queue_s *)WeakRetained[4];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100283F3C;
  v6[3] = &unk_1003EFD68;
  void v6[4] = WeakRetained;
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  id v9 = *(id *)(a1 + 48);
  id v10 = v3;
  char v11 = *(_BYTE *)(a1 + 72);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100283F3C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v67 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 48);
  id v3 = *(void **)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  if (v5) {
    id v6 = [*(id *)(v5 + 64) copy];
  }
  else {
    id v6 = 0LL;
  }
  int v63 = *(unsigned __int8 *)(a1 + 72);
  id v64 = v2;
  id v65 = v4;
  id v7 = v3;
  id v8 = v6;
  id v66 = v8;
  if (v67)
  {
    v90[0] = 0LL;
    v90[1] = v90;
    v90[2] = 0x2020000000LL;
    char v91 = 0;
    uint64_t v84 = 0LL;
    id v85 = &v84;
    uint64_t v86 = 0x3032000000LL;
    id v87 = sub_10027E338;
    id v88 = sub_10027E348;
    id v89 = 0LL;
    uint64_t v80 = 0LL;
    id v81 = &v80;
    uint64_t v82 = 0x2020000000LL;
    uint64_t v83 = 0LL;
    uint64_t v76 = 0LL;
    BOOL v77 = &v76;
    uint64_t v78 = 0x2020000000LL;
    char v79 = 0;
    id v9 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    __int128 v74 = 0u;
    __int128 v75 = 0u;
    __int128 v72 = 0u;
    __int128 v73 = 0u;
    id v10 = v66;
    id v11 = [v10 countByEnumeratingWithState:&v72 objects:v110 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v73;
      do
      {
        for (i = 0LL; i != v11; i = (char *)i + 1)
        {
          if (*(void *)v73 != v12) {
            objc_enumerationMutation(v10);
          }
          id v14 = *(void **)(*((void *)&v72 + 1) + 8LL * (void)i);
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 itemID]);
          id v16 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v15]);

          if (v16 || [v14 isAppClip])
          {
            uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v14 bundleID]);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v9, "setObject:forKeyedSubscript:", &off_10040CD30, v17);
          }
        }

        id v11 = [v10 countByEnumeratingWithState:&v72 objects:v110 count:16];
      }

      while (v11);
    }

    if (-[NSMutableDictionary count](v9, "count"))
    {
      uint64_t v18 = ASDLogHandleForCategory(40LL);
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v9, "allKeys"));
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Setting updateAvailability as available for apps: %{public}@",  (uint8_t *)&buf,  0xCu);
      }

      v70[0] = _NSConcreteStackBlock;
      v70[1] = 3221225472LL;
      v70[2] = sub_100282500;
      v70[3] = &unk_1003EA180;
      uint64_t v71 = v9;
      +[LSApplicationRecord setUpdateAvailabilityForApplicationsWithBundleIdentifiers:completionHandler:]( &OBJC_CLASS___LSApplicationRecord,  "setUpdateAvailabilityForApplicationsWithBundleIdentifiers:completionHandler:",  v71,  v70);
    }

    id v21 = sub_1002B87DC(v10, &stru_1003EFC08);
    __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);

    id v23 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    id v100 = sub_100282654;
    id v101 = &unk_1003EFC30;
    __int128 v106 = v90;
    id v62 = v22;
    id v102 = v62;
    id v25 = v64;
    id v103 = v25;
    id v104 = v65;
    id v105 = v7;
    __int128 v107 = &v80;
    __int128 v108 = &v76;
    __int128 v109 = &v84;
    [v24 modifyUsingTransaction:&buf];

    int v26 = *((unsigned __int8 *)v77 + 24);
    uint64_t v27 = v81[3];
    id v28 = v25;
    uint64_t v92 = 0LL;
    uint64_t v93 = (uint64_t)&v92;
    uint64_t v94 = 0x2020000000LL;
    id v95 = 0LL;
    id v29 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    *(void *)block = _NSConcreteStackBlock;
    *(void *)&block[8] = 3221225472LL;
    *(void *)&block[16] = sub_1002849CC;
    *(void *)&block[24] = &unk_1003EFDB8;
    *(void *)&__int128 v112 = v67;
    *((void *)&v112 + 1) = &v92;
    [v30 readUsingSession:block];

    uint64_t v31 = *(void *)(v93 + 24);
    _Block_object_dispose(&v92, 8);
    if (v31 < 1)
    {
      uint64_t v41 = ASDLogHandleForCategory(40LL);
      uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v28 logKey]);
        id v44 = (void *)objc_claimAutoreleasedReturnValue([v28 humanReadableReason]);
        *(_DWORD *)block = 138412546;
        *(void *)&void block[4] = v43;
        *(_WORD *)&block[12] = 2114;
        *(void *)&block[14] = v44;
        _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "[%@] No updates to perform after merge updates for reason: %{public}@",  block,  0x16u);
      }
    }

    else
    {
      BOOL v32 = sub_1002FA098((uint64_t)&OBJC_CLASS___AppDefaultsManager);
      unsigned int v33 = [v28 shouldPerformUpdates];
      uint64_t v34 = ASDLogHandleForCategory(40LL);
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
      if ((v33 & v32) == 1)
      {
        if (v36)
        {
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v28 logKey]);
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v28 humanReadableReason]);
          *(_DWORD *)block = 138412802;
          *(void *)&void block[4] = v37;
          *(_WORD *)&block[12] = 1024;
          *(_DWORD *)&block[14] = 1;
          *(_WORD *)&block[18] = 2114;
          *(void *)&block[20] = v38;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "[%@] Purchasing updates with auto updates enabled: %d reason: %{public}@",  block,  0x1Cu);
        }

        id v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        sub_1002FA330((uint64_t)&OBJC_CLASS___AppDefaultsManager, v39);

        uint64_t v35 = -[PerformUpdatesTask initWithContext:]( objc_alloc(&OBJC_CLASS___PerformUpdatesTask),  "initWithContext:",  v28);
        uint64_t v40 = *(void *)(v67 + 72);
        if (v40) {
          [*(id *)(v40 + 8) addOperation:v35];
        }
      }

      else if (v36)
      {
        id v45 = (void *)objc_claimAutoreleasedReturnValue([v28 logKey]);
        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v28 humanReadableReason]);
        *(_DWORD *)block = 138412802;
        *(void *)&void block[4] = v45;
        *(_WORD *)&block[12] = 1024;
        *(_DWORD *)&block[14] = v32;
        *(_WORD *)&block[18] = 2114;
        *(void *)&block[20] = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "[%@] Not purchasing updates with auto updates enabled: %d reason: %{public}@",  block,  0x1Cu);
      }

      uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue([v28 humanReadableReason]);
    }

    if (((v31 == v27) & ~((v26 | v63) != 0)) == 0)
    {
      uint64_t v47 = ASDLogHandleForCategory(40LL);
      __int128 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([v28 logKey]);
        __int128 v50 = (void *)objc_claimAutoreleasedReturnValue([v28 humanReadableReason]);
        *(_DWORD *)block = 138413058;
        *(void *)&void block[4] = v49;
        *(_WORD *)&block[12] = 2048;
        *(void *)&block[14] = v31;
        *(_WORD *)&block[22] = 2048;
        *(void *)&block[24] = v27;
        LOWORD(v112) = 2114;
        *(void *)((char *)&v112 + 2) = v50;
        _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "[%@] Notify updates changed with count: %ld mergeCount: %ld reason: %{public}@",  block,  0x2Au);
      }

      __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v28 humanReadableReason]);
      sub_10027F794(v67, v51, v28);
    }

    if ([v28 isBackgroundRequest])
    {
      id v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      sub_1002FA380((uint64_t)&OBJC_CLASS___AppDefaultsManager, v52);

      v68[0] = _NSConcreteStackBlock;
      v68[1] = 3221225472LL;
      v68[2] = sub_1002827E4;
      v68[3] = &unk_1003EA180;
      id v69 = v28;
      uint64_t v53 = v68;
      v97[0] = 0LL;
      v97[1] = v97;
      v97[2] = 0x2020000000LL;
      char v98 = 0;
      id v54 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
      __int16 v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
      uint64_t v92 = _NSConcreteStackBlock;
      uint64_t v93 = 3221225472LL;
      uint64_t v94 = (uint64_t)sub_10028202C;
      id v95 = &unk_1003EFBC8;
      id v96 = v97;
      [v55 modifyUsingTransaction:&v92];

      id v56 = *(dispatch_queue_s **)(v67 + 24);
      *(void *)block = _NSConcreteStackBlock;
      *(void *)&block[8] = 3221225472LL;
      *(void *)&block[16] = sub_100282094;
      *(void *)&block[24] = &unk_1003EE340;
      id v57 = v53;
      *(void *)&__int128 v112 = v57;
      *((void *)&v112 + 1) = v97;
      dispatch_async(v56, block);

      _Block_object_dispose(v97, 8);
    }

    if (os_variant_has_internal_content("com.apple.appstored"))
    {
      char v58 = (void *)objc_opt_new(&OBJC_CLASS___ASDUpdatePollMetrics);
      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v58 setPollTime:v59];

      if ([v28 reason] == (id)1)
      {
        [v58 setReason:@"Auto"];
      }

      else
      {
        id v60 = (void *)objc_claimAutoreleasedReturnValue([v28 humanReadableReason]);
        [v58 setReason:v60];
      }

      [v58 setBundleIDs:v85[5]];
      id v61 = (void *)objc_opt_new(&OBJC_CLASS___ASDUpdateMetricsStore);
      [v61 addPoll:v58];
    }

    sub_10027EEB0(v67, v28);

    _Block_object_dispose(&v76, 8);
    _Block_object_dispose(&v80, 8);
    _Block_object_dispose(&v84, 8);

    _Block_object_dispose(v90, 8);
    id v8 = v62;
  }
}

void sub_100284944( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, char a36, uint64_t a37, uint64_t a38, uint64_t a39, char a40, uint64_t a41, uint64_t a42, uint64_t a43, char a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, char a50)
{
}

void sub_1002849CC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  if (v3)
  {
    id v5 = sub_100282C00((uint64_t)v3);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"update_state",  &off_10040DEE8));
    *(void *)id v16 = v7;
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v16, 1LL));
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 arrayByAddingObjectsFromArray:v8]);

    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v9));
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 connection]);

  id v11 = sub_10024C290((uint64_t)&OBJC_CLASS___AppUpdateEntity, @"ROWID", v3, v10);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  uint64_t v13 = ASDLogHandleForCategory(40LL);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    uint64_t v15 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
    *(_DWORD *)id v16 = 134217984;
    *(void *)&void v16[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Current update count is: %ld", v16, 0xCu);
  }
}

void sub_100284BA8(uint64_t a1)
{
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 80LL);
  id v3 = [v2 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v22;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v22 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v21 + 1) + 8LL * (void)v6);
        if (!v7)
        {
          id v8 = 0LL;
LABEL_14:

          id v16 = objc_alloc(&OBJC_CLASS___UpdatableApp);
          if (v7)
          {
LABEL_15:
            id v17 = *(id *)(v7 + 8);
            uint64_t v18 = *(void **)(v7 + 16);
          }

          else
          {
            id v17 = 0LL;
            uint64_t v18 = 0LL;
          }

          id v19 = v18;
          uint64_t v13 = sub_100270D60((id *)&v16->super.isa, v17, v19);

          [*(id *)(a1 + 56) addObject:v13];
          goto LABEL_17;
        }

        id v8 = *(id *)(v7 + 8);
        if (!v8) {
          goto LABEL_14;
        }
        id v9 = *(void **)(a1 + 40);
        if (!v9) {
          goto LABEL_14;
        }
        id v10 = *(id *)(v7 + 8);
        unsigned __int8 v11 = [v9 containsObject:v10];

        if ((v11 & 1) == 0)
        {
          id v16 = objc_alloc(&OBJC_CLASS___UpdatableApp);
          goto LABEL_15;
        }

        uint64_t v12 = ASDLogHandleForCategory(40LL);
        uint64_t v13 = (id *)objc_claimAutoreleasedReturnValue(v12);
        if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_DEBUG))
        {
          id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) logKey]);
          id v15 = *(id *)(v7 + 8);
          *(_DWORD *)__int128 buf = 138412546;
          int v26 = v14;
          __int16 v27 = 2114;
          id v28 = v15;
          _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  OS_LOG_TYPE_DEBUG,  "[%@] app with item ID %{public}@ is not a candidate as it has been previously installed",  buf,  0x16u);
        }

void sub_100284DF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 88);
  if (v5 < 1 || (id)v5 == [v3 storeItemID])
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    unsigned __int8 v7 = [v4 validateEligibilityForUpdatesWithLogKey:v6];

    if ((v7 & 1) == 0)
    {
      uint64_t v14 = ASDLogHandleForCategory(40LL);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleID]);
        *(_DWORD *)__int16 v55 = 138412546;
        *(void *)&v55[4] = v15;
        *(_WORD *)&v55[12] = 2114;
        *(void *)&v55[14] = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[%@] Skipping ineligible app: %{public}@",  v55,  0x16u);
      }

      goto LABEL_38;
    }

    id v8 = *(void **)(a1 + 40);
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v4 storeItemID]));
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([v8 objectForKey:v9]);

    unsigned __int8 v11 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s evid](v10, "evid"));
    uint64_t v12 = (uint64_t)[v11 longLongValue];

    if (!*(_BYTE *)(a1 + 96))
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v4 storeMetadata]);
      if ([v13 deviceBasedVPP])
      {
      }

      else
      {
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v4 storeMetadata]);
        unsigned __int8 v18 = [v17 isB2BCustomApp];

        if ((v18 & 1) == 0)
        {
          if (!v10) {
            goto LABEL_38;
          }
          uint64_t v48 = ASDLogHandleForCategory(40LL);
          __int128 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
            __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleID]);
            *(_DWORD *)__int16 v55 = 138412546;
            *(void *)&v55[4] = v50;
            *(_WORD *)&v55[12] = 2114;
            *(void *)&v55[14] = v51;
            _os_log_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_DEFAULT,  "[%@] ├ DRP { %{public}@ }",  v55,  0x16u);
          }

          id v52 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
          id v47 = (id)objc_claimAutoreleasedReturnValue(v52);
          uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleID]);
          id v54 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
          sub_1002386EC(v47, v53, v54);

          goto LABEL_37;
        }
      }
    }

    if (v12)
    {
      if (!*(_BYTE *)(a1 + 97))
      {
        if (*(void *)(a1 + 48)
          && (id v19 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s valueForProperty:](v10, "valueForProperty:", @"timestamp")),
              [v19 timeIntervalSinceNow],
              double v21 = v20,
              v19,
              v21 < -1209600.0))
        {
          [*(id *)(a1 + 56) addObject:v10];
          uint64_t v12 = (uint64_t)[v4 storeExternalVersionID];
          uint64_t v22 = ASDLogHandleForCategory(40LL);
          __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
            *(_DWORD *)__int16 v55 = 138412546;
            *(void *)&v55[4] = v24;
            *(_WORD *)&v55[12] = 2114;
            *(void *)&v55[14] = v10;
            id v25 = "[%@] ├ REL %{public}@";
LABEL_24:
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v25, v55, 0x16u);
          }
        }

        else
        {
          uint64_t v33 = ASDLogHandleForCategory(40LL);
          __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
            *(_DWORD *)__int16 v55 = 138412546;
            *(void *)&v55[4] = v24;
            *(_WORD *)&v55[12] = 2114;
            *(void *)&v55[14] = v10;
            id v25 = "[%@] ├ PRE %{public}@";
            goto LABEL_24;
          }
        }

        goto LABEL_26;
      }
    }

    else if (!*(_BYTE *)(a1 + 97))
    {
      uint64_t v30 = ASDLogHandleForCategory(40LL);
      __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
        BOOL v32 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleID]);
        *(_DWORD *)__int16 v55 = 138412802;
        *(void *)&v55[4] = v31;
        *(_WORD *)&v55[12] = 2114;
        *(void *)&v55[14] = v32;
        *(_WORD *)&v55[22] = 2048;
        id v56 = [v4 storeExternalVersionID];
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "[%@] ├ NEW { %{public}@ evid: %lld }",  v55,  0x20u);
      }

      goto LABEL_19;
    }

    uint64_t v26 = ASDLogHandleForCategory(40LL);
    __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
      id v29 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleID]);
      *(_DWORD *)__int16 v55 = 138413058;
      *(void *)&v55[4] = v28;
      *(_WORD *)&v55[12] = 2114;
      *(void *)&v55[14] = v29;
      *(_WORD *)&v55[22] = 2048;
      id v56 = [v4 storeExternalVersionID];
      __int16 v57 = 2048;
      uint64_t v58 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "[%@] ├ FRC { %{public}@ evid: %lld currentEvid: %lld }",  v55,  0x2Au);
    }

BOOL sub_100285510(uint64_t a1, void *a2)
{
  return sub_10029FAF4(a2, *(void **)(a1 + 32));
}

void sub_100285520(id a1)
{
  id v1 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
  id v2 = (id)objc_claimAutoreleasedReturnValue(v1);
  [v2 modifyUsingTransaction:&stru_1003EFE40];
}

BOOL sub_10028555C(id a1, AppUpdatesDatabaseTransaction *a2)
{
  id v2 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"update_state",  &off_10040DF00));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[AppUpdatesDatabaseSession connection](v2, "connection"));
  id v5 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppUpdateEntity, v4, v3);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_100285640;
  void v9[3] = &unk_1003EB4C8;
  id v10 = v2;
  unsigned __int8 v7 = v2;
  [v6 enumeratePersistentIDsUsingBlock:v9];

  return 1;
}

void sub_100285640(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___AppUpdateEntity);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  id v6 = -[SQLiteEntity initWithPersistentID:onConnection:](v4, "initWithPersistentID:onConnection:", a2, v5);

  -[SQLiteEntity setValue:forProperty:](v6, "setValue:forProperty:", &off_10040CD48, @"update_state");
  id v7 = sub_1001E26D0(v6, (uint64_t)@"bundle_id");
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = ASDLogHandleForCategory(40LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = 138412290;
    uint64_t v12 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Resetting update state to available on startup: %@",  (uint8_t *)&v11,  0xCu);
  }
}

id *sub_1002857EC(id *a1, void *a2, void *a3, void *a4)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)&OBJC_CLASS___PurchaseHistoryItemsRequest;
    int v11 = (id *)objc_msgSendSuper2(&v13, "init");
    a1 = v11;
    if (v11)
    {
      objc_storeStrong(v11 + 1, a2);
      objc_storeStrong(a1 + 2, a4);
      objc_storeWeak(a1 + 5, v9);
    }
  }

  return a1;
}

void sub_1002858A0(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = a1[2];
    if (v4 && *(void *)(v4 + 8))
    {
      uint64_t v5 = a1[1];
      id v48 = 0LL;
      id v6 = sub_100255E30(v5, (uint64_t)@"purchase-daap/base-url", &v48);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      id v8 = v48;
      id v9 = v8;
      if (v7)
      {
        uint64_t v10 = a1[1];
        id v47 = v9;
        id v11 = sub_10025621C(v10, (uint64_t)@"purchase-daap/database-id", &off_10040CDA8, &v47);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        id v13 = v47;

        if (v12)
        {
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"databases/%ld/items",  [v12 integerValue]));
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v7 URLByAppendingPathComponent:v14]);

          if (v15)
          {
            id v16 = 0LL;
            goto LABEL_14;
          }
        }

        else
        {
        }
      }

      else
      {
        id v13 = v8;
      }

      uint64_t v19 = ASDLogHandleForCategory(14LL);
      double v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v43 = (void *)objc_opt_class(a1, v21);
        *(_DWORD *)__int128 buf = 138412546;
        __int128 v50 = v43;
        __int16 v51 = 2114;
        id v52 = v13;
        id v44 = v43;
        _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "[%@]: Failed to construct request URL error: %{public}@",  buf,  0x16u);
      }

      id v22 = sub_1001DD5A0(2LL, (uint64_t)v13);
      id v16 = (id)objc_claimAutoreleasedReturnValue(v22);
      id v15 = 0LL;
LABEL_14:

      id v23 = v16;
      if (!v15)
      {
        id v42 = sub_1001DD5A0(2LL, (uint64_t)v23);
        uint64_t v31 = (id *)objc_claimAutoreleasedReturnValue(v42);
        v3[2](v3, 0LL, v31);
LABEL_32:

        goto LABEL_33;
      }

      id v25 = objc_alloc(&OBJC_CLASS___PurchaseHistoryItemsDAAPRequestEncoder);
      id Property = (id)a1[2];
      if (Property) {
        id Property = objc_getProperty(Property, v24, 32LL, 1);
      }
      id v28 = Property;
      id v29 = (id)a1[2];
      if (v29) {
        id v29 = objc_getProperty(v29, v27, 40LL, 1);
      }
      id v30 = v29;
      uint64_t v31 = sub_1001C904C((id *)&v25->super.isa, v28, v30);

      uint64_t v33 = sub_1002AF430((id *)objc_alloc(&OBJC_CLASS___DAAPURLRequest), v31, v15);
      id v34 = (id)a1[2];
      if (v34) {
        id v34 = objc_getProperty(v34, v32, 16LL, 1);
      }
      id v36 = v34;
      if (v33) {
        objc_setProperty_atomic(v33, v35, v36, 24LL);
      }

      uint64_t v38 = (void *)a1[2];
      if (v38)
      {
        id v39 = (void *)v38[1];
        if (!v33)
        {
LABEL_26:
          if (v38) {
            uint64_t v38 = objc_getProperty(v38, v37, 24LL, 1);
          }
          uint64_t v41 = v38;
          if (v33) {
            objc_setProperty_atomic(v33, v40, v41, 40LL);
          }

          v45[0] = _NSConcreteStackBlock;
          v45[1] = 3221225472LL;
          v45[2] = sub_100285C5C;
          v45[3] = &unk_1003EB8D0;
          v45[4] = a1;
          uint64_t v46 = v3;
          sub_1002AF7B0((uint64_t)v33, a1, v45);

          goto LABEL_32;
        }
      }

      else
      {
        id v39 = 0LL;
        if (!v33) {
          goto LABEL_26;
        }
      }

      void v33[4] = v39;
      uint64_t v38 = (void *)a1[2];
      goto LABEL_26;
    }

    id v17 = sub_1001DD5A0(4LL, 0LL);
    unsigned __int8 v18 = (id *)objc_claimAutoreleasedReturnValue(v17);
    v3[2](v3, 0LL, v18);
  }

void sub_100285C5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5)
  {
    if (*(_BYTE *)(*(void *)(a1 + 32) + 36LL)
      || [v6 code] != (id)301
      || (uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v7 userInfo]),
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKey:AMSErrorUserInfoKeyStatusCode]),
          id v12 = [v11 integerValue],
          v11,
          v10,
          v12 != (id)401))
    {
      uint64_t v20 = *(void *)(a1 + 40);
      id v21 = sub_1001DD5A0(0LL, (uint64_t)v7);
      id v8 = (id)objc_claimAutoreleasedReturnValue(v21);
      (*(void (**)(uint64_t, void, id))(v20 + 16))(v20, 0LL, v8);
      goto LABEL_17;
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 36LL) = 1;
    id v8 = objc_alloc_init(&OBJC_CLASS___AMSAuthenticateOptions);
    [v8 setAuthenticationType:0];
    uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 16LL);
    if (!v13 || *(void *)(v13 + 48) != 1LL) {
      [v8 setAuthenticationType:1];
    }
    id v15 = objc_alloc(&OBJC_CLASS___AMSAuthenticateRequest);
    id Property = *(id *)(*(void *)(a1 + 32) + 16LL);
    if (Property) {
      id Property = objc_getProperty(Property, v14, 16LL, 1);
    }
    id v17 = Property;
    unsigned __int8 v18 = -[AMSAuthenticateRequest initWithAccount:options:](v15, "initWithAccount:options:", v17, v8);

    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    void v23[2] = sub_100285E84;
    v23[3] = &unk_1003EBD80;
    uint64_t v19 = *(void **)(a1 + 40);
    void v23[4] = *(void *)(a1 + 32);
    id v24 = v19;
    sub_100278198((uint64_t)&OBJC_CLASS___InteractiveRequestPresenter, v18, v23);

    goto LABEL_16;
  }

  id v8 = (id)objc_claimAutoreleasedReturnValue([v5 data]);
  uint64_t v9 = *(void *)(a1 + 40);
  if (!v8)
  {
    id v22 = sub_1001DD5A0(0LL, 0LL);
    unsigned __int8 v18 = (AMSAuthenticateRequest *)objc_claimAutoreleasedReturnValue(v22);
    (*(void (**)(uint64_t, void, AMSAuthenticateRequest *))(v9 + 16))(v9, 0LL, v18);
LABEL_16:

    goto LABEL_17;
  }

  (*(void (**)(uint64_t, id, void))(v9 + 16))(v9, v8, 0LL);
LABEL_17:
}

void sub_100285E84(uint64_t a1, void *a2, void *a3)
{
  id v26 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a2 account]);
  id v6 = v5;
  if (v5 && (id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_DSID")), v7, v7))
  {
    id Property = *(id *)(*(void *)(a1 + 32) + 16LL);
    if (Property) {
      id Property = objc_getProperty(Property, v8, 32LL, 1);
    }
    id v11 = Property;
    id v12 = *(id *)(*(void *)(a1 + 32) + 16LL);
    if (v12) {
      id v12 = objc_getProperty(v12, v10, 40LL, 1);
    }
    id v14 = v12;
    id v15 = *(void **)(*(void *)(a1 + 32) + 16LL);
    if (v15)
    {
      int64_t v16 = v15[1];
      id v15 = objc_getProperty(v15, v13, 24LL, 1);
    }

    else
    {
      int64_t v16 = 0LL;
    }

    id v17 = v15;
    uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 16LL);
    if (v18) {
      unint64_t v19 = *(void *)(v18 + 48);
    }
    else {
      unint64_t v19 = 0LL;
    }
    uint64_t v20 = sub_1001D2F38((uint64_t)&OBJC_CLASS___PurchaseHistoryItemsRequestContext, v11, v14, v16, v6, v17, v19);

    uint64_t v21 = *(void *)(a1 + 32);
    id v22 = *(void **)(v21 + 16);
    *(void *)(v21 + 16) = v20;
    id v23 = v20;

    sub_1002858A0(*(void *)(a1 + 32), *(void *)(a1 + 40));
  }

  else
  {
    uint64_t v24 = *(void *)(a1 + 40);
    id v25 = sub_1001DD5A0(4LL, (uint64_t)v26);
    id v23 = (PurchaseHistoryItemsRequestContext *)objc_claimAutoreleasedReturnValue(v25);
    (*(void (**)(uint64_t, void, PurchaseHistoryItemsRequestContext *))(v24 + 16))(v24, 0LL, v23);
  }
}

void sub_100286358(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(8LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(*(void *)(a1 + 32) + 16LL);
      if (Property) {
        id Property = objc_getProperty(Property, v9, 16LL, 1);
      }
      id v17 = Property;
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 hashedDescription]);
      int v19 = 138543618;
      uint64_t v20 = v18;
      __int16 v21 = 2112;
      id v22 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Errored out for auth challenge to:%{public}@ with error:%@",  (uint8_t *)&v19,  0x16u);
    }
  }

  uint64_t v10 = ASDLogHandleForCategory(8LL);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    id v13 = *(id *)(*(void *)(a1 + 32) + 16LL);
    if (v13) {
      id v13 = objc_getProperty(v13, v12, 16LL, 1);
    }
    id v14 = v13;
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 hashedDescription]);
    int v19 = 138543362;
    uint64_t v20 = v15;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEBUG,  "Received response to authentication challenge for %{public}@",  (uint8_t *)&v19,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100286654(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(8LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138543618;
      uint64_t v11 = v9;
      __int16 v12 = 2114;
      id v13 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%{public}@] Error in dialog task: %{public}@",  (uint8_t *)&v10,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void *sub_100286794(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  v8.receiver = a1;
  v8.super_class = (Class)&OBJC_CLASS___DiagnosticMessage;
  id v3 = objc_msgSendSuper2(&v8, "init");
  uint64_t v4 = v3;
  if (v3)
  {
    v3[2] = a2;
    id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v6 = (void *)v4[1];
    v4[1] = v5;
  }

  return v4;
}

id *sub_100286808(id *result, uint64_t a2, uint64_t a3)
{
  if (result) {
    return (id *)[result[1] setObject:a2 forKeyedSubscript:a3];
  }
  return result;
}

id *sub_100286A08(id *a1, void *a2, char a3)
{
  id v5 = a2;
  if (!a1) {
    goto LABEL_49;
  }
  v59.receiver = a1;
  v59.super_class = (Class)&OBJC_CLASS___FamilyInfoLookupResult;
  id v6 = (id *)objc_msgSendSuper2(&v59, "init");
  a1 = v6;
  if (!v6) {
    goto LABEL_49;
  }
  *((_BYTE *)v6 + _Block_object_dispose(va, 8) = a3;
  id v55 = v5;
  id v7 = v5;
  objc_opt_self(&OBJC_CLASS___FamilyInfoLookupResult);
  objc_super v8 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_activeiCloudAccount"));
  int v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ams_DSID"));

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "ams_activeiTunesAccount"));
  id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ams_DSID"));

  uint64_t v53 = v7;
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v7 valueForKeyPath:@"family.members"]);
  uint64_t v16 = objc_opt_class(&OBJC_CLASS___NSArray, v15);
  if ((objc_opt_isKindOfClass(v14, v16) & 1) != 0) {
    id v17 = v14;
  }
  else {
    id v17 = 0LL;
  }
  id v54 = a1;

  uint64_t v58 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v64 = 0u;
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v67 = 0u;
  id v18 = v17;
  id v19 = [v18 countByEnumeratingWithState:&v64 objects:v69 count:16];
  __int16 v57 = v18;
  if (!v19)
  {

    goto LABEL_28;
  }

  id v21 = v19;
  id v56 = 0LL;
  uint64_t v22 = *(void *)v65;
  id v23 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
  p_info = &OBJC_METACLASS___SQLiteKeychainHelper.info;
  do
  {
    for (i = 0LL; i != v21; i = (char *)i + 1)
    {
      if (*(void *)v65 != v22) {
        objc_enumerationMutation(v18);
      }
      id v26 = *(void **)(*((void *)&v64 + 1) + 8LL * (void)i);
      uint64_t v27 = objc_opt_class(v23[477], v20);
      if ((objc_opt_isKindOfClass(v26, v27) & 1) != 0)
      {
        id v28 = (id *)sub_1001F4F58(objc_alloc((Class)p_info + 196), v26);
        if (v28)
        {
          -[NSMutableArray addObject:](v58, "addObject:", v28);
          if (v10)
          {
            id v29 = (id *)v28[3];
            id v30 = v10;
            uint64_t v31 = v29;
            BOOL v32 = v30;
            else {
              BOOL v33 = 1;
            }
            if (v33)
            {
LABEL_20:

              int v10 = v32;
              id v18 = v57;
            }

            else
            {
              id v34 = p_info;
              id v35 = v28[5];
              unsigned int v36 = [v35 isEqualToNumber:v13];

              if (v36)
              {
                uint64_t v31 = v56;
                id v56 = v28;
                p_info = v34;
                id v23 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
                goto LABEL_20;
              }

              int v10 = v32;
              id v18 = v57;
              p_info = v34;
              id v23 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
            }
          }
        }

        continue;
      }
    }

    id v21 = [v18 countByEnumeratingWithState:&v64 objects:v69 count:16];
  }

  while (v21);

  uint64_t v37 = v56;
  if (v56) {
    goto LABEL_43;
  }
LABEL_28:
  __int128 v62 = 0u;
  __int128 v63 = 0u;
  __int128 v60 = 0u;
  __int128 v61 = 0u;
  uint64_t v38 = v58;
  id v39 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v38,  "countByEnumeratingWithState:objects:count:",  &v60,  v68,  16LL);
  if (v39)
  {
    id v40 = v39;
    uint64_t v41 = 0LL;
    uint64_t v42 = *(void *)v61;
    do
    {
      uint64_t v43 = 0LL;
      do
      {
        if (*(void *)v61 != v42) {
          objc_enumerationMutation(v38);
        }
        if (v13)
        {
          id v44 = *(void **)(*((void *)&v60 + 1) + 8LL * (void)v43);
          id v45 = v44 ? (void *)v44[5] : 0LL;
          id v46 = v45;
          unsigned int v47 = [v46 isEqualToNumber:v13];

          if (v47)
          {
            id v48 = v44;

            uint64_t v41 = v48;
          }
        }

        uint64_t v43 = (char *)v43 + 1;
      }

      while (v40 != v43);
      id v49 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v38,  "countByEnumeratingWithState:objects:count:",  &v60,  v68,  16LL);
      id v40 = v49;
    }

    while (v49);

    uint64_t v37 = (id *)v41;
    if (v41) {
LABEL_43:
    }
      *((_BYTE *)v37 + _Block_object_dispose(va, 8) = 1;
  }

  else
  {

    uint64_t v37 = 0LL;
  }

  __int128 v50 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray sortedArrayUsingComparator:](v58, "sortedArrayUsingComparator:", &stru_1003EFEA0));

  if (v50) {
    __int16 v51 = v50;
  }
  else {
    __int16 v51 = &__NSArray0__struct;
  }
  a1 = v54;
  objc_storeStrong(v54 + 2, v51);

  id v5 = v55;
LABEL_49:

  return a1;
}

id *sub_100286E50(id *a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v3 = v1[2];
    id v4 = [v3 countByEnumeratingWithState:&v12 objects:v20 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v13;
      do
      {
        id v7 = 0LL;
        do
        {
          if (*(void *)v13 != v6) {
            objc_enumerationMutation(v3);
          }
          objc_super v8 = sub_1001F5308(*(void **)(*((void *)&v12 + 1) + 8LL * (void)v7));
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
          if (v9) {
            -[NSMutableArray addObject:](v2, "addObject:", v9, (void)v12);
          }

          id v7 = (char *)v7 + 1;
        }

        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v12 objects:v20 count:16];
      }

      while (v5);
    }

    id v17 = v2;
    id v18 = @"family";
    uint64_t v16 = @"members";
    int v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
    id v19 = v10;
    id v1 = (id *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
  }

  return v1;
}

int64_t sub_100287020(id a1, FamilyMember *a2, FamilyMember *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (v4)
  {
    uint64_t v6 = v4->_firstName;
    if (v6)
    {

LABEL_8:
      if (v4->_currentSignedInUser)
      {
LABEL_9:
        int64_t v8 = -1LL;
        goto LABEL_10;
      }

      goto LABEL_11;
    }
  }

  if (v5) {
    firstName = v5->_firstName;
  }
  else {
    firstName = 0LL;
  }
  int64_t v8 = firstName;

  if (!v8) {
    goto LABEL_10;
  }
  if (v4) {
    goto LABEL_8;
  }
LABEL_11:
  if (v5) {
    int v10 = v5->_firstName;
  }
  else {
    int v10 = 0LL;
  }
  uint64_t v11 = v10;

  if (!v11) {
    goto LABEL_9;
  }
  if (v5 && v5->_currentSignedInUser
    || (!v4 ? (v12 = 0LL) : (v12 = v4->_firstName), __int128 v13 = v12, v13, !v13))
  {
    int64_t v8 = 1LL;
  }

  else
  {
    if (v4) {
      __int128 v14 = v4->_firstName;
    }
    else {
      __int128 v14 = 0LL;
    }
    __int128 v15 = v14;
    if (v5) {
      uint64_t v16 = v5->_firstName;
    }
    else {
      uint64_t v16 = 0LL;
    }
    id v17 = v16;
    int64_t v8 = -[NSString localizedCaseInsensitiveCompare:](v15, "localizedCaseInsensitiveCompare:", v17);
  }

id sub_10028715C(uint64_t a1)
{
  if (qword_1004624F8 != -1) {
    dispatch_once(&qword_1004624F8, &stru_1003EFEC0);
  }
  return (id)qword_1004624F0;
}

void sub_1002871A0(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___CellularMonitor);
  id v2 = (void *)qword_1004624F0;
  qword_1004624F0 = (uint64_t)v1;
}

void sub_100287310( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_100287330(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = sub_10021D7D0((uint64_t)&OBJC_CLASS___NetworkEmulation);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  sub_100287384((uint64_t)WeakRetained, v2);
}

void sub_100287384(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002874A4;
    v6[3] = &unk_1003E9DC0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

id sub_100287440(id result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue(+[ASDCellularIdentity nullIdentity](&OBJC_CLASS___ASDCellularIdentity, "nullIdentity"));
    id v2 = [v1 isRoaming];

    return v2;
  }

  return result;
}

id sub_100287480(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[ASDCellularIdentity nullIdentity](&OBJC_CLASS___ASDCellularIdentity, "nullIdentity"));
  }
  return a1;
}

void sub_1002874A4(uint64_t a1)
{
  if (*(void *)(a1 + 32) || *(void *)(*(void *)(a1 + 40) + 24LL))
  {
    if (os_variant_has_internal_content("com.apple.appstored"))
    {
      uint64_t v2 = *(void *)(a1 + 40);
      id v3 = *(id *)(a1 + 32);
      id v4 = *(void **)(v2 + 24);
      *(void *)(v2 + 24) = v3;
    }

    else
    {
      uint64_t v5 = *(void *)(a1 + 40);
      id v4 = *(void **)(v5 + 24);
      *(void *)(v5 + 24) = 0LL;
    }

    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 24LL);
    uint64_t v7 = ASDLogHandleForCategory(14LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (!v9) {
        goto LABEL_12;
      }
      uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 24LL);
      LODWORD(v17) = 138543362;
      *(void *)((char *)&v17 + 4) = v10;
      uint64_t v11 = "[Cellular] Applying emulated network configuration: %{public}@";
      __int128 v12 = v8;
      uint32_t v13 = 12;
    }

    else
    {
      if (!v9) {
        goto LABEL_12;
      }
      LOWORD(v17) = 0;
      uint64_t v11 = "[Cellular] Clearing emulated network configuration";
      __int128 v12 = v8;
      uint32_t v13 = 2;
    }

    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v17, v13);
LABEL_12:

    uint64_t v14 = *(void *)(a1 + 40);
    if (v14)
    {
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(17LL, 0LL);
      uint64_t v16 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      *(void *)&__int128 v17 = _NSConcreteStackBlock;
      *((void *)&v17 + 1) = 3221225472LL;
      id v18 = sub_100287630;
      id v19 = &unk_1003E9880;
      uint64_t v20 = v14;
      dispatch_async(v16, &v17);
    }
  }

void sub_100287630(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v2 postNotificationName:@"CellularStateDidChangeNotification" object:*(void *)(a1 + 32)];
}

void sub_100287ED0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 56), a2);
  }
}

void sub_100287EE8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 40), a2);
  }
}

void sub_100287F00(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 48), a2);
  }
}

void sub_100287F18(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

void *sub_100288870(void *result)
{
  if (result)
  {
    id v1 = (char *)[result comparisonType];
    else {
      return *(&off_1003EFEE8 + (void)(v1 - 1));
    }
  }

  return result;
}

char *sub_100289C18(char *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    uint64_t v5 = (char *)[a1 init];
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)(v5 + 74), a2);
      unsigned int v6 = [*(id *)(a1 + 74) isAppleSigned];
      uint64_t v7 = (id *)&AMSAccountMediaTypeProduction;
      if (!v6) {
        uint64_t v7 = (id *)&AMSAccountMediaTypeAppStoreSandbox;
      }
      objc_storeStrong((id *)(a1 + 58), *v7);
    }
  }

  return a1;
}

NSData *sub_10028A05C(uint64_t a1, void *a2, void *a3)
{
  if (!a1) {
    return (NSData *)0LL;
  }
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[AMSProcessInfo currentProcess](&OBJC_CLASS___AMSProcessInfo, "currentProcess"));
  unsigned int v6 = &OBJC_IVAR___SystemAppLookupItem__downloadOffset;
  id v7 = *(id *)(a1 + 58);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 bundleID]);

  id v9 = v7;
  id v10 = v8;
  if ([v9 isEqualToString:AMSAccountMediaTypeAppStoreSandbox])
  {
    id v11 = sub_10025569C((uint64_t)&OBJC_CLASS___URLBag);
    uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);
  }

  else
  {
    else {
      id v13 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    }
    uint64_t v12 = objc_claimAutoreleasedReturnValue(v13);
  }

  uint64_t v14 = (void *)v12;

  [v5 setAccountMediaType:*(void *)(a1 + 58)];
  id v170 = v14;
  id v169 = v5;
  if ([*(id *)(a1 + 58) isEqualToString:AMSAccountMediaTypeAppStoreSandbox])
  {
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( +[ACAccountStore ams_sharedAccountStoreForMediaType:]( &OBJC_CLASS___ACAccountStore,  "ams_sharedAccountStoreForMediaType:",  AMSAccountMediaTypeAppStoreSandbox));
    id v171 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "ams_activeiTunesAccount"));

LABEL_16:
    id v24 = 0LL;
    uint64_t v25 = *(void *)(a1 + 138) & 0xBLL;
    if (!v171 && !v25)
    {
      id v167 = v169;
      uint64_t v179 = 0LL;
      v180 = &v179;
      uint64_t v181 = 0x3032000000LL;
      v182 = sub_10028B7FC;
      v183 = sub_10028B80C;
      id v184 = 0LL;
      uint64_t v173 = 0LL;
      v174 = &v173;
      uint64_t v175 = 0x3032000000LL;
      v176 = sub_10028B7FC;
      v177 = sub_10028B80C;
      id v178 = 0LL;
      uint64_t v26 = ASDLogHandleForCategory(14LL);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        id v28 = *(id *)(a1 + 90);
        id v29 = *(id *)(a1 + 74);
        id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 bundleID]);
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v28;
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Sending authentication request for receipt renewal",  buf,  0x16u);
      }

      id v31 = objc_alloc_init(&OBJC_CLASS___AMSAuthenticateOptions);
      [v31 setClientInfo:v167];
      [v31 setDebugReason:@"Receipt renewal"];
      BOOL v32 = -[AMSAuthenticateRequest initWithDSID:altDSID:username:options:]( objc_alloc(&OBJC_CLASS___AMSAuthenticateRequest),  "initWithDSID:altDSID:username:options:",  0LL,  0LL,  0LL,  v31);
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 66));
      char v34 = objc_opt_respondsToSelector(WeakRetained, "handleAuthenticateRequest:resultHandler:");

      if ((v34 & 1) != 0)
      {
        uint64_t v35 = ASDLogHandleForCategory(14LL);
        unsigned int v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          id v37 = *(id *)(a1 + 90);
          id v38 = *(id *)(a1 + 74);
          id v39 = (void *)objc_claimAutoreleasedReturnValue([v38 bundleID]);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v37;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v39;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Handling authentication request",  buf,  0x16u);

          unsigned int v6 = &OBJC_IVAR___SystemAppLookupItem__downloadOffset;
        }

        dispatch_semaphore_t v40 = dispatch_semaphore_create(0LL);
        id v41 = objc_loadWeakRetained((id *)(a1 + 66));
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = sub_10028B814;
        unsigned int v192 = &unk_1003EDEB8;
        *(void *)&v193[8] = &v173;
        *(void *)&v193[16] = &v179;
        uint64_t v42 = v40;
        *(void *)id v193 = v42;
        [v41 handleAuthenticateRequest:v32 resultHandler:buf];

        int64_t v43 = dispatch_time(0LL, 300000000000LL);
        dispatch_time_t v44 = dispatch_time(0LL, v43);
        if (dispatch_semaphore_wait(v42, v44))
        {
          uint64_t v45 = ASDErrorWithDescription(ASDErrorDomain, 530LL, @"Authenticate timed out");
          uint64_t v46 = objc_claimAutoreleasedReturnValue(v45);
          unsigned int v47 = (void *)v180[5];
          v180[5] = v46;
        }
      }

      else
      {
        uint64_t v48 = ASDLogHandleForCategory(14LL);
        id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
        {
          id v146 = *(id *)(a1 + 90);
          id v147 = *(id *)(a1 + 74);
          uint64_t v148 = (void *)objc_claimAutoreleasedReturnValue([v147 bundleID]);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v146;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v148;
          _os_log_error_impl( (void *)&_mh_execute_header,  v49,  OS_LOG_TYPE_ERROR,  "[%@] [%{public}@] No delegate to handle authentication request",  buf,  0x16u);

          unsigned int v6 = &OBJC_IVAR___SystemAppLookupItem__downloadOffset;
        }

        uint64_t v50 = ASDErrorWithDescription(ASDErrorDomain, 530LL, @"Client authenticate not supported");
        uint64_t v51 = objc_claimAutoreleasedReturnValue(v50);
        uint64_t v42 = (dispatch_semaphore_s *)v180[5];
        v180[5] = v51;
      }

      id v52 = (void *)objc_claimAutoreleasedReturnValue([(id)v174[5] account]);
      if (v52)
      {
        id v171 = (id)objc_claimAutoreleasedReturnValue([(id)v174[5] account]);
        id v53 = 0LL;
      }

      else
      {
        uint64_t v54 = ASDLogHandleForCategory(14LL);
        id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          v149 = v6;
          id v150 = *(id *)(a1 + 90);
          id v151 = *(id *)(a1 + 74);
          __int128 v152 = (void *)objc_claimAutoreleasedReturnValue([v151 bundleID]);
          uint64_t v153 = v180[5];
          *(_DWORD *)SEL v185 = 138412802;
          id v186 = v150;
          __int16 v187 = 2114;
          id v188 = v152;
          __int16 v189 = 2114;
          uint64_t v190 = v153;
          _os_log_error_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "[%@] [%{public}@] No account for receipt renewal: %{public}@",  v185,  0x20u);

          unsigned int v6 = v149;
        }

        id v53 = (id) v180[5];
        id v171 = 0LL;
      }

      _Block_object_dispose(&v173, 8);
      _Block_object_dispose(&v179, 8);

      id v24 = v53;
    }

    if (!v171 && !v25)
    {
      id v171 = 0LL;
      v166 = 0LL;
      id v56 = 0LL;
      goto LABEL_104;
    }

    uint64_t v162 = v24;
    if (v25) {
      goto LABEL_39;
    }
    goto LABEL_12;
  }

  uint64_t v16 = *(void **)(a1 + 50);
  if (!v16)
  {
    id v23 = sub_10028B524(a1, *(void **)(a1 + 58));
    id v171 = (id)objc_claimAutoreleasedReturnValue(v23);
    goto LABEL_16;
  }

  id v171 = v16;
  uint64_t v162 = 0LL;
  if ((*(_BYTE *)(a1 + 138) & 0xB) != 0)
  {
LABEL_39:
    uint64_t v57 = ASDLogHandleForCategory(14LL);
    uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      objc_super v59 = *(void **)(a1 + 90);
      id v60 = *(id *)(a1 + 74);
      id v61 = v59;
      __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v60 bundleID]);
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v59;
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)&buf[14] = v62;
      _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Fetching vpp app receipt",  buf,  0x16u);
    }

    v166 = (void *)objc_claimAutoreleasedReturnValue([v170 URLForKey:@"renew-vpp-receipt"]);
    goto LABEL_42;
  }

void sub_10028B4A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

char *sub_10028B500(char *WeakRetained)
{
  if (WeakRetained) {
    id WeakRetained = (char *)objc_loadWeakRetained((id *)(WeakRetained + 66));
  }
  return WeakRetained;
}

id sub_10028B524(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_5;
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[ACAccountStore ams_sharedAccountStoreForMediaType:]( &OBJC_CLASS___ACAccountStore,  "ams_sharedAccountStoreForMediaType:",  v3));
  id v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_activeiTunesAccount"));

  if (!v5)
  {
    if ((id)AMSAccountMediaTypeAppStoreSandbox != v3)
    {
      id v5 = *(id *)(a1 + 50);
      goto LABEL_6;
    }

void sub_10028B5B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    id v5 = v4;
    unsigned int v6 = 0LL;
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    if (v7) {
      uint64_t v8 = *(void **)(v7 + 74);
    }
    else {
      uint64_t v8 = 0LL;
    }
    id v14 = 0LL;
    id v9 = v8;
    id v10 = sub_10028A05C(v7, v9, &v14);
    unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue(v10);
    id v5 = v14;
  }

  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = ASDErrorWithSafeUserInfo(v5);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  sub_10028B684(v11, v6, v13, *(void **)(a1 + 40));
}

void sub_10028B684(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    if (v7)
    {
      id v10 = *(void **)(a1 + 82);
      if (v10)
      {
        uint64_t v11 = *(void **)(a1 + 90);
        id v21 = v8;
        id v12 = v11;
        id v13 = v10;
        id v14 = &v21;
        sub_1002E6C38((uint64_t)&OBJC_CLASS___WriteReceipt, v7, v13, v12, &v21);
      }

      else
      {
        __int128 v15 = *(void **)(a1 + 74);
        uint64_t v16 = *(void **)(a1 + 90);
        id v20 = v8;
        id v12 = v16;
        id v13 = v15;
        id v14 = &v20;
        sub_1002E6898((uint64_t)&OBJC_CLASS___WriteReceipt, v7, v13, v12, &v20);
      }

      id v17 = *v14;

      id v8 = v17;
    }

    if (v8)
    {
      v9[2](v9, v8);
    }

    else
    {
      uint64_t v18 = objc_claimAutoreleasedReturnValue(+[ASFReceipt receiptWithData:](&OBJC_CLASS___ASFReceipt, "receiptWithData:", v7));
      id v19 = *(void **)(a1 + 146);
      *(void *)(a1 + 146) = v18;

      v9[2](v9, 0LL);
    }
  }
}

uint64_t sub_10028B7FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10028B80C(uint64_t a1)
{
}

void sub_10028B814(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v6 = a3;
  uint64_t v7 = ASDErrorWithSafeUserInfo(v6);
  uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

id *sub_10028C080(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___PreparePurchaseTask;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 5, a2);
    }
  }

  return a1;
}

id *sub_10028D1EC(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)&OBJC_CLASS___DemotedApplication;
    a1 = (id *)objc_msgSendSuper2(&v15, "init");
    if (a1)
    {
      a1[6] = [v3 applicationDSID];
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIdentifier]);
      uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString, v5);
      if ((objc_opt_isKindOfClass(v4, v6) & 1) != 0 && [v4 length]) {
        objc_storeStrong(a1 + 1, v4);
      }
      a1[7] = [v3 applicationDownloaderDSID];
      objc_super v7 = (void *)objc_claimAutoreleasedReturnValue([v3 iTunesMetadata]);
      a1[2] = [v7 versionIdentifier];

      a1[10] = [v3 placeholderFailureReason];
      a1[8] = [v3 applicationFamilyID];
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 iTunesMetadata]);
      a1[3] = [v8 storeItemIdentifier];

      a1[9] = [v3 applicationDSID];
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 iTunesMetadata]);
      a1[4] = [v9 storeFront];

      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceIdentifierForVendor]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 UUIDString]);

      uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSString, v12);
      if ((objc_opt_isKindOfClass(v11, v13) & 1) != 0 && [v11 length]) {
        objc_storeStrong(a1 + 5, v11);
      }
    }
  }

  return a1;
}

id sub_10028D384(uint64_t a1)
{
  if (a1)
  {
    id v1 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "initWithBundleIdentifier:allowPlaceholder:error:",  *(void *)(a1 + 8),  1LL,  0LL);
    id v2 = sub_1003261E8(v1);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    if (v3)
    {
      if (-[LSApplicationRecord installType](v1, "installType") == (id)9) {
        uint64_t v4 = 3LL;
      }
      else {
        uint64_t v4 = 2LL;
      }
      uint64_t v5 = sub_1002E5EDC((uint64_t)&OBJC_CLASS___AppInstallPolicy);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      sub_1002E60D4((uint64_t)v6, 4LL);
      sub_1002E6174((uint64_t)v6, 4LL);
      sub_1002E5F7C((uint64_t)v6, 60LL);
      id v7 = sub_1002D7418(objc_alloc(&OBJC_CLASS___RestoreAppInstall), v3, v4, -1LL, v6);
    }

    else
    {
      id v7 = 0LL;
    }
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

id *sub_10028D580(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)&OBJC_CLASS___PromiseObserver;
    a1 = (id *)objc_msgSendSuper2(&v15, "init");
    if (a1)
    {
      id v10 = [v7 copy];
      id v11 = a1[1];
      a1[1] = v10;

      id v12 = [v8 copy];
      id v13 = a1[2];
      a1[2] = v12;

      objc_storeStrong(a1 + 3, a4);
    }
  }

  return a1;
}

void sub_10028D640(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id Property = objc_getProperty(a1, v3, 24LL, 1);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_10028D6DC;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v4;
    [Property scheduleBlock:v6];
  }
}

uint64_t sub_10028D6DC(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 8LL, 1);
  }
  return (*((uint64_t (**)(id, void))Property + 2))(Property, *(void *)(a1 + 40));
}

void sub_10028D714(void *a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v3 = ASDErrorWithSafeUserInfo(a2);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id Property = objc_getProperty(a1, v5, 24LL, 1);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_10028D7B8;
    v8[3] = &unk_1003E9DC0;
    void v8[4] = a1;
    id v9 = v4;
    id v7 = v4;
    [Property scheduleBlock:v8];
  }

uint64_t sub_10028D7B8(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 16LL, 1);
  }
  return (*((uint64_t (**)(id, void))Property + 2))(Property, *(void *)(a1 + 40));
}

id sub_10028E6C0(id a1, ASDApplicationMetadata *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[ASDApplicationMetadata itemID](a2, "itemID"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 stringValue]);

  return v3;
}

void sub_10028E6FC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  if (a2)
  {
    __int128 v40 = 0u;
    __int128 v41 = 0u;
    __int128 v38 = 0u;
    __int128 v39 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue([a2 responseDataItems]);
    id v5 = [obj countByEnumeratingWithState:&v38 objects:v48 count:16];
    if (v5)
    {
      id v6 = v5;
      id v32 = v4;
      id v7 = @"id";
      uint64_t v8 = *(void *)v39;
      uint64_t v33 = AMSMediaArtworkFormatPNG;
      uint64_t v34 = AMSMediaArtworkCropStyleBoundedBox;
      uint64_t v35 = *(void *)v39;
      do
      {
        id v9 = 0LL;
        do
        {
          if (*(void *)v39 != v8) {
            objc_enumerationMutation(obj);
          }
          id v10 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)v9);
          uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v7]);
          id v12 = (void *)v11;
          if (v11 && (objc_opt_respondsToSelector(v11, "longLongValue") & 1) != 0)
          {
            id v13 = v7;
            id v14 = objc_alloc(&OBJC_CLASS___AMSMediaArtwork);
            objc_super v15 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:@"attributes"]);
            uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:@"platformAttributes"]);
            id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:@"appletvos"]);
            id v18 = v6;
            id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"artwork"]);
            id v20 = [v14 initWithDictionary:v19];

            id v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v20, "URLWithSize:cropStyle:format:", v34, v33, 400.0, 240.0));
            uint64_t v22 = *(void **)(a1 + 32);
            id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v12 longLongValue]));
            [v22 setObject:v21 forKeyedSubscript:v23];

            id v6 = v18;
            uint64_t v24 = ASDLogHandleForCategory(29LL);
            uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v26 = *(void *)(a1 + 40);
              if (v26) {
                uint64_t v26 = *(void *)(v26 + 64);
              }
              *(_DWORD *)__int128 buf = 138412802;
              uint64_t v43 = v26;
              __int16 v44 = 2114;
              id v45 = v12;
              __int16 v46 = 2114;
              unsigned int v47 = v21;
              _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "[%@] Found artwork for itemID: %{public}@ artworkURL: %{public}@",  buf,  0x20u);
            }

            id v7 = v13;
            uint64_t v8 = v35;
          }

          else
          {
            uint64_t v27 = ASDLogHandleForCategory(29LL);
            id v20 = (id)objc_claimAutoreleasedReturnValue(v27);
            if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_ERROR))
            {
              uint64_t v28 = *(void *)(a1 + 40);
              if (v28) {
                uint64_t v28 = *(void *)(v28 + 64);
              }
              *(_DWORD *)__int128 buf = 138412546;
              uint64_t v43 = v28;
              __int16 v44 = 2114;
              id v45 = v12;
              _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v20,  OS_LOG_TYPE_ERROR,  "[%@] Failed to find artwork for itemID: %{public}@",  buf,  0x16u);
            }
          }

          id v9 = (char *)v9 + 1;
        }

        while (v6 != v9);
        id v29 = [obj countByEnumeratingWithState:&v38 objects:v48 count:16];
        id v6 = v29;
      }

      while (v29);
      id v4 = v32;
    }
  }

  else
  {
    uint64_t v30 = ASDLogHandleForCategory(29LL);
    id obj = (id)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled((os_log_t)obj, OS_LOG_TYPE_ERROR))
    {
      uint64_t v31 = *(void *)(a1 + 40);
      if (v31) {
        uint64_t v31 = *(void *)(v31 + 64);
      }
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v43 = v31;
      __int16 v44 = 2114;
      id v45 = v4;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)obj,  OS_LOG_TYPE_ERROR,  "[%@] Placeholder artwork will be missing, media task failed: %{public}@",  buf,  0x16u);
    }
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

id sub_10028EB28(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationRecord enumeratorWithOptions:]( &OBJC_CLASS___LSApplicationRecord,  "enumeratorWithOptions:",  0LL));
  [v1 setFilter:&stru_1003EFF88];
  return v1;
}

BOOL sub_10028EB6C(id a1, LSApplicationRecord *a2)
{
  id v2 = a2;
  if (-[LSApplicationRecord isAppStoreVendable](v2, "isAppStoreVendable"))
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord bundleIdentifier](v2, "bundleIdentifier"));
    if (v3)
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord bundleIdentifier](v2, "bundleIdentifier"));
      BOOL v5 = [v4 length] != 0;
    }

    else
    {
      BOOL v5 = 0;
    }
  }

  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

id sub_10028EBEC(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationRecord enumeratorWithOptions:]( &OBJC_CLASS___LSApplicationRecord,  "enumeratorWithOptions:",  0LL));
  [v1 setFilter:&stru_1003EFFA8];
  return v1;
}

BOOL sub_10028EC30(id a1, LSApplicationRecord *a2)
{
  id v2 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord iTunesMetadata](v2, "iTunesMetadata"));
  id v4 = [v3 storeItemIdentifier];

  if (v4)
  {
    BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord bundleIdentifier](v2, "bundleIdentifier"));
    if (v5)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord bundleIdentifier](v2, "bundleIdentifier"));
      LOBYTE(v4) = [v6 length] != 0;
    }

    else
    {
      LOBYTE(v4) = 0;
    }
  }

  return (char)v4;
}

id sub_10028ECBC(uint64_t a1)
{
  if (qword_100462508 != -1) {
    dispatch_once(&qword_100462508, &stru_1003EFFC8);
  }
  return (id)qword_100462500;
}

void sub_10028ED00(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___PushService);
  id v2 = (void *)qword_100462500;
  qword_100462500 = (uint64_t)v1;
}

id *sub_10028EEE4(id *a1)
{
  if (a1) {
    a1 = (id *)a1[9];
  }
  return a1;
}

void sub_10028EF00(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10028EF94;
    block[3] = &unk_1003EC880;
    uint64_t v10 = a3;
    void block[4] = a1;
    id v9 = v5;
    dispatch_async(v7, block);
  }
}

void sub_10028EF94(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[6]));
  value = 0LL;
  if (NSMapMember(*(NSMapTable **)(a1[4] + 16LL), v2, 0LL, &value))
  {
    uint64_t v3 = ASDLogHandleForCategory(26LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT))
    {
      id v13 = (void *)objc_opt_class(value, v5);
      uint64_t v14 = a1[6];
      *(_DWORD *)__int128 buf = 138543618;
      id v18 = v13;
      __int16 v19 = 2048;
      uint64_t v20 = v14;
      id v15 = v13;
      _os_log_fault_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_FAULT,  "A consumer of type: %{public}@ was already registered for action type: %ld",  buf,  0x16u);
    }
  }

  [*(id *)(a1[4] + 16) setObject:a1[5] forKey:v2];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 40) objectForKeyedSubscript:v2]);
  id v7 = [v6 unsignedIntegerValue];

  if (v7)
  {
    id v9 = (void *)a1[4];
    uint64_t v8 = (void *)a1[5];
    uint64_t v10 = a1[6];
    uint64_t v11 = sub_10028F118(v9, v10);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    [v8 pushService:v9 recoverFromDroppedMessagesOfActionType:v10 completionHandler:v12];
  }
}

void *sub_10028F118(void *a1, uint64_t a2)
{
  if (a1)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10028FDF8;
    v3[3] = &unk_1003EFFF0;
    v3[4] = a1;
    void v3[5] = a2;
    a1 = objc_retainBlock(v3);
  }

  return a1;
}

void sub_10028F16C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    uint64_t v8 = *(dispatch_queue_s **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10028F218;
    block[3] = &unk_1003E97D0;
    void block[4] = a1;
    id v10 = v6;
    id v11 = v5;
    dispatch_async(v8, block);
  }
}

void sub_10028F218(uint64_t a1)
{
  id v2 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
  id v15 = (id)objc_claimAutoreleasedReturnValue(v2);
  objc_opt_self(&OBJC_CLASS___PushService);
  id v3 = objc_alloc_init(&OBJC_CLASS___AMSPushConfiguration);
  [v3 setEngagementPushTopic:@"com.apple.TVAppStore"];
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  @"4",  @"22",  @"35",  0LL));
  [v3 setEnabledActionTypes:v4];

  [v3 setUserNotificationExtensionId:@"asd-notification-default"];
  id v5 = -[AMSPushHandler initWithConfiguration:bag:]( objc_alloc(&OBJC_CLASS___AMSPushHandler),  "initWithConfiguration:bag:",  v3,  v15);

  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 48);
  *(void *)(v6 + 4_Block_object_dispose(va, 8) = v5;

  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "setDelegate:");
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  [v8 addObserver:*(void *)(a1 + 32) selector:"_handleBagChangedNotification:" name:AMSBagChangedNotification object:0];
  [v8 addObserver:*(void *)(a1 + 32) selector:"_handleAccountDidChangeNotification:" name:@"AccountStorePrimaryAccountDidChange" object:0];
  [v8 addObserver:*(void *)(a1 + 32) selector:"handleSandboxAccountDidChangeNotification:" name:@"AccountStoreSandboxAccountDidChange" object:0];
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v11 = v10;
  if (v9 && !*(void *)(v9 + 72))
  {
    if (v10)
    {
      id v12 = (PushServiceTestFlightConsumer *)v10;
    }

    else
    {
      id v12 = objc_alloc(&OBJC_CLASS___PushServiceTestFlightConsumer);
      if (v12) {
        id v12 = (PushServiceTestFlightConsumer *)sub_1002973F8((uint64_t)v12, *(void **)(v9 + 24), 0LL);
      }
    }

    id v13 = *(void **)(v9 + 72);
    *(void *)(v9 + 72) = v12;

    uint64_t v14 = *(void *)(v9 + 72);
    if (v14) {
      objc_storeWeak((id *)(v14 + 64), (id)v9);
    }
  }

  if (!*(void *)(a1 + 48)) {
    sub_10028F410(*(void *)(a1 + 32));
  }
}

void sub_10028F410(uint64_t a1)
{
  if (a1)
  {
    id v2 = APSEnvironmentProduction;
    id v3 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = sub_100255F38((uint64_t)v4, (uint64_t)@"push-notifications/environment", @"production");
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    if (v6)
    {
      if ([*(id *)(a1 + 32) isEqualToString:v6])
      {
LABEL_18:

        return;
      }

      if (+[APSConnection isValidEnvironment:](&OBJC_CLASS___APSConnection, "isValidEnvironment:", v6))
      {
        objc_storeStrong((id *)(a1 + 32), v6);
        id v7 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  2LL);
        uint64_t v8 = *(void **)(a1 + 40);
        *(void *)(a1 + 40) = v7;

        sub_1002FA8B4((uint64_t)&OBJC_CLASS___AppDefaultsManager, 0LL);
        if (*(void *)(a1 + 8))
        {
          uint64_t v9 = ASDLogHandleForCategory(26LL);
          id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            int v19 = 138543362;
            uint64_t v20 = v6;
            _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Shutting down existing connection before starting up in new environment: %{public}@",  (uint8_t *)&v19,  0xCu);
          }

          id v11 = *(void **)(a1 + 8);
          if (v11)
          {
            id v12 = (void *)v11[1];
            if (v12)
            {
              [v12 shutdown];
              id v11 = *(void **)(a1 + 8);
            }
          }

          *(void *)(a1 + _Block_object_dispose(va, 8) = 0LL;
        }

        id v13 = sub_10018FC14(objc_alloc(&OBJC_CLASS___PushConnection), v6, (void *)a1, *(void **)(a1 + 24));
        uint64_t v14 = *(os_log_s **)(a1 + 8);
        *(void *)(a1 + _Block_object_dispose(va, 8) = v13;
        goto LABEL_17;
      }
    }

    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = ASDLogHandleForCategory(26LL);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    BOOL v17 = os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
    if (v15)
    {
      if (v17)
      {
        int v19 = 138543362;
        uint64_t v20 = 0LL;
        id v18 = "Environment is invalid, using existing connection instead error: %{public}@";
LABEL_21:
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v18, (uint8_t *)&v19, 0xCu);
      }
    }

    else if (v17)
    {
      int v19 = 138543362;
      uint64_t v20 = 0LL;
      id v18 = "Environment is invalid, and no other connection is available error: %{public}@";
      goto LABEL_21;
    }

void sub_10028F708(uint64_t a1)
{
  id v2 = sub_1001B782C((uint64_t)&OBJC_CLASS___BadgingCoordinator);
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  sub_1001B7B34((uint64_t)v3, *(void **)(a1 + 32));
}

void sub_10028F8A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = a2;
    id v7 = (void **)sub_10025F4EC(objc_alloc(&OBJC_CLASS___PushMessage), v6);

    uint64_t v8 = sub_10025F5A0(v7);
    uint64_t v9 = ASDLogHandleForCategory(26LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    id v11 = v10;
    if (v8 == (void **)-1LL)
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 v39 = 138543362;
        *(void *)&v39[4] = v7;
        _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Received invalid message: %{public}@",  v39,  0xCu);
      }

      goto LABEL_24;
    }

    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__int128 v39 = 138543618;
      *(void *)&v39[4] = v5;
      *(_WORD *)&v39[12] = 2114;
      *(void *)&v39[14] = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "Connection: %{public}@ received incoming message: %{public}@",  v39,  0x16u);
    }

    id v12 = *(void **)(a1 + 48);
    id v13 = sub_10025F5BC(v7);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    LODWORD(v12) = [v12 shouldHandleNotification:v14];

    if ((_DWORD)v12)
    {
      uint64_t v15 = *(void **)(a1 + 48);
      uint64_t v16 = sub_10025F5BC(v7);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      [v15 handleNotification:v11];
LABEL_24:

      goto LABEL_25;
    }

    BOOL v17 = sub_10025F578(v7);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    int v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "ams_activeiTunesAccount"));
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v19, "ams_DSID"));

    if (v11)
    {
      if ([v20 isEqualToNumber:v11])
      {
LABEL_15:
        uint64_t v27 = sub_10025F5A0(v7);
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v27));
        id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v28]);
        uint64_t v30 = (char *)[v29 unsignedIntegerValue];

        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v30 + 1));
        [*(id *)(a1 + 40) setObject:v31 forKeyedSubscript:v28];

        if (!v30)
        {
          uint64_t v32 = ASDLogHandleForCategory(26LL);
          uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)__int128 v39 = 134217984;
            *(void *)&v39[4] = v27;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_INFO,  "Adding pending push action type %ld",  v39,  0xCu);
          }

          sub_10028FFE4(a1);
        }

        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 16), "objectForKey:", v28, *(_OWORD *)v39, *(void *)&v39[16], v40));
        if (!v34)
        {
          uint64_t v35 = ASDLogHandleForCategory(26LL);
          unsigned int v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)__int128 v39 = 134217984;
            *(void *)&v39[4] = v27;
            _os_log_fault_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_FAULT,  "Consumer missing for action type %ld",  v39,  0xCu);
          }
        }

        id v37 = sub_10028F118((void *)a1, (uint64_t)v27);
        __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
        [v34 pushService:a1 didReceiveMessage:v7 completionHandler:v38];

        goto LABEL_24;
      }

      uint64_t v21 = ASDLogHandleForCategory(26LL);
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 v39 = 138543875;
        *(void *)&v39[4] = v5;
        *(_WORD *)&v39[12] = 2113;
        *(void *)&v39[14] = v11;
        *(_WORD *)&v39[22] = 2113;
        __int128 v40 = v20;
        id v23 = "Connection: %{public}@ received push for %{private}@ but active is: %{private}@";
        uint64_t v24 = v22;
        uint32_t v25 = 32;
LABEL_27:
        _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, v23, v39, v25);
      }
    }

    else
    {
      uint64_t v26 = ASDLogHandleForCategory(26LL);
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 v39 = 138543619;
        *(void *)&v39[4] = v5;
        *(_WORD *)&v39[12] = 2113;
        *(void *)&v39[14] = v20;
        id v23 = "Connection: %{public}@ received push with no DSID, active is: %{private}@";
        uint64_t v24 = v22;
        uint32_t v25 = 22;
        goto LABEL_27;
      }
    }

    goto LABEL_15;
  }

void sub_10028FDF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10028FE7C;
  block[3] = &unk_1003EC880;
  id v9 = v3;
  uint64_t v10 = v5;
  void block[4] = v4;
  id v7 = v3;
  dispatch_async(v6, block);
}

void sub_10028FE7C(uint64_t *a1)
{
  id v2 = *(void **)(a1[4] + 40);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[6]));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    if (a1[5])
    {
      uint64_t v5 = ASDLogHandleForCategory(26LL);
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v11 = a1[5];
        int v12 = 138543362;
        uint64_t v13 = v11;
        _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "Failed to process push message: %{public}@",  (uint8_t *)&v12,  0xCu);
      }
    }

    else
    {
      id v7 = (char *)[v4 unsignedIntegerValue] - 1;
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v7));
      id v9 = *(void **)(a1[4] + 40);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  a1[6]));
      [v9 setObject:v8 forKeyedSubscript:v10];

      if (!v7) {
        sub_10028FFE4(a1[4]);
      }
    }
  }
}

void sub_10028FFE4(uint64_t a1)
{
  if (a1)
  {
    id v2 = -[NSMutableArray initWithCapacity:]( [NSMutableArray alloc],  "initWithCapacity:",  [*(id *)(a1 + 40) count]);
    id v3 = *(void **)(a1 + 40);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_100290490;
    v5[3] = &unk_1003F0018;
    id v6 = v2;
    uint64_t v4 = v2;
    [v3 enumerateKeysAndObjectsUsingBlock:v5];
    sub_1002FA8B4((uint64_t)&OBJC_CLASS___AppDefaultsManager, v4);
  }

void sub_1002900F0(uint64_t a1)
{
}

void sub_100290174(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 8LL))
  {
    id v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userInfo]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"AccountDidChangePreviousActiveDSID"]);

    if (v4) {
      sub_1001900C4(*(void *)(*(void *)(a1 + 32) + 8LL), v4);
    }
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
    if (v5)
    {
      sub_1001900A4(*(void *)(*(void *)(a1 + 32) + 8LL), v2, 0);
    }

    else
    {
      uint64_t v7 = ASDLogHandleForCategory(26LL);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Nothing to register due to no active account",  buf,  2u);
      }
    }
  }

  else
  {
    uint64_t v6 = ASDLogHandleForCategory(26LL);
    id v2 = (_TtC9appstored6LogKey *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id v9 = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_LOG_TYPE_DEBUG,  "PushConnection found to be nil when trying to add/remove push notification types",  v9,  2u);
    }
  }
}

void sub_100290340(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 8LL))
  {
    id v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) userInfo]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:@"AccountDidChangePreviousActiveDSID"]);

    if (v4) {
      sub_10019059C(*(void *)(*(void *)(a1 + 32) + 8LL), v4);
    }
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[ActiveAccountObserver activeSandboxAccount]( &OBJC_CLASS___ActiveAccountObserver,  "activeSandboxAccount"));
    if (v5)
    {
      sub_1001900A4(*(void *)(*(void *)(a1 + 32) + 8LL), v2, 1);
    }

    else
    {
      uint64_t v7 = ASDLogHandleForCategory(26LL);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "Nothing to register due to no active sandbox account",  buf,  2u);
      }
    }
  }

  else
  {
    uint64_t v6 = ASDLogHandleForCategory(26LL);
    id v2 = (_TtC9appstored6LogKey *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)id v9 = 0;
      _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_LOG_TYPE_DEBUG,  "PushConnection found to be nil when trying to add/remove push notification types for sandbox account.",  v9,  2u);
    }
  }
}

void sub_100290490(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if ([a3 unsignedIntegerValue]) {
    [*(id *)(a1 + 32) addObject:v5];
  }
}

void *sub_100290554(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___ODRApplicationImportTask;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[5];
      a1[5] = v4;
    }
  }

  return a1;
}

void sub_100290640(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    uint64_t v87 = 0LL;
    id v88 = &v87;
    uint64_t v89 = 0x3032000000LL;
    char v90 = sub_100290F64;
    char v91 = sub_100290F74;
    id v92 = 0LL;
    uint64_t v83 = 0LL;
    uint64_t v84 = &v83;
    uint64_t v85 = 0x2020000000LL;
    char v86 = 0;
    uint64_t v79 = 0LL;
    uint64_t v80 = &v79;
    uint64_t v81 = 0x2020000000LL;
    char v82 = 0;
    uint64_t v75 = 0LL;
    uint64_t v76 = &v75;
    uint64_t v77 = 0x2020000000LL;
    char v78 = 0;
    id v2 = sub_1001B53D0((uint64_t)&OBJC_CLASS___ODRDatabaseStore);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v74[0] = _NSConcreteStackBlock;
    v74[1] = 3221225472LL;
    v74[2] = sub_100290F7C;
    v74[3] = &unk_1003F0040;
    v74[4] = v1;
    v74[5] = &v75;
    v74[6] = &v87;
    [v3 readUsingSession:v74];

    if (*((_BYTE *)v76 + 24))
    {
      id v4 = sub_1001E9630(objc_alloc(&OBJC_CLASS___ODRApplicationRepairTask), *(void **)(v1 + 40));
      id v5 = (id *)(v88 + 5);
      id obj = (id)v88[5];
      unsigned __int8 v6 = [(id)v1 runSubTask:v4 returningError:&obj];
      objc_storeStrong(v5, obj);
      if ((v6 & 1) == 0)
      {
        uint64_t v7 = ASDLogHandleForCategory(19LL);
        uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v57 = *(void *)(v1 + 40);
          uint64_t v58 = v88[5];
          *(_DWORD *)__int128 buf = 138543618;
          *(void *)&uint8_t buf[4] = v57;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v58;
          _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "Failed to repair application %{public}@ error: %{public}@",  buf,  0x16u);
        }

        id v9 = (void *)v88[5];
        v88[5] = 0LL;
      }
    }

    uint64_t v10 = *(void **)(v1 + 40);
    uint64_t v11 = (id *)(v88 + 5);
    id v72 = (id)v88[5];
    id v12 = sub_1002D9DC8(v10, (uint64_t)&v72);
    objc_storeStrong(v11, v72);
    if (!v12)
    {
      uint64_t v22 = ASDLogHandleForCategory(19LL);
      id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        uint64_t v29 = *(void *)(v1 + 40);
        uint64_t v30 = v88[5];
        *(_DWORD *)__int128 buf = 138543618;
        *(void *)&uint8_t buf[4] = v29;
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v30;
        _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Failed to find tag manifest for %{public}@ error: %{public}@",  buf,  0x16u);
      }

      uint64_t v24 = ASDErrorWithUnderlyingError(v88[5], @"_OnDemandResourcesErrorDomain", 115LL, 0LL, 0LL);
      uint32_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      [(id)v1 completeWithError:v25];

      goto LABEL_43;
    }

    if (*(void *)(v1 + 48)) {
      goto LABEL_25;
    }
    id v13 = sub_1001B53D0((uint64_t)&OBJC_CLASS___ODRDatabaseStore);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v71[0] = _NSConcreteStackBlock;
    v71[1] = 3221225472LL;
    v71[2] = sub_100290FF4;
    v71[3] = &unk_1003F0040;
    v71[4] = v1;
    v71[5] = &v79;
    v71[6] = &v87;
    [v14 readUsingSession:v71];

    if (*((_BYTE *)v80 + 24))
    {
LABEL_25:
      id v32 = sub_1001B53D0((uint64_t)&OBJC_CLASS___ODRDatabaseStore);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
      *(void *)__int128 buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = sub_10029106C;
      id v102 = &unk_1003F0068;
      uint64_t v103 = v1;
      id v105 = &v83;
      id v104 = v12;
      __int128 v106 = &v79;
      id v107 = &v87;
      [v33 modifyUsingTransaction:buf];

      uint64_t v64 = 0LL;
      unsigned __int8 v65 = &v64;
      uint64_t v66 = 0x3032000000LL;
      __int128 v67 = sub_100290F64;
      id v68 = sub_100290F74;
      id v69 = 0LL;
      id v34 = sub_1001B53D0((uint64_t)&OBJC_CLASS___ODRDatabaseStore);
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      v63[0] = _NSConcreteStackBlock;
      v63[1] = 3221225472LL;
      v63[2] = sub_1002912DC;
      v63[3] = &unk_1003EB858;
      v63[4] = v1;
      v63[5] = &v64;
      [v35 readUsingSession:v63];

      id v36 = sub_1002FE4E0((uint64_t)&OBJC_CLASS___ODRServiceDelegate);
      uint64_t v37 = objc_claimAutoreleasedReturnValue(v36);
      __int128 v38 = (void *)v37;
      if (v37) {
        __int128 v39 = *(void **)(v37 + 32);
      }
      else {
        __int128 v39 = 0LL;
      }
      id v40 = v39;
      __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 stringByAppendingPathComponent:v65[5]]);

      if (v41 && v65[5])
      {
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v41));
        uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[SAPathInfo pathInfoWithURL:](&OBJC_CLASS___SAPathInfo, "pathInfoWithURL:", v42));

        __int16 v44 = (void *)objc_claimAutoreleasedReturnValue(+[SAPathManager defaultManager](&OBJC_CLASS___SAPathManager, "defaultManager"));
        uint64_t v100 = v43;
        id v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v100, 1LL));
        id v46 = sub_1002D9D08(*(void *)(v1 + 40));
        unsigned int v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
        *(void *)uint64_t v97 = _NSConcreteStackBlock;
        *(void *)&v97[8] = 3221225472LL;
        *(void *)&v97[16] = sub_100291360;
        char v98 = &unk_1003E9CA8;
        uint64_t v99 = v1;
        [v44 registerPaths:v45 forBundleID:v47 completionHandler:v97];
      }

      else
      {
        uint64_t v48 = ASDLogHandleForCategory(19LL);
        uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          uint64_t v55 = *(void *)(v1 + 40);
          id v56 = (void *)v65[5];
          *(_DWORD *)uint64_t v97 = 138543874;
          *(void *)&v97[4] = v55;
          *(_WORD *)&v97[12] = 2114;
          *(void *)&v97[14] = v41;
          *(_WORD *)&v97[22] = 2114;
          char v98 = v56;
          _os_log_error_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_ERROR,  "Error attributing space to application %{public}@: No path available: %{public}@ %{public}@",  v97,  0x20u);
        }
      }

      if (*((_BYTE *)v84 + 24))
      {
        uint64_t v49 = ASDLogHandleForCategory(19LL);
        uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v51 = *(void *)(v1 + 40);
          *(_DWORD *)uint64_t v93 = 138543362;
          uint64_t v94 = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Successfully imported manifest for %{public}@",  v93,  0xCu);
        }
      }

      else
      {
        uint64_t v52 = ASDLogHandleForCategory(19LL);
        id v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_ERROR))
        {
          uint64_t v59 = *(void *)(v1 + 40);
          uint64_t v60 = v88[5];
          *(_DWORD *)uint64_t v93 = 138543618;
          uint64_t v94 = v59;
          __int16 v95 = 2114;
          uint64_t v96 = v60;
          _os_log_error_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_ERROR,  "Failed to import manifests for %{public}@ error: %{public}@",  v93,  0x16u);
        }

        objc_setProperty_atomic_copy((id)v1, v54, (id)v88[5], 32LL);
      }

      if (*((_BYTE *)v84 + 24)) {
        [(id)v1 completeWithSuccess];
      }
      else {
        [(id)v1 completeWithError:v88[5]];
      }

      _Block_object_dispose(&v64, 8);
LABEL_43:

      _Block_object_dispose(&v75, 8);
      _Block_object_dispose(&v79, 8);
      _Block_object_dispose(&v83, 8);
      _Block_object_dispose(&v87, 8);

      return;
    }

    if (sub_1002DA93C(*(void *)(v1 + 40)))
    {
      uint64_t v15 = sub_1001E6DFC(objc_alloc(&OBJC_CLASS___ODRManifestRequestTask), *(void **)(v1 + 40));
      uint64_t v16 = (id *)(v88 + 5);
      id v70 = (id)v88[5];
      unsigned int v17 = [(id)v1 runSubTask:v15 returningError:&v70];
      objc_storeStrong(v16, v70);
      if (v17)
      {
        if (v15) {
          id Property = objc_getProperty(v15, v18, 48LL, 1);
        }
        else {
          id Property = 0LL;
        }
        id v20 = Property;
        uint64_t v21 = *(void **)(v1 + 48);
        *(void *)(v1 + 4_Block_object_dispose(va, 8) = v20;
LABEL_23:

        goto LABEL_24;
      }

      if (v88[5])
      {
        uint64_t v31 = ASDLogHandleForCategory(19LL);
        uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_ERROR))
        {
          uint64_t v61 = *(void *)(v1 + 40);
          uint64_t v62 = v88[5];
          *(_DWORD *)__int128 buf = 138543618;
          *(void *)&uint8_t buf[4] = v61;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v62;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v21,  OS_LOG_TYPE_ERROR,  "Error fetching manifest for %{public}@: %{public}@",  buf,  0x16u);
        }

        goto LABEL_23;
      }
    }

    else
    {
      uint64_t v26 = *(void **)(v1 + 40);
      uint64_t v27 = (id *)(v88 + 5);
      id v70 = (id)v88[5];
      id v28 = sub_1002D9B68(v26, (uint64_t)&v70);
      objc_storeStrong(v27, v70);
      uint64_t v15 = *(void **)(v1 + 48);
      *(void *)(v1 + 4_Block_object_dispose(va, 8) = v28;
    }

void sub_100290EE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51)
{
}

uint64_t sub_100290F64(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100290F74(uint64_t a1)
{
}

void sub_100290F7C(void *a1, void *a2)
{
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  id obj = *(id *)(v3 + 40);
  char v4 = sub_1001876E8(a2, *(void **)(a1[4] + 40LL));
  objc_storeStrong((id *)(v3 + 40), obj);
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v4;
}

void sub_100290FF4(void *a1, void *a2)
{
  char v4 = *(void **)(a1[4] + 40LL);
  uint64_t v5 = *(void *)(a1[6] + 8LL);
  id obj = *(id *)(v5 + 40);
  char v6 = sub_100188938(a2, v4, &obj);
  objc_storeStrong((id *)(v5 + 40), obj);
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v6;
}

uint64_t sub_10029106C(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  if (*(void *)(*(void *)(a1 + 32) + 48LL))
  {
    uint64_t v4 = ASDLogHandleForCategory(19LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 40LL);
      int v21 = 138543362;
      uint64_t v22 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Ingesting asset and tag manifest for %{public}@",  (uint8_t *)&v21,  0xCu);
    }

    BOOL v7 = sub_1001C5FEC( v3,  *(void **)(*(void *)(a1 + 32) + 48LL),  *(void **)(a1 + 40),  *(void **)(*(void *)(a1 + 32) + 40LL),  1);
LABEL_9:
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v7;
    goto LABEL_10;
  }

  int v8 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
  uint64_t v9 = ASDLogHandleForCategory(19LL);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  if (v8)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 40LL);
      int v21 = 138543362;
      uint64_t v22 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Updating tag manifest for %{public}@",  (uint8_t *)&v21,  0xCu);
    }

    BOOL v7 = sub_1001C5BD4(v3, *(void **)(a1 + 40), *(void **)(*(void *)(a1 + 32) + 40LL));
    goto LABEL_9;
  }

  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 40LL);
    uint64_t v20 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    int v21 = 138543618;
    uint64_t v22 = v19;
    __int16 v23 = 2114;
    uint64_t v24 = v20;
    _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to find asset manifest for %{public}@ error: %{public}@",  (uint8_t *)&v21,  0x16u);
  }

  uint64_t v15 = *(void **)(a1 + 32);
  uint64_t v16 = ASDErrorWithUnderlyingError( *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL),  @"_OnDemandResourcesErrorDomain",  100LL,  0LL,  0LL);
  id v18 = (void *)objc_claimAutoreleasedReturnValue(v16);
  if (v15) {
    objc_setProperty_atomic_copy(v15, v17, v18, 32LL);
  }

LABEL_10:
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);

  return v13;
}

void sub_1002912DC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 40LL);
  id v4 = a2;
  id v5 = sub_1002D9D08(v3);
  id v10 = (id)objc_claimAutoreleasedReturnValue(v5);
  id v6 = sub_100188C1C(v4, (uint64_t)v10);
  uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);

  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_100291360(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory(19LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 40LL);
      int v7 = 138543618;
      uint64_t v8 = v6;
      __int16 v9 = 2114;
      id v10 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Error attributing space to application %{public}@: %{public}@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_10029147C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    id v7 = v3;
    if (v4)
    {
      [v4 addObject:v3];
    }

    else
    {
      id v5 = -[NSMutableSet initWithObjects:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithObjects:", v3, 0LL);
      uint64_t v6 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v5;
    }

    id v3 = v7;
  }
}

void sub_1002914EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 16);
    id v7 = v3;
    if (v4)
    {
      [v4 addObject:v3];
    }

    else
    {
      id v5 = -[NSMutableSet initWithObjects:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithObjects:", v3, 0LL);
      uint64_t v6 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v5;
    }

    id v3 = v7;
  }
}

void sub_10029155C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    uint64_t v12 = v3;
    if (v4)
    {
      if (v3) {
        id v5 = [v3[1] copy];
      }
      else {
        id v5 = 0LL;
      }
      [v4 unionSet:v5];
    }

    else
    {
      if (v3) {
        id v5 = [v3[1] copy];
      }
      else {
        id v5 = 0LL;
      }
      id v6 = [v5 mutableCopy];
      id v7 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v6;
    }

    uint64_t v8 = *(void **)(a1 + 16);
    if (v8)
    {
      if (v12) {
        id v9 = [v12[2] copy];
      }
      else {
        id v9 = 0LL;
      }
      [v8 unionSet:v9];
    }

    else
    {
      if (v12) {
        id v9 = [v12[2] copy];
      }
      else {
        id v9 = 0LL;
      }
      id v10 = [v9 mutableCopy];
      uint64_t v11 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v10;
    }

    id v3 = v12;
  }
}

void *sub_10029170C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___StoreSinf;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[1];
      a1[1] = v4;
    }
  }

  return a1;
}

NSData *sub_10029177C(uint64_t a1, uint64_t a2)
{
  if (!a1)
  {
    uint64_t v8 = 0LL;
    return v8;
  }

  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) objectForKey:a2]);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSData, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0)
  {
    id v6 = v2;
  }

  else
  {
    uint64_t v7 = objc_opt_class(&OBJC_CLASS___NSString, v5);
    if ((objc_opt_isKindOfClass(v2, v7) & 1) == 0)
    {
      uint64_t v8 = 0LL;
      goto LABEL_8;
    }

    id v6 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  v2,  1LL);
  }

  uint64_t v8 = v6;
LABEL_8:

  return v8;
}

void *sub_100291830(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    id v5 = [a1 init];
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 1, a2);
      id v6 = (id)objc_claimAutoreleasedReturnValue([v4 protectionSpace]);
      objc_opt_self(&OBJC_CLASS___AuthenticationChallenge);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableString string](&OBJC_CLASS___NSMutableString, "string"));
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 host]);
      id v9 = [v6 port];
      else {
        id v10 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@:%ld", v8, v9));
      }
      uint64_t v11 = v10;
      if ([v6 isProxy])
      {
        uint64_t v12 = ASDLocalizedString(@"PROXY_AUTHENTICATION_MESSAGE_%@_%@");
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v6 protocol]);
        objc_msgSend(v7, "appendFormat:", v13, v14, v11);
      }

      else
      {
        uint64_t v15 = ASDLocalizedString(@"SERVER_AUTHENTICATION_MESSAGE_%@");
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v15);
        objc_msgSend(v7, "appendFormat:", v13, v11);
      }

      else {
        uint64_t v16 = @"INSECURE_AUTH";
      }
      uint64_t v17 = ASDLocalizedString(v16);
      id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      [v7 appendFormat:@" %@", v18];

      uint64_t v19 = (void *)a1[2];
      a1[2] = v7;

      id v20 = v6;
      objc_opt_self(&OBJC_CLASS___AuthenticationChallenge);
      unsigned int v21 = [v20 isProxy];

      if (v21) {
        uint64_t v22 = @"PROXY_AUTHENTICATION_TITLE";
      }
      else {
        uint64_t v22 = @"SERVER_AUTHENTICATION_TITLE";
      }
      uint64_t v23 = ASDLocalizedString(v22);
      uint64_t v24 = objc_claimAutoreleasedReturnValue(v23);
      uint32_t v25 = (void *)a1[3];
      a1[3] = v24;
    }
  }

  return a1;
}

id sub_100291A4C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) proposedCredential]);
    id v2 = (void *)objc_claimAutoreleasedReturnValue([v1 user]);
  }

  else
  {
    id v2 = 0LL;
  }

  return v2;
}

void sub_100291D1C(_Unwind_Exception *a1)
{
}

void sub_1002920F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_100292118(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v46 = a1;
  uint64_t v4 = *(void *)(a1 + 32);
  id v45 = v3;
  if (v4)
  {
    *(void *)__int128 buf = 0LL;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000LL;
    char v91 = sub_100292994;
    id v92 = sub_1002929A4;
    uint64_t v93 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    __int128 v73 = (const __CFString *)_NSConcreteStackBlock;
    id v74 = (const __CFString *)3221225472LL;
    uint64_t v75 = (const __CFString *)sub_100292D9C;
    uint64_t v76 = (const __CFString *)&unk_1003EB208;
    uint64_t v77 = (const __CFString *)buf;
    sub_1001D64E8( (uint64_t)v45,  @"SELECT ZMANIFEST.Z_PK, ZMANIFEST.ZAPPLICATIONBUNDLEID FROM ZMANIFEST LEFT JOIN ZASSETPACK ON ZASSETPACK.ZMANIFEST = ZMANIFEST.Z_PK WHERE ZASSETPACK.ZLOCALURLSTRING IS NOT NULL",  &v73);
    id obj = [*(id *)(*(void *)&buf[8] + 40) copy];
    _Block_object_dispose(buf, 8);
  }

  else
  {
    id obj = 0LL;
  }

  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v56 = 0u;
  id v50 = [obj countByEnumeratingWithState:&v53 objects:v61 count:16];
  if (v50)
  {
    uint64_t v49 = *(void *)v54;
    do
    {
      id v5 = 0LL;
      do
      {
        if (*(void *)v54 != v49) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v53 + 1) + 8LL * (void)v5);
        uint64_t v7 = sub_1002D92D0((uint64_t)&OBJC_CLASS___ODRApplication, v6);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
        id v52 = 0LL;
        id v51 = sub_1002D9DC8(v8, (uint64_t)&v52);
        id v9 = v52;
        if (v9)
        {
          uint64_t v10 = ASDLogHandleForCategory(17LL);
          uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138543618;
            *(void *)&uint8_t buf[4] = v6;
            *(_WORD *)&_BYTE buf[12] = 2114;
            *(void *)&buf[14] = v9;
            _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to copy bundle tag manifest for %{public}@, error: %{public}@",  buf,  0x16u);
          }

          goto LABEL_11;
        }

        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([obj objectForKeyedSubscript:v6]);
        uint64_t v14 = *(void *)(v46 + 32);
        uint64_t v13 = *(void **)(v46 + 40);
        id v47 = v12;
        id v15 = v6;
        id v16 = v45;
        id v17 = v13;
        id v18 = v17;
        if (!v14)
        {

LABEL_21:
          uint64_t v40 = ASDLogHandleForCategory(17LL);
          __int128 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_fault_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_FAULT,  "Failed to import any asset packs even though some were reported to be local",  buf,  2u);
          }

          uint64_t v11 = (os_log_s *)v47;
          goto LABEL_11;
        }

        uint64_t v57 = 0LL;
        uint64_t v58 = &v57;
        uint64_t v59 = 0x2020000000LL;
        char v60 = 0;
        __int128 v73 = @"ZBUNDLEID";
        id v74 = @"ZCHUNKSIZE";
        *(void *)__int128 buf = @"bundleKey";
        *(void *)&uint8_t buf[8] = @"chunkSize";
        uint64_t v75 = @"ZDOWNLOADPRIORITY";
        uint64_t v76 = @"ZDOWNLOADSIZE";
        *(void *)&uint8_t buf[16] = @"downloadPriority";
        char v91 = (uint64_t (*)(uint64_t, uint64_t))@"fileSize";
        uint64_t v77 = @"ZEFFECTIVEALWAYSPRESERVE";
        char v78 = @"ZEFFECTIVEPRESERVATIONPRIORITY";
        id v92 = (void (*)(uint64_t))@"effective_always_preserve";
        uint64_t v93 = (NSMutableDictionary *)@"effective_preservation_priority";
        uint64_t v79 = @"ZHASHES";
        uint64_t v80 = @"ZISSTREAMABLE";
        uint64_t v94 = @"hashes";
        __int16 v95 = @"isStreamable";
        uint64_t v81 = @"ZLASTUSEDDATE";
        char v82 = @"ZLOCALURLSTRING";
        uint64_t v96 = @"last_used_date";
        uint64_t v97 = @"local_url";
        uint64_t v83 = @"ZMD5";
        uint64_t v84 = @"ZPINCOUNT";
        char v98 = @"md5";
        uint64_t v99 = @"pin_count";
        uint64_t v85 = @"ZPURGEABLE";
        char v86 = @"ZPURGEREASON";
        uint64_t v100 = @"purgeable";
        id v101 = @"purge_reason";
        uint64_t v87 = @"ZSHA";
        id v88 = @"ZSIZE";
        id v102 = @"sha";
        uint64_t v103 = @"uncompressedSize";
        uint64_t v89 = @"ZSOURCEURLSTRING";
        id v104 = @"URL";
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  buf,  &v73,  17LL));
        uint64_t v62 = (const __CFString *)_NSConcreteStackBlock;
        uint64_t v63 = 3221225472LL;
        uint64_t v64 = sub_100292E98;
        unsigned __int8 v65 = (const __CFString *)&unk_1003F0180;
        uint64_t v11 = (os_log_s *)v47;
        uint64_t v66 = (__CFString *)v11;
        id v20 = v19;
        id v67 = v20;
        uint64_t v68 = v14;
        id v21 = v16;
        id v69 = v21;
        id v22 = v15;
        id v70 = v22;
        id v23 = v18;
        id v71 = v23;
        id v72 = &v57;
        sub_1001D64E8( (uint64_t)v21,  @"SELECT * FROM ZASSETPACK WHERE ZMANIFEST = ? AND ZLOCALURLSTRING IS NOT NULL",  &v62);
        BOOL v24 = *((_BYTE *)v58 + 24) == 0;

        _Block_object_dispose(&v57, 8);
        if (v24) {
          goto LABEL_21;
        }
        uint64_t v26 = *(const __CFString **)(v46 + 32);
        uint32_t v25 = *(void **)(v46 + 40);
        id v27 = v22;
        id v28 = v21;
        id v29 = v25;
        uint64_t v30 = v29;
        if (v26)
        {
          uint64_t v62 = @"ZADAMID";
          uint64_t v63 = (uint64_t)@"ZCACHINGALLOWED";
          __int128 v73 = @"itemId";
          id v74 = @"local-cache-allowed";
          uint64_t v64 = (void (*)(uint64_t, void *))@"ZLASTMODIFICATIONDATE";
          unsigned __int8 v65 = @"ZSTORAGEID";
          uint64_t v75 = @"last_modification_date";
          uint64_t v76 = @"storage_id";
          uint64_t v66 = @"ZTHINNINGVARIANT";
          uint64_t v77 = @"thinningVariant";
          uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v73,  &v62,  5LL));
          uint64_t v57 = 0LL;
          uint64_t v58 = &v57;
          uint64_t v59 = 0x2020000000LL;
          char v60 = 0;
          *(void *)__int128 buf = _NSConcreteStackBlock;
          *(void *)&uint8_t buf[8] = 3221225472LL;
          *(void *)&uint8_t buf[16] = sub_10029362C;
          char v91 = (uint64_t (*)(uint64_t, uint64_t))&unk_1003F01D0;
          id v32 = (void (*)(uint64_t))v27;
          id v92 = v32;
          uint64_t v33 = v31;
          uint64_t v93 = v33;
          uint64_t v94 = v26;
          uint64_t v96 = (const __CFString *)&v57;
          id v34 = v30;
          __int16 v95 = v34;
          sub_1001D64E8((uint64_t)v28, @"SELECT * FROM ZMANIFEST WHERE ZAPPLICATIONBUNDLEID = ?", buf);
          BOOL v35 = *((_BYTE *)v58 + 24) == 0;

          _Block_object_dispose(&v57, 8);
          if (!v35)
          {
            uint64_t v37 = *(void *)(v46 + 32);
            id v36 = *(void **)(v46 + 40);
            id v38 = v51;
            id v39 = v8;
            if (v37)
            {
              *(void *)__int128 buf = _NSConcreteStackBlock;
              *(void *)&uint8_t buf[8] = 3221225472LL;
              *(void *)&uint8_t buf[16] = sub_100292E88;
              char v91 = (uint64_t (*)(uint64_t, uint64_t))&unk_1003EC678;
              id v92 = (void (*)(uint64_t))v38;
              uint64_t v93 = (NSMutableDictionary *)v39;
              [v36 modifyUsingTransaction:buf];
            }

            goto LABEL_11;
          }
        }

        else
        {
        }

        uint64_t v42 = ASDLogHandleForCategory(17LL);
        uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_fault_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_FAULT, "Failed to import manifest", buf, 2u);
        }

LABEL_11:
        id v5 = (char *)v5 + 1;
      }

      while (v50 != v5);
      id v44 = [obj countByEnumeratingWithState:&v53 objects:v61 count:16];
      id v50 = v44;
    }

    while (v44);
  }
}

void sub_100292964(_Unwind_Exception *a1)
{
}

uint64_t sub_100292994(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002929A4(uint64_t a1)
{
}

void sub_1002929AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100187548(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
        id v11 = sub_100188C1C(v3, v10);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        if (v12) {
          [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v12 forKeyedSubscript:v10];
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v7);
  }
}

void sub_100292AE4(id a1, NSString *a2, NSString *a3, BOOL *a4)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_1002FE4E0((uint64_t)&OBJC_CLASS___ODRServiceDelegate);
  uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
  id v9 = (void *)v8;
  if (v8) {
    uint64_t v10 = *(void **)(v8 + 32);
  }
  else {
    uint64_t v10 = 0LL;
  }
  id v11 = v10;
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 stringByAppendingPathComponent:v6]);

  if (v12)
  {
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v12));
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[SAPathInfo pathInfoWithURL:](&OBJC_CLASS___SAPathInfo, "pathInfoWithURL:", v13));

    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(+[SAPathManager defaultManager](&OBJC_CLASS___SAPathManager, "defaultManager"));
    id v22 = v14;
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v22, 1LL));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_100292CCC;
    v18[3] = &unk_1003E9CA8;
    uint64_t v19 = v5;
    [v15 registerPaths:v16 forBundleID:v19 completionHandler:v18];
  }

  else
  {
    uint64_t v17 = ASDLogHandleForCategory(19LL);
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543362;
      id v21 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Error attributing space to application %{public}@, no application base directory",  buf,  0xCu);
    }
  }
}

void sub_100292CCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory(19LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138543618;
      uint64_t v8 = v6;
      __int16 v9 = 2114;
      id v10 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Error attributing space to application %{public}@: %{public}@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

void sub_100292D9C(uint64_t a1, uint64_t a2)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_100292DF8;
  void v2[3] = &unk_1003EB1E0;
  void v2[4] = *(void *)(a1 + 32);
  sub_1001BF214(a2, v2);
}

void sub_100292DF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_1002E7388((uint64_t)v3, @"ZAPPLICATIONBUNDLEID");
  id v7 = (id)objc_claimAutoreleasedReturnValue(v4);
  id v5 = sub_1002E72CC((uint64_t)v3, @"Z_PK");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if (v7 && v6) {
    [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) setObject:v6 forKeyedSubscript:v7];
  }
}

BOOL sub_100292E88(uint64_t a1, void *a2)
{
  return sub_1001C5BD4(a2, *(void **)(a1 + 32), *(void **)(a1 + 40));
}

void sub_100292E98(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  objc_msgSend(v4, "bindInt:atPosition:", objc_msgSend(v3, "intValue"), 1);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_100292F74;
  v10[3] = &unk_1003F0158;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v7 = *(void **)(a1 + 56);
  id v11 = v5;
  uint64_t v12 = v6;
  id v13 = v7;
  id v14 = *(id *)(a1 + 64);
  id v8 = *(id *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 80);
  id v15 = v8;
  uint64_t v16 = v9;
  sub_1001BF214((uint64_t)v4, v10);
}

void sub_100292F74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
  id v5 = sub_1002E73E4(v3, v4);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = [v6 mutableCopy];

  sub_1002932C4(*(void *)(a1 + 40), v7, *(void **)(a1 + 32));
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"last_used_date"]);
  uint64_t v9 = v8;
  if (v8)
  {
    [v8 doubleValue];
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:"));
    [v7 setObject:v10 forKeyedSubscript:@"last_used_date"];
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"hashes"]);
  if (v11)
  {
    uint64_t v41 = 0LL;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v11,  0LL,  0LL,  &v41));
    uint64_t v14 = objc_opt_class(&OBJC_CLASS___NSArray, v13);
    if ((objc_opt_isKindOfClass(v12, v14) & 1) != 0) {
      [v7 setObject:v12 forKeyedSubscript:@"hashes"];
    }
  }

  id v15 = sub_1002E72CC((uint64_t)v3, @"Z_PK");
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  id v17 = [v16 longLongValue];

  id v18 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v19 = *(void *)(a1 + 48);
  v38[0] = _NSConcreteStackBlock;
  v38[1] = 3221225472LL;
  v38[2] = sub_10029341C;
  v38[3] = &unk_1003F0130;
  id v40 = v17;
  id v20 = v18;
  id v39 = v20;
  sub_1001D64E8(v19, @"SELECT * FROM ZCONTENTHASH WHERE ZASSETPACK = ?", v38);
  [v7 setObject:v20 forKeyedSubscript:@"primaryContentHash"];
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"local_url"]);
  if (!v21) {
    goto LABEL_10;
  }
  id v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v21));
  id v23 = sub_1001E3A60((uint64_t)&OBJC_CLASS___ODRContentHash, v20);
  id v36 = v7;
  uint64_t v24 = a1;
  uint32_t v25 = v11;
  uint64_t v26 = v9;
  id v27 = (void *)objc_claimAutoreleasedReturnValue(v23);
  id v28 = sub_1001E3B50(v27);
  id v29 = v21;
  uint64_t v30 = v3;
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v28);
  int v32 = sub_1001ACAFC((uint64_t)&OBJC_CLASS___ODRAssetPack, v22, v31);

  id v3 = v30;
  id v21 = v29;

  uint64_t v9 = v26;
  id v11 = v25;
  uint64_t v33 = v24;
  id v7 = v36;

  if (v32)
  {
    id v34 = sub_1001F752C(objc_alloc(&OBJC_CLASS___ODRAssetPack), v36, *(void **)(v33 + 56));
    sub_100293544(*(void *)(v33 + 40), v34, *(void **)(v33 + 64));
    *(_BYTE *)(*(void *)(*(void *)(v33 + 72) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  }

  else
  {
LABEL_10:
    uint64_t v35 = ASDLogHandleForCategory(17LL);
    id v34 = (void *)objc_claimAutoreleasedReturnValue(v35);
    if (os_log_type_enabled((os_log_t)v34, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v34,  OS_LOG_TYPE_ERROR,  "The legacy database told us that an asset pack was on the device but it wasn't, skipping the import for it.",  buf,  2u);
    }
  }
}

void sub_1002932C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v16;
      do
      {
        for (i = 0LL; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v16 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v15 + 1) + 8LL * (void)i);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:v12]);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v12]);
          [v5 setObject:v14 forKeyedSubscript:v13];

          [v5 removeObjectForKey:v12];
        }

        id v9 = [v7 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v9);
    }
  }
}

void sub_10029341C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1002934AC;
  v5[3] = &unk_1003F0108;
  id v6 = *(id *)(a1 + 32);
  sub_1001BF214((uint64_t)v4, v5);
}

void sub_1002934AC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  id v7 = sub_1002E7388((uint64_t)v6, @"ZSTRATEGY");
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:@"label"];

  id v9 = sub_1002E7388((uint64_t)v6, @"ZHASHVALUE");
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  [*(id *)(a1 + 32) setObject:v10 forKeyedSubscript:@"hash"];
  *a4 = 1;
}

BOOL sub_100293544(BOOL a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = &v11;
    uint64_t v13 = 0x2020000000LL;
    char v14 = 1;
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_100293844;
    v8[3] = &unk_1003EB6B8;
    id v9 = v5;
    uint64_t v10 = &v11;
    [v6 modifyUsingTransaction:v8];
    a1 = *((_BYTE *)v12 + 24) != 0;

    _Block_object_dispose(&v11, 8);
  }

  return a1;
}

void sub_100293614( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10029362C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002936F4;
  void v9[3] = &unk_1003F01A8;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v10 = v5;
  uint64_t v11 = v6;
  id v12 = *(id *)(a1 + 32);
  __int128 v8 = *(_OWORD *)(a1 + 56);
  id v7 = (id)v8;
  __int128 v13 = v8;
  sub_1001BF214((uint64_t)v4, v9);
}

void sub_1002936F4(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v6 = a2;
  id v7 = sub_1002E72CC((uint64_t)v6, @"ZISSTOREBASED");
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  unsigned int v9 = [v8 BOOLValue];

  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
  uint64_t v11 = sub_1002E73E4(v6, v10);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  id v17 = [v12 mutableCopy];
  sub_1002932C4(*(void *)(a1 + 40), v17, *(void **)(a1 + 32));
  __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:@"last_modification_date"]);
  char v14 = v13;
  if (v13)
  {
    [v13 doubleValue];
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:"));
    [v17 setObject:v15 forKeyedSubscript:@"last_modification_date"];
  }

  __int128 v16 = sub_10020C620(objc_alloc(&OBJC_CLASS___ODRManifest), v17, *(void **)(a1 + 48), v9);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = sub_100293544( *(void *)(a1 + 40),  v16,  *(void **)(a1 + 56));
  *a4 = 1;
}

uint64_t sub_100293844(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  uint64_t v6 = (objc_class *)objc_msgSend((id)objc_opt_class(v3, v5), "databaseEntityClass");
  id v7 = objc_alloc(v6);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) propertyValues]);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v4 connection]);

  id v10 = [v7 initWithPropertyValues:v8 onConnection:v9];
  if (!v10)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
    uint64_t v11 = ASDLogHandleForCategory(17LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) propertyValues]);
      int v16 = 138543618;
      id v17 = v6;
      __int16 v18 = 2114;
      uint64_t v19 = v15;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Failed to create a %{public}@ entity with values: %{public}@ ",  (uint8_t *)&v16,  0x16u);
    }
  }

  uint64_t v13 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);

  return v13;
}

id sub_100293A2C(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  __int128 v8 = sub_100293AEC;
  unsigned int v9 = sub_100293AFC;
  id v10 = 0LL;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100293B04;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

uint64_t sub_100293AEC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100293AFC(uint64_t a1)
{
}

void sub_100293B04(uint64_t a1)
{
}

void sub_100293B18(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(dispatch_queue_s **)(a1 + 8);
    block[1] = 3221225472LL;
    block[2] = sub_100293B98;
    block[3] = &unk_1003E9DC0;
    void block[4] = a1;
    id v5 = v3;
    block[0] = _NSConcreteStackBlock;
    id v7 = v3;
    dispatch_sync(v4, block);

    id v3 = v5;
  }
}

void sub_100293B98(uint64_t a1)
{
}

id sub_100293BA4(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  __int128 v8 = sub_100293AEC;
  unsigned int v9 = sub_100293AFC;
  id v10 = 0LL;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100293C64;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_100293C64(uint64_t a1)
{
}

void sub_100293C78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(dispatch_queue_s **)(a1 + 8);
    block[1] = 3221225472LL;
    block[2] = sub_100293CF8;
    block[3] = &unk_1003E9DC0;
    void block[4] = a1;
    id v5 = v3;
    block[0] = _NSConcreteStackBlock;
    id v7 = v3;
    dispatch_sync(v4, block);

    id v3 = v5;
  }
}

void sub_100293CF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 88);
  *(void *)(v2 + 8_Block_object_dispose(va, 8) = 0LL;
}

id sub_100293D2C(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  __int128 v8 = sub_100293AEC;
  unsigned int v9 = sub_100293AFC;
  id v10 = 0LL;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100293DEC;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_100293DEC(uint64_t a1)
{
}

void sub_100293E00(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(dispatch_queue_s **)(a1 + 8);
    block[1] = 3221225472LL;
    block[2] = sub_100293E80;
    block[3] = &unk_1003E9DC0;
    void block[4] = a1;
    id v5 = v3;
    block[0] = _NSConcreteStackBlock;
    id v7 = v3;
    dispatch_sync(v4, block);

    id v3 = v5;
  }
}

void sub_100293E80(uint64_t a1)
{
}

BOOL sub_100293E8C(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100293F30;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((_BYTE *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100293F30(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 16LL);
  return result;
}

uint64_t sub_100293F44(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v8 = 0LL;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100293FE0;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100293FE0(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 48LL);
  return result;
}

id sub_100293FF4(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  uint64_t v8 = sub_100293AEC;
  unsigned int v9 = sub_100293AFC;
  id v10 = 0LL;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002940B4;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1002940B4(uint64_t a1)
{
}

void sub_1002940C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(dispatch_queue_s **)(a1 + 8);
    block[1] = 3221225472LL;
    block[2] = sub_100294148;
    block[3] = &unk_1003E9DC0;
    void block[4] = a1;
    id v5 = v3;
    block[0] = _NSConcreteStackBlock;
    id v7 = v3;
    dispatch_sync(v4, block);

    id v3 = v5;
  }
}

void sub_100294148(uint64_t a1)
{
}

uint64_t sub_100294154(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v8 = 0LL;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002941F0;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1002941F0(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 64LL);
  return result;
}

void sub_100294204(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(dispatch_queue_s **)(a1 + 8);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100294260;
    v3[3] = &unk_1003E9E38;
    v3[4] = a1;
    void v3[5] = a2;
    dispatch_sync(v2, v3);
  }

uint64_t sub_100294260(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 64LL) = *(void *)(result + 40);
  return result;
}

id sub_10029426C(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  uint64_t v8 = sub_100293AEC;
  unsigned int v9 = sub_100293AFC;
  id v10 = 0LL;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10029432C;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_10029432C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 72) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_100294364(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(dispatch_queue_s **)(a1 + 8);
    block[1] = 3221225472LL;
    block[2] = sub_1002943E4;
    block[3] = &unk_1003E9DC0;
    void block[4] = a1;
    id v5 = v3;
    block[0] = _NSConcreteStackBlock;
    id v7 = v3;
    dispatch_sync(v4, block);

    id v3 = v5;
  }
}

void sub_1002943E4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = v2;
}

uint64_t sub_100294414(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  uint64_t v8 = 2LL;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002944B4;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1002944B4(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(void *)(*(void *)(result + 32) + 80LL);
  return result;
}

void sub_1002944C8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v2 = *(dispatch_queue_s **)(a1 + 8);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100294524;
    v3[3] = &unk_1003E9E38;
    v3[4] = a1;
    void v3[5] = a2;
    dispatch_sync(v2, v3);
  }

uint64_t sub_100294524(uint64_t result)
{
  *(void *)(*(void *)(result + 32) + 80LL) = *(void *)(result + 40);
  return result;
}

BOOL sub_100294530(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002945D4;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((_BYTE *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1002945D4(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 17LL);
  return result;
}

id sub_1002945E8(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  char v8 = sub_100293AEC;
  unsigned int v9 = sub_100293AFC;
  id v10 = 0LL;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002946A8;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1002946A8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 88) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1002946E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(dispatch_queue_s **)(a1 + 8);
    block[1] = 3221225472LL;
    block[2] = sub_100294760;
    block[3] = &unk_1003E9DC0;
    void block[4] = a1;
    id v5 = v3;
    block[0] = _NSConcreteStackBlock;
    id v7 = v3;
    dispatch_sync(v4, block);

    id v3 = v5;
  }
}

void sub_100294760(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) copy];
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 88);
  *(void *)(v3 + 8_Block_object_dispose(va, 8) = v2;
}

BOOL sub_100294790(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  uint64_t v1 = *(dispatch_queue_s **)(a1 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100294834;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((_BYTE *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_100294834(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 18LL);
  return result;
}

void sub_100294848(uint64_t a1, char a2)
{
  if (a1)
  {
    BOOL v2 = *(dispatch_queue_s **)(a1 + 8);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1002948A8;
    v3[3] = &unk_1003EC5C0;
    v3[4] = a1;
    char v4 = a2;
    dispatch_sync(v2, v3);
  }

uint64_t sub_1002948A8(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 18LL) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1002948B8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100294968;
    block[3] = &unk_1003E97D0;
    void block[4] = a1;
    id v9 = v7;
    id v10 = v5;
    dispatch_sync(v6, block);
  }
}

void sub_100294968(void *a1)
{
  BOOL v2 = (NSMutableDictionary *)[*(id *)(a1[4] + 104) mutableCopy];
  if (!v2) {
    BOOL v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  char v8 = v2;
  if (v3) {
    -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v3, v4);
  }
  else {
    -[NSMutableDictionary removeObjectForKey:](v2, "removeObjectForKey:", v4);
  }
  id v5 = -[NSMutableDictionary copy](v8, "copy");
  uint64_t v6 = a1[4];
  id v7 = *(void **)(v6 + 104);
  *(void *)(v6 + 104) = v5;
}

void sub_1002949E0(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100294A90;
    block[3] = &unk_1003E97D0;
    void block[4] = a1;
    id v9 = v7;
    id v10 = v5;
    dispatch_sync(v6, block);
  }
}

void sub_100294A90(void *a1)
{
  BOOL v2 = (NSMutableDictionary *)[*(id *)(a1[4] + 112) mutableCopy];
  if (!v2) {
    BOOL v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  }
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[6];
  char v8 = v2;
  if (v3) {
    -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v3, v4);
  }
  else {
    -[NSMutableDictionary removeObjectForKey:](v2, "removeObjectForKey:", v4);
  }
  id v5 = -[NSMutableDictionary copy](v8, "copy");
  uint64_t v6 = a1[4];
  id v7 = *(void **)(v6 + 112);
  *(void *)(v6 + 112) = v5;
}

void sub_100294BDC(void *a1)
{
  *(_BYTE *)(*(void *)(*(void *)(a1[5] + 8LL) + 40LL) + 16LL) = *(_BYTE *)(a1[4] + 16LL);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1[5] + 8LL) + 40LL) + 32LL), *(id *)(a1[4] + 32LL));
  *(void *)(*(void *)(*(void *)(a1[5] + 8LL) + 40LL) + 96LL) = *(void *)(a1[4] + 96LL);
  *(void *)(*(void *)(*(void *)(a1[5] + 8LL) + 40LL) + 48LL) = *(void *)(a1[4] + 48LL);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1[5] + 8LL) + 40LL) + 56LL), *(id *)(a1[4] + 56LL));
  id v2 = [*(id *)(a1[4] + 72) copyWithZone:a1[6]];
  uint64_t v3 = *(void *)(*(void *)(a1[5] + 8LL) + 40LL);
  uint64_t v4 = *(void **)(v3 + 72);
  *(void *)(v3 + 72) = v2;

  id v5 = [*(id *)(a1[4] + 104) copyWithZone:a1[6]];
  uint64_t v6 = *(void *)(*(void *)(a1[5] + 8LL) + 40LL);
  id v7 = *(void **)(v6 + 104);
  *(void *)(v6 + 104) = v5;

  *(void *)(*(void *)(*(void *)(a1[5] + 8LL) + 40LL) + 80LL) = *(void *)(a1[4] + 80LL);
  id v8 = [*(id *)(a1[4] + 112) copyWithZone:a1[6]];
  uint64_t v9 = *(void *)(*(void *)(a1[5] + 8LL) + 40LL);
  id v10 = *(void **)(v9 + 112);
  *(void *)(v9 + 112) = v8;

  *(_BYTE *)(*(void *)(*(void *)(a1[5] + 8LL) + 40LL) + 17LL) = *(_BYTE *)(a1[4] + 17LL);
  id v11 = [*(id *)(a1[4] + 88) copyWithZone:a1[6]];
  uint64_t v12 = *(void *)(*(void *)(a1[5] + 8LL) + 40LL);
  uint64_t v13 = *(void **)(v12 + 88);
  *(void *)(v12 + 8_Block_object_dispose(va, 8) = v11;

  *(_BYTE *)(*(void *)(*(void *)(a1[5] + 8LL) + 40LL) + 18LL) = *(_BYTE *)(a1[4] + 18LL);
}

NSDateInterval *sub_100294DF4(void *a1)
{
  if (a1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1 responseStartDate]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1 responseEndDate]);
    id v4 = v2;
    id v5 = v3;
    objc_opt_self(&OBJC_CLASS___NSURLSessionTaskTransactionMetrics);
    uint64_t v6 = 0LL;
    if (v4 && v5)
    {
      [v5 timeIntervalSinceDate:v4];
      if (v7 >= 2.22044605e-16) {
        uint64_t v6 = -[NSDateInterval initWithStartDate:duration:]( objc_alloc(&OBJC_CLASS___NSDateInterval),  "initWithStartDate:duration:",  v4,  v7);
      }
      else {
        uint64_t v6 = 0LL;
      }
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

void sub_1002950A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

NSMutableDictionary *sub_1002950C0(NSMutableDictionary *a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_100296C80;
    v10[3] = &unk_1003F0378;
    id v13 = (id)objc_opt_class(v2, v5);
    id v11 = (id)objc_claimAutoreleasedReturnValue([v13 databaseTable]);
    uint64_t v6 = v4;
    uint64_t v12 = v6;
    id v7 = v11;
    [v3 enumerateKeysAndObjectsUsingBlock:v10];

    id v8 = v12;
    id v2 = v6;
  }

  return v2;
}

uint64_t sub_1002951A0(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10029522C;
  v7[3] = &unk_1003F0210;
  uint64_t v10 = *(void *)(a1 + 56);
  id v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v8 = v3;
  uint64_t v9 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);

  return v5;
}

uint64_t sub_10029522C(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  uint64_t result = sub_100295284((uint64_t)&OBJC_CLASS___SQLiteEntity, a3, a2, *(void *)(a1 + 48), *(void **)(a1 + 32));
  if ((result & 1) == 0)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
    *a4 = 1;
  }

  return result;
}

uint64_t sub_100295284(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a5;
  id v11 = (void *)objc_opt_self(a1);
  uint64_t v12 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"INSERT OR REPLACE INTO ");
  -[NSMutableString appendString:](v12, "appendString:", v9);
  -[NSMutableString appendString:](v12, "appendString:", @" (");
  uint64_t v35 = v11;
  uint64_t v13 = objc_claimAutoreleasedReturnValue([v11 foreignKeyColumnForTable:v9]);
  char v14 = (void *)v13;
  if (v13) {
    __int128 v15 = (const __CFString *)v13;
  }
  else {
    __int128 v15 = @"ROWID";
  }
  -[NSMutableString appendString:](v12, "appendString:", v15);
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v46 = 0u;
  __int128 v45 = 0u;
  id v16 = v8;
  id v17 = [v16 countByEnumeratingWithState:&v45 objects:v54 count:16];
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v46;
    do
    {
      for (i = 0LL; i != v18; i = (char *)i + 1)
      {
        if (*(void *)v46 != v19) {
          objc_enumerationMutation(v16);
        }
        uint64_t v21 = *(void *)(*((void *)&v45 + 1) + 8LL * (void)i);
        -[NSMutableString appendString:](v12, "appendString:", @", ");
        -[NSMutableString appendString:](v12, "appendString:", v21);
      }

      id v18 = [v16 countByEnumeratingWithState:&v45 objects:v54 count:16];
    }

    while (v18);
  }

  -[NSMutableString appendString:](v12, "appendString:", @" VALUES (?"));
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  id v22 = v16;
  id v23 = (char *)[v22 countByEnumeratingWithState:&v41 objects:v53 count:16];
  if (v23)
  {
    uint64_t v24 = v23;
    uint64_t v25 = *(void *)v42;
    while (1)
    {
      if (*(void *)v42 != v25) {
        objc_enumerationMutation(v22);
      }
      -[NSMutableString appendString:](v12, "appendString:", @", ?");
      if (!--v24)
      {
        uint64_t v24 = (char *)[v22 countByEnumeratingWithState:&v41 objects:v53 count:16];
        if (!v24) {
          break;
        }
      }
    }
  }

  -[NSMutableString appendString:](v12, "appendString:", @";"));
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_100296B40;
  v37[3] = &unk_1003EC228;
  uint64_t v39 = a4;
  id v40 = 0LL;
  id v26 = v22;
  id v38 = v26;
  uint64_t v27 = sub_1001D68EC((uint64_t)v10, v12, &v40, v37);
  id v28 = v40;
  if (v28)
  {
    uint64_t v29 = ASDLogHandleForCategory(35LL);
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      uint64_t v33 = (void *)objc_opt_class(v35, v31);
      *(_DWORD *)__int128 buf = 138543618;
      id v50 = v33;
      __int16 v51 = 2112;
      id v52 = v28;
      id v34 = v33;
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "[%{public}@] Error: %@", buf, 0x16u);
    }
  }

  return v27;
}

void sub_100295800(_Unwind_Exception *a1)
{
}

BOOL sub_10029581C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = objc_msgSend((id)objc_opt_class(v3, a2), "databaseTable");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = sub_1002959EC(v3, v5, @"ROWID");

  id v7 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v6), "foreignDatabaseTablesToDelete");
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  id v9 = [v8 countByEnumeratingWithState:&v21 objects:v25 count:16];
  if (v9)
  {
    id v11 = v9;
    uint64_t v12 = *(void *)v22;
    while (2)
    {
      for (i = 0LL; i != v11; i = (char *)i + 1)
      {
        if (*(void *)v22 != v12) {
          objc_enumerationMutation(v8);
        }
        char v14 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        __int128 v15 = (void *)objc_opt_class(*(void *)(a1 + 32), v10);
        id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "foreignKeyColumnForTable:", v14, (void)v21));
        if (v16)
        {
          *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = sub_1002959EC(*(void *)(a1 + 32), v14, v16);
          if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
          {

            goto LABEL_12;
          }
        }
      }

      id v11 = [v8 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v11) {
        continue;
      }
      break;
    }
  }

uint64_t sub_1002959EC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = a1;
  if (a1)
  {
    id v5 = a3;
    id v6 = a2;
    id v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"DELETE FROM %@ WHERE %@ = ?;",
           v6,
           v5);

    uint64_t v8 = *(void *)(v3 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_100296D80;
    v10[3] = &unk_1003E99D8;
    void v10[4] = v3;
    uint64_t v3 = sub_1001D68EC(v8, v7, 0LL, v10);
  }

  return v3;
}

void sub_100295AAC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  id v5 = @"SQLiteUserInfoKeyPersistentID";
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", *(void *)(a1 + 32)));
  id v6 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v6,  &v5,  1LL));
  [v2 postNotificationName:@"SQLiteDidDeleteEntityNotification" object:0 userInfo:v4];
}

void sub_100295C70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100295C88(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  LOBYTE(v3) = sub_1001BF4A4((uint64_t)v4);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v3;
}

void sub_10029601C(id *a1, void *a2, uint64_t a3)
{
  id v5 = a1[6];
  id v6 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v5 disambiguatedSQLForProperty:v6]);
  if (a3) {
    objc_msgSend(a1[4], "appendString:", @", ");
  }
  [a1[4] appendString:v8];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a1[6] joinClauseForProperty:v6]);

  if (v7) {
    [a1[5] addObject:v7];
  }
}

void sub_1002960BC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100296164;
  v5[3] = &unk_1003F02B0;
  id v6 = *(id *)(a1 + 40);
  id v7 = *(id *)(a1 + 48);
  sub_1001BF214((uint64_t)v4, v5);
}

void sub_100296164(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  id v6 = objc_autoreleasePoolPush();
  if (v8)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_100296224;
    void v9[3] = &unk_1003EE5C0;
    id v7 = *(void **)(a1 + 32);
    id v10 = *(id *)(a1 + 40);
    id v11 = v8;
    [v7 enumerateObjectsUsingBlock:v9];
  }

  objc_autoreleasePoolPop(v6);
}

void sub_100296224(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = *(void **)(a1 + 40);
  id v6 = a2;
  id v7 = sub_1002E7544(v5, a3);
  id v8 = (id)objc_claimAutoreleasedReturnValue(v7);
  [*(id *)(a1 + 32) setObject:v8 forKeyedSubscript:v6];
}

void sub_100296450( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10029646C(uint64_t a1)
{
  id v2 = sub_1002950C0(*(NSMutableDictionary **)(a1 + 32), *(void **)(a1 + 40));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100296514;
  v7[3] = &unk_1003F0328;
  uint64_t v11 = *(void *)(a1 + 64);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v4;
  uint64_t v10 = *(void *)(a1 + 56);
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](v2, "enumerateKeysAndObjectsUsingBlock:", v7);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);

  return v5;
}

void sub_100296514(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) foreignKeyColumnForTable:v7]);
  if (v9) {
    uint64_t v10 = (__CFString *)v9;
  }
  else {
    uint64_t v10 = @"ROWID";
  }
  uint64_t v31 = 0LL;
  int v32 = &v31;
  uint64_t v33 = 0x2020000000LL;
  char v34 = 1;
  if (([v7 isEqualToString:*(void *)(a1 + 32)] & 1) == 0)
  {
    uint64_t v11 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"SELECT 1 FROM ");
    -[NSMutableString appendString:](v11, "appendString:", v7);
    -[NSMutableString appendString:](v11, "appendString:", @" WHERE ");
    -[NSMutableString appendString:](v11, "appendString:", v10);
    -[NSMutableString appendString:](v11, "appendString:", @" =  ? LIMIT 1;");
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v13 = *(void *)(v12 + 8);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    void v30[2] = sub_10029685C;
    void v30[3] = &unk_1003EBBD8;
    void v30[4] = v12;
    void v30[5] = &v31;
    sub_1001D64E8(v13, v11, v30);
  }

  if (*((_BYTE *)v32 + 24))
  {
    char v14 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v15 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"UPDATE ");
    -[NSMutableString appendString:](v15, "appendString:", v7);
    -[NSMutableString appendString:](v15, "appendString:", @" SET ");
    v28[0] = 0LL;
    v28[1] = v28;
    v28[2] = 0x2020000000LL;
    char v29 = 0;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_1002968B8;
    v24[3] = &unk_1003F0300;
    uint64_t v27 = v28;
    id v16 = v15;
    uint64_t v25 = v16;
    uint64_t v17 = v14;
    id v26 = v17;
    [v8 enumerateKeysAndObjectsUsingBlock:v24];
    -[NSMutableString appendString:](v16, "appendString:", @" WHERE ");
    -[NSMutableString appendString:](v16, "appendString:", v7);
    -[NSMutableString appendString:](v16, "appendString:", @".");
    -[NSMutableString appendString:](v16, "appendString:", v10);
    -[NSMutableString appendString:](v16, "appendString:", @" = ?;");
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8LL);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_100296950;
    v21[3] = &unk_1003E99B0;
    BOOL v19 = v17;
    uint64_t v20 = *(void *)(a1 + 40);
    __int128 v22 = v19;
    uint64_t v23 = v20;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = sub_1001D68EC(v18, v16, 0LL, v21);

    _Block_object_dispose(v28, 8);
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = sub_100295284( (uint64_t)&OBJC_CLASS___SQLiteEntity,  v8,  v7,  *(void *)(*(void *)(a1 + 40) + 16LL),  *(void **)(*(void *)(a1 + 40) + 8LL));
  }

  *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) ^ 1;
  _Block_object_dispose(&v31, 8);
}

void sub_100296824(_Unwind_Exception *a1)
{
}

void sub_10029685C(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 16LL);
  id v4 = a2;
  [v4 bindInt64:v3 atPosition:1];
  LOBYTE(v3) = sub_1001BF4A4((uint64_t)v4);

  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v3;
}

void sub_1002968B8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    objc_msgSend(*(id *)(a1 + 32), "appendString:", @", ");
  }
  [*(id *)(a1 + 32) appendString:v6];
  [*(id *)(a1 + 32) appendString:@" = ?"];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  [*(id *)(a1 + 40) addObject:v5];
}

void sub_100296950(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    uint64_t v8 = 1LL;
    do
    {
      uint64_t v9 = 0LL;
      uint64_t v10 = v8;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        sub_10031DF0C(v3, (uint64_t)v9 + v10, *(void **)(*((void *)&v12 + 1) + 8LL * (void)v9));
        uint64_t v9 = (char *)v9 + 1;
      }

      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      uint64_t v8 = (v10 + (_DWORD)v9);
    }

    while (v6);
    uint64_t v11 = (v10 + (_DWORD)v9);
  }

  else
  {
    uint64_t v11 = 1LL;
  }

  objc_msgSend(v3, "bindInt64:atPosition:", *(void *)(*(void *)(a1 + 40) + 16), v11, (void)v12);
}

void sub_100296B40(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 bindInt64:*(void *)(a1 + 40) atPosition:1];
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    uint64_t v8 = 2LL;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "objectForKeyedSubscript:",  *(void *)(*((void *)&v11 + 1) + 8 * (void)v9),  (void)v11));
        sub_10031DF0C(v3, (uint64_t)v9 + v8, v10);

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      uint64_t v8 = (v8 + (_DWORD)v9);
    }

    while (v6);
  }
}

void sub_100296C80(id *a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (([v10 isEqualToString:@"ROWID"] & 1) == 0)
  {
    uint64_t v6 = objc_claimAutoreleasedReturnValue([a1[6] foreignDatabaseTableForProperty:v10]);
    if (v6)
    {
      id v7 = (id)v6;
      id v8 = (id)objc_claimAutoreleasedReturnValue([a1[6] foreignDatabaseColumnForProperty:v10]);
    }

    else
    {
      id v8 = v10;
      id v7 = a1[4];
    }

    uint64_t v9 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([a1[5] objectForKey:v7]);
    if (!v9)
    {
      uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      [a1[5] setObject:v9 forKey:v7];
    }

    -[NSMutableDictionary setObject:forKey:](v9, "setObject:forKey:", v5, v8);
  }
}

id sub_100296D80(uint64_t a1, void *a2)
{
  return [a2 bindInt64:*(void *)(*(void *)(a1 + 32) + 16) atPosition:1];
}

id sub_100296DB0(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:a2]);
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSData, v3);
    if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0)
    {
      id v6 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___NSError, v5),  v2,  0LL);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    }

    else
    {
      id v7 = 0LL;
    }
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

uint64_t sub_100296F80(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (a1)
  {
    BOOL v19 = (char *)[*(id *)(a1 + 8) length];
    id v6 = [v5 length];
    else {
      unint64_t v7 = 2LL * (void)v6;
    }
    if ((unint64_t)[*(id *)(a1 + 8) length] < v7)
    {
      [*(id *)(a1 + 8) setLength:v7];
      BOOL v19 = (char *)v7;
    }

    if (!v5)
    {
      BOOL v19 = 0LL;
      goto LABEL_11;
    }

    uint64_t v8 = *(void *)(a1 + 16);
    id v9 = v5;
    if (sub_1001B5A88( v8,  (char *)[v9 bytes],  (unint64_t)objc_msgSend(v9, "length"),  (uint64_t)objc_msgSend(*(id *)(a1 + 8), "mutableBytes"),  (id *)&v19,  a3))
    {
      while (1)
      {
LABEL_11:
        uint64_t v11 = *(void *)(a1 + 16);
        if (v11 && ![*(id *)(v11 + 8) length])
        {
          uint64_t v10 = 1LL;
          goto LABEL_20;
        }

        __int128 v12 = [*(id *)(a1 + 8) length];
        uint64_t v18 = (char *)(v12 - v19);
        uint64_t v13 = *(void *)(a1 + 16);
        id v14 = [*(id *)(a1 + 8) mutableBytes];
        uint64_t v15 = sub_1001B5A88(v13, 0LL, 0LL, (uint64_t)&v19[(void)v14], (id *)&v18, a3);
        if (!(_DWORD)v15 || v18 == 0LL) {
          break;
        }
        BOOL v19 = &v18[(void)v19];
        objc_msgSend(*(id *)(a1 + 8), "setLength:", (char *)objc_msgSend(*(id *)(a1 + 8), "length") + 1024);
      }

      uint64_t v10 = v15;
    }

    else
    {
      uint64_t v10 = 0LL;
    }

id sub_100297220(uint64_t a1, uint64_t a2)
{
  if (a2) {
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
  else {
    return [*(id *)(*(void *)(a1 + 32) + 40) finishWithCompletionHandler:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1002973F8(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v19.receiver = (id)a1;
    v19.super_class = (Class)&OBJC_CLASS___PushServiceTestFlightConsumer;
    uint64_t v8 = (id *)objc_msgSendSuper2(&v19, "init");
    a1 = (uint64_t)v8;
    if (v8)
    {
      objc_storeStrong(v8 + 3, a2);
      dispatch_queue_t v9 = sub_10022ED60("com.apple.appstored.PushServiceTestFlightConsumer", QOS_CLASS_UTILITY);
      uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
      uint64_t v11 = *(void **)(a1 + 16);
      *(void *)(a1 + 16) = v10;

      uint64_t v12 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", 11LL));
      uint64_t v13 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v12;

      if (v7) {
        id v14 = (id *)v7;
      }
      else {
        id v14 = sub_1003054A0((id *)objc_alloc(&OBJC_CLASS___TestFlightServiceHost), *(void **)(a1 + 16));
      }
      uint64_t v15 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose((const void *)(v1 - 136), 8) = v14;

      uint64_t v16 = *(void *)(a1 + 8);
      if (v16) {
        objc_storeWeak((id *)(v16 + 48), (id)a1);
      }
      *(_BYTE *)(a1 + 56) = sub_100297544(a1);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v17 addObserver:a1 selector:"_handleBagChangedNotification:" name:AMSBagChangedNotification object:0];
    }
  }

  return a1;
}

BOOL sub_100297544(uint64_t a1)
{
  id v2 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
  uint64_t v3 = (id *)objc_claimAutoreleasedReturnValue(v2);
  if (sub_100255FB0(v3, (uint64_t)@"testflight-extension/extension-enabled", 1LL))
  {
    id v4 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    id v5 = (id *)objc_claimAutoreleasedReturnValue(v4);
    else {
      BOOL v6 = 0LL;
    }
  }

  else
  {
    BOOL v6 = 0LL;
  }

  return v6;
}

void sub_100297640(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 16);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002976CC;
    v6[3] = &unk_1003E9FF8;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002976CC(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 48) length])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(void *)(v2 + 8);
    id v5 = *(void **)(v2 + 48);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1002977B4;
    v11[3] = &unk_1003ECCA0;
    void v11[4] = v2;
    id v12 = v3;
    sub_100305B30(v4, v5, v11);
    BOOL v6 = v12;
  }

  else
  {
    id v7 = *(void **)(a1 + 40);
    if (!v7) {
      return;
    }
    uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100297884;
    block[3] = &unk_1003EA158;
    id v10 = v7;
    dispatch_async(v8, block);
    BOOL v6 = v10;
  }
}

void sub_1002977B4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 48);
    *(void *)(v6 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
  }

  uint64_t v8 = *(void **)(a1 + 40);
  if (v8)
  {
    dispatch_queue_t v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100297870;
    block[3] = &unk_1003F03E8;
    id v12 = v8;
    char v13 = a2;
    id v11 = v5;
    dispatch_async(v9, block);
  }
}

uint64_t sub_100297870(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 48),  *(void *)(a1 + 32));
}

uint64_t sub_100297884(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100297914(uint64_t a1)
{
}

void sub_100297964(uint64_t a1)
{
  if (a1 && [*(id *)(a1 + 32) count] && !*(_BYTE *)(a1 + 40) && sub_100305A74(*(void *)(a1 + 8)))
  {
    *(_BYTE *)(a1 + 40) = 1;
    objc_initWeak(&location, (id)a1);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [*(id *)(a1 + 32) count]));
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectEnumerator]);
    id v4 = [v3 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v19;
      do
      {
        uint64_t v6 = 0LL;
        do
        {
          if (*(void *)v19 != v5) {
            objc_enumerationMutation(v3);
          }
          id v7 = *(id **)(*((void *)&v18 + 1) + 8LL * (void)v6);
          id v8 = objc_alloc(&OBJC_CLASS___ASDTestFlightServiceExtensionPushMessage);
          dispatch_queue_t v9 = sub_100298878(v7);
          id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
          id v11 = sub_10029885C(v7);
          id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
          id v13 = [v8 initWithTimestamp:v10 userInfo:v12];
          [v2 addObject:v13];

          uint64_t v6 = (char *)v6 + 1;
        }

        while (v4 != v6);
        id v4 = [v3 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }

      while (v4);
    }

    [*(id *)(a1 + 32) removeAllObjects];
    uint64_t v14 = *(void *)(a1 + 8);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", v2));
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_100297D70;
    v16[3] = &unk_1003F03C0;
    objc_copyWeak(&v17, &location);
    sub_10030603C(v14, v15, v16);

    objc_destroyWeak(&v17);
    objc_destroyWeak(&location);
  }

void sub_100297BA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id location)
{
}

void sub_100297C58(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 48LL);
  if (!v2 || ([v2 isEqualToData:*(void *)(a1 + 40)] & 1) == 0)
  {
    id v3 = [*(id *)(a1 + 40) copy];
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 48);
    *(void *)(v4 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = v3;

    sub_100297640(*(void *)(a1 + 32), &stru_1003F0398);
  }

void sub_100297CC4(uint64_t a1)
{
  if (a1)
  {
    int v2 = sub_100297544(a1);
    if (*(unsigned __int8 *)(a1 + 56) != v2)
    {
      *(_BYTE *)(a1 + 56) = v2;
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));

      if (WeakRetained)
      {
        uint64_t v4 = *(dispatch_queue_s **)(a1 + 24);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_100297E50;
        block[3] = &unk_1003E9880;
        void block[4] = a1;
        dispatch_async(v4, block);
      }

      if (*(_BYTE *)(a1 + 56))
      {
        sub_100297964(a1);
      }

      else
      {
        uint64_t v5 = *(void **)(a1 + 48);
        *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 136), 8) = 0LL;
      }
    }
  }

void sub_100297D70(uint64_t a1)
{
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  int v2 = WeakRetained;
  if (WeakRetained)
  {
    id v3 = WeakRetained[2];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100297DE0;
    block[3] = &unk_1003E9880;
    void block[4] = v2;
    dispatch_async(v3, block);
  }
}

uint64_t sub_100297DE0(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 0;
  return sub_100297964(*(void *)(a1 + 32));
}

void sub_100297E48(uint64_t a1)
{
}

void sub_100297E50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(v1 + 64));
    uint64_t v4 = *(void *)(a1 + 32);
  }

  else
  {
    uint64_t v4 = 0LL;
    id WeakRetained = 0LL;
  }

  id v5 = WeakRetained;
  [WeakRetained testFlightConsumer:v4 didChangeStatus:*(unsigned __int8 *)(v4 + 56)];
}

id *sub_100297F00(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___LibraryQueryPlanner;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 1, a2);
    }
  }

  return a1;
}

id sub_100297F74(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v6 = *(void **)(a1 + 16);
    *(void *)(a1 + 16) = v5;

    [v3 acceptVisitor:a1 flags:0];
    id v7 = sub_100206CF8(*(void **)(a1 + 16));
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    id v9 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v16;
      do
      {
        id v12 = 0LL;
        do
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v8);
          }
          -[NSMutableArray addObject:](v4, "addObject:", *(void *)(*((void *)&v15 + 1) + 8LL * (void)v12));
          id v12 = (char *)v12 + 1;
        }

        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }

      while (v10);
    }

    id v13 = -[NSMutableArray copy](v4, "copy");
  }

  else
  {
    id v13 = 0LL;
  }

  return v13;
}

NSMutableSet *sub_100298338(uint64_t a1)
{
  int v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"resultComplexity",  1LL));
  __int128 v17 = v3;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sortedArrayUsingDescriptors:v4]);
  if ([v5 count])
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectAtIndexedSubscript:0]);
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v7 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v13;
      do
      {
        id v10 = 0LL;
        do
        {
          if (*(void *)v13 != v9) {
            objc_enumerationMutation(v6);
          }
          -[NSMutableSet addObject:](v2, "addObject:", *(void *)(*((void *)&v12 + 1) + 8LL * (void)v10));
          id v10 = (char *)v10 + 1;
        }

        while (v8 != v10);
        id v8 = [v6 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }

      while (v8);
    }
  }

  if (*(void *)(a1 + 48) >= 2uLL) {
    -[NSMutableSet filterUsingPredicate:](v2, "filterUsingPredicate:", *(void *)(a1 + 40));
  }

  return v2;
}

NSMutableSet *sub_1002984D4(uint64_t a1)
{
  int v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v20;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)v7);
        __int128 v15 = 0u;
        __int128 v16 = 0u;
        __int128 v17 = 0u;
        __int128 v18 = 0u;
        id v9 = v8;
        id v10 = [v9 countByEnumeratingWithState:&v15 objects:v23 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v16;
          do
          {
            __int128 v13 = 0LL;
            do
            {
              if (*(void *)v16 != v12) {
                objc_enumerationMutation(v9);
              }
              -[NSMutableSet addObject:](v2, "addObject:", *(void *)(*((void *)&v15 + 1) + 8LL * (void)v13));
              __int128 v13 = (char *)v13 + 1;
            }

            while (v11 != v13);
            id v11 = [v9 countByEnumeratingWithState:&v15 objects:v23 count:16];
          }

          while (v11);
        }

        id v7 = (char *)v7 + 1;
      }

      while (v7 != v5);
      id v5 = [v3 countByEnumeratingWithState:&v19 objects:v24 count:16];
    }

    while (v5);
  }

  return v2;
}

void *sub_1002986E0(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)&OBJC_CLASS___PushRawMessage;
    a1 = objc_msgSendSuper2(&v12, "init");
    if (a1)
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);
      id v5 = [v4 copy];
      uint64_t v6 = (void *)a1[2];
      a1[2] = v5;

      id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 timestamp]);
      id v8 = [v7 copy];
      id v9 = (void *)a1[3];
      a1[3] = v8;

      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 topic]);
      a1[1] = sub_1002987B8((uint64_t)&OBJC_CLASS___PushRawMessage, v10);
    }
  }

  return a1;
}

uint64_t sub_1002987B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  objc_opt_self(&OBJC_CLASS___PushRawMessage);
  if ([v3 isEqualToString:@"com.apple.appstored"])
  {
    uint64_t v4 = 1LL;
  }

  else
  {
    objc_opt_self(&OBJC_CLASS___PushRawMessage);
    if ([v3 isEqualToString:@"com.apple.appstored-testflight"])
    {
      uint64_t v4 = 2LL;
    }

    else
    {
      objc_opt_self(&OBJC_CLASS___PushRawMessage);
      else {
        uint64_t v4 = 0LL;
      }
    }
  }

  return v4;
}

id *sub_10029885C(id *a1)
{
  if (a1) {
    a1 = (id *)a1[2];
  }
  return a1;
}

id *sub_100298878(id *a1)
{
  if (a1) {
    a1 = (id *)a1[3];
  }
  return a1;
}

__CFString *sub_100298894(uint64_t a1, uint64_t a2)
{
  return 0LL;
}

id sub_100298B00(void *a1)
{
  if (!a1 || [a1 expressionType]) {
    return 0LL;
  }
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a1 constantValue]);
  if ([v3 conformsToProtocol:&OBJC_PROTOCOL___NSFastEnumeration])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v11 = 0u;
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v11 objects:v16 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v12;
      do
      {
        id v9 = 0LL;
        do
        {
          if (*(void *)v12 != v8) {
            objc_enumerationMutation(v5);
          }
          objc_msgSend(v4, "addObject:", *(void *)(*((void *)&v11 + 1) + 8 * (void)v9), (void)v11);
          id v9 = (char *)v9 + 1;
        }

        while (v7 != v9);
        id v7 = [v5 countByEnumeratingWithState:&v11 objects:v16 count:16];
      }

      while (v7);
    }

    id v10 = [v4 copy];
  }

  else
  {
    if (!v3) {
      return 0LL;
    }
    __int128 v15 = v3;
    id v10 = (id)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
  }

  return v10;
}

id sub_100298C7C(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    if ([a1 expressionType] == (id)3) {
      a1 = (void *)objc_claimAutoreleasedReturnValue([v1 keyPath]);
    }
    else {
      a1 = 0LL;
    }
  }

  return a1;
}

id sub_100298CBC(id a1)
{
  id v1 = a1;
  if (a1)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_100298D5C;
    v4[3] = &unk_1003F06F8;
    id v5 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    int v2 = v5;
    sub_100298E9C(v1, (uint64_t)v4);
    id v1 = (id)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v2, "componentsJoinedByString:", @":"));
  }

  return v1;
}

uint64_t sub_100298D5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@/%ld",  v5,  [v3 code]));
  [v4 addObject:v6];

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  if (![v7 isEqualToString:AMSErrorDomain])
  {
LABEL_5:

    goto LABEL_6;
  }

  id v8 = [v3 code];

  if (v8 == (id)305)
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 userInfo]);
    id v10 = sub_1001DF2AC(v9, AMSErrorUserInfoKeyServerErrorCode);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v10);

    if (v7)
    {
      __int128 v11 = *(void **)(a1 + 32);
      __int128 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@/%@",  AMSServerErrorDomain,  v7));
      [v11 addObject:v12];
    }

    goto LABEL_5;
  }

void sub_100298E9C(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = a1;
    while (1)
    {
      id v6 = v3;
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 userInfo]);
      uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:NSUnderlyingErrorKey]);

      id v3 = (id)v5;
      if (!v5)
      {

        return;
      }
    }
  }

id sub_100298F48(id a1)
{
  id v1 = a1;
  if (a1)
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue([a1 domain]);
    id v1 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%@/%ld",  v2,  [v1 code]));
  }

  return v1;
}

id sub_100298FBC(void *a1)
{
  if (a1)
  {
    int v2 = (void *)objc_claimAutoreleasedReturnValue([a1 userInfo]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"dialogID"]);

    if (!v3)
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 userInfo]);
      id v5 = sub_1001DF5F4(v4, @"AMSServerPayload.metrics.dialogId");
      id v3 = (void *)objc_claimAutoreleasedReturnValue(v5);
    }
  }

  else
  {
    id v3 = 0LL;
  }

  return v3;
}

void *sub_100299040(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)&OBJC_CLASS___IAPInfoDAAPResponseDecoder;
    a1 = objc_msgSendSuper2(&v16, "init");
    if (a1)
    {
      uint64_t v4 = objc_opt_new(&OBJC_CLASS___NSArray);
      id v5 = (void *)a1[8];
      a1[8] = v4;

      id v6 = objc_opt_new(&OBJC_CLASS___NSArray);
      id v7 = (void *)a1[9];
      a1[9] = v6;

      id v8 = (void *)a1[7];
      a1[7] = &off_10040CDF0;

      id v9 = v3;
      if ([v9 length])
      {
        id v10 = [[DKDAAPParser alloc] initWithData:v9];
        [v10 setDelegate:a1];
        [v10 parse];
      }

      else
      {
        uint64_t v11 = ASDLogHandleForCategory(14LL);
        id v10 = (id)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_ERROR))
        {
          __int128 v14 = (void *)objc_opt_class(a1, v12);
          *(_DWORD *)__int128 buf = 138412290;
          __int128 v18 = v14;
          id v15 = v14;
          _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v10,  OS_LOG_TYPE_ERROR,  "[%@]: Response data 0 length",  buf,  0xCu);
        }
      }
    }
  }

  return a1;
}

id sub_10029A328(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v15 = 0LL;
  objc_super v16 = &v15;
  uint64_t v17 = 0x3032000000LL;
  __int128 v18 = sub_10029A95C;
  __int128 v19 = sub_10029A96C;
  id v20 = 0LL;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 itemID]);
  id v6 = sub_1002FE280((uint64_t)&OBJC_CLASS___AppInstallPredicates, 0LL, v4, v5, 0LL);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  if (v7)
  {
    id v8 = sub_1002EEBC0((uint64_t)&OBJC_CLASS___AppInstallsDatabaseStore);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10029A974;
    v12[3] = &unk_1003F0748;
    id v13 = v7;
    __int128 v14 = &v15;
    [v9 readUsingSession:v12];
  }

  id v10 = (id)v16[5];

  _Block_object_dispose(&v15, 8);
  return v10;
}

void sub_10029A478( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10029A490(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 items]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);

  if (!v5)
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
    if (v13)
    {
    }

    else if ([v7 success])
    {
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) externalID]);
      if (v14) {
        [*(id *)(a1 + 56) addObject:v14];
      }
      uint64_t v15 = *(void *)(*(void *)(a1 + 40) + 48LL);
      objc_super v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) itemID]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 stringValue]);
      sub_1002E2D28(v15, v17);

      [*(id *)(a1 + 40) completeWithSuccess];
      goto LABEL_16;
    }

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
    uint64_t v19 = ASDErrorWithSafeUserInfo(v18);
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue(v19);

    if (!v14) {
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  ASDErrorDomain,  924LL,  0LL));
    }
    uint64_t v20 = ASDLogHandleForCategory(2LL);
    __int128 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
      int v28 = 138412546;
      char v29 = v26;
      __int16 v30 = 2114;
      id v31 = v27;
      _os_log_error_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_ERROR,  "[%@] Redownload purchase failed with error: %{public}@",  (uint8_t *)&v28,  0x16u);
    }

    uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 48LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) itemID]);
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v23 stringValue]);
    sub_1002E2AD4(v22, v14, v24, *(void **)(a1 + 48));

    [*(id *)(a1 + 40) completeWithError:v14];
LABEL_16:

    goto LABEL_17;
  }

  uint64_t v8 = ASDLogHandleForCategory(2LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
    int v28 = 138412546;
    char v29 = v25;
    __int16 v30 = 2114;
    id v31 = v5;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%@] Redownload request failed with error: %{public}@",  (uint8_t *)&v28,  0x16u);
  }

  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 48LL);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) itemID]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 stringValue]);
  sub_1002E2AD4(v10, v5, v12, *(void **)(a1 + 48));

  [*(id *)(a1 + 40) completeWithError:v5];
LABEL_17:
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_10029A7BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(2LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logKey]);
      int v15 = 138412546;
      objc_super v16 = v14;
      __int16 v17 = 2114;
      id v18 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%@] Redownload purchase failed with error: %{public}@",  (uint8_t *)&v15,  0x16u);
    }

    uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 48LL);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) itemID]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 stringValue]);
    sub_1002E2AD4(v9, v6, v11, *(void **)(a1 + 48));
  }

  else
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 48LL);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) itemID]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 stringValue]);
    sub_1002E2D28(v12, v11);
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) externalID]);
  if (v13) {
    [*(id *)(a1 + 56) addObject:v13];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

uint64_t sub_10029A95C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10029A96C(uint64_t a1)
{
}

void sub_10029A974(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 connection]);
  id v4 = sub_10024C088((uint64_t)&OBJC_CLASS___AppInstallEntity, v3, *(void **)(a1 + 32));
  id v9 = (id)objc_claimAutoreleasedReturnValue(v4);

  id v5 = sub_1001E2734(v9, (uint64_t)@"external_id");
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

id sub_10029AFA4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = objc_opt_self(a1);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ams_DSID"));

  id v10 = sub_10029B028(v8, (uint64_t)[v9 unsignedLongLongValue], a3, a4);
  return v10;
}

id sub_10029B028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = 0LL;
  __int128 v21 = &v20;
  uint64_t v22 = 0x3032000000LL;
  uint64_t v23 = sub_10029B154;
  __int128 v24 = sub_10029B164;
  id v25 = 0LL;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  id v13 = sub_10029B16C;
  __int128 v14 = &unk_1003F0770;
  uint64_t v17 = a4;
  uint64_t v18 = a2;
  int v15 = &v20;
  uint64_t v16 = objc_opt_self(a1);
  uint64_t v19 = a3;
  uint64_t v6 = v12;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[AMSKeybag sharedInstance](&OBJC_CLASS___AMSKeybag, "sharedInstance"));
  id v8 = [v7 fairplayContextWithError:a4];

  sub_10011DF7C();
  if (!v9) {
    v13(v6, (uint64_t)v8);
  }

  id v10 = (id)v21[5];
  _Block_object_dispose(&v20, 8);

  return v10;
}

void sub_10029B13C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10029B154(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10029B164(uint64_t a1)
{
}

void sub_10029B16C(void *a1, uint64_t a2)
{
  id v4 = (void *)a1[6];
  objc_opt_self(a1[5]);
  sub_10014E024(0LL, 0LL, (uint64_t)&v19);
  if ((v19 - 1) >= 0x14)
  {
    if (v4) {
      void *v4 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"FairPlayErrorDomain",  v5,  0LL));
    }
    goto LABEL_12;
  }

  __int128 v17 = v19;
  uint64_t v18 = v20;
  *(void *)&__int128 v19 = 0LL;
  unsigned int v16 = 0;
  sub_10017B918(a2, a1[7], (uint64_t)&v17, 52428801LL, 0LL, (uint64_t)&v19, (uint64_t)&v16);
  int v7 = v6;
  if (v6 == -42052)
  {
    if (v16)
    {
      uint64_t v11 = -[NSData initWithBytesNoCopy:length:deallocator:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytesNoCopy:length:deallocator:",  (void)v19,  v16,  &stru_1003F0790);
      uint64_t v12 = *(void *)(a1[4] + 8LL);
      id v13 = *(void **)(v12 + 40);
      *(void *)(v12 + 40) = v11;
    }

    __int128 v14 = (_BYTE *)a1[8];
    if (v14) {
      _BYTE *v14 = 1;
    }
  }

  else if (!v6)
  {
    id v8 = -[NSData initWithBytesNoCopy:length:deallocator:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBytesNoCopy:length:deallocator:",  (void)v19,  v16,  &stru_1003F0790);
    uint64_t v9 = *(void *)(a1[4] + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    goto LABEL_12;
  }

  if (!*(void *)(*(void *)(a1[4] + 8LL) + 40LL))
  {
    int v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"FairPlayErrorDomain",  v7,  0LL));
    goto LABEL_13;
  }

uint64_t sub_10029B370(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  if (v3 && [v3 length])
  {
    id v4 = v3;
    objc_opt_self(&OBJC_CLASS___FairPlay);
    id v5 = v4;
    [v5 fileSystemRepresentation];

    sub_1001242AC();
    LODWORD(v4) = v6;
    objc_opt_self(&OBJC_CLASS___FairPlay);
    int v7 = 2 * (((_DWORD)v4 + 42595) < 0xFFFFFFFE);
    id v8 = v5;
    objc_opt_self(&OBJC_CLASS___FairPlay);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ams_activeiTunesAccount"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ams_DSID"));
    [v11 unsignedLongLongValue];

    id v12 = v8;
    [v12 fileSystemRepresentation];

    sub_100128300();
    int v14 = v13;

    objc_opt_self(&OBJC_CLASS___FairPlay);
    int v15 = 2 * ((v14 + 42595) < 0xFFFFFFFE);
    uint64_t v16 = v15 | v7;
  }

  else
  {
    uint64_t v16 = 0LL;
  }

  return v16;
}

void sub_10029B4E8(id a1, void *a2, unint64_t a3)
{
}

void sub_10029BA7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    self = v3;
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    id Property = self;
    if (self) {
      id Property = objc_getProperty(self, v4, 24LL, 1);
    }
    id v6 = Property;

    if (v6)
    {
      id v8 = *(void **)(a1 + 24);
      id v9 = self;
      if (self) {
        id v9 = objc_getProperty(self, v7, 24LL, 1);
      }
      id v10 = v9;
      [v8 setObject:self forKeyedSubscript:v10];

      sub_10029BB2C(a1);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 8));
    id v3 = self;
  }
}

void sub_10029BB2C(uint64_t a1)
{
  if (a1)
  {
    os_unfair_lock_assert_owner((os_unfair_lock_t)(a1 + 8));
    if (!*(void *)(a1 + 32))
    {
      dispatch_queue_global_t global_queue = dispatch_get_global_queue(21LL, 0LL);
      id v3 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      dispatch_source_t v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0LL, 0LL, v3);
      id v5 = *(void **)(a1 + 32);
      *(void *)(a1 + 32) = v4;

      id v6 = *(dispatch_source_s **)(a1 + 32);
      dispatch_time_t v7 = dispatch_time(0xFFFFFFFFFFFFFFFELL, 120000000000LL);
      dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0x37E11D600uLL);
      objc_initWeak(&location, (id)a1);
      id v8 = *(dispatch_source_s **)(a1 + 32);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      void v9[2] = sub_10029BD50;
      void v9[3] = &unk_1003ECBA0;
      objc_copyWeak(&v10, &location);
      dispatch_source_set_event_handler(v8, v9);
      dispatch_resume(*(dispatch_object_t *)(a1 + 32));
      objc_destroyWeak(&v10);
      objc_destroyWeak(&location);
    }
  }

uint64_t sub_10029BC50(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_source_t v4 = (os_unfair_lock_s *)(a1 + 8);
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 8));
    if (v3
      && (id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) objectForKeyedSubscript:v3]),
          v5,
          v5))
    {
      [*(id *)(a1 + 24) setObject:0 forKeyedSubscript:v3];
      sub_10029BB2C(a1);
      a1 = 1LL;
    }

    else
    {
      a1 = 0LL;
    }

    os_unfair_lock_unlock(v4);
  }

  return a1;
}

id *sub_10029BCE0(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_source_t v4 = (os_unfair_lock_s *)(a1 + 1);
    os_unfair_lock_lock_with_options(a1 + 1, 0x10000LL);
    if (v3) {
      a1 = (id *)objc_claimAutoreleasedReturnValue([a1[3] objectForKeyedSubscript:v3]);
    }
    else {
      a1 = 0LL;
    }
    os_unfair_lock_unlock(v4);
  }

  return a1;
}

void sub_10029BD50(uint64_t a1)
{
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    int v2 = WeakRetained + 2;
    uint64_t v18 = (id *)WeakRetained;
    os_unfair_lock_lock(WeakRetained + 2);
    os_unfair_lock_assert_owner(v2);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v18[3] allValues]);
    id v4 = v18[2];
    id v19 = 0LL;
    id v5 = v4;
    id v6 = v3;
    objc_opt_self(&OBJC_CLASS___RequestThrottlePersistence);
    dispatch_time_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v6,  1LL,  &v19));

    if (v7) {
      unsigned int v8 = [v7 writeToURL:v5 options:1 error:&v19];
    }
    else {
      unsigned int v8 = 0;
    }

    id v9 = v19;
    uint64_t v10 = ASDLogHandleForCategory(25LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    id v12 = v11;
    if (v8)
    {
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = [v18[3] count];
        id v14 = v18[2];
        *(_DWORD *)__int128 buf = 134218242;
        id v21 = v13;
        __int16 v22 = 2114;
        id v23 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Throttle: Wrote %lu records to: %{public}@",  buf,  0x16u);
      }
    }

    else if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      id v16 = [v18[3] count];
      id v17 = v18[2];
      *(_DWORD *)__int128 buf = 134218498;
      id v21 = v16;
      __int16 v22 = 2114;
      id v23 = v17;
      __int16 v24 = 2114;
      id v25 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "Throttle: Writing %lu records to: %{public}@ failed: %{public}@",  buf,  0x20u);
    }

    id v15 = v18[4];
    void v18[4] = 0LL;

    os_unfair_lock_unlock(v2);
    id WeakRetained = (os_unfair_lock_s *)v18;
  }
}

id sub_10029C090(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10029C108;
  block[3] = &unk_1003E9EA8;
  void block[4] = objc_opt_self(a1);
  if (qword_100462518 != -1) {
    dispatch_once(&qword_100462518, block);
  }
  return (id)qword_100462510;
}

void sub_10029C108(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  int v2 = (void *)qword_100462510;
  qword_100462510 = (uint64_t)v1;
}

uint64_t sub_10029C398(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10029C3A8(uint64_t a1)
{
}

void sub_10029C3B0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = *(void **)(a1 + 24);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10029C484;
    v11[3] = &unk_1003EA5C0;
    void v11[4] = a1;
    id v12 = v8;
    id v13 = v7;
    id v14 = v9;
    sub_10022ED10(v10, v11);
  }
}

void sub_10029C484(uint64_t a1)
{
  uint64_t v45 = 0LL;
  __int128 v46 = &v45;
  uint64_t v47 = 0x3032000000LL;
  __int128 v48 = sub_10029C398;
  uint64_t v49 = sub_10029C3A8;
  id v50 = 0LL;
  uint64_t v39 = 0LL;
  id v40 = &v39;
  uint64_t v41 = 0x3032000000LL;
  __int128 v42 = sub_10029C398;
  __int128 v43 = sub_10029C3A8;
  id v44 = 0LL;
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
  if (v2)
  {
    uint64_t v3 = ASDLogHandleForCategory(14LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (id)objc_opt_class(*(void *)(a1 + 32), v5);
      uint64_t v7 = *(void *)(a1 + 40);
      id v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "componentsJoinedByString:", @", "));
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v2 hashedDescription]);
      *(_DWORD *)__int128 buf = 138413058;
      id v52 = v6;
      __int16 v53 = 2114;
      uint64_t v54 = v7;
      __int16 v55 = 2112;
      id v56 = v8;
      __int16 v57 = 2114;
      uint64_t v58 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%@]: %{public}@ Get IAPs: %@ for account: %{public}@",  buf,  0x2Au);
    }

    uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 16LL);
    id v31 = _NSConcreteStackBlock;
    uint64_t v32 = 3221225472LL;
    uint64_t v33 = sub_10029C934;
    char v34 = &unk_1003F07E0;
    uint64_t v37 = &v39;
    id v35 = *(id *)(a1 + 48);
    id v11 = v2;
    id v36 = v11;
    id v38 = &v45;
    [v10 readUsingSession:&v31];
    if (v40[5])
    {
      uint64_t v12 = ASDLogHandleForCategory(14LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = (id)objc_opt_class(*(void *)(a1 + 32), v14);
        uint64_t v16 = *(void *)(a1 + 40);
        id v17 = objc_msgSend((id)v40[5], "count", v31, v32, v33, v34, v35);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v11 hashedDescription]);
        *(_DWORD *)__int128 buf = 138413058;
        id v52 = v15;
        __int16 v53 = 2114;
        uint64_t v54 = v16;
        __int16 v55 = 2048;
        id v56 = v17;
        __int16 v57 = 2112;
        uint64_t v58 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%@]: %{public}@ Got %li IAPs for account: %@",  buf,  0x2Au);
      }
    }

    else
    {
      uint64_t v22 = ASDLogHandleForCategory(14LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = (void *)objc_opt_class(*(void *)(a1 + 32), v23);
        uint64_t v28 = *(void *)(a1 + 40);
        char v29 = (void *)v46[5];
        *(_DWORD *)__int128 buf = 138412802;
        id v52 = v27;
        __int16 v53 = 2114;
        uint64_t v54 = v28;
        __int16 v55 = 2114;
        id v56 = v29;
        id v30 = v27;
        _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Failed to get IAPs with error: %{public}@",  buf,  0x20u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v19 = ASDLogHandleForCategory(14LL);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      id v24 = (id)objc_opt_class(*(void *)(a1 + 32), v21);
      uint64_t v25 = *(void *)(a1 + 40);
      id v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "componentsJoinedByString:", @", "));
      *(_DWORD *)__int128 buf = 138413058;
      id v52 = v24;
      __int16 v53 = 2114;
      uint64_t v54 = v25;
      __int16 v55 = 2114;
      id v56 = v26;
      __int16 v57 = 2114;
      uint64_t v58 = 0LL;
      _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Failed to get IAPs: %{public}@ with no active account DSID error: %{public}@",  buf,  0x2Au);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v45, 8);
}

void sub_10029C8E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10029C934(void *a1, void *a2)
{
  uint64_t v3 = (void *)a1[4];
  id v4 = (void *)a1[5];
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_DSID"));
  uint64_t v7 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v7 + 40);
  id v8 = sub_10026E380(v5, v3, v6);
  uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);

  objc_storeStrong((id *)(v7 + 40), obj);
  uint64_t v10 = *(void *)(a1[6] + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_10029C9D8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = *(void **)(a1 + 24);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_10029CAAC;
    v11[3] = &unk_1003EA5C0;
    void v11[4] = a1;
    id v12 = v8;
    id v13 = v7;
    id v14 = v9;
    sub_10022ED10(v10, v11);
  }
}

void sub_10029CAAC(uint64_t a1)
{
  uint64_t v45 = 0LL;
  __int128 v46 = &v45;
  uint64_t v47 = 0x3032000000LL;
  __int128 v48 = sub_10029C398;
  uint64_t v49 = sub_10029C3A8;
  id v50 = 0LL;
  uint64_t v39 = 0LL;
  id v40 = &v39;
  uint64_t v41 = 0x3032000000LL;
  __int128 v42 = sub_10029C398;
  __int128 v43 = sub_10029C3A8;
  id v44 = 0LL;
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
  if (v2)
  {
    uint64_t v3 = ASDLogHandleForCategory(14LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (id)objc_opt_class(*(void *)(a1 + 32), v5);
      uint64_t v7 = *(void *)(a1 + 40);
      id v8 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "componentsJoinedByString:", @", "));
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v2 hashedDescription]);
      *(_DWORD *)__int128 buf = 138413058;
      id v52 = v6;
      __int16 v53 = 2114;
      uint64_t v54 = v7;
      __int16 v55 = 2112;
      id v56 = v8;
      __int16 v57 = 2114;
      uint64_t v58 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%@]: %{public}@ Get IAPs for app adam IDs: %@ for account: %{public}@",  buf,  0x2Au);
    }

    uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 16LL);
    id v31 = _NSConcreteStackBlock;
    uint64_t v32 = 3221225472LL;
    uint64_t v33 = sub_10029CF5C;
    char v34 = &unk_1003F07E0;
    uint64_t v37 = &v39;
    id v35 = *(id *)(a1 + 48);
    id v11 = v2;
    id v36 = v11;
    id v38 = &v45;
    [v10 readUsingSession:&v31];
    if (v40[5])
    {
      uint64_t v12 = ASDLogHandleForCategory(14LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = (id)objc_opt_class(*(void *)(a1 + 32), v14);
        uint64_t v16 = *(void *)(a1 + 40);
        id v17 = objc_msgSend((id)v40[5], "count", v31, v32, v33, v34, v35);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v11 hashedDescription]);
        *(_DWORD *)__int128 buf = 138413058;
        id v52 = v15;
        __int16 v53 = 2114;
        uint64_t v54 = v16;
        __int16 v55 = 2048;
        id v56 = v17;
        __int16 v57 = 2112;
        uint64_t v58 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%@]: %{public}@ Got %li IAPs for account: %@",  buf,  0x2Au);
      }
    }

    else
    {
      uint64_t v22 = ASDLogHandleForCategory(14LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v27 = (void *)objc_opt_class(*(void *)(a1 + 32), v23);
        uint64_t v28 = *(void *)(a1 + 40);
        char v29 = (void *)v46[5];
        *(_DWORD *)__int128 buf = 138412802;
        id v52 = v27;
        __int16 v53 = 2114;
        uint64_t v54 = v28;
        __int16 v55 = 2114;
        id v56 = v29;
        id v30 = v27;
        _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Failed to get IAPs with error: %{public}@",  buf,  0x20u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v19 = ASDLogHandleForCategory(14LL);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      id v24 = (id)objc_opt_class(*(void *)(a1 + 32), v21);
      uint64_t v25 = *(void *)(a1 + 40);
      id v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "componentsJoinedByString:", @", "));
      *(_DWORD *)__int128 buf = 138413058;
      id v52 = v24;
      __int16 v53 = 2114;
      uint64_t v54 = v25;
      __int16 v55 = 2114;
      id v56 = v26;
      __int16 v57 = 2114;
      uint64_t v58 = 0LL;
      _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Failed to get IAPs for app adam IDs: %{public}@ with no active account DSID error: %{public}@",  buf,  0x2Au);
    }

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  _Block_object_dispose(&v39, 8);
  _Block_object_dispose(&v45, 8);
}

void sub_10029CF10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10029CF5C(void *a1, void *a2)
{
  uint64_t v3 = (void *)a1[4];
  id v4 = (void *)a1[5];
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_DSID"));
  uint64_t v7 = *(void *)(a1[7] + 8LL);
  id obj = *(id *)(v7 + 40);
  id v8 = sub_10026E4D8(v5, v3, v6);
  uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);

  objc_storeStrong((id *)(v7 + 40), obj);
  uint64_t v10 = *(void *)(a1[6] + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_10029D000(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = *(void **)(a1 + 24);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_10029D0AC;
    v8[3] = &unk_1003EA390;
    void v8[4] = a1;
    id v9 = v5;
    id v10 = v6;
    sub_10022ED10(v7, v8);
  }
}

void sub_10029D0AC(void *a1)
{
  uint64_t v40 = 0LL;
  uint64_t v41 = &v40;
  uint64_t v42 = 0x3032000000LL;
  __int128 v43 = sub_10029C398;
  id v44 = sub_10029C3A8;
  id v45 = 0LL;
  uint64_t v34 = 0LL;
  id v35 = &v34;
  uint64_t v36 = 0x3032000000LL;
  uint64_t v37 = sub_10029C398;
  id v38 = sub_10029C3A8;
  id v39 = 0LL;
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
  if (v2)
  {
    uint64_t v3 = ASDLogHandleForCategory(14LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (id)objc_opt_class(a1[4], v5);
      uint64_t v7 = a1[5];
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v2 hashedDescription]);
      *(_DWORD *)__int128 buf = 138412802;
      id v47 = v6;
      __int16 v48 = 2114;
      uint64_t v49 = v7;
      __int16 v50 = 2114;
      id v51 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%@]: %{public}@ Get IAPs for account: %{public}@",  buf,  0x20u);
    }

    id v9 = *(void **)(a1[4] + 16LL);
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    void v30[2] = sub_10029D4F4;
    void v30[3] = &unk_1003F07B8;
    uint64_t v32 = &v34;
    id v10 = v2;
    id v31 = v10;
    uint64_t v33 = &v40;
    [v9 readUsingSession:v30];
    if (v35[5])
    {
      uint64_t v11 = ASDLogHandleForCategory(14LL);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = (id)objc_opt_class(a1[4], v13);
        uint64_t v15 = a1[5];
        id v16 = [(id)v35[5] count];
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v10 hashedDescription]);
        *(_DWORD *)__int128 buf = 138413058;
        id v47 = v14;
        __int16 v48 = 2114;
        uint64_t v49 = v15;
        __int16 v50 = 2048;
        id v51 = v16;
        __int16 v52 = 2112;
        __int16 v53 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[%@]: %{public}@ Got %li IAPs for account: %@",  buf,  0x2Au);
      }
    }

    else
    {
      uint64_t v21 = ASDLogHandleForCategory(14LL);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        id v26 = (void *)objc_opt_class(a1[4], v22);
        uint64_t v27 = a1[5];
        uint64_t v28 = (void *)v41[5];
        *(_DWORD *)__int128 buf = 138412802;
        id v47 = v26;
        __int16 v48 = 2114;
        uint64_t v49 = v27;
        __int16 v50 = 2114;
        id v51 = v28;
        id v29 = v26;
        _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Failed to get IAPs with error: %{public}@",  buf,  0x20u);
      }
    }

    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    uint64_t v18 = ASDLogHandleForCategory(14LL);
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = (void *)objc_opt_class(a1[4], v20);
      uint64_t v24 = a1[5];
      *(_DWORD *)__int128 buf = 138412546;
      id v47 = v23;
      __int16 v48 = 2114;
      uint64_t v49 = v24;
      id v25 = v23;
      _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Failed to get IAPs - no active account DSID",  buf,  0x16u);
    }

    (*(void (**)(void))(a1[6] + 16LL))();
  }

  _Block_object_dispose(&v34, 8);
  _Block_object_dispose(&v40, 8);
}

void sub_10029D4A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10029D4F4(void *a1, void *a2)
{
  uint64_t v3 = (void *)a1[4];
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ams_DSID"));
  uint64_t v6 = *(void *)(a1[6] + 8LL);
  id obj = *(id *)(v6 + 40);
  id v7 = sub_10026E174(v4, v5);
  uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);

  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v9 = *(void *)(a1[5] + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

void sub_10029D594(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(void **)(a1 + 24);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_10029D640;
    v8[3] = &unk_1003EA390;
    void v8[4] = a1;
    id v9 = v5;
    id v10 = v6;
    sub_10022ED10(v7, v8);
  }
}

void sub_10029D640(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(void **)(a1 + 48);
  double v3 = COERCE_DOUBLE(*(id *)(a1 + 40));
  id v4 = v2;
  if (v1)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
    id v6 = v5;
    if (v5 && (id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_DSID")), v7, v7))
    {
      if (*(_BYTE *)(v1 + 32))
      {
        uint64_t v8 = ASDLogHandleForCategory(14LL);
        id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = objc_opt_class(v1, v10);
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(double *)&buf[14] = v3;
          id v11 = *(id *)&buf[4];
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%@]: %{public}@ Ignoring update request - currently updating",  buf,  0x16u);
        }

        id v12 = sub_1001861DC(5LL, 0LL);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        v4[2](v4, v13);
      }

      else
      {
        uint64_t v51 = 0LL;
        __int16 v52 = &v51;
        uint64_t v53 = 0x3032000000LL;
        uint64_t v54 = sub_10029C398;
        __int16 v55 = sub_10029C3A8;
        id v56 = 0LL;
        uint64_t v45 = 0LL;
        __int128 v46 = (double *)&v45;
        uint64_t v47 = 0x3032000000LL;
        __int16 v48 = sub_10029C398;
        uint64_t v49 = sub_10029C3A8;
        id v50 = 0LL;
        id v17 = *(void **)(v1 + 16);
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = sub_10029EAA4;
        uint64_t v64 = &unk_1003F07B8;
        uint64_t v66 = &v51;
        id v18 = v6;
        id v65 = v18;
        id v67 = &v45;
        [v17 readUsingSession:buf];
        if (*((void *)v46 + 5))
        {
          uint64_t v19 = ASDLogHandleForCategory(14LL);
          uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            uint64_t v42 = (void *)objc_opt_class(v1, v21);
            double v43 = v46[5];
            *(_DWORD *)__int16 v57 = 138412546;
            id v58 = v42;
            __int16 v59 = 2112;
            double v60 = v43;
            id v44 = v42;
            _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "[%@]: Error getting last updated date: %@",  v57,  0x16u);
          }
        }

        if (!v52[5]) {
          goto LABEL_21;
        }
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v22 timeIntervalSinceDate:v52[5]];
        double v24 = v23;
        uint64_t v25 = objc_opt_self(&OBJC_CLASS___IAPInfoManager);
        id v26 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        double v28 = sub_100256030((uint64_t)v27, (uint64_t)@"iap-daap/update-polling-frequency-secs", 3600.0);

        uint64_t v29 = ASDLogHandleForCategory(14LL);
        id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          uint64_t v32 = (void *)objc_opt_class(v25, v31);
          *(_DWORD *)__int16 v57 = 138543618;
          id v58 = v32;
          __int16 v59 = 2048;
          double v60 = v28;
          id v33 = v32;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_INFO,  "[%{public}@]: Update polling frequency interval: %.0f",  v57,  0x16u);
        }

        if (v24 <= v28)
        {
          uint64_t v34 = ASDLogHandleForCategory(14LL);
          id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            id v37 = (id)objc_opt_class(v1, v36);
            id v38 = (void *)v52[5];
            if (v38)
            {
              [v38 timeIntervalSince1970];
              uint64_t v40 = (uint64_t)v39;
            }

            else
            {
              uint64_t v40 = 0LL;
            }

            *(_DWORD *)__int16 v57 = 138412802;
            id v58 = v37;
            __int16 v59 = 2114;
            double v60 = v3;
            __int16 v61 = 2048;
            uint64_t v62 = v40;
            _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_INFO,  "[%@]: %{public}@ Polling update not needed. Last updated: %{time_t}ld",  v57,  0x20u);
          }

          v4[2](v4, 0LL);
        }

        else
        {
LABEL_21:
          sub_10029E83C(v1, v18, *(void **)&v3, v4);
        }

        _Block_object_dispose(&v45, 8);
        _Block_object_dispose(&v51, 8);
      }
    }

    else
    {
      uint64_t v14 = ASDLogHandleForCategory(14LL);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = objc_opt_class(v1, v16);
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(double *)&buf[14] = v3;
        id v41 = *(id *)&buf[4];
        _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Ignoring update request - there is no active account DSID",  buf,  0x16u);
      }

      v4[2](v4, 0LL);
    }
  }
}

void sub_10029DB4C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_10029DB88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(void **)(a1 + 24);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_10029DC34;
    v8[3] = &unk_1003EA390;
    void v8[4] = a1;
    id v9 = v5;
    id v10 = v6;
    sub_10022ED10(v7, v8);
  }
}

void sub_10029DC34(uint64_t a1)
{
  v35[0] = 0LL;
  v35[1] = v35;
  v35[2] = 0x3032000000LL;
  v35[3] = sub_10029C398;
  v35[4] = sub_10029C3A8;
  id v36 = 0LL;
  int v2 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
  double v3 = v2;
  if (v2)
  {
    *(void *)double v43 = 0LL;
    *(void *)&v43[8] = v43;
    *(void *)&v43[16] = 0x3032000000LL;
    id v44 = sub_10029C398;
    uint64_t v45 = sub_10029C3A8;
    id v46 = 0LL;
    id v4 = *(void **)(*(void *)(a1 + 32) + 16LL);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    void v31[2] = sub_10029E014;
    v31[3] = &unk_1003F07B8;
    id v33 = v43;
    id v32 = v2;
    uint64_t v34 = v35;
    [v4 readUsingSession:v31];
    if (!*(void *)(*(void *)&v43[8] + 40LL)) {
      goto LABEL_6;
    }
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v5 timeIntervalSinceDate:*(void *)(*(void *)&v43[8] + 40)];
    double v7 = v6;
    uint64_t v8 = objc_opt_self(&OBJC_CLASS___IAPInfoManager);
    id v9 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    double v11 = sub_100256030((uint64_t)v10, (uint64_t)@"iap-daap/forced-refresh-frequency-minutes", 10080.0);

    uint64_t v12 = ASDLogHandleForCategory(14LL);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = (void *)objc_opt_class(v8, v14);
      *(_DWORD *)__int128 buf = 138543618;
      id v38 = v15;
      __int16 v39 = 2048;
      double v40 = v11;
      id v16 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_INFO,  "[%{public}@]: Force refresh interval: %.0f",  buf,  0x16u);
    }

    if (v7 <= v11 * 60.0)
    {
      uint64_t v20 = ASDLogHandleForCategory(14LL);
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        id v23 = (id)objc_opt_class(*(void *)(a1 + 32), v22);
        double v24 = *(double *)(a1 + 40);
        uint64_t v25 = *(void **)(*(void *)&v43[8] + 40LL);
        if (v25)
        {
          [v25 timeIntervalSince1970];
          uint64_t v27 = (uint64_t)v26;
        }

        else
        {
          uint64_t v27 = 0LL;
        }

        *(_DWORD *)__int128 buf = 138412802;
        id v38 = v23;
        __int16 v39 = 2114;
        double v40 = v24;
        __int16 v41 = 2048;
        uint64_t v42 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_INFO,  "[%@]: %{public}@ Update not needed. Last updated: %{time_t}ld",  buf,  0x20u);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    else
    {
LABEL_6:
      sub_10029E0B4(*(void *)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48));
    }

    _Block_object_dispose(v43, 8);
  }

  else
  {
    uint64_t v17 = ASDLogHandleForCategory(14LL);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      double v28 = (void *)objc_opt_class(*(void *)(a1 + 32), v19);
      uint64_t v29 = *(void *)(a1 + 40);
      *(_DWORD *)double v43 = 138412546;
      *(void *)&void v43[4] = v28;
      *(_WORD *)&v43[12] = 2114;
      *(void *)&v43[14] = v29;
      id v30 = v28;
      _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Failed to update IAPs - no active account DSID",  v43,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  _Block_object_dispose(v35, 8);
}

void sub_10029DFD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10029E014(void *a1, void *a2)
{
  double v3 = (void *)a1[4];
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ams_DSID"));
  uint64_t v6 = *(void *)(a1[6] + 8LL);
  id obj = *(id *)(v6 + 40);
  id v7 = sub_10026E630((uint64_t)v4, v5);
  uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);

  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v9 = *(void *)(a1[5] + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

void sub_10029E0B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
    uint64_t v8 = v7;
    if (v7 && (uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ams_DSID")), v9, v9))
    {
      uint64_t v10 = ASDLogHandleForCategory(14LL);
      double v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = (void *)objc_opt_class(a1, v12);
        id v14 = v13;
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v8 hashedDescription]);
        int v20 = 138412802;
        id v21 = v13;
        __int16 v22 = 2114;
        id v23 = v5;
        __int16 v24 = 2114;
        uint64_t v25 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "[%@]: %{public}@ Starting update for account: %{public}@",  (uint8_t *)&v20,  0x20u);
      }

      sub_10029E83C(a1, v8, v5, v6);
    }

    else
    {
      uint64_t v16 = ASDLogHandleForCategory(14LL);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        int v20 = 138412546;
        id v21 = (id)objc_opt_class(a1, v18);
        __int16 v22 = 2114;
        id v23 = v5;
        id v19 = v21;
        _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Ignoring update request - there is no active account DSID",  (uint8_t *)&v20,  0x16u);
      }

      (*((void (**)(id, void))v6 + 2))(v6, 0LL);
    }
  }
}

void sub_10029E35C(uint64_t a1)
{
}

void sub_10029E3E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = sub_100316A0C((uint64_t)&OBJC_CLASS___XPCRequestToken, 1);
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  sub_10029E0B4(v2, v4, *(void **)(a1 + 40));
}

void sub_10029E43C(uint64_t a1, void *a2)
{
  double v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ams_DSID"));
  id v6 = sub_10026E174(v4, v5);
  uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  id v14 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_DSID"));
  id v10 = sub_10026E824((uint64_t)v4, v14);
  uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);

  uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;
}

void sub_10029E4F4(uint64_t a1, void *a2)
{
  double v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v9 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ams_DSID"));
  id v5 = sub_10026E824((uint64_t)v4, v9);
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);

  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;
}

void sub_10029E5C8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ActiveAccountObserver activeAccount](&OBJC_CLASS___ActiveAccountObserver, "activeAccount"));
  if (v2)
  {
    double v3 = sub_100316A0C((uint64_t)&OBJC_CLASS___XPCRequestToken, 1);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = ASDLogHandleForCategory(14LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = (void *)objc_opt_class(*(void *)(a1 + 32), v7);
      id v9 = v8;
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v2 hashedDescription]);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v16 = v8;
      __int16 v17 = 2114;
      uint64_t v18 = v4;
      __int16 v19 = 2114;
      int v20 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%@]: %{public}@ Refreshing IAPs after account change for: %{public}@",  buf,  0x20u);
    }

    uint64_t v11 = *(void *)(a1 + 32);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_10029E750;
    v13[3] = &unk_1003E9B18;
    void v13[4] = v11;
    id v14 = v4;
    id v12 = v4;
    sub_10029D594(v11, v12, v13);
  }
}

void sub_10029E750(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory(14LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = (void *)objc_opt_class(*(void *)(a1 + 32), v6);
      uint64_t v8 = *(void *)(a1 + 40);
      int v10 = 138412802;
      uint64_t v11 = v7;
      __int16 v12 = 2114;
      uint64_t v13 = v8;
      __int16 v14 = 2114;
      id v15 = v3;
      id v9 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Failed to refresh after active account changed error: %{public}@",  (uint8_t *)&v10,  0x20u);
    }
  }
}

void sub_10029E83C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v27 = 0LL;
  id v10 = v7;
  id v11 = v8;
  uint64_t v32 = 0LL;
  id v33 = &v32;
  uint64_t v34 = 0x3032000000LL;
  id v35 = sub_10029C398;
  id v36 = sub_10029C3A8;
  id v37 = 0LL;
  __int16 v12 = *(void **)(a1 + 16);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_10029E4F4;
  void v28[3] = &unk_1003F0830;
  id v30 = &v32;
  id v13 = v10;
  id v29 = v13;
  uint64_t v31 = &v27;
  [v12 readUsingSession:v28];
  __int16 v14 = sub_100322D40((uint64_t)&OBJC_CLASS___IAPInfoUpdateRequestContext, (void *)v33[5], v13, v11);

  _Block_object_dispose(&v32, 8);
  id v15 = v27;
  if (v14)
  {
    *(_BYTE *)(a1 + 32) = 1;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[KeepAlive keepAliveWithName:]( &OBJC_CLASS___KeepAlive,  "keepAliveWithName:",  @"com.apple.appstoredaemon.IAPInfoManager.update"));
    __int16 v17 = sub_1002704F0((id *)objc_alloc(&OBJC_CLASS___IAPInfoUpdateRequest), *(void **)(a1 + 8), v14);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472LL;
    void v19[2] = sub_10029EF50;
    v19[3] = &unk_1003F0880;
    id v20 = v15;
    id v21 = v14;
    uint64_t v22 = a1;
    id v23 = v13;
    id v24 = v11;
    id v25 = v16;
    id v26 = v9;
    id v18 = v16;
    sub_100270588((uint64_t)v17, v19);
  }

  else
  {
    *(_BYTE *)(a1 + 32) = 0;
    (*((void (**)(id, id))v9 + 2))(v9, v15);
  }
}

void sub_10029EA8C(_Unwind_Exception *a1)
{
}

void sub_10029EAA4(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v4 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ams_DSID"));
  uint64_t v6 = *(void *)(a1[6] + 8LL);
  id obj = *(id *)(v6 + 40);
  id v7 = sub_10026E630((uint64_t)v4, v5);
  uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);

  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v9 = *(void *)(a1[5] + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;
}

void sub_10029EB44(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    uint64_t v6 = (void *)a1[4];
    id v7 = a2;
    uint64_t v8 = v7;
    if (v6)
    {
      uint64_t v44 = 0LL;
      uint64_t v45 = &v44;
      uint64_t v46 = 0x2020000000LL;
      char v47 = 1;
      uint64_t v38 = 0LL;
      __int16 v39 = &v38;
      uint64_t v40 = 0x3032000000LL;
      __int16 v41 = sub_10029C398;
      uint64_t v42 = sub_10029C3A8;
      id v43 = 0LL;
      uint64_t v9 = (void *)v6[2];
      *(void *)__int128 buf = _NSConcreteStackBlock;
      *(void *)&uint8_t buf[8] = 3221225472LL;
      *(void *)&uint8_t buf[16] = sub_10029F600;
      uint64_t v49 = &unk_1003F08A8;
      *(void *)&__int128 v50 = v7;
      *((void *)&v50 + 1) = &v44;
      uint64_t v51 = &v38;
      [v9 modifyUsingTransaction:buf];
      if (*((_BYTE *)v45 + 24) && (notify_post("com.apple.appstored.IAPInfoDatabaseUpdated"), *((_BYTE *)v45 + 24)))
      {
        uint64_t v6 = 0LL;
        BOOL v10 = 1;
      }

      else
      {
        uint64_t v6 = (id) v39[5];
        BOOL v10 = *((_BYTE *)v45 + 24) != 0;
      }

      _Block_object_dispose(&v38, 8);
      _Block_object_dispose(&v44, 8);
    }

    else
    {
      BOOL v10 = 0;
    }

    id v11 = v6;
    uint64_t v12 = ASDLogHandleForCategory(14LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    __int16 v14 = v13;
    if (v10)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v16 = (void *)objc_opt_class(a1[4], v15);
        uint64_t v18 = a1[5];
        __int16 v17 = (void *)a1[6];
        id v19 = v16;
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v17 hashedDescription]);
        *(_DWORD *)__int128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v18;
        *(_WORD *)&buf[22] = 2114;
        uint64_t v49 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "[%@]: %{public}@ Completed update for account: %{public}@",  buf,  0x20u);
      }

      (*(void (**)(void))(a1[8] + 16LL))();
    }

    else
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        id v33 = (void *)objc_opt_class(a1[4], v24);
        uint64_t v35 = a1[5];
        uint64_t v34 = (void *)a1[6];
        id v36 = v33;
        id v37 = (void *)objc_claimAutoreleasedReturnValue([v34 hashedDescription]);
        *(_DWORD *)__int128 buf = 138413058;
        *(void *)&uint8_t buf[4] = v33;
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v35;
        *(_WORD *)&buf[22] = 2114;
        uint64_t v49 = v37;
        LOWORD(v50) = 2114;
        *(void *)((char *)&v50 + 2) = v11;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Failed to import for account %{public}@ error: %{public}@",  buf,  0x2Au);
      }

      uint64_t v25 = a1[8];
      id v26 = sub_1001861DC(0LL, (uint64_t)v11);
      id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      (*(void (**)(uint64_t, void *))(v25 + 16))(v25, v27);
    }
  }

  else
  {
    uint64_t v21 = ASDLogHandleForCategory(14LL);
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      double v28 = (void *)objc_opt_class(a1[4], v23);
      uint64_t v30 = a1[5];
      id v29 = (void *)a1[6];
      id v31 = v28;
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v29 hashedDescription]);
      *(_DWORD *)__int128 buf = 138413058;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)&buf[14] = v30;
      *(_WORD *)&buf[22] = 2114;
      uint64_t v49 = v32;
      LOWORD(v50) = 2114;
      *(void *)((char *)&v50 + 2) = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Failed update for acccount %{public}@ error: %{public}@",  buf,  0x2Au);
    }

    (*(void (**)(void))(a1[8] + 16LL))();
  }

  *(_BYTE *)(a1[4] + 32LL) = 0;
}

void sub_10029EF24( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_10029EF50(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v7 = a3;
  if (*(void *)(a1 + 32))
  {
    *(_BYTE *)(*(void *)(a1 + 48) + 32LL) = 0;
    uint64_t v8 = ASDLogHandleForCategory(14LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      uint64_t v34 = (void *)objc_opt_class(*(void *)(a1 + 48), v10);
      uint64_t v35 = *(void **)(a1 + 56);
      uint64_t v36 = *(void *)(a1 + 64);
      id v37 = v34;
      uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue([v35 hashedDescription]);
      *(_DWORD *)__int128 buf = 138413058;
      *(void *)&uint8_t buf[4] = v34;
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)&buf[14] = v36;
      *(_WORD *)&buf[22] = 2114;
      id v58 = v38;
      LOWORD(v59) = 2114;
      *(void *)((char *)&v59 + 2) = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%@]: %{public}@ Failed update for acccount %{public}@ error: %{public}@",  buf,  0x2Au);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v6, 32LL, 1);
    }
    id v12 = Property;
    signed int v13 = [v12 intValue];
    signed int v14 = [v5 intValue];

    if (v13 >= v14)
    {
      uint64_t v51 = 0LL;
      __int16 v52 = &v51;
      uint64_t v53 = 0x2020000000LL;
      LOBYTE(v54) = 1;
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000LL;
      id v58 = sub_10029C398;
      *(void *)&__int128 v59 = sub_10029C3A8;
      *((void *)&v59 + 1) = 0LL;
      v46[0] = _NSConcreteStackBlock;
      v46[2] = sub_10029F538;
      v46[3] = &unk_1003F08A8;
      id v29 = *(void **)(a1 + 56);
      uint64_t v30 = *(void **)(*(void *)(a1 + 48) + 16LL);
      v46[1] = 3221225472LL;
      __int16 v48 = &v51;
      id v47 = v29;
      uint64_t v49 = buf;
      [v30 modifyUsingTransaction:v46];
      if (*(void *)(*(void *)&buf[8] + 40LL))
      {
        uint64_t v31 = ASDLogHandleForCategory(14LL);
        uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          id v39 = (id)objc_opt_class(*(void *)(a1 + 48), v33);
          id v40 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "ams_DSID"));
          __int16 v41 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) hashedDescription]);
          uint64_t v42 = *(void *)(*(void *)&buf[8] + 40LL);
          *(_DWORD *)uint64_t v63 = 138413058;
          *(void *)&v63[4] = v39;
          *(_WORD *)&v63[12] = 2114;
          *(void *)&v63[14] = v40;
          *(_WORD *)&v63[22] = 2114;
          uint64_t v64 = v41;
          LOWORD(v65) = 2114;
          *(void *)((char *)&v65 + 2) = v42;
          _os_log_error_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_ERROR,  "[%@]: Update call success, but failed updating DB for account: %{public}@ authenticated account: %{public}@ error: %{public}@",  v63,  0x2Au);
        }
      }

      *(_BYTE *)(*(void *)(a1 + 48) + 32LL) = 0;
      (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();

      _Block_object_dispose(buf, 8);
      _Block_object_dispose(&v51, 8);
    }

    else
    {
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v15 = *(void **)(a1 + 56);
      __int16 v17 = *(void **)(a1 + 64);
      uint64_t v18 = *(void **)(a1 + 80);
      id v44 = v15;
      id v45 = v17;
      id v43 = v18;
      if (v16)
      {
        id v50 = 0LL;
        id v19 = v44;
        id v20 = v45;
        *(void *)uint64_t v63 = 0LL;
        *(void *)&v63[8] = v63;
        *(void *)&v63[16] = 0x3032000000LL;
        uint64_t v64 = sub_10029C398;
        *(void *)&__int128 v65 = sub_10029C3A8;
        *((void *)&v65 + 1) = 0LL;
        uint64_t v51 = 0LL;
        __int16 v52 = &v51;
        uint64_t v53 = 0x3032000000LL;
        uint64_t v54 = sub_10029C398;
        __int16 v55 = sub_10029C3A8;
        id v56 = 0LL;
        uint64_t v21 = *(void **)(v16 + 16);
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = sub_10029E43C;
        id v58 = (uint64_t (*)(uint64_t, uint64_t))&unk_1003F0808;
        *((void *)&v59 + 1) = v63;
        id v22 = v19;
        double v60 = &v51;
        __int16 v61 = &v50;
        *(void *)&__int128 v59 = v22;
        [v21 readUsingSession:buf];
        uint64_t v23 = sub_10018B684( (uint64_t)&OBJC_CLASS___IAPInfoItemsRequestContext,  *(void **)(*(void *)&v63[8] + 40LL),  (void *)v52[5],  v22,  v20);

        _Block_object_dispose(&v51, 8);
        _Block_object_dispose(v63, 8);

        id v24 = v50;
        if (v23)
        {
          *(_BYTE *)(v16 + 32) = 1;
          uint64_t v25 = (id *)objc_claimAutoreleasedReturnValue( +[KeepAlive keepAliveWithName:]( &OBJC_CLASS___KeepAlive,  "keepAliveWithName:",  @"com.apple.appstoredaemon.IAPInfoManager.update"));
          id v26 = sub_1001CE4B0((id *)objc_alloc(&OBJC_CLASS___IAPInfoItemsRequest), *(void **)(v16 + 8), v23);
          *(void *)__int128 buf = _NSConcreteStackBlock;
          *(void *)&uint8_t buf[8] = 3221225472LL;
          *(void *)&uint8_t buf[16] = sub_10029EB44;
          id v58 = (uint64_t (*)(uint64_t, uint64_t))&unk_1003F0858;
          *(void *)&__int128 v59 = v16;
          *((void *)&v59 + 1) = v20;
          double v60 = (uint64_t *)v22;
          id v27 = v43;
          __int16 v61 = v25;
          id v62 = v27;
          double v28 = v25;
          sub_1001CE558((uint64_t)v26, buf);
        }

        else
        {
          *(_BYTE *)(v16 + 32) = 0;
          (*((void (**)(id, id))v43 + 2))(v43, v24);
        }
      }
    }
  }
}

void sub_10029F4EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_10029F538(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_DSID"));
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v6 + 40);
  unsigned __int8 v7 = sub_10018A464(v3, v4, v5, &obj);

  objc_storeStrong((id *)(v6 + 40), obj);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v8 + 24)) {
    unsigned __int8 v9 = v7;
  }
  else {
    unsigned __int8 v9 = 0;
  }
  *(_BYTE *)(v8 + 24) = v9;

  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

uint64_t sub_10029F600(void *a1, void *a2)
{
  id v4 = a2;
  id Property = (id)a1[4];
  if (Property) {
    id Property = objc_getProperty(Property, v3, 16LL, 1);
  }
  id v6 = Property;
  unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ams_DSID"));

  unsigned __int8 v9 = (_BYTE *)a1[4];
  if (v9 && (v9[8] & 1) != 0)
  {
    id v15 = objc_getProperty(v9, v8, 32LL, 1);
    uint64_t v16 = *(void *)(a1[6] + 8LL);
    id v44 = *(id *)(v16 + 40);
    char v17 = sub_100189AC4((uint64_t)v4, v15, v7, &v44);
    objc_storeStrong((id *)(v16 + 40), v44);
    uint64_t v18 = *(void *)(a1[5] + 8LL);
    if (*(_BYTE *)(v18 + 24)) {
      char v19 = v17;
    }
    else {
      char v19 = 0;
    }
    *(_BYTE *)(v18 + 24) = v19;
  }

  else
  {
    uint64_t v10 = *(void *)(a1[6] + 8LL);
    id obj = *(id *)(v10 + 40);
    char v11 = sub_10018A214(v4, v7, &obj);
    objc_storeStrong((id *)(v10 + 40), obj);
    uint64_t v13 = *(void *)(a1[5] + 8LL);
    if (*(_BYTE *)(v13 + 24)) {
      char v14 = v11;
    }
    else {
      char v14 = 0;
    }
    *(_BYTE *)(v13 + 24) = v14;
  }

  id v20 = (id)a1[4];
  if (v20) {
    id v20 = objc_getProperty(v20, v12, 24LL, 1);
  }
  id v21 = v20;
  uint64_t v22 = *(void *)(a1[6] + 8LL);
  id v42 = *(id *)(v22 + 40);
  char v23 = sub_100189D9C(v4, v21, v7);
  objc_storeStrong((id *)(v22 + 40), v42);
  uint64_t v24 = *(void *)(a1[5] + 8LL);
  if (*(_BYTE *)(v24 + 24)) {
    char v25 = v23;
  }
  else {
    char v25 = 0;
  }
  *(_BYTE *)(v24 + 24) = v25;

  id v27 = (id)a1[4];
  if (v27) {
    id v27 = objc_getProperty(v27, v26, 40LL, 1);
  }
  id v28 = v27;
  uint64_t v29 = *(void *)(a1[6] + 8LL);
  id v41 = *(id *)(v29 + 40);
  unsigned __int8 v30 = sub_10018A2DC(v4, v28, v7, &v41);
  objc_storeStrong((id *)(v29 + 40), v41);
  uint64_t v31 = *(void *)(a1[5] + 8LL);
  if (*(_BYTE *)(v31 + 24)) {
    unsigned __int8 v32 = v30;
  }
  else {
    unsigned __int8 v32 = 0;
  }
  *(_BYTE *)(v31 + 24) = v32;

  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v34 = *(void *)(a1[6] + 8LL);
  id v40 = *(id *)(v34 + 40);
  unsigned __int8 v35 = sub_10018A464(v4, v33, v7, &v40);
  objc_storeStrong((id *)(v34 + 40), v40);
  uint64_t v36 = *(void *)(a1[5] + 8LL);
  if (*(_BYTE *)(v36 + 24)) {
    unsigned __int8 v37 = v35;
  }
  else {
    unsigned __int8 v37 = 0;
  }
  *(_BYTE *)(v36 + 24) = v37;

  uint64_t v38 = *(unsigned __int8 *)(*(void *)(a1[5] + 8LL) + 24LL);
  return v38;
}

id sub_10029F8BC(void *a1, int a2)
{
  if (!a1) {
    return 0LL;
  }
  if (a2) {
    id v4 = &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity;
  }
  else {
    id v4 = &OBJC_CLASS___AppUpdateEntity;
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a1 connection]);
  id v6 = sub_10024C1D0((uint64_t)v4, v5, 0LL);
  unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  uint64_t v8 = ASDLogHandleForCategory(40LL);
  unsigned __int8 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    char v11 = (void *)objc_opt_class(a1, v10);
    id v12 = v11;
    id v13 = [v7 countOfEntities];
    char v14 = @"legacy";
    int v18 = 138544130;
    char v19 = v11;
    __int16 v20 = 2048;
    if (a2) {
      id v15 = @"modern";
    }
    else {
      id v15 = @"legacy";
    }
    id v21 = v13;
    if (!a2) {
      char v14 = @"modern";
    }
    __int16 v22 = 2114;
    char v23 = v15;
    __int16 v24 = 2114;
    char v25 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Deleting data for %ld %{public}@ update(s) as we've switched to %{public}@ updates",  (uint8_t *)&v18,  0x2Au);
  }

  id v16 = [v7 deleteAllEntities];
  return v16;
}

id sub_10029FA34(id result, double a2)
{
  if (result)
  {
    uint64_t v2 = result;
    id v3 = -[NSNumber initWithDouble:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithDouble:", a2);
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:value:comparisonType:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:value:comparisonType:",  @"install_date",  v3,  3LL));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 connection]);
    id v6 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppUpdateEntity, v5, v4);
    unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

    id v8 = [v7 deleteAllEntities];
    return v8;
  }

  return result;
}

BOOL sub_10029FAF4(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = ASDLogHandleForCategory(40LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v7 = (void *)objc_opt_class(a1, v6);
      id v8 = v7;
      id v9 = [v3 count];
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
      *(_DWORD *)__int128 buf = 138543874;
      uint64_t v36 = v7;
      __int16 v37 = 2048;
      id v38 = v9;
      __int16 v39 = 2114;
      uint64_t v40 = objc_opt_class(v10, v11);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Deleting %lu update(s) of type %{public}@",  buf,  0x20u);
    }

    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    id v29 = v3;
    id v12 = v3;
    id v13 = [v12 countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v31;
      do
      {
        for (i = 0LL; i != v14; i = (char *)i + 1)
        {
          if (*(void *)v31 != v15) {
            objc_enumerationMutation(v12);
          }
          char v17 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
          if ([v17 databaseID])
          {
            id v19 = objc_alloc((Class)objc_msgSend((id)objc_opt_class(v17, v18), "databaseEntityClass"));
            id v20 = [v17 databaseID];
            id v21 = (void *)objc_claimAutoreleasedReturnValue([a1 connection]);
            id v22 = [v19 initWithPersistentID:v20 onConnection:v21];

            if (([v22 deleteFromDatabase] & 1) == 0)
            {
              uint64_t v23 = ASDLogHandleForCategory(40LL);
              __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
              {
                id v26 = (void *)objc_opt_class(a1, v25);
                *(_DWORD *)__int128 buf = 138543618;
                uint64_t v36 = v26;
                __int16 v37 = 2114;
                id v38 = v22;
                id v27 = v26;
                _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "[%{public}@] Failed to delete update %{public}@",  buf,  0x16u);
              }
            }
          }
        }

        id v14 = [v12 countByEnumeratingWithState:&v30 objects:v34 count:16];
      }

      while (v14);
    }

    id v3 = v29;
  }

  return a1 != 0LL;
}

uint64_t sub_10029FDA4(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"bundle_id",  a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a1 connection]);
  id v5 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppUpdateEntity, v4, v3);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  if ((uint64_t)[v6 countOfEntities] >= 1 && objc_msgSend(v6, "deleteAllEntities"))
  {
    unsigned __int8 v7 = (void *)objc_claimAutoreleasedReturnValue(+[UpdatesManager sharedManager](&OBJC_CLASS___UpdatesManager, "sharedManager"));
    [v7 noteUpdatesStateChanged:@"Apps uninstalled" logKey:0];

    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  return v8;
}

_TtC9appstored26UpdatesDatabaseMergeResult *sub_10029FE84(void *a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    uint64_t v41 = 0LL;
    id v42 = &v41;
    uint64_t v43 = 0x2020000000LL;
    char v44 = 1;
    uint64_t v37 = 0LL;
    id v38 = &v37;
    uint64_t v39 = 0x2020000000LL;
    uint64_t v40 = 0LL;
    uint64_t v31 = 0LL;
    __int128 v32 = &v31;
    uint64_t v33 = 0x3032000000LL;
    uint64_t v34 = sub_1002A01A8;
    unsigned __int8 v35 = sub_1002A01B8;
    uint64_t v36 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    id v9 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity itemIDPropertyKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "itemIDPropertyKey"));
    v45[0] = v10;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity updateStatePropertyKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "updateStatePropertyKey"));
    v45[1] = v11;
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v45, 2LL));

    id v13 = (void *)objc_claimAutoreleasedReturnValue([a1 connection]);
    id v14 = sub_10024CBB0((uint64_t)&OBJC_CLASS____TtC9appstored14MediaAPIUpdate, v13, 0LL);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_1002A01C0;
    void v29[3] = &unk_1003E98A8;
    id v16 = v9;
    __int128 v30 = v16;
    [v15 enumerateMemoryEntitiesWithProperties:v12 usingBlock:v29];
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1002A0228;
    v21[3] = &unk_1003F08D0;
    uint64_t v25 = &v31;
    char v17 = v16;
    id v22 = v17;
    uint64_t v23 = a1;
    char v28 = a3;
    id v24 = v8;
    id v26 = &v41;
    id v27 = &v37;
    [v7 enumerateObjectsUsingBlock:v21];
    if (*((_BYTE *)v42 + 24))
    {
      if (v38[3] > 0) {
        a3 = 1LL;
      }
      else {
        a3 = a3;
      }
    }

    uint64_t v18 = objc_alloc(&OBJC_CLASS____TtC9appstored26UpdatesDatabaseMergeResult);
    id v19 = -[UpdatesDatabaseMergeResult initWithAvailableUpdateCount:shouldNotifyOfChanges:bundleIDs:result:]( v18,  "initWithAvailableUpdateCount:shouldNotifyOfChanges:bundleIDs:result:",  v38[3],  a3,  v32[5],  *((unsigned __int8 *)v42 + 24));

    _Block_object_dispose(&v31, 8);
    _Block_object_dispose(&v37, 8);
    _Block_object_dispose(&v41, 8);
  }

  else
  {
    id v19 = 0LL;
  }

  return v19;
}

void sub_1002A0160( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, char a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

uint64_t sub_1002A01A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002A01B8(uint64_t a1)
{
}

void sub_1002A01C0(uint64_t a1, void *a2)
{
  id v6 = a2;
  id v3 = [v6 itemID];
  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 32);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v3));
    [v4 setObject:v6 forKey:v5];
  }
}

void sub_1002A0228(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  id v7 = [v6 itemID];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleID]);
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v8];
  id v9 = *(void **)(a1 + 32);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v7));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v10]);

  id v12 = sub_1002A04A4(*(void *)(a1 + 40), v6, v11, *(void **)(a1 + 48), *(unsigned __int8 *)(a1 + 80), 1);
  id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

  id v14 = objc_alloc(&OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity);
  if (v11)
  {
    id v15 = [v11 databaseID];
    id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connection]);
    char v17 = -[MediaAPIUpdateEntity initWithPersistentID:onConnection:]( v14,  "initWithPersistentID:onConnection:",  v15,  v16);

    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = -[SQLiteEntity setValuesWithDictionary:]( v17,  "setValuesWithDictionary:",  v13);
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL))
    {
      *a4 = 1;
      uint64_t v18 = ASDLogHandleForCategory(40LL);
      id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        int v24 = 138543618;
        uint64_t v25 = v13;
        __int16 v26 = 2114;
        id v27 = v17;
        _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Failed to set values %{public}@ on entity: %{public}@",  (uint8_t *)&v24,  0x16u);
      }
    }

    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
    id v20 = *(void **)(a1 + 32);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v7));
    [v20 removeObjectForKey:v21];
  }

  else
  {
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connection]);
    uint64_t v23 = -[MediaAPIUpdateEntity initWithPropertyValues:onConnection:]( v14,  "initWithPropertyValues:onConnection:",  v13,  v22);

    if (!v23) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
    }
    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
  }
}

id sub_1002A04A4(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6)
{
  id v10 = a2;
  id v11 = a3;
  id v65 = a4;
  uint64_t v62 = a1;
  if (!a1)
  {
    id v52 = 0LL;
    goto LABEL_33;
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 propertyValues]);
  id v13 = [v12 mutableCopy];

  id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  [v13 setObject:v14 forKey:@"install_date"];

  id v15 = sub_1001E25D0(v10, (uint64_t)@"store_software_version_id");
  id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  if (!v16)
  {
    uint64_t v17 = ASDLogHandleForCategory(40LL);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      id v60 = sub_1001E26D0(v10, (uint64_t)@"bundle_id");
      __int16 v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
      *(_DWORD *)__int128 buf = 138543362;
      id v67 = v61;
      _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Expected evid missing for %{public}@",  buf,  0xCu);
    }
  }

  id v19 = sub_1001E25D0(v10, (uint64_t)@"store_item_id");
  uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(v19);
  if (v64)
  {
    if (v16)
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v65 objectForKeyedSubscript:v64]);
      id v21 = [v20 longLongValue];
      BOOL v22 = v21 == [v16 longLongValue];

      if (a6)
      {
LABEL_9:
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "BOOLeanPropertyMaskKey"));
        int v24 = a6;
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v23]);
        unint64_t v26 = (unint64_t)[v25 integerValue];

        a6 = v24;
        uint64_t v27 = 2LL;
        if (!v22) {
          uint64_t v27 = 0LL;
        }
        char v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  v26 & 0xFFFFFFFFFFFFFFFDLL | v27));
        id v29 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "BOOLeanPropertyMaskKey"));
        [v13 setObject:v28 forKeyedSubscript:v29];

        goto LABEL_14;
      }
    }

    else
    {
      BOOL v22 = 0LL;
      if (a6) {
        goto LABEL_9;
      }
    }

    char v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v22));
    [v13 setObject:v28 forKeyedSubscript:@"is_code_signature_update"];
LABEL_14:
  }

  __int128 v30 = objc_opt_new(&OBJC_CLASS___UpdateItemMetrics);
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v10 valueForProperty:@"current_version_release_date"]);
  uint64_t v32 = v31;
  if (v31)
  {
    [v31 timeIntervalSinceReferenceDate];
    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
    sub_100193B10((uint64_t)v30, v33, ASDUpdateItemMetricsAvailableDate);
  }

  uint64_t v34 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent());
  unsigned __int8 v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
  sub_100193B10((uint64_t)v30, v35, ASDUpdateItemMetricsDiscoveryDate);

  if (v30) {
    id v36 = -[NSMutableDictionary copy](v30->_metricsData, "copy");
  }
  else {
    id v36 = 0LL;
  }
  [v13 setObject:v36 forKeyedSubscript:@"metrics_data"];

  if (!v11) {
    goto LABEL_32;
  }
  int v37 = a6;
  +[NSDate timeIntervalSinceReferenceDate](&OBJC_CLASS___NSDate, "timeIntervalSinceReferenceDate");
  uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  round(v38)));
  [v13 setObject:v39 forKeyedSubscript:@"timestamp"];

  uint64_t v40 = v11;
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v11 valueForProperty:@"update_state"]);
  id v42 = (char *)[v41 integerValue];

  if ((unint64_t)(v42 - 1) < 2)
  {
    __int16 v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", 0LL));
    [v13 setObject:v48 forKey:@"update_state"];
LABEL_26:
    id v11 = v40;
LABEL_31:

    goto LABEL_32;
  }

  if ((unint64_t)(v42 - 3) >= 2)
  {
    id v11 = v40;
    if (v42 == (char *)5)
    {
      id v49 = sub_1001E25D0(v40, (uint64_t)@"store_software_version_id");
      __int16 v48 = (void *)objc_claimAutoreleasedReturnValue(v49);
      id v50 = sub_1001E25D0(v10, (uint64_t)@"store_software_version_id");
      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(v50);

      goto LABEL_31;
    }
  }

  else
  {
    id v11 = v40;
    if (a5)
    {
      if (v37)
      {
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "BOOLeanPropertyMaskKey"));
        char v44 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v43]);
        unint64_t v45 = (unint64_t)[v44 integerValue];

        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v45 | 1));
        id v47 = (void *)objc_claimAutoreleasedReturnValue( +[MediaAPIUpdateEntity BOOLeanPropertyMaskKey]( &OBJC_CLASS____TtC9appstored20MediaAPIUpdateEntity,  "BOOLeanPropertyMaskKey"));
        [v13 setObject:v46 forKeyedSubscript:v47];
      }

      else
      {
        [v13 setObject:&__kCFBooleanTrue forKey:@"is_background"];
      }

      uint64_t v54 = ASDLogHandleForCategory(14LL);
      __int16 v48 = (void *)objc_claimAutoreleasedReturnValue(v54);
      if (os_log_type_enabled((os_log_t)v48, OS_LOG_TYPE_DEFAULT))
      {
        id v56 = (void *)objc_opt_class(v62, v55);
        id v57 = v56;
        id v58 = sub_1001E26D0(v10, (uint64_t)@"bundle_id");
        __int128 v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
        *(_DWORD *)__int128 buf = 138543618;
        id v67 = v56;
        __int16 v68 = 2114;
        id v69 = v59;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v48,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Hiding update for %{public}@ following server sync",  buf,  0x16u);
      }

      goto LABEL_26;
    }
  }

BOOL sub_1002A0AA0(void *a1, void *a2, uint64_t a3, void *a4, void *a5, void *a6, char *a7, void *a8)
{
  id v35 = a2;
  id v33 = a4;
  id v36 = a5;
  if (a1)
  {
    uint64_t v58 = 0LL;
    __int128 v59 = &v58;
    uint64_t v60 = 0x2020000000LL;
    char v61 = 1;
    uint64_t v54 = 0LL;
    uint64_t v55 = &v54;
    uint64_t v56 = 0x2020000000LL;
    uint64_t v57 = 0LL;
    uint64_t v48 = 0LL;
    id v49 = &v48;
    uint64_t v50 = 0x3032000000LL;
    uint64_t v51 = sub_1002A01A8;
    id v52 = sub_1002A01B8;
    uint64_t v53 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    id v14 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    v64[0] = @"store_item_id";
    v64[1] = @"update_state";
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v64, 2LL, v33));
    id v16 = (void *)objc_claimAutoreleasedReturnValue([a1 connection]);
    id v17 = sub_10024CBB0((uint64_t)&OBJC_CLASS___AppUpdateMemoryEntity, v16, 0LL);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);

    v46[0] = _NSConcreteStackBlock;
    v46[1] = 3221225472LL;
    v46[2] = sub_1002A0EA8;
    v46[3] = &unk_1003E98A8;
    id v19 = v14;
    id v47 = v19;
    [v18 enumerateMemoryEntitiesWithProperties:v15 usingBlock:v46];
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472LL;
    v38[2] = sub_1002A0EFC;
    v38[3] = &unk_1003F08F8;
    id v42 = &v48;
    id v20 = v19;
    uint64_t v39 = v20;
    uint64_t v40 = a1;
    id v41 = v36;
    uint64_t v43 = &v58;
    char v44 = &v54;
    uint64_t v45 = a3;
    [v35 enumerateObjectsUsingBlock:v38];
    id v21 = v59;
    int v22 = *((unsigned __int8 *)v59 + 24);
    BOOL v23 = a3 != 2 || v22 == 0;
    char v24 = !v23;
    if (!v23)
    {
      uint64_t v25 = ASDLogHandleForCategory(14LL);
      unint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        char v28 = (void *)objc_opt_class(a1, v27);
        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v63 = v28;
        id v29 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Syncing updates with server ",  buf,  0xCu);
      }

      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472LL;
      v37[2] = sub_1002A10AC;
      v37[3] = &unk_1003F0920;
      void v37[4] = a1;
      v37[5] = &v58;
      -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](v20, "enumerateKeysAndObjectsUsingBlock:", v37);
      id v21 = v59;
      int v22 = *((unsigned __int8 *)v59 + 24);
    }

    if (a7 && v22)
    {
      if (v55[3] > 0) {
        char v30 = 1;
      }
      else {
        char v30 = v24;
      }
      *a7 = v30;
      int v22 = *((unsigned __int8 *)v21 + 24);
    }

    if (a6 && v22) {
      *a6 = v55[3];
    }
    if (a8 && v22)
    {
      *a8 = [(id)v49[5] copy];
      int v22 = *((unsigned __int8 *)v59 + 24);
    }

    BOOL v31 = v22 != 0;

    _Block_object_dispose(&v48, 8);
    _Block_object_dispose(&v54, 8);
    _Block_object_dispose(&v58, 8);
  }

  else
  {
    BOOL v31 = 0LL;
  }

  return v31;
}

void sub_1002A0E58( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, char a35)
{
}

void sub_1002A0EA8(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 itemID]);
  if (v3) {
    [*(id *)(a1 + 32) setObject:v4 forKey:v3];
  }
}

void sub_1002A0EFC(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  id v16 = (id)objc_claimAutoreleasedReturnValue([v6 itemID]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleID]);
  [*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) addObject:v7];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v16]);
  id v9 = sub_1002A04A4(*(void *)(a1 + 40), v6, v8, *(void **)(a1 + 48), *(void *)(a1 + 80) == 2LL, 0);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  id v11 = objc_alloc(&OBJC_CLASS___AppUpdateEntity);
  if (v8)
  {
    id v12 = [v8 databaseID];
    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connection]);
    id v14 = -[SQLiteEntity initWithPersistentID:onConnection:](v11, "initWithPersistentID:onConnection:", v12, v13);

    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = -[SQLiteEntity setValuesWithDictionary:]( v14,  "setValuesWithDictionary:",  v10);
    *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) ^ 1;
    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
    [*(id *)(a1 + 32) removeObjectForKey:v16];
  }

  else
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connection]);
    id v14 = -[SQLiteEntity initWithPropertyValues:onConnection:](v11, "initWithPropertyValues:onConnection:", v10, v15);

    if (!v14) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 0;
    }
    ++*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL);
  }
}

void sub_1002A10AC(uint64_t a1, uint64_t a2, void *a3, _BYTE *a4)
{
  id v12 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v12 valueForProperty:@"update_state"]);
  unint64_t v7 = (unint64_t)[v6 integerValue];

  if ((v7 & 0xFFFFFFFFFFFFFFFBLL) == 0)
  {
    id v8 = objc_alloc(&OBJC_CLASS___AppUpdateEntity);
    id v9 = [v12 databaseID];
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    id v11 = -[SQLiteEntity initWithPersistentID:onConnection:](v8, "initWithPersistentID:onConnection:", v9, v10);

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = -[SQLiteEntity deleteFromDatabase]( v11,  "deleteFromDatabase");
    *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) ^ 1;
  }
}

uint64_t sub_1002A1188(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (!a1) {
    goto LABEL_13;
  }
  if (!v9)
  {
    uint64_t v21 = ASDLogHandleForCategory(40LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)BOOL v23 = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Unable to record update download time without a bundle ID",  v23,  2u);
    }

    goto LABEL_12;
  }

  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"bundle_id",  v9));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([a1 connection]);
  id v13 = sub_10024C088((uint64_t)&OBJC_CLASS___AppUpdateEntity, v12, v11);
  id v14 = (UpdateItemMetrics *)objc_claimAutoreleasedReturnValue(v13);

  if (!-[UpdateItemMetrics existsInDatabase](v14, "existsInDatabase"))
  {

LABEL_12:
LABEL_13:
    uint64_t v20 = 0LL;
    goto LABEL_14;
  }

  id v15 = sub_1001BFCE8(v14);
  id v16 = (UpdateItemMetrics *)objc_claimAutoreleasedReturnValue(v15);
  if (!v16) {
    id v16 = objc_opt_new(&OBJC_CLASS___UpdateItemMetrics);
  }
  [v7 timeIntervalSinceReferenceDate];
  id v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  sub_100193B10((uint64_t)v16, v17, ASDUpdateItemMetricsDownloadStartDate);

  [v8 timeIntervalSinceReferenceDate];
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
  sub_100193B10((uint64_t)v16, v18, ASDUpdateItemMetricsDownloadCompleteDate);

  if (v16) {
    id v19 = -[NSMutableDictionary copy](v16->_metricsData, "copy");
  }
  else {
    id v19 = 0LL;
  }
  -[UpdateItemMetrics setValue:forProperty:](v14, "setValue:forProperty:", v19, @"metrics_data");

  uint64_t v20 = 1LL;
LABEL_14:

  return v20;
}

id sub_1002A138C(id result, uint64_t a2, void *a3)
{
  if (result)
  {
    id v4 = result;
    id v5 = a3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleID]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 itemID]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 purchaseID]);
    unsigned int v9 = [v5 isDiscretionary] ^ 1;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 logKey]);

    id v11 = sub_1002A1454(v4, a2, v6, v7, v8, v9, v10);
    return v11;
  }

  return result;
}

id sub_1002A1454(void *a1, uint64_t a2, void *a3, void *a4, void *a5, int a6, void *a7)
{
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a7;
  if (!a1)
  {
    id v39 = 0LL;
    goto LABEL_32;
  }

  if (!v14)
  {
    uint64_t v40 = ASDLogHandleForCategory(40LL);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v56 = (id)objc_opt_class(a1, v41);
      __int16 v57 = 2114;
      id v58 = v13;
      id v50 = v16;
      id v51 = v56;
      _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "[%{public}@] Could not find update for purchase: %{public}@ due to missing storeID",  buf,  0x16u);

      id v16 = v50;
    }

    id v39 = 0LL;
    goto LABEL_31;
  }

  int v54 = a6;
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"store_item_id",  v14));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([a1 connection]);
  id v19 = sub_10024C088((uint64_t)&OBJC_CLASS___AppUpdateEntity, v18, v17);
  uint64_t v20 = (UpdateItemMetrics *)objc_claimAutoreleasedReturnValue(v19);

  if (!v20
    || (uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(-[UpdateItemMetrics valueForProperty:](v20, "valueForProperty:", @"bundle_id")),
        unsigned int v22 = [v13 isEqualToString:v21],
        v21,
        !v22))
  {
    uint64_t v34 = ASDLogHandleForCategory(40LL);
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138543874;
      id v56 = (id)objc_opt_class(a1, v36);
      __int16 v57 = 2114;
      id v58 = v13;
      __int16 v59 = 2114;
      uint64_t v60 = v14;
      id v37 = v16;
      id v38 = v56;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Update does not exist for purchase: %{public}@ with storeID: %{public}@",  buf,  0x20u);

      id v16 = v37;
    }

    id v39 = 0LL;
    goto LABEL_30;
  }

  id v23 = v13;
  id v24 = v16;
  objc_opt_self(&OBJC_CLASS___AppUpdatesDatabaseTransaction);
  uint64_t v25 = ASDLogHandleForCategory(40LL);
  unint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    id v56 = v24;
    __int16 v57 = 2114;
    id v58 = v23;
    __int16 v59 = 2080;
    uint64_t v60 = &aAvailable[16 * a2 - a2];
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "[%@] [%{public}@] Transitioning to state %s",  buf,  0x20u);
  }

  uint64_t v27 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  char v28 = v27;
  if (v15) {
    -[NSMutableDictionary setObject:forKeyedSubscript:](v27, "setObject:forKeyedSubscript:", v15, @"purchase_id");
  }
  if ((unint64_t)(a2 - 3) <= 1)
  {
    id v29 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", CFAbsoluteTimeGetCurrent());
    char v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    BOOL v31 = sub_1001BFCE8(v20);
    uint64_t v32 = (UpdateItemMetrics *)objc_claimAutoreleasedReturnValue(v31);
    if (!v32) {
      uint64_t v32 = objc_opt_new(&OBJC_CLASS___UpdateItemMetrics);
    }
    if (a2 == 3)
    {
      id v33 = (void **)&ASDUpdateItemMetricsPurchaseStartDate;
    }

    else
    {
      if (a2 != 4)
      {
LABEL_23:
        id v52 = v30;
        if (v32) {
          id v42 = -[NSMutableDictionary copy](v32->_metricsData, "copy");
        }
        else {
          id v42 = 0LL;
        }
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v28,  "setObject:forKeyedSubscript:",  v42,  @"metrics_data");

        goto LABEL_26;
      }

      id v33 = (void **)&ASDUpdateItemMetricsPurchaseCompleteDate;
    }

    sub_100193B10((uint64_t)v32, v30, *v33);
    goto LABEL_23;
  }

uint64_t sub_1002A1984(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!a1)
  {
    uint64_t v19 = 0LL;
    goto LABEL_23;
  }

  id v7 = sub_1001E26D0(v5, (uint64_t)@"bundle_id");
  id v8 = (__CFString *)objc_claimAutoreleasedReturnValue(v7);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue(+[ApplicationProxy proxyForBundleID:](&OBJC_CLASS___ApplicationProxy, "proxyForBundleID:", v8));
  id v10 = v9;
  if (!v9)
  {
    id v15 = @"no longer installed";
LABEL_9:
    uint64_t v16 = ASDLogHandleForCategory(40LL);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = 138543618;
      uint64_t v25 = v15;
      __int16 v26 = 2114;
      uint64_t v27 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Removing update because the app is %{public}@: %{public}@",  (uint8_t *)&v24,  0x16u);
    }

    [v5 deleteFromDatabase];
    goto LABEL_21;
  }

  if (([v9 validateEligibilityForUpdatesWithLogKey:v6] & 1) == 0)
  {
    id v15 = @"not eligible for updates";
    goto LABEL_9;
  }

  id v11 = sub_1001E25D0(v5, (uint64_t)@"store_software_version_id");
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  id v13 = [v12 unsignedLongLongValue];

  if (v13 <= [v10 storeExternalVersionID])
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v5 valueForProperty:@"install_date"]);

    if (v18)
    {
    }

    else
    {
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v5 setValue:v20 forProperty:@"install_date"];

      if (sub_1001E2698(v5, (uint64_t)@"update_state") == (id)1)
      {
LABEL_18:
        uint64_t v21 = ASDLogHandleForCategory(40LL);
        unsigned int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        {
          int v24 = 138543362;
          uint64_t v25 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Fixing update state for installed update %{public}@",  (uint8_t *)&v24,  0xCu);
        }

LABEL_21:
        uint64_t v19 = 1LL;
        goto LABEL_22;
      }
    }

    id v14 = &off_10040CE68;
    goto LABEL_17;
  }

  if (sub_1001E2698(v5, (uint64_t)@"update_state"))
  {
    id v14 = &off_10040CE50;
LABEL_17:
    [v5 setValue:v14 forProperty:@"update_state"];
    goto LABEL_18;
  }

void sub_1002A1CB8(id a1, int64_t a2, int64_t *a3, id *a4)
{
  if (!a2)
  {
    *a3 = 17000LL;
    id v4 = *a4;
    *a4 = &stru_1003F0960;
  }

void sub_1002A1CDC(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS purchase_history_apps (pid INTEGER PRIMARY KEY, bundle_id TEXT, content_rating_flags INTEGER, date_purchased DATETIME, developer_name TEXT, family_shared INTEGER, first_party INTEGER, is_ios_binary_macos_available INTEGER, is_ios_binary_macos_compatible INTEGER, has_messages_extension INTEGER, hidden INTEGER, hidden_from_springboard INTEGER, icon_url_template TEXT, is_32_bit_only INTEGER, is_preorder INTEGER, is_verified_for_macos INTEGER, long_title TEXT, mac_app_required_capabilities JSON, media_kind INTEGER, oval_icon_url_template TEXT, preflight_package_url URL, product_url URL, purchaser_dsid INTEGER, redownload_params TEXT, required_capabilities JSON, requires_rosetta INTEGER, runs_on_apple_silicon INTEGER, runs_on_intel INTEGER, store_item_id INTEGER, supports_ipad INTEGER, supports_iphone INTEGER, supports_mac INTEGER, supports_reality_device INTEGER, purchase_token INTEGER, locker_item_id INTEGER, genre_id INTEGER, genre_name TEXT, watch_app_delivered_in_ios_app INTEGER, watch_app_runs_independently INTEGER, watch_app_watch_only INTEGER, supports_layered_image INTEGER, has_p3 INTEGER, title TEXT, circular_icon_url TEXT, ros_app_required_capabilities JSON, ios_to_ros_release_date DATETIME, opted_in_for_ros_eligibility INTEGER, currently_opted_in_for_ros_eligibility INTEGER, min_os_for_ros_eligibility INTEGER, UNIQUE(purchaser_dsid, store_item_id) ON CONFLICT REPLACE);",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS purchase_history_db_properties (key TEXT PRIMARY KEY, value TEXT)",  1,  0LL);
  }
}

BOOL sub_1002A1E38(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        uint64_t String = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v14 = 8LL;
LABEL_21:
        uint64_t v16 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_23;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_23:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    uint64_t v15 = PBReaderReadString(a2);
    uint64_t v13 = objc_claimAutoreleasedReturnValue(v15);
    uint64_t v14 = 16LL;
    goto LABEL_21;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1002A2054(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_1002A206C(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 16), a2);
  }
}

InstallAppReviewAppsTask *sub_1002A3908(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  unsigned int v5 = objc_alloc(&OBJC_CLASS___InstallAppReviewAppsTask);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  void v12[2] = sub_1002A39F8;
  v12[3] = &unk_1003F0980;
  void v12[4] = v4;
  id v6 = sub_1002B86C0(v3, v12);
  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  id v8 = v7;
  if (v5)
  {
    v13.receiver = v5;
    v13.super_class = (Class)&OBJC_CLASS___InstallAppReviewAppsTask;
    unsigned int v5 = (InstallAppReviewAppsTask *)objc_msgSendSuper2(&v13, "init");
    if (v5)
    {
      id v9 = [v8 copy];
      int v10 = *(void **)&v5->super._success;
      *(void *)&v5->super._success = v9;
    }
  }

  return v5;
}

AppInstall *sub_1002A39F8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = objc_opt_self(v2);
  unsigned int v5 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v6, @"bundle_id");

  unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v7, @"external_id");

  id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 artworkURL]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v8, @"artwork_url");

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 itemID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v9, @"item_id");

  int v10 = (void *)objc_claimAutoreleasedReturnValue([v3 itemName]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v10, @"bundle_name");

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 messagesArtworkURL]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v11,  @"messages_artwork_url");

  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v3 hasMessagesExtension]));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v12,  @"has_messages_extension");

  objc_super v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v3 isLaunchProhibited]));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v13,  @"launch_prohibited");

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"approved");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  &off_10040CEB0,  @"bootstrapped");
  else {
    uint64_t v14 = &off_10040CEC8;
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:](v5, "setObject:forKeyedSubscript:", v14, @"source_type");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  &off_10040CEE0,  @"priority");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  @"APR",  @"log_code");
  uint64_t v15 = objc_claimAutoreleasedReturnValue([v3 storeMetadata]);
  uint64_t v16 = (void *)v15;
  if (v15)
  {
    id v17 = sub_100304244(v15, 0LL);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v5,  "setObject:forKeyedSubscript:",  v18,  @"store_metadata");
  }

  uint64_t v19 = -[SQLiteMemoryEntity initWithPropertyValues:]( objc_alloc(&OBJC_CLASS___AppInstall),  "initWithPropertyValues:",  v5);
  id v20 = v3;
  objc_opt_self(v4);
  uint64_t v21 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([v20 packageDPInfo]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v21, "setObject:forKeyedSubscript:", v22, @"dp_info");

  id v23 = (void *)objc_claimAutoreleasedReturnValue([v20 packageSINF]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v21, "setObject:forKeyedSubscript:", v23, @"sinf");

  int v24 = (void *)objc_claimAutoreleasedReturnValue([v20 initialODRSize]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v21,  "setObject:forKeyedSubscript:",  v24,  @"initial_odr_size");

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v21,  "setObject:forKeyedSubscript:",  &off_10040CEE0,  @"archive_type");
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v20 packageURL]);

  -[NSMutableDictionary setObject:forKeyedSubscript:](v21, "setObject:forKeyedSubscript:", v25, @"package_url");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v21,  "setObject:forKeyedSubscript:",  &off_10040CEC8,  @"package_type");
  __int16 v26 = -[SQLiteMemoryEntity initWithPropertyValues:]( objc_alloc(&OBJC_CLASS___AppPackage),  "initWithPropertyValues:",  v21);

  if (v26)
  {
    uint64_t v36 = v26;
    char v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v36, 1LL));
    if (v19) {
      objc_setProperty_atomic_copy(v19, v27, v28, 40LL);
    }
  }

  id v29 = (void *)objc_claimAutoreleasedReturnValue([v20 onDemandResourceManifest]);

  if (v29)
  {
    id v30 = sub_1001B53D0((uint64_t)&OBJC_CLASS___ODRDatabaseStore);
    BOOL v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472LL;
    v33[2] = sub_1002A40BC;
    v33[3] = &unk_1003EC678;
    id v34 = v20;
    uint64_t v35 = v19;
    [v31 modifyUsingTransaction:v33];
  }

  return v19;
}

id sub_1002A3EB0(id *a1)
{
  if (a1)
  {
    [a1 lock];
    id v2 = [a1[6] copy];
    [a1 unlock];
  }

  else
  {
    id v2 = 0LL;
  }

  return v2;
}

id sub_1002A3FE0(id a1, AppInstall *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteMemoryEntity valueForProperty:](a2, "valueForProperty:", @"external_id"));
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSString, v3);
  if ((objc_opt_isKindOfClass(v2, v4) & 1) != 0) {
    unsigned int v5 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v2);
  }
  else {
    unsigned int v5 = v2;
  }
  id v6 = v5;

  return v6;
}

uint64_t sub_1002A4054(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSOrderedSet orderedSetWithArray:]( &OBJC_CLASS___NSOrderedSet,  "orderedSetWithArray:",  *(void *)(*(void *)(a1 + 32) + 40LL)));
  id v5 = sub_1001B4590(v3, v4);

  return 1LL;
}

BOOL sub_1002A40BC(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 onDemandResourceManifest]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
  unint64_t v7 = sub_100323C54(*(void **)(a1 + 40));
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  BOOL v9 = sub_1001C43F4((BOOL)v4, v5, v6, v8);

  return v9;
}

void sub_1002A44F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "ams_activeiTunesAccount"));

    if (v4)
    {
      *(_BYTE *)(v2 + 96) = objc_msgSend(v4, "ams_isDemoAccount");
      if (*(_BYTE *)(v2 + 96))
      {
        uint64_t v5 = ASDLogHandleForCategory(4LL);
        id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_DSID"));
          int v17 = 138543362;
          uint64_t v18 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Using retail demo account: %{public}@",  (uint8_t *)&v17,  0xCu);
        }
      }
    }
  }

  id v8 = sub_1001D17B8((uint64_t)&OBJC_CLASS___NetworkMonitor);
  BOOL v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  unsigned __int8 v10 = [v9 isConnected];

  if ((v10 & 1) != 0)
  {
    sub_1002A46F8(*(void *)(a1 + 32), @"Startup with network");
  }

  else
  {
    uint64_t v11 = ASDLogHandleForCategory(4LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Creating listener to initialize network dependent items",  (uint8_t *)&v17,  2u);
    }

    objc_super v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
    uint64_t v14 = *(void *)(a1 + 32);
    id v15 = sub_1001D17B8((uint64_t)&OBJC_CLASS___NetworkMonitor);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    [v13 addObserver:v14 selector:"_handleNetworkStateDidChangeNotification:" name:@"NetworkStateDidChangeNotification" object:v16];
  }

  sub_1002A4798(*(void *)(a1 + 32));
  sub_1002A4C5C(*(void *)(a1 + 32));
}

void sub_1002A46F8(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (a1)
  {
    id v3 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
    sub_1002A648C((void *)a1, 1, v3, 0LL, 0.0);
    if ([*(id *)(a1 + 40) BOOLValue])
    {
      id v4 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      sub_100197418((uint64_t)v5, 7LL, v6, 0, 0LL);
    }
  }
}

void sub_1002A4798(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDevice deviceGUID](&OBJC_CLASS___AMSDevice, "deviceGUID"));
    CFPropertyListRef v2 = sub_1002F93E4((uint64_t)&OBJC_CLASS___AppDefaultsManager);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

    if (v3)
    {
      CFPropertyListRef v4 = sub_1002F93BC((uint64_t)&OBJC_CLASS___AppDefaultsManager);
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      if ([v5 isEqualToString:v1])
      {
        CFPropertyListRef v6 = sub_1002F940C((uint64_t)&OBJC_CLASS___AppDefaultsManager);
        unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
        id v8 = v7;
        if (v7 && ([v7 timeIntervalSinceNow], v9 > 129600.0))
        {
          uint64_t v10 = ASDLogHandleForCategory(3LL);
          uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[Arcade] Resetting device ID because its creation date is invalid",  buf,  2u);
          }

          id v12 = @"DateMismatch";
        }

        else
        {
          id v14 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
          id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          uint64_t v16 = (uint64_t)sub_10025730C((uint64_t)v15, @"ocelot-device-id-days-valid", (void *)0x16E, 0);

          if (!v16)
          {
            uint64_t v17 = ASDLogHandleForCategory(3LL);
            uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[Arcade] Got invalid value for days valid, using default value",  buf,  2u);
            }

            uint64_t v16 = 366LL;
          }

          uint64_t v19 = 0LL;
          if (v8 && (v16 & 0x8000000000000000LL) == 0)
          {
            uint64_t v20 = 730LL;
            if (v16 < 730) {
              uint64_t v20 = v16;
            }
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v8 dateByAddingTimeInterval:(double)(86400 * v20)]);
            uint64_t v19 = v21;
            if (v21)
            {
              [v21 timeIntervalSinceNow];
              if (v22 >= 0.0) {
                goto LABEL_34;
              }
            }
          }

          uint64_t v23 = ASDLogHandleForCategory(3LL);
          int v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[Arcade] Resetting device ID because it has expired",  buf,  2u);
          }

          id v12 = @"Expired";
        }
      }

      else
      {
        uint64_t v13 = ASDLogHandleForCategory(3LL);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(v13);
        if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_DEFAULT,  "[Arcade] Resetting device ID because of device mismatch",  buf,  2u);
        }

        id v12 = @"DeviceMismatch";
      }
    }

    else
    {
      id v12 = @"None";
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    CFPropertyListRef v25 = sub_1002F940C((uint64_t)&OBJC_CLASS___AppDefaultsManager);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v25);
    CFPropertyListRef v26 = sub_1002F93BC((uint64_t)&OBJC_CLASS___AppDefaultsManager);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v26);
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
    char v28 = (void *)objc_claimAutoreleasedReturnValue([v27 UUIDString]);
    sub_1002F954C((uint64_t)&OBJC_CLASS___AppDefaultsManager, v28);

    sub_1002F94F8((uint64_t)&OBJC_CLASS___AppDefaultsManager, v1);
    sub_1002F95A0((uint64_t)&OBJC_CLASS___AppDefaultsManager, v5);
    if (v19)
    {
      if (v8)
      {
        id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
        id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 components:16 fromDate:v8 toDate:v5 options:0]);
        id v31 = [v30 day];
      }

      else
      {
        id v31 = 0LL;
      }

      v39[0] = @"deviceIdentifierRefreshed";
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v31));
      v39[1] = @"refreshReason";
      v40[0] = v32;
      v40[1] = v12;
      id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v40,  v39,  2LL));
      sub_10030F080((uint64_t)&OBJC_CLASS___Analytics, v33, 30LL);

      if (os_variant_has_internal_content("com.apple.appstored"))
      {
        if (sub_1002F9754((uint64_t)&OBJC_CLASS___AppDefaultsManager))
        {
          id v34 = objc_alloc(&OBJC_CLASS___AMSDialogRequest);
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"The Arcade device identifier rolled over after %ld days.",  v31));
          uint64_t v36 = -[AMSDialogRequest initWithTitle:message:]( v34,  "initWithTitle:message:",  @"Arcade Device ID Rollover",  v35);

          id v37 = (void *)objc_claimAutoreleasedReturnValue( +[AMSDialogAction actionWithTitle:]( &OBJC_CLASS___AMSDialogAction,  "actionWithTitle:",  @"OK"));
          -[AMSDialogRequest setDefaultAction:](v36, "setDefaultAction:", v37);

          sub_10027808C((uint64_t)&OBJC_CLASS___InteractiveRequestPresenter, v36, 0LL);
        }
      }
    }

void sub_1002A4C5C(uint64_t a1)
{
  if (a1)
  {
    id v1 = sub_10019DC98((uint64_t)&OBJC_CLASS___AccountEventCoordinator);
    CFPropertyListRef v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    id v3 = sub_10019E434((uint64_t)v2);
    CFPropertyListRef v4 = (void *)objc_claimAutoreleasedReturnValue(v3);

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    CFPropertyListRef v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_activeiTunesAccount"));

    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 lastObject]);
    double v9 = v7;
    if (v7) {
      BOOL v10 = v6 == 0LL;
    }
    else {
      BOOL v10 = 1;
    }
    if (v10)
    {
      if (!v6)
      {
        int v18 = 0;
        goto LABEL_18;
      }

      [v4 count];
      BOOL v11 = 0;
    }

    else
    {
      id v12 = objc_getProperty(v7, v8, 8LL, 1);
      id v13 = sub_1001A4800(v12);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      uint64_t v15 = objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "ams_DSID"));
      uint64_t v17 = (void *)v15;
      if (v14 == (void *)v15)
      {
        BOOL v11 = 1;
        id v19 = objc_getProperty(v9, v16, 8LL, 1);
        if (sub_1001A486C(v19) != 2)
        {
          id v21 = objc_getProperty(v9, v20, 8LL, 1);
          BOOL v11 = sub_1001A486C(v21) == 1;
        }
      }

      else
      {
        BOOL v11 = 0;
      }

      if ([v4 count] && v11)
      {
        int v18 = 1;
LABEL_18:
        uint64_t v22 = ASDLogHandleForCategory(3LL);
        uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 67109376;
          *(_DWORD *)uint64_t v35 = v18;
          *(_WORD *)&v35[4] = 2048;
          *(void *)&v35[6] = [v4 count];
          _os_log_debug_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "[AccountEvent] Not adding an initial account event hasInitialEventForCurrentAccount: %d eventCount: %ld",  buf,  0x12u);
        }

id sub_1002A4FE0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002A5058;
  block[3] = &unk_1003E9EA8;
  void block[4] = objc_opt_self(a1);
  if (qword_100462528 != -1) {
    dispatch_once(&qword_100462528, block);
  }
  return (id)qword_100462520;
}

void sub_1002A5058(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  CFPropertyListRef v2 = (void *)qword_100462520;
  qword_100462520 = (uint64_t)v1;
}

uint64_t sub_1002A507C(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2020000000LL;
  uint64_t v7 = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1002A5138;
  v3[3] = &unk_1003EBD30;
  v3[4] = a1;
  void v3[5] = &v4;
  +[ApplicationProxy enumerateApplicationsOfType:usingBlock:]( &OBJC_CLASS___ApplicationProxy,  "enumerateApplicationsOfType:usingBlock:",  0LL,  v3);
  uint64_t v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1002A5120( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

BOOL sub_1002A5138(uint64_t a1, void *a2)
{
  BOOL result = sub_1002A5174(*(void *)(a1 + 32), a2);
  if (result) {
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  }
  return result;
}

BOOL sub_1002A5174(BOOL a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1) {
    a1 = [v3 isInstalled] && (objc_msgSend(v4, "isArcade") & 1) != 0;
  }

  return a1;
}

void sub_1002A51C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = *(dispatch_queue_s **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002A527C;
    block[3] = &unk_1003EA390;
    void block[4] = a1;
    id v9 = v5;
    id v10 = v6;
    dispatch_async(v7, block);
  }
}

void sub_1002A527C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 0LL);
  id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  sub_1002A52DC(v2, v3, v5, *(void **)(a1 + 48));
}

void sub_1002A52DC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    uint64_t v10 = ASDLogHandleForCategory(14LL);
    BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      if (v8) {
        id v12 = (void *)v8[9];
      }
      else {
        id v12 = 0LL;
      }
      id v13 = v12;
      *(_DWORD *)__int128 buf = 138412546;
      id v19 = v13;
      __int16 v20 = 2114;
      id v21 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_INFO,  "[%@] Flushing metrics with reason: %{public}@",  buf,  0x16u);
    }

    id v14 = -[ASEMetrics initWithType:](objc_alloc(&OBJC_CLASS____TtC9appstored10ASEMetrics), "initWithType:", 1LL);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    void v15[2] = sub_1002AC96C;
    v15[3] = &unk_1003EA020;
    uint64_t v16 = v8;
    id v17 = v9;
    -[ASEMetrics flushWithCompletionHandler:](v14, "flushWithCompletionHandler:", v15);
  }
}

void sub_1002A545C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002A54F0;
    v6[3] = &unk_1003E9FF8;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002A54F0(uint64_t a1)
{
  if (sub_1002A5648(*(void *)(a1 + 32)))
  {
    sub_1002A56E0(*(void *)(a1 + 32), 4LL, *(void **)(a1 + 40));
  }

  else
  {
    uint64_t v2 = sub_1002CBF24((uint64_t)&OBJC_CLASS___MetricsContext, 4LL);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    uint64_t v4 = ASDLogHandleForCategory(3LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138543362;
      id v9 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[%{public}@] User not opted-in to list app events",  (uint8_t *)&v8,  0xCu);
    }

    if (*(void *)(a1 + 40))
    {
      uint64_t v6 = ASDErrorWithTitleAndMessage( ASDErrorDomain,  507LL,  @"Metrics posting not enabled",  @"App Usage not Enabled");
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }

id sub_1002A5648(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  if ([v2 isHRNMode])
  {
    id v3 = 0LL;
  }

  else
  {
    id v4 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    uint64_t v6 = v5;
    if (v5) {
      id v3 = sub_100256DD0(v5, @"arcade-payout-enabled", (void *)1, 1);
    }
    else {
      id v3 = 0LL;
    }
  }

  return v3;
}

void sub_1002A56E0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (!a1) {
    goto LABEL_15;
  }
  uint64_t v6 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, a2);
  uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = v7;
  if (a2 == 4)
  {
    id v9 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    id v11 = sub_10025730C((uint64_t)v10, @"ocelot-payout-qualifying-duration-seconds", (void *)0x3C, 0);

    if (v8)
    {
      *(void *)(v8 + 80) = v11;
LABEL_6:
      *(_BYTE *)(v8 + _Block_object_dispose(va, 8) = 1;
    }
  }

  else if (v7)
  {
    goto LABEL_6;
  }

  id v12 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  id v13 = sub_1002AC1C8(a1, (void *)v8);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  id v15 = [v14 countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = *(void *)v30;
    do
    {
      int v18 = 0LL;
      do
      {
        if (*(void *)v30 != v17) {
          objc_enumerationMutation(v14);
        }
        id v19 = sub_1002FAAC4(*(void *)(*((void *)&v29 + 1) + 8LL * (void)v18));
        __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        -[NSMutableArray addObject:](v12, "addObject:", v20);

        int v18 = (char *)v18 + 1;
      }

      while (v16 != v18);
      id v16 = [v14 countByEnumeratingWithState:&v29 objects:v33 count:16];
    }

    while (v16);
  }

  id v21 = *(dispatch_queue_s **)(a1 + 56);
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_1002ACA88;
  v24[3] = &unk_1003EA8A8;
  CFPropertyListRef v25 = v12;
  id v26 = 0LL;
  id v27 = (id)v8;
  id v28 = v5;
  id v22 = (id)v8;
  uint64_t v23 = v12;
  dispatch_async(v21, v24);

LABEL_15:
}

void sub_1002A5910(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002A59A4;
    v6[3] = &unk_1003E9FF8;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002A59A4(uint64_t a1)
{
  uint64_t v2 = sub_1002CBF24((uint64_t)&OBJC_CLASS___MetricsContext, 3LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (sub_1001A788C(*(void *)(a1 + 32)))
  {
    sub_1002A56E0(*(void *)(a1 + 32), 3LL, *(void **)(a1 + 40));
  }

  else
  {
    uint64_t v4 = ASDLogHandleForCategory(3LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v8 = 138543362;
      id v9 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[%{public}@] User not opted-in to list app events",  (uint8_t *)&v8,  0xCu);
    }

    if (*(void *)(a1 + 40))
    {
      uint64_t v6 = ASDErrorWithTitleAndMessage( ASDErrorDomain,  507LL,  @"Metrics posting not enabled",  @"App Usage not Enabled");
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }
}

void sub_1002A5AD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device);
    int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    unsigned __int8 v9 = [v8 isHRNMode];

    if ((v9 & 1) == 0)
    {
      uint64_t v10 = *(dispatch_queue_s **)(a1 + 64);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1002A5BB8;
      block[3] = &unk_1003E97D0;
      void block[4] = a1;
      id v12 = v5;
      id v13 = v6;
      dispatch_async(v10, block);
    }
  }
}

void sub_1002A5BB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 48);
  id v3 = *(id *)(a1 + 40);
  id v4 = v2;
  if (v1)
  {
    uint64_t v5 = ASDLogHandleForCategory(4LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@] handleAppSubscriptionChange", buf, 0xCu);
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    int v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ams_activeiTunesAccount"));

    if (v8)
    {
      *(_BYTE *)(v1 + 96) = objc_msgSend(v8, "ams_isDemoAccount");
      if (*(_BYTE *)(v1 + 96))
      {
        uint64_t v9 = ASDLogHandleForCategory(4LL);
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v4;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[%@] Using retail demo account: %{public}@",  buf,  0x16u);
        }
      }
    }

    id v12 = [*(id *)(v1 + 32) copy];
    id v13 = *(void **)(v1 + 40);
    if (v13) {
      unsigned int v14 = [v13 BOOLValue] ^ 1;
    }
    else {
      unsigned int v14 = 1;
    }
    id v15 = *(id *)(v1 + 48);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v3 firstObject]);
    sub_1002ACD68(v1, v16, v8, v4);

    unsigned int v17 = [*(id *)(v1 + 40) BOOLValue];
    if (!v12) {
      goto LABEL_19;
    }
    uint64_t v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
    if (!v18) {
      goto LABEL_19;
    }
    id v19 = (void *)v18;
    id v20 = v3;
    id v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
    unsigned int v53 = [v12 isEqualToNumber:v21];

    id v3 = v20;
    if (((v17 ^ 1 | v14) & 1) == 0 && v53)
    {
      uint64_t v22 = ASDLogHandleForCategory(4LL);
      uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v4;
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "[%@] Skipping as subscription state has not changed for account: %{public}@",  buf,  0x16u);
      }
    }

    else
    {
LABEL_19:
      if (v17)
      {
        uint64_t v25 = ASDLogHandleForCategory(4LL);
        id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          id v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
          *(_DWORD *)__int128 buf = 138412802;
          *(void *)&uint8_t buf[4] = v4;
          *(_WORD *)&_BYTE buf[12] = 2114;
          *(void *)&buf[14] = v27;
          *(_WORD *)&buf[22] = 2114;
          __int16 v57 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "[%@] Handling subscription change due to fsEntitlement change with account: %{public}@ original: %{public}@",  buf,  0x20u);
        }

        if (v14)
        {
          uint64_t v28 = ASDLogHandleForCategory(4LL);
          __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v4;
            *(_WORD *)&_BYTE buf[12] = 2114;
            *(void *)&buf[14] = v30;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[%@] Resetting arcade activities due to fsEntitlement change with account: %{public}@",  buf,  0x16u);
          }

          __int128 v31 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 4LL);
          __int128 v32 = (_BYTE *)objc_claimAutoreleasedReturnValue(v31);
          id v33 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 3LL);
          id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
          if (v32) {
            v32[9] = 1;
          }
          sub_1002A75F8(v1, @"Subscription change", 1, v32);
          sub_1002A75F8(v1, @"Subscription change", 1, v34);
        }

        uint64_t v35 = *(dispatch_queue_s **)(v1 + 128);
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = sub_1002AD648;
        __int16 v57 = &unk_1003E9880;
        v58[0] = v1;
        dispatch_async(v35, buf);
        sub_1002AD660(v1);
      }

      else
      {
        uint64_t v36 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
        id v37 = *(void **)(v1 + 40);
        *(void *)(v1 + 40) = v36;

        uint64_t v38 = ASDLogHandleForCategory(4LL);
        id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        BOOL v40 = os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
        if ((v14 & 1) != 0)
        {
          if (v40)
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "[%@] Not subscribed prior to fsEntitlement change",  buf,  0xCu);
          }
        }

        else
        {
          if (v40)
          {
            uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
            *(_DWORD *)__int128 buf = 138413058;
            *(void *)&uint8_t buf[4] = v4;
            *(_WORD *)&_BYTE buf[12] = 2114;
            *(void *)&buf[14] = v15;
            *(_WORD *)&buf[22] = 2114;
            __int16 v57 = v12;
            LOWORD(v58[0]) = 2114;
            *(void *)((char *)v58 + 2) = v41;
            _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "[%@] fsEntitlement changed to Unsubscribed from: %{public}@ originalAccountID: %{public}@ currentAccount: %{public}@",  buf,  0x2Au);
          }

          id v42 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
          uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
          sub_100197D28((uint64_t)v43, 1LL);

          id v44 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
          unint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
          sub_100197D28((uint64_t)v45, 2LL);

          if (v8)
          {
            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
            id v47 = v46;
            if (v12 && v46)
            {
              uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
              unsigned int v49 = [v48 isEqualToNumber:v12];

              if (v49)
              {
                id v50 = *(dispatch_queue_s **)(v1 + 128);
                *(void *)__int128 buf = _NSConcreteStackBlock;
                *(void *)&uint8_t buf[8] = 3221225472LL;
                *(void *)&uint8_t buf[16] = sub_1002AD6C0;
                __int16 v57 = &unk_1003E9880;
                v58[0] = v1;
                dispatch_async(v50, buf);
              }
            }

            else
            {
            }
          }

          sub_1002A7EFC(v1, v12, v15, 1, v4);
        }
      }
    }

    uint64_t v51 = ASDLogHandleForCategory(4LL);
    id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v54 = 138412290;
      id v55 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  OS_LOG_TYPE_DEFAULT,  "[%@] handleAppSubscriptionChange complete",  v54,  0xCu);
    }
  }
}

BOOL sub_1002A62DC(uint64_t a1, char a2, void *a3, double a4)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v17 = 0LL;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000LL;
  char v20 = 0;
  uint64_t v11 = 0LL;
  id v12 = &v11;
  uint64_t v13 = 0x3032000000LL;
  unsigned int v14 = sub_1002A63F0;
  id v15 = sub_1002A6400;
  uint64_t v5 = *(dispatch_queue_s **)(a1 + 64);
  id v16 = 0LL;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002A6408;
  block[3] = &unk_1003F09C8;
  void block[4] = a1;
  void block[5] = &v17;
  char v10 = a2;
  *(double *)&void block[7] = a4;
  block[6] = &v11;
  dispatch_sync(v5, block);
  if (a3)
  {
    id v6 = (void *)v12[5];
    if (v6) {
      *a3 = v6;
    }
  }

  BOOL v7 = *((_BYTE *)v18 + 24) != 0;
  _Block_object_dispose(&v11, 8);

  _Block_object_dispose(&v17, 8);
  return v7;
}

uint64_t sub_1002A63F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002A6400(uint64_t a1)
{
}

void sub_1002A6408(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
  id v3 = *(void **)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 64);
  double v5 = *(double *)(a1 + 56);
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v6 + 40);
  unsigned __int8 v7 = sub_1002A648C(v3, v4, v2, &obj, v5);
  objc_storeStrong((id *)(v6 + 40), obj);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v7;
}

void *sub_1002A648C(void *a1, int a2, void *a3, void *a4, double a5)
{
  id v9 = a3;
  if (a1)
  {
    char v10 = (void *)a1[5];
    if (v10) {
      BOOL v11 = a2 == 0;
    }
    else {
      BOOL v11 = 0;
    }
    if (!v11)
    {
      uint64_t v38 = 0LL;
      id v39 = &v38;
      uint64_t v40 = 0x3032000000LL;
      uint64_t v41 = sub_1002A63F0;
      id v42 = sub_1002A6400;
      id v43 = 0LL;
      uint64_t v32 = 0LL;
      id v33 = &v32;
      uint64_t v34 = 0x3032000000LL;
      uint64_t v35 = sub_1002A63F0;
      uint64_t v36 = sub_1002A6400;
      id v37 = 0LL;
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "ams_activeiTunesAccount"));

      if (v13)
      {
        dispatch_semaphore_t v14 = dispatch_semaphore_create(0LL);
        id v15 = (void *)objc_claimAutoreleasedReturnValue( +[SubscriptionEntitlementsCoordinator sharedInstance]( &OBJC_CLASS___SubscriptionEntitlementsCoordinator,  "sharedInstance"));
        id v16 = sub_100316A0C((uint64_t)&OBJC_CLASS___XPCRequestToken, 1);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        v28[0] = _NSConcreteStackBlock;
        v28[1] = 3221225472LL;
        v28[2] = sub_1002ACAC0;
        void v28[3] = &unk_1003EF638;
        __int128 v30 = &v32;
        __int128 v31 = &v38;
        uint64_t v18 = v14;
        __int128 v29 = v18;
        sub_100265464(v15, 1uLL, v17, 0, 0, 0LL, v28);

        if (a5 <= 0.0)
        {
          dispatch_semaphore_wait(v18, 0xFFFFFFFFFFFFFFFFLL);
        }

        else
        {
          dispatch_time_t v19 = dispatch_time(0LL, (uint64_t)(a5 * 1000000000.0));
          if (dispatch_semaphore_wait(v18, v19))
          {
            uint64_t v20 = ASDErrorWithTitleAndMessage(ASDErrorDomain, 515LL, 0LL, 0LL);
            uint64_t v21 = objc_claimAutoreleasedReturnValue(v20);
            uint64_t v22 = (void *)v39[5];
            v39[5] = v21;
          }
        }

        if (a4)
        {
          uint64_t v24 = (void *)v39[5];
          if (v24) {
            *a4 = v24;
          }
        }

        id v23 = (id)v33[5];
      }

      else
      {
        id v23 = 0LL;
      }

      _Block_object_dispose(&v32, 8);
      _Block_object_dispose(&v38, 8);

      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
      id v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v25, "ams_activeiTunesAccount"));

      sub_1002ACD68((uint64_t)a1, v23, v26, v9);
      char v10 = (void *)a1[5];
    }

    a1 = [v10 BOOLValue];
  }

  return a1;
}

void sub_1002A6740( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1002A676C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    unsigned __int8 v7 = *(dispatch_queue_s **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002A681C;
    block[3] = &unk_1003EA390;
    id v9 = v5;
    uint64_t v10 = a1;
    id v11 = v6;
    dispatch_async(v7, block);
  }
}

void sub_1002A681C(void *a1)
{
  uint64_t v2 = ASDLogHandleForCategory(3LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[Arcade] Record app event: [%{public}@]",  (uint8_t *)&buf,  0xCu);
  }

  uint64_t v5 = a1[5];
  uint64_t v19 = a1[4];
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v19, 1LL));
  unsigned __int8 v7 = (void *)a1[6];
  id v8 = v6;
  id v10 = v7;
  if (v5)
  {
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___AppEventEntityOcelotPayout, v9);
    uint64_t v13 = objc_opt_class(&OBJC_CLASS___AppEventEntityOcelot, v12);
    id v14 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    uint64_t v21 = sub_1002ADC7C;
    uint64_t v22 = &unk_1003F0AF0;
    id v23 = v8;
    uint64_t v24 = v11;
    uint64_t v25 = v13;
    [v15 modifyUsingTransaction:&buf];

    if (v10)
    {
      uint64_t v16 = *(dispatch_queue_s **)(v5 + 56);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      void v17[2] = sub_1002ADFB0;
      v17[3] = &unk_1003EA158;
      id v18 = v10;
      dispatch_async(v16, v17);
    }
  }
}

void sub_1002A69F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002A6A88;
    v6[3] = &unk_1003E9FF8;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002A6A88(uint64_t a1)
{
  uint64_t v2 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 3LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = ASDLogHandleForCategory(3LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v3) {
      id v6 = (void *)v3[9];
    }
    else {
      id v6 = 0LL;
    }
    id v7 = v6;
    int v11 = 138412290;
    id v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] Recording launch events",  (uint8_t *)&v11,  0xCu);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 4LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  sub_1002A6BAC(v8);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002A6BAC(uint64_t a1)
{
  if (a1)
  {
    dispatch_semaphore_t v2 = dispatch_semaphore_create(0LL);
    id v3 = sub_100233508((uint64_t)&OBJC_CLASS___MetricsCoordinator);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    void v12[2] = sub_1002ADFC4;
    v12[3] = &unk_1003EA180;
    uint64_t v5 = v2;
    uint64_t v13 = v5;
    sub_100235E70((uint64_t)v4, 9LL, v12);

    dispatch_time_t v6 = dispatch_time(0LL, 15000000000LL);
    if (dispatch_semaphore_wait(v5, v6))
    {
      uint64_t v7 = ASDLogHandleForCategory(13LL);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        id v10 = (void *)objc_opt_class(a1, v9);
        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v15 = v10;
        id v11 = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%{public}@]: Timed out waiting to sync launches",  buf,  0xCu);
      }
    }
  }

void sub_1002A6D10(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002A6DA4;
    v6[3] = &unk_1003E9FF8;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002A6DA4(uint64_t a1)
{
  dispatch_semaphore_t v2 = sub_1002CBF24((uint64_t)&OBJC_CLASS___MetricsContext, 4LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  unsigned int v4 = sub_1002A5648(*(void *)(a1 + 32));
  uint64_t v5 = ASDLogHandleForCategory(3LL);
  dispatch_time_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      int v12 = 138543362;
      uint64_t v13 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Posting Metrics",  (uint8_t *)&v12,  0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 4LL);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    sub_1002A6F0C(v8, v10);

    id v11 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    if (v7)
    {
      int v12 = 138543362;
      uint64_t v13 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Not enabled",  (uint8_t *)&v12,  0xCu);
    }

    id v11 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v11();
}

void sub_1002A6F0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (a1)
  {
    if (v3)
    {
      if (v3[4] == 4LL)
      {
        id v5 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
        dispatch_time_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
        id v7 = sub_10025730C((uint64_t)v6, @"ocelot-payout-qualifying-duration-seconds", (void *)0x3C, 0);

        v4[10] = v7;
      }

      uint64_t v8 = ASDLogHandleForCategory(3LL);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = (id)v4[9];
        *(_DWORD *)__int128 buf = 138412290;
        id v32 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[%@] Posting arcade metrics", buf, 0xCu);
      }

      *((_BYTE *)v4 + 9) = 1;
      if (v4[4] == 3LL) {
        sub_1002A4798(a1);
      }
      id v11 = sub_1002AC1C8(a1, v4);
      id v12 = (id)objc_claimAutoreleasedReturnValue(v11);
      if ([v12 count])
      {
        dispatch_semaphore_t v13 = dispatch_semaphore_create(0LL);
        id v14 = -[ASEMetrics initWithType:](objc_alloc(&OBJC_CLASS____TtC9appstored10ASEMetrics), "initWithType:", 1LL);
        v29[0] = _NSConcreteStackBlock;
        v29[1] = 3221225472LL;
        v29[2] = sub_1002AD8A4;
        void v29[3] = &unk_1003E9880;
        dispatch_semaphore_t v30 = v13;
        uint64_t v15 = v13;
        -[ASEMetrics enqueueEvents:flushEvents:completionHandler:]( v14,  "enqueueEvents:flushEvents:completionHandler:",  v12,  0LL,  v29);

        dispatch_semaphore_wait(v15, 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v17 = sub_1002CBF9C(v4, v16);
        id v18 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472LL;
        v25[2] = sub_1002AD8AC;
        v25[3] = &unk_1003F0AC8;
        id v12 = v12;
        id v26 = v12;
        uint64_t v28 = v17;
        uint64_t v20 = v4;
        id v27 = v20;
        [v19 modifyUsingTransaction:v25];

        sub_1002AC838(a1, v20, @"Post Completed");
      }

      else
      {
        uint64_t v22 = ASDLogHandleForCategory(3LL);
        id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          id v24 = (id)v4[9];
          *(_DWORD *)__int128 buf = 138412290;
          id v32 = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "[%@] No events to report", buf, 0xCu);
        }

        sub_1002AC838(a1, v4, @"Nothing to Post");
      }
    }

    else
    {
      uint64_t v21 = ASDLogHandleForCategory(3LL);
      id v12 = (id)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled((os_log_t)v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  OS_LOG_TYPE_ERROR,  "Error creating context to post",  buf,  2u);
      }
    }
  }
}

void sub_1002A724C(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (a1)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002A72E0;
    v6[3] = &unk_1003E9FF8;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002A72E0(uint64_t a1)
{
  dispatch_semaphore_t v2 = sub_1002CBF24((uint64_t)&OBJC_CLASS___MetricsContext, 3LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  int v4 = sub_1001A788C(*(void *)(a1 + 32));
  uint64_t v5 = ASDLogHandleForCategory(3LL);
  dispatch_time_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      int v12 = 138543362;
      dispatch_semaphore_t v13 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Posting Metrics",  (uint8_t *)&v12,  0xCu);
    }

    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 3LL);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    sub_1002A6F0C(v8, v10);

    id v11 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  else
  {
    if (v7)
    {
      int v12 = 138543362;
      dispatch_semaphore_t v13 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Not enabled",  (uint8_t *)&v12,  0xCu);
    }

    id v11 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
  }

  v11();
}

void sub_1002A7448(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002A74DC;
    v6[3] = &unk_1003E9FF8;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002A74DC(uint64_t a1)
{
  dispatch_semaphore_t v2 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 3LL);
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  int v4 = (void *)v3;
  if (v3) {
    *(_BYTE *)(v3 + 10) = 1;
  }
  uint64_t v5 = ASDLogHandleForCategory(3LL);
  dispatch_time_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (v4) {
      id v7 = (void *)v4[9];
    }
    else {
      id v7 = 0LL;
    }
    id v8 = v7;
    int v9 = 138412290;
    id v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[%@] Resetting metrics", (uint8_t *)&v9, 0xCu);
  }

  sub_1002A75F8(*(void *)(a1 + 32), @"External request", 1, v4);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002A75F8(uint64_t a1, void *a2, int a3, void *a4)
{
  id v21 = a2;
  id v7 = a4;
  id v8 = v7;
  if (a1)
  {
    if (!v7)
    {
LABEL_20:
      sub_1002A4C5C(a1);
      goto LABEL_21;
    }

    uint64_t v9 = *((void *)v7 + 4);
    if (v9 == 3)
    {
      sub_1002CBFEC((uint64_t)v7);
      sub_1002ADAD0(v8);
      id v14 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
      uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
      uint64_t v16 = (void *)v15;
      if (!v15) {
        goto LABEL_19;
      }
      uint64_t v17 = 1LL;
    }

    else
    {
      if (v9 != 4) {
        goto LABEL_20;
      }
      CFPropertyListRef v10 = sub_1002F9434((uint64_t)&OBJC_CLASS___AppDefaultsManager);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

      if (!v11)
      {
        int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
        dispatch_semaphore_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 UUIDString]);

        sub_1002F9644((uint64_t)&OBJC_CLASS___AppDefaultsManager, v13);
      }

      if (v8[9]
        || (id v18 = sub_10023369C((uint64_t)&OBJC_CLASS___MetricsCoordinator, 4LL),
            uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18),
            v19,
            !v19))
      {
        sub_1002CBFEC((uint64_t)v8);
      }

      sub_1002ADAD0(v8);
      id v20 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
      uint64_t v15 = objc_claimAutoreleasedReturnValue(v20);
      uint64_t v16 = (void *)v15;
      if (!v15) {
        goto LABEL_19;
      }
      uint64_t v17 = 2LL;
    }

    sub_100197418(v15, v17, v21, 1, 0LL);
LABEL_19:

    goto LABEL_20;
  }

void sub_1002A7784(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002A780C;
    block[3] = &unk_1003EA158;
    id v7 = v3;
    dispatch_async(v5, block);
  }
}

void sub_1002A780C(uint64_t a1)
{
  dispatch_semaphore_t v2 = sub_1002CBF24((uint64_t)&OBJC_CLASS___MetricsContext, 4LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  CFPropertyListRef v4 = sub_1002F945C((uint64_t)&OBJC_CLASS___AppDefaultsManager);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = ASDLogHandleForCategory(3LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (v5)
    {
      [v5 timeIntervalSince1970];
      uint64_t v9 = (uint64_t)v8;
    }

    else
    {
      uint64_t v9 = 0LL;
    }

    int v13 = 138543618;
    id v14 = v3;
    __int16 v15 = 2048;
    uint64_t v16 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Payout metrics reset with current payout reset time: %{time_t}ld",  (uint8_t *)&v13,  0x16u);
  }

  id v10 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
  uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
  int v12 = (void *)v11;
  if (v11) {
    sub_100197418(v11, 5LL, @"Rescheduling", 1, 0LL);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002A795C(uint64_t a1, void *a2)
{
  id v3 = a2;
  CFPropertyListRef v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002A79F0;
    v6[3] = &unk_1003E9FF8;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002A79F0(uint64_t a1)
{
  dispatch_semaphore_t v2 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 4LL);
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  CFPropertyListRef v4 = (void *)v3;
  if (v3) {
    *(_WORD *)(v3 + 9) = 257;
  }
  id v5 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  id v7 = (void *)v6;
  if (v6) {
    sub_100197418(v6, 5LL, @"Rescheduling", 1, 0LL);
  }

  sub_1002A75F8(*(void *)(a1 + 32), @"External request", 1, v4);
  double v8 = sub_10023369C((uint64_t)&OBJC_CLASS___MetricsCoordinator, 4LL);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = ASDLogHandleForCategory(3LL);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    if (v4) {
      int v12 = (void *)v4[9];
    }
    else {
      int v12 = 0LL;
    }
    id v13 = v12;
    if (v9)
    {
      [v9 timeIntervalSince1970];
      uint64_t v15 = (uint64_t)v14;
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    int v16 = 138412546;
    id v17 = v13;
    __int16 v18 = 2048;
    uint64_t v19 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%@] External payout metrics reset with current interval start time: %{time_t}ld",  (uint8_t *)&v16,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002A7B8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    if (v6) {
      (*((void (**)(id, uint64_t, void))v6 + 2))(v6, 1LL, 0LL);
    }
    double v8 = *(dispatch_queue_s **)(a1 + 64);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    void v9[2] = sub_1002A7C44;
    void v9[3] = &unk_1003E9DC0;
    id v10 = v5;
    uint64_t v11 = a1;
    dispatch_async(v8, v9);
  }
}

void sub_1002A7C44(uint64_t a1)
{
  dispatch_semaphore_t v2 = -[LogKey initWithCategory:]( objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey),  "initWithCategory:",  @"Arcade/Sbsync");
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_DSID"));
  uint64_t v4 = ASDLogHandleForCategory(4LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_DSID"));
      int v15 = 138412802;
      int v16 = v2;
      __int16 v17 = 2114;
      __int16 v18 = v7;
      __int16 v19 = 2114;
      id v20 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] Signout sbsync started for active accountID: %{public}@ subscribed accountID: %{public}@",  (uint8_t *)&v15,  0x20u);
    }

    id v5 = (os_log_s *)sub_100223904(objc_alloc(&OBJC_CLASS___SbsyncTask), 1LL);
    sub_100225094((uint64_t)v5, v2);
    if (v5) {
      objc_setProperty_nonatomic_copy(v5, v8, *(id *)(a1 + 32), 64LL);
    }
    -[os_log_s setCompletionBlock:](v5, "setCompletionBlock:", &stru_1003F09E8);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(v9 + 136);
    if (v10)
    {
      [*(id *)(v10 + 8) addOperation:v5];
      uint64_t v9 = *(void *)(a1 + 40);
    }

    id v11 = *(id *)(v9 + 48);
    sub_1002A7EFC(*(void *)(a1 + 40), v3, v11, 0, v2);
    uint64_t v12 = ASDLogHandleForCategory(4LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412290;
      int v16 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%@] Signout sbsync complete",  (uint8_t *)&v15,  0xCu);
    }
  }

  else if (v6)
  {
    double v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_DSID"));
    int v15 = 138412802;
    int v16 = v2;
    __int16 v17 = 2114;
    __int16 v18 = v14;
    __int16 v19 = 2114;
    id v20 = 0LL;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] Skipping signout sbsync for active accountID: %{public}@ subscribed accountID: %{public}@",  (uint8_t *)&v15,  0x20u);
  }
}

void sub_1002A7EB0(id a1)
{
  id v1 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
  dispatch_semaphore_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  if (v2)
  {
    id v3 = v2;
    sub_100197418((uint64_t)v2, 7LL, @"Activity Complete", 1, 0LL);
    dispatch_semaphore_t v2 = v3;
  }
}

void sub_1002A7EFC(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a1)
  {
    uint64_t v12 = ASDLogHandleForCategory(4LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = 138412802;
      id v31 = v11;
      __int16 v32 = 2114;
      id v33 = v9;
      __int16 v34 = 2114;
      id v35 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%@] Sign out start for subscribed accountID: %{public}@ with subscriptionState: %{public}@",  (uint8_t *)&v30,  0x20u);
    }

    double v14 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 4LL);
    int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    int v16 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 3LL);
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    sub_1002CC140((uint64_t)v17, v10);
    if (v9)
    {
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
      id v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "ams_iTunesAccountWithDSID:", v9));
      if (v15) {
        objc_setProperty_nonatomic_copy(v15, v19, v20, 128LL);
      }

      id v21 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
      id v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "ams_iTunesAccountWithDSID:", v9));
      if (v17) {
        objc_setProperty_nonatomic_copy(v17, v22, v23, 128LL);
      }

      uint64_t v24 = ASDLogHandleForCategory(4LL);
      uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        if (v17) {
          id v26 = (void *)v17[16];
        }
        else {
          id v26 = 0LL;
        }
        id v27 = v26;
        int v30 = 138412802;
        id v31 = v11;
        __int16 v32 = 2114;
        id v33 = v9;
        __int16 v34 = 2114;
        id v35 = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "[%@] Using subscribed accountID: %{public}@ account: %{public}@ for metrics summary / payout posting",  (uint8_t *)&v30,  0x20u);
      }
    }

    if (a4)
    {
      sub_1002ADAD0(v15);
      sub_1002ADAD0(v17);
      sub_1002AAF94(a1);
      sub_1002AD660(a1);
    }

    uint64_t v28 = ASDLogHandleForCategory(4LL);
    __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = 138412802;
      id v31 = v11;
      __int16 v32 = 2114;
      id v33 = v9;
      __int16 v34 = 2114;
      id v35 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "[%@] Sign out complete for accountID: %{public}@ subscribe with subscriptionState: %{public}@",  (uint8_t *)&v30,  0x20u);
    }
  }
}

void sub_1002A8204(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = *(dispatch_queue_s **)(a1 + 64);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1002A82DC;
    v11[3] = &unk_1003EA5E8;
    id v12 = v7;
    id v13 = v8;
    uint64_t v14 = a1;
    id v15 = v9;
    dispatch_async(v10, v11);
  }
}

void sub_1002A82DC(uint64_t a1)
{
  dispatch_semaphore_t v2 = sub_100223904(objc_alloc(&OBJC_CLASS___SbsyncTask), 0LL);
  id v3 = -[LogKey initWithCategory:base:]( objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey),  "initWithCategory:base:",  @"Sbsync",  *(void *)(a1 + 32));
  sub_100225094((uint64_t)v2, v3);

  id v5 = *(void **)(a1 + 40);
  if (v5 && v2) {
    objc_setProperty_nonatomic_copy(v2, v4, v5, 96LL);
  }
  objc_initWeak(&location, v2);
  id v7 = _NSConcreteStackBlock;
  uint64_t v8 = 3221225472LL;
  id v9 = sub_1002A8440;
  id v10 = &unk_1003F0A10;
  objc_copyWeak(&v13, &location);
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 56);
  [v2 setCompletionBlock:&v7];
  uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 136LL);
  if (v6) {
    objc_msgSend(*(id *)(v6 + 8), "addOperation:", v2, v7, v8, v9, v10, v11);
  }

  objc_destroyWeak(&v13);
  objc_destroyWeak(&location);
}

void sub_1002A8420(_Unwind_Exception *a1)
{
}

void sub_1002A8440(uint64_t a1)
{
  self = objc_loadWeakRetained((id *)(a1 + 48));
  id v2 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = (void *)v3;
  if (v3) {
    sub_100197418(v3, 7LL, *(void **)(a1 + 32), 1, 0LL);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  id Property = self;
  if (self)
  {
    uint64_t v8 = self[24] & 1;
    id Property = objc_getProperty(self, v5, 32LL, 1);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  id v9 = Property;
  (*(void (**)(uint64_t, uint64_t, id))(v6 + 16))(v6, v8, v9);
}

void sub_1002A8504(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    id v9 = *(dispatch_queue_s **)(a1 + 128);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    void v10[2] = sub_1002A85C8;
    v10[3] = &unk_1003F0A38;
    void v10[4] = a1;
    id v11 = v7;
    char v13 = a3;
    id v12 = v8;
    dispatch_async(v9, v10);
  }
}

void sub_1002A85C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  char v4 = *(_BYTE *)(a1 + 56);
  id v11 = 0LL;
  uint64_t v5 = sub_1002A866C(v2, v3, v4, &v11);
  id v6 = v11;
  id v7 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
  uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
  id v9 = (void *)v8;
  if (v8) {
    sub_100197418(v8, 7LL, *(void **)(a1 + 40), 1, 0LL);
  }

  uint64_t v10 = *(void *)(a1 + 48);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t, id))(v10 + 16))(v10, v5, v6);
  }
}

uint64_t sub_1002A866C(uint64_t result, void *a2, char a3, void *a4)
{
  if (result)
  {
    uint64_t v6 = result;
    id v7 = a2;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_activeiTunesAccount"));

    uint64_t v10 = -[LogKey initWithCategory:base:]( objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey),  "initWithCategory:base:",  @"Sbsync",  v7);
    id v11 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    id v51 = 0LL;
    id v13 = sub_100255C80((uint64_t)v12, (uint64_t)@"arcade-refresh-keybag-on-demand", &v51);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    id v15 = (_TtC9appstored6LogKey *)v51;

    if (v15)
    {
      uint64_t v16 = ASDLogHandleForCategory(4LL);
      __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 138543362;
        int v54 = v15;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Error fetching refresh on demand value: %{public}@",  buf,  0xCu);
      }
    }

    if (v14)
    {
      unsigned int v18 = [v14 BOOLValue];

      if (v18)
      {
        uint64_t v19 = ASDLogHandleForCategory(3LL);
        id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138412290;
          int v54 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%@ Skipping sbsync because sbsync on demand enabled",  buf,  0xCu);
        }

        goto LABEL_18;
      }
    }

    else
    {
    }

    if (!v9)
    {
LABEL_18:
      unsigned __int8 v25 = 0;
      id v22 = 0LL;
LABEL_58:
      unsigned __int8 v50 = v25;

      return v50;
    }

    if (sub_1002A507C(v6) > 0) {
      char v21 = 1;
    }
    else {
      char v21 = a3;
    }
    if ((v21 & 1) != 0)
    {
      id v22 = 0LL;
      BOOL v23 = 0;
      uint64_t v24 = 0LL;
      goto LABEL_29;
    }

    id v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ams_DSID"));
    id v49 = 0LL;
    BOOL v27 = sub_100224C38((uint64_t)&OBJC_CLASS___SbsyncTask, v26, &v49);
    id v22 = v49;
    BOOL v23 = !v27;

    if (v22)
    {
      uint64_t v28 = ASDLogHandleForCategory(3LL);
      __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138412546;
        int v54 = v10;
        __int16 v55 = 2114;
        id v56 = v22;
        _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "%@ Error looking up subscription status. Error: %{public}@",  buf,  0x16u);
      }
    }

    if (v27)
    {
      uint64_t v35 = ASDLogHandleForCategory(3LL);
      id v33 = (_BYTE *)objc_claimAutoreleasedReturnValue(v35);
      if (!os_log_type_enabled((os_log_t)v33, OS_LOG_TYPE_ERROR))
      {
LABEL_28:

        uint64_t v24 = 1LL;
LABEL_29:
        id v33 = sub_100223904(objc_alloc(&OBJC_CLASS___SbsyncTask), v24);
        sub_100225094((uint64_t)v33, v10);
        uint64_t v36 = *(void *)(v6 + 136);
        id v52 = v33;
        id v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v52, 1LL));
        if (v36) {
          [*(id *)(v36 + 8) addOperations:v37 waitUntilFinished:1];
        }

        if (v33)
        {
          id v39 = objc_getProperty(v33, v38, 32LL, 1);

          unsigned __int8 v25 = v33[24] & 1;
          id v22 = v39;
          if (v23)
          {
LABEL_33:
            if (!v22
              || (uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v22 userInfo]),
                  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:@"AMSServerErrorCode"]),
                  id v42 = [v41 integerValue],
                  v41,
                  v40,
                  v42 == (id)5002))
            {
              uint64_t v43 = ASDLogHandleForCategory(3LL);
              id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
              if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)__int128 buf = 138412290;
                int v54 = v10;
                _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "%@ Clearing previous failed attempt to opt-out.",  buf,  0xCu);
              }

void sub_1002A8C94(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002A8D28;
    v6[3] = &unk_1003E9FF8;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002A8D28(uint64_t a1)
{
  uint64_t v2 = sub_1002CBF24((uint64_t)&OBJC_CLASS___MetricsContext, 4LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  unsigned int v4 = sub_1002A5648(*(void *)(a1 + 32));
  uint64_t v5 = ASDLogHandleForCategory(3LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (!v4)
  {
    if (v7)
    {
      int v13 = 138543362;
      uint64_t v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Not enabled to send metrics",  (uint8_t *)&v13,  0xCu);
    }

    id v12 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    goto LABEL_9;
  }

  if (v7)
  {
    int v13 = 138543362;
    uint64_t v14 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] External Request",  (uint8_t *)&v13,  0xCu);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 4LL);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  sub_1002A6F0C(v8, v10);

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11)
  {
    id v12 = *(void (**)(void))(v11 + 16);
LABEL_9:
    v12();
  }
}

void sub_1002A8E94(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 64);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002A8F28;
    v6[3] = &unk_1003E9FF8;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002A8F28(uint64_t a1)
{
  uint64_t v2 = sub_1002CBF24((uint64_t)&OBJC_CLASS___MetricsContext, 3LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  int v4 = sub_1001A788C(*(void *)(a1 + 32));
  uint64_t v5 = ASDLogHandleForCategory(3LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (!v4)
  {
    if (v7)
    {
      int v13 = 138543362;
      uint64_t v14 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Not enabled",  (uint8_t *)&v13,  0xCu);
    }

    id v12 = *(void (**)(void))(*(void *)(a1 + 40) + 16LL);
    goto LABEL_9;
  }

  if (v7)
  {
    int v13 = 138543362;
    uint64_t v14 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] External Request",  (uint8_t *)&v13,  0xCu);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 3LL);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  sub_1002A6F0C(v8, v10);

  uint64_t v11 = *(void *)(a1 + 40);
  if (v11)
  {
    id v12 = *(void (**)(void))(v11 + 16);
LABEL_9:
    v12();
  }
}

void sub_1002A9094(uint64_t a1, void *a2)
{
  id v7 = a2;
  if (a1)
  {
    id v3 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device);
    int v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    unsigned __int8 v5 = [v4 isHRNMode];

    if ((v5 & 1) == 0)
    {
      uint64_t v6 = *(dispatch_queue_s **)(a1 + 64);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1002A914C;
      block[3] = &unk_1003E9DC0;
      id v9 = v7;
      uint64_t v10 = a1;
      dispatch_sync(v6, block);
    }
  }
}

void sub_1002A914C(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(4LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v23 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Setup with reason: %{public}@", buf, 0xCu);
  }

  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue( +[KeepAlive keepAliveWithName:]( &OBJC_CLASS___KeepAlive,  "keepAliveWithName:",  @"com.apple.PersonalizationManager.setupFollowingMigration"));
  id v6 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [v7 modifyUsingTransaction:&stru_1003F0A58];

  if (sub_1002A5648(*(void *)(a1 + 40)))
  {
    uint64_t v8 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 4LL);
    uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = (void *)v9;
    if (v9) {
      *(_BYTE *)(v9 + 9) = 0;
    }
    uint64_t v11 = sub_10023369C((uint64_t)&OBJC_CLASS___MetricsCoordinator, 4LL);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

    if (v12) {
      sub_1002A6BAC(*(void *)(a1 + 40));
    }
    sub_1002A75F8(*(void *)(a1 + 40), *(void **)(a1 + 32), 0, v10);
  }

  if (sub_1001A788C(*(void *)(a1 + 40)))
  {
    int v13 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 3LL);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    id v15 = sub_10023369C((uint64_t)&OBJC_CLASS___MetricsCoordinator, 4LL);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

    if (v16) {
      sub_1002A6BAC(*(void *)(a1 + 40));
    }
    sub_1002A75F8(*(void *)(a1 + 40), *(void **)(a1 + 32), 0, v14);
  }

  uint64_t v17 = *(void *)(a1 + 40);
  unsigned int v18 = *(dispatch_queue_s **)(v17 + 144);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  void v20[2] = sub_1002A93E8;
  v20[3] = &unk_1003E9DC0;
  void v20[4] = v17;
  id v21 = v5;
  id v19 = v5;
  dispatch_async(v18, v20);
}

BOOL sub_1002A9364(id a1, AppUsageDatabaseTransaction *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = objc_claimAutoreleasedReturnValue(-[AppUsageDatabaseTransaction connection](v2, "connection"));
  uint64_t v4 = (void *)v3;
  if (v3) {
    sub_1001D68EC(v3, @"DELETE FROM app_events_ocelot where event_type != 2;", 0LL, 0LL);
  }

  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue(-[AppUsageDatabaseTransaction connection](v2, "connection"));
  if (v5) {
    sub_1001D68EC((uint64_t)v5, @"DELETE FROM app_events_ocelot_payout where event_type != 4;", 0LL, 0LL);
  }

  return 1;
}

void sub_1002A93E8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  id v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "ams_activeiTunesAccount"));

  uint64_t v3 = v4;
  if (v4)
  {
    sub_1002A944C(*(void *)(a1 + 32), v4, 0LL);
    uint64_t v3 = v4;
  }
}

void sub_1002A944C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v186 = a3;
  if (!a1) {
    goto LABEL_147;
  }
  double Current = CFAbsoluteTimeGetCurrent();
  id v7 = sub_1002CBC50(objc_alloc(&OBJC_CLASS___MetricsContext), 0LL);
  uint64_t v8 = -[LogKey initWithBase:](objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey), "initWithBase:", @"TopApps");
  sub_1002CC0EC((uint64_t)v7, v8);

  uint64_t v9 = ASDLogHandleForCategory(3LL);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    if (v7) {
      uint64_t v11 = (void *)v7[9];
    }
    else {
      uint64_t v11 = 0LL;
    }
    id v12 = v11;
    int v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_DSID"));
    *(_DWORD *)__int128 buf = 138412546;
    id v217 = v12;
    __int16 v218 = 2114;
    id v219 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[TopApps] [%@] Start for account: %{public}@",  buf,  0x16u);
  }

  id v14 = sub_1002AE5D8();
  id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  if (!v15)
  {
    uint64_t v24 = ASDLogHandleForCategory(4LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_ERROR,  "[TopApps] Unable to generate the path in order to load cached",  buf,  2u);
    }

    goto LABEL_15;
  }

  uint64_t v16 = -[NSData initWithContentsOfFile:](objc_alloc(&OBJC_CLASS___NSData), "initWithContentsOfFile:", v15);
  if (!v16)
  {
LABEL_15:
    id v185 = &__NSDictionary0__struct;
    goto LABEL_20;
  }

  id v17 = v5;
  uint64_t v18 = ASDLogHandleForCategory(4LL);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "[TopApps] Load cached top apps data", buf, 2u);
  }

  *(void *)&__int128 v203 = 0LL;
  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v16,  0LL,  0LL,  &v203));
  id v21 = (id)v203;
  uint64_t v23 = objc_opt_class(&OBJC_CLASS___NSDictionary, v22);
  if ((objc_opt_isKindOfClass(v20, v23) & 1) != 0 && v20)
  {
    id v185 = v20;
  }

  else
  {
    uint64_t v25 = ASDLogHandleForCategory(4LL);
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543362;
      id v217 = v21;
      _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "[TopApps] Failed to deserialize the top apps. Error: %{public}@",  buf,  0xCu);
    }

    id v185 = &__NSDictionary0__struct;
  }

  id v5 = v17;
LABEL_20:

  BOOL v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_DSID"));
  if (!v27)
  {
    uint64_t v131 = ASDLogHandleForCategory(3LL);
    uint64_t v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);
    if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        uint64_t v133 = (void *)v7[9];
      }
      else {
        uint64_t v133 = 0LL;
      }
      id v134 = v133;
      *(_DWORD *)__int128 buf = 138412290;
      id v217 = v134;
      _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEFAULT,  "[TopApps] [%@] No account to lookup top apps",  buf,  0xCu);
    }

    uint64_t v135 = 0LL;
    if (v186) {
      v186[2](v186, &__NSArray0__struct, 0LL);
    }
    goto LABEL_146;
  }

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  [v28 timeIntervalSinceReferenceDate];
  double v30 = v29;

  id v188 = v27;
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v27 stringValue]);
  __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v185 objectForKeyedSubscript:v31]);

  id v184 = v32;
  if (v32)
  {
    id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:@"lastCache"]);
    uint64_t v34 = (uint64_t)[v33 longLongValue];
    double v35 = (double)v34;

    if (v34 < 1 || (uint64_t)(v30 - (double)v34) < 901)
    {
      if (v186)
      {
        uint64_t v136 = (void *)objc_claimAutoreleasedReturnValue([v184 objectForKeyedSubscript:@"apps"]);
        uint64_t v137 = ASDLogHandleForCategory(3LL);
        uint64_t v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);
        uint64_t v135 = v188;
        if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
        {
          if (v7) {
            uint64_t v139 = (void *)v7[9];
          }
          else {
            uint64_t v139 = 0LL;
          }
          id v140 = v139;
          v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v136, "componentsJoinedByString:", @", "));
          *(_DWORD *)__int128 buf = 138413058;
          id v217 = v140;
          __int16 v218 = 2114;
          id v219 = v188;
          __int16 v220 = 2048;
          *(void *)&double v221 = (uint64_t)(v30 - v35);
          __int16 v222 = 2114;
          v223 = v141;
          _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_DEFAULT,  "[TopApps] [%@] Returning cached top apps data for account: %{public}@ cache age: %llu seconds apps: [%{public}@]",  buf,  0x2Au);
        }

        v186[2](v186, v136, 0LL);
      }

      else
      {
        uint64_t v142 = ASDLogHandleForCategory(3LL);
        uint64_t v136 = (void *)objc_claimAutoreleasedReturnValue(v142);
        uint64_t v135 = v188;
        if (os_log_type_enabled((os_log_t)v136, OS_LOG_TYPE_DEFAULT))
        {
          if (v7) {
            uint64_t v143 = (void *)v7[9];
          }
          else {
            uint64_t v143 = 0LL;
          }
          id v144 = v143;
          *(_DWORD *)__int128 buf = 138412802;
          id v217 = v144;
          __int16 v218 = 2114;
          id v219 = v188;
          __int16 v220 = 2048;
          *(void *)&double v221 = (uint64_t)(v30 - v35);
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v136,  OS_LOG_TYPE_DEFAULT,  "[TopApps] [%@] No handler to return cached top apps for account: %{public}@ cache age: %llu seconds",  buf,  0x20u);
        }
      }

      double v145 = CFAbsoluteTimeGetCurrent();
      uint64_t v146 = ASDLogHandleForCategory(3LL);
      id v147 = (os_log_s *)objc_claimAutoreleasedReturnValue(v146);
      if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
      {
        if (v7) {
          uint64_t v148 = (void *)v7[9];
        }
        else {
          uint64_t v148 = 0LL;
        }
        id v149 = v148;
        id v150 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_DSID"));
        *(_DWORD *)__int128 buf = 138412802;
        id v217 = v149;
        __int16 v218 = 2114;
        id v219 = v150;
        __int16 v220 = 2048;
        double v221 = v145 - Current;
        _os_log_impl( (void *)&_mh_execute_header,  v147,  OS_LOG_TYPE_DEFAULT,  "[TopApps] [%@] topAppsForAccount: %{public}@ completed in %f seconds",  buf,  0x20u);
      }

      goto LABEL_145;
    }

    uint64_t v36 = ASDLogHandleForCategory(3LL);
    id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        uint64_t v38 = (void *)v7[9];
      }
      else {
        uint64_t v38 = 0LL;
      }
      id v39 = v38;
      *(_DWORD *)__int128 buf = 138412802;
      id v217 = v39;
      __int16 v218 = 2114;
      id v219 = v188;
      __int16 v220 = 2048;
      *(void *)&double v221 = (uint64_t)(v30 - v35);
      _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_DEFAULT,  "[TopApps] [%@] Clearing cached top apps data for account: %{public}@ cache age: %llu seconds",  buf,  0x20u);
    }
  }

  v201[0] = _NSConcreteStackBlock;
  v201[1] = 3221225472LL;
  v201[2] = sub_1002AE9F0;
  v201[3] = &unk_1003EF360;
  v201[4] = a1;
  id v40 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v202 = v40;
  +[ApplicationProxy enumerateApplicationsOfType:usingBlock:]( &OBJC_CLASS___ApplicationProxy,  "enumerateApplicationsOfType:usingBlock:",  0LL,  v201);
  __int16 v187 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  __int16 v189 = v7;
  id v190 = v40;
  if (![v40 count]) {
    goto LABEL_126;
  }
  uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(+[LaunchHistory shared](&OBJC_CLASS____TtC9appstored13LaunchHistory, "shared"));
  if (v7) {
    id v42 = (void *)v7[9];
  }
  else {
    id v42 = 0LL;
  }
  id v43 = v42;
  id v44 = (void *)objc_claimAutoreleasedReturnValue([v41 syncIfNeededWithLogKey:v43]);

  uint64_t v181 = v44;
  char v45 = (void *)objc_claimAutoreleasedReturnValue([v44 error]);

  if (v45)
  {
    uint64_t v46 = ASDLogHandleForCategory(3LL);
    uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
    {
      if (v7) {
        uint64_t v48 = (void *)v7[9];
      }
      else {
        uint64_t v48 = 0LL;
      }
      id v49 = v48;
      *(_DWORD *)__int128 buf = 138412290;
      id v217 = v49;
      _os_log_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_INFO,  "[TopApps] [%@] History sync complete",  buf,  0xCu);
    }
  }

  unsigned __int8 v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v51 = objc_claimAutoreleasedReturnValue([v50 dateByAddingTimeInterval:-604800.0]);

  v183 = -[NSDateInterval initWithStartDate:duration:]( objc_alloc(&OBJC_CLASS___NSDateInterval),  "initWithStartDate:duration:",  v51,  604800.0);
  id v52 = (void *)objc_claimAutoreleasedReturnValue(+[LaunchHistory shared](&OBJC_CLASS____TtC9appstored13LaunchHistory, "shared"));
  id v182 = v5;
  v180 = (void *)v51;
  if (v7) {
    unsigned int v53 = (void *)v7[9];
  }
  else {
    unsigned int v53 = 0LL;
  }
  id v54 = v53;
  __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([v52 getLaunchesWithLogKey:v54 dateInterval:v183]);

  id v56 = sub_10019DC98((uint64_t)&OBJC_CLASS___AccountEventCoordinator);
  unsigned int v192 = (void *)objc_claimAutoreleasedReturnValue(v56);
  __int128 v197 = 0u;
  __int128 v198 = 0u;
  __int128 v199 = 0u;
  __int128 v200 = 0u;
  id obj = v55;
  id v57 = [obj countByEnumeratingWithState:&v197 objects:v209 count:16];
  if (!v57) {
    goto LABEL_125;
  }
  id v58 = v57;
  uint64_t v59 = *(void *)v198;
  uint64_t v191 = *(void *)v198;
LABEL_42:
  uint64_t v60 = 0LL;
  id v193 = v58;
  while (1)
  {
    if (*(void *)v198 != v59) {
      objc_enumerationMutation(obj);
    }
    char v61 = *(void **)(*((void *)&v197 + 1) + 8 * v60);
    id v62 = sub_1002CFD24(v61);
    uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
    uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:v63]);

    if (v64) {
      break;
    }
LABEL_93:
    if ((id)++v60 == v58)
    {
      id v130 = [obj countByEnumeratingWithState:&v197 objects:v209 count:16];
      id v58 = v130;
      if (!v130) {
        goto LABEL_125;
      }
      goto LABEL_42;
    }
  }

  id v65 = sub_1002CFD48(v61);
  uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
  id v67 = sub_10019DEC4((uint64_t)&OBJC_CLASS___AccountEventCoordinator, v66);
  __int16 v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);

  if (!v68)
  {
    uint64_t v90 = ASDLogHandleForCategory(3LL);
    __int16 v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        char v91 = (void *)v7[9];
      }
      else {
        char v91 = 0LL;
      }
      id v92 = v91;
      id v93 = sub_1002CFD24(v61);
      uint64_t v94 = (void *)objc_claimAutoreleasedReturnValue(v93);
      *(_DWORD *)__int128 buf = 138412546;
      id v217 = v92;
      __int16 v218 = 2114;
      id v219 = v94;
      _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "[TopApps] [%@] [%{public}@] Skipping app launch event without an end time",  buf,  0x16u);
    }

LABEL_92:
    goto LABEL_93;
  }

  id v69 = sub_10019DF9C(v192, v68);
  id v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
  id v71 = v61;
  id v72 = v7;
  id v73 = v70;
  if (!v73)
  {
    uint64_t v95 = ASDLogHandleForCategory(3LL);
    char v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
    if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
    {
      if (v7) {
        uint64_t v125 = (void *)v7[9];
      }
      else {
        uint64_t v125 = 0LL;
      }
      id v126 = v125;
      id v127 = sub_1002CFD24(v71);
      __int16 v128 = (void *)objc_claimAutoreleasedReturnValue(v127);
      *(_DWORD *)__int128 buf = 138412546;
      id v217 = v126;
      __int16 v218 = 2114;
      id v219 = v128;
      _os_log_error_impl( (void *)&_mh_execute_header,  v82,  OS_LOG_TYPE_ERROR,  "[%@] Unable to find launch account for event with bundleID: %{public}@ due to no active accounts",  buf,  0x16u);
    }

    id v84 = 0LL;
    goto LABEL_76;
  }

  id v74 = sub_1002CFD48(v71);
  uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
  [v75 timeIntervalSinceReferenceDate];
  double v77 = v76;

  id v78 = sub_1002CFDA8(v71);
  uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
  [v79 timeIntervalSinceReferenceDate];
  double v81 = v80;

  __int128 v205 = 0u;
  __int128 v206 = 0u;
  __int128 v203 = 0u;
  __int128 v204 = 0u;
  char v82 = (os_log_s *)v73;
  id v84 = -[os_log_s countByEnumeratingWithState:objects:count:]( v82,  "countByEnumeratingWithState:objects:count:",  &v203,  buf,  16LL);
  if (!v84) {
    goto LABEL_76;
  }
  uint64_t v85 = *(void *)v204;
  BOOL v86 = v81 < 0.0 && v77 > 0.0;
  while (2)
  {
    uint64_t v87 = 0LL;
LABEL_53:
    if (*(void *)v204 != v85) {
      objc_enumerationMutation(v82);
    }
    id v88 = *(double **)(*((void *)&v203 + 1) + 8 * v87);
    if (!v88)
    {
      if (v86)
      {
        id Property = 0LL;
        goto LABEL_71;
      }

LABEL_76:
  if (!v84)
  {
    uint64_t v114 = ASDLogHandleForCategory(3LL);
    unsigned int v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
    uint64_t v59 = v191;
    id v58 = v193;
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        id v116 = (void *)v7[9];
      }
      else {
        id v116 = 0LL;
      }
      id v117 = v116;
      id v118 = sub_1002CFD24(v71);
      __int16 v119 = (void *)objc_claimAutoreleasedReturnValue(v118);
      id v120 = sub_1002CFD48(v71);
      id v121 = (void *)objc_claimAutoreleasedReturnValue(v120);
      id v122 = v121;
      if (v121)
      {
        [v121 timeIntervalSince1970];
        uint64_t v124 = (uint64_t)v123;
      }

      else
      {
        *(double *)&uint64_t v124 = 0.0;
      }

      *(_DWORD *)__int128 buf = 138412802;
      id v217 = v117;
      __int16 v218 = 2114;
      id v219 = v119;
      __int16 v220 = 2048;
      double v221 = *(double *)&v124;
      _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEFAULT,  "[TopApps] [%@] [%{public}@] Skipping top app launch event due to no active account at launch time ending: %{time_t}ld",  buf,  0x20u);
    }

    goto LABEL_92;
  }

  id v103 = sub_1002CFD24(v71);
  id v104 = (void *)objc_claimAutoreleasedReturnValue(v103);
  id v105 = (void *)objc_claimAutoreleasedReturnValue([v40 objectForKeyedSubscript:v104]);
  id v106 = sub_1002C8630(v105);
  id v107 = (void *)objc_claimAutoreleasedReturnValue(v106);

  uint64_t v109 = objc_opt_class(&OBJC_CLASS___NSNumber, v108);
  id v110 = v107;
  char isKindOfClass = objc_opt_isKindOfClass(v110, v109);
  __int128 v112 = v110;
  if ((isKindOfClass & 1) == 0) {
    goto LABEL_83;
  }
  if (!v110 || (unsigned int v113 = [v84 isEqualToNumber:v188], v110, !v113))
  {
LABEL_84:

    uint64_t v59 = v191;
    id v58 = v193;
    goto LABEL_92;
  }

  __int128 v112 = (void *)objc_claimAutoreleasedReturnValue([v110 stringValue]);
  if (!v112
    || ([v187 containsObject:v112] & 1) != 0
    || ([v187 addObject:v112], (unint64_t)objc_msgSend(v187, "count") <= 0xB))
  {
LABEL_83:

    goto LABEL_84;
  }

LABEL_125:
  id v5 = v182;
LABEL_126:
  uint64_t v151 = ASDLogHandleForCategory(14LL);
  __int128 v152 = (os_log_s *)objc_claimAutoreleasedReturnValue(v151);
  uint64_t v135 = v188;
  if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
  {
    if (v7) {
      uint64_t v153 = (void *)v7[9];
    }
    else {
      uint64_t v153 = 0LL;
    }
    id v154 = v153;
    id v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v187, "componentsJoinedByString:", @", "));
    *(_DWORD *)__int128 buf = 138412546;
    id v217 = v154;
    __int16 v218 = 2114;
    id v219 = v155;
    _os_log_impl( (void *)&_mh_execute_header,  v152,  OS_LOG_TYPE_DEFAULT,  "[TopApps] [%@] Found apps: [%{public}@]",  buf,  0x16u);
  }

  if (v186)
  {
    v186[2](v186, v187, 0LL);
    double v156 = CFAbsoluteTimeGetCurrent();
    uint64_t v157 = ASDLogHandleForCategory(3LL);
    id v158 = (os_log_s *)objc_claimAutoreleasedReturnValue(v157);
    if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
    {
      if (v7) {
        id v159 = (void *)v7[9];
      }
      else {
        id v159 = 0LL;
      }
      id v160 = v159;
      BOOL v161 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_DSID"));
      *(_DWORD *)__int128 buf = 138412802;
      id v217 = v160;
      __int16 v218 = 2114;
      id v219 = v161;
      __int16 v220 = 2048;
      double v221 = v156 - Current;
      _os_log_impl( (void *)&_mh_execute_header,  v158,  OS_LOG_TYPE_DEFAULT,  "[TopApps] [%@] topAppsForAccount: %{public}@ completed in %f seconds",  buf,  0x20u);
    }
  }

  id v162 = v5;
  v207[0] = @"lastCache";
  __int128 v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v30));
  v207[1] = @"apps";
  v208[0] = v163;
  v208[1] = v187;
  __int128 v164 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v208,  v207,  2LL));

  id v165 = [v185 mutableCopy];
  v166 = (void *)objc_claimAutoreleasedReturnValue([v188 stringValue]);
  [v165 setObject:v164 forKeyedSubscript:v166];

  id v196 = 0LL;
  id v167 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v165,  200LL,  0LL,  &v196));
  id v168 = v196;
  if (v167)
  {
    id v169 = sub_1002AE5D8();
    id v170 = (os_log_s *)objc_claimAutoreleasedReturnValue(v169);
    if (v170)
    {
      id v195 = v168;
      unsigned int v171 = [v167 writeToFile:v170 options:1 error:&v195];
      id v172 = v195;

      uint64_t v173 = ASDLogHandleForCategory(14LL);
      v174 = (os_log_s *)objc_claimAutoreleasedReturnValue(v173);
      if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v175 = v189;
        if (v189) {
          uint64_t v175 = (void *)v189[9];
        }
        id v176 = v175;
        *(_DWORD *)__int128 buf = 138412546;
        id v217 = v176;
        __int16 v218 = 1024;
        LODWORD(v219) = v171;
        _os_log_impl( (void *)&_mh_execute_header,  v174,  OS_LOG_TYPE_DEFAULT,  "[TopApps] [%@] Serialized top apps with result: %d",  buf,  0x12u);
      }

      id v168 = v172;
      id v7 = v189;
      uint64_t v135 = v188;
    }
  }

  else
  {
    uint64_t v177 = ASDLogHandleForCategory(14LL);
    id v170 = (os_log_s *)objc_claimAutoreleasedReturnValue(v177);
    if (os_log_type_enabled(v170, OS_LOG_TYPE_ERROR))
    {
      if (v7) {
        id v178 = (void *)v7[9];
      }
      else {
        id v178 = 0LL;
      }
      id v179 = v178;
      *(_DWORD *)__int128 buf = 138412546;
      id v217 = v179;
      __int16 v218 = 2114;
      id v219 = v168;
      _os_log_error_impl( (void *)&_mh_execute_header,  v170,  OS_LOG_TYPE_ERROR,  "[TopApps] [%@] Failed to serialize. Error: %{public}@",  buf,  0x16u);
    }
  }

  id v5 = v162;
  id v147 = (os_log_s *)v190;
LABEL_145:

LABEL_146:
LABEL_147:
}

void sub_1002AA770(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    uint64_t v9 = *(dispatch_queue_s **)(a1 + 152);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002AA844;
    block[3] = &unk_1003E97D0;
    id v12 = v10;
    id v13 = v7;
    id v14 = v8;
    dispatch_sync(v9, block);
  }
}

void sub_1002AA844(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.Arcade://arcadeSubscribePage?context=launchRepair&appId=%@",  a1[4]));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v2));
  uint64_t v5 = a1[5];
  id v10 = 0LL;
  [v3 openURL:v4 withOptions:v5 error:&v10];
  id v6 = v10;

  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(28LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = a1[6];
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v12 = v9;
      __int16 v13 = 2114;
      id v14 = v2;
      __int16 v15 = 2114;
      id v16 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%@] Error launching app store with url: %{public}@ error: %{public}@",  buf,  0x20u);
    }
  }
}

void sub_1002AA99C(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(dispatch_queue_s **)(a1 + 64);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002AAA00;
    block[3] = &unk_1003E9880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }

void sub_1002AAA00(uint64_t a1)
{
  uint64_t v2 = sub_1002CBF68((uint64_t)&OBJC_CLASS___MetricsContext, 7LL);
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  id v4 = sub_1002CBF24((uint64_t)&OBJC_CLASS___MetricsContext, 7LL);
  uint64_t v5 = (_TtC9appstored10ASEMetrics *)objc_claimAutoreleasedReturnValue(v4);
  if (sub_1001A788C(*(void *)(a1 + 32)))
  {
    if (*(void *)(a1 + 32))
    {
      id v6 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      unsigned int v8 = sub_100256DD0(v7, @"arcade-account-event-daily-enabled", 0LL, 0);

      if (v8)
      {
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
        id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "ams_activeiTunesAccount"));

        if (!v10)
        {
          uint64_t v44 = ASDLogHandleForCategory(3LL);
          uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            if (v3) {
              char v45 = *(void **)(v3 + 72);
            }
            else {
              char v45 = 0LL;
            }
            uint64_t v46 = v45;
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v51 = v46;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "[%@] Unable to determine active account",  buf,  0xCu);
          }

          goto LABEL_41;
        }

        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[KatanaSubscriptionCoordinator shared]( &OBJC_CLASS____TtC9appstored29KatanaSubscriptionCoordinator,  "shared"));
        if (v3) {
          uint64_t v12 = *(void **)(v3 + 72);
        }
        else {
          uint64_t v12 = 0LL;
        }
        id v13 = v12;
        unsigned int v14 = [v11 removeStaleSubscriptionInfoWithLogKey:v13];

        uint64_t v15 = ASDLogHandleForCategory(17LL);
        id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          if (v3) {
            id v17 = *(void **)(v3 + 72);
          }
          else {
            id v17 = 0LL;
          }
          uint64_t v18 = v17;
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v51 = v18;
          __int16 v52 = 1024;
          LODWORD(v53) = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "[%@] Cleaned up subscription state with result: %{BOOL}d",  buf,  0x12u);
        }

        id v19 = (void *)objc_claimAutoreleasedReturnValue( +[KatanaSubscriptionCoordinator shared]( &OBJC_CLASS____TtC9appstored29KatanaSubscriptionCoordinator,  "shared"));
        if (v3) {
          id v20 = *(void **)(v3 + 72);
        }
        else {
          id v20 = 0LL;
        }
        id v21 = v20;
        uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue( [v19 subscriptionInfoDictionaryWithAccount:v10 onlyReturnForPreviouslySubscribedAccount:1 logKey:v21]);

        if (v22)
        {
          if (v3)
          {
            objc_setProperty_nonatomic_copy((id)v3, v23, v22, 136LL);
            objc_setProperty_nonatomic_copy((id)v3, v24, v10, 128LL);
          }

          uint64_t v25 = ASDLogHandleForCategory(3LL);
          id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          {
            if (v3)
            {
              BOOL v27 = (_TtC9appstored10ASEMetrics *)*(id *)(v3 + 72);
              uint64_t v28 = *(void **)(v3 + 128);
              double v29 = v27;
            }

            else
            {
              BOOL v27 = 0LL;
              double v29 = 0LL;
              uint64_t v28 = 0LL;
            }

            id v30 = v28;
            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "ams_DSID"));
            *(_DWORD *)__int128 buf = 138543874;
            uint64_t v51 = v27;
            __int16 v52 = 2114;
            unsigned int v53 = v5;
            __int16 v54 = 2114;
            __int16 v55 = v31;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Enqueuing %{public}@ event for account: %{public}@",  buf,  0x20u);
          }

          __int16 v32 = objc_alloc(&OBJC_CLASS___AppUsageMetricsEvent);
          if (v3) {
            id v33 = *(void **)(v3 + 152);
          }
          else {
            id v33 = 0LL;
          }
          id v34 = v33;
          double v35 = -[AppUsageMetricsEvent initWithTopic:](v32, "initWithTopic:", v34);

          -[AppUsageMetricsEvent setEventType:](v35, "setEventType:", @"account");
          [*(id *)(a1 + 32) decorateMetricsEvent:v35 context:v3];
          if (os_variant_has_internal_content("com.apple.appstored"))
          {
            uint64_t v36 = ASDLogHandleForCategory(4LL);
            id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
            {
              if (v3) {
                uint64_t v38 = *(void **)(v3 + 72);
              }
              else {
                uint64_t v38 = 0LL;
              }
              id v39 = v38;
              id v40 = (void *)objc_claimAutoreleasedReturnValue(-[AppUsageMetricsEvent underlyingDictionary](v35, "underlyingDictionary"));
              *(_DWORD *)__int128 buf = 138543874;
              uint64_t v51 = v39;
              __int16 v52 = 2114;
              unsigned int v53 = v5;
              __int16 v54 = 2114;
              __int16 v55 = v40;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  OS_LOG_TYPE_INFO,  "[%{public}@] %{public}@ event: %{public}@",  buf,  0x20u);
            }
          }

          uint64_t v41 = -[ASEMetrics initWithType:](objc_alloc(&OBJC_CLASS____TtC9appstored10ASEMetrics), "initWithType:", 1LL);
          id v49 = v35;
          id v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v49,  1LL));
          -[ASEMetrics enqueueEvents:flushEvents:completionHandler:]( v41,  "enqueueEvents:flushEvents:completionHandler:",  v42,  1LL,  &stru_1003F0A78);
        }

        else
        {
          uint64_t v47 = ASDLogHandleForCategory(3LL);
          double v35 = (AppUsageMetricsEvent *)objc_claimAutoreleasedReturnValue(v47);
          if (!os_log_type_enabled((os_log_t)v35, OS_LOG_TYPE_INFO))
          {
LABEL_40:

LABEL_41:
            goto LABEL_42;
          }

          if (v3) {
            uint64_t v48 = *(void **)(v3 + 72);
          }
          else {
            uint64_t v48 = 0LL;
          }
          uint64_t v41 = v48;
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v51 = v41;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v35,  OS_LOG_TYPE_INFO,  "[%@] There are no subscription details for the active account",  buf,  0xCu);
        }

        goto LABEL_40;
      }
    }
  }

  uint64_t v43 = ASDLogHandleForCategory(3LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v43);
  if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v51 = v5;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v10, OS_LOG_TYPE_DEFAULT, "[%{public}@] Not enabled", buf, 0xCu);
  }

void sub_1002AAF94(uint64_t a1)
{
  if (a1)
  {
    id v1 = *(dispatch_queue_s **)(a1 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002AE620;
    block[3] = &unk_1003E9880;
    void block[4] = a1;
    dispatch_async(v1, block);
  }

void sub_1002AAFF8(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (a1)
  {
    id v6 = *(dispatch_queue_s **)(a1 + 144);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002AB0B0;
    block[3] = &unk_1003EA390;
    void block[4] = a1;
    id v9 = v7;
    id v10 = v5;
    dispatch_sync(v6, block);
  }
}

void sub_1002AB0B0(uint64_t a1)
{
}

id sub_1002ABF34(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = v3;
  if (!a1)
  {
    id v13 = 0LL;
    goto LABEL_17;
  }

  if (v3) {
    id v5 = (void *)v3[16];
  }
  else {
    id v5 = 0LL;
  }
  id v6 = v5;

  if (!v6)
  {
    uint64_t v14 = ASDLogHandleForCategory(3LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      if (v4) {
        uint64_t v18 = (void *)*((void *)v4 + 9);
      }
      else {
        uint64_t v18 = 0LL;
      }
      id v19 = v18;
      *(_DWORD *)__int128 buf = 138412290;
      id v24 = v19;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[%@] Unable to find find subscribed accountID to associate katanaID",  buf,  0xCu);
    }

    id v13 = 0LL;
    goto LABEL_16;
  }

  id v7 = (os_log_s *)objc_opt_new(&OBJC_CLASS___AMSMetricsIdentifierStore);
  -[os_log_s setIncludeAccountMatchStatus:](v7, "setIncludeAccountMatchStatus:", 1LL);
  if (!v4)
  {
    -[os_log_s setAccount:](v7, "setAccount:", 0LL);
    goto LABEL_9;
  }

  id v8 = *((id *)v4 + 16);
  -[os_log_s setAccount:](v7, "setAccount:", v8);

  uint64_t v9 = *((void *)v4 + 4);
  id v10 = @"com.apple.appstored.AracadeAnonymous";
  if (v9 != 3)
  {
    if (v9 == 4)
    {
      id v10 = @"com.apple.appstored.AracadePayout";
    }

    else if (v9 != 7)
    {
LABEL_9:
      uint64_t v11 = ASDLogHandleForCategory(3LL);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        if (v4) {
          id v20 = (void *)*((void *)v4 + 9);
        }
        else {
          id v20 = 0LL;
        }
        id v21 = v20;
        *(_DWORD *)__int128 buf = 138412290;
        id v24 = v21;
        _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[%@] KatanaIDs not supported for this context type",  buf,  0xCu);
      }

      id v13 = 0LL;
      goto LABEL_15;
    }
  }

  -[os_log_s setDomain:](v7, "setDomain:", v10);
  uint64_t v15 = -[AMSProcessInfo initWithBundleIdentifier:]( objc_alloc(&OBJC_CLASS___AMSProcessInfo),  "initWithBundleIdentifier:",  @"com.apple.appstored");
  -[os_log_s setClientInfo:](v7, "setClientInfo:", v15);

  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[AMSMetricsIdentifierKey keyWithName:crossDeviceSync:]( &OBJC_CLASS___AMSMetricsIdentifierKey,  "keyWithName:crossDeviceSync:",  @"userId",  1LL));
  uint64_t v22 = v12;
  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v22, 1LL));
  id v13 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s generateEventFieldsForKeys:](v7, "generateEventFieldsForKeys:", v16));

LABEL_15:
LABEL_16:

LABEL_17:
  return v13;
}

id sub_1002AC1C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  uint64_t v66 = (void *)a1;
  sub_1002A6BAC(a1);
  if (v3 && *((void *)v3 + 4) == 4LL)
  {
    uint64_t v75 = @"launch_end_time";
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v75, 1LL));
    uint64_t v6 = (uint64_t)v66;
    char v7 = 4;
  }

  else
  {
    id v74 = @"launch_end_time";
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v74, 1LL));
    uint64_t v6 = (uint64_t)v66;
    char v7 = 2;
  }

  id v8 = sub_10022CE44(v6, v7, v3, v5);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  uint64_t v64 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  if ([v9 count])
  {
    char v61 = v9;
    id v62 = v4;
    __int128 v71 = 0u;
    __int128 v72 = 0u;
    __int128 v69 = 0u;
    __int128 v70 = 0u;
    id obj = v9;
    id v67 = [obj countByEnumeratingWithState:&v69 objects:v73 count:16];
    if (!v67) {
      goto LABEL_65;
    }
    uint64_t v65 = *(void *)v70;
    id v10 = &OBJC_IVAR___ODRApplication__variantID;
    while (1)
    {
      uint64_t v11 = 0LL;
      do
      {
        if (*(void *)v70 != v65) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(id *)(*((void *)&v69 + 1) + 8LL * (void)v11);
        id v13 = v3;
        uint64_t v14 = sub_1001AB824(v12);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        int v16 = sub_1001ABEB0(v12);
        id v17 = sub_10022C808(v66, v15, v16, v13);
        uint64_t v18 = objc_claimAutoreleasedReturnValue(v17);

        id v19 = sub_1001AB610(v12);
        id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        if (v20) {
          sub_1002FB794((id *)v18, v20);
        }
        id v21 = objc_msgSend(v12, "databaseID", v61, v62);
        if (v18)
        {
          *(void *)(v18 + 12_Block_object_dispose(va, 8) = v21;
          *(_BYTE *)(v18 + 26) = sub_1001E2598(v12, (uint64_t)@"has_been_posted");
        }

        else
        {
          sub_1001E2598(v12, (uint64_t)@"has_been_posted");
        }

        __int16 v68 = v13;
        if (!v3)
        {
LABEL_33:
          id v28 = 0LL;
          goto LABEL_35;
        }

        uint64_t v22 = *((void *)v3 + 4);
        if (v22 == 4)
        {
          if (v18)
          {
            id v23 = *(id *)(v18 + v10[167]);
            if (v23)
            {
              id v24 = v23;
              id v25 = *(id *)(v18 + v10[167]);
              uint64_t v26 = (uint64_t)[v25 longLongValue];

              if (v26 >= 1)
              {
                id v27 = *(id *)(v18 + v10[167]);
                id v28 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v27 longLongValue]));

                if (!v28) {
                  goto LABEL_35;
                }
                goto LABEL_28;
              }
            }
          }

          uint64_t v22 = *((void *)v3 + 4);
        }

        if (v22 != 3) {
          goto LABEL_33;
        }
        if (v12) {
          double v29 = (void *)v12[5];
        }
        else {
          double v29 = 0LL;
        }
        id v28 = v29;
        if (!v28) {
          goto LABEL_35;
        }
LABEL_28:
        id v30 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
        uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v30, "ams_iTunesAccountWithDSID:", v28));

        if (!v31 || !objc_msgSend(v31, "ams_isDemoAccount"))
        {

LABEL_35:
          uint64_t v36 = sub_1001AB824(v12);
          id v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          unsigned int v38 = sub_1002C8C34(v37);

          if (v38) {
            int v39 = 2;
          }
          else {
            int v39 = 0;
          }
          sub_1002FB4C0((_BYTE *)v18, v39);
          if (!v3) {
            goto LABEL_48;
          }
          goto LABEL_39;
        }

        uint64_t v32 = ASDLogHandleForCategory(3LL);
        id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          id v34 = *((id *)v3 + 9);
          double v35 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v31, "ams_DSID"));
          *(_DWORD *)__int128 buf = 138412546;
          id v77 = v34;
          __int16 v78 = 2114;
          uint64_t v79 = v35;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "[%@] Using retail demo account: %{public}@ for event",  buf,  0x16u);

          id v10 = &OBJC_IVAR___ODRApplication__variantID;
        }

        sub_1002FB4C0((_BYTE *)v18, 1);
LABEL_39:
        if (*((void *)v3 + 4) == 3LL)
        {
          id v40 = (void *)objc_claimAutoreleasedReturnValue([v12 valueForProperty:@"launch_time"]);
          if (v40)
          {
            uint64_t v41 = v40;
            id v42 = sub_1002AC8F4(v40);
            uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);

            if (v43)
            {
              uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[AMSMetrics serverTimeFromDate:](&OBJC_CLASS___AMSMetrics, "serverTimeFromDate:", v43));
              sub_1002FB6CC((id *)v18, v44);
            }
          }

          char v45 = (void *)objc_claimAutoreleasedReturnValue([v12 valueForProperty:@"launch_end_time"]);
          uint64_t v46 = v45;
          if (v45)
          {
            id v47 = sub_1002AC8F4(v45);
            uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
            if (v48)
            {
              id v49 = (void *)objc_claimAutoreleasedReturnValue(+[AMSMetrics serverTimeFromDate:](&OBJC_CLASS___AMSMetrics, "serverTimeFromDate:", v48));
              sub_1002FB1B4((id *)v18, v49);
            }
          }
        }

void sub_1002AC838(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  sub_1002A75F8(a1, v6, 1, v5);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1002AC8E8;
  v8[3] = &unk_1003EA180;
  id v7 = v5;
  id v9 = v7;
  sub_1002A52DC(a1, v6, v7, v8);
}

void sub_1002AC8E8(uint64_t a1)
{
}

id sub_1002AC8F4(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 components:62 fromDate:v1]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 dateFromComponents:v3]);
  return v4;
}

void sub_1002AC96C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory(3LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      id v9 = *(void **)(a1 + 32);
      if (v9) {
        id v9 = (void *)v9[9];
      }
      id v10 = v9;
      int v11 = 138412546;
      uint64_t v12 = v10;
      __int16 v13 = 2114;
      id v14 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[%@] Error sending metrics events. Error: %{public}@",  (uint8_t *)&v11,  0x16u);
    }
  }

  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    uint64_t v7 = ASDErrorWithSafeUserInfo(v3);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    (*(void (**)(uint64_t, BOOL, void *))(v6 + 16))(v6, v3 == 0LL, v8);
  }
}

void sub_1002ACA88(void *a1)
{
  uint64_t v2 = a1[7];
  if (v2) {
    (*(void (**)(uint64_t, void, void))(v2 + 16))(v2, a1[4], a1[5]);
  }
  sub_1002CC130(a1[6], 0LL);
}

void sub_1002ACAC0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = a2;
  id v8 = a5;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v15;
    do
    {
      for (i = 0LL; i != v10; i = (char *)i + 1)
      {
        if (*(void *)v15 != v11) {
          objc_enumerationMutation(v7);
        }
        __int16 v13 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        if ([v13 segment] == (id)1) {
          objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v13);
        }
      }

      id v10 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v10);
  }

  if (v8) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), a5);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1002ACCE8(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(4LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Initializing now that there is network",  v4,  2u);
  }

  sub_1002A46F8(*(void *)(a1 + 32), @"Network came up");
}

void sub_1002ACD68(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(void **)(a1 + 104);
  if (v7)
  {
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    void v30[2] = sub_1002AEA7C;
    void v30[3] = &unk_1003E97D0;
    void v30[4] = a1;
    id v31 = v8;
    id v32 = v7;
    sub_1002C11C4(v10, v30);
  }

  else
  {
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_1002AEB48;
    void v29[3] = &unk_1003E9880;
    void v29[4] = a1;
    sub_1002C11C4(v10, v29);
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[KatanaSubscriptionCoordinator shared]( &OBJC_CLASS____TtC9appstored29KatanaSubscriptionCoordinator,  "shared"));
  unsigned int v12 = [v11 removeStaleSubscriptionInfoWithLogKey:v9];

  uint64_t v13 = ASDLogHandleForCategory(17LL);
  __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__int128 buf = 138412546;
    id v34 = v9;
    __int16 v35 = 1024;
    LODWORD(v36) = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_INFO,  "[%@] Cleaned up subscription state with result: %{BOOL}d",  buf,  0x12u);
  }

  if (v8)
  {
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue( +[KatanaSubscriptionCoordinator shared]( &OBJC_CLASS____TtC9appstored29KatanaSubscriptionCoordinator,  "shared"));
    unsigned int v16 = [v15 updateSubscriptionInfoWithEntitlement:v7 account:v8 logKey:v9];

    uint64_t v17 = ASDLogHandleForCategory(4LL);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "ams_DSID"));
      *(_DWORD *)__int128 buf = 138412802;
      id v34 = v9;
      __int16 v35 = 2114;
      uint64_t v36 = v19;
      __int16 v37 = 1024;
      unsigned int v38 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "[%@] Updated subscription info cache for account: %{public}@ with result: %{BOOL}d",  buf,  0x1Cu);
    }
  }

  CFPropertyListRef v20 = sub_1002F94D0((uint64_t)&OBJC_CLASS___AppDefaultsManager);
  id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v22 = v21;
  if (!v21 || ([v21 isEqualToString:*(void *)(a1 + 48)] & 1) == 0)
  {
    sub_1002F96F8((uint64_t)&OBJC_CLASS___AppDefaultsManager, *(void **)(a1 + 48));
    uint64_t v23 = ASDLogHandleForCategory(4LL);
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      id v25 = *(void **)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412546;
      id v34 = v9;
      __int16 v35 = 2114;
      uint64_t v36 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "[%@] Updated cached subscription state as: %{public}@",  buf,  0x16u);
    }
  }

  uint64_t v26 = ASDLogHandleForCategory(4LL);
  id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    id v28 = *(void **)(a1 + 48);
    *(_DWORD *)__int128 buf = 138412546;
    id v34 = v9;
    __int16 v35 = 2114;
    uint64_t v36 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "[%@] fsEntitlement subscription state: %{public}@",  buf,  0x16u);
  }
}

void sub_1002AD160(uint64_t a1)
{
  uint64_t v2 = -[KeepAlive initWithName:](objc_alloc(&OBJC_CLASS___KeepAlive), "initWithName:", @"Ocelot Repair");
  uint64_t v3 = ASDLogHandleForCategory(28LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
    int v40 = 138543362;
    uint64_t v41 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[Arcade] Repair change notification with userInfo: %{public}@",  (uint8_t *)&v40,  0xCu);
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"bundleID"]);

  if (os_variant_has_internal_content("com.apple.appstored") && (!v7 || ![v7 length]))
  {
    CFPropertyListRef v8 = sub_1002F9394((uint64_t)&OBJC_CLASS___AppDefaultsManager);
    uint64_t v9 = objc_claimAutoreleasedReturnValue(v8);

    if (v9)
    {
      uint64_t v10 = ASDLogHandleForCategory(28LL);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        CFPropertyListRef v12 = sub_1002F9394((uint64_t)&OBJC_CLASS___AppDefaultsManager);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        int v40 = 138543362;
        uint64_t v41 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[Arcade] Using default bundleID: %{public}@",  (uint8_t *)&v40,  0xCu);
      }

      id v7 = (void *)v9;
    }

    else
    {
      id v7 = 0LL;
    }
  }

  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:@"bundlePath"]);

  unsigned int v16 = objc_alloc(&OBJC_CLASS___ASDRepairOptions);
  if (v15) {
    uint64_t v17 = -[ASDRepairOptions initWithBundlePath:](v16, "initWithBundlePath:", v15);
  }
  else {
    uint64_t v17 = -[ASDRepairOptions initWithBundleID:](v16, "initWithBundleID:", v7);
  }
  uint64_t v18 = v17;
  id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  CFPropertyListRef v20 = (void *)objc_claimAutoreleasedReturnValue([v19 objectForKeyedSubscript:@"status"]);

  if (v20) {
    -[ASDRepairOptions setFairplayStatus:](v18, "setFairplayStatus:", [v20 unsignedIntValue]);
  }
  id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 objectForKeyedSubscript:@"exitReason"]);
  -[ASDRepairOptions setExitReason:](v18, "setExitReason:", [v22 unsignedIntegerValue]);

  if (os_variant_has_internal_content("com.apple.appstored"))
  {
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
    id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:@"forceUpsell"]);
    -[ASDRepairOptions setForceUpsell:](v18, "setForceUpsell:", [v24 BOOLValue]);

    id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userInfo]);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 objectForKeyedSubscript:@"forceRevoke"]);
    -[ASDRepairOptions setForceRevoke:](v18, "setForceRevoke:", [v26 BOOLValue]);
  }

  id v27 = objc_alloc_init(&OBJC_CLASS___TaskQueue);
  id v28 = sub_100206218((id *)objc_alloc(&OBJC_CLASS___RepairApplicationTask), v18, 0LL);
  uint64_t v29 = ASDLogHandleForCategory(28LL);
  id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  BOOL v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (!v31) {
      goto LABEL_24;
    }
    int v40 = 138543362;
    uint64_t v41 = v15;
    id v32 = "[Arcade] Starting repair for bundlePath: %{public}@";
  }

  else
  {
    if (!v31) {
      goto LABEL_24;
    }
    int v40 = 138543362;
    uint64_t v41 = v7;
    id v32 = "[Arcade] Starting repair forbundleID: %{public}@";
  }

  _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v32, (uint8_t *)&v40, 0xCu);
LABEL_24:

  uint64_t v44 = v28;
  id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v44, 1LL));
  if (v27) {
    -[NSOperationQueue addOperations:waitUntilFinished:]( v27->_operationQueue,  "addOperations:waitUntilFinished:",  v33,  1LL);
  }

  uint64_t v34 = ASDLogHandleForCategory(28LL);
  __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  BOOL v36 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v36)
    {
      if (v28) {
        int v37 = (_BYTE)v28[3] & 1;
      }
      else {
        int v37 = 0;
      }
      int v40 = 138543618;
      uint64_t v41 = v15;
      __int16 v42 = 1024;
      int v43 = v37;
      unsigned int v38 = "[Arcade] Repair for bundlePath: %{public}@ complete with result: %d";
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v38, (uint8_t *)&v40, 0x12u);
    }
  }

  else if (v36)
  {
    if (v28) {
      int v39 = (_BYTE)v28[3] & 1;
    }
    else {
      int v39 = 0;
    }
    int v40 = 138543618;
    uint64_t v41 = v7;
    __int16 v42 = 1024;
    int v43 = v39;
    unsigned int v38 = "[Arcade] Repair for bundleID: %{public}@ complete with result: %d";
    goto LABEL_35;
  }
}

uint64_t sub_1002AD648(uint64_t a1)
{
  return sub_1002A866C(*(void *)(a1 + 32), @"Subscribed", 0, 0LL);
}

void sub_1002AD660(uint64_t a1)
{
  id v1 = *(dispatch_queue_s **)(a1 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002AD6D8;
  block[3] = &unk_1003E9880;
  void block[4] = a1;
  dispatch_async(v1, block);
}

uint64_t sub_1002AD6C0(uint64_t a1)
{
  return sub_1002A866C(*(void *)(a1 + 32), @"Unsubscribed", 0, 0LL);
}

id sub_1002AD6D8(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_1002AD73C;
  void v2[3] = &unk_1003F0AA0;
  void v2[4] = *(void *)(a1 + 32);
  return +[ApplicationProxy enumerateApplicationsOfType:usingBlock:]( &OBJC_CLASS___ApplicationProxy,  "enumerateApplicationsOfType:usingBlock:",  0LL,  v2);
}

void sub_1002AD73C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (sub_1002A5174(*(void *)(a1 + 32), v3))
  {
    id v4 = objc_claimAutoreleasedReturnValue([v3 canonicalExecutablePath]);
    id v5 = [v4 fileSystemRepresentation];

    if (v5)
    {
      id v6 = objc_claimAutoreleasedReturnValue([v3 canonicalExecutablePath]);
      [v6 fileSystemRepresentation];
      sub_1001242AC();
      int v8 = v7;

      uint64_t v9 = ASDLogHandleForCategory(4LL);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
        id v12 = [v3 storeItemID];
        uint64_t v13 = @"N";
        int v14 = 138544130;
        __int16 v16 = 2048;
        __int128 v15 = v11;
        if (!v8) {
          uint64_t v13 = @"Y";
        }
        id v17 = v12;
        __int16 v18 = 2114;
        id v19 = v13;
        __int16 v20 = 1024;
        int v21 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[%{public}@/%lld] launchable: %{public}@ status: %d",  (uint8_t *)&v14,  0x26u);
      }
    }
  }
}

uint64_t sub_1002AD8A4(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1002AD8AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v20 objects:v28 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v21;
    do
    {
      for (i = 0LL; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v21 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v20 + 1) + 8LL * (void)i);
        if (v8 && *(void *)(v8 + 128))
        {
          id v9 = objc_alloc(*(Class *)(a1 + 48));
          uint64_t v10 = *(void *)(v8 + 128);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
          id v12 = [v9 initWithPersistentID:v10 onConnection:v11];

          if ([v12 existsInDatabase])
          {
            [v12 setValue:&off_10040CEF8 forProperty:@"has_been_posted"];
            uint64_t v13 = ASDLogHandleForCategory(3LL);
            int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              __int128 v15 = *(void **)(a1 + 40);
              if (v15) {
                __int128 v15 = (void *)v15[9];
              }
              __int16 v16 = v15;
              id v17 = *(id *)(v8 + 72);
              *(_DWORD *)__int128 buf = 138412546;
              id v25 = v16;
              __int16 v26 = 2114;
              id v27 = v17;
              _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[%@] Marked event with bundleID: %{public}@ as posted",  buf,  0x16u);
            }
          }
        }
      }

      id v5 = [obj countByEnumeratingWithState:&v20 objects:v28 count:16];
    }

    while (v5);
  }

  return 1LL;
}

void sub_1002ADAD0(void *a1)
{
  id v1 = a1;
  if (v1)
  {
    uint64_t v2 = *((void *)v1 + 4);
    if (v2 == 4)
    {
      id v15 = v1;
      if (*((_BYTE *)v1 + 10))
      {
        id v6 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
        id v5 = (id)objc_claimAutoreleasedReturnValue(v6);
        [v5 modifyUsingTransaction:&stru_1003F0B38];
      }

      else
      {
        id v7 = *((id *)v1 + 12);
        id v8 = sub_10019DEC4((uint64_t)&OBJC_CLASS___AccountEventCoordinator, v7);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

        id v10 = sub_1001E84AC(v9);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        id v12 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        void v16[2] = sub_1002AE288;
        v16[3] = &unk_1003EDAD0;
        id v17 = v9;
        id v18 = v15;
        id v19 = v11;
        id v14 = v11;
        id v5 = v9;
        [v13 modifyUsingTransaction:v16];
      }

      goto LABEL_8;
    }

    if (v2 == 3)
    {
      id v15 = v1;
      id v3 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
      id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      void v20[2] = sub_1002AE108;
      v20[3] = &unk_1003F0B18;
      id v21 = v15;
      [v4 modifyUsingTransaction:v20];

      id v5 = v21;
LABEL_8:

      id v1 = v15;
    }
  }
}

uint64_t sub_1002ADC7C(uint64_t a1, void *a2)
{
  id v29 = a2;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v34 objects:v44 count:16];
  if (v2)
  {
    id v4 = v2;
    uint64_t v5 = *(void *)v35;
    *(void *)&__int128 v3 = 138543618LL;
    __int128 v27 = v3;
    do
    {
      id v6 = 0LL;
      id v30 = v4;
      do
      {
        if (*(void *)v35 != v5) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)v6);
        id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "bundleID", v27));
        if (v8)
        {
          id v9 = (os_log_s *)sub_1001AAF74(objc_alloc(&OBJC_CLASS___AppEvent), v7);
          id v10 = v9;
          if (v7)
          {
            int v43 = v9;
            uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v43,  1LL));
            id v12 = *(objc_class **)(a1 + 40);
            id v33 = 0LL;
            id v13 = sub_10030D868(v29, v11, v12, &v33);
            id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
            id v15 = v33;
            [v14 count];

            __int16 v42 = v10;
            __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v42,  1LL));
            id v17 = *(objc_class **)(a1 + 48);
            id v32 = v15;
            id v18 = sub_10030D868(v29, v16, v17, &v32);
            id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
            id v20 = v32;

            id v21 = [v19 count];
            uint64_t v22 = ASDLogHandleForCategory(3LL);
            __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
            id v24 = v23;
            if (v20 || !v21)
            {
              id v4 = v30;
              if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = v27;
                int v39 = v8;
                __int16 v40 = 2114;
                id v41 = v20;
                _os_log_error_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_ERROR,  "[Arcade] Error creating entity for bundleID: %{public}@ result: %{public}@",  buf,  0x16u);
              }
            }

            else
            {
              id v4 = v30;
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)__int128 buf = 138543362;
                int v39 = v8;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_INFO,  "[Arcade] Created app event entity with bundleID: %{public}@",  buf,  0xCu);
              }
            }
          }
        }

        else
        {
          uint64_t v25 = ASDLogHandleForCategory(3LL);
          id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = 138543362;
            int v39 = v7;
            _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[Arcade] BundleID required for event: %{public}@",  buf,  0xCu);
          }
        }

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v34 objects:v44 count:16];
    }

    while (v4);
  }

  return 1LL;
}

uint64_t sub_1002ADFB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1002ADFC4(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1002ADFCC(uint64_t a1, void *a2)
{
  id v3 = sub_10030D714(a2, *(void **)(a1 + 32));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = ASDLogHandleForCategory(3LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = v6;
  if (!v4)
  {
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      goto LABEL_6;
    }
    id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ams_DSID"));
    int v10 = 138543362;
    uint64_t v11 = v8;
    _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "[AccountEvent] Unable to recorded initial account event for account: %{public}@",  (uint8_t *)&v10,  0xCu);
    goto LABEL_4;
  }

  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ams_DSID"));
    int v10 = 138543362;
    uint64_t v11 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[AccountEvent] Recorded initial account event for account: %{public}@",  (uint8_t *)&v10,  0xCu);
LABEL_4:
  }

uint64_t sub_1002AE108(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (v5 && *(_BYTE *)(v5 + 10))
  {
    uint64_t v6 = ASDLogHandleForCategory(4LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = *(void **)(a1 + 32);
      if (v8) {
        id v8 = (void *)v8[9];
      }
      id v9 = v8;
      int v13 = 138412290;
      id v14 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%@] User initiated clearing out app events",  (uint8_t *)&v13,  0xCu);
    }

    int v10 = (void *)objc_claimAutoreleasedReturnValue([v4 connection]);
    if (v10)
    {
      uint64_t v11 = @"DELETE FROM app_events_ocelot";
LABEL_11:
      sub_1001D68EC((uint64_t)v10, v11, 0LL, 0LL);
    }
  }

  else
  {
    int v10 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
    if (v10)
    {
      uint64_t v11 = @"DELETE FROM app_events_ocelot where has_been_posted = 1;";
      goto LABEL_11;
    }
  }

  return 1LL;
}

BOOL sub_1002AE23C(id a1, AppUsageDatabaseTransaction *a2)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(-[AppUsageDatabaseTransaction connection](a2, "connection"));
  id v3 = (void *)v2;
  if (v2) {
    sub_1001D68EC(v2, @"DELETE FROM app_events_ocelot_payout;", 0LL, 0LL);
  }

  return 1;
}

uint64_t sub_1002AE288(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v5 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppEventEntityOcelotPayout, v4, 0LL);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  v15[0] = @"bundle_id";
  v15[1] = @"week_start_time";
  void v15[2] = @"has_been_posted";
  v15[3] = @"ROWID";
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v15, 4LL));
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002AE3F4;
  v10[3] = &unk_1003EFD40;
  id v11 = a1[4];
  id v12 = v3;
  id v13 = a1[5];
  id v14 = a1[6];
  id v8 = v3;
  [v6 enumerateMemoryEntitiesWithProperties:v7 usingBlock:v10];

  return 1LL;
}

void sub_1002AE3F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForProperty:@"week_start_time"]);
  unsigned int v5 = sub_1001E2598(v3, (uint64_t)@"has_been_posted");
  id v6 = [v3 databaseID];
  if ([v4 compare:*(void *)(a1 + 32)] == (id)-1 && v5 != 0)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 valueForProperty:@"bundle_id"]);
    id v9 = objc_alloc(&OBJC_CLASS___AppEventEntityOcelotPayout);
    int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) connection]);
    id v11 = -[SQLiteEntity initWithPersistentID:onConnection:](v9, "initWithPersistentID:onConnection:", v6, v10);

    if (-[SQLiteEntity existsInDatabase](v11, "existsInDatabase")) {
      -[SQLiteEntity deleteFromDatabase](v11, "deleteFromDatabase");
    }
    uint64_t v12 = ASDLogHandleForCategory(3LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = *(void **)(a1 + 48);
      if (v14) {
        id v14 = (void *)v14[9];
      }
      id v15 = v14;
      id v16 = sub_1001E84AC(v4);
      id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      uint64_t v18 = *(void *)(a1 + 56);
      int v19 = 138413314;
      id v20 = v15;
      __int16 v21 = 2114;
      uint64_t v22 = v8;
      __int16 v23 = 2114;
      id v24 = v17;
      __int16 v25 = 2114;
      uint64_t v26 = v18;
      __int16 v27 = 2048;
      id v28 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[%@] Clearing qualified event bundleID: %{public}@ weekDate: %{public}@ currentWeek: %{public}@ pid: %lld",  (uint8_t *)&v19,  0x34u);
    }
  }
}

id sub_1002AE5D8()
{
  id v0 = sub_100220DDC((uint64_t)&OBJC_CLASS___Storage);
  id v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v1 stringByAppendingPathComponent:@"top_arcade_apps.plist"]);

  return v2;
}

void sub_1002AE620(uint64_t a1)
{
  uint64_t v2 = -[KeepAlive initWithName:](objc_alloc(&OBJC_CLASS___KeepAlive), "initWithName:", @"Terminate Arcade Apps");
  id v3 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_1002AE974;
  v33[3] = &unk_1003EF360;
  void v33[4] = *(void *)(a1 + 32);
  id v4 = v3;
  __int128 v34 = v4;
  +[ApplicationProxy enumerateApplicationsOfType:usingBlock:]( &OBJC_CLASS___ApplicationProxy,  "enumerateApplicationsOfType:usingBlock:",  0LL,  v33);
  if (-[NSMutableArray count](v4, "count"))
  {
    __int16 v25 = v2;
    id v5 = [[RBSTerminateContext alloc] initWithExplanation:@"Terminate Arcade Apps"];
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id v24 = v4;
    id obj = v4;
    id v6 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v29,  v37,  16LL);
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v30;
      id v9 = &OBJC_CLASS___NSRegularExpression_ptr;
      int v10 = &OBJC_CLASS___NSRegularExpression_ptr;
      do
      {
        id v11 = 0LL;
        id v26 = v7;
        do
        {
          if (*(void *)v30 != v8) {
            objc_enumerationMutation(obj);
          }
          uint64_t v12 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)v11);
          uint64_t v13 = ASDLogHandleForCategory(4LL);
          id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138543362;
            uint64_t v36 = v12;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Attempting to terminate app with bundleID: %{public}@",  buf,  0xCu);
          }

          [v5 setMaximumTerminationResistance:40];
          if (v5)
          {
            id v15 = (void *)objc_claimAutoreleasedReturnValue([v9[26] predicateMatchingBundleIdentifier:v12]);
            id v16 = [objc_alloc((Class)v10[28]) initWithPredicate:v15 context:v5];
            if ([v16 processExists])
            {
              uint64_t v17 = v8;
              uint64_t v18 = v9;
              id v28 = 0LL;
              unsigned __int8 v19 = [v16 acquireWithError:&v28];
              id v20 = v28;
              uint64_t v21 = ASDLogHandleForCategory(4LL);
              uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
              __int16 v23 = v22;
              if ((v19 & 1) != 0)
              {
                if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__int128 buf = 138543362;
                  uint64_t v36 = v12;
                  _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "App with bundleID: %{public}@ is terminated",  buf,  0xCu);
                }
              }

              else if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__int128 buf = 138543362;
                uint64_t v36 = v12;
                _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "Failed to terminate app with bundleID: %{public}@",  buf,  0xCu);
              }

              [v16 invalidate];
              id v9 = v18;
              uint64_t v8 = v17;
              id v7 = v26;
              int v10 = &OBJC_CLASS___NSRegularExpression_ptr;
            }
          }

          id v11 = (char *)v11 + 1;
        }

        while (v7 != v11);
        id v7 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v29,  v37,  16LL);
      }

      while (v7);
    }

    id v4 = v24;
    uint64_t v2 = v25;
  }
}

void sub_1002AE974(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (sub_1002A5174(*(void *)(a1 + 32), v6))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleID]);

    if (v3)
    {
      id v4 = *(void **)(a1 + 40);
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleID]);
      [v4 addObject:v5];
    }
  }
}

void sub_1002AE9F0(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (sub_1002A5174(*(void *)(a1 + 32), v6))
  {
    id v3 = sub_1002C8134(objc_alloc(&OBJC_CLASS___AppMetadata), v6);
    id v4 = *(void **)(a1 + 40);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleID]);
    [v4 setObject:v3 forKeyedSubscript:v5];
  }
}

void sub_1002AEA7C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ams_DSID"));
  id v3 = [v2 copy];
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(v4 + 32);
  *(void *)(v4 + 32) = v3;

  id v6 = *(__CFString **)(a1 + 32);
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = v7;
  if (v6)
  {
    else {
      id v6 = @"Paid";
    }
  }

  objc_storeStrong((id *)(*(void *)(a1 + 32) + 48LL), v6);
  uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 1LL));
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;
}

void sub_1002AEB48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 32);
  *(void *)(v2 + 32) = 0LL;

  uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(v7 + 48);
  *(void *)(v7 + 4_Block_object_dispose(va, 8) = @"Unsubscribed";
}

uint64_t sub_1002AEE80(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_100187548(v3);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  __int16 v25 = (void *)objc_claimAutoreleasedReturnValue(+[LSDatabaseContext sharedDatabaseContext](&OBJC_CLASS___LSDatabaseContext, "sharedDatabaseContext"));
  unsigned int v24 = [v25 startAccessingReturningError:0];
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id v6 = v5;
  id v7 = [v6 countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v7)
  {
    id v9 = v7;
    uint64_t v10 = *(void *)v28;
    *(void *)&__int128 v8 = 138543618LL;
    __int128 v23 = v8;
    while (2)
    {
      for (i = 0LL; i != v9; i = (char *)i + 1)
      {
        if (*(void *)v28 != v10) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)i);
        unsigned int v13 = objc_msgSend(*(id *)(a1 + 32), "isCancelled", v23);
        uint64_t v14 = ASDLogHandleForCategory(19LL);
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        id v16 = v15;
        if (v13)
        {
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Validate manifests operation has been cancelled.",  buf,  2u);
          }

          goto LABEL_19;
        }

        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)__int128 buf = 138543362;
          __int128 v32 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_INFO,  "Validating application with id [%{public}@]",  buf,  0xCu);
        }

        uint64_t v26 = 0LL;
        uint64_t v17 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "initWithBundleIdentifier:allowPlaceholder:error:",  v12,  1LL,  &v26);
        if (!v17)
        {
          uint64_t v18 = ASDLogHandleForCategory(19LL);
          unsigned __int8 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__int128 buf = v23;
            __int128 v32 = v12;
            __int16 v33 = 2114;
            uint64_t v34 = v26;
            _os_log_error_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_ERROR,  "Launch services does not know about [%{public}@].  Deleting. Error: %{public}@",  buf,  0x16u);
          }

          id v20 = sub_1002D92D0((uint64_t)&OBJC_CLASS___ODRApplication, v12);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
          sub_1001C4054((uint64_t *)v3, v21);
        }
      }

      id v9 = [v6 countByEnumeratingWithState:&v27 objects:v35 count:16];
      if (v9) {
        continue;
      }
      break;
    }
  }

id *sub_1002AF430(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)&OBJC_CLASS___DAAPURLRequest;
    __int128 v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      objc_storeStrong(a1 + 2, a3);
    }
  }

  return a1;
}

void sub_1002AF4C8(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    id v4 = objc_alloc(&OBJC_CLASS___URLRequest);
    uint64_t v5 = sub_1002AF554(a1, v3);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    id v7 = sub_1001DD814(v4, v6);

    sub_1001DD8A0((uint64_t)v7, v3);
  }

URLRequestProperties *sub_1002AF554(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___URLRequestProperties);
  uint64_t v5 = *(void **)(a1 + 8);
  id v16 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 dataForRequestWithError:&v16]);
  id v7 = v16;
  if (v6)
  {
    sub_100294364((uint64_t)v4, v6);
    sub_100293B18((uint64_t)v4, *(void **)(a1 + 24));
    sub_100293E00((uint64_t)v4, *(void **)(a1 + 40));
    if (v4) {
      v4->_dataEncoding = 1LL;
    }
    sub_1002946E0((uint64_t)v4, *(void **)(a1 + 16));
    sub_100294848((uint64_t)v4, 1);
    __int128 v8 = *(void **)(a1 + 48);
    if (v8) {
      sub_1002940C8((uint64_t)v4, v8);
    }
    sub_1002944C8((uint64_t)v4, 4LL);
    sub_100294204((uint64_t)v4, 1LL);
    id v9 = (__CFString *)objc_claimAutoreleasedReturnValue(+[AMSDevice buildVersion](&OBJC_CLASS___AMSDevice, "buildVersion"));
    if (!-[__CFString length](v9, "length"))
    {

      id v9 = @"UNKNOWN";
    }

    objc_super v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@/%@",  @"1.3",  v9));
    sub_1002948B8((uint64_t)v4, v10, @"Client-Cloud-Daap-Version");

    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@/%@",  @"1.1",  v9));
    sub_1002948B8((uint64_t)v4, v11, @"Client-Cloud-Purchase-DAAP-Version");

    if (*(void *)(a1 + 32))
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%lli",  *(void *)(a1 + 32)));
      sub_1002948B8((uint64_t)v4, v12, @"X-FM-Dsid");
    }

    unsigned int v13 = @"application/x-dmap-tagged";
    if ((objc_opt_respondsToSelector(*(void *)(a1 + 8), "contentType") & 1) != 0
      && [*(id *)(a1 + 8) contentType] == (id)1)
    {
      unsigned int v13 = @"application/x-www-form-urlencoded";
    }

    sub_1002948B8((uint64_t)v4, v13, AMSHTTPHeaderContentType);
    uint64_t v14 = v4;
  }

  else
  {
    v3[2](v3, 0LL, v7);
    uint64_t v14 = 0LL;
  }

  return v14;
}

void sub_1002AF7B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = sub_1002AF554(a1, v6);
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    objc_super v10 = sub_1001DDB40((uint64_t *)objc_alloc(&OBJC_CLASS___URLRequestEncoder), v8);
    if (!v8 || (id v11 = objc_getProperty(v8, v9, 112LL, 1)) == 0LL)
    {
      id v12 = sub_10029426C((uint64_t)v8);
      id v11 = (id)objc_claimAutoreleasedReturnValue(v12);
    }

    uint64_t v13 = sub_100294414((uint64_t)v8);
    id v14 = sub_1002945E8((uint64_t)v8);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 requestWithMethod:v13 URL:v15 parameters:v11]);
    id v40 = 0LL;
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 resultWithError:&v40]);
    id v18 = v40;

    if (v18)
    {
      uint64_t v19 = ASDLogHandleForCategory(8LL);
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
      if (!v17)
      {
        if (v21)
        {
          LODWORD(buf) = 138543362;
          *(void *)((char *)&buf + 4) = v18;
          _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Encountered error in DAAP URL request creation: %{public}@. Aborting since request is nil",  (uint8_t *)&buf,  0xCu);
        }

        goto LABEL_16;
      }

      if (v21)
      {
        LODWORD(buf) = 138543362;
        *(void *)((char *)&buf + 4) = v18;
        _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Encountered error in DAAP URL request creation: %{public}@",  (uint8_t *)&buf,  0xCu);
      }
    }

    id v35 = v18;
    __int128 v37 = v10;
    id v39 = v5;
    id v22 = v5;
    id v38 = v6;
    id v23 = v6;
    uint64_t v36 = v17;
    id v24 = v17;
    id v25 = v8;
    id v26 = sub_100293D2C((uint64_t)v25);
    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    if (!v27)
    {
      id v28 = sub_1001F4ADC((uint64_t)&OBJC_CLASS___AMSProcessInfo);
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(v28);
    }

    __int128 v29 = sub_1001E65D4((uint64_t)&OBJC_CLASS___AMSURLSession, v27, v22);
    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    __int128 v31 = objc_alloc_init(&OBJC_CLASS___URLResponseDecoder);
    [v30 setResponseDecoder:v31];
    *(void *)&__int128 buf = _NSConcreteStackBlock;
    *((void *)&buf + 1) = 3221225472LL;
    __int16 v42 = sub_1002AFAF8;
    int v43 = &unk_1003EBDF8;
    id v32 = v23;
    id v44 = v32;
    __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v30 dataTaskWithRequest:v24 completionHandler:&buf]);

    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v30 responseDecoder]);
    sub_1001BA4A8((uint64_t)v34, v25, v33);

    [v33 resume];
    id v6 = v38;
    id v5 = v39;
    uint64_t v17 = v36;
    objc_super v10 = v37;
    id v18 = v35;
LABEL_16:
  }
}

void sub_1002AFAF8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a2;
  uint64_t v6 = ASDErrorWithSafeUserInfo(a3);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v6);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v7);
}

id *sub_1002B0224(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)&OBJC_CLASS___FailPurchaseTask;
    __int128 v8 = (id *)objc_msgSendSuper2(&v10, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 5, a3);
      objc_storeStrong(a1 + 6, a2);
    }
  }

  return a1;
}

void sub_1002B07CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1002B07F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) bundleID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"bundle_id",  v4));

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v7 = sub_10024C088((uint64_t)&OBJC_CLASS___AppUpdateEntity, v6, v5);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

  if ([v8 existsInDatabase])
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) logKey]);
    uint64_t v10 = sub_1002A1984((uint64_t)v3, v8, v9);

    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v10 ^ 1;
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  return v10;
}

id sub_1002B0944(uint64_t a1)
{
  if (qword_100462538 != -1) {
    dispatch_once(&qword_100462538, &stru_1003F0B58);
  }
  return (id)qword_100462530;
}

void sub_1002B0988(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___ProgressCache);
  uint64_t v2 = (void *)qword_100462530;
  qword_100462530 = (uint64_t)v1;
}

void sub_1002B0A98(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (a1)
  {
    id v6 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B0B48;
    block[3] = &unk_1003E97D0;
    void block[4] = a1;
    id v9 = v7;
    id v10 = v5;
    dispatch_sync(v6, block);
  }
}

void sub_1002B0B48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 48);
  id v3 = (__CFString **)*(id *)(a1 + 40);
  id v4 = v2;
  if (v1)
  {
    if (v3 && (v5 = v3[12], id v6 = v5, v5))
    {
      id v7 = v6;
      __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) objectForKeyedSubscript:v6]);
      uint64_t v9 = ASDLogHandleForCategory(24LL);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      id v11 = v10;
      if (v8)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          id v13 = objc_getProperty(v8, v12, 104LL, 1);
          id v15 = objc_getProperty(v3, v14, 152LL, 1);
          *(_DWORD *)uint64_t v34 = 138412802;
          *(void *)&v34[4] = v13;
          __int16 v35 = 2114;
          uint64_t v36 = v5;
          __int16 v37 = 2114;
          id v38 = v15;
          _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "[%@]: Received duplicate BeginProgress with bundleID: %{public}@ storeItemID: %{public}@",  v34,  0x20u);
        }
      }

      else
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          id v17 = objc_getProperty(v3, v16, 104LL, 1);
          char v18 = *((_BYTE *)v3 + 64);
          *(_DWORD *)uint64_t v34 = 138412802;
          *(void *)&v34[4] = v17;
          if ((v18 & 1) != 0) {
            uint64_t v19 = @"remote progress";
          }
          else {
            uint64_t v19 = @"progress";
          }
          __int16 v35 = 2114;
          uint64_t v36 = v19;
          __int16 v37 = 2114;
          id v38 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%@]: Beginning %{public}@ with reason: %{public}@",  v34,  0x20u);
        }

        uint64_t v20 = (_BYTE)v3[8] & 1;
        id v22 = objc_getProperty(v3, v21, 72LL, 1);
        [v22 setReportRemotely:v20];

        [*(id *)(v1 + 40) setObject:v3 forKeyedSubscript:v7];
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) objectForKeyedSubscript:v7]);
        if (!v11)
        {
          id v11 = (os_log_s *)[[ASDApp alloc] initWithBundleID:v7];
          id v25 = objc_getProperty(v3, v24, 152LL, 1);
          -[os_log_s setStoreItemID:](v11, "setStoreItemID:", [v25 longLongValue]);

          -[os_log_s setStatus:](v11, "setStatus:", v3[18]);
          -[os_log_s setWatchApplicationMode:](v11, "setWatchApplicationMode:", v3[20]);
        }

        id v26 = objc_getProperty(v3, v23, 72LL, 1);
        -[os_log_s setRemoteProgress:](v11, "setRemoteProgress:", v26);

        [*(id *)(v1 + 32) setObject:v11 forKeyedSubscript:v7];
        id WeakRetained = objc_loadWeakRetained((id *)(v1 + 24));
        id v28 = -[os_log_s copy](v11, "copy");
        *(void *)uint64_t v34 = v28;
        __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v34, 1LL));
        [WeakRetained catalogRegisteredApps:v29];

        sub_1002B1820((void *)v1, v3);
      }
    }

    else
    {
      uint64_t v30 = ASDLogHandleForCategory(24LL);
      __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled((os_log_t)v8, OS_LOG_TYPE_ERROR))
      {
        if (v3) {
          id Property = objc_getProperty(v3, v31, 152LL, 1);
        }
        else {
          id Property = 0LL;
        }
        id v33 = Property;
        *(_DWORD *)uint64_t v34 = 138543362;
        *(void *)&v34[4] = v33;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v8,  OS_LOG_TYPE_ERROR,  "Failed to begin progress with no bundleID (storeItemID: %{public}@)",  v34,  0xCu);
      }

      id v7 = 0LL;
    }
  }
}

void sub_1002B0F20(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002B0FA8;
    v6[3] = &unk_1003E9DC0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_1002B0FA8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "objectForKeyedSubscript:"));
    uint64_t v3 = ASDLogHandleForCategory(24LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = v4;
    if (v2)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = objc_getProperty(v2, v6, 104LL, 1);
        uint64_t v8 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412546;
        id v19 = v7;
        __int16 v20 = 2114;
        uint64_t v21 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@]: Canceling progress for bundleID: %{public}@",  buf,  0x16u);
      }

      [*(id *)(*(void *)(a1 + 40) + 40) setObject:0 forKeyedSubscript:*(void *)(a1 + 32)];
      [*(id *)(*(void *)(a1 + 40) + 48) removeObject:v2];
    }

    else
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id v16 = *(void **)(a1 + 32);
        *(_DWORD *)__int128 buf = 138543362;
        id v19 = v16;
        _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Canceling untracked progress for bundleID: %{public}@",  buf,  0xCu);
      }
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 32) objectForKeyedSubscript:*(void *)(a1 + 32)]);

    if (v10)
    {
      uint64_t v11 = ASDLogHandleForCategory(24LL);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v13 = *(void **)(a1 + 32);
        *(_DWORD *)__int128 buf = 138543362;
        id v19 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_INFO,  "Removing placeholder from library for bundleID: %{public}@",  buf,  0xCu);
      }

      [*(id *)(*(void *)(a1 + 40) + 32) removeObjectForKey:*(void *)(a1 + 32)];
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 24LL));
      uint64_t v17 = *(void *)(a1 + 32);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v17, 1LL));
      [WeakRetained catalogRefreshedBundleIDs:v15];
    }
  }

  else
  {
    uint64_t v9 = ASDLogHandleForCategory(24LL);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_LOG_TYPE_ERROR,  "Failed to cancel progress with no bundleID",  buf,  2u);
    }
  }
}

void sub_1002B1228(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002B12B0;
    v6[3] = &unk_1003E9DC0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_1002B12B0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "objectForKeyedSubscript:"));
    uint64_t v3 = ASDLogHandleForCategory(24LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = v4;
    if (v2)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = objc_getProperty(v2, v6, 104LL, 1);
        uint64_t v8 = *(void *)(a1 + 32);
        int v13 = 138412546;
        id v14 = v7;
        __int16 v15 = 2114;
        uint64_t v16 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@]: Pausing progress for bundleID: %{public}@",  (uint8_t *)&v13,  0x16u);
      }

      id v10 = objc_getProperty(v2, v9, 72LL, 1);
      [v10 setPhase:7];

      [*(id *)(*(void *)(a1 + 40) + 48) removeObject:v2];
      sub_1002B1490(*(void *)(a1 + 40), v2);
    }

    else
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id v12 = *(void **)(a1 + 32);
        int v13 = 138543362;
        id v14 = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Could not find progress to pause for bundleID: %{public}@",  (uint8_t *)&v13,  0xCu);
      }

      uint64_t v2 = 0LL;
    }
  }

  else
  {
    uint64_t v11 = ASDLogHandleForCategory(24LL);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_LOG_TYPE_ERROR,  "Failed to pause progress with no bundleID",  (uint8_t *)&v13,  2u);
    }
  }
}

void sub_1002B1490(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = v3;
  if (a1)
  {
    sub_10031EFB4(v3);
    uint64_t v5 = ASDLogHandleForCategory(24LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      if (v4) {
        id Property = objc_getProperty(v4, v7, 104LL, 1);
      }
      else {
        id Property = 0LL;
      }
      id v9 = Property;
      int v14 = 138412546;
      id v15 = v9;
      __int16 v16 = 2114;
      uint64_t v17 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[%@]: Posting progress: %{public}@",  (uint8_t *)&v14,  0x16u);
    }

    uint64_t v11 = *(void *)(a1 + 16);
    if (v4) {
      id v12 = objc_getProperty(v4, v10, 72LL, 1);
    }
    else {
      id v12 = 0LL;
    }
    id v13 = v12;
    sub_1002E7BB8(v11, v13);
  }
}

void sub_1002B15C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002B1648;
    v6[3] = &unk_1003E9DC0;
    id v7 = v3;
    uint64_t v8 = a1;
    dispatch_async(v5, v6);
  }
}

void sub_1002B1648(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "objectForKeyedSubscript:"));
    uint64_t v3 = ASDLogHandleForCategory(24LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = v4;
    if (v2)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        id v7 = objc_getProperty(v2, v6, 104LL, 1);
        uint64_t v8 = *(void *)(a1 + 32);
        int v13 = 138412546;
        id v14 = v7;
        __int16 v15 = 2114;
        uint64_t v16 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@]: Resuming progress for bundleID: %{public}@",  (uint8_t *)&v13,  0x16u);
      }

      id v10 = objc_getProperty(v2, v9, 72LL, 1);
      [v10 setPhase:2];

      sub_10031EF5C((id *)v2);
      sub_1002B1820(*(void **)(a1 + 40), v2);
    }

    else
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        id v12 = *(void **)(a1 + 32);
        int v13 = 138543362;
        id v14 = v12;
        _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Could not find progress to pause for bundleID: %{public}@",  (uint8_t *)&v13,  0xCu);
      }

      uint64_t v2 = 0LL;
    }
  }

  else
  {
    uint64_t v11 = ASDLogHandleForCategory(24LL);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  OS_LOG_TYPE_ERROR,  "Failed to resume progress with no bundleID",  (uint8_t *)&v13,  2u);
    }
  }
}

void sub_1002B1820(void *a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3)
    {
      if (*((double *)v3 + 16) == 1.0)
      {
        id v5 = v3[12];
        id v6 = v5;
        if (v5)
        {
          id v7 = v6;
          uint64_t v8 = (void *)a1[5];
          id v9 = v4[12];
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:v9]);

          if (v10)
          {
            uint64_t v11 = ASDLogHandleForCategory(24LL);
            id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138543362;
              uint64_t v21 = v4;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Processing last progress: %{public}@",  buf,  0xCu);
            }

            goto LABEL_11;
          }
        }
      }
    }

    int v13 = (void *)a1[6];
    if (!v13)
    {
LABEL_11:
      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v4));
      sub_1002B2DC4((uint64_t)a1, v14);

      uint64_t v15 = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
      uint64_t v16 = (void *)a1[6];
      a1[6] = v15;

      dispatch_time_t v17 = dispatch_time(0LL, 200000000LL);
      char v18 = (dispatch_queue_s *)a1[1];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1002B2F6C;
      block[3] = &unk_1003E9880;
      void block[4] = a1;
      dispatch_after(v17, v18, block);
      goto LABEL_12;
    }

    [v13 addObject:v4];
  }

uint64_t sub_1002B19E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002B19F4(uint64_t a1)
{
}

void *sub_1002B19FC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v11 = 0LL;
    id v12 = &v11;
    uint64_t v13 = 0x3032000000LL;
    id v14 = sub_1002B19E4;
    uint64_t v15 = sub_1002B19F4;
    id v16 = 0LL;
    id v5 = (dispatch_queue_s *)a1[1];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B1ADC;
    block[3] = &unk_1003F0B80;
    id v9 = a1;
    id v10 = &v11;
    id v8 = v3;
    dispatch_sync(v5, block);
    a1 = (id)v12[5];

    _Block_object_dispose(&v11, 8);
  }

  return a1;
}

void sub_1002B1ADC(void *a1)
{
  if (a1[4])
  {
    id Property = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[5] + 40), "objectForKeyedSubscript:"));
    id v10 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v3, 72LL, 1);
    }
    id v4 = Property;
    id v5 = [v4 copy];
    uint64_t v6 = *(void *)(a1[6] + 8LL);
    id v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

  else
  {
    uint64_t v8 = ASDLogHandleForCategory(24LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Failed find existing progress with no bundleID",  buf,  2u);
    }
  }

void sub_1002B1BB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B1C58;
    block[3] = &unk_1003E97D0;
    id v9 = v5;
    uint64_t v10 = a1;
    id v11 = v6;
    dispatch_async(v7, block);
  }
}

void sub_1002B1C58(void *a1)
{
  if (a1[4])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[5] + 32), "objectForKeyedSubscript:"));

    uint64_t v3 = ASDLogHandleForCategory(24LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    id WeakRetained = v4;
    if (v2)
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        id v6 = (void *)a1[4];
        int v23 = 138543362;
        id v24 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_INFO,  "Finished library placeholder for bundleID: %{public}@",  (uint8_t *)&v23,  0xCu);
      }

      [*(id *)(a1[5] + 32) removeObjectForKey:a1[4]];
      id WeakRetained = (os_log_s *)objc_loadWeakRetained((id *)(a1[5] + 24LL));
      uint64_t v27 = a1[4];
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v27, 1LL));
      -[os_log_s catalogRefreshedBundleIDs:](WeakRetained, "catalogRefreshedBundleIDs:", v7);
    }

    else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v22 = (void *)a1[4];
      int v23 = 138543362;
      id v24 = v22;
      _os_log_error_impl( (void *)&_mh_execute_header,  WeakRetained,  OS_LOG_TYPE_ERROR,  "Failed to find placeholder to finish for bundleID: %{public}@",  (uint8_t *)&v23,  0xCu);
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[5] + 40) objectForKeyedSubscript:a1[4]]);
    if (v9)
    {
      uint64_t v10 = ASDLogHandleForCategory(24LL);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = objc_getProperty(v9, v12, 104LL, 1);
        uint64_t v14 = a1[6];
        int v23 = 138412546;
        id v24 = v13;
        __int16 v25 = 2114;
        uint64_t v26 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%@]: Finished progress with reason: %{public}@",  (uint8_t *)&v23,  0x16u);
      }

      uint8_t v9[16] = 0x3FF0000000000000LL;
      id v16 = objc_getProperty(v9, v15, 72LL, 1);
      id v17 = [v16 installTotalUnitCount];
      id v19 = objc_getProperty(v9, v18, 72LL, 1);
      [v19 setInstallCompletedUnitCount:v17];

      id v21 = objc_getProperty(v9, v20, 72LL, 1);
      [v21 setPhase:6];

      [*(id *)(a1[5] + 48) removeObject:v9];
      [*(id *)(a1[5] + 40) setObject:0 forKeyedSubscript:a1[4]];
    }
  }

  else
  {
    uint64_t v8 = ASDLogHandleForCategory(24LL);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v23) = 0;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_ERROR,  "Failed to finish progress with no bundleID",  (uint8_t *)&v23,  2u);
    }
  }
}

void sub_1002B1F5C(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    id v7 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B1FF4;
    block[3] = &unk_1003EC880;
    double v11 = a3;
    id v9 = v5;
    uint64_t v10 = a1;
    dispatch_async(v7, block);
  }
}

void sub_1002B1FF4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "objectForKeyedSubscript:"));
    if (v2)
    {
      id v4 = v2;
      uint64_t v5 = (uint64_t)(*(double *)(a1 + 48) * 1000.0);
      id v6 = objc_getProperty(v2, v3, 72LL, 1);
      [v6 setCompletedUnitCount:v5];

      uint64_t v7 = ASDLogHandleForCategory(24LL);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v10 = objc_getProperty(v4, v9, 104LL, 1);
        uint64_t v11 = *(void *)(a1 + 48);
        int v21 = 138412546;
        id v22 = v10;
        __int16 v23 = 2048;
        uint64_t v24 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_INFO,  "[%@]: Setting fraction completed: %.2f",  (uint8_t *)&v21,  0x16u);
      }

      sub_1002B1820(*(void **)(a1 + 40), v4);
    }

    else
    {
      uint64_t v14 = ASDLogHandleForCategory(24LL);
      SEL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = *(void **)(a1 + 32);
        int v21 = 138543362;
        id v22 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "No progress exists for: %{public}@ - Ignoring this request",  (uint8_t *)&v21,  0xCu);
      }

      uint64_t v17 = ASDLogHandleForCategory(24LL);
      SEL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        id v19 = *(void **)(a1 + 48);
        uint64_t v20 = *(void *)(a1 + 32);
        int v21 = 134218242;
        id v22 = v19;
        __int16 v23 = 2114;
        uint64_t v24 = v20;
        _os_log_error_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_ERROR,  "Failed to set fraction completed: %.2f for: %{public}@",  (uint8_t *)&v21,  0x16u);
      }

      id v4 = 0LL;
    }
  }

  else
  {
    uint64_t v12 = ASDLogHandleForCategory(24LL);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      id v13 = *(void **)(a1 + 48);
      int v21 = 134217984;
      id v22 = v13;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_LOG_TYPE_ERROR,  "Failed to set fraction completed: %.2f with no bundleID",  (uint8_t *)&v21,  0xCu);
    }
  }
}

void sub_1002B225C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  uint64_t v8 = v7;
  if (a1)
  {
    if (v7)
    {
      id v9 = *(dispatch_queue_s **)(a1 + 8);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      void v12[2] = sub_1002B2388;
      v12[3] = &unk_1003F0BA8;
      void v12[4] = a1;
      id v13 = v7;
      uint64_t v14 = a4;
      uint64_t v15 = a3;
      dispatch_async(v9, v12);
    }

    else
    {
      uint64_t v10 = ASDLogHandleForCategory(24LL);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 134217984;
        uint64_t v17 = a3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Failed to begin download progress: %lld with no bundleID",  buf,  0xCu);
      }
    }
  }
}

void sub_1002B2388(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 40) objectForKeyedSubscript:a1[5]]);
  uint64_t v3 = ASDLogHandleForCategory(24LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = v4;
  if (v2)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = objc_getProperty(v2, v6, 104LL, 1);
      uint64_t v8 = a1[6];
      int v10 = 138412546;
      id v11 = v7;
      __int16 v12 = 2048;
      uint64_t v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@]: Starting download progress for size: %lld",  (uint8_t *)&v10,  0x16u);
    }

    v2[15] = a1[6];
    sub_10031F4D8(v2, a1[7]);
    sub_10031EF5C((id *)v2);
    sub_1002B1820((void *)a1[4], v2);
  }

  else
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      id v9 = (void *)a1[5];
      int v10 = 138543362;
      id v11 = v9;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "No progress exists for: %{public}@ - Ignoring this request (update download progress)",  (uint8_t *)&v10,  0xCu);
    }
  }
}

void sub_1002B24F8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (a1)
  {
    if (v5)
    {
      id v7 = *(dispatch_queue_s **)(a1 + 8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1002B2614;
      block[3] = &unk_1003EC880;
      void block[4] = a1;
      id v11 = v5;
      uint64_t v12 = a3;
      dispatch_async(v7, block);
    }

    else
    {
      uint64_t v8 = ASDLogHandleForCategory(24LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 134217984;
        uint64_t v14 = a3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "Failed to update download progress: %lld with no bundleID",  buf,  0xCu);
      }
    }
  }
}

void sub_1002B2614(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 40) objectForKeyedSubscript:a1[5]]);
  uint64_t v3 = v2;
  if (v2)
  {
    sub_10031F4D8(v2, a1[6]);
    sub_1002B1820((void *)a1[4], v3);
  }

  else
  {
    uint64_t v4 = ASDLogHandleForCategory(24LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = a1[5];
      int v7 = 138543362;
      uint64_t v8 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "No progress exists for: %{public}@ - Ignoring this request (update download progress)",  (uint8_t *)&v7,  0xCu);
    }
  }
}

void sub_1002B2700(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    int v7 = *(dispatch_queue_s **)(a1 + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002B2798;
    block[3] = &unk_1003EC880;
    double v11 = a3;
    id v9 = v5;
    uint64_t v10 = a1;
    dispatch_async(v7, block);
  }
}

void sub_1002B2798(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (double *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 40), "objectForKeyedSubscript:"));
    if (v2)
    {
      uint64_t v4 = v2;
      id v5 = (double *)objc_getProperty(v2, v3, 136LL, 1);
      int v7 = v5;
      double v8 = 0.0;
      double v9 = 0.0;
      if (v5) {
        double v9 = v5[1];
      }
      uint64_t v10 = (double *)objc_getProperty(v4, v6, 136LL, 1);
      if (v10) {
        double v8 = v10[2];
      }
      double v11 = v9 + v8 * *(double *)(a1 + 48);

      uint8_t v4[16] = v11;
      id v13 = objc_getProperty(v4, v12, 72LL, 1);
      [v13 setCompletedUnitCount:(uint64_t)(v11 * 1000.0)];

      uint64_t v14 = ASDLogHandleForCategory(24LL);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        id v17 = objc_getProperty(v4, v16, 104LL, 1);
        uint64_t v18 = *(void *)(a1 + 48);
        int v29 = 138412802;
        id v30 = v17;
        __int16 v31 = 2048;
        uint64_t v32 = v18;
        __int16 v33 = 2048;
        double v34 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_INFO,  "[%@]: Received install progress: %.2f (%.2f)",  (uint8_t *)&v29,  0x20u);
      }

      uint64_t v19 = (uint64_t)(*(double *)(a1 + 48) * 1000.0);
      id v21 = objc_getProperty(v4, v20, 72LL, 1);
      [v21 setInstallCompletedUnitCount:v19];

      id v23 = objc_getProperty(v4, v22, 72LL, 1);
      [v23 setPhase:4];

      sub_1002B1820(*(void **)(a1 + 40), v4);
    }

    else
    {
      uint64_t v26 = ASDLogHandleForCategory(24LL);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        id v28 = *(void **)(a1 + 32);
        int v29 = 138543362;
        id v30 = v28;
        _os_log_error_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_ERROR,  "No progress exists for: %{public}@ - Ignoring this request (update install progress)",  (uint8_t *)&v29,  0xCu);
      }

      uint64_t v4 = 0LL;
    }
  }

  else
  {
    uint64_t v24 = ASDLogHandleForCategory(24LL);
    uint64_t v4 = (double *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_ERROR))
    {
      __int16 v25 = *(void **)(a1 + 48);
      int v29 = 134217984;
      id v30 = v25;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_LOG_TYPE_ERROR,  "Failed to set install progress: %.2f with no bundleID",  (uint8_t *)&v29,  0xCu);
    }
  }
}

void sub_1002B2B28(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) allValues]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 filteredArrayUsingPredicate:*(void *)(a1 + 40)]);

  uint64_t v4 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v23 objects:v29 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v24;
    do
    {
      for (i = 0LL; i != v7; i = (char *)i + 1)
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)i);
        double v11 = *(void **)(*(void *)(a1 + 32) + 40LL);
        SEL v12 = (void *)objc_claimAutoreleasedReturnValue([v10 bundleID]);
        id Property = (id)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:v12]);
        uint64_t v15 = Property;
        if (Property) {
          id Property = objc_getProperty(Property, v14, 72LL, 1);
        }
        id v16 = Property;

        if ([v16 reportRemotely])
        {
          uint64_t v17 = ASDLogHandleForCategory(2LL);
          uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 138543362;
            id v28 = v10;
            _os_log_debug_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "Skipping app for catalog query since it is reporting remotely: %{public}@",  buf,  0xCu);
          }
        }

        else
        {
          uint64_t v18 = (os_log_s *)[v10 copy];
          -[NSMutableArray addObject:](v4, "addObject:", v18);
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v23 objects:v29 count:16];
    }

    while (v7);
  }

  id v19 = [*(id *)(a1 + 48) count];
  uint64_t v20 = *(void *)(a1 + 56);
  if (v19)
  {
    id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"NOT bundleID IN %@",  *(void *)(a1 + 48)));
    SEL v22 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray filteredArrayUsingPredicate:](v4, "filteredArrayUsingPredicate:", v21));
    (*(void (**)(uint64_t, void *, void))(v20 + 16))(v20, v22, 0LL);
  }

  else
  {
    (*(void (**)(void, NSMutableArray *, void))(v20 + 16))(*(void *)(a1 + 56), v4, 0LL);
  }
}

void sub_1002B2DC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(_BYTE **)(*((void *)&v13 + 1) + 8LL * (void)v7);
        if (v8 && (v8[64] & 1) != 0)
        {
          uint64_t v9 = ASDLogHandleForCategory(24LL);
          uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          {
            id v12 = objc_getProperty(v8, v11, 104LL, 1);
            *(_DWORD *)__int128 buf = 138412546;
            id v18 = v12;
            __int16 v19 = 2114;
            uint64_t v20 = v8;
            _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "[%@]: Progress had reportRemotely set on device without XDC support: %{public}@",  buf,  0x16u);
          }
        }

        else
        {
          sub_1002B1490(a1, *(void **)(*((void *)&v13 + 1) + 8LL * (void)v7));
        }

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v21 count:16];
    }

    while (v5);
  }
}

void sub_1002B2F6C(uint64_t a1)
{
}

void sub_1002B2F74(uint64_t a1)
{
  if (a1)
  {
    id v2 = [*(id *)(a1 + 48) count];
    id v3 = *(void **)(a1 + 48);
    if (v2)
    {
      sub_1002B2DC4(a1, v3);
      [*(id *)(a1 + 48) removeAllObjects];
      dispatch_time_t v4 = dispatch_time(0LL, 200000000LL);
      id v5 = *(dispatch_queue_s **)(a1 + 8);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1002B301C;
      block[3] = &unk_1003E9880;
      void block[4] = a1;
      dispatch_after(v4, v5, block);
    }

    else
    {
      *(void *)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
    }
  }

uint64_t sub_1002B301C(uint64_t a1)
{
  return sub_1002B2F74(*(void *)(a1 + 32));
}

id sub_1002B30A4(uint64_t a1)
{
  if (qword_100462548 != -1) {
    dispatch_once(&qword_100462548, &stru_1003F0BC8);
  }
  return (id)qword_100462540;
}

void sub_1002B30E8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___CrossfireService);
  id v2 = (void *)qword_100462540;
  qword_100462540 = (uint64_t)v1;
}

id *sub_1002B3910(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v13.receiver = a1;
    v13.super_class = (Class)&OBJC_CLASS___PurchaseHistoryItemsDAAPResponseDecoder;
    id v5 = (id *)objc_msgSendSuper2(&v13, "init");
    a1 = v5;
    if (v5)
    {
      objc_storeStrong(v5 + 3, a2);
      a1[8] = (id)100;
      uint64_t v6 = -[NSConditionLock initWithCondition:](objc_alloc(&OBJC_CLASS___NSConditionLock), "initWithCondition:", 0LL);
      id v7 = a1[10];
      a1[10] = v6;

      dispatch_queue_attr_t v8 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
      uint64_t v9 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v8);
      dispatch_queue_t v10 = dispatch_queue_create("com.apple.AppStoreDaemon.PurchaseHistoryDAAPResponseDecoder.pasrsingQueue", v9);
      id v11 = a1[11];
      a1[11] = v10;

      *((_BYTE *)a1 + 96) = 0;
    }
  }

  return a1;
}

void sub_1002B39E4(void **a1)
{
  if (a1)
  {
    self = sub_10021CD48((id *)objc_alloc(&OBJC_CLASS___PurchaseHistoryItemsDAAPResponseMetadataParser), a1[3]);
    sub_1001F6CAC((uint64_t)self);
    if (self)
    {
      id v3 = objc_getProperty(self, v2, 24LL, 1);
      id v4 = a1[13];
      a1[13] = v3;

      id Property = objc_getProperty(self, v5, 32LL, 1);
    }

    else
    {
      objc_storeStrong(a1 + 13, 0LL);
      id Property = 0LL;
    }

    objc_storeStrong(a1 + 14, Property);
    if (self) {
      id v8 = objc_getProperty(self, v7, 40LL, 1);
    }
    else {
      id v8 = 0LL;
    }
    objc_storeStrong(a1 + 15, v8);
  }

PurchaseHistoryItemsDAAPPartialResponse *sub_1002B3AB0(uint64_t a1)
{
  if (!a1)
  {
LABEL_21:
    uint64_t v6 = 0LL;
    return v6;
  }

  if (![*(id *)(a1 + 24) length])
  {
    uint64_t v14 = ASDLogHandleForCategory(14LL);
    __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      LODWORD(v19) = 138412290;
      *(void *)((char *)&v19 + 4) = objc_opt_class(a1, v16);
      id v18 = *(id *)((char *)&v19 + 4);
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[%@]: Response data 0 length",  (uint8_t *)&v19,  0xCu);
    }

    goto LABEL_21;
  }

  [*(id *)(a1 + 80) lock];
  if (![*(id *)(a1 + 80) condition])
  {
    id v2 = *(id *)(a1 + 24);
    id v3 = *(dispatch_queue_s **)(a1 + 88);
    *(void *)&__int128 v19 = _NSConcreteStackBlock;
    *((void *)&v19 + 1) = 3221225472LL;
    uint64_t v20 = sub_1002B3CC4;
    id v21 = &unk_1003E9DC0;
    uint64_t v22 = a1;
    id v23 = v2;
    id v4 = v2;
    dispatch_async(v3, &v19);
  }

  objc_msgSend(*(id *)(a1 + 80), "unlockWithCondition:", 1, v19, v20, v21, v22);
  [*(id *)(a1 + 80) lockWhenCondition:2];
  SEL v5 = objc_opt_new(&OBJC_CLASS___PurchaseHistoryItemsDAAPPartialResponse);
  uint64_t v6 = v5;
  if (*(_BYTE *)(a1 + 96) && v5) {
    v5->_isLast = 1;
  }
  if ([*(id *)(a1 + 32) count] && v6) {
    objc_setProperty_atomic(v6, v7, *(id *)(a1 + 32), 16LL);
  }
  if ([*(id *)(a1 + 40) count] && v6) {
    objc_setProperty_atomic(v6, v8, *(id *)(a1 + 40), 24LL);
  }
  *(void *)(a1 + 72) = 0LL;
  uint64_t v9 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  dispatch_queue_t v10 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v9;

  id v11 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  id v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v11;

  if (*(_BYTE *)(a1 + 96)) {
    uint64_t v13 = 3LL;
  }
  else {
    uint64_t v13 = 2LL;
  }
  [*(id *)(a1 + 80) unlockWithCondition:v13];
  return v6;
}

void sub_1002B3CC4(uint64_t a1)
{
  id v2 = [[DKDAAPParser alloc] initWithData:*(void *)(a1 + 40)];
  [v2 setDelegate:*(void *)(a1 + 32)];
  [v2 parse];
}

id sub_1002B3D20(id result)
{
  if (result)
  {
    uint64_t v1 = (id *)result;
    unint64_t v2 = *((void *)result + 8);
    unint64_t v3 = *((void *)result + 9) + 1LL;
    *((void *)result + 9) = v3;
    if (v3 >= v2)
    {
      [*((id *)result + 10) unlockWithCondition:2];
      return [v1[10] lockWhenCondition:1];
    }
  }

  return result;
}

LABEL_99:
}

CachedURLSession *sub_1002B4EE0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  maximumWatchCellularTransferSize = a2;
  objc_opt_self(a1);
  id v7 = objc_opt_new(&OBJC_CLASS___CachedURLSession);
  id v8 = v7;
  if (v7)
  {
    objc_storeStrong((id *)&v7->_session, a2);

    uint64_t v9 = (NSNumber *)v5;
    maximumWatchCellularTransferSize = v8->_maximumWatchCellularTransferSize;
    v8->_maximumWatchCellularTransferSize = v9;
  }

  return v8;
}

uint64_t sub_1002B4F5C(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v1 = a1;
  objc_sync_enter(v1);
  uint64_t v2 = v1[1] - 1LL;
  v1[1] = v2;
  objc_sync_exit(v1);

  return v2;
}

uint64_t sub_1002B4FA8(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v1 = a1;
  objc_sync_enter(v1);
  uint64_t v2 = v1[1] + 1LL;
  v1[1] = v2;
  objc_sync_exit(v1);

  return v2;
}

void *sub_1002B5024(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___ODRApplicationCleanTask;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      id v5 = (void *)a1[5];
      a1[5] = v4;
    }
  }

  return a1;
}

void sub_1002B5110(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 32);
  if (v1)
  {
    id v2 = sub_1002D9D08(v1[5]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    id v4 = sub_10030F240((uint64_t)&OBJC_CLASS___ODRDownloadManager);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    sub_1003100D4((uint64_t)v5, v3, 0LL);

    uint64_t v6 = ASDLogHandleForCategory(19LL);
    objc_super v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Cancelled download requests for: %{public}@",  (uint8_t *)&buf,  0xCu);
    }

    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    uint64_t v34 = 0x3032000000LL;
    __int16 v35 = sub_1002B5480;
    uint64_t v36 = sub_1002B5490;
    id v37 = 0LL;
    id v8 = sub_1001B53D0((uint64_t)&OBJC_CLASS___ODRDatabaseStore);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472LL;
    v25[2] = sub_1002B5498;
    v25[3] = &unk_1003EB858;
    p___int128 buf = &buf;
    id v10 = v3;
    id v26 = v10;
    [v9 readUsingSession:v25];

    if (*(void *)(*((void *)&buf + 1) + 40LL))
    {
      id v11 = sub_1002FE4E0((uint64_t)&OBJC_CLASS___ODRServiceDelegate);
      uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);
      uint64_t v13 = (void *)v12;
      if (v12) {
        uint64_t v14 = *(void **)(v12 + 32);
      }
      else {
        uint64_t v14 = 0LL;
      }
      id v15 = v14;
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 stringByAppendingPathComponent:*(void *)(*((void *)&buf + 1) + 40)]);

      if (v16)
      {
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[SAPathManager defaultManager](&OBJC_CLASS___SAPathManager, "defaultManager"));
        id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v16));
        uint64_t v32 = v18;
        __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v32, 1LL));
        *(void *)&__int128 v28 = _NSConcreteStackBlock;
        *((void *)&v28 + 1) = 3221225472LL;
        int v29 = sub_1002B54D8;
        id v30 = &unk_1003E9CA8;
        __int16 v31 = (os_log_s *)v10;
        [v17 unregisterURLs:v19 forBundleID:v31 completionHandler:&v28];

        uint64_t v20 = v31;
      }

      else
      {
        uint64_t v21 = ASDLogHandleForCategory(19LL);
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          LODWORD(v2_Block_object_dispose(va, 8) = 138543362;
          *(void *)((char *)&v28 + 4) = v10;
          _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Failed to clear space attribution for %{public}@, application base directory is nil",  (uint8_t *)&v28,  0xCu);
        }
      }
    }

    id v22 = sub_1001B53D0((uint64_t)&OBJC_CLASS___ODRDatabaseStore);
    id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_1002B55A8;
    v24[3] = &unk_1003E9858;
    void v24[4] = v1;
    [v23 modifyUsingTransaction:v24];

    [v1 completeWithSuccess];
    _Block_object_dispose(&buf, 8);
  }

void sub_1002B5458( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

uint64_t sub_1002B5480(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002B5490(uint64_t a1)
{
}

void sub_1002B5498(uint64_t a1, id a2)
{
  id v3 = sub_100188C1C(a2, *(void *)(a1 + 32));
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1002B54D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = ASDLogHandleForCategory(19LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138543618;
      uint64_t v8 = v6;
      __int16 v9 = 2114;
      id v10 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Failed to clear space attribution for %{public}@: %{public}@",  (uint8_t *)&v7,  0x16u);
    }
  }
}

uint64_t sub_1002B55A8(uint64_t a1, uint64_t *a2)
{
  int v3 = sub_1001C4054(a2, *(void **)(*(void *)(a1 + 32) + 40LL));
  uint64_t v4 = ASDLogHandleForCategory(19LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = sub_1002D9D08(*(void *)(*(void *)(a1 + 32) + 40LL));
    int v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    int v9 = 138543618;
    id v10 = v7;
    __int16 v11 = 1024;
    int v12 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Removed manifest for %{public}@: %{BOOL}d",  (uint8_t *)&v9,  0x12u);
  }

  return 1LL;
}

uint64_t sub_1002B5910(uint64_t result)
{
  if (result) {
    return *(void *)(result + 40);
  }
  return result;
}

uint64_t sub_1002B591C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_1002B5928(uint64_t result)
{
  if (result) {
    return *(unsigned int *)(result + 12);
  }
  return result;
}

BOOL sub_1002B5BB8(BOOL result)
{
  if (result) {
    return *(_BYTE *)(result + 8) != 0;
  }
  return result;
}

uint64_t sub_1002B5BCC(uint64_t result)
{
  if (result) {
    return *(void *)(result + 128);
  }
  return result;
}

id sub_1002B5E08(uint64_t a1)
{
  if (qword_100462550 != -1) {
    dispatch_once(&qword_100462550, &stru_1003F0C20);
  }
  return (id)qword_100462558;
}

void sub_1002B5E4C(id a1)
{
  uint64_t v1 = objc_opt_new(&OBJC_CLASS___Optional);
  id v2 = (void *)qword_100462558;
  qword_100462558 = (uint64_t)v1;
}

Optional *sub_1002B5E74(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = objc_opt_new(&OBJC_CLASS___Optional);
  v4->_hasValue = 1;
  id value = v4->_value;
  v4->_id value = v3;

  return v4;
}

void *sub_1002B5EC8(void *a1, void *a2)
{
  if (a1)
  {
    if (*((_BYTE *)a1 + 8)) {
      a2 = (void *)a1[2];
    }
    a1 = a2;
  }

  return a1;
}

id sub_1002B5EF8(uint64_t a1)
{
  uint64_t v1 = objc_opt_self(a1);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  unsigned int outCount = 0;
  uint64_t v4 = (objc_class *)objc_opt_class(v1, v3);
  uint64_t v5 = class_copyPropertyList(v4, &outCount);
  if (v5 && outCount)
  {
    for (unint64_t i = 0LL; i < outCount; ++i)
    {
      int v7 = property_copyAttributeValue(v5[i], "G");
      if (v7)
      {
        uint64_t v8 = v7;
        int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", v7));
        [v2 addObject:v9];

        free(v8);
      }

      id v10 = +[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", property_getName(v5[i]));
      __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      [v2 addObject:v11];
    }
  }

  free(v5);
  id v12 = [v2 copy];

  return v12;
}

id sub_1002B61EC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002B6264;
  block[3] = &unk_1003E9EA8;
  void block[4] = objc_opt_self(a1);
  if (qword_100462568 != -1) {
    dispatch_once(&qword_100462568, block);
  }
  return (id)qword_100462560;
}

void sub_1002B6264(uint64_t a1)
{
  id v1 = objc_alloc(*(Class *)(a1 + 32));
  id v2 = sub_100185934((uint64_t)&OBJC_CLASS___Environment);
  int v7 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v3 = sub_100185AB8(v7);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = [v1 initWithDatabase:v4];
  id v6 = (void *)qword_100462560;
  qword_100462560 = (uint64_t)v5;
}

id sub_1002B62D4(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = 0LL;
  id v5 = &v4;
  uint64_t v6 = 0x3032000000LL;
  int v7 = sub_1002B63A4;
  uint64_t v8 = sub_1002B63B4;
  id v9 = 0LL;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1002B63BC;
  v3[3] = &unk_1003EDAA8;
  v3[4] = &v4;
  [a1 readUsingSession:v3];
  id v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1002B638C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1002B63A4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002B63B4(uint64_t a1)
{
}

void sub_1002B63BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_alloc(&OBJC_CLASS___SQLiteQueryDescriptor);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___LaunchEventSyncMetadataEntity, v5);
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___LaunchEventSyncMetadata, v7);
  uint64_t v14 = sub_10024BAF8(v4, v6, v8);
  id v9 = objc_alloc(&OBJC_CLASS___SQLiteQuery);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);

  id v11 = -[SQLiteQuery initOnConnection:descriptor:](v9, "initOnConnection:descriptor:", v10, v14);
  id v12 = sub_1001A54A8((uint64_t)&OBJC_CLASS___LaunchEventSyncMetadataEntity);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  void v15[2] = sub_1002B64D8;
  v15[3] = &unk_1003E9920;
  void v15[4] = *(void *)(a1 + 32);
  [v11 enumerateMemoryEntitiesWithProperties:v13 usingBlock:v15];
}

void sub_1002B64D8(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  *a4 = 1;
}

void sub_1002B6598(id a1, int64_t a2, int64_t *a3, id *a4)
{
  if (a2 > 14999)
  {
    switch(a2)
    {
      case 15000LL:
        uint64_t v4 = &stru_1003F0F60;
        int64_t v5 = 15001LL;
        goto LABEL_26;
      case 15001LL:
        uint64_t v4 = &stru_1003F0F80;
        int64_t v5 = 15002LL;
        goto LABEL_26;
      case 15002LL:
        uint64_t v4 = &stru_1003F0FA0;
        int64_t v5 = 15003LL;
        goto LABEL_26;
      case 15003LL:
        uint64_t v4 = &stru_1003F0FC0;
        int64_t v5 = 16000LL;
        goto LABEL_26;
      default:
        switch(a2)
        {
          case 16000LL:
            uint64_t v4 = &stru_1003F0FE0;
            int64_t v5 = 16001LL;
            goto LABEL_26;
          case 16001LL:
            uint64_t v4 = &stru_1003F1000;
            int64_t v5 = 16002LL;
            goto LABEL_26;
          case 16002LL:
            uint64_t v4 = &stru_1003F1020;
            int64_t v5 = 16003LL;
            goto LABEL_26;
          case 16003LL:
            uint64_t v4 = &stru_1003F1040;
LABEL_25:
            int64_t v5 = 17001LL;
            goto LABEL_26;
          default:
            return;
        }
    }
  }

  else
  {
    switch(a2)
    {
      case 14000LL:
        uint64_t v4 = &stru_1003F0E80;
        int64_t v5 = 14001LL;
        break;
      case 14001LL:
        uint64_t v4 = &stru_1003F0EA0;
        int64_t v5 = 14002LL;
        break;
      case 14002LL:
        uint64_t v4 = &stru_1003F0EC0;
        int64_t v5 = 14003LL;
        break;
      case 14003LL:
        uint64_t v4 = &stru_1003F0EE0;
        int64_t v5 = 14004LL;
        break;
      case 14004LL:
        uint64_t v4 = &stru_1003F0F00;
        int64_t v5 = 14005LL;
        break;
      case 14005LL:
        uint64_t v4 = &stru_1003F0F20;
        int64_t v5 = 14006LL;
        break;
      case 14006LL:
        uint64_t v4 = &stru_1003F0F40;
        int64_t v5 = 15000LL;
        break;
      default:
        if (!a2)
        {
          uint64_t v4 = &stru_1003F1060;
          goto LABEL_25;
        }

        if (a2 != 13002) {
          return;
        }
        uint64_t v4 = &stru_1003F0E60;
        int64_t v5 = 14000LL;
        break;
    }

void sub_1002B6748(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS launch_event_sync_metadata (pid INTEGER, last_duet_sync DATETIME, spotlight_migrated_date DATETIME, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS launch_events (pid INTEGER, bundle_id TEXT, containing_bundle_id, event_source INTEGER, is_extension INTEGER, launch_end_time DATETIME, launch_start_time DATETIME, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0LL);
  }
}

void sub_1002B67A0(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_affiliate_token TEXT;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_app_type TEXT;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_campaign TEXT;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_campaign_token TEXT;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_provider_token TEXT;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_ref_source TEXT;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN clip_ref_type TEXT;", 1, 0LL);
  }
}

void sub_1002B6870(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN is_clip INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_ocelot ADD COLUMN is_clip INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_ocelot_payout ADD COLUMN is_clip INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_personalization ADD COLUMN is_clip INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_crossfire ADD COLUMN is_clip INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_ocelot ADD COLUMN is_clip INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_ocelot_payout ADD COLUMN is_clip INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_personalization ADD COLUMN is_clip INTEGER;", 1, 0LL);
  }
}

void sub_1002B6958(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS current_app_installs (pid INTEGER, bundle_id TEXT, clip_affiliate_token TEXT, clip_campaign TEXT, clip_campaign_token TEXT, clip_provider_token TEXT, clip_ref_source TEXT, clip_ref_type TEXT, clip_third_party_with_no_app_referrer INTEGER, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE app_events_crossfire ADD COLUMN clip_third_party_with_no_app_referrer INTEGER;",
      1,
      0LL);
  }
}

void sub_1002B69B0(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1002E981C( (uint64_t)a2,  @"CREATE TABLE IF NOT EXISTS app_usage_session_reporter_keys (pid INTEGER, bundle_id TEXT, session_reporter_key TEXT, last_refresh DATETIME, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
  }
      1,
      0LL);
}

void sub_1002B69D4(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE app_events_crossfire ADD COLUMN device_vendor_id_repaired INTEGER;",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE app_events_ocelot ADD COLUMN device_vendor_id_repaired INTEGER;",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE app_events_ocelot_payout ADD COLUMN device_vendor_id_repaired INTEGER;",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE app_events_personalization ADD COLUMN device_vendor_id_repaired INTEGER;",
      1,
      0LL);
  }
}

void sub_1002B6A5C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_crossfire ADD COLUMN vendor_name TEXT;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_ocelot ADD COLUMN vendor_name TEXT;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_ocelot_payout ADD COLUMN vendor_name TEXT;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_personalization ADD COLUMN vendor_name TEXT;", 1, 0LL);
  }
}

void sub_1002B6AE4(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS app_metrics_events (pid INTEGER, bundle_id TEXT, event_type INTEGER, event_subtype INTEGER, metrics_type INTEGER, has_been_posted INTEGER DEFAULT 0, payload JSON, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS current_apps (pid INTEGER, app_platform INTEGER, bundle_id TEXT, bundle_version TEXT, cohort TEXT, device_vendor_id TEXT, deletion_date DATETIME, event_type INTEGER, evid INTEGER, is_arcade INTEGER, is_beta INTEGER, is_clip INTEGER, is_prior INTEGER, is_system_app INTEGER, item_id INTEGER, item_name TEXT, short_version TEXT, storefront INTEGER, timestamp DATETIME DEFAULT (timestamp()), vendor_name TEXT, PRIMARY KEY (pid));",
      1,
      0LL);
  }
}

void sub_1002B6B3C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_crossfire ADD COLUMN app_platform INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_ocelot ADD COLUMN app_platform INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_ocelot_payout ADD COLUMN app_platform INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE app_events_personalization ADD COLUMN app_platform INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_crossfire ADD COLUMN app_platform INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_ocelot ADD COLUMN app_platform INTEGER;", 1, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_ocelot_payout ADD COLUMN app_platform INTEGER;", 1, 0LL);
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE current_apps_personalization ADD COLUMN app_platform INTEGER;",
      1,
      0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps ADD COLUMN app_platform INTEGER;", 0, 0LL);
  }
}

void sub_1002B6C3C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1002E981C((uint64_t)a2, @"ALTER TABLE current_apps ADD COLUMN is_arcade INTEGER;", 0, 0LL);
  }
}

void sub_1002B6C60(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_ocelot ADD COLUMN is_arcade INTEGER;", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_crossfire ADD COLUMN is_arcade INTEGER;", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_ocelot_payout ADD COLUMN is_arcade INTEGER;", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_personalization ADD COLUMN is_arcade INTEGER;", 0, 0LL);
  }
}

void sub_1002B6CE8(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1002E981C( (uint64_t)a2,  @"CREATE TABLE IF NOT EXISTS active_launch_events (pid INTEGER, bundle_id TEXT, containing_bundle_id, event_source INTEGER, is_extension INTEGER, launch_end_time DATETIME, launch_start_time DATETIME, payload JSON, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
  }
      1,
      0LL);
}

void sub_1002B6D0C(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  if (a2) {
    sub_1002E981C((uint64_t)a2, @"ALTER TABLE current_apps ADD COLUMN is_system_app INTEGER;", 0, 0LL);
  }
}

void sub_1002B6D30(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_crossfire ADD COLUMN is_system_app INTEGER;", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"ALTER TABLE current_apps_ocelot ADD COLUMN is_system_app INTEGER;", 0, 0LL);
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE current_apps_ocelot_payout ADD COLUMN is_system_app INTEGER;",
      0,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE current_apps_personalization ADD COLUMN is_system_app INTEGER;",
      0,
      0LL);
  }
}

void sub_1002B6DB8(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE app_events_crossfire ADD COLUMN is_system_app INTEGER NOT NULL DEFAULT 0;",
      0,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE app_events_ocelot ADD COLUMN is_system_app INTEGER NOT NULL DEFAULT 0;",
      0,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE app_events_ocelot_payout ADD COLUMN is_system_app INTEGER NOT NULL DEFAULT 0;",
      0,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"ALTER TABLE app_events_personalization ADD COLUMN is_system_app INTEGER NOT NULL DEFAULT 0;",
      0,
      0LL);
  }
}

void sub_1002B6E40(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C((uint64_t)v2, @"DROP TABLE current_apps_crossfire", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE current_apps_ocelot", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE current_apps_ocelot_payout", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE current_apps_personalization", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE app_cluster_mappings", 0, 0LL);
  }
}

void sub_1002B6EE0(id a1, SQLiteDatabaseStoreMigrator *a2)
{
  id v2 = a2;
  if (v2)
  {
    sub_1002E981C((uint64_t)v2, @"DROP TABLE active_launch_events", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE account_events", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE app_events_crossfire", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE app_events_ocelot", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE app_events_ocelot_payout", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE app_events_personalization", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE app_cluster_mappings", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE app_metrics_events", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE current_apps", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE current_apps_crossfire", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE current_apps_ocelot", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE current_apps_ocelot_payout", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE current_apps_personalization", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE launch_events", 0, 0LL);
    sub_1002E981C((uint64_t)v2, @"DROP TABLE launch_event_sync_metadata", 0, 0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS active_launch_events (pid INTEGER, bundle_id TEXT, containing_bundle_id, event_source INTEGER, is_extension INTEGER, launch_end_time DATETIME, launch_start_time DATETIME, payload JSON, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS account_events (pid INTEGER, active_start_time DATETIME, active_end_time DATETIME, account_id INTEGER, apple_id TEXT, alt_dsid TEXT, event_type INTEGER, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS app_events_crossfire (pid INTEGER, account_id INTEGER, app_platform INTEGER, bundle_id TEXT, bundle_version TEXT, clip_affiliate_token TEXT, clip_app_type TEXT, clip_campaign TEXT, clip_campaign_token TEXT, clip_provider_token TEXT, clip_ref_source TEXT, clip_ref_type TEXT, clip_third_party_with_no_app_referrer INTEGER, cohort TEXT, count INTEGER, cumulative_user_count INTEGER, device_vendor_id TEXT, device_vendor_id_repaired INTEGER, event_type INTEGER, event_subtype INTEGER, evid INTEGER, has_been_posted INTEGER DEFAULT 0, is_beta INTEGER, is_clip INTEGER, is_system_app INTEGER DEFAULT 0, is_temporary INTEGER DEFAULT 0, item_id INTEGER, item_name TEXT, launch_time DATETIME, launch_end_time DATETIME, week_start_time DATETIME, short_version TEXT, storefront INTEGER, timestamp DATETIME DEFAULT (timestamp()), usage_time INTEGER, PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS current_app_installs (pid INTEGER, bundle_id TEXT, clip_affiliate_token TEXT, clip_campaign TEXT, clip_campaign_token TEXT, clip_provider_token TEXT, clip_ref_source TEXT, clip_ref_type TEXT, clip_third_party_with_no_app_referrer INTEGER, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS app_events_ocelot (pid INTEGER, account_id INTEGER, app_platform INTEGER, bundle_id TEXT, bundle_version TEXT, cohort TEXT, count INTEGER, cumulative_user_count INTEGER, device_vendor_id TEXT, device_vendor_id_repaired INTEGER, event_type INTEGER, event_subtype INTEGER, evid INTEGER, has_been_posted INTEGER DEFAULT 0, is_beta INTEGER, is_clip INTEGER, is_system_app INTEGER DEFAULT 0, is_temporary INTEGER DEFAULT 0, item_id INTEGER, item_name TEXT, launch_time DATETIME, launch_end_time DATETIME, week_start_time DATETIME, short_version TEXT, storefront INTEGER, timestamp DATETIME DEFAULT (timestamp()), usage_time INTEGER, PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS app_events_ocelot_payout (pid INTEGER, account_id INTEGER, app_platform INTEGER, bundle_id TEXT, bundle_version TEXT, cohort TEXT, count INTEGER, cumulative_user_count INTEGER, device_vendor_id TEXT, device_vendor_id_repaired INTEGER, event_type INTEGER, event_subtype INTEGER, evid INTEGER, has_been_posted INTEGER DEFAULT 0, is_beta INTEGER, is_clip INTEGER, is_system_app INTEGER DEFAULT 0, is_temporary INTEGER DEFAULT 0, item_id INTEGER, item_name TEXT, launch_time DATETIME, launch_end_time DATETIME, week_start_time DATETIME, short_version TEXT, storefront INTEGER, timestamp DATETIME DEFAULT (timestamp()), usage_time INTEGER, PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS app_events_personalization (pid INTEGER, account_id INTEGER, app_platform INTEGER, bundle_id TEXT, bundle_version TEXT, cohort TEXT, count INTEGER, cumulative_user_count INTEGER, device_vendor_id TEXT, device_vendor_id_repaired INTEGER, event_type INTEGER, event_subtype INTEGER, evid INTEGER, has_been_posted INTEGER DEFAULT 0, is_beta INTEGER, is_clip INTEGER, is_system_app INTEGER DEFAULT 0, is_temporary INTEGER DEFAULT 0, item_id INTEGER, item_name TEXT, launch_time DATETIME, launch_end_time DATETIME, week_start_time DATETIME, short_version TEXT, storefront INTEGER, timestamp DATETIME DEFAULT (timestamp()), usage_time INTEGER, PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS launch_event_sync_metadata (pid INTEGER, last_duet_sync DATETIME, spotlight_migrated_date DATETIME, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS launch_events (pid INTEGER, bundle_id TEXT, containing_bundle_id, event_source INTEGER, is_extension INTEGER, launch_end_time DATETIME, launch_start_time DATETIME, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS app_metrics_events (pid INTEGER, bundle_id TEXT, event_type INTEGER, event_subtype INTEGER, metrics_type INTEGER, has_been_posted INTEGER DEFAULT 0, payload JSON, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS current_apps (pid INTEGER, app_platform INTEGER, bundle_id TEXT, bundle_version TEXT, cohort TEXT, device_vendor_id TEXT, deletion_date DATETIME, event_type INTEGER, evid INTEGER, is_arcade INTEGER, is_beta INTEGER, is_clip INTEGER, is_prior INTEGER, is_system_app INTEGER, item_id INTEGER, item_name TEXT, short_version TEXT, storefront INTEGER, timestamp DATETIME DEFAULT (timestamp()), vendor_name TEXT, PRIMARY KEY (pid));",
      1,
      0LL);
    sub_1002E981C( (uint64_t)v2,  @"CREATE TABLE IF NOT EXISTS app_usage_session_reporter_keys (pid INTEGER, bundle_id TEXT, session_reporter_key TEXT, last_refresh DATETIME, timestamp DATETIME DEFAULT (timestamp()), PRIMARY KEY (pid));",
      1,
      0LL);
  }
}

id sub_1002B7554(uint64_t a1, char a2, void *a3, void *a4, void *a5, void *a6)
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = objc_opt_self(a1);
  uint64_t v14 = ASDLogHandleForCategory(3LL);
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    id v45 = v12;
    uint64_t v46 = (void *)objc_opt_class(v13, v16);
    id v47 = v46;
    objc_opt_self(v13);
    uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v49 = v48;
    if ((a2 & 0x20) != 0) {
      [v48 addObject:@"BiomeTx"];
    }
    uint64_t v17 = v11;
    if ((a2 & 8) != 0) {
      [v49 addObject:@"Biome"];
    }
    id v50 = v10;
    uint64_t v18 = a2 & 0x20;
    if ((a2 & 0x10) != 0) {
      [v49 addObject:@"BiomeClip"];
    }
    id v51 = [v49 copy];

    __int16 v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v51, "componentsJoinedByString:", @", "));
    *(_DWORD *)__int128 buf = 138543618;
    id v182 = v46;
    __int16 v183 = 2114;
    id v184 = v52;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "[%{public}@] Looking for launch events for streams: [%{public}@]",  buf,  0x16u);

    id v10 = v50;
    id v12 = v45;
  }

  else
  {
    uint64_t v17 = v11;
    uint64_t v18 = a2 & 0x20;
  }

  double v145 = v12;
  if (v18)
  {
    objc_opt_self(&OBJC_CLASS___LaunchCoordinator);
    id v19 = +[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array");
    uint64_t v20 = v17;
  }

  else if ((a2 & 0x18) != 0)
  {
    uint64_t v20 = v17;
    id v21 = v17;
    id v22 = v12;
    id v23 = v10;
    uint64_t v24 = objc_opt_self(&OBJC_CLASS___LaunchCoordinator);
    id v25 = [[BMPublisherOptions alloc] initWithStartDate:v23 endDate:v21 maxEvents:9999 lastN:0 reversed:0];

    id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v19 = 0LL;
    if ((a2 & 8) != 0)
    {
      uint64_t v27 = v26;
      uint64_t v28 = BiomeLibrary();
      int v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v29 App]);
      __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 InFocus]);

      uint64_t v138 = v31;
      id v32 = (id)objc_claimAutoreleasedReturnValue([v31 publisherWithOptions:v25]);
      id v147 = v21;
      id v33 = v21;
      id v146 = v22;
      id v139 = v27;
      id v148 = v27;
      uint64_t v34 = objc_opt_self(v24);
      __int16 v35 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      v167[0] = _NSConcreteStackBlock;
      v167[1] = 3221225472LL;
      v167[2] = sub_1002B82CC;
      v167[3] = &unk_1003F1088;
      uint64_t v36 = dispatch_semaphore_create(0LL);
      id v168 = v36;
      v164[0] = _NSConcreteStackBlock;
      v164[1] = 3221225472LL;
      v164[2] = sub_1002B82D4;
      v164[3] = &unk_1003F10B0;
      id v37 = v33;
      id v165 = v37;
      id v38 = v35;
      v166 = v38;
      id v140 = v32;
      id v39 = [v32 sinkWithCompletion:v167 receiveInput:v164];
      dispatch_time_t v40 = dispatch_time(0LL, 60000000000LL);
      uint64_t v137 = v36;
      uint64_t v136 = v38;
      if (dispatch_semaphore_wait(v36, v40))
      {
        uint64_t v41 = ASDErrorWithTitleAndMessage(ASDErrorDomain, 515LL, @"Biome lookup timed out", 0LL);
        id v42 = (id)objc_claimAutoreleasedReturnValue(v41);
        id v43 = 0LL;
      }

      else
      {
        uint64_t v152 = v34;
        id v130 = v37;
        uint64_t v131 = v20;
        id v132 = v10;
        id v149 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
        uint64_t v151 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
        __int128 v160 = 0u;
        __int128 v161 = 0u;
        __int128 v162 = 0u;
        __int128 v163 = 0u;
        unsigned int v53 = v38;
        id v54 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v53,  "countByEnumeratingWithState:objects:count:",  &v160,  buf,  16LL);
        id v153 = v22;
        id v154 = v25;
        if (v54)
        {
          id v55 = v54;
          uint64_t v56 = *(void *)v161;
          do
          {
            id v57 = 0LL;
            do
            {
              if (*(void *)v161 != v56) {
                objc_enumerationMutation(v53);
              }
              id v58 = *(void **)(*((void *)&v160 + 1) + 8LL * (void)v57);
              id v59 = (void *)objc_claimAutoreleasedReturnValue([v58 eventBody]);
              uint64_t v61 = objc_opt_class(&OBJC_CLASS___BMAppInFocus, v60);
              id v62 = v59;
              if ((objc_opt_isKindOfClass(v62, v61) & 1) != 0) {
                id v63 = v62;
              }
              else {
                id v63 = 0LL;
              }

              if (v63)
              {
                uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v58 eventBody]);
                uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue([v64 bundleID]);
                if (v65)
                {
                  if ([v64 starting])
                  {
                    uint64_t v66 = objc_alloc_init(&OBJC_CLASS___AppLaunchEvent);
                    uint64_t v68 = (uint64_t)v66;
                    if (v66)
                    {
                      objc_setProperty_nonatomic_copy(v66, v67, v65, 40LL);
                      *(_BYTE *)(v68 + _Block_object_dispose(va, 8) = [v64 type] == 2;
                      __int128 v69 = (void *)objc_claimAutoreleasedReturnValue([v64 absoluteTimestamp]);
                      objc_setProperty_nonatomic_copy((id)v68, v70, v69, 24LL);
                    }

                    else
                    {
                      [v64 type];
                      __int128 v69 = (void *)objc_claimAutoreleasedReturnValue([v64 absoluteTimestamp]);
                    }

                    __int128 v71 = (void *)objc_claimAutoreleasedReturnValue([v64 absoluteTimestamp]);
                    id v73 = v71;
                    if (v68)
                    {
                      objc_setProperty_nonatomic_copy((id)v68, v72, v71, 16LL);

                      *(void *)(v68 + 152) = 1LL;
                      *(_DWORD *)(v68 + 12) = 4;
                    }

                    else
                    {
                    }

                    id v74 = (void *)objc_claimAutoreleasedReturnValue([v64 bundleID]);
                    [v151 setObject:v68 forKeyedSubscript:v74];

                    double v76 = (void *)objc_claimAutoreleasedReturnValue([v64 launchReason]);
                    if (v68) {
                      objc_setProperty_nonatomic_copy((id)v68, v75, v76, 32LL);
                    }

                    id v77 = (void *)objc_claimAutoreleasedReturnValue([v148 objectForKeyedSubscript:v65]);
                    if (v77) {
                      objc_opt_self(v152);
                    }
                    [v149 addObject:v68];
                  }

                  else
                  {
                    uint64_t v68 = objc_claimAutoreleasedReturnValue([v151 objectForKeyedSubscript:v65]);
                    if (v68) {
                      goto LABEL_42;
                    }
                    char v91 = (void *)objc_claimAutoreleasedReturnValue([v146 objectForKeyedSubscript:v65]);

                    if (!v91) {
                      goto LABEL_51;
                    }
                    uint64_t v92 = objc_claimAutoreleasedReturnValue([v146 objectForKeyedSubscript:v65]);
                    uint64_t v68 = v92;
                    if (v92) {
                      *(void *)(v92 + 152) = 1LL;
                    }
                    uint64_t v93 = ASDLogHandleForCategory(3LL);
                    uint64_t v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
                    if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                    {
                      id v96 = (void *)objc_opt_class(v152, v95);
                      *(_DWORD *)uint64_t v175 = 138543618;
                      uint64_t v176 = (uint64_t)v96;
                      __int16 v177 = 2114;
                      uint64_t v178 = v68;
                      id v97 = v96;
                      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] Ending active event: %{public}@",  v175,  0x16u);

                      id v25 = v154;
                    }

                    [v149 addObject:v68];
                    if (v68)
                    {
LABEL_42:
                      id v81 = *(id *)(v68 + 24);
                      *(_BYTE *)(v68 + 9) = 1;
                      char v82 = (void *)objc_claimAutoreleasedReturnValue([v64 absoluteTimestamp]);
                      objc_setProperty_nonatomic_copy((id)v68, v83, v82, 16LL);

                      id v84 = *(id *)(v68 + 16);
                      [v84 timeIntervalSinceReferenceDate];
                      double v86 = v85;
                      [v81 timeIntervalSinceReferenceDate];
                      *(void *)(v68 + 144) = (int)(v86 - v87);

                      uint64_t v88 = ASDLogHandleForCategory(3LL);
                      id v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
                      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEBUG))
                      {
                        id v100 = (void *)objc_opt_class(v152, v90);
                        id contexta = v100;
                        uint64_t v101 = *(void *)(v68 + 144);
                        *(_DWORD *)uint64_t v175 = 138543874;
                        uint64_t v176 = (uint64_t)v100;
                        id v22 = v153;
                        __int16 v177 = 2114;
                        uint64_t v178 = v68;
                        __int16 v179 = 2048;
                        v180[0] = v101;
                        _os_log_debug_impl( (void *)&_mh_execute_header,  v89,  OS_LOG_TYPE_DEBUG,  "[%{public}@] Ending event: %{public}@ with duration: %ld",  v175,  0x20u);
                      }

                      id v25 = v154;
                    }

                    else
                    {
LABEL_51:
                      uint64_t v98 = ASDLogHandleForCategory(3LL);
                      uint64_t v68 = objc_claimAutoreleasedReturnValue(v98);
                      if (os_log_type_enabled((os_log_t)v68, OS_LOG_TYPE_ERROR))
                      {
                        id v102 = (void *)objc_opt_class(v152, v99);
                        id v135 = v102;
                        contextb = (void *)objc_claimAutoreleasedReturnValue([v64 bundleID]);
                        unsigned int v133 = [v64 starting];
                        id v134 = (void *)objc_claimAutoreleasedReturnValue([v64 absoluteTimestamp]);
                        id v103 = sub_1001E83D8(v134);
                        id v104 = (void *)objc_claimAutoreleasedReturnValue(v103);
                        *(_DWORD *)uint64_t v175 = 138544130;
                        uint64_t v176 = (uint64_t)v102;
                        id v25 = v154;
                        __int16 v177 = 2114;
                        uint64_t v178 = (uint64_t)contextb;
                        __int16 v179 = 1024;
                        LODWORD(v180[0]) = v133;
                        WORD2(v180[0]) = 2114;
                        *(void *)((char *)v180 + 6) = v104;
                        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v68,  OS_LOG_TYPE_ERROR,  "[%{public}@] Unable to find starting event for bundleID: %{public}@ starting: %d startDate: %{public}@",  v175,  0x26u);
                      }
                    }
                  }
                }

                else
                {
                  uint64_t v78 = ASDLogHandleForCategory(3LL);
                  uint64_t v68 = objc_claimAutoreleasedReturnValue(v78);
                  if (os_log_type_enabled((os_log_t)v68, OS_LOG_TYPE_INFO))
                  {
                    uint64_t v80 = objc_opt_class(v152, v79);
                    *(_DWORD *)uint64_t v175 = 138543618;
                    uint64_t v176 = v80;
                    __int16 v177 = 2114;
                    uint64_t v178 = (uint64_t)v64;
                    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v68,  OS_LOG_TYPE_INFO,  "[%{public}@] Ignoring event with no bundle ID: %{public}@",  v175,  0x16u);
                  }
                }
              }

              id v57 = (char *)v57 + 1;
            }

            while (v55 != v57);
            id v105 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v53,  "countByEnumeratingWithState:objects:count:",  &v160,  buf,  16LL);
            id v55 = v105;
          }

          while (v105);
        }

        context = objc_autoreleasePoolPush();
        __int128 v156 = 0u;
        __int128 v157 = 0u;
        __int128 v158 = 0u;
        __int128 v159 = 0u;
        id v43 = v149;
        id v106 = [v43 countByEnumeratingWithState:&v156 objects:v175 count:16];
        id v21 = v147;
        if (v106)
        {
          id v107 = v106;
          uint64_t v108 = *(void *)v157;
          id v150 = v43;
          do
          {
            for (unint64_t i = 0LL; i != v107; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v157 != v108) {
                objc_enumerationMutation(v43);
              }
              uint64_t v110 = *(void *)(*((void *)&v156 + 1) + 8LL * (void)i);
              if (v110 && *(_BYTE *)(v110 + 8))
              {
                __int128 v111 = objc_alloc(&OBJC_CLASS___LSApplicationExtensionRecord);
                id v112 = *(id *)(v110 + 40);
                id v155 = 0LL;
                unsigned int v113 = -[LSApplicationExtensionRecord initWithBundleIdentifier:error:]( v111,  "initWithBundleIdentifier:error:",  v112,  &v155);
                id v114 = v155;

                if (v113)
                {
                  unsigned int v115 = (void *)objc_claimAutoreleasedReturnValue( -[LSApplicationExtensionRecord containingBundleRecord]( v113,  "containingBundleRecord"));
                  id v116 = (void *)objc_claimAutoreleasedReturnValue([v115 bundleIdentifier]);

                  if (v116)
                  {
                    id v117 = (void *)objc_claimAutoreleasedReturnValue( -[LSApplicationExtensionRecord containingBundleRecord]( v113,  "containingBundleRecord"));
                    id v118 = (void *)objc_claimAutoreleasedReturnValue([v117 bundleIdentifier]);
                    objc_setProperty_nonatomic_copy((id)v110, v119, v118, 128LL);

                    uint64_t v120 = ASDLogHandleForCategory(3LL);
                    id v121 = (os_log_s *)objc_claimAutoreleasedReturnValue(v120);
                    if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
                    {
                      double v123 = (void *)objc_opt_class(v152, v122);
                      id v124 = v123;
                      id v125 = *(id *)(v110 + 40);
                      id v126 = *(id *)(v110 + 128);
                      *(_DWORD *)id v169 = 138543874;
                      id v170 = v123;
                      __int16 v171 = 2114;
                      id v172 = v125;
                      __int16 v173 = 2114;
                      id v174 = v126;
                      _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_INFO,  "[%{public}@] [%{public}@] Updated launch extension containingBundleID to: %{public}@",  v169,  0x20u);

                      id v21 = v147;
                      id v43 = v150;
                    }
                  }
                }

                id v22 = v153;
                id v25 = v154;
              }
            }

            id v107 = [v43 countByEnumeratingWithState:&v156 objects:v175 count:16];
          }

          while (v107);
        }

        objc_autoreleasePoolPop(context);
        id v42 = 0LL;
        uint64_t v20 = v131;
        id v10 = v132;
        id v37 = v130;
      }

      id v127 = v42;
      __int16 v128 = v127;
      if (a6 && v127)
      {
        id v19 = 0LL;
        *a6 = v127;
      }

      else
      {
        id v19 = v43;
      }

      id v26 = v139;
    }
  }

  else
  {
    uint64_t v20 = v17;
    if (a6)
    {
      uint64_t v44 = ASDErrorWithTitleAndMessage(ASDErrorDomain, 507LL, @"Invalid stream request", 0LL);
      id v19 = 0LL;
      *a6 = (id)objc_claimAutoreleasedReturnValue(v44);
    }

    else
    {
      id v19 = 0LL;
    }
  }

  return v19;
}

uint64_t sub_1002B824C(uint64_t a1)
{
  id v1 = sub_1002F8D10((uint64_t)&OBJC_CLASS___AppDefaultsManager, @"DefaultLaunchStreams");
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);

  if (!v2) {
    return 8LL;
  }
  id v3 = sub_1002F8D10((uint64_t)&OBJC_CLASS___AppDefaultsManager, @"DefaultLaunchStreams");
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = [v4 integerValue];

  return (uint64_t)v5;
}

uint64_t sub_1002B82CC(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1002B82D4(uint64_t a1, void *a2)
{
  id v6 = a2;
  [v6 timestamp];
  double v4 = v3;
  [*(id *)(a1 + 32) timeIntervalSinceReferenceDate];
  if (v4 < v5) {
    [*(id *)(a1 + 40) addObject:v6];
  }
}

NSDictionary *sub_1002B8330(NSDictionary *a1, void *a2)
{
  double v3 = a2;
  if (a1)
  {
    double v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v20 = 0u;
    double v5 = a1;
    id v6 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v17,  v21,  16LL);
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v18;
      do
      {
        for (unint64_t i = 0LL; i != v7; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v18 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)i);
          uint64_t v11 = v3[2](v3, v10);
          id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
          if (v12)
          {
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "objectForKeyedSubscript:", v12, (void)v17));
            uint64_t v14 = v13;
            if (v13)
            {
              [v13 addObject:v10];
            }

            else
            {
              id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](&OBJC_CLASS___NSMutableArray, "arrayWithObject:", v10));
              [v4 setObject:v15 forKeyedSubscript:v12];
            }
          }
        }

        id v7 = -[NSDictionary countByEnumeratingWithState:objects:count:]( v5,  "countByEnumeratingWithState:objects:count:",  &v17,  v21,  16LL);
      }

      while (v7);
    }

    a1 = -[NSDictionary initWithDictionary:copyItems:]( objc_alloc(&OBJC_CLASS___NSDictionary),  "initWithDictionary:copyItems:",  v4,  1LL);
  }

  return a1;
}

id sub_1002B84E4(void *a1, void *a2)
{
  id v3 = a2;
  double v4 = v3;
  if (a1)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1002B858C;
    v7[3] = &unk_1003F10D8;
    id v8 = v3;
    id v5 = [a1 indexOfObjectPassingTest:v7];
    if (v5 == (id)0x7FFFFFFFFFFFFFFFLL) {
      a1 = 0LL;
    }
    else {
      a1 = (void *)objc_claimAutoreleasedReturnValue([a1 objectAtIndexedSubscript:v5]);
    }
  }

  return a1;
}

uint64_t sub_1002B858C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1002B8598(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v4 = a1;
    id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v14;
      while (2)
      {
        id v8 = 0LL;
        do
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          uint64_t v9 = v3[2](v3, *(void *)(*((void *)&v13 + 1) + 8LL * (void)v8));
          uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
          if (v10)
          {
            uint64_t v11 = (void *)v10;
            goto LABEL_12;
          }

          id v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }

    uint64_t v11 = 0LL;
LABEL_12:
  }

  else
  {
    uint64_t v11 = 0LL;
  }

  return v11;
}

id sub_1002B86C0(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v6 = _NSConcreteStackBlock;
    uint64_t v7 = 3221225472LL;
    id v8 = sub_1002B878C;
    uint64_t v9 = &unk_1003F1100;
    id v10 = (id)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [a1 count]));
    id v11 = v3;
    id v4 = v10;
    [a1 enumerateObjectsUsingBlock:&v6];
    a1 = objc_msgSend(v4, "copy", v6, v7, v8, v9);
  }

  return a1;
}

void sub_1002B878C(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    id v4 = v3;
    [*(id *)(a1 + 32) addObject:v3];
    id v3 = v4;
  }
}

id sub_1002B87DC(id a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v10 = 0LL;
    id v11 = &v10;
    uint64_t v12 = 0x3032000000LL;
    __int128 v13 = sub_1002B88D8;
    __int128 v14 = sub_1002B88E8;
    id v15 = 0LL;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1002B88F0;
    v7[3] = &unk_1003F1128;
    id v8 = v3;
    uint64_t v9 = &v10;
    void v7[4] = a1;
    [a1 enumerateObjectsUsingBlock:v7];
    if (v11[5]) {
      id v5 = (void *)v11[5];
    }
    else {
      id v5 = a1;
    }
    a1 = [v5 copy];

    _Block_object_dispose(&v10, 8);
  }

  return a1;
}

void sub_1002B88C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1002B88D8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002B88E8(uint64_t a1)
{
}

void sub_1002B88F0(uint64_t a1, void *a2, uint64_t a3)
{
  id v11 = a2;
  int v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  id v6 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (v5)
  {
    if (v6) {
      [v6 addObject:v11];
    }
  }

  else if (!v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subarrayWithRange:", 0, a3));
    id v8 = [v7 mutableCopy];
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;
  }
}

NSMutableArray *sub_1002B8990(void *a1, unint64_t a2)
{
  if (a1)
  {
    id v4 = (char *)[a1 count];
    int v5 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    if (v4)
    {
      uint64_t v6 = 0LL;
      do
      {
        else {
          int64_t v7 = (int64_t)v4;
        }
        id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "subarrayWithRange:", v6, v7));
        v4 -= v7;
        v6 += v7;
        -[NSMutableArray addObject:](v5, "addObject:", v8);
      }

      while (v4);
    }
  }

  else
  {
    int v5 = 0LL;
  }

  return v5;
}

void sub_1002B8DA4(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v23;
    *(void *)&__int128 v6 = 138412546LL;
    __int128 v20 = v6;
    do
    {
      for (unint64_t i = 0LL; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "adamId", v20));
        if (v11)
        {
          -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v10, v11);
        }

        else
        {
          uint64_t v12 = ASDLogHandleForCategory(14LL);
          __int128 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            id v15 = (void *)objc_opt_class(*(void *)(a1 + 32), v14);
            id v16 = v15;
            __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v10 appAdamId]);
            *(_DWORD *)__int128 buf = v20;
            uint64_t v27 = v15;
            __int16 v28 = 2114;
            int v29 = v17;
            _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[%@]: Nil IAP adamId, app adamId: %{public}@",  buf,  0x16u);
          }
        }
      }

      id v7 = [v4 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }

    while (v7);
  }

  id v18 = [[ASDIAPInfoResponse alloc] initWithIAPs:v3];
  sub_1001BA9FC(*(void **)(a1 + 32), v18);
  uint64_t v19 = *(void *)(a1 + 32);
  if (v19) {
    *(_BYTE *)(v19 + 24) = 1;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1002B8FD4(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v4 = v2;
  id v5 = [v4 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v5)
  {
    id v7 = v5;
    uint64_t v8 = *(void *)v23;
    *(void *)&__int128 v6 = 138412546LL;
    __int128 v20 = v6;
    do
    {
      for (unint64_t i = 0LL; i != v7; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "adamId", v20));
        if (v11)
        {
          -[NSMutableDictionary setObject:forKey:](v3, "setObject:forKey:", v10, v11);
        }

        else
        {
          uint64_t v12 = ASDLogHandleForCategory(14LL);
          __int128 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            id v15 = (void *)objc_opt_class(*(void *)(a1 + 32), v14);
            id v16 = v15;
            __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v10 appAdamId]);
            *(_DWORD *)__int128 buf = v20;
            uint64_t v27 = v15;
            __int16 v28 = 2114;
            int v29 = v17;
            _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[%@]: Nil IAP adamId, app adamId: %{public}@",  buf,  0x16u);
          }
        }
      }

      id v7 = [v4 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }

    while (v7);
  }

  id v18 = [[ASDIAPInfoResponse alloc] initWithIAPs:v3];
  sub_1001BA9FC(*(void **)(a1 + 32), v18);
  uint64_t v19 = *(void *)(a1 + 32);
  if (v19) {
    *(_BYTE *)(v19 + 24) = 1;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

BOOL sub_1002B935C(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (1)
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      char v4 = 0;
      unsigned int v5 = 0;
      unint64_t v6 = 0LL;
      while (1)
      {
        unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
          break;
        }
        char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
        *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
        v6 |= (unint64_t)(v8 & 0x7F) << v4;
        if ((v8 & 0x80) == 0) {
          goto LABEL_11;
        }
        v4 += 7;
        if (v5++ >= 9)
        {
          unint64_t v6 = 0LL;
          int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_13;
        }
      }

      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
      int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
        unint64_t v6 = 0LL;
      }
LABEL_13:
      if (v10 || (v6 & 7) == 4) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
      if ((v6 >> 3) == 1)
      {
        char v12 = 0;
        unsigned int v13 = 0;
        uint64_t v14 = 0LL;
        *(_BYTE *)(a1 + 16) |= 2u;
        while (1)
        {
          unint64_t v15 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1LL || v15 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            id v18 = &OBJC_IVAR___TFDisplay__widthPixels;
            goto LABEL_37;
          }

          char v16 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0) {
            break;
          }
          v12 += 7;
          BOOL v17 = v13++ > 8;
          if (v17)
          {
            LODWORD(v14) = 0;
            id v18 = &OBJC_IVAR___TFDisplay__widthPixels;
            goto LABEL_40;
          }
        }

        id v18 = &OBJC_IVAR___TFDisplay__widthPixels;
LABEL_38:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v14) = 0;
        }
LABEL_40:
        *(_DWORD *)(a1 + *v1_Block_object_dispose(va, 8) = v14;
        goto LABEL_41;
      }

      if ((PBReaderSkipValueWithTag(a2) & 1) == 0) {
        return 0LL;
      }
LABEL_41:
      if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
      }
    }

    char v19 = 0;
    unsigned int v20 = 0;
    uint64_t v14 = 0LL;
    *(_BYTE *)(a1 + 16) |= 1u;
    while (1)
    {
      unint64_t v21 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v21 == -1LL || v21 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v22 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 1;
      v14 |= (unint64_t)(v22 & 0x7F) << v19;
      if ((v22 & 0x80) == 0)
      {
        id v18 = &OBJC_IVAR___TFDisplay__heightPixels;
        goto LABEL_38;
      }

      v19 += 7;
      BOOL v17 = v20++ > 8;
      if (v17)
      {
        LODWORD(v14) = 0;
        id v18 = &OBJC_IVAR___TFDisplay__heightPixels;
        goto LABEL_40;
      }
    }

    id v18 = &OBJC_IVAR___TFDisplay__heightPixels;
LABEL_37:
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
    goto LABEL_38;
  }

  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

id sub_1002B9840(uint64_t a1)
{
  if (qword_100462570 != -1) {
    dispatch_once(&qword_100462570, &stru_1003F1170);
  }
  return (id)qword_100462578;
}

void sub_1002B9884(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AssetSession);
  id v2 = (void *)qword_100462578;
  qword_100462578 = (uint64_t)v1;
}

id sub_1002B9960(id result)
{
  if (result)
  {
    id v1 = result;
    id v2 = (const char *)kNSURLSessionLaunchOnDemandNotificationName;
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(17LL, 0LL);
    char v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    xpc_set_event_stream_handler(v2, v4, &stru_1003F1190);

    uint64_t v5 = ASDLogHandleForCategory(10LL);
    unint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Obliterating stale background sessions",  buf,  2u);
    }

    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1002B9B24;
    v7[3] = &unk_1003F11E0;
    void v7[4] = v1;
    return +[NSURLSession _getActiveSessionIdentifiersWithCompletionHandler:]( &OBJC_CLASS___NSURLSession,  "_getActiveSessionIdentifiersWithCompletionHandler:",  v7);
  }

  return result;
}

void sub_1002B9A50(id a1, OS_xpc_object *a2)
{
  id v2 = a2;
  uint64_t v3 = ASDLogHandleForCategory(10LL);
  char v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    uint64_t v6 = kNSURLSessionLaunchOnDemandNotificationName;
    __int16 v7 = 2080;
    char v8 = xpc_copy_description(v2);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Handling %s wake: %s", (uint8_t *)&v5, 0x16u);
  }
}

void sub_1002B9B24(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(dispatch_queue_s **)(v4 + 16);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1002B9BA4;
  v7[3] = &unk_1003E9DC0;
  id v8 = v3;
  uint64_t v9 = v4;
  id v6 = v3;
  dispatch_async(v5, v7);
}

void sub_1002B9BA4(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2 && [v2 count])
  {
    uint64_t v3 = ASDLogHandleForCategory(10LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = [*(id *)(a1 + 32) count];
      *(_DWORD *)__int128 buf = 134217984;
      id v30 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Checking %llu background session identifier(s)",  buf,  0xCu);
    }

    id v6 = objc_opt_new(&OBJC_CLASS___NSMutableSet);
    __int16 v7 = *(void **)(*(void *)(a1 + 40) + 32LL);
    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_1002B9E74;
    v26[3] = &unk_1003F11B8;
    id v8 = v6;
    uint64_t v27 = v8;
    [v7 enumerateKeysAndObjectsUsingBlock:v26];
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    id v9 = *(id *)(a1 + 32);
    id v10 = [v9 countByEnumeratingWithState:&v22 objects:v28 count:16];
    if (v10)
    {
      id v12 = v10;
      uint64_t v13 = *(void *)v23;
      *(void *)&__int128 v11 = 138543362LL;
      __int128 v21 = v11;
      do
      {
        for (unint64_t i = 0LL; i != v12; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v23 != v13) {
            objc_enumerationMutation(v9);
          }
          unint64_t v15 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
          if (-[NSMutableSet containsObject:](v8, "containsObject:", v15, v21, (void)v22))
          {
            uint64_t v16 = ASDLogHandleForCategory(10LL);
            BOOL v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = v21;
              id v30 = v15;
              _os_log_debug_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "Skipping invalidation for active session: %{public}@",  buf,  0xCu);
            }
          }

          else
          {
            BOOL v17 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSURLSessionConfiguration backgroundSessionConfigurationWithIdentifier:]( &OBJC_CLASS___NSURLSessionConfiguration,  "backgroundSessionConfigurationWithIdentifier:",  v15));
            id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSURLSession sessionWithConfiguration:]( &OBJC_CLASS___NSURLSession,  "sessionWithConfiguration:",  v17));
            uint64_t v19 = ASDLogHandleForCategory(10LL);
            unsigned int v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = v21;
              id v30 = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Invaidating stale session: %{public}@",  buf,  0xCu);
            }

            [v18 invalidateAndCancel];
          }
        }

        id v12 = [v9 countByEnumeratingWithState:&v22 objects:v28 count:16];
      }

      while (v12);
    }
  }

void sub_1002B9E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    uint64_t v4 = *(void **)(a3 + 16);
  }
  else {
    uint64_t v4 = 0LL;
  }
  id v5 = v4;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 configuration]);
  id v8 = (id)objc_claimAutoreleasedReturnValue([v6 identifier]);

  __int16 v7 = v8;
  if (v8)
  {
    [*(id *)(a1 + 32) addObject:v8];
    __int16 v7 = v8;
  }
}

_TtC9appstored12AssetPromise *sub_1002B9EF0(_TtC9appstored12AssetPromise *a1, void *a2)
{
  uint64_t v4 = a2;
  if (!a1) {
    goto LABEL_24;
  }
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___AssetRequest, v3);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) == 0)
  {
    id v6 = objc_alloc_init(&OBJC_CLASS___AssetRequestProperties);
    goto LABEL_6;
  }

  if (v4)
  {
    id v6 = (AssetRequestProperties *)[v4[2] copy];
LABEL_6:
    __int16 v7 = v6;
    goto LABEL_7;
  }

  __int16 v7 = 0LL;
LABEL_7:
  id v8 = objc_alloc_init(&OBJC_CLASS___AssetTaskInfo);
  id v10 = v8;
  if (v8)
  {
    objc_setProperty_atomic(v8, v9, v4, 104LL);
    objc_setProperty_atomic(v10, v11, v7, 96LL);
  }

  if (!v7)
  {
    uint64_t v13 = 0LL;
LABEL_26:
    unint64_t v14 = 0LL;
    if (!v10) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }

  id v12 = objc_getProperty(v7, v9, 176LL, 1);
  uint64_t v13 = v12;
  if (!v12) {
    goto LABEL_26;
  }
  v32[0] = 0LL;
  v32[1] = 0LL;
  [v12 getUUIDBytes:v32];
  unint64_t v14 = v32[0];
  if (v10) {
LABEL_12:
  }
    v10->_signpostId = v14;
LABEL_13:
  uint64_t v16 = objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey);
  if (v7) {
    id Property = objc_getProperty(v7, v15, 128LL, 1);
  }
  else {
    id Property = 0LL;
  }
  id v18 = Property;
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 description]);
  __int128 v21 = -[LogKey initWithCategory:baseUUID:](v16, "initWithCategory:baseUUID:", v19, v13);
  if (v10) {
    objc_setProperty_atomic(v10, v20, v21, 56LL);
  }

  if (v7) {
    unint64_t expectedContentLength = v7->_expectedContentLength;
  }
  else {
    unint64_t expectedContentLength = 0LL;
  }
  __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSProgress progressWithTotalUnitCount:]( &OBJC_CLASS___NSProgress,  "progressWithTotalUnitCount:",  expectedContentLength));
  if (v10) {
    objc_setProperty_atomic(v10, v23, v24, 80LL);
  }

  __int128 v25 = objc_alloc(&OBJC_CLASS____TtC9appstored12AssetPromise);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_1002BA17C;
  void v28[3] = &unk_1003F1230;
  int v29 = v10;
  id v30 = v4;
  __int16 v31 = a1;
  id v26 = v10;
  a1 = -[AssetPromise initWithRequestID:promiseBlock:](v25, "initWithRequestID:promiseBlock:", v13, v28);
  if (v10) {
    objc_storeWeak(v26 + 11, a1);
  }

LABEL_24:
  return a1;
}

void sub_1002BA17C(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory(10LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  __int16 v7 = a1[4];
  if (v7)
  {
    os_signpost_id_t v8 = v7[16];
    if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
    {
      id v10 = objc_getProperty(v7, v9, 56LL, 1);
      SEL v11 = (void *)objc_claimAutoreleasedReturnValue([a1[5] URL]);
      *(_DWORD *)__int128 buf = 138543618;
      id v20 = v10;
      __int16 v21 = 2114;
      __int128 v22 = v11;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_BEGIN,  v8,  "Download",  " uuid=%{public, signpost.description:attribute}@  request=%{public, signpost.description:attribute}@ ",  buf,  0x16u);
    }
  }

  objc_initWeak((id *)buf, a1[6]);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_1002BA390;
  v16[3] = &unk_1003F1208;
  id v17 = a1[4];
  objc_copyWeak(&v18, (id *)buf);
  [v3 addErrorBlock:v16];
  id v12 = a1[6];
  uint64_t v13 = (dispatch_queue_s *)*((void *)v12 + 2);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1002BA554;
  v14[3] = &unk_1003E9DC0;
  void v14[4] = v12;
  id v15 = a1[4];
  dispatch_async(v13, v14);

  objc_destroyWeak(&v18);
  objc_destroyWeak((id *)buf);
}

void sub_1002BA36C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_1002BA390(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s **)objc_claimAutoreleasedReturnValue([v3 domain]);
  if (![v4 isEqualToString:NSCocoaErrorDomain])
  {
LABEL_9:

    goto LABEL_10;
  }

  id v5 = [v3 code];

  if (v5 == (id)3072)
  {
    uint64_t v6 = ASDLogHandleForCategory(10LL);
    __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v8, 56LL, 1);
      }
      id v10 = Property;
      *(_DWORD *)__int128 buf = 138412290;
      id v16 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "[%@] Request cancelled", buf, 0xCu);
    }

    id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v4 = WeakRetained;
    if (WeakRetained)
    {
      id v12 = WeakRetained[2];
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1002BA504;
      block[3] = &unk_1003E9880;
      id v14 = *(id *)(a1 + 32);
      dispatch_async(v12, block);
    }

    goto LABEL_9;
  }

void sub_1002BA504(uint64_t a1, const char *a2)
{
  id Property = *(id *)(a1 + 32);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 136LL, 1);
  }
  id v4 = Property;
  [v4 cancel];

  uint64_t v5 = *(void *)(a1 + 32);
  if (v5) {
    *(void *)(v5 + 16) = 3LL;
  }
}

void sub_1002BA554(uint64_t a1)
{
}

void sub_1002BA560(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_20;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (v3)
  {
    if (v3[2] == 3LL)
    {
      uint64_t v5 = ASDLogHandleForCategory(10LL);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        id v28 = objc_getProperty(v3, v7, 56LL, 1);
        *(_DWORD *)__int128 buf = 138412290;
        id v34 = v28;
        _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "[%@] Stopping early because request has been canceled",  buf,  0xCu);
      }

      sub_1002BD6C8(a1, v3);
      goto LABEL_20;
    }

    id Property = objc_getProperty(v3, v4, 96LL, 1);
    id v10 = Property;
    if (Property) {
      id Property = objc_getProperty(Property, v9, 64LL, 1);
    }
  }

  else
  {
    id v10 = 0LL;
    id Property = 0LL;
  }

  id v11 = Property;

  if (v11)
  {
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    void v31[2] = sub_1002BECFC;
    v31[3] = &unk_1003F1370;
    void v31[4] = a1;
    id v32 = v3;
    [v11 prepareWithCompletionHandler:v31];
  }

  else
  {
    uint64_t v12 = ASDErrorWithDescription(@"AssetErrorDomain", 3LL, @"Data consumer is missing");
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (v3) {
      objc_setProperty_atomic(v3, v13, v14, 40LL);
    }

    uint64_t v15 = ASDLogHandleForCategory(31LL);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    id v17 = v16;
    if (v3)
    {
      os_signpost_id_t v18 = v3[16];
      if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
      {
        id v20 = objc_getProperty(v3, v19, 56LL, 1);
        id v22 = objc_getProperty(v3, v21, 40LL, 1);
        id v23 = sub_100298F48(v22);
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        *(_DWORD *)__int128 buf = 138543618;
        id v34 = v20;
        __int16 v35 = 2114;
        uint64_t v36 = v24;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_EVENT,  v18,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  buf,  0x16u);
      }
    }

    uint64_t v25 = ASDLogHandleForCategory(10LL);
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      if (v3) {
        id v29 = objc_getProperty(v3, v27, 56LL, 1);
      }
      else {
        id v29 = 0LL;
      }
      id v30 = v29;
      *(_DWORD *)__int128 buf = 138412290;
      id v34 = v30;
      _os_log_error_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_ERROR,  "[%@] Data consumer is missing",  buf,  0xCu);
    }

    sub_1002BD6C8(a1, v3);
  }

LABEL_20:
}

void sub_1002BAC7C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if ([*(id *)(a1 + 32) state])
  {
    uint64_t v6 = ASDLogHandleForCategory(10LL);
    __int16 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id Property = *(id *)(a1 + 40);
      if (Property) {
        id Property = objc_getProperty(Property, v8, 56LL, 1);
      }
      id v10 = Property;
      id v11 = *(void **)(a1 + 32);
      int v40 = 138412546;
      id v41 = v10;
      __int16 v42 = 2114;
      id v43 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[%@] Data consumer for task: %{public}@ was stopped at consumer callback",  (uint8_t *)&v40,  0x16u);
    }

    goto LABEL_24;
  }

  if (v5)
  {
    uint64_t v12 = ASDLogHandleForCategory(31LL);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    id v14 = v13;
    uint64_t v15 = *(void **)(a1 + 40);
    if (v15)
    {
      os_signpost_id_t v16 = v15[16];
      if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
      {
        id v18 = objc_getProperty(v15, v17, 56LL, 1);
        id v19 = sub_100298F48(v5);
        id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        int v40 = 138543618;
        id v41 = v18;
        __int16 v42 = 2114;
        id v43 = v20;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_EVENT,  v16,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v40,  0x16u);
      }
    }

    uint64_t v21 = ASDLogHandleForCategory(10LL);
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      id v37 = *(id *)(a1 + 40);
      if (v37) {
        id v37 = objc_getProperty(v37, v23, 56LL, 1);
      }
      id v38 = v37;
      id v39 = *(void **)(a1 + 32);
      int v40 = 138412802;
      id v41 = v38;
      __int16 v42 = 2114;
      id v43 = v39;
      __int16 v44 = 2114;
      id v45 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "[%@] Data consumer for task: %{public}@ failed with error: %{public}@",  (uint8_t *)&v40,  0x20u);
    }

    uint64_t v25 = *(void **)(a1 + 40);
    if (v25)
    {
      objc_setProperty_atomic(v25, v24, v5, 40LL);
      uint64_t v26 = *(void *)(a1 + 40);
    }

    else
    {
      uint64_t v26 = 0LL;
    }

    +[Analytics postHashMismatchWithTaskInfo:](&OBJC_CLASS___Analytics, "postHashMismatchWithTaskInfo:", v26);
LABEL_23:
    [*(id *)(a1 + 32) cancel];
    goto LABEL_24;
  }

  if (a3)
  {
    uint64_t v27 = ASDLogHandleForCategory(31LL);
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    id v29 = v28;
    id v30 = *(void **)(a1 + 40);
    if (v30)
    {
      os_signpost_id_t v31 = v30[16];
      if (v31 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v28))
      {
        id v33 = objc_getProperty(v30, v32, 56LL, 1);
        int v40 = 138543362;
        id v41 = v33;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v29,  OS_SIGNPOST_EVENT,  v31,  "ConsumerComplete",  " uuid=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v40,  0xCu);
      }
    }

    uint64_t v34 = *(void *)(a1 + 40);
    if (v34) {
      *(void *)(v34 + 16) = 2LL;
    }
    goto LABEL_23;
  }

  __int16 v35 = (char *)[*(id *)(a1 + 32) countOfBytesReceived];
  uint64_t v36 = *(void *)(a1 + 40);
  if (v36) {
    *(void *)(v36 + 24) = &v35[*(void *)(v36 + 112)];
  }
LABEL_24:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1002BBC94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002BBD70;
  void v9[3] = &unk_1003F12A8;
  id v10 = v3;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v8 = v3;
  dispatch_async(v5, v9);
}

void sub_1002BBD70(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = ASDLogHandleForCategory(31LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    id v4 = v3;
    id v5 = *(void **)(a1 + 56);
    if (v5)
    {
      os_signpost_id_t v6 = v5[16];
      if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
      {
        id v8 = objc_getProperty(v5, v7, 56LL, 1);
        id v9 = sub_100298F48(*(id *)(a1 + 32));
        id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        *(_DWORD *)__int128 buf = 138543618;
        id v26 = v8;
        __int16 v27 = 2114;
        id v28 = v10;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  v6,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  buf,  0x16u);
      }
    }

    uint64_t v11 = ASDLogHandleForCategory(10LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 56);
      if (Property) {
        id Property = objc_getProperty(Property, v13, 56LL, 1);
      }
      id v18 = Property;
      id v19 = *(void **)(a1 + 64);
      uint64_t v20 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412802;
      id v26 = v18;
      __int16 v27 = 2114;
      id v28 = v19;
      __int16 v29 = 2114;
      uint64_t v30 = v20;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[%@] Data consumer for task: %{public}@ failed to reset with error: %{public}@",  buf,  0x20u);
    }

    id v15 = *(void **)(a1 + 56);
    if (v15) {
      objc_setProperty_atomic(v15, v14, *(id *)(a1 + 32), 40LL);
    }
    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  else
  {
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_1002BBFC8;
    v21[3] = &unk_1003F1280;
    os_signpost_id_t v16 = *(void **)(a1 + 40);
    void v21[4] = *(void *)(a1 + 48);
    id v22 = *(id *)(a1 + 56);
    id v23 = *(id *)(a1 + 64);
    id v24 = *(id *)(a1 + 72);
    [v16 prepareWithCompletionHandler:v21];
  }

void sub_1002BBFC8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  os_signpost_id_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002BC090;
  block[3] = &unk_1003EC6F0;
  uint64_t v14 = a2;
  id v10 = v6;
  id v11 = v5;
  id v12 = *(id *)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v8 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_1002BC090(uint64_t a1)
{
  if (*(void *)(a1 + 64))
  {
    uint64_t v2 = ASDLogHandleForCategory(31LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    id v4 = v3;
    id v5 = *(void **)(a1 + 32);
    if (v5)
    {
      os_signpost_id_t v6 = v5[16];
      if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
      {
        id v8 = objc_getProperty(v5, v7, 56LL, 1);
        id v9 = sub_100298F48(*(id *)(a1 + 40));
        id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        int v41 = 138543618;
        id v42 = v8;
        __int16 v43 = 2114;
        __int16 v44 = v10;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  v6,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v41,  0x16u);
      }
    }

    uint64_t v11 = ASDLogHandleForCategory(10LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v13, 56LL, 1);
      }
      id v34 = Property;
      __int16 v35 = *(void **)(a1 + 48);
      uint64_t v36 = *(void *)(a1 + 64);
      int v41 = 138412802;
      id v42 = v34;
      __int16 v43 = 2114;
      __int16 v44 = v35;
      __int16 v45 = 2048;
      uint64_t v46 = v36;
      _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[%@] Data consumer for task: %{public}@ failed to prepare with unexpected resumption offset: %llu",  (uint8_t *)&v41,  0x20u);
    }

    uint64_t v14 = ASDErrorWithDescription(@"AssetErrorDomain", 8LL, @"Expected zero resumption offset");
    os_signpost_id_t v16 = (void *)objc_claimAutoreleasedReturnValue(v14);
    id v17 = *(void **)(a1 + 32);
    if (v17) {
      objc_setProperty_atomic(v17, v15, v16, 40LL);
    }

    return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  if (*(void *)(a1 + 40))
  {
    uint64_t v18 = ASDLogHandleForCategory(31LL);
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    uint64_t v20 = v19;
    uint64_t v21 = *(void **)(a1 + 32);
    if (v21)
    {
      os_signpost_id_t v22 = v21[16];
      if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v19))
      {
        id v24 = objc_getProperty(v21, v23, 56LL, 1);
        id v25 = sub_100298F48(*(id *)(a1 + 40));
        id v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        int v41 = 138543618;
        id v42 = v24;
        __int16 v43 = 2114;
        __int16 v44 = v26;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_EVENT,  v22,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v41,  0x16u);
      }
    }

    uint64_t v27 = ASDLogHandleForCategory(10LL);
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      id v37 = *(id *)(a1 + 32);
      if (v37) {
        id v37 = objc_getProperty(v37, v29, 56LL, 1);
      }
      id v38 = v37;
      uint64_t v40 = *(void *)(a1 + 40);
      id v39 = *(void **)(a1 + 48);
      int v41 = 138412802;
      id v42 = v38;
      __int16 v43 = 2114;
      __int16 v44 = v39;
      __int16 v45 = 2114;
      uint64_t v46 = v40;
      _os_log_error_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_ERROR,  "[%@] Data consumer for task: %{public}@ failed to prepare with error: %{public}@",  (uint8_t *)&v41,  0x20u);
    }

    os_signpost_id_t v31 = *(void **)(a1 + 32);
    if (v31) {
      objc_setProperty_atomic(v31, v30, *(id *)(a1 + 40), 40LL);
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 56) + 16LL))(*(void *)(a1 + 56), 1LL);
}

void sub_1002BC434(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1002BC4F8;
  v7[3] = &unk_1003EA5C0;
  id v8 = v3;
  id v9 = v4;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  id v6 = v3;
  dispatch_async(v5, v7);
}

uint64_t sub_1002BC4F8(uint64_t a1, const char *a2)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v3 = ASDLogHandleForCategory(31LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = v4;
    id v6 = *(void **)(a1 + 40);
    if (v6)
    {
      os_signpost_id_t v7 = v6[16];
      if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
      {
        id v9 = objc_getProperty(v6, v8, 56LL, 1);
        id v10 = sub_100298F48(*(id *)(a1 + 32));
        id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        int v22 = 138543618;
        id v23 = v9;
        __int16 v24 = 2114;
        id v25 = v11;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_EVENT,  v7,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v22,  0x16u);
      }
    }

    uint64_t v12 = ASDLogHandleForCategory(10LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 40);
      if (Property) {
        id Property = objc_getProperty(Property, v14, 56LL, 1);
      }
      id v19 = Property;
      uint64_t v20 = *(void **)(a1 + 48);
      uint64_t v21 = *(void *)(a1 + 32);
      int v22 = 138412802;
      id v23 = v19;
      __int16 v24 = 2114;
      id v25 = v20;
      __int16 v26 = 2114;
      uint64_t v27 = v21;
      _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[%@] Data consumer for task: %{public}@ failed to reset with error: %{public}@",  (uint8_t *)&v22,  0x20u);
    }
  }

  else
  {
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15) {
      *(void *)(v15 + 16) = 1LL;
    }
  }

  os_signpost_id_t v16 = *(void **)(a1 + 40);
  if (v16) {
    objc_setProperty_atomic(v16, a2, *(id *)(a1 + 32), 40LL);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1002BD480(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    self = v5;
    if (v5)
    {
      id v7 = objc_getProperty(v5, v6, 72LL, 1);
      id v8 = v7;
      if (v7)
      {
        nw_activity_complete_with_reason(v7, a2);
        objc_setProperty_atomic(self, v9, 0LL, 72LL);
      }
    }

    else
    {
      id v8 = 0LL;
    }

    id v5 = self;
  }
}

void sub_1002BD500(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002BD5A0;
  block[3] = &unk_1003E97D0;
  id v10 = v3;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1002BD5A0(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = ASDLogHandleForCategory(10LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 40);
      if (Property) {
        id Property = objc_getProperty(Property, v4, 56LL, 1);
      }
      id v11 = Property;
      uint64_t v12 = *(void *)(a1 + 32);
      int v13 = 138412546;
      id v14 = v11;
      __int16 v15 = 2114;
      uint64_t v16 = v12;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "[%@] Failed to finish data consumer with error: %{public}@",  (uint8_t *)&v13,  0x16u);
    }

    id v6 = *(id *)(a1 + 40);
    if (v6) {
      id v6 = objc_getProperty(v6, v5, 40LL, 1);
    }
    id v7 = v6;

    if (!v7)
    {
      SEL v9 = *(void **)(a1 + 40);
      if (v9) {
        objc_setProperty_atomic(v9, v8, *(id *)(a1 + 32), 40LL);
      }
    }
  }

  sub_1002BD6C8(*(void *)(a1 + 48), *(void **)(a1 + 40));
}

void sub_1002BD6C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = ASDLogHandleForCategory(10LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    id v6 = v5;
    if (v3)
    {
      os_signpost_id_t v7 = *((void *)v3 + 16);
      if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
      {
        LOWORD(v41) = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v7,  "Download",  "",  (uint8_t *)&v41,  2u);
      }

      objc_setProperty_atomic(v3, v8, 0LL, 48LL);
    }

    else
    {
    }

    uint64_t v9 = ASDLogHandleForCategory(10LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      if (v3) {
        id Property = objc_getProperty(v3, v11, 56LL, 1);
      }
      else {
        id Property = 0LL;
      }
      id v13 = Property;
      int v41 = 138412290;
      id v42 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[%@] Finishing asset promise",  (uint8_t *)&v41,  0xCu);
    }

    if (v3) {
      id WeakRetained = objc_loadWeakRetained((id *)v3 + 11);
    }
    else {
      id WeakRetained = 0LL;
    }
    if ([WeakRetained isFinished])
    {
      if ([WeakRetained isCancelled])
      {
LABEL_44:
        sub_1001BABEC((uint64_t)&OBJC_CLASS___AssetTaskInfo, v3);

        goto LABEL_45;
      }

      uint64_t v15 = ASDLogHandleForCategory(10LL);
      uint64_t v16 = (AssetResult *)objc_claimAutoreleasedReturnValue(v15);
      if (!os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_FAULT))
      {
LABEL_43:

        goto LABEL_44;
      }

      if (v3) {
        id v18 = objc_getProperty(v3, v17, 56LL, 1);
      }
      else {
        id v18 = 0LL;
      }
      id v19 = v18;
      int v41 = 138412290;
      id v42 = v19;
      _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)v16,  OS_LOG_TYPE_FAULT,  "[%@] Request completed but promise had already finished",  (uint8_t *)&v41,  0xCu);
LABEL_42:

      goto LABEL_43;
    }

    uint64_t v20 = objc_alloc_init(&OBJC_CLASS___AssetResult);
    uint64_t v16 = v20;
    if (v3)
    {
      unint64_t v22 = *((void *)v3 + 3);
      if (!v20) {
        goto LABEL_22;
      }
    }

    else
    {
      unint64_t v22 = 0LL;
      if (!v20)
      {
LABEL_22:
        if (v3)
        {
          id v23 = objc_getProperty(v3, v21, 96LL, 1);
          id v25 = v23;
          if (v23) {
            id v23 = objc_getProperty(v23, v24, 64LL, 1);
          }
        }

        else
        {
          id v25 = 0LL;
          id v23 = 0LL;
        }

        id v27 = v23;
        if (v16) {
          objc_setProperty_atomic(v16, v26, v27, 24LL);
        }

        if (v3) {
          id v29 = objc_getProperty(v3, v28, 40LL, 1);
        }
        else {
          id v29 = 0LL;
        }
        id v31 = v29;
        if (v16) {
          objc_setProperty_atomic(v16, v30, v31, 32LL);
        }

        if (v3)
        {
          BOOL v33 = *((_BYTE *)v3 + 9) & 1;
          if (!v16)
          {
LABEL_34:
            if (v3) {
              id v34 = objc_getProperty(v3, v32, 64LL, 1);
            }
            else {
              id v34 = 0LL;
            }
            id v36 = v34;
            if (v16) {
              objc_setProperty_atomic(v16, v35, v36, 40LL);
            }

            [WeakRetained finishWithResult:v16];
            uint64_t v37 = ASDLogHandleForCategory(10LL);
            id v19 = (id)objc_claimAutoreleasedReturnValue(v37);
            if (os_log_type_enabled((os_log_t)v19, OS_LOG_TYPE_DEFAULT))
            {
              if (v3) {
                id v39 = objc_getProperty(v3, v38, 56LL, 1);
              }
              else {
                id v39 = 0LL;
              }
              id v40 = v39;
              int v41 = 138412290;
              id v42 = v40;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v19,  OS_LOG_TYPE_DEFAULT,  "[%@] Finished asset promise",  (uint8_t *)&v41,  0xCu);
            }

            goto LABEL_42;
          }
        }

        else
        {
          BOOL v33 = 0;
          if (!v16) {
            goto LABEL_34;
          }
        }

        v16->_ignoredAssetCache = v33;
        goto LABEL_34;
      }
    }

    v20->_bytesReceived = v22;
    goto LABEL_22;
  }

void sub_1002BDAA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002BDB44;
  block[3] = &unk_1003E97D0;
  id v10 = v3;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1002BDB44(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = ASDLogHandleForCategory(10LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 40);
      if (Property) {
        id Property = objc_getProperty(Property, v4, 56LL, 1);
      }
      id v29 = Property;
      uint64_t v30 = *(void *)(a1 + 32);
      *(_DWORD *)id v31 = 138412546;
      *(void *)&void v31[4] = v29;
      *(_WORD *)&v31[12] = 2114;
      *(void *)&v31[14] = v30;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "[%@] Failed to suspend data consumer with error: %{public}@",  v31,  0x16u);
    }

    id v6 = *(void **)(a1 + 40);
    if (v6)
    {
      objc_setProperty_atomic(v6, v5, *(id *)(a1 + 32), 40LL);
      uint64_t v7 = *(void **)(a1 + 40);
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    sub_1002BD6C8(*(void *)(a1 + 48), v7);
    return;
  }

  id v8 = *(void **)(a1 + 40);
  if (!v8)
  {
    uint64_t v9 = *(void *)(a1 + 48);
    goto LABEL_24;
  }

  uint64_t v9 = *(void *)(a1 + 48);
  if (v8[2] != 1LL)
  {
LABEL_24:
    sub_1002BD6C8(v9, *(void **)(a1 + 40));
    return;
  }

  id v10 = v8;
  if (v9)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v9 + 16));
    uint64_t v11 = ASDLogHandleForCategory(31LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    id v13 = v12;
    os_signpost_id_t v14 = v10[16];
    if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v12))
    {
      id v16 = objc_getProperty(v10, v15, 56LL, 1);
      *(_DWORD *)id v31 = 138543362;
      *(void *)&void v31[4] = v16;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v13,  OS_SIGNPOST_EVENT,  v14,  "Retry",  " uuid=%{public, signpost.description:attribute}@ ",  v31,  0xCu);
    }

    uint64_t v17 = ASDLogHandleForCategory(10LL);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v20 = objc_getProperty(v10, v19, 56LL, 1);
      *(_DWORD *)id v31 = 138412290;
      *(void *)&void v31[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "[%@] Retrying request", v31, 0xCu);
    }

    void v8[2] = 0LL;
    objc_setProperty_atomic(v10, v21, 0LL, 40LL);
    objc_setProperty_atomic(v10, v22, 0LL, 48LL);
    id v24 = objc_getProperty(v10, v23, 96LL, 1);
    __int16 v26 = v24;
    if (v24) {
      id v24 = objc_getProperty(v24, v25, 64LL, 1);
    }
    id v27 = v24;

    *(void *)id v31 = _NSConcreteStackBlock;
    *(void *)&v31[8] = 3221225472LL;
    *(void *)&v31[16] = sub_1002BEB1C;
    id v32 = &unk_1003E9B18;
    uint64_t v33 = v9;
    id v34 = v10;
    [v27 resetWithCompletionHandler:v31];
  }
}

void sub_1002BE66C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5)
  {
    uint64_t v13 = ASDLogHandleForCategory(16LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v14, 56LL, 1);
    }
    id v16 = Property;
    *(_DWORD *)__int128 buf = 138412546;
    id v23 = v16;
    __int16 v24 = 2114;
    id v25 = v6;
    _os_log_error_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_ERROR,  "[%@] Failed to determine if metrics should be collected: %{public}@",  buf,  0x16u);
LABEL_16:

    goto LABEL_17;
  }

  if (([v5 BOOLValue] & 1) == 0)
  {
    uint64_t v17 = ASDLogHandleForCategory(16LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_INFO)) {
      goto LABEL_17;
    }
    id v19 = *(id *)(a1 + 32);
    if (v19) {
      id v19 = objc_getProperty(v19, v18, 56LL, 1);
    }
    id v16 = v19;
    *(_DWORD *)__int128 buf = 138412290;
    id v23 = v16;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[%@] Metrics should not be collected", buf, 0xCu);
    goto LABEL_16;
  }

  uint64_t v7 = ASDLogHandleForCategory(10LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = *(id *)(a1 + 32);
    if (v10) {
      id v10 = objc_getProperty(v10, v9, 56LL, 1);
    }
    id v11 = v10;
    *(_DWORD *)__int128 buf = 138412290;
    id v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "[%@] Recording LoadURL Metrics", buf, 0xCu);
  }

  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[AMSMetricsLoadURLEvent loadURLEventPromiseWithContext:]( &OBJC_CLASS___AMSMetricsLoadURLEvent,  "loadURLEventPromiseWithContext:",  *(void *)(a1 + 40)));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  void v20[2] = sub_1002BE8C4;
  v20[3] = &unk_1003F1320;
  id v21 = *(id *)(a1 + 32);
  -[os_log_s resultWithCompletion:](v12, "resultWithCompletion:", v20);

LABEL_17:
}

void sub_1002BE8C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v24 = ASDLogHandleForCategory(16LL);
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v25, 56LL, 1);
      }
      id v27 = Property;
      *(_DWORD *)__int128 buf = 138412546;
      id v31 = v27;
      __int16 v32 = 2114;
      uint64_t v33 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "[%@] Failed to create event: %{public}@",  buf,  0x16u);
    }
  }

  else
  {
    [v5 setCheckDiagnosticsAndUsageSetting:1];
    uint64_t v9 = *(void **)(a1 + 32);
    if (v9)
    {
      id v10 = objc_getProperty(v9, v8, 96LL, 1);
      uint64_t v12 = v10;
      if (v10) {
        id v10 = objc_getProperty(v10, v11, 120LL, 1);
      }
    }

    else
    {
      uint64_t v12 = 0LL;
      id v10 = 0LL;
    }

    id v13 = v10;

    if (v13)
    {
      uint64_t v15 = *(void **)(a1 + 32);
      if (v15)
      {
        id v16 = objc_getProperty(v15, v14, 96LL, 1);
        id v18 = v16;
        if (v16) {
          id v16 = objc_getProperty(v16, v17, 120LL, 1);
        }
      }

      else
      {
        id v18 = 0LL;
        id v16 = 0LL;
      }

      id v19 = v16;
      [v5 addPropertiesWithDictionary:v19];
    }

    id v20 = *(id *)(a1 + 32);
    if (v20) {
      id v20 = objc_getProperty(v20, v14, 48LL, 1);
    }
    id v21 = v20;
    SEL v22 = -[ASEMetrics initWithType:](objc_alloc(&OBJC_CLASS____TtC9appstored10ASEMetrics), "initWithType:", 0LL);
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3221225472LL;
    v28[2] = nullsub_22;
    void v28[3] = &unk_1003E9880;
    id v29 = v21;
    id v23 = (os_log_s *)v21;
    -[ASEMetrics enqueueEvent:flushEvents:completionHandler:]( v22,  "enqueueEvent:flushEvents:completionHandler:",  v5,  1LL,  v28);
  }
}

void sub_1002BEB1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002BEBBC;
  block[3] = &unk_1003E97D0;
  id v10 = v3;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 32);
  id v11 = v6;
  uint64_t v12 = v7;
  id v8 = v3;
  dispatch_async(v5, block);
}

void sub_1002BEBBC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = ASDLogHandleForCategory(10LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      id Property = *(id *)(a1 + 40);
      if (Property) {
        id Property = objc_getProperty(Property, v4, 56LL, 1);
      }
      id v9 = Property;
      uint64_t v10 = *(void *)(a1 + 32);
      int v11 = 138412546;
      id v12 = v9;
      __int16 v13 = 2114;
      uint64_t v14 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "[%@] Failed to reset data consumer with error: %{public}@",  (uint8_t *)&v11,  0x16u);
    }

    id v6 = *(void **)(a1 + 40);
    if (v6)
    {
      objc_setProperty_atomic(v6, v5, *(id *)(a1 + 32), 40LL);
      uint64_t v7 = *(void **)(a1 + 40);
    }

    else
    {
      uint64_t v7 = 0LL;
    }

    sub_1002BD6C8(*(void *)(a1 + 48), v7);
  }

  else
  {
    sub_1002BA560(*(void *)(a1 + 48), *(void **)(a1 + 40));
  }

void sub_1002BECFC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  v11[0] = _NSConcreteStackBlock;
  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  void v11[2] = sub_1002BEDA4;
  v11[3] = &unk_1003EF100;
  v11[1] = 3221225472LL;
  id v12 = v5;
  uint64_t v15 = a2;
  id v8 = v6;
  uint64_t v9 = *(void *)(a1 + 32);
  id v13 = v8;
  uint64_t v14 = v9;
  id v10 = v5;
  dispatch_async(v7, v11);
}

void sub_1002BEDA4(uint64_t a1, const char *a2)
{
  if (!*(void *)(a1 + 32))
  {
    uint64_t v18 = *(void *)(a1 + 56);
    if (v18) {
      goto LABEL_15;
    }
    id v19 = *(void **)(a1 + 40);
    if (v19)
    {
      id v20 = objc_getProperty(v19, a2, 96LL, 1);
      if (v20)
      {
        uint64_t v21 = v20[20];

        if (!v21) {
          goto LABEL_21;
        }
        uint64_t v18 = *(void *)(a1 + 56);
LABEL_15:
        SEL v22 = *(void **)(a1 + 40);
        if (v22)
        {
          id v20 = objc_getProperty(v22, a2, 96LL, 1);
          if (v20)
          {
            uint64_t v23 = v20[20];
            goto LABEL_18;
          }
        }

        else
        {
          id v20 = 0LL;
        }

        uint64_t v23 = 0LL;
LABEL_18:
        uint64_t v24 = *(void *)(a1 + 40);
        if (v24) {
          *(void *)(v24 + 112) = v23 + v18;
        }
      }
    }

    else
    {
      id v20 = 0LL;
    }

LABEL_21:
    uint64_t v25 = *(void *)(a1 + 48);
    id v26 = *(id *)(a1 + 40);
    if (!v25)
    {
LABEL_34:

      return;
    }

    dispatch_assert_queue_V2(*(dispatch_queue_t *)(v25 + 16));
    if (v26)
    {
      *((_BYTE *)v26 + _Block_object_dispose(va, 8) = 0;
      if (*((void *)v26 + 2) == 3LL)
      {
        uint64_t v28 = ASDLogHandleForCategory(10LL);
        id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          id v42 = objc_getProperty(v26, v30, 56LL, 1);
          *(_DWORD *)__int16 v43 = 138412290;
          *(void *)&void v43[4] = v42;
          _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "[%@] Stopping early because request has been canceled",  v43,  0xCu);
        }

        sub_1002BD6C8(v25, v26);
        goto LABEL_34;
      }

      id v31 = objc_getProperty(v26, v27, 96LL, 1);
      uint64_t v33 = v31;
      if ((*((_BYTE *)v26 + 9) & 1) == 0 && v31 && (*((_BYTE *)v31 + 14) & 1) != 0)
      {
        id v36 = objc_getProperty(v26, v32, 104LL, 1);
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 URL]);
        uint64_t v38 = *(void *)(v25 + 16);
        *(void *)__int16 v43 = _NSConcreteStackBlock;
        *(void *)&v43[8] = 3221225472LL;
        *(void *)&v43[16] = sub_1002BF1B8;
        __int16 v44 = &unk_1003F1398;
        uint64_t v45 = v25;
        id v46 = v26;
        ACSLocateCachingServer(v37, 0LL, v38, v43, 30.0);

        goto LABEL_33;
      }

      *((_BYTE *)v26 + 9) = 1;
      id Property = objc_getProperty(v26, v32, 104LL, 1);
    }

    else
    {
      uint64_t v33 = 0LL;
      id Property = 0LL;
    }

    id v35 = Property;
    sub_1002BF44C(v25, v26, v35);

LABEL_33:
    goto LABEL_34;
  }

  uint64_t v3 = ASDLogHandleForCategory(31LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = v4;
  id v6 = *(void **)(a1 + 40);
  if (v6)
  {
    os_signpost_id_t v7 = v6[16];
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
    {
      id v9 = objc_getProperty(v6, v8, 56LL, 1);
      id v10 = sub_100298F48(*(id *)(a1 + 32));
      int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      *(_DWORD *)__int16 v43 = 138543618;
      *(void *)&void v43[4] = v9;
      *(_WORD *)&v43[12] = 2114;
      *(void *)&v43[14] = v11;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v5,  OS_SIGNPOST_EVENT,  v7,  "ConsumerError",  " uuid=%{public, signpost.description:attribute}@  error=%{public, signpost.description:attribute}@ ",  v43,  0x16u);
    }
  }

  uint64_t v12 = ASDLogHandleForCategory(10LL);
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    id v39 = *(id *)(a1 + 40);
    if (v39) {
      id v39 = objc_getProperty(v39, v14, 56LL, 1);
    }
    id v40 = v39;
    uint64_t v41 = *(void *)(a1 + 32);
    *(_DWORD *)__int16 v43 = 138412546;
    *(void *)&void v43[4] = v40;
    *(_WORD *)&v43[12] = 2114;
    *(void *)&v43[14] = v41;
    _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[%@] Preparing data consumer failed with error: %{public}@",  v43,  0x16u);
  }

  id v16 = *(void **)(a1 + 40);
  if (v16)
  {
    objc_setProperty_atomic(v16, v15, *(id *)(a1 + 32), 40LL);
    uint64_t v17 = *(void **)(a1 + 40);
  }

  else
  {
    uint64_t v17 = 0LL;
  }

  sub_1002BD6C8(*(void *)(a1 + 48), v17);
}

void sub_1002BF1B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = ASDLogHandleForCategory(10LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    id Property = *(id *)(a1 + 40);
    if (Property) {
      id Property = objc_getProperty(Property, v10, 56LL, 1);
    }
    id v26 = Property;
    id v27 = *(id *)(a1 + 40);
    if (v27) {
      id v27 = objc_getProperty(v27, v25, 104LL, 1);
    }
    id v28 = v27;
    id v29 = (void *)objc_claimAutoreleasedReturnValue([v28 URL]);
    int v32 = 138544386;
    id v33 = v26;
    __int16 v34 = 2114;
    id v35 = v29;
    __int16 v36 = 2114;
    uint64_t v37 = a2;
    __int16 v38 = 2114;
    uint64_t v39 = a3;
    __int16 v40 = 2114;
    uint64_t v41 = a4;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "[%{public}@] Lookup complete for: %{public}@ found replacement: %{public}@ with advice: %{public}@ error: %{public}@",  (uint8_t *)&v32,  0x34u);
  }

  if (a2)
  {
    id v12 = *(id *)(a1 + 40);
    if (v12) {
      id v12 = objc_getProperty(v12, v11, 104LL, 1);
    }
    id v13 = v12;
    id v14 = [v13 mutableCopy];

    [v14 setURL:a2];
    [v14 _setRequiresShortConnectionTimeout:1];
    sub_1002BF44C(*(void *)(a1 + 32), *(void **)(a1 + 40), v14);
    uint64_t v15 = *(void *)(a1 + 40);
    if (v15) {
      *(_BYTE *)(v15 + _Block_object_dispose(va, 8) = 1;
    }
  }

  else
  {
    if (a4)
    {
      uint64_t v16 = ASDLogHandleForCategory(10LL);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        id v30 = *(id *)(a1 + 40);
        if (v30) {
          id v30 = objc_getProperty(v30, v18, 56LL, 1);
        }
        id v31 = v30;
        int v32 = 138412546;
        id v33 = v31;
        __int16 v34 = 2114;
        id v35 = a4;
        _os_log_error_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_ERROR,  "[%@] Error occuring while locating caching server: %{public}@",  (uint8_t *)&v32,  0x16u);
      }
    }

    uint64_t v19 = *(void *)(a1 + 40);
    if (v19)
    {
      *(_BYTE *)(v19 + 9) = 1;
      uint64_t v22 = a1 + 32;
      uint64_t v20 = *(void *)(a1 + 32);
      uint64_t v21 = *(void **)(v22 + 8);
      if (v21) {
        id v23 = objc_getProperty(v21, v11, 104LL, 1);
      }
      else {
        id v23 = 0LL;
      }
    }

    else
    {
      uint64_t v21 = 0LL;
      id v23 = 0LL;
      uint64_t v20 = *(void *)(a1 + 32);
    }

    id v14 = v23;
    sub_1002BF44C(v20, v21, v14);
  }
}

void sub_1002BF44C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!a1) {
    goto LABEL_135;
  }
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  if (!v5)
  {
    id v11 = 0LL;
LABEL_8:
    id v12 = v11;
    id v13 = objc_alloc(&OBJC_CLASS___NSMutableURLRequest);
    id v14 = v6;
    id v15 = -[NSMutableURLRequest _initWithCFURLRequest:]( v13,  "_initWithCFURLRequest:",  [v14 _CFURLRequest]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 HTTPUserAgent]);

    if (!v16)
    {
      id v17 = sub_10024E664((uint64_t)&OBJC_CLASS___AMSUserAgent);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      [v15 setHTTPUserAgent:v18];
    }

    if (v5)
    {
      uint64_t v19 = *((void *)v5 + 14);
      if (v19) {
        sub_100273C3C(v15, v19);
      }
    }

    if (v12) {
      uint64_t v20 = v12[21];
    }
    else {
      uint64_t v20 = 0LL;
    }
    uint64_t v21 = sub_100192364(v20);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    if (v22) {
      [v15 setValue:v22 forHTTPHeaderField:@"Apple-Download-Type"];
    }
    id v23 = *(void **)(a1 + 24);
    if (v23)
    {
      if (!v5) {
        goto LABEL_22;
      }
      objc_storeWeak((id *)v5 + 15, v23);
    }

    else if (!v5)
    {
      goto LABEL_22;
    }

    id WeakRetained = objc_loadWeakRetained((id *)v5 + 15);

    if (WeakRetained) {
      goto LABEL_69;
    }
LABEL_22:
    BOOL v233 = v22;
    id v235 = v15;
    uint64_t v25 = (id *)v5;
    id v26 = v12;
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
    self = v26;
    id v27 = sub_10031CC40((uint64_t)&OBJC_CLASS___NSURLSessionConfiguration, v26);
    id v29 = (void *)objc_claimAutoreleasedReturnValue(v27);
    if (v5) {
      objc_setProperty_atomic(v25, v28, v29, 32LL);
    }
    id v230 = v29;
    uint64_t v30 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v29]);
    if (v30)
    {
      id v31 = (id *)v30;
      id v32 = *(id *)(v30 + 24);
      id v231 = v31;
      if (v32)
      {
        id v33 = v32;
        id v222 = v5;
        __int16 v34 = v25;
        id v35 = v14;
        id v36 = v6;
        id v37 = v31[3];
        id v38 = [v37 unsignedLongLongValue];
        if (v12)
        {
          unint64_t v39 = (unint64_t)v38;
          unint64_t v40 = self[11];

          BOOL v41 = v39 >= v40;
          id v6 = v36;
          id v14 = v35;
          uint64_t v25 = v34;
          id v5 = v222;
          id v31 = v231;
          if (!v41)
          {
            uint64_t v42 = ASDLogHandleForCategory(10LL);
            __int16 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              if (v222) {
                id Property = objc_getProperty(v25, v44, 56LL, 1);
              }
              else {
                id Property = 0LL;
              }
              id v46 = Property;
              id v47 = v231[3];
              id v48 = [v47 unsignedLongLongValue];
              uint64_t v49 = self[11];
              *(_DWORD *)__int128 buf = 138412802;
              id v247 = v46;
              __int16 v248 = 2048;
              uint64_t v249 = (uint64_t)v48;
              __int16 v250 = 2048;
              uint64_t v251 = v49;
              _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "[%@] Creating new session because download exceeds maximum watch cellular transfer size for existing ses sion (Max: %{iec-bytes}lld, Download: %{iec-bytes}lld)",  buf,  0x20u);

              id v31 = v231;
            }

            int v50 = _os_feature_enabled_impl("AppStoreDaemon", "EnableLocalSessions");
            goto LABEL_33;
          }
        }

        else
        {

          id v14 = v35;
          uint64_t v25 = v34;
          id v5 = v222;
          id v31 = v231;
        }
      }

      uint64_t v57 = ASDLogHandleForCategory(10LL);
      id v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        id v224 = v14;
        id v228 = v6;
        if (v5) {
          id v60 = objc_getProperty(v25, v59, 56LL, 1);
        }
        else {
          id v60 = 0LL;
        }
        id v61 = v60;
        id v62 = v231[2];
        id v63 = (void *)objc_claimAutoreleasedReturnValue([v62 configuration]);
        uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 identifier]);
        *(_DWORD *)__int128 buf = 138412802;
        id v247 = v61;
        __int16 v248 = 2114;
        uint64_t v249 = (uint64_t)v64;
        __int16 v250 = 2114;
        uint64_t v251 = (uint64_t)v230;
        _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "[%@] Reusing existing session with identifier: %{public}@ (%{public}@)",  buf,  0x20u);

        id v31 = v231;
        id v14 = v224;
        id v6 = v228;
      }

      id v65 = v31[2];
      uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v65 configuration]);
      id v67 = (void *)objc_claimAutoreleasedReturnValue([v66 identifier]);

      if (v67)
      {
        uint64_t v68 = v230;
        SEL v70 = (void *)objc_claimAutoreleasedReturnValue([v67 stringByAppendingFormat:@" (%@)", v230]);
        if (v5) {
          objc_setProperty_atomic(v25, v69, v70, 32LL);
        }
      }

      else
      {
        uint64_t v68 = v230;
      }

      __int128 v71 = v231;
      goto LABEL_66;
    }

    int v56 = _os_feature_enabled_impl("AppStoreDaemon", "EnableLocalSessions");
    if (!v12)
    {
      char v51 = 1;
      id v12 = 0LL;
      goto LABEL_55;
    }

    int v50 = v56;
LABEL_33:
    char v51 = 0;
    if (*((_DWORD *)self + 4) >= 0x12u && !self[9] && v50)
    {
      id v52 = sub_10031CBC4((uint64_t)&OBJC_CLASS___NSURLSessionConfiguration, self);
      unsigned int v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
      char v51 = 0;
      int v54 = 1;
      goto LABEL_56;
    }

LABEL_121:
    uint64_t v177 = ASDLogHandleForCategory(10LL);
    uint64_t v178 = (os_log_s *)objc_claimAutoreleasedReturnValue(v177);
    if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
    {
      if (v5) {
        id v212 = objc_getProperty(v5, v179, 56LL, 1);
      }
      else {
        id v212 = 0LL;
      }
      id v213 = v212;
      __int16 v214 = (void *)objc_claimAutoreleasedReturnValue([v14 URL]);
      *(_DWORD *)__int128 buf = 138412546;
      id v247 = v213;
      __int16 v248 = 2114;
      uint64_t v249 = (uint64_t)v214;
      _os_log_error_impl( (void *)&_mh_execute_header,  v178,  OS_LOG_TYPE_ERROR,  "[%@] Error creating session for URL: %{public}@",  buf,  0x16u);
    }

    uint64_t v181 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"AssetErrorDomain",  4LL,  0LL));
    if (v5) {
      objc_setProperty_atomic(v5, v180, v181, 40LL);
    }

    sub_1002BD6C8(a1, v5);
    goto LABEL_134;
  }

  if (*((void *)v5 + 2) != 3LL)
  {
    id v11 = objc_getProperty(v5, v7, 96LL, 1);
    goto LABEL_8;
  }

  uint64_t v8 = ASDLogHandleForCategory(10LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
  {
    id v55 = objc_getProperty(v5, v10, 56LL, 1);
    *(_DWORD *)__int128 buf = 138412290;
    id v247 = v55;
    _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%@] Stopping early because request has been canceled",  buf,  0xCu);
  }

  sub_1002BD6C8(a1, v5);
LABEL_135:
}

void sub_1002C0908(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 URL]);
  if (v4) {
    [v4[1] setObject:v5 forKeyedSubscript:@"assetURL"];
  }

  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, v6, 32LL, 1);
  }
  id v8 = Property;
  if (v4) {
    [v4[1] setObject:v8 forKeyedSubscript:@"bundleIdentifier"];
  }

  id v9 = sub_1001D36AC(*(id **)(a1 + 48));
  id v10 = (id)objc_claimAutoreleasedReturnValue(v9);
  if (v4) {
    [v4[1] setObject:v10 forKeyedSubscript:@"variantProduct"];
  }
}

id sub_1002C09D4(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(31LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = v3;
  id v5 = *(void **)(a1 + 32);
  if (v5)
  {
    os_signpost_id_t v6 = v5[16];
    if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
    {
      id v8 = objc_getProperty(v5, v7, 56LL, 1);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) URL]);
      int v17 = 138543618;
      id v18 = v8;
      __int16 v19 = 2114;
      uint64_t v20 = v9;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_EVENT,  v6,  "TaskStarted",  " uuid=%{public, signpost.description:attribute}@  request=%{public, signpost.description:attribute}@ ",  (uint8_t *)&v17,  0x16u);
    }
  }

  uint64_t v10 = ASDLogHandleForCategory(10LL);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v12, 56LL, 1);
    }
    id v14 = Property;
    id v15 = *(void **)(a1 + 48);
    int v17 = 138412546;
    id v18 = v14;
    __int16 v19 = 2114;
    uint64_t v20 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "[%@] Started task: %{public}@",  (uint8_t *)&v17,  0x16u);
  }

  return [*(id *)(a1 + 48) resume];
}

id sub_1002C0BC0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002C0C38;
  block[3] = &unk_1003E9EA8;
  void block[4] = objc_opt_self(a1);
  if (qword_100462580 != -1) {
    dispatch_once(&qword_100462580, block);
  }
  return (id)qword_100462588;
}

void sub_1002C0C38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = objc_opt_class(*(void *)(a1 + 32), a2);
  uint64_t v3 = objc_opt_new(v2);
  uint64_t v4 = (void *)qword_100462588;
  qword_100462588 = v3;
}

uint64_t sub_1002C0C60(uint64_t a1)
{
  if (+[AMSRestrictions onDeviceDiagnosticsAllowed]( &OBJC_CLASS___AMSRestrictions,  "onDeviceDiagnosticsAllowed")
    && (id v1 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device),
        uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1),
        unsigned __int8 v3 = [v2 isHRNMode],
        v2,
        (v3 & 1) == 0))
  {
    return os_variant_has_internal_content("com.apple.appstored");
  }

  else
  {
    return 0LL;
  }

void sub_1002C0CC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v36 = a1;
    uint64_t v4 = -[UpdateMetricsEvent initWithTopic:]( objc_alloc(&OBJC_CLASS___UpdateMetricsEvent),  "initWithTopic:",  @"xp_amp_app_install");
    if ([v3 count])
    {
      id v37 = (double *)v4;
      id v38 = v3;
      __int128 v43 = 0u;
      __int128 v44 = 0u;
      __int128 v41 = 0u;
      __int128 v42 = 0u;
      id obj = v3;
      id v5 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v40 = *(void *)v42;
        os_signpost_id_t v7 = (void *)ASDUpdateItemMetricsDiscoveryDate;
        uint64_t v8 = ASDUpdateItemMetricsAvailableDate;
        id v9 = (void *)ASDUpdateItemMetricsPurchaseStartDate;
        uint64_t v10 = (void *)ASDUpdateItemMetricsDownloadStartDate;
        uint64_t v11 = ASDUpdateItemMetricsPurchaseCompleteDate;
        id v12 = (void *)ASDUpdateItemMetricsInstallStart;
        double v13 = 0.0;
        double v14 = 0.0;
        double v15 = 0.0;
        double v16 = 0.0;
        uint64_t v17 = ASDUpdateItemMetricsDownloadCompleteDate;
        do
        {
          for (unint64_t i = 0LL; i != v6; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v42 != v40) {
              objc_enumerationMutation(obj);
            }
            __int16 v19 = *(void **)(*((void *)&v41 + 1) + 8LL * (void)i);
            double v16 = v16 + sub_1002C10A8(v7, v8, v19);
            double v15 = v15 + sub_1002C10A8(v9, (uint64_t)v7, v19);
            double v14 = v14 + sub_1002C10A8(v10, v11, v19);
            double v13 = v13 + sub_1002C10A8(v12, v17, v19);
          }

          id v6 = [obj countByEnumeratingWithState:&v41 objects:v45 count:16];
        }

        while (v6);
      }

      else
      {
        double v13 = 0.0;
        double v14 = 0.0;
        double v15 = 0.0;
        double v16 = 0.0;
      }

      double v20 = v16 / (double)(unint64_t)[obj count];
      double v21 = v15 / (double)(unint64_t)[obj count];
      double v22 = v14 / (double)(unint64_t)[obj count];
      double v23 = v13 / (double)(unint64_t)[obj count];
      uint64_t v4 = (UpdateMetricsEvent *)v37;
      sub_100206F8C(v37, v20);
      sub_1002070B8(v37, v21);
      sub_100206FF0(v37, v22);
      sub_100207054(v37, v23);
      id v3 = v38;
    }

    uint64_t v24 = (void *)objc_opt_new(&OBJC_CLASS___ASDUpdateMetricsStore);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 metrics]);
    if ([v25 count])
    {
      [v24 averagePollTime];
      if (v26 > 0.0) {
        sub_100206E90((double *)v4->AMSMetricsEvent_opaque, v26);
      }
    }

    id v27 = (void *)objc_claimAutoreleasedReturnValue([v24 lastAutoPollDate]);
    if (v27) {
      sub_100206EF4((id *)v4, v27);
    }
    id v28 = v4;
    if (v28)
    {
      uint64_t v29 = ASDLogHandleForCategory(9LL);
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        __int16 v34 = (void *)objc_opt_class(v36, v31);
        *(_DWORD *)__int128 buf = 138543618;
        *(void *)&uint8_t buf[4] = v34;
        __int16 v47 = 2112;
        id v48 = v28;
        id v35 = v34;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEBUG,  "[%{public}@] Inserting metric event: %@",  buf,  0x16u);
      }

      id v32 = -[ASEMetrics initWithType:](objc_alloc(&OBJC_CLASS____TtC9appstored10ASEMetrics), "initWithType:", 0LL);
      *(void *)__int128 buf = v28;
      id v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", buf, 1LL));
      -[ASEMetrics enqueueEvents:flushEvents:completionHandler:]( v32,  "enqueueEvents:flushEvents:completionHandler:",  v33,  1LL,  &stru_1003F1508);
    }
  }
}

double sub_1002C10A8(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = a1;
  os_signpost_id_t v7 = sub_100193C24(v5, a2);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = sub_100193C24(v5, (uint64_t)v6);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  double v11 = 0.0;
  if ((objc_opt_respondsToSelector(v8, "doubleValue") & 1) != 0
    && (objc_opt_respondsToSelector(v10, "doubleValue") & 1) != 0)
  {
    [v10 doubleValue];
    double v13 = v12;
    [v8 doubleValue];
    double v11 = v13 - v14;
  }

  return v11;
}

void sub_1002C11C4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  [v4 lock];
  v3[2](v3);

  [v4 unlock];
}

id *sub_1002C1218(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___FamilyInfoLookupTask;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 3, a2);
    }
  }

  return a1;
}

id sub_1002C1294(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_activeiTunesAccount"));

  if (v6)
  {
    objc_super v7 = sub_1002C1324(v4, v6, 1, v3);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  return v8;
}

id *sub_1002C1324(uint64_t a1, void *a2, char a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  uint64_t v9 = objc_opt_self(a1);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ams_DSID"));

  if (!v10)
  {
    uint64_t v24 = ASDLogHandleForCategory(14LL);
    double v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v61 = (id)objc_opt_class(v9, v25);
      __int16 v62 = 2114;
      id v63 = v8;
      id v26 = v61;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Unable to load cached family info because the account has no DSID. ",  buf,  0x16u);
    }

    goto LABEL_22;
  }

  id v11 = v8;
  uint64_t v12 = objc_opt_self(v9);
  id v13 = sub_1002C25AC(v12);
  double v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  if (!v14)
  {
    uint64_t v27 = ASDLogHandleForCategory(14LL);
    double v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v61 = (id)objc_opt_class(v12, v28);
      __int16 v62 = 2114;
      id v63 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] Unable to generate the path in order to load cached FamilyInfo",  buf,  0x16u);
    }

    goto LABEL_13;
  }

  double v15 = -[NSData initWithContentsOfFile:](objc_alloc(&OBJC_CLASS___NSData), "initWithContentsOfFile:", v14);
  if (!v15)
  {
LABEL_13:
    double v23 = 0LL;
    goto LABEL_19;
  }

  uint64_t v16 = ASDLogHandleForCategory(14LL);
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138543618;
    id v61 = (id)objc_opt_class(v12, v18);
    __int16 v62 = 2114;
    id v63 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Load cached FamilyInfo",  buf,  0x16u);
  }

  id v59 = 0LL;
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v15,  0LL,  0LL,  &v59));
  id v20 = v59;
  uint64_t v22 = objc_opt_class(&OBJC_CLASS___NSDictionary, v21);
  if ((objc_opt_isKindOfClass(v19, v22) & 1) == 0)
  {

LABEL_15:
    uint64_t v29 = ASDLogHandleForCategory(14LL);
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      id v58 = (void *)objc_opt_class(v12, v31);
      *(_DWORD *)__int128 buf = 138543874;
      id v61 = v58;
      __int16 v62 = 2114;
      id v63 = v11;
      __int16 v64 = 2114;
      id v65 = v20;
      _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] Failed to deserialize the cached FamilyInfo. Error: %{public}@",  buf,  0x20u);
    }

    double v23 = 0LL;
    goto LABEL_18;
  }

  double v23 = v19;

  if (!v23) {
    goto LABEL_15;
  }
LABEL_18:

LABEL_19:
  if (v23)
  {
    id v32 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v23, "objectForKeyedSubscript:", @"account"));
    uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSNumber, v33);
    if ((objc_opt_isKindOfClass(v32, v34) & 1) != 0) {
      id v35 = v32;
    }
    else {
      id v35 = 0LL;
    }

    id v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "ams_DSID"));
    unsigned __int8 v38 = [v35 isEqualToNumber:v37];

    if ((v38 & 1) != 0)
    {
      if ((a3 & 1) != 0)
      {
LABEL_26:
        unint64_t v39 = objc_alloc(&OBJC_CLASS___FamilyInfoLookupResult);
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v23, "objectForKeyedSubscript:", @"circle"));
        uint64_t v36 = sub_100286A08((id *)&v39->super.isa, v40, 1);

LABEL_39:
        goto LABEL_40;
      }

      id v46 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v23, "objectForKeyedSubscript:", @"timestamp"));
      uint64_t v48 = objc_opt_class(&OBJC_CLASS___NSDate, v47);
      if ((objc_opt_isKindOfClass(v46, v48) & 1) != 0)
      {
        id v42 = v46;

        if (v42)
        {
          uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          [v49 timeIntervalSinceDate:v42];
          double v51 = v50;

          if (v51 > 2.22044605e-16 && v51 < 604800.0)
          {

            goto LABEL_26;
          }
        }
      }

      else
      {

        id v42 = 0LL;
      }

      uint64_t v52 = ASDLogHandleForCategory(14LL);
      unsigned int v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        id v55 = (void *)objc_opt_class(v9, v54);
        *(_DWORD *)__int128 buf = 138543618;
        id v61 = v55;
        __int16 v62 = 2114;
        id v63 = v11;
        id v56 = v55;
        _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] We have cached family info for the account, but it's too old to return.",  buf,  0x16u);
      }
    }

    else
    {
      uint64_t v41 = ASDLogHandleForCategory(14LL);
      id v42 = (id)objc_claimAutoreleasedReturnValue(v41);
      if (os_log_type_enabled((os_log_t)v42, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v44 = (void *)objc_opt_class(v9, v43);
        *(_DWORD *)__int128 buf = 138543618;
        id v61 = v44;
        __int16 v62 = 2114;
        id v63 = v11;
        id v45 = v44;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v42,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Our cached family info isn't for the given account.",  buf,  0x16u);
      }
    }

    uint64_t v36 = 0LL;
    goto LABEL_39;
  }

void *sub_1002C18B0(void *val)
{
  id v1 = val;
  if (val)
  {
    if (!val[2])
    {
      uint64_t v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
      id v3 = (void *)v1[2];
      v1[2] = v2;
    }

    objc_initWeak(&location, v1);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_1002C1994;
    v5[3] = &unk_1003F1530;
    objc_copyWeak(&v6, &location);
    id v1 = (void *)objc_claimAutoreleasedReturnValue([v1 performTaskWithBlock:v5]);
    objc_destroyWeak(&v6);
    objc_destroyWeak(&location);
  }

  return v1;
}

void sub_1002C1978(_Unwind_Exception *a1)
{
}

id *sub_1002C1994(uint64_t a1, void *a2)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v4 = ASDLogHandleForCategory(14LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = (void *)objc_opt_class(WeakRetained, v6);
    if (WeakRetained) {
      id v8 = WeakRetained[2];
    }
    else {
      id v8 = 0LL;
    }
    *(_DWORD *)__int128 buf = 138543618;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v133 = 2112;
    id v134 = v8;
    id v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%@] Performing LoadFamilyCircleTask",  buf,  0x16u);
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "ams_activeiTunesAccount"));

  if (v11)
  {
    uint64_t v122 = a2;
    id v127 = 0LL;
    id v12 = v11;
    id v126 = v11;
    if (WeakRetained)
    {
      id v13 = WeakRetained[3];
      double v14 = (void *)objc_claimAutoreleasedReturnValue([v13 URLForKey:@"family-info"]);
      v131[0] = 0LL;
      double v15 = (void *)objc_claimAutoreleasedReturnValue([v14 valueWithError:v131]);
      id v16 = v131[0];

      if (v15)
      {
        uint64_t v17 = objc_alloc_init(&OBJC_CLASS___AMSURLRequestEncoder);
        -[AMSURLRequestEncoder setAccount:](v17, "setAccount:", v12);
        -[AMSURLRequestEncoder setBag:](v17, "setBag:", WeakRetained[3]);
        if (*((_BYTE *)WeakRetained + 8)) {
          -[AMSURLRequestEncoder setDialogOptions:](v17, "setDialogOptions:", 1LL);
        }
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained[2] description]);
        -[AMSURLRequestEncoder setLogUUID:](v17, "setLogUUID:", v18);

        __int16 v19 = (void *)objc_claimAutoreleasedReturnValue( -[AMSURLRequestEncoder requestWithMethod:URL:parameters:]( v17,  "requestWithMethod:URL:parameters:",  2LL,  v15,  0LL));
        *(void *)__int128 buf = 0LL;
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 resultWithError:buf]);
        id v21 = *(id *)buf;

        if (v21)
        {
          uint64_t v22 = 0LL;
          id v127 = v21;
        }

        else
        {
          id v124 = v12;
          id v32 = objc_alloc_init(&OBJC_CLASS___AMSPromise);
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(+[AMSURLSession defaultSession](&OBJC_CLASS___AMSURLSession, "defaultSession"));
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[AMSPromise completionHandlerAdapter](v32, "completionHandlerAdapter"));
          id v35 = (void *)objc_claimAutoreleasedReturnValue([v33 dataTaskWithRequest:v20 completionHandler:v34]);

          [v35 resume];
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(-[AMSPromise resultWithError:](v32, "resultWithError:", &v127));

          id v12 = v124;
        }

        id v11 = v126;
      }

      else
      {
        uint64_t v28 = ASDLogHandleForCategory(14LL);
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
        {
          uint64_t v111 = objc_opt_class(WeakRetained, v30);
          id v112 = WeakRetained[2];
          *(_DWORD *)__int128 buf = 138543874;
          *(void *)&uint8_t buf[4] = v111;
          __int16 v133 = 2114;
          id v134 = v112;
          __int16 v135 = 2114;
          id v136 = v16;
          _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] AMSLoadFamilyCircleTask failed because the bag didn't give us the URL. error = %{public}@",  buf,  0x20u);
        }

        uint64_t v31 = ASDErrorWithUnderlyingError( v16,  ASDErrorDomain,  901LL,  @"Family Info Lookup Failed",  @"We were unable to get the family circle URL.");
        uint64_t v22 = 0LL;
        id v127 = (id)objc_claimAutoreleasedReturnValue(v31);
      }
    }

    else
    {
      uint64_t v22 = 0LL;
    }

    uint64_t v36 = v12;

    id v125 = v127;
    id v37 = v22;
    objc_opt_self(&OBJC_CLASS___FamilyInfoLookupTask);
    if (!v37) {
      goto LABEL_36;
    }
    unsigned __int8 v38 = (void *)objc_claimAutoreleasedReturnValue([v37 object]);
    uint64_t v40 = objc_opt_class(&OBJC_CLASS___NSDictionary, v39);
    if ((objc_opt_isKindOfClass(v38, v40) & 1) != 0)
    {
      id v41 = v38;

      if (v41)
      {
        id v42 = sub_100286A08((id *)objc_alloc(&OBJC_CLASS___FamilyInfoLookupResult), v41, 0);
        goto LABEL_28;
      }
    }

    else
    {

      id v41 = 0LL;
    }

    id v42 = 0LL;
LABEL_28:

    if (v42)
    {
      uint64_t v27 = v42;
      id v43 = v12;
      if (!WeakRetained)
      {
LABEL_68:

        id v67 = v125;
LABEL_69:

        goto LABEL_70;
      }

      id v44 = sub_1002C25AC((uint64_t)&OBJC_CLASS___FamilyInfoLookupTask);
      id v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
      if (!v45)
      {
        uint64_t v88 = ASDLogHandleForCategory(14LL);
        unsigned int v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v90 = objc_opt_class(WeakRetained, v89);
          id v91 = WeakRetained[2];
          *(_DWORD *)__int128 buf = 138543618;
          *(void *)&uint8_t buf[4] = v90;
          __int16 v133 = 2114;
          id v134 = v91;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Unable to generate the path in order to cache a family info lookup.",  buf,  0x16u);
        }

        goto LABEL_67;
      }

      id v46 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "ams_DSID"));

      if (!v46)
      {
        uint64_t v92 = ASDLogHandleForCategory(14LL);
        unsigned int v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v94 = objc_opt_class(WeakRetained, v93);
          id v95 = WeakRetained[2];
          id v96 = v95;
          id v97 = v43;
          id v98 = (void *)objc_claimAutoreleasedReturnValue([v43 hashedDescription]);
          *(_DWORD *)__int128 buf = 138543874;
          *(void *)&uint8_t buf[4] = v94;
          __int16 v133 = 2114;
          id v134 = v95;
          __int16 v135 = 2114;
          id v136 = v98;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Unable to cache a family info lookup because the given account has no DSID. account = %{public}@",  buf,  0x20u);

          id v43 = v97;
        }

        goto LABEL_67;
      }

      v130[0] = @"account";
      id v123 = v43;
      uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v43, "ams_DSID"));
      v131[0] = v47;
      v130[1] = @"circle";
      uint64_t v48 = sub_100286E50(v27);
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
      v131[1] = v49;
      v130[2] = @"timestamp";
      double v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      v131[2] = v50;
      double v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v131,  v130,  3LL));
      id v129 = 0LL;
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  v51,  200LL,  0LL,  &v129));
      unsigned int v53 = (os_log_s *)v129;

      uint64_t v54 = v52;
      if (!v52)
      {
        uint64_t v99 = ASDLogHandleForCategory(14LL);
        id v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
        {
          uint64_t v101 = objc_opt_class(WeakRetained, v100);
          id v102 = WeakRetained[2];
          id v103 = v102;
          uint64_t v104 = AMSLogableError(v53);
          id v105 = (void *)objc_claimAutoreleasedReturnValue(v104);
          *(_DWORD *)__int128 buf = 138543874;
          *(void *)&uint8_t buf[4] = v101;
          __int16 v133 = 2114;
          id v134 = v102;
          __int16 v135 = 2114;
          id v136 = v105;
          _os_log_error_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] Failed to serialize the family info. error = %{public}@",  buf,  0x20u);

          uint64_t v54 = 0LL;
        }

        goto LABEL_66;
      }

      id v128 = v53;
      unsigned __int8 v55 = [v52 writeToFile:v45 options:1 error:&v128];
      id v56 = v128;

      uint64_t v57 = ASDLogHandleForCategory(14LL);
      id v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
      id v59 = v58;
      if ((v55 & 1) != 0)
      {
        if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v61 = objc_opt_class(WeakRetained, v60);
          id v62 = WeakRetained[2];
          *(_DWORD *)__int128 buf = 138543874;
          *(void *)&uint8_t buf[4] = v61;
          __int16 v133 = 2114;
          id v134 = v62;
          __int16 v135 = 2114;
          id v136 = v45;
          _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Wrote the serialized family info to: %{public}@",  buf,  0x20u);
        }
      }

      else if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
      {
        uint64_t v115 = objc_opt_class(WeakRetained, v106);
        id v116 = WeakRetained[2];
        id v117 = v54;
        id v118 = v116;
        uint64_t v119 = AMSLogableError(v56);
        id v121 = v56;
        SEL v120 = (void *)objc_claimAutoreleasedReturnValue(v119);
        *(_DWORD *)__int128 buf = 138543874;
        *(void *)&uint8_t buf[4] = v115;
        __int16 v133 = 2114;
        id v134 = v116;
        __int16 v135 = 2114;
        id v136 = v120;
        _os_log_error_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] Failed to write the serialized family info to disk. error = %{public}@",  buf,  0x20u);

        uint64_t v54 = v117;
        unsigned int v53 = v121;
        goto LABEL_66;
      }

      unsigned int v53 = v56;
LABEL_66:

      id v43 = v123;
LABEL_67:

      id v11 = v126;
      goto LABEL_68;
    }

id sub_1002C25AC(uint64_t a1)
{
  id v1 = sub_100220DDC((uint64_t)&OBJC_CLASS___Storage);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 stringByAppendingPathComponent:@"JFamilyCircle.plist"]);

  return v3;
}

id sub_1002C2638(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)&OBJC_CLASS___ODRDiagnosticsClient;
    a1 = objc_msgSendSuper2(&v12, "init");
    if (a1)
    {
      uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSLock);
      id v5 = (void *)qword_1004625A0;
      qword_1004625A0 = (uint64_t)v4;

      uint64_t v6 =  +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___ODRDiagnosticsProtocol);
      [v3 setExportedInterface:v6];

      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___ODRDiagnosticsProtocol));
      [v3 setRemoteObjectInterface:v7];

      [v3 setExportedObject:a1];
      [v3 resume];
      uint64_t v8 = ASDLogHandleForCategory(19LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)id v11 = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Created the diagnostics client.",  v11,  2u);
      }
    }
  }

  return a1;
}

void sub_1002C2890( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1002C28A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002C28B8(uint64_t a1)
{
}

void sub_1002C28C0(uint64_t a1, void *a2)
{
  id v3 = sub_100188344(a2, *(void **)(a1 + 32));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = v4;
  if (v4)
  {
    v20[0] = @"applicationBundleID";
    id v6 = sub_10020CA80(v4);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v21[0] = v7;
    v20[1] = @"isBeta";
    uint64_t v8 = +[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", sub_1002DA714(*(void *)(a1 + 32)));
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    v21[1] = v9;
    void v20[2] = @"isStoreBased";
    uint64_t v10 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  sub_1001E2598(v5, (uint64_t)@"is_store_based"));
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    v21[2] = v11;
    v20[3] = @"version";
    id v12 = sub_10020CB80(v5);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v21[3] = v13;
    void v20[4] = @"thinningVariant";
    id v14 = sub_10020CB5C(v5);
    double v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    void v21[4] = v15;
    void v20[5] = @"lastModificationDate";
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v5 valueForProperty:@"last_modification_date"]);
    void v21[5] = v16;
    uint64_t v17 = objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v21,  v20,  6LL));
    uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 8LL);
    __int16 v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;
  }
}

void sub_1002C2B60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002C2B78(uint64_t a1, void *a2)
{
  id v3 = sub_100187548(a2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1002C34B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_1002C3524(uint64_t *a1, void *a2)
{
  uint64_t v3 = a1[4];
  id v4 = a2;
  id v5 = sub_10018786C(v4, v3);
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = *(void *)(a1[5] + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  id v9 = sub_100188A28(v4, a1[4]);
  uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);

  uint64_t v11 = *(void *)(a1[6] + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;
}

id sub_1002C359C(id a1, ODRTag *a2)
{
  return sub_10023AC88(a2);
}

void sub_1002C3930(_Unwind_Exception *a1)
{
}

void sub_1002C3D60(void *a1)
{
}

void sub_1002C40DC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1002C40FC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v4 = WeakRetained;
  if (!WeakRetained)
  {
    id Property = 0LL;
    uint64_t v7 = *(void *)(a1 + 32);
    goto LABEL_5;
  }

  id v5 = objc_getProperty(WeakRetained, v3, 48LL, 1);
  uint64_t v7 = *(void *)(a1 + 32);
  if (!v5)
  {
    id Property = objc_getProperty(v4, v6, 32LL, 1);
LABEL_5:
    id v12 = Property;
    (*(void (**)(uint64_t, void, id))(v7 + 16))(v7, 0LL, v12);

    uint64_t v8 = 0LL;
    goto LABEL_6;
  }

  uint64_t v8 = v5;
  id v13 = 0LL;
  id v9 = (void *)sub_10020CE5C(v5, (uint64_t)&v13);
  id v10 = v13;
  (*(void (**)(uint64_t, void *, id))(v7 + 16))(v7, v9, v10);

LABEL_6:
}

void sub_1002C4400( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1002C4428(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = *(void *)(a1 + 32);
  id v6 = WeakRetained;
  if (WeakRetained) {
    id WeakRetained = objc_getProperty(WeakRetained, v3, 32LL, 1);
  }
  id v5 = WeakRetained;
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v5);
}

void sub_1002C45DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002C45F8(uint64_t a1, void *a2)
{
  id v3 = sub_100188AA8(a2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void sub_1002C477C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1002C4798(uint64_t a1, void *a2)
{
  id v3 = sub_100188760(a2);
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

id *sub_1002C4E9C(id *a1, void *a2)
{
  id v3 = a2;
  if (!a1) {
    goto LABEL_9;
  }
  v29.receiver = a1;
  v29.super_class = (Class)&OBJC_CLASS___MediaAppAttributes;
  a1 = (id *)objc_msgSendSuper2(&v29, "init");
  if (a1)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"name"]);
    id v5 = [v4 copy];
    id v6 = a1[3];
    a1[3] = v5;

    id v7 = a1[3];
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSString, v8);
    if ((objc_opt_isKindOfClass(v7, v9) & 1) != 0)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"artistName"]);
      id v11 = [v10 copy];
      id v12 = a1[4];
      a1[4] = v11;

      id v13 = a1[4];
      uint64_t v15 = objc_opt_class(&OBJC_CLASS___NSString, v14);
      if ((objc_opt_isKindOfClass(v13, v15) & 1) != 0)
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"watchBundleId"]);
        id v17 = [v16 copy];
        id v18 = a1[5];
        a1[5] = v17;

        __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:@"platformAttributes"]);
        id v20 = [v19 copy];
        id v21 = a1[2];
        a1[2] = v20;

        id v23 = a1[2];
        if (!v23
          || (uint64_t v24 = objc_opt_class(&OBJC_CLASS___NSDictionary, v22), (objc_opt_isKindOfClass(v23, v24) & 1) != 0))
        {
          uint64_t v25 = -[NSMutableDictionary initWithCapacity:]( [NSMutableDictionary alloc],  "initWithCapacity:",  [a1[2] count]);
          id v26 = a1[1];
          a1[1] = v25;

          goto LABEL_8;
        }
      }
    }

id *sub_1002C5058(id *a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v2 = @"appletvos";
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v1[1] objectForKeyedSubscript:@"appletvos"]);
    if (v3)
    {
      id v1 = v3;
    }

    else
    {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v1[2] objectForKeyedSubscript:@"appletvos"]);
      if (v4)
      {
        id v5 = sub_1001AD3E0(objc_alloc(&OBJC_CLASS___MediaAppPlatformAttributes), v4);
        if (v5) {
          [v1[1] setObject:v5 forKeyedSubscript:@"appletvos"];
        }
        id v1 = v5;
      }

      else
      {
        id v1 = 0LL;
      }
    }
  }

  return v1;
}

void sub_1002C5750(uint64_t a1, void *a2)
{
  id v3 = a2;
}

id sub_1002C5858(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002C58D0;
  block[3] = &unk_1003E9EA8;
  void block[4] = objc_opt_self(a1);
  if (qword_1004625B0 != -1) {
    dispatch_once(&qword_1004625B0, block);
  }
  return (id)qword_1004625A8;
}

void sub_1002C58D0(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1004625A8;
  qword_1004625A8 = (uint64_t)v1;
}

void sub_1002C58F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a1)
  {
    id v7 = a4;
    id v5 = sub_1001995C0((uint64_t)&OBJC_CLASS___PurchaseManager);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    [v6 checkStoreQueue:a2 != 1];

    v7[2](v7, 1LL, 0LL);
  }

void sub_1002C5968(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (a1)
  {
    uint64_t v5 = ASDLogHandleForCategory(14LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138543362;
      id v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Skipping non supported claim user apps complete for clientID: %{public}@",  (uint8_t *)&v7,  0xCu);
    }
  }
}

void sub_1002C5A1C(uint64_t a1, void *a2, void *a3, unsigned int a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  if (a1)
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(a4, 0LL);
    id v13 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002C5B08;
    block[3] = &unk_1003F15A0;
    id v15 = v9;
    id v16 = v10;
    unsigned int v19 = a4;
    uint64_t v17 = a1;
    id v18 = v11;
    dispatch_async(v13, block);
  }
}

void sub_1002C5B08(uint64_t a1)
{
  id v26 = -[KeepAlive initWithName:]( objc_alloc(&OBJC_CLASS___KeepAlive),  "initWithName:",  @"com.apple.appstored.ManagedApplicationTask");
  uint64_t v2 = sub_100240B98((id *)objc_alloc(&OBJC_CLASS___ManagedApplicationTask), *(void **)(a1 + 32), *(void **)(a1 + 40));
  uint64_t v3 = ASDLogHandleForCategory(41LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = (void *)objc_opt_class(&OBJC_CLASS___ManagedApplicationTask, v5);
    id v23 = v6;
    if (v2) {
      id Property = objc_getProperty(v2, v7, 120LL, 1);
    }
    else {
      id Property = 0LL;
    }
    id v9 = Property;
    uint64_t v24 = *(void *)(a1 + 40);
    id v10 = sub_10024068C((unint64_t)[*(id *)(a1 + 32) requestType]);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v10);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) itemIdentifier]);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleIdentifier]);
    unsigned int v13 = [*(id *)(a1 + 32) skipDownloads];
    uint64_t v14 = sub_10027010C(*(unsigned int *)(a1 + 64));
    id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    int v16 = *(_DWORD *)(a1 + 64);
    *(_DWORD *)__int128 buf = 138545410;
    uint64_t v33 = v6;
    __int16 v34 = 2112;
    id v35 = v9;
    __int16 v36 = 2114;
    uint64_t v37 = v24;
    __int16 v38 = 2114;
    uint64_t v39 = v25;
    __int16 v40 = 2114;
    id v41 = v11;
    __int16 v42 = 2114;
    id v43 = v12;
    __int16 v44 = 1024;
    unsigned int v45 = v13;
    __int16 v46 = 2114;
    uint64_t v47 = v15;
    __int16 v48 = 1024;
    int v49 = v16;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%@] Start for clientID: %{public}@ with requestType: %{public}@ itemID: %{public}@ bundleID: %{publi c}@ skipDownloads: %{BOOL}d qoS: %{public}@ (0x%x)",  buf,  0x54u);
  }

  objc_initWeak((id *)buf, v2);
  newValue[0] = _NSConcreteStackBlock;
  newValue[1] = 3221225472LL;
  newValue[2] = sub_1002C5E6C;
  newValue[3] = &unk_1003F1578;
  objc_copyWeak(&v30, (id *)buf);
  id v29 = *(id *)(a1 + 56);
  id v28 = *(id *)(a1 + 40);
  if (v2) {
    objc_setProperty_atomic_copy(v2, v17, newValue, 152LL);
  }
  id v18 = *(id **)(a1 + 48);
  if (v18)
  {
    unsigned int v19 = (id *)v18[3];
    if (!v19)
    {
      id v20 = objc_alloc_init(&OBJC_CLASS___TaskQueue);
      id v21 = v18[3];
      v18[3] = v20;

      unsigned int v19 = (id *)v18[3];
      if (v19)
      {
        [v19[1] setName:@"com.apple.appstored.StoreQueueManager.tasks"];
        unsigned int v19 = (id *)v18[3];
      }
    }

    id v18 = v19;
  }

  uint64_t v31 = v2;
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v31, 1LL, v23));
  if (v18) {
    [v18[1] addOperations:v22 waitUntilFinished:1];
  }

  objc_destroyWeak(&v30);
  objc_destroyWeak((id *)buf);
}

void sub_1002C5E44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, id location)
{
}

void sub_1002C5E6C(uint64_t a1, int a2, void *a3, unint64_t a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (*(void *)(a1 + 40))
  {
    uint64_t v12 = ASDLogHandleForCategory(41LL);
    unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    uint64_t v14 = v13;
    if (v10)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        uint64_t v25 = (void *)objc_opt_class(&OBJC_CLASS___ManagedApplicationTask, v15);
        id v27 = v25;
        if (WeakRetained) {
          id Property = objc_getProperty(WeakRetained, v26, 120LL, 1);
        }
        else {
          id Property = 0LL;
        }
        id v29 = Property;
        uint64_t v30 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138544130;
        __int16 v34 = v25;
        __int16 v35 = 2114;
        id v36 = v29;
        __int16 v37 = 2114;
        uint64_t v38 = v30;
        __int16 v39 = 2114;
        id v40 = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "[%{public}@] [%{public}@] Complete for clientID: %{public}@ with error: %{public}@",  buf,  0x2Au);
      }

      uint64_t v16 = ASDErrorWithSafeUserInfo(v10);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    }

    else
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = (void *)objc_opt_class(&OBJC_CLASS___ManagedApplicationTask, v18);
        id v32 = v31;
        if (WeakRetained) {
          id v20 = objc_getProperty(WeakRetained, v19, 120LL, 1);
        }
        else {
          id v20 = 0LL;
        }
        id v21 = v20;
        uint64_t v22 = *(void *)(a1 + 32);
        id v23 = sub_1002406DC(a4);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        *(_DWORD *)__int128 buf = 138544386;
        __int16 v34 = v31;
        __int16 v35 = 2114;
        id v36 = v21;
        __int16 v37 = 2114;
        uint64_t v38 = v22;
        __int16 v39 = 2114;
        id v40 = v24;
        __int16 v41 = 1024;
        int v42 = a2;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[%{public}@] [%{public}@] Complete for clientID: %{public}@ with changeType: %{public}@  success: %{BOOL}d",  buf,  0x30u);
      }

      uint64_t v17 = 0LL;
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void *sub_1002C6130(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___StoreSinfArray;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 copy];
      uint64_t v5 = (void *)a1[1];
      a1[1] = v4;
    }
  }

  return a1;
}

id sub_1002C61AC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002C6224;
  block[3] = &unk_1003E9EA8;
  void block[4] = objc_opt_self(a1);
  if (qword_1004625C8 != -1) {
    dispatch_once(&qword_1004625C8, block);
  }
  return (id)qword_1004625C0;
}

void sub_1002C6224(uint64_t a1, uint64_t a2)
{
  id v2 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32), a2));
  id v3 = (void *)qword_1004625C0;
  qword_1004625C0 = (uint64_t)v2;
}

void sub_1002C6344(uint64_t a1)
{
  if (!a1) {
    return;
  }
  ASDSetIsDaemon(1LL);
  sub_100220F7C((uint64_t)&OBJC_CLASS___Storage, @"com.apple.appstored");
  id v2 = objc_alloc_init(&OBJC_CLASS___ASDLogFileOptions);
  [v2 setLogFileBaseName:@"appstored"];
  int v3 = MGGetBoolAnswer(@"InternalBuild");
  id v4 = [(id)CPSharedResourcesDirectory() stringByAppendingPathComponent:@"Library"];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 stringByAppendingPathComponent:@"Logs"]);

  if (v3)
  {
    objc_super v7 = (void *)objc_claimAutoreleasedReturnValue([v6 stringByAppendingPathComponent:@"com.apple.appstored"]);
    [v2 setLogDirectoryPath:v7];
  }

  else
  {
    objc_super v7 = (void *)objc_claimAutoreleasedReturnValue([v6 stringByAppendingPathComponent:@"CrashReporter"]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 stringByAppendingPathComponent:@"com.apple.appstored"]);
    [v2 setLogDirectoryPath:v8];
  }

  ASDDebugSetFileLoggingOptions(v2);
  uint64_t v9 = ASDLogHandleForCategory(9LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v179 = 136315394;
    v180 = "Nov 10 2024";
    __int16 v181 = 2080;
    id v182 = "02:53:41";
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting appstored (Built: %s %s)",  (uint8_t *)&v179,  0x16u);
  }

  id v11 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  unsigned __int8 v13 = [v12 isHRNMode];

  if ((v13 & 1) == 0)
  {
    id v14 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
    uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
    uint64_t v16 = (void *)v15;
    if (v15) {
      sub_10025585C(v15, &stru_1003EEA80);
    }
  }

  BOOL v17 = sub_100254120((uint64_t)&OBJC_CLASS___Migrator);
  uint64_t v18 = ASDLogHandleForCategory(17LL);
  unsigned int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if (v17)
  {
    if (v20)
    {
      LOWORD(v179) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Migrations needed",  (uint8_t *)&v179,  2u);
    }

    id v21 = sub_1002539B8((uint64_t)&OBJC_CLASS___Migrator);
  }

  else
  {
    if (v20)
    {
      CFPropertyListRef v22 = sub_1002FA704((uint64_t)&OBJC_CLASS___AppDefaultsManager);
      id v23 = (char *)objc_claimAutoreleasedReturnValue(v22);
      int v179 = 138543362;
      v180 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[Daemon] No migration required for build: %{public}@",  (uint8_t *)&v179,  0xCu);
    }
  }

  +[AMSEphemeralDefaults setHARLoggingItemLimit:](&OBJC_CLASS___AMSEphemeralDefaults, "setHARLoggingItemLimit:", 200LL);
  +[AMSMetrics setFlushDelayEnabled:](&OBJC_CLASS___AMSMetrics, "setFlushDelayEnabled:", 1LL);
  if (sub_1002F8BE0( (uint64_t)&OBJC_CLASS___AppDefaultsManager,  @"EnablePurchaseAccountFallback",  0LL)) {
    +[AMSEphemeralDefaults setPurchaseAccountFallback:]( &OBJC_CLASS___AMSEphemeralDefaults,  "setPurchaseAccountFallback:",  1LL);
  }
  id v24 = sub_1002B9840((uint64_t)&OBJC_CLASS___AssetSession);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  sub_1002B9960(v25);

  id v26 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device);
  id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  unsigned __int8 v28 = [v27 isHRNMode];

  if ((v28 & 1) != 0)
  {
    sub_1002C7508(a1);
  }

  else
  {
    notify_register_dispatch( "com.apple.adid.midchangedV1.5",  (int *)(a1 + 8),  *(dispatch_queue_t *)(a1 + 16),  &stru_1003F1600);
    notify_register_dispatch( "com.apple.fairplayd.resync-fpkeybag",  (int *)(a1 + 48),  *(dispatch_queue_t *)(a1 + 16),  &stru_1003F1620);
    id v29 = sub_100196040((uint64_t)&OBJC_CLASS___ActivityManager);
    id v30 = sub_10018F63C((uint64_t)&OBJC_CLASS___TestFlightExtensionSyncActivityManager);
    id v31 = sub_1002FE4E0((uint64_t)&OBJC_CLASS___ODRServiceDelegate);
    id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    unsigned __int8 v33 = sub_1002FE80C(v32, &byte_1004625B8);
    uint64_t v34 = ASDLogHandleForCategory(19LL);
    __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    id v36 = v35;
    if ((v33 & 1) != 0)
    {
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v179) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Registering for XPC Maintenance Task",  (uint8_t *)&v179,  2u);
      }

      xpc_activity_register( "com.apple.ondemandd.PeriodicLaunchServicesSyncActivity",  XPC_ACTIVITY_CHECK_IN,  &stru_1003F1A20);
      uint64_t v37 = ASDLogHandleForCategory(19LL);
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v179) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Registering for XPC Data Migration Event",  (uint8_t *)&v179,  2u);
      }

      __int16 v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
      [v39 addObserver:a1 selector:"_handleMigrationDidFinishNotification:" name:@"com.apple.datamigrator.migrationDidFinish" object:0];

      uint64_t v40 = ASDLogHandleForCategory(19LL);
      __int16 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v179) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Initializing ODRManager",  (uint8_t *)&v179,  2u);
      }

      id v42 = sub_1001C9810((uint64_t)&OBJC_CLASS___ODRManager);
      id v43 = sub_10030F240((uint64_t)&OBJC_CLASS___ODRDownloadManager);
      __int16 v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
      sub_1003118AC((uint64_t)v44);

      unsigned int v45 = objc_opt_new(&OBJC_CLASS___ODRAppReviewListener);
      __int16 v46 = *(void **)(a1 + 64);
      *(void *)(a1 + 64) = v45;

      uint64_t v47 = sub_1002C7600(@"com.apple.ondemandd.appreview", *(void **)(a1 + 64));
      uint64_t v48 = objc_claimAutoreleasedReturnValue(v47);
      int v49 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v48;

      double v50 = objc_opt_new(&OBJC_CLASS___ODRDiagnosticsListener);
      double v51 = *(void **)(a1 + 80);
      *(void *)(a1 + 80) = v50;

      uint64_t v52 = sub_1002C7600(@"com.apple.ondemandd.odrctl", *(void **)(a1 + 80));
      uint64_t v53 = objc_claimAutoreleasedReturnValue(v52);
      uint64_t v54 = *(void **)(a1 + 88);
      *(void *)(a1 + 8_Block_object_dispose(va, 8) = v53;

      unsigned __int8 v55 = objc_opt_new(&OBJC_CLASS___ODRDevtoolsListener);
      id v56 = *(void **)(a1 + 96);
      *(void *)(a1 + 96) = v55;

      uint64_t v57 = sub_1002C7600(@"com.apple.ondemandd.devtools", *(void **)(a1 + 96));
      uint64_t v58 = objc_claimAutoreleasedReturnValue(v57);
      id v59 = *(void **)(a1 + 104);
      *(void *)(a1 + 104) = v58;

      sub_1002C7508(a1);
    }

    else
    {
      if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v179) = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_ERROR,  "[Daemon] Failed to initialize ODR library paths",  (uint8_t *)&v179,  2u);
      }
    }

    sub_1002F0E04((uint64_t)&OBJC_CLASS___StoreKitServiceListener);
    id v60 = sub_10019899C((uint64_t)&OBJC_CLASS___LegacyActivityManager);
    id v61 = sub_1001995C0((uint64_t)&OBJC_CLASS___PurchaseManager);
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(21LL, 0LL);
    uint64_t v63 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    dispatch_async(v63, &stru_1003F1A00);
  }

  notify_post("com.apple.appstored.daemon.launched");
  __int16 v64 = objc_alloc_init(&OBJC_CLASS___LaunchServicesObserver);
  BOOL v65 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v64;

  uint64_t v66 = objc_alloc_init(&OBJC_CLASS___CleanupManager);
  sub_100246AA0((uint64_t)v66);
  id v67 = sub_1003085D4((uint64_t)&OBJC_CLASS___UserNotificationManager);
  id v68 = sub_10031705C((uint64_t)&OBJC_CLASS___AppInstallQueue);
  __int128 v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
  sub_1003171CC((uint64_t)v69);

  id v70 = sub_10023B9CC((uint64_t)&OBJC_CLASS___AppInstallScheduler);
  id v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
  sub_10023C018((uint64_t)v71, 8LL);

  id v72 = objc_alloc_init(&OBJC_CLASS___JobManagerListener);
  id v73 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v72;

  uint32_t v74 = sub_1002C7600(@"com.apple.appstored.xpc.jobmanager", *(void **)(a1 + 32));
  uint64_t v75 = objc_claimAutoreleasedReturnValue(v74);
  double v76 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v75;

  uint64_t v77 = objc_opt_new(&OBJC_CLASS___RequestBroker);
  uint64_t v78 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v77;

  BOOL v79 = objc_opt_new(&OBJC_CLASS___SoftwareUpdateListener);
  uint64_t v80 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = v79;

  id v81 = sub_1002C7600(@"com.apple.appstored.xpc.updates", *(void **)(a1 + 184));
  uint64_t v82 = objc_claimAutoreleasedReturnValue(v81);
  id v83 = *(void **)(a1 + 176);
  *(void *)(a1 + 176) = v82;

  id v84 = objc_opt_new(&OBJC_CLASS___StoreQueueListener);
  id v85 = *(void **)(a1 + 200);
  *(void *)(a1 + 200) = v84;

  id v86 = sub_1002C7600(@"com.apple.appstored.xpc.storequeue", *(void **)(a1 + 200));
  uint64_t v87 = objc_claimAutoreleasedReturnValue(v86);
  uint64_t v88 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = v87;

  uint64_t v89 = objc_opt_new(&OBJC_CLASS___XPCServiceCatalog);
  uint64_t v90 = ASDLogHandleForCategory(14LL);
  id v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
  if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v179) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v91,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting Diagnostic service",  (uint8_t *)&v179,  2u);
  }

  uint64_t v92 = @"Diagnostic";
  if (v89)
  {
    sub_1001E1094((uint64_t)v89, v92, 0LL);
    objc_setProperty_atomic_copy(v89, v93, &stru_1003F1660, 16LL);
  }

  else
  {
  }

  uint64_t v94 = ASDLogHandleForCategory(14LL);
  id v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
  if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v179) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v95,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting Installation service",  (uint8_t *)&v179,  2u);
  }

  id v96 = sub_1001A97C4((uint64_t)&OBJC_CLASS___InstallationService);
  id v97 = @"Install";
  if (v89)
  {
    sub_1001E1264((uint64_t)v89, v97, 0LL);
    objc_setProperty_atomic_copy(v89, v98, &stru_1003F16A0, 48LL);
  }

  else
  {
  }

  uint64_t v99 = ASDLogHandleForCategory(14LL);
  uint64_t v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
  if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v179) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v100,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting Library service",  (uint8_t *)&v179,  2u);
  }

  uint64_t v101 = @"Library";
  if (v89)
  {
    sub_1001E12D8((uint64_t)v89, v101, 0LL);
    objc_setProperty_atomic_copy(v89, v102, &stru_1003F16E0, 56LL);
  }

  else
  {
  }

  id v103 = sub_1002D16D8((uint64_t)&OBJC_CLASS___LibraryService);
  id v104 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device);
  id v105 = (void *)objc_claimAutoreleasedReturnValue(v104);
  if (([v105 isHRNMode] & 1) == 0)
  {

    goto LABEL_54;
  }

  id v106 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device);
  id v107 = (void *)objc_claimAutoreleasedReturnValue(v106);
  if ([v107 isHRNMode])
  {
    int has_internal_content = os_variant_has_internal_content("com.apple.appstored");

LABEL_54:
    uint64_t v109 = ASDLogHandleForCategory(14LL);
    id v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v179) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v110,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting Purchase service",  (uint8_t *)&v179,  2u);
    }

    uint64_t v111 = @"Purchase";
    if (v89)
    {
      sub_1001E14A8((uint64_t)v89, v111, 0LL);
      objc_setProperty_atomic_copy(v89, v112, &stru_1003F1720, 96LL);
    }

    else
    {
    }

    uint64_t v113 = ASDLogHandleForCategory(14LL);
    id v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
    if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v179) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v114,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting Purchase History service",  (uint8_t *)&v179,  2u);
    }

    uint64_t v115 = @"PurchaseHistory";
    if (v89)
    {
      sub_1001E1434((uint64_t)v89, v115, 0LL);
      objc_setProperty_atomic_copy(v89, v116, &stru_1003F1760, 88LL);
    }

    else
    {
    }

    goto LABEL_65;
  }

LABEL_65:
  id v117 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device);
  id v118 = (void *)objc_claimAutoreleasedReturnValue(v117);
  unsigned __int8 v119 = [v118 isHRNMode];

  if ((v119 & 1) == 0)
  {
    uint64_t v120 = ASDLogHandleForCategory(14LL);
    id v121 = (os_log_s *)objc_claimAutoreleasedReturnValue(v120);
    if (os_log_type_enabled(v121, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v179) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v121,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting AppStore service",  (uint8_t *)&v179,  2u);
    }

    uint64_t v122 = @"AppStore";
    if (v89)
    {
      sub_1001E1020((uint64_t)v89, v122, 0LL);
      objc_setProperty_atomic_copy(v89, v123, &stru_1003F17A0, 8LL);
    }

    else
    {
    }

    uint64_t v124 = ASDLogHandleForCategory(14LL);
    id v125 = (os_log_s *)objc_claimAutoreleasedReturnValue(v124);
    if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v179) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v125,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting FairPlay service",  (uint8_t *)&v179,  2u);
    }

    id v126 = (void *)objc_claimAutoreleasedReturnValue(+[FairPlayService entitlement](&OBJC_CLASS____TtC9appstored15FairPlayService, "entitlement"));
    if (v89)
    {
      sub_1001E117C((uint64_t)v89, v126, 0LL);
      objc_setProperty_atomic_copy(v89, v127, &stru_1003F17E0, 32LL);
    }

    else
    {
    }

    uint64_t v128 = ASDLogHandleForCategory(14LL);
    id v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v179) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting IAP Info service",  (uint8_t *)&v179,  2u);
    }

    id v130 = @"IAPHistory";
    uint64_t v131 = @"com.apple.appstored.iap-info";
    if (v89)
    {
      sub_1001E11F0((uint64_t)v89, v130, v131);
      objc_setProperty_atomic_copy(v89, v132, &stru_1003F1820, 40LL);
    }

    else
    {
    }

    uint64_t v133 = ASDLogHandleForCategory(14LL);
    id v134 = (os_log_s *)objc_claimAutoreleasedReturnValue(v133);
    if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v179) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v134,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting Metrics service",  (uint8_t *)&v179,  2u);
    }

    __int16 v135 = @"AppMetrics";
    if (v89)
    {
      sub_1001E134C((uint64_t)v89, v135, 0LL);
      objc_setProperty_atomic_copy(v89, v136, &stru_1003F1860, 64LL);
    }

    else
    {
    }

    uint64_t v137 = ASDLogHandleForCategory(14LL);
    id v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);
    if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v179) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v138,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting Repair service",  (uint8_t *)&v179,  2u);
    }

    id v139 = @"Repair";
    if (v89)
    {
      sub_1001E151C((uint64_t)v89, v139, 0LL);
      objc_setProperty_atomic_copy(v89, v140, &stru_1003F18A0, 104LL);
    }

    else
    {
    }

    uint64_t v141 = ASDLogHandleForCategory(14LL);
    uint64_t v142 = (os_log_s *)objc_claimAutoreleasedReturnValue(v141);
    if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v179) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v142,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting Restore service",  (uint8_t *)&v179,  2u);
    }

    id v143 = @"Restore";
    if (v89)
    {
      sub_1001E1590((uint64_t)v89, v143, 0LL);
      objc_setProperty_atomic_copy(v89, v144, &stru_1003F18E0, 112LL);
    }

    else
    {
    }

    uint64_t v145 = ASDLogHandleForCategory(14LL);
    id v146 = (os_log_s *)objc_claimAutoreleasedReturnValue(v145);
    if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v179) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v146,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting Update service",  (uint8_t *)&v179,  2u);
    }

    id v147 = @"Update";
    if (v89)
    {
      sub_1001E1604((uint64_t)v89, v147, 0LL);
      objc_setProperty_atomic_copy(v89, v148, &stru_1003F1920, 120LL);
    }

    else
    {
    }

    uint64_t v149 = ASDLogHandleForCategory(14LL);
    uint64_t v150 = (os_log_s *)objc_claimAutoreleasedReturnValue(v149);
    if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v179) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v150,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting Crossfire service",  (uint8_t *)&v179,  2u);
    }

    uint64_t v151 = @"Crossfire";
    if (v89)
    {
      sub_1001E1108((uint64_t)v89, v151, 0LL);
      objc_setProperty_atomic_copy(v89, v152, &stru_1003F1960, 24LL);
    }

    else
    {
    }

    uint64_t v153 = ASDLogHandleForCategory(14LL);
    id v154 = (os_log_s *)objc_claimAutoreleasedReturnValue(v153);
    if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v179) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v154,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Starting Ocelot service",  (uint8_t *)&v179,  2u);
    }

    id v155 = @"Ocelot";
    if (v89)
    {
      sub_1001E13C0((uint64_t)v89, v155, 0LL);
      objc_setProperty_atomic_copy(v89, v156, &stru_1003F19A0, 80LL);
    }

    else
    {
    }
  }

  id v157 = sub_1001E34BC((uint64_t)&OBJC_CLASS___XPCServiceBroker, v89, ASDServiceDaemonMachPort);
  __int128 v158 = *(void **)(a1 + 224);
  *(void *)(a1 + 224) = v157;

  dispatch_source_t v159 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_memorypressure, 0LL, 0x10uLL, 0LL);
  id v160 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v159;

  dispatch_source_set_event_handler(*(dispatch_source_t *)(a1 + 24), &stru_1003F15C0);
  dispatch_resume(*(dispatch_object_t *)(a1 + 24));
  sub_1001AE4DC((uint64_t)&OBJC_CLASS___XPCEventRelay);
  id v161 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device);
  __int128 v162 = (void *)objc_claimAutoreleasedReturnValue(v161);
  unsigned __int8 v163 = [v162 isHRNMode];

  if ((v163 & 1) == 0)
  {
    id v164 = sub_1001C66BC((uint64_t)&OBJC_CLASS___PurchaseHistoryManager);
    id v165 = (void *)objc_claimAutoreleasedReturnValue(v164);
    sub_1001C7520((uint64_t)v165, 5LL, 0LL, &stru_1003F19C0);

    id v166 = sub_10029C090((uint64_t)&OBJC_CLASS___IAPInfoManager);
    id v167 = (void *)objc_claimAutoreleasedReturnValue(v166);
    uint64_t v168 = sub_100316A0C((uint64_t)&OBJC_CLASS___XPCRequestToken, 1);
    id v169 = (void *)objc_claimAutoreleasedReturnValue(v168);
    sub_10029DB88((uint64_t)v167, v169, &stru_1003F19E0);

    id v170 =  +[SubscriptionEntitlementsCoordinator sharedInstance]( &OBJC_CLASS___SubscriptionEntitlementsCoordinator,  "sharedInstance");
    id v171 = sub_100320738((uint64_t)&OBJC_CLASS___FamilyManager);
    id v172 = sub_1001B782C((uint64_t)&OBJC_CLASS___BadgingCoordinator);
    id v173 = sub_100233508((uint64_t)&OBJC_CLASS___MetricsCoordinator);
    id v174 = sub_10028ECBC((uint64_t)&OBJC_CLASS___PushService);
    uint64_t v175 = objc_claimAutoreleasedReturnValue(v174);
    uint64_t v176 = (void *)v175;
    if (v175) {
      sub_10028F16C(v175, 0LL, 0LL);
    }
  }

  uint64_t v177 = ASDLogHandleForCategory(9LL);
  uint64_t v178 = (os_log_s *)objc_claimAutoreleasedReturnValue(v177);
  if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v179) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v178,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Startup complete",  (uint8_t *)&v179,  2u);
  }
}

void sub_1002C7508(uint64_t a1)
{
  id v2 = sub_1002FE4E0((uint64_t)&OBJC_CLASS___ODRServiceDelegate);
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  id v4 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v3;

  uint64_t v5 = sub_1002C7600(@"com.apple.ondemandd.client", *(void **)(a1 + 112));
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  objc_super v7 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v6;

  id v8 = objc_opt_new(&OBJC_CLASS___ODRLaunchServicesListener);
  uint64_t v9 = *(void **)(a1 + 128);
  *(void *)(a1 + 12_Block_object_dispose(va, 8) = v8;

  id v10 = sub_1002C7600(@"com.apple.ondemandd.launchservices", *(void **)(a1 + 128));
  uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v11;
}

void sub_1002C7594(id a1)
{
  uint64_t v1 = ASDLogHandleForCategory(9LL);
  id v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(v1);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEBUG,  "[Daemon] Received memory process limit warning",  v3,  2u);
  }
}

NSXPCListener *sub_1002C7600(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138412290;
    id v8 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Creating listener for service name: %@",  (uint8_t *)&v7,  0xCu);
  }

  uint64_t v5 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  v3);
  -[NSXPCListener setDelegate:](v5, "setDelegate:", v4);
  -[NSXPCListener resume](v5, "resume");

  return v5;
}

void sub_1002C76E8(id a1, int a2)
{
  uint64_t v2 = ASDLogHandleForCategory(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Update MID changed notification",  v10,  2u);
  }

  id v4 = objc_alloc_init(&OBJC_CLASS___RefreshMIDBasedAppSINFsTask);
  id v5 = sub_10020F1C0((uint64_t)&OBJC_CLASS___TaskQueue);
  uint64_t v6 = (id *)objc_claimAutoreleasedReturnValue(v5);
  uint64_t v11 = v4;
  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v11, 1LL));
  if (v6) {
    [v6[1] addOperations:v7 waitUntilFinished:1];
  }

  uint64_t v8 = ASDLogHandleForCategory(14LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Update MID changed notification complete",  v10,  2u);
  }
}

void sub_1002C7830(id a1, int a2)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS____TtC9appstored6LogKey);
  uint64_t v3 = ASDLogHandleForCategory(14LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v16 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[Daemon][%@] FairPlay sync keybag notification",  buf,  0xCu);
  }

  id v5 = objc_alloc_init(&OBJC_CLASS___RefetchKeybag);
  int v7 = v5;
  if (v5)
  {
    objc_setProperty_atomic_copy(v5, v6, v2, 32LL);
    v7->_userInitiated = 0;
  }

  uint64_t v8 = sub_1001B6534((id *)&v7->super.isa);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v14 = 0LL;
  unsigned int v10 = [v9 resultWithError:&v14];
  id v11 = v14;

  uint64_t v12 = ASDLogHandleForCategory(28LL);
  unsigned __int8 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412546;
    uint64_t v16 = v2;
    __int16 v17 = 1024;
    unsigned int v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "[Daemon][%@] Keybag refresh complete with result: %d",  buf,  0x12u);
  }
}

ASDDiagnosticServiceProtocol *__cdecl sub_1002C79B4(id a1)
{
  return (ASDDiagnosticServiceProtocol *)sub_100273D34((uint64_t)&OBJC_CLASS___DiagnosticService);
}

ASDInstallationServiceProtocol *__cdecl sub_1002C79C0(id a1)
{
  return (ASDInstallationServiceProtocol *)sub_1001A97C4((uint64_t)&OBJC_CLASS___InstallationService);
}

ASDAppLibraryServiceProtocol *__cdecl sub_1002C79CC(id a1)
{
  return (ASDAppLibraryServiceProtocol *)sub_1002D16D8((uint64_t)&OBJC_CLASS___LibraryService);
}

ASDPurchaseServiceProtocol *__cdecl sub_1002C79D8(id a1)
{
  return (ASDPurchaseServiceProtocol *)sub_10030B7EC((uint64_t)&OBJC_CLASS___PurchaseService);
}

ASDPurchaseHistoryServiceProtocol *__cdecl sub_1002C79E4(id a1)
{
  return (ASDPurchaseHistoryServiceProtocol *)sub_1002D6DFC((uint64_t)&OBJC_CLASS___PurchaseHistoryService);
}

ASDAppStoreServiceProtocol *__cdecl sub_1002C79F0(id a1)
{
  return (ASDAppStoreServiceProtocol *)sub_1001DB54C((uint64_t)&OBJC_CLASS___AppStoreService);
}

ASDFairPlayServiceProtocol *__cdecl sub_1002C79FC(id a1)
{
  return (ASDFairPlayServiceProtocol *)+[FairPlayService defaultService]( &OBJC_CLASS____TtC9appstored15FairPlayService,  "defaultService");
}

ASDIAPHistoryServiceProtocol *__cdecl sub_1002C7A08(id a1)
{
  return (ASDIAPHistoryServiceProtocol *)sub_1001F5C04((uint64_t)&OBJC_CLASS___IAPHistoryService);
}

ASDAppMetricsServiceProtocol *__cdecl sub_1002C7A14(id a1)
{
  return (ASDAppMetricsServiceProtocol *)sub_1002021C4((uint64_t)&OBJC_CLASS___AppMetricsService);
}

ASDRepairServiceProtocol *__cdecl sub_1002C7A20(id a1)
{
  return (ASDRepairServiceProtocol *)sub_1002F856C((uint64_t)&OBJC_CLASS___RepairService);
}

ASDRestoreServiceProtocol *__cdecl sub_1002C7A2C(id a1)
{
  return (ASDRestoreServiceProtocol *)sub_10020EB44((uint64_t)&OBJC_CLASS___RestoreService);
}

ASDUpdatesServiceProtocol *__cdecl sub_1002C7A38(id a1)
{
  return (ASDUpdatesServiceProtocol *)sub_1002DF56C((uint64_t)&OBJC_CLASS___UpdatesService);
}

ASDCrossfireServiceProtocol *__cdecl sub_1002C7A44(id a1)
{
  return (ASDCrossfireServiceProtocol *)sub_1002B30A4((uint64_t)&OBJC_CLASS___CrossfireService);
}

ASDOcelotServiceProtocol *__cdecl sub_1002C7A50(id a1)
{
  return (ASDOcelotServiceProtocol *)sub_10022EDCC((uint64_t)&OBJC_CLASS___OcelotService);
}

void sub_1002C7C8C(id a1)
{
  id v1 = sub_10021E048((uint64_t)&OBJC_CLASS___CacheDeleteCoordinator);
  id v4 = (id *)objc_claimAutoreleasedReturnValue(v1);
  id v2 = sub_1001C9810((uint64_t)&OBJC_CLASS___ODRManager);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v4) {
    objc_storeWeak(v4 + 7, v3);
  }
}

void sub_1002C7CF4(id a1, OS_xpc_object *a2)
{
  id v2 = a2;
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "[Daemon] Running the registered maintenance block",  (uint8_t *)&v10,  2u);
  }

  uint64_t v3 = -[KeepAlive initWithName:](objc_alloc(&OBJC_CLASS___KeepAlive), "initWithName:", @"ODR Maintenance");
  xpc_activity_state_t state = xpc_activity_get_state(v2);
  if (!state)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_DEFAULT,  "[Daemon] XPC Maintenance activity checking in",  (uint8_t *)&v10,  2u);
    }

    xpc_object_t v8 = xpc_activity_copy_criteria(v2);
    if (!v8)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v10) = 0;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_ERROR,  "[Daemon] No criteria set, correcting that",  (uint8_t *)&v10,  2u);
      }

      xpc_object_t v9 = xpc_dictionary_create(0LL, 0LL, 0LL);
      xpc_dictionary_set_int64(v9, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_1_DAY);
      xpc_dictionary_set_BOOL(v9, XPC_ACTIVITY_REPEATING, 1);
      xpc_dictionary_set_string(v9, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        int v10 = 138412290;
        xpc_object_t v11 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)&_os_log_default,  OS_LOG_TYPE_INFO,  "[Daemon] Setting the criteria to: %@",  (uint8_t *)&v10,  0xCu);
      }

      xpc_activity_set_criteria(v2, v9);

      xpc_object_t v8 = 0LL;
    }

    goto LABEL_14;
  }

  if (state == 2)
  {
    id v5 = sub_100185E88((uint64_t)&OBJC_CLASS___ODRBackgroundMaintenance);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    sub_100185F6C(v6);

    id v7 = sub_100185E88((uint64_t)&OBJC_CLASS___ODRBackgroundMaintenance);
    xpc_object_t v8 = (xpc_object_t)objc_claimAutoreleasedReturnValue(v7);
    sub_100186078((uint64_t)v8);
LABEL_14:
  }
}

id sub_1002C8134(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v28.receiver = a1;
    v28.super_class = (Class)&OBJC_CLASS___AppMetadata;
    a1 = objc_msgSendSuper2(&v28, "init");
    if (a1)
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v3 appPlatform]));
      [a1 setValue:v4 forProperty:@"app_platform"];

      id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
      [a1 setValue:v5 forProperty:@"bundle_id"];

      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleVersion]);
      if (v6)
      {
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleVersion]);
        [a1 setValue:v7 forProperty:@"bundle_version"];
      }

      xpc_object_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedName]);

      if (v8)
      {
        xpc_object_t v9 = (void *)objc_claimAutoreleasedReturnValue([v3 localizedName]);
        [a1 setValue:v9 forProperty:@"item_name"];
      }

      int v10 = (void *)objc_claimAutoreleasedReturnValue([v3 storeCohort]);

      if (v10)
      {
        xpc_object_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 storeCohort]);
        [a1 setValue:v11 forProperty:@"cohort"];
      }

      if ((uint64_t)[v3 storeExternalVersionID] >= 1)
      {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v3 storeExternalVersionID]));
        [a1 setValue:v12 forProperty:@"evid"];
      }

      unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v3 isArcade]));
      [a1 setValue:v13 forProperty:@"is_arcade"];

      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [v3 isBeta]));
      [a1 setValue:v14 forProperty:@"is_beta"];

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v3 isAppClip]));
      [a1 setValue:v15 forProperty:@"is_clip"];

      if ([v3 applicationType] == (id)1) {
        [a1 setValue:&__kCFBooleanTrue forProperty:@"is_system_app"];
      }
      uint64_t v16 = objc_claimAutoreleasedReturnValue([v3 deviceIdentifierForVendor]);
      if (v16)
      {
        __int16 v17 = (void *)v16;
        unsigned __int8 v18 = [v3 isAppClip];

        if ((v18 & 1) == 0)
        {
          unsigned int v19 = (void *)objc_claimAutoreleasedReturnValue([v3 deviceIdentifierForVendor]);
          [a1 setValue:v19 forProperty:@"device_vendor_id"];
        }
      }

      if ((uint64_t)[v3 storeItemID] >= 1)
      {
        BOOL v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v3 storeItemID]));
        [a1 setValue:v20 forProperty:@"item_id"];
      }

      id v21 = (void *)objc_claimAutoreleasedReturnValue([v3 shortVersionString]);

      if (v21)
      {
        CFPropertyListRef v22 = (void *)objc_claimAutoreleasedReturnValue([v3 shortVersionString]);
        [a1 setValue:v22 forProperty:@"short_version"];
      }

      id v23 = (void *)objc_claimAutoreleasedReturnValue([v3 storefront]);

      if (v23)
      {
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v3 storefront]);
        [a1 setValue:v24 forProperty:@"storefront"];
      }

      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v3 vendorName]);

      if (v25)
      {
        id v26 = (void *)objc_claimAutoreleasedReturnValue([v3 vendorName]);
        [a1 setValue:v26 forProperty:@"vendor_name"];
      }
    }
  }

  return a1;
}

id sub_1002C860C(void *a1)
{
  if (a1)
  {
    id v1 = sub_1001E26D0(a1, (uint64_t)@"bundle_id");
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }

  return a1;
}

id sub_1002C8630(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"item_id"]);
  }
  return a1;
}

id sub_1002C8654(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"evid"]);
  }
  return a1;
}

id sub_1002C8678(void *a1)
{
  if (!a1)
  {
    id v5 = 0LL;
    return v5;
  }

  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"timestamp"]);
  if ((objc_opt_respondsToSelector(v1, "doubleValue") & 1) != 0)
  {
    [v1 doubleValue];
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSince1970:"));
  }

  else
  {
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDate, v2);
    if ((objc_opt_isKindOfClass(v1, v4) & 1) == 0)
    {
      id v5 = 0LL;
      goto LABEL_8;
    }

    id v3 = v1;
  }

  id v5 = v3;
LABEL_8:

  return v5;
}

id sub_1002C8710(void *a1)
{
  if (a1)
  {
    id v1 = sub_1001E26D0(a1, (uint64_t)@"cohort");
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }

  return a1;
}

id sub_1002C8B88(void *a1)
{
  if (a1)
  {
    id v1 = sub_1001E26D0(a1, (uint64_t)@"device_vendor_id");
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }

  return a1;
}

id sub_1002C8BAC(void *a1)
{
  if (a1)
  {
    id v1 = sub_1001E26D0(a1, (uint64_t)@"bundle_version");
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }

  return a1;
}

id sub_1002C8BD0(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"item_name"]);
  }
  return a1;
}

id sub_1002C8BF4(id result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result valueForProperty:@"is_arcade"]);
    id v2 = [v1 BOOLValue];

    return v2;
  }

  return result;
}

id sub_1002C8C34(id result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result valueForProperty:@"is_beta"]);
    id v2 = [v1 BOOLValue];

    return v2;
  }

  return result;
}

id sub_1002C8C74(id result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result valueForProperty:@"is_clip"]);
    id v2 = [v1 BOOLValue];

    return v2;
  }

  return result;
}

id sub_1002C8CB4(id result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result valueForProperty:@"is_system_app"]);
    id v2 = [v1 BOOLValue];

    return v2;
  }

  return result;
}

id sub_1002C8CF4(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"short_version"]);
  }
  return a1;
}

id sub_1002C8D18(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"storefront"]);
  }
  return a1;
}

id sub_1002C8D7C(void *a1)
{
  if (a1)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 objectForKeyedSubscript:@"primary_content_hash"]);
    id v2 = sub_1001E3A60((uint64_t)&OBJC_CLASS___ODRContentHash, v1);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  }

  else
  {
    id v3 = 0LL;
  }

  return v3;
}

void *sub_1002C8DD4(void *a1)
{
  id v1 = a1;
  if (a1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1 objectForKeyedSubscript:@"local_url"]);
    if (v2)
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v2));
      id v4 = sub_1002C8D7C(v1);
      id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      uint64_t v6 = sub_1001E3B50(v5);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      id v1 = (void *)sub_1001ACAFC((uint64_t)&OBJC_CLASS___ODRAssetPack, v3, v7);
    }

    else
    {
      id v1 = 0LL;
    }
  }

  return v1;
}

char *sub_1002C8E8C(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  v6.receiver = a1;
  v6.super_class = (Class)&OBJC_CLASS___HashDigest;
  id v3 = (char *)objc_msgSendSuper2(&v6, "init");
  id v4 = v3;
  if (v3)
  {
    *((void *)v3 + 1) = a2;
    switch(a2)
    {
      case 2LL:
        CC_SHA256_Init((CC_SHA256_CTX *)(v3 + 16));
        break;
      case 1LL:
        CC_SHA1_Init((CC_SHA1_CTX *)(v3 + 16));
        break;
      case 0LL:
        CC_MD5_Init((CC_MD5_CTX *)(v3 + 16));
        break;
    }
  }

  return v4;
}

id sub_1002C8F1C(uint64_t a1, id a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  switch(v2)
  {
    case 2LL:
      __int128 v6 = 0u;
      __int128 v7 = 0u;
      CC_SHA256_Final((unsigned __int8 *)&v6, (CC_SHA256_CTX *)(a1 + 16));
      uint64_t v3 = 32LL;
      goto LABEL_8;
    case 1LL:
      __int128 v6 = 0uLL;
      LODWORD(v7) = 0;
      CC_SHA1_Final((unsigned __int8 *)&v6, (CC_SHA1_CTX *)(a1 + 16));
      uint64_t v3 = 20LL;
      goto LABEL_8;
    case 0LL:
      __int128 v6 = 0uLL;
      CC_MD5_Final((unsigned __int8 *)&v6, (CC_MD5_CTX *)(a1 + 16));
      uint64_t v3 = 16LL;
LABEL_8:
      id v4 = sub_1002C9004((uint64_t)&OBJC_CLASS___HashDigest, (unsigned __int8 *)&v6, v3);
      a2 = (id)objc_claimAutoreleasedReturnValue(v4);
      break;
  }

  return a2;
}

id sub_1002C9004(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  for (unint64_t i = -[NSMutableString initWithCapacity:](objc_alloc(&OBJC_CLASS___NSMutableString), "initWithCapacity:", 2 * a3);
        a3;
        --a3)
  {
    unsigned int v6 = *a2++;
    -[NSMutableString appendFormat:](i, "appendFormat:", @"%02x", v6);
  }

  id v7 = -[NSMutableString copy](i, "copy");

  return v7;
}

uint64_t sub_1002C908C(uint64_t result, const void *a2, CC_LONG a3)
{
  if (result)
  {
    uint64_t v3 = *(void *)(result + 8);
    switch(v3)
    {
      case 2LL:
        return CC_SHA256_Update((CC_SHA256_CTX *)(result + 16), a2, a3);
      case 1LL:
        return CC_SHA1_Update((CC_SHA1_CTX *)(result + 16), a2, a3);
      case 0LL:
        return CC_MD5_Update((CC_MD5_CTX *)(result + 16), a2, a3);
    }
  }

  return result;
}

id sub_1002C90C4(id result, void *a2)
{
  if (result)
  {
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472LL;
    v2[2] = sub_1002C911C;
    void v2[3] = &unk_1003EB690;
    void v2[4] = result;
    return [a2 enumerateByteRangesUsingBlock:v2];
  }

  return result;
}

uint64_t sub_1002C911C(uint64_t a1, char *a2, uint64_t a3, unint64_t a4)
{
  if (!HIDWORD(a4)) {
    return sub_1002C908C(*(void *)(a1 + 32), a2, a4);
  }
  unint64_t v8 = 0LL;
  CC_LONG v9 = a4;
  do
  {
    uint64_t result = sub_1002C908C(*(void *)(a1 + 32), &a2[v8], v9);
    v8 += 0xFFFFFFFFLL;
    ++v9;
  }

  while (v8 < a4);
  return result;
}

PurchaseHistoryUpdateRequestContext *sub_1002C91B4( uint64_t a1, void *a2, int64_t a3, void *a4, void *a5, unint64_t a6)
{
  id v12 = a5;
  id v13 = a4;
  id v14 = a2;
  objc_opt_self(a1);
  uint64_t v15 = objc_alloc(&OBJC_CLASS___PurchaseHistoryUpdateRequestContext);
  id v16 = v14;
  id v17 = v13;
  id v18 = v12;
  if (v15)
  {
    v21.receiver = v15;
    v21.super_class = (Class)&OBJC_CLASS___PurchaseHistoryUpdateRequestContext;
    unsigned int v19 = (PurchaseHistoryUpdateRequestContext *)objc_msgSendSuper2(&v21, "init");
    uint64_t v15 = v19;
    if (v19)
    {
      objc_storeStrong((id *)&v19->_revision, a2);
      v15->_accountID = a3;
      objc_storeStrong((id *)&v15->_requestingAccount, a4);
      objc_storeStrong((id *)&v15->_clientInfo, a5);
      v15->_purchaseHistoryContext = a6;
    }
  }

  return v15;
}

__CFString *sub_1002C9300(uint64_t a1)
{
  if (a1 > 14)
  {
    if (a1 > 39)
    {
      switch(a1)
      {
        case '(':
          return @"Install";
        case '-':
          return @"PostProcess";
        case '2':
          return @"Postamble";
      }
    }

    else
    {
      switch(a1)
      {
        case 15LL:
          return @"Started";
        case 20LL:
          return @"Preamble";
        case 30LL:
          return @"Download";
      }
    }

    goto LABEL_30;
  }

  if (a1 > -16)
  {
    switch(a1)
    {
      case -15LL:
        return @"Policy";
      case -10LL:
        return @"Paused";
      case 10LL:
        return @"Waiting";
    }

    goto LABEL_30;
  }

  if (a1 == -40) {
    return @"Finished";
  }
  if (a1 == -30) {
    return @"Canceled";
  }
  if (a1 != -20)
  {
LABEL_30:
    id v1 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unknown (%ld)",  a1));
    return v1;
  }

  id v1 = @"Failed";
  return v1;
}

__CFString *sub_1002C9440(unint64_t a1)
{
  if (a1 >= 5) {
    return (__CFString *)(id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unknown (%ld)",  a1));
  }
  else {
    return off_1003F1A40[a1];
  }
}

__CFString *sub_1002C9490(uint64_t a1)
{
  if (!a1)
  {
    id v7 = @"none (0)";
    return v7;
  }

  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v3 = -21LL;
  do
  {
    uint64_t v4 = (1 << (v3 + 22));
    if ((v4 & a1) == 0) {
      continue;
    }
    if ((1 << (v3 + 22)) > 0x7FFuLL)
    {
      if ((1 << (v3 + 22)) < 0x10000uLL)
      {
        if ((1 << (v3 + 22)) < 0x2000uLL)
        {
          if (v4 == 2048)
          {
            id v5 = @"diagnostics ping";
          }

          else
          {
            if (v4 != 4096)
            {
LABEL_49:
              id v5 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"unknown (%lu)",  (1 << (v3 + 22))));
              goto LABEL_51;
            }

            id v5 = @"policy";
          }
        }

        else
        {
          switch(v4)
          {
            case 0x2000LL:
              id v5 = @"prioritized";
              break;
            case 0x4000LL:
              id v5 = @"purchased";
              break;
            case 0x8000LL:
              id v5 = @"phase reset";
              break;
            default:
              goto LABEL_49;
          }
        }
      }

      else if ((1 << (v3 + 22)) >= 0x80000uLL)
      {
        switch(v4)
        {
          case 0x80000LL:
            id v5 = @"upgrade to interactive";
            break;
          case 0x100000LL:
            id v5 = @"vpp";
            break;
          case 0x200000LL:
            id v5 = @"cleanup";
            break;
          default:
            goto LABEL_49;
        }
      }

      else
      {
        switch(v4)
        {
          case 0x10000LL:
            id v5 = @"resumed installations";
            break;
          case 0x20000LL:
            id v5 = @"scheduled";
            break;
          case 0x40000LL:
            id v5 = @"timer";
            break;
          default:
            goto LABEL_49;
        }
      }
    }

    else
    {
      if ((1 << (v3 + 22)) <= 0x3FuLL)
      {
        id v5 = @"none (0)";
        switch(1 << (v3 + 22))
        {
          case 0:
            goto LABEL_51;
          case 1:
          case 3:
          case 5:
          case 6:
          case 7:
            goto LABEL_49;
          case 2:
            id v5 = @"device security";
            goto LABEL_51;
          case 4:
            id v5 = @"bootstrapped installations";
            goto LABEL_51;
          case 8:
            id v5 = @"daemon start";
            goto LABEL_51;
          default:
            if (v4 == 16)
            {
              id v5 = @"finished installations";
            }

            else
            {
              if (v4 != 32) {
                goto LABEL_49;
              }
              id v5 = @"hydrate job";
            }

            break;
        }

        goto LABEL_51;
      }

      if ((1 << (v3 + 22)) <= 0xFFuLL)
      {
        if (v4 == 64)
        {
          id v5 = @"imported installations";
        }

        else
        {
          if (v4 != 128) {
            goto LABEL_49;
          }
          id v5 = @"optimal download window reached";
        }
      }

      else
      {
        switch(v4)
        {
          case 256LL:
            id v5 = @"non ordered restores completed";
            break;
          case 512LL:
            id v5 = @"ordered restores completed";
            break;
          case 1024LL:
            id v5 = @"paused installations";
            break;
          default:
            goto LABEL_49;
        }
      }
    }

NotifyTestFlightClientTask *sub_1002C9750(uint64_t a1, NSError *a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  objc_opt_self(a1);
  CC_LONG v9 = objc_opt_new(&OBJC_CLASS___NotifyTestFlightClientTask);
  int v10 = *(void **)&v9->super._success;
  *(void *)&v9->super._success = v7;
  id v11 = v7;

  v9->super._error = a2;
  id v12 = (ASDBundle *)[v8 copy];

  bundle = v9->_bundle;
  v9->_bundle = v12;

  return v9;
}

void sub_1002C9AB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1002C9AD4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002C9AE4(uint64_t a1)
{
}

void sub_1002C9AEC(uint64_t a1, char a2, id obj)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), obj);
  id v5 = obj;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void *sub_1002C9B88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_opt_self(a1);
  id v8 = (void *)objc_opt_new(v7);
  uint64_t v9 = (void *)v8[5];
  void v8[5] = v6;
  id v10 = v6;

  id v11 = (void *)v8[6];
  v8[6] = v5;

  return v8;
}

void sub_1002CA0E8(uint64_t a1, void *a2)
{
  id v15 = a2;
  if ([v15 storeItemID])
  {
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 48LL);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v15 storeItemID]));
    LOBYTE(v3) = [v3 containsObject:v4];

    if ((v3 & 1) == 0
      && ([v15 hasMIDBasedSINF] & 1) == 0
      && ([v15 isBeta] & 1) == 0
      && ([v15 isProfileValidated] & 1) == 0
      && ([v15 isAppClip] & 1) == 0
      && ([v15 isPlaceholder] & 1) == 0
      && (![v15 isInstalled]
       || ([v15 missingRequiredSINF] & 1) == 0))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v15 appStoreToolsBuildVersion]);
      if (v5)
      {
        unsigned int v6 = [*(id *)(a1 + 40) containsObject:v5];
        char v7 = v6;
        id v8 = (void *)(a1 + 48);
        if (!*(void *)(a1 + 48))
        {
          if (!v6) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
      }

      else
      {
        id v8 = (void *)(a1 + 48);
        if (!*(void *)(a1 + 48))
        {
LABEL_20:

          goto LABEL_21;
        }

        char v7 = 0;
      }

      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v15 bundlePath]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@/Info.plist",  v9));
      id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithContentsOfFile:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithContentsOfFile:",  v10));

      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKeyedSubscript:@"ITSDRMScheme"]);
      if (v12)
      {
        id v13 = v12;
        v7 |= [v12 isEqualToString:*v8] ^ 1;
      }

      if ((v7 & 1) == 0) {
        goto LABEL_20;
      }
LABEL_19:
      id v14 = sub_100270C0C(objc_alloc(&OBJC_CLASS___UpdatableApp), v15, &off_10040CF28);
      [*(id *)(a1 + 56) addObject:v14];

      goto LABEL_20;
    }
  }

void sub_1002CA2E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "ams_iTunesAccountWithDSID:", v3));

  if (v5)
  {
    unsigned int v6 = sub_100230C60((id *)objc_alloc(&OBJC_CLASS___UpdatesTask), v5, *(void **)(a1 + 32), 1);
    id v8 = v6;
    if (v6) {
      objc_setProperty_nonatomic_copy(v6, v7, *(id *)(*(void *)(a1 + 40) + 40LL), 64LL);
    }
    uint64_t v9 = *(void **)(a1 + 40);
    id v24 = 0LL;
    unsigned int v10 = [v9 runSubTask:v8 returningError:&v24];
    id v11 = v24;
    if (v10)
    {
      if (v8) {
        id v12 = v8[9];
      }
      else {
        id v12 = 0LL;
      }
      id v13 = (id *)v12;
      id v14 = sub_1002E4538(v13);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

      if ([v15 count])
      {
        uint64_t v16 = ASDLogHandleForCategory(40LL);
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v18 = *(void *)(*(void *)(a1 + 40) + 40LL);
          id v19 = [v15 count];
          BOOL v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_DSID"));
          *(_DWORD *)__int128 buf = 138412802;
          uint64_t v26 = v18;
          __int16 v27 = 2048;
          id v28 = v19;
          __int16 v29 = 2114;
          id v30 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "[%@]: Found %lu forced updates for account: %{public}@",  buf,  0x20u);
        }

        [*(id *)(a1 + 48) addObjectsFromArray:v15];
      }
    }

    else
    {
      uint64_t v21 = ASDLogHandleForCategory(40LL);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_ERROR))
      {
        uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 40LL);
        id v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_DSID"));
        *(_DWORD *)__int128 buf = 138412802;
        uint64_t v26 = v22;
        __int16 v27 = 2114;
        id v28 = v23;
        __int16 v29 = 2114;
        id v30 = v11;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  OS_LOG_TYPE_ERROR,  "[%@]: Failed to fetch forced updates for account: %{public}@ error: %{public}@",  buf,  0x20u);
      }
    }
  }
}

id sub_1002CA5CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_self(a1);
  if (v3)
  {
    char v6 = *((_BYTE *)v3 + 10);
    id v7 = objc_getProperty(v3, v4, 40LL, 1);
    unint64_t v8 = *((void *)v3 + 2);
    if ((v6 & 1) != 0)
    {
      id v11 = sub_1002CA678(v5, v7, v8);
      uint64_t v10 = objc_claimAutoreleasedReturnValue(v11);
      goto LABEL_5;
    }
  }

  else
  {
    unint64_t v8 = 0LL;
    id v7 = 0LL;
  }

  uint64_t v9 = sub_1002CA824(v5, v7, v8);
  uint64_t v10 = objc_claimAutoreleasedReturnValue(v9);
LABEL_5:
  id v12 = (void *)v10;

  return v12;
}

AMSDialogRequest *sub_1002CA678(uint64_t a1, void *a2, unint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = objc_opt_self(a1);
  id v7 = objc_alloc_init(&OBJC_CLASS___AMSDialogRequest);
  uint64_t v8 = ASDLocalizedString(@"CONSTRAINED_PROMPT_TITLE");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  -[AMSDialogRequest setTitle:](v7, "setTitle:", v9);

  if (a3)
  {
    uint64_t v10 = ASDLocalizedString(@"CONSTRAINED_PROMPT_BODY_UPDATE_%@_%@");
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    id v12 = sub_1002D6684((uint64_t)&OBJC_CLASS___EvaluatorDownload, a3);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v11, v5, v13));

    -[AMSDialogRequest setMessage:](v7, "setMessage:", v14);
  }

  else
  {
    uint64_t v15 = ASDLocalizedString(@"CONSTRAINED_PROMPT_BODY_UPDATE_%@");
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v15);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v11, v5));

    -[AMSDialogRequest setMessage:](v7, "setMessage:", v13);
  }

  uint64_t v16 = ASDLocalizedString(@"CONSTRAINED_PROMPT_BUTTON_UPDATE");
  id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  id v18 = sub_1002CA9D0(v6, v17);
  id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  -[AMSDialogRequest setButtonActions:](v7, "setButtonActions:", v19);

  BOOL v20 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDialogRequest buttonActions](v7, "buttonActions"));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 lastObject]);
  -[AMSDialogRequest setDefaultAction:](v7, "setDefaultAction:", v21);

  sub_100321874(v7, @"constrainedNetworkUpdate");
  return v7;
}

AMSDialogRequest *sub_1002CA824(uint64_t a1, void *a2, unint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = objc_opt_self(a1);
  id v7 = objc_alloc_init(&OBJC_CLASS___AMSDialogRequest);
  uint64_t v8 = ASDLocalizedString(@"CONSTRAINED_PROMPT_TITLE");
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  -[AMSDialogRequest setTitle:](v7, "setTitle:", v9);

  if (a3)
  {
    uint64_t v10 = ASDLocalizedString(@"CONSTRAINED_PROMPT_BODY_DOWNLOAD_%@_%@");
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    id v12 = sub_1002D6684((uint64_t)&OBJC_CLASS___EvaluatorDownload, a3);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v11, v5, v13));

    -[AMSDialogRequest setMessage:](v7, "setMessage:", v14);
  }

  else
  {
    uint64_t v15 = ASDLocalizedString(@"CONSTRAINED_PROMPT_BODY_DOWNLOAD_%@");
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v15);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v11, v5));

    -[AMSDialogRequest setMessage:](v7, "setMessage:", v13);
  }

  uint64_t v16 = ASDLocalizedString(@"CONSTRAINED_PROMPT_BUTTON_DOWNLOAD");
  id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  id v18 = sub_1002CA9D0(v6, v17);
  id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  -[AMSDialogRequest setButtonActions:](v7, "setButtonActions:", v19);

  BOOL v20 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDialogRequest buttonActions](v7, "buttonActions"));
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 lastObject]);
  -[AMSDialogRequest setDefaultAction:](v7, "setDefaultAction:", v21);

  sub_100321874(v7, @"constrainedNetworkDownload");
  return v7;
}

id sub_1002CA9D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = objc_alloc_init(&OBJC_CLASS___AMSDialogAction);
  [v4 setTitle:v3];

  [v4 setIdentifier:@"LowDataModePromptActionDownload"];
  sub_1001D7974(v4, @"download");
  id v5 = objc_alloc_init(&OBJC_CLASS___AMSDialogAction);
  uint64_t v6 = ASDLocalizedString(@"CONSTRAINED_PROMPT_BUTTON_CANCEL");
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  [v5 setTitle:v7];

  [v5 setIdentifier:@"LowDataModePromptActionCancel"];
  [v5 setStyle:2];
  sub_1001D7974(v5, @"cancel");
  v10[0] = v5;
  v10[1] = v4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v10, 2LL));

  return v8;
}

id sub_1002CAAFC(id a1, void *a2, int a3)
{
  id v5 = a2;
  if (a1)
  {
    v158.receiver = a1;
    v158.super_class = (Class)&OBJC_CLASS___StoreItem;
    a1 = objc_msgSendSuper2(&v158, "init");
    if (a1)
    {
      id v6 = v5;
      id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v9 = sub_1001DF1DC(v6, @"thinned-app");
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      *((_BYTE *)a1 + 20) = a3;
      *((_BYTE *)a1 + 22) = v10 == 0LL;
      *((_BYTE *)a1 + 21) = [v10 count] != 0;
      if (v10 && (a3 & 1) == 0)
      {
        id v11 = sub_10025947C((uint64_t)&OBJC_CLASS___StoreAsset, v10);
        id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
        -[NSMutableArray addObject:](v7, "addObject:", v12);

        id v13 = sub_1002598A4((uint64_t)&OBJC_CLASS___StoreAsset, v10);
        id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v14);
      }

      id v15 = sub_10025947C((uint64_t)&OBJC_CLASS___StoreAsset, v6);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      -[NSMutableArray addObject:](v7, "addObject:", v16);
      id v17 = sub_1002598A4((uint64_t)&OBJC_CLASS___StoreAsset, v6);
      id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      -[NSMutableArray addObjectsFromArray:](v8, "addObjectsFromArray:", v18);

      id v19 = sub_100259988((uint64_t)&OBJC_CLASS___StoreAsset, v7, a3);
      uint64_t v20 = objc_claimAutoreleasedReturnValue(v19);
      uint64_t v21 = (void *)*((void *)a1 + 9);
      *((void *)a1 + 9) = v20;

      id v22 = -[NSMutableArray copy](v8, "copy");
      id v23 = (void *)*((void *)a1 + 8);
      *((void *)a1 + _Block_object_dispose((const void *)(v9 - 96), 8) = v22;

      id v24 = v6;
      id v25 = sub_1001DF1DC(v24, @"metadata");
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      id v27 = sub_1001DF594(v26, @"alternateIconName");
      uint64_t v28 = objc_claimAutoreleasedReturnValue(v27);
      __int16 v29 = (void *)*((void *)a1 + 3);
      *((void *)a1 + 3) = v28;

      if (*((void *)a1 + 3))
      {
        uint64_t v30 = ASDLogHandleForCategory(25LL);
        id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v157 = *((void *)a1 + 3);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v160 = v157;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEBUG,  "(StoreItem) Received value for 'alternateIconName': %@",  buf,  0xCu);
        }
      }

      if (v26 && sub_1001DEDAC(v26, @"isCustomBrowserEngineApp", 0LL))
      {
        id v32 = (void *)*((void *)a1 + 4);
        *((void *)a1 + 4) = &off_10040DF90;
      }

      id v33 = sub_1001DF594(v26, @"artistName");
      uint64_t v34 = objc_claimAutoreleasedReturnValue(v33);
      __int16 v35 = (void *)*((void *)a1 + 6);
      *((void *)a1 + 6) = v34;

      id v36 = sub_1001DF594(v26, @"kind");
      uint64_t v37 = objc_claimAutoreleasedReturnValue(v36);
      uint64_t v38 = (void *)*((void *)a1 + 28);
      *((void *)a1 + 2_Block_object_dispose((const void *)(v9 - 96), 8) = v37;

      id v39 = sub_1001DEDF8(v26, @"itemId");
      uint64_t v40 = objc_claimAutoreleasedReturnValue(v39);
      __int16 v41 = (void *)*((void *)a1 + 26);
      *((void *)a1 + 26) = v40;

      id v42 = sub_1001DF594(v26, @"itemName");
      uint64_t v43 = objc_claimAutoreleasedReturnValue(v42);
      __int16 v44 = (void *)*((void *)a1 + 27);
      *((void *)a1 + 27) = v43;

      id v45 = sub_1001DEDF8(v26, @"softwareVersionExternalIdentifier");
      uint64_t v46 = objc_claimAutoreleasedReturnValue(v45);
      uint64_t v47 = (void *)*((void *)a1 + 18);
      *((void *)a1 + 1_Block_object_dispose((const void *)(v9 - 96), 8) = v46;

      id v48 = sub_1001DF594(v24, @"artworkURL");
      uint64_t v49 = objc_claimAutoreleasedReturnValue(v48);
      double v50 = (void *)*((void *)a1 + 7);
      *((void *)a1 + 7) = v49;

      if (!*((void *)a1 + 7))
      {
        double v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@.%@.%@",  @"artwork-urls",  @"default",  @"url"));
        id v52 = sub_1001DF5F4(v24, v51);
        uint64_t v53 = objc_claimAutoreleasedReturnValue(v52);
        uint64_t v54 = (void *)*((void *)a1 + 7);
        *((void *)a1 + 7) = v53;
      }

      id v55 = sub_1001DF594(v26, @"softwareVersionBundleId");
      uint64_t v56 = objc_claimAutoreleasedReturnValue(v55);
      uint64_t v57 = (void *)*((void *)a1 + 12);
      *((void *)a1 + 12) = v56;

      id v58 = sub_1001DF594(v26, @"bundleDisplayName");
      uint64_t v59 = objc_claimAutoreleasedReturnValue(v58);
      id v60 = (void *)*((void *)a1 + 11);
      *((void *)a1 + 11) = v59;

      id v61 = sub_1001DF594(v26, @"bundleShortVersionString");
      uint64_t v62 = objc_claimAutoreleasedReturnValue(v61);
      uint64_t v63 = (void *)*((void *)a1 + 13);
      *((void *)a1 + 13) = v62;

      id v64 = sub_1001DF594(v26, @"bundleVersion");
      uint64_t v65 = objc_claimAutoreleasedReturnValue(v64);
      uint64_t v66 = (void *)*((void *)a1 + 14);
      *((void *)a1 + 14) = v65;

      if (v26)
      {
        *((_BYTE *)a1 + 11) = sub_1001DEDAC(v26, @"hasMessagesExtension", 0LL);
        unsigned __int8 v67 = sub_1001DEDAC(v26, @"launchProhibited", 0LL);
      }

      else
      {
        unsigned __int8 v67 = 0;
        *((_BYTE *)a1 + 11) = 0;
      }

      *((_BYTE *)a1 + 17) = v67;
      id v68 = sub_1001DF594(v26, @"messagesIconUrl");
      uint64_t v69 = objc_claimAutoreleasedReturnValue(v68);
      id v70 = (void *)*((void *)a1 + 29);
      *((void *)a1 + 29) = v69;

      id v71 = sub_1001DEDF8(v26, @"hasOrEverHasHadIAP");
      uint64_t v72 = objc_claimAutoreleasedReturnValue(v71);
      id v73 = (void *)*((void *)a1 + 21);
      *((void *)a1 + 21) = v72;

      if (v26)
      {
        *((_BYTE *)a1 + 12) = sub_1001DEDAC(v26, @"appleWatchEnabled", 0LL);
        *((_BYTE *)a1 + 13) = sub_1001DEDAC(v26, @"WKRunsIndependentlyOfCompanionApp", 0LL);
        unsigned __int8 v74 = sub_1001DEDAC(v26, @"WKWatchOnly", 0LL);
      }

      else
      {
        unsigned __int8 v74 = 0;
        *((_WORD *)a1 + 6) = 0;
      }

      *((_BYTE *)a1 + 14) = v74;
      id v75 = sub_1001DF594(v26, @"genre");
      uint64_t v76 = objc_claimAutoreleasedReturnValue(v75);
      uint64_t v77 = (void *)*((void *)a1 + 19);
      *((void *)a1 + 19) = v76;

      id v78 = sub_1001DEDF8(v26, @"genreId");
      uint64_t v79 = objc_claimAutoreleasedReturnValue(v78);
      uint64_t v80 = (void *)*((void *)a1 + 20);
      *((void *)a1 + 20) = v79;

      id v81 = sub_1001DEC94(v26, @"subgenres");
      uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(v81);
      id v83 = sub_1002D64A4(v82);
      id v84 = (void *)objc_claimAutoreleasedReturnValue(v83);
      id v85 = sub_10031D77C(v84, &stru_1003F1AC0);
      uint64_t v86 = objc_claimAutoreleasedReturnValue(v85);
      uint64_t v87 = (void *)*((void *)a1 + 40);
      *((void *)a1 + 40) = v86;

      id v88 = sub_1001DF1DC(v26, @"rating");
      uint64_t v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
      uint64_t v90 = v89;
      if (v89)
      {
        id v91 = sub_1001DF594(v89, @"label");
        uint64_t v92 = objc_claimAutoreleasedReturnValue(v91);
        SEL v93 = (void *)*((void *)a1 + 34);
        *((void *)a1 + 34) = v92;

        id v94 = sub_1001DEDF8(v90, @"rank");
        uint64_t v95 = objc_claimAutoreleasedReturnValue(v94);
        id v96 = (void *)*((void *)a1 + 35);
        *((void *)a1 + 35) = v95;
      }

      if (v26)
      {
        *((_BYTE *)a1 + 9) = sub_1001DEDAC(v26, @"gameCenterEnabled", 0LL);
        unsigned __int8 v97 = sub_1001DEDAC(v26, @"gameCenterEverEnabled", 0LL);
      }

      else
      {
        unsigned __int8 v97 = 0;
        *((_BYTE *)a1 + 9) = 0;
      }

      *((_BYTE *)a1 + 10) = v97;
      if (v24)
      {
        *((_BYTE *)a1 + _Block_object_dispose((const void *)(v9 - 96), 8) = sub_1001DEDAC(v24, @"is-auto-download", 0LL);
        *((_BYTE *)a1 + 16) = sub_1001DEDAC(v24, @"isRedownload", 0LL);
        unsigned __int8 v98 = sub_1001DEDAC(v24, @"is-purchased-redownload", 0LL);
      }

      else
      {
        unsigned __int8 v98 = 0;
        *((_BYTE *)a1 + _Block_object_dispose((const void *)(v9 - 96), 8) = 0;
        *((_BYTE *)a1 + 16) = 0;
      }

      *((_BYTE *)a1 + 1_Block_object_dispose((const void *)(v9 - 96), 8) = v98;
      id v99 = sub_1001DF594(v24, @"redownload-params");
      uint64_t v100 = objc_claimAutoreleasedReturnValue(v99);
      uint64_t v101 = (void *)*((void *)a1 + 32);
      *((void *)a1 + 32) = v100;

      id v102 = sub_1001DF594(v24, @"purchaseDate");
      uint64_t v103 = objc_claimAutoreleasedReturnValue(v102);
      id v104 = (void *)*((void *)a1 + 31);
      *((void *)a1 + 31) = v103;

      id v105 = sub_1001DF594(v26, @"releaseDate");
      uint64_t v106 = objc_claimAutoreleasedReturnValue(v105);
      id v107 = (void *)*((void *)a1 + 33);
      *((void *)a1 + 33) = v106;

      id v108 = sub_1001DF594(v26, @"s");
      uint64_t v109 = objc_claimAutoreleasedReturnValue(v108);
      id v110 = (void *)*((void *)a1 + 37);
      *((void *)a1 + 37) = v109;

      if (!*((void *)a1 + 37))
      {
        id v111 = sub_1001DEDF8(v26, @"s");
        SEL v112 = (void *)objc_claimAutoreleasedReturnValue(v111);
        uint64_t v113 = objc_claimAutoreleasedReturnValue([v112 stringValue]);
        id v114 = (void *)*((void *)a1 + 37);
        *((void *)a1 + 37) = v113;
      }

      if (v26) {
        id v115 = sub_1001DEDAC(v26, @"iad-attribution", 0LL);
      }
      else {
        id v115 = 0LL;
      }
      uint64_t v116 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v115));
      id v117 = (void *)*((void *)a1 + 22);
      *((void *)a1 + 22) = v116;

      id v118 = sub_1001DF594(v26, @"iad-conversion-date");
      uint64_t v119 = objc_claimAutoreleasedReturnValue(v118);
      uint64_t v120 = (void *)*((void *)a1 + 23);
      *((void *)a1 + 23) = v119;

      id v121 = sub_1001DF594(v26, @"iad-impression-date");
      uint64_t v122 = objc_claimAutoreleasedReturnValue(v121);
      SEL v123 = (void *)*((void *)a1 + 24);
      *((void *)a1 + 24) = v122;

      id v124 = sub_1001DF594(v24, @"install-verification-token");
      uint64_t v125 = objc_claimAutoreleasedReturnValue(v124);
      id v126 = (void *)*((void *)a1 + 25);
      *((void *)a1 + 25) = v125;

      if (v24) {
        unsigned __int8 v127 = sub_1001DEDAC(v24, @"b2bCustomApp", 0LL);
      }
      else {
        unsigned __int8 v127 = 0;
      }
      *((_BYTE *)a1 + 15) = v127;
      id v128 = sub_1001DF594(v26, @"storeCohort");
      uint64_t v129 = objc_claimAutoreleasedReturnValue(v128);
      id v130 = (void *)*((void *)a1 + 39);
      *((void *)a1 + 39) = v129;

      id v131 = sub_1001DF1DC(v26, @"UIRequiredDeviceCapabilities");
      uint64_t v132 = objc_claimAutoreleasedReturnValue(v131);
      uint64_t v133 = (void *)*((void *)a1 + 16);
      *((void *)a1 + 16) = v132;

      if (v26) {
        unsigned __int8 v134 = sub_1001DEDAC(v26, @"is32BitOnly", 0LL);
      }
      else {
        unsigned __int8 v134 = 0;
      }
      *((_BYTE *)a1 + 19) = v134;
      id v135 = sub_1001DF1DC(v26, @"nameTranscriptions");
      uint64_t v136 = objc_claimAutoreleasedReturnValue(v135);
      uint64_t v137 = (void *)*((void *)a1 + 42);
      *((void *)a1 + 42) = v136;

      id v138 = sub_1001DF594(v24, @"cancel-download-url");
      uint64_t v139 = objc_claimAutoreleasedReturnValue(v138);
      SEL v140 = (void *)*((void *)a1 + 15);
      *((void *)a1 + 15) = v139;

      id v141 = sub_1001DF594(v24, @"download-id");
      uint64_t v142 = objc_claimAutoreleasedReturnValue(v141);
      id v143 = (void *)*((void *)a1 + 38);
      *((void *)a1 + 3_Block_object_dispose((const void *)(v9 - 96), 8) = v142;

      SEL v144 = sub_1001DEFF8(v24, @"app-receipt");
      uint64_t v145 = objc_claimAutoreleasedReturnValue(v144);
      id v146 = (void *)*((void *)a1 + 5);
      *((void *)a1 + 5) = v145;

      id v147 = sub_1001DF69C(v24, @"preflightPackageURL");
      uint64_t v148 = objc_claimAutoreleasedReturnValue(v147);
      uint64_t v149 = (void *)*((void *)a1 + 30);
      *((void *)a1 + 30) = v148;

      id v150 = sub_1001DF1DC(v24, @"externalPurchaseLinkOutTokenInfo");
      uint64_t v151 = objc_claimAutoreleasedReturnValue(v150);
      SEL v152 = (void *)*((void *)a1 + 43);
      *((void *)a1 + 43) = v151;

      id v153 = sub_1001DF594(v26, @"software-platform");
      id v154 = (void *)objc_claimAutoreleasedReturnValue(v153);
      if ([v154 isEqualToString:@"ios"]
        || ![v154 isEqualToString:@"macos"])
      {
        uint64_t v155 = 1LL;
      }

      else
      {
        uint64_t v155 = 2LL;
      }

      *((void *)a1 + 36) = v155;
    }
  }

  return a1;
}

void *sub_1002CB4AC(void *a1, void *a2, char a3)
{
  id v5 = a2;
  if (a1)
  {
    id v6 = sub_100303B74((uint64_t)&OBJC_CLASS___MIStoreMetadata, a1);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    a1 = v7;
    if ((a3 & 1) == 0) {
      [v7 setVariantID:0];
    }
    if (v5)
    {
      sub_1003042C8(a1, v5);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_DSID"));
      [a1 setPurchaserID:v8];
    }
  }

  return a1;
}

id sub_1002CB9C4(id a1, NSDictionary *a2)
{
  uint64_t v2 = a2;
  id v3 = sub_100208ABC(objc_alloc(&OBJC_CLASS___StoreItemSubGenre), v2);

  return v3;
}

id sub_1002CBA08(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 48LL, 1);
  }
  return result;
}

id sub_1002CBA1C(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 96LL, 1);
  }
  return result;
}

id sub_1002CBA30(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 208LL, 1);
  }
  return result;
}

id sub_1002CBA44(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 216LL, 1);
  }
  return result;
}

void *sub_1002CBC50(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  v29.receiver = a1;
  v29.super_class = (Class)&OBJC_CLASS___MetricsContext;
  id v3 = objc_msgSendSuper2(&v29, "init");
  id v4 = v3;
  if (v3)
  {
    v3[4] = a2;
    id v5 = objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey);
    id v6 = sub_1002CBF24((uint64_t)&OBJC_CLASS___MetricsContext, v4[4]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = -[LogKey initWithBase:](v5, "initWithBase:", v7);
    id v9 = (void *)v4[9];
    v4[9] = v8;

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"com.apple.appstored.%@.events",  v4[9]));
    id v11 = sub_10023369C((uint64_t)&OBJC_CLASS___MetricsCoordinator, v4[4]);
    uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);
    id v13 = (void *)v4[8];
    v4[8] = v12;

    id v14 = -[KeepAlive initWithName:](objc_alloc(&OBJC_CLASS___KeepAlive), "initWithName:", v10);
    id v15 = (void *)v4[7];
    v4[7] = v14;

    uint64_t v16 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v17 = (void *)v4[12];
    v4[12] = v16;

    [(id)v4[12] timeIntervalSince1970];
    v4[11] = (uint64_t)v18;
    id v19 = (void *)v4[8];
    if (v19 || (uint64_t v25 = v4[4]) == 0 || v25 == 7)
    {
      [v19 timeIntervalSince1970];
      v4[15] = (uint64_t)v20;
    }

    else
    {
      uint64_t v26 = ASDLogHandleForCategory(3LL);
      id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = v4[9];
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v31 = v28;
        _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "[%@] Interval start date not set",  buf,  0xCu);
      }
    }

    uint64_t v21 = 0LL;
    switch(v4[4])
    {
      case 1LL:
        id v22 = @"xp_amp_app_usage_analytics";
        goto LABEL_7;
      case 2LL:
        id v22 = @"xp_amp_app_usage_dnu";
        goto LABEL_7;
      case 3LL:
        id v22 = @"xp_amp_app_usage_arcade";
        goto LABEL_7;
      case 4LL:
        id v22 = @"xp_amp_usage_detailed";
        goto LABEL_7;
      case 5LL:
        uint64_t v21 = @"on_device_personalization";
        break;
      case 7LL:
        id v22 = @"xp_ase_arcade_subs";
LABEL_7:
LABEL_9:
        uint64_t v21 = v22;
        break;
      default:
        break;
    }

    id v23 = (void *)v4[19];
    v4[19] = v21;
  }

  return v4;
}

CFStringRef sub_1002CBF24(uint64_t a1, uint64_t a2)
{
  else {
    return off_1003F1AE0[a2 - 1];
  }
}

void *sub_1002CBF68(uint64_t a1, uint64_t a2)
{
  return sub_1002CBC50(objc_alloc(&OBJC_CLASS___MetricsContext), a2);
}

void *sub_1002CBF9C(void *a1, uint64_t a2)
{
  if (a1)
  {
    unint64_t v2 = a1[4] - 1LL;
    if (v2 <= 4 && ((0x1Du >> v2) & 1) != 0) {
      id v3 = (void *)objc_opt_class(*off_1003F1B18[v2], a2);
    }
    else {
      id v3 = 0LL;
    }
    a1 = v3;
  }

  return a1;
}

void sub_1002CBFEC(uint64_t a1)
{
  if (a1)
  {
    sub_100233490((uint64_t)&OBJC_CLASS___MetricsCoordinator, *(void *)(a1 + 32));
    unint64_t v2 = sub_10023369C((uint64_t)&OBJC_CLASS___MetricsCoordinator, *(void *)(a1 + 32));
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    uint64_t v4 = ASDLogHandleForCategory(3LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 72);
      if (v3)
      {
        [v3 timeIntervalSince1970];
        uint64_t v8 = (uint64_t)v7;
      }

      else
      {
        uint64_t v8 = 0LL;
      }

      int v9 = 138412546;
      uint64_t v10 = v6;
      __int16 v11 = 2048;
      uint64_t v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[%@] Recorded start interval as: %{time_t}ld",  (uint8_t *)&v9,  0x16u);
    }
  }

void sub_1002CC0EC(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

void sub_1002CC130(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 56), a2);
  }
}

void sub_1002CC140(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 144), a2);
  }
}

void sub_1002CC364(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  sub_1002CEFEC((uint64_t)&OBJC_CLASS___ODRLaunchServicesObserver, v5, a2);
  if ((a2 & 1) != 0)
  {
    uint64_t v43 = a1;
    uint64_t v6 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(+[LSDatabaseContext sharedDatabaseContext](&OBJC_CLASS___LSDatabaseContext, "sharedDatabaseContext"));
    unsigned int v45 = [v46 startAccessingReturningError:0];
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    id v47 = v5;
    id obj = v5;
    id v7 = [obj countByEnumeratingWithState:&v50 objects:v58 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v51;
      do
      {
        for (unint64_t i = 0LL; i != v8; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v51 != v9) {
            objc_enumerationMutation(obj);
          }
          __int16 v11 = *(void **)(*((void *)&v50 + 1) + 8LL * (void)i);
          uint64_t v12 = objc_autoreleasePoolPush();
          id v13 = objc_alloc(&OBJC_CLASS___LSApplicationRecord);
          id v49 = 0LL;
          id v14 = -[LSApplicationRecord initForInstallMachineryWithBundleIdentifier:placeholder:error:]( v13,  "initForInstallMachineryWithBundleIdentifier:placeholder:error:",  v11,  1LL,  &v49);
          id v15 = v49;
          if (v15)
          {
            uint64_t v16 = ASDLogHandleForCategory(14LL);
            id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138543618;
              id v55 = v11;
              __int16 v56 = 2114;
              id v57 = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Failed to fetch record for placeholder app %{public}@: %{public}@",  buf,  0x16u);
            }
          }

          if (objc_msgSend(v14, "installType", v43) == (id)7
            || [v14 installType] == (id)8
            || [v14 installType] == (id)9)
          {
            -[NSMutableArray addObject:](v6, "addObject:", v11);
          }

          objc_autoreleasePoolPop(v12);
        }

        id v8 = [obj countByEnumeratingWithState:&v50 objects:v58 count:16];
      }

      while (v8);
    }

    double v18 = v46;
    if (v45) {
      [v46 stopAccessing];
    }
    if (-[NSMutableArray count](v6, "count", v43))
    {
      uint64_t v19 = ASDLogHandleForCategory(9LL);
      double v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = (void *)objc_opt_class(*(void *)(v44 + 32), v21);
        id v23 = v22;
        id v24 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v6, "componentsJoinedByString:", @", "));
        *(_DWORD *)__int128 buf = 138543618;
        id v55 = v22;
        __int16 v56 = 2114;
        id v57 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "[%{public}@]: Apps offloaded: [%{public}@]",  buf,  0x16u);
      }

      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[UpdatesManager sharedManager](&OBJC_CLASS___UpdatesManager, "sharedManager"));
      [v25 verifyPendingUpdates:v6];

      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[LaunchHistory shared](&OBJC_CLASS____TtC9appstored13LaunchHistory, "shared"));
      [v26 clearLaunchHistoryWithBundleIDs:obj];

      id v27 = sub_1002252F4((uint64_t)&OBJC_CLASS___ASDNotification, v6);
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      id v29 = sub_1002E78A4((uint64_t)&OBJC_CLASS___XPCNotificationCenter);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      sub_1002E79EC((uint64_t)v30, v28);
    }

    id v5 = v47;
  }

  else
  {
    uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[UpdatesManager sharedManager](&OBJC_CLASS___UpdatesManager, "sharedManager"));
    [v31 verifyUpdatesFollowingExternalAppInstall:v5];

    uint64_t v32 = ASDLogHandleForCategory(14LL);
    id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "componentsJoinedByString:", @", "));
      *(_DWORD *)__int128 buf = 138543362;
      id v55 = v34;
      _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Checking to see if apps need to be migrated to managed: [%{public}@]",  buf,  0xCu);
    }

    __int16 v35 = objc_alloc_init(&OBJC_CLASS___MigrateToManagedTask);
    uint64_t v6 = (NSMutableArray *)v35;
    if (v35) {
      objc_setProperty_nonatomic_copy(v35, v36, v5, 80LL);
    }
    id v37 = sub_10020F1C0((uint64_t)&OBJC_CLASS___TaskQueue);
    uint64_t v38 = objc_claimAutoreleasedReturnValue(v37);
    id v39 = (void *)v38;
    if (v38) {
      [*(id *)(v38 + 8) addOperation:v6];
    }

    id v40 = sub_10021E048((uint64_t)&OBJC_CLASS___CacheDeleteCoordinator);
    __int16 v41 = (id *)objc_claimAutoreleasedReturnValue(v40);
    sub_10021F29C(v41);

    id v42 = sub_10022D6AC((uint64_t)&OBJC_CLASS___AppLedger);
    double v18 = (void *)objc_claimAutoreleasedReturnValue(v42);
    sub_10022D748((uint64_t)v18, v5);
  }
}

void sub_1002CC808(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 userInfo]);
    if (v6)
    {
      id v7 = objc_alloc_init(&OBJC_CLASS___NSArray);
      id v8 = (id)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"isPlaceholder"]);

      if (v8) {
        id v8 = sub_1001DEDAC(v6, @"isPlaceholder", 0LL);
      }
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"bundleIDs"]);

      if (v9)
      {
        id v10 = sub_1001DEC94(v6, @"bundleIDs");
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

        __int128 v21 = 0u;
        __int128 v22 = 0u;
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        id v7 = v11;
        id v12 = -[NSArray countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v19,  v23,  16LL);
        if (v12)
        {
          id v14 = v12;
          uint64_t v15 = *(void *)v20;
          while (2)
          {
            uint64_t v16 = 0LL;
            do
            {
              if (*(void *)v20 != v15) {
                objc_enumerationMutation(v7);
              }
              uint64_t v17 = *(void *)(*((void *)&v19 + 1) + 8LL * (void)v16);
              uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSString, v13);
              if ((objc_opt_isKindOfClass(v17, v18) & 1) == 0)
              {

                goto LABEL_18;
              }

              uint64_t v16 = (char *)v16 + 1;
            }

            while (v14 != v16);
            id v14 = -[NSArray countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v19,  v23,  16LL);
            if (v14) {
              continue;
            }
            break;
          }
        }
      }

      if (-[NSArray count](v7, "count", (void)v19)) {
        v5[2](v5, v8, v7);
      }
LABEL_18:
    }
  }
}

void sub_1002CCB1C(id a1, BOOL a2, NSArray *a3)
{
  id v4 = a3;
  sub_1002CF7C0((uint64_t)&OBJC_CLASS___ODRLaunchServicesObserver, v4);
  if (!a2)
  {
    id v5 = sub_10021E048((uint64_t)&OBJC_CLASS___CacheDeleteCoordinator);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    sub_10021F4E8(v6, v4);

    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[LaunchHistory shared](&OBJC_CLASS____TtC9appstored13LaunchHistory, "shared"));
    [v7 clearLaunchHistoryWithBundleIDs:v4];

    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[UpdatesManager sharedManager](&OBJC_CLASS___UpdatesManager, "sharedManager"));
    [v8 verifyPendingUpdates:v4];

    id v9 = sub_100233508((uint64_t)&OBJC_CLASS___MetricsCoordinator);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    sub_10023502C((uint64_t)v10, v4, 3LL);

    sub_1002F3980((uint64_t)&OBJC_CLASS___ManageSubscriptionsPrompter, v4);
    id v11 = sub_10022D6AC((uint64_t)&OBJC_CLASS___AppLedger);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    sub_10022E670((uint64_t)v12, v4);
  }

  if (-[NSArray containsObject:](v4, "containsObject:", @"com.apple.TVAppStore"))
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[UpdatesManager sharedManager](&OBJC_CLASS___UpdatesManager, "sharedManager"));
    [v13 dropAllUpdatesIncludingVPP:0];

    id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
    [v14 removePersistentDomainForName:@"com.apple.TVAppStore"];

    uint64_t v15 = ASDLogHandleForCategory(14LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Reset App Store defaults on uninstall",  v17,  2u);
    }
  }
}

id *sub_1002CCCC4(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a2;
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)&OBJC_CLASS___RequestThrottleRecord;
    id v14 = (id *)objc_msgSendSuper2(&v16, "init");
    a1 = v14;
    if (v14)
    {
      objc_storeStrong(v14 + 1, a3);
      objc_storeStrong(a1 + 3, a4);
      objc_storeStrong(a1 + 2, a5);
      objc_storeStrong(a1 + 4, a2);
    }
  }

  return a1;
}

double sub_1002CCDA4(void *a1, void *a2)
{
  if (!a1) {
    return 0.0;
  }
  id v3 = a2;
  objc_msgSend(v3, "timeIntervalSinceDate:", objc_getProperty(a1, v4, 32, 1));
  double v6 = v5;

  return v6;
}

id sub_1002CCE04(id result, void *a2)
{
  if (result)
  {
    unint64_t v2 = result;
    id v3 = a2;
    id v5 = objc_msgSend(objc_getProperty(v2, v4, 16, 1), "isEqualToString:", v3);

    return v5;
  }

  return result;
}

id *sub_1002CD12C(void *a1, void *a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  v21[0] = @"artwork_url";
  v21[1] = @"automatic_type";
  v21[2] = @"approved";
  v21[3] = @"arcade";
  void v21[4] = @"bundle_id";
  void v21[5] = @"bundle_name";
  void v21[6] = @"bundle_url";
  v21[7] = @"bundle_version";
  v21[8] = @"cancel_if_duplicate";
  v21[9] = @"client_id";
  v21[10] = @"client_type";
  v21[11] = @"companion_bundle_id";
  v21[12] = @"coordinator_id";
  v21[13] = @"coordinator_intent";
  v21[14] = @"external_id";
  v21[15] = @"gizmo_pairing_id";
  v21[16] = @"has_messages_extension";
  v21[17] = @"item_id";
  v21[18] = @"launch_prohibited";
  v21[19] = @"log_code";
  v21[20] = @"messages_artwork_url";
  v21[21] = @"metrics_install_type";
  v21[22] = @"placeholder_entitlements";
  v21[23] = @"post_processing_state";
  v21[24] = @"priority";
  v21[25] = @"remote_install";
  v21[26] = @"requires_rosetta";
  v21[27] = @"restore_type";
  v21[28] = @"runs_on_apple_silicon";
  v21[29] = @"runs_on_intel";
  v21[30] = @"software_platform";
  v21[31] = @"source_type";
  v21[32] = @"store_metadata";
  v21[33] = @"supports_32bit_only";
  v21[34] = @"update_type";
  v21[35] = @"IFNULL(app_install.priority, 0)";
  id v5 = a3;
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v21, 36LL));
  id v8 = -[SQLiteMemoryEntity initWithDatabaseEntity:properties:]( objc_alloc(&OBJC_CLASS___AppInstall),  "initWithDatabaseEntity:properties:",  v6,  v7);

  v20[0] = @"archive_type";
  v20[1] = @"bytes_offset";
  void v20[2] = @"data_promise_id";
  v20[3] = @"initial_odr_size";
  void v20[4] = @"package_url";
  void v20[5] = @"variant_id";
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v20, 6LL));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 connection]);

  id v11 = sub_100323E4C(v8, v10, v9);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  id v13 = v8;
  id v14 = v12;
  v19.receiver = a1;
  v19.super_class = (Class)&OBJC_CLASS___AppInstallPreambleTask;
  uint64_t v15 = (id *)objc_msgSendSuper2(&v19, "init");
  objc_super v16 = v15;
  if (v15)
  {
    objc_storeStrong(v15 + 6, v8);
    objc_storeStrong(v16 + 8, v12);
    v16[5] = sub_1001E2698(v16[6], (uint64_t)@"automatic_type");
    v16[10] = sub_1001E2698(v16[6], (uint64_t)@"restore_type");
    v16[11] = sub_1001E2698(v16[6], (uint64_t)@"source_type");
    v16[12] = sub_1001E2698(v16[6], (uint64_t)@"update_type");
  }

  uint64_t v17 = v16;
  return v17;
}

id sub_1002CD4E4(void *a1)
{
  if (a1)
  {
    id v1 = a1;
    objc_sync_enter(v1);
    id v2 = v1[9];
    objc_sync_exit(v1);
  }

  else
  {
    id v2 = 0LL;
  }

  return v2;
}

id *sub_1002CD538(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  objc_opt_self(a1);
  id v9 = sub_1002CE7BC((id *)objc_alloc(&OBJC_CLASS___AppInstallPreambleResponse), a2, 0LL, v8, v7);

  return v9;
}

id *sub_1002CD5AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  objc_opt_self(a1);
  id v6 = sub_1002CE7BC((id *)objc_alloc(&OBJC_CLASS___AppInstallPreambleResponse), a2, (void *)2, 0LL, v5);

  return v6;
}

id *sub_1002CD610(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  objc_opt_self(a1);
  id v9 = sub_1002CE7BC((id *)objc_alloc(&OBJC_CLASS___AppInstallPreambleResponse), a2, (void *)2, v8, v7);

  return v9;
}

id *sub_1002CE7BC(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v10 = a4;
  id v11 = a5;
  if (a1)
  {
    v14.receiver = a1;
    v14.super_class = (Class)&OBJC_CLASS___AppInstallPreambleResponse;
    id v12 = (id *)objc_msgSendSuper2(&v14, "init");
    a1 = v12;
    if (v12)
    {
      v12[1] = a2;
      void v12[4] = a3;
      objc_storeStrong(v12 + 2, a4);
      objc_storeStrong(a1 + 3, a5);
    }
  }

  return a1;
}

void sub_1002CEE20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = ASDLogHandleForCategory(25LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v12 = 138412546;
      uint64_t v13 = v10;
      __int16 v14 = 2114;
      id v15 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "[%@]: Purchase completed with error: %{public}@",  (uint8_t *)&v12,  0x16u);
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%@]: Purchase completed successfully",  (uint8_t *)&v12,  0xCu);
  }

  sub_1002CEF58(*(_BYTE **)(a1 + 40), v6);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_1002CEF58(_BYTE *a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    sub_1001BA9FC(a1, v3);
    a1[24] = [v3 success];
    id v7 = (id)objc_claimAutoreleasedReturnValue([v3 error]);

    uint64_t v4 = ASDErrorWithSafeUserInfo(v7);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    objc_setProperty_atomic_copy(a1, v6, v5, 32LL);
  }

void sub_1002CEFEC(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  uint64_t v6 = objc_opt_self(a1);
  id v9 = -[KeepAlive initWithName:]( objc_alloc(&OBJC_CLASS___KeepAlive),  "initWithName:",  @"com.apple.appstored.ODRLaunchServicesObserver");
  id v7 = sub_100185E88((uint64_t)&OBJC_CLASS___ODRBackgroundMaintenance);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  sub_100185F6C(v8);

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002CF0B0;
  v10[3] = &unk_1003F1BD0;
  char v11 = a3;
  void v10[4] = v6;
  [v5 enumerateObjectsUsingBlock:v10];
}

void sub_1002CF0B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v23 = 0LL;
  uint64_t v4 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "initWithBundleIdentifier:allowPlaceholder:error:",  v3,  1LL,  &v23);
  id v5 = v23;
  if (v5)
  {
    uint64_t v6 = ASDLogHandleForCategory(19LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543618;
      uint64_t v25 = v3;
      __int16 v26 = 2114;
      id v27 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "Error looking up app with id %{public}@: %{public}@",  buf,  0x16u);
    }
  }

  if (*(_BYTE *)(a1 + 40))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = (char *)-[LSApplicationRecord installType](v4, "installType");
    objc_opt_self(v8);
    if ((unint64_t)(v9 - 7) < 3)
    {
      uint64_t v10 = objc_alloc(&OBJC_CLASS___ODRApplication);
      char v11 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord bundleIdentifier](v4, "bundleIdentifier"));
      int v12 = sub_1002D941C(v10, v11);

      uint64_t v13 = *(void *)(a1 + 32);
      __int16 v14 = v12;
      objc_opt_self(v13);
      uint64_t v15 = ASDLogHandleForCategory(19LL);
      objc_super v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v25 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Handling application demotion: %{public}@",  buf,  0xCu);
      }

      uint64_t v17 = sub_100186EC4(objc_alloc(&OBJC_CLASS___ODRApplicationPurgeTask), v14, 4LL);
      sub_1001E2DEC((uint64_t)&OBJC_CLASS___ODRTaskQueue, v17, 17LL);

      goto LABEL_20;
    }

    if (*(_BYTE *)(a1 + 40)) {
      goto LABEL_15;
    }
  }

  if (!v4)
  {
LABEL_15:
    uint64_t v20 = ASDLogHandleForCategory(19LL);
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 138543362;
      uint64_t v25 = v3;
      _os_log_debug_impl( (void *)&_mh_execute_header,  (os_log_t)v14,  OS_LOG_TYPE_DEBUG,  "Application %{public}@ is invalid, ignoring the install notification from LaunchServices",  buf,  0xCu);
    }
  }

  else
  {
    id v18 = sub_1002D98DC((uint64_t)&OBJC_CLASS___ODRApplication, v4);
    objc_super v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    if (v19)
    {
      __int16 v14 = v19;
      sub_1002CF3C0(*(void *)(a1 + 32), v19);
    }

    else
    {
      uint64_t v21 = ASDLogHandleForCategory(19LL);
      __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v25 = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_ERROR,  "Application %{public}@ wasn't installed, ignoring the install notification from LaunchServices",  buf,  0xCu);
      }

      __int16 v14 = 0LL;
    }
  }

void sub_1002CF3C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = ASDLogHandleForCategory(19LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138543362;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Handling application installation: %{public}@",  (uint8_t *)&buf,  0xCu);
  }

  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v25 = 0x2020000000LL;
  uint64_t v26 = 1LL;
  id v6 = sub_1001B53D0((uint64_t)&OBJC_CLASS___ODRDatabaseStore);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  void v19[2] = sub_1002CF9F4;
  v19[3] = &unk_1003EB858;
  p___int128 buf = &buf;
  id v8 = v3;
  id v20 = v8;
  [v7 readUsingSession:v19];

  uint64_t v9 = *(void *)(*((void *)&buf + 1) + 24LL);
  switch(v9)
  {
    case 0LL:
      uint64_t v10 = ASDLogHandleForCategory(19LL);
      char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)__int128 v22 = 138543362;
      id v23 = v8;
      int v12 = "Cleaning up after installation for %{public}@ as ODR is no longer supported";
      break;
    case 1LL:
      uint64_t v13 = ASDLogHandleForCategory(19LL);
      char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)__int128 v22 = 138543362;
      id v23 = v8;
      int v12 = "Ignoring installation for %{public}@ as it does not appear to support ODR";
      break;
    case 2LL:
      uint64_t v14 = ASDLogHandleForCategory(19LL);
      char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)__int128 v22 = 138543362;
      id v23 = v8;
      int v12 = "Handling installation for %{public}@ as a new ODR application";
      break;
    case 3LL:
      uint64_t v15 = ASDLogHandleForCategory(19LL);
      char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)__int128 v22 = 138543362;
      id v23 = v8;
      int v12 = "Handling installation for %{public}@ as an updated ODR application";
      break;
    case 4LL:
      uint64_t v16 = ASDLogHandleForCategory(19LL);
      char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)__int128 v22 = 138543362;
      id v23 = v8;
      int v12 = "Handling installation for %{public}@ as an ODR application needing repair";
      break;
    case 5LL:
      uint64_t v17 = ASDLogHandleForCategory(19LL);
      char v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_17;
      }
      *(_DWORD *)__int128 v22 = 138543362;
      id v23 = v8;
      int v12 = "Ignoring installation for %{public}@ as it already up to date";
      break;
    default:
      goto LABEL_18;
  }

  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, v22, 0xCu);
LABEL_17:

  uint64_t v9 = *(void *)(*((void *)&buf + 1) + 24LL);
LABEL_18:
  if ((unint64_t)(v9 - 2) < 2)
  {
    id v18 = sub_100290554(objc_alloc(&OBJC_CLASS___ODRApplicationImportTask), v8);
    sub_1001E2DEC((uint64_t)&OBJC_CLASS___ODRTaskQueue, v18, 17LL);
    goto LABEL_24;
  }

  if (v9 == 4)
  {
    id v18 = sub_1001E9630(objc_alloc(&OBJC_CLASS___ODRApplicationRepairTask), v8);
    sub_1001E2DEC((uint64_t)&OBJC_CLASS___ODRTaskQueue, v18, 17LL);
    goto LABEL_24;
  }

  if (!v9)
  {
    id v18 = sub_1002B5024(objc_alloc(&OBJC_CLASS___ODRApplicationCleanTask), v8);
    sub_1001E2DEC((uint64_t)&OBJC_CLASS___ODRTaskQueue, v18, 17LL);
LABEL_24:
  }

  _Block_object_dispose(&buf, 8);
}

void sub_1002CF77C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_1002CF7C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  id v7 = -[KeepAlive initWithName:]( objc_alloc(&OBJC_CLASS___KeepAlive),  "initWithName:",  @"com.apple.appstored.ODRLaunchServicesObserver");
  id v5 = sub_100185E88((uint64_t)&OBJC_CLASS___ODRBackgroundMaintenance);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  sub_100185F6C(v6);

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1002CF87C;
  v8[3] = &unk_1003F1BF0;
  void v8[4] = v4;
  [v3 enumerateObjectsUsingBlock:v8];
}

void sub_1002CF87C(uint64_t a1, void *a2)
{
  id v3 = sub_1002D92D0((uint64_t)&OBJC_CLASS___ODRApplication, a2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (sub_1002DA7CC((uint64_t)v4))
  {
    uint64_t v5 = ASDLogHandleForCategory(19LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138543362;
      id v13 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Placeholder for application %{public}@ removed, re-verifying installed application",  (uint8_t *)&v12,  0xCu);
    }

    sub_1002CF3C0(*(void *)(a1 + 32), v4);
  }

  else
  {
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = v4;
    objc_opt_self(v7);
    uint64_t v9 = ASDLogHandleForCategory(19LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138543362;
      id v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Handling application un-installation: %{public}@",  (uint8_t *)&v12,  0xCu);
    }

    char v11 = sub_1002B5024(objc_alloc(&OBJC_CLASS___ODRApplicationCleanTask), v8);
    sub_1001E2DEC((uint64_t)&OBJC_CLASS___ODRTaskQueue, v11, 17LL);
  }
}

uint64_t sub_1002CF9F4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100188788(a2, *(void **)(a1 + 32));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = result;
  return result;
}

id sub_1002CFA2C(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  v6.receiver = a1;
  v6.super_class = (Class)&OBJC_CLASS___LaunchEvent;
  id v3 = objc_msgSendSuper2(&v6, "init");
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedChar:](&OBJC_CLASS___NSNumber, "numberWithUnsignedChar:", a2));
    [v3 setValue:v4 forProperty:@"event_source"];
  }

  return v3;
}

id sub_1002CFD24(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"bundle_id"]);
  }
  return a1;
}

id sub_1002CFD48(void *a1)
{
  if (a1)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"launch_start_time"]);
    id v2 = v1;
    if (v1) {
      id v3 = v1;
    }
    else {
      id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));
    }
    uint64_t v4 = v3;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

id sub_1002CFDA8(void *a1)
{
  if (a1)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"launch_end_time"]);
    id v2 = v1;
    if (v1) {
      id v3 = v1;
    }
    else {
      id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDate distantFuture](&OBJC_CLASS___NSDate, "distantFuture"));
    }
    uint64_t v4 = v3;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

id sub_1002CFE08(void *a1)
{
  if (a1)
  {
    id v1 = sub_1002D015C(a1);
    id v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    id v3 = v2;
    if (v2) {
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:@"lr"]);
    }
    else {
      uint64_t v4 = 0LL;
    }
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

id sub_1002CFE64(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"is_extension"]);
  if ((objc_opt_respondsToSelector(v1, "BOOLValue") & 1) != 0) {
    id v2 = [v1 BOOLValue];
  }
  else {
    id v2 = 0LL;
  }

  return v2;
}

id sub_1002CFEC8(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"containing_bundle_id"]);
  }
  return a1;
}

id sub_1002CFEEC(void *a1)
{
  if (a1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    id v3 = sub_1002CFDA8(a1);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = sub_1001E83D8(v4);
    objc_super v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    [v2 setObject:v6 forKeyedSubscript:@"Last Launch"];

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"bundle_id"]);
    [v2 setObject:v7 forKeyedSubscript:@"bundleID"];

    unsigned int v8 = sub_1002D011C(a1);
    if (v8 > 8) {
      uint64_t v9 = @"App Launch";
    }
    else {
      uint64_t v9 = *(&off_1003F1C10 + (char)v8);
    }
    uint64_t v10 = v9;
    [v2 setObject:v10 forKeyedSubscript:@"Type"];
  }

  else
  {
    id v2 = 0LL;
  }

  return v2;
}

AppLaunchEvent *sub_1002CFFE8(AppLaunchEvent *a1)
{
  if (a1)
  {
    id v1 = a1;
    id v2 = objc_alloc_init(&OBJC_CLASS___AppLaunchEvent);
    id v3 = sub_1002CFD48(v1);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (v2) {
      objc_setProperty_nonatomic_copy(v2, v4, v5, 24LL);
    }

    objc_super v6 = (void *)objc_claimAutoreleasedReturnValue(-[AppLaunchEvent valueForProperty:](v1, "valueForProperty:", @"bundle_id"));
    unsigned int v8 = v6;
    if (v2)
    {
      objc_setProperty_nonatomic_copy(v2, v7, v6, 40LL);

      v2->_isExtensionUsage = sub_1002CFE64(v1);
    }

    else
    {

      sub_1002CFE64(v1);
    }

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[AppLaunchEvent valueForProperty:](v1, "valueForProperty:", @"containing_bundle_id"));
    if (v2) {
      objc_setProperty_nonatomic_copy(v2, v9, v10, 128LL);
    }

    id v11 = sub_1002CFE08(v1);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if (v2) {
      objc_setProperty_nonatomic_copy(v2, v12, v13, 32LL);
    }

    unsigned int v14 = sub_1002D011C(v1) - 5;
    if (v14 >= 3) {
      a1 = v2;
    }
    else {
      a1 = 0LL;
    }
    if (v14 <= 2 && v2)
    {
      v2->_sourceStream = v14 + 4;
      a1 = v2;
    }
  }

  return a1;
}

id sub_1002D011C(id result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result valueForProperty:@"event_source"]);
    id v2 = [v1 unsignedCharValue];

    return v2;
  }

  return result;
}

id sub_1002D015C(void *a1)
{
  if (a1)
  {
    id v1 = sub_1001E27FC(a1, (uint64_t)@"payload");
    a1 = (void *)objc_claimAutoreleasedReturnValue(v1);
  }

  return a1;
}

void *sub_1002D0180(void *a1, const char *a2)
{
  if (a1) {
    return [a1 setValue:a2 forProperty:@"bundle_id"];
  }
  return a1;
}

void *sub_1002D0198(void *a1, const char *a2)
{
  if (a1) {
    return [a1 setValue:a2 forProperty:@"containing_bundle_id"];
  }
  return a1;
}

void *sub_1002D01B0(void *a1, const char *a2)
{
  if (a1) {
    return [a1 setValue:a2 forProperty:@"launch_end_time"];
  }
  return a1;
}

void *sub_1002D01C8(void *a1, const char *a2)
{
  if (a1) {
    return [a1 setValue:a2 forProperty:@"launch_start_time"];
  }
  return a1;
}

void sub_1002D01E0(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
    [a1 setValue:v3 forProperty:@"is_extension"];
  }

void sub_1002D023C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v7 = v3;
    id v4 = sub_1002D015C(a1);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    id v6 = [v5 mutableCopy];

    if (!v6) {
      id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    }
    [v6 setObject:v7 forKeyedSubscript:@"lr"];
    [a1 setValue:v6 forProperty:@"payload"];

    id v3 = v7;
  }
}

uint64_t sub_1002D07C8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  }
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    char v4 = 0;
    unsigned int v5 = 0;
    unint64_t v6 = 0LL;
    while (1)
    {
      unint64_t v7 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1LL || v7 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
        break;
      }
      char v8 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0) {
        goto LABEL_11;
      }
      v4 += 7;
      BOOL v9 = v5++ >= 9;
      if (v9)
      {
        unint64_t v6 = 0LL;
        int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }

    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    int v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
      unint64_t v6 = 0LL;
    }
LABEL_13:
    if (v10 || (v6 & 7) == 4) {
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    }
    switch((v6 >> 3))
    {
      case 1u:
        uint64_t String = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(String);
        uint64_t v14 = 80LL;
        goto LABEL_30;
      case 2u:
        uint64_t v16 = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(v16);
        uint64_t v14 = 88LL;
        goto LABEL_30;
      case 3u:
        uint64_t v17 = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(v17);
        uint64_t v14 = 8LL;
        goto LABEL_30;
      case 4u:
        id v18 = objc_alloc_init(&OBJC_CLASS___TFDisplay);
        objc_storeStrong((id *)(a1 + 64), v18);
        goto LABEL_40;
      case 5u:
        uint64_t v19 = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(v19);
        uint64_t v14 = 72LL;
        goto LABEL_30;
      case 6u:
        uint64_t v20 = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(v20);
        uint64_t v14 = 96LL;
        goto LABEL_30;
      case 7u:
        uint64_t v21 = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(v21);
        uint64_t v14 = 24LL;
        goto LABEL_30;
      case 8u:
        uint64_t v22 = PBReaderReadString(a2);
        uint64_t v13 = objc_claimAutoreleasedReturnValue(v22);
        uint64_t v14 = 32LL;
LABEL_30:
        id v23 = *(void **)(a1 + v14);
        *(void *)(a1 + v14) = v13;

        goto LABEL_79;
      case 9u:
        char v24 = 0;
        unsigned int v25 = 0;
        uint64_t v26 = 0LL;
        *(_BYTE *)(a1 + 104) |= 2u;
        while (2)
        {
          unint64_t v27 = *(void *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v27 == -1LL || v27 >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }

          else
          {
            char v28 = *(_BYTE *)(*(void *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(void *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 1;
            v26 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              BOOL v9 = v25++ >= 9;
              if (v9)
              {
                LODWORD(v26) = 0;
                goto LABEL_65;
              }

              continue;
            }
          }

          break;
        }

        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error)) {
          LODWORD(v26) = 0;
        }
LABEL_65:
        uint64_t v41 = 40LL;
        goto LABEL_78;
      case 0xAu:
        id v18 = objc_alloc_init(&OBJC_CLASS___TFMemoryUsage);
        objc_storeStrong((id *)(a1 + 56), v18);
        if (PBReaderPlaceMark(a2, v42) && sub_100239C28((uint64_t)v18, a2))
        {
LABEL_40:
          PBReaderRecallMark(a2, v42);

LABEL_79:
          if (*(void *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(void *)(a2 + OBJC_IVAR___PBDataReader__length)) {
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          }
          continue;
        }

void sub_1002D0F30(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 80), a2);
  }
}

void sub_1002D0F48(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 88), a2);
  }
}

void sub_1002D0F60(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 8), a2);
  }
}

void sub_1002D0F78(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 64), a2);
  }
}

void sub_1002D0F90(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 72), a2);
  }
}

void sub_1002D0FA8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 96), a2);
  }
}

void sub_1002D0FC0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 24), a2);
  }
}

void sub_1002D0FD8(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 32), a2);
  }
}

void sub_1002D0FF0(uint64_t a1, void *a2)
{
  if (a1) {
    objc_storeStrong((id *)(a1 + 56), a2);
  }
}

id sub_1002D16D8(uint64_t a1)
{
  if (qword_1004625D8 != -1) {
    dispatch_once(&qword_1004625D8, &stru_1003F1D50);
  }
  return (id)qword_1004625D0;
}

void sub_1002D171C(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___LibraryService);
  id v2 = (void *)qword_1004625D0;
  qword_1004625D0 = (uint64_t)v1;
}

void sub_1002D19F0(uint64_t a1)
{
  uint64_t v53 = 0LL;
  uint64_t v54 = &v53;
  uint64_t v55 = 0x3032000000LL;
  __int16 v56 = sub_1002D2030;
  id v57 = sub_1002D2040;
  id v58 = 0LL;
  uint64_t v2 = *(void *)(a1 + 32);
  id v1 = *(void **)(a1 + 40);
  id obj = 0LL;
  id v3 = v1;
  char v4 = v3;
  if (v2)
  {
    if (qword_1004625E8 != -1) {
      dispatch_once(&qword_1004625E8, &stru_1003F1E08);
    }
    BOOL v5 = sub_10025F828(qword_1004625E0, v4, &obj);

    objc_storeStrong(&v58, obj);
    if (v5)
    {
      [*(id *)(a1 + 40) allowEvaluation];
      uint64_t v6 = ASDLogHandleForCategory(15LL);
      unint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        char v8 = *(void **)(a1 + 48);
        BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([v8 processInfo]);
        id v10 = (id)objc_claimAutoreleasedReturnValue([v9 bundleIdentifier]);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) predicateFormat]);
        *(_DWORD *)__int128 buf = 138543874;
        id v61 = v8;
        __int16 v62 = 2114;
        id v63 = v10;
        __int16 v64 = 2114;
        uint64_t v65 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Starting query for %{public}@: %{public}@",  buf,  0x20u);
      }

      int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      id v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
      __int128 v50 = 0u;
      __int128 v51 = 0u;
      __int128 v48 = 0u;
      __int128 v49 = 0u;
      id v13 = *(id *)(*(void *)(a1 + 32) + 16LL);
      id v14 = [v13 countByEnumeratingWithState:&v48 objects:v59 count:16];
      if (v14)
      {
        uint64_t v15 = *(void *)v49;
        while (2)
        {
          for (unint64_t i = 0LL; i != v14; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v49 != v15) {
              objc_enumerationMutation(v13);
            }
            uint64_t v17 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
            id v18 = objc_autoreleasePoolPush();
            uint64_t v19 = *(void *)(a1 + 40);
            v44[0] = _NSConcreteStackBlock;
            v44[1] = 3221225472LL;
            v44[2] = sub_1002D2048;
            v44[3] = &unk_1003F1D78;
            id v20 = v12;
            id v45 = v20;
            id v46 = v42;
            id v47 = &v53;
            [v17 executeQuery:v19 excludingBundleIDs:v46 usingBlock:v44];

            objc_autoreleasePoolPop(v18);
            if (v54[5])
            {

              id v20 = 0LL;
              goto LABEL_18;
            }
          }

          id v14 = [v13 countByEnumeratingWithState:&v48 objects:v59 count:16];
          if (v14) {
            continue;
          }
          break;
        }
      }

      else
      {
        id v20 = v12;
      }

void sub_1002D1FD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_1002D2030(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002D2040(uint64_t a1)
{
}

void sub_1002D2048(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v10 = v5;
  if (a2)
  {
    [*(id *)(a1 + 32) addObjectsFromArray:a2];
    uint64_t v6 = *(void **)(a1 + 40);
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForKey:@"bundleID"]);
    [v6 addObjectsFromArray:v7];
  }

  else
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v9 = v5;
    unint64_t v7 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v9;
  }
}

void sub_1002D2194(uint64_t a1)
{
  uint64_t v39 = 0LL;
  char v40 = &v39;
  uint64_t v41 = 0x3032000000LL;
  id v42 = sub_1002D2030;
  uint64_t v43 = sub_1002D2040;
  id v44 = 0LL;
  uint64_t v2 = ASDLogHandleForCategory(15LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    char v4 = *(void **)(a1 + 32);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    int v7 = *(unsigned __int8 *)(a1 + 56);
    *(_DWORD *)__int128 buf = 138543874;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&_BYTE buf[12] = 2114;
    *(void *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v51) = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Starting query for updates for: %{public}@ Reloading from server: %{BOOL}d",  buf,  0x1Cu);
  }

  *(void *)__int128 buf = 0LL;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000LL;
  __int128 v51 = sub_1002D2030;
  __int128 v52 = sub_1002D2040;
  id v53 = 0LL;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id v8 = *(id *)(*(void *)(a1 + 40) + 16LL);
  id v9 = [v8 countByEnumeratingWithState:&v35 objects:v49 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v36;
LABEL_5:
    uint64_t v11 = 0LL;
    while (1)
    {
      if (*(void *)v36 != v10) {
        objc_enumerationMutation(v8);
      }
      int v12 = *(void **)(*((void *)&v35 + 1) + 8 * v11);
      id v13 = objc_autoreleasePoolPush();
      dispatch_semaphore_t v15 = dispatch_semaphore_create(0LL);
      int v16 = *(unsigned __int8 *)(a1 + 56);
      id Property = *(id *)(a1 + 32);
      if (Property) {
        id Property = objc_getProperty(Property, v14, 32LL, 1);
      }
      id v18 = Property;
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472LL;
      void v31[2] = sub_1002D25D8;
      v31[3] = &unk_1003F1DA0;
      uint64_t v33 = buf;
      id v34 = &v39;
      uint64_t v19 = v15;
      id v32 = v19;
      [v12 executeQueryForUpdatesReloadingFromServer:v16 != 0 logKey:v18 usingBlock:v31];

      dispatch_semaphore_wait(v19, 0xFFFFFFFFFFFFFFFFLL);
      objc_autoreleasePoolPop(v13);
      if (*(void *)(*(void *)&buf[8] + 40LL)) {
        break;
      }
      if (v40[5])
      {
        *(void *)(*(void *)&buf[8] + 40LL) = 0LL;
        break;
      }

      if (v9 == (id)++v11)
      {
        id v9 = [v8 countByEnumeratingWithState:&v35 objects:v49 count:16];
        if (v9) {
          goto LABEL_5;
        }
        break;
      }
    }
  }

  if ([*(id *)(*(void *)&buf[8] + 40) count])
  {
    uint64_t v20 = ASDLogHandleForCategory(15LL);
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(a1 + 32);
      id v23 = [*(id *)(*(void *)&buf[8] + 40) count];
      *(_DWORD *)id v45 = 138543618;
      uint64_t v46 = v22;
      __int16 v47 = 2048;
      id v48 = v23;
      char v24 = "%{public}@ Completed with %lu result(s)";
      uint64_t v25 = v21;
      uint32_t v26 = 22;
LABEL_21:
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v24, v45, v26);
    }
  }

  else
  {
    uint64_t v27 = ASDLogHandleForCategory(15LL);
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = *(void *)(a1 + 32);
      *(_DWORD *)id v45 = 138543362;
      uint64_t v46 = v28;
      char v24 = "%{public}@ Completed with no results";
      uint64_t v25 = v21;
      uint32_t v26 = 12;
      goto LABEL_21;
    }
  }

  uint64_t v29 = *(void *)(a1 + 48);
  id v30 = [*(id *)(*(void *)&buf[8] + 40) copy];
  (*(void (**)(uint64_t, id, uint64_t))(v29 + 16))(v29, v30, v40[5]);

  _Block_object_dispose(buf, 8);
  _Block_object_dispose(&v39, 8);
}

void sub_1002D2584( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_1002D25D8(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (v10)
  {
    uint64_t v6 = (void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    int v7 = v10;
  }

  else
  {
    uint64_t v6 = (void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    int v7 = v5;
  }

  id v8 = v7;
  id v9 = *v6;
  *uint64_t v6 = v8;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1002D2C84(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);

  if (!v3 && v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[UpdatesManager sharedManager](&OBJC_CLASS___UpdatesManager, "sharedManager"));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) bundleID]);
    id v8 = v6;
    int v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v8, 1LL));
    [v5 verifyPendingUpdates:v7];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

NSArray *__cdecl sub_1002D2E8C(id a1, NSArray *a2)
{
  uint64_t v7 = ASDAppLibraryServiceNotificationKeyAction;
  uint64_t v8 = ASDAppLibraryServiceNotificationActionRefresh;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[ASDNotification notificationWithName:userInfo:]( &OBJC_CLASS___ASDNotification,  "notificationWithName:userInfo:",  ASDAppLibraryServiceNotificationName,  v2));
  uint64_t v6 = v3;
  char v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v6, 1LL));

  return (NSArray *)v4;
}

void sub_1002D2F70(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___PredicateValidator);
  uint64_t v2 = (void *)qword_1004625E0;
  qword_1004625E0 = (uint64_t)v1;

  uint64_t v3 = qword_1004625E0;
  if (qword_1004625E0) {
    *(_WORD *)(qword_1004625E0 + _Block_object_dispose(va, 8) = 257;
  }
  id v4 = sub_1002B5EF8((uint64_t)&OBJC_CLASS___ASDApp);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v3)
  {
    id v8 = v5;
    id v6 = [v5 copy];
    uint64_t v7 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = v6;

    id v5 = v8;
    *(_BYTE *)(v3 + 11) = 1;
    *(_BYTE *)(v3 + 1_Block_object_dispose(va, 8) = 1;
  }
}

id sub_1002D3508(void *a1, int a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  id v5 = sub_100233450((uint64_t)&OBJC_CLASS___MetricsCoordinator, 5LL);
  uint64_t v6 = objc_claimAutoreleasedReturnValue(v5);
  uint64_t v7 = (void *)v6;
  if (v6)
  {
    id v53 = (void *)v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v9 = sub_1002D5620((uint64_t)a1);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ([v10 count]) {
      [v8 addObjectsFromArray:v10];
    }
    __int128 v52 = v10;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v12 = sub_1002B61EC((uint64_t)&OBJC_CLASS___AppUsageDatabaseStore);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_1002D5D54;
    uint64_t v65 = &unk_1003F1E30;
    char v67 = a2;
    id v14 = v11;
    id v66 = v14;
    [v13 readUsingSession:buf];

    if ([v14 count])
    {
      uint64_t v15 = ASDLogHandleForCategory(3LL);
      int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([a1 logKey]);
        id v18 = [v14 count];
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&_BYTE buf[12] = 2048;
        *(void *)&buf[14] = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[%@] Found %ld unposted events",  buf,  0x16u);
      }

      [v8 addObjectsFromArray:v14];
    }

    id v50 = v14;
    id v19 = v8;
    uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v56 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    __int128 v62 = 0u;
    __int128 v63 = 0u;
    id obj = v19;
    id v20 = [obj countByEnumeratingWithState:&v60 objects:buf count:16];
    if (v20)
    {
      id v21 = v20;
      uint64_t v22 = *(void *)v61;
      do
      {
        id v23 = 0LL;
        do
        {
          if (*(void *)v61 != v22) {
            objc_enumerationMutation(obj);
          }
          char v24 = *(void **)(*((void *)&v60 + 1) + 8LL * (void)v23);
          if (!v24)
          {
LABEL_26:
            id v34 = -[AppMetricsEvent engagementData]_0(v24);
            __int128 v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
            id v26 = [v35 mutableCopy];

            if (a2)
            {
              if (v24) {
                id v36 = sub_1001E2598(v24, (uint64_t)@"has_been_posted");
              }
              else {
                id v36 = 0LL;
              }
              __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v36, v50));
              [v26 setObject:v37 forKeyedSubscript:@"posted"];
            }

            uint64_t v33 = v55;
            goto LABEL_31;
          }

          if (sub_1001E2698( *(id *)(*((void *)&v60 + 1) + 8LL * (void)v23),  (uint64_t)@"event_type") == 2LL)
          {
            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 valueForProperty:@"payload"]);
            id v26 = [v25 mutableCopy];

            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v24 valueForProperty:@"timestamp"]);
            if (v27)
            {
              uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v24 valueForProperty:@"timestamp"]);
              uint64_t v29 = sub_100271AB0((uint64_t)&OBJC_CLASS___MetricsHandler, v28);
              id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
              [v26 setObject:v30 forKeyedSubscript:@"eventTime"];
            }

            if (a2)
            {
              unint64_t v31 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  sub_1001E2598(v24, (uint64_t)@"has_been_posted"));
              id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
              [v26 setObject:v32 forKeyedSubscript:@"posted"];
            }

            uint64_t v33 = v57;
          }

          else
          {
            if (sub_1001E2698(v24, (uint64_t)@"event_type") != 1LL
              || sub_1001E2698(v24, (uint64_t)@"event_subtype") != 4LL
              || (sub_1001E2598(v24, (uint64_t)@"has_been_posted") & 1) != 0)
            {
              objc_msgSend(v56, "addObject:", v24, v50);
              goto LABEL_32;
            }

            __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v24 valueForProperty:@"payload"]);
            id v26 = [v38 mutableCopy];

            if (a2)
            {
              uint64_t v39 = +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  sub_1001E2598(v24, (uint64_t)@"has_been_posted"));
              char v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
              [v26 setObject:v40 forKeyedSubscript:@"posted"];
            }

            uint64_t v33 = v54;
          }

void sub_1002D3B60(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    id v5 = [v3 countByEnumeratingWithState:&v26 objects:v34 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v27;
      id v8 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
      do
      {
        id v9 = 0LL;
        do
        {
          if (*(void *)v27 != v7) {
            objc_enumerationMutation(v4);
          }
          id v10 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)v9);
          uint64_t v11 = (void *)a1[8];
          if (!v11)
          {
            id v12 = objc_alloc((Class)v8[311]);
            id v13 = sub_100255630((uint64_t)&OBJC_CLASS___URLBag);
            id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
            id v15 = [v12 initWithBag:v14];
            int v16 = (void *)a1[8];
            a1[8] = v15;

            uint64_t v11 = (void *)a1[8];
          }

          id v17 = v11;
          id v18 = (void *)objc_claimAutoreleasedReturnValue([v10 engagementData]);
          id v19 = (void *)objc_claimAutoreleasedReturnValue([v17 enqueueData:v18]);

          id v25 = 0LL;
          id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 resultWithTimeout:&v25 error:30.0]);
          id v21 = v25;

          if (v21 || !v20)
          {
            uint64_t v22 = ASDLogHandleForCategory(3LL);
            id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            {
              char v24 = (void *)objc_claimAutoreleasedReturnValue([a1 logKey]);
              *(_DWORD *)__int128 buf = 138412546;
              unint64_t v31 = v24;
              __int16 v32 = 2114;
              id v33 = v21;
              _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "[%@] AMSEngagement enqueue resulted in error: %{public}@",  buf,  0x16u);

              id v8 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
            }
          }

          id v9 = (char *)v9 + 1;
        }

        while (v6 != v9);
        id v6 = [v4 countByEnumeratingWithState:&v26 objects:v34 count:16];
      }

      while (v6);
    }
  }
}

void sub_1002D43BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, char a47)
{
}

id sub_1002D43E4(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    [v7 setObject:v5 forKeyedSubscript:@"bundleId"];
    id v8 = a1[3];

    if (v8)
    {
      id v9 = a1[3];
      [v7 setObject:v9 forKeyedSubscript:@"dsid"];
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue([a1 deviceID]);
    [v7 setObject:v10 forKeyedSubscript:@"usageClientId"];

    uint64_t v11 = sub_100272DAC(a1);
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    [v7 setObject:v12 forKeyedSubscript:@"os"];

    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[AMSDevice productVersion](&OBJC_CLASS___AMSDevice, "productVersion"));
    [v7 setObject:v13 forKeyedSubscript:@"osBuildNumber"];

    id v14 = sub_100272D14(a1);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    [v7 setObject:v15 forKeyedSubscript:@"platform"];

    int v16 = (void *)objc_claimAutoreleasedReturnValue([a1 topic]);
    [v7 setObject:v16 forKeyedSubscript:@"topic"];

    if (v6)
    {
      id v17 = sub_1002C8BAC(v6);
      id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
      [v7 setObject:v18 forKeyedSubscript:@"bundleVersion"];

      id v19 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForProperty:@"evid"]);
      [v7 setObject:v19 forKeyedSubscript:@"externalVersionId"];

      id v20 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForProperty:@"item_id"]);
      [v7 setObject:v20 forKeyedSubscript:@"itemId"];

      id v21 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForProperty:@"short_version"]);
      [v7 setObject:v21 forKeyedSubscript:@"shortAppVersion"];

      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForProperty:@"storefront"]);
      [v7 setObject:v22 forKeyedSubscript:@"storefront"];
    }

    id v23 = sub_1002D5B8C((uint64_t)a1);
    uint64_t v24 = objc_claimAutoreleasedReturnValue(v23);
    if (v24)
    {
      id v25 = (void *)v24;
      id v26 = sub_1002D5B8C((uint64_t)a1);
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v27 objectForKeyedSubscript:v5]);

      if (v28)
      {
        id v29 = sub_1002D5B8C((uint64_t)a1);
        id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
        unint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKeyedSubscript:v5]);
        __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 objectForKeyedSubscript:@"powerUsage"]);
        [v7 setObject:v32 forKeyedSubscript:@"batteryUsage"];

        id v33 = sub_1002D5B8C((uint64_t)a1);
        id v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
        __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 objectForKeyedSubscript:v5]);
        id v36 = (void *)objc_claimAutoreleasedReturnValue([v35 objectForKeyedSubscript:@"DRAMUsage"]);
        [v7 setObject:v36 forKeyedSubscript:@"batteryDRAMUsage"];
      }
    }
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

uint64_t sub_1002D4768(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002D4778(uint64_t a1)
{
}

uint64_t sub_1002D4780(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v4 + 40);
  id v5 = sub_10030DA74(a2, v3, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);
  return 1LL;
}

void sub_1002D4D00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, char a41)
{
}

uint64_t sub_1002D4D28(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id obj = *(id *)(v4 + 40);
  id v5 = sub_10030DA74(a2, v3, &obj);
  objc_storeStrong((id *)(v4 + 40), obj);
  return 1LL;
}

BOOL sub_1002D5364(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v11 = 0LL;
  id v5 = sub_10030DA74(a2, v4, &v11);
  id v6 = v11;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(3LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
      *(_DWORD *)__int128 buf = 138412546;
      id v13 = v10;
      __int16 v14 = 2114;
      id v15 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%@] Error persisting launch events: %{public}@",  buf,  0x16u);
    }
  }

  return v6 == 0LL;
}

id sub_1002D5620(uint64_t a1)
{
  if (a1)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v2 = [v1 copy];
  }

  else
  {
    id v2 = 0LL;
  }

  return v2;
}

uint64_t sub_1002D5668(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v11 = 0LL;
  id v5 = sub_10030DA74(a2, v4, &v11);
  id v6 = v11;
  if (v6)
  {
    uint64_t v7 = ASDLogHandleForCategory(3LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
      *(_DWORD *)__int128 buf = 138412546;
      id v13 = v10;
      __int16 v14 = 2114;
      id v15 = v6;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "[%@] Supplemental crash metrics event import resulted in error: %{public}@",  buf,  0x16u);
    }
  }

  return 1LL;
}

uint64_t sub_1002D5980(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"metrics_type",  &off_10040CF40));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v6 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppMetricsEventEntity, v5, v4);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  void v11[2] = sub_1002D5A74;
  v11[3] = &unk_1003EB478;
  uint64_t v8 = *(void *)(a1 + 32);
  id v12 = v3;
  uint64_t v13 = v8;
  id v9 = v3;
  [v7 enumeratePersistentIDsUsingBlock:v11];

  return 1LL;
}

void sub_1002D5A74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc(&OBJC_CLASS___AppMetricsEventEntity);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
  id v6 = -[SQLiteEntity initWithPersistentID:onConnection:](v4, "initWithPersistentID:onConnection:", a2, v5);

  uint64_t v7 = ASDLogHandleForCategory(3LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) logKey]);
    int v10 = 138412546;
    id v11 = v9;
    __int16 v12 = 2048;
    uint64_t v13 = a2;
    _os_log_debug_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEBUG,  "[%@] Removed posted event with pid: %lld",  (uint8_t *)&v10,  0x16u);
  }

  -[SQLiteEntity deleteFromDatabase](v6, "deleteFromDatabase");
}

id sub_1002D5B8C(uint64_t a1)
{
  if (_os_feature_enabled_impl("AppStoreDaemon", "ASDEnablePowerReportingToODP") && !*(void *)(a1 + 72))
  {
    id v2 = sub_1002D6D3C((uint64_t)&OBJC_CLASS___PowerLogCoordinator);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    id v4 = sub_1002D6DD8(v3);
    uint64_t v5 = objc_claimAutoreleasedReturnValue(v4);
    id v6 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v5;
  }

  return *(id *)(a1 + 72);
}

AppMetricsEvent *sub_1002D5C28(void *a1, uint64_t a2)
{
  else {
    id v4 = *off_1003F1E50[(char)(a2 - 6)];
  }
  v10[0] = @"topic";
  v10[1] = @"eventType";
  v11[0] = @"on_device_personalization";
  v11[1] = v4;
  void v10[2] = @"events";
  void v11[2] = a1;
  uint64_t v5 = @"on_device_personalization";
  id v6 = a1;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  3LL));
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___AppMetricsEvent);
  sub_1001B61EC(v8, a2);
  sub_1001B62A4(v8, v7);

  return v8;
}

void sub_1002D5D54(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"metrics_type",  &off_10040CF40));
  uint64_t v5 = v4;
  if (*(_BYTE *)(a1 + 40))
  {
    id v6 = v4;
  }

  else
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"has_been_posted",  &__kCFBooleanFalse));
    v16[0] = v5;
    v16[1] = v7;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v16, 2LL));
    id v6 = (id)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v8));
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
  id v10 = sub_10024C1D0((uint64_t)&OBJC_CLASS___AppMetricsEventEntity, v9, v6);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);

  id v12 = sub_1002E82C8((uint64_t)&OBJC_CLASS___AppMetricsEventEntity);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1002D5F08;
  v14[3] = &unk_1003E98A8;
  id v15 = *(id *)(a1 + 32);
  [v11 enumerateMemoryEntitiesWithProperties:v13 usingBlock:v14];
}

id sub_1002D5F08(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

_DWORD *sub_1002D5F64(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  id v4 = (void *)objc_claimAutoreleasedReturnValue([a1 data]);
  uint64_t v5 = malloc((size_t)[v4 length] + 200);
  _DWORD *v5 = 2;
  __strlcpy_chk(v5 + 2, "AppStoreDaemon", 64LL, 64LL);
  uint64_t v7 = (objc_class *)objc_opt_class(a1, v6);
  Name = class_getName(v7);
  __strlcpy_chk(v5 + 18, Name, 64LL, 64LL);
  __strlcpy_chk(v5 + 34, a2, 64LL, 64LL);
  v5[1] = [v4 length];
  id v9 = v4;
  memcpy(v5 + 50, [v9 bytes], (size_t)objc_msgSend(v9, "length"));

  return v5;
}

id sub_1002D63E4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 8));
    id v4 = sub_1002251F8((uint64_t)&OBJC_CLASS___TypeCheckedArrayReader, a2);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained filteredArrayUsingPredicate:v5]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectEnumerator]);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

id sub_1002D6480(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 componentsJoinedByString:@"."]);
  }
  return a1;
}

id sub_1002D64A4(void *a1)
{
  if (a1)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "_tcr_associatedReader"));
    uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSDictionary, v2);
    id v4 = sub_1002D63E4((uint64_t)v1, v3);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

id sub_1002D64FC(void *a1)
{
  if (a1)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "_tcr_associatedReader"));
    uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSNumber, v2);
    id v4 = sub_1002D63E4((uint64_t)v1, v3);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

id sub_1002D6554(void *a1)
{
  if (a1)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "_tcr_associatedReader"));
    uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSString, v2);
    id v4 = sub_1002D63E4((uint64_t)v1, v3);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

NSString *sub_1002D6684(uint64_t a1, unint64_t a2)
{
  if (a2 - 1000001 <= 0x3B8B87BE) {
    a2 = (unint64_t)(round((double)a2 / 1000000.0) * 1000000.0);
  }
  if (a2 >= 0x3B9ACA01) {
    a2 = (unint64_t)(round((double)a2 / 100000000.0) * 100000000.0);
  }
  return +[NSByteCountFormatter stringFromByteCount:countStyle:]( &OBJC_CLASS___NSByteCountFormatter,  "stringFromByteCount:countStyle:",  a2,  2LL);
}

EvaluatorDownload *sub_1002D6750(void *a1, void *a2)
{
  if (!a1) {
    return 0LL;
  }
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___EvaluatorDownload);
  uint64_t v5 = sub_100323C54(a1);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v4) {
    objc_setProperty_atomic(v4, v6, v7, 32LL);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"bundle_name"]);
  if (v4) {
    objc_setProperty_atomic(v4, v8, v9, 40LL);
  }

  id v10 = sub_1001E2698(a1, (uint64_t)@"automatic_type");
  if (v4 && v10) {
    v4->_automatic = 1;
  }
  id v11 = sub_1001E2698(a1, (uint64_t)@"update_type");
  if (v11)
  {
    if (v11 == (id)1)
    {
      if (v4)
      {
        v4->_automatic = 1;
LABEL_14:
        v4->_update = 1;
      }
    }

    else if (v4)
    {
      goto LABEL_14;
    }
  }

  id v12 = sub_1001E25D0(v3, (uint64_t)@"bytes_total");
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  id v14 = [v13 unsignedLongLongValue];
  if (v4) {
    v4->_bytes = (unint64_t)v14;
  }
  id v15 = sub_1001E25D0(v3, (uint64_t)@"initial_odr_size");
  int v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

  if (v16)
  {
    id v17 = [v16 unsignedLongLongValue];
    if (v4) {
      v4->_bytes += (unint64_t)v17;
    }
  }

  return v4;
}

EvaluatorDownload *sub_1002D68B4(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___EvaluatorDownload);
  id v3 = sub_10021B614(a1);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v2) {
    objc_setProperty_atomic(v2, v4, v5, 32LL);
  }

  id v6 = sub_1001E26D0(a1, (uint64_t)@"client_id");
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v2) {
    objc_setProperty_atomic(v2, v7, v8, 24LL);
  }

  id v10 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"bundle_name"]);
  if (v2) {
    objc_setProperty_atomic(v2, v9, v10, 40LL);
  }

  id v11 = sub_1001E2698(a1, (uint64_t)@"automatic_type");
  if (v2 && v11) {
    v2->_automatic = 1;
  }
  id v12 = sub_1001E2698(a1, (uint64_t)@"update_type");
  if (v12)
  {
    if (v12 == (id)1)
    {
      if (v2)
      {
        v2->_automatic = 1;
LABEL_16:
        v2->_update = 1;
      }
    }

    else if (v2)
    {
      goto LABEL_16;
    }
  }

  id v13 = sub_10021B984(a1);
  id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  id v15 = sub_1001E25D0(v14, (uint64_t)@"bytes_total");
  int v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  id v17 = [v16 unsignedLongLongValue];
  if (v2) {
    v2->_bytes = (unint64_t)v17;
  }
  id v18 = sub_1001E25D0(v14, (uint64_t)@"initial_odr_size");
  id v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  id v20 = v19;
  if (v19)
  {
    id v21 = [v19 unsignedLongLongValue];
    if (v2) {
      v2->_bytes += (unint64_t)v21;
    }
  }

  return v2;
}

id sub_1002D6A48(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v10.receiver = a1;
    v10.super_class = (Class)&OBJC_CLASS___ODRLaunchServicesClient;
    a1 = objc_msgSendSuper2(&v10, "init");
    if (a1)
    {
      id v4 =  +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___ODRLaunchServicesProtocol);
      [v3 setExportedInterface:v4];

      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___ODRLaunchServicesProtocol));
      [v3 setRemoteObjectInterface:v5];

      [v3 setExportedObject:a1];
      [v3 resume];
      uint64_t v6 = ASDLogHandleForCategory(19LL);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)id v9 = 0;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "Created the launch services client.",  v9,  2u);
      }
    }
  }

  return a1;
}

void sub_1002D6CC8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1002D6CF0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002D6D00(uint64_t a1)
{
}

id sub_1002D6D3C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002D6DB4;
  block[3] = &unk_1003E9EA8;
  void block[4] = objc_opt_self(a1);
  if (qword_1004625F8 != -1) {
    dispatch_once(&qword_1004625F8, block);
  }
  return (id)qword_1004625F0;
}

void sub_1002D6DB4(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  uint64_t v2 = (void *)qword_1004625F0;
  qword_1004625F0 = (uint64_t)v1;
}

id sub_1002D6DD8(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  }
  return a1;
}

id sub_1002D6DFC(uint64_t a1)
{
  if (qword_100462608 != -1) {
    dispatch_once(&qword_100462608, &stru_1003F1E78);
  }
  return (id)qword_100462600;
}

void sub_1002D6E40(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___PurchaseHistoryService);
  uint64_t v2 = (void *)qword_100462600;
  qword_100462600 = (uint64_t)v1;
}

id sub_1002D71C4(id a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)&OBJC_CLASS___RestoreAppInstall;
    a1 = objc_msgSendSuper2(&v15, "init");
    if (a1)
    {
      id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v5, @"bundle_id");

      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v6, @"external_id");

      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 externalVersionIdentifier]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v7, @"evid");

      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 itemID]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v8, @"item_id");

      -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"approved");
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  &off_10040CF70,  @"source_type");
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  &off_10040CF88,  @"priority");
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  &off_10040CF70,  @"bootstrapped");
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  @"RSD",  @"log_code");
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v4,  "setObject:forKeyedSubscript:",  &off_10040CFA0,  @"metrics_install_type");
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v3 vendorName]);
      uint64_t v10 = objc_claimAutoreleasedReturnValue([v3 bundleID]);
      id v11 = (void *)v10;
      if (v9 && v10)
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue( +[LSApplicationWorkspace defaultWorkspace]( &OBJC_CLASS___LSApplicationWorkspace,  "defaultWorkspace"));
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 createDeviceIdentifierWithVendorName:v9 bundleIdentifier:v11]);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v13, @"vid");
      }

      [a1 setValuesWithDictionary:v4];
    }
  }

  return a1;
}

id sub_1002D7400(id result, void *a2, void *a3)
{
  if (result) {
    return sub_1002D7418(result, a2, 1LL, -1LL, a3);
  }
  return result;
}

id sub_1002D7418(id a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  uint64_t v10 = a5;
  if (!a1) {
    goto LABEL_28;
  }
  v40.receiver = a1;
  v40.super_class = (Class)&OBJC_CLASS___RestoreAppInstall;
  a1 = objc_msgSendSuper2(&v40, "init");
  if (!a1) {
    goto LABEL_28;
  }
  id v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v12, @"external_id");

  id v13 = &off_1003EAF50;
  id v14 = &off_1003EAF58;
  if (a3 != 3) {
    id v14 = &off_1003EAF48;
  }
  if (a3 != 2) {
    id v13 = v14;
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", *v13, @"log_code");
  objc_super v15 = (void *)objc_claimAutoreleasedReturnValue([v9 softwareVersionBundleID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v15, @"bundle_id");

  int v16 = (void *)objc_claimAutoreleasedReturnValue([v9 itemID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v16, @"item_id");

  id v17 = (void *)objc_claimAutoreleasedReturnValue([v9 storefront]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v17, @"storefront");

  id v18 = (void *)objc_claimAutoreleasedReturnValue([v9 softwareVersionExternalIdentifier]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v18, @"evid");

  id v19 = (void *)objc_claimAutoreleasedReturnValue([v9 downloaderID]);
  if (v19)
  {
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v9 downloaderID]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  v20,  @"downloader_id");
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue([v9 altDSID]);

  if (v21)
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v9 altDSID]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v22, @"alt_dsid");
  }

  id v23 = (void *)objc_claimAutoreleasedReturnValue([v9 purchaserID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v23, @"account_id");

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v9 appleID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v24, @"apple_id");

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"approved");
  id v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v9 deviceBasedVPP]));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  v25,  @"device_based_vpp");

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  &off_10040CF70,  @"bootstrapped");
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  &off_10040CF70,  @"source_type");
  id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v26, @"priority");

  __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a3));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v27, @"restore_type");

  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v9 artistName]);
  uint64_t v29 = objc_claimAutoreleasedReturnValue([v9 softwareVersionBundleID]);
  id v30 = (void *)v29;
  if (v28 && v29)
  {
    unint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
    __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 createDeviceIdentifierWithVendorName:v28 bundleIdentifier:v30]);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v32, @"vid");
  }

  if (a3 == 3)
  {
    id v34 = (_UNKNOWN **)&__kCFBooleanTrue;
    __int128 v35 = &off_1003ED2B0;
    id v36 = &off_10040D000;
LABEL_24:
    __int128 v37 = &off_1003ED220;
    goto LABEL_25;
  }

  if (a3 != 2)
  {
    if (a3 == 1)
    {
      else {
        id v33 = &off_10040CFA0;
      }
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  v33,  @"metrics_install_type");
    }

    id v34 = (_UNKNOWN **)&__kCFBooleanTrue;
    __int128 v35 = &off_1003ED2B0;
    id v36 = &off_10040CFE8;
    goto LABEL_24;
  }

  id v34 = &off_10040D000;
  __int128 v35 = &off_1003ED220;
  id v36 = &off_10040CFD0;
  __int128 v37 = off_1003ED3D0;
LABEL_25:
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v36, *v37);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v34, *v35);
  if (v10) {
    id v38 = [v10[1] copy];
  }
  else {
    id v38 = 0LL;
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v38, @"policy");

  [a1 setValuesWithDictionary:v11];
LABEL_28:

  return a1;
}

id sub_1002D78EC(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"account_id"]);
  }
  return a1;
}

id sub_1002D7910(void *a1)
{
  if (a1)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"downloader_id"]);
    if ([v1 longLongValue]) {
      id v2 = v1;
    }
    else {
      id v2 = 0LL;
    }
  }

  else
  {
    id v2 = 0LL;
  }

  return v2;
}

_BYTE *sub_1002D7968(_BYTE *a1)
{
  if (a1)
  {
    if ((a1[56] & 1) != 0) {
      a1 = 0LL;
    }
    else {
      a1 = (_BYTE *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"evid"]);
    }
  }

  return a1;
}

id sub_1002D79A4(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"storefront"]);
  }
  return a1;
}

id sub_1002D79C8(void *a1)
{
  if (a1) {
    a1 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"vid"]);
  }
  return a1;
}

id sub_1002D79EC(void *a1)
{
  if (a1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"failure_error"]);
    if (v2 && (uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSData, v1), (objc_opt_isKindOfClass(v2, v3) & 1) != 0))
    {
      id v5 = +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  objc_opt_class(&OBJC_CLASS___NSError, v4),  v2,  0LL);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    }

    else
    {
      uint64_t v6 = 0LL;
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  return v6;
}

void sub_1002D7A84(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = sub_1002D79EC(a1);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    if (v5
      && (uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]),
          char IsEqual = ASDErrorIsEqual(v5, v6, [v3 code]),
          v6,
          (IsEqual & 1) != 0))
    {
      uint64_t v8 = ASDLogHandleForCategory(29LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v10 = sub_100323C54(a1);
        id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        int v16 = 138412546;
        id v17 = v11;
        __int16 v18 = 2114;
        id v19 = v3;
        _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "[%@] Nothing change about hard fail error: %{public}@",  (uint8_t *)&v16,  0x16u);
      }
    }

    else
    {
      uint64_t v12 = ASDLogHandleForCategory(29LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        id v14 = sub_100323C54(a1);
        objc_super v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        int v16 = 138412546;
        id v17 = v15;
        __int16 v18 = 2114;
        id v19 = v3;
        _os_log_error_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_ERROR,  "[%@] Marking restore as hard failed with error: %{public}@",  (uint8_t *)&v16,  0x16u);
      }

      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v3,  1LL,  0LL));
      [a1 setValue:v9 forProperty:@"failure_error"];
    }

    [a1 setValue:&off_10040D018 forProperty:@"phase"];
    [a1 setValue:&off_10040D030 forProperty:@"restore_state"];
  }
}

void sub_1002D7C94(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = ASDLogHandleForCategory(29LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = sub_100323C54(a1);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      int v12 = 138412546;
      id v13 = v11;
      __int16 v14 = 2114;
      id v15 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "[%@] Restore failed temporarily with error: %{public}@",  (uint8_t *)&v12,  0x16u);
    }

    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"restore_retry_count"]);
    uint64_t v7 = (char *)[v6 integerValue];

    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v7 + 1));
    [a1 setValue:v8 forProperty:@"restore_retry_count"];

    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v3,  1LL,  0LL));
    [a1 setValue:v9 forProperty:@"failure_error"];

    [a1 setValue:&off_10040D048 forProperty:@"restore_state"];
  }
}

void *sub_1002D8060(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1 && v3)
  {
    v10.receiver = a1;
    v10.super_class = (Class)&OBJC_CLASS___SubscriptionEntitlementsResponse;
    id v5 = objc_msgSendSuper2(&v10, "init");
    if (v5)
    {
      id v6 = [v4 copy];
      uint64_t v7 = (void *)v5[1];
      v5[1] = v6;
    }

    a1 = v5;
    uint64_t v8 = a1;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  return v8;
}

void **sub_1002D80F4(void **a1)
{
  if (a1)
  {
    id v1 = sub_1001DEF10(a1[1], @"user.dsId");
    a1 = (void **)objc_claimAutoreleasedReturnValue(v1);
  }

  return a1;
}

NSMutableArray *sub_1002D811C(uint64_t a1)
{
  if (!a1) {
    return (NSMutableArray *)0LL;
  }
  id v41 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v2 = sub_1001DEC94(*(id *)(a1 + 8), @"subscriptions");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = sub_1002D64A4(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  id obj = v5;
  id v39 = [obj countByEnumeratingWithState:&v46 objects:v51 count:16];
  if (v39)
  {
    uint64_t v38 = *(void *)v47;
    *(void *)&__int128 v6 = 138412546LL;
    __int128 v36 = v6;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v47 != v38) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v46 + 1) + 8 * v7);
        id v9 = sub_1001DEDF8(v8, @"appAdamId");
        objc_super v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
        id v11 = sub_1001DF594(v8, @"segment");
        id v12 = (id)objc_claimAutoreleasedReturnValue(v11);
        uint64_t v40 = v7;
        if ([v12 isEqualToString:@"AppStore"])
        {
          uint64_t v13 = 1LL;
        }

        else if ([v12 isEqualToString:@"News"])
        {
          uint64_t v13 = 0LL;
        }

        else if ([v12 isEqualToString:@"Activity"])
        {
          uint64_t v13 = 2LL;
        }

        else if ([v12 isEqualToString:@"Music"])
        {
          uint64_t v13 = 3LL;
        }

        else if ([v12 isEqualToString:@"TV"])
        {
          uint64_t v13 = 4LL;
        }

        else if ([v12 isEqualToString:@"iCloud"])
        {
          uint64_t v13 = 5LL;
        }

        else if ([v12 isEqualToString:@"Podcasts"])
        {
          uint64_t v13 = 6LL;
        }

        else if ([v12 isEqualToString:@"HWBundle"])
        {
          uint64_t v13 = 7LL;
        }

        else
        {
          uint64_t v14 = ASDLogHandleForCategory(14LL);
          id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          {
            id v33 = (void *)objc_opt_class(a1, v16);
            *(_DWORD *)__int128 buf = v36;
            id v53 = v33;
            __int16 v54 = 2114;
            id v55 = v12;
            id v34 = v33;
            _os_log_error_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_ERROR,  "[%@]: Error parsing unknown segment string: %{public}@",  buf,  0x16u);
          }

          uint64_t v13 = -1LL;
        }

        id v17 = sub_1001DEC94(v8, @"inAppSubscriptions");
        __int16 v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        id v19 = sub_1002D64A4(v18);
        id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

        __int128 v44 = 0u;
        __int128 v45 = 0u;
        __int128 v42 = 0u;
        __int128 v43 = 0u;
        id v21 = v20;
        id v22 = [v21 countByEnumeratingWithState:&v42 objects:v50 count:16];
        if (v22)
        {
          id v23 = v22;
          uint64_t v24 = *(void *)v43;
          do
          {
            id v25 = 0LL;
            do
            {
              if (*(void *)v43 != v24) {
                objc_enumerationMutation(v21);
              }
              uint64_t v26 = *(void *)(*((void *)&v42 + 1) + 8LL * (void)v25);
              id v27 = objc_alloc(&OBJC_CLASS___ASDSubscriptionEntitlement);
              __int128 v28 = *(void **)(a1 + 8);
              if (v28) {
                id v29 = sub_1001DEEC4(v28, @"user.hasFamily", 0LL);
              }
              else {
                id v29 = 0LL;
              }
              id v30 = objc_msgSend(v27, "initWithDictionary:forAppAdamID:segment:hasFamily:", v26, v10, v13, v29, v36);
              unint64_t v31 = v30;
              if (v30 && [v30 segment] == (id)v13) {
                -[NSMutableArray addObject:](v41, "addObject:", v31);
              }

              id v25 = (char *)v25 + 1;
            }

            while (v23 != v25);
            id v32 = [v21 countByEnumeratingWithState:&v42 objects:v50 count:16];
            id v23 = v32;
          }

          while (v32);
        }

        uint64_t v7 = v40 + 1;
      }

      while ((id)(v40 + 1) != v39);
      id v39 = [obj countByEnumeratingWithState:&v46 objects:v51 count:16];
    }

    while (v39);
  }

  return v41;
}

id sub_1002D853C(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  id v2 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
  id v3 = sub_1001DEC94(*(id *)(a1 + 8), @"subscriptions");
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = sub_1002D64A4(v4);
  __int128 v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  __int128 v29 = 0u;
  __int128 v30 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  id v7 = v6;
  id v8 = [v7 countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v28;
    do
    {
      id v11 = 0LL;
      do
      {
        if (*(void *)v28 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = sub_1001DEC94(*(id *)(*((void *)&v27 + 1) + 8LL * (void)v11), @"introOfferConsumedFamilyIds");
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        id v14 = sub_1002D64FC(v13);
        id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

        __int128 v25 = 0u;
        __int128 v26 = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        id v16 = v15;
        id v17 = [v16 countByEnumeratingWithState:&v23 objects:v31 count:16];
        if (v17)
        {
          id v18 = v17;
          uint64_t v19 = *(void *)v24;
          do
          {
            id v20 = 0LL;
            do
            {
              if (*(void *)v24 != v19) {
                objc_enumerationMutation(v16);
              }
              -[NSMutableArray addObject:](v2, "addObject:", *(void *)(*((void *)&v23 + 1) + 8LL * (void)v20));
              id v20 = (char *)v20 + 1;
            }

            while (v18 != v20);
            id v18 = [v16 countByEnumeratingWithState:&v23 objects:v31 count:16];
          }

          while (v18);
        }

        id v11 = (char *)v11 + 1;
      }

      while (v11 != v9);
      id v9 = [v7 countByEnumeratingWithState:&v27 objects:v32 count:16];
    }

    while (v9);
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](&OBJC_CLASS___NSArray, "arrayWithArray:", v2));
  return v21;
}

void *sub_1002D875C(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a2;
  id v10 = a3;
  if (a1)
  {
    v16.receiver = a1;
    v16.super_class = (Class)&OBJC_CLASS___SQLiteDatabaseStoreDescriptor;
    a1 = objc_msgSendSuper2(&v16, "init");
    if (a1)
    {
      id v11 = [v9 copy];
      id v12 = (void *)a1[1];
      a1[1] = v11;

      id v13 = [v10 copy];
      id v14 = (void *)a1[2];
      a1[2] = v13;

      a1[3] = a4;
      a1[4] = a5;
    }
  }

  return a1;
}

id *sub_1002D883C(id *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___ReviewNetworkPolicyTask;
    id v5 = (id *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong(v5 + 5, a2);
    }
  }

  return a1;
}

void sub_1002D8E5C(void *a1, void *a2)
{
  if (a1)
  {
    uint64_t v3 = a1[7];
    id v4 = a2;
    sub_1002E60D4((uint64_t)v4, v3);
    sub_1002E6174((uint64_t)v4, a1[8]);
    sub_1002E5F7C((uint64_t)v4, a1[9]);
  }

MIStoreMetadata *sub_1002D8EE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = objc_alloc_init(&OBJC_CLASS___MIStoreMetadata);
  if (v4)
  {
    id v5 = v3;
    __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([v5 artistName]);
    -[MIStoreMetadata setArtistName:](v4, "setArtistName:", v6);

    objc_super v7 = (void *)objc_claimAutoreleasedReturnValue([v5 kind]);
    -[MIStoreMetadata setKind:](v4, "setKind:", v7);

    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 itemID]);
    -[MIStoreMetadata setItemID:](v4, "setItemID:", v8);

    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 title]);
    -[MIStoreMetadata setItemName:](v4, "setItemName:", v9);

    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 softwareVersionExternalIdentifier]);
    -[MIStoreMetadata setSoftwareVersionExternalIdentifier:](v4, "setSoftwareVersionExternalIdentifier:", v10);

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 betaExternalVersionIdentifier]);
    -[MIStoreMetadata setBetaExternalVersionIdentifier:](v4, "setBetaExternalVersionIdentifier:", v11);

    id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleID]);
    -[MIStoreMetadata setSoftwareVersionBundleID:](v4, "setSoftwareVersionBundleID:", v12);

    id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleVersion]);
    -[MIStoreMetadata setBundleVersion:](v4, "setBundleVersion:", v13);

    -[MIStoreMetadata setHasMessagesExtension:]( v4,  "setHasMessagesExtension:",  [v5 hasMessagesExtension]);
    -[MIStoreMetadata setLaunchProhibited:](v4, "setLaunchProhibited:", [v5 launchProhibited]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v5 genre]);
    -[MIStoreMetadata setGenre:](v4, "setGenre:", v14);

    id v15 = (void *)objc_claimAutoreleasedReturnValue([v5 genreID]);
    -[MIStoreMetadata setGenreID:](v4, "setGenreID:", v15);

    objc_super v16 = (void *)objc_claimAutoreleasedReturnValue([v5 ratingLabel]);
    -[MIStoreMetadata setRatingLabel:](v4, "setRatingLabel:", v16);

    id v17 = (void *)objc_claimAutoreleasedReturnValue([v5 ratingRank]);
    -[MIStoreMetadata setRatingRank:](v4, "setRatingRank:", v17);

    -[MIStoreMetadata setGameCenterEnabled:](v4, "setGameCenterEnabled:", [v5 isGameCenterEnabled]);
    -[MIStoreMetadata setIsAutoDownload:](v4, "setIsAutoDownload:", [v5 isAutomatic]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v5 purchaseDate]);
    id v19 = sub_1001E8354(v18);
    id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    -[MIStoreMetadata setPurchaseDate:](v4, "setPurchaseDate:", v20);

    -[MIStoreMetadata setPurchasedRedownload:](v4, "setPurchasedRedownload:", [v5 isPurchasedRedownload]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v5 buyParams]);
    -[MIStoreMetadata setRedownloadParams:](v4, "setRedownloadParams:", v21);

    id v22 = (void *)objc_claimAutoreleasedReturnValue([v5 releaseDate]);
    id v23 = sub_1001E8354(v22);
    __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    -[MIStoreMetadata setReleaseDate:](v4, "setReleaseDate:", v24);

    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v5 storefront]);
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v25 longLongValue]));
    -[MIStoreMetadata setStorefront:](v4, "setStorefront:", v26);

    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v5 iAdConversionDate]);
    id v28 = sub_1001E8354(v27);
    __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
    -[MIStoreMetadata setIAdConversionDate:](v4, "setIAdConversionDate:", v29);

    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v5 iAdImpressionDate]);
    id v31 = sub_1001E8354(v30);
    id v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    -[MIStoreMetadata setIAdImpressionDate:](v4, "setIAdImpressionDate:", v32);

    id v33 = (void *)objc_claimAutoreleasedReturnValue([v5 iAdAttribution]);
    id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 stringValue]);
    -[MIStoreMetadata setIAdAttribution:](v4, "setIAdAttribution:", v34);

    __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v5 storeCohort]);
    -[MIStoreMetadata setStoreCohort:](v4, "setStoreCohort:", v35);

    -[MIStoreMetadata setDeviceBasedVPP:](v4, "setDeviceBasedVPP:", [v5 isDeviceBasedVPP]);
    __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v5 variantID]);

    -[MIStoreMetadata setVariantID:](v4, "setVariantID:", v36);
  }

  return v4;
}

void *sub_1002D92D0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  id v13 = 0LL;
  id v5 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "initWithBundleIdentifier:allowPlaceholder:error:",  v3,  0LL,  &v13);
  __int128 v6 = (LSApplicationRecord *)v13;
  if (v6)
  {
    objc_super v7 = v6;
    uint64_t v8 = ASDLogHandleForCategory(19LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v15 = v3;
      __int16 v16 = 2114;
      id v17 = v7;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Error finding app for bundle ID %{public}@: %{public}@",  buf,  0x16u);
    }

    id v10 = sub_1002D941C(objc_alloc(&OBJC_CLASS___ODRApplication), v3);
  }

  else
  {
    id v11 = sub_1002D94AC(v4, v5, 1);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v11);
    objc_super v7 = v5;
  }

  return v10;
}

void *sub_1002D941C(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)&OBJC_CLASS___ODRApplication;
    a1 = objc_msgSendSuper2(&v9, "init");
    if (a1)
    {
      dispatch_queue_t v4 = dispatch_queue_create("com.apple.appstored.ODRApplication", &_dispatch_queue_attr_concurrent);
      id v5 = (void *)a1[7];
      a1[7] = v4;

      id v6 = [v3 copy];
      objc_super v7 = (void *)a1[3];
      a1[3] = v6;
    }
  }

  return a1;
}

id sub_1002D94AC(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  objc_opt_self(a1);
  if (a3 && (!v5 || ([v5 isPlaceholder] & 1) != 0))
  {
    id v6 = 0LL;
  }

  else
  {
    objc_super v7 = objc_alloc(&OBJC_CLASS___ODRMutableApplication);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    id v6 = sub_1002D941C(v7, v8);

    if (v6)
    {
      objc_super v9 = (dispatch_queue_s *)v6[7];
      block = _NSConcreteStackBlock;
      uint64_t v30 = 3221225472LL;
      id v31 = sub_1002DBB18;
      id v32 = &unk_1003EC5C0;
      id v33 = v6;
      LOBYTE(v34) = 1;
      dispatch_barrier_sync(v9, &block);
    }

    id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 URL]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 URLByResolvingSymlinksInPath]);
    id v12 = v11;
    if (v6)
    {
      id v13 = [v11 copy];
      id v14 = (dispatch_queue_s *)v6[7];
      block = _NSConcreteStackBlock;
      uint64_t v30 = 3221225472LL;
      id v31 = sub_1002DA3E8;
      id v32 = &unk_1003E9DC0;
      id v33 = v6;
      id v34 = v13;
      id v15 = v13;
      dispatch_barrier_async(v14, &block);
    }

    __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v5 shortVersionString]);
    sub_1002DB4E8((uint64_t)v6, v16);

    id v17 = (void *)objc_claimAutoreleasedReturnValue([v5 exactBundleVersion]);
    sub_1002DB56C((uint64_t)v6, v17);

    id v18 = (void *)objc_claimAutoreleasedReturnValue([v5 iTunesMetadata]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v18 variantID]);
    sub_1002DB5F0((uint64_t)v6, v19);

    id v20 = (void *)objc_claimAutoreleasedReturnValue([v5 iTunesMetadata]);
    id v21 = [v20 storeItemIdentifier];

    if (v21)
    {
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v5 iTunesMetadata]);
      id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%lld",  [v22 storeItemIdentifier]));
      sub_1002DB674((uint64_t)v6, v23);

      sub_1002DB6F8((uint64_t)v6, (char)[v5 applicationHasMIDBasedSINF]);
      if ([v5 isBeta])
      {
        sub_1002DB758((uint64_t)v6, 1);
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v5 iTunesMetadata]);
        id v25 = [v24 betaVersionIdentifier];
      }

      else
      {
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v5 iTunesMetadata]);
        id v25 = [v24 versionIdentifier];
      }

      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%lld", v25));
      sub_1002DB7B8((uint64_t)v6, v26);
    }
  }

  id v27 = [v6 copy];

  return v27;
}

void *sub_1002D9790(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  id v13 = 0LL;
  id v5 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "initWithBundleIdentifier:allowPlaceholder:error:",  v3,  1LL,  &v13);
  id v6 = (LSApplicationRecord *)v13;
  if (v6)
  {
    objc_super v7 = v6;
    uint64_t v8 = ASDLogHandleForCategory(19LL);
    objc_super v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v15 = v3;
      __int16 v16 = 2114;
      id v17 = v7;
      _os_log_debug_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEBUG,  "Error finding app for bundle ID %{public}@: %{public}@",  buf,  0x16u);
    }

    id v10 = sub_1002D941C(objc_alloc(&OBJC_CLASS___ODRApplication), v3);
  }

  else
  {
    id v11 = sub_1002D94AC(v4, v5, 0);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v11);
    objc_super v7 = v5;
  }

  return v10;
}

id sub_1002D98DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_opt_self(a1);
  id v5 = sub_1002D94AC(v4, v3, 1);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  return v6;
}

id sub_1002D9924(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  if (!a1)
  {
    uint64_t v8 = 0LL;
    goto LABEL_17;
  }

  objc_opt_self(&OBJC_CLASS___ODRApplication);
  if (qword_100462618 != -1) {
    dispatch_once(&qword_100462618, &stru_1003F1EA0);
  }
  id v6 = (id)qword_100462610;
  id v7 = objc_msgSend(v6, "numberOfMatchesInString:options:range:", v5, 0, 0, objc_msgSend(v5, "length"));

  if (!v7)
  {
    id v10 = sub_1002D9B34(a1);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if (v11)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 stringByRemovingPercentEncoding]);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v11 URLByAppendingPathComponent:v12]);

      id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 path]);
      unsigned int v16 = [v14 fileExistsAtPath:v15];

      if (v16)
      {
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 path]);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v17));

        objc_super v9 = 0LL;
      }

      else
      {
        objc_super v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"_OnDemandResourcesErrorDomain",  120LL,  0LL));
        uint64_t v8 = 0LL;
      }
    }

    else
    {
      objc_super v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"_OnDemandResourcesErrorDomain",  102LL,  0LL));
      uint64_t v8 = 0LL;
    }

    if (!a3) {
      goto LABEL_16;
    }
    goto LABEL_14;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v5));
  objc_super v9 = 0LL;
  if (a3)
  {
LABEL_14:
    if (!v8) {
      *a3 = v9;
    }
  }

id sub_1002D9B34(uint64_t a1)
{
  uint64_t v4 = *(void **)(a1 + 112);
  id v2 = (id *)(a1 + 112);
  id v3 = v4;
  if (!v4)
  {
    objc_storeStrong(v2, *(id *)(a1 + 40));
    id v3 = *(void **)(a1 + 112);
  }

  return v3;
}

id sub_1002D9B68(id result, uint64_t a2)
{
  if (result)
  {
    uint64_t v5 = 0LL;
    id v6 = &v5;
    uint64_t v7 = 0x3032000000LL;
    uint64_t v8 = sub_1002D9C24;
    objc_super v9 = sub_1002D9C34;
    id v10 = 0LL;
    id v2 = (dispatch_queue_s *)*((void *)result + 7);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002D9C3C;
    block[3] = &unk_1003EFD18;
    void block[4] = result;
    void block[5] = &v5;
    block[6] = a2;
    dispatch_sync(v2, block);
    id v3 = (id)v6[5];
    _Block_object_dispose(&v5, 8);

    return v3;
  }

  return result;
}

uint64_t sub_1002D9C24(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002D9C34(uint64_t a1)
{
}

void sub_1002D9C3C(uint64_t *a1)
{
  id v2 = sub_1002DB930((void *)a1[4]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    id v10 = v3;
    uint64_t v4 = objc_alloc(&OBJC_CLASS___ODRManifest);
    id v5 = sub_1002D9D08(a1[4]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    uint64_t v7 = sub_10020C578(v4, v10, v6, a1[6]);
    uint64_t v8 = *(void *)(a1[5] + 8);
    objc_super v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

LABEL_5:
    id v3 = v10;
    goto LABEL_6;
  }

  if (a1[6])
  {
    id v10 = 0LL;
    *(void *)a1[6] = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"_OnDemandResourcesErrorDomain",  100LL,  0LL));
    goto LABEL_5;
  }

id sub_1002D9D08(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  uint64_t v8 = sub_1002D9C24;
  objc_super v9 = sub_1002D9C34;
  id v10 = 0LL;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DA1C0;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

id sub_1002D9DC8(id result, uint64_t a2)
{
  if (result)
  {
    uint64_t v5 = 0LL;
    id v6 = &v5;
    uint64_t v7 = 0x3032000000LL;
    uint64_t v8 = sub_1002D9C24;
    objc_super v9 = sub_1002D9C34;
    id v10 = 0LL;
    id v2 = (dispatch_queue_s *)*((void *)result + 7);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1002D9E84;
    block[3] = &unk_1003EFD18;
    void block[4] = result;
    void block[5] = &v5;
    block[6] = a2;
    dispatch_sync(v2, block);
    id v3 = (id)v6[5];
    _Block_object_dispose(&v5, 8);

    return v3;
  }

  return result;
}

void sub_1002D9E84(uint64_t a1)
{
  id v2 = sub_1002DB9B0(*(void **)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    id v7 = v3;
    uint64_t v4 = sub_1002EE62C(objc_alloc(&OBJC_CLASS___ODRBundleTagManifest), v3, *(void **)(a1 + 48));
    uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v6 = *(void **)(v5 + 40);
    *(void *)(v5 + 40) = v4;

LABEL_5:
    id v3 = v7;
    goto LABEL_6;
  }

  if (*(void *)(a1 + 48))
  {
    id v7 = 0LL;
    **(void **)(a1 + 4_Block_object_dispose(&a9, 8) = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"_OnDemandResourcesErrorDomain",  115LL,  0LL));
    goto LABEL_5;
  }

void sub_1002D9F28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = v3;
  if (!v2) {
    goto LABEL_12;
  }
  uint64_t v5 = *(void **)(v2 + 24);
  id v6 = sub_1002D9D08((uint64_t)v3);
  uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
  if (v5 == (void *)v7)
  {
  }

  else
  {
    uint64_t v8 = (void *)v7;
    if (!*(void *)(v2 + 24))
    {
LABEL_13:
      LOBYTE(v10) = 0;
      goto LABEL_22;
    }

    id v9 = sub_1002D9D08((uint64_t)v4);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if (!v10)
    {
LABEL_22:

      goto LABEL_23;
    }

    id v11 = *(void **)(v2 + 24);
    id v12 = sub_1002D9D08((uint64_t)v4);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    LOBYTE(v11) = [v11 isEqual:v13];
  }

  id v14 = *(void **)(v2 + 40);
  id v15 = sub_1002DA2F0((uint64_t)v4);
  uint64_t v16 = objc_claimAutoreleasedReturnValue(v15);
  if (v14 == (void *)v16)
  {

    goto LABEL_15;
  }

  uint64_t v8 = (void *)v16;
  if (!*(void *)(v2 + 40)) {
    goto LABEL_13;
  }
  id v17 = sub_1002DA2F0((uint64_t)v4);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v17);
  if (!v10) {
    goto LABEL_22;
  }
  id v18 = *(void **)(v2 + 40);
  id v19 = sub_1002DA2F0((uint64_t)v4);
  id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  LOBYTE(v1_Block_object_dispose(&a9, 8) = [v18 isEqual:v20];

  if ((v18 & 1) != 0)
  {
LABEL_15:
    id v21 = sub_1002DAB14(v2);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v21);
    id v22 = sub_1002DAB14((uint64_t)v4);
    uint64_t v23 = objc_claimAutoreleasedReturnValue(v22);
    __int128 v24 = (void *)v23;
    LOBYTE(v10) = 0;
    if (!v8 || !v23) {
      goto LABEL_21;
    }
    if ([v8 isEqual:v23]) {
LABEL_19:
    }
      LOBYTE(v10) = 1;
    else {
      LOBYTE(v10) = 0;
    }
LABEL_21:

    goto LABEL_22;
  }

id sub_1002DA0C8(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  uint64_t v8 = sub_1002D9C24;
  id v9 = sub_1002D9C34;
  id v10 = 0LL;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DA188;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1002DA188(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 8) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1002DA1C0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 24) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1002DA1F8(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  uint64_t v8 = sub_1002D9C24;
  id v9 = sub_1002D9C34;
  id v10 = 0LL;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DA2B8;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1002DA2B8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1002DA2F0(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  uint64_t v8 = sub_1002D9C24;
  id v9 = sub_1002D9C34;
  id v10 = 0LL;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DA3B0;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1002DA3B0(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 40) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1002DA3E8(uint64_t a1)
{
}

id sub_1002DA3F4(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  uint64_t v8 = sub_1002D9C24;
  id v9 = sub_1002D9C34;
  id v10 = 0LL;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DA4B4;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1002DA4B4(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 48) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1002DA4EC(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  uint64_t v8 = sub_1002D9C24;
  id v9 = sub_1002D9C34;
  id v10 = 0LL;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DA5AC;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1002DA5AC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 64) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

BOOL sub_1002DA5E4(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 1;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DA68C;
  v4[3] = &unk_1003EC4F8;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((_BYTE *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1002DA68C(uint64_t a1)
{
  BOOL v2 = sub_1002DB9B0(*(void **)(a1 + 32));
  id v5 = (id)objc_claimAutoreleasedReturnValue(v2);
  if (v5)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v5 path]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = [v3 fileExistsAtPath:v4];
  }
}

BOOL sub_1002DA714(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DA7B8;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((_BYTE *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1002DA7B8(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 16LL);
  return result;
}

BOOL sub_1002DA7CC(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DA870;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((_BYTE *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1002DA870(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 72LL);
  return result;
}

BOOL sub_1002DA884(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DA928;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((_BYTE *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1002DA928(uint64_t result)
{
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = *(_BYTE *)(*(void *)(result + 32) + 73LL);
  return result;
}

BOOL sub_1002DA93C(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x2020000000LL;
  char v8 = 0;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DA9E0;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  BOOL v2 = *((_BYTE *)v6 + 24) != 0;
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t sub_1002DA9E0(uint64_t result)
{
  id v1 = *(void **)(result + 32);
  if (v1) {
    LOBYTE(v1) = v1[3] && v1[1] && v1[8] != 0LL;
  }
  *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = (_BYTE)v1;
  return result;
}

id sub_1002DAA1C(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  char v8 = sub_1002D9C24;
  id v9 = sub_1002D9C34;
  id v10 = 0LL;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DAADC;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1002DAADC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 80) copy];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

id sub_1002DAB14(uint64_t a1)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v5 = 0LL;
  id v6 = &v5;
  uint64_t v7 = 0x3032000000LL;
  char v8 = sub_1002D9C24;
  id v9 = sub_1002D9C34;
  id v10 = 0LL;
  id v1 = *(dispatch_queue_s **)(a1 + 56);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1002DABD4;
  v4[3] = &unk_1003E9BE0;
  void v4[4] = a1;
  void v4[5] = &v5;
  dispatch_sync(v1, v4);
  id v2 = (id)v6[5];
  _Block_object_dispose(&v5, 8);

  return v2;
}

void sub_1002DABD4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1002DAC24(*(void **)(a1 + 32), a2);
  id v7 = (id)objc_claimAutoreleasedReturnValue(v3);
  id v4 = [v7 copy];
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void *sub_1002DAC24(void *a1, uint64_t a2)
{
  if (a1)
  {
    id v2 = a1;
    if (a1[11])
    {
      uint64_t v3 = objc_opt_class(&OBJC_CLASS___ODRApplication, a2);
      if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
      {
LABEL_30:
        a1 = (id)v2[11];
        return a1;
      }
    }

    id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    if (v2[3] && v2[1] && v2[8])
    {
      if (*((_BYTE *)v2 + 73)) {
        uint64_t v5 = "V";
      }
      else {
        uint64_t v5 = "";
      }
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"adamID = %@%s",  v2[1],  v5));
      -[NSMutableArray addObject:](v4, "addObject:", v6);

      if (!v2[8]) {
        goto LABEL_24;
      }
      if (*((_BYTE *)v2 + 16)) {
        id v7 = "B";
      }
      else {
        id v7 = "";
      }
      char v8 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"versionID = %@%s",  v2[8],  v7);
    }

    else
    {
      if (v2[6])
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"version = %@",  v2[6]));
        -[NSMutableArray addObject:](v4, "addObject:", v9);
      }

      if (v2[4])
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"shortVersion = %@",  v2[4]));
        -[NSMutableArray addObject:](v4, "addObject:", v10);
      }

      id v11 = sub_1002DB930(v2);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      if (v12)
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 path]);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 attributesOfItemAtPath:v14 error:0]);

        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 fileModificationDate]);
      }

      else
      {
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      }

      [v16 timeIntervalSinceReferenceDate];
      uint64_t v18 = v17;

      char v8 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"modified = %.0f",  v18,  v25);
    }

    id v19 = (void *)objc_claimAutoreleasedReturnValue(v8);
    -[NSMutableArray addObject:](v4, "addObject:", v19);

LABEL_24:
    if (v2[10])
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"variantID = %@",  v2[10]));
      -[NSMutableArray addObject:](v4, "addObject:", v20);
    }

    if (-[NSMutableArray count](v4, "count"))
    {
      id v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray componentsJoinedByString:](v4, "componentsJoinedByString:", @"; "));
      uint64_t v22 = objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"{%@}", v21));
      uint64_t v23 = (void *)v2[11];
      v2[11] = v22;
    }

    else
    {
      id v21 = (void *)v2[11];
      v2[11] = 0LL;
    }

    goto LABEL_30;
  }

  return a1;
}

void sub_1002DAFB0(uint64_t a1)
{
}

void sub_1002DAFC0(uint64_t a1, void *a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v5 = *(void **)(a1 + 8);
    id v6 = a2;
    id v7 = [v5 copyWithZone:a3];
    char v8 = (void *)v6[1];
    v6[1] = v7;

    *((_BYTE *)v6 + 16) = *(_BYTE *)(a1 + 16);
    id v9 = [*(id *)(a1 + 24) copyWithZone:a3];
    id v10 = (void *)v6[3];
    v6[3] = v9;

    id v11 = [*(id *)(a1 + 32) copyWithZone:a3];
    id v12 = (void *)v6[4];
    void v6[4] = v11;

    id v13 = [*(id *)(a1 + 40) copyWithZone:a3];
    id v14 = (void *)v6[5];
    void v6[5] = v13;

    id v15 = [*(id *)(a1 + 48) copyWithZone:a3];
    uint64_t v16 = (void *)v6[6];
    v6[6] = v15;

    id v17 = [*(id *)(a1 + 64) copyWithZone:a3];
    uint64_t v18 = (void *)v6[8];
    void v6[8] = v17;

    *((_BYTE *)v6 + 72) = *(_BYTE *)(a1 + 72);
    *((_BYTE *)v6 + 73) = *(_BYTE *)(a1 + 73);
    id v19 = [*(id *)(a1 + 80) copyWithZone:a3];
    id v20 = (id)v6[10];
    v6[10] = v19;
  }

void sub_1002DB174(uint64_t a1)
{
}

void sub_1002DB238(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    uint64_t v3 = MEMORY[0x18];
LABEL_7:
    id v6 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{bundleID = %@; version = %@; shortVersion = %@; variantID = %@}",
           v3,
           v2[6],
           v2[4],
           v2[10]);
    goto LABEL_8;
  }

  uint64_t v3 = v2[3];
  if (!v3) {
    goto LABEL_7;
  }
  uint64_t v4 = v2[1];
  if (!v4) {
    goto LABEL_7;
  }
  uint64_t v5 = v2[8];
  if (!v5) {
    goto LABEL_7;
  }
  id v6 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"{bundleID = %@; adamID = %@; versionID = %@; variantID = %@}",
         v3,
         v4,
         v5,
         v2[10]);
LABEL_8:
  uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;
}

void sub_1002DB370(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    unint64_t v3 = (unint64_t)[*(id *)(v2 + 24) hash];
    unint64_t v4 = (unint64_t)[*(id *)(v2 + 40) hash] ^ v3;
    id v6 = sub_1002DAC24((void *)v2, v5);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    unint64_t v8 = v4 ^ (unint64_t)[v7 hash];
  }

  else
  {
    unint64_t v8 = 0LL;
  }

  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = v8;
}

void sub_1002DB4E8(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 copy];
    unint64_t v4 = *(dispatch_queue_s **)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002DBAF4;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v3;
    id v5 = v3;
    dispatch_barrier_async(v4, v6);
  }

void sub_1002DB56C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 copy];
    unint64_t v4 = *(dispatch_queue_s **)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002DBB00;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v3;
    id v5 = v3;
    dispatch_barrier_async(v4, v6);
  }

void sub_1002DB5F0(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 copy];
    unint64_t v4 = *(dispatch_queue_s **)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002DBB38;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v3;
    id v5 = v3;
    dispatch_barrier_async(v4, v6);
  }

void sub_1002DB674(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 copy];
    unint64_t v4 = *(dispatch_queue_s **)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002DBAD8;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v3;
    id v5 = v3;
    dispatch_barrier_async(v4, v6);
  }

void sub_1002DB6F8(uint64_t a1, char a2)
{
  if (a1)
  {
    uint64_t v2 = *(dispatch_queue_s **)(a1 + 56);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1002DBB28;
    v3[3] = &unk_1003EC5C0;
    v3[4] = a1;
    char v4 = a2;
    dispatch_barrier_async(v2, v3);
  }

void sub_1002DB758(uint64_t a1, char a2)
{
  if (a1)
  {
    uint64_t v2 = *(dispatch_queue_s **)(a1 + 56);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1002DBAE4;
    v3[3] = &unk_1003EC5C0;
    v3[4] = a1;
    char v4 = a2;
    dispatch_barrier_async(v2, v3);
  }

void sub_1002DB7B8(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 copy];
    char v4 = *(dispatch_queue_s **)(a1 + 56);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002DBB0C;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v3;
    id v5 = v3;
    dispatch_barrier_async(v4, v6);
  }

void sub_1002DB83C(id a1)
{
  id v6 = 0LL;
  uint64_t v1 = objc_claimAutoreleasedReturnValue( +[NSDataDetector dataDetectorWithTypes:error:]( &OBJC_CLASS___NSDataDetector,  "dataDetectorWithTypes:error:",  32LL,  &v6));
  id v2 = v6;
  id v3 = (void *)qword_100462610;
  qword_100462610 = v1;

  if (!qword_100462610)
  {
    uint64_t v4 = ASDLogHandleForCategory(19LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543362;
      id v8 = v2;
      _os_log_error_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_ERROR,  "Unable to create URL data detector.  Error: %{public}@",  buf,  0xCu);
    }
  }
}

void *sub_1002DB930(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    id v2 = (void *)a1[12];
    if (!v2)
    {
      id v3 = sub_1002D9B34((uint64_t)a1);
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 URLByAppendingPathComponent:@"AssetPackManifest"]);
      uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 URLByAppendingPathExtension:@"plist"]);
      id v7 = (void *)v1[12];
      v1[12] = v6;

      id v2 = (void *)v1[12];
    }

    a1 = v2;
  }

  return a1;
}

void *sub_1002DB9B0(void *a1)
{
  if (a1)
  {
    uint64_t v1 = a1;
    id v2 = (void *)a1[13];
    if (!v2)
    {
      id v3 = sub_1002D9B34((uint64_t)a1);
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 URLByAppendingPathComponent:@"OnDemandResources"]);
      uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 URLByAppendingPathExtension:@"plist"]);
      id v7 = (void *)v1[13];
      v1[13] = v6;

      id v2 = (void *)v1[13];
    }

    a1 = v2;
  }

  return a1;
}

void sub_1002DBAD8(uint64_t a1)
{
}

uint64_t sub_1002DBAE4(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 16LL) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1002DBAF4(uint64_t a1)
{
}

void sub_1002DBB00(uint64_t a1)
{
}

void sub_1002DBB0C(uint64_t a1)
{
}

uint64_t sub_1002DBB18(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 72LL) = *(_BYTE *)(result + 40);
  return result;
}

uint64_t sub_1002DBB28(uint64_t result)
{
  *(_BYTE *)(*(void *)(result + 32) + 73LL) = *(_BYTE *)(result + 40);
  return result;
}

void sub_1002DBB38(uint64_t a1)
{
}

void sub_1002DBBF0(uint64_t a1, void *a2, unint64_t a3)
{
  id v5 = [a2 style];
  if (v5 == (id)2)
  {
    uint64_t v6 = 2LL;
  }

  else
  {
    if (v5 != (id)1) {
      return;
    }
    uint64_t v6 = 1LL;
  }

  if (a3 <= 2) {
    CFDictionarySetValue( *(CFMutableDictionaryRef *)(a1 + 32),  *(const void **)*(&off_1003F1EE0 + a3),  +[NSNumber numberWithUnsignedInt:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInt:", v6));
  }
}

void sub_1002DC19C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
}

void sub_1002DC7B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = ASDLogHandleForCategory(40LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = 138543362;
    uint64_t v9 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}@ refreshUpdateCountWithCompletionBlock completed",  (uint8_t *)&v8,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002DCE08(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = ASDLogHandleForCategory(40LL);
  int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id Property = *(id *)(a1 + 32);
    if (Property) {
      id Property = objc_getProperty(Property, v9, 32LL, 1);
    }
    id v11 = Property;
    int v12 = 138412290;
    id v13 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[%@] reloadFromServerInBackgroundWithCompletionBlock completed",  (uint8_t *)&v12,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002DD384(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = ASDLogHandleForCategory(40LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = 138412290;
    uint64_t v12 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "[%@] updateAllWithJobResults completed",  (uint8_t *)&v11,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002DD620(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  uint64_t v8 = ASDLogHandleForCategory(40LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = 138543362;
    uint64_t v12 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}@ updateAllWithOrder completed",  (uint8_t *)&v11,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002DDB70( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location, id a16)
{
}

void sub_1002DDBC4(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    int v4 = *(_DWORD *)(a1 + 32);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_error_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_ERROR,  "Connection interrupted for pid: %i",  (uint8_t *)v5,  8u);
  }
}

void sub_1002DDC70(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v3 = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v4 = ASDLogHandleForCategory(40LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v6 = *(_DWORD *)(a1 + 48);
    int v10 = 67109120;
    LODWORD(v11) = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "Connection invalidated from pid: %i",  (uint8_t *)&v10,  8u);
  }

  id v7 = v3;
  if (WeakRetained)
  {
    uint64_t v8 = ASDLogHandleForCategory(40LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = 138543362;
      id v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_INFO,  "Client %{public}@ disconnected",  (uint8_t *)&v10,  0xCu);
    }
  }
}

Class sub_1002DDDA4(uint64_t a1)
{
  id v5 = 0LL;
  uint64_t v2 = (const char *)&unk_100462000;
  if (!qword_100462628)
  {
    __int128 v6 = off_1003F1F90;
    uint64_t v7 = 0LL;
    qword_100462628 = _sl_dlopen(&v6, &v5);
    id v3 = v5;
    if (!qword_100462628)
    {
      abort_report_np("%s", v5);
      goto LABEL_7;
    }

    if (v5) {
      goto LABEL_8;
    }
  }

  while (1)
  {
    uint64_t v2 = "_DASScheduler";
    Class result = objc_getClass("_DASScheduler");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
      break;
    }
LABEL_7:
    id v3 = (char *)abort_report_np("Unable to find class %s", v2);
LABEL_8:
    free(v3);
  }

  qword_100462620 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void *sub_1002DDEA8(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___HandleInvalidReceiptTask;
    id v5 = (char *)objc_msgSendSuper2(&v7, "init");
    a1 = v5;
    if (v5) {
      objc_storeStrong((id *)(v5 + 42), a2);
    }
  }

  return a1;
}

void sub_1002DE440(uint64_t a1, void *a2, uint64_t a3)
{
  if (a3)
  {
    (*(void (**)(void, uint64_t))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), a3);
    return;
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 selectedActionIdentifier]);
  unsigned int v5 = [v4 isEqualToString:@"InvalidReceiptPromptOKAction"];

  if (!v5)
  {
    (*(void (**)(void, void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL);
    return;
  }

  if (*(void *)(a1 + 32))
  {
    __int128 v6 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
    uint64_t v7 = *(void *)(a1 + 32);
    id v15 = 0LL;
    [v6 openURL:v7 withOptions:0 error:&v15];
    id v8 = v15;

    if (v8)
    {
LABEL_6:
      uint64_t v9 = ASDLogHandleForCategory(36LL);
      int v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)__int128 buf = 138543362;
        id v17 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_ERROR,  "Encountered error opening store. Error: %{public}@",  buf,  0xCu);
      }

      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = ASDErrorWithSafeUserInfo(v8);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v13);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v14 = ASDErrorWithDescription(ASDErrorDomain, 507LL, @"Could not construct product page URL from the adam ID");
    id v8 = (id)objc_claimAutoreleasedReturnValue(v14);
    if (v8) {
      goto LABEL_6;
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_12:
}

id *sub_1002DEEE4(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)&OBJC_CLASS___AppLedgerInstallItem;
    id v4 = (id *)objc_msgSendSuper2(&v9, "init");
    a1 = v4;
    if (v4)
    {
      if (v3)
      {
        objc_storeStrong(v4 + 1, v3[4]);
        a1[2] = v3[5];
        id v5 = v3[3];
      }

      else
      {
        objc_storeStrong(v4 + 1, 0LL);
        id v5 = 0LL;
        a1[2] = 0LL;
      }

      objc_storeStrong(a1 + 3, v5);
      if (v3)
      {
        objc_storeStrong(a1 + 4, v3[2]);
        id v6 = v3[8];
      }

      else
      {
        objc_storeStrong(a1 + 4, 0LL);
        id v6 = 0LL;
      }

      objc_storeStrong(a1 + 5, v6);
      if (v3) {
        id v7 = v3[9];
      }
      else {
        id v7 = 0LL;
      }
      a1[6] = v7;
    }
  }

  return a1;
}

id sub_1002DF048(void *a1, void *a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = a1[6];
  if ((unint64_t)(v4 + 1) >= 2)
  {
    if (v4 == -2)
    {
      else {
        uint64_t v5 = 1LL;
      }
    }

    else
    {
      uint64_t v5 = 3LL;
    }
  }

  else
  {
    uint64_t v5 = 2LL;
  }

  unint64_t v6 = a1[4];
  if (v6 == 3)
  {
    else {
      uint64_t v10 = os_variant_has_internal_content("com.apple.appstored")
    }
    unint64_t v6 = 3LL;
  }

  else
  {
    if (!v6)
    {
      uint64_t v7 = ASDLogHandleForCategory(2LL);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id Property = objc_getProperty(a1, v9, 40LL, 1);
        _os_log_fault_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_FAULT,  "[%@] Invalid coordinator intent, treating as initiating instead",  buf,  0xCu);
      }

      unint64_t v6 = 1LL;
    }

    uint64_t v10 = 1LL;
  }

  uint64_t v11 = ASDLogHandleForCategory(2LL);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v14 = objc_getProperty(a1, v13, 40LL, 1);
    id v15 = sub_1001E631C(v6);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    uint64_t v17 = IXStringForCoordinatorImportance(v5);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    *(_DWORD *)__int128 buf = 138412802;
    id Property = v14;
    __int16 v37 = 2114;
    id v38 = v16;
    __int16 v39 = 2114;
    uint64_t v40 = v18;
  }

  uint64_t v19 = 1LL;
  id v21 = objc_getProperty(a1, v20, 8LL, 1);
  id v22 = sub_1001E3F78((uint64_t)&OBJC_CLASS___IXAppInstallCoordinator, v21, v6, (void *)v5, (id)v19, v10, a2);
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

  if (objc_getProperty(a1, v24, 24LL, 1))
  {
    id v26 = objc_getProperty(a1, v25, 24LL, 1);
    id v34 = 0LL;
    unsigned __int8 v27 = sub_1001E5CCC(v23, v26, &v34);
    id v28 = v34;
    if ((v27 & 1) == 0)
    {
      uint64_t v29 = ASDLogHandleForCategory(2LL);
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        id v33 = objc_getProperty(a1, v31, 40LL, 1);
        *(_DWORD *)__int128 buf = 138412546;
        id Property = v33;
        __int16 v37 = 2114;
        id v38 = v28;
        _os_log_error_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_ERROR,  "[%@] Error setting the gizmo pairing ID: %{public}@",  buf,  0x16u);
      }
    }
  }

  return v23;
}

void sub_1002DF3B4(void *a1, char *newValue)
{
  if (a1) {
    objc_setProperty_atomic(a1, newValue, newValue, 8LL);
  }
}

uint64_t sub_1002DF3C8(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 16) = a2;
  }
  return result;
}

uint64_t sub_1002DF3D4(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 32) = a2;
  }
  return result;
}

uint64_t sub_1002DF3E0(uint64_t result, uint64_t a2)
{
  if (result) {
    *(void *)(result + 4_Block_object_dispose(va, 8) = a2;
  }
  return result;
}

CoordinatorBuilder *sub_1002DF434(void *a1)
{
  if (a1)
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___CoordinatorBuilder);
    id v3 = sub_100323C54(a1);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (v2) {
      objc_setProperty_atomic(v2, v4, v5, 40LL);
    }

    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([a1 valueForProperty:@"bundle_id"]);
    if (v2) {
      objc_setProperty_atomic(v2, v6, v7, 8LL);
    }

    id v8 = sub_1001E2734(a1, (uint64_t)@"gizmo_pairing_id");
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if (v2) {
      objc_setProperty_atomic(v2, v9, v10, 24LL);
    }

    id v11 = sub_1001E2698(a1, (uint64_t)@"coordinator_intent");
    if (v2) {
      v2->_intent = (unint64_t)v11;
    }
    id v12 = sub_1001E25D0(a1, (uint64_t)@"IFNULL(app_install.priority, 0)");
    id v13 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(v12);
    if (!v13)
    {
      id v14 = sub_1001E25D0(a1, (uint64_t)@"priority");
      uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
      if (v15) {
        id v13 = (_UNKNOWN **)v15;
      }
      else {
        id v13 = &off_10040D060;
      }
    }

    id v16 = [v13 integerValue];
    if (v2) {
      v2->_priority = (int64_t)v16;
    }
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return v2;
}

id sub_1002DF56C(uint64_t a1)
{
  if (qword_100462638 != -1) {
    dispatch_once(&qword_100462638, &stru_1003F1FD0);
  }
  return (id)qword_100462630;
}

void sub_1002DF5B0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___UpdatesService);
  uint64_t v2 = (void *)qword_100462630;
  qword_100462630 = (uint64_t)v1;
}

void sub_1002DF6EC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 16LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1002DF75C;
  v3[3] = &unk_1003F1FF8;
  id v4 = v1;
  [v2 autoUpdateEnabled:v3];
}

uint64_t sub_1002DF75C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002DF958(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138543618;
    id v13 = v4;
    __int16 v14 = 2114;
    uint64_t v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ getManagedUpdates requested for client: %{public}@",  buf,  0x16u);
  }

  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = *(void **)(*(void *)(a1 + 40) + 16LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002DFAAC;
  void v9[3] = &unk_1003F1F28;
  id v10 = v7;
  id v11 = *(id *)(a1 + 48);
  [v8 getManagedUpdatesWithRequestToken:v10 replyHandler:v9];
}

void sub_1002DFAAC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = ASDLogHandleForCategory(40LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v13 = 138543362;
    uint64_t v14 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@ getManagedUpdates completed successfully",  (uint8_t *)&v13,  0xCu);
  }

  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = ASDErrorWithSafeUserInfo(v5);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  (*(void (**)(uint64_t, id, void *))(v10 + 16))(v10, v6, v12);
}

void sub_1002DFC80(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = *(void **)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v14 = v4;
    __int16 v15 = 2114;
    uint64_t v16 = v5;
    __int16 v17 = 2114;
    uint64_t v18 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ getUpdateMetadataForBundleID %{public}@ requested for client: %{public}@",  buf,  0x20u);
  }

  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void **)(*(void *)(a1 + 48) + 16LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002DFDDC;
  void v10[3] = &unk_1003F2020;
  id v11 = *(id *)(a1 + 32);
  id v12 = *(id *)(a1 + 56);
  [v9 getUpdateMetadataForBundleID:v8 replyHandler:v10];
}

void sub_1002DFDDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory(40LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138543362;
    uint64_t v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}@ getUpdateMetadataForBundleID completed successfully",  (uint8_t *)&v7,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002DFF5C(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138543618;
    int v13 = v4;
    __int16 v14 = 2114;
    __int16 v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ getUpdates requested for client: %{public}@",  buf,  0x16u);
  }

  int v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void **)(*(void *)(a1 + 40) + 16LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002E00B0;
  void v9[3] = &unk_1003F2048;
  id v10 = v7;
  id v11 = *(id *)(a1 + 48);
  [v8 getUpdatesWithRequestToken:v10 replyHandler:v9];
}

void sub_1002E00B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory(40LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138543362;
    uint64_t v8 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "%{public}@ getUpdates completed successfully",  (uint8_t *)&v7,  0xCu);
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002E0230(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138543618;
    int v13 = v4;
    __int16 v14 = 2114;
    __int16 v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ refreshUpdateCount requested for client: %{public}@",  buf,  0x16u);
  }

  int v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void **)(*(void *)(a1 + 40) + 16LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002E0384;
  void v9[3] = &unk_1003F1F00;
  id v10 = v7;
  id v11 = *(id *)(a1 + 48);
  [v8 refreshUpdateCountWithRequestToken:v10 replyHandler:v9];
}

void sub_1002E0384(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = ASDLogHandleForCategory(40LL);
  int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = v7;
  if (v5)
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v14 = 138543618;
      uint64_t v15 = v9;
      __int16 v16 = 2114;
      id v17 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_ERROR,  "%{public}@ refreshUpdateCount completed with error: %{public}@",  (uint8_t *)&v14,  0x16u);
    }
  }

  else if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    int v14 = 138543362;
    uint64_t v15 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@ refreshUpdateCount completed successfully",  (uint8_t *)&v14,  0xCu);
  }

  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = ASDErrorWithSafeUserInfo(v5);
  int v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  (*(void (**)(uint64_t, uint64_t, void *))(v11 + 16))(v11, a2, v13);
}

void sub_1002E0588(void *a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)a1[4];
    uint64_t v5 = a1[7];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v6 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138543874;
    uint64_t v19 = v4;
    __int16 v20 = 2050;
    uint64_t v21 = v5;
    __int16 v22 = 2114;
    uint64_t v23 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ refreshUpdateForApp %{public}lld requested by client: %{public}@",  buf,  0x20u);
  }

  uint64_t v8 = (void *)a1[4];
  uint64_t v9 = *(void **)(a1[5] + 16LL);
  uint64_t v10 = a1[7];
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1002E06F8;
  v14[3] = &unk_1003F2070;
  id v11 = v8;
  int v13 = (void *)a1[6];
  uint64_t v12 = a1[7];
  id v15 = v11;
  uint64_t v17 = v12;
  id v16 = v13;
  [v9 refreshUpdateForApp:v10 token:v11 replyHandler:v14];
}

void sub_1002E06F8(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = ASDLogHandleForCategory(40LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = v5;
  if (v3)
  {
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = a1[4];
      uint64_t v8 = a1[6];
      int v14 = 138543874;
      uint64_t v15 = v7;
      __int16 v16 = 2050;
      uint64_t v17 = v8;
      __int16 v18 = 2114;
      id v19 = v3;
      _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "%{public}@ refreshUpdateForApp %{public}lld completed with error: %{public}@",  (uint8_t *)&v14,  0x20u);
    }
  }

  else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a1[4];
    uint64_t v10 = a1[6];
    int v14 = 138543618;
    uint64_t v15 = v9;
    __int16 v16 = 2050;
    uint64_t v17 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "%{public}@ refreshUpdateForApp %{public}lld completed successfully",  (uint8_t *)&v14,  0x16u);
  }

  uint64_t v11 = a1[5];
  uint64_t v12 = ASDErrorWithSafeUserInfo(v3);
  int v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v13);
}

void sub_1002E0908(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138543618;
    int v13 = v4;
    __int16 v14 = 2114;
    uint64_t v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ reloadFromServer requested for client: %{public}@",  buf,  0x16u);
  }

  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void **)(*(void *)(a1 + 40) + 16LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002E0A5C;
  void v9[3] = &unk_1003F1F28;
  id v10 = v7;
  id v11 = *(id *)(a1 + 48);
  [v8 reloadFromServerWithRequestToken:v10 replyHandler:v9];
}

void sub_1002E0A5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = ASDLogHandleForCategory(40LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v15 = 138543618;
      uint64_t v16 = v10;
      __int16 v17 = 2114;
      id v18 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%{public}@ reloadFromServer completed with error: %{public}@",  (uint8_t *)&v15,  0x16u);
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v15 = 138543362;
    uint64_t v16 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}@ reloadFromServer completed successfully",  (uint8_t *)&v15,  0xCu);
  }

  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = ASDErrorWithSafeUserInfo(v5);
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  (*(void (**)(uint64_t, id, void *))(v12 + 16))(v12, v6, v14);
}

void sub_1002E0C60(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v13 = v4;
    __int16 v14 = 2114;
    int v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ reloadManagedUpdates requested for client: %{public}@",  buf,  0x16u);
  }

  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void **)(*(void *)(a1 + 40) + 16LL);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002E0DB4;
  void v9[3] = &unk_1003F1F28;
  id v10 = v7;
  id v11 = *(id *)(a1 + 48);
  [v8 reloadManagedUpdatesWithRequestToken:v10 replyHandler:v9];
}

void sub_1002E0DB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = ASDLogHandleForCategory(40LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    int v13 = 138543362;
    uint64_t v14 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%{public}@ reloadManagedUpdates completed successfully",  (uint8_t *)&v13,  0xCu);
  }

  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = ASDErrorWithSafeUserInfo(v5);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  (*(void (**)(uint64_t, id, void *))(v10 + 16))(v10, v6, v12);
}

void sub_1002E1148(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 16LL);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 56);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002E11E8;
  v5[3] = &unk_1003ECD38;
  id v6 = v2;
  char v8 = *(_BYTE *)(a1 + 56);
  id v7 = *(id *)(a1 + 48);
  [v3 setAutoUpdateEnabled:v4 withReplyHandler:v5];
}

uint64_t sub_1002E11E8(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) processInfo]);
    uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 bundleIdentifier]);
    id v6 = (void *)v5;
    id v7 = @"Enabled";
    if (!*(_BYTE *)(a1 + 48)) {
      id v7 = @"Disabled";
    }
    int v9 = 138412546;
    uint64_t v10 = v5;
    __int16 v11 = 2112;
    uint64_t v12 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "%@ Updated should perform automatic updates: %@",  (uint8_t *)&v9,  0x16u);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1002E13C8(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v14 = v4;
    __int16 v15 = 2114;
    uint64_t v16 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ Update all requested with client: %{public}@",  buf,  0x16u);
  }

  id v7 = *(void **)(a1 + 32);
  char v8 = *(void **)(*(void *)(a1 + 40) + 16LL);
  uint64_t v9 = *(void *)(a1 + 48);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002E1524;
  void v10[3] = &unk_1003F1F50;
  id v11 = v7;
  id v12 = *(id *)(a1 + 56);
  [v8 updateAllWithOrder:v9 requestToken:v11 replyHandler:v10];
}

void sub_1002E1524(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  id v8 = a3;
  uint64_t v9 = ASDLogHandleForCategory(40LL);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  id v11 = v10;
  if (v7)
  {
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v17 = 138543618;
      uint64_t v18 = v12;
      __int16 v19 = 2114;
      id v20 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "%{public}@ updateAllWithOrder completed with error: %{public}@",  (uint8_t *)&v17,  0x16u);
    }
  }

  else if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v17 = 138543362;
    uint64_t v18 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%{public}@ updateAllWithOrder completed successfully",  (uint8_t *)&v17,  0xCu);
  }

  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = ASDErrorWithSafeUserInfo(v7);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
  (*(void (**)(uint64_t, uint64_t, id, void *))(v14 + 16))(v14, a2, v8, v16);
}

void sub_1002E1734(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v13 = v4;
    __int16 v14 = 2114;
    uint64_t v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ reloadFromServerInBackgroundWithCompletionBlock requested for client: %{public}@",  buf,  0x16u);
  }

  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[UpdatesManager sharedManager](&OBJC_CLASS___UpdatesManager, "sharedManager"));
  id v8 = *(void **)(a1 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  void v9[2] = sub_1002E189C;
  void v9[3] = &unk_1003F1F28;
  id v10 = v8;
  id v11 = *(id *)(a1 + 40);
  [v7 reloadFromServerInBackgroundWithToken:v10 completionBlock:v9];
}

void sub_1002E189C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  uint64_t v7 = ASDLogHandleForCategory(40LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (v5)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      int v15 = 138543618;
      uint64_t v16 = v10;
      __int16 v17 = 2114;
      id v18 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_ERROR,  "%{public}@ reloadFromServerInBackgroundWithCompletionBlock completed with error: %{public}@",  (uint8_t *)&v15,  0x16u);
    }
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v15 = 138543362;
    uint64_t v16 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%{public}@ reloadFromServerInBackgroundWithCompletionBlock completed successfully",  (uint8_t *)&v15,  0xCu);
  }

  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = ASDErrorWithSafeUserInfo(v5);
  __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
  (*(void (**)(uint64_t, id, void *))(v12 + 16))(v12, v6, v14);
}

uint64_t sub_1002E1A9C(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    int v8 = 138543618;
    uint64_t v9 = v4;
    __int16 v10 = 2114;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ shouldUseModernUpdatesWithReplyHandler requested for client: %{public}@",  (uint8_t *)&v8,  0x16u);
  }

  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  +[UpdatesManager shouldUseModernUpdates](&OBJC_CLASS___UpdatesManager, "shouldUseModernUpdates"));
}

void sub_1002E1C58(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(40LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void **)(a1 + 32);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 processInfo]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
    *(_DWORD *)__int128 buf = 138543618;
    uint64_t v13 = v4;
    __int16 v14 = 2114;
    int v15 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@ getUpdateMetricsEventsWithReplyHandler requested for client: %{public}@",  buf,  0x16u);
  }

  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  void v10[2] = sub_1002E1DD8;
  void v10[3] = &unk_1003EECD8;
  id v11 = *(id *)(a1 + 48);
  uint64_t v7 = objc_retainBlock(v10);
  LOBYTE(v9) = 0;
  int v8 = -[UpdatesContext initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:]( objc_alloc(&OBJC_CLASS____TtC9appstored14UpdatesContext),  "initWithReason:requestToken:logKey:callbackHandler:includeMetrics:isVPPLookup:userInitiated:targetedItemID:",  0LL,  *(void *)(a1 + 32),  0LL,  v7,  1LL,  0LL,  v9,  0LL);
  [*(id *)(*(void *)(a1 + 40) + 16) getUpdatesWithContext:v8];
}

void sub_1002E1DD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (v5)
  {
    uint64_t v17 = a1;
    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v19;
      do
      {
        uint64_t v12 = 0LL;
        do
        {
          if (*(void *)v19 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)v12);
          id v14 = objc_alloc(&OBJC_CLASS___ASDUpdateMetricsEvent);
          int v15 = (void *)objc_claimAutoreleasedReturnValue([v13 metrics]);
          id v16 = [v14 initWithDictionary:v15];

          -[NSMutableArray addObject:](v7, "addObject:", v16);
          uint64_t v12 = (char *)v12 + 1;
        }

        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }

      while (v10);
    }

    a1 = v17;
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002E2210( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_1002E2230(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSXPCConnection currentConnection](&OBJC_CLASS___NSXPCConnection, "currentConnection"));
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[XPCClient clientIDForConnection:](&OBJC_CLASS___XPCClient, "clientIDForConnection:", v1));
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return v2;
}

uint64_t sub_1002E2894(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

Class sub_1002E29D0(uint64_t a1)
{
  id v5 = 0LL;
  uint64_t v2 = (const char *)&unk_100462000;
  if (!qword_100462648)
  {
    __int128 v6 = off_1003F20C0;
    uint64_t v7 = 0LL;
    qword_100462648 = _sl_dlopen(&v6, &v5);
    id v3 = v5;
    if (!qword_100462648)
    {
      abort_report_np("%s", v5);
      goto LABEL_7;
    }

    if (v5) {
      goto LABEL_8;
    }
  }

  while (1)
  {
    uint64_t v2 = "_DASScheduler";
    Class result = objc_getClass("_DASScheduler");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
      break;
    }
LABEL_7:
    id v3 = (char *)abort_report_np("Unable to find class %s", v2);
LABEL_8:
    free(v3);
  }

  qword_100462640 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_1002E2AD4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = v7;
    objc_opt_self(&OBJC_CLASS___RequestThrottle);
    uint64_t v17 = 0LL;
    __int128 v18 = &v17;
    uint64_t v19 = 0x2020000000LL;
    char v20 = 0;
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_1002E30A4;
    __int16 v22 = &unk_1003F20E0;
    uint64_t v23 = &v17;
    sub_100298E9C(v10, (uint64_t)buf);
    BOOL v11 = *((_BYTE *)v18 + 24) == 0;
    _Block_object_dispose(&v17, 8);

    uint64_t v12 = ASDLogHandleForCategory(25LL);
    uint64_t v13 = (id *)objc_claimAutoreleasedReturnValue(v12);
    BOOL v14 = os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_ERROR);
    if (v11)
    {
      if (v14)
      {
        *(_DWORD *)__int128 buf = 138543874;
        *(void *)&uint8_t buf[4] = v8;
        *(_WORD *)&_BYTE buf[12] = 2114;
        *(void *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2114;
        __int16 v22 = v10;
        _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  OS_LOG_TYPE_ERROR,  "Throttle: Blocking further requests for %{public}@ / %{public}@: %{public}@",  buf,  0x20u);
      }

      int v15 = objc_alloc(&OBJC_CLASS___RequestThrottleRecord);
      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) now]);
      uint64_t v13 = sub_1002CCCC4((id *)&v15->super.isa, v16, v10, v8, v9);

      sub_10029BA7C(*(void *)(a1 + 24), v13);
    }

    else if (v14)
    {
      *(_DWORD *)__int128 buf = 138543874;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&_BYTE buf[12] = 2114;
      *(void *)&buf[14] = v9;
      *(_WORD *)&buf[22] = 2114;
      __int16 v22 = v10;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  OS_LOG_TYPE_ERROR,  "Throttle: Permitting further requests for %{public}@ / %{public}@: %{public}@",  buf,  0x20u);
    }
  }
}

void sub_1002E2D08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002E2D28(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1 && sub_10029BC50(*(void *)(a1 + 24), v3))
  {
    uint64_t v4 = ASDLogHandleForCategory(25LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = 138543362;
      id v7 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Throttle: Unblocking further requests for %{public}@",  (uint8_t *)&v6,  0xCu);
    }
  }
}

uint64_t sub_1002E2DEC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  if (!a1)
  {
    a4 = 0LL;
    goto LABEL_23;
  }

  if (*(double *)(a1 + 16) >= 2.22044605e-16)
  {
    id v9 = sub_10029BCE0(*(id **)(a1 + 24), v7);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    BOOL v11 = v10;
    if (v10 && sub_1002CCE04(v10, v8))
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) now]);
      double v13 = sub_1002CCDA4(v11, v12);

      if (v13 >= 0.0 && v13 < *(double *)(a1 + 16))
      {
        uint64_t v14 = ASDLogHandleForCategory(25LL);
        int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          double v16 = *(double *)(a1 + 16) - v13;
          *(_DWORD *)__int128 buf = 138543618;
          id v26 = v7;
          __int16 v27 = 2048;
          double v28 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Throttle: Blocking request for %{public}@ will unblock after %.0f seconds",  buf,  0x16u);
        }

        if (!a4) {
          goto LABEL_22;
        }
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Throttling request for %.0f seconds",  *(double *)(a1 + 16) - v13));
        id v19 = objc_getProperty(v11, v18, 8LL, 1);
        uint64_t v20 = ASDErrorWithUnderlyingErrorAndDescription(v19, ASDErrorDomain, 603LL, v17);
        *(void *)a4 = (id)objc_claimAutoreleasedReturnValue(v20);

        a4 = 0LL;
        goto LABEL_20;
      }

      if (sub_10029BC50(*(void *)(a1 + 24), v7))
      {
        uint64_t v23 = ASDLogHandleForCategory(25LL);
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 138543362;
          id v26 = v7;
          __int16 v22 = "Throttle: Unblocking requests after expiry for %{public}@";
          goto LABEL_18;
        }

        goto LABEL_19;
      }
    }

    else if (sub_10029BC50(*(void *)(a1 + 24), v7))
    {
      uint64_t v21 = ASDLogHandleForCategory(25LL);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138543362;
        id v26 = v7;
        __int16 v22 = "Throttle: Unblocking requests for new version of %{public}@";
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v22, buf, 0xCu);
      }

BOOL sub_1002E30A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);
  unsigned int v5 = [v4 isEqualToString:AMSErrorDomain];

  if (!v5)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v3 domain]);

    unsigned int v9 = [v8 isEqualToString:NSURLErrorDomain];
    if (!v9) {
      return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
    }
    goto LABEL_4;
  }

  int v6 = (char *)[v3 code];

  if ((unint64_t)(v6 - 203) <= 3 && v6 != (char *)204) {
LABEL_4:
  }
    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + ++*(void *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = 1;
  return *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) == 0;
}

id sub_1002E3218(void *a1)
{
  if (!a1)
  {
    id v7 = 0LL;
    return v7;
  }

  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 parameterForKey:AMSBuyParamPropertyAppExtVrsId]);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___NSString, v2);
  if ((objc_opt_isKindOfClass(v1, v3) & 1) != 0)
  {
    id v5 = v1;
  }

  else
  {
    uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSNumber, v4);
    if ((objc_opt_isKindOfClass(v1, v6) & 1) == 0)
    {
      id v7 = 0LL;
      goto LABEL_8;
    }

    id v5 = (id)objc_claimAutoreleasedReturnValue([v1 stringValue]);
  }

  id v7 = v5;
LABEL_8:

  return v7;
}

id sub_1002E32B4(void *a1, uint64_t a2)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1 parameterForKey:a2]);
  if (v2)
  {
    uint64_t v6 = 0LL;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSScanner scannerWithString:](&OBJC_CLASS___NSScanner, "scannerWithString:", v2));
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  return v4;
}

id sub_1002E33DC(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  objc_opt_self(a1);
  if ([v10 count] != (id)1 && objc_msgSend(v10, "count") != (id)2)
  {
    if (a5)
    {
      [v10 count];
      uint64_t v56 = ASDErrorWithUserInfoAndFormat(507LL, 0LL, @"Expected 1 or 2 packages but received %lu");
      id v57 = 0LL;
      *a5 = (id)objc_claimAutoreleasedReturnValue(v56);
    }

    else
    {
      id v57 = 0LL;
    }

    goto LABEL_60;
  }

  uint64_t v76 = a5;
  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  double v13 = (void *)objc_claimAutoreleasedReturnValue([v11 account]);
  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ams_DSID"));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v14, @"account_id");

  int v15 = (void *)objc_claimAutoreleasedReturnValue([v11 bundleURL]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v15, @"bundle_url");

  double v16 = (void *)objc_claimAutoreleasedReturnValue([v11 clientInfo]);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 bundleIdentifier]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v17, @"client_id");

  SEL v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v11 clientType]));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v18, @"client_type");

  id v19 = (void *)objc_claimAutoreleasedReturnValue([v11 logCode]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v19, @"log_code");

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v11 externalID]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v20, @"external_id");

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v11 priority]));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v21, @"priority");

  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v11 updateType]));
  -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v22, @"update_type");

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v11 suppressDialogs]));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v23,  @"supress_dialogs");

  SEL v24 = (void *)objc_claimAutoreleasedReturnValue([v11 qosMetricsFields]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v24, @"metrics_fields");

  -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  &off_10040D078,  @"phase");
  if ([v11 isArcade]) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"arcade");
  }
  uint64_t v25 = sub_1002E5EDC((uint64_t)&OBJC_CLASS___AppInstallPolicy);
  uint64_t v27 = objc_claimAutoreleasedReturnValue(v25);
  if (v9)
  {
    uint64_t v29 = (double *)objc_getProperty(v9, v26, 328LL, 1);
    if (v29)
    {
      id v30 = objc_getProperty(v9, v28, 328LL, 1);
      sub_1002E62D4(v27, v30);

      id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v29[2]));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v31,  @"optimal_download_start");
    }
  }

  else
  {
    uint64_t v29 = 0LL;
  }

  id v32 = v10;
  if (v27) {
    id v33 = [*(id *)(v27 + 8) copy];
  }
  else {
    id v33 = 0LL;
  }
  uint64_t v77 = (void *)v27;
  -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v33, @"policy");

  id v34 = (void *)objc_claimAutoreleasedReturnValue([v11 coordinator]);
  __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 uniqueIdentifier]);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v35, @"coordinator_id");

  __int128 v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v11 coordinatorIntent]));
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v36,  @"coordinator_intent");

  if ([v11 isRemoteInstall]) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"remote_install");
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"approved");
  __int16 v37 = sub_100303B74((uint64_t)&OBJC_CLASS___MIStoreMetadata, v9);
  id v38 = (void *)objc_claimAutoreleasedReturnValue(v37);
  __int16 v39 = (void *)objc_claimAutoreleasedReturnValue([v11 account]);
  if (v39) {
    sub_1003042C8(v38, v39);
  }
  sub_100304364(v38, v11);
  id v78 = 0LL;
  id v40 = sub_100304244((uint64_t)v38, &v78);
  id v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
  id v42 = v78;
  __int128 v43 = v42;
  if (!v41)
  {
    uint64_t v53 = ASDErrorWithUnderlyingErrorAndDescription(v42, ASDErrorDomain, 825LL, @"Unable to encode metadata");
    uint64_t v54 = objc_claimAutoreleasedReturnValue(v53);

    __int128 v43 = (void *)v54;
    if (v9) {
      goto LABEL_16;
    }
LABEL_27:
    id v55 = (void *)objc_claimAutoreleasedReturnValue([v11 companionBundleID]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v55,  @"companion_bundle_id");

    id Property = 0LL;
    goto LABEL_19;
  }

  -[NSMutableDictionary setObject:forKeyedSubscript:](v12, "setObject:forKeyedSubscript:", v41, @"store_metadata");
  if (!v9) {
    goto LABEL_27;
  }
LABEL_16:
  if ((*((_BYTE *)v9 + 14) & 1) == 0)
  {
    __int128 v45 = (void *)objc_claimAutoreleasedReturnValue([v11 companionBundleID]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v45,  @"companion_bundle_id");
  }

  id Property = objc_getProperty(v9, v44, 200LL, 1);
LABEL_19:
  id v47 = Property;

  if (v47)
  {
    if (v9) {
      id v49 = objc_getProperty(v9, v48, 200LL, 1);
    }
    else {
      id v49 = 0LL;
    }
    id v50 = v49;
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v50,  @"install_verification_token");
  }

  id v10 = v32;
  if ([v11 clientType] == (id)1) {
    goto LABEL_39;
  }
  __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v11 metricsType]);

  if (!v51)
  {
    if (v9)
    {
      if ((*((_BYTE *)v9 + 8) & 1) != 0)
      {
        id v58 = &off_10040D090;
        goto LABEL_38;
      }

      if ((*((_BYTE *)v9 + 18) & 1) != 0 || (*((_BYTE *)v9 + 16) & 1) != 0)
      {
        id v58 = &off_10040D0A8;
        goto LABEL_38;
      }
    }

    id v58 = &off_10040D0C0;
LABEL_38:
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v58,  @"metrics_install_type");
    goto LABEL_39;
  }

  __int128 v52 = (void *)objc_claimAutoreleasedReturnValue([v11 metricsType]);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v52,  @"metrics_install_type");

LABEL_39:
  uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v11 recoveryCount]);

  if (v59)
  {
    __int128 v60 = (void *)objc_claimAutoreleasedReturnValue([v11 recoveryCount]);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v12,  "setObject:forKeyedSubscript:",  v60,  @"recovery_count");
  }

  if (v43)
  {
    id v57 = 0LL;
    if (v76) {
      *uint64_t v76 = v43;
    }
  }

  else
  {
    id v57 = sub_100323378(objc_alloc(&OBJC_CLASS___AppInstall), v9, v32);
    __int128 v61 = (void *)objc_claimAutoreleasedReturnValue([v11 refreshInstallID]);

    if (v61)
    {
      __int128 v62 = (void *)objc_claimAutoreleasedReturnValue([v11 refreshInstallID]);
      objc_msgSend(v57, "setDatabaseID:", objc_msgSend(v62, "longLongValue"));
    }

    if ([v11 expectedSoftwarePlatform])
    {
      id v63 = [v11 expectedSoftwarePlatform];
      if (v9) {
        id v64 = (id)*((void *)v9 + 36);
      }
      else {
        id v64 = 0LL;
      }
      if (v63 != v64)
      {
        uint64_t v65 = ASDLogHandleForCategory(25LL);
        id v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          uint64_t v73 = objc_claimAutoreleasedReturnValue([v11 logKey]);
          unsigned __int8 v74 = (void *)v73;
          if (v9) {
            uint64_t v75 = *((void *)v9 + 36);
          }
          else {
            uint64_t v75 = 0LL;
          }
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v80 = v73;
          __int16 v81 = 2048;
          uint64_t v82 = v75;
          _os_log_error_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_ERROR,  "[%@] Dropping incorrectly generated receipt - unexpected product type '%ld'",  buf,  0x16u);
        }

        [v57 setValue:0 forProperty:@"receipt"];
      }
    }

    else
    {
      uint64_t v67 = ASDLogHandleForCategory(25LL);
      id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
      {
        uint64_t v69 = objc_claimAutoreleasedReturnValue([v11 logKey]);
        id v70 = (void *)v69;
        if (v9) {
          uint64_t v71 = *((void *)v9 + 36);
        }
        else {
          uint64_t v71 = 0LL;
        }
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v80 = v69;
        __int16 v81 = 2048;
        uint64_t v82 = v71;
        _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_INFO,  "[%@] Expected platform wasn't set, hope we have the right type of receipt for '%ld'!",  buf,  0x16u);
      }
    }

    [v57 setValuesWithDictionary:v12];
  }

LABEL_60:
  return v57;
}

void sub_1002E3D0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v6 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(&a9, 8) = v5;

      uint64_t v4 = *(void **)(a1 + 8);
    }

    [v4 addObject:v7];
    id v3 = v7;
  }
}

id *sub_1002E4428(void *a1, void *a2)
{
  if (!a1) {
    return 0LL;
  }
  id v4 = a2;
  id v5 = sub_1002EB2A0((uint64_t)&OBJC_CLASS___Device);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v7 = v4;
  id v8 = v6;
  v17.receiver = a1;
  v17.super_class = (Class)&OBJC_CLASS___UpdatesResponse;
  id v9 = (id *)objc_msgSendSuper2(&v17, "init");
  id v10 = v9;
  if (v9)
  {
    objc_storeStrong(v9 + 2, a2);
    objc_storeStrong(v10 + 1, v6);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKeyedSubscript:@"rolloutDeferred"]);

    if (v11)
    {
      id v12 = sub_1001DED3C(v10[2], @"rolloutDeferred");
      uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
      id v14 = v10[3];
      void v10[3] = (id)v13;
    }
  }

  int v15 = v10;
  return v15;
}

id *sub_1002E4538(id *a1)
{
  uint64_t v1 = a1;
  if (a1)
  {
    id v2 = sub_1001DF23C(a1[2], @"storePlatformData.software-update-slimmed-lockup.results");
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [v3 count]));
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    void v8[2] = sub_1002E462C;
    v8[3] = &unk_1003F2108;
    void v8[4] = v1;
    id v9 = objc_alloc_init(&OBJC_CLASS___ASDCoastGuard);
    id v10 = v4;
    id v5 = v4;
    id v6 = v9;
    [v3 enumerateKeysAndObjectsUsingBlock:v8];
    uint64_t v1 = (id *)[v5 copy];
  }

  return v1;
}

void sub_1002E462C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a3;
  id v181 = a2;
  if (v5)
  {
    id v7 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
    v207[0] = @"artistName";
    v207[1] = @"bundleId";
    void v207[2] = @"buyParams";
    v207[3] = @"currentVersionReleaseDateTime";
    v207[4] = @"kind";
    v207[5] = @"name";
    v207[6] = @"releaseDate";
    v207[7] = @"whatsNew";
    v207[8] = @"url";
    __int128 v197 = 0u;
    __int128 v198 = 0u;
    __int128 v199 = 0u;
    __int128 v200 = 0u;
    id v8 = (id)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v207,  9LL));
    id v9 = [v8 countByEnumeratingWithState:&v197 objects:v206 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v198;
      do
      {
        for (unint64_t i = 0LL; i != v10; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v198 != v11) {
            objc_enumerationMutation(v8);
          }
          uint64_t v13 = *(void **)(*((void *)&v197 + 1) + 8LL * (void)i);
          id v14 = sub_1001DF594(v6, v13);
          int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v15, v13);
        }

        id v10 = [v8 countByEnumeratingWithState:&v197 objects:v206 count:16];
      }

      while (v10);
    }

    v205[0] = @"hasMessagesExtension";
    v205[1] = @"isFirstParty";
    v205[2] = @"isHiddenFromSpringboard";
    v205[3] = @"isIOSBinaryMacOSCompatible";
    v205[4] = @"requiresRosetta";
    v205[5] = @"runsOnIntel";
    v205[6] = @"runsOnAppleSilicon";
    __int128 v193 = 0u;
    __int128 v194 = 0u;
    __int128 v195 = 0u;
    __int128 v196 = 0u;
    id obj = (id)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v205,  7LL));
    id v16 = [obj countByEnumeratingWithState:&v193 objects:v204 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v194;
      do
      {
        for (j = 0LL; j != v17; j = (char *)j + 1)
        {
          if (*(void *)v194 != v18) {
            objc_enumerationMutation(obj);
          }
          uint64_t v20 = *(void **)(*((void *)&v193 + 1) + 8LL * (void)j);
          id v21 = sub_1001DEDF8(v6, v20);
          __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
          -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v22, v20);
        }

        id v17 = [obj countByEnumeratingWithState:&v193 objects:v204 count:16];
      }

      while (v17);
    }

    id v23 = sub_1001DF594(v6, @"id");
    uint64_t v24 = objc_claimAutoreleasedReturnValue(v23);
    uint64_t v25 = (void *)v24;
    if (v24) {
      id v26 = (id)v24;
    }
    else {
      id v26 = v181;
    }
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v26, @"id");

    context = objc_autoreleasePoolPush();
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", @"id"));
    if (v27)
    {
      double v28 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", @"id"));
      uint64_t v29 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v28 longLongValue]));

      id v30 = (void *)v29;
    }

    else
    {
      id v30 = 0LL;
    }

    uint64_t v31 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v7, "objectForKeyedSubscript:", @"bundleId"));
    id v203 = 0LL;
    if (v30) {
      id v32 = -[LSApplicationRecord initWithStoreItemIdentifier:error:]( [LSApplicationRecord alloc],  "initWithStoreItemIdentifier:error:",  [v30 unsignedLongLongValue],  &v203);
    }
    else {
      id v32 = 0LL;
    }
    id v184 = v32;
    if (!v32 && v31) {
      id v184 = -[LSApplicationRecord initWithBundleIdentifier:allowPlaceholder:error:]( objc_alloc(&OBJC_CLASS___LSApplicationRecord),  "initWithBundleIdentifier:allowPlaceholder:error:",  v31,  1LL,  &v203);
    }
    id v33 = v184;
    if (-[LSApplicationRecord isArcadeApp](v184, "isArcadeApp")) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"isArcade");
    }
    if (!v31
      && ((+[AMSDevice deviceIsAppleTV](&OBJC_CLASS___AMSDevice, "deviceIsAppleTV") & 1) != 0
       || +[AMSDevice deviceIsAppleWatch](&OBJC_CLASS___AMSDevice, "deviceIsAppleWatch")))
    {
      id v34 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord bundleIdentifier](v184, "bundleIdentifier"));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v34, @"bundleId");
    }

    id v171 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v7,  "objectForKeyedSubscript:",  @"artistName"));
    if (!v171 && v31)
    {
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord iTunesMetadata](v184, "iTunesMetadata"));
      __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 artistName]);
      -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v36, @"artistName");

      id v33 = v184;
    }

    if ((-[LSApplicationRecord isPlaceholder](v33, "isPlaceholder") & 1) == 0)
    {
      if (-[LSApplicationRecord applicationHasMIDBasedSINF](v33, "applicationHasMIDBasedSINF"))
      {
        __int16 v37 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord iTunesMetadata](v33, "iTunesMetadata"));
        unsigned __int8 v38 = +[UpdatesManager isTVProviderApp:]( UpdatesManager,  "isTVProviderApp:",  [v37 storeItemIdentifier]);

        id v33 = v184;
        if ((v38 & 1) == 0) {
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"is_per_device");
        }
      }
    }

    id v39 = sub_1003261E8(v33);
    id v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
    unsigned int v41 = [v40 isB2BCustomApp];

    if (v41) {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"is_b2b_custom_app");
    }
    v180 = (void *)v31;
    id v172 = v30;
    if (-[LSApplicationRecord isPlaceholder](v184, "isPlaceholder")
      && -[LSApplicationRecord placeholderFailureReason](v184, "placeholderFailureReason") == (id)4)
    {
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  @"is_offloaded");
    }

    id v42 = *(void **)(v5 + 8);
    id v169 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord iTunesMetadata](v184, "iTunesMetadata"));
    uint64_t v168 = (void *)objc_claimAutoreleasedReturnValue([v169 variantID]);
    __int128 v43 = sub_1001D34AC((uint64_t)&OBJC_CLASS___VariantDescriptor, v168);
    __int128 v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    id v170 = (void *)objc_claimAutoreleasedReturnValue(-[LSApplicationRecord iTunesMetadata](v184, "iTunesMetadata"));
    __int128 v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v170 versionIdentifier]));
    id v177 = v42;
    id v46 = v6;
    id v179 = v44;
    id v178 = v45;
    uint64_t v47 = objc_opt_self(&OBJC_CLASS___UpdatesResponse);
    id v48 = sub_1001DEC94(v46, @"updateFileSizeInfo");
    id v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
    id v50 = v49;
    id v182 = v46;
    uint64_t v183 = v7;
    id v174 = v8;
    uint64_t v175 = v4;
    __int128 v51 = v180;
    id v176 = v6;
    if (v49)
    {
      id v52 = v49;
      id v53 = v179;
      id v187 = v178;
      objc_opt_self(v47);
      __int128 v213 = 0u;
      __int128 v214 = 0u;
      __int128 v215 = 0u;
      __int128 v216 = 0u;
      id v54 = sub_1002D64A4(v52);
      id v189 = (id)objc_claimAutoreleasedReturnValue(v54);
      id v55 = [v189 countByEnumeratingWithState:&v213 objects:&v208 count:16];
      if (v55)
      {
        id v56 = v55;
        id v163 = v52;
        uint64_t v164 = v47;
        id v166 = v50;
        uint64_t v57 = *(void *)v214;
        id v58 = @"variants";
        uint64_t v59 = &stru_1003F2168;
        while (2)
        {
          __int128 v60 = 0LL;
          id v185 = v56;
          do
          {
            if (*(void *)v214 != v57) {
              objc_enumerationMutation(v189);
            }
            __int128 v61 = *(void **)(*((void *)&v213 + 1) + 8LL * (void)v60);
            id v62 = sub_1001DEC94(v61, v58);
            id v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
            id v64 = sub_1002D64A4(v63);
            uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
            id v66 = sub_10031D5B8(v65, v59);
            uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(v66);

            if ([v67 containsObject:v53])
            {
              id v68 = sub_1001DF1DC(v61, @"deltaSizeByExternalVersionId");
              uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue(v68);
              uint64_t v70 = v57;
              id v71 = v53;
              uint64_t v72 = v59;
              uint64_t v73 = v58;
              unsigned __int8 v74 = (void *)objc_claimAutoreleasedReturnValue([v187 stringValue]);
              id v75 = sub_1001DEDF8(v69, v74);
              uint64_t v76 = (__CFString *)objc_claimAutoreleasedReturnValue(v75);

              id v58 = v73;
              uint64_t v59 = v72;
              id v53 = v71;
              uint64_t v57 = v70;
              id v56 = v185;

              if (v76)
              {

                goto LABEL_58;
              }
            }

            __int128 v60 = (char *)v60 + 1;
          }

          while (v56 != v60);
          id v56 = [v189 countByEnumeratingWithState:&v213 objects:&v208 count:16];
          if (v56) {
            continue;
          }
          break;
        }

        uint64_t v76 = 0LL;
LABEL_58:
        __int128 v51 = v180;
        id v46 = v182;
        uint64_t v47 = v164;
        id v50 = v166;
        id v52 = v163;
      }

      else
      {
        uint64_t v76 = 0LL;
      }

      id v6 = v176;
      id v7 = v183;
      if (v76) {
        goto LABEL_85;
      }
    }

    id v77 = sub_1001DEC94(v46, @"fileSizeInfo");
    id v78 = (void *)objc_claimAutoreleasedReturnValue(v77);
    if (v78)
    {
      id v167 = v50;
      id v79 = v78;
      id v80 = v177;
      uint64_t v165 = v47;
      objc_opt_self(v47);
      id v186 = v79;
      id v188 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      __int128 v213 = 0u;
      __int128 v214 = 0u;
      __int128 v215 = 0u;
      __int128 v216 = 0u;
      id v81 = sub_1002D64A4(v79);
      id v190 = (id)objc_claimAutoreleasedReturnValue(v81);
      id v82 = [v190 countByEnumeratingWithState:&v213 objects:&v208 count:16];
      if (v82)
      {
        id v83 = v82;
        uint64_t v84 = *(void *)v214;
        do
        {
          for (k = 0LL; k != v83; k = (char *)k + 1)
          {
            if (*(void *)v214 != v84) {
              objc_enumerationMutation(v190);
            }
            uint64_t v86 = *(void **)(*((void *)&v213 + 1) + 8LL * (void)k);
            id v87 = sub_1001DEC94(v86, @"variants");
            id v88 = (void *)objc_claimAutoreleasedReturnValue(v87);
            id v89 = sub_1002D64A4(v88);
            uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(v89);
            id v91 = sub_10031D5B8(v90, &stru_1003F2188);
            uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue(v91);

            id v93 = sub_1001D395C((uint64_t)&OBJC_CLASS___VariantDescriptor, v80, v92);
            id v94 = (void *)objc_claimAutoreleasedReturnValue(v93);
            if (v94)
            {
              id v95 = sub_1001DEDF8(v86, @"size");
              id v96 = (void *)objc_claimAutoreleasedReturnValue(v95);
              if (v96) {
                -[NSMutableDictionary setObject:forKeyedSubscript:](v188, "setObject:forKeyedSubscript:", v96, v94);
              }
            }
          }

          id v83 = [v190 countByEnumeratingWithState:&v213 objects:&v208 count:16];
        }

        while (v83);
      }

      unsigned __int8 v97 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allKeys](v188, "allKeys"));
      if (v97)
      {
        id v98 = sub_1001D395C((uint64_t)&OBJC_CLASS___VariantDescriptor, v80, v97);
        id v99 = (void *)objc_claimAutoreleasedReturnValue(v98);
        id v46 = v182;
        id v50 = v167;
        uint64_t v76 = v99
            ? (__CFString *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v188, "objectForKeyedSubscript:", v99))
            : 0LL;
        id v6 = v176;
        __int128 v51 = v180;
        uint64_t v100 = v186;
      }

      else
      {
        uint64_t v76 = 0LL;
        id v6 = v176;
        __int128 v51 = v180;
        id v46 = v182;
        id v50 = v167;
        uint64_t v100 = v186;
      }

      id v7 = v183;
      uint64_t v47 = v165;
      if (v76) {
        goto LABEL_85;
      }
    }

    id v101 = sub_1001DF1DC(v46, @"fileSizeByDevice");
    id v102 = (void *)objc_claimAutoreleasedReturnValue(v101);
    if (!v102) {
      goto LABEL_86;
    }
    id v103 = v102;
    id v104 = v177;
    objc_opt_self(v47);
    id v105 = (void *)objc_claimAutoreleasedReturnValue([v104 productVariants]);

    if (!v105) {
      goto LABEL_83;
    }
    SEL v208 = (const __CFString *)_NSConcreteStackBlock;
    uint64_t v209 = 3221225472LL;
    v210 = sub_1002E5830;
    id v211 = &unk_1003EF020;
    id v212 = v103;
    id v106 = sub_1002B8598(v105, &v208);
    uint64_t v76 = (__CFString *)objc_claimAutoreleasedReturnValue(v106);

    if (!v76)
    {
LABEL_83:
      id v107 = sub_1001DEDF8(v103, @"universal");
      uint64_t v76 = (__CFString *)objc_claimAutoreleasedReturnValue(v107);
    }

    id v46 = v182;
    if (v76)
    {
LABEL_85:
      *(void *)&__int128 v213 = @"universal";
      SEL v208 = v76;
      id v108 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v208,  &v213,  1LL,  v163));
    }

    else
    {
LABEL_86:
      id v108 = &__NSDictionary0__struct;
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v108,  @"fileSizeByDevice");
    objc_autoreleasePoolPop(context);
    id v109 = sub_1001DF1DC(v46, @"artwork");
    id v110 = (void *)objc_claimAutoreleasedReturnValue(v109);
    id v111 = sub_1002E56B8(v110);
    SEL v112 = (void *)objc_claimAutoreleasedReturnValue(v111);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v112, @"artwork");

    id v113 = sub_1001DF1DC(v46, @"ovalArtwork");
    id v114 = (void *)objc_claimAutoreleasedReturnValue(v113);
    id v115 = sub_1002E56B8(v114);
    uint64_t v116 = (void *)objc_claimAutoreleasedReturnValue(v115);
    -[NSMutableDictionary setObject:forKeyedSubscript:](v7, "setObject:forKeyedSubscript:", v116, @"ovalArtwork");

    id v117 = sub_1001DEC94(v46, @"deviceFamilies");
    id v118 = (void *)objc_claimAutoreleasedReturnValue(v117);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v118,  @"deviceFamilies");

    SEL v208 = @"contentRatingsBySystem";
    uint64_t v209 = (uint64_t)@"appsApple";
    v210 = (id (*)(uint64_t, void *))@"value";
    uint64_t v119 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v208, 3LL));
    id v120 = sub_1002D6480(v119);
    id v121 = (void *)objc_claimAutoreleasedReturnValue(v120);
    id v122 = sub_1001DEF10(v46, v121);
    SEL v123 = (void *)objc_claimAutoreleasedReturnValue(v122);

    if (v123)
    {
      id v202 = v123;
      id v203 = @"appsApple";
      uint64_t v201 = @"value";
      id v124 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v202,  &v201,  1LL));
      *(void *)&__int128 v213 = v124;
      uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v213,  &v203,  1LL));
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  v125,  @"contentRatingsBySystem");
    }

    id v126 = sub_1001DEC94(v182, @"offers");
    unsigned __int8 v127 = (void *)objc_claimAutoreleasedReturnValue(v126);
    id v128 = v127;
    if (v127)
    {
      id v129 = sub_1002B84E4(v127, &stru_1003F2148);
      id v130 = (void *)objc_claimAutoreleasedReturnValue(v129);
      id v131 = v130;
      uint64_t v4 = v175;
      if (v130)
      {
        id v132 = sub_1001DEC94(v130, @"assets");
        uint64_t v133 = (void *)objc_claimAutoreleasedReturnValue(v132);
        unsigned __int8 v134 = (void *)objc_claimAutoreleasedReturnValue([v133 firstObject]);
        uint64_t v136 = objc_opt_class(&OBJC_CLASS___NSDictionary, v135);
        id v137 = v134;
        if ((objc_opt_isKindOfClass(v137, v136) & 1) != 0) {
          id v138 = v137;
        }
        else {
          id v138 = 0LL;
        }

        id v144 = sub_1001DEDF8(v138, @"size");
        uint64_t v145 = (void *)objc_claimAutoreleasedReturnValue(v144);
        id v143 = v183;
        -[NSMutableDictionary setObject:forKeyedSubscript:]( v183,  "setObject:forKeyedSubscript:",  v145,  ASDLookupPropertyFileSize);

        id v146 = sub_1001DF594(v131, @"buyParams");
        id v147 = (void *)objc_claimAutoreleasedReturnValue(v146);
        if (!v147)
        {
          id v148 = sub_1001DF594(v131, @"action-params");
          id v147 = (void *)objc_claimAutoreleasedReturnValue(v148);
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:]( v183,  "setObject:forKeyedSubscript:",  v147,  ASDLookupPropertyBuyParams,  v163);
        id v149 = sub_1001DF1DC(v131, @"version");
        id v150 = (void *)objc_claimAutoreleasedReturnValue(v149);
        uint64_t v151 = v150;
        if (v150)
        {
          id v152 = sub_1001DF594(v150, @"display");
          id v153 = (void *)objc_claimAutoreleasedReturnValue(v152);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v183,  "setObject:forKeyedSubscript:",  v153,  ASDLookupPropertyDisplayVersion);

          id v154 = sub_1001DEDF8(v151, @"externalId");
          uint64_t v155 = (void *)objc_claimAutoreleasedReturnValue(v154);
          -[NSMutableDictionary setObject:forKeyedSubscript:]( v183,  "setObject:forKeyedSubscript:",  v155,  ASDLookupPropertyExternalVersionIdentifier);
        }
      }

      else
      {
        id v143 = v183;
      }
    }

    else
    {
      id v139 = sub_1001DEDF8(v182, @"versionId");
      id v131 = (void *)objc_claimAutoreleasedReturnValue(v139);
      uint64_t v4 = v175;
      if (!v131)
      {
        id v140 = sub_1001DF594(v182, @"versionId");
        id v141 = (void *)objc_claimAutoreleasedReturnValue(v140);
        uint64_t v142 = v141;
        if (v141) {
          id v131 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v141 longLongValue]));
        }
        else {
          id v131 = 0LL;
        }
      }

      id v143 = v183;
      -[NSMutableDictionary setObject:forKeyedSubscript:]( v183,  "setObject:forKeyedSubscript:",  v131,  ASDLookupPropertyExternalVersionIdentifier,  v163);
    }

    id v191 = -[NSMutableDictionary copy](v143, "copy");
  }

  else
  {
    id v191 = 0LL;
  }

  SEL v156 = v191;
  if (v191)
  {
    uint64_t v157 = -[AppUpdateMemoryEntity initWithUpdateDictionary:]( objc_alloc(&OBJC_CLASS___AppUpdateMemoryEntity),  "initWithUpdateDictionary:",  v191);
    objc_super v158 = v157;
    if (v157)
    {
      dispatch_source_t v159 = *(void **)(v4 + 40);
      uint64_t v160 = (void *)objc_claimAutoreleasedReturnValue(-[AppUpdateMemoryEntity itemID](v157, "itemID"));
      id v161 = [v160 unsignedLongLongValue];
      __int128 v162 = (void *)objc_claimAutoreleasedReturnValue(-[AppUpdateMemoryEntity evid](v158, "evid"));
      LOBYTE(v159) = objc_msgSend( v159,  "isUnrepairableAppWithItemID:externalVersionID:",  v161,  objc_msgSend(v162, "unsignedLongLongValue"));
    }

    SEL v156 = v191;
  }
}

id sub_1002E56B8(void *a1)
{
  id v1 = a1;
  id v2 = sub_1001DF594(v1, @"url");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = sub_1001DEDF8(v1, @"height");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = sub_1001DEDF8(v1, @"width");
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

  id v8 = 0LL;
  if ([v3 length] && v5 && v7)
  {
    v10[0] = @"url";
    v10[1] = @"height";
    v11[0] = v3;
    v11[1] = v5;
    void v10[2] = @"width";
    void v11[2] = v7;
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  3LL));
  }

  return v8;
}

BOOL sub_1002E57D0(id a1, NSObject *a2)
{
  id v2 = sub_100206DA0(a2, (uint64_t)a2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = sub_1001DF594(v3, @"type");
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  unsigned __int8 v6 = [v5 isEqualToString:@"update"];

  return v6;
}

id sub_1002E5830(uint64_t a1, void *a2)
{
  return sub_1001DEDF8(*(void **)(a1 + 32), a2);
}

NSFastEnumeration *__cdecl sub_1002E5838(id a1, NSDictionary *a2)
{
  return (NSFastEnumeration *)sub_1001D30C4((uint64_t)&OBJC_CLASS___VariantDescriptor, a2, 1LL);
}

NSFastEnumeration *__cdecl sub_1002E5848(id a1, NSDictionary *a2)
{
  return (NSFastEnumeration *)sub_1001D30C4((uint64_t)&OBJC_CLASS___VariantDescriptor, a2, 1LL);
}

AppInstallPolicy *sub_1002E5EDC(uint64_t a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___AppInstallPolicy);
  sub_1002E5F20((uint64_t)v1, 1LL);
  sub_1002E5F7C((uint64_t)v1, 62LL);
  return v1;
}

void sub_1002E5F20(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"ntwk"];
  }

void sub_1002E5F7C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a2));
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"imsk"];
  }

void *sub_1002E6020(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)&OBJC_CLASS___AppInstallPolicy;
    a1 = objc_msgSendSuper2(&v7, "init");
    if (a1)
    {
      id v4 = [v3 mutableCopy];
      uint64_t v5 = (void *)a1[1];
      a1[1] = v4;
    }
  }

  return a1;
}

id *sub_1002E6090(id *result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result[1] objectForKeyedSubscript:@"conr"]);
    id v2 = [v1 integerValue];

    return (id *)v2;
  }

  return result;
}

void sub_1002E60D4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"conr"];
  }

id *sub_1002E6130(id *result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result[1] objectForKeyedSubscript:@"cell"]);
    id v2 = [v1 integerValue];

    return (id *)v2;
  }

  return result;
}

void sub_1002E6174(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"cell"];
  }

id *sub_1002E61D0(id *result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result[1] objectForKeyedSubscript:@"imsk"]);
    id v2 = [v1 unsignedIntegerValue];

    return (id *)v2;
  }

  return result;
}

double *sub_1002E6214(uint64_t a1)
{
  if (a1)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) objectForKeyedSubscript:@"odts"]);
    uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) objectForKeyedSubscript:@"odte"]);
    id v4 = (void *)v3;
    if (v2) {
      BOOL v5 = v3 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
      id v10 = 0LL;
    }

    else
    {
      unsigned __int8 v6 = objc_alloc(&OBJC_CLASS___TimeWindow);
      [v2 doubleValue];
      double v8 = v7;
      [v4 doubleValue];
      id v10 = sub_1002EAE48((double *)v6, v8, v9);
    }
  }

  else
  {
    id v10 = 0LL;
  }

  return v10;
}

void sub_1002E62D4(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = v3;
  if (a1)
  {
    double v7 = v3;
    if (v3)
    {
      BOOL v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v3[2]));
      [*(id *)(a1 + 8) setObject:v5 forKeyedSubscript:@"odts"];

      unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v7[1]));
      [*(id *)(a1 + 8) setObject:v6 forKeyedSubscript:@"odte"];
    }

    else
    {
      [*(id *)(a1 + 8) setObject:0 forKeyedSubscript:@"odts"];
      [*(id *)(a1 + 8) setObject:0 forKeyedSubscript:@"odte"];
    }

    id v4 = v7;
  }
}

id *sub_1002E63A4(id *result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result[1] objectForKeyedSubscript:@"devs"]);
    id v2 = [v1 BOOLValue];

    return (id *)v2;
  }

  return result;
}

void sub_1002E63E8(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"devs"];
  }

id *sub_1002E6444(id *result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result[1] objectForKeyedSubscript:@"migr"]);
    id v2 = [v1 BOOLValue];

    return (id *)v2;
  }

  return result;
}

id *sub_1002E6488(id *result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result[1] objectForKeyedSubscript:@"ntwk"]);
    id v2 = [v1 BOOLValue];

    return (id *)v2;
  }

  return result;
}

id *sub_1002E64CC(id *result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result[1] objectForKeyedSubscript:@"powr"]);
    id v2 = [v1 BOOLValue];

    return (id *)v2;
  }

  return result;
}

void sub_1002E6510(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"powr"];
  }

id *sub_1002E656C(id *result)
{
  if (result)
  {
    id v1 = (void *)objc_claimAutoreleasedReturnValue([result[1] objectForKeyedSubscript:@"term"]);
    id v2 = [v1 BOOLValue];

    return (id *)v2;
  }

  return result;
}

void sub_1002E65B0(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
    [*(id *)(a1 + 8) setObject:v3 forKeyedSubscript:@"term"];
  }

uint64_t sub_1002E66C0(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 isExpensive]
    && (BOOL v5 = sub_1002E6130(v4), (unint64_t)v5 <= 4)
    && ((1LL << (char)v5) & 0x15) != 0
    || [v3 isConstrained]
    && (unsigned __int8 v6 = sub_1002E6090(v4), (unint64_t)v6 <= 4)
    && ((1LL << (char)v6) & 0x15) != 0)
  {
LABEL_7:
    uint64_t v7 = 1LL;
  }

  else
  {
    double v8 = (char *)[v3 interfaceType];
    double v9 = sub_1002E61D0(v4);
    if (v9)
    {
      switch((unint64_t)v8)
      {
        case 0uLL:
          goto LABEL_7;
        case 1uLL:
          goto LABEL_7;
        case 2uLL:
          goto LABEL_7;
        case 3uLL:
          goto LABEL_7;
        case 4uLL:
          goto LABEL_7;
        default:
          uint64_t v10 = ASDLogHandleForCategory(30LL);
          uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
          if (os_log_type_enabled(v11, OS_LOG_TYPE_FAULT))
          {
            if ((unint64_t)(v8 - 2) >= 3) {
              uint64_t v13 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"unknown (%ld)",  v8);
            }
            else {
              uint64_t v13 = off_1003F21A8[(void)(v8 - 2)];
            }
            *(_DWORD *)__int128 buf = 138543362;
            int v15 = v13;
            _os_log_fault_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_FAULT,  "Returning no match, encountered new interface type: %{public}@",  buf,  0xCu);
          }

          goto LABEL_7;
      }
    }

    uint64_t v7 = 0LL;
  }

  return v7;
}

uint64_t sub_1002E6898(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  uint64_t v12 = objc_opt_self(a1);
  if (v9)
  {
    uint64_t v13 = v12;
    if ([v9 length])
    {
      id v14 = v9;
      id v15 = v10;
      id v16 = v11;
      uint64_t v17 = objc_opt_self(v13);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v15 receiptURL]);
      __int128 v45 = v18;
      id v46 = v15;
      if (v18)
      {
        id v52 = 0LL;
        int v19 = sub_1002E6C38(v17, v14, v18, v16, &v52);
        id v20 = v52;
        if (v19)
        {
          id v41 = v11;
          id v42 = v10;
          __int128 v43 = a5;
          id v44 = v9;
          __int128 v50 = 0u;
          __int128 v51 = 0u;
          __int128 v48 = 0u;
          __int128 v49 = 0u;
          id v21 = (void *)objc_claimAutoreleasedReturnValue([v15 extensionReceiptURLs]);
          id v22 = [v21 countByEnumeratingWithState:&v48 objects:buf count:16];
          if (v22)
          {
            id v23 = v22;
            uint64_t v24 = *(void *)v49;
            while (2)
            {
              uint64_t v25 = 0LL;
              id v26 = v20;
              do
              {
                if (*(void *)v49 != v24) {
                  objc_enumerationMutation(v21);
                }
                uint64_t v27 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)v25);
                id v47 = v26;
                int v28 = sub_1002E6C38(v17, v14, v27, v16, &v47);
                id v20 = v47;

                if (!v28)
                {

                  a5 = v43;
                  id v9 = v44;
                  id v11 = v41;
                  id v10 = v42;
                  goto LABEL_20;
                }

                uint64_t v25 = (char *)v25 + 1;
                id v26 = v20;
              }

              while (v23 != v25);
              id v23 = [v21 countByEnumeratingWithState:&v48 objects:buf count:16];
              if (v23) {
                continue;
              }
              break;
            }
          }

          id v29 = 0LL;
          uint64_t v30 = 1LL;
          a5 = v43;
          id v9 = v44;
          id v11 = v41;
          id v10 = v42;
LABEL_21:

          id v35 = v29;
          if (!a5) {
            goto LABEL_24;
          }
          goto LABEL_22;
        }
      }

      else
      {
        id v36 = v11;
        __int16 v37 = (void *)objc_claimAutoreleasedReturnValue([v15 bundleID]);
        unsigned __int8 v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Invalid container for application: %@",  v37));

        uint64_t v39 = ASDErrorWithDescription(ASDErrorDomain, 507LL, v38);
        id v20 = (id)objc_claimAutoreleasedReturnValue(v39);

        id v11 = v36;
      }

uint64_t sub_1002E6C38(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v8 = a2;
  id v9 = a3;
  id v10 = a4;
  objc_opt_self(a1);
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  v39[0] = NSFileOwnerAccountName;
  v39[1] = NSFileGroupOwnerAccountName;
  v40[0] = @"mobile";
  v40[1] = @"mobile";
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v40,  v39,  2LL));
  uint64_t v13 = ASDLogHandleForCategory(14LL);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412802;
    id v32 = v10;
    __int16 v33 = 2048;
    id v34 = [v8 length];
    __int16 v35 = 2114;
    id v36 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "[%@] Writing receipt (%{iec-bytes}ld) to %{public}@",  buf,  0x20u);
  }

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v9 URLByDeletingLastPathComponent]);
  id v30 = 0LL;
  unsigned int v16 = [v11 createDirectoryAtURL:v15 withIntermediateDirectories:1 attributes:v12 error:&v30];
  id v17 = v30;
  uint64_t v18 = v17;
  if (!v16
    || (id v29 = v17,
        uint64_t v19 = 1LL,
        unsigned __int8 v20 = [v8 writeToURL:v9 options:1 error:&v29],
        id v21 = v29,
        v18,
        uint64_t v18 = v21,
        (v20 & 1) == 0))
  {
    uint64_t v22 = ASDLogHandleForCategory(14LL);
    id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      id v27 = [v8 length];
      *(_DWORD *)__int128 buf = 138413058;
      id v32 = v10;
      __int16 v33 = 2048;
      id v34 = v27;
      __int16 v35 = 2114;
      id v36 = v9;
      __int16 v37 = 2114;
      unsigned __int8 v38 = v18;
      _os_log_error_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_ERROR,  "[%@] Error writing receipt (%{iec-bytes}ld) to %{public}@: %{public}@",  buf,  0x2Au);
    }

    uint64_t v19 = (uint64_t)a5;
    if (a5)
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to write receipt to URL: %@",  v9));
      uint64_t v25 = ASDErrorWithUnderlyingErrorAndDescription(v18, ASDErrorDomain, 1132LL, v24);
      *a5 = (id)objc_claimAutoreleasedReturnValue(v25);

      uint64_t v19 = 0LL;
    }
  }

  return v19;
}

sqlite3_stmt **sub_1002E6F14(sqlite3_stmt **a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v20.receiver = a1;
    v20.super_class = (Class)&OBJC_CLASS___SQLiteCursor;
    BOOL v5 = (id *)objc_msgSendSuper2(&v20, "init");
    a1 = (sqlite3_stmt **)v5;
    if (v5)
    {
      unsigned __int8 v6 = v4 ? (void *)v4[2] : 0LL;
      v5[6] = v6;
      objc_storeStrong(v5 + 7, a2);
      int v7 = sqlite3_column_count(a1[6]);
      *((_DWORD *)a1 + 2) = v7;
      uint64_t v8 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithCapacity:](&OBJC_CLASS___NSMutableArray, "arrayWithCapacity:", v7));
      id v9 = a1[5];
      a1[5] = (sqlite3_stmt *)v8;

      a1[2] = (sqlite3_stmt *)calloc(*((int *)a1 + 2), 1uLL);
      if (*((int *)a1 + 2) >= 1)
      {
        for (uint64_t i = 0LL; i < *((int *)a1 + 2); ++i)
        {
          id v11 = a1[5];
          uint64_t v12 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_name(a1[6], i));
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
          -[sqlite3_stmt addObject:](v11, "addObject:", v13);

          id v14 = sqlite3_column_decltype(a1[6], i);
          if (v14)
          {
            id v15 = v14;
            if (!strcmp(v14, "DATETIME"))
            {
              *((_BYTE *)a1[2] + i) = 1;
              continue;
            }

            if (!strcmp(v15, "JSON"))
            {
              id v17 = a1[2];
              char v18 = 2;
              goto LABEL_20;
            }

            if (!strcmp(v15, "UUID"))
            {
              id v17 = a1[2];
              char v18 = 3;
              goto LABEL_20;
            }

            if (!strcmp(v15, "URL"))
            {
              id v17 = a1[2];
              char v18 = 4;
              goto LABEL_20;
            }

            int v16 = strcmp(v15, "STRING");
            id v17 = a1[2];
            if (!v16)
            {
              char v18 = 5;
LABEL_20:
              *((_BYTE *)v17 + i) = v18;
              continue;
            }
          }

          else
          {
            id v17 = a1[2];
          }

          *((_BYTE *)v17 + i) = 0;
        }
      }
    }
  }

  return a1;
}

sqlite3_stmt **sub_1002E7160(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    id v3 = a1;
    if (sqlite3_column_type(a1[6], a2) == 5) {
      return (sqlite3_stmt **)0LL;
    }
    BOOL v5 = sqlite3_column_blob(v3[6], a2);
    unsigned __int8 v6 = +[NSData dataWithBytes:length:]( &OBJC_CLASS___NSData,  "dataWithBytes:length:",  v5,  sqlite3_column_bytes(v3[6], a2));
    a1 = (sqlite3_stmt **)objc_claimAutoreleasedReturnValue(v6);
  }

  return a1;
}

id sub_1002E71DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0)
    {
      a1 = 0LL;
    }

    else
    {
      BOOL v5 = sub_1002E7160((sqlite3_stmt **)a1, v4);
      a1 = objc_claimAutoreleasedReturnValue(v5);
    }
  }

  return (id)a1;
}

sqlite3_stmt **sub_1002E7238(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    id v3 = a1;
    int v4 = sqlite3_column_type(a1[6], a2);
    if (v4 == 1)
    {
      unsigned __int8 v6 = +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  sqlite3_column_int64(v3[6], a2));
      a1 = (sqlite3_stmt **)objc_claimAutoreleasedReturnValue(v6);
    }

    else if (v4 == 2)
    {
      BOOL v5 = +[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", sqlite3_column_double(v3[6], a2));
      a1 = (sqlite3_stmt **)objc_claimAutoreleasedReturnValue(v5);
    }

    else
    {
      a1 = 0LL;
    }
  }

  return a1;
}

id sub_1002E72CC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0)
    {
      a1 = 0LL;
    }

    else
    {
      BOOL v5 = sub_1002E7238((sqlite3_stmt **)a1, v4);
      a1 = objc_claimAutoreleasedReturnValue(v5);
    }
  }

  return (id)a1;
}

sqlite3_stmt **sub_1002E7328(sqlite3_stmt **a1, int a2)
{
  if (a1)
  {
    id v3 = a1;
    if (sqlite3_column_type(a1[6], a2) == 5) {
      return (sqlite3_stmt **)0LL;
    }
    a1 = (sqlite3_stmt **)sqlite3_column_text(v3[6], a2);
    if (a1) {
      a1 = (sqlite3_stmt **)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](&OBJC_CLASS___NSString, "stringWithUTF8String:", a1));
    }
  }

  return a1;
}

id sub_1002E7388(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = [*(id *)(a1 + 40) indexOfObject:v3];
    if (v4 < 0)
    {
      a1 = 0LL;
    }

    else
    {
      BOOL v5 = sub_1002E7328((sqlite3_stmt **)a1, v4);
      a1 = objc_claimAutoreleasedReturnValue(v5);
    }
  }

  return (id)a1;
}

void *sub_1002E73E4(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = a1[4];
    if (!v4)
    {
      uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSDictionary sharedKeySetForKeys:](&OBJC_CLASS___NSDictionary, "sharedKeySetForKeys:", a1[5]));
      unsigned __int8 v6 = (void *)a1[4];
      a1[4] = v5;

      uint64_t v4 = a1[4];
    }

    int v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithSharedKeySet:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithSharedKeySet:",  v4));
    uint64_t v8 = (void *)a1[5];
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    void v11[2] = sub_1002E74D4;
    void v11[3] = &unk_1003F21C8;
    id v12 = v3;
    id v13 = v7;
    id v14 = a1;
    id v9 = v7;
    [v8 enumerateObjectsUsingBlock:v11];
    a1 = [v9 copy];
  }

  return a1;
}

void sub_1002E74D4(uint64_t a1, void *a2, unsigned int a3)
{
  id v8 = a2;
  uint64_t v5 = *(void **)(a1 + 32);
  if (!v5 || [v5 containsObject:v8])
  {
    id v6 = sub_1002E7544(*(void **)(a1 + 48), a3);
    int v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    [*(id *)(a1 + 40) setObject:v7 forKeyedSubscript:v8];
  }
}

id sub_1002E7544(void *a1, unsigned int a2)
{
  id v3 = a1;
  uint64_t v4 = v3;
  if (!v3 || (a2 & 0x80000000) != 0)
  {
    if (!v3)
    {
LABEL_13:
      id v12 = sub_1002E7160(v4, a2);
      uint64_t v9 = objc_claimAutoreleasedReturnValue(v12);
LABEL_14:
      id v7 = (id)v9;
      goto LABEL_15;
    }

id sub_1002E78A4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1002E791C;
  block[3] = &unk_1003E9EA8;
  void block[4] = objc_opt_self(a1);
  if (qword_100462658 != -1) {
    dispatch_once(&qword_100462658, block);
  }
  return (id)qword_100462650;
}

void sub_1002E791C(uint64_t a1)
{
  id v1 = objc_alloc_init(*(Class *)(a1 + 32));
  id v2 = (void *)qword_100462650;
  qword_100462650 = (uint64_t)v1;
}

void sub_1002E79EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    int v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002E7A78;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002E7A78(uint64_t a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      double v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)v6);
        uint64_t v13 = *(void *)(a1 + 40);
        id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v13,  1LL,  (void)v9));
        [v7 deliverNotifications:v8 withBarrierBlock:&stru_1003F21E8];

        double v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v14 count:16];
    }

    while (v4);
  }
}

void sub_1002E7BB8(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = [a2 copy];
    id v4 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002E7C3C;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v3;
    id v5 = v3;
    dispatch_async(v4, v6);
  }

void sub_1002E7C3C(uint64_t a1)
{
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v10;
    do
    {
      double v6 = 0LL;
      do
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v2);
        }
        id v7 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)v6);
        uint64_t v13 = *(void *)(a1 + 40);
        id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v13,  1LL,  (void)v9));
        [v7 deliverProgress:v8 withBarrierBlock:&stru_1003F2208];

        double v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v9 objects:v14 count:16];
    }

    while (v4);
  }
}

void sub_1002E7D7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002E7E08;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

id sub_1002E7E08(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    uint64_t v5 = (void *)objc_opt_class(*(void *)(a1 + 32), v4);
    uint64_t v6 = *(void *)(a1 + 40);
    int v9 = 138412546;
    __int128 v10 = v5;
    __int16 v11 = 2114;
    uint64_t v12 = v6;
    id v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_INFO,  "[%@]: Registered notification client: %{public}@",  (uint8_t *)&v9,  0x16u);
  }

  return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
}

void sub_1002E7EE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002E7F70;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

void sub_1002E7F70(uint64_t a1, const char *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 24LL);
  if (v2) {
    id Property = objc_getProperty(*(id *)(a1 + 40), a2, 16LL, 1);
  }
  else {
    id Property = 0LL;
  }
  id v5 = Property;
  [v3 setObject:v2 forKeyedSubscript:v5];
}

void sub_1002E7FD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = *(dispatch_queue_s **)(a1 + 8);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002E805C;
    v6[3] = &unk_1003E9DC0;
    void v6[4] = a1;
    id v7 = v3;
    dispatch_async(v5, v6);
  }
}

id sub_1002E805C(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 16) removeObjectIdenticalTo:*(void *)(a1 + 40)];
}

id sub_1002E82C8(uint64_t a1)
{
  v2[0] = @"bundle_id";
  v2[1] = @"event_type";
  v2[2] = @"event_subtype";
  void v2[3] = @"metrics_type";
  void v2[4] = @"timestamp";
  void v2[5] = @"payload";
  v2[6] = @"has_been_posted";
  return (id)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v2,  7LL));
}

id *sub_1002E837C(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v15.receiver = a1;
    v15.super_class = (Class)&OBJC_CLASS___UpdatesBatchTask;
    a1 = (id *)objc_msgSendSuper2(&v15, "init");
    if (a1)
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 logKey]);
      id v9 = a1[6];
      a1[6] = (id)v8;

      __int128 v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      id v11 = a1[8];
      a1[8] = v10;

      objc_storeStrong(a1 + 5, a2);
      uint64_t v12 = objc_claimAutoreleasedReturnValue([v7 requestToken]);
      id v13 = a1[7];
      a1[7] = (id)v12;

      *((_BYTE *)a1 + 72) = [v7 userInitiated];
    }
  }

  return a1;
}

void sub_1002E8C7C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = sub_100230C60((id *)objc_alloc(&OBJC_CLASS___UpdatesTask), v5, v6, *(_BYTE *)(*(void *)(a1 + 32) + 72LL));

  if (v7) {
    objc_setProperty_nonatomic_copy(v7, v8, *(id *)(*(void *)(a1 + 32) + 48LL), 64LL);
  }
  id v9 = *(void **)(a1 + 32);
  id v78 = 0LL;
  unsigned int v10 = [v9 runSubTask:v7 returningError:&v78];
  id v11 = (__CFString *)v78;
  if (v10)
  {
    uint64_t v12 = *(void *)(a1 + 32);
    if (v7) {
      id v13 = v7[9];
    }
    else {
      id v13 = 0LL;
    }
    id v14 = (id *)v13;
    id v15 = v5;
    if (v12)
    {
      self = v14;
      unsigned __int8 v74 = v11;
      uint64_t v72 = v7;
      int v16 = sub_1002E4538(v14);
      id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      if (*(_BYTE *)(v12 + 72)) {
        uint64_t v18 = &stru_1003F3E40;
      }
      else {
        uint64_t v18 = @"background ";
      }
      uint64_t v19 = v18;
      uint64_t v20 = ASDLogHandleForCategory(40LL);
      id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = *(void *)(v12 + 48);
        id v23 = [v17 count];
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "ams_DSID"));
        *(_DWORD *)__int128 buf = 138413058;
        uint64_t v94 = v22;
        __int16 v95 = 2048;
        id v96 = v23;
        __int16 v97 = 2114;
        id v98 = v19;
        __int16 v99 = 2114;
        uint64_t v100 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "[%@] ╒ Received %lu %{public}@server update(s) for account: %{public}@",  buf,  0x2Au);
      }

      uint64_t v70 = v19;
      id v71 = v15;
      uint64_t v77 = v12;

      __int128 v81 = 0u;
      __int128 v82 = 0u;
      __int128 v79 = 0u;
      __int128 v80 = 0u;
      id v25 = v17;
      id v26 = [v25 countByEnumeratingWithState:&v79 objects:v87 count:16];
      if (v26)
      {
        id v27 = v26;
        uint64_t v28 = *(void *)v80;
        do
        {
          id v29 = v25;
          for (uint64_t i = 0LL; i != v27; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v80 != v28) {
              objc_enumerationMutation(v29);
            }
            uint64_t v31 = *(void **)(*((void *)&v79 + 1) + 8LL * (void)i);
            uint64_t v32 = ASDLogHandleForCategory(40LL);
            __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v34 = *(void *)(v77 + 48);
              *(_DWORD *)__int128 buf = 138412546;
              uint64_t v94 = v34;
              __int16 v95 = 2114;
              id v96 = v31;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "[%@] ├ UPD %{public}@", buf, 0x16u);
            }
          }

          id v25 = v29;
          id v27 = [v29 countByEnumeratingWithState:&v79 objects:v87 count:16];
        }

        while (v27);
      }

      id v14 = self;
      if (self) {
        id Property = objc_getProperty(self, v35, 24LL, 1);
      }
      else {
        id Property = 0LL;
      }
      id v37 = Property;

      id v11 = v74;
      uint64_t v39 = v77;
      if (v37)
      {
        id v68 = v25;
        id v69 = v5;
        if (self) {
          id v40 = objc_getProperty(self, v38, 24LL, 1);
        }
        else {
          id v40 = 0LL;
        }
        id v41 = v40;
        id v75 = objc_opt_new(&OBJC_CLASS___NSMutableArray);
        __int128 v83 = 0u;
        __int128 v84 = 0u;
        __int128 v85 = 0u;
        __int128 v86 = 0u;
        id obj = v41;
        id v42 = [obj countByEnumeratingWithState:&v83 objects:buf count:16];
        if (v42)
        {
          id v43 = v42;
          uint64_t v44 = *(void *)v84;
          do
          {
            for (j = 0LL; j != v43; j = (char *)j + 1)
            {
              if (*(void *)v84 != v44) {
                objc_enumerationMutation(obj);
              }
              id v46 = *(void **)(*((void *)&v83 + 1) + 8LL * (void)j);
              id v47 = objc_autoreleasePoolPush();
              if ((objc_opt_respondsToSelector(v46, "longLongValue") & 1) != 0
                && (uint64_t)[v46 longLongValue] >= 1)
              {
                __int128 v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v46 longLongValue]));
                __int128 v49 = (void *)objc_claimAutoreleasedReturnValue( +[ApplicationProxy proxyForItemID:]( &OBJC_CLASS___ApplicationProxy,  "proxyForItemID:",  v48));

                if (v49)
                {
                  __int128 v50 = objc_opt_new(&OBJC_CLASS___NSMutableDictionary);
                  __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v49 bundleID]);
                  -[NSMutableDictionary setObject:forKeyedSubscript:]( v50,  "setObject:forKeyedSubscript:",  v51,  @"bundleID");

                  -[NSMutableDictionary setObject:forKeyedSubscript:]( v50,  "setObject:forKeyedSubscript:",  v46,  @"itemID");
                  -[NSMutableArray addObject:](v75, "addObject:", v50);
                  uint64_t v52 = ASDLogHandleForCategory(40LL);
                  id v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
                  if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v54 = *(void *)(v77 + 48);
                    __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([v49 bundleID]);
                    id v56 = [v49 storeItemID];
                    *(_DWORD *)id v88 = 138412802;
                    *(void *)&v88[4] = v54;
                    *(_WORD *)&v88[12] = 2114;
                    *(void *)&v88[14] = v55;
                    *(_WORD *)&v88[22] = 2048;
                    id v89 = v56;
                    _os_log_impl( (void *)&_mh_execute_header,  v53,  OS_LOG_TYPE_DEFAULT,  "[%@] ├ DEF { bundleID: %{public}@ itemID: %lld }",  v88,  0x20u);
                  }
                }

                else
                {
                  id v91 = @"itemID";
                  uint64_t v92 = v46;
                  uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v92,  &v91,  1LL));
                  -[NSMutableArray addObject:](v75, "addObject:", v57);

                  uint64_t v58 = ASDLogHandleForCategory(40LL);
                  __int128 v50 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v58);
                  if (os_log_type_enabled((os_log_t)v50, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v59 = *(void *)(v77 + 48);
                    *(_DWORD *)id v88 = 138412546;
                    *(void *)&v88[4] = v59;
                    *(_WORD *)&v88[12] = 2114;
                    *(void *)&v88[14] = v46;
                    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v50,  OS_LOG_TYPE_DEFAULT,  "[%@] Found deferred update but not proxy for itemID: %{public}@",  v88,  0x16u);
                  }
                }
              }

              objc_autoreleasePoolPop(v47);
            }

            id v43 = [obj countByEnumeratingWithState:&v83 objects:buf count:16];
          }

          while (v43);
        }

        uint64_t v39 = v77;
        if (-[NSMutableArray count](v75, "count"))
        {
          id v60 = sub_1001AEE6C((uint64_t)&OBJC_CLASS___DiagnosticPublisher, *(void **)(v77 + 56));
          __int128 v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
          *(void *)id v88 = _NSConcreteStackBlock;
          *(void *)&v88[8] = 3221225472LL;
          *(void *)&v88[16] = sub_1002E96FC;
          id v89 = &unk_1003F2320;
          uint64_t v90 = v75;
          sub_1001AEEE8((uint64_t)v61, 1101LL, v88);
        }

        id v25 = v68;
        id v5 = v69;
        id v14 = self;
        id v11 = v74;
      }

      uint64_t v62 = ASDLogHandleForCategory(40LL);
      id v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v64 = *(void *)(v39 + 48);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v94 = v64;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "[%@] ╘ ", buf, 0xCu);
      }

      id v7 = v72;
      if (v25) {
        [*(id *)(v39 + 64) addObjectsFromArray:v25];
      }

      id v15 = v71;
    }
  }

  else
  {
    uint64_t v65 = ASDLogHandleForCategory(40LL);
    id v14 = (id *)objc_claimAutoreleasedReturnValue(v65);
    if (os_log_type_enabled((os_log_t)v14, OS_LOG_TYPE_ERROR))
    {
      uint64_t v66 = *(void *)(*(void *)(a1 + 32) + 48LL);
      uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "ams_DSID"));
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v94 = v66;
      __int16 v95 = 2114;
      id v96 = v67;
      __int16 v97 = 2114;
      id v98 = v11;
      _os_log_error_impl( (void *)&_mh_execute_header,  (os_log_t)v14,  OS_LOG_TYPE_ERROR,  "[%@] Failed to fetch updates for account: %{public}@ error: %{public}@",  buf,  0x20u);
    }
  }
}

void sub_1002E9494(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 itemID]);
  if (v3)
  {
    uint64_t v4 = v3;
    [*(id *)(a1 + 32) addObject:v3];
    id v3 = v4;
  }
}

NSCopying *__cdecl sub_1002E94E0(id a1, UpdatableApp *a2)
{
  uint64_t v2 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue(-[UpdatableApp storefrontID](a2, "storefrontID"));
  else {
    id v3 = &off_10040D0D8;
  }
  uint64_t v4 = v3;

  return v4;
}

void sub_1002E952C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (([a2 isEqualToNumber:&off_10040D0D8] & 1) == 0)
  {
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    id v6 = v5;
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      while (2)
      {
        for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          id v11 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "downloaderDSID", (void)v16));
          else {
            id v13 = 0LL;
          }
          id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 purchaserDSID]);
          id v15 = v14;
          if (v13)
          {

LABEL_20:
            goto LABEL_21;
          }

          if ((sub_100240668(v14) & 1) != 0)
          {
            id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_iTunesAccountWithDSID:", v15));

            if (v13) {
              goto LABEL_20;
            }
          }

          else
          {
          }
        }

        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
        if (v8) {
          continue;
        }
        break;
      }
    }
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "ams_activeiTunesAccount", (void)v16));
LABEL_21:
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void *sub_1002E96FC(void *result, uint64_t a2)
{
  if (a2) {
    return [*(id *)(a2 + 8) setObject:result[4] forKeyedSubscript:@"deferredUpdates"];
  }
  return result;
}

id *sub_1002E977C(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)&OBJC_CLASS___SQLiteDatabaseStoreMigrator;
    id v8 = (id *)objc_msgSendSuper2(&v12, "init");
    a1 = v8;
    if (v8)
    {
      objc_storeStrong(v8 + 1, a2);
      id v9 = [v7 copy];
      id v10 = a1[2];
      a1[2] = v9;

      *((_BYTE *)a1 + 24) = 1;
    }
  }

  return a1;
}

void sub_1002E981C(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    if (*(_BYTE *)(a1 + 24))
    {
      uint64_t v9 = *(void *)(a1 + 8);
      id v12 = 0LL;
      char v10 = sub_1001D68EC(v9, v7, &v12, v8);
      id v11 = v12;
      if ((v10 & 1) == 0 && a3) {
        *(_BYTE *)(a1 + 24) = 0;
      }
    }

    else
    {
      id v11 = 0LL;
    }
  }
}

void sub_1002E9FEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1002EA004(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002EA014(uint64_t a1)
{
}

void sub_1002EA01C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v8 = objc_opt_class(&OBJC_CLASS___ASDEnterpriseAppMetadata, v7);
  if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 manifestURL]);
    char v10 = (void *)objc_claimAutoreleasedReturnValue([v9 scheme]);
    unsigned int v11 = [v10 isEqualToString:@"itms-services"];

    if (v11)
    {
      id v12 = sub_1001EC990((uint64_t)v9);
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"action"]);
      unsigned __int8 v15 = [v14 isEqualToString:@"download-manifest"];

      if ((v15 & 1) == 0)
      {
        uint64_t v32 = ASDLogHandleForCategory(2LL);
        __int16 v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          uint64_t v60 = *(void *)(*(void *)(a1 + 40) + 56LL);
          *(_DWORD *)__int128 buf = 138543618;
          uint64_t v66 = v60;
          __int16 v67 = 2114;
          id v68 = v9;
          _os_log_error_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_ERROR,  "[%{public}@] Ignoring, unsupported action for enterprise request: %{public}@",  buf,  0x16u);
        }

        uint64_t v34 = ASDErrorDomain;
        __int16 v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Ignoring, unsupported action for enterprise request: %@",  v9));
        uint64_t v36 = ASDErrorWithDescription(v34, 531LL, v35);
        uint64_t v37 = objc_claimAutoreleasedReturnValue(v36);
        uint64_t v38 = *(void *)(*(void *)(a1 + 48) + 8LL);
        uint64_t v39 = *(void **)(v38 + 40);
        *(void *)(v38 + 40) = v37;

        __int128 v16 = v13;
        goto LABEL_36;
      }

      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"url"]);
      if (v16)
      {
        uint64_t v17 = objc_claimAutoreleasedReturnValue(+[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", v16));

        if (v17)
        {
          uint64_t v18 = objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:@"digest"]);

          __int128 v16 = (void *)v18;
          uint64_t v9 = (void *)v17;
          goto LABEL_10;
        }

        uint64_t v54 = ASDLogHandleForCategory(2LL);
        __int16 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
        {
          uint64_t v63 = *(void *)(*(void *)(a1 + 40) + 56LL);
          *(_DWORD *)__int128 buf = 138543618;
          uint64_t v66 = v63;
          __int16 v67 = 2114;
          id v68 = 0LL;
          _os_log_error_impl( (void *)&_mh_execute_header,  v55,  OS_LOG_TYPE_ERROR,  "[%{public}@] Ignoring, invalid URL for enterprise request: %{public}@",  buf,  0x16u);
        }

        uint64_t v56 = ASDErrorDomain;
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Ignoring, invalid URL for enterprise request: %@",  0LL));
        uint64_t v57 = ASDErrorWithDescription(v56, 850LL, v9);
        uint64_t v58 = objc_claimAutoreleasedReturnValue(v57);
        uint64_t v59 = *(void *)(*(void *)(a1 + 48) + 8LL);
        __int128 v49 = *(void **)(v59 + 40);
        *(void *)(v59 + 40) = v58;
      }

      else
      {
        uint64_t v46 = ASDLogHandleForCategory(2LL);
        id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
        {
          uint64_t v62 = *(void *)(*(void *)(a1 + 40) + 56LL);
          *(_DWORD *)__int128 buf = 138543618;
          uint64_t v66 = v62;
          __int16 v67 = 2114;
          id v68 = v9;
          _os_log_error_impl( (void *)&_mh_execute_header,  v47,  OS_LOG_TYPE_ERROR,  "[%{public}@] Ignoring, missing URL for enterprise request: %{public}@",  buf,  0x16u);
        }

        uint64_t v48 = ASDErrorDomain;
        __int128 v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Ignoring, missing URL for enterprise request: %@",  v9));
        uint64_t v50 = ASDErrorWithDescription(v48, 507LL, v49);
        uint64_t v51 = objc_claimAutoreleasedReturnValue(v50);
        uint64_t v52 = *(void *)(*(void *)(a1 + 48) + 8LL);
        id v53 = *(void **)(v52 + 40);
        *(void *)(v52 + 40) = v51;
      }

      uint64_t v9 = v13;
      goto LABEL_36;
    }

    if (!v9)
    {
      uint64_t v40 = ASDLogHandleForCategory(2LL);
      id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        uint64_t v61 = *(void *)(*(void *)(a1 + 40) + 56LL);
        *(_DWORD *)__int128 buf = 138543362;
        uint64_t v66 = v61;
        _os_log_error_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_ERROR,  "[%{public}@] Ignoring, invalid enterprise request with missing URL",  buf,  0xCu);
      }

      uint64_t v42 = ASDErrorDomain;
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Ignoring, invalid enterprise request with missing URL"));
      uint64_t v43 = ASDErrorWithDescription(v42, 507LL, v9);
      uint64_t v44 = objc_claimAutoreleasedReturnValue(v43);
      uint64_t v45 = *(void *)(*(void *)(a1 + 48) + 8LL);
      __int128 v16 = *(void **)(v45 + 40);
      *(void *)(v45 + 40) = v44;
      goto LABEL_36;
    }

    __int128 v16 = 0LL;
LABEL_10:
    __int128 v19 = sub_1001BFD50((char *)objc_alloc(&OBJC_CLASS___UPPManifestDownloadTask), v9);
    id v21 = v19;
    if (v19) {
      objc_setProperty_atomic(v19, v20, *(id *)(*(void *)(a1 + 40) + 56LL), 106LL);
    }
    id Property = *(id *)(*(void *)(a1 + 40) + 56LL);
    if (Property) {
      id Property = objc_getProperty(Property, v20, 32LL, 1);
    }
    id v23 = Property;
    id v25 = v23;
    if (v21)
    {
      objc_setProperty_atomic(v21, v24, v23, 90LL);

      v21[74] = [v6 hideUserPrompts];
      objc_setProperty_atomic(v21, v26, v16, 98LL);
    }

    else
    {

      [v6 hideUserPrompts];
    }

    id v27 = sub_10020F1C0((uint64_t)&OBJC_CLASS___TaskQueue);
    uint64_t v28 = (id *)objc_claimAutoreleasedReturnValue(v27);
    uint64_t v64 = v21;
    id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v64, 1LL));
    if (v28) {
      [v28[1] addOperations:v29 waitUntilFinished:1];
    }

    if (v21)
    {
      if ((v21[24] & 1) != 0)
      {
LABEL_22:
        [*(id *)(a1 + 32) addObject:v5];

LABEL_36:
        goto LABEL_37;
      }

      id v31 = objc_getProperty(v21, v30, 32LL, 1);
    }

    else
    {
      id v31 = 0LL;
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v31);
    goto LABEL_22;
  }

  [*(id *)(a1 + 32) addObject:v5];
LABEL_37:
}

void *sub_1002EA684(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v44.receiver = a1;
    v44.super_class = (Class)&OBJC_CLASS___AppLedgerEvent;
    a1 = objc_msgSendSuper2(&v44, "init");
    if (a1)
    {
      uint64_t v7 = sub_10021B614(v5);
      uint64_t v8 = objc_claimAutoreleasedReturnValue(v7);
      uint64_t v9 = (void *)a1[7];
      a1[7] = v8;

      id v10 = sub_10021B6D0(v5);
      uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
      id v12 = (void *)a1[1];
      a1[1] = v11;

      id v13 = sub_1001E26D0(v5, (uint64_t)@"client_id");
      id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      if (v14)
      {
        id v15 = sub_1001E26D0(v5, (uint64_t)@"client_id");
        uint64_t v16 = objc_claimAutoreleasedReturnValue(v15);
        uint64_t v17 = (void *)a1[8];
        a1[8] = v16;
      }

      else
      {
        uint64_t v17 = (void *)a1[8];
        a1[8] = &stru_1003F3E40;
      }

      id v18 = sub_1001E25D0(v5, (uint64_t)@"item_id");
      uint64_t v19 = objc_claimAutoreleasedReturnValue(v18);
      uint64_t v20 = (void *)a1[6];
      a1[6] = v19;

      id v21 = sub_1001E26D0(v5, (uint64_t)@"bundle_version");
      uint64_t v22 = objc_claimAutoreleasedReturnValue(v21);
      id v23 = (void *)a1[2];
      a1[2] = v22;

      id v24 = sub_1001E25D0(v5, (uint64_t)@"evid");
      uint64_t v25 = objc_claimAutoreleasedReturnValue(v24);
      SEL v26 = (void *)a1[3];
      a1[3] = v25;

      id v27 = sub_1001E2698(v6, (uint64_t)@"package_type");
      if (sub_10021B5C4(v5))
      {
        uint64_t v28 = 2LL;
      }

      else
      {
        if (v27 != (id)1)
        {
          a1[9] = 0LL;
LABEL_12:
          id v29 = (void *)objc_claimAutoreleasedReturnValue([v5 valueForProperty:@"install_finished_timestamp"]);
          uint64_t v31 = objc_opt_class(&OBJC_CLASS___NSDate, v30);
          id v32 = v29;
          if ((objc_opt_isKindOfClass(v32, v31) & 1) != 0) {
            id v33 = v32;
          }
          else {
            id v33 = 0LL;
          }

          if (v33) {
            id v34 = v32;
          }
          else {
            id v34 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
          }
          __int16 v35 = (void *)a1[4];
          a1[4] = v34;

          id v36 = sub_1001E26D0(v5, (uint64_t)@"log_code");
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          unsigned int v38 = sub_10021B5C4(v5);
          id v39 = v37;
          if ([v39 isEqualToString:@"CLP"])
          {
            uint64_t v40 = 10LL;
LABEL_24:

            a1[5] = v40;
            goto LABEL_25;
          }

          if (([v39 isEqualToString:@"BUY"] & 1) != 0
            || ([v39 isEqualToString:@"LGY"] & 1) != 0
            || ([v39 isEqualToString:@"ABY"] & 1) != 0)
          {
            uint64_t v40 = 11LL;
            goto LABEL_24;
          }

          if ([v39 isEqualToString:@"BYQ"])
          {
            uint64_t v40 = 15LL;
            goto LABEL_24;
          }

          if (![v39 isEqualToString:@"DIS"])
          {
            if ([v39 isEqualToString:@"PTV"])
            {
              BOOL v42 = v38 == 0;
              uint64_t v43 = 40LL;
              goto LABEL_34;
            }

            if (([v39 isEqualToString:@"VPP"] & 1) == 0
              && ![v39 isEqualToString:@"VPF"])
            {
              if ([v39 isEqualToString:@"RSD"])
              {
                uint64_t v40 = 17LL;
              }

              else if (([v39 isEqualToString:@"RSP"] & 1) != 0 {
                     || ([v39 isEqualToString:@"RSR"] & 1) != 0)
              }
              {
                uint64_t v40 = 14LL;
              }

              else if ([v39 isEqualToString:@"RTV"])
              {
                uint64_t v40 = 50LL;
              }

              else if ([v39 isEqualToString:@"SYS"])
              {
                uint64_t v40 = 70LL;
              }

              else if ([v39 isEqualToString:@"APR"])
              {
                uint64_t v40 = 1LL;
              }

              else if (([v39 isEqualToString:@"TFA"] & 1) != 0 {
                     || ([v39 isEqualToString:@"TFU"] & 1) != 0)
              }
              {
                uint64_t v40 = 20LL;
              }

              else if ([v39 isEqualToString:@"TFB"])
              {
                uint64_t v40 = 22LL;
              }

              else if (([v39 isEqualToString:@"UPD"] & 1) != 0 {
                     || ([v39 isEqualToString:@"UPB"] & 1) != 0
              }
                     || ([v39 isEqualToString:@"AUB"] & 1) != 0)
              {
                uint64_t v40 = 18LL;
              }

              else if (([v39 isEqualToString:@"UPA"] & 1) != 0 {
                     || ([v39 isEqualToString:@"AUA"] & 1) != 0)
              }
              {
                uint64_t v40 = 19LL;
              }

              else if ([v39 isEqualToString:@"WRD"])
              {
                uint64_t v40 = 60LL;
              }

              else
              {
                uint64_t v40 = 0LL;
              }

              goto LABEL_24;
            }
          }

          BOOL v42 = v38 == 0;
          uint64_t v43 = 30LL;
LABEL_34:
          if (v42) {
            uint64_t v40 = v43;
          }
          else {
            uint64_t v40 = v43 + 1;
          }
          goto LABEL_24;
        }

        uint64_t v28 = 1LL;
      }

      a1[9] = v28;
      goto LABEL_12;
    }
  }

void *sub_1002EAB38(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    v21.receiver = a1;
    v21.super_class = (Class)&OBJC_CLASS___AppLedgerEvent;
    id v7 = objc_msgSendSuper2(&v21, "init");
    a1 = v7;
    if (v7)
    {
      objc_storeStrong((id *)v7 + 7, a3);
      uint64_t v8 = objc_claimAutoreleasedReturnValue([v5 bundleIdentifier]);
      uint64_t v9 = (void *)a1[1];
      a1[1] = v8;

      id v10 = (void *)objc_claimAutoreleasedReturnValue([v5 iTunesMetadata]);
      uint64_t v11 = (void *)a1[8];
      a1[8] = @"com.apple.TVAppStore";

      uint64_t v12 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v10 storeItemIdentifier]));
      id v13 = (void *)a1[6];
      a1[6] = v12;

      uint64_t v14 = objc_claimAutoreleasedReturnValue([v5 bundleVersion]);
      id v15 = (void *)a1[2];
      a1[2] = v14;

      uint64_t v16 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v10 versionIdentifier]));
      uint64_t v17 = (void *)a1[3];
      a1[3] = v16;

      a1[9] = 0LL;
      uint64_t v18 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
      uint64_t v19 = (void *)a1[4];
      a1[4] = v18;

      a1[5] = 80LL;
    }
  }

  return a1;
}

id sub_1002EAD00(id a1)
{
  id v1 = a1;
  if (a1)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1 dataContainerURL]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 URLByAppendingPathComponent:@"StoreKit" isDirectory:1]);

    if (v3)
    {
      else {
        uint64_t v4 = @"receipt";
      }
      id v1 = (id)objc_claimAutoreleasedReturnValue([v3 URLByAppendingPathComponent:v4 isDirectory:0]);
    }

    else
    {
      uint64_t v5 = ASDLogHandleForCategory(15LL);
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v1 bundleIdentifier]);
        int v9 = 138543362;
        id v10 = v8;
        _os_log_error_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_ERROR,  "(LSBundleRecord) Couldn't create receiptURL, no dataContainerURL was returned: %{public}@",  (uint8_t *)&v9,  0xCu);
      }

      id v1 = 0LL;
    }
  }

  return v1;
}

double *sub_1002EAE48(double *result, double a2, double a3)
{
  if (result)
  {
    v5.receiver = result;
    v5.super_class = (Class)&OBJC_CLASS___TimeWindow;
    Class result = (double *)objc_msgSendSuper2(&v5, "init");
    if (result)
    {
      result[1] = a3;
      result[2] = a2;
    }
  }

  return result;
}

uint64_t sub_1002EAE98(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v2 timeIntervalSinceReferenceDate];
    double v4 = v3;

    if (*(double *)(v1 + 16) <= v4)
    {
      else {
        return 2LL;
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

id sub_1002EB2A0(uint64_t a1)
{
  if (qword_100462660 != -1) {
    dispatch_once(&qword_100462660, &stru_1003F2398);
  }
  return (id)qword_100462668;
}

void sub_1002EB2E4(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___Device);
  if (v1)
  {
    v14.receiver = v1;
    v14.super_class = (Class)&OBJC_CLASS___Device;
    uint64_t v2 = objc_msgSendSuper2(&v14, "init");
    if (v2)
    {
      uint64_t v3 = objc_claimAutoreleasedReturnValue(+[AMSDevice productVersion](&OBJC_CLASS___AMSDevice, "productVersion"));
      double v4 = (void *)v2[3];
      void v2[3] = v3;

      objc_opt_self(&OBJC_CLASS___Device);
      size_t v16 = 37LL;
      if (sysctlbyname("kern.bootsessionuuid", v17, &v16, 0LL, 0LL) < 0)
      {
        uint64_t v9 = ASDLogHandleForCategory(14LL);
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_error_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_ERROR,  "failed to get kern.bootsessionuuid",  buf,  2u);
        }

        uint64_t v8 = 0LL;
      }

      else
      {
        objc_super v5 = objc_alloc(&OBJC_CLASS___NSUUID);
        id v6 = objc_alloc(&OBJC_CLASS___NSString);
        id v7 = -[NSString initWithBytesNoCopy:length:encoding:freeWhenDone:]( v6,  "initWithBytesNoCopy:length:encoding:freeWhenDone:",  v17,  v16 - 1,  4LL,  0LL);
        uint64_t v8 = -[NSUUID initWithUUIDString:](v5, "initWithUUIDString:", v7);
      }

      id v10 = (void *)v2[4];
      void v2[4] = v8;

      uint64_t v11 = MGCopyAnswer(@"VuGdqp8UBpi9vPWHlPluVQ", 0LL);
      uint64_t v12 = (void *)v2[2];
      v2[2] = v11;
    }
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  id v13 = (void *)qword_100462668;
  qword_100462668 = (uint64_t)v2;
}

void sub_1002EB5B0(void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    id v4 = a3;
    id v7 = (id)objc_claimAutoreleasedReturnValue([v4 productVariants]);
    if ([v7 count])
    {
      objc_super v5 = (void *)objc_claimAutoreleasedReturnValue([v7 componentsJoinedByString:@" "]);
      [a1 setValue:v5 forHTTPHeaderField:@"X-Apple-TA-Device"];
    }

    else
    {
      [a1 setValue:0 forHTTPHeaderField:@"X-Apple-TA-Device"];
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 iOSSupportVersion]);

    [a1 setValue:0 forHTTPHeaderField:@"X-Apple-TA-OS-Version"];
  }

id sub_1002EB678(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  objc_opt_self(a1);
  objc_super v5 = objc_alloc(&OBJC_CLASS___StoreItemResponse);
  id v6 = v4;
  if (v5
    && (v141.receiver = v5,
        v141.super_class = (Class)&OBJC_CLASS___StoreItemResponse,
        (id v7 = objc_msgSendSuper2(&v141, "init")) != 0))
  {
    uint64_t v8 = v7;
    id v9 = sub_1001DF594(v6, @"page-type");
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v8[16] = [v10 isEqualToString:@"preorder-success"];

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"more"]);
    uint64_t v12 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
    id v122 = v8;
    SEL v123 = v6;
    if (v11)
    {
      id v13 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      __int128 v137 = 0u;
      __int128 v138 = 0u;
      __int128 v139 = 0u;
      __int128 v140 = 0u;
      id v14 = sub_1002D64A4(v11);
      id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      id v16 = [v15 countByEnumeratingWithState:&v137 objects:v147 count:16];
      if (v16)
      {
        id v17 = v16;
        uint64_t v18 = *(void *)v138;
        do
        {
          for (uint64_t i = 0LL; i != v17; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v138 != v18) {
              objc_enumerationMutation(v15);
            }
            uint64_t v20 = *(void **)(*((void *)&v137 + 1) + 8LL * (void)i);
            id v21 = sub_1001DEDF8(v20, @"endId");
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
            id v23 = sub_1001DEDF8(v20, @"startId");
            uint64_t v24 = objc_claimAutoreleasedReturnValue(v23);
            uint64_t v25 = (void *)v24;
            if (v22) {
              BOOL v26 = v24 == 0;
            }
            else {
              BOOL v26 = 1;
            }
            if (!v26)
            {
              -[NSMutableArray addObject:](v13, "addObject:", v24);
              -[NSMutableArray addObject:](v13, "addObject:", v22);
            }
          }

          id v17 = [v15 countByEnumeratingWithState:&v137 objects:v147 count:16];
        }

        while (v17);
      }

      id v27 = -[NSMutableArray copy](v13, "copy");
      uint64_t v8 = v122;
      uint64_t v28 = (void *)*((void *)v122 + 10);
      *((void *)v122 + 10) = v27;

      id v6 = v123;
      uint64_t v12 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
    }

    id v120 = v11;
    id v29 = sub_1001DEDF8(v6, @"failureType");
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    if (v30)
    {
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:@"customerMessage"]);
      id v32 = sub_1002EC04C(v30, v31);
      uint64_t v33 = objc_claimAutoreleasedReturnValue(v32);
      id v34 = (void *)*((void *)v8 + 6);
      *((void *)v8 + 6) = v33;
    }

    id v118 = v30;
    id v35 = sub_1001DEC94(v6, @"failed-items");
    id v36 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
    id v121 = (void *)objc_claimAutoreleasedReturnValue(v35);
    if (v121)
    {
      id v124 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      __int128 v133 = 0u;
      __int128 v134 = 0u;
      __int128 v135 = 0u;
      __int128 v136 = 0u;
      id v37 = sub_1002D64A4(v121);
      id obj = (id)objc_claimAutoreleasedReturnValue(v37);
      id v38 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v133, v146, 16, v30, v11);
      if (v38)
      {
        id v39 = v38;
        uint64_t v40 = *(void *)v134;
        do
        {
          for (j = 0LL; j != v39; j = (char *)j + 1)
          {
            if (*(void *)v134 != v40) {
              objc_enumerationMutation(obj);
            }
            BOOL v42 = *(void **)(*((void *)&v133 + 1) + 8LL * (void)j);
            id v43 = sub_1001DEDF8(v42, @"item-id");
            objc_super v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
            id v45 = sub_1001DEDF8(v42, @"failureType");
            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
            id v47 = sub_1001DF594(v42, @"customerMessage");
            uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
            id v49 = sub_1002EC04C(v46, v48);
            uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(v49);

            if (v44) {
              BOOL v51 = v50 == 0LL;
            }
            else {
              BOOL v51 = 1;
            }
            if (!v51) {
              -[NSMutableDictionary setObject:forKeyedSubscript:](v124, "setObject:forKeyedSubscript:", v50, v44);
            }
          }

          id v39 = [obj countByEnumeratingWithState:&v133 objects:v146 count:16];
        }

        while (v39);
      }

      id v52 = -[NSMutableDictionary copy](v124, "copy");
      uint64_t v8 = v122;
      id v53 = (void *)*((void *)v122 + 1);
      *((void *)v122 + 1) = v52;

      id v6 = v123;
      uint64_t v12 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
      id v36 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
    }

    uint64_t v54 = sub_1001DEFF8(v6, @"keybag");
    uint64_t v55 = objc_claimAutoreleasedReturnValue(v54);
    uint64_t v56 = (void *)*((void *)v8 + 8);
    *((void *)v8 + _Block_object_dispose(va, 8) = v55;

    id v57 = sub_1001DEDF8(v6, @"dsPersonId");
    uint64_t v58 = objc_claimAutoreleasedReturnValue(v57);
    uint64_t v59 = (void *)*((void *)v8 + 3);
    *((void *)v8 + 3) = v58;

    id v60 = sub_1001DEC94(v6, @"songList");
    uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
    if (!v61)
    {
      id v62 = sub_1001DEC94(v6, @"items");
      uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(v62);
    }

    id v63 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", @"optimalDownloadPeriod", v118));
    uint64_t v64 = v63;
    uint64_t v125 = v63;
    if (v63)
    {
      id v67 = sub_1001DF594(v63, @"startTime");
      id v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
      id v69 = (void *)objc_claimAutoreleasedReturnValue([v68 componentsSeparatedByString:@":"]);
      uint64_t v70 = (uint64_t)sub_1001DF39C(v64, @"durationInMinutes", 0LL);
      uint64_t v65 = 0LL;
      if ([v69 count] == (id)2 && v70 >= 1)
      {
        id v71 = (void *)objc_claimAutoreleasedReturnValue([v69 firstObject]);
        id v72 = [v71 integerValue];

        uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v69 lastObject]);
        id v74 = [v73 integerValue];

        id v75 = (void *)objc_claimAutoreleasedReturnValue( +[StoreItemResponseSwift nextOptimalDownloadWindowWithHour:minute:duration:]( &OBJC_CLASS____TtC9appstored22StoreItemResponseSwift,  "nextOptimalDownloadWindowWithHour:minute:duration:",  v72,  v74,  (double)(60 * v70)));
        if (v75)
        {
          uint64_t v76 = ASDLogHandleForCategory(10LL);
          uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
          if (os_log_type_enabled(v77, OS_LOG_TYPE_INFO))
          {
            id v78 = (void *)objc_claimAutoreleasedReturnValue([v75 startDate]);
            __int128 v79 = (void *)objc_claimAutoreleasedReturnValue([v75 endDate]);
            *(_DWORD *)__int128 buf = 138543618;
            id v143 = v78;
            __int16 v144 = 2114;
            uint64_t v145 = v79;
            _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_INFO,  "Received optimal download window of %{public}@ to %{public}@",  buf,  0x16u);
          }

          __int128 v80 = objc_alloc(&OBJC_CLASS___TimeWindow);
          __int128 v81 = (void *)objc_claimAutoreleasedReturnValue([v75 startDate]);
          [v81 timeIntervalSinceReferenceDate];
          double v83 = v82;
          __int128 v84 = (void *)objc_claimAutoreleasedReturnValue([v75 endDate]);
          [v84 timeIntervalSinceReferenceDate];
          uint64_t v65 = sub_1002EAE48((double *)v80, v83, v85);

          uint64_t v64 = v125;
        }

        else
        {
          uint64_t v65 = 0LL;
        }

        id v36 = &_ss28__ContiguousArrayStorageBaseCMa_ptr;
      }
    }

    else
    {
      uint64_t v65 = 0LL;
    }

    id obja = (id)objc_opt_new(v36[495]);
    __int128 v86 = (void *)objc_opt_new(v12[492]);
    __int128 v129 = 0u;
    __int128 v130 = 0u;
    __int128 v131 = 0u;
    __int128 v132 = 0u;
    id v87 = v61;
    id v88 = [v87 countByEnumeratingWithState:&v129 objects:buf count:16];
    if (v88)
    {
      id v89 = v88;
      uint64_t v90 = *(void *)v130;
      do
      {
        id v91 = 0LL;
        do
        {
          if (*(void *)v130 != v90) {
            objc_enumerationMutation(v87);
          }
          id v92 = sub_1002CAAFC( objc_alloc(&OBJC_CLASS___StoreItem),  *(void **)(*((void *)&v129 + 1) + 8LL * (void)v91),  a3);
          uint64_t v94 = v92;
          if (v92)
          {
            id v95 = objc_getProperty(v92, v93, 208LL, 1);
            if (v95)
            {
              __int16 v97 = v95;
              id v98 = objc_getProperty(v94, v96, 96LL, 1);

              if (v98)
              {
                id v99 = objc_getProperty(v94, v96, 96LL, 1);
                id v101 = objc_getProperty(v94, v100, 208LL, 1);
                [obja setObject:v99 forKeyedSubscript:v101];
              }
            }

            objc_setProperty_atomic(v94, v96, v65, 328LL);
          }

          [v86 addObject:v94];

          id v91 = (char *)v91 + 1;
        }

        while (v89 != v91);
        id v102 = [v87 countByEnumeratingWithState:&v129 objects:buf count:16];
        id v89 = v102;
      }

      while (v102);
    }

    id v103 = [v86 copy];
    uint64_t v66 = v122;
    id v104 = (void *)*((void *)v122 + 7);
    *((void *)v122 + 7) = v103;

    id v6 = v123;
    if (v123)
    {
      v122[17] = sub_1001DEDAC(v123, @"cancel-purchase-batch", 0LL);
      unsigned __int8 v105 = sub_1001DEDAC(v123, @"trigger-download", 0LL);
    }

    else
    {
      unsigned __int8 v105 = 0;
      v122[17] = 0;
    }

    v122[18] = v105;
    id v106 = sub_1001DF1DC(v123, @"metrics");
    uint64_t v107 = objc_claimAutoreleasedReturnValue(v106);
    id v108 = (void *)*((void *)v122 + 9);
    *((void *)v122 + 9) = v107;

    id v109 = sub_1001DEC94(v123, @"duAnonymousPings");
    id v110 = (void *)objc_claimAutoreleasedReturnValue(v109);
    id v111 = v110;
    if (v110)
    {
      id v112 = sub_1002D6554(v110);
      id v113 = (void *)objc_claimAutoreleasedReturnValue(v112);
      id v114 = sub_10031D77C(v113, &stru_1003F23D8);
      uint64_t v115 = objc_claimAutoreleasedReturnValue(v114);
      uint64_t v116 = (void *)*((void *)v122 + 4);
      *((void *)v122 + 4) = v115;
    }
  }

  else
  {
    uint64_t v66 = 0LL;
  }

  return v66;
}

StoreItemResponse *sub_1002EBF84(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  id v7 = a2;
  objc_opt_self(a1);
  uint64_t v8 = objc_alloc(&OBJC_CLASS___StoreItemResponse);
  id v9 = v7;
  id v10 = v6;
  if (v8)
  {
    v13.receiver = v8;
    v13.super_class = (Class)&OBJC_CLASS___StoreItemResponse;
    uint64_t v11 = (StoreItemResponse *)objc_msgSendSuper2(&v13, "init");
    uint64_t v8 = v11;
    if (v11)
    {
      objc_storeStrong((id *)&v11->_error, a2);
      objc_storeStrong((id *)&v8->_accountID, a3);
    }
  }

  return v8;
}

id sub_1002EC04C(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString, v5);
  if ((objc_opt_isKindOfClass(v4, v6) & 1) == 0)
  {

    id v4 = 0LL;
  }

  uint64_t v7 = ASDServerErrorDomain;
  if (v3) {
    uint64_t v8 = (uint64_t)[v3 integerValue];
  }
  else {
    uint64_t v8 = 1006LL;
  }
  uint64_t v9 = ASDErrorWithTitleAndMessage(v7, v8, v4, 0LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);

  return v10;
}

NSURL *__cdecl sub_1002EC0EC(id a1, NSString *a2)
{
  return +[NSURL URLWithString:](&OBJC_CLASS___NSURL, "URLWithString:", a2);
}

id sub_1002EC0FC(id result, const char *a2)
{
  if (result) {
    return objc_getProperty(result, a2, 56LL, 1);
  }
  return result;
}

id sub_1002EC1B8(id result)
{
  if (result) {
    return sub_1001DEDAC(result, @"trigger-download", 0LL);
  }
  return result;
}

id sub_1002EC1D0(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v7 = objc_opt_self(a1);
  if (v5)
  {
    char v8 = *((_BYTE *)v5 + 10);
    id v9 = objc_getProperty(v5, v6, 40LL, 1);
    unint64_t v10 = *((void *)v5 + 2);
    int v11 = *((_BYTE *)v5 + 9) & 1;
    if ((v8 & 1) != 0)
    {
      id v14 = sub_1002EC294(v7, v9, v10, a3, v11);
      uint64_t v13 = objc_claimAutoreleasedReturnValue(v14);
      goto LABEL_5;
    }
  }

  else
  {
    int v11 = 0;
    id v9 = 0LL;
    unint64_t v10 = 0LL;
  }

  uint64_t v12 = sub_1002EC438(v7, v9, v10, a3, v11);
  uint64_t v13 = objc_claimAutoreleasedReturnValue(v12);
LABEL_5:
  id v15 = (void *)v13;

  return v15;
}

AMSDialogRequest *sub_1002EC294(uint64_t a1, void *a2, unint64_t a3, int a4, int a5)
{
  id v9 = a2;
  uint64_t v10 = objc_opt_self(a1);
  int v11 = objc_alloc_init(&OBJC_CLASS___AMSDialogRequest);
  if (v9 && [v9 length])
  {
    if (a4) {
      uint64_t v12 = @"CELLULAR_DATA_PROMPT_TITLE_UPDATE_ROAMING_%@";
    }
    else {
      uint64_t v12 = @"CELLULAR_DATA_PROMPT_TITLE_UPDATE_%@";
    }
    uint64_t v13 = ASDLocalizedString(v12);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v14, v9));
    -[AMSDialogRequest setTitle:](v11, "setTitle:", v15);
  }

  else
  {
    if ((a4 & 1) != 0) {
      id v16 = @"CELLULAR_DATA_PROMPT_TITLE_UPDATE_ROAMING_GENERIC";
    }
    else {
      id v16 = @"CELLULAR_DATA_PROMPT_TITLE_UPDATE_GENERIC";
    }
    uint64_t v17 = ASDLocalizedString(v16);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v17);
    -[AMSDialogRequest setTitle:](v11, "setTitle:", v14);
  }

  id v18 = sub_1002EC738(v10, a3, a5);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  -[AMSDialogRequest setMessage:](v11, "setMessage:", v19);

  id v20 = sub_1002EC5DC(v10);
  id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  -[AMSDialogRequest setButtonActions:](v11, "setButtonActions:", v21);

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDialogRequest buttonActions](v11, "buttonActions"));
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 lastObject]);
  -[AMSDialogRequest setDefaultAction:](v11, "setDefaultAction:", v23);

  if (a4) {
    uint64_t v24 = @"cellularLimitUpdateRoaming";
  }
  else {
    uint64_t v24 = @"cellularLimitUpdate";
  }
  sub_100321874(v11, v24);

  return v11;
}

AMSDialogRequest *sub_1002EC438(uint64_t a1, void *a2, unint64_t a3, int a4, int a5)
{
  id v9 = a2;
  uint64_t v10 = objc_opt_self(a1);
  int v11 = objc_alloc_init(&OBJC_CLASS___AMSDialogRequest);
  if (v9 && [v9 length])
  {
    if (a4) {
      uint64_t v12 = @"CELLULAR_DATA_PROMPT_TITLE_DOWNLOAD_ROAMING_%@";
    }
    else {
      uint64_t v12 = @"CELLULAR_DATA_PROMPT_TITLE_DOWNLOAD_%@";
    }
    uint64_t v13 = ASDLocalizedString(v12);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v14, v9));
    -[AMSDialogRequest setTitle:](v11, "setTitle:", v15);
  }

  else
  {
    if ((a4 & 1) != 0) {
      id v16 = @"CELLULAR_DATA_PROMPT_TITLE_DOWNLOAD_ROAMING_GENERIC";
    }
    else {
      id v16 = @"CELLULAR_DATA_PROMPT_TITLE_DOWNLOAD_GENERIC";
    }
    uint64_t v17 = ASDLocalizedString(v16);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v17);
    -[AMSDialogRequest setTitle:](v11, "setTitle:", v14);
  }

  id v18 = sub_1002EC738(v10, a3, a5);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  -[AMSDialogRequest setMessage:](v11, "setMessage:", v19);

  id v20 = sub_1002EC5DC(v10);
  id v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  -[AMSDialogRequest setButtonActions:](v11, "setButtonActions:", v21);

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(-[AMSDialogRequest buttonActions](v11, "buttonActions"));
  id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 lastObject]);
  -[AMSDialogRequest setDefaultAction:](v11, "setDefaultAction:", v23);

  if (a4) {
    uint64_t v24 = @"cellularLimitDownloadRoaming";
  }
  else {
    uint64_t v24 = @"cellularLimitDownload";
  }
  sub_100321874(v11, v24);

  return v11;
}

id sub_1002EC5DC(uint64_t a1)
{
  uint64_t v1 = objc_opt_self(a1);
  id v2 = objc_alloc_init(&OBJC_CLASS___AMSDialogAction);
  uint64_t v3 = ASDLocalizedString(@"CELLULAR_DATA_PROMPT_BUTTON_DOWNLOAD");
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  [v2 setTitle:v4];

  [v2 setIdentifier:@"CelularDataPromptActionDownloadNow"];
  sub_1001D7974(v2, @"download");
  id v5 = objc_alloc_init(&OBJC_CLASS___AMSDialogAction);
  objc_opt_self(v1);
  else {
    uint64_t v6 = @"CELLULAR_DATA_PROMPT_BUTTON_LATER_WIFI";
  }
  uint64_t v7 = ASDLocalizedString(v6);
  char v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  [v5 setTitle:v8];

  [v5 setIdentifier:@"CelularDataPromptActionDownloadLater"];
  [v5 setStyle:2];
  sub_1001D7974(v5, @"later");
  v11[0] = v5;
  v11[1] = v2;
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v11, 2LL));

  return v9;
}

id sub_1002EC738(uint64_t a1, unint64_t a2, int a3)
{
  if (a2)
  {
    if (a3) {
      id v5 = @"CELLULAR_DATA_PROMPT_BODY_REMAINING_%@";
    }
    else {
      id v5 = @"CELLULAR_DATA_PROMPT_BODY_INITIAL_%@";
    }
    uint64_t v8 = ASDLocalizedString(v5);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = sub_1002D6684((uint64_t)&OBJC_CLASS___EvaluatorDownload, a2);
    int v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v9, v11));
  }

  else
  {
    uint64_t v6 = ASDLocalizedString(@"CELLULAR_DATA_PROMPT_BODY_DISCLAIMER");
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  }

  return v7;
}

id sub_1002ECBE0(id a1, void *a2)
{
  id v2 = a1;
  if (a1)
  {
    id v3 = sub_1002ECC6C((uint64_t)&OBJC_CLASS___PurchaseHistoryDatabaseSession, a2);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v2 connection]);
    id v6 = sub_10024C290((uint64_t)&OBJC_CLASS___PurchaseHistoryAppEntity, @"ROWID", v4, v5);
    id v2 = (id)objc_claimAutoreleasedReturnValue(v6);
  }

  return v2;
}

id sub_1002ECC6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToLongLong:]( SQLiteComparisonPredicate,  "predicateWithProperty:equalToLongLong:",  @"purchaser_dsid",  [v3 accountID]));
  -[NSMutableArray addObject:](v4, "addObject:", v5);

  if ([v3 includeArcade] == (id)2)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:value:comparisonType:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:value:comparisonType:",  @"media_kind",  &off_10040D0F0,  2LL));
    -[NSMutableArray addObject:](v4, "addObject:", v6);
  }

  if ([v3 isFirstParty] == (id)2)
  {
    uint64_t v7 = &__kCFBooleanFalse;
  }

  else
  {
    if ([v3 isFirstParty] != (id)1) {
      goto LABEL_8;
    }
    uint64_t v7 = &__kCFBooleanTrue;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"first_party",  v7));
  -[NSMutableArray addObject:](v4, "addObject:", v8);

LABEL_8:
  if ([v3 isHidden] == (id)2)
  {
    id v9 = &__kCFBooleanFalse;
  }

  else
  {
    if ([v3 isHidden] != (id)1) {
      goto LABEL_13;
    }
    id v9 = &__kCFBooleanTrue;
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"hidden",  v9));
  -[NSMutableArray addObject:](v4, "addObject:", v10);

LABEL_13:
  if ([v3 currentlyOptedInForMacOSEligibility] == (id)2)
  {
    int v11 = &__kCFBooleanFalse;
  }

  else
  {
    if ([v3 currentlyOptedInForMacOSEligibility] != (id)1) {
      goto LABEL_18;
    }
    int v11 = &__kCFBooleanTrue;
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_ios_binary_macos_available",  v11));
  -[NSMutableArray addObject:](v4, "addObject:", v12);

LABEL_18:
  if ([v3 optedInForMacOSEligibility] == (id)2)
  {
    uint64_t v13 = &__kCFBooleanFalse;
  }

  else
  {
    if ([v3 optedInForMacOSEligibility] != (id)1) {
      goto LABEL_23;
    }
    uint64_t v13 = &__kCFBooleanTrue;
  }

  id v14 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_ios_binary_macos_compatible",  v13));
  -[NSMutableArray addObject:](v4, "addObject:", v14);

LABEL_23:
  if ([v3 currentlyOptedInForXROSEligibility] == (id)2)
  {
    id v15 = &__kCFBooleanFalse;
  }

  else
  {
    if ([v3 currentlyOptedInForXROSEligibility] != (id)1) {
      goto LABEL_28;
    }
    id v15 = &__kCFBooleanTrue;
  }

  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"currently_opted_in_for_ros_eligibility",  v15));
  -[NSMutableArray addObject:](v4, "addObject:", v16);

LABEL_28:
  if ([v3 optedInForXROSEligibility] == (id)2)
  {
    uint64_t v17 = &__kCFBooleanFalse;
  }

  else
  {
    if ([v3 optedInForXROSEligibility] != (id)1) {
      goto LABEL_33;
    }
    uint64_t v17 = &__kCFBooleanTrue;
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"opted_in_for_ros_eligibility",  v17));
  -[NSMutableArray addObject:](v4, "addObject:", v18);

LABEL_33:
  if ([v3 supportsRealityDevice] == (id)2)
  {
    uint64_t v19 = &__kCFBooleanFalse;
  }

  else
  {
    if ([v3 supportsRealityDevice] != (id)1) {
      goto LABEL_38;
    }
    uint64_t v19 = &__kCFBooleanTrue;
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"supports_reality_device",  v19));
  -[NSMutableArray addObject:](v4, "addObject:", v20);

LABEL_38:
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v3 searchTerm]);

  if (v21)
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v3 searchTerm]);
    id v23 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:value:comparisonType:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:value:comparisonType:",  @"long_title",  v22,  7LL));
    -[NSMutableArray addObject:](v4, "addObject:", v23);
  }

  uint64_t v24 = objc_claimAutoreleasedReturnValue([v3 storeIDs]);
  if (v24)
  {
    uint64_t v25 = (void *)v24;
    BOOL v26 = (void *)objc_claimAutoreleasedReturnValue([v3 storeIDs]);
    id v27 = [v26 count];

    if (v27)
    {
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v3 storeIDs]);
      id v29 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"store_item_id",  v28));
      -[NSMutableArray addObject:](v4, "addObject:", v29);
    }
  }

  uint64_t v30 = objc_claimAutoreleasedReturnValue([v3 bundleIDs]);
  if (v30)
  {
    uint64_t v31 = (void *)v30;
    id v32 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIDs]);
    id v33 = [v32 count];

    if (v33)
    {
      id v34 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleIDs]);
      id v35 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate containsPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "containsPredicateWithProperty:values:",  @"bundle_id",  v34));
      -[NSMutableArray addObject:](v4, "addObject:", v35);
    }
  }

  if ([v3 isPreorder] == (id)2)
  {
    id v36 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_preorder",  &__kCFBooleanFalse));
    -[NSMutableArray addObject:](v4, "addObject:", v36);

    if ([v3 includeArcade] != (id)1)
    {
      uint64_t v37 = objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:value:comparisonType:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:value:comparisonType:",  @"media_kind",  &off_10040D0F0,  2LL));
LABEL_51:
      id v38 = (void *)v37;
      -[NSMutableArray addObject:](v4, "addObject:", v37);
LABEL_54:
    }
  }

  else
  {
    if ([v3 isPreorder] == (id)1)
    {
      uint64_t v37 = objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_preorder",  &__kCFBooleanTrue));
      goto LABEL_51;
    }

    if ([v3 includeArcade] != (id)1)
    {
      id v38 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:value:comparisonType:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:value:comparisonType:",  @"media_kind",  &off_10040D0F0,  2LL));
      id v39 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:value:comparisonType:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:value:comparisonType:",  @"media_kind",  &off_10040D0F0,  1LL));
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteComparisonPredicate predicateWithProperty:equalToValue:]( &OBJC_CLASS___SQLiteComparisonPredicate,  "predicateWithProperty:equalToValue:",  @"is_preorder",  &__kCFBooleanTrue));
      v48[0] = v39;
      v48[1] = v40;
      id v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v48, 2LL));
      BOOL v42 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v41));

      v47[0] = v38;
      v47[1] = v42;
      id v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v47, 2LL));
      objc_super v44 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v43));

      -[NSMutableArray addObject:](v4, "addObject:", v44);
      goto LABEL_54;
    }
  }

  id v45 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v4));

  return v45;
}

id sub_1002ED354(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v3 accountID]));
    id v6 = sub_1002EDA54((uint64_t)a1, v5);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);

    if ([v7 unsignedLongValue])
    {
      uint64_t v8 = objc_alloc(&OBJC_CLASS___SQLiteQueryDescriptor);
      uint64_t v10 = -[SQLiteQueryDescriptor initWithEntityClass:]( v8,  "initWithEntityClass:",  objc_opt_class(&OBJC_CLASS___PurchaseHistoryAppEntity, v9));
      id v11 = sub_1002ECC6C((uint64_t)&OBJC_CLASS___PurchaseHistoryDatabaseSession, v4);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v11);
      if (v10) {
        objc_setProperty_nonatomic_copy(v10, v12, v13, 56LL);
      }

      uint64_t v14 = objc_claimAutoreleasedReturnValue([v4 sortOptions]);
      id v15 = &off_1003EE000;
      if (v14)
      {
        id v16 = (void *)v14;
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v4 sortOptions]);
        id v18 = [v17 count];

        if (v18)
        {
          self = v10;
          uint64_t v58 = a1;
          uint64_t v59 = v7;
          id v62 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          uint64_t v61 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          __int128 v65 = 0u;
          __int128 v66 = 0u;
          __int128 v67 = 0u;
          __int128 v68 = 0u;
          id obj = (id)objc_claimAutoreleasedReturnValue([v4 sortOptions]);
          id v19 = [obj countByEnumeratingWithState:&v65 objects:v70 count:16];
          if (v19)
          {
            id v20 = v19;
            uint64_t v21 = *(void *)v66;
            uint64_t v22 = kASDPurchaseHistoryQuerySortOptionDate;
            do
            {
              for (uint64_t i = 0LL; i != v20; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v66 != v21) {
                  objc_enumerationMutation(obj);
                }
                uint64_t v24 = *(void **)(*((void *)&v65 + 1) + 8LL * (void)i);
                id v25 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "name", self));
                uint64_t v26 = objc_opt_self(&OBJC_CLASS___PurchaseHistoryDatabaseSession);
                if ([v25 isEqualToString:v22])
                {
                  id v27 = @"date_purchased";
                }

                else
                {
                  uint64_t v28 = ASDLogHandleForCategory(14LL);
                  id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
                  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
                  {
                    id v32 = (void *)objc_opt_class(v26, v30);
                    *(_DWORD *)__int128 buf = 138412546;
                    id v72 = v32;
                    __int16 v73 = 2112;
                    id v74 = v25;
                    id v33 = v32;
                    _os_log_error_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_ERROR,  "[%@]: Unknown sort option: %@",  buf,  0x16u);
                  }

                  id v27 = 0LL;
                }

                if (v27)
                {
                  -[NSMutableArray addObject:](v62, "addObject:", v27);
                  else {
                    uint64_t v31 = @"DESC";
                  }
                  -[NSMutableArray addObject:](v61, "addObject:", v31);
                }
              }

              id v20 = [obj countByEnumeratingWithState:&v65 objects:v70 count:16];
            }

            while (v20);
          }

          uint64_t v10 = self;
          if (self)
          {
            objc_setProperty_nonatomic_copy(self, v34, v62, 48LL);
            objc_setProperty_nonatomic_copy(self, v35, v61, 40LL);
          }

          uint64_t v7 = v59;
          a1 = v58;
          id v15 = &off_1003EE000;
        }
      }

      v69[0] = @"bundle_id";
      v69[1] = @"content_rating_flags";
      id v36 = v15[227];
      v69[2] = @"circular_icon_url";
      v69[3] = v36;
      v69[4] = @"developer_name";
      v69[5] = @"family_shared";
      v69[6] = @"first_party";
      v69[7] = @"has_messages_extension";
      v69[8] = @"hidden";
      v69[9] = @"hidden_from_springboard";
      v69[10] = @"icon_url_template";
      v69[11] = @"is_32_bit_only";
      v69[12] = @"is_ios_binary_macos_available";
      v69[13] = @"currently_opted_in_for_ros_eligibility";
      v69[14] = @"is_ios_binary_macos_compatible";
      v69[15] = @"opted_in_for_ros_eligibility";
      v69[16] = @"is_preorder";
      v69[17] = @"long_title";
      v69[18] = @"media_kind";
      v69[19] = @"oval_icon_url_template";
      v69[20] = @"preflight_package_url";
      v69[21] = @"product_url";
      v69[22] = @"purchaser_dsid";
      v69[23] = @"redownload_params";
      v69[24] = @"required_capabilities";
      v69[25] = @"store_item_id";
      v69[26] = @"supports_ipad";
      v69[27] = @"supports_iphone";
      v69[28] = @"supports_mac";
      v69[29] = @"supports_reality_device";
      v69[30] = @"purchase_token";
      v69[31] = @"locker_item_id";
      v69[32] = @"genre_id";
      v69[33] = @"genre_name";
      v69[34] = @"watch_app_delivered_in_ios_app";
      v69[35] = @"watch_app_runs_independently";
      v69[36] = @"watch_app_watch_only";
      v69[37] = @"supports_layered_image";
      v69[38] = @"has_p3";
      v69[39] = @"title";
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v69,  40LL,  self));
      id v38 = [v37 mutableCopy];

      id v39 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v40 = objc_alloc(&OBJC_CLASS___SQLiteQuery);
      id v41 = (void *)objc_claimAutoreleasedReturnValue([a1 connection]);
      id v42 = -[SQLiteQuery initOnConnection:descriptor:](v40, "initOnConnection:descriptor:", v41, v10);

      v63[0] = _NSConcreteStackBlock;
      v63[1] = 3221225472LL;
      v63[2] = sub_1002EDAE0;
      v63[3] = &unk_1003EE368;
      id v43 = v39;
      uint64_t v64 = v43;
      [v42 enumeratePersistentIDsAndProperties:v38 usingBlock:v63];

      objc_super v44 = 0LL;
    }

    else
    {
      uint64_t v45 = ASDLogHandleForCategory(14LL);
      uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        BOOL v51 = (void *)objc_opt_class(a1, v47);
        id v52 = v51;
        uint64_t v54 = (void *)objc_opt_class(a1, v53);
        id v55 = v54;
        uint64_t v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v4 accountID]));
        *(_DWORD *)__int128 buf = 138412802;
        id v72 = v51;
        __int16 v73 = 2114;
        id v74 = v54;
        __int16 v75 = 2112;
        uint64_t v76 = v56;
        _os_log_error_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_ERROR,  "[%@]: [%{public}@]: No data found for account: %@",  buf,  0x20u);
      }

      uint64_t v48 = ASDErrorWithDescription( ASDErrorDomain,  913LL,  @"No purchase history data found for requested account");
      objc_super v44 = (void *)objc_claimAutoreleasedReturnValue(v48);
      uint64_t v10 = 0LL;
      id v43 = 0LL;
    }

    id v49 = -[NSMutableArray copy](v43, "copy");
  }

  else
  {
    id v49 = 0LL;
  }

  return v49;
}

id sub_1002EDA54(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_10026E8B0((uint64_t)&OBJC_CLASS___PurchaseHistoryDatabaseSession, a2);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = sub_1002EE314(a1, v4);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    if (v6) {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v6 intValue]));
    }
    else {
      uint64_t v7 = 0LL;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

void sub_1002EDAE0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v46 = objc_alloc_init(&OBJC_CLASS___ASDPurchaseHistoryApp);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"bundle_id"]);
  -[ASDPurchaseHistoryApp setBundleID:](v46, "setBundleID:", v5);

  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"content_rating_flags"]);
  -[ASDPurchaseHistoryApp setContentRatingFlags:](v46, "setContentRatingFlags:", [v6 integerValue]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"circular_icon_url"]);
  -[ASDPurchaseHistoryApp setCircularIconURLString:](v46, "setCircularIconURLString:", v7);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"date_purchased"]);
  -[ASDPurchaseHistoryApp setDatePurchased:](v46, "setDatePurchased:", v8);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"developer_name"]);
  -[ASDPurchaseHistoryApp setDeveloperName:](v46, "setDeveloperName:", v9);

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"family_shared"]);
  -[ASDPurchaseHistoryApp setFamilyShared:](v46, "setFamilyShared:", [v10 BOOLValue]);

  id v11 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"first_party"]);
  -[ASDPurchaseHistoryApp setFirstParty:](v46, "setFirstParty:", [v11 BOOLValue]);

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"has_messages_extension"]);
  -[ASDPurchaseHistoryApp setHasMessagesExtension:](v46, "setHasMessagesExtension:", [v12 BOOLValue]);

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"hidden"]);
  -[ASDPurchaseHistoryApp setHidden:](v46, "setHidden:", [v13 BOOLValue]);

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"hidden_from_springboard"]);
  -[ASDPurchaseHistoryApp setHiddenFromSpringboard:](v46, "setHiddenFromSpringboard:", [v14 BOOLValue]);

  id v15 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"icon_url_template"]);
  -[ASDPurchaseHistoryApp setIconURLString:](v46, "setIconURLString:", v15);

  id v16 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"media_kind"]);
  -[ASDPurchaseHistoryApp setIsArcade:]( v46,  "setIsArcade:",  [v16 unsignedIntValue] == 0x40000);

  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"is_32_bit_only"]);
  -[ASDPurchaseHistoryApp setIs32BitOnly:](v46, "setIs32BitOnly:", [v17 BOOLValue]);

  id v18 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"is_ios_binary_macos_available"]);
  -[ASDPurchaseHistoryApp setCurrentlyOptedInForMacOSEligibility:]( v46,  "setCurrentlyOptedInForMacOSEligibility:",  [v18 BOOLValue]);

  id v19 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"currently_opted_in_for_ros_eligibility"]);
  -[ASDPurchaseHistoryApp setCurrentlyOptedInForXROSEligibility:]( v46,  "setCurrentlyOptedInForXROSEligibility:",  [v19 BOOLValue]);

  id v20 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"is_ios_binary_macos_compatible"]);
  -[ASDPurchaseHistoryApp setOptedInForMacOSEligibility:]( v46,  "setOptedInForMacOSEligibility:",  [v20 BOOLValue]);

  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"opted_in_for_ros_eligibility"]);
  -[ASDPurchaseHistoryApp setOptedInForXROSEligibility:]( v46,  "setOptedInForXROSEligibility:",  [v21 BOOLValue]);

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"is_preorder"]);
  -[ASDPurchaseHistoryApp setIsPreorder:](v46, "setIsPreorder:", [v22 BOOLValue]);

  id v23 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"long_title"]);
  -[ASDPurchaseHistoryApp setLongTitle:](v46, "setLongTitle:", v23);

  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"media_kind"]);
  -[ASDPurchaseHistoryApp setMediaKind:](v46, "setMediaKind:", [v24 unsignedIntValue]);

  id v25 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"oval_icon_url_template"]);
  -[ASDPurchaseHistoryApp setOvalIconURLString:](v46, "setOvalIconURLString:", v25);

  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"preflight_package_url"]);
  -[ASDPurchaseHistoryApp setPreflightPackageURL:](v46, "setPreflightPackageURL:", v26);

  id v27 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"product_url"]);
  -[ASDPurchaseHistoryApp setProductURL:](v46, "setProductURL:", v27);

  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"purchaser_dsid"]);
  -[ASDPurchaseHistoryApp setPurchaserDSID:](v46, "setPurchaserDSID:", [v28 longLongValue]);

  id v29 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"redownload_params"]);
  -[ASDPurchaseHistoryApp setRedownloadParams:](v46, "setRedownloadParams:", v29);

  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"required_capabilities"]);
  -[ASDPurchaseHistoryApp setRequiredCapabilities:](v46, "setRequiredCapabilities:", v30);

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"store_item_id"]);
  -[ASDPurchaseHistoryApp setStoreItemID:](v46, "setStoreItemID:", [v31 longLongValue]);

  id v32 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"supports_ipad"]);
  -[ASDPurchaseHistoryApp setSupportsIPad:](v46, "setSupportsIPad:", [v32 BOOLValue]);

  id v33 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"supports_iphone"]);
  -[ASDPurchaseHistoryApp setSupportsIPhone:](v46, "setSupportsIPhone:", [v33 BOOLValue]);

  id v34 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"supports_mac"]);
  -[ASDPurchaseHistoryApp setSupportsMac:](v46, "setSupportsMac:", [v34 BOOLValue]);

  SEL v35 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"supports_reality_device"]);
  -[ASDPurchaseHistoryApp setSupportsRealityDevice:](v46, "setSupportsRealityDevice:", [v35 BOOLValue]);

  id v36 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"purchase_token"]);
  -[ASDPurchaseHistoryApp setPurchaseToken:](v46, "setPurchaseToken:", [v36 unsignedIntValue]);

  uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"locker_item_id"]);
  -[ASDPurchaseHistoryApp setLockerItemID:](v46, "setLockerItemID:", [v37 unsignedLongLongValue]);

  id v38 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"genre_id"]);
  -[ASDPurchaseHistoryApp setGenreID:](v46, "setGenreID:", [v38 longLongValue]);

  id v39 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"genre_name"]);
  -[ASDPurchaseHistoryApp setGenreName:](v46, "setGenreName:", v39);

  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"watch_app_delivered_in_ios_app"]);
  -[ASDPurchaseHistoryApp setWatchAppDeliveredIniOSApp:]( v46,  "setWatchAppDeliveredIniOSApp:",  [v40 BOOLValue]);

  id v41 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"watch_app_runs_independently"]);
  -[ASDPurchaseHistoryApp setWatchAppRunsIndependently:]( v46,  "setWatchAppRunsIndependently:",  [v41 BOOLValue]);

  id v42 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"watch_app_watch_only"]);
  -[ASDPurchaseHistoryApp setWatchOnly:](v46, "setWatchOnly:", [v42 BOOLValue]);

  id v43 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"supports_layered_image"]);
  -[ASDPurchaseHistoryApp setSupportsLayeredImage:](v46, "setSupportsLayeredImage:", [v43 BOOLValue]);

  objc_super v44 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"has_p3"]);
  -[ASDPurchaseHistoryApp setHasP3:](v46, "setHasP3:", [v44 BOOLValue]);

  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:@"title"]);
  -[ASDPurchaseHistoryApp setTitle:](v46, "setTitle:", v45);

  [*(id *)(a1 + 32) addObject:v46];
}

id sub_1002EE218(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_1002EE2B0((uint64_t)&OBJC_CLASS___PurchaseHistoryDatabaseSession, a2);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = sub_1002EE314(a1, v4);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    if ((objc_opt_respondsToSelector(v6, "doubleValue") & 1) != 0)
    {
      [v6 doubleValue];
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSince1970:"));
    }

    else
    {
      uint64_t v7 = 0LL;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

id sub_1002EE2B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@",  @"LastForceRefreshedTimestampPropertyKey",  v3));

  return v4;
}

id sub_1002EE314(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = 0LL;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x3032000000LL;
  uint64_t v14 = sub_1002EE4A4;
  id v15 = sub_1002EE4B4;
  id v16 = 0LL;
  uint64_t v4 = *(void *)(a1 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  void v8[2] = sub_1002EE4BC;
  v8[3] = &unk_1003EBBD8;
  id v5 = v3;
  id v9 = v5;
  uint64_t v10 = &v11;
  sub_1001D64E8(v4, @"SELECT value FROM purchase_history_db_properties WHERE key = ?", v8);
  id v6 = (id)v12[5];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1002EE3F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

id sub_1002EE40C(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = sub_10026E6C8((uint64_t)&OBJC_CLASS___PurchaseHistoryDatabaseSession, a2);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    id v5 = sub_1002EE314(a1, v4);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

    if ((objc_opt_respondsToSelector(v6, "doubleValue") & 1) != 0)
    {
      [v6 doubleValue];
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate dateWithTimeIntervalSince1970:](&OBJC_CLASS___NSDate, "dateWithTimeIntervalSince1970:"));
    }

    else
    {
      uint64_t v7 = 0LL;
    }
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  return v7;
}

uint64_t sub_1002EE4A4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002EE4B4(uint64_t a1)
{
}

void sub_1002EE4BC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = a2;
  [v4 bindString:v3 atPosition:1];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  _DWORD v5[2] = sub_1002EE53C;
  v5[3] = &unk_1003EB1E0;
  void v5[4] = *(void *)(a1 + 40);
  sub_1001BF214((uint64_t)v4, v5);
}

void sub_1002EE53C(uint64_t a1, void *a2)
{
  id v3 = sub_1002E7544(a2, 0);
  uint64_t v4 = objc_claimAutoreleasedReturnValue(v3);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

void *sub_1002EE59C(void *a1, void *a2)
{
  id v4 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)&OBJC_CLASS___ODRBundleTagManifest;
    id v5 = objc_msgSendSuper2(&v9, "init");
    a1 = v5;
    if (v5)
    {
      objc_storeStrong((id *)v5 + 1, a2);
      uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      uint64_t v7 = (void *)a1[2];
      a1[2] = v6;
    }
  }

  return a1;
}

void *sub_1002EE62C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v6 = v5;
  if (a1)
  {
    if (!v5)
    {
      id v17 = 0LL;
      goto LABEL_30;
    }

    id v7 = v5;
    uint64_t v8 = objc_opt_self(&OBJC_CLASS___ODRBundleTagManifest);
    id v32 = 0LL;
    objc_super v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSData dataWithContentsOfURL:options:error:]( &OBJC_CLASS___NSData,  "dataWithContentsOfURL:options:error:",  v7,  0LL,  &v32));

    id v10 = v32;
    uint64_t v11 = v10;
    if (!v9)
    {
      CFTypeRef v35 = NSUnderlyingErrorKey;
      cf[0] = v10;
      id v18 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  cf,  &v35,  1LL));
      id v17 = 0LL;
      if (a3) {
        *a3 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  _NSBundleResourceRequestErrorDomain,  101LL,  v18));
      }
      id v20 = v11;
LABEL_26:

      if (v17)
      {
        uint64_t v26 = sub_1002EE59C(a1, v17);
        if (!v26)
        {
LABEL_32:
          a1 = v26;

          goto LABEL_33;
        }

        id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v7 path]);
        a1 = (void *)objc_claimAutoreleasedReturnValue([v27 attributesOfItemAtPath:v28 error:0]);

        if (a1)
        {
          uint64_t v29 = objc_claimAutoreleasedReturnValue([a1 fileModificationDate]);
          uint64_t v30 = (void *)v26[2];
          v26[2] = v29;
        }

id *sub_1002EEAF8(id *a1)
{
  if (a1) {
    a1 = (id *)objc_claimAutoreleasedReturnValue([a1[1] allKeys]);
  }
  return a1;
}

void sub_1002EEB18(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([a3 objectForKeyedSubscript:@"NSAssetPacks"]);
  if (!v5) {
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray array](&OBJC_CLASS___NSArray, "array"));
  }
  [*(id *)(a1 + 32) setObject:v5 forKey:v6];
}

id sub_1002EEBC0(uint64_t a1)
{
  if (qword_100462678 != -1) {
    dispatch_once(&qword_100462678, &stru_1003F2428);
  }
  return (id)qword_100462670;
}

void sub_1002EEC04(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___AppInstallsDatabaseStore);
  id v2 = sub_100185934((uint64_t)&OBJC_CLASS___Environment);
  id v7 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue(v2);
  id v3 = sub_1001859DC(v7);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = -[SQLiteDatabaseStore initWithDatabase:](v1, "initWithDatabase:", v4);
  id v6 = (void *)qword_100462670;
  qword_100462670 = (uint64_t)v5;
}

uint64_t sub_1002EED7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_10031705C((uint64_t)&OBJC_CLASS___AppInstallQueue);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v3) {
    objc_storeWeak(v3 + 2, v5);
  }

  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  if ((_DWORD)v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v3) {
      id Property = objc_getProperty(v3, v6, 24LL, 1);
    }
    else {
      id Property = 0LL;
    }
    id v10 = Property;
    sub_1002EEEA0(v8, v10);

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1002EF5B0;
    v13[3] = &unk_1003E9DC0;
    void v13[4] = *(void *)(a1 + 32);
    CFTypeID v14 = v3;
    sub_1001D6448((uint64_t)v11, v13);
  }

  return v7;
}

void sub_1002EEEA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (v3) {
      id v5 = [v3[4] copy];
    }
    else {
      id v5 = 0LL;
    }
    __int16 v73 = v5;
    if ([v5 count])
    {
      __int128 v87 = 0u;
      __int128 v88 = 0u;
      __int128 v85 = 0u;
      __int128 v86 = 0u;
      id v6 = v73;
      id v7 = [v6 countByEnumeratingWithState:&v85 objects:v91 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v86;
        do
        {
          for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v86 != v9) {
              objc_enumerationMutation(v6);
            }
            uint64_t v11 = *(void **)(*((void *)&v85 + 1) + 8LL * (void)i);
            id v12 = sub_1002B0944((uint64_t)&OBJC_CLASS___ProgressCache);
            char v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
            sub_1002B0F20((uint64_t)v13, v11);
          }

          id v8 = [v6 countByEnumeratingWithState:&v85 objects:v91 count:16];
        }

        while (v8);
      }
    }

    CFTypeID v14 = &OBJC_METACLASS___TestFlightUploadSubTask;
    if (v4)
    {
      if (*((_BYTE *)v4 + 137))
      {
        id v15 = objc_alloc_init(&OBJC_CLASS____TtC9appstored19AppDownloadDoneTask);
        id v16 = sub_10020F1C0((uint64_t)&OBJC_CLASS___TaskQueue);
        uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);
        id v18 = (void *)v17;
        if (v17) {
          [*(id *)(v17 + 8) addOperation:v15];
        }
      }

      if (v4[16])
      {
        id v19 = sub_10023B9CC((uint64_t)&OBJC_CLASS___AppInstallScheduler);
        id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
        sub_10023C018(v20, v4[16]);
      }

      int v21 = *((unsigned __int8 *)v4 + 138);
      int v22 = *((unsigned __int8 *)v4 + 139);
      id v23 = [v4[1] copy];

      if (v23)
      {
        char v75 = v22;
        char v76 = v21;
        id v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
        __int128 v81 = 0u;
        __int128 v82 = 0u;
        __int128 v83 = 0u;
        __int128 v84 = 0u;
        id v24 = [v4[1] copy];
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v24 keyEnumerator]);

        id v26 = [v25 countByEnumeratingWithState:&v81 objects:v90 count:16];
        if (v26)
        {
          id v27 = v26;
          uint64_t v28 = *(void *)v82;
          do
          {
            for (j = 0LL; j != v27; j = (char *)j + 1)
            {
              if (*(void *)v82 != v28) {
                objc_enumerationMutation(v25);
              }
              uint64_t v30 = *(void **)(*((void *)&v81 + 1) + 8LL * (void)j);
              id v31 = [v4[1] copy];
              id v32 = (void *)objc_claimAutoreleasedReturnValue([v31 objectForKeyedSubscript:v30]);

              id v33 = [v4[2] copy];
              id v34 = (void *)objc_claimAutoreleasedReturnValue([v33 objectForKeyedSubscript:v30]);

              if (v32)
              {
                id v35 = sub_100237D18((uint64_t)&OBJC_CLASS___AppUpdatesDatabaseStore);
                id v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
                BOOL v37 = sub_100237E34( (BOOL)v36,  v30,  (uint64_t)[v32 integerValue],  (uint64_t)objc_msgSend(v34, "integerValue"));

                if (v37)
                {
                  [v74 addObject:v30];
                  char v75 = 1;
                  char v76 = 1;
                }
              }
            }

            id v27 = [v25 countByEnumeratingWithState:&v81 objects:v90 count:16];
          }

          while (v27);
        }

        if ([v74 count])
        {
          id v38 = sub_1002252F4((uint64_t)&OBJC_CLASS___ASDNotification, v74);
          id v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          id v40 = sub_1002E78A4((uint64_t)&OBJC_CLASS___XPCNotificationCenter);
          id v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
          sub_1002E79EC((uint64_t)v41, v39);
        }

        int v22 = v75 & 1;
        int v21 = v76 & 1;
        CFTypeID v14 = &OBJC_METACLASS___TestFlightUploadSubTask;
      }

      BOOL v42 = v22 != 0;
      BOOL v43 = v21 != 0;
      if (*((_BYTE *)v4 + 140))
      {
        uint64_t v44 = ASDLogHandleForCategory(2LL);
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Auto updates completed",  (uint8_t *)&buf,  2u);
        }

        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([&v14[83] sharedManager]);
        [v46 postProcessBackgroundUpdateMetrics];
      }

      if (*((_BYTE *)v4 + 136))
      {
        uint64_t v47 = ASDLogHandleForCategory(2LL);
        uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Restore completed", (uint8_t *)&buf, 2u);
        }

        id v49 = (void *)objc_claimAutoreleasedReturnValue([&v14[83] sharedManager]);
        [v49 performPostRestoreUpdatesCheck];
      }

      id v50 = [v4[14] copy];

      if (v50)
      {
        id v51 = [v4[14] copy];
        id v52 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        id v53 = sub_1002EEBC0((uint64_t)&OBJC_CLASS___AppInstallsDatabaseStore);
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(v53);
        *(void *)&__int128 buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 3221225472LL;
        id v93 = sub_1002EFC6C;
        uint64_t v94 = &unk_1003ECFC8;
        id v55 = v51;
        id v95 = v55;
        id v96 = v52;
        uint64_t v56 = v52;
        [v54 readUsingSession:&buf];

        id v57 = -[NSMutableArray copy](v56, "copy");
        if ([v57 count])
        {
          id v58 = sub_10020FAD4((uint64_t)&OBJC_CLASS___RestoreManager);
          uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
          sub_100211310((uint64_t)v59, v57);
        }
      }

      id v60 = [v4[9] copy];
    }

    else
    {
      BOOL v43 = 0;
      BOOL v42 = 0;
      id v60 = 0LL;
    }

    if ([v60 count])
    {
      __int128 v79 = 0u;
      __int128 v80 = 0u;
      __int128 v77 = 0u;
      __int128 v78 = 0u;
      id v61 = v60;
      id v62 = [v61 countByEnumeratingWithState:&v77 objects:v89 count:16];
      if (v62)
      {
        id v63 = v62;
        uint64_t v64 = *(void *)v78;
        do
        {
          for (k = 0LL; k != v63; k = (char *)k + 1)
          {
            if (*(void *)v78 != v64) {
              objc_enumerationMutation(v61);
            }
            __int128 v66 = *(void **)(*((void *)&v77 + 1) + 8LL * (void)k);
            uint64_t v67 = ASDLogHandleForCategory(2LL);
            __int128 v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
            if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(buf) = 138543362;
              *(void *)((char *)&buf + 4) = v66;
              _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Finishing progress for bundleID: %{public}@",  (uint8_t *)&buf,  0xCu);
            }

            id v69 = sub_1002B0944((uint64_t)&OBJC_CLASS___ProgressCache);
            uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue(v69);
            sub_1002B1BB0((uint64_t)v70, v66, @"Install complete");
          }

          id v63 = [v61 countByEnumeratingWithState:&v77 objects:v89 count:16];
        }

        while (v63);
      }

      CFTypeID v14 = &OBJC_METACLASS___TestFlightUploadSubTask;
    }

    if (v43)
    {
      id v71 = (void *)objc_claimAutoreleasedReturnValue([&v14[83] sharedManager]);
      [v71 noteUpdatesStateChanged:@"Updates complete" logKey:0];
    }

    if (v42)
    {
      id v72 = (void *)objc_claimAutoreleasedReturnValue([&v14[83] sharedManager]);
      [v72 reloadApplicationBadgeWithReason:@"Updates complete"];
    }
  }
}

void sub_1002EF5B0(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 24LL, 1);
  }
  id v4 = Property;
  sub_1002EF600(v3, v4);
}

void sub_1002EF600(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = v3;
  if (a1)
  {
    sub_1001EBC60((uint64_t)v3, &stru_1003F24E0);
    sub_1001EBCE8((uint64_t)v4, &stru_1003F2520);
    sub_1001EBD70((uint64_t)v4, &stru_1003F2540);
    if (v4)
    {
      id v5 = [v4[10] copy];

      if (v5)
      {
        __int128 v38 = 0u;
        __int128 v39 = 0u;
        __int128 v36 = 0u;
        __int128 v37 = 0u;
        id v6 = [v4[10] copy];
        id v7 = [v6 countByEnumeratingWithState:&v36 objects:v45 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v37;
          do
          {
            id v10 = 0LL;
            do
            {
              if (*(void *)v37 != v9) {
                objc_enumerationMutation(v6);
              }
              +[MetricsBridge enqueueAppInstallationEventWithEvent:]( &OBJC_CLASS____TtC9appstored13MetricsBridge,  "enqueueAppInstallationEventWithEvent:",  *(void *)(*((void *)&v36 + 1) + 8LL * (void)v10));
              id v10 = (char *)v10 + 1;
            }

            while (v8 != v10);
            id v8 = [v6 countByEnumeratingWithState:&v36 objects:v45 count:16];
          }

          while (v8);
        }
      }

      id v11 = [v4[11] copy];

      if (v11)
      {
        id v12 = sub_10022D6AC((uint64_t)&OBJC_CLASS___AppLedger);
        char v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
        id v14 = [v4[11] copy];
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 allObjects]);
        sub_10022DAF8((uint64_t)v13, v15);
      }

      id v16 = [v4[12] copy];

      if (v16)
      {
        id v17 = [v4[12] copy];
        id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
        [v18 postNotificationName:@"LegacyNotifications" object:v17];
      }

      id v19 = [v4[13] copy];

      if (v19)
      {
        __int128 v34 = 0u;
        __int128 v35 = 0u;
        __int128 v32 = 0u;
        __int128 v33 = 0u;
        id v20 = objc_msgSend(v4[13], "copy", 0);
        id v21 = [v20 countByEnumeratingWithState:&v32 objects:v44 count:16];
        if (v21)
        {
          id v22 = v21;
          uint64_t v23 = *(void *)v33;
          do
          {
            id v24 = 0LL;
            do
            {
              if (*(void *)v33 != v23) {
                objc_enumerationMutation(v20);
              }
              sub_10030F080( (uint64_t)&OBJC_CLASS___Analytics,  *(void **)(*((void *)&v32 + 1) + 8LL * (void)v24),  16LL);
              id v24 = (char *)v24 + 1;
            }

            while (v22 != v24);
            id v22 = [v20 countByEnumeratingWithState:&v32 objects:v44 count:16];
          }

          while (v22);
        }
      }

      id v25 = [v4[3] copy];
      if (v25)
      {
        uint64_t v26 = ASDLogHandleForCategory(2LL);
        id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          id v31 = [v25 count];
          *(_DWORD *)__int128 buf = 134218242;
          id v41 = v31;
          __int16 v42 = 2112;
          id v43 = v25;
          _os_log_debug_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEBUG,  "Starting %lu async task(s): %@",  buf,  0x16u);
        }

        id v28 = sub_10020F1C0((uint64_t)&OBJC_CLASS___TaskQueue);
        uint64_t v29 = objc_claimAutoreleasedReturnValue(v28);
        uint64_t v30 = (void *)v29;
        if (v29) {
          [*(id *)(v29 + 8) addOperations:v25 waitUntilFinished:0];
        }
      }
    }

    else
    {
      id v25 = 0LL;
    }
  }
}

void sub_1002EF9EC(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = sub_10031705C((uint64_t)&OBJC_CLASS___AppInstallQueue);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v5) {
    objc_storeWeak(v5 + 2, v4);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1002EFA60(dispatch_queue_t **a1, void *a2)
{
  id v5 = a2;
  if (a1)
  {
    uint64_t v4 = objc_opt_class(&OBJC_CLASS___AppSchedulerDatabaseTransaction, v3);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_1002EFAF8;
    v6[3] = &unk_1003F24A0;
    void v6[4] = a1;
    id v7 = v5;
    sub_1001AF554(a1[1], a1, v4, v6);
  }
}

uint64_t sub_1002EFAF8(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = sub_10031705C((uint64_t)&OBJC_CLASS___AppInstallQueue);
  id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (v3) {
    objc_storeWeak(v3 + 2, v5);
  }

  uint64_t v7 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
  if ((_DWORD)v7)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (v3) {
      id Property = objc_getProperty(v3, v6, 24LL, 1);
    }
    else {
      id Property = 0LL;
    }
    id v10 = Property;
    sub_1002EEEA0(v8, v10);

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    void v13[2] = sub_1002EFC1C;
    v13[3] = &unk_1003E9DC0;
    void v13[4] = *(void *)(a1 + 32);
    id v14 = v3;
    sub_1001D6448((uint64_t)v11, v13);
  }

  return v7;
}

void sub_1002EFC1C(uint64_t a1, const char *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id Property = *(id *)(a1 + 40);
  if (Property) {
    id Property = objc_getProperty(Property, a2, 24LL, 1);
  }
  id v4 = Property;
  sub_1002EF600(v3, v4);
}

void sub_1002EFC6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v18;
    do
    {
      uint64_t v7 = 0LL;
      do
      {
        if (*(void *)v18 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)v7);
        uint64_t v9 = objc_alloc(&OBJC_CLASS___AppInstallEntity);
        id v10 = [v8 longLongValue];
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v3 connection]);
        id v12 = -[SQLiteEntity initWithPersistentID:onConnection:](v9, "initWithPersistentID:onConnection:", v10, v11);

        char v13 = objc_alloc(&OBJC_CLASS___RestoreAppInstall);
        id v14 = (void *)objc_claimAutoreleasedReturnValue(+[RestoreAppInstall defaultProperties](&OBJC_CLASS___RestoreAppInstall, "defaultProperties"));
        id v15 = -[SQLiteMemoryEntity initWithDatabaseEntity:properties:]( v13,  "initWithDatabaseEntity:properties:",  v12,  v14);

        if (v15) {
          [*(id *)(a1 + 40) addObject:v15];
        }

        uint64_t v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v5);
  }
}

void sub_1002EFE08(id a1, lib_IXAppInstallCoordinatorTag *a2, NSError *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v16 = 0LL;
  id v6 = sub_1001E4B34((uint64_t)&OBJC_CLASS___IXAppInstallCoordinator, v4, &v16);
  uint64_t v7 = (lib_IXAppInstallCoordinatorTag *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v8 = (NSError *)v16;
  uint64_t v9 = ASDLogHandleForCategory(2LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (!v7)
  {
    if (v11)
    {
      *(_DWORD *)__int128 buf = 138543618;
      __int128 v18 = v4;
      __int16 v19 = 2114;
      __int128 v20 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failing coordinator: %{public}@ failed, couldn't be found error: %{public}@",  buf,  0x16u);
    }

    goto LABEL_10;
  }

  if (v11)
  {
    *(_DWORD *)__int128 buf = 138543618;
    __int128 v18 = v7;
    __int16 v19 = 2114;
    __int128 v20 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failing coordinator: %{public}@ with reason: %{public}@",  buf,  0x16u);
  }

  id v15 = v8;
  char v12 = sub_1001E59A0(v7, v5, &v15);
  id v10 = v15;

  if ((v12 & 1) == 0)
  {
    uint64_t v13 = ASDLogHandleForCategory(2LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543618;
      __int128 v18 = v7;
      __int16 v19 = 2114;
      __int128 v20 = v5;
      _os_log_error_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_ERROR,  "Failing coordinator: %{public}@ failed, error occurred: %{public}@",  buf,  0x16u);
    }

    uint64_t v8 = 0LL;
LABEL_10:

    id v10 = (os_log_s *)v8;
  }
}

void sub_1002EFFFC(id a1, lib_IXAppInstallCoordinatorTag *a2)
{
  id v2 = a2;
  id v13 = 0LL;
  id v3 = sub_1001E4B34((uint64_t)&OBJC_CLASS___IXAppInstallCoordinator, v2, &v13);
  id v4 = (lib_IXAppInstallCoordinatorTag *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = (os_log_s *)v13;
  uint64_t v6 = ASDLogHandleForCategory(2LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (!v4)
  {
    if (v8)
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v15 = v2;
      __int16 v16 = 2114;
      __int128 v17 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Pausing coordinator: %{public}@ failed, couldn't be found error: %{public}@",  buf,  0x16u);
    }

    goto LABEL_10;
  }

  if (v8)
  {
    *(_DWORD *)__int128 buf = 138543362;
    id v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Pausing coordinator: %{public}@", buf, 0xCu);
  }

  char v12 = v5;
  unsigned __int8 v9 = -[lib_IXAppInstallCoordinatorTag pauseWithError:](v4, "pauseWithError:", &v12);
  uint64_t v7 = v12;

  if ((v9 & 1) == 0)
  {
    uint64_t v10 = ASDLogHandleForCategory(2LL);
    BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v15 = v4;
      __int16 v16 = 2114;
      __int128 v17 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Pausing coordinator: %{public}@ failed, error occurred: %{public}@",  buf,  0x16u);
    }

    id v5 = 0LL;
LABEL_10:

    uint64_t v7 = v5;
  }
}

void sub_1002F01D0(id a1, lib_IXAppInstallCoordinatorTag *a2)
{
  id v2 = a2;
  id v13 = 0LL;
  id v3 = sub_1001E4B34((uint64_t)&OBJC_CLASS___IXAppInstallCoordinator, v2, &v13);
  id v4 = (lib_IXAppInstallCoordinatorTag *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = (os_log_s *)v13;
  uint64_t v6 = ASDLogHandleForCategory(2LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (!v4)
  {
    if (v8)
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v15 = v2;
      __int16 v16 = 2114;
      __int128 v17 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Resuming coordinator: %{public}@ failed, couldn't be found error: %{public}@",  buf,  0x16u);
    }

    goto LABEL_10;
  }

  if (v8)
  {
    *(_DWORD *)__int128 buf = 138543362;
    id v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Resuming coordinator: %{public}@", buf, 0xCu);
  }

  char v12 = v5;
  unsigned __int8 v9 = -[lib_IXAppInstallCoordinatorTag resumeWithError:](v4, "resumeWithError:", &v12);
  uint64_t v7 = v12;

  if ((v9 & 1) == 0)
  {
    uint64_t v10 = ASDLogHandleForCategory(2LL);
    BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__int128 buf = 138543618;
      id v15 = v4;
      __int16 v16 = 2114;
      __int128 v17 = v7;
      _os_log_error_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_ERROR,  "Resuming coordinator: %{public}@ failed, error occurred: %{public}@",  buf,  0x16u);
    }

    id v5 = 0LL;
LABEL_10:

    uint64_t v7 = v5;
  }
}

void sub_1002F03A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = *(void **)(a1 + 8);
    id v7 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v6 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v5;

      id v4 = *(void **)(a1 + 8);
    }

    [v4 addObject:v7];
    id v3 = v7;
  }
}

AMSPurchase *sub_1002F0AC0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  id v4 = objc_alloc(&OBJC_CLASS___AMSPurchase);
  id v5 = [v3 purchaseType];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 buyParams]);
  id v7 = -[AMSPurchase initWithPurchaseType:buyParams:](v4, "initWithPurchaseType:buyParams:", v5, v6);

  BOOL v8 = (void *)objc_claimAutoreleasedReturnValue([v3 account]);
  -[AMSPurchase setAccount:](v7, "setAccount:", v8);

  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue([v3 additionalHeaders]);
  id v10 = [v9 copy];
  -[AMSPurchase setAdditionalHeaders:](v7, "setAdditionalHeaders:", v10);

  BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([v3 originalPurchaserDSID]);
  -[AMSPurchase setOwnerAccountId:](v7, "setOwnerAccountId:", v11);

  uint64_t v12 = [v3 isDiscretionary] ^ 1;
  -[AMSPurchase setUserInitiated:](v7, "setUserInitiated:", v12);
  -[AMSPurchase setSendBlindedData:](v7, "setSendBlindedData:", v12);
  -[AMSPurchase setUseJSONContentType:](v7, "setUseJSONContentType:", [v3 useJSONContentType]);
  -[AMSPurchase setIgnoreRequirePasswordRestriction:]( v7,  "setIgnoreRequirePasswordRestriction:",  [v3 ignoreRequirePasswordRestriction]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v3 presentingSceneIdentifier]);
  -[AMSPurchase setPresentingSceneIdentifier:](v7, "setPresentingSceneIdentifier:", v13);

  id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 metricsOverlay]);
  if (v14)
  {
  }

  else
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v3 qosMetricsFields]);

    if (!v15) {
      goto LABEL_9;
    }
  }

  __int16 v16 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v3 qosMetricsFields]);

  if (v17)
  {
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue( +[AppInstallationEvent metricsOverlayWithPurchaseInfo:]( &OBJC_CLASS____TtC9appstored20AppInstallationEvent,  "metricsOverlayWithPurchaseInfo:",  v3));
    -[NSMutableDictionary addEntriesFromDictionary:](v16, "addEntriesFromDictionary:", v18);
  }

  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v3 metricsOverlay]);

  if (v19)
  {
    __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v3 metricsOverlay]);
    -[NSMutableDictionary addEntriesFromDictionary:](v16, "addEntriesFromDictionary:", v20);
  }

  -[AMSPurchase setMetricsOverlay:](v7, "setMetricsOverlay:", v16);

LABEL_9:
  id v21 = (void *)objc_claimAutoreleasedReturnValue([v3 clientInfo]);
  id v22 = (void *)objc_claimAutoreleasedReturnValue([v3 presentingSceneBundleIdentifier]);

  if (v22)
  {
    if (!v21)
    {
      id v23 = sub_1001F4ADC((uint64_t)&OBJC_CLASS___AMSProcessInfo);
      id v21 = (void *)objc_claimAutoreleasedReturnValue(v23);
    }

    id v24 = (void *)objc_claimAutoreleasedReturnValue([v3 presentingSceneBundleIdentifier]);
    [v21 setProxyAppBundleID:v24];
  }

  -[AMSPurchase setClientInfo:](v7, "setClientInfo:", v21);

  id v25 = objc_alloc(&OBJC_CLASS____TtC9appstored6LogKey);
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v3 logCode]);
  id v27 = (void *)objc_claimAutoreleasedReturnValue([v3 externalID]);
  id v28 = (void *)objc_claimAutoreleasedReturnValue([v3 bundleID]);
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v3 itemID]);
  uint64_t v30 = -[LogKey initWithBatchLogKey:logCode:externalID:bundleID:itemID:]( v25,  "initWithBatchLogKey:logCode:externalID:bundleID:itemID:",  0LL,  v26,  v27,  v28,  v29);

  id v31 = (void *)objc_claimAutoreleasedReturnValue(-[LogKey description](v30, "description"));
  -[AMSPurchase setLogUUID:](v7, "setLogUUID:", v31);

  return v7;
}

void sub_1002F0E04(uint64_t a1)
{
  if (qword_100462680 != -1) {
    dispatch_once(&qword_100462680, &stru_1003F2560);
  }
}

void sub_1002F0E40(id a1)
{
  uint64_t v1 = objc_opt_new(&OBJC_CLASS___StoreKitServiceListener);
  id v2 = (void *)qword_100462690;
  qword_100462690 = (uint64_t)v1;

  uint64_t v3 = qword_100462690;
  if (qword_100462690)
  {
    id v4 = @"com.apple.storekitservice";
    id v5 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  @"com.apple.storekitservice");

    -[NSXPCListener setDelegate:](v5, "setDelegate:", v3);
  }

  else
  {
    id v5 = 0LL;
  }

  uint64_t v6 = (void *)qword_100462688;
  qword_100462688 = (uint64_t)v5;

  uint64_t v7 = ASDLogHandleForCategory(36LL);
  BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int8 v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Starting StoreKit Service", v9, 2u);
  }

  [(id)qword_100462688 resume];
}

void sub_1002F1218( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
}

uint64_t sub_1002F1238(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1002F1248(uint64_t a1)
{
}

id sub_1002F1250(void *a1)
{
  uint64_t v2 = ASDLogHandleForCategory(36LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_opt_class(a1[4], v4);
    uint64_t v6 = a1[5];
    int v9 = 138543618;
    id v10 = v5;
    __int16 v11 = 2114;
    uint64_t v12 = v6;
    id v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: Connection to %{public}@ invalidated",  (uint8_t *)&v9,  0x16u);
  }

  return [*(id *)(*(void *)(a1[6] + 8) + 40) setExportedObject:0];
}

void sub_1002F1334(uint64_t a1)
{
  uint64_t v2 = ASDLogHandleForCategory(36LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_opt_class(*(void *)(a1 + 32), v4);
    uint64_t v6 = *(void *)(a1 + 40);
    int v8 = 138543618;
    int v9 = v5;
    __int16 v10 = 2114;
    uint64_t v11 = v6;
    id v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "%{public}@: Connection to %{public}@ interrupted",  (uint8_t *)&v8,  0x16u);
  }
}

void sub_1002F1584(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = a2;
    id v7 = sub_1002283B8((id *)objc_alloc(&OBJC_CLASS___SQLiteTransporter), v6);

    if (sub_10022842C((uint64_t)v7))
    {
      int v8 = objc_alloc(&OBJC_CLASS___AppUpdatesDatabaseStore);
      id v9 = sub_100185934((uint64_t)&OBJC_CLASS___Environment);
      __int16 v10 = (os_unfair_lock_s *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v11 = sub_1001859DC(v10);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      id v13 = -[SQLiteDatabaseStore initWithDatabase:](v8, "initWithDatabase:", v12);

      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      void v15[2] = sub_1002F16C4;
      v15[3] = &unk_1003F25B0;
      id v16 = v5;
      __int128 v17 = &off_10040DFC0;
      __int128 v18 = v13;
      id v14 = v13;
      sub_100228950((uint64_t)v7, v15);
    }

    sub_1002287AC((uint64_t)v7);
  }
}