id start(uint64_t a1, uint64_t a2)
{
  dispatch_queue_global_t global_queue;
  dispatch_queue_s *v5;
  dispatch_source_s *v6;
  void *v7;
  VCPMediaAnalysisDaemon *v8;
  id v9;
  xpc_transactions_enable();
  signal(15, (void (__cdecl *)(int))1);
  global_queue = dispatch_get_global_queue(21LL, 0LL);
  v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0LL, v5);
  dispatch_source_set_event_handler(v6, &stru_1001B97D8);
  dispatch_activate(v6);
  _set_user_dir_suffix("com.apple.mediaanalysisd");
  v7 = objc_autoreleasePoolPush();
  v8 = objc_alloc_init(&OBJC_CLASS___VCPMediaAnalysisDaemon);
  v9 = (id)-[VCPMediaAnalysisDaemon run:argv:](v8, "run:argv:", a1, a2);

  objc_autoreleasePoolPop(v7);
  return v9;
}

void sub_1000023D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000254C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3) {
    id v4 = [a3 code];
  }
  else {
    id v4 = 0LL;
  }
  return (*(uint64_t (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

void sub_100002718( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

id sub_100002730(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  if ((int)MediaAnalysisLogLevel(v2, v3) >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v5, v6))
    {
      v8[0] = 67109120;
      v8[1] = [v2 count];
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[Scene] Evaluating %d recently captured assets",  (uint8_t *)v8,  8u);
    }
  }

  return v2;
}

uint64_t sub_10000280C(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 8LL) + 16LL))(a2 * 0.5);
}

uint64_t sub_10000282C(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  return result;
}

void sub_1000029CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
}

id sub_1000029E4(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  if ((int)MediaAnalysisLogLevel(v2, v3) >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v5, v6))
    {
      v8[0] = 67109120;
      v8[1] = [v2 count];
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[Full] Evaluating %d recently captured assets",  (uint8_t *)v8,  8u);
    }
  }

  return v2;
}

uint64_t sub_100002AC0(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 8LL) + 16LL))(a2 * 0.5 + 0.5);
}

uint64_t sub_100002AE4(uint64_t result, int a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8LL) + 24LL) = a2;
  return result;
}
}

PHFetchResult *__cdecl sub_100002E1C(id a1, PHFetchOptions *a2)
{
  v2 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"creationDate",  0LL));
  v8 = v3;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v8, 1LL));
  -[PHFetchOptions setSortDescriptors:](v2, "setSortDescriptors:", v4);

  v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  -86400.0));
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset fetchAssetsFromCameraSinceDate:options:]( &OBJC_CLASS___PHAsset,  "fetchAssetsFromCameraSinceDate:options:",  v5,  v2));

  return (PHFetchResult *)v6;
}

void sub_100002F94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_39:
      }
        }
      }

                goto LABEL_40;
              }

              v73 = (void *)objc_claimAutoreleasedReturnValue([v32 assetIdentifier]);
              v74 = v73 == 0LL;

              if (v74)
              {
                v86 = MediaAnalysisLogLevel(v75, v76);
                v88 = VCPLogInstance(v86, v87);
                v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
                if (os_log_type_enabled(v71, v30))
                {
                  *(_DWORD *)buf = 138412546;
                  v157 = v34;
                  v158 = 2112;
                  v159 = (os_log_s *)v32;
                  _os_log_impl( (void *)&_mh_execute_header,  v71,  v30,  "%@ Failed to prepare asset for request %@; skip",
                    buf,
                    0x16u);
                }
              }

              else
              {
                v77 = MediaAnalysisLogLevel(v75, v76);
                if ((int)v77 >= 7)
                {
                  v79 = VCPLogInstance(v77, v78);
                  v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
                  if (os_log_type_enabled(v80, type))
                  {
                    v81 = (os_log_s *)objc_claimAutoreleasedReturnValue([v32 assetIdentifier]);
                    *(_DWORD *)buf = 138412546;
                    v157 = v34;
                    v158 = 2112;
                    v159 = v81;
                    _os_log_impl((void *)&_mh_execute_header, v80, type, "%@ Loading Photos asset %@", buf, 0x16u);
                  }
                }

                v63 = (void *)objc_claimAutoreleasedReturnValue([v32 assetIdentifier]);
                [v135 addObject:v63];
                v133 = 0;
LABEL_37:

                objc_msgSend( v32,  "setAttempts:",  (__int16)((unsigned __int16)objc_msgSend(v32, "attempts") + 1));
                v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
                [v32 setPreviousAttemptDate:v71];
              }
            }

            else
            {
              v68 = MediaAnalysisLogLevel(v43, v44);
              v70 = VCPLogInstance(v68, v69);
              v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
              if (os_log_type_enabled(v71, v30))
              {
                v72 = (os_log_s *)objc_claimAutoreleasedReturnValue([v32 requestData]);
                *(_DWORD *)buf = 138412546;
                v157 = v34;
                v158 = 2112;
                v159 = v72;
                _os_log_impl( (void *)&_mh_execute_header,  v71,  v30,  "%@ Failed to unarchive request %@; skip",
                  buf,
                  0x16u);
              }
            }

  objc_autoreleasePoolPop(context);
  return v23;
}

    v34 = 0LL;
LABEL_54:

    goto LABEL_55;
  }

  v69 = MediaAnalysisLogLevel(v21, v22);
  if ((int)v69 >= 5)
  {
    v71 = VCPLogInstance(v69, v70);
    v24 = (void *)objc_claimAutoreleasedReturnValue(v71);
    v72 = VCPLogToOSLogType[5];
    if (os_log_type_enabled((os_log_t)v24, v72))
    {
      *(_DWORD *)buf = 138412290;
      v101 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v24,  v72,  "%@ Asset missing modification date; skipping analysis with MA DB results",
        buf,
        0xCu);
    }

    goto LABEL_39;
  }

  v34 = 0LL;
LABEL_55:

  objc_autoreleasePoolPop(context);
  return v34;
}

    v69 = VCPSignPostLog(v53);
    v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
    v71 = v70;
    if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v70))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v71,  OS_SIGNPOST_INTERVAL_END,  spid,  "VCPFaceProcessingAnalyzeAsset",  (const char *)&unk_100199097,  buf,  2u);
    }

    goto LABEL_43;
  }

  v10 = -128;
LABEL_46:

  return v10;
}
      }
    }

    else
    {
      if (-[VCPFaceProcessingTask isCancelled](self, "isCancelled"))
      {
        v8 = -128;
LABEL_41:

        goto LABEL_42;
      }

      if ([v4 count])
      {
        -[VCPTimeMeasurement stop](v58, "stop");
        if ([v6 hasPanorama])
        {
          v53 = @"Serial-With-Panorama";
        }

        else if ([(id)objc_opt_class(self) _concurrentFaceProcessing])
        {
          v53 = @"Concurrent";
        }

        else
        {
          v53 = @"Serial";
        }

        v54 = VCPTaskIDDescription(3LL);
        v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
        v51 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-%@-Analyze",  v55,  v53));

        -[VCPTimeMeasurement elapsedTimeSeconds](v58, "elapsedTimeSeconds");
        VCPCoreAnalyticsQoSReportSpeed(v51, v56 * 1000.0 / (double)(unint64_t)[v4 count]);
        goto LABEL_39;
      }
    }

    v8 = 0;
    goto LABEL_41;
  }

  v8 = -18;
LABEL_42:

  objc_autoreleasePoolPop(v5);
  return v8;
}

LABEL_40:
      sub_10000421C(&cf1);
      sub_10000421C((const void **)&error);
LABEL_41:
      sub_10000421C((const void **)&v46);
      goto LABEL_42;
    }

    sub_10000421C(&cf1);
    sub_10000421C((const void **)&error);
    v7 = sub_10000421C((const void **)&v46);
  }

  if (self->_storageListener == v6)
  {
    v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSXPCInterface interfaceWithProtocol:]( &OBJC_CLASS___NSXPCInterface,  "interfaceWithProtocol:",  &OBJC_PROTOCOL___VCPStorageServiceProtocol));
    [v9 setExportedInterface:v31];

    [v9 setExportedObject:self];
    goto LABEL_52;
  }

  if (self->_realTimeListener == v6)
  {
    v35 = &off_1001B8B68;
LABEL_50:
    v36 = [(id)objc_opt_class(*v35) clientHandlerWithXPCConnection:v9];
    v38 = (void *)objc_claimAutoreleasedReturnValue(v36);
    if (!v38)
    {
      v41 = VCPLogInstance();
      v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      v42 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v29, v42))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v42, "Failed to add client; dropping connection", buf, 2u);
      }

      goto LABEL_33;
    }

    v39 = (void *)objc_claimAutoreleasedReturnValue(+[VCPClientManager sharedManager](&OBJC_CLASS___VCPClientManager, "sharedManager"));
    [v39 addClientHandler:v38];

LABEL_52:
    objc_msgSend(v9, "resume", cf1);
    v34 = 1;
    goto LABEL_53;
  }

  if (self->_analysisListener == v6)
  {
    v35 = &off_1001B8AD0;
    goto LABEL_50;
  }

  if (self->_publicServiceListener == v6)
  {
    v35 = &off_1001B8AB8;
    goto LABEL_50;
  }

  if (self->_homeKitListener == v6)
  {
    v35 = off_1001B8A40;
    goto LABEL_50;
  }

  if (self->_homeKitSessionListener == v6)
  {
    v35 = &off_1001B8A48;
    goto LABEL_50;
  }

  if (self->_macsListener == v6)
  {
    v35 = &off_1001B85E8;
    goto LABEL_50;
  }

  if (self->_embeddingStoreListener == v6)
  {
    v35 = &off_1001B8610;
    goto LABEL_50;
  }

  if ((int)MediaAnalysisLogLevel(v7, v8) >= 4)
  {
    v28 = VCPLogInstance();
    v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    v30 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v29, v30))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unknown service requested; denying connection", buf, 2u);
    }

      return;
    }

    if ((int)MediaAnalysisLogLevel(v11, v12) >= 4)
    {
      v31 = VCPLogInstance();
      v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      v33 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v32, v33))
      {
        *(_DWORD *)buf = 138412290;
        v54 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "[%@][HomePod] Scheduler task missing, submitting now",  buf,  0xCu);
      }
    }

    v34 = [[BGRepeatingSystemTaskRequest alloc] initWithIdentifier:v4];
    [v34 setGroupName:MediaAnalysisDaemonDomain];
    [v34 setGroupConcurrencyLimit:1];
    [v34 setResourceIntensive:0];
    [v34 setRequiresUserInactivity:1];
    [v34 setPriority:1];
    [v34 setInterval:86400.0];
    [v34 setMinDurationBetweenInstances:70000.0];
    v35 = (void *)objc_claimAutoreleasedReturnValue(+[BGSystemTaskScheduler sharedScheduler](&OBJC_CLASS___BGSystemTaskScheduler, "sharedScheduler"));
    v51 = 0LL;
    v36 = [v35 submitTaskRequest:v34 error:&v51];
    v21 = v51;

    if ((v36 & 1) != 0)
    {
      if ((int)MediaAnalysisLogLevel(v37, v38) >= 6)
      {
        v39 = VCPLogInstance();
        v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
        v40 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v25, v40))
        {
          *(_DWORD *)buf = 138412290;
          v54 = v4;
          v41 = "[%@][HomePod] Successfully submitted new task request";
          v42 = v25;
          v43 = v40;
          v44 = 12;
LABEL_31:
          _os_log_impl((void *)&_mh_execute_header, v42, v43, v41, buf, v44);
          goto LABEL_32;
        }

        goto LABEL_32;
      }
    }

    else if ((int)MediaAnalysisLogLevel(v37, v38) >= 3)
    {
      v47 = VCPLogInstance();
      v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
      v48 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v25, v48))
      {
        *(_DWORD *)buf = 138412546;
        v54 = v4;
        v55 = 2112;
        v56 = v21;
        v41 = "[%@][HomePod] Failed to submit new task request with error: %@";
        v42 = v25;
        v43 = v48;
        v44 = 22;
        goto LABEL_31;
      }
        }

LABEL_41:
          objc_autoreleasePoolPop(v33);
          v31 = (char *)v31 + 1;
        }

        while (v29 != v31);
        v89 = [obj countByEnumeratingWithState:&v151 objects:v155 count:16];
        v29 = v89;
        if (!v89)
        {
LABEL_62:

          v103 = (void *)objc_claimAutoreleasedReturnValue(+[MADSystemDataStore systemDataStore](&OBJC_CLASS___MADSystemDataStore, "systemDataStore"));
          v149 = 0LL;
          v104 = [v103 commitChangesOrRollback:&v149];
          v99 = (os_log_s *)v149;

          if ((v104 & 1) == 0)
          {
            v107 = MediaAnalysisLogLevel(v105, v106);
            if ((int)v107 >= 3)
            {
              v109 = VCPLogInstance(v107, v108);
              v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
              v111 = VCPLogToOSLogType[3];
              if (os_log_type_enabled(v110, v111))
              {
                *(_DWORD *)buf = 138412546;
                v157 = @"[MACS]";
                v158 = 2112;
                v159 = v99;
                _os_log_impl((void *)&_mh_execute_header, v110, v111, "%@ Failed prepare analysis - %@", buf, 0x16u);
              }
            }
          }

          v145[0] = _NSConcreteStackBlock;
          v145[1] = 3221225472LL;
          v145[2] = sub_100082970;
          v145[3] = &unk_1001BC1E0;
          v112 = obj;
          v146 = v112;
          v147 = @"[MACS]";
          v148 = v131;
          v113 = objc_retainBlock(v145);
          if ((v133 & 1) != 0)
          {
            v141[0] = _NSConcreteStackBlock;
            v141[1] = 3221225472LL;
            v141[2] = sub_100082CA4;
            v141[3] = &unk_1001BC1E0;
            v114 = v112;
            v142 = v114;
            v143 = @"[MACS]";
            v144 = v113;
            v115 = objc_retainBlock(v141);
            v116 = (void *)objc_claimAutoreleasedReturnValue([v114 firstObject]);
            v117 = (void *)objc_claimAutoreleasedReturnValue([v116 requestID]);
            v118 = (void *)objc_claimAutoreleasedReturnValue([v114 firstObject]);
            v119 = (void *)objc_claimAutoreleasedReturnValue([v118 resultDirectoryURL]);
            v95 = (void *)objc_claimAutoreleasedReturnValue( [a1 _taskWithURLAssets:v135 requestID:v117 requests:v136 resultDirectoryURL:v119 cancelBlock:v128 progressHandler:v129 resul tsHandler:v130 completionHandler:v115]);

            v120 = v142;
          }

          else
          {
            v120 = (void *)objc_claimAutoreleasedReturnValue([v112 firstObject]);
            v121 = (void *)objc_claimAutoreleasedReturnValue([v120 sourceIdentifier]);
            v122 = (void *)objc_claimAutoreleasedReturnValue([v112 firstObject]);
            v123 = (void *)objc_claimAutoreleasedReturnValue([v122 requestID]);
            v124 = (void *)objc_claimAutoreleasedReturnValue([v112 firstObject]);
            v125 = (void *)objc_claimAutoreleasedReturnValue([v124 resultDirectoryURL]);
            v95 = (void *)objc_claimAutoreleasedReturnValue( [a1 _taskWithPhotosAssets:v135 photoLibraryURLPath:v121 requestID:v123 requests:v136 resultDirectoryURL:v125 cancelBloc k:v128 progressHandler:v129 resultsHandler:v130 completionHandler:v113]);
          }

          goto LABEL_71;
        }
      }
    }

    v96 = MediaAnalysisLogLevel(v20, v21);
    if ((int)v96 < 3)
    {
      v95 = 0LL;
    }

    else
    {
      v98 = VCPLogInstance(v96, v97);
      v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
      v100 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v99, v100))
      {
        v101 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);
        v102 = (os_log_s *)objc_claimAutoreleasedReturnValue([v101 resultDirectoryURL]);
        *(_DWORD *)buf = 138412546;
        v157 = @"[MACS]";
        v158 = 2112;
        v159 = v102;
        _os_log_impl( (void *)&_mh_execute_header,  v99,  v100,  "%@ Failed to open secure scoped result URL %@; exit",
          buf,
          0x16u);
      }

      v95 = 0LL;
LABEL_71:
    }

    goto LABEL_73;
  }

  v90 = MediaAnalysisLogLevel(0LL, v12);
  if ((int)v90 >= 3)
  {
    v92 = VCPLogInstance(v90, v91);
    v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
    v94 = VCPLogToOSLogType[3];
    v136 = v93;
    if (os_log_type_enabled(v93, v94))
    {
      *(_DWORD *)buf = 138412290;
      v157 = @"[MACS]";
      _os_log_impl((void *)&_mh_execute_header, v93, v94, "%@ ManagedRequests is empty", buf, 0xCu);
    }

    v95 = 0LL;
LABEL_73:

    goto LABEL_74;
  }

  v95 = 0LL;
LABEL_74:

  return v95;
}

              if ([v49 count]) {
                [v9 setObject:v49 forKeyedSubscript:v139];
              }

LABEL_43:
              v25 = v155;
              goto LABEL_44;
            }

            v61 = MediaAnalysisLogLevel(0LL, v35);
            if ((int)v61 >= 4)
            {
              v63 = VCPLogInstance(v61, v62);
              v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
              if (os_log_type_enabled(v64, v127))
              {
                v65 = (void *)objc_claimAutoreleasedReturnValue([v146 localIdentifier]);
                LODWORD(buf.start.value) = 138412546;
                *(CMTimeValue *)((char *)&buf.start.value + 4) = (CMTimeValue)v65;
                LOWORD(buf.start.flags) = 2112;
                *(void *)((char *)&buf.start.flags + 2) = v155;
                _os_log_impl( (void *)&_mh_execute_header,  v64,  v127,  "   [%@] No matched PHFace for HAR result localIdentifier (%@)",  (uint8_t *)&buf,  0x16u);
              }

              goto LABEL_43;
            }
          }
    }
  }

  else
  {
    v64 = mach_absolute_time();
    v65 = VCPSignPostLog(v64);
    v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
    v67 = os_signpost_id_generate(v66);

    v69 = VCPSignPostLog(v68);
    v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
    v71 = v70;
    if (v67 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v70))
    {
      v72 = VCPTaskIDDescription(a3);
      v73 = (void *)objc_claimAutoreleasedReturnValue(v72);
      *(_DWORD *)buf = 138412290;
      v82 = v73;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v71,  OS_SIGNPOST_INTERVAL_BEGIN,  v67,  "VCPMADCollectAndReportAnalysisProgress",  "_%@",  buf,  0xCu);
    }

    v74 = VCPSignPostLog(  [a1 _queryAndReportProgressForAnalysis:a3 photoLibrary:v10 cancelOrExtendTimeoutBlock:v11]);
    v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
    v76 = v75;
    if (v67 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v75))
    {
      v77 = VCPTaskIDDescription(a3);
      v78 = (void *)objc_claimAutoreleasedReturnValue(v77);
      *(_DWORD *)buf = 138412290;
      v82 = v78;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v76,  OS_SIGNPOST_INTERVAL_END,  v67,  "VCPMADCollectAndReportAnalysisProgress",  "_%@",  buf,  0xCu);
    }

    if (v64)
    {
      v79 = mach_absolute_time();
      VCPPerformance_LogMeasurement("VCPMADCollectAndReportAnalysisProgress", v79 - v64);
    }

    [v14 removeProgressEntriesBeyondLimits];
    [v14 commit];
  }

    v17 = 0;
    goto LABEL_41;
  }

  v17 = 0;
LABEL_44:

  return v17;
}

LABEL_33:
  }

        v23 = 0LL;
        goto LABEL_39;
      }

      v68 = MediaAnalysisLogLevel(v37, v38);
      if ((int)v68 >= 6)
      {
        v70 = VCPLogInstance(v68, v69);
        v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
        v72 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v71, v72))
        {
          *(_DWORD *)buf = 138412290;
          v75 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v71,  v72,  "%@ Undegraded asset available; re-analyzing with Compute Sync results",
            buf,
            0xCu);
        }
      }
    }

    else
    {
      v61 = MediaAnalysisLogLevel(v35, v36);
      if ((int)v61 >= 5)
      {
        v63 = VCPLogInstance(v61, v62);
        v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
        v65 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v64, v65))
        {
          *(_DWORD *)buf = 138412290;
          v75 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v64,  v65,  "%@ Asset has been modified; discarding Compute Sync results",
            buf,
            0xCu);
        }
      }

      v66 = *a4;
      *a4 = 0LL;
    }
  }

  return v43;
}
        }
      }

      goto LABEL_35;
    }

    v48 = MediaAnalysisLogLevel(0LL, v35);
    if ((int)v48 >= 3)
    {
      v50 = VCPLogInstance(v48, v49);
      v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
      v51 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v27, v51))
      {
        *(_DWORD *)buf = 138412290;
        v67 = @"MediaAnalysisImage";
        v29 = "[%@] task identifier not found";
        v30 = v27;
        v31 = v51;
        v32 = 12;
        goto LABEL_21;
      }

      goto LABEL_22;
    }
  }

      v30 = 13;
LABEL_87:

      goto LABEL_88;
    }

    v45 = objc_msgSend(v34, "vcp_version");
    if ((int)v45 < v127)
    {
      v47 = MediaAnalysisLogLevel(v45, v46);
      if ((int)v47 >= 7)
      {
        v49 = VCPLogInstance(v47, v48);
        v40 = (void *)objc_claimAutoreleasedReturnValue(v49);
        if (!os_log_type_enabled((os_log_t)v40, v126)) {
          goto LABEL_24;
        }
        v50 = objc_msgSend(v36, "vcp_version");
        *(_DWORD *)buf = 138412546;
        v141 = v32;
        v142 = 1024;
        *(_DWORD *)v143 = v50;
        v41 = (os_log_s *)v40;
        v42 = v126;
        v43 = "  [%@] Deprecated analysis version (%d); skipping";
        v44 = 18;
        goto LABEL_23;
      }

      goto LABEL_33;
    }

    v138 = 0LL;
    v54 = objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "mad_cloudIdentifierForLocalIdentifier:error:", v32, &v138));
    v55 = v138;
    v40 = v55;
    v124 = (void *)v54;
    if (v54)
    {
      if (([v29 isPhoto] & 1) != 0
        || [v29 isVideo] && objc_msgSend(v36, "vcp_degraded"))
      {
        v57 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[VCPProtoAssetAnalysis imageAnalysisFromLegacyDictionary:assetCloudIdentifier:]( &OBJC_CLASS___VCPProtoAssetAnalysis,  "imageAnalysisFromLegacyDictionary:assetCloudIdentifier:",  v36,  v54));
      }

      else
      {
        v67 = [v29 isVideo];
        if (!(_DWORD)v67)
        {
          v82 = MediaAnalysisLogLevel(v67, v68);
          if ((int)v82 >= 3)
          {
            v84 = VCPLogInstance(v82, v83);
            v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
            if (os_log_type_enabled(v62, v123))
            {
              v85 = [v29 mediaType];
              v86 = [v29 mediaSubtypes];
              *(_DWORD *)buf = 138412802;
              v141 = v32;
              v142 = 1024;
              *(_DWORD *)v143 = v85;
              *(_WORD *)&v143[4] = 1024;
              *(_DWORD *)&v143[6] = v86;
              v63 = v62;
              v64 = v123;
              v65 = "  [%@] Invalid asset (media type %d, subtype %d) for backup; skipping";
              v66 = 24;
              goto LABEL_61;
            }

            goto LABEL_62;
          }

          goto LABEL_63;
        }

        v57 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[VCPProtoAssetAnalysis movieAnalysisFromLegacyDictionary:assetCloudIdentifier:]( &OBJC_CLASS___VCPProtoAssetAnalysis,  "movieAnalysisFromLegacyDictionary:assetCloudIdentifier:",  v36,  v54));
      }

      v62 = v57;
      if (v57)
      {
        -[os_log_s setAssetIdentifier:](v57, "setAssetIdentifier:", v32);
        v122 = (id)objc_claimAutoreleasedReturnValue(-[os_log_s data](v62, "data"));
        if (v122)
        {
          log = (os_log_t)objc_claimAutoreleasedReturnValue(+[VCPBackupEntryHeader header](&OBJC_CLASS___VCPBackupEntryHeader, "header"));
          v70 = [v122 length];
          if ((unint64_t)v70 <= 0x200000)
          {
            -[os_log_s setDataLength:](log, "setDataLength:", [v122 length]);
            v87 = -[os_log_s writeToStream:](log, "writeToStream:", v131);
            v117 = (int)v87;
            if ((_DWORD)v87)
            {
              v89 = MediaAnalysisLogLevel(v87, v88);
              if ((int)v89 >= 3)
              {
                v91 = VCPLogInstance(v89, v90);
                v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
                if (os_log_type_enabled(v92, v123))
                {
                  *(_DWORD *)buf = 138412290;
                  v141 = v32;
                  _os_log_impl( (void *)&_mh_execute_header,  v92,  v123,  " [%@] Failed to write backup entry header",  buf,  0xCu);
                }
              }

              v30 = 6;
              v11 = v117;
            }

            else
            {
              v118 = v122;
              v93 = -[os_log_s vcp_writeBuffer:ofLength:]( v131,  "vcp_writeBuffer:ofLength:",  [v118 bytes],  objc_msgSend(v118, "length"));
              v30 = (int)v93;
              if ((_DWORD)v93)
              {
                v95 = MediaAnalysisLogLevel(v93, v94);
                if ((int)v95 < 3)
                {
                  v99 = v30;
                  v30 = 6;
                }

                else
                {
                  v97 = VCPLogInstance(v95, v96);
                  v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
                  v119 = v30;
                  if (os_log_type_enabled(v98, v123))
                  {
                    *(_DWORD *)buf = 138412290;
                    v141 = v32;
                    _os_log_impl( (void *)&_mh_execute_header,  v98,  v123,  " [%@] Failed to write backup entry data",  buf,  0xCu);
                  }

                  v30 = 6;
                  v99 = v119;
                }

                v11 = v99;
              }

              else
              {
                v99 = 0;
              }

              v100 = v99 == 0;
              v101 = v121;
              if (v100) {
                v101 = v121 + 1;
              }
              v121 = v101;
            }

            goto LABEL_82;
          }

          v72 = MediaAnalysisLogLevel(v70, v71);
          if ((int)v72 >= 4)
          {
            v74 = VCPLogInstance(v72, v73);
            v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
            if (os_log_type_enabled(v75, type))
            {
              *(_DWORD *)buf = 138412290;
              v141 = v32;
              _os_log_impl( (void *)&_mh_execute_header,  v75,  type,  "  [%@] Serialized analysis exceeds per-entry limit; skipping",
                buf,
                0xCu);
            }
          }
        }

        else
        {
          v79 = MediaAnalysisLogLevel(0LL, v69);
          if ((int)v79 < 3)
          {
            v30 = 13;
LABEL_83:

            goto LABEL_84;
          }

          v81 = VCPLogInstance(v79, v80);
          log = (os_log_t)objc_claimAutoreleasedReturnValue(v81);
          if (os_log_type_enabled(log, v123))
          {
            *(_DWORD *)buf = 138412290;
            v141 = v32;
            _os_log_impl( (void *)&_mh_execute_header,  log,  v123,  "  [%@] Failed to serialize asset analysis; skipping",
              buf,
              0xCu);
          }
        }

        v30 = 13;
LABEL_82:

        goto LABEL_83;
      }

      v76 = MediaAnalysisLogLevel(0LL, v58);
      if ((int)v76 >= 3)
      {
        v78 = VCPLogInstance(v76, v77);
        v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
        if (os_log_type_enabled(v62, v123))
        {
          *(_DWORD *)buf = 138412290;
          v141 = v32;
          v63 = v62;
          v64 = v123;
          v65 = "  [%@] Failed to convert asset analysis; skipping";
          v66 = 12;
          goto LABEL_61;
        }

        goto LABEL_62;
      }
    }

    else
    {
      v59 = MediaAnalysisLogLevel(v55, v56);
      if ((int)v59 >= 3)
      {
        v61 = VCPLogInstance(v59, v60);
        v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
        if (os_log_type_enabled(v62, v123))
        {
          *(_DWORD *)buf = 138412546;
          v141 = v32;
          v142 = 2112;
          *(void *)v143 = v40;
          v63 = v62;
          v64 = v123;
          v65 = "  [%@] Failed to fetch asset's cloud identifier: %@; skipping";
          v66 = 22;
LABEL_61:
          _os_log_impl((void *)&_mh_execute_header, v63, v64, v65, buf, v66);
        }

    v62 = (void *)objc_claimAutoreleasedReturnValue(+[PHAssetResourceManager defaultManager](&OBJC_CLASS___PHAssetResourceManager, "defaultManager"));
    [v62 cancelDataRequest:v28];

    dispatch_semaphore_wait(v23, 0xFFFFFFFFFFFFFFFFLL);
    goto LABEL_34;
  }

LABEL_42:
  v34 = 0;
LABEL_53:

  return v34;
}

    ((void (*)(void *, uint64_t))v16[2])(v16, 4294967278LL);
    goto LABEL_27;
  }

  v56 = [(id)objc_opt_class(a1[5]) buddyCheckRequired];
  if ((_DWORD)v56)
  {
    v97 = 0LL;
    v98 = &v97;
    v99 = 0x2020000000LL;
    v58 = (uint64_t (*)(void))off_1001E6398;
    v100 = off_1001E6398;
    if (!off_1001E6398)
    {
      *(void *)&buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472LL;
      v102 = sub_100011D54;
      v103 = &unk_1001B9F10;
      v104 = &v97;
      sub_100011D54((uint64_t)&buf);
      v58 = (uint64_t (*)(void))v98[3];
    }

    _Block_object_dispose(&v97, 8);
    if (!v58)
    {
      v85 = dlerror();
      abort_report_np("%s", v85);
      __break(1u);
    }

    v56 = (id)v58();
    if ((_DWORD)v56)
    {
      v59 = MediaAnalysisLogLevel(v56, v57);
      if ((int)v59 >= 5)
      {
        v61 = VCPLogInstance(v59, v60);
        v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
        v53 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v52, v53))
        {
          v62 = a1[4];
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v62;
          v55 = "%@ Attempt to run before Setup Assisant (Buddy) completes; quitting";
          goto LABEL_40;
        }

        goto LABEL_41;
      }

      goto LABEL_42;
    }
  }

  v63 = MediaAnalysisLogLevel(v56, v57);
  if ((int)v63 >= 5)
  {
    v65 = VCPLogInstance(v63, v64);
    v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
    v67 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v66, v67))
    {
      v68 = a1[4];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v68;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "%@ Running background processing", (uint8_t *)&buf, 0xCu);
    }
  }

  v69 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  [v69 addBreadcrumb:@"Running BGST %@", a1[6]];

  v70 = objc_autoreleasePoolPush();
  [a1[5] executeWithSystemTask:v14 cancelBlock:v13 completionHandler:v16];
  objc_autoreleasePoolPop(v70);
  v73 = MediaAnalysisLogLevel(v71, v72);
  if ((int)v73 >= 5)
  {
    v75 = VCPLogInstance(v73, v74);
    v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
    v77 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v76, v77))
    {
      v78 = a1[4];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v78;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "%@ Submitted background processing", (uint8_t *)&buf, 0xCu);
    }
  }

  v79 = MediaAnalysisLogLevel(v73, v74);
  if ((int)v79 >= 7)
  {
    v81 = VCPLogInstance(v79, v80);
    v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
    v83 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v82, v83))
    {
      v84 = a1[4];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v84;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "%@ Exiting BGST task launch handler", (uint8_t *)&buf, 0xCu);
    }
  }

        v7 = 4294967278LL;
        goto LABEL_43;
      }

      if (!v28)
      {
        v48 = MediaAnalysisLogLevel(v30, v31);
        if ((int)v48 >= 3)
        {
          v50 = VCPLogInstance(v48, v49);
          v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
          v51 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v46, v51))
          {
            *(_DWORD *)buf = 138412546;
            v56 = v24;
            v57 = 2112;
            v58[0] = v32;
            _os_log_impl((void *)&_mh_execute_header, v46, v51, "[%@] Cannot load result type: %@", buf, 0x16u);
          }

          v28 = 0LL;
          goto LABEL_40;
        }

        v28 = 0LL;
        goto LABEL_42;
      }

      v33 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v24]);
      v34 = v33 == 0LL;

      if (v34)
      {
        v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
        [v2 setObject:v35 forKeyedSubscript:v24];
      }

      v36 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v24]);
      v37 = (void *)objc_claimAutoreleasedReturnValue([v36 objectForKeyedSubscript:v22]);
      v38 = v37 == 0LL;

      if (v38)
      {
        v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
        v40 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v24]);
        [v40 setObject:v39 forKeyedSubscript:v22];
      }

      v41 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v24]);
      v42 = (void *)objc_claimAutoreleasedReturnValue([v41 objectForKeyedSubscript:v22]);
      [v42 setObject:v28 forKeyedSubscript:v32];

      v21 = sqlite3_step(ppStmt);
    }

    if (v21 == 101) {
      v7 = 0LL;
    }
    else {
      v7 = v21;
    }
  }

    goto LABEL_43;
  }

  v16 = -[MADPhotosFullAssetProcessingTask possibleAnalysisForAsset:withResources:forLocalResourcesOnly:]( self,  "possibleAnalysisForAsset:withResources:forLocalResourcesOnly:",  v10,  v96,  v6);
  v18 = MediaAnalysisLogLevel(v16, v17);
  v20 = v16 & 0xFFFFFFFFDFFFFFFFLL;
  if ((int)v18 >= 7)
  {
    v21 = VCPLogInstance(v18, v19);
    v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    v23 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v22, v23))
    {
      v24 = MediaAnalysisTypeShortDescription(v16 & 0xFFFFFFFFDFFFFFFFLL);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      *(_DWORD *)buf = 138412546;
      v98 = v12;
      v99 = 2112;
      v100 = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%@ Possible analysis: %@", buf, 0x16u);
    }
  }

  if ((v16 & 0x40000) != 0)
  {
    v26 = StripMovieCurationResultsForEligibleAsset(v10, *a4, v12);
    v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
    v28 = *a4;
    *a4 = v27;
  }

  if (!*a4)
  {
LABEL_50:
    v75 = MediaAnalysisLogLevel(v18, v19);
    v77 = VCPLogInstance(v75, v76);
    v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
    v79 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v78, v79))
    {
      v80 = MediaAnalysisTypeShortDescription(v16 & 0xFFFFFFFFDFFFFFFFLL);
      v81 = (void *)objc_claimAutoreleasedReturnValue(v80);
      *(_DWORD *)buf = 138412546;
      v98 = v12;
      v99 = 2112;
      v100 = v81;
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "%@ No existing analysis; analyze all (%@)", buf, 0x16u);
    }

      v56 = MediaAnalysisLogLevel(v39, v40);
      v58 = VCPLogInstance(v56, v57);
      v42 = (void *)objc_claimAutoreleasedReturnValue(v58);
      if (os_log_type_enabled((os_log_t)v42, v115))
      {
        *(_DWORD *)buf = 138412290;
        v132 = v116;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v42,  v115,  "%@ Failed to retrieve faceChangeRequest; skipping",
          buf,
          0xCu);
      }

void sub_100003460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003944( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, uint64_t a11)
{
  _Unwind_Resume(a1);
}

BOOL sub_100003A24(id a1)
{
  return 0;
}

void sub_100003CE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100003E10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_100004160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const void **sub_10000421C(const void **a1)
{
  v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void sub_10000424C(void *a1)
{
}

LABEL_12:
    goto LABEL_25;
  }

  v24 = -[VCPPreAnalysisImageLoader initWithMonochromeBufferCreator:]( objc_alloc(&OBJC_CLASS___VCPPreAnalysisImageLoader),  "initWithMonochromeBufferCreator:",  *(void *)(v17 + 52));
  v25 = *(void **)(v17 + 60);
  *(void *)(v17 + 60) = v24;

  v26 = objc_alloc_init(&OBJC_CLASS___VNSession);
  v27 = *(void **)(v17 + 68);
  *(void *)(v17 + 6_Block_object_dispose(va, 8) = v26;

  v28 = objc_claimAutoreleasedReturnValue( +[VCPObjectPool objectPoolWithAllocator:]( &OBJC_CLASS___VCPObjectPool,  "objectPoolWithAllocator:",  &stru_1001B9938));
  v29 = *(void **)(v17 + 76);
  *(void *)(v17 + 76) = v28;

  if (+[VCPPreAnalysisRequests includeRotation](&OBJC_CLASS___VCPPreAnalysisRequests, "includeRotation"))
  {
    v30 = objc_claimAutoreleasedReturnValue( +[VCPMAMLModel vcp_sharedModelWithModelName:]( &OBJC_CLASS___VCPMAMLModel,  "vcp_sharedModelWithModelName:",  @"MonzaV4_1"));
    v31 = *(void **)(v17 + 84);
    *(void *)(v17 + 84) = v30;

    if (*(void *)(v17 + 84))
    {
      v34 = -[VCPPoolBasedPixelBufferCreator initWithBufferWidth:bufferHeight:andPixelFormat:]( [VCPPoolBasedPixelBufferCreator alloc],  "initWithBufferWidth:bufferHeight:andPixelFormat:",  [*(id *)(v17 + 84) inputSize],  objc_msgSend(*(id *)(v17 + 84), "inputSize"),  1111970369);
      v35 = *(void **)(v17 + 92);
      *(void *)(v17 + 92) = v34;

      if (*(void *)(v17 + 92)) {
        goto LABEL_6;
      }
      v61 = VCPLogInstance();
      v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
      v62 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v50, v62))
      {
        v63 = objc_opt_class(v18);
        *(_DWORD *)buf = 138412290;
        v67 = v63;
        v53 = "[%@] Failed to create VCPPoolBasedPixelBufferCreator for rotation";
        v54 = v50;
        v55 = v62;
        v56 = 12;
        goto LABEL_23;
      }
    }

    else
    {
      v49 = VCPLogInstance();
      v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
      v51 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v50, v51))
      {
        v52 = objc_opt_class(v18);
        *(_DWORD *)buf = 138412546;
        v67 = v52;
        v68 = 2112;
        v69 = @"MonzaV4_1";
        v53 = "[%@] Failed to load ProbableRotation model %@";
        v54 = v50;
        v55 = v51;
        v56 = 22;
LABEL_23:
        _os_log_impl((void *)&_mh_execute_header, v54, v55, v53, buf, v56);
      }
    }

    goto LABEL_25;
  }

    goto LABEL_25;
  }

  v24 = -[VCPPreAnalysisImageLoader initWithMonochromeBufferCreator:]( objc_alloc(&OBJC_CLASS___VCPPreAnalysisImageLoader),  "initWithMonochromeBufferCreator:",  *(void *)(v17 + 52));
  v25 = *(void **)(v17 + 60);
  *(void *)(v17 + 60) = v24;

  v26 = objc_alloc_init(&OBJC_CLASS___VNSession);
  v27 = *(void **)(v17 + 68);
  *(void *)(v17 + 6_Block_object_dispose(va, 8) = v26;

  v28 = objc_claimAutoreleasedReturnValue( +[VCPObjectPool objectPoolWithAllocator:]( &OBJC_CLASS___VCPObjectPool,  "objectPoolWithAllocator:",  &stru_1001BA588));
  v29 = *(void **)(v17 + 76);
  *(void *)(v17 + 76) = v28;

  if (+[VCPPreAnalysisRequests includeRotation](&OBJC_CLASS___VCPPreAnalysisRequests, "includeRotation"))
  {
    v30 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    [v30 enterKnownTimeoutRisk:3];

    v31 = objc_claimAutoreleasedReturnValue( +[VCPMAMLModel vcp_sharedModelWithModelName:]( &OBJC_CLASS___VCPMAMLModel,  "vcp_sharedModelWithModelName:",  @"MonzaV4_1"));
    v32 = *(void **)(v17 + 84);
    *(void *)(v17 + 84) = v31;

    v33 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    [v33 exitKnownTimeoutRisk];

    if (*(void *)(v17 + 84))
    {
      v36 = -[VCPPoolBasedPixelBufferCreator initWithBufferWidth:bufferHeight:andPixelFormat:]( [VCPPoolBasedPixelBufferCreator alloc],  "initWithBufferWidth:bufferHeight:andPixelFormat:",  [*(id *)(v17 + 84) inputSize],  objc_msgSend(*(id *)(v17 + 84), "inputSize"),  1111970369);
      v37 = *(void **)(v17 + 92);
      *(void *)(v17 + 92) = v36;

      if (*(void *)(v17 + 92)) {
        goto LABEL_6;
      }
      v69 = MediaAnalysisLogLevel(v38, v39);
      v71 = VCPLogInstance(v69, v70);
      v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
      v72 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v56, v72))
      {
        v73 = objc_opt_class(v18);
        *(_DWORD *)buf = 138412290;
        v77 = v73;
        v59 = "[%@] Failed to create VCPPoolBasedPixelBufferCreator for rotation";
        v60 = v56;
        v61 = v72;
        v62 = 12;
        goto LABEL_23;
      }
    }

    else
    {
      v53 = MediaAnalysisLogLevel(v34, v35);
      v55 = VCPLogInstance(v53, v54);
      v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
      v57 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v56, v57))
      {
        v58 = objc_opt_class(v18);
        *(_DWORD *)buf = 138412546;
        v77 = v58;
        v78 = 2112;
        v79 = @"MonzaV4_1";
        v59 = "[%@] Failed to load ProbableRotation model %@";
        v60 = v56;
        v61 = v57;
        v62 = 22;
LABEL_23:
        _os_log_impl((void *)&_mh_execute_header, v60, v61, v59, buf, v62);
      }
    }

    goto LABEL_25;
  }
          }
        }

        v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      v27 = [v9 countByEnumeratingWithState:&v31 objects:v39 count:16];
      v10 = v27;
    }

    while (v27);
  }
}
  }

      goto LABEL_13;
    }

    goto LABEL_13;
  }

LABEL_5:
  v22 = v13;
LABEL_14:

  return v22;
}

    goto LABEL_25;
  }

  v21 = -[VCPPreAnalysisImageLoader initWithMonochromeBufferCreator:]( objc_alloc(&OBJC_CLASS___VCPPreAnalysisImageLoader),  "initWithMonochromeBufferCreator:",  *(void *)(v14 + 44));
  v22 = *(void **)(v14 + 52);
  *(void *)(v14 + 52) = v21;

  v23 = objc_alloc_init(&OBJC_CLASS___VNSession);
  v24 = *(void **)(v14 + 60);
  *(void *)(v14 + 60) = v23;

  v25 = objc_claimAutoreleasedReturnValue( +[VCPObjectPool objectPoolWithAllocator:]( &OBJC_CLASS___VCPObjectPool,  "objectPoolWithAllocator:",  &stru_1001BD078));
  v26 = *(void **)(v14 + 68);
  *(void *)(v14 + 6_Block_object_dispose(va, 8) = v25;

  if (+[VCPPreAnalysisRequests includeRotation](&OBJC_CLASS___VCPPreAnalysisRequests, "includeRotation"))
  {
    v27 = objc_claimAutoreleasedReturnValue( +[VCPMAMLModel vcp_sharedModelWithModelName:]( &OBJC_CLASS___VCPMAMLModel,  "vcp_sharedModelWithModelName:",  @"MonzaV4_1"));
    v28 = *(void **)(v14 + 76);
    *(void *)(v14 + 76) = v27;

    if (*(void *)(v14 + 76))
    {
      v31 = -[VCPPoolBasedPixelBufferCreator initWithBufferWidth:bufferHeight:andPixelFormat:]( [VCPPoolBasedPixelBufferCreator alloc],  "initWithBufferWidth:bufferHeight:andPixelFormat:",  [*(id *)(v14 + 76) inputSize],  objc_msgSend(*(id *)(v14 + 76), "inputSize"),  1111970369);
      v32 = *(void **)(v14 + 84);
      *(void *)(v14 + 84) = v31;

      if (*(void *)(v14 + 84)) {
        goto LABEL_6;
      }
      v64 = MediaAnalysisLogLevel(v33, v34);
      v66 = VCPLogInstance(v64, v65);
      v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
      v67 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v51, v67))
      {
        v68 = objc_opt_class(v15);
        *(_DWORD *)buf = 138412290;
        v72 = v68;
        v54 = "[%@] Failed to create VCPPoolBasedPixelBufferCreator for rotation";
        v55 = v51;
        v56 = v67;
        v57 = 12;
        goto LABEL_23;
      }
    }

    else
    {
      v48 = MediaAnalysisLogLevel(v29, v30);
      v50 = VCPLogInstance(v48, v49);
      v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
      v52 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v51, v52))
      {
        v53 = objc_opt_class(v15);
        *(_DWORD *)buf = 138412546;
        v72 = v53;
        v73 = 2112;
        v74 = @"MonzaV4_1";
        v54 = "[%@] Failed to load ProbableRotation model %@";
        v55 = v51;
        v56 = v52;
        v57 = 22;
LABEL_23:
        _os_log_impl((void *)&_mh_execute_header, v55, v56, v54, buf, v57);
      }
    }

    goto LABEL_25;
  }
  }

  v30 = MediaAnalysisJSONStringFromObject(v9);
  v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  v33 = MediaAnalysisLogLevel(v31, v32);
  if ((int)v33 >= 6)
  {
    v35 = VCPLogInstance(v33, v34);
    v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
    v37 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v36, v37))
    {
      *(_DWORD *)buf = 138412546;
      v55 = v51;
      v56 = 2112;
      v57 = v31;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%@ Saving session log %@", buf, 0x16u);
    }
  }

  [v11 updateSchedulingHistoryForActivityID:a1 startTime:v7 duration:v50 exitStatus:v31 sessionLog:a4];
  [v11 commit];
}
      }

      v34 = (void *)objc_claimAutoreleasedReturnValue([v16 importProperties]);
      v35 = [v34 importedBy] == (id)2;

      if (v35)
      {
        [v198 setSource:1];
      }

      else
      {
        v40 = (void *)objc_claimAutoreleasedReturnValue([v16 importProperties]);
        v41 = [v40 importedBy] == (id)1;

        if (v41) {
          [v198 setSource:2];
        }
        else {
          [v198 setSource:3];
        }
      }

      goto LABEL_26;
    }

    v36 = MediaAnalysisLogLevel(v17, v18);
    if ((int)v36 >= 7)
    {
      v38 = VCPLogInstance(v36, v37);
      v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      if (os_log_type_enabled(v39, type))
      {
        *(_DWORD *)buf = 138412290;
        *(void *)&buf[4] = v196;
        _os_log_impl((void *)&_mh_execute_header, v39, type, "%@ Face does not have assocated asset", buf, 0xCu);
      }
    }

    v198 = 0LL;
LABEL_26:
    v46 = (void *)objc_claimAutoreleasedReturnValue([v9 faceClusteringProperties]);
    v47 = (void *)objc_claimAutoreleasedReturnValue([v46 faceprint]);

    if (!v47)
    {
      v57 = MediaAnalysisLogLevel(v48, v49);
      if ((int)v57 >= 4)
      {
        v59 = VCPLogInstance(v57, v58);
        v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
        if (os_log_type_enabled(v60, v188))
        {
          *(_DWORD *)buf = 138412290;
          *(void *)&buf[4] = v196;
          v61 = v60;
          v62 = v188;
          v63 = "%@ Failed to obtain PHFaceprint; skip";
          goto LABEL_60;
        }

        goto LABEL_61;
      }

  -[VCPSubsampledAnalysisTask checkAndMarkPriorityAssets](self, "checkAndMarkPriorityAssets");
  v25 = _os_feature_enabled_impl("MediaAnalysis", "UnifiedFullAnalysis");
  if ((v25 & 1) == 0)
  {
    -[VCPSubsampledAnalysisTask resetPendingBatch](self, "resetPendingBatch");
    v27 = (void *)objc_claimAutoreleasedReturnValue( [self->super._progressHandler queryPrioritizedLocalIdentifiersWithMediaType:1 mediaSubtypes:8 shouldNegateSubtypes:0 limit:2010]);
    v28 = (void *)objc_claimAutoreleasedReturnValue( [self->super._progressHandler queryPrioritizedLocalIdentifiersWithMediaType:1 mediaSubtypes:8 shouldNegateSubtypes:1 limit:2010]);
    v29 = (void *)objc_claimAutoreleasedReturnValue( [self->super._progressHandler queryPrioritizedLocalIdentifiersWithMediaType:2 mediaSubtypes:0 shouldNegateSubtypes:1 limit:2010]);
    v30 = (char *)[v27 count];
    v31 = &v30[(void)[v28 count]];
    v32 = (char *)[v29 count];
    v34 = &v32[(void)v31];
    if (&v32[(void)v31])
    {
      v119 = v5;
      v35 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask progressHandler](self, "progressHandler"));

      if (v35)
      {
        v36 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask progressHandler](self, "progressHandler"));
        v37 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[VCPProgressReporter reporterWithIntervalSeconds:andTotalJobCount:andBlock:]( &OBJC_CLASS___VCPProgressReporter,  "reporterWithIntervalSeconds:andTotalJobCount:andBlock:",  10LL,  v34,  v36));
      }

      else
      {
        v37 = 0LL;
      }

      v48 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
      v49 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset vcp_fetchOptionsForLibrary:forTaskID:]( &OBJC_CLASS___PHAsset,  "vcp_fetchOptionsForLibrary:forTaskID:",  v48,  1LL));

      v122 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset fetchAssetsWithLocalIdentifiers:options:]( &OBJC_CLASS___PHAsset,  "fetchAssetsWithLocalIdentifiers:options:",  v27,  v49));
      v121 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset fetchAssetsWithLocalIdentifiers:options:]( &OBJC_CLASS___PHAsset,  "fetchAssetsWithLocalIdentifiers:options:",  v28,  v49));
      v120 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset fetchAssetsWithLocalIdentifiers:options:]( &OBJC_CLASS___PHAsset,  "fetchAssetsWithLocalIdentifiers:options:",  v29,  v49));
      v51 = MediaAnalysisLogLevel(v120, v50);
      if ((int)v51 > 6)
      {
        v53 = VCPLogInstance(v51, v52);
        v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
        v55 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v54, v55))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Prioritized processing...", buf, 2u);
        }
      }

      v56 = MediaAnalysisLogLevel(v51, v52);
      if ((int)v56 >= 6)
      {
        v58 = VCPLogInstance(v56, v57);
        v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
        v60 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v59, v60))
        {
          v61 = [v122 count];
          *(_DWORD *)buf = 134217984;
          v124 = v61;
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "Processing %lu prioritized Live Photos...", buf, 0xCu);
        }
      }

      v62 = VCPSignPostLog(v56);
      v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
      v64 = os_signpost_id_generate(v63);

      v66 = VCPSignPostLog(v65);
      v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
      v68 = v67;
      if (v64 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v67))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v68,  OS_SIGNPOST_INTERVAL_BEGIN,  v64,  "VCPPrioritizedAnalysisProcessLivePhotos",  (const char *)&unk_100199097,  buf,  2u);
      }

      v69 = VCPSignPostLog( -[VCPSubsampledAnalysisTask processPriorityAssets:progressReporter:]( self,  "processPriorityAssets:progressReporter:",  v122,  v37));
      v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
      v71 = v70;
      if (v64 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v70))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v71,  OS_SIGNPOST_INTERVAL_END,  v64,  "VCPPrioritizedAnalysisProcessLivePhotos",  (const char *)&unk_100199097,  buf,  2u);
      }

      v74 = MediaAnalysisLogLevel(v72, v73);
      if ((int)v74 >= 6)
      {
        v76 = VCPLogInstance(v74, v75);
        v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
        v78 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v77, v78))
        {
          v79 = [v121 count];
          *(_DWORD *)buf = 134217984;
          v124 = v79;
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "Processing %lu prioritized Still Photos...", buf, 0xCu);
        }
      }

      v80 = VCPSignPostLog(v74);
      v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
      v82 = os_signpost_id_generate(v81);

      v84 = VCPSignPostLog(v83);
      v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
      v86 = v85;
      if (v82 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v85))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v86,  OS_SIGNPOST_INTERVAL_BEGIN,  v82,  "VCPPrioritizedAnalysisProcessStillPhotos",  (const char *)&unk_100199097,  buf,  2u);
      }

      v87 = VCPSignPostLog( -[VCPSubsampledAnalysisTask processPriorityAssets:progressReporter:]( self,  "processPriorityAssets:progressReporter:",  v121,  v37));
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
      v89 = v88;
      if (v82 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v88))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v89,  OS_SIGNPOST_INTERVAL_END,  v82,  "VCPPrioritizedAnalysisProcessStillPhotos",  (const char *)&unk_100199097,  buf,  2u);
      }

      v92 = MediaAnalysisLogLevel(v90, v91);
      if ((int)v92 >= 6)
      {
        v94 = VCPLogInstance(v92, v93);
        v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
        v96 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v95, v96))
        {
          v97 = [v120 count];
          *(_DWORD *)buf = 134217984;
          v124 = v97;
          _os_log_impl((void *)&_mh_execute_header, v95, v96, "Processing %lu prioritized Movies...", buf, 0xCu);
        }
      }

      v98 = VCPSignPostLog(v92);
      v99 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
      v100 = os_signpost_id_generate(v99);

      v102 = VCPSignPostLog(v101);
      v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
      v104 = v103;
      if (v100 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v103))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v104,  OS_SIGNPOST_INTERVAL_BEGIN,  v100,  "VCPPrioritizedAnalysisProcessMovies",  (const char *)&unk_100199097,  buf,  2u);
      }

      v105 = VCPSignPostLog( -[VCPSubsampledAnalysisTask processPriorityAssets:progressReporter:]( self,  "processPriorityAssets:progressReporter:",  v120,  v37));
      v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
      v107 = v106;
      if (v100 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v106))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v107,  OS_SIGNPOST_INTERVAL_END,  v100,  "VCPPrioritizedAnalysisProcessMovies",  (const char *)&unk_100199097,  buf,  2u);
      }

      -[VCPDatabaseWriter cost](self->_database, "cost");
      if (v108 == 0.0 || (v109 = -[VCPSubsampledAnalysisTask processPendingBatch](self, "processPendingBatch")) == 0)
      {
        v47 = 0;
        v46 = 0;
      }

      else
      {
        v46 = v109;
        v47 = 1;
      }

      v5 = v119;
    }

    else
    {
      v42 = MediaAnalysisLogLevel(v32, v33);
      if ((int)v42 < 6)
      {
        v46 = 0;
        v47 = 1;
LABEL_64:

        if (v47) {
          return v46;
        }
        goto LABEL_65;
      }

      v44 = VCPLogInstance(v42, v43);
      v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      v45 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v37, v45))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  v45,  "No prioritized assets to analyze. Subsampled analysis complete",  buf,  2u);
      }

      v46 = 0;
      v47 = 1;
    }

    goto LABEL_64;
  }

LABEL_6:
  if (+[VCPVideoCNNAnalyzer isMUBackboneEnabled]( &OBJC_CLASS___VCPVideoCNNAnalyzer,  "isMUBackboneEnabled"))
  {
    v38 = +[VCPVideoTransformerBackbone revision](&OBJC_CLASS___VCPVideoTransformerBackbone, "revision");
    v39 = -[VCPPoolBasedPixelBufferCreator initWithBufferWidth:bufferHeight:andPixelFormat:]( objc_alloc(&OBJC_CLASS___VCPPoolBasedPixelBufferCreator),  "initWithBufferWidth:bufferHeight:andPixelFormat:",  (int)+[VCPVideoTransformerBackbone idealInputWidthWithRevision:]( &OBJC_CLASS___VCPVideoTransformerBackbone,  "idealInputWidthWithRevision:",  v38),  (int)+[VCPVideoTransformerBackbone idealInputHeightWithRevision:]( &OBJC_CLASS___VCPVideoTransformerBackbone,  "idealInputHeightWithRevision:",  v38),  1111970369LL);
    v40 = (void **)(v17 + 100);
    v41 = *v40;
    *v40 = v39;

    if (!*v40)
    {
      v57 = VCPLogInstance();
      v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
      v58 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v46, v58))
      {
        v59 = (void *)objc_opt_class(v18);
        *(_DWORD *)buf = 138412290;
        v67 = (uint64_t)v59;
        v60 = v59;
        _os_log_impl( (void *)&_mh_execute_header,  v46,  v58,  "[%@] Failed to create VCPPoolBasedPixelBufferCreator for embedding",  buf,  0xCu);
      }

      goto LABEL_12;
    }
  }

  if (+[VCPVideoCNNAnalyzer isMUBackboneEnabled]( &OBJC_CLASS___VCPVideoCNNAnalyzer,  "isMUBackboneEnabled"))
  {
    v40 = +[VCPVideoTransformerBackbone revision](&OBJC_CLASS___VCPVideoTransformerBackbone, "revision");
    v41 = -[VCPPoolBasedPixelBufferCreator initWithBufferWidth:bufferHeight:andPixelFormat:]( objc_alloc(&OBJC_CLASS___VCPPoolBasedPixelBufferCreator),  "initWithBufferWidth:bufferHeight:andPixelFormat:",  (int)+[VCPVideoTransformerBackbone idealInputWidthWithRevision:]( &OBJC_CLASS___VCPVideoTransformerBackbone,  "idealInputWidthWithRevision:",  v40),  (int)+[VCPVideoTransformerBackbone idealInputHeightWithRevision:]( &OBJC_CLASS___VCPVideoTransformerBackbone,  "idealInputHeightWithRevision:",  v40),  1111970369LL);
    v42 = (void **)(v17 + 100);
    v43 = *v42;
    *v42 = v41;

    if (!*v42)
    {
      v63 = MediaAnalysisLogLevel(v44, v45);
      v65 = VCPLogInstance(v63, v64);
      v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
      v66 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v50, v66))
      {
        v67 = (void *)objc_opt_class(v18);
        *(_DWORD *)buf = 138412290;
        v77 = (uint64_t)v67;
        v68 = v67;
        _os_log_impl( (void *)&_mh_execute_header,  v50,  v66,  "[%@] Failed to create VCPPoolBasedPixelBufferCreator for embedding",  buf,  0xCu);
      }

      goto LABEL_12;
    }
  }

  return v4;
}

  if (+[VCPVideoCNNAnalyzer isMUBackboneEnabled]( &OBJC_CLASS___VCPVideoCNNAnalyzer,  "isMUBackboneEnabled"))
  {
    v35 = +[VCPVideoTransformerBackbone revision](&OBJC_CLASS___VCPVideoTransformerBackbone, "revision");
    v36 = -[VCPPoolBasedPixelBufferCreator initWithBufferWidth:bufferHeight:andPixelFormat:]( objc_alloc(&OBJC_CLASS___VCPPoolBasedPixelBufferCreator),  "initWithBufferWidth:bufferHeight:andPixelFormat:",  (int)+[VCPVideoTransformerBackbone idealInputWidthWithRevision:]( &OBJC_CLASS___VCPVideoTransformerBackbone,  "idealInputWidthWithRevision:",  v35),  (int)+[VCPVideoTransformerBackbone idealInputHeightWithRevision:]( &OBJC_CLASS___VCPVideoTransformerBackbone,  "idealInputHeightWithRevision:",  v35),  1111970369LL);
    v37 = (void **)(v14 + 92);
    v38 = *v37;
    *v37 = v36;

    if (!*v37)
    {
      v58 = MediaAnalysisLogLevel(v39, v40);
      v60 = VCPLogInstance(v58, v59);
      v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
      v61 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v45, v61))
      {
        v62 = (void *)objc_opt_class(v15);
        *(_DWORD *)buf = 138412290;
        v72 = (uint64_t)v62;
        v63 = v62;
        _os_log_impl( (void *)&_mh_execute_header,  v45,  v61,  "[%@] Failed to create VCPPoolBasedPixelBufferCreator for embedding",  buf,  0xCu);
      }

      goto LABEL_12;
    }
  }

    ++v8;
  }

  photoLibrary = self->_photoLibrary;
  v19 = (void *)objc_claimAutoreleasedReturnValue([v7 allKeys]);
  v20 = (void *)objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary localIdentifierMappingsForCloudIdentifiers:]( photoLibrary,  "localIdentifierMappingsForCloudIdentifiers:",  v19));

  v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  v51[0] = _NSConcreteStackBlock;
  v51[1] = 3221225472LL;
  v51[2] = sub_1000E24C4;
  v51[3] = &unk_1001BD5D0;
  v43 = v20;
  v52 = v43;
  v44 = v21;
  v53 = v44;
  [v7 enumerateKeysAndObjectsUsingBlock:v51];
  v22 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset vcp_fetchOptionsForLibrary:forTaskID:]( &OBJC_CLASS___PHAsset,  "vcp_fetchOptionsForLibrary:forTaskID:",  self->_photoLibrary,  self->_taskID));
  v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"creationDate",  1LL));
  v61 = v23;
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v61, 1LL));
  [v22 setSortDescriptors:v24];

  v25 = (void *)objc_claimAutoreleasedReturnValue([v44 allKeys]);
  v26 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset fetchAssetsWithLocalIdentifiers:options:]( &OBJC_CLASS___PHAsset,  "fetchAssetsWithLocalIdentifiers:options:",  v25,  v22));

  *(void *)&buf = 0LL;
  *((void *)&buf + 1) = &buf;
  v59 = 0x2020000000LL;
  v60 = 0LL;
  v27 = self->_photoLibrary;
  v46[0] = _NSConcreteStackBlock;
  v46[1] = 3221225472LL;
  v46[2] = sub_1000E2654;
  v46[3] = &unk_1001BD5F8;
  v28 = v26;
  v47 = v28;
  v48 = self;
  v29 = v44;
  v49 = v29;
  p_buf = &buf;
  v45 = 0LL;
  -[PHPhotoLibrary performChangesAndWait:error:](v27, "performChangesAndWait:error:", v46, &v45);
  v30 = v45;
  v32 = v30;
  if (v30)
  {
    v33 = MediaAnalysisLogLevel(v30, v31);
    if ((int)v33 >= 3)
    {
      v35 = VCPLogInstance(v33, v34);
      v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      v37 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v36, v37))
      {
        v38 = [(id)objc_opt_class(self) taskName];
        v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
        *(_DWORD *)v54 = 138412546;
        v55 = v39;
        v56 = 2112;
        v57 = v32;
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "[%@] Failed to persist to photo library (%@)", v54, 0x16u);
      }
    }

    v40 = [v32 code];
  }

  else
  {
    v40 = 0;
    *v42 = *(void *)(*((void *)&buf + 1) + 24LL);
  }

  _Block_object_dispose(&buf, 8);
  return v40;
}

LABEL_8:
  v44 = v18;
LABEL_26:

  return v44;
}

  _Block_object_dispose(&v17, 8);

  _Block_object_dispose(&buf, 8);
}

  v46 = v18;
LABEL_26:

  return v46;
}
    }
  }

  else
  {
    v15 = MediaAnalysisLogLevel(v6, v7);
    if ((int)v15 >= 3)
    {
      v17 = VCPLogInstance(v15, v16);
      v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      v18 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v11, v18))
      {
        v19 = (void *)objc_claimAutoreleasedReturnValue([v3 path]);
        v20 = 138412290;
        v21 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  v18,  "[MAClientHandler] Failed to add Photo Library with path %@",  (uint8_t *)&v20,  0xCu);
      }

      goto LABEL_8;
    }
  }
}

  v41 = v15;
LABEL_26:

  return v41;
}
    }
  }

  else
  {
    [v12 timeIntervalSinceReferenceDate];
    [v9 setValue:(uint64_t)v22 forKey:v10];
    v14 = v12;
    v24 = MediaAnalysisLogLevel(v14, v23);
    if ((int)v24 >= 7)
    {
      v26 = VCPLogInstance(v24, v25);
      v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      v27 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v19, v27))
      {
        v28 = (void *)objc_claimAutoreleasedReturnValue([v14 description]);
        [v14 timeIntervalSinceReferenceDate];
        v31 = 138412802;
        v32 = v11;
        v33 = 2112;
        v34 = v28;
        v35 = 2048;
        v36 = (uint64_t)v29;
        _os_log_impl( (void *)&_mh_execute_header,  v19,  v27,  "[%@] No previous start date, setting as now (%@, timestamp: %lld)",  (uint8_t *)&v31,  0x20u);
      }

      goto LABEL_8;
    }
  }

  return v14;
}

void sub_100004740(_Unwind_Exception *a1)
{
  v8 = v7;

  _Unwind_Resume(a1);
}

SCMLHandler *__cdecl sub_1000047C4(id a1)
{
  uint64_t v1 = objc_alloc(&OBJC_CLASS___SCMLHandler);
  uint64_t v18 = SCMLUseAnyAvailableDevice;
  v19 = &__kCFBooleanTrue;
  v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
  id v13 = 0LL;
  uint64_t v3 = -[SCMLHandler initWithOptions:error:](v1, "initWithOptions:error:", v2, &v13);
  id v4 = v13;

  if (v4 && (int)MediaAnalysisLogLevel(v5, v6) >= 3)
  {
    uint64_t v7 = VCPLogInstance();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = (id)objc_opt_class(&OBJC_CLASS___SCMLHandler);
      v11 = (void *)objc_claimAutoreleasedReturnValue([v4 description]);
      *(_DWORD *)buf = 138412546;
      id v15 = v10;
      __int16 v16 = 2112;
      v17 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[VCPMADSceneAssetProcessingTask] Failed to create %@: %@",  buf,  0x16u);
    }
  }

  return v3;
}

void sub_10000493C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000049E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  id v10 = v9;

  a9.super_class = (Class)&OBJC_CLASS___VCPMADSceneFetchProcessingTask;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100004C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100004D60(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  v2 = (void *)qword_1001E6340;
  qword_1001E6340 = (uint64_t)v1;
}

void sub_100005190( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, char a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

uint64_t sub_1000051D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000051E4(uint64_t a1)
{
}

void sub_1000051EC(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [*(id *)(*(void *)(a1[6] + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel(v5, v6) >= 5)
  {
    uint64_t v7 = VCPLogInstance();
    v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = a1[4];
      if (v4) {
        v11 = @"Interrupted";
      }
      else {
        v11 = @"Finished";
      }
      [*(id *)(*(void *)(a1[6] + 8) + 40) elapsedTimeSeconds];
      int v21 = 138413058;
      uint64_t v22 = v10;
      __int16 v23 = 2112;
      v24 = v11;
      __int16 v25 = 2048;
      uint64_t v26 = v12;
      __int16 v27 = 2048;
      id v28 = [v4 code];
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ %@ after %0.6fs (%ld)", (uint8_t *)&v21, 0x2Au);
    }
  }

  uint64_t v13 = *(void *)(a1[7] + 8LL);
  v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = 0LL;

  if ((int)MediaAnalysisLogLevel(v15, v16) >= 5)
  {
    uint64_t v17 = VCPLogInstance();
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    os_log_type_t v19 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = a1[4];
      int v21 = 138412290;
      uint64_t v22 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%@ Finished background processing", (uint8_t *)&v21, 0xCu);
    }
  }

  (*(void (**)(void, id))(a1[5] + 16))(a1[5], [v4 code]);
}

void sub_1000053CC(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

uint64_t sub_100005400(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000058C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100005968(uint64_t a1, uint64_t a2)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 6)
  {
    uint64_t v3 = VCPLogInstance();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MADServicePublic] XPC connection interrupted", v8, 2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained cancelAllRequests];
  }
}

void sub_100005A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100005A1C(uint64_t a1, uint64_t a2)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 5)
  {
    uint64_t v3 = VCPLogInstance();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MADServicePublic] XPC connection invalidated", v10, 2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained cancelAllRequests];
    v8 = (void *)v7[1];
    v7[1] = 0LL;

    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VCPClientManager sharedManager](&OBJC_CLASS___VCPClientManager, "sharedManager"));
    [v9 removeClientHandler:v7];
  }
}

void sub_100005AF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const void **sub_100005B10(const void **a1, const void **a2)
{
  id v4 = *a1;
  if (v4) {
    CFRelease(v4);
  }
  *a1 = *a2;
  *a2 = 0LL;
  return a1;
}

void sub_100005B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_13:
      uint64_t v17 = -1LL;
LABEL_14:

      goto LABEL_20;
    }
    }
  }
}

      int v21 = -1LL;
LABEL_14:

      goto LABEL_20;
    }

  __int16 v27 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v28 = *(void **)(v27 + 40);
  *(void *)(v27 + 40) = 0LL;
}

LABEL_14:
  dispatch_group_wait((dispatch_group_t)self->_persistGroup, 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v20 = atomic_load((unsigned __int8 *)&self->_interrupt);
  if ((v20 & 1) != 0)
  {
LABEL_16:
    int v21 = 0;
    goto LABEL_17;
  }

  (*((void (**)(void))self->_completionHandler + 2))();
  int v21 = -[__CFString code](v23, "code");
LABEL_17:
  -[VCPPhotosCaptureProcessingTask _reportEventPostCapturesProcessing](self, "_reportEventPostCapturesProcessing");

  return v21;
}
      }
    }

    else if ((int)v15 >= 7)
    {
      uint64_t v20 = VCPLogInstance(v15, v16);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      uint64_t v7 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v6, v7))
      {
        int v21 = self->_logPrefix;
        uint64_t v22 = self->_logDescription;
        v24 = 138412546;
        __int16 v25 = v21;
        uint64_t v26 = 2112;
        __int16 v27 = v22;
        uint64_t v10 = " %@[%@] Asset downloading is not allowed: iCPL disabled";
        goto LABEL_12;
      }

      goto LABEL_13;
    }
  }

  return 0;
}

    objc_autoreleasePoolPop(v18);
    ++v17;
    if ((v20 & 1) == 0) {
      goto LABEL_18;
    }
  }

  if (![v11 count]
    || (uint64_t v3 = -[VCPDataCollectionTask processAssetBatch:withDatabase:andStatistics:andVersionTime:andCurrentTime:]( self,  "processAssetBatch:withDatabase:andStatistics:andVersionTime:andCurrentTime:",  v11,  self->super._progressHandler,  v26,  v25,  (uint64_t)v7)) == 0)
  {
    uint64_t v3 = 0;
  }
    }
  }

  return v13;
}

  return v19;
}
    }
  }

  id v28 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  [v28 accumulateInt64Value:1 forField:@"NumberOfClusterEvents" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];

  LODWORD(v2_Block_object_dispose(va, 8) = *((_DWORD *)v37 + 6);
  _Block_object_dispose(&v36, 8);

  return (int)v28;
}
    }
  }

  v40 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  [v40 accumulateInt64Value:1 forField:@"NumberOfPersonBuildingEvents" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];

  LODWORD(v40) = *((_DWORD *)v50 + 6);
  _Block_object_dispose(&v49, 8);

  return (int)v40;
}

    uint64_t v22 = 0LL;
    goto LABEL_14;
  }

  uint64_t v18 = -[VCPPhotosQuickFaceIdentificationManager initWithPhotoLibrary:]( objc_alloc(&OBJC_CLASS___VCPPhotosQuickFaceIdentificationManager),  "initWithPhotoLibrary:",  v15);
  os_log_type_t v19 = *(void **)(v13 + 52);
  *(void *)(v13 + 52) = v18;

  if (!*(void *)(v13 + 52))
  {
    id v28 = MediaAnalysisLogLevel(v20, v21);
    if ((int)v28 >= 3)
    {
      v30 = VCPLogInstance(v28, v29);
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      v31 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v26, v31))
      {
        v32 = (void *)objc_opt_class(*(void *)(v13 + 52));
        *(_DWORD *)buf = 138412546;
        v37 = v32;
        v38 = 2112;
        v39 = v12;
        v33 = v32;
        _os_log_impl((void *)&_mh_execute_header, v26, v31, "Failed to create %@ for Photo Library %@", buf, 0x16u);
      }

  [v7 start];
  if ([v7 error] == -128)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v7 error];
    *a4 = 1;
  }

  else
  {
    uint64_t v22 = [v7 error];
    if ((_DWORD)v22)
    {
      v24 = MediaAnalysisLogLevel(v22, v23);
      if ((int)v24 >= 5)
      {
        uint64_t v26 = VCPLogInstance(v24, v25);
        __int16 v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        id v28 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v27, v28))
        {
          v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) photoLibraryURL]);
          v30 = (void *)objc_claimAutoreleasedReturnValue([v29 path]);
          *(_DWORD *)buf = 138412290;
          v34 = v30;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "Error analyzing library %@", buf, 0xCu);
        }
      }

      *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = -18;
    }
  }
}
    }
  }
}

  return v11;
}
      }
    }

  return v9;
}

LABEL_19:
    uint64_t v17 = -1LL;
    goto LABEL_20;
  }

  if ((_DWORD)v10 == 1)
  {
    if ((int)MediaAnalysisLogLevel(v10, v11) >= 3)
    {
      uint64_t v12 = VCPLogInstance();
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      v14 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v13, v14))
      {
        *(_DWORD *)buf = 136315138;
        __int16 v25 = v8;
        uint64_t v15 = "[MADServicePublic] Client does not have read access to file %s";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v13, v14, v15, buf, 0xCu);
        goto LABEL_13;
      }

      goto LABEL_13;
    }

    goto LABEL_19;
  }

  uint64_t v18 = sandbox_extension_consume([v6 UTF8String]);
  uint64_t v17 = v18;
  if (v18 < 0 && (int)MediaAnalysisLogLevel(v18, v19) >= 3)
  {
    uint64_t v20 = VCPLogInstance();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    int v21 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v13, v21))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v21,  "[MADServicePublic] Failed to consume sandbox extension",  buf,  2u);
    }

    goto LABEL_14;
  }
}
        }

        objc_autoreleasePoolPop(v14);
        uint64_t v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      v43 = [v9 countByEnumeratingWithState:&v52 objects:v60 count:16];
      uint64_t v10 = v43;
    }

    while (v43);
  }
}

    int v21 = -1LL;
    goto LABEL_20;
  }

  if ((_DWORD)v10 == 1)
  {
    uint64_t v12 = MediaAnalysisLogLevel(v10, v11);
    if ((int)v12 >= 3)
    {
      v14 = VCPLogInstance(v12, v13);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      uint64_t v16 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v15, v16))
      {
        *(_DWORD *)buf = 136315138;
        v31 = v8;
        uint64_t v17 = "[MAClientHandler] Client does not have read access to file %s";
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v15, v16, v17, buf, 0xCu);
        goto LABEL_13;
      }

      goto LABEL_13;
    }

    goto LABEL_19;
  }

  uint64_t v22 = sandbox_extension_consume(objc_msgSend(v6, "UTF8String", v8));
  int v21 = v22;
  if (v22 < 0)
  {
    v24 = MediaAnalysisLogLevel(v22, v23);
    if ((int)v24 >= 3)
    {
      uint64_t v26 = VCPLogInstance(v24, v25);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      __int16 v27 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v15, v27))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  v27,  "[MAClientHandler] Failed to consume sandbox extension",  buf,  2u);
      }

      goto LABEL_14;
    }
  }

        objc_autoreleasePoolPop(v5);
      }

      id v1 = [obj countByEnumeratingWithState:&v32 objects:v38 count:16];
    }

    while (v1);
  }
}

    objc_autoreleasePoolPop(v12);
  }

  while (!v15);
  if (v15 == 9)
  {
    if ((self->_subtasks & 8) == 0) {
      goto LABEL_31;
    }
    if (v10 == -1) {
      goto LABEL_31;
    }
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( -[VCPPhotosQuickFaceIdentificationManager fetchEntityForModelType:evaluationMode:allowUnverifiedPerson:]( v9,  "fetchEntityForModelType:evaluationMode:allowUnverifiedPerson:",  0LL,  0LL,  0LL));
    os_log_type_t v19 = 10 * (uint64_t)[v18 count] > (unint64_t)(11 * v10);

    if (!v19) {
      goto LABEL_31;
    }
    uint64_t v22 = MediaAnalysisLogLevel(v20, v21);
    if ((int)v22 >= 7)
    {
      v24 = VCPLogInstance(v22, v23);
      __int16 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      uint64_t v26 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v25, v26))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "[FaceLibraryProcessing] Catch up VIP Persons Model",  buf,  2u);
      }
    }

    v8 = -[VCPPhotosQuickFaceIdentificationManager generateVIPModelWithType:ignoreLastGenerationTime:evaluationMode:allowUnverifiedPerson:modelGenerated:extendTimeout:andCancel:]( v9,  "generateVIPModelWithType:ignoreLastGenerationTime:evaluationMode:allowUnverifiedPerson:modelGen erated:extendTimeout:andCancel:",  0LL,  1LL,  0LL,  0LL,  buf,  v41,  v40);
    if (!v8)
    {
      if (buf[0])
      {
        __int16 v27 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
        [v27 accumulateInt64Value:1 forField:@"PeopleVIPGenerated" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
      }

  v31 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](v82, "photoLibrary"));
  v80 = (void *)objc_claimAutoreleasedReturnValue( +[VCPBatchAnalysisTask taskWithPhotoLibrary:]( &OBJC_CLASS___VCPBatchAnalysisTask,  "taskWithPhotoLibrary:",  v31));

  v32 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask cancel](v82, "cancel"));
  [v80 setCancel:v32];

  [v80 setPhotosChangeManager:v75];
  [v80 setProgressReporter:v76];
  [v80 setAllowStreaming:1];
  v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  v33 = 0LL;
  type = VCPLogToOSLogType[5];
  *(void *)&v34 = 138412802LL;
  v72 = v34;
  while (v33 < (unint64_t)objc_msgSend(v81, "count", v72))
  {
    v35 = objc_autoreleasePoolPush();
    if (-[VCPTask isCancelled](v82, "isCancelled"))
    {
      v78 = -128;
      v36 = 1;
    }

    else
    {
      v37 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
      [v37 pet];

      v38 = (void *)objc_claimAutoreleasedReturnValue([v81 objectAtIndexedSubscript:v33]);
      v39 = (void *)objc_claimAutoreleasedReturnValue([v38 localIdentifier]);
      [v77 addObject:v39];

      v40 = (void *)objc_claimAutoreleasedReturnValue( +[PHAssetResource vcp_allAcceptableResourcesForAsset:]( &OBJC_CLASS___PHAssetResource,  "vcp_allAcceptableResourcesForAsset:",  v38));
      location = 0LL;
      v41 = -[VCPBackgroundAnalysisTask missingAnalysisForAsset:existingAnalysis:resources:forLocalResourcesOnly:]( v82,  "missingAnalysisForAsset:existingAnalysis:resources:forLocalResourcesOnly:",  v38,  &location,  v40,  1LL);
      v42 = v41;
      if (v41)
      {
        v43 = VCPSignPostLog(v41);
        v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        v45 = os_signpost_id_generate(v44);

        v47 = VCPSignPostLog(v46);
        v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        v49 = v48;
        if (v45 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v48))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v49,  OS_SIGNPOST_INTERVAL_BEGIN,  v45,  "VCPMediaTypeAnalysisTask_UnpackComputeSync",  (const char *)&unk_100199097,  buf,  2u);
        }

        v79 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v40, "mad_computeSyncResource"));
        v50 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask cancel](v82, "cancel"));
        v51 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v79,  "mad_existingAnalysisFromComputeSyncForAsset:allowDownload:cancel:",  v38,  0,  v50));

        v53 = VCPSignPostLog(v52);
        v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
        v55 = v54;
        if (v45 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v54))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v55,  OS_SIGNPOST_INTERVAL_END,  v45,  "VCPMediaTypeAnalysisTask_UnpackComputeSync",  (const char *)&unk_100199097,  buf,  2u);
        }

        if (v51)
        {
          objc_storeStrong(&location, v51);
          v42 = -[VCPBackgroundAnalysisTask missingAnalysisForAsset:withExistingComputeSyncAnalysis:resources:forLocalResourcesOnly:]( v82,  "missingAnalysisForAsset:withExistingComputeSyncAnalysis:resources:forLocalResourcesOnly:",  v38,  &location,  v40,  1LL);
          v57 = MediaAnalysisLogLevel(v42, v56);
          if ((int)v57 >= 5)
          {
            v59 = VCPLogInstance(v57, v58);
            v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
            if (os_log_type_enabled(v60, type))
            {
              v73 = (void *)objc_claimAutoreleasedReturnValue([v38 localIdentifier]);
              v61 = MediaAnalysisTypeShortDescription(objc_msgSend(location, "vcp_types"));
              v62 = (id)objc_claimAutoreleasedReturnValue(v61);
              v63 = MediaAnalysisTypeShortDescription(v42);
              v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
              *(_DWORD *)buf = v72;
              v85 = v73;
              v86 = 2112;
              v87 = v62;
              v88 = 2112;
              v89 = v64;
              _os_log_impl( (void *)&_mh_execute_header,  v60,  type,  "[%@] Reusing analysis results from compute sync (existing: %@, missing: %@)",  buf,  0x20u);
            }
          }
        }

        [v80 addAnalysis:v42 withExistingAnalysis:location forAsset:v38];
        [v80 cost];
        if (v65 >= 100.0)
        {
          [v80 start];
          v66 = [v80 error];
          if (v66)
          {
            v36 = 1;
            v78 = v66;
          }

          else
          {
            v67 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](v82, "photoLibrary"));
            v68 = (void *)objc_claimAutoreleasedReturnValue( +[VCPBatchAnalysisTask taskWithPhotoLibrary:]( &OBJC_CLASS___VCPBatchAnalysisTask,  "taskWithPhotoLibrary:",  v67));

            v69 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask cancel](v82, "cancel"));
            [v68 setCancel:v69];

            [v68 setPhotosChangeManager:v75];
            [v68 setProgressReporter:v76];
            v36 = 0;
            v80 = v68;
          }
        }

        else
        {
          v36 = 0;
        }
      }

      else
      {
        [v76 increaseProcessedJobCountByOne];
        v36 = 12;
      }
    }

    objc_autoreleasePoolPop(v35);
    if (v36 != 12 && v36) {
      goto LABEL_49;
    }
    ++v33;
  }

  [v80 cost];
LABEL_49:

LABEL_50:
  return v78;
}

  return v26;
}

LABEL_20:
  return v17;
}

    uint64_t v6 = sqlite3_step(ppStmt);
  }

  if (!(_DWORD)v6 || (_DWORD)v6 == 101)
  {
    uint64_t v6 = 0LL;
    goto LABEL_4;
  }

  return v21;
}

            uint64_t v15 = v25;

            uint64_t v10 = v71;
            goto LABEL_21;
          }

          v30 = VCPLogInstance(v23, v24);
          __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_FAULT))
          {
            v31 = (void *)objc_claimAutoreleasedReturnValue([v17 localIdentifier]);
            *(_DWORD *)buf = 138412546;
            v83 = v19;
            v84 = 2112;
            v85 = v31;
            _os_log_fault_impl( (void *)&_mh_execute_header,  (os_log_t)v27,  OS_LOG_TYPE_FAULT,  "[FaceCrop] Asset %@ containing face (%@) misses localIdentifier; skip",
              buf,
              0x16u);
          }
        }

        else
        {
          v29 = VCPLogInstance(v20, v21);
          __int16 v27 = (void *)objc_claimAutoreleasedReturnValue(v29);
          if (os_log_type_enabled((os_log_t)v27, OS_LOG_TYPE_FAULT)) {
            sub_10009C88C(v86, v17, &v87, (os_log_s *)v27);
          }
        }

    objc_autoreleasePoolPop(v14);
    if ((v15 | 4) != 4) {
      break;
    }
    ++v13;
  }

  v24 = -[VCPTimeMeasurement stop](v11, "stop");
  uint64_t v26 = MediaAnalysisLogLevel(v24, v25);
  if ((int)v26 >= 5)
  {
    id v28 = VCPLogInstance(v26, v27);
    v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    v30 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v29, v30))
    {
      -[VCPTimeMeasurement elapsedTimeSeconds](v11, "elapsedTimeSeconds");
      v32 = @"interrupted";
      *(_DWORD *)buf = 138412802;
      if (!v3) {
        v32 = @"finished";
      }
      v44 = v32;
      v45 = 2048;
      v46 = v31;
      v47 = 1024;
      v48 = v3;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Face Processing %@ after %0.6fs (%d)", buf, 0x1Cu);
    }
  }

  v33 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  -[VCPTimeMeasurement elapsedTimeSeconds](v11, "elapsedTimeSeconds");
  v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", vcvtpd_s64_f64(v34)));
  [v33 setValue:v35 forField:@"TotalAnalyzingTimeInSeconds" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];

  v37 = VCPSignPostLog(v36);
  v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
  v39 = v38;
  if (v10 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v38))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v39,  OS_SIGNPOST_INTERVAL_END,  spid,  "VCPFaceLibraryProcessingTask",  (const char *)&unk_100199097,  buf,  2u);
  }

  VCPPerformance_ReportSummary();
  (*((void (**)(void))v2->_completionHandler + 2))();

  return v3;
}

  if (a6) {
    *a6 = v49;
  }

  return v12;
}

    v31 = 0;
LABEL_67:

    goto LABEL_68;
  }

  v32 = MediaAnalysisLogLevel(v6, v7);
  if ((int)v32 >= 6)
  {
    v34 = VCPLogInstance(v32, v33);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v34);
    v35 = VCPLogToOSLogType[6];
    if (os_log_type_enabled((os_log_t)v10, v35))
    {
      LOWORD(v87) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v10,  v35,  "  No analysis database present; skipping backup",
        (uint8_t *)&v87,
        2u);
    }

    goto LABEL_20;
  }

  v31 = 0;
LABEL_68:

  return v31;
}

void sub_100005DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100006218( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, void *a25, void *a26)
{
  sub_10000421C((const void **)(v29 - 128));
  _Unwind_Resume(a1);
}

BOOL sub_100006308(id a1)
{
  return 0;
}

void sub_100006310(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = VCPSignPostLog();
  os_log_type_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = v5;
  os_signpost_id_t v7 = a1[7];
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    uint64_t v8 = a1[4];
    int v11 = 138412290;
    uint64_t v12 = v8;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v7,  "VCPMADServicePublicClientHandler_IOSurface",  "%@",  (uint8_t *)&v11,  0xCu);
  }

  if (a1[8])
  {
    uint64_t v9 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMADServicePublicClientHandler_IOSurface", v9 - a1[8]);
  }

  uint64_t v10 = a1[6];
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0LL, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v10 + 16))(v10, a1[5], 0LL);
  }
}

void sub_100006430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000644C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10000688C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

BOOL sub_10000697C(id a1)
{
  return 0;
}

void sub_100006984(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = VCPSignPostLog();
  os_log_type_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  uint64_t v6 = v5;
  os_signpost_id_t v7 = a1[7];
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    uint64_t v8 = a1[4];
    int v11 = 138412290;
    uint64_t v12 = v8;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v7,  "VCPMADServicePublicClientHandler_URL",  "%@",  (uint8_t *)&v11,  0xCu);
  }

  if (a1[8])
  {
    uint64_t v9 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMADServicePublicClientHandler_URL", v9 - a1[8]);
  }

  uint64_t v10 = a1[6];
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v10 + 16))(v10, 0LL, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v10 + 16))(v10, a1[5], 0LL);
  }
  sandbox_extension_release(a1[9]);
}

void sub_100006AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100006AC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  sandbox_extension_release(*(void *)(a1 + 40));
}

void sub_100006B14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100006F08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

id sub_100006FDC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

BOOL sub_100006FF8(id a1)
{
  return 0;
}

void sub_100007000(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = VCPSignPostLog();
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  os_signpost_id_t v10 = a1[6];
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    uint64_t v11 = a1[4];
    int v13 = 138412290;
    uint64_t v14 = v11;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v10,  "VCPMADServicePublicClientHandler_VideoE2E",  "%@",  (uint8_t *)&v13,  0xCu);
  }

  if (a1[7])
  {
    uint64_t v12 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMADServicePublicClientHandler_VideoE2E", v12 - a1[7]);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
  sandbox_extension_release(a1[8]);
}

void sub_10000713C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000715C(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  sandbox_extension_release(*(void *)(a1 + 40));
}

void sub_1000071A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10000720C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000075EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000779C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100007A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100007ADC(id a1)
{
  return 0;
}

void sub_100007AE4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = VCPSignPostLog();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  os_signpost_id_t v7 = a1[6];
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    uint64_t v8 = a1[4];
    int v10 = 138412290;
    uint64_t v11 = v8;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v7,  "VCPMADServicePublicClientHandler_TextPrewarmingE2E",  "%@",  (uint8_t *)&v10,  0xCu);
  }

  if (a1[7])
  {
    uint64_t v9 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMADServicePublicClientHandler_TextPrewarmingE2E", v9 - a1[7]);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_100007BE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100007C04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100007EE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL sub_100007F94(id a1)
{
  return 0;
}

void sub_100007F9C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = VCPSignPostLog();
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  os_signpost_id_t v10 = a1[6];
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    uint64_t v11 = a1[4];
    int v13 = 138412290;
    uint64_t v14 = v11;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v10,  "VCPMADServicePublicClientHandler_TextProcessingE2E",  "%@",  (uint8_t *)&v13,  0xCu);
  }

  if (a1[7])
  {
    uint64_t v12 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMADServicePublicClientHandler_TextProcessingE2E", v12 - a1[7]);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_1000080BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000080DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100008370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000083EC(id a1)
{
  return 0;
}

void sub_1000083F4(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = VCPSignPostLog();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  os_signpost_id_t v7 = a1[6];
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    uint64_t v8 = a1[4];
    int v10 = 138412290;
    uint64_t v11 = v8;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v7,  "VCPMADServicePublicClientHandler_MultiModalPrewarmingE2E",  "%@",  (uint8_t *)&v10,  0xCu);
  }

  if (a1[7])
  {
    uint64_t v9 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMADServicePublicClientHandler_MultiModalPrewarmingE2E", v9 - a1[7]);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_1000084F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100008514(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000087B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL sub_100008844(id a1)
{
  return 0;
}

void sub_10000884C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = VCPSignPostLog();
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  os_signpost_id_t v10 = a1[6];
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    uint64_t v11 = a1[4];
    int v13 = 138412290;
    uint64_t v14 = v11;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v10,  "VCPMADServicePublicClientHandler_MultiModalProcessingE2E",  "%@",  (uint8_t *)&v13,  0xCu);
  }

  if (a1[7])
  {
    uint64_t v12 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMADServicePublicClientHandler_MultiModalProcessingE2E", v12 - a1[7]);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_10000896C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000898C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100009238( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21)
{
  _Block_object_dispose((const void *)(v30 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000093E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000093F4(uint64_t a1)
{
}

uint64_t sub_1000093FC(uint64_t a1, double a2)
{
  id v4 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) started];
  if ((int)MediaAnalysisLogLevel(v4, v5) >= 5)
  {
    uint64_t v6 = VCPLogInstance();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    os_log_type_t v8 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v7, v8))
    {
      int v10 = 134217984;
      double v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Scene Processing progress: %.2f%%", (uint8_t *)&v10, 0xCu);
    }
  }

  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16LL))( (float)((float)(*(float *)(a1 + 56) * (float)*(unint64_t *)(a1 + 48)) * 100.0)
         + a2 * *(float *)(a1 + 56));
}

void sub_100009520(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel(v2, v3) >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v5, v6))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) elapsedTimeSeconds];
      int v8 = 134217984;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Scene Processing completed in %0.6fs", (uint8_t *)&v8, 0xCu);
    }
  }

void sub_100009600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100009618(uint64_t a1, double a2)
{
  id v4 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) started];
  if ((int)MediaAnalysisLogLevel(v4, v5) >= 5)
  {
    uint64_t v6 = VCPLogInstance();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    os_log_type_t v8 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v7, v8))
    {
      int v10 = 134217984;
      double v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Face Processing progress: %.2f%%", (uint8_t *)&v10, 0xCu);
    }
  }

  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16LL))( (float)((float)(*(float *)(a1 + 56) * (float)*(unint64_t *)(a1 + 48)) * 100.0)
         + a2 * *(float *)(a1 + 56));
}

void sub_10000973C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel(v2, v3) >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v5, v6))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) elapsedTimeSeconds];
      int v8 = 134217984;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Face Processing completed in %0.6fs", (uint8_t *)&v8, 0xCu);
    }
  }

void sub_10000981C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100009834(uint64_t a1, double a2)
{
  id v4 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) started];
  if ((int)MediaAnalysisLogLevel(v4, v5) >= 5)
  {
    uint64_t v6 = VCPLogInstance();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    os_log_type_t v8 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v7, v8))
    {
      int v10 = 134217984;
      double v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "OCR Processing progress: %.2f%%", (uint8_t *)&v10, 0xCu);
    }
  }

  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16LL))( (float)((float)(*(float *)(a1 + 56) * (float)*(unint64_t *)(a1 + 48)) * 100.0)
         + a2 * *(float *)(a1 + 56));
}

void sub_100009958(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel(v2, v3) >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v5, v6))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) elapsedTimeSeconds];
      int v8 = 134217984;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "OCR Processing completed in %0.6fs", (uint8_t *)&v8, 0xCu);
    }
  }

void sub_100009A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100009A50(uint64_t a1, double a2)
{
  id v4 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) started];
  if ((int)MediaAnalysisLogLevel(v4, v5) >= 5)
  {
    uint64_t v6 = VCPLogInstance();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    os_log_type_t v8 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v7, v8))
    {
      int v10 = 134217984;
      double v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Full Analysis progress: %.2f%%", (uint8_t *)&v10, 0xCu);
    }
  }

  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16LL))( (float)((float)(*(float *)(a1 + 56) * (float)*(unint64_t *)(a1 + 48)) * 100.0)
         + a2 * *(float *)(a1 + 56));
}

void sub_100009B74(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel(v2, v3) >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v5, v6))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) elapsedTimeSeconds];
      int v8 = 134217984;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Full Analysis completed in %0.6fs", (uint8_t *)&v8, 0xCu);
    }
  }

void sub_100009C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100009C6C(uint64_t a1, double a2)
{
  id v4 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) started];
  if ((int)MediaAnalysisLogLevel(v4, v5) >= 5)
  {
    uint64_t v6 = VCPLogInstance();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    os_log_type_t v8 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v7, v8))
    {
      int v10 = 134217984;
      double v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unified Analysis progress: %.2f%%", (uint8_t *)&v10, 0xCu);
    }
  }

  return (*(uint64_t (**)(double))(*(void *)(a1 + 32) + 16LL))( (float)((float)(*(float *)(a1 + 56) * (float)*(unint64_t *)(a1 + 48)) * 100.0)
         + a2 * *(float *)(a1 + 56));
}

void sub_100009D90(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) stop];
  if ((int)MediaAnalysisLogLevel(v2, v3) >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v5, v6))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) elapsedTimeSeconds];
      int v8 = 134217984;
      uint64_t v9 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unified Analysis completed in %0.6fs", (uint8_t *)&v8, 0xCu);
    }
  }

void sub_100009E70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id VCPTransactionWithName(uint64_t a1)
{
  id v1 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString, "stringWithFormat:", @"com.apple.mediaanalysisd.%@", a1));
  id v2 = (void *)os_transaction_create([v1 UTF8String]);

  return v2;
}

void sub_100009EE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t VCPIsRemoteIOSTask()
{
  return 0LL;
}

id MADTaskIdentifierForBackgroundTask(uint64_t a1, uint64_t a2)
{
  switch(a1)
  {
    case 1LL:
      uint64_t v3 = &OBJC_CLASS___MADPhotosFullBackgroundSystemTask;
      goto LABEL_11;
    case 2LL:
      uint64_t v3 = &OBJC_CLASS___MADPhotosSceneBackgroundSystemTask;
      goto LABEL_11;
    case 3LL:
      uint64_t v3 = &OBJC_CLASS___MADPhotosFaceBackgroundSystemTask;
      goto LABEL_11;
    case 10LL:
      uint64_t v3 = &OBJC_CLASS___MADPhotosOCRBackgroundSystemTask;
LABEL_11:
      id result = (id)objc_claimAutoreleasedReturnValue(-[__objc2_class identifier](v3, "identifier"));
      break;
    default:
      uint64_t v4 = MediaAnalysisLogLevel(a1, a2);
      if ((int)v4 >= 4)
      {
        uint64_t v6 = VCPLogInstance(v4, v5);
        uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
        os_log_type_t v8 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v7, v8))
        {
          int v10 = 134217984;
          uint64_t v11 = a1;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "MADTaskIdentifierForBackgroundTask: Unsupported analysis type %lu",  (uint8_t *)&v10,  0xCu);
        }
      }

      id result = 0LL;
      break;
  }

  return result;
}

id StripMovieCurationResultsForEligibleAsset(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v53 = a3;
  v51 = v5;
  id v52 = v6;
  unint64_t v7 = (unint64_t)objc_msgSend(v52, "vcp_types");
  os_log_type_t v8 = v52;
  if ([v5 isVideo])
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v5 mediaAnalysisProperties]);
    id v10 = [v9 mediaAnalysisVersion];
    unint64_t v11 = MediaAnalysisVersion;

    os_log_type_t v8 = v52;
    if ((unint64_t)v10 < v11)
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v52, "vcp_results"));
      int v13 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:MediaAnalysisMovieSummaryResultsKey]);

      uint64_t v14 = v13;
      id v15 = [v13 count];
      id v16 = v52;
      if (v15)
      {
        v50 = v13;
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v13 objectAtIndexedSubscript:0]);
        uint64_t v18 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([v17 objectForKeyedSubscript:MediaAnalysisResultStartKey]);
        CMTimeMakeFromDictionary(&v60, v18);

        id v16 = v52;
        if ((v7 & 0x40000) != 0)
        {
          CMTime time1 = v60;
          CMTime time2 = kCMTimeZero;
          uint64_t v19 = CMTimeCompare(&time1, &time2);
          id v16 = v52;
          if ((int)v19 >= 1)
          {
            uint64_t v21 = MediaAnalysisLogLevel(v19, v20);
            if ((int)v21 >= 5)
            {
              uint64_t v23 = VCPLogInstance(v21, v22);
              v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
              os_log_type_t v25 = VCPLogToOSLogType[5];
              if (os_log_type_enabled(v24, v25))
              {
                uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v51 mediaAnalysisProperties]);
                unsigned int v27 = [v26 mediaAnalysisVersion];
                uint64_t v28 = MediaAnalysisTypeShortDescription(v7);
                uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
                *(_DWORD *)buf = 138412802;
                id v62 = v53;
                __int16 v63 = 1024;
                *(_DWORD *)v64 = v27;
                *(_WORD *)&v64[4] = 2112;
                *(void *)&v64[6] = v29;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "%@ Movie asset has non-zero keyframe time in existing outdated analysis (existing version %d, existing types %@), request movie curation reprocessing",  buf,  0x1Cu);
              }
            }

            id v49 = [v52 mutableCopy];
            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v7 & 0xFFFFFFFFFFFBFFFFLL));
            [v49 setObject:v30 forKeyedSubscript:MediaAnalysisAnalysisTypesKey];

            v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "vcp_results"));
            id v32 = [v31 mutableCopy];

            __int128 v56 = 0u;
            __int128 v57 = 0u;
            __int128 v54 = 0u;
            __int128 v55 = 0u;
            uint64_t v33 = MediaAnalysisResultsKeysForAnalysisTypes(0x40000LL);
            v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
            id v35 = [v34 countByEnumeratingWithState:&v54 objects:v65 count:16];
            id v37 = v35;
            if (v35)
            {
              uint64_t v38 = *(void *)v55;
              os_log_type_t v39 = VCPLogToOSLogType[7];
              do
              {
                v40 = 0LL;
                do
                {
                  if (*(void *)v55 != v38) {
                    objc_enumerationMutation(v34);
                  }
                  uint64_t v41 = *(void *)(*((void *)&v54 + 1) + 8LL * (void)v40);
                  uint64_t v42 = MediaAnalysisLogLevel(v35, v36);
                  if ((int)v42 >= 7)
                  {
                    uint64_t v44 = VCPLogInstance(v42, v43);
                    v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
                    if (os_log_type_enabled(v45, v39))
                    {
                      v46 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:v41]);
                      *(_DWORD *)buf = 138412802;
                      id v62 = v53;
                      __int16 v63 = 2112;
                      *(void *)v64 = v41;
                      *(_WORD *)&v64[8] = 2112;
                      *(void *)&v64[10] = v46;
                      _os_log_impl((void *)&_mh_execute_header, v45, v39, "%@ Clearing result %@: %@", buf, 0x20u);
                    }
                  }

                  id v35 = [v32 setObject:0 forKeyedSubscript:v41];
                  v40 = (char *)v40 + 1;
                }

                while (v37 != v40);
                id v35 = [v34 countByEnumeratingWithState:&v54 objects:v65 count:16];
                id v37 = v35;
              }

              while (v35);
            }

            [v49 setObject:v32 forKeyedSubscript:MediaAnalysisResultsKey];
            id v16 = v49;
          }
        }

        uint64_t v14 = v50;
      }

      v47 = v16;

      os_log_type_t v8 = v47;
    }
  }

  return v8;
}

void sub_10000A464( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, _Unwind_Exception *exception_object, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

id MergeKeyFrameResourceResultsIntoExistingAnalysis(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  id v6 = v4;
  if (v3)
  {
    id v6 = [v4 mutableCopy];
    unint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "vcp_results"));
    id v8 = [v7 mutableCopy];

    [v8 setObject:v3 forKeyedSubscript:MediaAnalysisKeyFrameResourceResultsKey];
    [v6 setObject:v8 forKeyedSubscript:MediaAnalysisResultsKey];
  }

  return v6;
}

void sub_10000A60C(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void MediaAnalysisDaemonReleaseSharedDataStores(void *a1)
{
  id v1 = a1;
  +[MADVectorDatabaseManager releaseSharedDatabaseWithPhotoLibrary:]( &OBJC_CLASS___MADVectorDatabaseManager,  "releaseSharedDatabaseWithPhotoLibrary:");
  +[MADVUWGalleryManager releaseSharedGalleryForPhotoLibrary:]( &OBJC_CLASS___MADVUWGalleryManager,  "releaseSharedGalleryForPhotoLibrary:",  v1);
  +[VCPDatabaseManager releaseSharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "releaseSharedDatabaseForPhotoLibrary:",  v1);
}

void sub_10000A6A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10000A6FC(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___NSOperationQueue);
  id v2 = (void *)qword_1001E6358;
  qword_1001E6358 = (uint64_t)v1;

  [(id)qword_1001E6358 setMaxConcurrentOperationCount:1];
}

void sub_10000A7AC(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  id v2 = (void *)qword_1001E6360;
  qword_1001E6360 = (uint64_t)v1;
}

LABEL_32:
      id v10 = v34;
      goto LABEL_39;
    }

    id v10 = v34;
    goto LABEL_40;
  }

    v95 = 0LL;
    __int128 v55 = -[MADPhotosTaskProvider _isAssetEligible:withPreviousStatus:previousAttempts:lastAttemptDate:allowDownload:]( self,  "_isAssetEligible:withPreviousStatus:previousAttempts:lastAttemptDate:allowDownload:",  v23,  &v97,  &v96,  &v95,  v5);
    __int128 v56 = v95;
    v58 = v56;
    if ((v55 & 1) != 0)
    {
      v59 = -[PHPhotoLibrary vcp_requiresDownloadForTask:]( self->_photoLibrary,  "vcp_requiresDownloadForTask:",  -[MADTaskProvider taskID](self, "taskID"));
      if ((_DWORD)v59 && !v5 && (v97 == 7 || v97 == 2))
      {
        v61 = MediaAnalysisLogLevel(v59, v60);
        if ((int)v61 >= 7)
        {
          __int16 v63 = VCPLogInstance(v61, v62);
          v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
          v65 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v64, v65))
          {
            *(_DWORD *)v101 = 138412290;
            v102 = v12;
            v66 = "%@ Asset requires resource download; skipping";
LABEL_60:
            _os_log_impl((void *)&_mh_execute_header, v64, v65, v66, v101, 0xCu);
            goto LABEL_61;
          }

          goto LABEL_61;
        }
      }

      else
      {
        if (self->_assetStage == 1 || v97 != 4)
        {
          v84 = MediaAnalysisLogLevel(v59, v60);
          if ((int)v84 >= 7)
          {
            v86 = VCPLogInstance(v84, v85);
            v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
            v88 = VCPLogToOSLogType[7];
            if (os_log_type_enabled(v87, v88))
            {
              *(_DWORD *)v101 = 138412290;
              v102 = v12;
              _os_log_impl((void *)&_mh_execute_header, v87, v88, "%@ Adding to process batch ...", v101, 0xCu);
            }
          }

          [v9 addPhotosAsset:v23 priority:self->_currentAssetPriority previousStatus:v97 attempts:v96 lastAttemptDate:v58];
          v89 = (void *)objc_claimAutoreleasedReturnValue([v9 assetLocalIdentifiers]);
          v90 = (void *)objc_claimAutoreleasedReturnValue([v23 localIdentifier]);
          v91 = [v89 containsObject:v90];

          if (v91)
          {
            v92 = (dispatch_queue_s *)self->_activeAssetsManagementQueue;
            v93[0] = _NSConcreteStackBlock;
            v93[1] = 3221225472LL;
            v93[2] = sub_10000E0CC;
            v93[3] = &unk_1001B9E00;
            v93[4] = self;
            v94 = v23;
            dispatch_sync(v92, v93);
          }

          goto LABEL_63;
        }

        v81 = MediaAnalysisLogLevel(v59, v60);
        if ((int)v81 >= 7)
        {
          v83 = VCPLogInstance(v81, v82);
          v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
          v65 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v64, v65))
          {
            *(_DWORD *)v101 = 138412290;
            v102 = v12;
            v66 = "%@ Asset has a previous hard failure; skipping";
            goto LABEL_60;
          }

          goto LABEL_61;
        }
      }
    }

    else
    {
      v78 = MediaAnalysisLogLevel(v56, v57);
      if ((int)v78 >= 7)
      {
        v80 = VCPLogInstance(v78, v79);
        v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
        v65 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v64, v65))
        {
          *(_DWORD *)v101 = 138412290;
          v102 = v12;
          v66 = "%@ Asset not eligible for processing; skipping";
          goto LABEL_60;
        }

  [v10 appendString:@"ALTER TABLE BackgroundActivitySchedulingHistory ADD COLUMN sessionLog TEXT;"];
LABEL_33:
  [v10 appendString:@"ALTER TABLE ProcessingStatus ADD COLUMN errorCode INTEGER DEFAULT 0;ALTER TABLE ProcessingStatus ADD COLUMN errorLine INTEGER DEFAULT 0;"];
LABEL_34:
  objc_msgSend(v10, "appendFormat:", @"PRAGMA user_version=%lu;", 11);
  [v10 appendString:@"PRAGMA journal_mode=WAL;PRAGMA page_size=4096;PRAGMA max_page_count=524288;"];
  return v10;
}

        v24 = -1LL;
        goto LABEL_33;
      }

  return (char)a3;
}

      objc_autoreleasePoolPop(v15);
      ++v14;
    }

    uint64_t v19 = MediaAnalysisLogLevel(v17, v18);
    uint64_t v21 = VCPLogInstance(v19, v20);
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, type))
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v16 asset]);
      v24 = (void *)objc_claimAutoreleasedReturnValue([v23 localIdentifier]);
      *(_DWORD *)buf = 138412290;
      __int16 v63 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  type,  "[Face][Process][%@] Asset has failure status; skipping",
        buf,
        0xCu);
    }

    goto LABEL_11;
  }

void sub_10000ADAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_9:
  }
}

  id v2 = 0LL;
LABEL_10:
  sqlite3_finalize(ppStmt);
  uint64_t v14 = v2;
  **(void **)(a1 + 64) = v14;

  return v8;
}
      }
    }

    else if ((int)v8 >= 6)
    {
      id v15 = VCPLogInstance(v8, v9);
      unint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      id v16 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v16))
      {
        uint64_t v17 = *(_DWORD *)(a1 + 72);
        uint64_t v22 = 67109120;
        uint64_t v23 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  v16,  "[MAClientHandler] MADRequestID %d completed",  (uint8_t *)&v22,  8u);
      }

      goto LABEL_9;
    }

    uint64_t v18 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
    [v18 removeObjectForKey:v19];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  uint64_t v20 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v21 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = 0LL;
}
  }

  id v16 = (void *)v4;
LABEL_11:
  uint64_t v17 = *(void *)(a1 + 40);
  uint64_t v18 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:a2 withDescription:v16];
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  (*(void (**)(uint64_t, void *))(v17 + 16))(v17, v19);
}
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 40) + 16LL));
}

  -[VCPMADFullAssetProcessingTask resetPendingBatch](self, "resetPendingBatch");
  id v16 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask progressHandler](self, "progressHandler"));

  if (v16)
  {
    uint64_t v18 = -[VCPBatchAnalysisTask count](self->_pendingBatch, "count");
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask progressHandler](self, "progressHandler"));
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[VCPProgressReporter reporterWithIntervalSeconds:andTotalJobCount:andBlock:]( &OBJC_CLASS___VCPProgressReporter,  "reporterWithIntervalSeconds:andTotalJobCount:andBlock:",  10LL,  v18,  v19));
  }

  uint64_t v20 = VCPSignPostLog(v17);
  uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v22 = os_signpost_id_generate(v21);

  v24 = VCPSignPostLog(v23);
  os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  uint64_t v26 = v25;
  if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v25))
  {
    LOWORD(v47) = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v26,  OS_SIGNPOST_INTERVAL_BEGIN,  v22,  "VCPMADFullAssetProcessingTask_Process",  (const char *)&unk_100199097,  (uint8_t *)&v47,  2u);
  }

  unsigned int v27 = -[VCPMADFullAssetProcessingTask processAssetsWithProgressReporter:]( self,  "processAssetsWithProgressReporter:",  v16);
  uint64_t v28 = v27;
  if (!(_DWORD)v27)
  {
    uint64_t v29 = VCPSignPostLog(v27);
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    v31 = v30;
    if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v30))
    {
      LOWORD(v47) = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v31,  OS_SIGNPOST_INTERVAL_END,  v22,  "VCPMADFullAssetProcessingTask_Process",  (const char *)&unk_100199097,  (uint8_t *)&v47,  2u);
    }
  }

  id v32 = (void *)objc_claimAutoreleasedReturnValue(+[VCPDownloadManager sharedManager](&OBJC_CLASS___VCPDownloadManager, "sharedManager"));
  [v32 flush];

  uint64_t v33 = -[PHPhotoLibrary publishPendingChanges](self->super._photoLibrary, "publishPendingChanges");
  if ((_DWORD)v33)
  {
    id v35 = MediaAnalysisLogLevel(v33, v34);
    if ((int)v35 >= 4)
    {
      id v37 = VCPLogInstance(v35, v36);
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      os_log_type_t v39 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v38, v39))
      {
        v47 = 138412290;
        v48 = @"[VCPMADFullAssetProcessingTask]";
        _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "%@ Failed to publish PHAssetPropertySetMediaAnalysis changes",  (uint8_t *)&v47,  0xCu);
      }
    }
  }

  v40 = [self->super._progressHandler commit];
  uint64_t v41 = v40;
  if (v40 != -108 && v40 != -36 && v40 != -23) {
    uint64_t v41 = v28;
  }

  return v41;
}
}
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}
  }

  return v6;
}
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 40) + 16LL));
}

void sub_10000AFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000B1C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000B4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10000B5A0(uint64_t a1)
{
  id result = [(id)objc_opt_class(*(void *)(a1 + 32)) enabledByDefault];
  byte_1001E6370 = (char)result;
  return result;
}

LABEL_26:
            goto LABEL_27;
          }

          v47 = 0u;
          v48 = 0u;
          v45 = 0u;
          v46 = 0u;
          uint64_t v14 = v6;
          id v15 = [v14 countByEnumeratingWithState:&v45 objects:v57 count:16];
          if (v15)
          {
            id v16 = v15;
            uint64_t v17 = *(void *)v46;
            do
            {
              for (j = 0LL; j != v16; j = (char *)j + 1)
              {
                if (*(void *)v46 != v17) {
                  objc_enumerationMutation(v14);
                }
                uint64_t v19 = *(void **)(*((void *)&v45 + 1) + 8LL * (void)j);
                uint64_t v20 = objc_autoreleasePoolPush();
                +[MADProgressManager updateProgressForTask:photoLibrary:reuseCachedValue:cancelOrExtendTimeoutBlock:]( MADProgressManager,  "updateProgressForTask:photoLibrary:reuseCachedValue:cancelOrExtendTimeoutBlock:",  [v19 unsignedIntegerValue],  v13,  0,  v7);
                objc_autoreleasePoolPop(v20);
              }

              id v16 = [v14 countByEnumeratingWithState:&v45 objects:v57 count:16];
            }

            while (v16);
          }

          a1 = v37;
          id v6 = v38;
          id v10 = v36;
          unint64_t v11 = v40;
          if (v7 && v7[2](v7))
          {
            +[MADProgressManager requestProgressUpdateForTasks:]( &OBJC_CLASS___MADProgressManager,  "requestProgressUpdateForTasks:",  v14);
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[MADProgressReporterBackgroundSystemTask sharedTask]( &OBJC_CLASS___MADProgressReporterBackgroundSystemTask,  "sharedTask"));
            uint64_t v44 = 0LL;
            [v21 submitTask:&v44];
            uint64_t v22 = v44;

            if (v22)
            {
              os_log_type_t v25 = MediaAnalysisLogLevel(v23, v24);
              if ((int)v25 >= 5)
              {
                unsigned int v27 = VCPLogInstance(v25, v26);
                uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
                if (os_log_type_enabled(v28, type))
                {
LABEL_24:
                  id v35 = (void *)objc_claimAutoreleasedReturnValue([a1 identifier]);
                  *(_DWORD *)buf = 138412546;
                  __int128 v54 = a1;
                  __int128 v55 = 2112;
                  __int128 v56 = v35;
                  _os_log_impl( (void *)&_mh_execute_header,  v28,  type,  "[%@][%@] Failed to request workload progress report task",  buf,  0x16u);
                }

    ((void (*)(void *, uint64_t))v16[2])(v16, 4294967278LL);
    goto LABEL_27;
  }

  multiuser_mode = 0;
  uint64_t v36 = mach_host_self();
  id v37 = host_check_multiuser_mode(v36, &multiuser_mode);
  if ((_DWORD)v37)
  {
    os_log_type_t v39 = MediaAnalysisLogLevel(v37, v38);
    if ((int)v39 >= 4)
    {
      uint64_t v41 = VCPLogInstance(v39, v40);
      uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
      uint64_t v43 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = a1[4];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v44;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "%@ Failed to query multi-user mode", (uint8_t *)&buf, 0xCu);
      }
    }
  }

  else if (multiuser_mode)
  {
    id v49 = MediaAnalysisLogLevel(v37, v38);
    if ((int)v49 >= 5)
    {
      v51 = VCPLogInstance(v49, v50);
      id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      id v53 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v52, v53))
      {
        __int128 v54 = a1[4];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v54;
        __int128 v55 = "%@ Device configured for multi-user mode; quitting";
LABEL_40:
        _os_log_impl((void *)&_mh_execute_header, v52, v53, v55, (uint8_t *)&buf, 0xCu);
      }

      uint64_t v23 = -108;
      goto LABEL_38;
    case 14:
      if ((int)MediaAnalysisLogLevel(self, a2) >= 3)
      {
        v24 = VCPLogInstance();
        os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        uint64_t v26 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v25, v26))
        {
          LOWORD(v31[0]) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Database open failure; disk may be full",
            (uint8_t *)v31,
            2u);
        }
      }

      uint64_t v18 = -23;
LABEL_32:
      *a3 = v18;
      return a4;
    case 18:
      if ((int)MediaAnalysisLogLevel(self, a2) >= 3)
      {
        unsigned int v27 = VCPLogInstance();
        uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        uint64_t v29 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v28, v29))
        {
          LOWORD(v31[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Database data size is too big", (uint8_t *)v31, 2u);
        }
      }

      uint64_t v23 = -50;
LABEL_38:
      *a3 = v23;
      return 1;
    default:
      if (v6 == -50) {
        return 1;
      }
      if (v6 != -23)
      {
LABEL_7:
        if ((int)MediaAnalysisLogLevel(self, a2) >= 3)
        {
          unint64_t v11 = VCPLogInstance();
          uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
          int v13 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v12, v13))
          {
            uint64_t v14 = *a3;
            v31[0] = 67109120;
            v31[1] = v14;
            _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unexpected database error (%d)", (uint8_t *)v31, 8u);
          }
        }

        return 0;
      }

      return a4;
  }

    objc_autoreleasePoolPop(v26);
  }

  while (!v29);
  if (v29 == 11)
  {
    if ((self->_subtasks & 8) == 0) {
      goto LABEL_38;
    }
    if (v41 == -1) {
      goto LABEL_38;
    }
    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue( -[VCPPhotosQuickFaceIdentificationManager fetchEntityForModelType:evaluationMode:allowUnverifiedPerson:]( v11,  "fetchEntityForModelType:evaluationMode:allowUnverifiedPerson:",  0LL,  0LL,  0LL));
    v31 = 10 * (uint64_t)[v30 count] > (unint64_t)(11 * v41);

    if (!v31) {
      goto LABEL_38;
    }
    v34 = MediaAnalysisLogLevel(v32, v33);
    if ((int)v34 >= 7)
    {
      uint64_t v36 = VCPLogInstance(v34, v35);
      id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      uint64_t v38 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v37, v38))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "[FaceLibraryProcessing] Catch up VIP Persons Model",  buf,  2u);
      }
    }

    uint64_t v9 = -[VCPPhotosQuickFaceIdentificationManager generateVIPModelWithType:ignoreLastGenerationTime:evaluationMode:allowUnverifiedPerson:modelGenerated:extendTimeout:andCancel:]( v11,  "generateVIPModelWithType:ignoreLastGenerationTime:evaluationMode:allowUnverifiedPerson:modelGen erated:extendTimeout:andCancel:",  0LL,  1LL,  0LL,  0LL,  buf,  v8,  v42);
    if (!v9)
    {
      if (buf[0])
      {
        os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
        [v39 accumulateInt64Value:1 forField:@"PeopleVIPGenerated" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
      }

    goto LABEL_27;
  }

  uint64_t v23 = MediaAnalysisLogLevel(v10, v11);
  if ((int)v23 >= 7)
  {
    os_log_type_t v25 = VCPLogInstance(v23, v24);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    uint64_t v21 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v20, v21))
    {
      id v49 = 138412290;
      v50 = v12;
      uint64_t v22 = "%@ Network unavailable; skipping";
      goto LABEL_20;
    }

    v68 = 0;
    goto LABEL_75;
  }

  os_log_type_t v25 = MediaAnalysisLogLevel(v7, v8);
  if ((int)v25 >= 7)
  {
    unsigned int v27 = VCPLogInstance(v25, v26);
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    uint64_t v29 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v383 localIdentifier]);
      v31 = MediaAnalysisTypeShortDescription(objc_msgSend(v384, "vcp_types"));
      id v32 = (id)objc_claimAutoreleasedReturnValue(v31);
      uint64_t v33 = (unint64_t)objc_msgSend(v384, "vcp_types");
      v34 = MediaAnalysisTypeRequiredForMoviePersistence;
      id v35 = MediaAnalysisTypeShortDescription(MediaAnalysisTypeRequiredForMoviePersistence);
      uint64_t v36 = v34 & v33;
      id v37 = (id)objc_claimAutoreleasedReturnValue(v35);
      *(_DWORD *)buf = 138413314;
      *(void *)v448 = v30;
      *(_WORD *)&v448[8] = 2112;
      *(void *)&v448[10] = v32;
      v449 = 2048;
      v450 = *(double *)&v36;
      v451 = 2112;
      v452 = v37;
      v453 = 2112;
      v454 = @"NO";
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "[%@] Update movie asset with analysis type %@ (%llu), required type %@, imageOnly:%@",  buf,  0x34u);
    }
  }

  uint64_t v38 = (unint64_t)objc_msgSend(v384, "vcp_types");
  v40 = MediaAnalysisTypeRequiredForMoviePersistence;
  if ((MediaAnalysisTypeRequiredForMoviePersistence & ~v38) != 0)
  {
    uint64_t v42 = MediaAnalysisLogLevel(v38, v39);
    if ((int)v42 >= 3)
    {
      uint64_t v44 = VCPLogInstance(v42, v43);
      v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      v46 = VCPLogToOSLogType[3];
      log = (VCPMovieChangeEntry *)v45;
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (void *)objc_claimAutoreleasedReturnValue([v383 localIdentifier]);
        v48 = MediaAnalysisTypeDescription(objc_msgSend(v384, "vcp_types"));
        id v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
        v50 = MediaAnalysisTypeDescription(v40);
        v51 = (void *)objc_claimAutoreleasedReturnValue(v50);
        *(_DWORD *)buf = 138412802;
        *(void *)v448 = v47;
        *(_WORD *)&v448[8] = 2112;
        *(void *)&v448[10] = v49;
        v449 = 2112;
        v450 = *(double *)&v51;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)log,  v46,  "[%@] updateMovieAsset : analysis types %@ does not include required types %@, skip",  buf,  0x20u);
      }

      goto LABEL_39;
    }

    goto LABEL_26;
  }

  log = objc_alloc_init(&OBJC_CLASS___VCPMovieChangeEntry);
  -[VCPMovieChangeEntry setAsset:](log, "setAsset:", v383);
  if (((unint64_t)objc_msgSend(v384, "vcp_types") & 0x200000000000) != 0)
  {
    v69 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v384, "vcp_results"));
    v70 = (void *)objc_claimAutoreleasedReturnValue([v69 objectForKeyedSubscript:MediaAnalysisMiCaVideoCaptionResultsKey]);

    uint64_t v41 = v70;
    if ([v70 count])
    {
      v71 = (void *)objc_claimAutoreleasedReturnValue([v70 objectAtIndexedSubscript:0]);
      v72 = (void *)objc_claimAutoreleasedReturnValue([v71 objectForKeyedSubscript:MediaAnalysisResultAttributesKey]);
      v73 = (void *)objc_claimAutoreleasedReturnValue([v72 objectForKeyedSubscript:MediaAnalysisResultVideoCaptionTextAttributeKey]);

      -[VCPMovieChangeEntry setVideoCaption:](log, "setVideoCaption:", v73);
      uint64_t v41 = v70;
    }

    else
    {
      -[VCPMovieChangeEntry setVideoCaption:](log, "setVideoCaption:", &stru_1001BE5A8);
    }
  }

  else
  {
    uint64_t v41 = 0LL;
  }

  if (+[VCPVideoCNNAnalyzer isMUBackboneEnabled]( &OBJC_CLASS___VCPVideoCNNAnalyzer,  "isMUBackboneEnabled")
    && ((unint64_t)objc_msgSend(v384, "vcp_types") & 0x80000000000) != 0)
  {
    -[VCPMovieChangeEntry setVideoEmbeddingVersion:](log, "setVideoEmbeddingVersion:", 70LL);
  }

  v86 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v384, "vcp_results"));
  v373 = v41;
  v375 = (void *)objc_claimAutoreleasedReturnValue([v86 objectForKeyedSubscript:MediaAnalysisMovieSummaryResultsKey]);

  if ([v375 count])
  {
    v87 = (void *)objc_claimAutoreleasedReturnValue([v375 objectAtIndexedSubscript:0]);
    v374 = (void *)objc_claimAutoreleasedReturnValue([v87 objectForKeyedSubscript:MediaAnalysisResultAttributesKey]);

    if (![v374 count]) {
      goto LABEL_71;
    }
    v88 = (void *)objc_claimAutoreleasedReturnValue([v375 objectAtIndexedSubscript:0]);
    v89 = v88;
    if (v88)
    {
      objc_msgSend(v88, "vcp_timerange");
    }

    else
    {
      v435 = 0u;
      v436 = 0u;
      v434 = 0u;
    }

    v433[0] = v434;
    v433[1] = v435;
    v433[2] = v436;
    -[VCPMovieChangeEntry setSummaryTimeRange:](log, "setSummaryTimeRange:", v433);

    v105 = (NSString *)objc_claimAutoreleasedReturnValue([v374 objectForKey:MediaAnalysisResultBestPlaybackCropAttributeKey]);
    v464 = NSRectFromString(v105);
    -[VCPMovieChangeEntry setBestPlaybackRect:]( log,  "setBestPlaybackRect:",  v464.origin.x,  v464.origin.y,  v464.size.width,  v464.size.height);

    -[VCPMovieChangeEntry bestPlaybackRect](log, "bestPlaybackRect");
    if (CGRectIsNull(v465)) {
      goto LABEL_71;
    }
    v106 = (void *)objc_claimAutoreleasedReturnValue([v375 objectAtIndexedSubscript:0]);
    v107 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue([v106 objectForKeyedSubscript:MediaAnalysisResultStartKey]);
    CMTimeMakeFromDictionary(&v432, v107);
    v431 = v432;
    -[VCPMovieChangeEntry setKeyFrameTime:](log, "setKeyFrameTime:", &v431);

    v108 = (void *)objc_claimAutoreleasedReturnValue([v375 objectAtIndexedSubscript:0]);
    v109 = objc_msgSend(v108, "vcp_flags");
    v110 = (void *)objc_claimAutoreleasedReturnValue([v375 objectAtIndexedSubscript:0]);
    objc_msgSend(v110, "vcp_quality");
    v112 = v111 * (double)((v109 >> 19) & 1);
    *(float *)&v112 = v112;
    -[VCPMovieChangeEntry setAutoplayScore:](log, "setAutoplayScore:", v112);

    if (!log) {
      goto LABEL_71;
    }
    -[VCPMovieChangeEntry summaryTimeRange](log, "summaryTimeRange");
    if ((v448[8] & 1) == 0) {
      goto LABEL_71;
    }
    -[VCPMovieChangeEntry summaryTimeRange](log, "summaryTimeRange");
    if ((v430 & 1) == 0) {
      goto LABEL_71;
    }
    -[VCPMovieChangeEntry summaryTimeRange](log, "summaryTimeRange");
    if (v429) {
      goto LABEL_71;
    }
    -[VCPMovieChangeEntry summaryTimeRange](log, "summaryTimeRange");
    if (v428 < 0) {
      goto LABEL_71;
    }
    -[VCPMovieChangeEntry keyFrameTime](log, "keyFrameTime");
    if ((v448[8] & 1) == 0) {
      goto LABEL_71;
    }
    v248 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v384, "vcp_results"));
    v249 = (void *)objc_claimAutoreleasedReturnValue([v248 objectForKeyedSubscript:MediaAnalysisKeyFrameResourceResultsKey]);

    if ([v249 count])
    {
      v250 = (void *)objc_claimAutoreleasedReturnValue([v249 objectAtIndexedSubscript:0]);
      v251 = v250 == 0LL;

      if (v251)
      {

        goto LABEL_71;
      }

      v252 = (void *)objc_claimAutoreleasedReturnValue([v249 objectAtIndexedSubscript:0]);
      -[VCPMovieChangeEntry setKeyFrameResource:](log, "setKeyFrameResource:", CFRetain(v252));

      ++self->_pendingResourceChangeCount;
    }

    else
    {
      -[VCPMovieChangeEntry setKeyFrameResource:](log, "setKeyFrameResource:", 0LL);
    }
  }

  else
  {
    v90 = *(_OWORD *)&kCMTimeRangeZero.start.epoch;
    v427[0] = *(_OWORD *)&kCMTimeRangeZero.start.value;
    v427[1] = v90;
    v427[2] = *(_OWORD *)&kCMTimeRangeZero.duration.timescale;
    -[VCPMovieChangeEntry setSummaryTimeRange:](log, "setSummaryTimeRange:", v427);
    v425 = *(_OWORD *)&kCMTimeZero.value;
    epoch = kCMTimeZero.epoch;
    -[VCPMovieChangeEntry setKeyFrameTime:](log, "setKeyFrameTime:", &v425);
    LODWORD(v91) = 0;
    -[VCPMovieChangeEntry setAutoplayScore:](log, "setAutoplayScore:", v91);
    -[VCPMovieChangeEntry setKeyFrameResource:](log, "setKeyFrameResource:", 0LL);
    -[VCPMovieChangeEntry setBestPlaybackRect:]( log,  "setBestPlaybackRect:",  CGRectNull.origin.x,  CGRectNull.origin.y,  CGRectNull.size.width,  CGRectNull.size.height);
  }

  -[VCPMovieChangeEntry bestPlaybackRect](log, "bestPlaybackRect");
  if (!CGRectIsNull(v455))
  {
    -[VCPMovieChangeEntry bestPlaybackRect](log, "bestPlaybackRect");
    x = v456.origin.x;
    y = v456.origin.y;
    width = v456.size.width;
    height = v456.size.height;
    if (CGRectGetMinX(v456) < 0.0) {
      goto LABEL_64;
    }
    v457.origin.x = x;
    v457.origin.y = y;
    v457.size.width = width;
    v457.size.height = height;
    if (CGRectGetMinX(v457) > 1.0) {
      goto LABEL_64;
    }
    v458.origin.x = x;
    v458.origin.y = y;
    v458.size.width = width;
    v458.size.height = height;
    if (CGRectGetMinY(v458) < 0.0) {
      goto LABEL_64;
    }
    v459.origin.x = x;
    v459.origin.y = y;
    v459.size.width = width;
    v459.size.height = height;
    if (CGRectGetMinY(v459) > 1.0) {
      goto LABEL_64;
    }
    v460.origin.x = x;
    v460.origin.y = y;
    v460.size.width = width;
    v460.size.height = height;
    if (CGRectGetMaxX(v460) < 0.0) {
      goto LABEL_64;
    }
    v461.origin.x = x;
    v461.origin.y = y;
    v461.size.width = width;
    v461.size.height = height;
    if (CGRectGetMaxX(v461) > 1.0) {
      goto LABEL_64;
    }
    v462.origin.x = x;
    v462.origin.y = y;
    v462.size.width = width;
    v462.size.height = height;
    if (CGRectGetMaxY(v462) < 0.0) {
      goto LABEL_64;
    }
    v463.origin.x = x;
    v463.origin.y = y;
    v463.size.width = width;
    v463.size.height = height;
    if (CGRectGetMaxY(v463) > 1.0) {
      goto LABEL_64;
    }
  }

  objc_msgSend(v384, "vcp_quality");
  *(float *)&v92 = v92;
  -[VCPMovieChangeEntry setVideoScore:](log, "setVideoScore:", v92);
  -[VCPMovieChangeEntry videoScore](log, "videoScore");
  if (v93 < 0.0 || (-[VCPMovieChangeEntry videoScore](log, "videoScore"), v94 > 1.0))
  {
LABEL_64:
    v68 = 0;
    goto LABEL_73;
  }

  v95 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v384, "vcp_results"));
  v374 = (void *)objc_claimAutoreleasedReturnValue([v95 objectForKeyedSubscript:MediaAnalysisActivityLevelResultsKey]);

  if ([v374 count])
  {
    v97 = (void *)objc_claimAutoreleasedReturnValue([v374 objectAtIndexedSubscript:0]);
    v98 = (void *)objc_claimAutoreleasedReturnValue([v97 objectForKeyedSubscript:MediaAnalysisResultQualityKey]);
    [v98 floatValue];
    -[VCPMovieChangeEntry setActivityScore:](log, "setActivityScore:");

    -[VCPMovieChangeEntry activityScore](log, "activityScore");
    if (v99 >= 0.0)
    {
      -[VCPMovieChangeEntry activityScore](log, "activityScore");
      if (v100 <= 1.0) {
        goto LABEL_77;
      }
    }

  if (a5) {
    *a5 = v25;
  }
  uint64_t v43 = *(_DWORD *)(*(void *)&buf[8] + 24LL);
LABEL_35:

  _Block_object_dispose(buf, 8);
  objc_sync_exit(obj);

  return v43;
}

  return v41;
}

LABEL_25:
                unint64_t v11 = v40;
              }
            }

            goto LABEL_26;
          }
        }
    }
}
      }
    }

    else
    {
      uint64_t v33 = MediaAnalysisWPResultsKey;
      v34 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:MediaAnalysisWPResultsKey]);
      id v35 = [v34 count] == (id)1;

      if (v35)
      {
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:v33]);
        os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue([v36 objectAtIndexedSubscript:0]);

        if (v25)
        {
          id v37 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s objectForKeyedSubscript:]( v25,  "objectForKeyedSubscript:",  MediaAnalysisResultWPAttributeKey));
          uint64_t v38 = v37;
          if (v37)
          {
            [v37 floatValue];
            v40 = v39;
            uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v5 results]);
            LODWORD(v42) = v40;
            [v41 setWallpaperScore:v42];

            id v15 = 0;
          }

          else
          {
            id v15 = -18;
          }
        }

        else
        {
          id v15 = -18;
        }

        goto LABEL_25;
      }

      id v15 = -18;
    }

    goto LABEL_27;
  }

  unsigned int v27 = MediaAnalysisLogLevel(0LL, v6);
  if ((int)v27 >= 4)
  {
    uint64_t v29 = VCPLogInstance(v27, v28);
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    v31 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v30, v31))
    {
      *(_DWORD *)buf = 134217984;
      v46 = 0x3FE0000000000000LL;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "No sceneprint data for WP analysis; using default value %f",
        buf,
        0xCu);
    }
  }

  id v16 = (id)objc_claimAutoreleasedReturnValue([v5 results]);
  LODWORD(v32) = 0.5;
  [v16 setWallpaperScore:v32];
  id v15 = 0;
LABEL_27:

  return v15;
}
      }

  uint64_t v29 = sqlite3_exec(self->_database, "ROLLBACK TO Analysis;", 0LL, 0LL, 0LL);
  v31 = MediaAnalysisLogLevel(v29, v30);
  if ((int)v31 >= 3)
  {
    uint64_t v33 = VCPLogInstance(v31, v32);
    v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    id v35 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v34, v35))
    {
      *(_DWORD *)buf = 138412290;
      v47 = (const char *)v8;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to update results for asset %@", buf, 0xCu);
    }
  }

  uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager",  v43));
  objc_msgSend( v42,  "accumulateInt64Value:forField:andEvent:",  -[NSMutableArray count](self->_faceCropEntries, "count"),  @"NumberOfFacecropsAnalyzed",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");

  -[NSMutableArray removeAllObjects](self->_faceCropEntries, "removeAllObjects");
}
    }
  }
}

        uint64_t v36 = 10;
      }

      goto LABEL_27;
    }

    uint64_t v36 = 1;
LABEL_27:
    objc_autoreleasePoolPop(v35);
    if (v36 != 10 && v36)
    {
      id v16 = -128;
      goto LABEL_46;
    }

    ++v32;
  }

  if ([v31 count])
  {
    -[VCPPhotosMaintenanceProcessingTask _persistBackfillForAssets:photoLibrary:database:]( self,  "_persistBackfillForAssets:photoLibrary:database:",  v31,  v72,  v71);
    v70 = &v70[(void)[v31 count]];
  }

  v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v58 timeIntervalSinceReferenceDate];
  -[os_log_s setValue:forKey:](v71, "setValue:forKey:", (uint64_t)v59, @"LastComputeSyncBackfillTimestamp");

  CMTime v60 = -[os_log_s commit](v71, "commit");
  id v62 = MediaAnalysisLogLevel(v60, v61);
  if ((int)v62 >= 5)
  {
    v64 = VCPLogInstance(v62, v63);
    v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
    v66 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v65, v66))
    {
      *(_DWORD *)buf = 134217984;
      v74 = v70;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "[ComputeSync|Backfill] Completed backfill for total %lu assets",  buf,  0xCu);
    }
  }

  id v16 = 0;
LABEL_46:

  int v13 = (os_log_s *)v69;
LABEL_47:

  id v6 = v71;
LABEL_48:

LABEL_49:
  return v16;
}
        }
      }

      else
      {
        uint64_t v20 = MediaAnalysisLogLevel(v16, v17);
        if ((int)v20 >= 5)
        {
          uint64_t v22 = VCPLogInstance(v20, v21);
          uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, type))
          {
            v24 = (void *)objc_claimAutoreleasedReturnValue([v12 photoLibraryURL]);
            os_log_type_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 path]);
            *(_DWORD *)buf = 138412290;
            v64 = v25;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  type,  "Compute sync not supported for Photo Library (%@); skipping backfill",
              buf,
              0xCu);
          }

          goto LABEL_25;
        }
      }

      id v15 = 8;
LABEL_27:
      objc_autoreleasePoolPop(v13);
      if ((v15 | 8) != 8)
      {

        if ((v14 & 1) != 0) {
          goto LABEL_45;
        }
        return v8;
      }

      unint64_t v11 = (char *)v11 + 1;
    }

    while (v9 != v11);
    uint64_t v29 = -[NSArray countByEnumeratingWithState:objects:count:]( obja,  "countByEnumeratingWithState:objects:count:",  &v55,  v65,  16LL);
    uint64_t v9 = v29;
    if (v29) {
      continue;
    }
    break;
  }
}

LABEL_27:
        MediaAnalysisDaemonReleaseSharedDataStores(v13);
        objc_autoreleasePoolPop(context);
      }

      uint64_t v41 = [v10 countByEnumeratingWithState:&v49 objects:v58 count:16];
    }

    while (v41);
  }
}
}

  sqlite3_finalize(ppStmt);
  return v4;
}
      }
    }

    else
    {
      id v15 = MediaAnalysisLogLevel(v11, v12);
      if ((int)v15 >= 6)
      {
        uint64_t v17 = VCPLogInstance(v15, v16);
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        uint64_t v19 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v43 = 138412290;
          uint64_t v44 = v9;
          uint64_t v20 = "  Backup outdated (%@); performing backup";
LABEL_26:
          _os_log_impl((void *)&_mh_execute_header, v18, v19, v20, (uint8_t *)&v43, 0xCu);
          goto LABEL_27;
        }

        goto LABEL_27;
      }
    }

    os_log_type_t v39 = 1;
LABEL_28:

    goto LABEL_29;
  }
                  }

void sub_10000C0EC(_Unwind_Exception *a1)
{
}

void sub_10000C128(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 7)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v10 = 138412290;
      uint64_t v11 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "%@ Updating scheduling history session log ...",  (uint8_t *)&v10,  0xCu);
    }
  }

  id v9 = [(id)objc_opt_class(*(void *)(a1 + 40)) taskID];
  VCPCoreAnalyticsSessionLogDatabaseUpdate((uint64_t)v9, *(void **)(a1 + 48), 0, -1.0);
}

uint64_t sub_10000C208(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10000C218(uint64_t a1)
{
}

void sub_10000C220(uint64_t a1, double a2)
{
  if ((int)MediaAnalysisLogLevel() >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v8 = 138412546;
      uint64_t v9 = v7;
      __int16 v10 = 2048;
      double v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%@ %.2f%% complete", (uint8_t *)&v8, 0x16u);
    }
  }

uint64_t sub_10000C2FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10000C308(uint64_t a1, uint64_t a2)
{
  id v4 = [*(id *)(a1 + 32) timeIntervalSinceNow];
  double v6 = v5;
  double v7 = -v5;
  uint64_t v9 = MediaAnalysisLogLevel(v4, v8);
  if ((int)v9 >= 5)
  {
    uint64_t v11 = VCPLogInstance(v9, v10);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    os_log_type_t v13 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = @"Interrupted";
      uint64_t v15 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138413058;
      if (!(_DWORD)a2) {
        uint64_t v14 = @"Finished";
      }
      uint64_t v34 = v15;
      __int16 v35 = 2112;
      uint64_t v36 = v14;
      __int16 v37 = 2048;
      double v38 = v7;
      __int16 v39 = 1024;
      int v40 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%@ %@ after %0.6fs (%d)", buf, 0x26u);
    }
  }

  if ((VCPIsRemoteIOSTask() & 1) == 0)
  {
    [*(id *)(a1 + 48) destroy];
    id v16 = [(id)objc_opt_class(*(void *)(a1 + 56)) taskID];
    VCPCoreAnalyticsSessionLogDatabaseUpdate((uint64_t)v16, *(void **)(a1 + 32), a2, v7);
    id v17 = [(id)objc_opt_class(*(void *)(a1 + 56)) taskID];
    VCPCoreAnalyticsReportEventDasScheduling((uint64_t)v17, a2, v7);
    VCPCoreAnalyticsSendAllAnalysisSession();
  }

  uint64_t v18 = *(void *)(*(void *)(a1 + 80) + 8LL);
  uint64_t v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = 0LL;

  uint64_t v22 = MediaAnalysisLogLevel(v20, v21);
  if ((int)v22 >= 5)
  {
    uint64_t v24 = VCPLogInstance(v22, v23);
    os_log_type_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    os_log_type_t v26 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v34 = v27;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%@ Finished background processing", buf, 0xCu);
    }
  }

  if (v6 < -300.0)
  {
    if ([(id)objc_opt_class(*(void *)(a1 + 56)) taskID] == (id)2
      || [(id)objc_opt_class(*(void *)(a1 + 56)) taskID] == (id)3
      || [(id)objc_opt_class(*(void *)(a1 + 56)) taskID] == (id)10
      || [(id)objc_opt_class(*(void *)(a1 + 56)) taskID] == (id)12)
    {
      uint64_t v28 = &off_1001C8F28;
    }

    else
    {
      if ([(id)objc_opt_class(*(void *)(a1 + 56)) taskID] != (id)1) {
        return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16LL))();
      }
      uint64_t v28 = &off_1001C8F40;
    }

    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    v31[2] = sub_10000C5E8;
    v31[3] = &unk_1001B99C8;
    id v32 = *(id *)(a1 + 64);
    uint64_t v29 = objc_retainBlock(v31);
    [(id)objc_opt_class(*(void *)(a1 + 56)) reportProgressForTasks:v28 cancelOrExtendTimeoutBlock:v29];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

uint64_t sub_10000C5E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v3 pet];

  return 0LL;
}

uint64_t sub_10000C63C(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  [a3 code]);
}

uint64_t sub_10000C66C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10000CB78(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 40LL);
  return result;
}

uint64_t sub_10000CC2C(uint64_t result)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(result + 32) + 44LL);
  return result;
}

void sub_10000CCAC(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 40);
  if (v2 != -23808)
  {
    if (*(_DWORD *)(*(void *)(a1 + 32) + 40LL)) {
      return;
    }
    int v7 = MediaAnalysisLogLevel();
    if (v2 == -128)
    {
      if (v7 >= 5)
      {
        uint64_t v8 = VCPLogInstance();
        uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
        os_log_type_t v10 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v9, v10))
        {
          uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 24LL);
          int v20 = 138412290;
          uint64_t v21 = v11;
          uint64_t v12 = "%@ Processing canceled; stopping";
          os_log_type_t v13 = v9;
          os_log_type_t v14 = v10;
          uint32_t v15 = 12;
LABEL_15:
          _os_log_impl((void *)&_mh_execute_header, v13, v14, v12, (uint8_t *)&v20, v15);
          goto LABEL_16;
        }

        goto LABEL_16;
      }
    }

    else if (v7 >= 3)
    {
      uint64_t v16 = VCPLogInstance();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      os_log_type_t v17 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v9, v17))
      {
        uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 24LL);
        int v19 = *(_DWORD *)(a1 + 40);
        int v20 = 138412546;
        uint64_t v21 = v18;
        __int16 v22 = 1024;
        int v23 = v19;
        uint64_t v12 = "%@ Processing failed (%d); stopping";
        os_log_type_t v13 = v9;
        os_log_type_t v14 = v17;
        uint32_t v15 = 18;
        goto LABEL_15;
      }

LABEL_16:
    }

    *(_DWORD *)(*(void *)(a1 + 32) + 40LL) = *(_DWORD *)(a1 + 40);
    return;
  }

  if ((int)MediaAnalysisLogLevel() >= 4)
  {
    uint64_t v3 = VCPLogInstance();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 24LL);
      int v20 = 138412290;
      uint64_t v21 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "%@ Processing failed due to download throttling; stopping downloads",
        (uint8_t *)&v20,
        0xCu);
    }
  }

  *(_DWORD *)(*(void *)(a1 + 32) + 44LL) = -23808;
}

  v45 = NSLocalizedDescriptionKey;
  double v38 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[MAClientHandler] Failed to calculate cluster accuracy against GroundTruth %@ with MADRequestID %d",  v11,  v10));
  v46 = v38;
  __int16 v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v46,  &v45,  1LL));
  int v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v22,  v39));
  ((void (**)(id, id, void *))v12)[2](v12, 0LL, v40);

LABEL_17:
}

    [*(id *)(a1 + 40) setStatus:v10];
    goto LABEL_17;
  }

  [*(id *)(a1 + 40) setDownloadURL:v5];
LABEL_17:
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 80LL));
}

    [*(id *)(a1 + 40) setStatus:v10];
    goto LABEL_17;
  }

  [*(id *)(a1 + 40) setDownloadURL:v5];
LABEL_17:
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 128LL));
}
    }
  }

  else
  {
    v31 = MediaAnalysisLogLevel(v14, v15);
    if ((int)v31 >= 3)
    {
      uint64_t v33 = VCPLogInstance(v31, v32);
      os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      uint64_t v34 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v26, v34))
      {
        __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v9 photoLibrary]);
        os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue([v35 photoLibraryURL]);
        os_log_type_t v13 = objc_claimAutoreleasedReturnValue([v5 path]);
        uint64_t v36 = VCPProcessingStatusDescription(a4);
        __int16 v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
        *(_DWORD *)buf = 138412802;
        v80 = v13;
        v81 = 2048;
        v82 = v11;
        v83 = 2112;
        v84 = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  v34,  "[FaceLibraryProcessing][UNEXPECTED] Retry Library %@ with %lu eligible %@ assets",  buf,  0x20u);
      }

      goto LABEL_16;
    }
  }

  v74 = VCPLogToOSLogType[3];
  v75 = VCPLogToOSLogType[7];
  type = VCPLogToOSLogType[6];
  *(void *)&uint64_t v24 = 134218242LL;
  v73 = v24;
  do
  {
    double v38 = objc_autoreleasePoolPush();
    __int16 v39 = (id)-[VCPFaceLibraryProcessingTask isCancelled](self, "isCancelled");
    if ((v39 & 1) != 0)
    {
      os_log_type_t v13 = 4294967168LL;
LABEL_20:
      uint64_t v41 = 1;
      goto LABEL_62;
    }

    if ((a4 == 7 || a4 == 2)
      && (os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "photoLibrary", v73)),
          __int16 v39 = objc_msgSend(v5, "vcp_supportsInMemoryDownload"),
          (_DWORD)v39))
    {
      uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v9 photoLibrary]);
      uint64_t v43 = objc_msgSend(v42, "vcp_allowInMemoryDownload");

      uint64_t v44 = v43 ^ 1;
    }

    else
    {
      uint64_t v44 = 0;
    }

    if (a4 == 7 || a4 == 2) {

    }
    if (v44)
    {
      v45 = MediaAnalysisLogLevel(v39, v40);
      if ((int)v45 < 6)
      {
        os_log_type_t v13 = 0LL;
        goto LABEL_20;
      }

      v47 = VCPLogInstance(v45, v46);
      v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
      if (os_log_type_enabled(v48, type))
      {
        id v49 = VCPProcessingStatusDescription(a4);
        v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
        *(_DWORD *)buf = 138412290;
        v80 = (uint64_t)v50;
        _os_log_impl( (void *)&_mh_execute_header,  v48,  type,  "[FaceLibraryProcessing] Internet unavailable; skip %@ assets",
          buf,
          0xCu);
      }

      v51 = 0LL;
      uint64_t v41 = 1;
    }

    else
    {
      id v52 = (void *)objc_claimAutoreleasedReturnValue([v9 database]);
      v78 = 0LL;
      id v53 = [v52 fetchEligibleToRetryLocalIdentifiers:&v78 withProcessingStatus:a4 andTaskID:3 andFetchLimit:100];
      v48 = (os_log_s *)v78;

      if ((_DWORD)v53 == -108 || (_DWORD)v53 == -36)
      {
        v51 = (uint64_t)v53;
      }

      else
      {
        v51 = (uint64_t)v53;
        if ((_DWORD)v53 != -23) {
          v51 = v13;
        }
      }

      uint64_t v41 = 1;
      if ((_DWORD)v53 == -108 || (_DWORD)v53 == -36 || (_DWORD)v53 == -23) {
        goto LABEL_61;
      }
      __int128 v54 = -[os_log_s count](v48, "count");
      if (v54)
      {
        __int128 v56 = MediaAnalysisLogLevel(v54, v55);
        if ((int)v56 >= 7)
        {
          v58 = VCPLogInstance(v56, v57);
          v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
          if (os_log_type_enabled(v59, v75))
          {
            CMTime v60 = -[os_log_s count](v48, "count");
            *(_DWORD *)buf = v73;
            v80 = (uint64_t)v60;
            v81 = 2112;
            v82 = v48;
            _os_log_impl( (void *)&_mh_execute_header,  v59,  v75,  "[FaceLibraryProcessing] Screening %lu assets: %@",  buf,  0x16u);
          }
        }

        v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "photoLibrary", v73));
        objc_msgSend(v9, "setAllowStreaming:", objc_msgSend(v61, "vcp_allowInMemoryDownload"));

        id v62 = -[VCPFaceLibraryProcessingTask _screenLocalIdentifiers:withTask:andPreviousStatus:andProgressReporter:]( self,  "_screenLocalIdentifiers:withTask:andPreviousStatus:andProgressReporter:",  v48,  v9,  a4,  v77);
        v64 = v62;
        if (!(_DWORD)v62)
        {
          uint64_t v41 = 0;
          goto LABEL_61;
        }

        v65 = MediaAnalysisLogLevel(v62, v63);
        if ((int)v65 < 3)
        {
          v51 = v64;
          goto LABEL_61;
        }

        v67 = VCPLogInstance(v65, v66);
        v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
        if (os_log_type_enabled(v68, v74))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v68,  v74,  "[FaceLibraryProcessing] Failed to screen assets",  buf,  2u);
        }

        v51 = v64;
      }

      else
      {
        v69 = MediaAnalysisLogLevel(0LL, v55);
        if ((int)v69 < 7)
        {
          uint64_t v41 = 11;
          goto LABEL_61;
        }

        v71 = VCPLogInstance(v69, v70);
        v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
        if (os_log_type_enabled(v68, v75))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, v75, "[FaceLibraryProcessing] No qualified assets", buf, 2u);
        }

        uint64_t v41 = 11;
      }
    }
      }
    }

    int v23 = 0;
LABEL_18:
    sub_10000421C(cf1);
    goto LABEL_24;
  }

  uint64_t v24 = MediaAnalysisLogLevel(0LL, v10);
  if ((int)v24 >= 4)
  {
    os_log_type_t v26 = VCPLogInstance(v24, v25);
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    uint64_t v28 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v27, v28))
    {
      LOWORD(cf1[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "Failed to query client entitlements; denying connection",
        (uint8_t *)cf1,
        2u);
    }
  }

  int v23 = 0;
LABEL_24:
  sub_10000421C((const void **)&v39);

  return v23;
}

  [*(id *)(a1 + 40) timeIntervalSinceNow];
  uint64_t v30 = v29;
  [*(id *)(a1 + 48) destroy];
  v31 = -v30;
  VCPCoreAnalyticsSessionLogDatabaseUpdate(*(void *)(a1 + 72), *(void **)(a1 + 40), a2, v31);
  VCPCoreAnalyticsReportEventDasScheduling(*(void *)(a1 + 72), a2, v31);
  VCPCoreAnalyticsSendAllAnalysisSession();
  id v32 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADQoSManager sharedManager](&OBJC_CLASS___VCPMADQoSManager, "sharedManager"));
  [v32 disable];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

        objc_autoreleasePoolPop(v5);
      }

      uint64_t v1 = [obj countByEnumeratingWithState:&v30 objects:v36 count:16];
    }

    while (v1);
  }
}

LABEL_7:
  os_log_type_t v26 = 0;
LABEL_14:

  return v26;
}

  sub_10000421C((const void **)&pixelBuffer);
LABEL_9:

  return v14;
}

  uint64_t v24 = -1LL;
LABEL_12:

LABEL_33:
  return v24;
}

LABEL_50:
        -[MADPhotosTaskProvider increaseProcessedJobCountByOne](self, "increaseProcessedJobCountByOne");
        goto LABEL_51;
      }
    }

    else
    {
    }
  }

  if ((id)-[MADTaskProvider taskID](self, "taskID") != (id)1)
  {
    id v53 = objc_msgSend(v23, "vcp_needsProcessingForTask:", -[MADTaskProvider taskID](self, "taskID"));
    if ((v53 & 1) == 0)
    {
      v72 = MediaAnalysisLogLevel(v53, v54);
      if ((int)v72 >= 7)
      {
        v74 = VCPLogInstance(v72, v73);
        v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
        v76 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v75, v76))
        {
          *(_DWORD *)v101 = 138412290;
          v102 = v12;
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "%@ Asset is up-to-date; skipping", v101, 0xCu);
        }
      }

      analysisDatabase = self->_analysisDatabase;
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v23 localIdentifier]);
      -[VCPDatabaseWriter removeProcessingStatusForLocalIdentifier:andTaskID:]( analysisDatabase,  "removeProcessingStatusForLocalIdentifier:andTaskID:",  v29,  -[MADPhotosTaskProvider processingStatusTaskID](self, "processingStatusTaskID"));
      goto LABEL_49;
    }

  objc_autoreleasePoolPop(v11);
LABEL_51:
  v79 = *(const void **)(a1 + 64);
  if (v79) {
    CFRelease(v79);
  }
  v80 = *(const void **)(a1 + 72);
  if (v80) {
    CFRelease(v80);
  }
  v82 = *(void **)(a1 + 40);
  v81 = *(void *)(a1 + 48);
  v84 = *(void *)(v81 + 96);
  v83 = *(void *)(v81 + 104);
  v88[0] = _NSConcreteStackBlock;
  v88[1] = 3221225472LL;
  v88[2] = sub_1000296A8;
  v88[3] = &unk_1001BA768;
  v85 = v82;
  v86 = *(void *)(a1 + 48);
  v87 = *(void **)(a1 + 56);
  v89 = v85;
  v90 = v86;
  v91 = v87;
  (*(void (**)(uint64_t, const __CFString *, uint64_t, void *))(v83 + 16))( v83,  @"AssetProcessCompletion",  v84,  v88);

  objc_autoreleasePoolPop(v2);
}

            v97[0] = _NSConcreteStackBlock;
            v97[1] = 3221225472LL;
            v97[2] = sub_1000B2630;
            v97[3] = &unk_1001BA0C8;
            __int128 v57 = v85;
            v98 = v57;
            v80 = objc_retainBlock(v97);
            v93[0] = _NSConcreteStackBlock;
            v93[1] = 3221225472LL;
            v93[2] = sub_1000B267C;
            v93[3] = &unk_1001BCB30;
            v93[4] = self;
            v93[5] = v29;
            v58 = v57;
            v94 = v58;
            v59 = v37;
            v95 = v59;
            v96 = (char)v38;
            v81 = objc_retainBlock(v93);
            v87[0] = _NSConcreteStackBlock;
            v87[1] = 3221225472LL;
            v87[2] = sub_1000B27B4;
            v87[3] = &unk_1001BCB58;
            CMTime v60 = v58;
            v88 = v60;
            v61 = v59;
            v92 = (char)v38;
            v89 = v61;
            v90 = v29;
            v91 = self;
            id v62 = objc_retainBlock(v87);
            dispatch_group_enter((dispatch_group_t)self->_downloadGroup);
            __int16 v63 = +[PHAssetResourceManager vcp_requestFileURLForAssetResource:withTaskID:timeoutHandler:urlHandler:andCompletionHandler:]( &OBJC_CLASS___PHAssetResourceManager,  "vcp_requestFileURLForAssetResource:withTaskID:timeoutHandler:urlHandler:andCompletionHandler:",  v61,  3LL,  v80,  v81,  v62);
            if ((_DWORD)v63)
            {
              v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v63));
              v65 = (void *)objc_claimAutoreleasedReturnValue([v60 downloadRequests]);
              v66 = (void *)objc_claimAutoreleasedReturnValue([v29 localIdentifier]);
              [v65 setObject:v64 forKeyedSubscript:v66];

              [v60 updateLastestDownloadTimestamp];
            }

            else
            {
              dispatch_group_leave((dispatch_group_t)self->_downloadGroup);
              v69 = MediaAnalysisLogLevel(v67, v68);
              if ((int)v69 >= 4)
              {
                v71 = VCPLogInstance(v69, v70);
                v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
                if (os_log_type_enabled(v72, v76))
                {
                  v73 = objc_claimAutoreleasedReturnValue([v29 localIdentifier]);
                  *(_DWORD *)buf = 138412546;
                  *(void *)&uint8_t buf[4] = v73;
                  v111 = 2112;
                  v112 = v61;
                  v74 = (void *)v73;
                  _os_log_impl( (void *)&_mh_execute_header,  v72,  v76,  "[%@] Failed to request download resource %@",  buf,  0x16u);
                }
              }

              -[VCPFaceProcessingTask _asyncAnalyzeAsset:andBatchContext:]( self,  "_asyncAnalyzeAsset:andBatchContext:",  v29,  v60);
            }

            goto LABEL_58;
          }

          uint64_t v43 = MediaAnalysisLogLevel(v41, v42);
          if ((int)v43 >= 5)
          {
            v45 = VCPLogInstance(v43, v44);
            v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
            if (os_log_type_enabled(v46, type))
            {
              v47 = (void *)objc_claimAutoreleasedReturnValue([v29 localIdentifier]);
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v47;
              _os_log_impl( (void *)&_mh_execute_header,  v46,  type,  "[Face][Download][%@] Analysis complete with compute sync, skipping media resource download",  buf,  0xCu);
            }
          }

          v48 = (void *)objc_claimAutoreleasedReturnValue([v85 completedLocalIdentifiersFromComputeSync]);
          id v49 = (void *)objc_claimAutoreleasedReturnValue([v29 localIdentifier]);
          [v48 addObject:v49];

          -[VCPFaceProcessingTask _asyncAnalyzeAsset:andBatchContext:]( self,  "_asyncAnalyzeAsset:andBatchContext:",  v29,  v85);
LABEL_58:

LABEL_59:
          objc_autoreleasePoolPop(v30);
        }

        uint64_t v27 = [v79 countByEnumeratingWithState:&v100 objects:v113 count:16];
      }

      while (v27);
    }

    LODWORD(v4) = 0;
LABEL_62:
  }

  return (int)v4;
}

    v334 = v46;
    database = self->_database;
    v358 = 0LL;
    v87 = -[VCPDatabaseWriter queryChangeToken:forTaskID:andChangeTokenType:]( database,  "queryChangeToken:forTaskID:andChangeTokenType:",  &v358,  3LL,  2LL);
    v88 = v358;
    v329 = v88;
    if (v87)
    {
      v90 = MediaAnalysisLogLevel(v88, v89);
      if ((int)v90 >= 3)
      {
        v92 = VCPLogInstance(v90, v91);
        v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
        v94 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v93, v94))
        {
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v331;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v87;
          _os_log_impl( (void *)&_mh_execute_header,  v93,  v94,  "%@ Failed to query previous MADGDChangeBookmark (code:%d)",  buf,  0x12u);
        }
      }
    }

    if (v329)
    {
      v365 = 0LL;
      v366 = &v365;
      v367 = 0x2050000000LL;
      v95 = (void *)qword_1001E65D8;
      v368 = qword_1001E65D8;
      if (!qword_1001E65D8)
      {
        *(void *)buf = _NSConcreteStackBlock;
        *(void *)&buf[8] = 3221225472LL;
        *(void *)&buf[16] = sub_1000B86A8;
        v370 = (uint64_t)&unk_1001B9F10;
        v371[0] = &v365;
        sub_1000B86A8((uint64_t)buf);
        v95 = (void *)v366[3];
      }

      v96 = v95;
      _Block_object_dispose(&v365, 8);
      v357 = 0LL;
      v97 = (void *)objc_claimAutoreleasedReturnValue([v96 decodeFromData:v329 error:&v357]);
      v98 = v357;
      v100 = v98;
      if (!v97)
      {
        v101 = MediaAnalysisLogLevel(v98, v99);
        if ((int)v101 >= 3)
        {
          v103 = VCPLogInstance(v101, v102);
          v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
          v105 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v104, v105))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v331;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v100;
            _os_log_impl( (void *)&_mh_execute_header,  v104,  v105,  "%@ Failed to retrieve previous MADGDChangeBookmark - %@",  buf,  0x16u);
          }
        }
      }
    }

    else
    {
      v97 = 0LL;
    }

    v322 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    if (v97)
    {
      v353[0] = _NSConcreteStackBlock;
      v353[1] = 3221225472LL;
      v353[2] = sub_1000B61F8;
      v353[3] = &unk_1001BCC58;
      v106 = v322;
      v354 = v106;
      v107 = v331;
      v355 = v107;
      v356 = self;
      v108 = objc_retainBlock(v353);
      vuService = self->_vuService;
      v352 = 0LL;
      v328 = (void *)objc_claimAutoreleasedReturnValue( -[GDVUVisualUnderstandingService changesSince:error:body:]( vuService,  "changesSince:error:body:",  v97,  &v352,  v108));
      v110 = v352;
      v112 = v110;
      if (!v328)
      {
        v113 = MediaAnalysisLogLevel(v110, v111);
        if ((int)v113 >= 3)
        {
          v115 = VCPLogInstance(v113, v114);
          v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
          v117 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v116, v117))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v107;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v112;
            _os_log_impl( (void *)&_mh_execute_header,  v116,  v117,  "%@ Failed to fetch Gallery updates; falls to full sync - %@",
              buf,
              0x16u);
          }
        }

        v110 = [v106 removeAllObjects];
      }

      v118 = MediaAnalysisLogLevel(v110, v111);
      if ((int)v118 >= 7)
      {
        v120 = VCPLogInstance(v118, v119);
        v121 = (os_log_s *)objc_claimAutoreleasedReturnValue(v120);
        v122 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v121, v122))
        {
          v123 = [v106 count];
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v107;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v123;
          _os_log_impl((void *)&_mh_execute_header, v121, v122, "%@ Fetched %lu entities to update", buf, 0x16u);
        }
      }
    }

    else
    {
      v328 = 0LL;
    }

    v124 = mach_absolute_time();
    v125 = VCPSignPostLog(v124);
    v126 = (os_log_s *)objc_claimAutoreleasedReturnValue(v125);
    v127 = os_signpost_id_generate(v126);

    v129 = VCPSignPostLog(v128);
    v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
    v131 = v130;
    if (v127 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v130))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v131,  OS_SIGNPOST_INTERVAL_BEGIN,  v127,  "GalleryPhotosUpdate_UpdateEndToEnd",  (const char *)&unk_100199097,  buf,  2u);
    }

    v323 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    v133 = MediaAnalysisLogLevel(v323, v132);
    if ((int)v133 >= 6)
    {
      v135 = VCPLogInstance(v133, v134);
      v136 = (os_log_s *)objc_claimAutoreleasedReturnValue(v135);
      v137 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v136, v137))
      {
        v138 = [v322 count];
        *(_DWORD *)buf = 138412546;
        *(void *)&uint8_t buf[4] = v331;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v138;
        _os_log_impl( (void *)&_mh_execute_header,  v136,  v137,  "%@ Initiate all entities from Gallery to PhotosDB (with %lu changed entities)",  buf,  0x16u);
      }
    }

    v319 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    if ((-[PHPhotoLibrary vcp_isSyndicationLibrary](self->_photoLibrary, "vcp_isSyndicationLibrary") & 1) == 0)
    {
      v139 = (void *)objc_claimAutoreleasedReturnValue( +[MADGDUtilities fetchKeyFaceLocalIdentifiersForPhotoLibrary:]( &OBJC_CLASS___MADGDUtilities,  "fetchKeyFaceLocalIdentifiersForPhotoLibrary:",  self->_photoLibrary));
      if ([v139 count]) {
        [v319 unionSet:v139];
      }
    }

    v365 = 0LL;
    v366 = &v365;
    v367 = 0x2020000000LL;
    v368 = 0LL;
    v311 = (void *)objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary mad_allPersonsFetchOptionsWithDetectionTypes:andVerifiedTypes:]( self->_photoLibrary,  "mad_allPersonsFetchOptionsWithDetectionTypes:andVerifiedTypes:",  0LL,  0LL));
    [v311 setFetchLimit:1];
    [v311 setShouldPrefetchCount:1];
    v343[0] = _NSConcreteStackBlock;
    v343[1] = 3221225472LL;
    v343[2] = sub_1000B65A4;
    v343[3] = &unk_1001BCC80;
    v351 = &v365;
    v140 = v331;
    v344 = v140;
    v320 = v97;
    v345 = v320;
    v312 = v322;
    v346 = v312;
    v314 = v311;
    v347 = v314;
    v348 = self;
    v350 = v330;
    v313 = v319;
    v349 = v313;
    v324 = objc_retainBlock(v343);
    v141 = (void *)objc_claimAutoreleasedReturnValue(+[MADGDUtilities sharedInstance](&OBJC_CLASS___MADGDUtilities, "sharedInstance"));
    [v141 flush];

    v142 = self->_vuService;
    v342 = 0LL;
    v315 = (void *)objc_claimAutoreleasedReturnValue( -[GDVUVisualUnderstandingService entitiesFor:error:body:]( v142,  "entitiesFor:error:body:",  0LL,  &v342,  v324));
    v143 = v342;
    v316 = v143;
    if (v143
      || (v143 = (id)-[VCPFaceProcessingTask isCancelled](self, "isCancelled"), (v143 & 1) != 0))
    {
      v145 = MediaAnalysisLogLevel(v143, v144);
      if ((int)v145 < 3)
      {
        v150 = 0;
LABEL_118:
        v178 = VCPSignPostLog(v145);
        v179 = (os_log_s *)objc_claimAutoreleasedReturnValue(v178);
        v180 = v179;
        if (v127 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v179))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v180,  OS_SIGNPOST_INTERVAL_END,  v127,  "GalleryPhotosUpdate_UpdateEndToEnd",  (const char *)&unk_100199097,  buf,  2u);
        }

        if (v124)
        {
          v181 = mach_absolute_time();
          VCPPerformance_LogMeasurement("GalleryPhotosUpdate_UpdateEndToEnd", v181 - v124);
        }

        v182 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
        [v323 timeIntervalSinceNow];
        [v182 accumulateDoubleValue:@"PersonBuildingElapsedTimeInSeconds" forField:@"com.apple.mediaanalysisd.FaceAnalysisRunSession" andEvent:-v183];
        [v182 accumulateInt64Value:1 forField:@"NumberOfPersonBuildingEvents" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
        v321 = (void *)objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary mad_allPersonsFetchOptionsWithDetectionTypes:andVerifiedTypes:]( self->_photoLibrary,  "mad_allPersonsFetchOptionsWithDetectionTypes:andVerifiedTypes:",  &off_1001C9108,  &off_1001C9120));
        v184 = (void *)objc_claimAutoreleasedReturnValue(+[PHPerson fetchPersonsWithOptions:](&OBJC_CLASS___PHPerson, "fetchPersonsWithOptions:"));
        v185 = [v184 count];

        v188 = MediaAnalysisLogLevel(v186, v187);
        if ((int)v188 >= 7)
        {
          v190 = VCPLogInstance(v188, v189);
          v191 = (os_log_s *)objc_claimAutoreleasedReturnValue(v190);
          v192 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v191, v192))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v140;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v185;
            _os_log_impl( (void *)&_mh_execute_header,  v191,  v192,  "%@ Start Person Promoting with %lu graph verified person",  buf,  0x16u);
          }
        }

        v65 = -[VCPFaceProcessingTask promotePersons](self, "promotePersons");
        if (v65) {
          goto LABEL_202;
        }
        v193 = (void *)objc_claimAutoreleasedReturnValue(+[PHPerson fetchPersonsWithOptions:](&OBJC_CLASS___PHPerson, "fetchPersonsWithOptions:", v321));
        v194 = [v193 count];

        v197 = MediaAnalysisLogLevel(v195, v196);
        if ((int)v197 >= 6)
        {
          v199 = VCPLogInstance(v197, v198);
          v200 = (os_log_s *)objc_claimAutoreleasedReturnValue(v199);
          v201 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v200, v201))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v140;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v194 - v185;
            _os_log_impl( (void *)&_mh_execute_header,  v200,  v201,  "%@ Finished Person Promoting with %lu new Graph verified persons",  buf,  0x16u);
          }
        }

        if (a3 && v194 != v185) {
          *a3 = 1;
        }
        v310 = (void *)objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary mad_allPersonsFetchOptionsWithDetectionTypes:andVerifiedTypes:]( self->_photoLibrary,  "mad_allPersonsFetchOptionsWithDetectionTypes:andVerifiedTypes:",  &off_1001C9138,  &off_1001C9150));
        v202 = (void *)objc_claimAutoreleasedReturnValue(+[PHPerson fetchPersonsWithOptions:](&OBJC_CLASS___PHPerson, "fetchPersonsWithOptions:"));
        v203 = [v202 count];

        v206 = MediaAnalysisLogLevel(v204, v205);
        if ((int)v206 >= 7)
        {
          v208 = VCPLogInstance(v206, v207);
          v209 = (os_log_s *)objc_claimAutoreleasedReturnValue(v208);
          v210 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v209, v210))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v140;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v203;
            _os_log_impl( (void *)&_mh_execute_header,  v209,  v210,  "%@ Start Pet Promoting with %lu graph verified pet",  buf,  0x16u);
          }
        }

        v65 = -[VCPFaceProcessingTask promotePets](self, "promotePets");
        if (v65)
        {
LABEL_201:

LABEL_202:
          _Block_object_dispose(&v365, 8);

          v67 = v334;
          goto LABEL_203;
        }

        v211 = (void *)objc_claimAutoreleasedReturnValue(+[PHPerson fetchPersonsWithOptions:](&OBJC_CLASS___PHPerson, "fetchPersonsWithOptions:", v310));
        v212 = [v211 count];

        v215 = MediaAnalysisLogLevel(v213, v214);
        if ((int)v215 >= 6)
        {
          v217 = VCPLogInstance(v215, v216);
          v218 = (os_log_s *)objc_claimAutoreleasedReturnValue(v217);
          v219 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v218, v219))
          {
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v140;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v212 - v203;
            _os_log_impl( (void *)&_mh_execute_header,  v218,  v219,  "%@ Finished Pet Promoting with %lu new Graph verified pets",  buf,  0x16u);
          }
        }

        if (a3 && v212 != v203) {
          *a3 = 1;
        }
        v220 = +[PNPersonPromoter setProcessed:forLibrary:]( &OBJC_CLASS___PNPersonPromoter,  "setProcessed:forLibrary:",  1LL,  self->_photoLibrary);
        if ((v150 | v325 ^ 1) != 1)
        {
LABEL_200:
          -[VCPDatabaseWriter cacheProcessedAssetCountAfterPromoter:]( self->_database,  "cacheProcessedAssetCountAfterPromoter:",  -[VCPDatabaseWriter valueForKey:]( self->_database,  "valueForKey:",  VCPKeyValueNumberOfAssetsAnalyzedForPhotosFaceProcessing));
          goto LABEL_201;
        }

        v222 = MediaAnalysisLogLevel(v220, v221);
        if ((int)v222 >= 6)
        {
          v224 = VCPLogInstance(v222, v223);
          v225 = (os_log_s *)objc_claimAutoreleasedReturnValue(v224);
          v226 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v225, v226))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v140;
            _os_log_impl((void *)&_mh_execute_header, v225, v226, "%@ Start updating VUWGallery plugins", buf, 0xCu);
          }
        }

        v338[0] = _NSConcreteStackBlock;
        v338[1] = 3221225472LL;
        v338[2] = sub_1000B6D34;
        v338[3] = &unk_1001BCCA8;
        v338[4] = self;
        v318 = v140;
        v339 = v318;
        v227 = objc_retainBlock(v338);
        v228 = (void *)objc_claimAutoreleasedReturnValue( +[MADVUWGalleryManager sharedGalleryForPhotoLibrary:]( &OBJC_CLASS___MADVUWGalleryManager,  "sharedGalleryForPhotoLibrary:",  self->_photoLibrary));
        v326 = mach_absolute_time();
        v229 = VCPSignPostLog(v326);
        v230 = (os_log_s *)objc_claimAutoreleasedReturnValue(v229);
        v231 = os_signpost_id_generate(v230);

        v233 = VCPSignPostLog(v232);
        v234 = (os_log_s *)objc_claimAutoreleasedReturnValue(v233);
        v235 = v234;
        if (v231 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v234))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v235,  OS_SIGNPOST_INTERVAL_BEGIN,  v231,  "MADVUWGalleryPluginTypeDeviceOwner",  (const char *)&unk_100199097,  buf,  2u);
        }

        v337 = 0LL;
        v236 = [v228 updatePlugin:0 progressHandler:v227 error:&v337];
        v237 = v337;
        v239 = v237;
        if ((v236 & 1) == 0)
        {
          v237 = (id)MediaAnalysisLogLevel(v237, v238);
          if ((int)v237 >= 3)
          {
            v241 = v239;
            v242 = VCPLogInstance(v237, v240);
            v243 = (os_log_s *)objc_claimAutoreleasedReturnValue(v242);
            v244 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v243, v244))
            {
              *(_DWORD *)buf = 138412546;
              *(void *)&uint8_t buf[4] = v318;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v241;
              _os_log_impl((void *)&_mh_execute_header, v243, v244, "%@ Failed to update device owner - %@", buf, 0x16u);
            }

            v239 = v241;
          }
        }

        v245 = VCPSignPostLog(v237);
        v246 = (os_log_s *)objc_claimAutoreleasedReturnValue(v245);
        v247 = v246;
        if (v231 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v246))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v247,  OS_SIGNPOST_INTERVAL_END,  v231,  "MADVUWGalleryPluginTypeDeviceOwner",  (const char *)&unk_100199097,  buf,  2u);
        }

        if (v326)
        {
          v249 = mach_absolute_time();
          v248 = VCPPerformance_LogMeasurement("MADVUWGalleryPluginTypeDeviceOwner", v249 - v326);
        }

        v250 = DeviceWithGreymatterSupport(v248);
        if (!(_DWORD)v250) {
          goto LABEL_195;
        }
        v327 = mach_absolute_time();
        v252 = VCPSignPostLog(v327);
        v253 = (os_log_s *)objc_claimAutoreleasedReturnValue(v252);
        v254 = os_signpost_id_generate(v253);

        v256 = VCPSignPostLog(v255);
        v257 = (os_log_s *)objc_claimAutoreleasedReturnValue(v256);
        v258 = v257;
        if (v254 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v257))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v258,  OS_SIGNPOST_INTERVAL_BEGIN,  v254,  "MADVUWGalleryPluginTypePersonalization",  (const char *)&unk_100199097,  buf,  2u);
        }

        v336 = v239;
        v259 = [v228 updatePlugin:1 progressHandler:v227 error:&v336];
        v260 = v336;
        v261 = v239;
        v239 = v260;

        if ((v259 & 1) == 0)
        {
          v262 = MediaAnalysisLogLevel(v262, v263);
          if ((int)v262 >= 3)
          {
            v265 = v239;
            v266 = VCPLogInstance(v262, v264);
            v267 = (os_log_s *)objc_claimAutoreleasedReturnValue(v266);
            v268 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v267, v268))
            {
              *(_DWORD *)buf = 138412546;
              *(void *)&uint8_t buf[4] = v318;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v265;
              _os_log_impl( (void *)&_mh_execute_header,  v267,  v268,  "%@ Failed to update personalization - %@",  buf,  0x16u);
            }

            v239 = v265;
          }
        }

        v269 = VCPSignPostLog(v262);
        v270 = (os_log_s *)objc_claimAutoreleasedReturnValue(v269);
        v271 = v270;
        if (v254 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v270))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v271,  OS_SIGNPOST_INTERVAL_END,  v254,  "MADVUWGalleryPluginTypePersonalization",  (const char *)&unk_100199097,  buf,  2u);
        }

        if (v327)
        {
          v274 = mach_absolute_time();
          v272 = VCPPerformance_LogMeasurement("MADVUWGalleryPluginTypePersonalization", v274 - v327);
        }

        v275 = MediaAnalysisLogLevel(v272, v273);
        if ((int)v275 >= 6)
        {
          v277 = v239;
          v278 = VCPLogInstance(v275, v276);
          v279 = (os_log_s *)objc_claimAutoreleasedReturnValue(v278);
          v280 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v279, v280))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v318;
            _os_log_impl((void *)&_mh_execute_header, v279, v280, "%@ Finished personalization plugin", buf, 0xCu);
          }

          v239 = v277;
        }

        v250 = -[VCPDatabaseWriter valueForKey:]( self->_database,  "valueForKey:",  VCPKeyValuePrioritizedFaceCheckpointReportedTimestamp);
        if (!v250
          || (v281 = VCPKeyValuePersonalizationCheckpointReportedTimestamp,
              (v250 = -[VCPDatabaseWriter valueForKey:]( self->_database,  "valueForKey:",  VCPKeyValuePersonalizationCheckpointReportedTimestamp)) != 0))
        {
LABEL_195:
          v303 = MediaAnalysisLogLevel(v250, v251);
          if ((int)v303 >= 6)
          {
            v305 = v239;
            v306 = VCPLogInstance(v303, v304);
            v307 = (os_log_s *)objc_claimAutoreleasedReturnValue(v306);
            v308 = VCPLogToOSLogType[6];
            if (os_log_type_enabled(v307, v308))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v318;
              _os_log_impl( (void *)&_mh_execute_header,  v307,  v308,  "%@ Finished updating VUWGallery plugins",  buf,  0xCu);
            }

            v239 = v305;
          }

          goto LABEL_200;
        }

        v335 = v239;
        v282 = +[BGSystemTaskCheckpoints reportFeatureCheckpoint:forFeature:error:]( &OBJC_CLASS___BGSystemTaskCheckpoints,  "reportFeatureCheckpoint:forFeature:error:",  50LL,  802LL,  &v335);
        v283 = v335;
        v284 = v239;
        v239 = v283;

        if ((v282 & 1) != 0)
        {
          v287 = MediaAnalysisLogLevel(v285, v286);
          if ((int)v287 >= 5)
          {
            v289 = VCPLogInstance(v287, v288);
            v290 = (os_log_s *)objc_claimAutoreleasedReturnValue(v289);
            v291 = VCPLogToOSLogType[5];
            if (os_log_type_enabled(v290, v291))
            {
              *(_DWORD *)buf = 138412802;
              *(void *)&uint8_t buf[4] = v318;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = 30LL;
              *(_WORD *)&buf[22] = 2048;
              v370 = 802LL;
              v292 = "%@ Reported checkpoint %lu for %lu";
              v293 = v290;
              v294 = v291;
              v295 = 32;
LABEL_192:
              _os_log_impl((void *)&_mh_execute_header, v293, v294, v292, buf, v295);
              goto LABEL_193;
            }

            goto LABEL_193;
          }
        }

        else
        {
          v296 = MediaAnalysisLogLevel(v285, v286);
          if ((int)v296 >= 3)
          {
            v298 = VCPLogInstance(v296, v297);
            v290 = (os_log_s *)objc_claimAutoreleasedReturnValue(v298);
            v299 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v290, v299))
            {
              *(_DWORD *)buf = 138413058;
              *(void *)&uint8_t buf[4] = v318;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = 30LL;
              *(_WORD *)&buf[22] = 2048;
              v370 = 802LL;
              LOWORD(v371[0]) = 2112;
              *(void *)((char *)v371 + 2) = v239;
              v292 = "%@ Failed to report checkpoint %lu for %lu - %@";
              v293 = v290;
              v294 = v299;
              v295 = 42;
              goto LABEL_192;
            }

        os_log_type_t v10 = 0;
        goto LABEL_61;
      }
    }

    else
    {
    }

    *(void *)buf = 0LL;
    *(void *)&buf[8] = buf;
    *(void *)&buf[16] = 0x2020000000LL;
    v84 = 0;
    v73 = _NSConcreteStackBlock;
    v74 = 3221225472LL;
    v75 = sub_1000B9854;
    v76 = &unk_1001BBF78;
    v79 = buf;
    v77 = v9;
    v78 = self;
    v67 = objc_retainBlock(&v73);
    assetBatch = self->_assetBatch;
    if (v82 == 4)
    {
      if (-[NSMutableSet count](assetBatch, "count", v73, v74, v75, v76))
      {
        v69 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADQoSManager sharedManager](&OBJC_CLASS___VCPMADQoSManager, "sharedManager"));
        [v69 runBlock:v67 withTaskID:3];

        -[NSMutableSet removeAllObjects](self->_assetBatch, "removeAllObjects");
        os_log_type_t v10 = *(_DWORD *)(*(void *)&buf[8] + 24LL);
        if (v10) {
          goto LABEL_60;
        }
      }

      -[NSMutableSet addObject:](self->_assetBatch, "addObject:", v8);
      v70 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADQoSManager sharedManager](&OBJC_CLASS___VCPMADQoSManager, "sharedManager"));
      [v70 runBlock:v67 withTaskID:3];

      -[NSMutableSet removeAllObjects](self->_assetBatch, "removeAllObjects");
    }

    else
    {
      -[NSMutableSet addObject:](assetBatch, "addObject:", v8, v73, v74, v75, v76);
      v71 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADQoSManager sharedManager](&OBJC_CLASS___VCPMADQoSManager, "sharedManager"));
      [v71 runBlock:v67 withTaskID:3];

      -[NSMutableSet removeAllObjects](self->_assetBatch, "removeAllObjects");
    }

    os_log_type_t v10 = *(_DWORD *)(*(void *)&buf[8] + 24LL);
    if (v10)
    {
LABEL_60:

      _Block_object_dispose(buf, 8);
      goto LABEL_61;
    }

            objc_autoreleasePoolPop(context);
            if (v31 != 7 && v31) {
              goto LABEL_57;
            }
            uint64_t v24 = (char *)v24 + 1;
            os_log_type_t v25 = v17;
          }

          while (v24 != v76);
          __int16 v22 = [obj countByEnumeratingWithState:&v94 objects:v108 count:16];
        }

        while (v22);
      }
}

      v72 = v47;
      v73 = v48;
      v74 = 12;
      goto LABEL_51;
    }

    uint64_t v36 = MediaAnalysisLogLevel(0LL, v9);
    if ((int)v36 >= 3)
    {
      double v38 = VCPLogInstance(v36, v37);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v38);
      __int16 v39 = VCPLogToOSLogType[3];
      if (os_log_type_enabled((os_log_t)v11, v39))
      {
        LOWORD(v87) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v11,  v39,  "  Unknown backup date key; skipping backup",
          (uint8_t *)&v87,
          2u);
      }

      v31 = 0;
      goto LABEL_66;
    }

LABEL_61:
      }
    }

    -[MADPhotosTaskProvider increaseProcessedJobCountByOne](self, "increaseProcessedJobCountByOne");
LABEL_63:

    goto LABEL_51;
  }

  uint64_t v41 = -[MADPhotosTaskProvider checkCompatibilityForAsset:](self, "checkCompatibilityForAsset:", v23);
  if (v41)
  {
    uint64_t v43 = objc_msgSend( v23,  "mad_isFullAnalysisVersionOutdated:",  (id)-[MADPhotosTaskProvider processingStatusTaskID](self, "processingStatusTaskID") == (id)255);
    if ((v43 & 1) == 0)
    {
      v45 = MediaAnalysisLogLevel(v43, v44);
      if ((int)v45 >= 7)
      {
        v47 = VCPLogInstance(v45, v46);
        v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        id v49 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v48, v49))
        {
          *(_DWORD *)v101 = 138412290;
          v102 = v12;
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "%@ Asset is up-to-date; skipping", v101, 0xCu);
        }
      }

      v50 = self->_analysisDatabase;
      v51 = (void *)objc_claimAutoreleasedReturnValue([v23 localIdentifier]);
      -[VCPDatabaseWriter removeProcessingStatusForLocalIdentifier:andTaskID:]( v50,  "removeProcessingStatusForLocalIdentifier:andTaskID:",  v51,  -[MADPhotosTaskProvider processingStatusTaskID](self, "processingStatusTaskID"));

      if ((id)-[MADPhotosTaskProvider processingStatusTaskID](self, "processingStatusTaskID") != (id)1) {
        goto LABEL_50;
      }
      id v52 = self->_analysisDatabase;
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([v23 localIdentifier]);
      -[VCPDatabaseWriter removeProcessingStatusForLocalIdentifier:andTaskID:]( v52,  "removeProcessingStatusForLocalIdentifier:andTaskID:",  v29,  255LL);
      goto LABEL_49;
    }

    goto LABEL_32;
  }

  v67 = MediaAnalysisLogLevel(v41, v42);
  if ((int)v67 >= 3)
  {
    v69 = VCPLogInstance(v67, v68);
    v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
    v71 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v70, v71))
    {
      *(_DWORD *)v101 = 138412290;
      v102 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "%@ Asset incompatible with the associated task; skipping",
        v101,
        0xCu);
    }
  }
}
  }
}
  }

    os_log_type_t v13 = v51;
LABEL_62:
    objc_autoreleasePoolPop(v38);
  }

  while (!v41);
  if (v41 == 11) {
    uint64_t v21 = 0;
  }
  else {
    uint64_t v21 = v13;
  }
LABEL_66:

  return v21;
}

      goto LABEL_62;
    }

    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    if ((-[os_log_s fileExistsAtPath:](v18, "fileExistsAtPath:", v15) & 1) == 0)
    {
      v102 = NSFilePosixPermissions;
      v103 = &off_1001C8708;
      int v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v103,  &v102,  1LL));
      v101 = 0LL;
      int v20 = -[os_log_s createDirectoryAtPath:withIntermediateDirectories:attributes:error:]( v18,  "createDirectoryAtPath:withIntermediateDirectories:attributes:error:",  v15,  1LL,  v19,  &v101);
      uint64_t v21 = v101;

      if ((v20 & 1) == 0)
      {
        id v49 = MediaAnalysisLogLevel(v22, v23);
        if ((int)v49 < 3)
        {
LABEL_60:

          goto LABEL_61;
        }

        v51 = VCPLogInstance(v49, v50);
        os_log_type_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
        id v52 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v26, v52))
        {
          *(_DWORD *)buf = 138412290;
          v105 = (os_log_s *)v21;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  v52,  "  Failed to create intermediate restore directory (%@); restore failed",
            buf,
            0xCu);
        }

          v195 = 0LL;
          goto LABEL_120;
        }

        goto LABEL_62;
      }

      v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      v71 = [v9 detectionType];
      [v9 bodyWidth];
      if (v72 != 0.0)
      {
        v73 = VNAnimalIdentifierDog;
        if (v71 != 3) {
          v73 = VNAnimalIdentifierCat;
        }
        v74 = v73;
        v75 = objc_alloc(&OBJC_CLASS___VNClassificationObservation);
        LODWORD(v76) = 1.0;
        v77 = -[VNClassificationObservation initWithRequestRevision:identifier:confidence:]( v75,  "initWithRequestRevision:identifier:confidence:",  0LL,  v74,  v76);

        [v70 addObject:v77];
      }

      [v9 size];
      if (v78 != 0.0)
      {
        v79 = v181;
        if (v71 != 3) {
          v79 = v180;
        }
        v80 = v79;
        v81 = objc_alloc(&OBJC_CLASS___VNClassificationObservation);
        LODWORD(v82) = 1.0;
        v83 = -[VNClassificationObservation initWithRequestRevision:identifier:confidence:]( v81,  "initWithRequestRevision:identifier:confidence:",  0LL,  v80,  v82);

        [v70 addObject:v83];
      }

      v84 = [v67 setValue:v70 forKey:@"labels"];
      v86 = MediaAnalysisLogLevel(v84, v85);
      if ((int)v86 >= 7)
      {
        v88 = VCPLogInstance(v86, v87);
        v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
        if (os_log_type_enabled(v89, type))
        {
          v90 = (void *)objc_claimAutoreleasedReturnValue([v67 labels]);
          *(_DWORD *)buf = 138412546;
          *(void *)&uint8_t buf[4] = v196;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v90;
          _os_log_impl( (void *)&_mh_execute_header,  v89,  type,  "%@ Set animalObservation labels %@ to Gallery",  buf,  0x16u);
        }
      }

      [v9 duration];
      if (v91 <= 0.0) {
        v92 = objc_msgSend(*(id *)(a1 + 32), "vcp_isSyndicationLibrary");
      }
      else {
        v92 = 1;
      }
      v201 = 0LL;
      v100 = [v193 addWithObservation:v67 context:v198 priority:v92 at:0 output:&v203 error:&v201];
      v195 = v201;

      if (!v100) {
        goto LABEL_80;
      }
    }

    if (v203)
    {
      CMTime v60 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[PHFaceChangeRequest changeRequestForFace:]( &OBJC_CLASS___PHFaceChangeRequest,  "changeRequestForFace:",  v9));
      v101 = -[os_log_s setVuObservationID:](v60, "setVuObservationID:", v203);
      v103 = MediaAnalysisLogLevel(v101, v102);
      if ((int)v103 >= 7)
      {
        v105 = VCPLogInstance(v103, v104);
        v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
        if (os_log_type_enabled(v106, type))
        {
          v107 = [v9 trainingType];
          *(_DWORD *)buf = 138412802;
          *(void *)&uint8_t buf[4] = v196;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v107;
          *(_WORD *)&buf[18] = 2048;
          *(void *)&buf[20] = v203;
          _os_log_impl( (void *)&_mh_execute_header,  v106,  type,  "%@ Added face (trainingType:%d) with ObservationID %ld",  buf,  0x1Cu);
        }
      }

      ++v186;
      if ([v9 trainingType] == 1
        || [v9 trainingType] == 3
        || [v9 trainingType] == 5)
      {
        v108 = (void *)objc_claimAutoreleasedReturnValue([v9 personLocalIdentifier]);
        v192 = (void *)objc_claimAutoreleasedReturnValue(+[PHObject uuidFromLocalIdentifier:](&OBJC_CLASS___PHObject, "uuidFromLocalIdentifier:", v108));

        v110 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v192);
        if (v110)
        {
          v111 = [v9 trainingType];
          v200 = 0LL;
          v112 = [v193 tag:v203 with:v110 type:2 * (v111 == 5) error:&v200];
          v113 = v200;
          v115 = MediaAnalysisLogLevel(v113, v114);
          if ((v112 & 1) != 0)
          {
            if ((int)v115 >= 7)
            {
              v117 = VCPLogInstance(v115, v116);
              log = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
              if (os_log_type_enabled(log, type))
              {
                v118 = v203;
                v119 = (void *)objc_claimAutoreleasedReturnValue([v9 personLocalIdentifier]);
                *(_DWORD *)buf = 138412802;
                *(void *)&uint8_t buf[4] = v196;
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v118;
                *(_WORD *)&buf[22] = 2112;
                *(void *)&buf[24] = v119;
                _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "%@ Tagged confirming face (%ld) to person %@",  buf,  0x20u);
              }

              v120 = log;
              goto LABEL_116;
            }
          }

          else if ((int)v115 >= 3)
          {
            v135 = VCPLogInstance(v115, v116);
            v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v135);
            if (os_log_type_enabled(v120, v187))
            {
              v136 = v203;
              v137 = objc_claimAutoreleasedReturnValue([v9 personLocalIdentifier]);
              *(_DWORD *)buf = 138413058;
              *(void *)&uint8_t buf[4] = v196;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v136;
              *(_WORD *)&buf[22] = 2112;
              *(void *)&buf[24] = v137;
              LOWORD(v209[0]) = 2112;
              *(void *)((char *)v209 + 2) = v113;
              v138 = (void *)v137;
              _os_log_impl( (void *)&_mh_execute_header,  v120,  v187,  "%@ Failed to tag confirming face (%ld) to person %@ - %@",  buf,  0x2Au);
            }

LABEL_51:
  _Block_object_dispose(buf, 8);
}

          [v37 setStatus:v48];
        }

        else
        {
          v58 = VCPSignPostLog(v40);
          v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
          CMTime v60 = os_signpost_id_generate(v59);

          id v62 = VCPSignPostLog(v61);
          __int16 v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
          v64 = v63;
          if (v60 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v63))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v64,  OS_SIGNPOST_INTERVAL_BEGIN,  v60,  "VCPMADSceneAssetEntry_ProcessAsset",  (const char *)&unk_100199097,  buf,  2u);
          }

          v65 = (void *)objc_claimAutoreleasedReturnValue([v91 privateFileURL]);
          v97[0] = _NSConcreteStackBlock;
          v97[1] = 3221225472LL;
          v97[2] = sub_10002A130;
          v97[3] = &unk_1001BA7D8;
          v97[4] = v60;
          v97[5] = 0LL;
          -[VCPMADSceneAssetBatch _processAssetEntry:resourceURL:completionHandler:]( self,  "_processAssetEntry:resourceURL:completionHandler:",  v93,  v65,  v97);
        }

        goto LABEL_53;
      }

      if (v91)
      {
        __int128 v54 = MediaAnalysisLogLevel(v38, v39);
        if ((int)v54 < 4)
        {
          v48 = 4294943494LL;
          goto LABEL_51;
        }

        __int128 v56 = VCPLogInstance(v54, v55);
        v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
        if (os_log_type_enabled(v45, type))
        {
          __int128 v57 = [v91 isLocallyAvailable];
          *(_DWORD *)buf = 138412546;
          v103 = v89;
          v104 = 1024;
          *(_DWORD *)v105 = v57;
          _os_log_impl( (void *)&_mh_execute_header,  v45,  type,  "%@ Thumbnail PHAssetResource not locally available (Local: %d)",  buf,  0x12u);
        }
      }

      else
      {
        v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
        v100 = 0u;
        v101 = 0u;
        v98 = 0u;
        v99 = 0u;
        v66 = v87;
        v67 = [v66 countByEnumeratingWithState:&v98 objects:v106 count:16];
        if (v67)
        {
          v68 = *(void *)v99;
          do
          {
            for (i = 0LL; i != v67; i = (char *)i + 1)
            {
              if (*(void *)v99 != v68) {
                objc_enumerationMutation(v66);
              }
              v70 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Type: %3d  Resolution: %5dx%-5d  Local: %d",  [*(id *)(*((void *)&v98 + 1) + 8 * (void)i) type],  objc_msgSend(*(id *)(*((void *)&v98 + 1) + 8 * (void)i), "pixelWidth"),  objc_msgSend(*(id *)(*((void *)&v98 + 1) + 8 * (void)i), "pixelHeight"),  objc_msgSend( *(id *)(*((void *)&v98 + 1) + 8 * (void)i),  "isLocallyAvailable")));
              -[os_log_s addObject:](v45, "addObject:", v70);
            }

            v67 = [v66 countByEnumeratingWithState:&v98 objects:v106 count:16];
          }

          while (v67);
        }

        v73 = MediaAnalysisLogLevel(v71, v72);
        if ((int)v73 >= 4)
        {
          v75 = VCPLogInstance(v73, v74);
          v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
          if (os_log_type_enabled(v76, type))
          {
            *(_DWORD *)buf = 138412546;
            v103 = v89;
            v104 = 2112;
            *(void *)v105 = v45;
            _os_log_impl( (void *)&_mh_execute_header,  v76,  type,  "%@ Asset has no thumbnail PHAssetResource; resources: %@",
              buf,
              0x16u);
          }
        }
      }

      v48 = 4294943494LL;
      goto LABEL_48;
    }

    id v49 = v93;
    v50 = MediaAnalysisLogLevel(v24, v25);
    if ((int)v50 >= 4)
    {
      id v52 = VCPLogInstance(v50, v51);
      id v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)buf = 138412290;
        v103 = v89;
        _os_log_impl((void *)&_mh_execute_header, v53, type, "%@ Asset has no adjustment version; skipping", buf, 0xCu);
      }

      id v49 = v93;
    }

    [v49 setStatus:4294943493];
LABEL_53:

    objc_autoreleasePoolPop(context);
    ++v92;
  }

  objc_initWeak((id *)buf, self);
  v94[0] = _NSConcreteStackBlock;
  v94[1] = 3221225472LL;
  v94[2] = sub_10002A1DC;
  v94[3] = &unk_1001BA800;
  objc_copyWeak(v96, (id *)buf);
  oslogb = osloga;
  v95 = oslogb;
  v96[1] = spid;
  v96[2] = 0LL;
  v77 = objc_retainBlock(v94);
  waitForProcessToComplete = self->_waitForProcessToComplete;
  self->_waitForProcessToComplete = v77;

  cancelBlock = (uint64_t (**)(void))self->_cancelBlock;
  if (cancelBlock && (cancelBlock[2]() & 1) != 0) {
    v80 = -128;
  }
  else {
    v80 = 0;
  }

  objc_destroyWeak(v96);
  objc_destroyWeak((id *)buf);

  return v80;
}

          __int16 v63 = [v31 status];
          if ((_DWORD)v63)
          {
            v65 = [v31 status];
            if ((_DWORD)v65 == -128)
            {
              v67 = MediaAnalysisLogLevel(v65, v66);
              if ((int)v67 >= 7)
              {
                v69 = VCPLogInstance(v67, v68);
                v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
                if (os_log_type_enabled(v70, type))
                {
                  *(_DWORD *)buf = 138412290;
                  v272 = v263;
                  _os_log_impl((void *)&_mh_execute_header, v70, type, "%@ Analysis canceled", buf, 0xCu);
                }
              }

              v71 = [v31 previousAttempts];
              v72 = self->_analysisDatabase;
              if (v71)
              {
                v73 = [v31 previousAttempts];
                v253 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
                processingStatusTaskID = self->_processingStatusTaskID;
                v75 = [v31 previousStatus];
                v252 = (void *)objc_claimAutoreleasedReturnValue([v31 lastAttemptDate]);
                v76 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
                v77 = [v76 mediaType];
                v78 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
                v79 = -[VCPDatabaseWriter setAttempts:asset:taskID:status:lastAttemptDate:mediaType:mediaSubtypes:errorCode:errorLine:]( v72,  "setAttempts:asset:taskID:status:lastAttemptDate:mediaType:mediaSubtypes:errorCode:errorLine:",  v73,  v253,  processingStatusTaskID,  v75,  v252,  v77,  [v78 mediaSubtypes],  objc_msgSend(v31, "previousErrorCode"),  objc_msgSend(v31, "previousErrorLine"));
              }

              else
              {
                v125 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
                v126 = (void *)objc_claimAutoreleasedReturnValue([v125 localIdentifier]);
                v79 = -[VCPDatabaseWriter removeProcessingStatusForLocalIdentifier:andTaskID:]( v72,  "removeProcessingStatusForLocalIdentifier:andTaskID:",  v126,  self->_processingStatusTaskID);
              }

              if ((_DWORD)v79 == -108 || (_DWORD)v79 == -36)
              {
                os_log_type_t v13 = v79;
              }

              else
              {
                os_log_type_t v13 = v79;
                if ((_DWORD)v79 != -23) {
                  os_log_type_t v13 = v258;
                }
              }

              v94 = 1;
              if ((_DWORD)v79 != -108 && (_DWORD)v79 != -36 && (_DWORD)v79 != -23)
              {
                v250 = -128;
LABEL_139:
                -[MADPhotosFullAssetProcessingTask increaseProcessedJobCountByOne]( self,  "increaseProcessedJobCountByOne");
                v140 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
                -[MADPhotosFullAssetProcessingTask _reportCoreAnalyticsWithEntry:analyticManager:]( self,  "_reportCoreAnalyticsWithEntry:analyticManager:",  v31,  v140);

                v141 = -[MADPhotosFullAssetProcessingTask doneFullAnalysis:](self, "doneFullAnalysis:", v31);
                v142 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
                v143 = [v142 isVideo];

                v144 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
                v145 = objc_msgSend(v144, "vcp_isLivePhoto");

                v146 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
                if ([v146 isPhoto])
                {
                  v147 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
                  v148 = objc_msgSend(v147, "vcp_isLivePhoto");

                  v149 = v148 ^ 1;
                }

                else
                {
                  v149 = 0;
                }

                v150 = [v31 needDownload];
                do
                  v151 = __ldaxr(&qword_1001E6488);
                while (__stlxr(v151 + v150, &qword_1001E6488));
                if ((v141 & 1) != 0)
                {
                  v152 = [v31 status];
                  do
                    v153 = __ldaxr(&qword_1001E6490);
                  while (__stlxr(v153 + (v152 == 2), &qword_1001E6490));
                  do
                    v154 = __ldaxr(&qword_1001E6498);
                  while (__stlxr(v154, &qword_1001E6498));
                  v155 = [v31 status];
                  do
                    v156 = __ldaxr(&qword_1001E64A0);
                  while (__stlxr(v156 + (v155 == 3), &qword_1001E64A0));
                  do
                    v157 = __ldaxr(&qword_1001E64A8);
                  while (__stlxr(v157, &qword_1001E64A8));
                  v158 = [v31 status];
                  do
                    v159 = __ldaxr(&qword_1001E64B0);
                  while (__stlxr(v159 + (v158 == 4), &qword_1001E64B0));
                  v160 = 0;
                  v161 = v149;
                  v162 = v145;
                  v163 = v143;
                }

                else
                {
                  do
                    v164 = __ldaxr(&qword_1001E6490);
                  while (__stlxr(v164, &qword_1001E6490));
                  v165 = [v31 status];
                  do
                    v166 = __ldaxr(&qword_1001E6498);
                  while (__stlxr(v166 + (v165 == 2), &qword_1001E6498));
                  do
                    v167 = __ldaxr(&qword_1001E64A0);
                  while (__stlxr(v167, &qword_1001E64A0));
                  v168 = [v31 status];
                  do
                    v169 = __ldaxr(&qword_1001E64A8);
                  while (__stlxr(v169 + (v168 == 3), &qword_1001E64A8));
                  do
                    v170 = __ldaxr(&qword_1001E64B0);
                  while (__stlxr(v170, &qword_1001E64B0));
                  v171 = [v31 status];
                  v161 = 0;
                  v162 = 0;
                  v163 = 0;
                  v160 = v171 == 4;
                }

                do
                  v172 = __ldaxr(&qword_1001E64B8);
                while (__stlxr(v172 + v160, &qword_1001E64B8));
                do
                  v173 = __ldaxr(&qword_1001E64C0);
                while (__stlxr(v173 + v163, &qword_1001E64C0));
                v174 = v141 ^ 1;
                do
                  v175 = __ldaxr(&qword_1001E64C8);
                while (__stlxr(v175 + (v174 & v143), &qword_1001E64C8));
                do
                  v176 = __ldaxr(&qword_1001E64D0);
                while (__stlxr(v176 + v162, &qword_1001E64D0));
                do
                  v177 = __ldaxr(&qword_1001E64D8);
                while (__stlxr(v177 + (v174 & v145), &qword_1001E64D8));
                do
                  v178 = __ldaxr(&qword_1001E64E0);
                while (__stlxr(v178 + v161, &qword_1001E64E0));
                do
                  v179 = __ldaxr(&qword_1001E64E8);
                while (__stlxr(v179 + (v174 & v149), &qword_1001E64E8));
                v94 = 0;
              }
            }

            else
            {
              v88 = MediaAnalysisLogLevel(v65, v66);
              if ((int)v88 >= 3)
              {
                v90 = VCPLogInstance(v88, v89);
                v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
                if (os_log_type_enabled(v91, v251))
                {
                  v92 = [v31 status];
                  *(_DWORD *)buf = 138412546;
                  v272 = v263;
                  v273 = 1024;
                  v274 = v92;
                  _os_log_impl((void *)&_mh_execute_header, v91, v251, "%@ Analysis failed (%d)", buf, 0x12u);
                }
              }

              if ([v31 status] == -23802)
              {
                v93 = 2LL;
              }

              else if ([v31 status] == -23808)
              {
                v250 = [v31 status];
                v93 = 7LL;
              }

              else
              {
                v93 = 3LL;
              }

              v131 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
              v132 = (void *)objc_claimAutoreleasedReturnValue([v31 currentAttemptDate]);
              v133 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v131,  "mad_nextAttemptDateForStatus:currentAttemptDate:attemptCount:",  v93,  v132,  (char *)objc_msgSend(v31, "previousAttempts") + 1));

              v134 = self->_analysisDatabase;
              v135 = [v31 errorCode];
              v136 = [v31 errorLine];
              v137 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
              v138 = (void *)objc_claimAutoreleasedReturnValue([v137 localIdentifier]);
              v139 = -[VCPDatabaseWriter updateProcessingStatus:andNextAttemptDate:andErrorCode:andErrorLine:forLocalIdentifier:andTaskID:]( v134,  "updateProcessingStatus:andNextAttemptDate:andErrorCode:andErrorLine:forLocalIdentifier:andTaskID:",  v93,  v133,  v135,  v136,  v138,  self->_processingStatusTaskID);

              if ((_DWORD)v139 == -108 || (_DWORD)v139 == -36)
              {
                os_log_type_t v13 = v139;
              }

              else
              {
                os_log_type_t v13 = v139;
                if ((_DWORD)v139 != -23) {
                  os_log_type_t v13 = v258;
                }
              }

              v94 = 1;
              if ((_DWORD)v139 != -108 && (_DWORD)v139 != -36 && (_DWORD)v139 != -23) {
                goto LABEL_139;
              }
            }
          }

          else
          {
            v80 = MediaAnalysisLogLevel(v63, v64);
            if ((int)v80 >= 7)
            {
              v82 = VCPLogInstance(v80, v81);
              v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
              if (os_log_type_enabled(v83, type))
              {
                *(_DWORD *)buf = 138412290;
                v272 = v263;
                _os_log_impl((void *)&_mh_execute_header, v83, type, "%@ Analysis completed", buf, 0xCu);
              }
            }

            v84 = self->_analysisDatabase;
            v85 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
            v86 = (void *)objc_claimAutoreleasedReturnValue([v31 analysisResults]);
            v87 = -[VCPDatabaseWriter storeAnalysisForAsset:analysis:](v84, "storeAnalysisForAsset:analysis:", v85, v86);

            if ((_DWORD)v87 == -108 || (_DWORD)v87 == -36)
            {
              os_log_type_t v13 = v87;
            }

            else
            {
              os_log_type_t v13 = v87;
              if ((_DWORD)v87 != -23) {
                os_log_type_t v13 = v258;
              }
            }

            v94 = 1;
            if ((_DWORD)v87 != -108 && (_DWORD)v87 != -36 && (_DWORD)v87 != -23)
            {
              if (+[VCPVideoCNNAnalyzer isMUBackboneEnabled]( &OBJC_CLASS___VCPVideoCNNAnalyzer,  "isMUBackboneEnabled"))
              {
                v95 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
                v96 = (void *)objc_claimAutoreleasedReturnValue([v95 localIdentifier]);
                v97 = (void *)objc_claimAutoreleasedReturnValue([v31 analysisResults]);
                v98 = (void *)objc_claimAutoreleasedReturnValue( +[VSKAsset mad_assetsWithLocalIdentifier:mediaAnalysisResults:]( &OBJC_CLASS___VSKAsset,  "mad_assetsWithLocalIdentifier:mediaAnalysisResults:",  v96,  v97));

                [v248 addObjectsFromArray:v98];
              }

              v99 = self->_analysisDatabase;
              v100 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
              v101 = (void *)objc_claimAutoreleasedReturnValue([v100 localIdentifier]);
              v102 = (id)-[VCPDatabaseWriter removeProcessingStatusForLocalIdentifier:andTaskID:]( v99,  "removeProcessingStatusForLocalIdentifier:andTaskID:",  v101,  self->_processingStatusTaskID);

              if ((_DWORD)v102 == -108 || (_DWORD)v102 == -36)
              {
                v103 = (const __CFString *)v102;
              }

              else
              {
                v103 = (const __CFString *)v102;
                if ((_DWORD)v102 != -23) {
                  v103 = (const __CFString *)v13;
                }
              }

              v94 = 1;
              if ((_DWORD)v102 == -108 || (_DWORD)v102 == -36 || (_DWORD)v102 == -23)
              {
                os_log_type_t v13 = (unint64_t)v103;
                goto LABEL_178;
              }

              v183 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
              v184 = objc_msgSend(v183, "vcp_isLivePhoto");

              if (v184)
              {
                v185 = (void *)objc_opt_class(self);
                v186 = (void *)objc_claimAutoreleasedReturnValue([v31 analysisResults]);
                v187 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
                [v185 publishLivePhotoEffectsAnalysis:v186 toAsset:v187];
              }

              v188 = self->_analysisDatabase;
              v189 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
              v190 = (void *)objc_claimAutoreleasedReturnValue([v189 localIdentifier]);
              v265 = 0LL;
              v191 = -[VCPDatabaseWriter analysisForAsset:analysis:](v188, "analysisForAsset:analysis:", v190, &v265);
              v192 = v265;

              if ((_DWORD)v191 == -108 || (_DWORD)v191 == -36)
              {
                os_log_type_t v13 = v191;
              }

              else
              {
                os_log_type_t v13 = v191;
                if ((_DWORD)v191 != -23) {
                  os_log_type_t v13 = (unint64_t)v103;
                }
              }

              if ((_DWORD)v191 != -108 && (_DWORD)v191 != -36 && (_DWORD)v191 != -23)
              {
                v193 = (void *)objc_claimAutoreleasedReturnValue([v31 analysisResults]);
                v194 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v193, "vcp_results"));
                v195 = (void *)objc_claimAutoreleasedReturnValue([v194 objectForKeyedSubscript:v243]);

                v196 = MergeKeyFrameResourceResultsIntoExistingAnalysis(v195, v192);
                v197 = (void *)objc_claimAutoreleasedReturnValue(v196);
                [v31 setAnalysisResults:v197];

                v198 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
                v199 = (void *)objc_claimAutoreleasedReturnValue([v198 mediaAnalysisProperties]);

                if (!v199
                  || (unint64_t)[v199 mediaAnalysisVersion] < v247
                  || (int)v247 > (int)[v199 mediaAnalysisImageVersion]
                  || (int)v247 > (int)[v199 imageCaptionVersion]
                  || (int)v247 > (int)[v199 videoCaptionVersion]
                  || (v200 = (void *)objc_claimAutoreleasedReturnValue([v199 mediaAnalysisTimeStamp]),
                      v201 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]),
                      v202 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v201, "vcp_modificationDate")),
                      v203 = [v200 isEqualToDate:v202],
                      v202,
                      v201,
                      v200,
                      (v203 & 1) == 0))
                {
                  v204 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
                  v205 = (void *)objc_claimAutoreleasedReturnValue([v31 analysisResults]);
                  v206 = [v254 updateAsset:v204 withAnalysis:v205 imageOnly:self->_imageOnlyAnalysis] == 0;

                  if (!v206)
                  {
                    v209 = MediaAnalysisLogLevel(v207, v208);
                    if ((int)v209 >= 3)
                    {
                      v211 = VCPLogInstance(v209, v210);
                      v212 = (os_log_s *)objc_claimAutoreleasedReturnValue(v211);
                      if (os_log_type_enabled(v212, v251))
                      {
                        *(_DWORD *)buf = 138412290;
                        v272 = v263;
                        _os_log_impl( (void *)&_mh_execute_header,  v212,  v251,  "%@ Failed to update changeManager",  buf,  0xCu);
                      }
                    }
                  }
                }
              }

              v94 = 1;
              if ((_DWORD)v191 != -108 && (_DWORD)v191 != -36 && (_DWORD)v191 != -23) {
                goto LABEL_139;
              }
            }
          }
              }

              else
              {
                uint64_t v18 = 0;
              }

              uint64_t v34 = v60;
            }
          }

          int v23 = v34;
        }

        else
        {
          uint64_t v18 = 5;
        }
      }

      os_log_type_t v5 = v23;
    }

    objc_autoreleasePoolPop(v17);
  }

  while (!v18);
  if (v18 == 5) {
    __int128 v55 = 0;
  }
  else {
    __int128 v55 = v5;
  }

  return v55;
}

              os_log_type_t v26 = v64;
            }

LABEL_53:
            LODWORD(v10) = -18;
            goto LABEL_55;
          }
        }

        else
        {
          uint64_t v28 = 0LL;
        }

        v80 = 0u;
        v81 = 0u;
        v78 = 0u;
        v79 = 0u;
        uint64_t v29 = v73;
        uint64_t v30 = [v29 countByEnumeratingWithState:&v78 objects:v89 count:16];
        if (v30)
        {
          v31 = 0;
          id v32 = *(void *)v79;
          uint64_t v33 = 0xFFFFFFFFLL;
          uint64_t v34 = 1.0;
          while (2)
          {
            __int16 v35 = 0LL;
            uint64_t v36 = v31;
            v66 = v31 + (_DWORD)v30;
            do
            {
              if (*(void *)v79 != v32) {
                objc_enumerationMutation(v29);
              }
              __int16 v37 = *(void **)(*((void *)&v78 + 1) + 8LL * (void)v35);
              double v38 = (void *)objc_claimAutoreleasedReturnValue([v37 torsoprint]);
              __int16 v39 = v38 == 0LL;

              if (!v39)
              {
                int v40 = (void *)objc_claimAutoreleasedReturnValue([v37 torsoprint]);
                v77 = 0LL;
                uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 computeDistance:v28 withDistanceFunction:0 error:&v77]);
                uint64_t v42 = v77;

                if (v42)
                {
                  id v53 = MediaAnalysisLogLevel(v43, v44);
                  if ((int)v53 >= 3)
                  {
                    __int128 v55 = VCPLogInstance(v53, v54);
                    __int128 v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
                    __int128 v57 = VCPLogToOSLogType[3];
                    if (os_log_type_enabled(v56, v57))
                    {
                      *(_DWORD *)buf = 138412290;
                      v88 = v42;
                      _os_log_impl((void *)&_mh_execute_header, v56, v57, "%@", buf, 0xCu);
                    }
                  }

                  goto LABEL_51;
                }

                [v41 floatValue];
                if (v34 <= 0.3) {
                  v46 = v34;
                }
                else {
                  v46 = 0.3;
                }
                if (v45 < v46)
                {
                  [v41 floatValue];
                  uint64_t v34 = v47;
                  uint64_t v33 = (uint64_t)v35 + v36;
                }
              }

              __int16 v35 = (char *)v35 + 1;
            }

            while (v30 != v35);
            uint64_t v30 = [v29 countByEnumeratingWithState:&v78 objects:v89 count:16];
            v31 = v66;
            if (v30) {
              continue;
            }
            break;
          }

          if ((v33 & 0x80000000) == 0)
          {
            v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v33));
            id v49 = (void *)objc_claimAutoreleasedReturnValue([v75 objectForKeyedSubscript:v48]);
            v50 = v49 == 0LL;

            if (v50)
            {
              v86 = v65;
              uint64_t v29 = (id)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v86,  1LL));
              v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", v29));
              id v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v33));
              [v75 setObject:v51 forKeyedSubscript:v52];
            }

            else
            {
              uint64_t v29 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", v33));
              v51 = (void *)objc_claimAutoreleasedReturnValue([v75 objectForKeyedSubscript:v29]);
              [v51 addObject:v65];
            }

            goto LABEL_39;
          }
        }

        else
        {
LABEL_39:
        }

        __int16 v22 = (os_log_s *)v65;
        goto LABEL_41;
      }
    }
  }

void sub_10000E028(_Unwind_Exception *a1)
{
}

void sub_10000E070(uint64_t a1)
{
  int v2 = *(void **)(*(void *)(a1 + 32) + 104LL);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v2 containsObject:v3];
}

void sub_10000E0CC(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 104LL);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
  [v1 addObject:v2];
}

LABEL_49:
      }

      objc_autoreleasePoolPop(context);
      if (v75) {
        goto LABEL_61;
      }
    }

    if ((int)v82 >= 6)
    {
      v87 = VCPLogInstance(v82, v83);
      v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
      if (os_log_type_enabled(v88, v102))
      {
        v89 = self->_logPrefix;
        v90 = -[PHFetchResult count](self->_fetchResult, "count");
        *(_DWORD *)buf = 138412546;
        v113 = v89;
        v114 = 1024;
        LODWORD(v115) = v90;
        _os_log_impl((void *)&_mh_execute_header, v88, v102, "%@ Fetched %d assets", buf, 0x12u);
      }
    }

    v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    -[os_log_s addBreadcrumb:]( v85,  "addBreadcrumb:",  @"%@ Fetched %d assets",  self->_logPrefix,  -[PHFetchResult count](self->_fetchResult, "count"));
    goto LABEL_49;
  }

  v92 = MediaAnalysisLogLevel(0LL, v15);
  if ((int)v92 >= 3)
  {
    v94 = VCPLogInstance(v92, v93);
    v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
    v96 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v95, v96))
    {
      v97 = self->_logPrefix;
      *(_DWORD *)buf = 138412290;
      v113 = v97;
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "%@ Failed to perform full asset evaluation", buf, 0xCu);
    }
  }
  }

LABEL_50:
LABEL_51:
    sqlite3_exec(self->_database, "ROLLBACK TO Analysis;", 0LL, 0LL, 0LL);
    goto LABEL_52;
  }

LABEL_50:
        }

        id v53 = [v52 countByEnumeratingWithState:&v105 objects:v122 count:16];
        if (!v53)
        {
LABEL_52:

          break;
        }
      }
    }
  }

  else
  {
    v76 = MediaAnalysisLogLevel(v5, v6);
    v78 = VCPLogInstance(v76, v77);
    uint32_t v15 = (void *)objc_claimAutoreleasedReturnValue(v78);
    v79 = VCPLogToOSLogType[3];
    if (os_log_type_enabled((os_log_t)v15, v79))
    {
      v80 = a1[4];
      *(_DWORD *)buf = 138412290;
      v115 = v80;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  v79,  "%@ systemTask is nil; skip reporting progress",
        buf,
        0xCu);
    }
  }

LABEL_57:
  v81 = *(void *)(a1[10] + 8LL);
  v82 = *(void **)(v81 + 40);
  *(void *)(v81 + 40) = 0LL;

  v85 = MediaAnalysisLogLevel(v83, v84);
  if ((int)v85 >= 5)
  {
    v87 = VCPLogInstance(v85, v86);
    v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
    v89 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v88, v89))
    {
      v90 = a1[4];
      *(_DWORD *)buf = 138412290;
      v115 = v90;
      _os_log_impl((void *)&_mh_execute_header, v88, v89, "%@ exiting processing task ...", buf, 0xCu);
    }
  }

  v91 = (void *)objc_claimAutoreleasedReturnValue( +[MADProgressReporterBackgroundSystemTask sharedTask]( &OBJC_CLASS___MADProgressReporterBackgroundSystemTask,  "sharedTask"));
  v103 = 0LL;
  [v91 submitTask:&v103];
  v92 = v103;

  if (v92)
  {
    v95 = MediaAnalysisLogLevel(v93, v94);
    if ((int)v95 >= 5)
    {
      v97 = VCPLogInstance(v95, v96);
      v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
      v99 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v98, v99))
      {
        v100 = a1[4];
        *(_DWORD *)buf = 138412290;
        v115 = v100;
        _os_log_impl( (void *)&_mh_execute_header,  v98,  v99,  "%@ Failed to request workload progress report task",  buf,  0xCu);
      }
    }
  }

  (*(void (**)(void))(a1[7] + 16LL))();
}

        __int128 v56 = -[NSArray count](self->_localIdentifiers, "count");
        totalTaskCount = self->_totalTaskCount;
        v58 = self->_finishedTaskCount + (double)v56;
        self->_finishedTaskCount = v58;
        (*((void (**)(double))self->_progressHandler + 2))(v58 / totalTaskCount);
        (*((void (**)(void))self->_resultsHandler + 2))();
      }

      else
      {
        v48 = objc_opt_class(&OBJC_CLASS___MADImageVisionRequest);
        if ((objc_opt_isKindOfClass(v30, v48) & 1) != 0)
        {
          v195 = (id)objc_claimAutoreleasedReturnValue([v30 visionRequest]);
          -[MADComputeServiceProcessingTask _processVisionRequest:](self, "_processVisionRequest:");
          goto LABEL_99;
        }

        v59 = objc_opt_class(&OBJC_CLASS___MADImageCoreMLRequest);
        if ((objc_opt_isKindOfClass(v30, v59) & 1) == 0)
        {
          v207 = NSLocalizedDescriptionKey;
          v194 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ Unsupported request %@",  v32,  v30));
          v208 = v194;
          v91 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v208,  &v207,  1LL));
          v195 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -4LL,  v91));

          v94 = MediaAnalysisLogLevel(v92, v93);
          if ((int)v94 >= 3)
          {
            v96 = VCPLogInstance(v94, v95);
            v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
            if (os_log_type_enabled(v97, v196))
            {
              *(_DWORD *)buf = 138412290;
              v216 = (uint64_t)v195;
              _os_log_impl((void *)&_mh_execute_header, v97, v196, "%@", buf, 0xCu);
            }
          }

          v98 = -[NSArray count](self->_localIdentifiers, "count");
          v99 = self->_totalTaskCount;
          v100 = self->_finishedTaskCount + (double)v98;
          self->_finishedTaskCount = v100;
          (*((void (**)(double))self->_progressHandler + 2))(v100 / v99);
          (*((void (**)(void))self->_resultsHandler + 2))();
          goto LABEL_99;
        }

        v195 = v30;
        [v195 consumeSandboxExtension];
        CMTime v60 = (void *)objc_claimAutoreleasedReturnValue([v195 modelURL]);
        v61 = [v60 startAccessingSecurityScopedResource];

        v64 = MediaAnalysisLogLevel(v62, v63);
        if ((int)v64 >= 7)
        {
          v66 = VCPLogInstance(v64, v65);
          v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
          if (os_log_type_enabled(v67, v10))
          {
            v68 = objc_claimAutoreleasedReturnValue([v195 modelURL]);
            *(_DWORD *)buf = 138412802;
            v69 = @"failed";
            if (v61) {
              v69 = @"success";
            }
            v216 = (uint64_t)v32;
            v217 = 2112;
            v218 = v68;
            v219 = 2112;
            v220 = v69;
            v70 = (void *)v68;
            _os_log_impl( (void *)&_mh_execute_header,  v67,  v10,  "%@ Consuming secure scoped model URL %@ : %@",  buf,  0x20u);
          }
        }

        v193 = (void *)objc_claimAutoreleasedReturnValue([v195 modelURL]);
        v71 = (void *)objc_claimAutoreleasedReturnValue([v193 lastPathComponent]);
        v72 = [v71 isEqualToString:@".mlmodel"];

        if (v72)
        {
          v75 = MediaAnalysisLogLevel(v73, v74);
          if ((int)v75 >= 7)
          {
            v77 = VCPLogInstance(v75, v76);
            v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
            if (os_log_type_enabled(v78, v10))
            {
              v79 = (void *)objc_claimAutoreleasedReturnValue([v195 modelURL]);
              *(_DWORD *)buf = 138412546;
              v216 = (uint64_t)v32;
              v217 = 2112;
              v218 = (uint64_t)v79;
              _os_log_impl((void *)&_mh_execute_header, v78, v10, "%@ Compiling compiledModelURL at %@", buf, 0x16u);
            }
          }

          v80 = (void *)objc_claimAutoreleasedReturnValue([v195 modelURL]);
          v204 = 0LL;
          v189 = (void *)objc_claimAutoreleasedReturnValue( +[MLModel compileModelAtURL:error:]( &OBJC_CLASS___MLModel,  "compileModelAtURL:error:",  v80,  &v204));
          v81 = v204;

          v82 = v81;
          v203 = v81;
          v192 = (void *)objc_claimAutoreleasedReturnValue( +[MLModel modelWithContentsOfURL:error:]( &OBJC_CLASS___MLModel,  "modelWithContentsOfURL:error:",  v189,  &v203));
          v83 = (__CFString *)v203;
        }

        else
        {
          v101 = objc_claimAutoreleasedReturnValue([v195 modelURL]);
          v202 = 0LL;
          v189 = (void *)v101;
          v192 = (void *)objc_claimAutoreleasedReturnValue( +[MLModel modelWithContentsOfURL:error:]( &OBJC_CLASS___MLModel,  "modelWithContentsOfURL:error:",  v101,  &v202));
          v83 = (__CFString *)v202;
        }

        if (v83)
        {
          v104 = MediaAnalysisLogLevel(v102, v103);
          if ((int)v104 >= 3)
          {
            v106 = VCPLogInstance(v104, v105);
            v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);
            if (os_log_type_enabled(v107, v196))
            {
              *(_DWORD *)buf = 138412802;
              v216 = (uint64_t)v32;
              v217 = 2112;
              v218 = (uint64_t)v192;
              v219 = 2112;
              v220 = v83;
              _os_log_impl( (void *)&_mh_execute_header,  v107,  v196,  "%@ Failed to read CoreML model file: %@ - %@",  buf,  0x20u);
            }
          }

          v108 = -[NSArray count](self->_localIdentifiers, "count");
          v109 = self->_totalTaskCount;
          v110 = self->_finishedTaskCount + (double)v108;
          self->_finishedTaskCount = v110;
          (*((void (**)(double))self->_progressHandler + 2))(v110 / v109);
          (*((void (**)(void))self->_resultsHandler + 2))();
        }

        v201 = v83;
        v187 = (void *)objc_claimAutoreleasedReturnValue( +[VNCoreMLModel modelForMLModel:error:]( &OBJC_CLASS___VNCoreMLModel,  "modelForMLModel:error:",  v192,  &v201));
        v191 = v201;

        if (v191)
        {
          v113 = MediaAnalysisLogLevel(v111, v112);
          if ((int)v113 >= 3)
          {
            v115 = VCPLogInstance(v113, v114);
            v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
            if (os_log_type_enabled(v116, v196))
            {
              *(_DWORD *)buf = 138412802;
              v216 = (uint64_t)v32;
              v217 = 2112;
              v218 = (uint64_t)v192;
              v219 = 2112;
              v220 = v191;
              _os_log_impl( (void *)&_mh_execute_header,  v116,  v196,  "%@ Failed to load CoreML model: %@ - %@",  buf,  0x20u);
            }
          }

          v117 = -[NSArray count](self->_localIdentifiers, "count");
          v118 = self->_totalTaskCount;
          v119 = self->_finishedTaskCount + (double)v117;
          self->_finishedTaskCount = v119;
          (*((void (**)(double))self->_progressHandler + 2))(v119 / v118);
          (*((void (**)(void))self->_resultsHandler + 2))();
        }

        v120 = -[VNCoreMLRequest initWithModel:](objc_alloc(&OBJC_CLASS___VNCoreMLRequest), "initWithModel:", v187);
        v186 = v120;
        if (!v120)
        {
          v209 = NSLocalizedDescriptionKey;
          v184 = (void *)objc_claimAutoreleasedReturnValue([v195 modelURL]);
          v121 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ Failed to create VNRequest with CoreML model %@ - %@",  v32,  v187,  v184));
          v210 = v121;
          v122 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v210,  &v209,  1LL));
          v185 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v122));

          v123 = (void *)v185;
          v126 = MediaAnalysisLogLevel(v124, v125);
          if ((int)v126 >= 3)
          {
            v128 = VCPLogInstance(v126, v127);
            v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
            if (os_log_type_enabled(v129, v196))
            {
              *(_DWORD *)buf = 138412290;
              v216 = v185;
              _os_log_impl((void *)&_mh_execute_header, v129, v196, "%@", buf, 0xCu);
            }

            v123 = (void *)v185;
          }

          v130 = -[NSArray count](self->_localIdentifiers, "count");
          v131 = self->_totalTaskCount;
          v132 = self->_finishedTaskCount + (double)v130;
          self->_finishedTaskCount = v132;
          (*((void (**)(double))self->_progressHandler + 2))(v132 / v131);
          (*((void (**)(void))self->_resultsHandler + 2))();

          v120 = 0LL;
        }

        v133 = -[MADComputeServiceProcessingTask _processVisionRequest:](self, "_processVisionRequest:", v120);
        v135 = MediaAnalysisLogLevel(v133, v134);
        if ((int)v135 >= 7)
        {
          v137 = VCPLogInstance(v135, v136);
          v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);
          if (os_log_type_enabled(v138, v10))
          {
            v139 = (void *)objc_claimAutoreleasedReturnValue([v195 modelURL]);
            *(_DWORD *)buf = 138412546;
            v216 = (uint64_t)v32;
            v217 = 2112;
            v218 = (uint64_t)v139;
            _os_log_impl((void *)&_mh_execute_header, v138, v10, "%@ Releasing secure scoped model URL %@", buf, 0x16u);
          }
        }

        v140 = (void *)objc_claimAutoreleasedReturnValue([v195 modelURL]);
        [v140 stopAccessingSecurityScopedResource];
      }

      goto LABEL_99;
    }

    uint64_t v27 = MediaAnalysisLogLevel(v24, v25);
    if ((int)v27 >= 5)
    {
      uint64_t v29 = VCPLogInstance(v27, v28);
      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
      if (os_log_type_enabled((os_log_t)v30, type))
      {
        *(_DWORD *)buf = 138412290;
        v216 = (uint64_t)v199;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v30,  type,  "%@ Request is canceled during preparing; quitting ...",
          buf,
          0xCu);
      }

      goto LABEL_33;
    }

        goto LABEL_50;
      }

      goto LABEL_50;
    }

    id v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    if ([v35 compare:v52] == (id)1)
    {
      __int128 v54 = v82 != 2 || v81 != 1;

      if (v54)
      {
        __int128 v57 = MediaAnalysisLogLevel(v55, v56);
        if ((int)v57 >= 6)
        {
          v59 = VCPLogInstance(v57, v58);
          uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
          CMTime v60 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v44, v60))
          {
            v61 = (void *)objc_claimAutoreleasedReturnValue([v8 localIdentifier]);
            id v62 = VCPProcessingStatusDescription(v82);
            __int16 v63 = (id)objc_claimAutoreleasedReturnValue(v62);
            v64 = v81;
            v65 = (void *)objc_claimAutoreleasedReturnValue(+[VCPLogManager dateFormatter](&OBJC_CLASS___VCPLogManager, "dateFormatter"));
            v66 = (void *)objc_claimAutoreleasedReturnValue([v65 stringFromDate:v35]);
            *(_DWORD *)buf = 138413058;
            *(void *)&uint8_t buf[4] = v61;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v63;
            *(_WORD *)&buf[22] = 1024;
            v84 = v64;
            v85 = 2112;
            v86 = v66;
            _os_log_impl( (void *)&_mh_execute_header,  v44,  v60,  "[FaceLibraryProcessing][%@] Analysis deferred (%@|%d); revisit date: %@",
              buf,
              0x26u);
          }

          goto LABEL_49;
        }

  id v52 = (void *)objc_claimAutoreleasedReturnValue([v59 database]);
  id v53 = [v52 commit];

  if (v53 != -108 && v53 != -36 && v53 != -23) {
    id v53 = v13;
  }

  return v53;
}

        objc_autoreleasePoolPop(v66);
        if (v60 == (id)++v64)
        {
          CMTime v60 = [v59 countByEnumeratingWithState:&v95 objects:v106 count:16];
          if (!v60)
          {
LABEL_51:

            goto LABEL_52;
          }

          goto LABEL_32;
        }
      }

      v68 = [v65 unsignedIntegerValue];
      v94 = 0LL;
      v69 = +[BGSystemTaskCheckpoints reportFeatureCheckpoint:forFeature:error:]( &OBJC_CLASS___BGSystemTaskCheckpoints,  "reportFeatureCheckpoint:forFeature:error:",  50LL,  v68,  &v94);
      v70 = (os_log_s *)v94;
      v72 = v70;
      if ((v69 & 1) != 0)
      {
        v73 = MediaAnalysisLogLevel(v70, v71);
        if ((int)v73 >= 5)
        {
          v75 = VCPLogInstance(v73, v74);
          v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
          if (os_log_type_enabled(v76, v62))
          {
            *(_DWORD *)buf = 138413058;
            v101 = v92;
            v102 = 1024;
            *(_DWORD *)v103 = 50;
            *(_WORD *)&v103[4] = 2112;
            *(void *)&v103[6] = v65;
            *(_WORD *)&v103[14] = 2112;
            *(void *)&v103[16] = v93;
            v77 = v76;
            v78 = v62;
            v79 = "[%@] Reported BGST Checkpoint %d for feature code %@ - %@";
            v80 = 38;
LABEL_46:
            _os_log_impl((void *)&_mh_execute_header, v77, v78, v79, buf, v80);
            goto LABEL_47;
          }

          goto LABEL_47;
        }
      }

      else
      {
        v84 = MediaAnalysisLogLevel(v70, v71);
        if ((int)v84 >= 3)
        {
          v86 = VCPLogInstance(v84, v85);
          v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
          if (os_log_type_enabled(v76, type))
          {
            *(_DWORD *)buf = 138413314;
            v101 = v92;
            v102 = 1024;
            *(_DWORD *)v103 = 50;
            *(_WORD *)&v103[4] = 2112;
            *(void *)&v103[6] = v65;
            *(_WORD *)&v103[14] = 2112;
            *(void *)&v103[16] = v93;
            v104 = 2112;
            v105 = v72;
            v77 = v76;
            v78 = type;
            v79 = "[%@] Failed to report BGST Checkpoint %d for feature code %@ - %@ - %@";
            v80 = 48;
            goto LABEL_46;
          }
    }
  }
}

id sub_10000F274(uint64_t a1, uint64_t a2)
{
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithArray:](&OBJC_CLASS___NSMutableArray, "arrayWithArray:", &off_1001C8F58));
  if (objc_msgSend( *(id *)(*(void *)(a1 + 32) + 8),  "vcp_requiresDownloadForTask:",  objc_msgSend(*(id *)(a1 + 32), "taskID"))) {
    [v4 addObjectsFromArray:&off_1001C8F70];
  }
  os_log_type_t v5 = *(void **)(a1 + 32);
  uint64_t v6 = (void *)v5[2];
  id v11 = 0LL;
  id v7 = [v5 processingStatusTaskID];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mediaTypePredicatesString]);
  [v6 fetchLocalIdentifiersEligibleForRetry:&v11 taskID:v7 excludingStatuses:v4 fetchLimit:a2 additionalPredicates:v8];
  id v9 = v11;

  return v9;
}

id sub_10000F490(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 32);
  os_log_type_t v5 = (void *)v4[2];
  id v10 = 0LL;
  id v6 = [v4 processingStatusTaskID];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mediaTypePredicatesString]);
  [v5 fetchEligibleToRetryLocalIdentifiers:&v10 processingStatus:4 taskID:v6 fetchLimit:a2 additionalPredicates:v7];
  id v8 = v10;

  return v8;
}

id sub_10000F6B4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 64) addObject:*(void *)(a1 + 40)];
}

id sub_10000F858(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 32);
  os_log_type_t v5 = (void *)v4[2];
  id v10 = 0LL;
  id v6 = [v4 processingStatusTaskID];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mediaTypePredicatesString]);
  [v5 fetchLocalIdentifiers:&v10 processingStatus:2 taskID:v6 attempts:1 fetchLimit:a2 additionalPredicates:v7];
  id v8 = v10;

  return v8;
}

id sub_10000FA60(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)(a1 + 32);
  os_log_type_t v5 = (void *)v4[2];
  id v10 = 0LL;
  id v6 = [v4 processingStatusTaskID];
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mediaTypePredicatesString]);
  [v5 fetchLocalIdentifiersEligibleForRetry:&v10 taskID:v6 includingStatuses:&off_1001C8F88 fetchLimit:a2 additionalPredicates:v7];
  id v8 = v10;

  return v8;
}

void sub_10000FDE4(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 104LL);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) assetLocalIdentifiers]);
  [v1 minusSet:v2];
}

void sub_10000FE30(uint64_t a1)
{
  unint64_t v2 = 0LL;
  if ([*(id *)(*(void *)(a1 + 32) + 64) count])
  {
    do
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) objectAtIndexedSubscript:v2]);
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 taskUUID]);
      os_log_type_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
      unsigned __int8 v6 = [v4 isEqual:v5];

      if ((v6 & 1) != 0) {
        break;
      }
      ++v2;
    }

    while (v2 < (unint64_t)[*(id *)(*(void *)(a1 + 32) + 64) count]);
  }

  id v7 = [*(id *)(*(void *)(a1 + 32) + 64) count];
  if (v2 >= (unint64_t)v7)
  {
    uint64_t v16 = MediaAnalysisLogLevel(v7, v8);
    if ((int)v16 >= 4)
    {
      uint64_t v18 = VCPLogInstance(v16, v17);
      int v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      os_log_type_t v20 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = *(void *)(*(void *)(a1 + 32) + 24LL);
        __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
        int v23 = 138412546;
        uint64_t v24 = v21;
        __int16 v25 = 2112;
        os_log_type_t v26 = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "%@ unknown task retired (%@)", (uint8_t *)&v23, 0x16u);
      }
    }
  }

  else
  {
    if (v2)
    {
      uint64_t v9 = MediaAnalysisLogLevel(v7, v8);
      if ((int)v9 >= 4)
      {
        uint64_t v11 = VCPLogInstance(v9, v10);
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        os_log_type_t v13 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 24LL);
          uint32_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uuid]);
          int v23 = 138412546;
          uint64_t v24 = v14;
          __int16 v25 = 2112;
          os_log_type_t v26 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "%@ task retired in unexpected order (%@)",  (uint8_t *)&v23,  0x16u);
        }
      }
    }

    [*(id *)(*(void *)(a1 + 32) + 64) removeObjectAtIndex:v2];
  }

void sub_100010330(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___VCPClientManager);
  unint64_t v2 = (void *)qword_1001E6388;
  qword_1001E6388 = (uint64_t)v1;
}

id sub_1000103D8(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) containsObject:*(void *)(a1 + 40)];
  if ((result & 1) == 0)
  {
    uint64_t v4 = MediaAnalysisLogLevel(result, v3);
    if ((int)v4 >= 6)
    {
      uint64_t v6 = VCPLogInstance(v4, v5);
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      os_log_type_t v8 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        int v10 = 138412290;
        uint64_t v11 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Adding client handler %@", (uint8_t *)&v10, 0xCu);
      }
    }

    return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
  }

  return result;
}

void sub_100010538(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) containsObject:*(void *)(a1 + 40)];
  if ((_DWORD)v2)
  {
    uint64_t v4 = MediaAnalysisLogLevel(v2, v3);
    if ((int)v4 >= 6)
    {
      uint64_t v6 = VCPLogInstance(v4, v5);
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      os_log_type_t v8 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = *(void *)(a1 + 40);
        int v17 = 138412290;
        uint64_t v18 = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Removing client handler %@", (uint8_t *)&v17, 0xCu);
      }
    }

    [*(id *)(*(void *)(a1 + 32) + 16) removeObject:*(void *)(a1 + 40)];
    if (![*(id *)(*(void *)(a1 + 32) + 16) count])
    {
      uint64_t v11 = MediaAnalysisLogLevel(0LL, v10);
      if ((int)v11 >= 6)
      {
        uint64_t v13 = VCPLogInstance(v11, v12);
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        os_log_type_t v15 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v14, v15))
        {
          LOWORD(v17) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "No active clients; purging cached resources",
            (uint8_t *)&v17,
            2u);
        }
      }

      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADResourceManager sharedManager](&OBJC_CLASS___VCPMADResourceManager, "sharedManager"));
      [v16 purgeAllResources];
    }
  }

void sub_100010758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_23:
      }
    }

LABEL_25:
    goto LABEL_26;
  }

  int v19 = MediaAnalysisLogLevel(v17, v18);
  if ((int)v19 >= 5)
  {
    uint64_t v21 = VCPLogInstance(v19, v20);
    __int16 v22 = (id)objc_claimAutoreleasedReturnValue(v21);
    int v23 = VCPLogToOSLogType[5];
    if (os_log_type_enabled((os_log_t)v22, v23))
    {
      *(_DWORD *)buf = 138412290;
      v46 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "[%@] the BGST task already existed, bailing out.",  buf,  0xCu);
    }

    uint64_t v24 = 0LL;
    goto LABEL_25;
  }

  uint64_t v24 = 0LL;
LABEL_26:

  objc_autoreleasePoolPop(v6);
  if (!v16 && a3 && v24) {
    *a3 = [v24 copy];
  }
}
      }
    }

    else if ((int)v28 >= 3)
    {
      uint64_t v33 = VCPLogInstance(v28, v29);
      v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      uint64_t v34 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v31, v34))
      {
        __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v22 description]);
        *(_DWORD *)buf = 138412290;
        int v40 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  v34,  "[Resource] Failed to create resource file cache directory (%@)",  buf,  0xCu);
      }

      goto LABEL_23;
    }
        }

        else
        {
          uint64_t v28 = MediaAnalysisLogLevel(v21, v22);
          if ((int)v28 >= 7)
          {
            uint64_t v30 = VCPLogInstance(v28, v29);
            int v23 = (void *)objc_claimAutoreleasedReturnValue(v30);
            if (os_log_type_enabled((os_log_t)v23, v16))
            {
              v31 = (void *)objc_claimAutoreleasedReturnValue([v20 localIdentifier]);
              *(_DWORD *)buf = 138412290;
              v58 = v31;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v23,  v16,  "[PhotosCapture][%@] Asset not ready for OCR; skipping",
                buf,
                0xCu);
            }

            goto LABEL_23;
          }
        }

        uint64_t v27 = 1;
        goto LABEL_25;
      }
    }

    uint64_t v27 = 0;
LABEL_25:
    objc_autoreleasePoolPop(v17);
    ++v15;
    if ((v27 & 1) == 0) {
      goto LABEL_38;
    }
  }

  int v40 = [v14 count];
  if (v40)
  {
    int v40 = (id)sub_10007AFF8((uint64_t)v40, v14);
    if ((_DWORD)v40)
    {
      int v40 = (id)MediaAnalysisLogLevel(v40, v41);
      if ((int)v40 >= 4)
      {
        uint64_t v43 = VCPLogInstance(v40, v42);
        uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        v45 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v44, v45))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "[PhotosCapture] OCR processing failed", buf, 2u);
        }
      }
    }
  }

  v46 = VCPSignPostLog(v40);
  v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
  v48 = v47;
  if (v52 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v47))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v48,  OS_SIGNPOST_INTERVAL_END,  spid,  "VCPJIT_OCR_Batch",  (const char *)&unk_100199097,  buf,  2u);
  }

  if (v53)
  {
    id v49 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPJIT_OCR_Batch", v49 - v53);
  }
      }
    }

LABEL_25:
    goto LABEL_26;
  }

  uint64_t v18 = MediaAnalysisLogLevel(v16, v17);
  if ((int)v18 >= 5)
  {
    os_log_type_t v20 = VCPLogInstance(v18, v19);
    uint64_t v21 = (id)objc_claimAutoreleasedReturnValue(v20);
    __int16 v22 = VCPLogToOSLogType[5];
    if (os_log_type_enabled((os_log_t)v21, v22))
    {
      *(_DWORD *)buf = 138412290;
      v45 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v21,  v22,  "[%@] the repeating BGST task already existed, bailing out.",  buf,  0xCu);
    }

    int v23 = 0LL;
    goto LABEL_25;
  }

  int v23 = 0LL;
LABEL_26:

  objc_autoreleasePoolPop(v5);
  if (!v15 && a3 && v23) {
    *a3 = [v23 copy];
  }
}

  uint64_t v16 = 0;
LABEL_149:

  return v16;
}
    }
  }

  else
  {
    __int16 v35 = MediaAnalysisLogLevel(0LL, v25);
    if ((int)v35 >= 3)
    {
      __int16 v37 = VCPLogInstance(v35, v36);
      double v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      __int16 v39 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v38, v39))
      {
        *(_DWORD *)buf = 138412290;
        v75 = v13;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "%@ Failed to create processing task", buf, 0xCu);
      }
    }

    v70 = NSLocalizedDescriptionKey;
    int v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ Failed to create processing task",  v13));
    v71 = v40;
    uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v71,  &v70,  1LL));
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v41));

    ((void (*)(void *, void, void *))v15[2])(v15, 0LL, v27);
  }

  objc_autoreleasePoolPop(v16);
  _Block_object_dispose(v61, 8);
  _Block_object_dispose(v62, 8);

  _Block_object_dispose(&v64, 8);
}

void sub_100010C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_14:
      }
    }
  }

  else
  {
    uint64_t v24 = MediaAnalysisLogLevel(v11, v12);
    if ((int)v24 >= 3)
    {
      os_log_type_t v26 = VCPLogInstance(v24, v25);
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      uint64_t v27 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v21, v27))
      {
        uint64_t v28 = [(id)objc_opt_class(self) taskID];
        *(_DWORD *)buf = 138412546;
        int v40 = v9;
        uint64_t v41 = 1024;
        uint64_t v42 = v28;
        int v23 = "%@ Invalid identifier for task %u";
        uint64_t v29 = v21;
        uint64_t v30 = v27;
        v31 = 18;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v29, v30, v23, buf, v31);
        goto LABEL_14;
      }

      goto LABEL_14;
    }
  }
}

    os_log_type_t v20 = 0LL;
  }

  return v20;
}

    os_log_type_t v20 = 0LL;
  }

  return v20;
}

    os_log_type_t v20 = 0LL;
  }

  return v20;
}

    os_log_type_t v20 = 0LL;
  }

  return v20;
}

    os_log_type_t v20 = 0LL;
  }

  return v20;
}
    }
    }
  }
      }
    }

    else
    {
      os_log_type_t v20 = MediaAnalysisLogLevel(v6, v7);
      if ((int)v20 >= 4)
      {
        __int16 v22 = VCPLogInstance(v20, v21);
        uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        int v23 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v11, v23))
        {
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v5 description]);
          uint64_t v28 = 138412290;
          uint64_t v29 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  v23,  "[MAD BG Service] Processing failed (%@)",  (uint8_t *)&v28,  0xCu);
        }

        goto LABEL_14;
      }
    }

    __int16 v25 = [v5 copy];
    os_log_type_t v26 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v27 = *(void **)(v26 + 40);
    *(void *)(v26 + 40) = v25;

    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 0;
    goto LABEL_16;
  }

  uint64_t v14 = MediaAnalysisLogLevel(0LL, v4);
  if ((int)v14 >= 5)
  {
    uint64_t v16 = VCPLogInstance(v14, v15);
    int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    uint64_t v18 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v17, v18))
    {
      LOWORD(v2_Block_object_dispose((const void *)(v1 - 160), 8) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "[MAD BG Service] Processing completed", (uint8_t *)&v28, 2u);
    }
  }

  int v19 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completionHandler]);
  v19[2](v19, 0LL, 0LL);

LABEL_16:
  *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}
    }

    goto LABEL_15;
  }

  uint64_t v29 = MediaAnalysisLogLevel(v12, v13);
  if ((int)v29 >= 4)
  {
    v31 = VCPLogInstance(v29, v30);
    int v17 = (id)objc_claimAutoreleasedReturnValue(v31);
    id v32 = VCPLogToOSLogType[4];
    if (os_log_type_enabled((os_log_t)v17, v32))
    {
      *(_DWORD *)buf = 138413058;
      *(void *)__int16 v39 = v9;
      *(_WORD *)&v39[8] = 2112;
      *(void *)int v40 = v7;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)uint64_t v41 = a3;
      *(_WORD *)&v41[4] = 1024;
      *(_DWORD *)&v41[6] = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  v32,  "[MADProgressManager] Total assets for %@ (%@) equal to zero, skipping reporting (%u / %u)",  buf,  0x22u);
    }

    goto LABEL_14;
  }

  return v8;
}
    }
  }
}
    }

void sub_100010FAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100011014(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 7)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = a1[4];
      LODWORD(buf) = 138412290;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Entering BGST task launch handler.", (uint8_t *)&buf, 0xCu);
    }
  }

  atomic_store(0, (unsigned __int8 *)a1[5] + 8);
  v95[0] = _NSConcreteStackBlock;
  v95[1] = 3221225472LL;
  v95[2] = sub_1000117D0;
  v95[3] = &unk_1001B9E70;
  int8x16_t v86 = *((int8x16_t *)a1 + 2);
  id v11 = (id)v86.i64[0];
  int8x16_t v96 = vextq_s8(v86, v86, 8uLL);
  [v3 setExpirationHandler:v95];
  v94[0] = _NSConcreteStackBlock;
  v94[1] = 3221225472LL;
  v94[2] = sub_1000118A4;
  v94[3] = &unk_1001B9E98;
  v94[4] = a1[5];
  uint64_t v12 = objc_retainBlock(v94);
  v88[0] = _NSConcreteStackBlock;
  v88[1] = 3221225472LL;
  v88[2] = sub_1000118B8;
  v88[3] = &unk_1001B9EC0;
  id v89 = a1[6];
  uint64_t v13 = v12;
  id v93 = v13;
  id v90 = a1[4];
  id v14 = v3;
  id v15 = a1[5];
  id v91 = v14;
  id v92 = v15;
  uint64_t v16 = objc_retainBlock(v88);
  id v17 = +[VCPDeviceInformation isHomePod](&OBJC_CLASS___VCPDeviceInformation, "isHomePod");
  if ((_DWORD)v17)
  {
    uint64_t v19 = MediaAnalysisLogLevel(v17, v18);
    if ((int)v19 >= 5)
    {
      uint64_t v21 = VCPLogInstance(v19, v20);
      __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      os_log_type_t v23 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v22, v23))
      {
        id v24 = a1[4];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "%@[HomePod] Set xpc transaction exit clean",  (uint8_t *)&buf,  0xCu);
      }
    }

    xpc_transaction_exit_clean();
  }

  uint64_t is_darwinos = os_variant_is_darwinos(0LL);
  if ((_DWORD)is_darwinos)
  {
    uint64_t v27 = MediaAnalysisLogLevel(is_darwinos, v26);
    if ((int)v27 >= 5)
    {
      uint64_t v29 = VCPLogInstance(v27, v28);
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
      os_log_type_t v31 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v30, v31))
      {
        id v32 = a1[4];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v32;
        uint64_t v33 = "%@ Platform not supported; quitting background processing";
LABEL_24:
        _os_log_impl((void *)&_mh_execute_header, v30, v31, v33, (uint8_t *)&buf, 0xCu);
        goto LABEL_25;
      }

      goto LABEL_25;
    }

    goto LABEL_26;
  }

  uint64_t v34 = MKBDeviceUnlockedSinceBoot();
  if ((_DWORD)v34 != 1)
  {
    uint64_t v45 = MediaAnalysisLogLevel(v34, v35);
    if ((int)v45 >= 5)
    {
      uint64_t v47 = VCPLogInstance(v45, v46);
      uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
      os_log_type_t v31 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v30, v31))
      {
        id v48 = a1[4];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v48;
        uint64_t v33 = "%@ Attempt to run prior to first unlock; quitting";
        goto LABEL_24;
      }

LABEL_41:
    }
}

            uint64_t v29 = 13;
            goto LABEL_59;
          }
        }

        else
        {
          id v56 = MediaAnalysisLogLevel(0LL, v45);
          v58 = VCPLogInstance(v56, v57);
          uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(v58);
          if (os_log_type_enabled((os_log_t)v47, v99))
          {
            uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v28 localIdentifier]);
            *(_DWORD *)__int128 buf = 138412290;
            v112 = (uint64_t)v59;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v47,  v99,  "  [%@] Failed to create asset protobuf; skipping",
              buf,
              0xCu);
          }
        }

        uint64_t v29 = 13;
        goto LABEL_60;
      }

      uint64_t v33 = MediaAnalysisLogLevel(v31, v32);
      if ((int)v33 >= 7)
      {
        uint64_t v35 = VCPLogInstance(v33, v34);
        mach_port_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
        if (os_log_type_enabled(v36, type))
        {
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v28 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          v112 = (uint64_t)v37;
          _os_log_impl((void *)&_mh_execute_header, v36, type, "  [%@] No analysis available; skipping", buf, 0xCu);
        }

    uint64_t v28 = v36;
LABEL_42:
    objc_autoreleasePoolPop(v31);
  }

  while (!v32);
  if (v32 == 11) {
    __int128 v55 = 0;
  }
  else {
    __int128 v55 = v28;
  }

LABEL_48:
  return v55;
}

          goto LABEL_42;
        }
      }

      else
      {
        os_log_type_t v31 = MediaAnalysisLogLevel(0LL, v21);
        if ((int)v31 >= 4)
        {
          uint64_t v47 = VCPLogInstance(v31, v46);
          id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
          uint64_t v49 = VCPLogToOSLogType[4];
          if (os_log_type_enabled(v48, v49))
          {
            uint64_t v50 = [(id)objc_opt_class(self) name];
            uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue(v50);
            *(_DWORD *)__int128 buf = 138412290;
            v82 = v71;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "[%@] Fetched yielded no assets; skipping processing",
              buf,
              0xCu);
          }

          uint64_t v7 = v73;
        }
      }

      id v56 = VCPSignPostLog(v31);
      uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      v58 = v57;
      if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v57))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v58,  OS_SIGNPOST_INTERVAL_END,  v11,  "VCPProcessPhotoAssets",  (const char *)&unk_100199097,  buf,  2u);
      }

      uint64_t v59 = *(uint64_t *)((char *)&self->_photoLibraryURL + 4);
      uint64_t v34 = (void *)v72;
      if (v59) {
        (*(void (**)(double))(v59 + 16))(100.0);
      }
      [v7 destroy];
      uint64_t v35 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( -[VCPMADPhotoAssetProcessingTask completionHandler]( self,  "completionHandler"));
      v35[2](v35, 0LL, 0LL);
      uint64_t v45 = 1;
      goto LABEL_40;
    }

    if (!a3)
    {
      uint64_t v45 = 0;
LABEL_42:

      goto LABEL_43;
    }

    v87 = NSLocalizedDescriptionKey;
    uint64_t v38 = v7;
    uint64_t v39 = [(id)objc_opt_class(self) name];
    uint64_t v40 = objc_claimAutoreleasedReturnValue(v39);
    uint64_t v41 = a3;
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->_localIdentifiers + 4) path]);
    uint64_t v35 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[%@] Failed to open Media Analysis for Photo Library (%@)",  v40,  v20));
    v88 = v35;
    uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v88,  &v87,  1LL));
    os_log_type_t v43 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -23LL,  v42));
    id v44 = *v41;
    *uint64_t v41 = (id)v43;

    uint64_t v7 = v38;
    uint64_t v34 = (void *)v40;
LABEL_20:
    uint64_t v45 = 0;
    uint64_t v6 = v74;
LABEL_40:

    goto LABEL_41;
  }

  if (a3)
  {
    id v89 = NSLocalizedDescriptionKey;
    id v32 = a3;
    uint64_t v33 = [(id)objc_opt_class(self) name];
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v33);
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([*(id *)((char *)&self->_localIdentifiers + 4) path]);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[%@] Failed to open Photo Library (%@)",  v18,  v34));
    id v90 = v20;
    uint64_t v35 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v90,  &v89,  1LL));
    mach_port_t v36 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -23LL,  v35));
    uint64_t v37 = *v32;
    *id v32 = (id)v36;

    goto LABEL_20;
  }

  uint64_t v45 = 0;
LABEL_43:

  return v45;
}
      }
    }

    goto LABEL_43;
  }
          }

          if ((id)++v72 == v67)
          {
            LODWORD(v10) = 0;
            os_log_type_t v67 = [obj countByEnumeratingWithState:&v82 objects:v90 count:16];
            if (v67) {
              goto LABEL_7;
            }
LABEL_55:

            goto LABEL_56;
          }
        }

        os_log_type_t v23 = objc_alloc(&OBJC_CLASS___PHDetectionTrait);
        id v24 = (unsigned __int16)[v12 intValue];
        [v76 duration];
        uint64_t v65 = [v23 initWithType:1 value:v24 score:v16 startTime:0.0 duration:v25];
        if (!v65) {
          goto LABEL_53;
        }
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v70 objectForKeyedSubscript:v63]);
        uint64_t v64 = v26;
        if (v26)
        {
          uint64_t v28 = (os_log_s *)[[VNTorsoprint alloc] initWithState:v26 error:0];
          if (!v28)
          {
            uint64_t v59 = MediaAnalysisLogLevel(0LL, v27);
            if ((int)v59 >= 4)
            {
              uint64_t v61 = VCPLogInstance(v59, v60);
              uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
              if (os_log_type_enabled(v28, type))
              {
                *(_WORD *)__int128 buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v28,  type,  "queryActionResultForPHFace : failed to decode torsoprintAction",  buf,  2u);
              }
          }

          id v68 = v88;
          goto LABEL_43;
        }
      }

      else
      {
        uint64_t v5 = v80;
        uint64_t v20 = v78;
        if ((unint64_t)v39 >= 2)
        {
          v83[0] = _NSConcreteStackBlock;
          v83[1] = 3221225472LL;
          v83[2] = sub_10011B204;
          v83[3] = &unk_1001BC6A0;
          uint64_t v40 = &v84;
          id v62 = v29;
          id v84 = v62;
          v82 = 0LL;
          uint64_t v63 = [v81 performChangesAndWait:v83 error:&v82];
          os_log_type_t v43 = v82;
          uint64_t v65 = MediaAnalysisLogLevel(v43, v64);
          if (v63)
          {
            if ((int)v65 < 6)
            {
LABEL_44:

              goto LABEL_45;
            }

            os_log_type_t v67 = VCPLogInstance(v65, v66);
            id v68 = (void *)objc_claimAutoreleasedReturnValue(v67);
            uint64_t v74 = VCPLogToOSLogType[6];
            if (!os_log_type_enabled((os_log_t)v68, v74))
            {
LABEL_43:

              goto LABEL_44;
            }

            *(_DWORD *)__int128 buf = 138412546;
            id v90 = v62;
            id v91 = 2112;
            id v92 = v80;
            v69 = "[VUDedupe] Deduped graph-verified persons %@ for graph verified person %@";
          }

          else
          {
            uint64_t v71 = VCPLogInstance(v65, v66);
            id v68 = (void *)objc_claimAutoreleasedReturnValue(v71);
            uint64_t v74 = VCPLogToOSLogType[3];
            if (!os_log_type_enabled((os_log_t)v68, v74)) {
              goto LABEL_43;
            }
            *(_DWORD *)__int128 buf = 138412546;
            id v90 = v62;
            id v91 = 2112;
            id v92 = v80;
            v69 = "[VUDedupe] Failed to dedupe graph-verified persons %@ for graph verified person %@";
          }

          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v68, v74, v69, buf, 0x16u);
          goto LABEL_43;
        }
      }

void sub_100011724( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20, void *a21, uint64_t a22, void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1000117D0(uint64_t a1)
{
  if ((int)MediaAnalysisLogLevel() >= 7)
  {
    uint64_t v2 = VCPLogInstance();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    os_log_type_t v4 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = 138412290;
      uint64_t v7 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%@ Cancelling by expirationHandler", (uint8_t *)&v6, 0xCu);
    }
  }

uint64_t sub_1000118A4(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 8LL));
  return v1 & 1;
}

void sub_1000118B8(uint64_t a1, int a2)
{
  os_log_type_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  [v4 addBreadcrumb:@"Finished BGST %@", *(void *)(a1 + 32)];

  uint64_t v5 = (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
  if ((_DWORD)v5)
  {
    uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
    if ((int)v7 >= 5)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v60 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%@ Task is cancelled by DAS", buf, 0xCu);
      }
    }

    uint64_t v13 = *(void **)(a1 + 48);
    id v58 = 0LL;
    unsigned int v14 = [v13 setTaskExpiredWithRetryAfter:&v58 error:0.0];
    id v15 = v58;
    id v17 = v15;
    if (v14)
    {
      uint64_t v18 = MediaAnalysisLogLevel(v15, v16);
      if ((int)v18 >= 5)
      {
        uint64_t v20 = VCPLogInstance(v18, v19);
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        os_log_type_t v22 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = *(void *)(a1 + 40);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v60 = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "%@ Set task retry after 0 seconds", buf, 0xCu);
        }
      }
    }

    else
    {
      uint64_t v45 = MediaAnalysisLogLevel(v15, v16);
      if ((int)v45 >= 3)
      {
        uint64_t v47 = VCPLogInstance(v45, v46);
        id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        os_log_type_t v49 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v48, v49))
        {
          uint64_t v50 = *(void *)(a1 + 40);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v60 = v50;
          __int16 v61 = 2112;
          id v62 = v17;
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "%@ Failed to expire task - %@", buf, 0x16u);
        }
      }

      [*(id *)(a1 + 48) setTaskCompleted];
    }
  }

  else
  {
    uint64_t v24 = MediaAnalysisLogLevel(v5, v6);
    if (a2 == -128)
    {
      if ((int)v24 >= 5)
      {
        uint64_t v26 = VCPLogInstance(v24, v25);
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        os_log_type_t v28 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = *(void *)(a1 + 40);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v60 = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "%@ Task is cancelled", buf, 0xCu);
        }
      }

      uint64_t v30 = *(void **)(a1 + 48);
      id v57 = 0LL;
      unsigned int v31 = [v30 setTaskExpiredWithRetryAfter:&v57 error:300.0];
      id v32 = v57;
      uint64_t v34 = v32;
      if (v31)
      {
        uint64_t v35 = MediaAnalysisLogLevel(v32, v33);
        if ((int)v35 >= 5)
        {
          uint64_t v37 = VCPLogInstance(v35, v36);
          uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
          os_log_type_t v39 = VCPLogToOSLogType[5];
          if (os_log_type_enabled(v38, v39))
          {
            uint64_t v40 = *(void *)(a1 + 40);
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v60 = v40;
            __int16 v61 = 1024;
            LODWORD(v62) = 300;
            _os_log_impl((void *)&_mh_execute_header, v38, v39, "%@ Request retry after %d seconds", buf, 0x12u);
          }
        }
      }

      else
      {
        uint64_t v51 = MediaAnalysisLogLevel(v32, v33);
        if ((int)v51 >= 3)
        {
          uint64_t v53 = VCPLogInstance(v51, v52);
          id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
          os_log_type_t v55 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v54, v55))
          {
            uint64_t v56 = *(void *)(a1 + 40);
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v60 = v56;
            __int16 v61 = 2112;
            id v62 = v34;
            _os_log_impl((void *)&_mh_execute_header, v54, v55, "%@ Failed to expire task - %@", buf, 0x16u);
          }
        }

        [*(id *)(a1 + 48) setTaskCompleted];
      }
    }

    else
    {
      if ((int)v24 >= 5)
      {
        uint64_t v41 = VCPLogInstance(v24, v25);
        uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
        os_log_type_t v43 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = *(void *)(a1 + 40);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v60 = v44;
          __int16 v61 = 1024;
          LODWORD(v62) = a2;
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "%@ Task is completed (%d)", buf, 0x12u);
        }
      }

      [*(id *)(a1 + 48) setTaskCompleted];
      [(id)objc_opt_class(*(void *)(a1 + 56)) updateTask];
    }
  }

void sub_100011D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_100011D54(uint64_t a1)
{
  uint64_t v5 = 0LL;
  if (!qword_1001E63A0)
  {
    __int128 v6 = off_1001B9F30;
    uint64_t v7 = 0LL;
    qword_1001E63A0 = _sl_dlopen(&v6, &v5);
    id v3 = v5;
    uint64_t v2 = (void *)qword_1001E63A0;
    if (qword_1001E63A0)
    {
      if (!v5) {
        goto LABEL_5;
      }
    }

    else
    {
      id v3 = (char *)abort_report_np("%s", v5);
    }

    free(v3);
    goto LABEL_5;
  }

  uint64_t v2 = (void *)qword_1001E63A0;
LABEL_5:
  id result = dlsym(v2, "BYSetupAssistantNeedsToRun");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  off_1001E6398 = *(_UNKNOWN **)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_100011EB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100011F04(id a1)
{
  unsigned __int8 v1 = objc_alloc_init(&OBJC_CLASS___VCPCPUMonitor);
  uint64_t v2 = (void *)qword_1001E63A8;
  qword_1001E63A8 = (uint64_t)v1;
}

void sub_100011FDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___VCPCPUMonitor;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1000122DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  objc_sync_exit(v10);
  _Unwind_Resume(a1);
}

LABEL_34:
  objc_sync_exit(v5);
}

  sqlite3_finalize(ppStmt);

  return v5;
}

      goto LABEL_35;
    }

    goto LABEL_35;
  }

  if (v9 || (os_log_type_t v39 = objc_msgSend(v5, "vcp_isLongMovie"), !(_DWORD)v39))
  {
LABEL_30:
    uint64_t v46 = objc_msgSend(v5, "vcp_isVideoSlowmo");
    if (!(_DWORD)v46)
    {
      uint64_t v53 = v8;
      goto LABEL_37;
    }

    id v48 = MediaAnalysisLogLevel(v46, v47);
    if ((int)v48 >= 7)
    {
      uint64_t v50 = VCPLogInstance(v48, v49);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
      uint64_t v51 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v15, v51))
      {
        uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue([v5 localIdentifier]);
        *(_DWORD *)__int128 buf = 138412290;
        id v57 = (unint64_t)v52;
        _os_log_impl((void *)&_mh_execute_header, v15, v51, "[%@] No download for slow-mo video; skipping", buf, 0xCu);
      }

      goto LABEL_34;
    }

    goto LABEL_35;
  }

  uint64_t v41 = MediaAnalysisLogLevel(v39, v40);
  if ((int)v41 >= 7)
  {
    os_log_type_t v43 = VCPLogInstance(v41, v42);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    uint64_t v44 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v15, v44))
    {
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v5 localIdentifier]);
      *(_DWORD *)__int128 buf = 138412290;
      id v57 = (unint64_t)v45;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v44,  "[%@] Duration exceeds download threshold; skipping",
        buf,
        0xCu);
    }

    goto LABEL_34;
  }

    persistGroup = self->_persistGroup;
    persistQueue = (dispatch_queue_s *)self->_persistQueue;
    v61[0] = _NSConcreteStackBlock;
    v61[1] = 3221225472LL;
    v61[2] = sub_10007A8E8;
    v61[3] = &unk_1001BBE70;
    v61[4] = self;
    id v62 = v59;
    uint64_t v63 = v19;
    dispatch_group_async((dispatch_group_t)persistGroup, persistQueue, v61);

LABEL_35:
    uint64_t v12 = 0;
    uint64_t v16 = v59;
LABEL_36:

    goto LABEL_37;
  }

  uint64_t v13 = MediaAnalysisLogLevel(v10, v11);
  if ((int)v13 >= 4)
  {
    id v15 = VCPLogInstance(v13, v14);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    id v17 = VCPLogToOSLogType[4];
    if (os_log_type_enabled((os_log_t)v16, v17))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v16,  v17,  " QuickFaceID Persons Model is not ready; skip processing",
        buf,
        2u);
    }

    goto LABEL_36;
  }

            uint64_t v46 = 0;
            v145 = 0;
            goto LABEL_35;
          }

          uint64_t v46 = 1;
LABEL_35:

          objc_autoreleasePoolPop(v30);
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
        }

        uint64_t v53 = VCPSignPostLog(v26);
        id v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
        os_log_type_t v55 = v54;
        if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v54))
        {
          *(_WORD *)__int128 buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v55,  OS_SIGNPOST_INTERVAL_END,  spid,  "VCPJIT_CameraFace_EndToEnd",  (const char *)&unk_100199097,  buf,  2u);
        }

        if (v134)
        {
          id v58 = mach_absolute_time();
          uint64_t v56 = VCPPerformance_LogMeasurement("VCPJIT_CameraFace_EndToEnd", v58 - v134);
        }

        uint64_t v59 = MediaAnalysisLogLevel(v56, v57);
        __int16 v61 = v11;
        if ((int)v59 >= 7)
        {
          id v62 = VCPLogInstance(v59, v60);
          uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
          if (os_log_type_enabled(v63, type))
          {
            *(_DWORD *)__int128 buf = 134217984;
            v170 = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v63,  type,  "[PhotosCapture] Quick Face ID: %lu fast track face job done",  buf,  0xCu);
          }

          __int16 v61 = v11;
        }

LABEL_58:
        dispatch_group_wait((dispatch_group_t)v149->_persistGroup, 0xFFFFFFFFFFFFFFFFLL);
        uint64_t v64 = [(id)objc_opt_class(v149) _cameraFaceOnly];
        if (!(_DWORD)v64)
        {
          v70 = atomic_load((unsigned __int8 *)&v149->_interrupt);
          if ((v70 & 1) != 0 || (uint64_t v71 = atomic_load((unsigned __int8 *)&v149->_cancel), (v71 & 1) != 0))
          {
            if (!a3)
            {
              v145 = 0;
              uint64_t v52 = 1;
              goto LABEL_43;
            }

            v163 = NSLocalizedDescriptionKey;
            v116 = atomic_load((unsigned __int8 *)&v149->_interrupt);
            os_log_type_t v49 = (v116 & 1) == 0;
            v117 = @"Interrupted";
            if (v49) {
              v117 = @"Canceled";
            }
            v164 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[PhotosCapture] %@ after fast track job",  v117));
            spida = (void *)v164;
            v133 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v164,  &v163,  1LL));
            v118 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL));
            v145 = 0;
            v119 = *a3;
            *a3 = v118;
            uint64_t v52 = 1;
          }

          else
          {
            spida = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset fetchAssetsFromCameraSinceDate:options:]( &OBJC_CLASS___PHAsset,  "fetchAssetsFromCameraSinceDate:options:",  0LL,  v144));
            v133 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset vcp_fetchOptionsForLibrary:forTaskID:]( &OBJC_CLASS___PHAsset,  "vcp_fetchOptionsForLibrary:forTaskID:",  v142,  10LL));
            [v133 setPredicate:0];
            uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"mediaAnalysisAttributes.characterRecognitionAttributes.algorithmVersion = nil && kindSubtype != %d",  1LL));
            [v133 setInternalPredicate:v72];

            uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"creationDate",  0LL));
            v162 = v73;
            uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v162,  1LL));
            [v133 setSortDescriptors:v74];

            v135 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset fetchAssetsFromCameraSinceDate:options:]( &OBJC_CLASS___PHAsset,  "fetchAssetsFromCameraSinceDate:options:",  0LL,  v133));
            v126 = mach_absolute_time();
            uint64_t v75 = VCPSignPostLog(v126);
            v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
            v127 = os_signpost_id_generate(v76);

            id v78 = VCPSignPostLog(v77);
            uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
            uint64_t v80 = v79;
            if (v127 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v79))
            {
              *(_WORD *)__int128 buf = 0;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v80,  OS_SIGNPOST_INTERVAL_BEGIN,  v127,  "VCPJIT_AssetFaceAndOCR_EndToEnd",  (const char *)&unk_100199097,  buf,  2u);
            }

            v82 = 0;
            os_log_type_t v83 = 0;
            v128 = 0LL;
            v129 = 0LL;
            id v84 = 0LL;
            v85 = 0LL;
            while (!v83 || !v82)
            {
              if (v83)
              {
                os_log_type_t v83 = 1;
              }

              else
              {
                v131 = objc_autoreleasePoolPush();
                int8x16_t v86 = (char *)[spida count];
                else {
                  v88 = (uint64_t)&v86[-v85];
                }
                id v89 = MediaAnalysisLogLevel(v86, v87);
                if ((int)v89 >= 6)
                {
                  id v91 = VCPLogInstance(v89, v90);
                  id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
                  if (os_log_type_enabled(v92, v141))
                  {
                    *(_DWORD *)__int128 buf = 134218240;
                    v170 = ++v129;
                    v171 = 2048;
                    v172 = v88;
                    _os_log_impl( (void *)&_mh_execute_header,  v92,  v141,  "[PhotosCapture] Quick Face ID batch %lu, jobs: %lu",  buf,  0x16u);
                  }
                }

                id v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSIndexSet indexSetWithIndexesInRange:]( &OBJC_CLASS___NSIndexSet,  "indexSetWithIndexesInRange:",  v85,  v88));
                v94 = (void *)objc_claimAutoreleasedReturnValue([spida objectsAtIndexes:v93]);
                v95 = -[VCPPhotosCaptureProcessingTask faceProcessingForAssets:withManager:onDemandDetection:]( v149,  "faceProcessingForAssets:withManager:onDemandDetection:",  v94,  v147,  1LL);
                if (v95)
                {
                  if (a3)
                  {
                    v160 = NSLocalizedDescriptionKey;
                    int8x16_t v96 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[PhotosCapture] Error during face processing"));
                    v161 = v96;
                    uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v161,  &v160,  1LL));
                    v98 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v95,  v97));
                    uint64_t v99 = *a3;
                    *a3 = v98;
                  }

                  v145 = 0;
                  os_log_type_t v83 = 0;
                }

                else
                {
                  v85 += v88;
                  os_log_type_t v83 = v85 >= (unint64_t)[spida count];
                }

                objc_autoreleasePoolPop(v131);
                if (v95) {
                  goto LABEL_119;
                }
              }

              v100 = atomic_load((unsigned __int8 *)&v149->_interrupt);
              if ((v100 & 1) != 0)
              {
                if (a3)
                {
                  v158 = NSLocalizedDescriptionKey;
                  v113 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[PhotosCapture] Interrupted with %lu face and %lu OCR job done",  v85,  v84));
                  v159 = v113;
                  v114 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v159,  &v158,  1LL));
                  v115 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL,  v114));
                  goto LABEL_117;
                }

    objc_autoreleasePoolPop(v23);
    ++v22;
    if (v26) {
      break;
    }
  }

  v141 = 0LL;
  while (v141 < (unint64_t)[v200 count])
  {
    v142 = objc_autoreleasePoolPush();
    v143 = -[MADComputeServiceProcessingTask isCancelled](self, "isCancelled");
    v145 = v143;
    if (!v143)
    {
      v149 = (void *)objc_claimAutoreleasedReturnValue([v200 objectAtIndexedSubscript:v141]);
      v150 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[MADComputeServiceProcessingTask][%@][Run]",  objc_opt_class(v149));
      v151 = (void *)objc_claimAutoreleasedReturnValue(v150);
      v152 = [v149 run];
      v154 = (int)v152;
      if ((_DWORD)v152)
      {
        v155 = MediaAnalysisLogLevel(v152, v153);
        if ((int)v155 >= 3)
        {
          v157 = VCPLogInstance(v155, v156);
          v158 = (os_log_s *)objc_claimAutoreleasedReturnValue(v157);
          if (os_log_type_enabled(v158, v196))
          {
            *(_DWORD *)__int128 buf = 138412546;
            v216 = (uint64_t)v151;
            v217 = 1024;
            LODWORD(v21_Block_object_dispose((const void *)(v1 - 160), 8) = v154;
            _os_log_impl((void *)&_mh_execute_header, v158, v196, "%@ Failed to process assets (%d)", buf, 0x12u);
          }
        }
      }

      goto LABEL_112;
    }

    v146 = MediaAnalysisLogLevel(v143, v144);
    if ((int)v146 >= 5)
    {
      v148 = VCPLogInstance(v146, v147);
      v149 = (void *)objc_claimAutoreleasedReturnValue(v148);
      if (os_log_type_enabled((os_log_t)v149, type))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v216 = (uint64_t)v199;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v149,  type,  "%@ Request is canceled during executing; quitting ...",
          buf,
          0xCu);
      }

  id v58 = VCPSignPostLog(v57);
  uint64_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
  uint64_t v60 = v59;
  if (v62 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v59))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v60,  OS_SIGNPOST_INTERVAL_END,  v61,  "MADPhotosFaceCropGenerationTask_Process",  (const char *)&unk_100199097,  buf,  2u);
  }

  -[VCPTimeMeasurement stop](v66, "stop");
  -[VCPTimeMeasurement elapsedTimeSeconds](v66, "elapsedTimeSeconds");
  objc_msgSend( v65,  "accumulateDoubleValue:forField:andEvent:",  @"TotalAnalyzingTimeInSeconds",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");
  objc_msgSend( v65,  "accumulateInt64Value:forField:andEvent:",  -[NSArray count](self->_assetEntries, "count"),  @"NumberOfFacecropsGenerated",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");
}

  return v3;
}

  id v32 = MediaAnalysisLogLevel(v30, v31);
  if ((int)v32 > 5)
  {
    uint64_t v34 = VCPLogInstance(v32, v33);
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    uint64_t v36 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v35, v36))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Current platform does not support embedding related operations; skip",
        buf,
        2u);
    }
  }

  uint64_t v37 = MediaAnalysisLogLevel(v32, v33);
  if ((int)v37 >= 6)
  {
    os_log_type_t v39 = VCPLogInstance(v37, v38);
    uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    uint64_t v41 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v40, v41))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Database backup does not support current platform; skip processing",
        buf,
        2u);
    }
  }

  uint64_t v42 = -[VCPPhotosMaintenanceProcessingTask _collectAndReportAnalysisProgress]( self,  "_collectAndReportAnalysisProgress");
  if ((_DWORD)v42) {
    uint64_t v8 = v42;
  }
LABEL_45:
  if (v8 != -128 && v8 != 0)
  {
    uint64_t v46 = MediaAnalysisLogLevel(v42, v43);
    if ((int)v46 >= 3)
    {
      id v48 = VCPLogInstance(v46, v47);
      os_log_type_t v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
      uint64_t v50 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v49, v50))
      {
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v64) = v8;
        _os_log_impl((void *)&_mh_execute_header, v49, v50, "Error maintaining library (%d); skip processing", buf, 8u);
      }
    }
  }

  VCPPerformance_ReportSummary();
  (*((void (**)(void))self->_completionHandler + 2))();
  return v8;
}

    os_log_type_t v43 = -23802;
    goto LABEL_35;
  }

  if (v10)
  {
    unsigned int v31 = -100000000LL;
    while (1)
    {
      id v32 = dispatch_time(0LL, 100000000LL);
      uint64_t v33 = dispatch_semaphore_wait(v23, v32);
      if (!v33) {
        goto LABEL_26;
      }
      v31 += 100000000LL;
      if (v31 >= 0xDF2517701LL)
      {
        id v57 = MediaAnalysisLogLevel(v33, v34);
        if ((int)v57 >= 4)
        {
          uint64_t v59 = VCPLogInstance(v57, v58);
          uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
          __int16 v61 = VCPLogToOSLogType[4];
          if (os_log_type_enabled(v60, v61))
          {
            *(_DWORD *)uint64_t v80 = 138412546;
            uint64_t v81 = v65;
            v82 = 1024;
            os_log_type_t v83 = (int)v28;
            _os_log_impl((void *)&_mh_execute_header, v60, v61, "[%@] Download resource timed-out (ID:%d)", v80, 0x12u);
          }
        }

        goto LABEL_33;
      }

      uint64_t v35 = v10[2](v10);
      if ((_DWORD)v35)
      {
        uint64_t v37 = MediaAnalysisLogLevel(v35, v36);
        if ((int)v37 >= 6)
        {
          os_log_type_t v39 = VCPLogInstance(v37, v38);
          uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
          uint64_t v41 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v40, v41))
          {
            *(_DWORD *)uint64_t v80 = 138412546;
            uint64_t v81 = v65;
            v82 = 1024;
            os_log_type_t v83 = (int)v28;
            _os_log_impl((void *)&_mh_execute_header, v40, v41, "[%@] Cancelling download (ID:%d)", v80, 0x12u);
          }
        }

        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue(+[PHAssetResourceManager defaultManager](&OBJC_CLASS___PHAssetResourceManager, "defaultManager"));
        [v42 cancelDataRequest:v28];

        dispatch_semaphore_wait(v23, 0xFFFFFFFFFFFFFFFFLL);
        os_log_type_t v43 = -128;
        goto LABEL_35;
      }
    }
  }

  os_log_type_t v49 = dispatch_time(0LL, 60000000000LL);
  uint64_t v50 = dispatch_semaphore_wait(v23, v49);
  if (v50)
  {
    uint64_t v52 = MediaAnalysisLogLevel(v50, v51);
    if ((int)v52 >= 4)
    {
      id v54 = VCPLogInstance(v52, v53);
      os_log_type_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
      uint64_t v56 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v55, v56))
      {
        *(_DWORD *)uint64_t v80 = 138412546;
        uint64_t v81 = v65;
        v82 = 1024;
        os_log_type_t v83 = (int)v28;
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "[%@] Download resource timed-out (ID:%d)", v80, 0x12u);
      }
    }

    goto LABEL_35;
  }

  uint64_t v13 = MediaAnalysisLogLevel(v11, v12);
  if ((int)v13 >= 7)
  {
    id v15 = VCPLogInstance(v13, v14);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    id v17 = VCPLogToOSLogType[7];
    if (os_log_type_enabled((os_log_t)v16, v17))
    {
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v6 localIdentifier]);
      uint64_t v59 = 138412290;
      uint64_t v60 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v16,  v17,  "[%@] Short movie is not analyzed; skipping",
        (uint8_t *)&v59,
        0xCu);
    }

    goto LABEL_36;
  }

  uint64_t v19 = 1;
LABEL_38:

  return v19;
}

void sub_100012754(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000128CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100012960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100012BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100012C58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  id v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___VCPMADTaskScheduler;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100012CC8(id a1)
{
  unsigned __int8 v1 = objc_alloc_init(&OBJC_CLASS___VCPMADTaskScheduler);
  uint64_t v2 = (void *)qword_1001E63B8;
  qword_1001E63B8 = (uint64_t)v1;
}

void sub_1000134BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1000138E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100013ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100014004(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) task]);
  id v3 = [v2 run];

  os_log_type_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completionHandler]);
  if (v4)
  {
    uint64_t v5 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completionHandler]);
    ((void (**)(void, id, id))v5)[2](v5, [*(id *)(a1 + 32) taskID], v3);
  }

  __int128 v6 = (dispatch_group_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) taskGroup]);
  dispatch_group_leave(v6);

  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 8LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_100014110;
  v11[3] = &unk_1001B9E70;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 40);
  id v12 = v9;
  uint64_t v13 = v10;
  dispatch_sync(v8, v11);
}

void sub_1000140FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100014110(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) task]);
      id v9 = (objc_class *)objc_opt_class(v8);
      uint64_t v10 = NSStringFromClass(v9);
      id v11 = (id)objc_claimAutoreleasedReturnValue(v10);
      id v12 = [*(id *)(a1 + 32) taskID];
      unsigned int v13 = [*(id *)(a1 + 32) qos];
      int v21 = 138412802;
      id v22 = v11;
      __int16 v23 = 2048;
      id v24 = v12;
      __int16 v25 = 1024;
      unsigned int v26 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[Scheduler] Completed %@ (%lu) [QoS: %d]",  (uint8_t *)&v21,  0x1Cu);
    }
  }

  [*(id *)(*(void *)(a1 + 40) + 24) removeObject:*(void *)(a1 + 32)];
  if (([*(id *)(a1 + 32) background] & 1) == 0)
  {
    unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) task]);
    [v14 resourceRequirement];
    *(float *)(*(void *)(a1 + 40) + 48LL) = v15 + *(float *)(*(void *)(a1 + 40) + 48LL);
  }

  if (![*(id *)(*(void *)(a1 + 40) + 24) count])
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[VCPCPUMonitor sharedCPUMonitor](&OBJC_CLASS___VCPCPUMonitor, "sharedCPUMonitor"));
    [v16 cancelRequest:*(unsigned int *)(*(void *)(a1 + 40) + 52)];

    uint64_t v17 = *(void *)(a1 + 40);
    uint64_t v18 = *(void **)(v17 + 56);
    *(void *)(v17 + 56) = 0LL;

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADQoSManager sharedManager](&OBJC_CLASS___VCPMADQoSManager, "sharedManager"));
    [v19 disable];
  }

  return [*(id *)(a1 + 40) _schedule];
}

void sub_1000142E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100014464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100014754( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

LABEL_11:
    }
  }

  id v24 = 0;
LABEL_13:

  return v24;
}

  uint64_t v59 = 0u;
  uint64_t v60 = 0u;
  id v57 = 0u;
  id v58 = 0u;
  obj = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) allKeys]);
  id v12 = [obj countByEnumeratingWithState:&v57 objects:v66 count:16];
  if (v12)
  {
    uint64_t v50 = *(void *)v58;
    do
    {
      os_log_type_t v49 = v12;
      for (i = 0LL; i != v49; i = (char *)i + 1)
      {
        if (*(void *)v58 != v50) {
          objc_enumerationMutation(obj);
        }
        unsigned int v14 = *(void *)(*((void *)&v57 + 1) + 8LL * (void)i);
        os_log_type_t v55 = 0u;
        uint64_t v56 = 0u;
        uint64_t v53 = 0u;
        id v54 = 0u;
        float v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "objectForKeyedSubscript:", v14, v49));
        uint64_t v16 = -[os_log_s countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v53,  v65,  16LL);
        if (v16)
        {
          uint64_t v17 = *(void *)v54;
          while (2)
          {
            for (j = 0LL; j != v16; j = (char *)j + 1)
            {
              if (*(void *)v54 != v17) {
                objc_enumerationMutation(v15);
              }
              uint64_t v19 = *(void **)(*((void *)&v53 + 1) + 8LL * (void)j);
              uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v19 task]);
              if ((objc_opt_respondsToSelector(v20, "interruptBackgroundTasks") & 1) == 0)
              {

LABEL_34:
                uint64_t v40 = VCPLogInstance(v23, v24);
                uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
                if (os_log_type_enabled(v41, OS_LOG_TYPE_FAULT))
                {
                  uint64_t v42 = (objc_class *)objc_opt_class(*(void *)(a1 + 40));
                  os_log_type_t v43 = NSStringFromClass(v42);
                  uint64_t v44 = (id)objc_claimAutoreleasedReturnValue(v43);
                  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v19 task]);
                  uint64_t v46 = (objc_class *)objc_opt_class(v45);
                  uint64_t v47 = NSStringFromClass(v46);
                  id v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
                  *(_DWORD *)__int128 buf = 138412546;
                  id v68 = v44;
                  v69 = 2112;
                  v70 = v48;
                  _os_log_fault_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_FAULT,  "[Scheduler] DAS activity (%@) scheduled concurrently with foreground work (%@); quitting",
                    buf,
                    0x16u);
                }

                goto LABEL_37;
              }

              int v21 = (void *)objc_claimAutoreleasedReturnValue([v19 task]);
              id v22 = [v21 interruptBackgroundTasks];

              if (v22) {
                goto LABEL_34;
              }
            }

            uint64_t v16 = -[os_log_s countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v53,  v65,  16LL);
            if (v16) {
              continue;
            }
            break;
          }
        }
      }

      id v12 = [obj countByEnumeratingWithState:&v57 objects:v66 count:16];
    }

    while (v12);
  }

  __int16 v25 = *(void *)(a1 + 32);
  unsigned int v26 = *(void *)(v25 + 40);
  *(void *)(v25 + 40) = v26 + 1;
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v26;
  uint64_t v27 = *(void **)(a1 + 32);
  obj = (id)objc_claimAutoreleasedReturnValue( +[VCPMADTaskEntry entryWithTaskID:qos:background:task:completionHandler:]( &OBJC_CLASS___VCPMADTaskEntry,  "entryWithTaskID:qos:background:task:completionHandler:",  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL),  *(unsigned int *)(a1 + 56),  1LL,  *(void *)(a1 + 40),  0LL));
  [v27 _runTask:obj];
LABEL_38:
}

    id v24 = 1LL;
    goto LABEL_12;
  }

  float v15 = MediaAnalysisLogLevel(v13, v14);
  uint64_t v17 = VCPLogInstance(v15, v16);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
  uint64_t v19 = VCPLogToOSLogType[6];
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v53 = 67109376;
    *(_DWORD *)id v54 = objc_msgSend(v7, "vcp_version");
    *(_WORD *)&v54[4] = 1024;
    *(_DWORD *)&v54[6] = objc_msgSend(v8, "vcp_version");
    uint64_t v20 = "    New analysis version outdated (%d vs %d); discarding";
    int v21 = v18;
    id v22 = v19;
    __int16 v23 = 14;
LABEL_6:
    _os_log_impl((void *)&_mh_execute_header, v21, v22, v20, (uint8_t *)&v53, v23);
  }

  return v5;
}
            }
          }

LABEL_12:
}
  }
}

  return (char)v6;
}
        }
      }

      else
      {
        id v32 = (void *)objc_claimAutoreleasedReturnValue([v16 downloadResource]);
        if (!v32
          || (uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v16 downloadURL]),
              uint64_t v34 = v33 == 0LL,
              v33,
              v32,
              v34))
        {
          uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v16 asset]);
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[VCPFaceUtils preferredResourcesForFaceProcessingWithAsset:]( &OBJC_CLASS___VCPFaceUtils,  "preferredResourcesForFaceProcessingWithAsset:",  v37));

          if ([v16 previousAttempts]
            || !_os_feature_enabled_impl("MediaAnalysis", "FCPeople"))
          {
            os_log_type_t v39 = objc_claimAutoreleasedReturnValue( +[VCPFaceUtils resourceForFaceProcessing:allowStreaming:]( &OBJC_CLASS___VCPFaceUtils,  "resourceForFaceProcessing:allowStreaming:",  v38,  0LL));
          }

          else
          {
            os_log_type_t v39 = objc_claimAutoreleasedReturnValue(objc_msgSend(v38, "vcp_thumbnailResource"));
          }

          uint64_t v41 = (void *)v39;
          if (v39)
          {
            uint64_t v42 = +[VCPFaceUtils isBestResourceForFaceProcessing:fromResources:]( &OBJC_CLASS___VCPFaceUtils,  "isBestResourceForFaceProcessing:fromResources:",  v39,  v38);
            processGroup = self->_processGroup;
            uint64_t v44 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue( [v55 objectAtIndexedSubscript:v14 % self->_processingQueuesCount]);
            v56[0] = _NSConcreteStackBlock;
            v56[1] = 3221225472LL;
            v56[2] = sub_1000A2350;
            v56[3] = &unk_1001BC850;
            v56[4] = self;
            id v57 = v16;
            id v58 = v41;
            uint64_t v59 = v42;
            dispatch_group_async((dispatch_group_t)processGroup, v44, v56);
          }

          else
          {
            uint64_t v45 = MediaAnalysisLogLevel(0LL, v40);
            if ((int)v45 >= 4)
            {
              uint64_t v47 = VCPLogInstance(v45, v46);
              id v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
              if (os_log_type_enabled(v48, type))
              {
                os_log_type_t v49 = (void *)objc_claimAutoreleasedReturnValue([v16 asset]);
                uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 localIdentifier]);
                *(_DWORD *)__int128 buf = 138412290;
                uint64_t v63 = v50;
                _os_log_impl( (void *)&_mh_execute_header,  v48,  type,  "[Face][Process][%@] No acceptable resource available",  buf,  0xCu);
              }
            }

            [v16 setStatus:4294943494];
          }
        }

        else
        {
          uint64_t v35 = self->_processGroup;
          uint64_t v36 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([v55 objectAtIndexedSubscript:v14 % self->_processingQueuesCount]);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_1000A2290;
          block[3] = &unk_1001B9E70;
          block[4] = self;
          __int16 v61 = v16;
          dispatch_group_async((dispatch_group_t)v35, v36, block);
        }
      }

    uint64_t v8 = 0;
    goto LABEL_12;
  }

  __int128 v6 = objc_msgSend(v3, "vcp_anyAssetsForTaskID:", 3);
  if ((v6 & 1) == 0)
  {
    uint64_t v16 = MediaAnalysisLogLevel(v6, v7);
    if ((int)v16 >= 5)
    {
      uint64_t v18 = VCPLogInstance(v16, v17);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      uint64_t v19 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v12, v19))
      {
        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v3 photoLibraryURL]);
        int v21 = (void *)objc_claimAutoreleasedReturnValue([v20 path]);
        __int16 v23 = 138412290;
        id v24 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  v19,  "[FaceLibraryProcessing] Photo library is empty; skipping library (%@)",
          (uint8_t *)&v23,
          0xCu);
      }

  return v5;
}

          os_log_type_t v28 = (int *)&MediaAnalysisVersion;
        }

          unsigned int v31 = 0;
LABEL_64:

          goto LABEL_65;
        }

        uint64_t v65 = MediaAnalysisLogLevel(v18, v19);
        os_log_type_t v67 = VCPLogInstance(v65, v66);
        uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
        id v48 = VCPLogToOSLogType[6];
        if (!os_log_type_enabled(v47, v48)) {
          goto LABEL_52;
        }
        v87 = 138412290;
        *(void *)v88 = v14;
        os_log_type_t v49 = "  Has asset deletion changes since last backup (%@); performing backup";
      }
      }
    }

    uint64_t v5 = 0;
    goto LABEL_13;
  }

  uint64_t v5 = -128;
LABEL_13:

  return v5;
}

  return v5;
}

void sub_100014944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100014AD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100014C1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100014C30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 40);
  *(void *)(v3 + 40) = v4 + 1;
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v4;
  uint64_t v5 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v5 >= 7)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (objc_class *)objc_opt_class(*(void *)(a1 + 40));
      id v11 = NSStringFromClass(v10);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
      int v14 = *(_DWORD *)(a1 + 64);
      [*(id *)(a1 + 40) resourceRequirement];
      int v21 = 138413058;
      id v22 = v12;
      __int16 v23 = 2048;
      uint64_t v24 = v13;
      __int16 v25 = 1024;
      int v26 = v14;
      __int16 v27 = 2048;
      double v28 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[Scheduler] Add %@ (%lu) [QoS: %d Cost: %0.3f]",  (uint8_t *)&v21,  0x26u);
    }
  }

  uint64_t v16 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInt:",  *(unsigned int *)(a1 + 64)));
  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKeyedSubscript:v17]);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADTaskEntry entryWithTaskID:qos:background:task:completionHandler:]( &OBJC_CLASS___VCPMADTaskEntry,  "entryWithTaskID:qos:background:task:completionHandler:",  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL),  *(unsigned int *)(a1 + 64),  0LL,  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
  [v18 addObject:v19];

  [*(id *)(a1 + 32) _checkBackgroundTasksForTask:*(void *)(a1 + 40)];
  return [*(id *)(a1 + 32) _schedule];
}

void sub_100014DF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100014F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100014F38(uint64_t a1)
{
  __int128 v63 = 0u;
  __int128 v64 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 24LL);
  id v1 = [obj countByEnumeratingWithState:&v61 objects:v71 count:16];
  if (v1)
  {
    uint64_t v2 = *(void *)v62;
LABEL_3:
    uint64_t v3 = 0LL;
    while (1)
    {
      if (*(void *)v62 != v2) {
        objc_enumerationMutation(obj);
      }
      uint64_t v4 = *(void **)(*((void *)&v61 + 1) + 8 * v3);
      id v5 = [v4 background];
      if ((_DWORD)v5) {
        break;
      }
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 task]);
      if ((objc_opt_respondsToSelector(v7, "interruptBackgroundTasks") & 1) == 0)
      {

LABEL_31:
        uint64_t v32 = VCPLogInstance(v10, v11);
        float v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
        {
          uint64_t v33 = (objc_class *)objc_opt_class(*(void *)(a1 + 40));
          uint64_t v34 = NSStringFromClass(v33);
          id v35 = (id)objc_claimAutoreleasedReturnValue(v34);
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v4 task]);
          uint64_t v37 = (objc_class *)objc_opt_class(v36);
          uint64_t v38 = NSStringFromClass(v37);
          os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
          *(_DWORD *)__int128 buf = 138412546;
          id v68 = v35;
          __int16 v69 = 2112;
          v70 = v39;
          _os_log_fault_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_FAULT,  "[Scheduler] DAS activity (%@) scheduled concurrently with foreground work (%@); quitting",
            buf,
            0x16u);
        }

LABEL_37:
        goto LABEL_38;
      }

      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 task]);
      unsigned int v9 = [v8 interruptBackgroundTasks];

      if (v9) {
        goto LABEL_31;
      }
      if (v1 == (id)++v3)
      {
        id v1 = [obj countByEnumeratingWithState:&v61 objects:v71 count:16];
        if (v1) {
          goto LABEL_3;
        }
        goto LABEL_11;
      }
    }

    uint64_t v28 = VCPLogInstance(v5, v6);
    float v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_FAULT))
    {
      uint64_t v29 = (objc_class *)objc_opt_class(*(void *)(a1 + 40));
      uint64_t v30 = NSStringFromClass(v29);
      unsigned int v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      sub_1000164B8(v31, buf, v15);
    }

    goto LABEL_37;
  }
  }

  return v12;
}

        uint64_t v29 = 13;
LABEL_61:

        goto LABEL_62;
      }

      uint64_t v29 = 13;
LABEL_62:

      objc_autoreleasePoolPop(v27);
      if (v29 && v29 != 13) {
        goto LABEL_72;
      }
      ++v24;
    }
  }

  float v15 = MediaAnalysisLogLevel(v6, v7);
  if ((int)v15 >= 3)
  {
    uint64_t v17 = VCPLogInstance(v15, v16);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    uint64_t v19 = VCPLogToOSLogType[3];
    v104 = v18;
    if (os_log_type_enabled(v18, v19))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to create backup file", buf, 2u);
    }

    v107 = -23;
    goto LABEL_75;
  }

  v107 = -23;
LABEL_76:

  objc_autoreleasePoolPop(context);
  v87 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  v88 = v87;
  if (v107)
  {
    if ([v87 fileExistsAtPath:v110])
    {
      id v89 = [v88 removeItemAtPath:v110 error:0];
      if ((v89 & 1) == 0)
      {
        id v91 = MediaAnalysisLogLevel(v89, v90);
        if ((int)v91 >= 4)
        {
          id v93 = VCPLogInstance(v91, v92);
          v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
          v95 = VCPLogToOSLogType[4];
          if (os_log_type_enabled(v94, v95))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v94,  v95,  "  Failed to delete intermediate file on aborted backup",  buf,  2u);
          }
        }
      }
    }
  }

  return v107;
}

  xpc_transactions_enable(a1);
  signal(15, (void (__cdecl *)(int))1);
  global_queue = dispatch_get_global_queue(21LL, 0LL);
  uint64_t v45 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
  uint64_t v46 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0xFuLL, 0LL, v45);
  dispatch_source_set_event_handler(v46, &stru_1001BD058);
  dispatch_activate(v46);
  uint64_t v47 = objc_autoreleasePoolPush();
  id v48 = objc_alloc_init(&OBJC_CLASS___VCPMADBackgroundService);
  id v49 = -[VCPMADBackgroundService run](v48, "run");

  objc_autoreleasePoolPop(v47);
  return v49 != 0;
}

            goto LABEL_54;
          }

          uint64_t v47 = objc_msgSend(v44, "vcp_version");
          if ((int)v47 < v39)
          {
            id v49 = MediaAnalysisLogLevel(v47, v48);
            uint64_t v51 = VCPLogInstance(v49, v50);
            uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
            if (!os_log_type_enabled(v52, v40)) {
              goto LABEL_37;
            }
            __int128 v53 = objc_msgSend(v46, "vcp_version");
            *(_DWORD *)__int128 buf = 138412802;
            v182 = v42;
            v183 = 1024;
            *(_DWORD *)v184 = v53;
            *(_WORD *)&v184[4] = 1024;
            *(_DWORD *)&v184[6] = v39;
            __int128 v54 = v52;
            __int128 v55 = v40;
            __int128 v56 = "[VSKDBUtil][%@] Analysis version %d < min version for forward compatible embedding (%d)";
            __int128 v57 = 24;
LABEL_36:
            _os_log_impl((void *)&_mh_execute_header, v54, v55, v56, buf, v57);
            goto LABEL_37;
          }

          __int128 v61 = objc_msgSend(v46, "vcp_degraded");
          if ((_DWORD)v61)
          {
            __int128 v63 = MediaAnalysisLogLevel(v61, v62);
            if ((int)v63 >= 5)
            {
              uint64_t v65 = VCPLogInstance(v63, v64);
              v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
              if (os_log_type_enabled(v66, type))
              {
                *(_DWORD *)__int128 buf = 138412290;
                v182 = v42;
                _os_log_impl( (void *)&_mh_execute_header,  v66,  type,  "[VSKDBUtil][%@] Using analysis results on degraded resource",  buf,  0xCu);
              }
            }
          }

          os_log_type_t v67 = +[VCPVideoCNNAnalyzer isMUBackboneEnabled]( &OBJC_CLASS___VCPVideoCNNAnalyzer,  "isMUBackboneEnabled");
          id v68 = v166;
          if (!v67) {
            goto LABEL_53;
          }
          __int16 v69 = (unint64_t)objc_msgSend(v46, "vcp_types");
          id v68 = v166;
          if ((v69 & 0x1000000000000LL) != 0) {
            goto LABEL_53;
          }
          v70 = [v162 queryAttemptsForLocalIdentifier:v42 andTaskID:255];
          if (!(_DWORD)v70)
          {
            v76 = MediaAnalysisLogLevel(v70, v71);
            id v68 = v161;
            if (v76 >= 3)
            {
              os_log_type_t v77 = VCPLogInstance(v161, v75);
              id v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
              if (os_log_type_enabled(v78, v159))
              {
                *(_DWORD *)__int128 buf = 138412290;
                v182 = v42;
                _os_log_impl( (void *)&_mh_execute_header,  v78,  v159,  "[VSKDBUtil][%@] Analysis missing Image Embedding",  buf,  0xCu);
              }

              id v68 = v161;
            }
}
}

  return 0;
}

    goto LABEL_38;
  }

  if (v34)
  {
    __int128 v58 = MediaAnalysisLogLevel(v36, v37);
    if ((int)v58 >= 6)
    {
      __int128 v60 = VCPLogInstance(v58, v59);
      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(v60);
      __int128 v61 = VCPLogToOSLogType[6];
      if (os_log_type_enabled((os_log_t)v51, v61))
      {
        __int128 v62 = self->_logPrefix;
        __int128 v63 = MADPersonProcessingStatusDescription(v34);
        __int128 v64 = (id)objc_claimAutoreleasedReturnValue(v63);
        *(_DWORD *)__int128 buf = 138412802;
        v341 = v62;
        v342 = 2112;
        v343 = (uint64_t)v64;
        v344 = 1024;
        LODWORD(v345) = v38;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v51,  v61,  "%@ Previous Gallery update status: %@, attempts: %d; skip update catch-up",
          buf,
          0x1Cu);
      }

      goto LABEL_37;
    }
  }

  else
  {
    uint64_t v65 = MediaAnalysisLogLevel(v36, v37);
    if ((int)v65 >= 6)
    {
      os_log_type_t v67 = VCPLogInstance(v65, v66);
      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue(v67);
      id v68 = VCPLogToOSLogType[6];
      if (os_log_type_enabled((os_log_t)v51, v68))
      {
        __int16 v69 = self->_logPrefix;
        v70 = MADPersonProcessingStatusDescription(0LL);
        uint64_t v71 = (id)objc_claimAutoreleasedReturnValue(v70);
        *(_DWORD *)__int128 buf = 138412546;
        v341 = v69;
        v342 = 2112;
        v343 = (uint64_t)v71;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v51, v68, "%@ No previous Gallery updates (%@)", buf, 0x16u);
      }

      goto LABEL_37;
    }
  }
}

void sub_100015418( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_1000156E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_100015730(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100015740(uint64_t a1)
{
}

void sub_100015748(void *a1)
{
  __int128 v54 = 0u;
  __int128 v55 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  id v2 = *(id *)(a1[4] + 24LL);
  id v3 = [v2 countByEnumeratingWithState:&v52 objects:v60 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v53;
    while (2)
    {
      for (i = 0LL; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v53 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v52 + 1) + 8LL * (void)i);
        id v7 = [v6 taskID];
        if (v7 == (id)a1[7])
        {
          uint64_t v28 = MediaAnalysisLogLevel(v7, v8);
          if ((int)v28 >= 5)
          {
            uint64_t v30 = VCPLogInstance(v28, v29);
            unsigned int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
            os_log_type_t v32 = VCPLogToOSLogType[5];
            if (os_log_type_enabled(v31, v32))
            {
              uint64_t v33 = a1[7];
              *(_DWORD *)__int128 buf = 134217984;
              uint64_t v59 = v33;
              _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "[Scheduler] Cancelling running task (VCPMADTaskID %lu)",  buf,  0xCu);
            }
          }

          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v6 task]);
          [v34 cancel];

          objc_storeStrong((id *)(*(void *)(a1[5] + 8LL) + 40LL), v6);
          goto LABEL_37;
        }
      }

      id v3 = [v2 countByEnumeratingWithState:&v52 objects:v60 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }

  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  id v9 = [(id)objc_opt_class(a1[4]) qosArray];
  id v2 = (id)objc_claimAutoreleasedReturnValue(v9);
  id v10 = [v2 countByEnumeratingWithState:&v48 objects:v57 count:16];
  if (v10)
  {
    uint64_t v11 = *(void *)v49;
    do
    {
      for (j = 0LL; j != v10; j = (char *)j + 1)
      {
        if (*(void *)v49 != v11) {
          objc_enumerationMutation(v2);
        }
        uint64_t v13 = *(void *)(*((void *)&v48 + 1) + 8LL * (void)j);
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        __int128 v44 = 0u;
        __int128 v45 = 0u;
        uint64_t v43 = v13;
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 32), "objectForKeyedSubscript:"));
        id v15 = [v14 countByEnumeratingWithState:&v44 objects:v56 count:16];
        if (v15)
        {
          uint64_t v16 = *(void *)v45;
          while (2)
          {
            for (k = 0LL; k != v15; k = (char *)k + 1)
            {
              if (*(void *)v45 != v16) {
                objc_enumerationMutation(v14);
              }
              uint64_t v18 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)k);
              id v19 = [v18 taskID];
              if (v19 == (id)a1[7])
              {
                uint64_t v35 = MediaAnalysisLogLevel(v19, v20);
                if ((int)v35 >= 5)
                {
                  uint64_t v37 = VCPLogInstance(v35, v36);
                  uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
                  os_log_type_t v39 = VCPLogToOSLogType[5];
                  if (os_log_type_enabled(v38, v39))
                  {
                    uint64_t v40 = a1[7];
                    *(_DWORD *)__int128 buf = 134217984;
                    uint64_t v59 = v40;
                    _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "[Scheduler] Cancelling pending task (VCPMADTaskID %lu)",  buf,  0xCu);
                  }
                }

                uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v18 task]);
                [v41 cancel];

                objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), v18);
                uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 32) objectForKeyedSubscript:v43]);
                [v42 removeObject:v18];

                goto LABEL_37;
              }
            }

            id v15 = [v14 countByEnumeratingWithState:&v44 objects:v56 count:16];
            if (v15) {
              continue;
            }
            break;
          }
        }
      }

      id v10 = [v2 countByEnumeratingWithState:&v48 objects:v57 count:16];
    }

    while (v10);
  }

  uint64_t v23 = MediaAnalysisLogLevel(v21, v22);
  if ((int)v23 >= 4)
  {
    uint64_t v25 = VCPLogInstance(v23, v24);
    id v2 = (id)objc_claimAutoreleasedReturnValue(v25);
    os_log_type_t v26 = VCPLogToOSLogType[4];
    if (os_log_type_enabled((os_log_t)v2, v26))
    {
      uint64_t v27 = a1[7];
      *(_DWORD *)__int128 buf = 134217984;
      uint64_t v59 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v2,  v26,  "[Scheduler] Failed to find task %lu to cancel",  buf,  0xCu);
    }

void sub_100015B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100015E30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_100015E70(uint64_t a1)
{
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 24LL);
  id v3 = [v2 countByEnumeratingWithState:&v29 objects:v35 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v30;
    do
    {
      for (i = 0LL; i != v3; i = (char *)i + 1)
      {
        if (*(void *)v30 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v29 + 1) + 8 * (void)i) task]);
        [v6 cancel];
      }

      id v3 = [v2 countByEnumeratingWithState:&v29 objects:v35 count:16];
    }

    while (v3);
  }

  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v7 = [(id)objc_opt_class(*(void *)(a1 + 32)) qosArray];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = [v8 countByEnumeratingWithState:&v25 objects:v34 count:16];
  if (v9)
  {
    uint64_t v19 = *(void *)v26;
    do
    {
      id v20 = v9;
      for (j = 0LL; j != v20; j = (char *)j + 1)
      {
        if (*(void *)v26 != v19) {
          objc_enumerationMutation(v8);
        }
        uint64_t v11 = *(void *)(*((void *)&v25 + 1) + 8LL * (void)j);
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        id v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 32), "objectForKeyedSubscript:", v11, v19));
        id v13 = [v12 countByEnumeratingWithState:&v21 objects:v33 count:16];
        if (v13)
        {
          uint64_t v14 = *(void *)v22;
          do
          {
            for (k = 0LL; k != v13; k = (char *)k + 1)
            {
              if (*(void *)v22 != v14) {
                objc_enumerationMutation(v12);
              }
              uint64_t v16 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)k);
              uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 task]);
              [v17 cancel];

              [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v16];
            }

            id v13 = [v12 countByEnumeratingWithState:&v21 objects:v33 count:16];
          }

          while (v13);
        }

        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v11]);
        [v18 removeAllObjects];
      }

      id v9 = [v8 countByEnumeratingWithState:&v25 objects:v34 count:16];
    }

    while (v9);
  }
}

void sub_1000160F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000161F0(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += [*(id *)(*(void *)(a1 + 32) + 24) count];
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v2 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32)), "qosArray", 0);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v9;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v3);
        }
        id v7 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:*(void *)(*((void *)&v8 + 1) + 8 * (void)v6)]);
        *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += [v7 count];

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v3 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }
}

void sub_100016338(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000163B8(void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
}

  ;
}

void sub_1000163D8()
{
  int v3 = 9;
  sub_1000163B8((void *)&_mh_execute_header, v0, v1, "[Scheduler] Invalid task QoS (%d); fallback to %d", v2);
}

void sub_100016448()
{
  int v3 = v0;
  sub_1000163B8((void *)&_mh_execute_header, v1, (uint64_t)v1, "[Scheduler] Invalid task QoS (%d); fallback to %d", v2);
}

void sub_1000164B8(void *a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)__int128 buf = 138412290;
  *(void *)(buf + 4) = a1;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "[Scheduler] Multiple intensive DAS activities scheduled concurrently; quitting %@",
    buf,
    0xCu);
}

LABEL_18:
    __int128 v25 = 0LL;
    goto LABEL_19;
  }

  if (!v8)
  {
    __int128 v31 = MediaAnalysisLogLevel(0LL, v9);
    if ((int)v31 >= 3)
    {
      uint64_t v33 = VCPLogInstance(v31, v32);
      __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      uint64_t v34 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v29, v34))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  v34,  "VCPProgressReporter: report block must be non-nil",  buf,  2u);
      }
          }

  sqlite3_finalize(ppStmt);

  return v7;
}
          }
        }

  return v3;
}

    objc_autoreleasePoolPop(v14);
    if ((v27 | 4) != 4) {
      goto LABEL_46;
    }
    ++v9;
    int v3 = v28;
  }

  os_log_type_t v39 = MediaAnalysisLogLevel(v12, v13);
  if ((int)v39 >= 6)
  {
    uint64_t v41 = VCPLogInstance(v39, v40);
    uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    if (os_log_type_enabled(v42, v10))
    {
      *(_DWORD *)__int128 buf = 134217984;
      __int128 v63 = v57;
      _os_log_impl( (void *)&_mh_execute_header,  v42,  v10,  "[FaceLibraryProcessing] Change %lu processing status to Hard Failure",  buf,  0xCu);
    }
  }

  uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v60 database]);
  __int128 v44 = [v43 hardFailAllRunningProcessingStatusForTaskID:3];

  if (v44 == -108 || v44 == -36)
  {
    __int128 v45 = v44;
  }

  else
  {
    __int128 v45 = v44;
    if (v44 != -23) {
      __int128 v45 = v3;
    }
  }

  if (v44 == -108 || v44 == -36 || v44 == -23)
  {
    LODWORD(v2_Block_object_dispose((const void *)(v1 - 160), 8) = v45;
LABEL_46:

    goto LABEL_61;
  }

  __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v60 database]);
  __int128 v47 = [v46 commit];

  if (v47 == -108 || v47 == -36)
  {
    LODWORD(v2_Block_object_dispose((const void *)(v1 - 160), 8) = v47;
  }

  else
  {
    LODWORD(v2_Block_object_dispose((const void *)(v1 - 160), 8) = v47;
    if (v47 != -23) {
      LODWORD(v2_Block_object_dispose((const void *)(v1 - 160), 8) = v45;
    }
  }

  if (v47 == -108 || v47 == -36 || v47 == -23) {
    goto LABEL_46;
  }
  __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  [v48 accumulateInt64Value:v57 forField:@"NumberOfAssetsHardFailure" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];

LABEL_57:
  __int128 v49 = MediaAnalysisLogLevel(v5, v6);
  if ((int)v49 < 6)
  {
    LODWORD(v2_Block_object_dispose((const void *)(v1 - 160), 8) = 0;
  }

  else
  {
    __int128 v51 = VCPLogInstance(v49, v50);
    __int128 v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    __int128 v53 = VCPLogToOSLogType[6];
    __int128 v56 = v52;
    if (os_log_type_enabled(v52, v53))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "[FaceLibraryProcessing] Processing status is up-to-date",  buf,  2u);
    }

    LODWORD(v2_Block_object_dispose((const void *)(v1 - 160), 8) = 0;
LABEL_61:
  }

  return (int)v28;
}

  objc_autoreleasePoolPop(v7);
  return v20;
}

      objc_autoreleasePoolPop(v6);
      id result = [*(id *)(a1 + 32) count];
    }

    __int128 v10 = *(void **)(a1 + 48);
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v7 localIdentifier]);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v11]);

    if (v12)
    {
      id v15 = -[os_log_s persistToPhotosAsset:](v12, "persistToPhotosAsset:", v7);
      uint64_t v17 = MediaAnalysisLogLevel(v15, v16);
      if ((int)v17 >= 7)
      {
        uint64_t v19 = VCPLogInstance(v17, v18);
        id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, v5))
        {
          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v7 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          __int128 v32 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, v5, "  [%@] Restored asset from backup", buf, 0xCu);
        }
      }

      ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
    }

    else
    {
      __int128 v26 = MediaAnalysisLogLevel(v13, v14);
      if ((int)v26 >= 4)
      {
        __int128 v28 = VCPLogInstance(v26, v27);
        __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        if (os_log_type_enabled(v29, v4))
        {
          __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v7 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          __int128 v32 = v30;
          _os_log_impl( (void *)&_mh_execute_header,  v29,  v4,  "  [%@] Failed to find matching asset from backup; skipping entry",
            buf,
            0xCu);
        }
      }
    }
            }
          }

          else
          {
            __int128 v25 = MediaAnalysisLogLevel(v15, v16);
            if ((int)v25 >= 3)
            {
              __int128 v27 = VCPLogInstance(v25, v26);
              __int128 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
              if (os_log_type_enabled(v21, v47))
              {
                *(_DWORD *)__int128 buf = 138412802;
                *(void *)__int128 v57 = v10;
                *(_WORD *)&v57[8] = 2112;
                *(void *)&v57[10] = v49;
                *(_WORD *)&v57[18] = 2112;
                *(void *)&v57[20] = v17;
                _os_log_impl( (void *)&_mh_execute_header,  v21,  v47,  "[MADProgressManager] Failed to report BGST Checkpoint reset for feature code %@ - %@ - %@",  buf,  0x20u);
              }

              uint64_t v5 = v46;
              goto LABEL_18;
            }
          }
        }

        else
        {
          __int128 v22 = MediaAnalysisLogLevel(0LL, v12);
          __int128 v24 = VCPLogInstance(v22, v23);
          uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)__int128 v57 = v49;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  type,  "[MADProgressManager] Skip reporting BGST Checkpoint reset for %@: no feature code",  buf,  0xCu);
          }
        }

LABEL_20:
        objc_autoreleasePoolPop(v11);
      }

      uint64_t v6 = [v5 countByEnumeratingWithState:&v52 objects:v58 count:16];
    }

    while (v6);
  }

  if (a3 == 3)
  {
    __int128 v50 = 0LL;
    __int128 v28 = +[BGSystemTaskCheckpoints reportFeatureCheckpoint:forFeature:error:]( &OBJC_CLASS___BGSystemTaskCheckpoints,  "reportFeatureCheckpoint:forFeature:error:",  3LL,  802LL,  &v50);
    __int128 v29 = v50;
    __int128 v31 = v29;
    if ((v28 & 1) != 0)
    {
      __int128 v32 = MediaAnalysisLogLevel(v29, v30);
      if ((int)v32 >= 5)
      {
        uint64_t v34 = VCPLogInstance(v32, v33);
        uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
        uint64_t v36 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v35, v36))
        {
          *(_DWORD *)__int128 buf = 67109378;
          *(_DWORD *)__int128 v57 = 802;
          *(_WORD *)&v57[4] = 2112;
          *(void *)&v57[6] = v49;
          uint64_t v37 = "[MADProgressManager] Reported BGST Checkpoint reset for feature code %d - %@";
          uint64_t v38 = v35;
          os_log_type_t v39 = v36;
          uint64_t v40 = 18;
LABEL_30:
          _os_log_impl((void *)&_mh_execute_header, v38, v39, v37, buf, v40);
          goto LABEL_31;
        }

        goto LABEL_31;
      }
    }

    else
    {
      uint64_t v41 = MediaAnalysisLogLevel(v29, v30);
      if ((int)v41 >= 3)
      {
        uint64_t v43 = VCPLogInstance(v41, v42);
        uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        __int128 v44 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v35, v44))
        {
          *(_DWORD *)__int128 buf = 67109634;
          *(_DWORD *)__int128 v57 = 802;
          *(_WORD *)&v57[4] = 2112;
          *(void *)&v57[6] = v49;
          *(_WORD *)&v57[14] = 2112;
          *(void *)&v57[16] = v31;
          uint64_t v37 = "[MADProgressManager] Failed to report BGST Checkpoint reset for feature code %d - %@ - %@";
          uint64_t v38 = v35;
          os_log_type_t v39 = v44;
          uint64_t v40 = 28;
          goto LABEL_30;
        }
}

            goto LABEL_22;
          }

          LODWORD(v22) = *(_DWORD *)v63;
        }
      }

      else
      {
        self->_totalFaceDetectedFrames = 0;
        LODWORD(v22) = 0;
      }

      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v22));
      [v19 setObject:v38 forKeyedSubscript:VCPPriorityScoreKey];
      __int128 v23 = 0;
      goto LABEL_18;
    }

    __int128 v58 = MediaAnalysisLogLevel(v44, v45);
    if ((int)v58 >= 3)
    {
      __int128 v60 = VCPLogInstance(v58, v59);
      __int128 v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
      __int128 v61 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v56, v61))
      {
        *(_WORD *)__int128 v63 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v61, "Failed to create VCPPriorityAnalysis instance", v63, 2u);
      }

LABEL_17:
      goto LABEL_18;
    }

    goto LABEL_18;
  }

  v40.receiver = self;
  v40.super_class = (Class)&OBJC_CLASS___VCPProgressReporter;
  __int128 v11 = -[VCPProgressReporter init](&v40, "init");
  id v12 = v11;
  if (v11)
  {
    v11->_totalJobCount = a4;
    atomic_store(0, (unsigned int *)&v11->_processedJobCount);
    v11->_processedJobCountOnLastUpdate = -1LL;
    id v13 = dispatch_queue_create("com.apple.mediaanalysisd.progressreport", 0LL);
    queue = v12->_queue;
    v12->_queue = (OS_dispatch_queue *)v13;

    objc_initWeak(&location, v12);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_100016824;
    v36[3] = &unk_1001BA058;
    objc_copyWeak(&v38, &location);
    uint64_t v37 = v10;
    id v15 = objc_claimAutoreleasedReturnValue( +[VCPTimer timerWithIntervalSeconds:isOneShot:andBlock:]( &OBJC_CLASS___VCPTimer,  "timerWithIntervalSeconds:isOneShot:andBlock:",  a3,  0LL,  v36));
    timer = v12->_timer;
    v12->_timer = (VCPTimer *)v15;

    uint64_t v19 = MediaAnalysisLogLevel(v17, v18);
    if ((int)v19 >= 7)
    {
      __int128 v21 = VCPLogInstance(v19, v20);
      __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      __int128 v23 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v22, v23))
      {
        totalJobCount = v12->_totalJobCount;
        *(_DWORD *)__int128 buf = 134217984;
        uint64_t v42 = totalJobCount;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Initialized VCPProgressReporter %lu", buf, 0xCu);
      }
    }

    objc_destroyWeak(&v38);
    objc_destroyWeak(&location);
  }

  self = v12;
  __int128 v25 = self;
LABEL_19:

  return v25;
}

        goto LABEL_18;
      }
    }

    else
    {
    }

    uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v9 database]);
    uint64_t v80 = 0LL;
    uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v8 localIdentifier]);
    __int128 v10 = [v33 queryProcessingStatus:&v82 attempts:&v81 lastAttemptDate:0 andNextAttemptDate:&v80 forLocalIdentifier:v34 andTaskID:3];
    uint64_t v35 = v80;

    if (v10)
    {
LABEL_61:

      goto LABEL_62;
    }

    uint64_t v38 = v82;
    if (v82 == 7 || v82 == 2)
    {
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v9 photoLibrary]);
      uint64_t v36 = objc_msgSend(v33, "vcp_supportsInMemoryDownload");
      if ((_DWORD)v36)
      {
        os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue([v9 photoLibrary]);
        else {
          uint64_t v40 = 1;
        }
      }

      else
      {
        uint64_t v40 = 0;
      }
    }

    else
    {
      uint64_t v40 = 0;
    }

    if (v38 == 7 || v38 == 2) {

    }
    if (v40)
    {
      uint64_t v41 = MediaAnalysisLogLevel(v36, v37);
      if ((int)v41 >= 6)
      {
        uint64_t v43 = VCPLogInstance(v41, v42);
        __int128 v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        __int128 v45 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v44, v45))
        {
          __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v8 localIdentifier]);
          __int128 v47 = VCPProcessingStatusDescription(v82);
          __int128 v48 = (id)objc_claimAutoreleasedReturnValue(v47);
          __int128 v49 = v81;
          __int128 v50 = (void *)objc_claimAutoreleasedReturnValue(+[VCPLogManager dateFormatter](&OBJC_CLASS___VCPLogManager, "dateFormatter"));
          __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v50 stringFromDate:v35]);
          *(_DWORD *)__int128 buf = 138413058;
          *(void *)&uint8_t buf[4] = v46;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v48;
          *(_WORD *)&buf[22] = 1024;
          id v84 = v49;
          v85 = 2112;
          int8x16_t v86 = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "[FaceLibraryProcessing][%@] Analysis deferred (%@|%d): no Internet access or streaming is disabled; revisit date: %@",
            buf,
            0x26u);
        }

    goto LABEL_18;
  }

  return result;
}

void sub_1000167D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  _Unwind_Resume(a1);
}

void sub_100016824(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained) {
    [WeakRetained _reportProgressWithBlock:*(void *)(a1 + 32)];
  }
}

void sub_100016868( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000168D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016930( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  __int128 v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___VCPProgressReporter;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100016AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100016AE0(uint64_t a1)
{
  return (*(uint64_t (**)(double))(*(void *)(a1 + 40) + 16LL))((float)((float)((float)*(uint64_t *)(*(void *)(a1 + 32) + 24LL)
                                                                                         * 100.0)
                                                                                 / (float)*(uint64_t *)(*(void *)(a1 + 32) + 40LL)));
}

void sub_100016C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016C44()
{
  uint64_t v0 = VCPLogInstance();
  uint64_t v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(v0);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)id v2 = 0;
    _os_log_fault_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_FAULT,  "Daemon appears to be hung; self-terminating",
      v2,
      2u);
  }

  exit(1);
}

void sub_100016CE0(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___VCPWatchdog);
  id v2 = (void *)qword_1001E63D8;
  qword_1001E63D8 = (uint64_t)v1;
}

void sub_100016E18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016E28(uint64_t a1)
{
  uint64_t v1 = (void *)qword_1001E63D0;
  qword_1001E63D0 = 0LL;
}

void sub_100016E78(id a1)
{
  uint64_t v1 = (void *)qword_1001E63D0;
  qword_1001E63D0 = 0LL;
}

void sub_100016F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100016F20(uint64_t a1)
{
  id v1 = objc_retainBlock(*(id *)(a1 + 32));
  id v2 = (void *)qword_1001E63D0;
  qword_1001E63D0 = (uint64_t)v1;
}

LABEL_24:
    goto LABEL_25;
  }

  uint64_t v19 = MediaAnalysisLogLevel(v5, v6);
  if ((int)v19 >= 7)
  {
    __int128 v21 = VCPLogInstance(v19, v20);
    __int128 v22 = (id)objc_claimAutoreleasedReturnValue(v21);
    __int128 v23 = VCPLogToOSLogType[7];
    if (os_log_type_enabled((os_log_t)v22, v23))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  v23,  "[Resource] Resource file cache directory exists",  buf,  2u);
    }

    goto LABEL_24;
  }

        v157 = -18;
LABEL_25:

LABEL_86:
        goto LABEL_87;
      }
    }

  return v10;
}
  }

  -[VCPSystemMonitor disable](v8, "disable");
  if ((_DWORD)v24) {
    __int128 v27 = 0LL;
  }
  else {
    __int128 v27 = v3;
  }
  (*((void (**)(id, void *, uint64_t))self->_completionHandler + 2))(self->_completionHandler, v27, v24);

  return v24;
}
        }
  }

void sub_1000175EC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 7)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v8, v9))
    {
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assetLocalIdentifier]);
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([v3 path]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) path]);
      *(_DWORD *)__int128 buf = 138412802;
      __int128 v30 = v10;
      __int16 v31 = 2112;
      __int128 v32 = v11;
      __int16 v33 = 2112;
      uint64_t v34 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[Resource][%@] Copying %@ to %@", buf, 0x20u);
    }
  }

  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v14 = *(void *)(a1 + 40);
  id v28 = 0LL;
  unsigned __int8 v15 = [v13 copyItemAtURL:v3 toURL:v14 error:&v28];
  id v16 = v28;

  if ((v15 & 1) == 0)
  {
    uint64_t v19 = MediaAnalysisLogLevel(v17, v18);
    if ((int)v19 >= 3)
    {
      uint64_t v21 = VCPLogInstance(v19, v20);
      __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      os_log_type_t v23 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v22, v23))
      {
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assetLocalIdentifier]);
        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v3 path]);
        __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) path]);
        __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v16 description]);
        *(_DWORD *)__int128 buf = 138413058;
        __int128 v30 = v24;
        __int16 v31 = 2112;
        __int128 v32 = v25;
        __int16 v33 = 2112;
        uint64_t v34 = v26;
        __int16 v35 = 2112;
        uint64_t v36 = v27;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "[Resource][%@] Failed to copy %@ to %@ (%@)", buf, 0x2Au);
      }
    }
  }
}

void sub_100017830(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 7)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v8, v9))
    {
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assetLocalIdentifier]);
      int v12 = 138412546;
      id v13 = v10;
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[Resource][%@] Request completed (error: %@)",  (uint8_t *)&v12,  0x16u);
    }
  }

  if (v3) {
    uint64_t v11 = 0LL;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 40);
  }
  (*(void (**)(void, uint64_t, id))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v11, v3);
}

void sub_100017944(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v5 >= 7)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    __int128 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v8, v9))
    {
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) assetLocalIdentifier]);
      int v11 = 138412546;
      int v12 = v10;
      __int16 v13 = 2048;
      double v14 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[Resource][%@] Download progress: %0.3f",  (uint8_t *)&v11,  0x16u);
    }
  }

void sub_1000181BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10001826C(uint64_t a1)
{
  id v1 = (id *)(a1 + 32);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));

  if (WeakRetained)
  {
    id v5 = objc_loadWeakRetained(v1);
    [v5 cancelAllRequests];
  }

  uint64_t v6 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v6 >= 7)
  {
    uint64_t v8 = VCPLogInstance(v6, v7);
    os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    os_log_type_t v10 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v9, v10))
    {
      *(_WORD *)int v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "HomeKit analysis server XPC connection interrupted", v11, 2u);
    }
  }

void sub_100018314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100018324(uint64_t a1)
{
  id v2 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));

  if (WeakRetained)
  {
    id v6 = objc_loadWeakRetained(v2);
    [v6 cancelAllRequests];
  }

  uint64_t v7 = MediaAnalysisLogLevel(v4, v5);
  if ((int)v7 >= 5)
  {
    uint64_t v9 = VCPLogInstance(v7, v8);
    os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    os_log_type_t v11 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v10, v11))
    {
      *(_WORD *)double v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "HomeKit analysis server XPC connection invalidated", v14, 2u);
    }
  }

  uint64_t v12 = *(void *)(a1 + 32);
  __int16 v13 = *(void **)(v12 + 8);
  *(void *)(v12 + _Block_object_dispose((const void *)(v24 - 136), 8) = 0LL;
}

void sub_1000183F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100018444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000185E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000187D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100018AC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100018AF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100018B08(uint64_t a1)
{
}

id sub_100018B10(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100018B2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_100018C00;
  v12[3] = &unk_1001BA1B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[1] = 3221225472LL;
  v12[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v8;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_100018C00(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
    if ((int)v7 >= 6)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v10, v11))
      {
        int v12 = *(_DWORD *)(a1 + 72);
        id v13 = *(void **)(a1 + 40);
        uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 description]);
        id v15 = (void *)v14;
        uint64_t v16 = "failed";
        LODWORD(v21) = 67109634;
        HIDWORD(v21) = v12;
        if (!v13) {
          uint64_t v16 = "completed";
        }
        __int16 v22 = 2080;
        os_log_type_t v23 = v16;
        __int16 v24 = 2112;
        uint64_t v25 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Request %d %s, %@", (uint8_t *)&v21, 0x1Cu);
      }
    }

    int v17 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 72),  v21));
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0LL;
}

void sub_100018DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100018DDC(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"requestID %d already exists",  *(unsigned int *)(a1 + 80)));
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPHomeKitAnalysisServiceTask taskForFragmentData:withProperties:andProgressHandler:andCompletionHandler:]( &OBJC_CLASS___VCPHomeKitAnalysisServiceTask,  "taskForFragmentData:withProperties:andProgressHandler:andCompletionHandler:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 64),  *(void *)(a1 + 72)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      os_log_type_t v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for request %d",  *(unsigned int *)(a1 + 80)));
      uint64_t v13 = *(void *)(a1 + 56);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      int v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_100018FD4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000192E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100019314(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100019330(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_100019404;
  v12[3] = &unk_1001BA1B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[1] = 3221225472LL;
  v12[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v8;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_100019404(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
    if ((int)v7 >= 6)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v10, v11))
      {
        int v12 = *(_DWORD *)(a1 + 72);
        id v13 = *(void **)(a1 + 40);
        uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 description]);
        id v15 = (void *)v14;
        uint64_t v16 = "failed";
        LODWORD(v21) = 67109634;
        HIDWORD(v21) = v12;
        if (!v13) {
          uint64_t v16 = "completed";
        }
        __int16 v22 = 2080;
        os_log_type_t v23 = v16;
        __int16 v24 = 2112;
        uint64_t v25 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Request %d %s, %@", (uint8_t *)&v21, 0x1Cu);
      }
    }

    int v17 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 72),  v21));
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v20 = *(void **)(v19 + 40);
  *(void *)(v19 + 40) = 0LL;
}

void sub_1000195B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000195E0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"requestID %d already exists",  *(unsigned int *)(a1 + 80)));
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPHomeKitAnalysisServiceTask taskForFragmentSurface:withProperties:andProgressHandler:andCompletionHandler:]( &OBJC_CLASS___VCPHomeKitAnalysisServiceTask,  "taskForFragmentSurface:withProperties:andProgressHandler:andCompletionHandler:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 64),  *(void *)(a1 + 72)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      os_log_type_t v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for request %d",  *(unsigned int *)(a1 + 80)));
      uint64_t v13 = *(void *)(a1 + 56);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      int v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_1000197D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100019A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019A90(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_100019B64;
  v12[3] = &unk_1001BA1B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[1] = 3221225472LL;
  v12[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v8;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_100019B64(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 32LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
    [v5 removeObjectForKey:v6];
  }

  [*(id *)(a1 + 32) logStatusForRequest:*(unsigned int *)(a1 + 72) withError:*(void *)(a1 + 40)];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0LL;
}

void sub_100019C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019C44(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    NSErrorUserInfoKey v26 = NSLocalizedDescriptionKey;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"requestID %d already exists",  *(unsigned int *)(a1 + 56)));
    __int128 v27 = v6;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v27,  &v26,  1LL));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -50LL,  v7));
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);
  }

  else
  {
    id v9 = objc_autoreleasePoolPush();
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[VCPHomeResidentMaintenanceTask taskWithOptions:extendTimeoutBlock:completionHandler:]( &OBJC_CLASS___VCPHomeResidentMaintenanceTask,  "taskWithOptions:extendTimeoutBlock:completionHandler:",  *(void *)(a1 + 40),  &stru_1001BA220,  *(void *)(a1 + 48)));
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v12 = [v11 addForegroundTask:v10 withQoS:25];

    if (v12)
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v12));
      uint64_t v16 = *(void **)(*(void *)(a1 + 32) + 32LL);
      int v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56)));
      [v16 setObject:v15 forKeyedSubscript:v17];
    }

    else
    {
      uint64_t v18 = MediaAnalysisLogLevel(v13, v14);
      if ((int)v18 >= 3)
      {
        uint64_t v20 = VCPLogInstance(v18, v19);
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        os_log_type_t v22 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v21, v22))
        {
          int v23 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)__int128 buf = 67109120;
          int v25 = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to schedule request %d; canceling", buf, 8u);
        }
      }
    }

    objc_autoreleasePoolPop(v9);
  }

void sub_100019EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100019F18(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_100019F54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10001A12C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10001A15C(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v3 unsignedIntegerValue];
}

void sub_10001A1D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001A414(_Unwind_Exception *a1)
{
  id v2 = v1;

  _Unwind_Resume(a1);
}

void sub_10001A464(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) allValues]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_10001A510(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("HMIAnalysisService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E63E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_10001A664();
    sub_10001A564();
  }

void sub_10001A564()
{
  id v1 = 0LL;
  if (!qword_1001E63F0)
  {
    __int128 v2 = off_1001BA290;
    uint64_t v3 = 0LL;
    qword_1001E63F0 = _sl_dlopen(&v2, &v1);
  }

  uint64_t v0 = v1;
  if (!qword_1001E63F0)
  {
    uint64_t v0 = (char *)abort_report_np("%s", v1);
    goto LABEL_7;
  }

  if (v1) {
LABEL_7:
  }
    free(v0);
}

Class sub_10001A610(uint64_t a1)
{
  Class result = objc_getClass("HMITaskService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E63F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_10001A688();
    return (Class)sub_10001A664();
  }

  return result;
}

uint64_t sub_10001A664()
{
  uint64_t v0 = abort_report_np("Unable to find class %s", "HMIAnalysisService");
  return sub_10001A688(v0);
}

BOOL sub_10001A688()
{
  uint64_t v0 = (void *)abort_report_np("Unable to find class %s", "HMITaskService");
  return +[VCPHomeKitAnalysisServiceTask isPerFrameAnalysisEnabled](v0, v1);
}

void sub_10001A818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10001A840()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_1001E6400;
  uint64_t v7 = qword_1001E6400;
  if (!qword_1001E6400)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10001B6BC;
    v3[3] = &unk_1001B9F10;
    v3[4] = &v4;
    sub_10001B6BC((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10001A8DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10001AA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001AB04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001ABBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001AC38(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 8))
  {
    *(_BYTE *)(v1 + _Block_object_dispose(va, 8) = 1;
    unsigned __int8 v3 = [(id)objc_opt_class(*(void *)(a1 + 32)) isPerFrameAnalysisEnabled];
    uint64_t v4 = *(void *)(a1 + 32);
    if ((v3 & 1) == 0 && *(_DWORD *)(v4 + 40) != -1)
    {
      objc_msgSend(*(id *)(v4 + 48), "cancelRequest:");
      uint64_t v4 = *(void *)(a1 + 32);
    }

    if (!*(_BYTE *)(v4 + 9))
    {
      uint64_t v5 = *(void *)(v4 + 72);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL,  0LL));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v6);

      *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 1;
    }
  }

void sub_10001ACF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10001ADBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001ADCC(uint64_t a1)
{
}

uint64_t (**sub_10001ADD4(uint64_t a1, uint64_t a2))(double)
{
  uint64_t v3 = *(void *)(a1 + 32);
  Class result = *(uint64_t (***)(double))(v3 + 64);
  if (result)
  {
    Class result = (uint64_t (**)(double))result[2](0.0);
    uint64_t v3 = *(void *)(a1 + 32);
  }

  if (*(_BYTE *)(v3 + 8)) {
  uint64_t v5 = *(void *)(v3 + 16);
  }
  if (v5)
  {
    uint64_t v6 = *(void **)(v3 + 48);
    uint64_t v7 = *(void *)(v3 + 32);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10001AF7C;
    v17[3] = &unk_1001BA370;
    uint64_t v8 = *(void *)(a1 + 40);
    v17[4] = v3;
    v17[5] = v8;
    Class result = (uint64_t (**)(double))[v6 requestAnalysisForAssetData:v5 withProperties:v7 andCompletionHandler:v17];
    *(_DWORD *)(*(void *)(a1 + 32) + 40LL) = (_DWORD)result;
  }

  else if (*(void *)(v3 + 24))
  {
    uint64_t v9 = MediaAnalysisLogLevel(result, a2);
    if ((int)v9 >= 4)
    {
      uint64_t v11 = VCPLogInstance(v9, v10);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      os_log_type_t v13 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v12, v13))
      {
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "IOSurface received, no analysis is implemented for now.",  v16,  2u);
      }
    }

    uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 72LL);
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -4LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v15);
  }

  *(_BYTE *)(*(void *)(a1 + 32) + 9LL) = 1;
  return result;
}

void sub_10001AF64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001AF7C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(v6 + 64);
  if (v7)
  {
    (*(void (**)(double))(v7 + 16))(100.0);
    uint64_t v6 = *(void *)(a1 + 32);
  }

  (*(void (**)(void))(*(void *)(v6 + 72) + 16LL))();
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

void sub_10001B000( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001B40C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, id a32)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);

  _Unwind_Resume(a1);
}

void sub_10001B4D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v8 = v6;
  if (v6)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    uint64_t v9 = MediaAnalysisLogLevel(v6, v7);
    if ((int)v9 >= 3)
    {
      uint64_t v11 = VCPLogInstance(v9, v10);
      id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      os_log_type_t v13 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v12, v13))
      {
        int v14 = 138412290;
        id v15 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Per-frame analysis fails with error: %@",  (uint8_t *)&v14,  0xCu);
      }
    }
  }

  else
  {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v5];
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10001B5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

Class sub_10001B6BC(uint64_t a1)
{
  uint64_t v4 = 0LL;
  if (!qword_1001E6408)
  {
    __int128 v5 = off_1001BA3B8;
    uint64_t v6 = 0LL;
    qword_1001E6408 = _sl_dlopen(&v5, &v4);
    __int128 v2 = v4;
    if (!qword_1001E6408)
    {
      abort_report_np("%s", v4);
      goto LABEL_7;
    }

    if (v4) {
      goto LABEL_8;
    }
  }

  while (1)
  {
    Class result = objc_getClass("HMIAnalysisService");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
      break;
    }
LABEL_7:
    __int128 v2 = (char *)sub_10001A664();
LABEL_8:
    free(v2);
  }

  qword_1001E6400 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

void sub_10001BB64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  _Unwind_Resume(a1);
}

id sub_10001BBDC()
{
  uint64_t v4 = 0LL;
  __int128 v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_1001E6410;
  uint64_t v7 = qword_1001E6410;
  if (!qword_1001E6410)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10001D984;
    v3[3] = &unk_1001B9F10;
    v3[4] = &v4;
    sub_10001D984((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10001BC78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10001BC90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 7)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)os_log_type_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[HomeKit] Session XPC connection interrupted", v13, 2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v9 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v10 = (void *)WeakRetained[1];
    WeakRetained[1] = 0LL;

    uint64_t v11 = (void *)v9[6];
    v9[6] = 0LL;

    [v9 cancelAllRequests];
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[VCPClientManager sharedManager](&OBJC_CLASS___VCPClientManager, "sharedManager"));
    [v12 removeClientHandler:v9];
  }
}

void sub_10001BD7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001BD98(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)os_log_type_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[HomeKit] Session XPC connection invalidated", v13, 2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v9 = WeakRetained;
  if (WeakRetained)
  {
    uint64_t v10 = (void *)WeakRetained[1];
    WeakRetained[1] = 0LL;

    uint64_t v11 = (void *)v9[6];
    v9[6] = 0LL;

    [v9 cancelAllRequests];
    id v12 = (void *)objc_claimAutoreleasedReturnValue(+[VCPClientManager sharedManager](&OBJC_CLASS___VCPClientManager, "sharedManager"));
    [v12 removeClientHandler:v9];
  }
}

void sub_10001BE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001BEE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C218(uint64_t a1)
{
  uint64_t v2 = dispatch_group_wait(*(dispatch_group_t *)(*(void *)(a1 + 32) + 72LL), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 24LL);
  if (v4)
  {
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10001C454;
    v16[3] = &unk_1001BA3D8;
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(id *)(a1 + 48);
    v16[4] = *(void *)(a1 + 32);
    id v17 = v6;
    [v4 handleMessageWithOptions:v5 completionHandler:v16];
  }

  else
  {
    uint64_t v7 = MediaAnalysisLogLevel(v2, v3);
    if ((int)v7 >= 4)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v10, v11))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "HMIVideoAnalyzer not initialized", buf, 2u);
      }
    }

    uint64_t v12 = *(void *)(a1 + 48);
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"HMIVideoAnalyzer not initialized"));
    uint64_t v20 = v13;
    int v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v14));
    (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v15);

    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 80LL));
  }

void sub_10001C418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C454(uint64_t a1)
{
}

void sub_10001C6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001C6E4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)a1[5];
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 32);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10001C7B0;
  block[3] = &unk_1001BA468;
  block[1] = 3221225472LL;
  uint64_t v16 = a1[6];
  block[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v8;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, block);
}

void sub_10001C7B0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 64LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 64)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
  if (v4)
  {
    if ((int)v7 >= 6)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = *(void *)(a1 + 64);
        id v13 = *(void **)(a1 + 40);
        uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 description]);
        id v15 = (void *)v14;
        uint64_t v16 = "failed";
        *(_DWORD *)__int128 buf = 134218498;
        uint64_t v40 = v12;
        if (!v13) {
          uint64_t v16 = "completed";
        }
        __int16 v41 = 2080;
        uint64_t v42 = v16;
        __int16 v43 = 2112;
        uint64_t v44 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Request %lu %s, %@", buf, 0x20u);
      }
    }

    id v17 = *(void **)(*(void *)(a1 + 32) + 64LL);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 64)));
    [v17 removeObjectForKey:v18];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    if ((int)v7 >= 4)
    {
      uint64_t v19 = VCPLogInstance(v7, v8);
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v21 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = *(void *)(a1 + 64);
        *(_DWORD *)__int128 buf = 134217984;
        uint64_t v40 = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Request %lu no longer exists", buf, 0xCu);
      }
    }

    uint64_t v23 = *(void *)(a1 + 56);
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Request ID not valid",  NSLocalizedDescriptionKey));
    uint64_t v38 = v24;
    int v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL));
    NSErrorUserInfoKey v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v25));
    (*(void (**)(uint64_t, void, void *))(v23 + 16))(v23, 0LL, v26);
  }

  if ([*(id *)(a1 + 40) code] == (id)-23804)
  {
    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) domain]);
    unsigned int v28 = [v27 isEqualToString:NSOSStatusErrorDomain];

    if (v28)
    {
      [*(id *)(*(void *)(a1 + 32) + 24) cancel];
      __int128 v29 = *(void **)(*(void *)(a1 + 32) + 24LL);
      *(void *)(*(void *)(a1 + 32) + 24LL) = 0LL;

      uint64_t v32 = MediaAnalysisLogLevel(v30, v31);
      if ((int)v32 >= 4)
      {
        uint64_t v34 = VCPLogInstance(v32, v33);
        __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
        os_log_type_t v36 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v35, v36))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Handling asset time-out; re-initialize HMIVideoAnalyzer",
            buf,
            2u);
        }
      }

      [*(id *)(a1 + 32) startSessionWithProperties:0 andReply:&stru_1001BA440];
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 72LL));
}

void sub_10001CB48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001CBA0(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2 && (int)MediaAnalysisLogLevel() >= 3)
  {
    uint64_t v3 = VCPLogInstance();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v4, v5))
    {
      int v6 = 138412290;
      uint64_t v7 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Error with re-initializing HMIVideoAnalyzer: %@",  (uint8_t *)&v6,  0xCu);
    }
  }
}

void sub_10001CC6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001CC88(void *a1)
{
  uint64_t v2 = *(void **)(a1[4] + 64LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[7]));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
    if ((int)v7 >= 3)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = a1[7];
        *(_DWORD *)__int128 buf = 134217984;
        uint64_t v22 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "taskID %lu already exists", buf, 0xCu);
      }
    }

    uint64_t v13 = a1[5];
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"taskID already exists"));
    uint64_t v20 = v14;
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v15));
    (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v16);

    *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = 1;
  }

  else
  {
    id v17 = *(void **)(a1[4] + 64LL);
    id v18 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[7]));
    [v17 setObject:&off_1001C7A78 forKeyedSubscript:v18];
  }

void sub_10001CEB4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10001CF00(void *a1)
{
  uint64_t v2 = dispatch_group_wait(*(dispatch_group_t *)(a1[4] + 80LL), 0xFFFFFFFFFFFFFFFFLL);
  if (*(void *)(a1[4] + 24LL))
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[VCPHomeKitFragmentProcessingTask taskForAssetData:withAnalyzer:withOptions:andCompletionHandler:]( &OBJC_CLASS___VCPHomeKitFragmentProcessingTask,  "taskForAssetData:withAnalyzer:withOptions:andCompletionHandler:",  a1[5],  *(void *)(a1[4] + 24LL),  a1[6],  a1[8]));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v7 = [v6 addForegroundTask:v5 withQoS:25];

    uint64_t v8 = a1[4];
    uint64_t v9 = *(dispatch_queue_s **)(v8 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10001D284;
    block[3] = &unk_1001BA508;
    block[4] = v8;
    void block[5] = v7;
    block[6] = a1[9];
    dispatch_sync(v9, block);

    objc_autoreleasePoolPop(v4);
  }

  else
  {
    uint64_t v10 = MediaAnalysisLogLevel(v2, v3);
    if ((int)v10 >= 4)
    {
      uint64_t v12 = VCPLogInstance(v10, v11);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      os_log_type_t v14 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v13, v14))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "HMIVideoAnalyzer not initialized", buf, 2u);
      }
    }

    uint64_t v15 = a1[4];
    uint64_t v16 = *(dispatch_queue_s **)(v15 + 32);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_10001D21C;
    v23[3] = &unk_1001BA4E0;
    uint64_t v17 = a1[9];
    v23[4] = v15;
    v23[5] = v17;
    dispatch_sync(v16, v23);
    uint64_t v18 = a1[7];
    NSErrorUserInfoKey v25 = NSLocalizedDescriptionKey;
    NSErrorUserInfoKey v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"HMIVideoAnalyzer not initialized"));
    NSErrorUserInfoKey v26 = v19;
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v26,  &v25,  1LL));
    os_log_type_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v20));
    (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0LL, v21);

    dispatch_group_leave(*(dispatch_group_t *)(a1[4] + 72LL));
  }

void sub_10001D1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001D21C(uint64_t a1)
{
  id v1 = *(void **)(*(void *)(a1 + 32) + 64LL);
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 40)));
  objc_msgSend(v1, "removeObjectForKey:");
}

void sub_10001D270( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10001D284(void *a1, uint64_t a2)
{
  if (a1[5])
  {
    id v13 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:"));
    uint64_t v3 = *(void **)(a1[4] + 64LL);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[6]));
    [v3 setObject:v13 forKeyedSubscript:v4];
  }

  else
  {
    uint64_t v5 = MediaAnalysisLogLevel(a1, a2);
    if ((int)v5 >= 4)
    {
      uint64_t v7 = VCPLogInstance(v5, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      os_log_type_t v9 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = a1[5];
        *(_DWORD *)__int128 buf = 134217984;
        uint64_t v15 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to create task for MAD request %lu", buf, 0xCu);
      }
    }

    uint64_t v11 = *(void **)(a1[4] + 64LL);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[6]));
    [v11 removeObjectForKey:v12];
  }

void sub_10001D404( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10001D454(id a1, NSError *a2)
{
  id v2 = a2;
  uint64_t v4 = v2;
  if (v2)
  {
    uint64_t v5 = MediaAnalysisLogLevel(v2, v3);
    if ((int)v5 >= 3)
    {
      uint64_t v7 = VCPLogInstance(v5, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      os_log_type_t v9 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](v4, "description"));
        int v11 = 138412290;
        uint64_t v12 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to publish results (%@)", (uint8_t *)&v11, 0xCu);
      }
    }
  }
}

void sub_10001D534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001D7F8(_Unwind_Exception *a1)
{
  id v2 = v1;

  _Unwind_Resume(a1);
}

uint64_t sub_10001D848(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001D858(uint64_t a1)
{
}

void sub_10001D860(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) allValues]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

Class sub_10001D984(uint64_t a1)
{
  uint64_t v4 = 0LL;
  if (!qword_1001E6418)
  {
    __int128 v5 = off_1001BA570;
    uint64_t v6 = 0LL;
    qword_1001E6418 = _sl_dlopen(&v5, &v4);
    uint64_t v2 = v4;
    if (!qword_1001E6418)
    {
      abort_report_np("%s", (const char *)v4);
      goto LABEL_7;
    }

    if (v4) {
      goto LABEL_8;
    }
  }

  while (1)
  {
    Class result = objc_getClass("HMIVideoAnalyzer");
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
    if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL)) {
      break;
    }
LABEL_7:
    uint64_t v2 = sub_10001DA78();
LABEL_8:
    free(v2);
  }

  qword_1001E6410 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  return result;
}

VCPHomeKitFragmentProcessingTask *sub_10001DA78()
{
  uint64_t v0 = (VCPHomeKitFragmentProcessingTask *)abort_report_np("Unable to find class %s", "HMIVideoAnalyzer");
  return -[VCPHomeKitFragmentProcessingTask init](v0, v1);
}

void sub_10001DBA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001DC60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001DDA4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPHomeKitFragmentProcessingTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10001E1AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, id a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, id a29)
{
  _Block_object_dispose(&a18, 8);
  _Block_object_dispose(&a24, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_10001E264(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10001E274(uint64_t a1)
{
}

void sub_10001E27C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v5;
  id v12 = v5;

  uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v6;
  id v11 = v6;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_10001E48C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10001E58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_29:
  uint64_t v20 = -20;
LABEL_16:
  uint64_t v32 = sqlite3_finalize(pStmt);
  uint64_t v34 = v9;
  if (v20)
  {
    __int16 v35 = MediaAnalysisLogLevel(v32, v33);
    if ((int)v35 >= 3)
    {
      uint64_t v37 = VCPLogInstance(v35, v36);
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      os_log_type_t v39 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v38, v39))
      {
        *(_DWORD *)__int128 buf = 67109120;
        uint64_t v81 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "[VCPAnalyzedAssets] Error occurred when querying database: %d",  buf,  8u);
      }
    }

    uint64_t v34 = 0LL;
  }

  NSErrorUserInfoKey v26 = v34;

LABEL_23:
  return v26;
}

          if (pixelBuffer
            && !(_DWORD)v75
            && CVPixelBufferUnlockBaseAddress(pixelBuffer, unlockFlags)
            && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_10002C418();
          }

          if (v79
            && !(_DWORD)v78
            && CVPixelBufferUnlockBaseAddress(v79, v80)
            && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
          {
            sub_10002C418();
          }

          sub_10000421C((const void **)&v81);
          if ((v36 & 1) == 0) {
            goto LABEL_44;
          }
          goto LABEL_40;
        }
      }

      sub_10000421C((const void **)&v81);
      NSErrorUserInfoKey v26 = 0LL;
    }
        }

        goto LABEL_31;
      }

      uint64_t v65 = MediaAnalysisLogLevel(v47, v48);
      os_log_type_t v67 = VCPLogInstance(v65, v66);
      __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v55, type))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v191 = v34;
        _os_log_impl((void *)&_mh_execute_header, v55, type, "%@ Missing embedding data; skipping", buf, 0xCu);
      }

  return v24;
}

  return v12;
}

        __int16 v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
        [v97 setObject:v43 forKey:@"PreheatLastRun"];

        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v32));
        [v97 setObject:v44 forKey:@"PreheatAttempts"];

        __int128 v47 = MediaAnalysisLogLevel(v45, v46);
        if ((int)v47 >= 5)
        {
          __int128 v49 = VCPLogInstance(v47, v48);
          __int128 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
          __int128 v51 = VCPLogToOSLogType[5];
          if (os_log_type_enabled(v50, v51))
          {
            *(_DWORD *)__int128 buf = 67109632;
            *(_DWORD *)v111 = (int)v24;
            *(_WORD *)&v111[4] = 2048;
            *(void *)&v111[6] = v32;
            v112 = 2048;
            v113 = 3LL;
            _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "Preheating critical models (%d sec since boot, %lu previous attempts this boot, max allowed: %lu)",  buf,  0x1Cu);
          }
        }

        uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
        __int128 v52 = objc_alloc_init(&OBJC_CLASS___MADRemoveBackgroundMaskRequest);
        [v99 addObject:v52];

        __int128 v53 = objc_alloc_init(&OBJC_CLASS___MADVIVisualSearchGatingRequest);
        [v99 addObject:v53];

        if (VCPPhotosMRCCachingSupported())
        {
          __int128 v54 = objc_alloc_init(&OBJC_CLASS___MADVIMachineReadableCodeDetectionRequest);
          [v99 addObject:v54];
        }

        pixelBufferOut = 0LL;
        v108 = kCVPixelBufferIOSurfacePropertiesKey;
        v109 = &__NSDictionary0__struct;
        pixelBufferAttributes = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v109,  &v108,  1LL));
        CVPixelBufferCreate(0LL, 0x140uLL, 0x140uLL, 0x42475241u, pixelBufferAttributes, &pixelBufferOut);
        __int128 v55 = (void *)objc_opt_class(self);
        [v55 clearPixelBuffer:pixelBufferOut];
        __int128 v56 = objc_alloc_init(&OBJC_CLASS___VCPClientHandler);
        __int128 v57 = *(void **)(&self->_preheat_timed_out + 1);
        *(void *)(&self->_preheat_timed_out + 1) = v56;

        __int128 v58 = (void *)objc_claimAutoreleasedReturnValue(+[VCPClientManager sharedManager](&OBJC_CLASS___VCPClientManager, "sharedManager"));
        [v58 addClientHandler:*(void *)(&self->_preheat_timed_out + 1)];

        id v92 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADServiceImageAsset assetWithPixelBuffer:orientation:identifier:clientBundleID:clientTeamID:]( &OBJC_CLASS___VCPMADServiceImageAsset,  "assetWithPixelBuffer:orientation:identifier:clientBundleID:clientTeamID:",  pixelBufferOut,  1LL,  0LL,  0LL,  0LL));
        uint64_t v59 = dispatch_queue_attr_make_with_autorelease_frequency(0LL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
        __int128 v60 = (dispatch_queue_attr_s *)objc_claimAutoreleasedReturnValue(v59);
        __int128 v61 = dispatch_queue_create("com.apple.mediaanalysisd.preheat", v60);
        __int128 v62 = *(void **)(&self->super._cancelledByDAS + 1);
        *(void *)(&self->super._cancelledByDAS + 1) = v61;

        __int128 v63 = (OS_dispatch_queue *)dispatch_semaphore_create(0LL);
        __int128 v64 = *(OS_dispatch_queue **)((char *)&self->_preheat_queue + 1);
        *(OS_dispatch_queue **)((char *)&self->_preheat_queue + 1) = v63;

        context = objc_autoreleasePoolPush();
        uint64_t v65 = objc_alloc_init(&OBJC_CLASS___MADScopedWatchdog);
        v104[0] = _NSConcreteStackBlock;
        v104[1] = 3221225472LL;
        v104[2] = sub_10004B3F4;
        v104[3] = &unk_1001BB408;
        v106 = v100;
        id v90 = v65;
        v105 = v90;
        v66 = objc_retainBlock(v104);
        os_log_type_t v67 = ((uint64_t (*)(void))v66[2])();
        id v68 = v67;
        if (v67)
        {
          v98[2](v98, 0LL);
        }

        else
        {
          v103[0] = _NSConcreteStackBlock;
          v103[1] = 3221225472LL;
          v103[2] = sub_10004B438;
          v103[3] = &unk_1001BB430;
          v103[4] = self;
          __int16 v69 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADServiceImageProcessingTask taskWithRequests:forAsset:cancelBlock:andCompletionHandler:]( &OBJC_CLASS___VCPMADServiceImageProcessingTask,  "taskWithRequests:forAsset:cancelBlock:andCompletionHandler:",  v99,  v92,  v66,  v103));
          v70 = *(dispatch_queue_s **)(&self->super._cancelledByDAS + 1);
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472LL;
          block[2] = sub_10004B44C;
          block[3] = &unk_1001BA0C8;
          id v89 = v69;
          v102 = v89;
          dispatch_async(v70, block);
          uint64_t v71 = VCPLogToOSLogType[5];
          uint64_t v72 = 5LL;
          while (1)
          {
            uint64_t v73 = *(dispatch_semaphore_s **)((char *)&self->_preheat_queue + 1);
            uint64_t v74 = dispatch_time(0LL, 5000000000LL);
            BYTE1(self->_preheat_completion_semaphore) = dispatch_semaphore_wait(v73, v74) != 0;
            uint64_t v75 = ((uint64_t (*)(void *))v66[2])(v66);
            os_log_type_t v77 = (unint64_t)(v72 - 5) > 0x37E ? 1 : v75;
            if (v77 == 1) {
              break;
            }
            HIDWORD(v7_Block_object_dispose(va, 8) = -286331153 * (unsigned __int16)v72;
            LODWORD(v7_Block_object_dispose(va, 8) = HIDWORD(v78);
            if ((v78 >> 2) <= 0x4444444)
            {
              uint64_t v79 = MediaAnalysisLogLevel(v75, v76);
              if ((int)v79 >= 5)
              {
                uint64_t v81 = VCPLogInstance(v79, v80);
                v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
                if (os_log_type_enabled(v82, v71))
                {
                  *(_DWORD *)__int128 buf = 67109376;
                  *(_DWORD *)v111 = v72;
                  *(_WORD *)&v111[4] = 1024;
                  *(_DWORD *)&v111[6] = 900;
                  _os_log_impl((void *)&_mh_execute_header, v82, v71, "Preheating for %d/%d seconds", buf, 0xEu);
                }
              }
            }

            v72 += 5LL;
            if (!BYTE1(self->_preheat_completion_semaphore)) {
              goto LABEL_54;
            }
          }

          os_log_type_t v83 = MediaAnalysisLogLevel(v75, v76);
          if ((int)v83 >= 3)
          {
            v85 = VCPLogInstance(v83, v84);
            int8x16_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
            v87 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v86, v87))
            {
              *(_DWORD *)__int128 buf = 67109376;
              *(_DWORD *)v111 = v72;
              *(_WORD *)&v111[4] = 1024;
              *(_DWORD *)&v111[6] = 900;
              _os_log_impl( (void *)&_mh_execute_header,  v86,  v87,  "Preheating canceled or timed out after %d/%d seconds",  buf,  0xEu);
            }
          }

          [v89 cancel];
LABEL_54:
        }

        objc_autoreleasePoolPop(context);
        if ((v68 & 1) == 0)
        {
          if (!BYTE1(self->_preheat_completion_semaphore))
          {
            v88 = (void *)objc_claimAutoreleasedReturnValue(+[VCPClientManager sharedManager](&OBJC_CLASS___VCPClientManager, "sharedManager"));
            [v88 removeClientHandler:*(void *)(&self->_preheat_timed_out + 1)];
          }

          v98[2](v98, 0LL);
        }

        sub_10000421C((const void **)&pixelBufferOut);
        goto LABEL_60;
      }
    }

    else
    {
      uint64_t v38 = MediaAnalysisLogLevel(0LL, v25);
      if ((int)v38 >= 4)
      {
        uint64_t v40 = VCPLogInstance(v38, v39);
        __int16 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        uint64_t v42 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v41, v42))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "No last preheat run time recorded, clearing attempts to 0",  buf,  2u);
        }
      }
    }

    uint64_t v32 = 0LL;
    goto LABEL_29;
  }

  id v12 = MediaAnalysisLogLevel(v7, v8);
  if ((int)v12 >= 5)
  {
    os_log_type_t v14 = VCPLogInstance(v12, v13);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    uint64_t v16 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v15, v16))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "[Preheat] BackgroundSystemTask disabled; skipping", buf, 2u);
    }

    id v6 = v98;
  }

  v6[2](v6, 4294967278LL);
LABEL_61:
}

    LODWORD(v32) = (_DWORD)v2;
  }

  return (int)v32;
}

    uint64_t v40 = VCPSignPostLog(v33);
    __int16 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    uint64_t v42 = v41;
    if (v56 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v41))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v42,  OS_SIGNPOST_INTERVAL_END,  v57,  "VCPJIT_Face_DetectAndIdentifyBatch",  (const char *)&unk_100199097,  buf,  2u);
    }

    if (v58)
    {
      __int16 v43 = mach_absolute_time();
      VCPPerformance_LogMeasurement("VCPJIT_Face_DetectAndIdentifyBatch", v43 - v58);
    }
            }
          }

          else
          {
            uint64_t v38 = MediaAnalysisLogLevel(v36, v37);
            if ((int)v38 >= 3)
            {
              uint64_t v40 = VCPLogInstance(v38, v39);
              __int16 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
              if (os_log_type_enabled(v41, v49))
              {
                *(_DWORD *)uint64_t v72 = 138412546;
                uint64_t v73 = @"[ProcessVideoAssetURL]";
                uint64_t v74 = 2112;
                uint64_t v75 = v10;
                uint64_t v42 = v41;
                __int16 v43 = v49;
                uint64_t v44 = "%@[%@] Failed to process analysis";
                goto LABEL_28;
              }

              goto LABEL_29;
            }
          }

          _Block_object_dispose(&v61, 8);
          _Block_object_dispose(buf, 8);

          goto LABEL_31;
        }

        uint64_t v16 = MediaAnalysisLogLevel(v14, v15);
        if ((int)v16 >= 6)
        {
          uint64_t v18 = VCPLogInstance(v16, v17);
          NSErrorUserInfoKey v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
          if (os_log_type_enabled(v19, type))
          {
            *(_DWORD *)__int128 buf = v48;
            *(void *)&uint8_t buf[4] = @"[ProcessVideoAssetURL]";
            _os_log_impl((void *)&_mh_execute_header, v19, type, "%@ Resume processed; skip re-process", buf, 0xCu);
          }
        }

    LODWORD(v32) = (_DWORD)v2;
  }

  return (int)v32;
}

  if ((unint64_t)-[NSMutableArray count](self->_pendingChanges, "count") <= 0x63
    && self->_pendingResourceChangeCount < 5
    || (__int16 v43 = -[VCPPhotosAssetChangeManager publishPendingChanges](self, "publishPendingChanges")) == 0)
  {
LABEL_32:
    __int16 v43 = 0;
  }

void sub_10001EC48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001ED2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001ED84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001EDE4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___VCPAnalyzedAssets;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10001F11C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10001F68C(_Unwind_Exception *a1)
{
  uint64_t v8 = v7;

  _Unwind_Resume(a1);
}

SCMLHandler *__cdecl sub_10001F728(id a1)
{
  SEL v1 = objc_alloc(&OBJC_CLASS___SCMLHandler);
  uint64_t v20 = SCMLUseAnyAvailableDevice;
  os_log_type_t v21 = &__kCFBooleanTrue;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
  id v15 = 0LL;
  uint64_t v3 = -[SCMLHandler initWithOptions:error:](v1, "initWithOptions:error:", v2, &v15);
  id v4 = v15;

  if (v4)
  {
    uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
    if ((int)v7 >= 3)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (id)objc_opt_class(&OBJC_CLASS___SCMLHandler);
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v4 description]);
        *(_DWORD *)__int128 buf = 138412546;
        id v17 = v12;
        __int16 v18 = 2112;
        NSErrorUserInfoKey v19 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[VCPMADSceneAssetProcessingTask] Failed to create %@: %@",  buf,  0x16u);
      }
    }
  }

  return v3;
}

void sub_10001F8A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10001F944( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)&OBJC_CLASS___VCPMADSceneAssetProcessingTask;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10001FB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020348(_Unwind_Exception *a1)
{
}

void sub_1000206B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100020824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100020A74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100020EA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_1000212C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002168C(_Unwind_Exception *a1)
{
  uint64_t v8 = v5;

  _Unwind_Resume(a1);
}

BOOL sub_100021724(id a1)
{
  return 0;
}

LABEL_47:
      uint64_t v20 = 0LL;
      goto LABEL_48;
    }
  }

  uint64_t v20 = 0LL;
LABEL_49:

  return v20;
}
  }

  return 0;
}
        }
      }

        goto LABEL_48;
      }

      NSErrorUserInfoKey v25 = (os_log_s *)objc_claimAutoreleasedReturnValue([v6 librarySpecificFetchOptions]);
      NSErrorUserInfoKey v26 = (void *)objc_claimAutoreleasedReturnValue( +[PHFaceCrop fetchFaceCropByFaceLocalIdentifierForFaces:fetchOptions:]( &OBJC_CLASS___PHFaceCrop,  "fetchFaceCropByFaceLocalIdentifierForFaces:fetchOptions:",  v23,  v25));
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v26 allValues]);
      if (![v27 count])
      {
LABEL_46:

        goto LABEL_47;
      }

      uint64_t v75 = v26;
      v76 = v25;
      os_log_type_t v77 = v23;
      id v78 = v20;
      uint64_t v79 = v10;
      uint64_t v80 = v5;
      uint64_t v81 = v6;
      unsigned int v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      if ([v27 count])
      {
        uint64_t v30 = 0LL;
        do
        {
          uint64_t v31 = objc_autoreleasePoolPush();
          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v27 objectAtIndexedSubscript:v30]);
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchPersonForFaceCrop:options:]( &OBJC_CLASS___PHPerson,  "fetchPersonForFaceCrop:options:",  v32,  v7));
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 firstObject]);

          __int16 v35 = [v34 verifiedType];
          os_log_type_t v36 = v28;
          if (v35 == (id)1 || (v37 = [v34 verifiedType], os_log_type_t v36 = v29, v37 == (id)2)) {
            [v36 addObject:v34];
          }

          objc_autoreleasePoolPop(v31);
          ++v30;
        }

        while (v30 < (unint64_t)[v27 count]);
      }

      uint64_t v38 = [v28 count];
      os_log_type_t v39 = [v29 count];
      if (v38)
      {
        uint64_t v5 = v80;
        uint64_t v20 = v78;
        if (v39)
        {
          v86[0] = _NSConcreteStackBlock;
          v86[1] = 3221225472LL;
          v86[2] = sub_10011B06C;
          v86[3] = &unk_1001B9E00;
          uint64_t v40 = &v87;
          uint64_t v73 = v28;
          v87 = v73;
          __int16 v41 = v29;
          v88 = v41;
          v85 = 0LL;
          uint64_t v42 = [v81 performChangesAndWait:v86 error:&v85];
          __int16 v43 = v85;
          __int128 v45 = MediaAnalysisLogLevel(v43, v44);
          if (v42)
          {
            if ((int)v45 >= 6)
            {
              __int128 v47 = VCPLogInstance(v45, v46);
              __int128 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
              type = VCPLogToOSLogType[6];
              if (os_log_type_enabled(v48, type))
              {
                *(_DWORD *)__int128 buf = 138412546;
                id v90 = v41;
                id v91 = 2112;
                id v92 = v73;
                __int128 v49 = "[VUDedupe] Deduped graph-verified persons %@ with user-verified persons %@";
LABEL_40:
                _os_log_impl((void *)&_mh_execute_header, v48, type, v49, buf, 0x16u);
                goto LABEL_41;
              }

              goto LABEL_41;
            }
          }

          else if ((int)v45 >= 3)
          {
            v70 = VCPLogInstance(v45, v46);
            __int128 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
            type = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v48, type))
            {
              *(_DWORD *)__int128 buf = 138412546;
              id v90 = v41;
              id v91 = 2112;
              id v92 = v73;
              __int128 v49 = "[VUDedupe] Failed to dedupe graph-verified persons %@ for user-verified persons %@";
              goto LABEL_40;
            }

            NSErrorUserInfoKey v25 = v42;
            if (!v42)
            {
              v282 = 0LL;
              goto LABEL_60;
            }

void sub_100021CFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100021EF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10002203C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  uint64_t v23 = v22;

  _Unwind_Resume(a1);
}

void sub_10002207C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[PFSceneTaxonomy vcp_sharedTaxonomy](&OBJC_CLASS___PFSceneTaxonomy, "vcp_sharedTaxonomy"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 labels]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 nodeForName:v7]);

  if (v8)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v8 extendedSceneClassId]));
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 stringValue]);

    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v10]);
    if (!v11)
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      [*(id *)(a1 + 32) setObject:v12 forKeyedSubscript:v10];
    }

    id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v10]);
    v32[0] = VCPConfidenceKey;
    [v3 confidence];
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
    v33[0] = v14;
    v32[1] = VCPBoundingBoxKey;
    [v3 boundingBox];
    id v15 = NSStringFromRect(v34);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v33[1] = v16;
    v32[2] = @"size";
    [v3 boundingBox];
    double v18 = v17;
    [v3 boundingBox];
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v18 * v19));
    v33[2] = v20;
    os_log_type_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v33,  v32,  3LL));
    [v13 addObject:v21];
  }

  else
  {
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v3 labels]);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v22 firstObject]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v23 identifier]);

    uint64_t v26 = MediaAnalysisLogLevel(v24, v25);
    uint64_t v28 = VCPLogInstance(v26, v27);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(v28);
    os_log_type_t v29 = VCPLogToOSLogType[3];
    if (os_log_type_enabled((os_log_t)v13, v29))
    {
      int v30 = 138412290;
      uint64_t v31 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  v29,  "[DO] Unsupported observation label in PFSceneTaxonomyNode %@",  (uint8_t *)&v30,  0xCu);
    }
  }

LABEL_6:
}

void sub_10002235C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100022444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _processBoundingBoxFromDetectedObjects:a3 forSceneClassID:a2]);
  objc_msgSend(*(id *)(a1 + 32), "_insertBoundingBox:toSortedBoundingBoxes:");
}

void sub_10002248C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100022760( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100022C0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_100022CE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v7 = v3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v3 extendedSceneClassId]));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 stringValue]);
  [v4 addObject:v6];
}

void sub_100022D5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100023288( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, void *a33, uint64_t a34, char a35)
{
  _Block_object_dispose(&a35, 8);
  _Unwind_Resume(a1);
}

void sub_10002342C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:@"classID"]);
  uint64_t v8 = VCPBoundingBoxKey;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:VCPBoundingBoxKey]);
  if ([*(id *)(a1 + 32) containsObject:v7])
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v7]);

    if (v10)
    {
      os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v7]);
      id v12 = [v11 mutableCopy];

      [v12 setObject:v9 forKeyedSubscript:v8];
      [*(id *)(a1 + 40) setObject:v12 forKeyedSubscript:v7];
    }

    else
    {
      v14[0] = VCPConfidenceKey;
      v14[1] = v8;
      v15[0] = &off_1001C9498;
      v15[1] = v9;
      id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v15,  v14,  2LL));
      [*(id *)(a1 + 40) setObject:v13 forKeyedSubscript:v7];
    }

    if (++*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) >= 5uLL) {
      *a4 = 1;
    }
  }
}

void sub_1000235D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002362C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [v6 doubleValue];
  if (v7 >= 0.01)
  {
    uint64_t v8 = VCPSpecialLabelToExtendedSceneClassificationID(v5);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if (v10)
    {
      uint64_t v20 = VCPConfidenceKey;
      id v21 = v6;
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
      id v12 = *(void **)(a1 + 32);
      id v13 = (void *)objc_claimAutoreleasedReturnValue([v10 stringValue]);
      [v12 setObject:v11 forKeyedSubscript:v13];
    }

    else
    {
      uint64_t v14 = MediaAnalysisLogLevel(0LL, v9);
      uint64_t v16 = VCPLogInstance(v14, v15);
      os_log_type_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      os_log_type_t v17 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v11, v17))
      {
        int v18 = 138412290;
        id v19 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  v17,  "Unsupported observation label in VCPSpecialLabelToExtendedSceneClassificationID %@",  (uint8_t *)&v18,  0xCu);
      }
    }

LABEL_5:
  }
}

void sub_100023798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000237E4(uint64_t a1, void *a2, void *a3)
{
  id v18 = a2;
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:VCPConfidenceKey]);
  [v6 doubleValue];
  double v8 = v7;

  uint64_t v9 = VCPBoundingBoxKey;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:VCPBoundingBoxKey]);

  if (v10)
  {
    os_log_type_t v11 = (NSString *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v9]);
    NSRect v19 = NSRectFromString(v11);
    double x = v19.origin.x;
    double y = v19.origin.y;
    double width = v19.size.width;
    double height = v19.size.height;

    id v16 = objc_msgSend( [PHSceneClassification alloc],  "initWithExtendedSceneIdentifier:confidence:boundingBox:startTime:duration:classificationType:",  objc_msgSend(v18, "longLongValue"),  0,  v8,  x,  y,  width,  height,  0.0,  0.0);
  }

  else
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[PHSceneClassification vcp_instanceWithExtendedSceneIdentifier:confidence:]( PHSceneClassification,  "vcp_instanceWithExtendedSceneIdentifier:confidence:",  [v18 longLongValue],  v8));
  }

  os_log_type_t v17 = v16;
  [*(id *)(a1 + 32) addObject:v16];
}

void sub_100023958( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

LABEL_85:
    v157 = -18;
    goto LABEL_86;
  }

  v157 = -18;
LABEL_87:

  return v157;
}

        return v10;
      }

      uint64_t v71 = VCPBGSTCheckpointTimestampKeyForTask(v61, 1LL);
      uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
      if (!v73)
      {
        uint64_t v74 = MediaAnalysisLogLevel(0LL, v72);
        if ((int)v74 >= 3)
        {
          v76 = VCPLogInstance(v74, v75);
          os_log_type_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
          if (os_log_type_enabled(v77, type))
          {
            *(_DWORD *)__int128 buf = v106;
            v122 = (os_log_s *)v61;
            _os_log_impl( (void *)&_mh_execute_header,  v77,  type,  "No corresponding checkpoint_with_failure key found for taskID %lu",  buf,  0xCu);
          }
        }
      }

      id v78 = -[VCPDatabaseWriter _removeKey:](self, "_removeKey:", v73);
      uint64_t v10 = v78;
      if ((_DWORD)v78)
      {
        id v89 = MediaAnalysisLogLevel(v78, v79);
        if ((int)v89 >= 3)
        {
          id v91 = VCPLogInstance(v89, v90);
          id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
          if (os_log_type_enabled(v92, type))
          {
            *(_DWORD *)__int128 buf = 138412290;
            v122 = v73;
            id v93 = "[VCPDatabaseWriter] Failed to remove checkpoint_with_failure timestamp for %@";
            v94 = v92;
            v95 = type;
            goto LABEL_82;
          }

    v124 = 0;
  }

  else
  {
    v113 = -[MADPhotosOnDemandStaticStickerScoreTask isCanceled](self, "isCanceled");
    if ((_DWORD)v113)
    {
      if (a3)
      {
        v144 = NSLocalizedDescriptionKey;
        v115 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"On-demand sticker scoring cancelled"));
        v145 = v115;
        v116 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v145,  &v144,  1LL));
        v117 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL,  v116));
        v118 = *a3;
        *a3 = v117;

        os_log_type_t v11 = v12;
      }

      v119 = MediaAnalysisLogLevel(v113, v114);
      if ((int)v119 >= 4)
      {
        v121 = VCPLogInstance(v119, v120);
        v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
        if (os_log_type_enabled(v122, v11))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v122, v11, "[Sticker] On-demand sticker scoring cancelled", buf, 2u);
        }

void sub_100024D70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

LABEL_102:
    id v91 = 1;
LABEL_103:

    sub_10000421C(&cf);
    if ((v91 & 1) == 0) {
      goto LABEL_107;
    }
    goto LABEL_104;
  }

  uint64_t v10 = -[VNImageRequestHandler initWithCVPixelBuffer:options:session:]( [VNImageRequestHandler alloc],  "initWithCVPixelBuffer:options:session:",  [v142 sourcePixelBuffer],  &__NSDictionary0__struct,  self->_session);
  os_log_type_t v11 = VCPSignPostLog();
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  id v13 = os_signpost_id_generate(v12);

  uint64_t v14 = VCPSignPostLog();
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  id v16 = v15;
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v16,  OS_SIGNPOST_INTERVAL_BEGIN,  v13,  "VNImageRequestHandler_PerformRequests",  (const char *)&unk_100199097,  buf,  2u);
  }

  os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue([v138 gatherAvailableRequests]);
  v160 = 0LL;
  id v18 = -[VNImageRequestHandler performRequests:error:](v10, "performRequests:error:", v17, &v160);
  NSRect v19 = v160;

  uint64_t v20 = VCPSignPostLog();
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v22 = v21;
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v21))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v22,  OS_SIGNPOST_INTERVAL_END,  v13,  "VNImageRequestHandler_PerformRequests",  (const char *)&unk_100199097,  buf,  2u);
  }

  if ((v18 & 1) == 0)
  {
    uint64_t v81 = MediaAnalysisLogLevel(v23, v24);
    if ((int)v81 >= 3)
    {
      os_log_type_t v83 = VCPLogInstance(v81, v82);
      id v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
      v85 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v84, v85))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)v163 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v84,  v85,  "Failed to run VNImageRequestHandler::performRequests: %@",  buf,  0xCu);
      }
    }

    __int128 v52 = 0LL;
    goto LABEL_76;
  }

  if (+[VCPPreAnalysisRequests includeIVS](&OBJC_CLASS___VCPPreAnalysisRequests, "includeIVS"))
  {
    uint64_t v25 = objc_autoreleasePoolPush();
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(-[VCPObjectPool getObject](self->_ivsPool, "getObject"));
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 object]);
    uint64_t v28 = v27 == 0LL;

    if (v28)
    {
      id v92 = MediaAnalysisLogLevel(v29, v30);
      if ((int)v92 < 3)
      {
        __int128 v52 = 0LL;
        __int128 v53 = 1;
LABEL_75:

        objc_autoreleasePoolPop(v25);
        if (v53)
        {
LABEL_76:

          LODWORD(v54) = -18;
          goto LABEL_107;
        }

        goto LABEL_77;
      }

      v94 = VCPLogInstance(v92, v93);
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
      v95 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v38, v95))
      {
        int8x16_t v96 = (void *)objc_opt_class(&OBJC_CLASS___SCMLHandler);
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)v163 = v96;
        uint64_t v97 = v96;
        _os_log_impl((void *)&_mh_execute_header, v38, v95, "%@ unavailable for IVS", buf, 0xCu);
      }

      __int128 v52 = 0LL;
      __int128 v53 = 1;
    }

    else
    {
      uint64_t v31 = VCPSignPostLog();
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      uint64_t v33 = os_signpost_id_generate(v32);

      NSRect v34 = VCPSignPostLog();
      __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      os_log_type_t v36 = v35;
      if (v33 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v35))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v36,  OS_SIGNPOST_INTERVAL_BEGIN,  v33,  "CommSafetyHandler_IVS",  (const char *)&unk_100199097,  buf,  2u);
      }

      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v26 object]);
      v159 = v19;
      uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "analyzePixelBuffer:error:", objc_msgSend(v142, "sourcePixelBuffer"), &v159));
      os_log_type_t v39 = v159;

      uint64_t v40 = VCPSignPostLog();
      __int16 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
      uint64_t v42 = v41;
      if (v33 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v41))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v42,  OS_SIGNPOST_INTERVAL_END,  v33,  "CommSafetyHandler_IVS",  (const char *)&unk_100199097,  buf,  2u);
      }

      if (v39)
      {
        __int128 v45 = MediaAnalysisLogLevel(v43, v44);
        if ((int)v45 >= 3)
        {
          __int128 v47 = VCPLogInstance(v45, v46);
          __int128 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
          __int128 v49 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v48, v49))
          {
            __int128 v50 = (void *)objc_opt_class(&OBJC_CLASS___SCMLHandler);
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)v163 = v50;
            *(_WORD *)&v163[8] = 2112;
            v164 = v39;
            __int128 v51 = v50;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "Failed to run %@::analyzePixelBuffer:error: %@",  buf,  0x16u);
          }
        }

        __int128 v52 = 0LL;
        __int128 v53 = 1;
      }

      else
      {
        __int128 v52 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s scoresForLabels](v38, "scoresForLabels"));
        __int128 v53 = 0;
      }

      NSRect v19 = v39;
    }

    goto LABEL_75;
  }

  __int128 v52 = 0LL;
LABEL_77:

LABEL_104:
  v130 = (void *)objc_claimAutoreleasedReturnValue([v138 sceneprintRequest]);
  v131 = (void *)objc_claimAutoreleasedReturnValue([v130 results]);

  __int128 v54 = (VNImageRequestHandler *)objc_claimAutoreleasedReturnValue([v131 firstObject]);
  v132 = (void *)objc_claimAutoreleasedReturnValue(-[VNImageRequestHandler sceneprints](v54, "sceneprints"));
  v133 = (void *)objc_claimAutoreleasedReturnValue([v132 firstObject]);

  LODWORD(v54) = -[VCPMADSceneAssetBatch _performWallpaperAnalysisForAssetEntry:withSceneprint:]( self,  "_performWallpaperAnalysisForAssetEntry:withSceneprint:",  v137,  v133);
  if (!(_DWORD)v54) {
LABEL_106:
  }
    LODWORD(v54) = -[VCPMADSceneAssetBatch _collectResultsForAssetEntry:fromRequests:ivsResults:]( self,  "_collectResultsForAssetEntry:fromRequests:ivsResults:",  v137,  v138,  v52);
LABEL_107:

  return (int)v54;
}

          v125 = v81;
LABEL_103:

          if (v63) {
            goto LABEL_131;
          }
          if (v67 == (id)++v68)
          {
            id v90 = [v114 countByEnumeratingWithState:&v128 objects:v143 count:16];
            os_log_type_t v67 = v90;
            if (!v90)
            {
              __int128 v63 = 0;
LABEL_131:
              v95 = v114;
LABEL_139:

              v94 = obj;
LABEL_140:

              goto LABEL_141;
            }

            goto LABEL_73;
          }
        }
      }

      v140 = 0LL;
      os_log_type_t v29 = [v126 next:&v140];
      int v30 = v140;
      uint64_t v32 = v30;
      if (v29) {
        break;
      }
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v30 localIdentifier]);
      NSRect v34 = v33 == 0LL;

      if (v34)
      {
        os_log_type_t v39 = MediaAnalysisLogLevel(v35, v36);
        __int16 v41 = VCPLogInstance(v39, v40);
        uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
        if (os_log_type_enabled(v38, type))
        {
          uint64_t v42 = [v126 count];
          *(_DWORD *)__int128 buf = 136315650;
          __int16 v43 = "local identifier";
          if (!v32) {
            __int16 v43 = "asset";
          }
          v146 = v43;
          v147 = 2048;
          v148 = v22;
          v149 = 2048;
          v150 = v42;
          _os_log_impl((void *)&_mh_execute_header, v38, type, "Asset maintenance: nil %s at index %zu/%zu", buf, 0x20u);
        }
      }

      else
      {
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v32 localIdentifier]);
        [v24 setObject:v32 forKey:v37];

        v25 |= [v32 isDeletePending];
        uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue([v32 localIdentifier]);
        [v122 addObject:v38];
      }

LABEL_29:
      ++v22;
    }

    id v91 = MediaAnalysisLogLevel(v30, v31);
    if ((int)v91 >= 3)
    {
      id v93 = VCPLogInstance(v91, v92);
      v94 = (void *)objc_claimAutoreleasedReturnValue(v93);
      if (os_log_type_enabled((os_log_t)v94, v109))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v94,  v109,  "Deleted asset detection/removal process failed",  buf,  2u);
      }

      v125 = 0;
      __int128 v63 = 6;
      goto LABEL_140;
    }

    v125 = 0;
    __int128 v63 = 6;
LABEL_141:

    objc_autoreleasePoolPop(context);
    uint64_t v22 = v26;
    if (v63)
    {
      uint64_t v22 = v26;
      if (v63 != 9) {
        break;
      }
    }
  }

  if ((v63 & 0xE) != 6)
  {
    v125 = v110;
    goto LABEL_178;
  }
              }

void sub_1000260DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, const void *a44)
{
  sub_10000421C(&a44);
  _Unwind_Resume(a1);
}

void sub_10002634C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 4)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v6, v7))
    {
      double v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);
      double v9 = *(double *)(a1 + 56);
      int v10 = (int)*(double *)(a1 + 48);
      int v11 = 138412802;
      id v12 = v8;
      __int16 v13 = 1024;
      int v14 = v10;
      __int16 v15 = 1024;
      int v16 = (int)v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Unknown ideal dimension for VNRequests (%@), using image dimension %dx%d",  (uint8_t *)&v11,  0x18u);
    }
  }

void sub_100026440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100026458(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 4)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v6, v7))
    {
      double v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:0]);
      double v9 = (void *)objc_opt_class(v8);
      int v10 = (int)*(double *)(a1 + 40);
      int v11 = (int)*(double *)(a1 + 48);
      int v13 = 138412802;
      int v14 = v9;
      __int16 v15 = 1024;
      int v16 = v10;
      __int16 v17 = 1024;
      int v18 = v11;
      id v12 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Only one VNRequest (%@) for dimension %dx%d; consider coalescing to common resolution",
        (uint8_t *)&v13,
        0x18u);
    }
  }

void sub_100026560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_44:
    goto LABEL_45;
  }

  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v6 results]);
  LODWORD(v23) = 0.5;
  [v22 setBlurrinessScore:v23];

  uint64_t v24 = 0;
LABEL_45:

  return v24;
}

  *(_DWORD *)(*(void *)(a1 + 40) + 120LL) = v33;
}

  __int128 v48 = MediaAnalysisLogLevel(v20, v21);
  if ((int)v48 >= 3)
  {
    __int128 v50 = VCPLogInstance(v48, v49);
    os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
    __int128 v51 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v39, v51))
    {
      *(_DWORD *)__int128 buf = 67109120;
      LODWORD(v63) = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v39,  v51,  "[FaceLibraryProcessing] Failed to cluster and build persons - %d",  buf,  8u);
    }

    __int16 v15 = 0;
    goto LABEL_45;
  }

  __int16 v15 = 0;
LABEL_48:

  return v15;
}

        p_superclass = (__objc2_class **)v41;
        goto LABEL_45;
      }

      if ([v33 status] == -128)
      {
        __int16 v35 = [v33 previousAttempts];
        os_log_type_t v36 = self->_analysisDatabase;
        if (v35)
        {
          uint64_t v37 = [v33 previousAttempts];
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v33 asset]);
          os_log_type_t v39 = [v33 previousStatus];
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v33 lastAttemptDate]);
          __int16 v41 = (id)-[VCPDatabaseWriter setAttempts:asset:taskID:status:lastAttemptDate:]( v36,  "setAttempts:asset:taskID:status:lastAttemptDate:",  v37,  v38,  10LL,  v39,  v40);
        }

        else
        {
          uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v33 asset]);
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v38 localIdentifier]);
          __int16 v41 = (id)-[VCPDatabaseWriter removeProcessingStatusForLocalIdentifier:andTaskID:]( v36,  "removeProcessingStatusForLocalIdentifier:andTaskID:",  v40,  10LL);
        }

        if ((_DWORD)v41 != -108 && (_DWORD)v41 != -36)
        {
          p_superclass = (__objc2_class **)v41;
          if ((_DWORD)v41 != -23) {
LABEL_43:
          }
            p_superclass = v32;
LABEL_45:
          __int128 v54 = 0;
          if ((_DWORD)v41 != -108 && (_DWORD)v41 != -36 && (_DWORD)v41 != -23) {
            goto LABEL_48;
          }
          goto LABEL_49;
        }

        goto LABEL_44;
      }

      if ([v33 status] == -23802)
      {
        __int128 v46 = 2LL;
      }

      else if ([v33 status] == -23808)
      {
        __int128 v46 = 7LL;
      }

      else
      {
        __int128 v46 = 3LL;
      }

      __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v33 asset]);
      __int128 v48 = (void *)objc_claimAutoreleasedReturnValue([v33 currentAttemptDate]);
      __int128 v49 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v47,  "mad_nextAttemptDateForStatus:currentAttemptDate:attemptCount:",  v46,  v48,  (char *)objc_msgSend(v33, "previousAttempts") + 1));

      __int128 v50 = self->_analysisDatabase;
      __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v33 asset]);
      __int128 v52 = (void *)objc_claimAutoreleasedReturnValue([v51 localIdentifier]);
      __int128 v53 = (id)-[VCPDatabaseWriter updateProcessingStatus:andNextAttemptDate:forLocalIdentifier:andTaskID:]( v50,  "updateProcessingStatus:andNextAttemptDate:forLocalIdentifier:andTaskID:",  v46,  v49,  v52,  10LL);

      if ((_DWORD)v53 == -108 || (_DWORD)v53 == -36)
      {
        p_superclass = (__objc2_class **)v53;
      }

      else
      {
        p_superclass = (__objc2_class **)v53;
        if ((_DWORD)v53 != -23) {
          p_superclass = v32;
        }
      }

      __int128 v54 = 0;
      if ((_DWORD)v53 != -108 && (_DWORD)v53 != -36 && (_DWORD)v53 != -23) {
LABEL_48:
      }
        __int128 v54 = 1;
LABEL_49:
      objc_autoreleasePoolPop(v34);
      if (!v54)
      {

        __int128 v55 = (int)p_superclass;
        goto LABEL_60;
      }

      uint64_t v31 = (char *)v31 + 1;
      uint64_t v32 = p_superclass;
    }

    while (v30 != v31);
    int v30 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v73,  v79,  16LL);
    if (v30) {
      continue;
    }
    break;
  }

          v153 = (char *)v153 + 1;
        }

        while (v153 != v141);
        v66 = [obj countByEnumeratingWithState:&v172 objects:v186 count:16];
        v141 = v66;
      }

      while (v66);
    }

    v164 = 0u;
    v165 = 0u;
    v162 = 0u;
    v163 = 0u;
    os_log_type_t v67 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v148, "vcp_results"));
    id obj = (id)objc_claimAutoreleasedReturnValue([v67 objectForKeyedSubscript:MediaAnalysisHumanActionResultsKey]);

    v131 = [obj countByEnumeratingWithState:&v162 objects:v183 count:16];
    if (!v131) {
      goto LABEL_91;
    }
    v136 = *(void *)v163;
    v138 = MediaAnalysisResultAttributesKey;
    v133 = MediaAnalysisResultFaceIdentifierAttributeKey;
    v126 = MediaAnalysisResultHumanBoundsAttributeKey;
    v125 = VCPLogToOSLogType[7];
    *(void *)typea = MediaAnalysisResultHumanActionScoreAbsoluteAttributeKey;
    *(void *)v128 = MediaAnalysisResultHumanActionScoreRelativeAttributeKey;
    v124 = VCPLogToOSLogType[4];
    *(void *)&id v68 = 138412546LL;
    v123 = v68;
LABEL_53:
    v144 = 0LL;
    while (1)
    {
      if (*(void *)v163 != v136) {
        objc_enumerationMutation(obj);
      }
      __int16 v69 = *(void **)(*((void *)&v162 + 1) + 8 * v144);
      v155 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v69, "objectForKeyedSubscript:", v138, v123));
      v70 = (void *)objc_claimAutoreleasedReturnValue([v155 objectForKeyedSubscript:v133]);
      if (!v70) {
        goto LABEL_84;
      }
      v142 = v70;
      uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v70]);
      uint64_t v72 = v71 == 0LL;

      if (!v72) {
        goto LABEL_64;
      }
      uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v69 objectForKeyedSubscript:v138]);
      uint64_t v74 = (NSString *)objc_claimAutoreleasedReturnValue([v73 objectForKeyedSubscript:v126]);
      v189 = NSRectFromString(v74);
      uint64_t v75 = v189.origin.x;
      v76 = v189.origin.y;
      os_log_type_t v77 = v189.size.width;
      id v78 = v189.size.height;

      LODWORD(v79) = 1060320051;
      uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue( -[VCPPhotosAssetChangeManager matchPerson:withPHFaces:withMinIOU:iou:]( v134,  "matchPerson:withPHFaces:withMinIOU:iou:",  v14,  0LL,  v75,  v76,  v77,  v78,  v79));
      v70 = v142;
      if (v81) {
        break;
      }
      v108 = MediaAnalysisLogLevel(0LL, v80);
      v110 = VCPLogInstance(v108, v109);
      v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
      if (os_log_type_enabled(v111, v124))
      {
        v112 = (void *)objc_claimAutoreleasedReturnValue([v146 localIdentifier]);
        LODWORD(buf.start.value) = v123;
        *(CMTimeValue *)((char *)&buf.start.value + 4) = (CMTimeValue)v112;
        LOWORD(buf.start.flags) = 2112;
        *(void *)((char *)&buf.start.flags + 2) = v142;
        _os_log_impl( (void *)&_mh_execute_header,  v111,  v124,  "   [%@] No matched PHFace for action result localIdentifier (%@)",  (uint8_t *)&buf,  0x16u);
      }

LABEL_83:
      v70 = v142;
LABEL_84:

      if ((id)++v144 == v131)
      {
        v113 = [obj countByEnumeratingWithState:&v162 objects:v183 count:16];
        v131 = v113;
        if (!v113)
        {
LABEL_91:
          id v12 = 0;
          v114 = (os_log_s *)obj;
          goto LABEL_101;
        }

        goto LABEL_53;
      }
    }

    v82 = [v13 setObject:v81 forKeyedSubscript:v142];
    id v84 = MediaAnalysisLogLevel(v82, v83);
    if ((int)v84 >= 7)
    {
      int8x16_t v86 = VCPLogInstance(v84, v85);
      v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
      if (os_log_type_enabled(v87, v125))
      {
        v88 = (void *)objc_claimAutoreleasedReturnValue([v146 localIdentifier]);
        id v89 = (void *)objc_claimAutoreleasedReturnValue([v81 localIdentifier]);
        LODWORD(buf.start.value) = 138412802;
        *(CMTimeValue *)((char *)&buf.start.value + 4) = (CMTimeValue)v88;
        LOWORD(buf.start.flags) = 2112;
        *(void *)((char *)&buf.start.flags + 2) = v89;
        HIWORD(buf.start.epoch) = 2112;
        buf.duration.value = (CMTimeValue)v142;
        _os_log_impl( (void *)&_mh_execute_header,  v87,  v125,  "   [%@] Associated PHFace (%@) with action result localIdentifier (%@)",  (uint8_t *)&buf,  0x20u);
      }
    }

LABEL_64:
    CMTimeRangeMakeFromDictionary(&buf, (CFDictionaryRef)v69);
    id v90 = 0.0;
    if ((buf.start.flags & 1) != 0 && (buf.duration.flags & 1) != 0 && !buf.duration.epoch)
    {
      id v91 = 0.0;
      if ((buf.duration.value & 0x8000000000000000LL) == 0)
      {
        start = buf.start;
        id v92 = CMTimeGetSeconds(&start);
        v160 = buf.duration;
        id v91 = v92;
        id v90 = CMTimeGetSeconds(&v160);
      }
    }

    else
    {
      id v91 = 0.0;
    }

    v140 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v142]);
    v150 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    id v93 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKeyedSubscript:v140]);
    [v150 addObjectsFromArray:v93];

    v181[0] = *(void *)typea;
    v181[1] = *(void *)v128;
    v182[0] = &off_1001C8060;
    v182[1] = &off_1001C8078;
    v94 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v182,  v181,  2LL));
    v158 = 0u;
    v159 = 0u;
    v156 = 0u;
    v157 = 0u;
    v154 = v94;
    v95 = [v154 countByEnumeratingWithState:&v156 objects:v180 count:16];
    if (v95)
    {
      v152 = *(void *)v157;
      int8x16_t v96 = v91;
      uint64_t v97 = v90;
      while (2)
      {
        for (j = 0LL; j != v95; j = (char *)j + 1)
        {
          if (*(void *)v157 != v152) {
            objc_enumerationMutation(v154);
          }
          uint64_t v99 = *(void *)(*((void *)&v156 + 1) + 8LL * (void)j);
          v100 = (void *)objc_claimAutoreleasedReturnValue([v155 objectForKeyedSubscript:v99]);
          v101 = v100 == 0LL;

          if (!v101)
          {
            v102 = objc_alloc(&OBJC_CLASS___PHDetectionTrait);
            v103 = (void *)objc_claimAutoreleasedReturnValue([v154 objectForKeyedSubscript:v99]);
            v104 = (unsigned __int16)[v103 intValue];
            v105 = (void *)objc_claimAutoreleasedReturnValue([v155 objectForKeyedSubscript:v99]);
            [v105 floatValue];
            v107 = [v102 initWithType:2 value:v104 score:v106 startTime:v96 duration:v97];

            if (!v107)
            {

              goto LABEL_95;
            }

            [v150 addObject:v107];
          }
        }

        v95 = [v154 countByEnumeratingWithState:&v156 objects:v180 count:16];
        if (v95) {
          continue;
        }
        break;
      }
    }

    if ([v150 count]) {
      [v9 setObject:v150 forKeyedSubscript:v140];
    }

    goto LABEL_83;
  }

      goto LABEL_45;
    }

    goto LABEL_45;
  }

  uint64_t v24 = MediaAnalysisLogLevel(v20, v21);
  if ((int)v24 >= 3)
  {
    uint64_t v26 = VCPLogInstance(v24, v25);
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    uint64_t v28 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v27, v28))
    {
      *(_WORD *)__int128 v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to obtain CVPixelBufferRef from IOSurface", v63, 2u);
    }
  }

void sub_100026CAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, char a27)
{
  sub_100026EF8((uint64_t)&a24);
  sub_100026EF8((uint64_t)&a27);
  sub_10000421C((const void **)(v30 - 152));

  _Unwind_Resume(a1);
}

BOOL sub_100026E40(id a1)
{
  return 0;
}

uint64_t sub_100026E48(void *a1)
{
  if (*(_DWORD *)a1)
  {
    BOOL v2 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v2) {
      sub_10002C564(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    return *(unsigned int *)a1;
  }

  id v12 = a1 + 1;
  int v11 = (__CVBuffer *)a1[1];
  if (v11)
  {
    uint64_t result = CVPixelBufferUnlockBaseAddress(v11, a1[2]);
    *(_DWORD *)a1 = result;
    if ((_DWORD)result)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_10002C4E8();
      }
      return *(unsigned int *)a1;
    }

    void *v12 = 0LL;
  }

  else
  {
    BOOL v13 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v13) {
      sub_10002C4B4(v13, v14, v15, v16, v17, v18, v19, v20);
    }
    return 4294967278LL;
  }

  return result;
}

uint64_t sub_100026EF8(uint64_t a1)
{
  BOOL v2 = *(__CVBuffer **)(a1 + 8);
  if (v2
    && !*(_DWORD *)a1
    && CVPixelBufferUnlockBaseAddress(v2, *(void *)(a1 + 16))
    && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    sub_10002C418();
  }

  return a1;
}

BOOL sub_100026F6C(id a1)
{
  return 0;
}

void sub_10002718C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000271F0(id a1)
{
  return 0;
}

void sub_100027888(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);

  sub_100026EF8((uint64_t)va);
  sub_100026EF8((uint64_t)va1);
  sub_10000421C((const void **)va2);

  _Unwind_Resume(a1);
}

void sub_1000280A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  uint64_t v18 = va_arg(va2, void);

  sub_100026EF8((uint64_t)va);
  sub_100026EF8((uint64_t)va1);
  sub_10000421C((const void **)va2);

  _Unwind_Resume(a1);
}

BOOL sub_1000281D8(id a1)
{
  return 0;
}

void sub_100028A78( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, void *a28, uint64_t a29, void *a30, void *a31, uint64_t a32, uint64_t a33, const void *a34, const void *a35)
{
  sub_10000421C(&a34);
  sub_10000421C(&a35);
  _Block_object_dispose((const void *)(v37 - 176), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_100028C04(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100028C14(uint64_t a1)
{
}

void sub_100028C1C(uint64_t a1)
{
  BOOL v2 = objc_autoreleasePoolPush();
  id v3 = [*(id *)(a1 + 32) needsSceneProcessing];
  if ((_DWORD)v3)
  {
    uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
    if ((int)v5 >= 7)
    {
      uint64_t v7 = VCPLogInstance(v5, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      os_log_type_t v9 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v40 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Performing SceneNet analysis", buf, 0xCu);
      }
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v11 pet];

    uint64_t v12 = VCPSignPostLog();
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    os_signpost_id_t v14 = os_signpost_id_generate(v13);

    uint64_t v15 = VCPSignPostLog();
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    uint64_t v17 = v16;
    if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_INTERVAL_BEGIN,  v14,  "VCPMADSceneAssetEntryProcess_SceneNetAnalysis",  (const char *)&unk_100199097,  buf,  2u);
    }

    id v18 = [*(id *)(a1 + 48) _performSceneNetAnalysisForAssetEntry:*(void *)(a1 + 32) withImage:*(void *)(a1 + 56) andRequests:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
    uint64_t v19 = VCPSignPostLog();
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    id v21 = v20;
    if (v14 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v20))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v21,  OS_SIGNPOST_INTERVAL_END,  v14,  "VCPMADSceneAssetEntryProcess_SceneNetAnalysis",  (const char *)&unk_100199097,  buf,  2u);
    }

    if ((_DWORD)v18)
    {
      uint64_t v24 = MediaAnalysisLogLevel(v22, v23);
      if ((int)v24 >= 3)
      {
        uint64_t v26 = VCPLogInstance(v24, v25);
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        os_log_type_t v28 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v29 = *(void *)(a1 + 40);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v40 = v29;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "%@ Failed to perform SceneNet analysis", buf, 0xCu);
        }
      }

      [*(id *)(a1 + 32) setStatus:v18];
    }
  }

  uint64_t v30 = *(void *)(a1 + 48);
  uint64_t v32 = *(void *)(v30 + 96);
  uint64_t v31 = *(void *)(v30 + 104);
  v35[0] = _NSConcreteStackBlock;
  v35[1] = 3221225472LL;
  v35[2] = sub_100028F30;
  v35[3] = &unk_1001BA768;
  id v33 = *(id *)(a1 + 32);
  uint64_t v34 = *(void *)(a1 + 48);
  id v36 = v33;
  uint64_t v37 = v34;
  id v38 = *(id *)(a1 + 64);
  (*(void (**)(uint64_t, const __CFString *, uint64_t, void *))(v31 + 16))( v31,  @"AssetProcessCompletion",  v32,  v35);

  objc_autoreleasePoolPop(v2);
}

void sub_100028F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100028F30(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) blurExposureRotationCompleted];
  if ((_DWORD)result)
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 40LL));
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  return result;
}

void sub_100028F84(uint64_t a1)
{
  BOOL v2 = objc_autoreleasePoolPush();
  uint64_t v4 = MediaAnalysisLogLevel(v2, v3);
  if ((int)v4 >= 7)
  {
    uint64_t v6 = VCPLogInstance(v4, v5);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    os_log_type_t v8 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v93 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%@ Performing non-SceneNet analysis", buf, 0xCu);
    }
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v10 pet];

  uint64_t v11 = objc_autoreleasePoolPush();
  uint64_t v12 = VCPSignPostLog();
  uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  os_signpost_id_t v14 = os_signpost_id_generate(v13);

  uint64_t v15 = VCPSignPostLog();
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  uint64_t v17 = v16;
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_INTERVAL_BEGIN,  v14,  "VCPMADSceneAssetEntryProcess_BlurAnalysis",  (const char *)&unk_100199097,  buf,  2u);
  }

  id v18 = [*(id *)(a1 + 48) _performBlurAnalysisForAssetEntry:*(void *)(a1 + 40) withLumaPixelBuffer:*(void *)(a1 + 64)];
  uint64_t v19 = VCPSignPostLog();
  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
  id v21 = v20;
  if (v14 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v20))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v21,  OS_SIGNPOST_INTERVAL_END,  v14,  "VCPMADSceneAssetEntryProcess_BlurAnalysis",  (const char *)&unk_100199097,  buf,  2u);
  }

  if ((_DWORD)v18)
  {
    id v22 = [*(id *)(a1 + 40) setStatus:v18];
    uint64_t v24 = MediaAnalysisLogLevel(v22, v23);
    if ((int)v24 >= 3)
    {
      uint64_t v26 = VCPLogInstance(v24, v25);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      os_log_type_t v28 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v93 = v29;
        uint64_t v30 = "%@ Failed to perform Blur analysis";
LABEL_48:
        _os_log_impl((void *)&_mh_execute_header, v27, v28, v30, buf, 0xCu);
        goto LABEL_49;
      }

      goto LABEL_49;
    }

    goto LABEL_50;
  }

  uint64_t v31 = VCPSignPostLog();
  uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
  os_signpost_id_t v33 = os_signpost_id_generate(v32);

  uint64_t v34 = VCPSignPostLog();
  __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
  id v36 = v35;
  if (v33 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v35))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v36,  OS_SIGNPOST_INTERVAL_BEGIN,  v33,  "VCPMADSceneAssetEntryProcess_ExposureAnalysis",  (const char *)&unk_100199097,  buf,  2u);
  }

  id v37 = [*(id *)(a1 + 48) _performExposureAnalysisForAssetEntry:*(void *)(a1 + 40) withLumaPixelBuffer:*(void *)(a1 + 64)];
  uint64_t v38 = VCPSignPostLog();
  os_log_type_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
  uint64_t v40 = v39;
  if (v33 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v39))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v40,  OS_SIGNPOST_INTERVAL_END,  v33,  "VCPMADSceneAssetEntryProcess_ExposureAnalysis",  (const char *)&unk_100199097,  buf,  2u);
  }

  if (!(_DWORD)v37)
  {
    uint64_t v47 = VCPSignPostLog();
    __int128 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
    os_signpost_id_t v49 = os_signpost_id_generate(v48);

    uint64_t v50 = VCPSignPostLog();
    __int128 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
    __int128 v52 = v51;
    if (v49 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v51))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v52,  OS_SIGNPOST_INTERVAL_BEGIN,  v49,  "VCPMADSceneAssetEntryProcess_RotationAnalysis",  (const char *)&unk_100199097,  buf,  2u);
    }

    id v53 = [*(id *)(a1 + 48) _performRotationAnalysisForAssetEntry:*(void *)(a1 + 40) withColorPixelBuffer:*(void *)(a1 + 72)];
    uint64_t v54 = VCPSignPostLog();
    __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
    __int128 v56 = v55;
    if (v49 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v55))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v56,  OS_SIGNPOST_INTERVAL_END,  v49,  "VCPMADSceneAssetEntryProcess_RotationAnalysis",  (const char *)&unk_100199097,  buf,  2u);
    }

    if ((_DWORD)v53)
    {
      id v57 = [*(id *)(a1 + 40) setStatus:v53];
      uint64_t v59 = MediaAnalysisLogLevel(v57, v58);
      if ((int)v59 >= 3)
      {
        uint64_t v61 = VCPLogInstance(v59, v60);
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
        os_log_type_t v28 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v62 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v93 = v62;
          uint64_t v30 = "%@ Failed to perform Rotation analysis";
          goto LABEL_48;
        }

        goto LABEL_49;
      }

      goto LABEL_50;
    }

    objc_autoreleasePoolPop(v11);
LABEL_37:
    uint64_t v11 = objc_autoreleasePoolPush();
    uint64_t v63 = VCPSignPostLog();
    __int128 v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
    os_signpost_id_t v65 = os_signpost_id_generate(v64);

    uint64_t v66 = VCPSignPostLog();
    os_log_type_t v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
    id v68 = v67;
    if (v65 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v67))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v68,  OS_SIGNPOST_INTERVAL_BEGIN,  v65,  "VCPMADSceneAssetEntryProcess_EmbeddingAnalysis",  (const char *)&unk_100199097,  buf,  2u);
    }

    id v69 = [*(id *)(a1 + 48) _performEmbeddingAnalysisForAssetEntry:*(void *)(a1 + 40) withColorPixelBuffer:*(void *)(a1 + 72)];
    uint64_t v70 = VCPSignPostLog();
    uint64_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
    uint64_t v72 = v71;
    if (v65 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v71))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v72,  OS_SIGNPOST_INTERVAL_END,  v65,  "VCPMADSceneAssetEntryProcess_EmbeddingAnalysis",  (const char *)&unk_100199097,  buf,  2u);
    }

    if ((_DWORD)v69)
    {
      id v73 = [*(id *)(a1 + 40) setStatus:v69];
      uint64_t v75 = MediaAnalysisLogLevel(v73, v74);
      if ((int)v75 >= 3)
      {
        uint64_t v77 = VCPLogInstance(v75, v76);
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
        os_log_type_t v28 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v27, v28))
        {
          uint64_t v78 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v93 = v78;
          uint64_t v30 = "%@ Failed to perform Embedding analysis";
          goto LABEL_48;
        }

        goto LABEL_49;
      }
    }

    goto LABEL_50;
  }

  id v41 = [*(id *)(a1 + 40) setStatus:v37];
  uint64_t v43 = MediaAnalysisLogLevel(v41, v42);
  if ((int)v43 >= 3)
  {
    uint64_t v45 = VCPLogInstance(v43, v44);
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    os_log_type_t v28 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v46 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v93 = v46;
      uint64_t v30 = "%@ Failed to perform Exposure analysis";
      goto LABEL_48;
    }

void sub_10002967C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
}

id sub_1000296A8(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) scenenetCompleted];
  if ((_DWORD)result)
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 40) + 40LL));
    return (id)(*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  return result;
}

void sub_100029FA8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,id location)
{
  objc_destroyWeak(v53);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10002A130(uint64_t a1)
{
  uint64_t v2 = VCPSignPostLog();
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = v3;
  os_signpost_id_t v5 = *(void *)(a1 + 32);
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v3))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v4,  OS_SIGNPOST_INTERVAL_END,  v5,  "VCPMADSceneAssetEntry_ProcessAsset",  (const char *)&unk_100199097,  v7,  2u);
  }

  if (*(void *)(a1 + 40))
  {
    uint64_t v6 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMADSceneAssetEntry_ProcessAsset", v6 - *(void *)(a1 + 40));
  }

void sub_10002A1DC(uint64_t a1)
{
  id WeakRetained = (dispatch_group_t *)objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v3 = WeakRetained;
  if (WeakRetained)
  {
    dispatch_group_wait(WeakRetained[9], 0xFFFFFFFFFFFFFFFFLL);
    dispatch_group_wait(v3[11], 0xFFFFFFFFFFFFFFFFLL);
    dispatch_group_wait(v3[12], 0xFFFFFFFFFFFFFFFFLL);
    id v4 = [*(id *)(a1 + 32) timeIntervalSinceNow];
    *((double *)v3 + 4) = -v5;
    uint64_t v6 = VCPSignPostLog(v4);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    os_log_type_t v8 = v7;
    os_signpost_id_t v9 = *(void *)(a1 + 48);
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
    {
      v11[0] = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_INTERVAL_END,  v9,  "VCPMADSceneAssetBatch_Process",  (const char *)&unk_100199097,  (uint8_t *)v11,  2u);
    }

    if (*(void *)(a1 + 56))
    {
      uint64_t v10 = mach_absolute_time();
      VCPPerformance_LogMeasurement("VCPMADSceneAssetBatch_Process", v10 - *(void *)(a1 + 56));
    }
  }
}

void sub_10002A2D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_31:
LABEL_32:
LABEL_33:

LABEL_34:
      objc_autoreleasePoolPop(v31);
      uint64_t v29 = (char *)v29 + 1;
    }

    while (v174 != v29);
    os_log_type_t v28 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v183,  v189,  16LL);
  }

  while (v28);
LABEL_43:

  v173 = (id)-[VCPDatabaseWriter commit](self->_analysisDatabase, "commit");
  if ((_DWORD)v173 != -108 && (_DWORD)v173 != -36 && (_DWORD)v173 != -23)
  {
    uint64_t v71 = [v154 count];
    if (v71)
    {
      id v73 = MediaAnalysisLogLevel(v71, v72);
      if ((int)v73 >= 7)
      {
        uint64_t v75 = VCPLogInstance(v73, v74);
        uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
        uint64_t v77 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v76, v77))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "[Scene][Embedding] Persisting VSKAssets ...", buf, 2u);
        }
      }

      uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v154 allValues]);
      cancelBlock = self->_cancelBlock;
      v182 = 0LL;
      uint64_t v80 = +[MADVectorDatabaseUtilities updateWithAssetsEmbeddings:photoLibrary:cancelBlock:error:]( &OBJC_CLASS___MADVectorDatabaseUtilities,  "updateWithAssetsEmbeddings:photoLibrary:cancelBlock:error:",  v78,  v150,  cancelBlock,  &v182);
      uint64_t v81 = v182;

      if (v80)
      {
        v82 = [v155 removeAllObjects];
        uint64_t v84 = MediaAnalysisLogLevel(v82, v83);
        if ((int)v84 >= 3)
        {
          uint64_t v86 = VCPLogInstance(v84, v85);
          v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
          v88 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v87, v88))
          {
            *(_DWORD *)__int128 buf = 138412290;
            v191 = v81;
            _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "Failed to update vectorDB; skip updating Photos embedding version - %@",
              buf,
              0xCu);
          }
        }
      }
    }
  }

  if ((_DWORD)v173 != -108 && (_DWORD)v173 != -36 && (_DWORD)v173 != -23)
  {
LABEL_60:
    v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    id v89 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    objc_msgSend( v89,  "addBreadcrumb:",  @"[Scene] Persisting %d assets to Photos",  -[NSMutableArray count](self->_assetEntries, "count"));

    uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v90 pet];

    id v91 = objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    [(id)v91 enterKnownTimeoutRisk:1];

    v180[0] = _NSConcreteStackBlock;
    v180[1] = 3221225472LL;
    v180[2] = sub_10002B6B8;
    v180[3] = &unk_1001B9E70;
    v180[4] = self;
    v181 = v155;
    v162 = objc_retainBlock(v180);
    id v92 = self->_cancelBlock;
    v179 = 0LL;
    LOBYTE(v91) = objc_msgSend( v150,  "mad_performChangesAndWait:cancelBlock:extendTimeoutBlock:error:",  v162,  v92,  &stru_1001BA820,  &v179);
    v164 = v179;
    uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    [v93 exitKnownTimeoutRisk];

    v94 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    objc_msgSend( v94,  "addBreadcrumb:",  @"[Scene] Finished persisting %d assets to Photos",  -[NSMutableArray count](self->_assetEntries, "count"));

    if ((v91 & 1) == 0)
    {
      v131 = MediaAnalysisLogLevel(v95, v96);
      if ((int)v131 >= 3)
      {
        v133 = VCPLogInstance(v131, v132);
        v134 = (os_log_s *)objc_claimAutoreleasedReturnValue(v133);
        v135 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v134, v135))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v191 = v164;
          _os_log_impl( (void *)&_mh_execute_header,  v134,  v135,  "[Scene] Failed to persist Scene results to Photos (%@)",  buf,  0xCu);
        }
      }

      LODWORD(v173) = [v164 code];
      goto LABEL_137;
    }

    v177 = 0u;
    v178 = 0u;
    v175 = 0u;
    v176 = 0u;
    v166 = self->_assetEntries;
    uint64_t v97 = 0LL;
    v98 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v166,  "countByEnumeratingWithState:objects:count:",  &v175,  v187,  16LL);
    if (v98)
    {
      *(void *)typea = 0LL;
      obja = 0LL;
      v160 = 0LL;
      v172 = *(void *)v176;
LABEL_63:
      uint64_t v99 = 0LL;
      v100 = v97;
      while (1)
      {
        if (*(void *)v176 != v172) {
          objc_enumerationMutation(v166);
        }
        v101 = *(void **)(*((void *)&v175 + 1) + 8LL * (void)v99);
        v102 = objc_autoreleasePoolPush();
        if ([v101 status])
        {
          if ([v101 status] == -128)
          {
            v103 = [v101 previousAttempts];
            analysisDatabase = self->_analysisDatabase;
            if (v103)
            {
              v105 = [v101 previousAttempts];
              v106 = (void *)objc_claimAutoreleasedReturnValue([v101 asset]);
              v107 = [v101 previousStatus];
              v108 = (void *)objc_claimAutoreleasedReturnValue([v101 lastAttemptDate]);
              v109 = (id)-[VCPDatabaseWriter setAttempts:asset:taskID:status:lastAttemptDate:]( analysisDatabase,  "setAttempts:asset:taskID:status:lastAttemptDate:",  v105,  v106,  2LL,  v107,  v108);

              v110 = 28;
              if ((_DWORD)v109 == -108 || (_DWORD)v109 == -36)
              {
                uint64_t v97 = v109;
              }

              else
              {
                uint64_t v97 = v109;
                if ((_DWORD)v109 != -23)
                {
                  v110 = 0;
                  uint64_t v97 = v100;
                }
              }

              if ((_DWORD)v109 != -108 && (_DWORD)v109 != -36 && (_DWORD)v109 != -23) {
                goto LABEL_115;
              }
            }

            else
            {
              v128 = (void *)objc_claimAutoreleasedReturnValue([v101 asset]);
              v129 = (void *)objc_claimAutoreleasedReturnValue([v128 localIdentifier]);
              v130 = (id)-[VCPDatabaseWriter removeProcessingStatusForLocalIdentifier:andTaskID:]( analysisDatabase,  "removeProcessingStatusForLocalIdentifier:andTaskID:",  v129,  2LL);

              v110 = 28;
              if ((_DWORD)v130 == -108 || (_DWORD)v130 == -36)
              {
                uint64_t v97 = v130;
              }

              else
              {
                uint64_t v97 = v130;
                if ((_DWORD)v130 != -23)
                {
                  v110 = 0;
                  uint64_t v97 = v100;
                }
              }

              if ((_DWORD)v130 != -108 && (_DWORD)v130 != -36 && (_DWORD)v130 != -23) {
                goto LABEL_115;
              }
            }
          }

          else
          {
            v116 = [v101 status];
            if (v116 == -23802) {
              v117 = 2LL;
            }
            else {
              v117 = 3LL;
            }
            if (v116 == -23802) {
              v118 = obja;
            }
            else {
              v118 = obja + 1;
            }
            v119 = *(void *)typea;
            if (v116 == -23802) {
              v119 = *(void *)typea + 1LL;
            }
            *(void *)typea = v119;
            obja = v118;
            v120 = (void *)objc_claimAutoreleasedReturnValue([v101 asset]);
            v121 = (void *)objc_claimAutoreleasedReturnValue([v101 currentAttemptDate]);
            v122 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v120,  "mad_nextAttemptDateForStatus:currentAttemptDate:attemptCount:",  v117,  v121,  (char *)objc_msgSend(v101, "previousAttempts") + 1));

            v123 = self->_analysisDatabase;
            v124 = (void *)objc_claimAutoreleasedReturnValue([v101 asset]);
            v125 = (void *)objc_claimAutoreleasedReturnValue([v124 localIdentifier]);
            v126 = (id)-[VCPDatabaseWriter updateProcessingStatus:andNextAttemptDate:forLocalIdentifier:andTaskID:]( v123,  "updateProcessingStatus:andNextAttemptDate:forLocalIdentifier:andTaskID:",  v117,  v122,  v125,  2LL);

            if ((_DWORD)v126 == -108 || (_DWORD)v126 == -36)
            {
              v127 = v126;
            }

            else
            {
              v127 = v126;
              if ((_DWORD)v126 != -23) {
                v127 = v173;
              }
            }

            v110 = 1;
            if ((_DWORD)v126 == -108 || (_DWORD)v126 == -36)
            {
              uint64_t v97 = v100;
              v173 = v127;
              goto LABEL_116;
            }

            uint64_t v97 = v100;
            v173 = v127;
            if ((_DWORD)v126 != -23) {
              goto LABEL_115;
            }
          }
        }

        else
        {
          v111 = self->_analysisDatabase;
          v112 = (void *)objc_claimAutoreleasedReturnValue([v101 asset]);
          v113 = (void *)objc_claimAutoreleasedReturnValue([v112 localIdentifier]);
          v114 = (id)-[VCPDatabaseWriter removeProcessingStatusForLocalIdentifier:andTaskID:]( v111,  "removeProcessingStatusForLocalIdentifier:andTaskID:",  v113,  2LL);

          v110 = 28;
          if ((_DWORD)v114 == -108)
          {
            uint64_t v97 = v114;
          }

          else
          {
            v115 = (_DWORD)v114 == -36 || (_DWORD)v114 == -23;
            uint64_t v97 = v114;
            if (!v115)
            {
              v110 = 0;
              uint64_t v97 = v100;
            }
          }

          if ((_DWORD)v114 != -108 && (_DWORD)v114 != -36 && (_DWORD)v114 != -23)
          {
            ++v160;
LABEL_115:
            v110 = 0;
          }
        }
          }
        }

        os_log_type_t v8 = sqlite3_step(ppStmt);

LABEL_33:
        if (v8 == 101) {
          uint64_t v2 = 0LL;
        }
        else {
          uint64_t v2 = v8;
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

        objc_autoreleasePoolPop(v11);
      }

      id v53 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v67,  v80,  16LL);
    }

    while (v53);
  }
}

      if ((self->_subtasks & 0x80) != 0) {
        -[VCPFaceLibraryProcessingTask _processAutoCounterForPhotoLibrary:]( self,  "_processAutoCounterForPhotoLibrary:",  v6);
      }
      (*((void (**)(double))self->_progressHandler + 2))(100.0);
LABEL_38:
      os_log_type_t v8 = 0;
    }
  }

LABEL_40:
LABEL_41:

  return v8;
}

        objc_autoreleasePoolPop(v16);
      }

      uint64_t v13 = [obj countByEnumeratingWithState:&v59 objects:v68 count:16];
    }

    while (v13);
  }
}
      }
    }
  }
}

LABEL_116:
        objc_autoreleasePoolPop(v102);
        if (v110)
        {

          if (v110 == 28) {
            goto LABEL_136;
          }
          goto LABEL_137;
        }

        uint64_t v99 = (char *)v99 + 1;
        v100 = v97;
        if (v98 == v99)
        {
          v98 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v166,  "countByEnumeratingWithState:objects:count:",  &v175,  v187,  16LL);
          if (v98) {
            goto LABEL_63;
          }
          goto LABEL_129;
        }
      }
    }

    *(void *)typea = 0LL;
    obja = 0LL;
    v160 = 0LL;
LABEL_129:

    [v151 accumulateInt64Value:v160 forField:@"NumberOfAssetsAnalyzed" andEvent:@"com.apple.mediaanalysisd.SceneAnalysisRunSession"];
    [v151 accumulateInt64Value:obja forField:@"NumberOfAssetsSoftFailure" andEvent:@"com.apple.mediaanalysisd.SceneAnalysisRunSession"];
    [v151 accumulateInt64Value:*(void *)typea forField:@"NumberOfAssetsNoResource" andEvent:@"com.apple.mediaanalysisd.SceneAnalysisRunSession"];
    [v151 accumulateDoubleValue:@"TotalAnalyzingTimeInSeconds" forField:@"com.apple.mediaanalysisd.SceneAnalysisRunSession" andEvent:self->_processDuration];
    [v151 accumulateDoubleValue:@"TimeAnalyzingInSeconds" forField:@"com.apple.mediaanalysisd.SceneAnalysisRunSession" andEvent:self->_processDuration];
    [v158 timeIntervalSinceNow];
    v137 = VCPSignPostLog( [v151 accumulateDoubleValue:@"TotalPublishTimeInSeconds" forField:@"com.apple.mediaanalysisd.SceneAnalysisRunSession" andEvent:-v136]);
    v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);
    v139 = v138;
    if (v148 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v138))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v139,  OS_SIGNPOST_INTERVAL_END,  spid,  "VCPMADSceneAssetBatch_Publish",  (const char *)&unk_100199097,  buf,  2u);
    }

    v142 = MediaAnalysisLogLevel(v140, v141);
    if ((int)v142 >= 7)
    {
      v144 = VCPLogInstance(v142, v143);
      v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(v144);
      v146 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v145, v146))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v145, v146, "[Scene] Finished persisting", buf, 2u);
      }
    }
          }

LABEL_136:
    -[VCPDatabaseWriter commit](self->_analysisDatabase, "commit");
    LODWORD(v173) = (_DWORD)v97;
LABEL_137:
  }

LABEL_139:
  return (int)v173;
}
  }

void sub_10002B380( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_10002B6B8(uint64_t a1)
{
  __int128 v86 = 0u;
  __int128 v87 = 0u;
  __int128 v88 = 0u;
  __int128 v89 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v1 = [obj countByEnumeratingWithState:&v86 objects:v92 count:16];
  if (v1)
  {
    uint64_t v84 = *(void *)v87;
    os_log_type_t type = VCPLogToOSLogType[7];
    do
    {
      uint64_t v2 = 0LL;
      id v85 = v1;
      do
      {
        if (*(void *)v87 != v84) {
          objc_enumerationMutation(obj);
        }
        uint64_t v3 = *(void **)(*((void *)&v86 + 1) + 8LL * (void)v2);
        id v4 = objc_autoreleasePoolPush();
        double v5 = (void *)objc_claimAutoreleasedReturnValue([v3 asset]);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 localIdentifier]);
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[Scene][%@]",  v6));

        if ([v3 status] != -128
          && (([v3 needsSceneProcessing] & 1) != 0
           || ([v3 needsEmbeddingProcessing] & 1) != 0))
        {
          os_log_type_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 asset]);
          os_signpost_id_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[PHAssetChangeRequest changeRequestForAsset:]( &OBJC_CLASS___PHAssetChangeRequest,  "changeRequestForAsset:",  v8));

          id v10 = [v3 needsSceneProcessing];
          if (!(_DWORD)v10) {
            goto LABEL_24;
          }
          uint64_t v12 = MediaAnalysisLogLevel(v10, v11);
          if ((int)v12 >= 7)
          {
            uint64_t v14 = VCPLogInstance(v12, v13);
            uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
            if (os_log_type_enabled(v15, type))
            {
              *(_DWORD *)__int128 buf = 138412290;
              id v91 = v7;
              _os_log_impl((void *)&_mh_execute_header, v15, type, "%@ Persisting dedupping signals ... ", buf, 0xCu);
            }
          }

          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 duplicateMatchingFeature]);
          if (v17)
          {
            id v18 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 duplicateMatchingAlternateFeature]);
            BOOL v20 = v19 != 0LL;
          }

          else
          {
            BOOL v20 = 0LL;
          }

          id v21 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
          id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 duplicateMatchingFeature]);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 duplicateMatchingAlternateFeature]);
          [v9 setDuplicateMatchingData:v22 duplicateMatchingAlternateData:v24 processingSucceeded:v20];

          id v25 = [v3 status];
          if (!(_DWORD)v25)
          {
            uint64_t v27 = MediaAnalysisLogLevel(v25, v26);
            if ((int)v27 >= 7)
            {
              uint64_t v29 = VCPLogInstance(v27, v28);
              uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
              if (os_log_type_enabled(v30, type))
              {
                *(_DWORD *)__int128 buf = 138412290;
                id v91 = v7;
                _os_log_impl( (void *)&_mh_execute_header,  v30,  type,  "%@ Persisting scene analysis results ... ",  buf,  0xCu);
              }
            }

            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v31 sceneClassifications]);
            __int16 v33 = VCPPhotosSceneProcessingVersionInternal();
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v3 asset]);
            __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 adjustmentVersion]);
            [v9 setSceneClassifications:v32 ofType:0 version:v33 timestamp:v35];

            id v36 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v36 overallAestheticScore];
            objc_msgSend(v9, "setOverallAestheticScore:");

            id v37 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v37 wellFramedSubjectScore];
            objc_msgSend(v9, "setWellFramedSubjectScore:");

            uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v38 wellChosenSubjectScore];
            objc_msgSend(v9, "setWellChosenSubjectScore:");

            os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v39 tastefullyBlurredScore];
            objc_msgSend(v9, "setTastefullyBlurredScore:");

            uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v40 sharplyFocusedSubjectScore];
            objc_msgSend(v9, "setSharplyFocusedSubjectScore:");

            id v41 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v41 wellTimedShotScore];
            objc_msgSend(v9, "setWellTimedShotScore:");

            uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v42 pleasantLightingScore];
            objc_msgSend(v9, "setPleasantLightingScore:");

            uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v43 pleasantReflectionsScore];
            objc_msgSend(v9, "setPleasantReflectionsScore:");

            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v44 harmoniousColorScore];
            objc_msgSend(v9, "setHarmoniousColorScore:");

            uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v45 livelyColorScore];
            objc_msgSend(v9, "setLivelyColorScore:");

            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v46 pleasantSymmetryScore];
            objc_msgSend(v9, "setPleasantSymmetryScore:");

            uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v47 pleasantPatternScore];
            objc_msgSend(v9, "setPleasantPatternScore:");

            __int128 v48 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v48 immersivenessScore];
            objc_msgSend(v9, "setImmersivenessScore:");

            os_signpost_id_t v49 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v49 pleasantPerspectiveScore];
            objc_msgSend(v9, "setPleasantPerspectiveScore:");

            uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v50 pleasantPostProcessingScore];
            objc_msgSend(v9, "setPleasantPostProcessingScore:");

            __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v51 noiseScore];
            objc_msgSend(v9, "setNoiseScore:");

            __int128 v52 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v52 failureScore];
            objc_msgSend(v9, "setFailureScore:");

            id v53 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v53 pleasantCompositionScore];
            objc_msgSend(v9, "setPleasantCompositionScore:");

            uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v54 interestingSubjectScore];
            objc_msgSend(v9, "setInterestingSubjectScore:");

            __int128 v55 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v55 intrusiveObjectPresenceScore];
            objc_msgSend(v9, "setIntrusiveObjectPresenceScore:");

            __int128 v56 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v56 pleasantCameraTiltScore];
            objc_msgSend(v9, "setPleasantCameraTiltScore:");

            id v57 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v57 lowLight];
            objc_msgSend(v9, "setLowLight:");

            uint64_t v58 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v58 preferredCropRect];
            objc_msgSend(v9, "setPreferredCropRectWithNormalizedRect:");

            uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v59 acceptableCropRect];
            objc_msgSend(v9, "setAcceptableCropRectWithNormalizedRect:");

            uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v60 objectSaliencyRects]);
            [v9 setObjectSaliencyRects:v61];

            uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v62 sceneprintData]);
            [v9 setSceneprintData:v63];

            __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v64 wallpaperScore];
            objc_msgSend(v9, "setWallpaperScore:");

            os_signpost_id_t v65 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v65 colorNormalizationData]);
            [v9 setColorNormalizationData:v66];

            os_log_type_t v67 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v67 iconicScore];
            [v9 setIconicScore:v68];

            id v69 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v69 blurrinessScore];
            objc_msgSend(v9, "setBlurrinessScore:");

            uint64_t v70 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v70 exposureScore];
            objc_msgSend(v9, "setExposureScore:");

            uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            objc_msgSend(v9, "setProbableRotationDirection:", objc_msgSend(v71, "probableRotationDirection"));

            uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue([v3 results]);
            [v72 probableRotationDirectionConfidence];
            objc_msgSend(v9, "setProbableRotationDirectionConfidence:");

            id v73 = (void *)objc_claimAutoreleasedReturnValue([v3 asset]);
            uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue([v73 photoLibrary]);
            LODWORD(v34) = objc_msgSend(v74, "vcp_isSyndicationLibrary");

            if ((_DWORD)v34) {
              [v9 setCurationScore:0.0];
            }
LABEL_24:
            if ([v3 needsEmbeddingProcessing])
            {
              uint64_t v75 = *(void **)(a1 + 40);
              uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue([v3 asset]);
              uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v76 localIdentifier]);
              LODWORD(v75) = [v75 containsObject:v77];

              if ((_DWORD)v75) {
                [v9 setImageEmbeddingVersion:70];
              }
            }

            uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue([v3 asset]);
            unsigned int v79 = objc_msgSend(v78, "mad_isEligibleForComputeSync");

            if (v79)
            {
              uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue([v3 asset]);
              objc_msgSend( v9,  "setLocalAnalysisStage:",  objc_msgSend(v80, "mad_analysisStageAfterCompletingAnalysis:", 2));
            }
          }
        }

        objc_autoreleasePoolPop(v4);
        uint64_t v2 = (char *)v2 + 1;
      }

      while (v85 != v2);
      id v1 = [obj countByEnumeratingWithState:&v86 objects:v92 count:16];
    }

    while (v1);
  }
}

void sub_10002BFAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void sub_10002C29C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_10002C2D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10002C3DC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10002C3EC( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_10002C404(uint64_t a1@<X8>)
{
  *(void *)(v1 - _Block_object_dispose(va, 8) = a1;
}

  ;
}

void sub_10002C418()
{
}

void sub_10002C480( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10002C4B4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
    a5,
    a6,
    a7,
    a8,
    0);
  sub_10002C410();
}

void sub_10002C4E8()
{
}

void sub_10002C564( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
    a5,
    a6,
    a7,
    a8,
    0);
  sub_10002C410();
}

void sub_10002C634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002C6F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002C750( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  id v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___VCPDatabaseWriter;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10002C7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002CD1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_35:
          os_log_type_t v39 = 0LL;
          goto LABEL_36;
        }
      }

      uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseWriter initializationCommand:]( &OBJC_CLASS___VCPDatabaseWriter,  "initializationCommand:",  v94));
      if (!v54)
      {
        id v25 = MediaAnalysisLogLevel(0LL, v55);
        if ((int)v25 < 3)
        {
          os_log_type_t v39 = 0LL;
          uint64_t v24 = -23;
          goto LABEL_36;
        }

        uint64_t v70 = VCPLogInstance(v25, v26);
        uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
        uint64_t v71 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v28, v71))
        {
          *(_DWORD *)__int128 buf = 67109120;
          LODWORD(v97) = v94;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  v71,  "[VCPDatabaseWriter] Invalid database version %d",  buf,  8u);
        }

        os_log_type_t v39 = 0LL;
        uint64_t v24 = -23;
        goto LABEL_23;
      }

      __int128 v56 = *p_database;
      os_log_type_t v39 = v54;
      id v57 = sqlite3_exec(v56, (const char *)[v39 UTF8String], 0, 0, 0);
      uint64_t v59 = v57;
      if ((_DWORD)v57)
      {
        uint64_t v60 = MediaAnalysisLogLevel(v57, v58);
        if ((int)v60 >= 3)
        {
          uint64_t v62 = VCPLogInstance(v60, v61);
          uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
          __int128 v64 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v63, v64))
          {
            *(_DWORD *)__int128 buf = 67109120;
            LODWORD(v97) = v59;
            _os_log_impl( (void *)&_mh_execute_header,  v63,  v64,  "[VCPDatabaseWriter] Failed to create database tables: %d",  buf,  8u);
          }
        }
      }

      if ((v12 & 1) != 0) {
        goto LABEL_50;
      }
      uint64_t v72 = -[VCPDatabaseWriter beginTransaction](self, "beginTransaction");
      uint64_t v24 = v72;
      if ((_DWORD)v72)
      {
        id v25 = MediaAnalysisLogLevel(v72, v73);
        uint64_t v74 = VCPLogInstance(v25, v26);
        uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
        float v68 = VCPLogToOSLogType[3];
        if (!os_log_type_enabled(v28, v68)) {
          goto LABEL_23;
        }
        *(_WORD *)__int128 buf = 0;
        id v69 = "[VCPDatabaseWriter] Failed to begin transaction for analytic metrics table initialization";
        goto LABEL_67;
      }

      unsigned int v79 = -[VCPDatabaseWriter _setValue:forKey:]( self,  "_setValue:forKey:",  0LL,  @"NumberOfTimesScheduledDatabaseCreation");
      uint64_t v24 = v79;
      if ((_DWORD)v79)
      {
        id v25 = MediaAnalysisLogLevel(v79, v80);
        uint64_t v81 = VCPLogInstance(v25, v26);
        uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
        v82 = VCPLogToOSLogType[3];
        if (!os_log_type_enabled(v28, v82)) {
          goto LABEL_23;
        }
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v97 = @"NumberOfTimesScheduledDatabaseCreation";
        id v69 = "[VCPDatabaseWriter] Failed to set %@ to 0";
      }

      else
      {
        uint64_t v83 = -[VCPDatabaseWriter _setValue:forKey:]( self,  "_setValue:forKey:",  0LL,  @"TotalAnalyzingTimeDatabaseCreation");
        uint64_t v24 = v83;
        if ((_DWORD)v83)
        {
          id v25 = MediaAnalysisLogLevel(v83, v84);
          id v85 = VCPLogInstance(v25, v26);
          uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
          v82 = VCPLogToOSLogType[3];
          if (!os_log_type_enabled(v28, v82)) {
            goto LABEL_23;
          }
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v97 = @"TotalAnalyzingTimeDatabaseCreation";
          id v69 = "[VCPDatabaseWriter] Failed to set %@ to 0";
        }

        else
        {
          __int128 v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
          [v86 timeIntervalSinceReferenceDate];
          uint64_t v24 = -[VCPDatabaseWriter _setValue:forKey:]( self,  "_setValue:forKey:",  (uint64_t)v87,  @"DailyProcessTimeStamp");

          if (!v24)
          {
            id v91 = -[VCPDatabaseWriter commitTransaction](self, "commitTransaction");
            uint64_t v24 = v91;
            if (!(_DWORD)v91)
            {
LABEL_50:
              os_signpost_id_t v65 = -[VCPDatabaseWriter _updateAnalysisInfoOnAnalysisVersionChange]( self,  "_updateAnalysisInfoOnAnalysisVersionChange");
              uint64_t v24 = v65;
              if ((_DWORD)v65)
              {
                id v25 = MediaAnalysisLogLevel(v65, v66);
                os_log_type_t v67 = VCPLogInstance(v25, v26);
                uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
                float v68 = VCPLogToOSLogType[3];
                if (!os_log_type_enabled(v28, v68)) {
                  goto LABEL_23;
                }
                *(_WORD *)__int128 buf = 0;
                id v69 = "[VCPDatabaseWriter] Failed to check/update analysis versions";
              }

              else
              {
                id v25 = -[VCPDatabaseWriter _updateOperatingSystemVersion](self, "_updateOperatingSystemVersion");
                uint64_t v24 = v25;
                if (!(_DWORD)v25)
                {
                  if (!v59)
                  {
                    uint64_t v24 = 0;
LABEL_41:

                    goto LABEL_42;
                  }

                  uint64_t v24 = v59;
LABEL_36:
                  __int128 v48 = MediaAnalysisLogLevel(v25, v26);
                  if ((int)v48 >= 3)
                  {
                    uint64_t v50 = VCPLogInstance(v48, v49);
                    __int128 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
                    __int128 v52 = VCPLogToOSLogType[3];
                    if (os_log_type_enabled(v51, v52))
                    {
                      *(_DWORD *)__int128 buf = 67109120;
                      LODWORD(v97) = v24;
                      _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "[VCPDatabaseWriter] Error occurred when opening database: %d",  buf,  8u);
                    }
                  }

                  -[VCPDatabaseWriter closeDatabase](self, "closeDatabase");
                  goto LABEL_41;
                }

                id v25 = MediaAnalysisLogLevel(v25, v26);
                uint64_t v75 = VCPLogInstance(v25, v26);
                uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
                float v68 = VCPLogToOSLogType[3];
                if (!os_log_type_enabled(v28, v68))
                {
LABEL_23:

                  goto LABEL_36;
                }

                *(_WORD *)__int128 buf = 0;
                id v69 = "[VCPDatabaseWriter] Failed to check/update OS version";
              }

              goto LABEL_67;
            }

            id v25 = MediaAnalysisLogLevel(v91, v92);
            uint64_t v93 = VCPLogInstance(v25, v26);
            uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
            float v68 = VCPLogToOSLogType[3];
            if (!os_log_type_enabled(v28, v68)) {
              goto LABEL_23;
            }
            *(_WORD *)__int128 buf = 0;
            id v69 = "[VCPDatabaseWriter] Failed to commit transaction for analytic metrics table initialization";
LABEL_67:
            uint64_t v76 = v28;
            uint64_t v77 = v68;
            uint64_t v78 = 2;
LABEL_68:
            _os_log_impl((void *)&_mh_execute_header, v76, v77, v69, buf, v78);
            goto LABEL_23;
          }

          id v25 = MediaAnalysisLogLevel(v88, v89);
          uint64_t v90 = VCPLogInstance(v25, v26);
          uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
          v82 = VCPLogToOSLogType[3];
          if (!os_log_type_enabled(v28, v82)) {
            goto LABEL_23;
          }
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v97 = @"DailyProcessTimeStamp";
          id v69 = "[VCPDatabaseWriter] Failed to set %@ as now";
        }
      }

      uint64_t v76 = v28;
      uint64_t v77 = v82;
      uint64_t v78 = 12;
      goto LABEL_68;
    }

    uint64_t v40 = MediaAnalysisLogLevel(v19, v20);
    if ((int)v40 >= 3)
    {
      uint64_t v42 = VCPLogInstance(v40, v41);
      uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      uint64_t v44 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v43, v44))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Failed to create database", buf, 2u);
      }
    }
  }

  else
  {
    uint64_t v31 = MediaAnalysisLogLevel(v8, v9);
    if ((int)v31 >= 3)
    {
      __int16 v33 = VCPLogInstance(v31, v32);
      uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
      __int16 v35 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v34, v35))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Failed to create database directory", buf, 2u);
      }
    }
  }

  uint64_t v24 = -23;
LABEL_42:

  return v24;
}

    return v10;
  }

  if (v116 == v6 && v115 == v5) {
    return 0;
  }
  uint64_t v24 = MediaAnalysisLogLevel(v17, v18);
  if ((int)v24 >= 5)
  {
    uint64_t v26 = VCPLogInstance(v24, v25);
    uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    uint64_t v28 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v27, v28))
    {
      *(_DWORD *)__int128 buf = 134218752;
      v122 = v116;
      v123 = 2048;
      v124 = v115;
      v125 = 2048;
      v126 = v6;
      v127 = 2048;
      v128 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "[VCPDatabaseWriter] Operating System version changed from %lld.%lld to %lld.%lld",  buf,  0x2Au);
    }
  }

  uint64_t v29 = -[VCPDatabaseWriter beginTransaction](self, "beginTransaction");
  id v10 = v29;
  if ((_DWORD)v29)
  {
    uint64_t v31 = MediaAnalysisLogLevel(v29, v30);
    __int16 v33 = VCPLogInstance(v31, v32);
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    uint64_t v34 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v22, v34))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v34,  "[VCPDatabaseWriter] Failed to begin transaction for os version check/update",  buf,  2u);
    }

    goto LABEL_35;
  }

  __int16 v35 = -[VCPDatabaseWriter _setValue:forKey:](self, "_setValue:forKey:", v6, v7);
  id v10 = v35;
  if ((_DWORD)v35)
  {
    id v37 = MediaAnalysisLogLevel(v35, v36);
    os_log_type_t v39 = VCPLogInstance(v37, v38);
    uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    id v41 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v40, v41))
    {
      *(_DWORD *)__int128 buf = 138412290;
      v122 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "[VCPDatabaseWriter] Failed to set major os version for %@",  buf,  0xCu);
    }

  id v53 = 0LL;
LABEL_37:

  return v53;
}

  objc_storeStrong((id *)&self->_types, v17);
  id v36 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
  id v37 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:",  v36));

  if (v17)
  {
    if (v18 != 2)
    {
      uint64_t v38 = objc_msgSend(*(id *)&self->_allowStreaming, "vcp_isLivePhoto");
      if ((_DWORD)v38)
      {
        uint64_t v40 = MediaAnalysisLogLevel(v38, v39);
        if ((int)v40 >= 7)
        {
          uint64_t v42 = VCPLogInstance(v40, v41);
          uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
          uint64_t v44 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v43, v44))
          {
            *(_DWORD *)__int128 buf = 138412290;
            v141 = v135;
            _os_log_impl((void *)&_mh_execute_header, v43, v44, "  [%@] Partial analysis completed", buf, 0xCu);
          }
        }

        uint64_t v38 = [v37 storeAnalysisForAsset:*(void *)&self->_allowStreaming analysis:v17];
        LODWORD(v2) = (_DWORD)v38;
        if ((_DWORD)v38 == -108 || (_DWORD)v38 == -36 || (_DWORD)v38 == -23) {
          goto LABEL_125;
        }
      }
    }
  }

  switch(v18)
  {
    case 4LL:
      uint64_t v60 = MediaAnalysisLogLevel(v38, v39);
      if ((int)v60 >= 5)
      {
        uint64_t v62 = VCPLogInstance(v60, v61);
        uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
        __int128 v64 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v63, v64))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v141 = v135;
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "  [%@] Analysis cancelled", buf, 0xCu);
        }
      }

      if (v17)
      {
        os_signpost_id_t v65 = [*(id *)&self->_allowStreaming isVideo];
        if ((_DWORD)v65)
        {
          os_log_type_t v67 = MediaAnalysisLogLevel(v65, v66);
          if ((int)v67 >= 5)
          {
            id v69 = VCPLogInstance(v67, v68);
            uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
            uint64_t v71 = VCPLogToOSLogType[5];
            if (os_log_type_enabled(v70, v71))
            {
              *(_DWORD *)__int128 buf = 138412290;
              v141 = v135;
              _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "  [%@] Analysis cancelled with partially valid results",  buf,  0xCu);
            }
          }

          uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue( +[VCPPausedAnalysis pausedAnalysis:forAsset:]( &OBJC_CLASS___VCPPausedAnalysis,  "pausedAnalysis:forAsset:",  v17,  *(void *)&self->_allowStreaming));
          [v72 persist];
          id v73 = [v37 decrementBlacklistCountForLocalIdentifier:v135];
          uint64_t v74 = v73;
          if (v73 == -108 || v73 == -36)
          {
            uint64_t v75 = v73;
          }

          else
          {
            uint64_t v75 = v73;
            if (v73 != -23) {
              uint64_t v75 = v2;
            }
          }

          if (v74 == -108 || v74 == -36 || v74 == -23) {
            goto LABEL_110;
          }
          __int128 v86 = @"CanceledWithPartialResults";
LABEL_124:
          int8x16_t v96 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          [v96 timeIntervalSinceDate:v134];
          v98 = v97;

          -[VCPAssetAnalysisTask _reportCoreAnalyticsWithAsset:analysis:analysisStatus:processingInterval:extendedAnalysisStatus:]( self,  "_reportCoreAnalyticsWithAsset:analysis:analysisStatus:processingInterval:extendedAnalysisStatus:",  *(void *)&self->_allowStreaming,  v17,  4LL,  v86,  v98);
          LODWORD(v2) = -128;
          goto LABEL_125;
        }
      }

      uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v76 timeIntervalSinceDate:v134];
      uint64_t v78 = v77;

      if (v78 >= 1800.0)
      {
        __int128 v87 = MediaAnalysisLogLevel(v79, v80);
        if ((int)v87 < 4)
        {
          __int128 v86 = @"CanceledWithNoProgress";
          goto LABEL_124;
        }

        __int128 v89 = VCPLogInstance(v87, v88);
        uint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
        uint64_t v90 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v84, v90))
        {
          *(_DWORD *)__int128 buf = 138412546;
          v141 = v135;
          v142 = 2048;
          v143 = v78;
          _os_log_impl( (void *)&_mh_execute_header,  v84,  v90,  "  [%@] Analysis failed to progress in extended processing interval (%.0fs)",  buf,  0x16u);
        }

        __int128 v86 = @"CanceledWithNoProgress";
      }

      else
      {
        if (!v20)
        {
          id v92 = [v37 decrementBlacklistCountForLocalIdentifier:v135];
          if (v92 == -108 || v92 == -36)
          {
            uint64_t v93 = v92;
          }

          else
          {
            uint64_t v93 = v92;
            if (v92 != -23) {
              uint64_t v93 = v2;
            }
          }

          if (v92 == -108 || v92 == -36 || v92 == -23)
          {
            LODWORD(v2) = v93;
            goto LABEL_125;
          }

          __int128 v86 = 0LL;
          goto LABEL_124;
        }

        uint64_t v81 = MediaAnalysisLogLevel(v79, v80);
        if ((int)v81 < 4)
        {
          __int128 v86 = @"CanceledAfterStreaming";
          goto LABEL_124;
        }

        uint64_t v83 = VCPLogInstance(v81, v82);
        uint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
        id v85 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v84, v85))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v141 = v135;
          _os_log_impl( (void *)&_mh_execute_header,  v84,  v85,  "  [%@] Analysis cancelled after resource streamed",  buf,  0xCu);
        }

        __int128 v86 = @"CanceledAfterStreaming";
      }

      goto LABEL_124;
    case 3LL:
      __int128 v52 = MediaAnalysisLogLevel(v38, v39);
      if ((int)v52 >= 3)
      {
        uint64_t v54 = VCPLogInstance(v52, v53);
        __int128 v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
        __int128 v56 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v55, v56))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v141 = v135;
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "  [%@] Analysis failed", buf, 0xCu);
        }
      }

      id v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v57 timeIntervalSinceDate:v134];
      uint64_t v59 = v58;

      -[VCPAssetAnalysisTask _reportCoreAnalyticsWithAsset:analysis:analysisStatus:processingInterval:extendedAnalysisStatus:]( self,  "_reportCoreAnalyticsWithAsset:analysis:analysisStatus:processingInterval:extendedAnalysisStatus:",  *(void *)&self->_allowStreaming,  v17,  3LL,  0LL,  v59);
      break;
    case 2LL:
      uint64_t v45 = MediaAnalysisLogLevel(v38, v39);
      if ((int)v45 >= 7)
      {
        uint64_t v47 = VCPLogInstance(v45, v46);
        __int128 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
        os_signpost_id_t v49 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v48, v49))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v141 = v135;
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "  [%@] Analysis completed", buf, 0xCu);
        }
      }

      uint64_t v50 = [v37 storeAnalysisForAsset:*(void *)&self->_allowStreaming analysis:v17];
      if (v50 == -108 || v50 == -36)
      {
        __int128 v51 = v50;
      }

      else
      {
        __int128 v51 = v50;
        if (v50 != -23) {
          __int128 v51 = v2;
        }
      }

      if (v50 == -108 || v50 == -36 || v50 == -23)
      {
        LODWORD(v2) = v51;
        goto LABEL_125;
      }

      id v91 = [v37 removeLocalIdentifierFromBlacklist:v135];
      if (v91 == -108 || v91 == -36)
      {
        uint64_t v75 = v91;
      }

      else
      {
        uint64_t v75 = v91;
        if (v91 != -23) {
          uint64_t v75 = v51;
        }
      }

      if (v91 == -108 || v91 == -36 || v91 == -23)
      {
LABEL_110:
        LODWORD(v2) = v75;
        goto LABEL_125;
      }

      if (objc_msgSend(*(id *)&self->_allowStreaming, "vcp_isLivePhoto")) {
        -[VCPAssetAnalysisTask publishLivePhotoEffectsAnalysis:toAsset:]( self,  "publishLivePhotoEffectsAnalysis:toAsset:",  v17,  *(void *)&self->_allowStreaming);
      }
      v94 = (void *)objc_claimAutoreleasedReturnValue([*(id *)&self->_allowStreaming localIdentifier]);
      v136 = 0LL;
      v95 = [v37 analysisForAsset:v94 analysis:&v136];
      v133 = v136;

      if (v95 == -108 || v95 == -36)
      {
        LODWORD(v2) = v95;
      }

      else
      {
        LODWORD(v2) = v95;
        if (v95 != -23) {
          LODWORD(v2) = v75;
        }
      }

      if (v95 == -108 || v95 == -36 || v95 == -23)
      {
        v100 = (uint64_t)v17;
LABEL_147:

        uint64_t v17 = (void *)v100;
        goto LABEL_125;
      }

      v101 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "vcp_results"));
      v132 = (void *)objc_claimAutoreleasedReturnValue([v101 objectForKeyedSubscript:MediaAnalysisKeyFrameResourceResultsKey]);

      v102 = MergeKeyFrameResourceResultsIntoExistingAnalysis(v132, v133);
      v100 = objc_claimAutoreleasedReturnValue(v102);

      if (self->_asset)
      {
        v105 = (void *)objc_claimAutoreleasedReturnValue([*(id *)&self->_allowStreaming mediaAnalysisProperties]);
        v106 = v105;
        v131 = (os_log_s *)v105;
        if (!v105
          || (v107 = [v105 mediaAnalysisVersion], (unint64_t)v107 < MediaAnalysisVersion)
          || (v108 = (void *)objc_claimAutoreleasedReturnValue([v106 mediaAnalysisTimeStamp]),
              v109 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)&self->_allowStreaming, "vcp_modificationDate")),
              v110 = [v108 isEqualToDate:v109],
              v109,
              v108,
              v110))
        {
          v111 = -[PHAsset updateAsset:withAnalysis:imageOnly:]( self->_asset,  "updateAsset:withAnalysis:imageOnly:",  *(void *)&self->_allowStreaming,  v100,  0LL);
          if ((_DWORD)v111)
          {
            v113 = MediaAnalysisLogLevel(v111, v112);
            if ((int)v113 >= 4)
            {
              v115 = VCPLogInstance(v113, v114);
              v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
              v117 = VCPLogToOSLogType[4];
              if (os_log_type_enabled(v116, v117))
              {
                *(_DWORD *)__int128 buf = 138412290;
                v141 = v135;
                _os_log_impl( (void *)&_mh_execute_header,  v116,  v117,  "  [%@] Failed to store PHAssetMediaAnalysisProperties",  buf,  0xCu);
              }
            }
          }
        }

        v118 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
        [v118 timeIntervalSinceDate:v134];
        v120 = v119;

        v121 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
        uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[VCPBackgroundProcessingMetrics sharedMetricsWithPhotoLibrary:]( &OBJC_CLASS___VCPBackgroundProcessingMetrics,  "sharedMetricsWithPhotoLibrary:",  v121));

        [v2 loadMetrics];
        [v2 reportAnalyzedAsset:*(void *)&self->_allowStreaming withAnalysis:v100 andProcessingTime:v120];
        -[VCPAssetAnalysisTask _reportCoreAnalyticsWithAsset:analysis:analysisStatus:processingInterval:extendedAnalysisStatus:]( self,  "_reportCoreAnalyticsWithAsset:analysis:analysisStatus:processingInterval:extendedAnalysisStatus:",  *(void *)&self->_allowStreaming,  v100,  2LL,  0LL,  v120);
        v122 = VCPTaskIDDescription(1LL);
        v123 = (void *)objc_claimAutoreleasedReturnValue(v122);
        v124 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)&self->_allowStreaming, "vcp_typeDescription"));
        v125 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-Analyze-%@",  v123,  v124));

        VCPCoreAnalyticsQoSReportSpeed(v125, v120 * 1000.0);
        LODWORD(v2) = 0;
        v126 = v131;
      }

      else
      {
        v127 = MediaAnalysisLogLevel(v103, v104);
        if ((int)v127 < 3)
        {
          LODWORD(v2) = -18;
          goto LABEL_146;
        }

        v129 = VCPLogInstance(v127, v128);
        v126 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
        v130 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v126, v130))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v126,  v130,  "Failed to retrieve VCPPhotosAssetChangeManager",  buf,  2u);
        }

        LODWORD(v2) = -18;
      }

LABEL_146:
      goto LABEL_147;
  }

  LODWORD(v2) = 0;
LABEL_125:

  return (int)v2;
}

      goto LABEL_36;
    }

    id v73 = 0LL;
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v8 predictPersonFromFaceObservation:v21 limit:10 canceller:0 error:&v73]);
    id v25 = (os_log_s *)v73;
    uint64_t v27 = v25;
    if (v25)
    {
      uint64_t v28 = MediaAnalysisLogLevel(v25, v26);
      if ((int)v28 < 4)
      {
LABEL_34:

        goto LABEL_35;
      }

      uint64_t v30 = VCPLogInstance(v28, v29);
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      uint64_t v32 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v31, v32))
      {
        __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v7 localIdentifier]);
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s description](v27, "description"));
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v75 = v33;
        uint64_t v76 = 2112;
        v77[0] = v34;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%@] Face prediction failed (%@); skipping", buf, 0x16u);
      }
    }

    else
    {
      uint64_t v66 = a5;
      os_log_type_t v67 = v8;
      float v68 = v7;
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      id v69 = 0u;
      uint64_t v70 = 0u;
      uint64_t v71 = 0u;
      uint64_t v72 = 0u;
      os_signpost_id_t v65 = v24;
      uint64_t v45 = v24;
      uint64_t v46 = [v45 countByEnumeratingWithState:&v69 objects:v78 count:16];
      if (v46)
      {
        uint64_t v47 = v46;
        __int128 v48 = *(void *)v70;
        do
        {
          for (i = 0LL; i != v47; i = (char *)i + 1)
          {
            if (*(void *)v70 != v48) {
              objc_enumerationMutation(v45);
            }
            uint64_t v50 = *(void **)(*((void *)&v69 + 1) + 8LL * (void)i);
            __int128 v51 = [v50 confidence];
            if (v52 > VCPPersonFaceVIPMatchingThreshold(v51))
            {
              [v50 confidence];
              id v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
              uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v50 predictedPersonUniqueIdentifier]);
              -[os_log_s setObject:forKeyedSubscript:](v31, "setObject:forKeyedSubscript:", v53, v54);
            }
          }

          uint64_t v47 = [v45 countByEnumeratingWithState:&v69 objects:v78 count:16];
        }

        while (v47);
      }

      id v57 = MediaAnalysisLogLevel(v55, v56);
      uint64_t v7 = v68;
      if ((int)v57 >= 7)
      {
        uint64_t v59 = VCPLogInstance(v57, v58);
        uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
        uint64_t v61 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v60, v61))
        {
          uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([v68 localIdentifier]);
          uint64_t v63 = [v45 count];
          __int128 v64 = -[os_log_s count](v31, "count");
          *(_DWORD *)__int128 buf = 138412802;
          uint64_t v75 = v62;
          uint64_t v76 = 1024;
          LODWORD(v77[0]) = v63;
          WORD2(v77[0]) = 1024;
          *(_DWORD *)((char *)v77 + 6) = v64;
          _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "[%@] VIP Model yielded %d predictions, %d exceeded confidence threshold",  buf,  0x18u);
        }
      }

      uint64_t v27 = 0LL;
      if (v66)
      {
        uint64_t v31 = v31;
        void *v66 = v31;
      }

      os_log_type_t v8 = v67;
      uint64_t v24 = v65;
    }

    goto LABEL_34;
  }

  __int16 v35 = MediaAnalysisLogLevel(v18, v19);
  if ((int)v35 >= 4)
  {
    id v37 = VCPLogInstance(v35, v36);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v37);
    uint64_t v38 = VCPLogToOSLogType[4];
    if (os_log_type_enabled((os_log_t)v21, v38))
    {
      os_log_type_t v39 = (void *)objc_claimAutoreleasedReturnValue([v7 localIdentifier]);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v75 = v39;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v21,  v38,  "[%@] Failed to obtain faceprint; skipping",
        buf,
        0xCu);
    }

    goto LABEL_36;
  }

      goto LABEL_36;
    }

    uint64_t v75 = 0LL;
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v8 entityPredictionsForObservation:v21 limit:10 canceller:0 error:&v75]);
    id v25 = (os_log_s *)v75;
    uint64_t v27 = v25;
    if (v25)
    {
      uint64_t v28 = MediaAnalysisLogLevel(v25, v26);
      if ((int)v28 < 4)
      {
LABEL_34:

        goto LABEL_35;
      }

      uint64_t v30 = VCPLogInstance(v28, v29);
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      uint64_t v32 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v31, v32))
      {
        __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v7 localIdentifier]);
        uint64_t v34 = v24;
        __int16 v35 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s description](v27, "description"));
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v77 = v33;
        uint64_t v78 = 2112;
        v79[0] = v35;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%@] Pet prediction failed (%@); skipping", buf, 0x16u);

        uint64_t v24 = v34;
      }
    }

    else
    {
      float v68 = a5;
      id v69 = v21;
      uint64_t v70 = v8;
      uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      uint64_t v71 = 0u;
      uint64_t v72 = 0u;
      id v73 = 0u;
      uint64_t v74 = 0u;
      os_log_type_t v67 = v24;
      uint64_t v46 = v24;
      uint64_t v47 = [v46 countByEnumeratingWithState:&v71 objects:v80 count:16];
      if (v47)
      {
        __int128 v48 = v47;
        os_signpost_id_t v49 = *(void *)v72;
        do
        {
          for (i = 0LL; i != v48; i = (char *)i + 1)
          {
            if (*(void *)v72 != v49) {
              objc_enumerationMutation(v46);
            }
            __int128 v51 = *(void **)(*((void *)&v71 + 1) + 8LL * (void)i);
            objc_msgSend(v51, "confidence", v67);
            id v53 = v52;
            +[VCPFaceIDModel petClassificationThreshold](&OBJC_CLASS___VCPFaceIDModel, "petClassificationThreshold");
            if (v53 > v54)
            {
              [v51 confidence];
              __int128 v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:"));
              __int128 v56 = (void *)objc_claimAutoreleasedReturnValue([v51 entityUniqueIdentifier]);
              -[os_log_s setObject:forKeyedSubscript:](v31, "setObject:forKeyedSubscript:", v55, v56);
            }
          }

          __int128 v48 = [v46 countByEnumeratingWithState:&v71 objects:v80 count:16];
        }

        while (v48);
      }

      uint64_t v59 = MediaAnalysisLogLevel(v57, v58);
      if ((int)v59 >= 7)
      {
        uint64_t v61 = VCPLogInstance(v59, v60);
        uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
        uint64_t v63 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v62, v63))
        {
          __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([v7 localIdentifier]);
          os_signpost_id_t v65 = [v46 count];
          uint64_t v66 = -[os_log_s count](v31, "count");
          *(_DWORD *)__int128 buf = 138412802;
          uint64_t v77 = v64;
          uint64_t v78 = 1024;
          LODWORD(v79[0]) = v65;
          WORD2(v79[0]) = 1024;
          *(_DWORD *)((char *)v79 + 6) = v66;
          _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "[%@] VIP Model yielded %d predictions, %d exceeded confidence threshold",  buf,  0x18u);
        }
      }

      uint64_t v27 = 0LL;
      if (v68)
      {
        uint64_t v31 = v31;
        *float v68 = v31;
      }

      id v21 = v69;
      os_log_type_t v8 = v70;
      uint64_t v24 = v67;
    }

    goto LABEL_34;
  }

  id v36 = MediaAnalysisLogLevel(v18, v19);
  if ((int)v36 >= 4)
  {
    uint64_t v38 = VCPLogInstance(v36, v37);
    id v21 = (void *)objc_claimAutoreleasedReturnValue(v38);
    os_log_type_t v39 = VCPLogToOSLogType[4];
    if (os_log_type_enabled((os_log_t)v21, v39))
    {
      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v7 localIdentifier]);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v77 = v40;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v21,  v39,  "[%@] Failed to obtain animalprint; skipping",
        buf,
        0xCu);
    }

    goto LABEL_36;
  }

    goto LABEL_36;
  }

  id v21 = BGSystemTaskCustomCheckpointMax;
  id v22 = BGSystemTaskCustomCheckpointMin;
  if (BGSystemTaskCustomCheckpointMax < a3 || BGSystemTaskCustomCheckpointMin > a3)
  {
    uint64_t v24 = MediaAnalysisLogLevel(v11, v12);
    if ((int)v24 >= 3)
    {
      uint64_t v26 = VCPLogInstance(v24, v25);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      uint64_t v28 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v27, v28))
      {
        *(_DWORD *)__int128 buf = 138413058;
        os_log_type_t v67 = @"MediaAnalysisImage";
        float v68 = 1024;
        *(_DWORD *)id v69 = a3;
        *(_WORD *)&v69[4] = 1024;
        *(_DWORD *)&v69[6] = v22;
        *(_WORD *)&v69[10] = 1024;
        *(_DWORD *)&v69[12] = v21;
        uint64_t v29 = "[%@] MADBGCheckpoint %d is not within range [%d, %d]";
        uint64_t v30 = v27;
        uint64_t v31 = v28;
        uint64_t v32 = 30;
LABEL_21:
        _os_log_impl((void *)&_mh_execute_header, v30, v31, v29, buf, v32);
      }

    id v25 = 0LL;
    goto LABEL_36;
  }

  os_signpost_id_t v9 = MediaAnalysisLogLevel(v7, v8);
  if ((int)v9 >= 7)
  {
    uint64_t v11 = VCPLogInstance(v9, v10);
    uint64_t v12 = (id)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = VCPLogToOSLogType[7];
    if (os_log_type_enabled((os_log_t)v12, v13))
    {
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 localIdentifier]);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v62 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  v13,  "[ComputeSync|Backfill][%@] Unprocessed for full analysis, unable to generate payload",  buf,  0xCu);
    }

    goto LABEL_21;
  }

  id v25 = 0LL;
LABEL_38:

  return v25;
}
      }

      objc_autoreleasePoolPop(v14);
      uint64_t v12 = (char *)v12 + 1;
    }

    while (v12 != v9);
    os_signpost_id_t v9 = [obj countByEnumeratingWithState:&v71 objects:v82 count:16];
  }

  while (v9);
LABEL_38:

  if (-[NSMutableArray count](self->_taskProviders, "count"))
  {
    -[NSMutableArray sortUsingComparator:](self->_taskProviders, "sortUsingComparator:", &stru_1001BE008);
    __int128 v51 = 0;
  }

  else
  {
    __int128 v51 = -18;
  }

  return v51;
}
      }

void sub_10002D618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10002D760(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    [v2 timeIntervalSinceReferenceDate];
    double v4 = v3;

    uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
    uint64_t v9 = VCPLogInstance(v7, v8);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    os_log_type_t v11 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v10, v11))
    {
      *(_WORD *)BOOL v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[VCPDatabaseWriter] busy timeout has passed since first retry, stop retrying",  v20,  2u);
    }

    uint64_t v12 = 0LL;
  }

  else
  {
    uint64_t v13 = MediaAnalysisLogLevel(a1, a2);
    if ((int)v13 >= 4)
    {
      uint64_t v15 = VCPLogInstance(v13, v14);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      os_log_type_t v17 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v16, v17))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "[VCPDatabaseWriter] Error SQLITE_BUSY encountered, attempting first retry",  buf,  2u);
      }
    }

    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    -[os_log_s timeIntervalSinceReferenceDate](v10, "timeIntervalSinceReferenceDate");
    qword_1001E6440 = v18;
    uint64_t v12 = 1LL;
  }

  return v12;
}

void sub_10002D8C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_114:
    uint64_t v18 = v172;
    goto LABEL_29;
  }

  id v25 = MediaAnalysisLogLevel(v22, v23);
  if ((int)v25 >= 3)
  {
    uint64_t v27 = VCPLogInstance(v25, v26);
    uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    uint64_t v29 = VCPLogToOSLogType[3];
    if (!os_log_type_enabled(v28, v29))
    {
LABEL_28:

      goto LABEL_29;
    }

    *(_DWORD *)__int128 buf = 138412290;
    *(void *)v176 = v10;
    uint64_t v30 = "[VCPDatabaseWriter] Failed to query analysis version for %@";
    goto LABEL_9;
  }

void sub_10002E5B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_10002E990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_30:
    return v10;
  }

  uint64_t v42 = -[VCPDatabaseWriter _setValue:forKey:](self, "_setValue:forKey:", v5, v16);
  id v10 = v42;
  if ((_DWORD)v42)
  {
    uint64_t v44 = MediaAnalysisLogLevel(v42, v43);
    uint64_t v46 = VCPLogInstance(v44, v45);
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    uint64_t v47 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v22, v47))
    {
      *(_DWORD *)__int128 buf = 138412290;
      v122 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v47,  "[VCPDatabaseWriter] Failed to set minor os version for %@",  buf,  0xCu);
    }

    goto LABEL_35;
  }

  __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v48 timeIntervalSinceReferenceDate];
  uint64_t v50 = (os_log_s *)OSVersionUpdateTimestampKey;
  id v10 = -[VCPDatabaseWriter _setValue:forKey:](self, "_setValue:forKey:", (uint64_t)v49, OSVersionUpdateTimestampKey);

  if (v10)
  {
    id v53 = MediaAnalysisLogLevel(v51, v52);
    __int128 v55 = VCPLogInstance(v53, v54);
    uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
    __int128 v56 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v40, v56))
    {
      *(_DWORD *)__int128 buf = 138412290;
      v122 = v50;
      _os_log_impl( (void *)&_mh_execute_header,  v40,  v56,  "[VCPDatabaseWriter] Failed to set os version timestamp for %@",  buf,  0xCu);
    }

    goto LABEL_30;
  }

  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  id v57 = [&off_1001C8FE8 countByEnumeratingWithState:&v111 objects:v120 count:16];
  if (!v57) {
    goto LABEL_64;
  }
  uint64_t v59 = *(void *)v112;
  os_log_type_t type = VCPLogToOSLogType[3];
  v109 = (os_log_s *)VCPKeyValuePrioritizedFaceCheckpointReportedTimestamp;
  v107 = VCPKeyValuePersonalizationCheckpointReportedTimestamp;
  v108 = (os_log_s *)VCPKeyValuePrioritizedFaceCheckpointWithFailureReportedTimestamp;
  *(void *)&uint64_t v58 = 134217984LL;
  v106 = v58;
  while (2)
  {
    for (i = 0LL; i != v57; i = (char *)i + 1)
    {
      if (*(void *)v112 != v59) {
        objc_enumerationMutation(&off_1001C8FE8);
      }
      uint64_t v61 = objc_msgSend(*(id *)(*((void *)&v111 + 1) + 8 * (void)i), "intValue", v106);
      uint64_t v62 = VCPBGSTCheckpointTimestampKeyForTask(v61, 0LL);
      __int128 v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
      if (!v64)
      {
        os_signpost_id_t v65 = MediaAnalysisLogLevel(0LL, v63);
        if ((int)v65 >= 3)
        {
          os_log_type_t v67 = VCPLogInstance(v65, v66);
          float v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
          if (os_log_type_enabled(v68, type))
          {
            *(_DWORD *)__int128 buf = v106;
            v122 = (os_log_s *)v61;
            _os_log_impl( (void *)&_mh_execute_header,  v68,  type,  "No corresponding checkpoint key found for taskID %lu",  buf,  0xCu);
          }
        }
      }

      id v69 = -[VCPDatabaseWriter _removeKey:](self, "_removeKey:", v64);
      id v10 = v69;
      if ((_DWORD)v69)
      {
        __int128 v86 = MediaAnalysisLogLevel(v69, v70);
        if ((int)v86 >= 3)
        {
          __int128 v88 = VCPLogInstance(v86, v87);
          id v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
          if (os_log_type_enabled(v73, type))
          {
            *(_DWORD *)__int128 buf = 138412290;
            v122 = v64;
            _os_log_impl( (void *)&_mh_execute_header,  v73,  type,  "[VCPDatabaseWriter] Failed to remove checkpoint timestamp for %@",  buf,  0xCu);
          }

          goto LABEL_84;
        }

          goto LABEL_31;
        }
      }

      else
      {
        BOOL v20 = MediaAnalysisLogLevel(0LL, v19);
        if ((int)v20 >= 4)
        {
          uint64_t v30 = VCPLogInstance(v20, v29);
          uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
          uint64_t v32 = VCPLogToOSLogType[4];
          if (os_log_type_enabled(v31, v32))
          {
            __int16 v33 = [(id)objc_opt_class(self) name];
            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
            *(_DWORD *)__int128 buf = 138412290;
            os_signpost_id_t v49 = v34;
            _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "[%@] Fetch yielded no assets; skipping processing",
              buf,
              0xCu);
          }
        }
      }

      os_log_type_t v39 = VCPSignPostLog(v20);
      uint64_t v40 = (id *)objc_claimAutoreleasedReturnValue(v39);
      a3 = v40;
      if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled((os_log_t)v40))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  (os_log_t)a3,  OS_SIGNPOST_INTERVAL_END,  v7,  "VCPProcessPhotoAssets",  (const char *)&unk_100199097,  buf,  2u);
      }

      id v22 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( -[VCPMADPhotosFetchProcessingTask completionHandler]( self,  "completionHandler"));
      v22[2](v22, 0LL, 0LL);
      LOBYTE(a3) = 1;
      goto LABEL_29;
    }

    if (!a3)
    {
LABEL_31:

      goto LABEL_32;
    }

    uint64_t v54 = NSLocalizedDescriptionKey;
    id v25 = [(id)objc_opt_class(self) name];
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v25);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(&self->super._publishError + 1) path]);
    id v22 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[%@] Failed to open Media Analysis for Photo Library (%@)",  v16,  v18));
    __int128 v55 = v22;
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v55,  &v54,  1LL));
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -23LL,  v26));
    uint64_t v28 = *a3;
    *a3 = v27;

    goto LABEL_21;
  }

  if (a3)
  {
    __int128 v56 = NSLocalizedDescriptionKey;
    id v21 = [(id)objc_opt_class(self) name];
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v21);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(&self->super._publishError + 1) path]);
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[%@] Failed to open Photo Library (%@)",  v14,  v16));
    id v57 = v18;
    id v22 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v57,  &v56,  1LL));
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -23LL,  v22));
    uint64_t v24 = *a3;
    *a3 = v23;

LABEL_28:
    LOBYTE(a3) = 0;
LABEL_29:

    goto LABEL_30;
  }

LABEL_83:
        }

LABEL_84:
        goto LABEL_85;
      }

      if (v61 == 3)
      {
        uint64_t v80 = -[VCPDatabaseWriter _removeKey:](self, "_removeKey:", v109);
        id v10 = v80;
        if ((_DWORD)v80)
        {
          int8x16_t v96 = MediaAnalysisLogLevel(v80, v81);
          v98 = VCPLogInstance(v96, v97);
          id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
          if (!os_log_type_enabled(v92, type)) {
            goto LABEL_83;
          }
          *(_DWORD *)__int128 buf = 138412290;
          v122 = v109;
          uint64_t v93 = "[VCPDatabaseWriter] Failed to remove complete timestamp for %@";
        }

        else
        {
          v82 = -[VCPDatabaseWriter _removeKey:](self, "_removeKey:", v108);
          id v10 = v82;
          if ((_DWORD)v82)
          {
            uint64_t v99 = MediaAnalysisLogLevel(v82, v83);
            v101 = VCPLogInstance(v99, v100);
            id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
            if (!os_log_type_enabled(v92, type)) {
              goto LABEL_83;
            }
            *(_DWORD *)__int128 buf = 138412290;
            v122 = v108;
            uint64_t v93 = "[VCPDatabaseWriter] Failed to remove complete_with_failure timestamp for %@";
          }

          else
          {
            uint64_t v84 = -[VCPDatabaseWriter _removeKey:](self, "_removeKey:", v107);
            id v10 = v84;
            if (!(_DWORD)v84) {
              goto LABEL_62;
            }
            v102 = MediaAnalysisLogLevel(v84, v85);
            v104 = VCPLogInstance(v102, v103);
            id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
            if (!os_log_type_enabled(v92, type)) {
              goto LABEL_83;
            }
            *(_DWORD *)__int128 buf = 138412290;
            v122 = v108;
            uint64_t v93 = "[VCPDatabaseWriter] Failed to remove personalization checkpoint timestamp for %@";
          }
        }

        v94 = v92;
        v95 = type;
LABEL_82:
        _os_log_impl((void *)&_mh_execute_header, v94, v95, v93, buf, 0xCu);
        goto LABEL_83;
      }
      }
    }

    else
    {
      -[VCPTimeMeasurement stop](typea, "stop");
      v95 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
      -[VCPTimeMeasurement elapsedTimeSeconds](typea, "elapsedTimeSeconds");
      objc_msgSend( v95,  "accumulateDoubleValue:forField:andEvent:",  @"PersonBuildingElapsedTimeInSeconds",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");

      [v31 accumulateInt64Value:1 forField:@"NumberOfPersonBuildingEvents" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
      if (([*(id *)(a1 + 40) isCancelled] & 1) == 0)
      {
        uint64_t v93 = objc_alloc_init(&OBJC_CLASS___VCPTimeMeasurement);
        -[os_log_s start](v93, "start");
        int8x16_t v96 = VCPPromotePersons(*(void *)(*(void *)(a1 + 40) + 152LL), &stru_1001BCCC8, v28);
        __int16 v33 = v96;
        if ((_DWORD)v96)
        {
          v98 = MediaAnalysisLogLevel(v96, v97);
          if ((int)v98 >= 3)
          {
            v100 = VCPLogInstance(v98, v99);
            v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
            v102 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v101, v102))
            {
              *(_DWORD *)__int128 buf = 138412546;
              v113 = @"[PublishDetectionAndProcessPerson]";
              v114 = 1024;
              LODWORD(v115) = 0;
              _os_log_impl((void *)&_mh_execute_header, v101, v102, "%@ Failed to promote person (%d)", buf, 0x12u);
            }
          }
        }

        else
        {
          -[os_log_s stop](v93, "stop");
          v103 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
          -[os_log_s elapsedTimeSeconds](v93, "elapsedTimeSeconds");
          objc_msgSend( v103,  "accumulateDoubleValue:forField:andEvent:",  @"PersonPromotingElapsedTimeInSeconds",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");

          [v31 accumulateInt64Value:1 forField:@"NumberOfPersonPromotingEvents" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
        }

        goto LABEL_84;
      }

      __int16 v33 = -128;
    }

    id v73 = typea;
    goto LABEL_86;
  }

  uint64_t v34 = MediaAnalysisLogLevel(v29, v30);
  if ((int)v34 >= 3)
  {
    id v36 = VCPLogInstance(v34, v35);
    id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
    uint64_t v38 = VCPLogToOSLogType[3];
    if (!os_log_type_enabled(v37, v38))
    {
LABEL_26:

      goto LABEL_44;
    }

    os_log_type_t v39 = *(_DWORD *)(*(void *)(a1 + 40) + 120LL);
    *(_DWORD *)__int128 buf = 138412546;
    v113 = @"[PublishDetectionAndProcessPerson]";
    v114 = 1024;
    LODWORD(v115) = v39;
    uint64_t v40 = "%@ Failed to publish detection results (%d)";
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v37, v38, v40, buf, 0x12u);
    goto LABEL_26;
  }
      }

      goto LABEL_85;
    }

    v125 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( -[MADPhotosOnDemandStaticStickerScoreTask completionHandler]( self,  "completionHandler"));
    v125[2](v125, 0LL, 0LL);

    MADPLLogOnDemandStaticStickerScoring(v129, v6);
    v124 = 1;
  }

  return v124;
}

LABEL_62:
    }

    id v57 = [&off_1001C8FE8 countByEnumeratingWithState:&v111 objects:v120 count:16];
    if (v57) {
      continue;
    }
    break;
  }
}

  uint64_t v62 = -[VCPDatabaseWriter commit](self->_analysisDatabase, "commit");
  if ((_DWORD)v62 == -108 || (_DWORD)v62 == -36)
  {
    __int128 v55 = v62;
  }

  else
  {
    __int128 v55 = v62;
    if ((_DWORD)v62 != -23) {
      __int128 v55 = (int)p_superclass;
    }
  }

  if ((_DWORD)v62 != -108 && (_DWORD)v62 != -36 && (_DWORD)v62 != -23)
  {
    uint64_t v63 = VCPSignPostLog(v62);
    __int128 v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
    os_signpost_id_t v65 = v64;
    if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v64))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v65,  OS_SIGNPOST_INTERVAL_END,  spid,  "VCPMADOCRAssetEntry_Publish",  (const char *)&unk_100199097,  buf,  2u);
    }

    __int128 v55 = 0;
  }

        uint64_t v30 = 13;
LABEL_84:

        goto LABEL_85;
      }
    }

      v195 = 0LL;
      goto LABEL_121;
    }

    if ([v9 detectionType] == 1)
    {
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v47 faceprintData]);
      __int128 v51 = (void *)objc_claimAutoreleasedReturnValue( +[VCPFaceIDModel faceObservationFromFaceprintData:]( &OBJC_CLASS___VCPFaceIDModel,  "faceObservationFromFaceprintData:",  v50));

      if (!v51)
      {
        uint64_t v93 = MediaAnalysisLogLevel(v52, v53);
        if ((int)v93 >= 4)
        {
          v95 = VCPLogInstance(v93, v94);
          uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
          if (os_log_type_enabled(v60, v188))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v196;
            uint64_t v61 = v60;
            uint64_t v62 = v188;
            uint64_t v63 = "%@ Failed to create VNFaceObservation; ignoring";
            goto LABEL_60;
          }

          goto LABEL_61;
        }

        goto LABEL_62;
      }

      [v9 quality];
      uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:"));
      [v51 setValue:v54 forKey:@"faceCaptureQuality"];

      [v9 duration];
      if (v55 <= 0.0) {
        __int128 v56 = objc_msgSend(*(id *)(a1 + 32), "vcp_isSyndicationLibrary");
      }
      else {
        __int128 v56 = 1;
      }
      v202 = 0LL;
      int8x16_t v96 = [v193 addWithObservation:v51 context:v198 priority:v56 at:0 output:&v203 error:&v202];
      v195 = v202;

      if ((v96 & 1) == 0) {
        goto LABEL_80;
      }
    }

    else
    {
      if ([v9 detectionType] != 3)
      {
        __int128 v64 = [v9 detectionType];
        if ((_DWORD)v64 != 4)
        {
          v195 = 0LL;
LABEL_80:
          v121 = MediaAnalysisLogLevel(v64, v65);
          if ((int)v121 >= 3)
          {
            v123 = VCPLogInstance(v121, v122);
            uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v123);
            if (os_log_type_enabled(v60, v187))
            {
              *(_DWORD *)__int128 buf = 138412546;
              *(void *)&uint8_t buf[4] = v196;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v195;
              v124 = v60;
              v125 = v187;
              v126 = "%@ Failed to add face - %@; ignoring";
              v127 = 22;
              goto LABEL_86;
            }

            goto LABEL_120;
          }

          goto LABEL_121;
        }
      }

      uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v47 faceprintData]);
      os_log_type_t v67 = (void *)objc_claimAutoreleasedReturnValue( +[VCPFaceIDModel animalObservationFromAnimalprintData:]( &OBJC_CLASS___VCPFaceIDModel,  "animalObservationFromAnimalprintData:",  v66));

      if (!v67)
      {
        uint64_t v97 = MediaAnalysisLogLevel(v68, v69);
        if ((int)v97 >= 4)
        {
          uint64_t v99 = VCPLogInstance(v97, v98);
          uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
          if (os_log_type_enabled(v60, v188))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = v196;
            uint64_t v61 = v60;
            uint64_t v62 = v188;
            uint64_t v63 = "%@ Failed to create VNAnimalObservation; ignoring";
LABEL_60:
            _os_log_impl((void *)&_mh_execute_header, v61, v62, v63, buf, 0xCu);
          }

LABEL_64:
  id v10 = -[VCPDatabaseWriter commitTransaction](self, "commitTransaction");
  if (!v10) {
    return 0;
  }
  return v10;
}

            uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue([v42 placeholderForCreatedFace]);
            if (v44 == 1)
            {
              if (!v51 || v110)
              {
LABEL_69:
                uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localIdentifier](v74, "localIdentifier"));
                [v112 addObject:v78];
              }
            }

            else
            {
              uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(-[PHAsset photoLibrary](self->_asset, "photoLibrary"));
              uint64_t v77 = objc_msgSend(v76, "mad_useVUGallery");

              if ((v77 & 1) != 0) {
                goto LABEL_69;
              }
            }

            v137 = v74;
            unsigned int v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v137,  1LL));
            [v118 addFaces:v79];

            v82 = MediaAnalysisLogLevel(v80, v81);
            if ((int)v82 >= 7)
            {
              uint64_t v84 = VCPLogInstance(v82, v83);
              id v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
              if (os_log_type_enabled(v85, type))
              {
                __int128 v86 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localIdentifier](v74, "localIdentifier"));
                *(_DWORD *)__int128 buf = 138412802;
                v132 = v116;
                v133 = 2112;
                v134 = v55;
                v135 = 2112;
                v136 = v86;
                _os_log_impl((void *)&_mh_execute_header, v85, type, "%@ Adding %@ %@", buf, 0x20u);
              }
            }

                    uint64_t v71 = v106;
LABEL_65:
                  }

      v104 = [v86 count];
      if (v104)
      {
        [*(id *)(a1 + 40) _deleteUnverifiedPersonsWithZeroFaces:v86];
        v104 = [v86 removeAllObjects];
      }

      if (v87)
      {
        v106 = MediaAnalysisLogLevel(v104, v105);
        if ((int)v106 >= 5)
        {
          v108 = VCPLogInstance(v106, v107);
          v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
          v110 = VCPLogToOSLogType[5];
          if (os_log_type_enabled(v109, v110))
          {
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = @"[GallerySync_UnverifiedPerson]";
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v87;
            _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "%@ Deleted %lu 0-face unverified persons",  buf,  0x16u);
          }
        }

        v111 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
        [v111 addBreadcrumb:@"%@ Deleted %lu 0-face unverified persons", @"[GallerySync_UnverifiedPerson]", v87];
      }

      v112 = VCPSignPostLog(v104);
      v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
      v114 = v113;
      if (v816 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v113))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v114,  OS_SIGNPOST_INTERVAL_END,  v816,  "GallerySync_removeZeroFaceUnverifiedPersons",  (const char *)&unk_100199097,  buf,  2u);
      }

      if (v813)
      {
        v115 = mach_absolute_time();
        VCPPerformance_LogMeasurement("GallerySync_removeZeroFaceUnverifiedPersons", v115 - v813);
      }

      v116 = *(void *)(a1 + 56);
      if (v116)
      {
        v117 = (*(uint64_t (**)(void))(v116 + 16))();
        if ((_DWORD)v117)
        {
          v119 = MediaAnalysisLogLevel(v117, v118);
          if ((int)v119 >= 6)
          {
            v121 = VCPLogInstance(v119, v120);
            v122 = (os_log_s *)objc_claimAutoreleasedReturnValue(v121);
            v123 = VCPLogToOSLogType[6];
            if (os_log_type_enabled(v122, v123))
            {
              *(_DWORD *)__int128 buf = 138412290;
              *(void *)&uint8_t buf[4] = @"[GallerySync_UnverifiedPerson]";
              _os_log_impl((void *)&_mh_execute_header, v122, v123, "%@ Cancelled", buf, 0xCu);
            }
          }

void sub_10002F24C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002F50C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10002F540(sqlite3_stmt *a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if (v5) {
    uint64_t v7 = sqlite3_bind_text(a1, a2, (const char *)[v5 UTF8String], -1, 0);
  }
  else {
    uint64_t v7 = sqlite3_bind_null(a1, a2);
  }
  uint64_t v8 = v7;

  return v8;
}

void sub_10002F5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002F7D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002F98C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002FF2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(v2 + 24))
  {
    if (*(_BYTE *)(a1 + 64))
    {
      if (!*(_BYTE *)(v2 + 32))
      {
        id v51 = [(id)v2 beginTransaction];
        *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = (_DWORD)v51;
        if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
        {
          uint64_t v53 = MediaAnalysisLogLevel(v51, v52);
          if ((int)v53 >= 3)
          {
            uint64_t v55 = VCPLogInstance(v53, v54);
            __int128 v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
            os_log_type_t v57 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v56, v57))
            {
              int v58 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
              *(_DWORD *)__int128 buf = 67109120;
              LODWORD(v7_Block_object_dispose(va, 8) = v58;
              _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "[VCPDatabaseWriter] Database already opened, failed to begin write transaction: %d",  buf,  8u);
            }
          }
        }
      }
    }

    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
    {
      uint64_t v27 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
      *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v27;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
      {
        uint64_t v29 = MediaAnalysisLogLevel(v27, v28);
        if ((int)v29 >= 3)
        {
          uint64_t v31 = VCPLogInstance(v29, v30);
          uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
          os_log_type_t v33 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v32, v33))
          {
            int v34 = *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
            *(_DWORD *)__int128 buf = 67109120;
            LODWORD(v7_Block_object_dispose(va, 8) = v34;
            _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "[VCPDatabaseWriter] Database already opened, failed to execute block: %d",  buf,  8u);
          }
        }
      }
    }
  }

  uint64_t v3 = a1 + 56;
  uint64_t v4 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v6 = *(_DWORD *)(v4 + 24);
  uint64_t v5 = v4 + 24;
  uint64_t v7 = *(void **)(a1 + 32);
  if (v6)
  {
    uint64_t v7 = *(void **)(a1 + 32);
  }

  if (!v7[3] || *(_DWORD *)(*(void *)(*(void *)v3 + 8LL) + 24LL))
  {
    objc_msgSend(v7, "closeDatabase", v5);
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) openDatabase];
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
    {
      if (*(_BYTE *)(a1 + 64))
      {
        id v35 = [*(id *)(a1 + 32) beginTransaction];
        *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = (_DWORD)v35;
        if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
        {
          uint64_t v37 = MediaAnalysisLogLevel(v35, v36);
          if ((int)v37 >= 3)
          {
            uint64_t v39 = VCPLogInstance(v37, v38);
            uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
            os_log_type_t v41 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v40, v41))
            {
              int v42 = *(_DWORD *)(*(void *)(*(void *)v3 + 8LL) + 24LL);
              *(_DWORD *)__int128 buf = 67109120;
              LODWORD(v7_Block_object_dispose(va, 8) = v42;
              _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "[VCPDatabaseWriter] Failed to begin write transaction: %d",  buf,  8u);
            }
          }
        }
      }
    }

    if (!*(_DWORD *)(*(void *)(*(void *)v3 + 8LL) + 24LL))
    {
      uint64_t v43 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
      *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v43;
      if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
      {
        uint64_t v45 = MediaAnalysisLogLevel(v43, v44);
        if ((int)v45 >= 3)
        {
          uint64_t v47 = VCPLogInstance(v45, v46);
          __int128 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
          os_log_type_t v49 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v48, v49))
          {
            int v50 = *(_DWORD *)(*(void *)(*(void *)v3 + 8LL) + 24LL);
            *(_DWORD *)__int128 buf = 67109120;
            LODWORD(v7_Block_object_dispose(va, 8) = v50;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "[VCPDatabaseWriter] Failed to execute block: %d",  buf,  8u);
          }
        }
      }
    }

    uint64_t v8 = *(void *)(*(void *)v3 + 8LL);
    int v10 = *(_DWORD *)(v8 + 24);
    uint64_t v9 = v8 + 24;
    if (v10)
    {
      id v11 = [*(id *)(a1 + 32) shouldPropagateError:v9 finalAttempt:1];
      if ((v11 & 1) == 0)
      {
        if (*(_DWORD *)(*(void *)(*(void *)v3 + 8LL) + 24LL))
        {
          uint64_t v13 = MediaAnalysisLogLevel(v11, v12);
          if ((int)v13 >= 3)
          {
            uint64_t v15 = VCPLogInstance(v13, v14);
            uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
            os_log_type_t v17 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v16, v17))
            {
              uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
              *(_DWORD *)__int128 buf = 138412290;
              uint64_t v78 = v18;
              _os_log_impl((void *)&_mh_execute_header, v16, v17, "%@", buf, 0xCu);
            }
          }

          uint64_t v19 = VCPLogInstance(v13, v14);
          BOOL v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_FAULT)) {
            sub_100046BEC(a1, a1 + 56, v20);
          }

          id v21 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
          id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  5 * ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "sizeBytes", @"DatabaseSize")
                           / 0x500000)));
          v76[0] = v22;
          v76[1] = &__kCFBooleanTrue;
          v75[1] = @"IsDatabaseRebuilt";
          v75[2] = @"PhotoLibraryScale";
          v76[2] = @"U";
          v75[3] = @"RebuiltErrorCode";
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(*(void *)(*(void *)v3 + 8LL) + 24LL)));
          v76[3] = v23;
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v76,  v75,  4LL));
          [v21 sendEvent:@"com.apple.mediaanalysisd.DatabaseInfomation" withAnalytics:v24];

          id v25 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDataCollection sharedDataCollection]( &OBJC_CLASS___VCPDataCollection,  "sharedDataCollection"));
          [v25 reportDatabaseCorruption];

          [*(id *)(a1 + 32) closeDatabase];
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
          [v26 removeItemAtPath:*(void *)(*(void *)(a1 + 32) + 8) error:0];

          *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [*(id *)(a1 + 32) openDatabase];
          if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) && *(void *)(a1 + 48))
          {
            if (*(_BYTE *)(a1 + 64))
            {
              id v59 = [*(id *)(a1 + 32) beginTransaction];
              *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = (_DWORD)v59;
              if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
              {
                uint64_t v61 = MediaAnalysisLogLevel(v59, v60);
                if ((int)v61 >= 3)
                {
                  uint64_t v63 = VCPLogInstance(v61, v62);
                  __int128 v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
                  os_log_type_t v65 = VCPLogToOSLogType[3];
                  if (os_log_type_enabled(v64, v65))
                  {
                    int v66 = *(_DWORD *)(*(void *)(*(void *)v3 + 8LL) + 24LL);
                    *(_DWORD *)__int128 buf = 67109120;
                    LODWORD(v7_Block_object_dispose(va, 8) = v66;
                    _os_log_impl( (void *)&_mh_execute_header,  v64,  v65,  "[VCPDatabaseWriter] Failed to begin write transaction for fallback block: %d",  buf,  8u);
                  }
                }
              }
            }

            if (!*(_DWORD *)(*(void *)(*(void *)v3 + 8LL) + 24LL))
            {
              uint64_t v67 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
              *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v67;
              if (*(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
              {
                uint64_t v69 = MediaAnalysisLogLevel(v67, v68);
                if ((int)v69 >= 3)
                {
                  uint64_t v71 = VCPLogInstance(v69, v70);
                  uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
                  os_log_type_t v73 = VCPLogToOSLogType[3];
                  if (os_log_type_enabled(v72, v73))
                  {
                    int v74 = *(_DWORD *)(*(void *)(*(void *)v3 + 8LL) + 24LL);
                    *(_DWORD *)__int128 buf = 67109120;
                    LODWORD(v7_Block_object_dispose(va, 8) = v74;
                    _os_log_impl( (void *)&_mh_execute_header,  v72,  v73,  "[VCPDatabaseWriter] Failed to execute fallback block: %d",  buf,  8u);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

void sub_10003065C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100030700(uint64_t a1)
{
  uint64_t v1 = *(_BYTE **)(a1 + 32);
  if (v1[32]) {
    [v1 commitTransaction];
  }
  return 0LL;
}

id sub_10003077C(uint64_t a1)
{
  return [*(id *)(a1 + 32) closeDatabase];
}

void sub_1000307E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100030870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100030918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100030BB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100030C00(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_100030C10(uint64_t a1)
{
}

uint64_t sub_100030C18(void *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(a1[4] + 24LL),  "REPLACE INTO ChangeTokens (tokenID, tokenType, tokenData, date, version) VALUES ((?),(?),(?),(?),(?));",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!(_DWORD)v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[7]);
      if (!(_DWORD)v2)
      {
        uint64_t v3 = ppStmt;
        id v4 = *(id *)(*(void *)(a1[5] + 8LL) + 40LL);
        uint64_t v5 = v4;
        if (v4)
        {
          id v6 = v4;
          uint64_t v7 = sqlite3_bind_blob(v3, 3, [v6 bytes], (int)objc_msgSend(v6, "length"), 0);
        }

        else
        {
          uint64_t v7 = sqlite3_bind_null(v3, 3);
        }

        uint64_t v2 = v7;

        if (!(_DWORD)v2)
        {
          uint64_t v8 = ppStmt;
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          uint64_t v2 = sub_100030E6C(v8, 4, v9);

          if (!(_DWORD)v2)
          {
            int v10 = ppStmt;
            int v11 = VCPVersionForTask(a1[6]);
            uint64_t v2 = sqlite3_bind_int(v10, 5, v11);
            if (!(_DWORD)v2)
            {
              uint64_t v12 = sqlite3_expanded_sql(ppStmt);
              if (v12)
              {
                uint64_t v13 = MediaAnalysisEnableDatabaseLog();
                if ((_DWORD)v13)
                {
                  uint64_t v15 = VCPLogInstance(v13, v14);
                  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
                  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
                  {
                    *(_DWORD *)__int128 buf = 136315650;
                    id v21 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                    __int16 v22 = 1024;
                    int v23 = 968;
                    __int16 v24 = 2080;
                    id v25 = v12;
                    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
                  }
                }

                sqlite3_free(v12);
              }

              unsigned int v17 = sqlite3_step(ppStmt);
              if (v17 == 101) {
                uint64_t v2 = 0LL;
              }
              else {
                uint64_t v2 = v17;
              }
            }
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100030E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100030E6C(sqlite3_stmt *a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = v5;
  if (v5)
  {
    [v5 timeIntervalSinceReferenceDate];
    uint64_t v8 = sqlite3_bind_double(a1, a2, v7);
  }

  else
  {
    uint64_t v8 = sqlite3_bind_null(a1, a2);
  }

  uint64_t v9 = v8;

  return v9;
}

void sub_100030ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000310F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100031138(void *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(a1[4] + 24LL),  "UPDATE ChangeTokens SET tokenData=(?) WHERE tokenID=(?) AND tokenType=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = *(id *)(*(void *)(a1[5] + 8LL) + 40LL);
    id v5 = v4;
    if (v4)
    {
      id v6 = v4;
      uint64_t v7 = sqlite3_bind_blob(v3, 1, [v6 bytes], (int)objc_msgSend(v6, "length"), 0);
    }

    else
    {
      uint64_t v7 = sqlite3_bind_null(v3, 1);
    }

    uint64_t v2 = v7;

    if (!(_DWORD)v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!(_DWORD)v2)
      {
        uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, a1[7]);
        if (!(_DWORD)v2)
        {
          uint64_t v8 = sqlite3_expanded_sql(ppStmt);
          if (v8)
          {
            uint64_t v9 = MediaAnalysisEnableDatabaseLog();
            if ((_DWORD)v9)
            {
              uint64_t v11 = VCPLogInstance(v9, v10);
              uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
              if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315650;
                unsigned int v17 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v18 = 1024;
                int v19 = 998;
                __int16 v20 = 2080;
                id v21 = v8;
                _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
              }
            }

            sqlite3_free(v8);
          }

          unsigned int v13 = sqlite3_step(ppStmt);
          if (v13 == 101) {
            uint64_t v2 = 0LL;
          }
          else {
            uint64_t v2 = v13;
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100031310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003146C(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT date, version, tokenData FROM ChangeTokens WHERE tokenID=(?) AND tokenType=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 40));
    if (!(_DWORD)v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 48));
      if (!(_DWORD)v2)
      {
        uint64_t v3 = sqlite3_expanded_sql(ppStmt);
        if (v3)
        {
          uint64_t v4 = MediaAnalysisEnableDatabaseLog();
          if ((_DWORD)v4)
          {
            uint64_t v6 = VCPLogInstance(v4, v5);
            uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
            if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315650;
              *(void *)os_log_type_t v49 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              *(_WORD *)&v49[8] = 1024;
              v50[0] = 1018;
              LOWORD(v50[1]) = 2080;
              *(void *)((char *)&v50[1] + 2) = v3;
              _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
            }
          }

          sqlite3_free(v3);
        }

        unsigned int v8 = sqlite3_step(ppStmt);
        if (v8 != 100) {
          goto LABEL_33;
        }
        uint64_t v9 = ppStmt;
        if (sqlite3_column_type(ppStmt, 0) == 5)
        {
          uint64_t v10 = 0LL;
        }

        else
        {
          uint64_t v11 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  sqlite3_column_double(v9, 0));
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v11);
        }

        int v12 = sqlite3_column_int(ppStmt, 1);
        unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        [v13 timeIntervalSinceDate:v10];
        double v15 = v14;
        [(id)objc_opt_class(*(void *)(a1 + 32)) _ageOutIntervalForChangeTokenType:*(void *)(a1 + 48)];
        BOOL v17 = v15 > v16;

        if (v17)
        {
          uint64_t v20 = MediaAnalysisLogLevel(v18, v19);
          if ((int)v20 >= 5)
          {
            uint64_t v22 = VCPLogInstance(v20, v21);
            int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
            os_log_type_t v24 = VCPLogToOSLogType[5];
            if (os_log_type_enabled(v23, v24))
            {
              *(_WORD *)__int128 buf = 0;
              id v25 = "Age-out interval reached; discarding change token data...";
LABEL_24:
              _os_log_impl((void *)&_mh_execute_header, v23, v24, v25, buf, 2u);
              goto LABEL_31;
            }

            goto LABEL_31;
          }
        }

        else
        {
          uint64_t v26 = VCPVersionForTask(*(void *)(a1 + 40));
          if (v12 == (_DWORD)v26)
          {
            if (*(void *)(a1 + 48) == 2LL)
            {
              id v28 = sub_10003194C(ppStmt, 2);
              uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
              uint64_t v30 = -[NSData initWithBase64EncodedData:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedData:options:",  v29,  0LL);
              int v23 = 0LL;
            }

            else
            {
              uint64_t v34 = objc_opt_class(&OBJC_CLASS___PHPersistentChangeToken);
              id v35 = sub_10003194C(ppStmt, 2);
              uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v35);
              id v46 = 0LL;
              uint64_t v30 = (NSData *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  v34,  v29,  &v46));
              int v23 = (os_log_s *)v46;
            }

            **(void **)(a1 + 56) = v30;

            if (!**(void **)(a1 + 56))
            {
              uint64_t v38 = MediaAnalysisLogLevel(v36, v37);
              if ((int)v38 >= 4)
              {
                uint64_t v40 = VCPLogInstance(v38, v39);
                os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
                os_log_type_t v42 = VCPLogToOSLogType[4];
                if (os_log_type_enabled(v41, v42))
                {
                  uint64_t v43 = *(void *)(a1 + 40);
                  uint64_t v44 = *(void *)(a1 + 48);
                  *(_DWORD *)__int128 buf = 67109634;
                  *(_DWORD *)os_log_type_t v49 = v43;
                  *(_WORD *)&v49[4] = 1024;
                  *(_DWORD *)&v49[6] = v44;
                  LOWORD(v50[0]) = 2112;
                  *(void *)((char *)v50 + 2) = v23;
                  _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "TaskID:%d (%d) queryChangeToken error - %@",  buf,  0x18u);
                }
              }
            }

            goto LABEL_31;
          }

          uint64_t v31 = MediaAnalysisLogLevel(v26, v27);
          if ((int)v31 >= 5)
          {
            uint64_t v33 = VCPLogInstance(v31, v32);
            int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
            os_log_type_t v24 = VCPLogToOSLogType[5];
            if (os_log_type_enabled(v23, v24))
            {
              *(_WORD *)__int128 buf = 0;
              id v25 = "Analysis version updated; discarding change token data...";
              goto LABEL_24;
            }

void sub_100031890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000318F0(sqlite3_stmt *a1, int a2)
{
  if (sqlite3_column_type(a1, a2) == 5)
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v5 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  sqlite3_column_double(a1, a2));
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v5);
  }

  return v4;
}

id sub_10003194C(sqlite3_stmt *a1, int a2)
{
  if (sqlite3_column_type(a1, a2) == 5)
  {
    uint64_t v4 = 0LL;
  }

  else
  {
    uint64_t v5 = sqlite3_column_blob(a1, a2);
    uint64_t v6 = +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  v5,  sqlite3_column_bytes(a1, a2),  0LL);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v6);
  }

  return v4;
}

uint64_t sub_100031AF8(void *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(a1[4] + 24LL),  "DELETE FROM ChangeTokens WHERE tokenID=(?) AND tokenType=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[5]);
    if (!(_DWORD)v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!(_DWORD)v2)
      {
        uint64_t v3 = sqlite3_expanded_sql(ppStmt);
        if (v3)
        {
          uint64_t v4 = v3;
          if (MediaAnalysisEnableDatabaseLog())
          {
            uint64_t v5 = VCPLogInstance();
            uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315650;
              uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v12 = 1024;
              int v13 = 1064;
              __int16 v14 = 2080;
              double v15 = v4;
              _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
            }
          }

          sqlite3_free(v4);
        }

        unsigned int v7 = sqlite3_step(ppStmt);
        if (v7 == 101) {
          uint64_t v2 = 0LL;
        }
        else {
          uint64_t v2 = v7;
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

uint64_t sub_100031D80(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "DELETE FROM ChangeTokens WHERE tokenID=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 40));
    if (!(_DWORD)v2)
    {
      uint64_t v3 = sqlite3_expanded_sql(ppStmt);
      if (v3)
      {
        uint64_t v4 = v3;
        if (MediaAnalysisEnableDatabaseLog())
        {
          uint64_t v5 = VCPLogInstance();
          uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v12 = 1024;
            int v13 = 1080;
            __int16 v14 = 2080;
            double v15 = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
          }
        }

        sqlite3_free(v4);
      }

      unsigned int v7 = sqlite3_step(ppStmt);
      if (v7 == 101) {
        uint64_t v2 = 0LL;
      }
      else {
        uint64_t v2 = v7;
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100032014(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100032040(uint64_t a1)
{
  ppStmt = 0LL;
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v3 = *(sqlite3 **)(*(void *)(a1 + 32) + 24LL);
  if (v2) {
    uint64_t v4 = sqlite3_prepare_v2( v3,  "UPDATE Assets SET flags=flags | (?), dateAnalyzed=(?) WHERE localIdentifier=(?)",  -1,  &ppStmt,  0LL);
  }
  else {
    uint64_t v4 = sqlite3_prepare_v2( v3,  "UPDATE Assets SET flags=flags & ~(?), dateAnalyzed=(?) WHERE localIdentifier=(?)",  -1,  &ppStmt,  0LL);
  }
  uint64_t v5 = v4;
  if (!(_DWORD)v4)
  {
    uint64_t v5 = sqlite3_bind_int(ppStmt, 1, 0x40000000);
    if (!(_DWORD)v5)
    {
      uint64_t v6 = ppStmt;
      id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      unsigned int v8 = v7;
      if (v7)
      {
        [v7 timeIntervalSinceReferenceDate];
        uint64_t v10 = sqlite3_bind_double(v6, 2, v9);
      }

      else
      {
        uint64_t v10 = sqlite3_bind_null(v6, 2);
      }

      uint64_t v5 = v10;

      if (!(_DWORD)v5)
      {
        uint64_t v11 = ppStmt;
        id v12 = *(id *)(a1 + 40);
        int v13 = v12;
        uint64_t v14 = v12
        uint64_t v5 = v14;

        if (!(_DWORD)v5)
        {
          double v15 = sqlite3_expanded_sql(ppStmt);
          BOOL v17 = v15;
          if (v15)
          {
            uint64_t v18 = MediaAnalysisEnableDatabaseLog(v15, v16);
            if ((_DWORD)v18)
            {
              uint64_t v20 = VCPLogInstance(v18, v19);
              uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315650;
                uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v27 = 1024;
                int v28 = 1112;
                __int16 v29 = 2080;
                uint64_t v30 = v17;
                _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
              }
            }

            sqlite3_free(v17);
          }

          unsigned int v22 = sqlite3_step(ppStmt);
          if (v22 == 101) {
            uint64_t v5 = 0LL;
          }
          else {
            uint64_t v5 = v22;
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v5;
}

void sub_100032258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000323F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003242C(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "UPDATE Assets SET masterFingerprint=(?), adjustedFingerprint=(?) WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) master]);
    uint64_t v5 = v4;
    uint64_t v6 = v4
    uint64_t v2 = v6;

    if (!(_DWORD)v2)
    {
      id v7 = ppStmt;
      id v8 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) adjusted]);
      double v9 = v8;
      uint64_t v10 = v8
      uint64_t v2 = v10;

      if (!(_DWORD)v2)
      {
        uint64_t v11 = ppStmt;
        id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localIdentifier]);
        int v13 = v12;
        uint64_t v14 = v12
        uint64_t v2 = v14;

        if (!(_DWORD)v2)
        {
          double v15 = sqlite3_expanded_sql(ppStmt);
          BOOL v17 = v15;
          if (v15)
          {
            uint64_t v18 = MediaAnalysisEnableDatabaseLog(v15, v16);
            if ((_DWORD)v18)
            {
              uint64_t v20 = VCPLogInstance(v18, v19);
              uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315650;
                uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v27 = 1024;
                int v28 = 1131;
                __int16 v29 = 2080;
                uint64_t v30 = v17;
                _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
              }
            }

            sqlite3_free(v17);
          }

          unsigned int v22 = sqlite3_step(ppStmt);
          if (v22 == 101) {
            uint64_t v2 = 0LL;
          }
          else {
            uint64_t v2 = v22;
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100032680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100032818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100032850(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "UPDATE Assets SET localIdentifier=(?), flags=flags & ~(?) WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  uint64_t v3 = ppStmt;
  if ((_DWORD)v2) {
    goto LABEL_12;
  }
  id v4 = *(id *)(a1 + 40);
  uint64_t v5 = v4;
  if (v4) {
    uint64_t v6 = sqlite3_bind_text(v3, 1, (const char *)[v4 UTF8String], -1, 0);
  }
  else {
    uint64_t v6 = sqlite3_bind_null(v3, 1);
  }
  uint64_t v2 = v6;

  if ((_DWORD)v2
    || (uint64_t v2 = sqlite3_bind_int(ppStmt, 2, 0x40000000), (_DWORD)v2)
    || ((id v7 = ppStmt, v8 = *(id *)(a1 + 48), (v9 = v8) == 0LL)
      ? (uint64_t v10 = sqlite3_bind_null(v7, 3))
      : (uint64_t v10 = sqlite3_bind_text(v7, 3, (const char *)[v8 UTF8String], -1, 0)),
        uint64_t v2 = v10,
        v9,
        (_DWORD)v2))
  {
    uint64_t v3 = ppStmt;
LABEL_12:
    uint64_t result = sqlite3_finalize(v3);
LABEL_13:
    uint64_t v13 = MediaAnalysisLogLevel(result, v12);
    if ((int)v13 >= 3)
    {
      uint64_t v15 = VCPLogInstance(v13, v14);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      os_log_type_t v17 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = *(const char **)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412290;
        int v28 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to update local identifier for asset %@", buf, 0xCu);
      }
    }

    return v2;
  }

  uint64_t v19 = sqlite3_expanded_sql(ppStmt);
  uint64_t v21 = v19;
  if (v19)
  {
    uint64_t v22 = MediaAnalysisEnableDatabaseLog(v19, v20);
    if ((_DWORD)v22)
    {
      uint64_t v24 = VCPLogInstance(v22, v23);
      id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        int v28 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v29 = 1024;
        int v30 = 1150;
        __int16 v31 = 2080;
        uint64_t v32 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v21);
  }

  uint64_t v2 = sqlite3_step(ppStmt);
  sqlite3_finalize(ppStmt);
  uint64_t result = 0LL;
  if ((_DWORD)v2 && (_DWORD)v2 != 101) {
    goto LABEL_13;
  }
  return result;
}

void sub_100032ACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100032C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100032C5C(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "UPDATE Assets SET dateModified=(?) WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  uint64_t v3 = ppStmt;
  if ((_DWORD)v2) {
    goto LABEL_11;
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "vcp_modificationDate"));
  uint64_t v5 = v4;
  if (v4)
  {
    [v4 timeIntervalSinceReferenceDate];
    uint64_t v7 = sqlite3_bind_double(v3, 1, v6);
  }

  else
  {
    uint64_t v7 = sqlite3_bind_null(v3, 1);
  }

  uint64_t v2 = v7;

  if ((_DWORD)v2
    || ((id v8 = ppStmt,
         id v9 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]),
         (uint64_t v10 = v9) == 0LL)
      ? (uint64_t v11 = sqlite3_bind_null(v8, 2))
      : (uint64_t v11 = sqlite3_bind_text(v8, 2, (const char *)[v9 UTF8String], -1, 0)),
        uint64_t v2 = v11,
        v10,
        v10,
        (_DWORD)v2))
  {
    uint64_t v3 = ppStmt;
LABEL_11:
    uint64_t result = sqlite3_finalize(v3);
LABEL_12:
    uint64_t v14 = MediaAnalysisLogLevel(result, v13);
    if ((int)v14 >= 3)
    {
      uint64_t v16 = VCPLogInstance(v14, v15);
      os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      os_log_type_t v18 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = (char *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
        *(_DWORD *)__int128 buf = 138412290;
        __int16 v29 = v19;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to update dateModified for asset %@", buf, 0xCu);
      }
    }

    return v2;
  }

  uint64_t v20 = sqlite3_expanded_sql(ppStmt);
  uint64_t v22 = v20;
  if (v20)
  {
    uint64_t v23 = MediaAnalysisEnableDatabaseLog(v20, v21);
    if ((_DWORD)v23)
    {
      uint64_t v25 = VCPLogInstance(v23, v24);
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        __int16 v29 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v30 = 1024;
        int v31 = 1169;
        __int16 v32 = 2080;
        uint64_t v33 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v22);
  }

  uint64_t v2 = sqlite3_step(ppStmt);
  sqlite3_finalize(ppStmt);
  uint64_t result = 0LL;
  if ((_DWORD)v2 && (_DWORD)v2 != 101) {
    goto LABEL_12;
  }
  return result;
}

void sub_100032ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100033084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000330B0(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT count(*) FROM Assets WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    uint64_t v6 = v4
    uint64_t v2 = v6;

    if (!(_DWORD)v2)
    {
      uint64_t v7 = sqlite3_expanded_sql(ppStmt);
      id v9 = v7;
      if (v7)
      {
        uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
        if ((_DWORD)v10)
        {
          uint64_t v12 = VCPLogInstance(v10, v11);
          uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            os_log_type_t v17 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v18 = 1024;
            int v19 = 1187;
            __int16 v20 = 2080;
            uint64_t v21 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
          }
        }

        sqlite3_free(v9);
      }

      uint64_t v2 = sqlite3_step(ppStmt);
      if ((_DWORD)v2 == 100)
      {
        uint64_t v2 = 0LL;
        **(_BYTE **)(a1 + 4_Block_object_dispose(va, 8) = sqlite3_column_int(ppStmt, 0) > 0;
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003325C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100033274(uint64_t a1)
{
  **(_BYTE **)(a1 + 32) = 0;
  return 0LL;
}

void sub_10003343C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003347C(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT version FROM Assets WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    uint64_t v6 = v4
    uint64_t v2 = v6;

    if (!(_DWORD)v2)
    {
      uint64_t v7 = sqlite3_expanded_sql(ppStmt);
      id v9 = v7;
      if (v7)
      {
        uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
        if ((_DWORD)v10)
        {
          uint64_t v12 = VCPLogInstance(v10, v11);
          uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            uint64_t v22 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v23 = 1024;
            int v24 = 1211;
            __int16 v25 = 2080;
            uint64_t v26 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
          }
        }

        sqlite3_free(v9);
      }

      unsigned int v14 = sqlite3_step(ppStmt);
      if (v14 == 100)
      {
        uint64_t v15 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", sqlite3_column_int(ppStmt, 0));
        uint64_t v16 = objc_claimAutoreleasedReturnValue(v15);
        uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8LL);
        __int16 v18 = *(void **)(v17 + 40);
        *(void *)(v17 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v16;

        unsigned int v14 = sqlite3_step(ppStmt);
      }

      if (v14 == 101) {
        uint64_t v2 = 0LL;
      }
      else {
        uint64_t v2 = v14;
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003364C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int sub_100033664(id a1)
{
  return 0;
}

LABEL_28:
      int v24 = 1LL;
      goto LABEL_33;
    }

    uint64_t v44 = MediaAnalysisLogLevel(v31, v32);
    id v46 = VCPLogInstance(v44, v45);
    __int16 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    uint64_t v47 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v18, v47))
    {
      LOWORD(v53) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v47,  "    Existing analysis degraded; discarding",
        (uint8_t *)&v53,
        2u);
    }

    goto LABEL_29;
  }

  uint64_t v21 = MediaAnalysisLogLevel(0LL, v4);
  if ((int)v21 >= 3)
  {
    __int16 v23 = VCPLogInstance(v21, v22);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v23);
    int v24 = VCPLogToOSLogType[3];
    if (os_log_type_enabled((os_log_t)v6, v24))
    {
      LOWORD(v43) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v6,  v24,  "  Unknown backup date key; skipping backup",
        (uint8_t *)&v43,
        2u);
    }

    unsigned int v14 = 0;
    goto LABEL_30;
  }

  unsigned int v14 = 0;
LABEL_31:

  return v14;
}

      -[MADUnifiedProcessingTask purgeCachedModels](self, "purgeCachedModels");

      objc_autoreleasePoolPop(v24);
      uint64_t v12 = 0;
    }

    else
    {
LABEL_19:
      -[MADUnifiedProcessingTask purgeCachedModels](self, "purgeCachedModels");
      uint64_t v34 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( -[MADUnifiedProcessingTask completionHandler]( self,  "completionHandler"));
      v34[2](v34, 0LL, 0LL);

      uint64_t v12 = 1;
    }
  }

  return v12;
}

  if ([v6 count])
  {
    uint64_t v3 = -[VCPFaceProcessingTask processAssets:](self, "processAssets:", v6);
    if (!v3)
    {
      [v6 removeAllObjects];
      goto LABEL_31;
    }
  }

  else
  {
LABEL_31:
    uint64_t v3 = 0;
  }

    unsigned int v14 = 0LL;
    goto LABEL_29;
  }

  id v9 = MediaAnalysisLogLevel(v7, v8);
  uint64_t v11 = VCPLogInstance(v9, v10);
  uint64_t v12 = (id)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = VCPLogToOSLogType[4];
  if (os_log_type_enabled((os_log_t)v12, v13))
  {
    *(_DWORD *)__int128 buf = 138412546;
    __int128 v48 = a3;
    os_log_type_t v49 = 2112;
    int v50 = error;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v12,  v13,  "[UserSafety] Failed to query %@ entitlement (%@)",  buf,  0x16u);
  }

      uint64_t v43 = 0;
LABEL_38:

      goto LABEL_39;
    }

    uint64_t v52 = MediaAnalysisLogLevel(v18, v19);
    if ((int)v52 >= 4)
    {
      uint64_t v54 = VCPLogInstance(v52, v53);
      int v24 = (id)objc_claimAutoreleasedReturnValue(v54);
      uint64_t v55 = VCPLogToOSLogType[4];
      if (!os_log_type_enabled((os_log_t)v24, v55)) {
        goto LABEL_28;
      }
      *(_DWORD *)__int128 buf = 138412802;
      *(void *)uint64_t v68 = v7;
      *(_WORD *)&v68[8] = 1024;
      *(_DWORD *)&v68[10] = (_DWORD)v13;
      *(_WORD *)&v68[14] = 1024;
      *(_DWORD *)&v68[16] = 0;
      __int128 v48 = "[MADProgressManagers] totalCount for %@ equal to zero, skipping reporting (%d/%d)";
      os_log_type_t v49 = (os_log_s *)v24;
      int v50 = v55;
      id v51 = 24;
      goto LABEL_22;
    }
  }

  else
  {
    uint64_t v44 = MediaAnalysisLogLevel(0LL, v10);
    if ((int)v44 >= 4)
    {
      id v46 = VCPLogInstance(v44, v45);
      int v24 = (id)objc_claimAutoreleasedReturnValue(v46);
      uint64_t v47 = VCPLogToOSLogType[4];
      if (!os_log_type_enabled((os_log_t)v24, v47)) {
        goto LABEL_28;
      }
      *(_DWORD *)__int128 buf = 67109378;
      *(_DWORD *)uint64_t v68 = a3;
      *(_WORD *)&v68[4] = 2112;
      *(void *)&v68[6] = v7;
      __int128 v48 = "[MADProgressManager] unable to determine BGST identifier for task %d (%@)";
      os_log_type_t v49 = (os_log_s *)v24;
      int v50 = v47;
      id v51 = 18;
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v49, v50, v48, buf, v51);
      goto LABEL_28;
    }
  }

  uint64_t v43 = 0;
LABEL_39:

  return v43;
}
  }
}

                  uint64_t v17 = v24;
                  continue;
              }

              uint64_t v40 = (os_log_s *)v30;
              ((void (**)(void, MADPhotosOCRTaskProvider *))v27)[2](v27, v30);
              goto LABEL_27;
            }
          }

          int v19 = [v17 countByEnumeratingWithState:&v67 objects:v81 count:16];
          if (!v19)
          {
            uint64_t v10 = v55;
            id v9 = v56;
            uint64_t v11 = v54;
            uint64_t v12 = v59;
            unsigned int v14 = v60;
            goto LABEL_35;
          }
        }
      }

      uint64_t v45 = MediaAnalysisLogLevel(v15, v16);
      if ((int)v45 >= 5)
      {
        uint64_t v47 = VCPLogInstance(v45, v46);
        uint64_t v17 = (id)objc_claimAutoreleasedReturnValue(v47);
        if (os_log_type_enabled((os_log_t)v17, v11))
        {
          __int128 v48 = (void *)objc_opt_class(self);
          __int128 v64 = v48;
          os_log_type_t v49 = (void *)objc_claimAutoreleasedReturnValue([v13 photoLibraryURL]);
          uint64_t v61 = v14;
          int v50 = (void *)objc_claimAutoreleasedReturnValue([v49 path]);
          *(_DWORD *)__int128 buf = v53;
          uint64_t v76 = v48;
          uint64_t v77 = 2112;
          uint64_t v78 = (unint64_t)v50;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  v11,  "[%@] Photo Library %@ is not ready; skipping",
            buf,
            0x16u);

          unsigned int v14 = v61;
        }

void sub_100033A54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100033C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100033FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000342B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000342F8(sqlite3_stmt *a1, uint64_t a2)
{
  id v15 = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:",  a2,  200LL,  0LL,  &v15));
  id v4 = v15;
  uint64_t v6 = v4;
  if (v3)
  {
    id v7 = v3;
    uint64_t v8 = sqlite3_bind_blob(a1, 3, [v7 bytes], (int)objc_msgSend(v7, "length"), 0);
  }

  else
  {
    uint64_t v9 = MediaAnalysisLogLevel(v4, v5);
    if ((int)v9 < 3)
    {
      uint64_t v8 = 4294967246LL;
      goto LABEL_8;
    }

    uint64_t v11 = VCPLogInstance(v9, v10);
    id v7 = (id)objc_claimAutoreleasedReturnValue(v11);
    os_log_type_t v12 = VCPLogToOSLogType[3];
    if (os_log_type_enabled((os_log_t)v7, v12))
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v17 = v13;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v7, v12, "Failed to bind NSArray (%@)", buf, 0xCu);
    }

    uint64_t v8 = 4294967246LL;
  }

LABEL_8:
  return v8;
}

void sub_100034460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100034688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000348D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100034BB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_46:
  v82[0] = MediaAnalysisVersionKey;
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", objc_msgSend(v11, "vcp_version")));
  v83[0] = v61;
  v82[1] = MediaAnalysisDateModifiedKey;
  uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "vcp_dateModified"));
  v83[1] = v63;
  v82[2] = MediaAnalysisDateAnalyzedKey;
  id v46 = objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "vcp_dateAnalyzed"));
  uint64_t v47 = v57 & ~v67 | v58;
  uint64_t v68 = (void *)v46;
  v83[2] = v46;
  v82[3] = MediaAnalysisAnalysisTypesKey;
  __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLongLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLongLong:", v47));
  v83[3] = v48;
  v82[4] = MediaAnalysisFlagsKey;
  os_log_type_t v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v55 | v56 & ~v66));
  v83[4] = v49;
  v82[5] = MediaAnalysisStatsFlagsKey;
  int v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v54));
  v83[5] = v50;
  v82[6] = MediaAnalysisQualityKey;
  id v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v23));
  v83[6] = v51;
  uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v83,  v82,  7LL));
  __int16 v25 = -[VCPDatabaseWriter _updateProperties:forAssetId:](self, "_updateProperties:forAssetId:", v52, a6);

  if (v25) {
    goto LABEL_51;
  }
  __int16 v25 = sqlite3_exec(self->_database, "RELEASE Analysis;", 0LL, 0LL, 0LL);
  if (v25) {
    goto LABEL_51;
  }
LABEL_52:

  return v25;
}

void sub_1000352E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20, uint64_t a21, void *a22)
{
  _Unwind_Resume(a1);
}

void sub_100035800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100035B44(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

id sub_100035BC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v26 = 0LL;
  id v4 = [v2 _queryPropertiesForAsset:v3 assetId:&v27 analysis:&v26];
  id v5 = v26;
  id v7 = v5;
  if ((_DWORD)v4) {
    goto LABEL_2;
  }
  id v15 = *(void **)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 48);
  if (!v5)
  {
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) localIdentifier]);
    id v4 = [v15 _storeAnalysis:v16 forLocalIdentifier:v21];

LABEL_14:
    if (!(_DWORD)v4) {
      goto LABEL_6;
    }
    goto LABEL_2;
  }

  id v17 = [*(id *)(a1 + 32) compareExistingAnalysis:v5 toNewAnalysis:*(void *)(a1 + 48) forAsset:*(void *)(a1 + 56)];
  if (!v17)
  {
    id v5 = [*(id *)(a1 + 32) _updateAnalysis:v7 withAnalysis:*(void *)(a1 + 48) forAsset:*(void *)(a1 + 56) withAssetId:v27];
    id v4 = v5;
    if (!(_DWORD)v5) {
      goto LABEL_6;
    }
    goto LABEL_2;
  }

  if (v17 == (id)2)
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionaryWithDictionary:]( &OBJC_CLASS___NSMutableDictionary,  "dictionaryWithDictionary:",  v7));
    if (!v11 || (id v4 = [*(id *)(a1 + 32) _queryResultsForAssetId:v27 analysis:v11], !(_DWORD)v4))
    {
      uint64_t inserted = MediaAnalysisInsertMissingResultsFromDegradedAnalysis(v11, *(void *)(a1 + 48));
      __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(inserted);
      id v4 = [*(id *)(a1 + 32) _deleteAsset:*(void *)(a1 + 40)];
      if (!(_DWORD)v4)
      {
        int v24 = *(void **)(a1 + 32);
        __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) localIdentifier]);
        id v4 = [v24 _storeAnalysis:v23 forLocalIdentifier:v25];

        if (!(_DWORD)v4)
        {

          id v4 = 0LL;
LABEL_5:

          goto LABEL_6;
        }
      }
    }
  }

  else
  {
    if (v17 != (id)1)
    {
      id v4 = 0LL;
      goto LABEL_6;
    }

    id v5 = [*(id *)(a1 + 32) _deleteAsset:*(void *)(a1 + 40)];
    id v4 = v5;
    if (!(_DWORD)v5)
    {
      __int16 v18 = *(void **)(a1 + 32);
      uint64_t v19 = *(void *)(a1 + 48);
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) localIdentifier]);
      id v4 = [v18 _storeAnalysis:v19 forLocalIdentifier:v20];

      goto LABEL_14;
    }
  }

LABEL_2:
  uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
  if ((int)v8 >= 3)
  {
    uint64_t v10 = VCPLogInstance(v8, v9);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    os_log_type_t v12 = VCPLogToOSLogType[3];
    if (os_log_type_enabled((os_log_t)v11, v12))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v11, v12, "Failed to store asset %@", buf, 0xCu);
    }

    goto LABEL_5;
  }

  id v5 = MediaAnalysisLogLevel(v2, v3);
  if ((int)v5 >= 3)
  {
    id v7 = VCPLogInstance(v5, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v8, v9))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to query KeyValueStore", buf, 2u);
    }
  }

  uint64_t v2 = 0LL;
LABEL_26:
  sqlite3_finalize(ppStmt);
  uint64_t v27 = v2;
  **(void **)(a1 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v27;

  return v6;
}

void sub_100035E2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100035EA0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localIdentifier]);
  id v5 = [v2 _storeAnalysis:v3 forLocalIdentifier:v4];

  if ((_DWORD)v5)
  {
    uint64_t v8 = MediaAnalysisLogLevel(v6, v7);
    if ((int)v8 >= 3)
    {
      uint64_t v10 = VCPLogInstance(v8, v9);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      os_log_type_t v12 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = *(void *)(a1 + 56);
        int v15 = 138412290;
        uint64_t v16 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to store asset %@", (uint8_t *)&v15, 0xCu);
      }
    }
  }

  return v5;
}

void sub_100035F98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000360F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100036124(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "UPDATE Assets SET version=(?) WHERE  localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_7;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, MediaAnalysisVersion);
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_7;
  }
  id v5 = ppStmt;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = v6;
  uint64_t v8 = v6
  uint64_t v4 = v8;

  if ((_DWORD)v4) {
    goto LABEL_7;
  }
  id v17 = sqlite3_expanded_sql(ppStmt);
  uint64_t v19 = v17;
  if (v17)
  {
    uint64_t v20 = MediaAnalysisEnableDatabaseLog(v17, v18);
    if ((_DWORD)v20)
    {
      uint64_t v22 = VCPLogInstance(v20, v21);
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        id v26 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v27 = 1024;
        int v28 = 1611;
        __int16 v29 = 2080;
        __int16 v30 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v19);
  }

  uint64_t v2 = sqlite3_step(ppStmt);
  uint64_t v4 = v2;
  uint64_t v15 = 0LL;
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 != 101)
    {
LABEL_7:
      uint64_t v9 = MediaAnalysisLogLevel(v2, v3);
      if ((int)v9 >= 3)
      {
        uint64_t v11 = VCPLogInstance(v9, v10);
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        os_log_type_t v13 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v12, v13))
        {
          unsigned int v14 = *(const char **)(a1 + 40);
          *(_DWORD *)__int128 buf = 138412290;
          id v26 = v14;
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to bump version for asset %@", buf, 0xCu);
        }
      }

      uint64_t v15 = v4;
    }
  }

  sqlite3_finalize(ppStmt);
  return v15;
}

void sub_10003634C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100036940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_3:
  sqlite3_finalize(ppStmt);
  return v8;
}

  uint64_t v2 = 0LL;
LABEL_4:
  sqlite3_finalize(ppStmt);
  uint64_t v7 = v2;
  **(void **)(a1 + 4_Block_object_dispose(va, 8) = v7;

  return v6;
}

void sub_100036CA0(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

id sub_100036D0C(sqlite3_stmt *a1, int a2)
{
  if (sqlite3_column_type(a1, a2) == 5
    || (uint64_t v4 = sqlite3_column_blob(a1, a2),
        v5 = +[NSData dataWithBytesNoCopy:length:freeWhenDone:]( &OBJC_CLASS___NSData,  "dataWithBytesNoCopy:length:freeWhenDone:",  v4,  sqlite3_column_bytes(a1, a2),  0LL),  (id v6 = (void *)objc_claimAutoreleasedReturnValue(v5)) == 0LL))
  {
    uint64_t v7 = 0LL;
  }

  else
  {
    id v18 = 0LL;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization propertyListWithData:options:format:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "propertyListWithData:options:format:error:",  v6,  0LL,  0LL,  &v18));
    id v8 = v18;
    uint64_t v10 = v8;
    if (!v7)
    {
      uint64_t v11 = MediaAnalysisLogLevel(v8, v9);
      if ((int)v11 >= 3)
      {
        uint64_t v13 = VCPLogInstance(v11, v12);
        unsigned int v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        os_log_type_t v15 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v10 description]);
          *(_DWORD *)__int128 buf = 67109378;
          int v20 = a2;
          __int16 v21 = 2112;
          uint64_t v22 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Failed to extract NSArray from column %d (%@)",  buf,  0x12u);
        }
      }
    }
  }

  return v7;
}

void sub_100036E9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100037020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10003704C(uint64_t a1)
{
  **(void **)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  id v2 = [*(id *)(a1 + 32) _queryPropertiesForAsset:*(void *)(a1 + 40) assetId:&v12 analysis:*(void *)(a1 + 48)];
  id v4 = v2;
  if (!(_DWORD)v2)
  {
    if (!**(void **)(a1 + 48)) {
      return 0LL;
    }
    id v2 = objc_msgSend(*(id *)(a1 + 32), "_queryResultsForAssetId:analysis:", v12);
    id v4 = v2;
    if (!(_DWORD)v2) {
      return v4;
    }
  }

  uint64_t v5 = MediaAnalysisLogLevel(v2, v3);
  if ((int)v5 >= 3)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to query asset %@", buf, 0xCu);
    }
  }

  **(void **)(a1 + 4_Block_object_dispose(va, 8) = 0LL;
  return v4;
}

void sub_1000372B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000372DC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _deleteAsset:*(void *)(a1 + 40)];
  id v4 = v2;
  if ((_DWORD)v2)
  {
    uint64_t v5 = MediaAnalysisLogLevel(v2, v3);
    if ((int)v5 >= 3)
    {
      uint64_t v7 = VCPLogInstance(v5, v6);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      os_log_type_t v9 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        int v12 = 138412290;
        uint64_t v13 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to delete asset %@", (uint8_t *)&v12, 0xCu);
      }
    }
  }

  return v4;
}

void sub_100037518(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100037544(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT results FROM Results WHERE resultsType=(?) AND assetId IN (SELECT id FROM Assets WHERE localIdentifier=(?));",
         -1,
         &ppStmt,
         0LL);
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_7;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_7;
  }
  uint64_t v5 = ppStmt;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = v6;
  uint64_t v8 = v6
  uint64_t v4 = v8;

  if ((_DWORD)v4) {
    goto LABEL_7;
  }
  id v17 = sqlite3_expanded_sql(ppStmt);
  uint64_t v19 = v17;
  if (v17)
  {
    uint64_t v20 = MediaAnalysisEnableDatabaseLog(v17, v18);
    if ((_DWORD)v20)
    {
      uint64_t v22 = VCPLogInstance(v20, v21);
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        __int16 v27 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v28 = 1024;
        int v29 = 1767;
        __int16 v30 = 2080;
        int v31 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v19);
  }

  uint64_t v2 = sqlite3_step(ppStmt);
  uint64_t v4 = v2;
  if ((_DWORD)v2 != 100)
  {
LABEL_22:
    uint64_t v15 = 0LL;
    if (!(_DWORD)v4 || (_DWORD)v4 == 101) {
      goto LABEL_12;
    }
    goto LABEL_7;
  }

  id v24 = sub_100036D0C(ppStmt, 0);
  uint64_t v2 = (uint64_t)(id)objc_claimAutoreleasedReturnValue(v24);
  **(void **)(a1 + 56) = v2;
  if (**(void **)(a1 + 56))
  {
    uint64_t v2 = sqlite3_step(ppStmt);
    uint64_t v4 = v2;
    goto LABEL_22;
  }

  uint64_t v4 = 4294967278LL;
LABEL_7:
  uint64_t v9 = MediaAnalysisLogLevel(v2, v3);
  if ((int)v9 >= 3)
  {
    uint64_t v11 = VCPLogInstance(v9, v10);
    int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    os_log_type_t v13 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = *(const char **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      __int16 v27 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to query result for asset %@", buf, 0xCu);
    }
  }

  uint64_t v15 = v4;
LABEL_12:
  sqlite3_finalize(ppStmt);
  return v15;
}

void sub_1000377A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003797C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000379AC(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithString:]( &OBJC_CLASS___NSMutableString,  "stringWithString:",  @"SELECT Assets.localIdentifier, Results.resultsType, Results.results FROM Assets JOIN Results ON Assets.id = Results.assetId WHERE Assets.localIdentifier IN (?"));
  [v3 appendString:@";"]);
  uint64_t v5 = *(sqlite3 **)(*(void *)(a1 + 40) + 24LL);
  id v6 = v3;
  uint64_t v7 = sqlite3_prepare_v2(v5, (const char *)[v6 UTF8String], -1, &ppStmt, 0);
  if (!(_DWORD)v7)
  {
    unint64_t v8 = 0LL;
    while (1)
    {
      id v9 = [*(id *)(a1 + 32) count];
      uint64_t v10 = ppStmt;
      id v11 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v8]);
      int v12 = v11;
      if (v11) {
        uint64_t v13 = sqlite3_bind_text( v10, v8 + 1, (const char *)[v11 UTF8String], -1, 0);
      }
      else {
        uint64_t v13 = sqlite3_bind_null(v10, v8 + 1);
      }
      uint64_t v7 = v13;

      ++v8;
      if ((_DWORD)v7) {
        goto LABEL_43;
      }
    }

    uint64_t v14 = sqlite3_expanded_sql(ppStmt);
    uint64_t v16 = v14;
    if (v14)
    {
      uint64_t v17 = MediaAnalysisEnableDatabaseLog(v14, v15);
      if ((_DWORD)v17)
      {
        uint64_t v19 = VCPLogInstance(v17, v18);
        uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315650;
          __int128 v56 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
          __int16 v57 = 1024;
          LODWORD(v58[0]) = 1816;
          WORD2(v58[0]) = 2080;
          *(void *)((char *)v58 + 6) = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
        }
      }

      sqlite3_free(v16);
    }

    unsigned int v21 = sqlite3_step(ppStmt);
    uint64_t v22 = MediaAnalysisResultsKey;
    while (v21 == 100)
    {
      __int16 v23 = ppStmt;
      if (sqlite3_column_type(ppStmt, 0) == 5)
      {
        id v24 = 0LL;
      }

      else
      {
        __int16 v25 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v23, 0));
        id v24 = (char *)objc_claimAutoreleasedReturnValue(v25);
      }

      int v26 = sqlite3_column_int(ppStmt, 1);
      id v27 = sub_100036D0C(ppStmt, 2);
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
      uint64_t v29 = MediaAnalysisResultsTypeToKey(v26);
      uint64_t v30 = objc_claimAutoreleasedReturnValue(v29);
      __int16 v32 = (void *)v30;
      if (!v30)
      {
        uint64_t v43 = MediaAnalysisLogLevel(0LL, v31);
        if ((int)v43 >= 3)
        {
          uint64_t v45 = VCPLogInstance(v43, v44);
          id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
          os_log_type_t v47 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v46, v47))
          {
            *(_DWORD *)__int128 buf = 138412546;
            __int128 v56 = v24;
            __int16 v57 = 1024;
            LODWORD(v58[0]) = v26;
            _os_log_impl((void *)&_mh_execute_header, v46, v47, "[%@] No results key for type %d", buf, 0x12u);
          }

LABEL_43:
  sqlite3_finalize(ppStmt);
  id v52 = v2;
  **(void **)(a1 + 4_Block_object_dispose(va, 8) = v52;

  return v7;
}

      goto LABEL_44;
    }

    uint64_t v16 = objc_alloc(&OBJC_CLASS___PFClientSideEncryptionManager);
    uint64_t v17 = -[PFClientSideEncryptionManager initWithProfile:]( v16,  "initWithProfile:",  PFClientSideEncryptionManagerProfileMediaAnalysis);
    uint64_t v18 = v17;
    if (v17)
    {
      -[os_log_s start](v17, "start");
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v11));
      uint64_t v70 = 0LL;
      -[os_log_s unarchiveDirectoryAtURL:error:](v18, "unarchiveDirectoryAtURL:error:", v19, &v70);
      uint64_t v20 = v70;

      -[os_log_s shutdownWithCompletionHandler:](v18, "shutdownWithCompletionHandler:", 0LL);
      unsigned int v21 = v20;
    }

    else
    {
      unsigned int v21 = 0LL;
    }

    int v66 = v21;
    uint64_t v69 = 0LL;
    uint64_t v31 = [v3 removeItemAtPath:v11 error:&v69];
    __int16 v32 = v69;
    BOOL v34 = v32;
    if ((v31 & 1) == 0)
    {
      __int16 v32 = (id)MediaAnalysisLogLevel(v32, v33);
      if ((int)v32 >= 4)
      {
        id v35 = VCPLogInstance(v32, v33);
        uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
        uint64_t v37 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v36, v37))
        {
          *(_DWORD *)__int128 buf = 138412290;
          int v74 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "  Failed to remove intermediate encrypted restore file (%@)",  buf,  0xCu);
        }
      }
    }

    if (v18)
    {
      if (!v66)
      {
        os_log_type_t v65 = objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary mad_intermediateUnencryptedRestoreFilepathForTask:]( self->_photoLibrary,  "mad_intermediateUnencryptedRestoreFilepathForTask:",  self->_taskID));
        __int128 v64 = -[MADPhotosRestoreAnalysisTask _restoreFromBackupFilepath:](self, "_restoreFromBackupFilepath:");
        uint64_t v68 = v34;
        os_log_type_t v51 = [v3 removeItemAtPath:v65 error:&v68];
        id v52 = v68;

        if ((v51 & 1) == 0)
        {
          uint64_t v53 = MediaAnalysisLogLevel(v53, v54);
          if ((int)v53 >= 4)
          {
            uint64_t v55 = VCPLogInstance(v53, v54);
            __int128 v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
            __int16 v57 = VCPLogToOSLogType[4];
            if (os_log_type_enabled(v56, v57))
            {
              *(_DWORD *)__int128 buf = 138412290;
              int v74 = v52;
              _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "  Failed to remove intermediate decrypted restore file (%@)",  buf,  0xCu);
            }
          }
        }

        if (v64)
        {
          int v58 = MediaAnalysisLogLevel(v53, v54);
          if ((int)v58 >= 3)
          {
            uint64_t v60 = VCPLogInstance(v58, v59);
            uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
            uint64_t v62 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v61, v62))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v61,  v62,  "  Failed to restore analysis; restore failed",
                buf,
                2u);
            }
          }
        }

        BOOL v34 = v52;
        os_log_type_t v41 = (os_log_s *)v65;
        goto LABEL_41;
      }

      BOOL v38 = MediaAnalysisLogLevel(v32, v33);
      if ((int)v38 >= 3)
      {
        uint64_t v40 = VCPLogInstance(v38, v39);
        os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        os_log_type_t v42 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v41, v42))
        {
          *(_DWORD *)__int128 buf = 138412290;
          int v74 = v66;
          uint64_t v43 = "  Failed to decrypt backup file (%@); restore failed";
          uint64_t v44 = v41;
          uint64_t v45 = v42;
          id v46 = 12;
LABEL_29:
          _os_log_impl((void *)&_mh_execute_header, v44, v45, v43, buf, v46);
          goto LABEL_41;
        }

        goto LABEL_41;
      }
    }

    else
    {
      os_log_type_t v47 = MediaAnalysisLogLevel(v32, v33);
      if ((int)v47 >= 3)
      {
        uint64_t v49 = VCPLogInstance(v47, v48);
        os_log_type_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
        uint64_t v50 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v41, v50))
        {
          *(_WORD *)__int128 buf = 0;
          uint64_t v43 = "  Failed to create PFClientSideEncryptionManager; restore failed";
          uint64_t v44 = v41;
          uint64_t v45 = v50;
          id v46 = 2;
          goto LABEL_29;
        }

    goto LABEL_44;
  }

  uint64_t v18 = MediaAnalysisLogLevel(v5, v6);
  if ((int)v18 >= 7)
  {
    uint64_t v20 = VCPLogInstance(v18, v19);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v20);
    unsigned int v21 = VCPLogToOSLogType[7];
    if (os_log_type_enabled((os_log_t)v7, v21))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  v21,  "[VideoEmbedding|Backfill] Embedding generation disabled; skipping",
        buf,
        2u);
    }

    goto LABEL_10;
  }

  uint64_t v17 = 0;
LABEL_47:

  return v17;
}

void sub_100037EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003813C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000382BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000382E8(uint64_t a1)
{
  if (![*(id *)(a1 + 32) _getBlacklistExpiredCount:*(void *)(a1 + 40) count:*(void *)(a1 + 48)]
    && **(int **)(a1 + 48) < 1)
  {
    return 0LL;
  }

  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "DELETE FROM Blacklist WHERE date<=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    if (v4)
    {
      [v4 timeIntervalSinceReferenceDate];
      uint64_t v7 = sqlite3_bind_double(v3, 1, v6);
    }

    else
    {
      uint64_t v7 = sqlite3_bind_null(v3, 1);
    }

    uint64_t v2 = v7;

    if (!(_DWORD)v2)
    {
      unint64_t v8 = sqlite3_expanded_sql(ppStmt);
      uint64_t v10 = v8;
      if (v8)
      {
        uint64_t v11 = MediaAnalysisEnableDatabaseLog(v8, v9);
        if ((_DWORD)v11)
        {
          uint64_t v13 = VCPLogInstance(v11, v12);
          uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            uint64_t v19 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v20 = 1024;
            int v21 = 1885;
            __int16 v22 = 2080;
            __int16 v23 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
          }
        }

        sqlite3_free(v10);
      }

      unsigned int v15 = sqlite3_step(ppStmt);
      if (v15 == 101) {
        uint64_t v2 = 0LL;
      }
      else {
        uint64_t v2 = v15;
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100038480(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100038664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100038804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10003883C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _getBlacklistCountForLocalIdentifier:*(void *)(a1 + 40) count:*(void *)(*(void *)(a1 + 48) + 8) + 24];
}

void sub_1000389AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000389DC(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "REPLACE INTO Blacklist (localIdentifier, date, count) VALUES ((?), (?), COALESCE((SELECT count FROM Blacklist W HERE localIdentifier=(?)), 0) + 1);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    uint64_t v6 = v4
    uint64_t v2 = v6;

    if (!(_DWORD)v2)
    {
      uint64_t v7 = ppStmt;
      id v8 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      uint64_t v9 = v8;
      if (v8)
      {
        [v8 timeIntervalSinceReferenceDate];
        uint64_t v11 = sqlite3_bind_double(v7, 2, v10);
      }

      else
      {
        uint64_t v11 = sqlite3_bind_null(v7, 2);
      }

      uint64_t v2 = v11;

      if (!(_DWORD)v2)
      {
        uint64_t v12 = ppStmt;
        id v13 = *(id *)(a1 + 40);
        uint64_t v14 = v13;
        uint64_t v15 = v13
        uint64_t v2 = v15;

        if (!(_DWORD)v2)
        {
          uint64_t v16 = sqlite3_expanded_sql(ppStmt);
          uint64_t v18 = v16;
          if (v16)
          {
            uint64_t v19 = MediaAnalysisEnableDatabaseLog(v16, v17);
            if ((_DWORD)v19)
            {
              uint64_t v21 = VCPLogInstance(v19, v20);
              __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315650;
                id v27 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v28 = 1024;
                int v29 = 1939;
                __int16 v30 = 2080;
                uint64_t v31 = v18;
                _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
              }
            }

            sqlite3_free(v18);
          }

          unsigned int v23 = sqlite3_step(ppStmt);
          if (v23 == 101) {
            uint64_t v2 = 0LL;
          }
          else {
            uint64_t v2 = v23;
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100038C0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100038D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100038DB8(uint64_t a1)
{
  int v36 = 0;
  id v2 = [*(id *)(a1 + 32) _getBlacklistCountForLocalIdentifier:*(void *)(a1 + 40) count:&v36];
  if (!(_DWORD)v2)
  {
    pStmt = 0LL;
    if (v36 < 2)
    {
      if (v36 != 1)
      {
        uint64_t v10 = 0LL;
LABEL_17:
        sqlite3_finalize(pStmt);
        return v10;
      }

      uint64_t v10 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "DELETE FROM Blacklist WHERE localIdentifier=(?);",
              -1,
              &pStmt,
              0LL);
      if ((_DWORD)v10) {
        goto LABEL_17;
      }
      uint64_t v15 = pStmt;
      id v16 = *(id *)(a1 + 40);
      uint64_t v17 = v16;
      uint64_t v18 = v16
      uint64_t v10 = v18;

      if ((_DWORD)v10) {
        goto LABEL_17;
      }
      uint64_t v20 = sqlite3_expanded_sql(pStmt);
      __int16 v22 = v20;
      if (v20)
      {
        uint64_t v23 = MediaAnalysisEnableDatabaseLog(v20, v21);
        if ((_DWORD)v23)
        {
          uint64_t v25 = VCPLogInstance(v23, v24);
          int v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            BOOL v38 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v39 = 1024;
            int v40 = 1981;
            __int16 v41 = 2080;
            os_log_type_t v42 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
          }
        }

        sqlite3_free(v22);
      }
    }

    else
    {
      uint64_t v10 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "UPDATE Blacklist SET count=(?) WHERE localIdentifier=(?);",
              -1,
              &pStmt,
              0LL);
      if ((_DWORD)v10) {
        goto LABEL_17;
      }
      uint64_t v10 = sqlite3_bind_int(pStmt, 1, v36 - 1);
      if ((_DWORD)v10) {
        goto LABEL_17;
      }
      uint64_t v11 = pStmt;
      id v12 = *(id *)(a1 + 40);
      id v13 = v12;
      uint64_t v14 = v12
      uint64_t v10 = v14;

      if ((_DWORD)v10) {
        goto LABEL_17;
      }
      id v27 = sqlite3_expanded_sql(pStmt);
      int v29 = v27;
      if (v27)
      {
        uint64_t v30 = MediaAnalysisEnableDatabaseLog(v27, v28);
        if ((_DWORD)v30)
        {
          uint64_t v32 = VCPLogInstance(v30, v31);
          uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            BOOL v38 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v39 = 1024;
            int v40 = 1974;
            __int16 v41 = 2080;
            os_log_type_t v42 = v29;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
          }
        }

        sqlite3_free(v29);
      }
    }

    unsigned int v34 = sqlite3_step(pStmt);
    if (v34 == 101) {
      uint64_t v10 = 0LL;
    }
    else {
      uint64_t v10 = v34;
    }
    goto LABEL_17;
  }

  uint64_t v4 = MediaAnalysisLogLevel(v2, v3);
  if ((int)v4 >= 4)
  {
    uint64_t v6 = VCPLogInstance(v4, v5);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    os_log_type_t v8 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = *(const char **)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      BOOL v38 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "  [%@] Failed to query blacklist count", buf, 0xCu);
    }
  }

  return 0LL;
}

void sub_100039120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100039284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000392B0(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "DELETE FROM Blacklist WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    uint64_t v6 = v4
    uint64_t v2 = v6;

    if (!(_DWORD)v2)
    {
      uint64_t v7 = sqlite3_expanded_sql(ppStmt);
      uint64_t v9 = v7;
      if (v7)
      {
        uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
        if ((_DWORD)v10)
        {
          uint64_t v12 = VCPLogInstance(v10, v11);
          id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v19 = 1024;
            int v20 = 1998;
            __int16 v21 = 2080;
            __int16 v22 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
          }
        }

        sqlite3_free(v9);
      }

      unsigned int v14 = sqlite3_step(ppStmt);
      if (v14 == 101) {
        uint64_t v2 = 0LL;
      }
      else {
        uint64_t v2 = v14;
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100039430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100039580(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT count(*) FROM Blacklist WHERE count >= (?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int(ppStmt, 1, *(_DWORD *)(a1 + 48));
    if (!(_DWORD)v2)
    {
      uint64_t v3 = sqlite3_expanded_sql(ppStmt);
      if (v3)
      {
        id v4 = v3;
        if (MediaAnalysisEnableDatabaseLog())
        {
          uint64_t v5 = VCPLogInstance();
          uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v11 = 1024;
            int v12 = 2015;
            __int16 v13 = 2080;
            unsigned int v14 = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
          }
        }

        sqlite3_free(v4);
      }

      uint64_t v2 = sqlite3_step(ppStmt);
      if ((_DWORD)v2 == 100)
      {
        uint64_t v2 = 0LL;
        **(void **)(a1 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = sqlite3_column_int(ppStmt, 0);
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

int sub_1000396EC(id a1)
{
  return -19;
}

void sub_10003988C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000398B4(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT localIdentifier FROM Blacklist WHERE count=(?);",
         -1,
         &ppStmt,
         0LL);
  if ((_DWORD)v2) {
    goto LABEL_3;
  }
  uint64_t v2 = sqlite3_bind_int(ppStmt, 1, *(_DWORD *)(a1 + 48));
  if ((_DWORD)v2) {
    goto LABEL_3;
  }
  uint64_t v6 = sqlite3_expanded_sql(ppStmt);
  uint64_t v8 = v6;
  if (v6)
  {
    uint64_t v9 = MediaAnalysisEnableDatabaseLog(v6, v7);
    if ((_DWORD)v9)
    {
      uint64_t v11 = VCPLogInstance(v9, v10);
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        uint64_t v25 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v26 = 1024;
        int v27 = 2035;
        __int16 v28 = 2080;
        int v29 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v8);
  }

  uint64_t v2 = sqlite3_step(ppStmt);
  os_log_type_t v13 = VCPLogToOSLogType[4];
  while ((_DWORD)v2 == 100)
  {
    unsigned int v14 = ppStmt;
    uint64_t v15 = sqlite3_column_type(ppStmt, 0);
    if ((_DWORD)v15 == 5
      || (v17 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v14, 0)),  uint64_t v15 = objc_claimAutoreleasedReturnValue(v17),  (v18 = (void *)v15) == 0LL))
    {
      uint64_t v19 = MediaAnalysisLogLevel(v15, v16);
      if ((int)v19 >= 4)
      {
        uint64_t v21 = VCPLogInstance(v19, v20);
        __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        if (os_log_type_enabled(v22, v13))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, v13, "Detected bad local identifier in blacklist", buf, 2u);
        }
      }

      uint64_t v18 = 0LL;
    }

    else
    {
      [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v15];
    }

    uint64_t v2 = sqlite3_step(ppStmt);
  }

  if ((_DWORD)v2 && (_DWORD)v2 != 101)
  {
LABEL_3:
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
    id v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100039B18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100039BDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100039D44( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100039D64(void *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(a1[4] + 24LL),  "SELECT count(*) FROM ProcessingStatus WHERE taskID=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!(_DWORD)v2)
    {
      uint64_t v3 = sqlite3_expanded_sql(ppStmt);
      if (v3)
      {
        id v4 = v3;
        if (MediaAnalysisEnableDatabaseLog())
        {
          uint64_t v5 = VCPLogInstance();
          uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v12 = 1024;
            int v13 = 2091;
            __int16 v14 = 2080;
            uint64_t v15 = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
          }
        }

        sqlite3_free(v4);
      }

      unsigned int v7 = sqlite3_step(ppStmt);
      if (v7 == 100)
      {
        *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL) = sqlite3_column_int(ppStmt, 0);
        unsigned int v7 = sqlite3_step(ppStmt);
      }

      if (v7 == 101) {
        uint64_t v2 = 0LL;
      }
      else {
        uint64_t v2 = v7;
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003A034( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10003A054(void *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(a1[4] + 24LL),  "SELECT count(*) FROM ProcessingStatus WHERE taskID=(?) AND status=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!(_DWORD)v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[7]);
      if (!(_DWORD)v2)
      {
        uint64_t v3 = sqlite3_expanded_sql(ppStmt);
        if (v3)
        {
          id v4 = v3;
          if (MediaAnalysisEnableDatabaseLog())
          {
            uint64_t v5 = VCPLogInstance();
            uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315650;
              uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v12 = 1024;
              int v13 = 2117;
              __int16 v14 = 2080;
              uint64_t v15 = v4;
              _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
            }
          }

          sqlite3_free(v4);
        }

        unsigned int v7 = sqlite3_step(ppStmt);
        if (v7 == 100)
        {
          *(_DWORD *)(*(void *)(a1[5] + 8LL) + 24LL) = sqlite3_column_int(ppStmt, 0);
          unsigned int v7 = sqlite3_step(ppStmt);
        }

        if (v7 == 101) {
          uint64_t v2 = 0LL;
        }
        else {
          uint64_t v2 = v7;
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003A34C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10003A36C(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT count(*) FROM ProcessingStatus WHERE taskID=(?) AND status=(?) AND attempts=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!(_DWORD)v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 56));
      if (!(_DWORD)v2)
      {
        uint64_t v2 = sqlite3_bind_int(ppStmt, 3, *(_DWORD *)(a1 + 64));
        if (!(_DWORD)v2)
        {
          uint64_t v3 = sqlite3_expanded_sql(ppStmt);
          if (v3)
          {
            id v4 = v3;
            if (MediaAnalysisEnableDatabaseLog())
            {
              uint64_t v5 = VCPLogInstance();
              uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
              if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315650;
                uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v12 = 1024;
                int v13 = 2144;
                __int16 v14 = 2080;
                uint64_t v15 = v4;
                _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
              }
            }

            sqlite3_free(v4);
          }

          unsigned int v7 = sqlite3_step(ppStmt);
          if (v7 == 100)
          {
            *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sqlite3_column_int(ppStmt, 0);
            unsigned int v7 = sqlite3_step(ppStmt);
          }

          if (v7 == 101) {
            uint64_t v2 = 0LL;
          }
          else {
            uint64_t v2 = v7;
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003A688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003A6C0(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT attempts FROM ProcessingStatus WHERE taskID=(?) AND localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
    if (!(_DWORD)v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      uint64_t v5 = v4;
      uint64_t v6 = v4
      uint64_t v2 = v6;

      if (!(_DWORD)v2)
      {
        unsigned int v7 = sqlite3_expanded_sql(ppStmt);
        uint64_t v9 = v7;
        if (v7)
        {
          uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
          if ((_DWORD)v10)
          {
            uint64_t v12 = VCPLogInstance(v10, v11);
            int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315650;
              uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v19 = 1024;
              int v20 = 2170;
              __int16 v21 = 2080;
              __int16 v22 = v9;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
            }
          }

          sqlite3_free(v9);
        }

        uint64_t v14 = sqlite3_step(ppStmt);
        uint64_t v2 = v14;
        if ((_DWORD)v14 == 100)
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = sqlite3_column_int(ppStmt, 0);
          uint64_t v2 = sqlite3_step(ppStmt);
          if ((_DWORD)v2 == 101) {
            goto LABEL_17;
          }
        }

        else if ((_DWORD)v14 == 101)
        {
          *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
LABEL_17:
          uint64_t v2 = 0LL;
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003A8AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003AA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003AA68(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24),  (const char *)objc_msgSend( @"SELECT status, attempts, lastAttemptDate, nextAttemptDate FROM ProcessingStatus WHERE taskID=(?) AND localIdentifier=(?);",
                         "UTF8String"),
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!(_DWORD)v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      uint64_t v5 = v4;
      uint64_t v6 = v4
      uint64_t v2 = v6;

      if (!(_DWORD)v2)
      {
        unsigned int v7 = sqlite3_expanded_sql(ppStmt);
        uint64_t v9 = v7;
        if (v7)
        {
          uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
          if ((_DWORD)v10)
          {
            uint64_t v12 = VCPLogInstance(v10, v11);
            int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315650;
              __int16 v22 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v23 = 1024;
              int v24 = 2204;
              __int16 v25 = 2080;
              __int16 v26 = v9;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
            }
          }

          sqlite3_free(v9);
        }

        unsigned int v14 = sqlite3_step(ppStmt);
        uint64_t v15 = *(void **)(a1 + 56);
        if (v14 == 100)
        {
          if (v15) {
            **(void **)(a1 + 56) = sqlite3_column_int64(ppStmt, 0);
          }
          if (*(void *)(a1 + 64)) {
            **(_DWORD **)(a1 + 64) = sqlite3_column_int(ppStmt, 1);
          }
          if (*(void *)(a1 + 72))
          {
            id v16 = sub_1000318F0(ppStmt, 2);
            **(void **)(a1 + 72) = (id)objc_claimAutoreleasedReturnValue(v16);
          }

          if (*(void *)(a1 + 80))
          {
            id v17 = sub_1000318F0(ppStmt, 3);
            **(void **)(a1 + 8sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = (id)objc_claimAutoreleasedReturnValue(v17);
          }

          unsigned int v14 = sqlite3_step(ppStmt);
        }

        else
        {
          if (v15) {
            void *v15 = 0LL;
          }
          uint64_t v18 = *(_DWORD **)(a1 + 64);
          if (v18) {
            _DWORD *v18 = 0;
          }
          if (*(void *)(a1 + 72)) {
            **(void **)(a1 + 72) = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
          }
          if (*(void *)(a1 + 80)) {
            **(void **)(a1 + 8sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
          }
        }

        if (v14 == 101) {
          uint64_t v2 = 0LL;
        }
        else {
          uint64_t v2 = v14;
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003AD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003B02C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10003B04C(void *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"SELECT count(*) FROM ProcessingStatus WHERE taskID=(?) AND status=(?) AND nextAttemptDate<(?);"));
  uint64_t v3 = *(sqlite3 **)(a1[4] + 24LL);
  id v4 = v2;
  uint64_t v5 = sqlite3_prepare_v2(v3, (const char *)[v4 UTF8String], -1, &ppStmt, 0);
  if (!(_DWORD)v5)
  {
    uint64_t v5 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!(_DWORD)v5)
    {
      uint64_t v5 = sqlite3_bind_int64(ppStmt, 2, a1[7]);
      if (!(_DWORD)v5)
      {
        uint64_t v6 = ppStmt;
        id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
        uint64_t v8 = v7;
        if (v7)
        {
          [v7 timeIntervalSinceReferenceDate];
          uint64_t v10 = sqlite3_bind_double(v6, 3, v9);
        }

        else
        {
          uint64_t v10 = sqlite3_bind_null(v6, 3);
        }

        uint64_t v5 = v10;

        if (!(_DWORD)v5)
        {
          LODWORD(sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, v5) = sqlite3_step(ppStmt);
          uint64_t v11 = sqlite3_expanded_sql(ppStmt);
          int v13 = v11;
          if (v11)
          {
            uint64_t v14 = MediaAnalysisEnableDatabaseLog(v11, v12);
            if ((_DWORD)v14)
            {
              uint64_t v16 = VCPLogInstance(v14, v15);
              id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315650;
                __int16 v21 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v22 = 1024;
                int v23 = 2252;
                __int16 v24 = 2080;
                __int16 v25 = v13;
                _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
              }
            }

            sqlite3_free(v13);
          }

          if ((_DWORD)v5 == 100)
          {
            *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = sqlite3_column_int(ppStmt, 0);
            LODWORD(sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, v5) = sqlite3_step(ppStmt);
          }

          if ((_DWORD)v5 == 101) {
            uint64_t v5 = 0LL;
          }
          else {
            uint64_t v5 = v5;
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  if ((_DWORD)v5) {
    *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = 0LL;
  }

  return v5;
}

void sub_10003B278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003B42C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003B458(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  ppStmt = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"SELECT localIdentifier FROM ProcessingStatus "));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"WHERE taskID=(?) AND status=(?) AND nextAttemptDate<(?) "));
  uint64_t v5 = v4;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v4, "appendString:");
  }
  [v3 appendString:v5];
  [v3 appendFormat:@"ORDER BY id ASC LIMIT (?);"];
  uint64_t v6 = *(sqlite3 **)(*(void *)(a1 + 40) + 24LL);
  id v7 = v3;
  uint64_t v8 = sqlite3_prepare_v2(v6, (const char *)[v7 UTF8String], -1, &ppStmt, 0);
  if ((_DWORD)v8) {
    goto LABEL_11;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
  if ((_DWORD)v8) {
    goto LABEL_11;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 56));
  if ((_DWORD)v8) {
    goto LABEL_11;
  }
  double v9 = ppStmt;
  id v10 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v11 = v10;
  if (v10)
  {
    [v10 timeIntervalSinceReferenceDate];
    uint64_t v13 = sqlite3_bind_double(v9, 3, v12);
  }

  else
  {
    uint64_t v13 = sqlite3_bind_null(v9, 3);
  }

  uint64_t v8 = v13;

  if ((_DWORD)v8) {
    goto LABEL_11;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 4, *(void *)(a1 + 64));
  if ((_DWORD)v8) {
    goto LABEL_11;
  }
  uint64_t v16 = sqlite3_expanded_sql(ppStmt);
  uint64_t v18 = v16;
  if (v16)
  {
    uint64_t v19 = MediaAnalysisEnableDatabaseLog(v16, v17);
    if ((_DWORD)v19)
    {
      uint64_t v21 = VCPLogInstance(v19, v20);
      __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        id v35 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v36 = 1024;
        int v37 = 2291;
        __int16 v38 = 2080;
        __int16 v39 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v18);
  }

  uint64_t v8 = sqlite3_step(ppStmt);
  os_log_type_t v23 = VCPLogToOSLogType[4];
  while ((_DWORD)v8 == 100)
  {
    __int16 v24 = ppStmt;
    uint64_t v25 = sqlite3_column_type(ppStmt, 0);
    if ((_DWORD)v25 == 5
      || (v27 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v24, 0)),  uint64_t v25 = objc_claimAutoreleasedReturnValue(v27),  (v28 = (void *)v25) == 0LL))
    {
      uint64_t v29 = MediaAnalysisLogLevel(v25, v26);
      if ((int)v29 >= 4)
      {
        uint64_t v31 = VCPLogInstance(v29, v30);
        uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
        if (os_log_type_enabled(v32, v23))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  v23,  "Detected bad localIdentifier in ProcessingStatus",  buf,  2u);
        }
      }

      __int16 v28 = 0LL;
    }

    else
    {
      -[NSMutableArray addObject:](v2, "addObject:", v25);
    }

    uint64_t v8 = sqlite3_step(ppStmt);
  }

  if ((_DWORD)v8 && (_DWORD)v8 != 101)
  {
LABEL_11:

    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  sqlite3_finalize(ppStmt);
  uint64_t v14 = v2;
  **(void **)(a1 + 72) = v14;

  return v8;
}

void sub_10003B7D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003B988(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  ppStmt = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"SELECT localIdentifier FROM ProcessingStatus WHERE taskID=(?) AND nextAttemptDate<(?) ORDER BY id ASC LIMIT (?);"));
  id v4 = *(sqlite3 **)(*(void *)(a1 + 32) + 24LL);
  id v5 = v3;
  uint64_t v6 = sqlite3_prepare_v2(v4, (const char *)[v5 UTF8String], -1, &ppStmt, 0);
  if ((_DWORD)v6) {
    goto LABEL_8;
  }
  uint64_t v6 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 40));
  if ((_DWORD)v6) {
    goto LABEL_8;
  }
  id v7 = ppStmt;
  id v8 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  double v9 = v8;
  if (v8)
  {
    [v8 timeIntervalSinceReferenceDate];
    uint64_t v11 = sqlite3_bind_double(v7, 2, v10);
  }

  else
  {
    uint64_t v11 = sqlite3_bind_null(v7, 2);
  }

  uint64_t v6 = v11;

  if ((_DWORD)v6) {
    goto LABEL_8;
  }
  uint64_t v6 = sqlite3_bind_int64(ppStmt, 3, *(void *)(a1 + 48));
  if ((_DWORD)v6) {
    goto LABEL_8;
  }
  uint64_t v14 = sqlite3_expanded_sql(ppStmt);
  uint64_t v16 = v14;
  if (v14)
  {
    uint64_t v17 = MediaAnalysisEnableDatabaseLog(v14, v15);
    if ((_DWORD)v17)
    {
      uint64_t v19 = VCPLogInstance(v17, v18);
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        uint64_t v33 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v34 = 1024;
        int v35 = 2339;
        __int16 v36 = 2080;
        int v37 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v16);
  }

  uint64_t v6 = sqlite3_step(ppStmt);
  os_log_type_t v21 = VCPLogToOSLogType[4];
  while ((_DWORD)v6 == 100)
  {
    __int16 v22 = ppStmt;
    uint64_t v23 = sqlite3_column_type(ppStmt, 0);
    if ((_DWORD)v23 == 5
      || (v25 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v22, 0)),  uint64_t v23 = objc_claimAutoreleasedReturnValue(v25),  (v26 = (void *)v23) == 0LL))
    {
      uint64_t v27 = MediaAnalysisLogLevel(v23, v24);
      if ((int)v27 >= 4)
      {
        uint64_t v29 = VCPLogInstance(v27, v28);
        uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
        if (os_log_type_enabled(v30, v21))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v30,  v21,  "Detected bad localIdentifier in ProcessingStatus",  buf,  2u);
        }
      }

      uint64_t v26 = 0LL;
    }

    else
    {
      -[NSMutableArray addObject:](v2, "addObject:", v23);
    }

    uint64_t v6 = sqlite3_step(ppStmt);
  }

  if ((_DWORD)v6 && (_DWORD)v6 != 101)
  {
LABEL_8:

    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  sqlite3_finalize(ppStmt);
  double v12 = v2;
  **(void **)(a1 + 56) = v12;

  return v6;
}

void sub_10003BC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003BE88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003BEC0(uint64_t a1)
{
  id v39 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"SELECT localIdentifier FROM ProcessingStatus "));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"WHERE taskID=(?) AND status IN (?"));
  [v3 appendFormat:@" AND nextAttemptDate<(?) "]);
  if (*(void *)(a1 + 40)) {
    objc_msgSend(v3, "appendString:");
  }
  [v2 appendString:v3];
  [v2 appendFormat:@"ORDER BY id ASC LIMIT (?);"];
  ppStmt = 0LL;
  id v5 = *(sqlite3 **)(*(void *)(a1 + 48) + 24LL);
  id v6 = v2;
  uint64_t v7 = sqlite3_prepare_v2(v5, (const char *)[v6 UTF8String], -1, &ppStmt, 0);
  if ((_DWORD)v7) {
    goto LABEL_24;
  }
  uint64_t v7 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
  if ((_DWORD)v7) {
    goto LABEL_24;
  }
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id v8 = *(id *)(a1 + 32);
  id v9 = [v8 countByEnumeratingWithState:&v40 objects:v51 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v41;
    int v11 = 2;
    while (2)
    {
      double v12 = 0LL;
      int v13 = v11;
      do
      {
        if (*(void *)v41 != v10) {
          objc_enumerationMutation(v8);
        }
        uint64_t v7 = sqlite3_bind_int64( ppStmt,  v13 + (_DWORD)v12,  (int)[*(id *)(*((void *)&v40 + 1) + 8 * (void)v12) intValue]);
        if ((_DWORD)v7)
        {

          goto LABEL_24;
        }

        double v12 = (char *)v12 + 1;
      }

      while (v9 != v12);
      id v9 = [v8 countByEnumeratingWithState:&v40 objects:v51 count:16];
      int v11 = v13 + (_DWORD)v12;
      if (v9) {
        continue;
      }
      break;
    }

    int v14 = v13 + (_DWORD)v12;
  }

  else
  {
    int v14 = 2;
  }

  uint64_t v15 = ppStmt;
  id v16 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v17 = v16;
  if (v16)
  {
    [v16 timeIntervalSinceReferenceDate];
    uint64_t v19 = sqlite3_bind_double(v15, v14, v18);
  }

  else
  {
    uint64_t v19 = sqlite3_bind_null(v15, v14);
  }

  uint64_t v7 = v19;

  if ((_DWORD)v7) {
    goto LABEL_24;
  }
  uint64_t v7 = sqlite3_bind_int64(ppStmt, v14 + 1, *(void *)(a1 + 64));
  if ((_DWORD)v7) {
    goto LABEL_24;
  }
  __int16 v22 = sqlite3_expanded_sql(ppStmt);
  uint64_t v24 = v22;
  if (v22)
  {
    uint64_t v25 = MediaAnalysisEnableDatabaseLog(v22, v23);
    if ((_DWORD)v25)
    {
      uint64_t v27 = VCPLogInstance(v25, v26);
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        id v46 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v47 = 1024;
        int v48 = 2389;
        __int16 v49 = 2080;
        uint64_t v50 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v24);
  }

  uint64_t v7 = sqlite3_step(ppStmt);
  os_log_type_t v29 = VCPLogToOSLogType[4];
  while ((_DWORD)v7 == 100)
  {
    uint64_t v30 = ppStmt;
    uint64_t v31 = sqlite3_column_type(ppStmt, 0);
    if ((_DWORD)v31 == 5
      || (uint64_t v33 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v30, 0)),  v31 = objc_claimAutoreleasedReturnValue(v33),  (v34 = (void *)v31) == 0LL))
    {
      uint64_t v35 = MediaAnalysisLogLevel(v31, v32);
      if ((int)v35 >= 4)
      {
        uint64_t v37 = VCPLogInstance(v35, v36);
        __int16 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v38, v29))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  v29,  "Detected bad localIdentifier in ProcessingStatus",  buf,  2u);
        }
      }

      __int16 v34 = 0LL;
    }

    else
    {
      [v39 addObject:v31];
    }

    uint64_t v7 = sqlite3_step(ppStmt);
  }

  if ((_DWORD)v7 && (_DWORD)v7 != 101)
  {
LABEL_24:

    id v39 = 0LL;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  sqlite3_finalize(ppStmt);
  id v20 = v39;
  **(void **)(a1 + 72) = v20;

  return v7;
}

void sub_10003C338( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10003C560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003C598(uint64_t a1)
{
  id v39 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"SELECT localIdentifier FROM ProcessingStatus "));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"WHERE taskID=(?) AND status NOT IN (?"));
  [v3 appendFormat:@" AND nextAttemptDate<(?) "]);
  if (*(void *)(a1 + 40)) {
    objc_msgSend(v3, "appendString:");
  }
  [v2 appendString:v3];
  [v2 appendFormat:@"ORDER BY id ASC LIMIT (?);"];
  ppStmt = 0LL;
  id v5 = *(sqlite3 **)(*(void *)(a1 + 48) + 24LL);
  id v6 = v2;
  uint64_t v7 = sqlite3_prepare_v2(v5, (const char *)[v6 UTF8String], -1, &ppStmt, 0);
  if ((_DWORD)v7) {
    goto LABEL_24;
  }
  uint64_t v7 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
  if ((_DWORD)v7) {
    goto LABEL_24;
  }
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id v8 = *(id *)(a1 + 32);
  id v9 = [v8 countByEnumeratingWithState:&v40 objects:v51 count:16];
  if (v9)
  {
    uint64_t v10 = *(void *)v41;
    int v11 = 2;
    while (2)
    {
      double v12 = 0LL;
      int v13 = v11;
      do
      {
        if (*(void *)v41 != v10) {
          objc_enumerationMutation(v8);
        }
        uint64_t v7 = sqlite3_bind_int64( ppStmt,  v13 + (_DWORD)v12,  (int)[*(id *)(*((void *)&v40 + 1) + 8 * (void)v12) intValue]);
        if ((_DWORD)v7)
        {

          goto LABEL_24;
        }

        double v12 = (char *)v12 + 1;
      }

      while (v9 != v12);
      id v9 = [v8 countByEnumeratingWithState:&v40 objects:v51 count:16];
      int v11 = v13 + (_DWORD)v12;
      if (v9) {
        continue;
      }
      break;
    }

    int v14 = v13 + (_DWORD)v12;
  }

  else
  {
    int v14 = 2;
  }

  uint64_t v15 = ppStmt;
  id v16 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v17 = v16;
  if (v16)
  {
    [v16 timeIntervalSinceReferenceDate];
    uint64_t v19 = sqlite3_bind_double(v15, v14, v18);
  }

  else
  {
    uint64_t v19 = sqlite3_bind_null(v15, v14);
  }

  uint64_t v7 = v19;

  if ((_DWORD)v7) {
    goto LABEL_24;
  }
  uint64_t v7 = sqlite3_bind_int64(ppStmt, v14 + 1, *(void *)(a1 + 64));
  if ((_DWORD)v7) {
    goto LABEL_24;
  }
  __int16 v22 = sqlite3_expanded_sql(ppStmt);
  uint64_t v24 = v22;
  if (v22)
  {
    uint64_t v25 = MediaAnalysisEnableDatabaseLog(v22, v23);
    if ((_DWORD)v25)
    {
      uint64_t v27 = VCPLogInstance(v25, v26);
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        id v46 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v47 = 1024;
        int v48 = 2450;
        __int16 v49 = 2080;
        uint64_t v50 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v24);
  }

  uint64_t v7 = sqlite3_step(ppStmt);
  os_log_type_t v29 = VCPLogToOSLogType[4];
  while ((_DWORD)v7 == 100)
  {
    uint64_t v30 = ppStmt;
    uint64_t v31 = sqlite3_column_type(ppStmt, 0);
    if ((_DWORD)v31 == 5
      || (uint64_t v33 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v30, 0)),  v31 = objc_claimAutoreleasedReturnValue(v33),  (v34 = (void *)v31) == 0LL))
    {
      uint64_t v35 = MediaAnalysisLogLevel(v31, v32);
      if ((int)v35 >= 4)
      {
        uint64_t v37 = VCPLogInstance(v35, v36);
        __int16 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v38, v29))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  v29,  "Detected bad localIdentifier in ProcessingStatus",  buf,  2u);
        }
      }

      __int16 v34 = 0LL;
    }

    else
    {
      [v39 addObject:v31];
    }

    uint64_t v7 = sqlite3_step(ppStmt);
  }

  if ((_DWORD)v7 && (_DWORD)v7 != 101)
  {
LABEL_24:

    id v39 = 0LL;
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  sqlite3_finalize(ppStmt);
  id v20 = v39;
  **(void **)(a1 + 72) = v20;

  return v7;
}

void sub_10003CA10( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10003CC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003CC50(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  ppStmt = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"SELECT localIdentifier FROM ProcessingStatus "));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"WHERE taskID=(?) AND status=(?) AND attempts=(?) "));
  id v5 = v4;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v4, "appendString:");
  }
  [v3 appendString:v5];
  [v3 appendFormat:@"ORDER BY id ASC LIMIT (?);"];
  id v6 = *(sqlite3 **)(*(void *)(a1 + 40) + 24LL);
  id v7 = v3;
  uint64_t v8 = sqlite3_prepare_v2(v6, (const char *)[v7 UTF8String], -1, &ppStmt, 0);
  if ((_DWORD)v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
  if ((_DWORD)v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 56));
  if ((_DWORD)v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int(ppStmt, 3, *(_DWORD *)(a1 + 80));
  if ((_DWORD)v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 4, *(void *)(a1 + 64));
  if ((_DWORD)v8) {
    goto LABEL_8;
  }
  int v11 = sqlite3_expanded_sql(ppStmt);
  int v13 = v11;
  if (v11)
  {
    uint64_t v14 = MediaAnalysisEnableDatabaseLog(v11, v12);
    if ((_DWORD)v14)
    {
      uint64_t v16 = VCPLogInstance(v14, v15);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v31 = 1024;
        int v32 = 2507;
        __int16 v33 = 2080;
        __int16 v34 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v13);
  }

  uint64_t v8 = sqlite3_step(ppStmt);
  os_log_type_t v18 = VCPLogToOSLogType[4];
  while ((_DWORD)v8 == 100)
  {
    uint64_t v19 = ppStmt;
    uint64_t v20 = sqlite3_column_type(ppStmt, 0);
    if ((_DWORD)v20 == 5
      || (v22 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v19, 0)),  uint64_t v20 = objc_claimAutoreleasedReturnValue(v22),  (v23 = (void *)v20) == 0LL))
    {
      uint64_t v24 = MediaAnalysisLogLevel(v20, v21);
      if ((int)v24 >= 4)
      {
        uint64_t v26 = VCPLogInstance(v24, v25);
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, v18))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  v18,  "Detected bad localIdentifier in ProcessingStatus",  buf,  2u);
        }
      }

      uint64_t v23 = 0LL;
    }

    else
    {
      -[NSMutableArray addObject:](v2, "addObject:", v20);
    }

    uint64_t v8 = sqlite3_step(ppStmt);
  }

  if ((_DWORD)v8 && (_DWORD)v8 != 101)
  {
LABEL_8:

    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  sqlite3_finalize(ppStmt);
  id v9 = v2;
  **(void **)(a1 + 72) = v9;

  return v8;
}

void sub_10003CF8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003D15C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003D188(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  ppStmt = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"SELECT localIdentifier FROM ProcessingStatus "));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"WHERE taskID=(?) AND status=(?) "));
  id v5 = v4;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v4, "appendString:");
  }
  [v3 appendString:v5];
  [v3 appendFormat:@"ORDER BY id ASC;"];
  id v6 = *(sqlite3 **)(*(void *)(a1 + 40) + 24LL);
  id v7 = v3;
  uint64_t v8 = sqlite3_prepare_v2(v6, (const char *)[v7 UTF8String], -1, &ppStmt, 0);
  if ((_DWORD)v8) {
    goto LABEL_6;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
  if ((_DWORD)v8) {
    goto LABEL_6;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 56));
  if ((_DWORD)v8) {
    goto LABEL_6;
  }
  int v11 = sqlite3_expanded_sql(ppStmt);
  int v13 = v11;
  if (v11)
  {
    uint64_t v14 = MediaAnalysisEnableDatabaseLog(v11, v12);
    if ((_DWORD)v14)
    {
      uint64_t v16 = VCPLogInstance(v14, v15);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v31 = 1024;
        int v32 = 2562;
        __int16 v33 = 2080;
        __int16 v34 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v13);
  }

  uint64_t v8 = sqlite3_step(ppStmt);
  os_log_type_t v18 = VCPLogToOSLogType[4];
  while ((_DWORD)v8 == 100)
  {
    uint64_t v19 = ppStmt;
    uint64_t v20 = sqlite3_column_type(ppStmt, 0);
    if ((_DWORD)v20 == 5
      || (v22 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v19, 0)),  uint64_t v20 = objc_claimAutoreleasedReturnValue(v22),  (v23 = (void *)v20) == 0LL))
    {
      uint64_t v24 = MediaAnalysisLogLevel(v20, v21);
      if ((int)v24 >= 4)
      {
        uint64_t v26 = VCPLogInstance(v24, v25);
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, v18))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  v18,  "Detected bad localIdentifier in ProcessingStatus",  buf,  2u);
        }
      }

      uint64_t v23 = 0LL;
    }

    else
    {
      -[NSMutableArray addObject:](v2, "addObject:", v20);
    }

    uint64_t v8 = sqlite3_step(ppStmt);
  }

  if ((_DWORD)v8 && (_DWORD)v8 != 101)
  {
LABEL_6:

    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  sqlite3_finalize(ppStmt);
  id v9 = v2;
  **(void **)(a1 + 64) = v9;

  return v8;
}

void sub_10003D494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003D68C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003D6C4(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  ppStmt = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"SELECT localIdentifier FROM ProcessingStatus "));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"WHERE taskID=(?) AND status=(?) AND errorCode=(?) AND lastAttemptDate>=(?)"));
  id v5 = v4;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v4, "appendString:");
  }
  [v3 appendString:v5];
  [v3 appendFormat:@"ORDER BY id ASC;"];
  id v6 = *(sqlite3 **)(*(void *)(a1 + 40) + 24LL);
  id v7 = v3;
  uint64_t v8 = sqlite3_prepare_v2(v6, (const char *)[v7 UTF8String], -1, &ppStmt, 0);
  if ((_DWORD)v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
  if ((_DWORD)v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 64));
  if ((_DWORD)v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 3, *(void *)(a1 + 72));
  if ((_DWORD)v8) {
    goto LABEL_8;
  }
  uint64_t v8 = sub_100030E6C(ppStmt, 4, *(void **)(a1 + 48));
  if ((_DWORD)v8) {
    goto LABEL_8;
  }
  int v11 = sqlite3_expanded_sql(ppStmt);
  int v13 = v11;
  if (v11)
  {
    uint64_t v14 = MediaAnalysisEnableDatabaseLog(v11, v12);
    if ((_DWORD)v14)
    {
      uint64_t v16 = VCPLogInstance(v14, v15);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        uint64_t v30 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v31 = 1024;
        int v32 = 2617;
        __int16 v33 = 2080;
        __int16 v34 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v13);
  }

  uint64_t v8 = sqlite3_step(ppStmt);
  os_log_type_t v18 = VCPLogToOSLogType[4];
  while ((_DWORD)v8 == 100)
  {
    uint64_t v19 = ppStmt;
    uint64_t v20 = sqlite3_column_type(ppStmt, 0);
    if ((_DWORD)v20 == 5
      || (v22 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v19, 0)),  uint64_t v20 = objc_claimAutoreleasedReturnValue(v22),  (v23 = (void *)v20) == 0LL))
    {
      uint64_t v24 = MediaAnalysisLogLevel(v20, v21);
      if ((int)v24 >= 4)
      {
        uint64_t v26 = VCPLogInstance(v24, v25);
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, v18))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  v18,  "Detected bad localIdentifier in ProcessingStatus",  buf,  2u);
        }
      }

      uint64_t v23 = 0LL;
    }

    else
    {
      -[NSMutableArray addObject:](v2, "addObject:", v20);
    }

    uint64_t v8 = sqlite3_step(ppStmt);
  }

  if ((_DWORD)v8 && (_DWORD)v8 != 101)
  {
LABEL_8:

    uint64_t v2 = 0LL;
  }

  else
  {
    uint64_t v8 = 0LL;
  }

  sqlite3_finalize(ppStmt);
  id v9 = v2;
  **(void **)(a1 + 8sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v9;

  return v8;
}

void sub_10003DA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003DBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003DC00(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24),  (const char *)objc_msgSend( @"SELECT errorCode, errorLine FROM ProcessingStatus WHERE taskID=(?) AND localIdentifier=(?);",
                         "UTF8String"),
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!(_DWORD)v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      id v5 = v4;
      uint64_t v6 = v4
      uint64_t v2 = v6;

      if (!(_DWORD)v2)
      {
        id v7 = sqlite3_expanded_sql(ppStmt);
        id v9 = v7;
        if (v7)
        {
          uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
          if ((_DWORD)v10)
          {
            uint64_t v12 = VCPLogInstance(v10, v11);
            int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315650;
              os_log_type_t v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v19 = 1024;
              int v20 = 2668;
              __int16 v21 = 2080;
              __int16 v22 = v9;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
            }
          }

          sqlite3_free(v9);
        }

        unsigned int v14 = sqlite3_step(ppStmt);
        if (v14 == 100)
        {
          **(void **)(a1 + 56) = sqlite3_column_int64(ppStmt, 0);
          **(void **)(a1 + 64) = sqlite3_column_int64(ppStmt, 1);
          unsigned int v14 = sqlite3_step(ppStmt);
        }

        if (v14 == 101) {
          uint64_t v2 = 0LL;
        }
        else {
          uint64_t v2 = v14;
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003DDE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003DF80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003DFB8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  ppStmt = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"SELECT errorCode, count(*) FROM ProcessingStatus "));
  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"WHERE taskID=(?) AND lastAttemptDate>=(?) "));
  id v5 = v4;
  if (*(void *)(a1 + 32)) {
    objc_msgSend(v4, "appendString:");
  }
  [v3 appendString:v5];
  [v3 appendFormat:@"GROUP BY errorCode;"];
  uint64_t v6 = *(sqlite3 **)(*(void *)(a1 + 40) + 24LL);
  id v7 = v3;
  uint64_t v8 = sqlite3_prepare_v2(v6, (const char *)[v7 UTF8String], -1, &ppStmt, 0);
  if ((_DWORD)v8) {
    goto LABEL_9;
  }
  uint64_t v8 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
  if ((_DWORD)v8) {
    goto LABEL_9;
  }
  id v9 = ppStmt;
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = v10;
  if (v10)
  {
    [v10 timeIntervalSinceReferenceDate];
    uint64_t v13 = sqlite3_bind_double(v9, 2, v12);
  }

  else
  {
    uint64_t v13 = sqlite3_bind_null(v9, 2);
  }

  uint64_t v8 = v13;

  if ((_DWORD)v8) {
    goto LABEL_9;
  }
  uint64_t v16 = sqlite3_expanded_sql(ppStmt);
  os_log_type_t v18 = v16;
  if (v16)
  {
    uint64_t v19 = MediaAnalysisEnableDatabaseLog(v16, v17);
    if ((_DWORD)v19)
    {
      uint64_t v21 = VCPLogInstance(v19, v20);
      __int16 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v36 = 1024;
        LODWORD(v37[0]) = 2706;
        WORD2(v37[0]) = 2080;
        *(void *)((char *)v37 + 6) = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v18);
  }

  uint64_t v8 = sqlite3_step(ppStmt);
  os_log_type_t v23 = VCPLogToOSLogType[4];
  while ((_DWORD)v8 == 100)
  {
    unint64_t v24 = sqlite3_column_int64(ppStmt, 0);
    sqlite3_int64 v25 = sqlite3_column_int64(ppStmt, 1);
    sqlite3_int64 v27 = v25;
    if (v24 < 0x63)
    {
      __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v25));
      int v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v24));
      [v2 setObject:v31 forKey:v32];
    }

    else
    {
      uint64_t v28 = MediaAnalysisLogLevel(v25, v26);
      uint64_t v30 = VCPLogInstance(v28, v29);
      __int16 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      if (os_log_type_enabled(v31, v23))
      {
        *(_DWORD *)__int128 buf = 134218240;
        uint64_t v35 = (const char *)v24;
        __int16 v36 = 2048;
        v37[0] = v27;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  v23,  "Detected bad errorCode %lld in ProcessingStatus with count %lld",  buf,  0x16u);
      }
    }

LABEL_25:
    uint64_t v8 = sqlite3_step(ppStmt);
  }

  if (!(_DWORD)v8 || (_DWORD)v8 == 101)
  {
    uint64_t v8 = 0LL;
    goto LABEL_10;
  }

void sub_10003E31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003E590( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11)
{
}

uint64_t sub_10003E5EC(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "REPLACE INTO ProcessingStatus (taskID, localIdentifier, lastAttemptDate, nextAttemptDate, errorCode, errorLine, mediaType, mediaSubtypes, attempts, status) VALUES ((?), (?), (?), (?), (?), (?), (?), (?), (?), (?));",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 64));
    if (!(_DWORD)v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
      id v5 = v4;
      uint64_t v6 = v4
      uint64_t v2 = v6;

      if (!(_DWORD)v2)
      {
        id v7 = ppStmt;
        id v8 = *(id *)(a1 + 48);
        id v9 = v8;
        if (v8)
        {
          [v8 timeIntervalSinceReferenceDate];
          uint64_t v11 = sqlite3_bind_double(v7, 3, v10);
        }

        else
        {
          uint64_t v11 = sqlite3_bind_null(v7, 3);
        }

        uint64_t v2 = v11;

        if (!(_DWORD)v2)
        {
          uint64_t v2 = sub_100030E6C(ppStmt, 4, *(void **)(a1 + 56));
          if (!(_DWORD)v2)
          {
            uint64_t v2 = sqlite3_bind_int64(ppStmt, 5, *(void *)(a1 + 72));
            if (!(_DWORD)v2)
            {
              uint64_t v2 = sqlite3_bind_int64(ppStmt, 6, *(void *)(a1 + 80));
              if (!(_DWORD)v2)
              {
                uint64_t v2 = sqlite3_bind_int64(ppStmt, 7, *(void *)(a1 + 88));
                if (!(_DWORD)v2)
                {
                  uint64_t v2 = sqlite3_bind_int64(ppStmt, 8, *(void *)(a1 + 96));
                  if (!(_DWORD)v2)
                  {
                    uint64_t v2 = sqlite3_bind_int64(ppStmt, 9, *(void *)(a1 + 104));
                    if (!(_DWORD)v2)
                    {
                      uint64_t v2 = sqlite3_bind_int64(ppStmt, 10, *(void *)(a1 + 112));
                      if (!(_DWORD)v2)
                      {
                        double v12 = sqlite3_expanded_sql(ppStmt);
                        id v14 = v12;
                        if (v12)
                        {
                          uint64_t v15 = MediaAnalysisEnableDatabaseLog(v12, v13);
                          if ((_DWORD)v15)
                          {
                            uint64_t v17 = VCPLogInstance(v15, v16);
                            os_log_type_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
                            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
                            {
                              *(_DWORD *)__int128 buf = 136315650;
                              os_log_type_t v23 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                              __int16 v24 = 1024;
                              int v25 = 2759;
                              __int16 v26 = 2080;
                              sqlite3_int64 v27 = v14;
                              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
                            }
                          }

                          sqlite3_free(v14);
                        }

                        unsigned int v19 = sqlite3_step(ppStmt);
                        if (v19 == 101) {
                          uint64_t v2 = 0LL;
                        }
                        else {
                          uint64_t v2 = v19;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003E884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003EA54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003EA80(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "DELETE FROM ProcessingStatus WHERE taskID=(?) AND localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!(_DWORD)v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      id v5 = v4;
      uint64_t v6 = v4
      uint64_t v2 = v6;

      if (!(_DWORD)v2)
      {
        id v7 = sqlite3_expanded_sql(ppStmt);
        id v9 = v7;
        if (v7)
        {
          uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
          if ((_DWORD)v10)
          {
            uint64_t v12 = VCPLogInstance(v10, v11);
            uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315650;
              os_log_type_t v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v19 = 1024;
              int v20 = 2812;
              __int16 v21 = 2080;
              __int16 v22 = v9;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
            }
          }

          sqlite3_free(v9);
        }

        unsigned int v14 = sqlite3_step(ppStmt);
        if (v14 == 101) {
          uint64_t v2 = 0LL;
        }
        else {
          uint64_t v2 = v14;
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003EC18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10003ED5C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeAllProcessingStatusForTaskID:*(void *)(a1 + 40)];
}

uint64_t sub_10003EEA8(void *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(a1[4] + 24LL),  "DELETE FROM ProcessingStatus WHERE taskID=(?) AND mediaType=(?) AND mediaSubtypes=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[5]);
    if (!(_DWORD)v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!(_DWORD)v2)
      {
        uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, a1[7]);
        if (!(_DWORD)v2)
        {
          uint64_t v3 = sqlite3_expanded_sql(ppStmt);
          if (v3)
          {
            id v4 = v3;
            if (MediaAnalysisEnableDatabaseLog())
            {
              uint64_t v5 = VCPLogInstance();
              uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
              if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315650;
                uint64_t v11 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v12 = 1024;
                int v13 = 2840;
                __int16 v14 = 2080;
                uint64_t v15 = v4;
                _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
              }
            }

            sqlite3_free(v4);
          }

          unsigned int v7 = sqlite3_step(ppStmt);
          if (v7 == 101) {
            uint64_t v2 = 0LL;
          }
          else {
            uint64_t v2 = v7;
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003F1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003F200(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "UPDATE ProcessingStatus SET status=(?), nextAttemptDate=(?), errorCode=(?), errorLine=(?) WHERE taskID=(?) AND localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
    if (!(_DWORD)v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      uint64_t v5 = v4;
      if (v4)
      {
        [v4 timeIntervalSinceReferenceDate];
        uint64_t v7 = sqlite3_bind_double(v3, 2, v6);
      }

      else
      {
        uint64_t v7 = sqlite3_bind_null(v3, 2);
      }

      uint64_t v2 = v7;

      if (!(_DWORD)v2)
      {
        uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, *(void *)(a1 + 64));
        if (!(_DWORD)v2)
        {
          uint64_t v2 = sqlite3_bind_int64(ppStmt, 4, *(void *)(a1 + 72));
          if (!(_DWORD)v2)
          {
            uint64_t v2 = sqlite3_bind_int64(ppStmt, 5, *(void *)(a1 + 80));
            if (!(_DWORD)v2)
            {
              uint64_t v2 = sub_10002F540(ppStmt, 6, *(void **)(a1 + 48));
              if (!(_DWORD)v2)
              {
                uint64_t v8 = sqlite3_expanded_sql(ppStmt);
                uint64_t v10 = v8;
                if (v8)
                {
                  uint64_t v11 = MediaAnalysisEnableDatabaseLog(v8, v9);
                  if ((_DWORD)v11)
                  {
                    uint64_t v13 = VCPLogInstance(v11, v12);
                    __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
                    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
                    {
                      *(_DWORD *)__int128 buf = 136315650;
                      __int16 v19 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                      __int16 v20 = 1024;
                      int v21 = 2868;
                      __int16 v22 = 2080;
                      os_log_type_t v23 = v10;
                      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
                    }
                  }

                  sqlite3_free(v10);
                }

                unsigned int v15 = sqlite3_step(ppStmt);
                if (v15 == 101) {
                  uint64_t v2 = 0LL;
                }
                else {
                  uint64_t v2 = v15;
                }
              }
            }
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_10003F3F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003F578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003F5A8(void *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"UPDATE ProcessingStatus SET status=(?) "));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"WHERE taskID=(?) "));
  id v4 = v3;
  if (a1[4]) {
    objc_msgSend(v3, "appendString:");
  }
  [v4 appendFormat:@"AND status=(?);"];
  [v2 appendString:v4];
  uint64_t v5 = *(sqlite3 **)(a1[5] + 24LL);
  id v6 = v2;
  uint64_t v7 = sqlite3_prepare_v2(v5, (const char *)[v6 UTF8String], -1, &ppStmt, 0);
  if (!(_DWORD)v7)
  {
    uint64_t v7 = sqlite3_bind_int64(ppStmt, 1, 4LL);
    if (!(_DWORD)v7)
    {
      uint64_t v7 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!(_DWORD)v7)
      {
        uint64_t v7 = sqlite3_bind_int64(ppStmt, 3, 1LL);
        if (!(_DWORD)v7)
        {
          uint64_t v8 = sqlite3_expanded_sql(ppStmt);
          uint64_t v10 = v8;
          if (v8)
          {
            uint64_t v11 = MediaAnalysisEnableDatabaseLog(v8, v9);
            if ((_DWORD)v11)
            {
              uint64_t v13 = VCPLogInstance(v11, v12);
              __int16 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
              if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315650;
                __int16 v19 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v20 = 1024;
                int v21 = 2907;
                __int16 v22 = 2080;
                os_log_type_t v23 = v10;
                _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
              }
            }

            sqlite3_free(v10);
          }

          unsigned int v15 = sqlite3_step(ppStmt);
          if (v15 == 101) {
            uint64_t v7 = 0LL;
          }
          else {
            uint64_t v7 = v15;
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);

  return v7;
}

void sub_10003F7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003F9E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003FC88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10003FE64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10003FE98(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  -2592000.0));
  id v3 = [*(id *)(a1 + 32) _removeSchedulingHistoryForStartTimeBefore:v2];
  if (!(_DWORD)v3) {
    id v3 = [*(id *)(a1 + 32) _storeSchedulingHistoryForActivityID:*(void *)(a1 + 48) andStartTime:*(void *)(a1 + 40)];
  }

  return v3;
}

void sub_10003FF04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10003FF18(uint64_t a1)
{
  return [*(id *)(a1 + 32) _storeSchedulingHistoryForActivityID:*(void *)(a1 + 48) andStartTime:*(void *)(a1 + 40)];
}

void sub_1000400CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100040108(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "REPLACE INTO BackgroundActivitySchedulingHistory (activityID, startTime, duration, exitStatus, sessionLog) VALU ES ((?), (?), (?), (?), (?));",
         -1,
         &ppStmt,
         0LL);
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_10;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_10;
  }
  uint64_t v5 = ppStmt;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = v6;
  if (v6)
  {
    [v6 timeIntervalSinceReferenceDate];
    uint64_t v9 = sqlite3_bind_double(v5, 2, v8);
  }

  else
  {
    uint64_t v9 = sqlite3_bind_null(v5, 2);
  }

  uint64_t v4 = v9;

  if ((_DWORD)v4) {
    goto LABEL_10;
  }
  uint64_t v2 = sqlite3_bind_double(ppStmt, 3, *(double *)(a1 + 64));
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_10;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 4, *(int *)(a1 + 72));
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_10;
  }
  uint64_t v2 = sub_10002F540(ppStmt, 5, *(void **)(a1 + 48));
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_10;
  }
  __int16 v22 = sqlite3_expanded_sql(ppStmt);
  __int16 v24 = v22;
  if (v22)
  {
    uint64_t v25 = MediaAnalysisEnableDatabaseLog(v22, v23);
    if ((_DWORD)v25)
    {
      uint64_t v27 = VCPLogInstance(v25, v26);
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        __int16 v31 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v32 = 1024;
        int v33 = 3006;
        __int16 v34 = 2080;
        uint64_t v35 = v24;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v24);
  }

  uint64_t v2 = sqlite3_step(ppStmt);
  uint64_t v4 = v2;
  uint64_t v20 = 0LL;
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 != 101)
    {
LABEL_10:
      uint64_t v10 = MediaAnalysisLogLevel(v2, v3);
      if ((int)v10 >= 3)
      {
        uint64_t v12 = VCPLogInstance(v10, v11);
        uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        os_log_type_t v14 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v13, v14))
        {
          int v15 = *(_DWORD *)(a1 + 72);
          uint64_t v16 = *(const char **)(a1 + 64);
          uint64_t v17 = VCPTaskIDDescription(*(void *)(a1 + 56));
          os_log_type_t v18 = (char *)objc_claimAutoreleasedReturnValue(v17);
          uint64_t v19 = *(void *)(a1 + 40);
          *(_DWORD *)__int128 buf = 134218754;
          __int16 v31 = v16;
          __int16 v32 = 1024;
          int v33 = v15;
          __int16 v34 = 2112;
          uint64_t v35 = v18;
          __int16 v36 = 2112;
          uint64_t v37 = v19;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "[SchedulingHistory] Failed to update (duration: %f, exitStatus: %d) for background activity %@ and start time %@",  buf,  0x26u);
        }
      }

      uint64_t v20 = v4;
    }
  }

  sqlite3_finalize(ppStmt);
  return v20;
}

void sub_1000403A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100040588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000405CC(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT activityID, startTime, duration, exitStatus, sessionLog FROM BackgroundActivitySchedulingHistory WHERE a ctivityID=(?) AND startTime>=(?);",
         -1,
         &ppStmt,
         0LL);
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_7;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 56));
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_7;
  }
  uint64_t v5 = ppStmt;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = v6;
  if (v6)
  {
    [v6 timeIntervalSinceReferenceDate];
    uint64_t v9 = sqlite3_bind_double(v5, 2, v8);
  }

  else
  {
    uint64_t v9 = sqlite3_bind_null(v5, 2);
  }

  uint64_t v4 = v9;

  if ((_DWORD)v4) {
    goto LABEL_7;
  }
  uint64_t v20 = sqlite3_expanded_sql(ppStmt);
  __int16 v22 = v20;
  if (v20)
  {
    uint64_t v23 = MediaAnalysisEnableDatabaseLog(v20, v21);
    if ((_DWORD)v23)
    {
      uint64_t v25 = VCPLogInstance(v23, v24);
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        __int16 v36 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v37 = 1024;
        int v38 = 3033;
        __int16 v39 = 2080;
        __int128 v40 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v22);
  }

  uint64_t v2 = sqlite3_step(ppStmt);
  uint64_t v4 = v2;
  while ((_DWORD)v4 == 100)
  {
    id v27 = objc_alloc_init(&OBJC_CLASS___MADActivitySchedulingRecord);
    [v27 setActivityID:*(void *)(a1 + 56)];
    uint64_t v28 = ppStmt;
    if (sqlite3_column_type(ppStmt, 1) == 5)
    {
      uint64_t v29 = 0LL;
    }

    else
    {
      uint64_t v30 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  sqlite3_column_double(v28, 1));
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(v30);
    }

    [v27 setStartTime:v29];

    objc_msgSend(v27, "setDuration:", sqlite3_column_double(ppStmt, 2));
    objc_msgSend(v27, "setExitStatus:", sqlite3_column_int64(ppStmt, 3));
    __int16 v31 = ppStmt;
    if (sqlite3_column_type(ppStmt, 4) == 5)
    {
      __int16 v32 = 0LL;
    }

    else
    {
      int v33 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v31, 4));
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(v33);
    }

    [v27 setSessionLog:v32];

    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:v27];
    uint64_t v4 = sqlite3_step(ppStmt);
  }

  if ((_DWORD)v4 && (_DWORD)v4 != 101)
  {
LABEL_7:
    uint64_t v10 = MediaAnalysisLogLevel(v2, v3);
    if ((int)v10 >= 3)
    {
      uint64_t v12 = VCPLogInstance(v10, v11);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      os_log_type_t v14 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = VCPTaskIDDescription(*(void *)(a1 + 56));
        uint64_t v16 = (char *)objc_claimAutoreleasedReturnValue(v15);
        *(_DWORD *)__int128 buf = 138412546;
        __int16 v36 = v16;
        __int16 v37 = 1024;
        int v38 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "[SchedulingHistory] Failed to query history %@ (%d)",  buf,  0x12u);
      }
    }

    uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8LL);
    os_log_type_t v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  sqlite3_finalize(ppStmt);
  return v4;
}

void sub_100040938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100040AA4(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "DELETE FROM BackgroundActivitySchedulingHistory WHERE activityID=(?) AND id NOT IN (SELECT id FROM BackgroundAc tivitySchedulingHistory WHERE activityID=(?) ORDER BY startTime DESC LIMIT (?));",
         -1,
         &ppStmt,
         0LL);
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_5;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 40));
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_5;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 40));
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_5;
  }
  uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, 500LL);
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_5;
  }
  uint64_t v11 = sqlite3_expanded_sql(ppStmt);
  if (v11)
  {
    uint64_t v12 = v11;
    if (MediaAnalysisEnableDatabaseLog())
    {
      uint64_t v13 = VCPLogInstance();
      os_log_type_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        uint64_t v17 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v18 = 1024;
        LODWORD(v19[0]) = 3077;
        WORD2(v19[0]) = 2080;
        *(void *)((char *)v19 + 6) = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v12);
  }

  uint64_t v2 = sqlite3_step(ppStmt);
  uint64_t v9 = 0LL;
  if ((_DWORD)v2)
  {
    uint64_t v4 = v2;
    if ((_DWORD)v2 != 101)
    {
LABEL_5:
      if ((int)MediaAnalysisLogLevel(v2, v3) >= 3)
      {
        uint64_t v5 = VCPLogInstance();
        id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
        os_log_type_t v7 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v6, v7))
        {
          double v8 = *(const char **)(a1 + 40);
          *(_DWORD *)__int128 buf = 134218240;
          uint64_t v17 = v8;
          __int16 v18 = 2048;
          v19[0] = 500LL;
          _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Failed to remove scheduling history for background activity %lu over limit %lu",  buf,  0x16u);
        }
      }

      uint64_t v9 = v4;
    }
  }

  sqlite3_finalize(ppStmt);
  return v9;
}

void sub_100040F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000411D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100041548(uint64_t a1)
{
  return [*(id *)(a1 + 32) _storeProgressForActivityID:*(void *)(a1 + 40) withAnalysisSubtype:*(void *)(a1 + 48) version:*(void *)(a1 + 56) processedAssetCount:*(void *)(a1 + 64) totalAssetCount:*(void *)(a1 + 72)];
}

id sub_10004155C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _storeProgressForActivityID:*(void *)(a1 + 40) withAnalysisSubtype:*(void *)(a1 + 48) version:*(void *)(a1 + 56) processedAssetCount:*(void *)(a1 + 64) totalAssetCount:*(void *)(a1 + 72)];
}

id sub_100041690(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  -2592000.0));
  id v3 = [*(id *)(a1 + 32) _removeProgressRecordsBeforeDate:v2];
  if (!(_DWORD)v3) {
    id v3 = [*(id *)(a1 + 32) _removeProgressRecordsBeyondMaximum:500];
  }

  return v3;
}

void sub_1000416FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004187C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000418AC(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "REPLACE INTO PrioritizedAssets  (localIdentifier, mediaType, mediaSubtype) VALUES ((?), (?), (?));",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    id v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    uint64_t v6 = v4
    uint64_t v2 = v6;

    if (!(_DWORD)v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 48));
      if (!(_DWORD)v2)
      {
        uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, *(void *)(a1 + 56));
        if (!(_DWORD)v2)
        {
          os_log_type_t v7 = sqlite3_expanded_sql(ppStmt);
          uint64_t v9 = v7;
          if (v7)
          {
            uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
            if ((_DWORD)v10)
            {
              uint64_t v12 = VCPLogInstance(v10, v11);
              uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315650;
                __int16 v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v19 = 1024;
                int v20 = 3225;
                __int16 v21 = 2080;
                __int16 v22 = v9;
                _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
              }
            }

            sqlite3_free(v9);
          }

          unsigned int v14 = sqlite3_step(ppStmt);
          if (v14 == 101) {
            uint64_t v2 = 0LL;
          }
          else {
            uint64_t v2 = v14;
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100041A64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100041BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100041C04(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "DELETE FROM PrioritizedAssets  WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    id v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    uint64_t v6 = v4
    uint64_t v2 = v6;

    if (!(_DWORD)v2)
    {
      os_log_type_t v7 = sqlite3_expanded_sql(ppStmt);
      uint64_t v9 = v7;
      if (v7)
      {
        uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
        if ((_DWORD)v10)
        {
          uint64_t v12 = VCPLogInstance(v10, v11);
          uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            __int16 v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v19 = 1024;
            int v20 = 3244;
            __int16 v21 = 2080;
            __int16 v22 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
          }
        }

        sqlite3_free(v9);
      }

      unsigned int v14 = sqlite3_step(ppStmt);
      if (v14 == 101) {
        uint64_t v2 = 0LL;
      }
      else {
        uint64_t v2 = v14;
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100041D84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100041F48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100041F70(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  @"SELECT localIdentifier FROM PrioritizedAssets WHERE mediaType=(?) AND "));
  id v3 = v2;
  if (*(_BYTE *)(a1 + 72)) {
    [v2 appendString:@"NOT "];
  }
  [v3 appendString:@"(mediaSubtype & (?)) LIMIT (?);"];
  id v4 = *(sqlite3 **)(*(void *)(a1 + 32) + 24LL);
  id v5 = v3;
  uint64_t v6 = sqlite3_prepare_v2(v4, (const char *)[v5 UTF8String], -1, &ppStmt, 0);
  if (!(_DWORD)v6)
  {
    uint64_t v6 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!(_DWORD)v6)
    {
      uint64_t v6 = sqlite3_bind_int64(ppStmt, 2, *(void *)(a1 + 56));
      if (!(_DWORD)v6)
      {
        uint64_t v6 = sqlite3_bind_int64(ppStmt, 3, *(void *)(a1 + 64));
        if (!(_DWORD)v6)
        {
          os_log_type_t v7 = sqlite3_expanded_sql(ppStmt);
          uint64_t v9 = v7;
          if (v7)
          {
            uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
            if ((_DWORD)v10)
            {
              uint64_t v12 = VCPLogInstance(v10, v11);
              uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315650;
                __int16 v21 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v22 = 1024;
                int v23 = 3272;
                __int16 v24 = 2080;
                uint64_t v25 = v9;
                _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
              }
            }

            sqlite3_free(v9);
          }

          unsigned int v14 = sqlite3_step(ppStmt);
          while (v14 == 100)
          {
            uint64_t v15 = ppStmt;
            if (sqlite3_column_type(ppStmt, 0) == 5)
            {
              uint64_t v16 = 0LL;
            }

            else
            {
              uint64_t v17 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v15, 0));
              uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(v17);
            }

            [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v16];
            unsigned int v14 = sqlite3_step(ppStmt);
          }

          if (v14 == 101) {
            uint64_t v6 = 0LL;
          }
          else {
            uint64_t v6 = v14;
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);

  return v6;
}

void sub_1000421C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100042380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000423B8(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT count(*) FROM PrioritizedAssets WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    id v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    id v5 = v4;
    uint64_t v6 = v4
    uint64_t v2 = v6;

    if (!(_DWORD)v2)
    {
      os_log_type_t v7 = sqlite3_expanded_sql(ppStmt);
      uint64_t v9 = v7;
      if (v7)
      {
        uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
        if ((_DWORD)v10)
        {
          uint64_t v12 = VCPLogInstance(v10, v11);
          uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            __int16 v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v19 = 1024;
            int v20 = 3300;
            __int16 v21 = 2080;
            __int16 v22 = v9;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
          }
        }

        sqlite3_free(v9);
      }

      unsigned int v14 = sqlite3_step(ppStmt);
      if (v14 == 100)
      {
        *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = sqlite3_column_int(ppStmt, 0);
        unsigned int v14 = sqlite3_step(ppStmt);
      }

      if (v14 == 101) {
        uint64_t v2 = 0LL;
      }
      else {
        uint64_t v2 = v14;
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100042568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000426B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000426C8(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v1 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "DELETE FROM PrioritizedAssets;",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v1)
  {
    uint64_t v2 = sqlite3_expanded_sql(ppStmt);
    if (v2)
    {
      id v3 = v2;
      if (MediaAnalysisEnableDatabaseLog())
      {
        uint64_t v4 = VCPLogInstance();
        id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315650;
          uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
          __int16 v11 = 1024;
          int v12 = 3323;
          __int16 v13 = 2080;
          unsigned int v14 = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
        }
      }

      sqlite3_free(v3);
    }

    unsigned int v6 = sqlite3_step(ppStmt);
    if (v6 == 101) {
      uint64_t v1 = 0LL;
    }
    else {
      uint64_t v1 = v6;
    }
  }

  sqlite3_finalize(ppStmt);
  return v1;
}

void sub_100042B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100042DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100042DF8(id *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithString:]( &OBJC_CLASS___NSMutableString,  "stringWithString:",  @"SELECT localIdentifier, version, dateModified, dateAnalyzed, analysisTypes, flags, statsFlags, quality, masterFingerprint, adjustedFingerprint FROM Assets WHERE localIdentifier IN (?"));
  [v2 appendString:@";"]);
  uint64_t v4 = (sqlite3 *)*((void *)a1[5] + 3);
  id v28 = v2;
  uint64_t v5 = sqlite3_prepare_v2(v4, (const char *)[v28 UTF8String], -1, &ppStmt, 0);
  if (!(_DWORD)v5)
  {
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    id v6 = a1[4];
    id v7 = [v6 countByEnumeratingWithState:&v29 objects:v40 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v30;
      int v9 = 1;
      while (2)
      {
        for (j = 0LL; j != v7; j = (char *)j + 1)
        {
          if (*(void *)v30 != v8) {
            objc_enumerationMutation(v6);
          }
          __int16 v11 = ppStmt;
          id v12 = *(id *)(*((void *)&v29 + 1) + 8LL * (void)j);
          __int16 v13 = v12;
          if (v12) {
            uint64_t v14 = sqlite3_bind_text( v11,  v9 + (_DWORD)j,  (const char *)[objc_retainAutorelease(v12) UTF8String],  -1,  0);
          }
          else {
            uint64_t v14 = sqlite3_bind_null(v11, v9 + (_DWORD)j);
          }
          uint64_t v5 = v14;

          if ((_DWORD)v5)
          {

            goto LABEL_34;
          }
        }

        id v7 = [v6 countByEnumeratingWithState:&v29 objects:v40 count:16];
        v9 += (int)j;
        if (v7) {
          continue;
        }
        break;
      }
    }

    uint64_t v15 = sqlite3_expanded_sql(ppStmt);
    uint64_t v17 = v15;
    if (v15)
    {
      uint64_t v18 = MediaAnalysisEnableDatabaseLog(v15, v16);
      if ((_DWORD)v18)
      {
        uint64_t v20 = VCPLogInstance(v18, v19);
        __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)__int128 buf = 136315650;
          uint64_t v35 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
          __int16 v36 = 1024;
          int v37 = 3393;
          __int16 v38 = 2080;
          __int16 v39 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
        }
      }

      sqlite3_free(v17);
    }

    int v22 = sqlite3_step(ppStmt);
    while (v22 == 100)
    {
      int v23 = ppStmt;
      if (sqlite3_column_type(ppStmt, 0) == 5)
      {
        __int16 v24 = 0LL;
      }

      else
      {
        uint64_t v25 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v23, 0));
        __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(v25);
      }

      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      uint64_t v5 = (uint64_t)[a1[5] parseHeader:ppStmt startColumn:1 analysis:v26];
      if ((_DWORD)v5)
      {

        goto LABEL_34;
      }

      [a1[6] setObject:v26 forKeyedSubscript:v24];
      int v22 = sqlite3_step(ppStmt);
    }

    if (v22 == 101) {
      uint64_t v5 = 0LL;
    }
    else {
      uint64_t v5 = 4294967278LL;
    }
  }

void sub_100043164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100043314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100043340(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT key, value FROM KeyValueStore;",
         -1,
         &ppStmt,
         0LL);
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_2;
  }
  uint64_t v10 = sqlite3_expanded_sql(ppStmt);
  id v12 = v10;
  if (v10)
  {
    uint64_t v13 = MediaAnalysisEnableDatabaseLog(v10, v11);
    if ((_DWORD)v13)
    {
      uint64_t v15 = VCPLogInstance(v13, v14);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        __int128 v31 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v32 = 1024;
        int v33 = 3422;
        __int16 v34 = 2080;
        uint64_t v35 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v12);
  }

  uint64_t v2 = sqlite3_step(ppStmt);
  uint64_t v4 = v2;
  os_log_type_t v17 = VCPLogToOSLogType[4];
  while ((_DWORD)v4 == 100)
  {
    uint64_t v18 = ppStmt;
    uint64_t v19 = sqlite3_column_type(ppStmt, 0);
    if ((_DWORD)v19 != 5)
    {
      __int16 v21 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v18, 0));
      uint64_t v19 = objc_claimAutoreleasedReturnValue(v21);
      int v22 = (void *)v19;
      if (v19)
      {
        int v23 = +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  sqlite3_column_int64(ppStmt, 1));
        __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
        [*(id *)(a1 + 40) setObject:v24 forKeyedSubscript:v22];
LABEL_21:

        goto LABEL_23;
      }
    }

    uint64_t v25 = MediaAnalysisLogLevel(v19, v20);
    if ((int)v25 >= 4)
    {
      uint64_t v27 = VCPLogInstance(v25, v26);
      __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled((os_log_t)v24, v17))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v24,  v17,  "Parsed a value without key specified; skipping this value",
          buf,
          2u);
      }

      int v22 = 0LL;
      goto LABEL_21;
    }

    int v22 = 0LL;
LABEL_23:
    uint64_t v4 = sqlite3_step(ppStmt);
  }

  if (!(_DWORD)v4 || (_DWORD)v4 == 101)
  {
    uint64_t v4 = 0LL;
    goto LABEL_27;
  }

void sub_100043600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000437A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000437DC(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT * FROM KeyValueStore WHERE key = (?);",
         -1,
         &ppStmt,
         0LL);
  uint64_t v4 = v2;
  if ((_DWORD)v2) {
    goto LABEL_6;
  }
  uint64_t v5 = ppStmt;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = v6;
  uint64_t v8 = v6
  uint64_t v4 = v8;

  if ((_DWORD)v4) {
    goto LABEL_6;
  }
  os_log_type_t v17 = sqlite3_expanded_sql(ppStmt);
  uint64_t v19 = v17;
  if (v17)
  {
    uint64_t v20 = MediaAnalysisEnableDatabaseLog(v17, v18);
    if ((_DWORD)v20)
    {
      uint64_t v22 = VCPLogInstance(v20, v21);
      int v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        uint64_t v26 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v27 = 1024;
        int v28 = 3455;
        __int16 v29 = 2080;
        __int128 v30 = v19;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v19);
  }

  uint64_t v2 = sqlite3_step(ppStmt);
  uint64_t v4 = v2;
  if ((_DWORD)v2 == 100)
  {
    uint64_t v2 = sqlite3_step(ppStmt);
    uint64_t v4 = v2;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }

  uint64_t v15 = 0LL;
  if ((_DWORD)v4)
  {
    if ((_DWORD)v4 != 101)
    {
LABEL_6:
      uint64_t v9 = MediaAnalysisLogLevel(v2, v3);
      if ((int)v9 >= 3)
      {
        uint64_t v11 = VCPLogInstance(v9, v10);
        id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        os_log_type_t v13 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v12, v13))
        {
          uint64_t v14 = *(const char **)(a1 + 40);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v26 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "Failed to check if key %@ exists in KeyValueStore",  buf,  0xCu);
        }
      }

      uint64_t v15 = v4;
    }
  }

  sqlite3_finalize(ppStmt);
  return v15;
}

void sub_100043A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100043B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100043BD4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _queryValue:*(void *)(*(void *)(a1 + 48) + 8) + 24 forKey:*(void *)(a1 + 40)];
}

void sub_100043D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100043D70(uint64_t a1)
{
  return [*(id *)(a1 + 32) _setValue:*(void *)(a1 + 48) forKey:*(void *)(a1 + 40)];
}

void sub_100043ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100043EFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removeKey:*(void *)(a1 + 40)];
}

void sub_100044060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004408C(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "UPDATE Assets SET statsFlags=(?) WHERE localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!(_DWORD)v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      uint64_t v5 = v4;
      uint64_t v6 = v4
      uint64_t v2 = v6;

      if (!(_DWORD)v2)
      {
        uint64_t v7 = sqlite3_expanded_sql(ppStmt);
        uint64_t v9 = v7;
        if (v7)
        {
          uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
          if ((_DWORD)v10)
          {
            uint64_t v12 = VCPLogInstance(v10, v11);
            os_log_type_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315650;
              uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v19 = 1024;
              int v20 = 3511;
              __int16 v21 = 2080;
              uint64_t v22 = v9;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
            }
          }

          sqlite3_free(v9);
        }

        unsigned int v14 = sqlite3_step(ppStmt);
        if (v14 == 101) {
          uint64_t v2 = 0LL;
        }
        else {
          uint64_t v2 = v14;
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100044224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100044394( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000443B4(void *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(a1[4] + 24LL),  "SELECT count(*) FROM Assets WHERE (statsFlags & (?))=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!(_DWORD)v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!(_DWORD)v2)
      {
        uint64_t v3 = sqlite3_expanded_sql(ppStmt);
        if (v3)
        {
          id v4 = v3;
          if (MediaAnalysisEnableDatabaseLog())
          {
            uint64_t v5 = VCPLogInstance();
            uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
            if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315650;
              uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v11 = 1024;
              int v12 = 3530;
              __int16 v13 = 2080;
              unsigned int v14 = v4;
              _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
            }
          }

          sqlite3_free(v4);
        }

        uint64_t v2 = sqlite3_step(ppStmt);
        if ((_DWORD)v2 == 100)
        {
          uint64_t v2 = 0LL;
          *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = sqlite3_column_int(ppStmt, 0);
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100044698( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000446B8(void *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(a1[4] + 24LL),  "SELECT count(*) FROM Assets WHERE (statsFlags & (?))=(?) AND statsFlags & (?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!(_DWORD)v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!(_DWORD)v2)
      {
        uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, a1[7]);
        if (!(_DWORD)v2)
        {
          uint64_t v3 = sqlite3_expanded_sql(ppStmt);
          if (v3)
          {
            id v4 = v3;
            if (MediaAnalysisEnableDatabaseLog())
            {
              uint64_t v5 = VCPLogInstance();
              uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
              if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315650;
                uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v11 = 1024;
                int v12 = 3553;
                __int16 v13 = 2080;
                unsigned int v14 = v4;
                _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
              }
            }

            sqlite3_free(v4);
          }

          uint64_t v2 = sqlite3_step(ppStmt);
          if ((_DWORD)v2 == 100)
          {
            uint64_t v2 = 0LL;
            *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = sqlite3_column_int(ppStmt, 0);
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_1000449B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000449D4(void *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(a1[4] + 24LL),  "SELECT count(*) FROM Assets WHERE (statsFlags & (?))=(?) AND (analysisTypes & (?))=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!(_DWORD)v2)
    {
      uint64_t v2 = sqlite3_bind_int64(ppStmt, 2, a1[6]);
      if (!(_DWORD)v2)
      {
        uint64_t v2 = sqlite3_bind_int64(ppStmt, 3, a1[7]);
        if (!(_DWORD)v2)
        {
          uint64_t v2 = sqlite3_bind_int64(ppStmt, 4, a1[7]);
          if (!(_DWORD)v2)
          {
            uint64_t v3 = sqlite3_expanded_sql(ppStmt);
            if (v3)
            {
              id v4 = v3;
              if (MediaAnalysisEnableDatabaseLog())
              {
                uint64_t v5 = VCPLogInstance();
                uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
                if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)__int128 buf = 136315650;
                  uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                  __int16 v11 = 1024;
                  int v12 = 3577;
                  __int16 v13 = 2080;
                  unsigned int v14 = v4;
                  _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
                }
              }

              sqlite3_free(v4);
            }

            uint64_t v2 = sqlite3_step(ppStmt);
            if ((_DWORD)v2 == 100)
            {
              uint64_t v2 = 0LL;
              *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = sqlite3_column_int(ppStmt, 0);
            }
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100044E4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100044EDC(id a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];

  return 0;
}

void sub_100044F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100045060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100045254( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_10004527C(void *a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(a1[4] + 24LL),  "SELECT COUNT(*) FROM Results WHERE resultsType=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, a1[6]);
    if (!(_DWORD)v2)
    {
      uint64_t v3 = sqlite3_expanded_sql(ppStmt);
      if (v3)
      {
        id v4 = v3;
        if (MediaAnalysisEnableDatabaseLog())
        {
          uint64_t v5 = VCPLogInstance();
          uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
          if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)__int128 buf = 136315650;
            uint64_t v10 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
            __int16 v11 = 1024;
            int v12 = 3636;
            __int16 v13 = 2080;
            unsigned int v14 = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
          }
        }

        sqlite3_free(v4);
      }

      uint64_t v2 = sqlite3_step(ppStmt);
      if ((_DWORD)v2 == 100)
      {
        uint64_t v2 = 0LL;
        *(void *)(*(void *)(a1[5] + 8LL) + 24LL) = sqlite3_column_int(ppStmt, 0);
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100045430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000455B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000455F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _storeAnalysis:*(void *)(a1 + 40) forLocalIdentifier:*(void *)(a1 + 48)];
}

int sub_100045600(id a1)
{
  return -50;
}

void sub_100045760( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_100045780(uint64_t a1)
{
  return 0LL;
}

void sub_100045934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004596C(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "SELECT count(*) FROM Assets WHERE dateAnalyzed >= (?) AND dateAnalyzed <= (?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v3 = ppStmt;
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = v4;
    if (v4)
    {
      [v4 timeIntervalSinceReferenceDate];
      uint64_t v7 = sqlite3_bind_double(v3, 1, v6);
    }

    else
    {
      uint64_t v7 = sqlite3_bind_null(v3, 1);
    }

    uint64_t v2 = v7;

    if (!(_DWORD)v2)
    {
      uint64_t v8 = ppStmt;
      id v9 = (id)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      uint64_t v10 = v9;
      if (v9)
      {
        [v9 timeIntervalSinceReferenceDate];
        uint64_t v12 = sqlite3_bind_double(v8, 2, v11);
      }

      else
      {
        uint64_t v12 = sqlite3_bind_null(v8, 2);
      }

      uint64_t v2 = v12;

      if (!(_DWORD)v2)
      {
        __int16 v13 = sqlite3_expanded_sql(ppStmt);
        uint64_t v15 = v13;
        if (v13)
        {
          uint64_t v16 = MediaAnalysisEnableDatabaseLog(v13, v14);
          if ((_DWORD)v16)
          {
            uint64_t v18 = VCPLogInstance(v16, v17);
            __int16 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315650;
              int v23 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v24 = 1024;
              int v25 = 3698;
              __int16 v26 = 2080;
              __int16 v27 = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
            }
          }

          sqlite3_free(v15);
        }

        uint64_t v2 = sqlite3_step(ppStmt);
        if ((_DWORD)v2 == 100)
        {
          uint64_t v2 = 0LL;
          *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = sqlite3_column_int(ppStmt, 0);
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100045B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100045CB8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  ppStmt = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"SELECT localIdentifier, requestDate FROM MomentsScheduledAssets WHERE taskID=(?);"));
  id v4 = *(sqlite3 **)(*(void *)(a1 + 32) + 24LL);
  id v5 = v3;
  uint64_t v6 = sqlite3_prepare_v2(v4, (const char *)[v5 UTF8String], -1, &ppStmt, 0);
  if ((_DWORD)v6) {
    goto LABEL_3;
  }
  uint64_t v6 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 40));
  if ((_DWORD)v6) {
    goto LABEL_3;
  }
  id v9 = sqlite3_expanded_sql(ppStmt);
  double v11 = v9;
  if (v9)
  {
    uint64_t v12 = MediaAnalysisEnableDatabaseLog(v9, v10);
    if ((_DWORD)v12)
    {
      uint64_t v14 = VCPLogInstance(v12, v13);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        __int128 v31 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v32 = 1024;
        int v33 = 3727;
        __int16 v34 = 2080;
        uint64_t v35 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v11);
  }

  uint64_t v6 = sqlite3_step(ppStmt);
  os_log_type_t v16 = VCPLogToOSLogType[4];
  while ((_DWORD)v6 == 100)
  {
    uint64_t v17 = ppStmt;
    if (sqlite3_column_type(ppStmt, 0) == 5)
    {
      uint64_t v18 = 0LL;
    }

    else
    {
      __int16 v19 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v17, 0));
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue(v19);
    }

    int v20 = ppStmt;
    uint64_t v21 = sqlite3_column_type(ppStmt, 1);
    if ((_DWORD)v21 == 5)
    {
      int v23 = 0LL;
      if (v18) {
        goto LABEL_18;
      }
    }

    else
    {
      int v25 = +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  sqlite3_column_double(v20, 1));
      uint64_t v21 = objc_claimAutoreleasedReturnValue(v25);
      int v23 = (void *)v21;
      if (v18)
      {
LABEL_18:
        __int16 v24 = (void *)objc_claimAutoreleasedReturnValue( +[MADDeferredProcessingEntry entryWithLocalIdentifier:requestDate:]( &OBJC_CLASS___MADDeferredProcessingEntry,  "entryWithLocalIdentifier:requestDate:",  v18,  v23));
        [v2 addObject:v24];
LABEL_19:

        goto LABEL_20;
      }
    }

    uint64_t v26 = MediaAnalysisLogLevel(v21, v22);
    if ((int)v26 >= 4)
    {
      uint64_t v28 = VCPLogInstance(v26, v27);
      __int16 v24 = (void *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled((os_log_t)v24, v16))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v24,  v16,  "Detected bad localIdentifier in MomentsScheduledAssets",  buf,  2u);
      }

      goto LABEL_19;
    }

void sub_100045FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100046148(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  ppStmt = 0LL;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"SELECT localIdentifier, taskID FROM MomentsScheduledAssets;"));
  id v4 = *(sqlite3 **)(*(void *)(a1 + 32) + 24LL);
  id v5 = v3;
  uint64_t v6 = sqlite3_prepare_v2(v4, (const char *)[v5 UTF8String], -1, &ppStmt, 0);
  if ((_DWORD)v6) {
    goto LABEL_2;
  }
  id v7 = sqlite3_expanded_sql(ppStmt);
  id v9 = v7;
  if (v7)
  {
    uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
    if ((_DWORD)v10)
    {
      uint64_t v12 = VCPLogInstance(v10, v11);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)__int128 buf = 136315650;
        __int128 v31 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
        __int16 v32 = 1024;
        int v33 = 3761;
        __int16 v34 = 2080;
        uint64_t v35 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
      }
    }

    sqlite3_free(v9);
  }

  uint64_t v6 = sqlite3_step(ppStmt);
  os_log_type_t v14 = VCPLogToOSLogType[4];
  while ((_DWORD)v6 == 100)
  {
    uint64_t v15 = ppStmt;
    uint64_t v16 = sqlite3_column_type(ppStmt, 0);
    if ((_DWORD)v16 == 5
      || (v18 = +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  sqlite3_column_text(v15, 0)),  uint64_t v16 = objc_claimAutoreleasedReturnValue(v18),  (v19 = (void *)v16) == 0LL))
    {
      uint64_t v23 = MediaAnalysisLogLevel(v16, v17);
      if ((int)v23 < 4)
      {
        __int16 v19 = 0LL;
        goto LABEL_22;
      }

      uint64_t v25 = VCPLogInstance(v23, v24);
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v22, v14))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  v14,  "Detected bad localIdentifier in MomentsScheduledAssets",  buf,  2u);
      }

      __int16 v19 = 0LL;
    }

    else
    {
      sqlite3_int64 v20 = sqlite3_column_int64(ppStmt, 1);
      uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v19]);
      uint64_t v22 = v21;
      if (v21)
      {
        -[os_log_s addIndex:](v21, "addIndex:", v20);
      }

      else
      {
        uint64_t v26 = objc_claimAutoreleasedReturnValue(+[NSMutableIndexSet indexSetWithIndex:](&OBJC_CLASS___NSMutableIndexSet, "indexSetWithIndex:", v20));
        [v2 setObject:v26 forKeyedSubscript:v19];
        uint64_t v22 = (os_log_s *)v26;
      }
    }

LABEL_22:
    uint64_t v6 = sqlite3_step(ppStmt);
  }

  if (!(_DWORD)v6 || (_DWORD)v6 == 101)
  {
    uint64_t v6 = 0LL;
    goto LABEL_26;
  }

void sub_10004643C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100046608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100046638(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "REPLACE INTO MomentsScheduledAssets (taskID, localIdentifier, requestDate) VALUES ((?), (?), (?));",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!(_DWORD)v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      id v5 = v4;
      uint64_t v6 = v4
      uint64_t v2 = v6;

      if (!(_DWORD)v2)
      {
        id v7 = ppStmt;
        id v8 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
        id v9 = v8;
        if (v8)
        {
          [v8 timeIntervalSinceReferenceDate];
          uint64_t v11 = sqlite3_bind_double(v7, 3, v10);
        }

        else
        {
          uint64_t v11 = sqlite3_bind_null(v7, 3);
        }

        uint64_t v2 = v11;

        if (!(_DWORD)v2)
        {
          uint64_t v12 = sqlite3_expanded_sql(ppStmt);
          os_log_type_t v14 = v12;
          if (v12)
          {
            uint64_t v15 = MediaAnalysisEnableDatabaseLog(v12, v13);
            if ((_DWORD)v15)
            {
              uint64_t v17 = VCPLogInstance(v15, v16);
              uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)__int128 buf = 136315650;
                uint64_t v23 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
                __int16 v24 = 1024;
                int v25 = 3802;
                __int16 v26 = 2080;
                id v27 = v14;
                _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
              }
            }

            sqlite3_free(v14);
          }

          unsigned int v19 = sqlite3_step(ppStmt);
          if (v19 == 101) {
            uint64_t v2 = 0LL;
          }
          else {
            uint64_t v2 = v19;
          }
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100046824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004699C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000469C8(uint64_t a1)
{
  ppStmt = 0LL;
  uint64_t v2 = sqlite3_prepare_v2( *(sqlite3 **)(*(void *)(a1 + 32) + 24LL),  "DELETE FROM MomentsScheduledAssets WHERE taskID=(?) AND localIdentifier=(?);",
         -1,
         &ppStmt,
         0LL);
  if (!(_DWORD)v2)
  {
    uint64_t v2 = sqlite3_bind_int64(ppStmt, 1, *(void *)(a1 + 48));
    if (!(_DWORD)v2)
    {
      uint64_t v3 = ppStmt;
      id v4 = *(id *)(a1 + 40);
      id v5 = v4;
      uint64_t v6 = v4
      uint64_t v2 = v6;

      if (!(_DWORD)v2)
      {
        id v7 = sqlite3_expanded_sql(ppStmt);
        id v9 = v7;
        if (v7)
        {
          uint64_t v10 = MediaAnalysisEnableDatabaseLog(v7, v8);
          if ((_DWORD)v10)
          {
            uint64_t v12 = VCPLogInstance(v10, v11);
            uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)__int128 buf = 136315650;
              uint64_t v18 = "/Library/Caches/com.apple.xbs/Sources/MediaAnalysis/Daemon/Photos/DatabaseWriter.mm";
              __int16 v19 = 1024;
              int v20 = 3821;
              __int16 v21 = 2080;
              uint64_t v22 = v9;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEBUG,  "[MADB] Statement: %s[line:%d]: %s",  buf,  0x1Cu);
            }
          }

          sqlite3_free(v9);
        }

        unsigned int v14 = sqlite3_step(ppStmt);
        if (v14 == 101) {
          uint64_t v2 = 0LL;
        }
        else {
          uint64_t v2 = v14;
        }
      }
    }
  }

  sqlite3_finalize(ppStmt);
  return v2;
}

void sub_100046B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100046B78(int a1, os_log_s *a2)
{
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "[VCPDatabaseWriter] Failed to set busy handler: %d",  (uint8_t *)v2,  8u);
}

void sub_100046BEC(uint64_t a1, uint64_t a2, os_log_t log)
{
  if (*(_BYTE *)(a1 + 64)) {
    uint64_t v3 = "write";
  }
  else {
    uint64_t v3 = "read";
  }
  int v4 = *(_DWORD *)(*(void *)(*(void *)a2 + 8LL) + 24LL);
  int v5 = 136315394;
  uint64_t v6 = v3;
  __int16 v7 = 1024;
  int v8 = v4;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "Multiple %s database errors (%d); re-creating",
    (uint8_t *)&v5,
    0x12u);
}

void sub_100046F1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100046F4C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_100046F94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10004701C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000470F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100047844( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20, void *a21, void *a22)
{
}

LABEL_57:
          }

          if ((id)++v25 == v121)
          {
            __int16 v24 = [v119 countByEnumeratingWithState:&v144 objects:v161 count:16];
            if (v24) {
              goto LABEL_19;
            }
            goto LABEL_60;
          }
        }

        __int16 v34 = objc_claimAutoreleasedReturnValue( -[MADMomentsDeferredProcessingTask _earliestRequestDateFromAssetEntries:]( self,  "_earliestRequestDateFromAssetEntries:",  v132));
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
        v125 = (void *)v34;
        v141 = 0u;
        v142 = 0u;
        v139 = 0u;
        v140 = 0u;
        __int16 v36 = v132;
        int v37 = [v36 countByEnumeratingWithState:&v139 objects:v160 count:16];
        if (v37)
        {
          __int16 v38 = *(void *)v140;
          do
          {
            for (unint64_t i = 0LL; i != v37; unint64_t i = (char *)i + 1)
            {
              if (*(void *)v140 != v38) {
                objc_enumerationMutation(v36);
              }
              [v35 addObject:v40];
            }

            int v37 = [v36 countByEnumeratingWithState:&v139 objects:v160 count:16];
          }

          while (v37);
        }

        v137 = 0LL;
        v138 = 0LL;
        -[MADMomentsDeferredProcessingTask _cleanupRequestedAssets:fromDatabase:withProcessingType:photoLibrary:unprocessedAssets:earliestAssetModificationDate:]( self,  "_cleanupRequestedAssets:fromDatabase:withProcessingType:photoLibrary:unprocessedAssets:earliestAssetModificationDate:",  v35,  v126,  v30,  v128,  &v138,  &v137);
        __int128 v41 = v138;
        __int128 v42 = v137;
        if ([v41 count])
        {
          [v41 count];
          v123 = v42;
          v136[0] = _NSConcreteStackBlock;
          v136[1] = 3221225472LL;
          v136[2] = sub_1000489AC;
          v136[3] = &unk_1001BAE28;
          v136[4] = self;
          v136[5] = v130;
          v136[6] = v117;
          v124 = objc_retainBlock(v136);
          uint64_t v44 = VCPSignPostLog(v124);
          uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
          id v46 = os_signpost_id_generate(v45);

          int v48 = VCPSignPostLog(v47);
          __int16 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
          uint64_t v50 = v49;
          if (v46 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v49))
          {
            *(_WORD *)__int128 buf = 0;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v50,  OS_SIGNPOST_INTERVAL_BEGIN,  v46,  "MADMoments_ProcessAssets",  (const char *)&unk_100199097,  buf,  2u);
          }

          if (v30 == v116)
          {
            uint64_t v53 = objc_alloc(&OBJC_CLASS___VCPMADSceneAssetProcessingTask);
            uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v128 photoLibraryURL]);
            v135[0] = _NSConcreteStackBlock;
            v135[1] = 3221225472LL;
            v135[2] = sub_1000489E8;
            v135[3] = &unk_1001B9E98;
            v135[4] = self;
            uint64_t v55 = -[VCPMADSceneAssetProcessingTask initWithLocalIdentifiers:fromPhotoLibraryWithURL:cancelBlock:progressHandler:completionHandler:]( v53,  "initWithLocalIdentifiers:fromPhotoLibraryWithURL:cancelBlock:progressHandler:completionHandler:",  v41,  v54,  v135,  v124,  &stru_1001BAE68);

            v120 = -[VCPMADSceneAssetProcessingTask run](v55, "run");
          }

          else
          {
            if (v30 != v115)
            {
              __int128 v89 = MediaAnalysisLogLevel(v51, v52);
              if ((int)v89 >= 3)
              {
                id v91 = VCPLogInstance(v89, v90);
                id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
                if (os_log_type_enabled(v92, v114))
                {
                  *(_DWORD *)__int128 buf = 67109120;
                  *(_DWORD *)v157 = (_DWORD)v30;
                  _os_log_impl( (void *)&_mh_execute_header,  v92,  v114,  "[Moments] Unexpected processing type: %u",  buf,  8u);
                }
              }

              v158 = NSLocalizedDescriptionKey;
              os_log_type_t v73 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[Moments] Unexpected processing type: %u",  v30));
              v159 = v73;
              uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v159,  &v158,  1LL));
              uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -50LL,  v83));
              uint64_t v84 = *a3;
              *a3 = v93;
              goto LABEL_72;
            }

            int v66 = objc_alloc(&OBJC_CLASS___VCPMADQuickFaceIDAssetProcessingTask);
            uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue([v128 photoLibraryURL]);
            v134[0] = _NSConcreteStackBlock;
            v134[1] = 3221225472LL;
            v134[2] = sub_1000489F4;
            v134[3] = &unk_1001B9E98;
            v134[4] = self;
            uint64_t v55 = -[VCPMADQuickFaceIDAssetProcessingTask initWithLocalIdentifiers:fromPhotoLibraryWithURL:cancelBlock:progressHandler:completionHandler:]( v66,  "initWithLocalIdentifiers:fromPhotoLibraryWithURL:cancelBlock:progressHandler:completionHandler:",  v41,  v67,  v134,  v124,  &stru_1001BAE88);

            v120 = -[VCPMADSceneAssetProcessingTask run](v55, "run");
          }

          uint64_t v69 = VCPSignPostLog(v68);
          uint64_t v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
          uint64_t v71 = v70;
          if (v46 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v70))
          {
            *(_WORD *)__int128 buf = 0;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v71,  OS_SIGNPOST_INTERVAL_END,  v46,  "MADMoments_ProcessAssets",  (const char *)&unk_100199097,  buf,  2u);
          }

          v133 = 0LL;
          uint64_t v72 = v41;
          -[MADMomentsDeferredProcessingTask _cleanupRequestedAssets:fromDatabase:withProcessingType:photoLibrary:unprocessedAssets:earliestAssetModificationDate:]( self,  "_cleanupRequestedAssets:fromDatabase:withProcessingType:photoLibrary:unprocessedAssets:earliestAssetModificationDate:",  v41,  v126,  v30,  v128,  &v133,  0LL);
          os_log_type_t v73 = v133;
          int v74 = [v73 count];
          if (v74)
          {
            uint64_t v76 = MediaAnalysisLogLevel(v74, v75);
            if ((int)v76 >= 3)
            {
              uint64_t v78 = VCPLogInstance(v76, v77);
              unsigned int v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
              if (os_log_type_enabled(v79, v114))
              {
                uint64_t v80 = [v73 count];
                uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue([v128 photoLibraryURL]);
                *(_DWORD *)__int128 buf = 67109634;
                *(_DWORD *)v157 = v80;
                *(_WORD *)&v157[4] = 2112;
                *(void *)&v157[6] = v127;
                *(_WORD *)&v157[14] = 2112;
                *(void *)&v157[16] = v81;
                _os_log_impl( (void *)&_mh_execute_header,  v79,  v114,  "[Moments] Failed to process %u assets for %@ in Photo Library %@",  buf,  0x1Cu);
              }
            }
          }

          MADPLLogMomentsDeferredProcessing(v30, v33, [v72 count], v29);
          VCPCoreAnalyticsReportEventMomentsDeferredProcessing( (uint64_t)v33,  (_BYTE *)[v72 count] - (_BYTE *)objc_msgSend(v73, "count"),  v33 - (_BYTE *)objc_msgSend(v72, "count"),  (uint64_t)objc_msgSend(v73, "count"),  v125,  v123,  (uint64_t)v30,  v128,  v29);
          if (v120)
          {
            __int128 v41 = v72;
            if (v120 == -128)
            {
              if (a3)
              {
                v154 = NSLocalizedDescriptionKey;
                uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[Moments] Deferred processing %@ cancelled",  v127));
                v155 = v83;
                uint64_t v84 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v155,  &v154,  1LL));
                id v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL,  v84));
                __int128 v86 = *a3;
                *a3 = v85;
                goto LABEL_66;
              }

  v102 = [v10 setStatus:4294943494];
LABEL_58:
  v117 = VCPSignPostLog(v102);
  v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
  v119 = v118;
  if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v118))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v119,  OS_SIGNPOST_INTERVAL_END,  v43,  "VCPFaceProcessingAnalyzeAsset",  (const char *)&unk_100199097,  buf,  2u);
  }

LABEL_62:
}

  return v25;
}

      if (v17)
      {
        id v59 = [v7 removeAllObjects];
        uint64_t v61 = MediaAnalysisLogLevel(v59, v60);
        if ((int)v61 >= 3)
        {
          uint64_t v63 = VCPLogInstance(v61, v62);
          __int128 v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
          os_log_type_t v65 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v64, v65))
          {
            int v66 = (void *)objc_claimAutoreleasedReturnValue([v73 localIdentifier]);
            LODWORD(buf.start.value) = 138412290;
            *(CMTimeValue *)((char *)&buf.start.value + 4) = (CMTimeValue)v66;
            _os_log_impl( (void *)&_mh_execute_header,  v64,  v65,  "   [%@] Failed to populate detection traits",  (uint8_t *)&buf,  0xCu);
          }
        }
      }
    }
  }

  else
  {
    uint64_t v17 = 0;
  }

  return v17;
}

      goto LABEL_58;
    }

    __int128 v30 = objc_alloc(&OBJC_CLASS___PFClientSideEncryptionManager);
    __int128 v31 = -[PFClientSideEncryptionManager initWithProfile:]( v30,  "initWithProfile:",  PFClientSideEncryptionManagerProfileMediaAnalysis);
    int8x16_t v96 = v31;
    if (v31)
    {
      -[PFClientSideEncryptionManager start](v31, "start");
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v26));
      uint64_t v99 = 0LL;
      -[PFClientSideEncryptionManager unarchiveDirectoryAtURL:error:](v96, "unarchiveDirectoryAtURL:error:", v32, &v99);
      int v33 = (os_log_s *)v99;

      -[PFClientSideEncryptionManager shutdownWithCompletionHandler:](v96, "shutdownWithCompletionHandler:", 0LL);
      __int16 v34 = v33;
    }

    else
    {
      __int16 v34 = 0LL;
    }

    v98 = 0LL;
    uint64_t v53 = -[os_log_s removeItemAtPath:error:](v18, "removeItemAtPath:error:", v26, &v98);
    uint64_t v54 = (os_log_s *)v98;
    __int128 v56 = v54;
    if ((v53 & 1) == 0)
    {
      uint64_t v54 = (os_log_s *)MediaAnalysisLogLevel(v54, v55);
      if ((int)v54 >= 4)
      {
        id v91 = v29;
        __int16 v57 = VCPLogInstance(v54, v55);
        int v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
        id v59 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v58, v59))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v105 = v56;
          _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "  Failed to remove intermediate encrypted restore file (%@)",  buf,  0xCu);
        }

        __int16 v29 = v91;
      }
    }

    if (!v96)
    {
      uint64_t v69 = MediaAnalysisLogLevel(v54, v55);
      if ((int)v69 >= 3)
      {
        uint64_t v71 = VCPLogInstance(v69, v70);
        uint64_t v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
        uint64_t v72 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v63, v72))
        {
          *(_WORD *)__int128 buf = 0;
          os_log_type_t v65 = "  Failed to create PFClientSideEncryptionManager; restore failed";
          int v66 = v63;
          uint64_t v67 = v72;
          uint64_t v68 = 2;
          goto LABEL_39;
        }

LABEL_73:
              v82 = 0;
              goto LABEL_74;
            }

            if (!a3) {
              goto LABEL_73;
            }
            v152 = NSLocalizedDescriptionKey;
            v129 = objc_claimAutoreleasedReturnValue([v128 photoLibraryURL]);
            uint64_t v84 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[Moments] Deferred processing %@ failed for assets in Photo Library %@",  v127,  v129));
            v153 = v84;
            __int128 v86 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v153,  &v152,  1LL));
            uint64_t v83 = (void *)v129;
            __int128 v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v120,  v86));
            __int128 v88 = *a3;
            *a3 = v87;

LABEL_66:
LABEL_72:

            goto LABEL_73;
          }
        }

        else
        {
          uint64_t v61 = MediaAnalysisLogLevel(0LL, v43);
          if ((int)v61 >= 6)
          {
            uint64_t v63 = VCPLogInstance(v61, v62);
            __int128 v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
            if (os_log_type_enabled(v64, type))
            {
              os_log_type_t v65 = (void *)objc_claimAutoreleasedReturnValue([v128 photoLibraryURL]);
              *(_DWORD *)__int128 buf = 138412546;
              *(void *)v157 = v127;
              *(_WORD *)&v157[8] = 2112;
              *(void *)&v157[10] = v65;
              _os_log_impl( (void *)&_mh_execute_header,  v64,  type,  "[Moments] All assets scheduled for %@ in Photo Library %@ have already been processed",  buf,  0x16u);
            }
          }

          MADPLLogMomentsDeferredProcessing(v30, v33, 0LL, v29);
          VCPCoreAnalyticsReportEventMomentsDeferredProcessing( (uint64_t)v33,  0LL,  (uint64_t)v33,  0LL,  v125,  v42,  (uint64_t)v30,  v128,  v29);
        }

        id v59 = (os_log_s *)v125;
        goto LABEL_57;
      }
  }

  else
  {
    LODWORD(v33) = 0;
  }

  return (int)v33;
}

LABEL_60:
      MediaAnalysisDaemonReleaseSharedDataStores(v128);
      v82 = 1;
LABEL_74:

      objc_autoreleasePoolPop(context);
      if (!v82)
      {

        v102 = 0;
        goto LABEL_85;
      }

      v113 = (char *)v113 + 1;
    }

    while (v113 != v109);
    uint64_t v23 = [obj countByEnumeratingWithState:&v148 objects:v162 count:16];
  }

  while (v23);
LABEL_77:

  v94 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( -[MADMomentsDeferredProcessingTask completionHandler]( self,  "completionHandler"));
  v94[2](v94, 0LL, 0LL);

  if ((v104 & 1) == 0)
  {
    uint64_t v97 = MediaAnalysisLogLevel(v95, v96);
    if ((int)v97 >= 6)
    {
      uint64_t v99 = VCPLogInstance(v97, v98);
      v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
      v101 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v100, v101))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v100,  v101,  "[Moments] Restore checksum for PFCachingArchiveIndex ... ",  buf,  2u);
      }
    }

    PFCachingArchiveIndexSetSkipChecksumValidation(0LL);
    [v106 removeKey:@"PFSkipChecksumTimestamp"];
    [v106 commit];
  }

  v102 = 1;
LABEL_85:

  return v102;
}

LABEL_61:
  return (int)v2;
}

        goto LABEL_62;
      }

      __int16 v49 = MediaAnalysisLogLevel(v24, v25);
      if ((int)v49 >= 3)
      {
        os_log_type_t v51 = VCPLogInstance(v49, v50);
        id v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
        uint64_t v53 = VCPLogToOSLogType[3];
        uint64_t v97 = v52;
        if (os_log_type_enabled(v52, v53))
        {
          LOWORD(buf) = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "  Unable to encrypt intermediate backup file; backup failed",
            (uint8_t *)&buf,
            2u);
        }

        goto LABEL_65;
      }
    }

    int v8 = v5;
    goto LABEL_67;
  }

  return 0;
}

              v130 = v43;
              uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v130,  1LL));
              [v118 addFaces:v68];

              [v42 setClusterSequenceNumber:0];
              uint64_t v69 = [v42 setVuObservationID:0];
              uint64_t v71 = MediaAnalysisLogLevel(v69, v70);
              if ((int)v71 >= 7)
              {
                os_log_type_t v73 = VCPLogInstance(v71, v72);
                int v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
                if (os_log_type_enabled(v74, type))
                {
                  uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v43 localIdentifier]);
                  *(_DWORD *)__int128 buf = 138412802;
                  v132 = v116;
                  v133 = 2112;
                  v134 = v55;
                  v135 = 2112;
                  v136 = v75;
                  _os_log_impl((void *)&_mh_execute_header, v74, type, "%@ Updating %@ %@", buf, 0x20u);
                }

                goto LABEL_74;
              }

              goto LABEL_75;
            }

  return v55;
}
}

void sub_100048744( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26)
{
}

uint64_t sub_1000489AC(void *a1, double a2)
{
  return (*(uint64_t (**)(void, double))(*(void *)(a1[4] + 8LL) + 16LL))( *(void *)(a1[4] + 8LL),  (a2 + (double)(unint64_t)(a1[5] - 1LL) * 100.0) / (double)(unint64_t)a1[6]);
}

id sub_1000489E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

id sub_1000489F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_100048DD8(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___VCPDataCollection);
  uint64_t v2 = (void *)qword_1001E6448;
  qword_1001E6448 = (uint64_t)v1;
}

void sub_100048F64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004921C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100049588( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100049EF4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10004A1D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

__CFString *MADLastAnalysisRestoreTimestampKeyForTask(uint64_t a1)
{
  else {
    return off_1001BB310[a1 - 1];
  }
}

__CFString *MADAnalysisRestoreAttemptsKeyForTask(uint64_t a1)
{
  else {
    return off_1001BB360[a1 - 1];
  }
}

__CFString *MADLastAnalysisBackupTimestampKeyForTask(uint64_t a1)
{
  else {
    return off_1001BB3B0[a1 - 1];
  }
}

id MADAssetProtoClassForTask(uint64_t a1)
{
  switch(a1)
  {
    case 2LL:
      uint64_t v1 = &OBJC_CLASS___MADProtoSceneAsset_ptr;
      break;
    case 10LL:
      uint64_t v1 = &OBJC_CLASS___MADProtoAssetOCRAnalysis_ptr;
      break;
    case 3LL:
      uint64_t v1 = &OBJC_CLASS___MADProtoFaceAsset_ptr;
      break;
    default:
      return 0LL;
  }

  uint64_t v2 = objc_opt_class(*v1);
  return (id)objc_claimAutoreleasedReturnValue(v2);
}

void sub_10004A494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004A6D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004A83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_10004A8D0(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  uint64_t v2 = (void *)qword_1001E6458;
  qword_1001E6458 = (uint64_t)v1;
}

void sub_10004B268( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20, void *a21, void *a22, void *a23, uint64_t a24, void *a25)
{
}

uint64_t sub_10004B3F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  [*(id *)(a1 + 32) pet];
  return 0LL;
}

uint64_t sub_10004B438(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 17LL));
}

id sub_10004B44C(uint64_t a1)
{
  return [*(id *)(a1 + 32) run];
}

void sub_10004B4E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)&OBJC_CLASS___MADPreheatBackgroundSystemTask;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10004B570()
{
}

void sub_10004B5DC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_10004B88C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10004B8B0(id a1)
{
  return 0;
}

void sub_10004B944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_10:
LABEL_72:
            __int16 v29 = 0;
            goto LABEL_73;
          }

          uint64_t v68 = objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v103, "objectForKeyedSubscript:", v13));
          __int16 v19 = (void *)v68;
          if (v68)
          {
            uint64_t v70 = MediaAnalysisLogLevel(v68, v69);
            if ((int)v70 >= 5)
            {
              uint64_t v72 = VCPLogInstance(v70, v71);
              os_log_type_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
              int v74 = VCPLogToOSLogType[5];
              if (os_log_type_enabled(v73, v74))
              {
                *(_DWORD *)__int128 buf = 138412546;
                v109 = v6;
                v110 = 2112;
                v111 = v19;
                _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "[Restore][%@] Last restore date is %@; skipping restore",
                  buf,
                  0x16u);
              }
            }

            goto LABEL_10;
          }

          uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v103, "objectForKeyedSubscript:", v16));
          unsigned int v79 = [v78 unsignedIntValue];
          if (v79 >= 3)
          {
            v94 = MediaAnalysisLogLevel(v79, v80);
            if ((int)v94 >= 5)
            {
              int8x16_t v96 = VCPLogInstance(v94, v95);
              uint64_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
              v98 = VCPLogToOSLogType[5];
              if (os_log_type_enabled(v97, v98))
              {
                *(_DWORD *)__int128 buf = 138412546;
                v109 = v6;
                v110 = 2112;
                v111 = v78;
                _os_log_impl( (void *)&_mh_execute_header,  v97,  v98,  "[Restore][%@] Restore has been attempted %@ time(s); skipping restore",
                  buf,
                  0x16u);
              }
            }

            goto LABEL_72;
          }
        }

        else
        {
          v103 = 0LL;
        }

        v102 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
        if (v103) {
          objc_msgSend(v102, "addEntriesFromDictionary:");
        }
        v101 = (void *)objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary vcp_mediaAnalysisBackupFilepath]( self->_photoLibrary,  "vcp_mediaAnalysisBackupFilepath"));
        __int16 v39 = objc_msgSend(v7, "fileExistsAtPath:");
        if ((v39 & 1) != 0)
        {
          __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v103, "objectForKeyedSubscript:", v16));
          __int128 v42 = objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInt:]( NSNumber,  "numberWithUnsignedInt:",  [v41 unsignedIntValue] + 1));
          [v102 setObject:v42 forKeyedSubscript:v16];

          v105 = 0LL;
          LOBYTE(v42) = [v102 writeToURL:v10 error:&v105];
          __int128 v43 = v105;
          uint64_t v45 = v43;
          if ((v42 & 1) != 0)
          {
            id v46 = VCPSignPostLog(v43);
            __int16 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
            spid = os_signpost_id_generate(v47);

            __int16 v49 = VCPSignPostLog(v48);
            uint64_t v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
            os_log_type_t v51 = v50;
            if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v50))
            {
              *(_DWORD *)__int128 buf = 138412290;
              v109 = v6;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v51,  OS_SIGNPOST_INTERVAL_BEGIN,  spid,  "MADPhotosLibraryRestore",  "_%@",  buf,  0xCu);
            }

            photoLibrardouble y = self->_photoLibrary;
            if (a3 == 1)
            {
              uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue( +[VCPRestoreDatabaseTask taskWithPhotoLibrary:]( &OBJC_CLASS___VCPRestoreDatabaseTask,  "taskWithPhotoLibrary:",  photoLibrary));
              [v53 start];
            }

            else
            {
              uint64_t v81 = (void *)objc_claimAutoreleasedReturnValue( +[MADPhotosRestoreAnalysisTask taskWithPhotoLibrary:forTaskID:progressHandler:completionHandler:andCancelBlock:]( &OBJC_CLASS___MADPhotosRestoreAnalysisTask,  "taskWithPhotoLibrary:forTaskID:progressHandler:completionHandler:andCancelBlock:",  photoLibrary,  a3,  self->_progressHandler,  self->_completionHandler,  self->_cancelBlock));
              v82 = [v81 run] == -128;

              if (v82)
              {
                __int16 v29 = -128;
LABEL_65:

LABEL_73:
                goto LABEL_74;
              }
            }

            uint64_t v83 = VCPSignPostLog(v54);
            uint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
            id v85 = v84;
            if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v84))
            {
              *(_DWORD *)__int128 buf = 138412290;
              v109 = v6;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v85,  OS_SIGNPOST_INTERVAL_END,  spid,  "MADPhotosLibraryRestore",  "_%@",  buf,  0xCu);
            }

            __int128 v86 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
            [v102 setObject:v86 forKeyedSubscript:v13];

            v104 = v45;
            LOBYTE(v86) = [v102 writeToURL:v10 error:&v104];
            __int128 v87 = v104;

            if ((v86 & 1) != 0 || (uint64_t v90 = MediaAnalysisLogLevel(v88, v89), (int)v90 < 3))
            {
              __int16 v29 = 0;
              uint64_t v45 = v87;
              goto LABEL_65;
            }

            id v92 = VCPLogInstance(v90, v91);
            int v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
            uint64_t v93 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v66, v93))
            {
              *(_DWORD *)__int128 buf = 138412802;
              v109 = v6;
              v110 = 2112;
              v111 = v102;
              v112 = 2112;
              v113 = v87;
              _os_log_impl( (void *)&_mh_execute_header,  v66,  v93,  "[Restore][%@] Failed to write restore status %@: %@",  buf,  0x20u);
            }

            uint64_t v45 = v87;
            goto LABEL_63;
          }

          uint64_t v75 = MediaAnalysisLogLevel(v43, v44);
          if ((int)v75 < 3)
          {
LABEL_64:
            __int16 v29 = 0;
            goto LABEL_65;
          }

          uint64_t v77 = VCPLogInstance(v75, v76);
          int v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
          uint64_t v67 = VCPLogToOSLogType[3];
          if (!os_log_type_enabled(v66, v67))
          {
LABEL_63:

            goto LABEL_64;
          }
        }

        else
        {
          uint64_t v55 = MediaAnalysisLogLevel(v39, v40);
          if ((int)v55 >= 5)
          {
            __int16 v57 = VCPLogInstance(v55, v56);
            int v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
            id v59 = VCPLogToOSLogType[5];
            if (os_log_type_enabled(v58, v59))
            {
              *(_DWORD *)__int128 buf = 138412290;
              v109 = v6;
              _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "[Restore][%@] No backup present; skipping restore",
                buf,
                0xCu);
            }
          }

          uint64_t v60 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
          [v102 setObject:v60 forKeyedSubscript:v13];

          v106 = 0LL;
          LOBYTE(v6sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = [v102 writeToURL:v10 error:&v106];
          uint64_t v61 = v106;
          uint64_t v45 = v61;
          if ((v60 & 1) != 0) {
            goto LABEL_64;
          }
          uint64_t v63 = MediaAnalysisLogLevel(v61, v62);
          os_log_type_t v65 = VCPLogInstance(v63, v64);
          int v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
          uint64_t v67 = VCPLogToOSLogType[3];
          if (!os_log_type_enabled(v66, v67)) {
            goto LABEL_63;
          }
        }

        *(_DWORD *)__int128 buf = 138412802;
        v109 = v6;
        v110 = 2112;
        v111 = v102;
        v112 = 2112;
        v113 = v45;
        _os_log_impl( (void *)&_mh_execute_header,  v66,  v67,  "[Restore][%@] Failed to write restore status %@: %@",  buf,  0x20u);
        goto LABEL_63;
      }

      __int16 v34 = MediaAnalysisLogLevel(0LL, v15);
      if ((int)v34 >= 3)
      {
        __int16 v36 = VCPLogInstance(v34, v35);
        int v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        __int16 v38 = VCPLogToOSLogType[3];
        v103 = v37;
        if (os_log_type_enabled(v37, v38))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v109 = v6;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "[Restore][%@] Unknown restore attempts key; skipping restore",
            buf,
            0xCu);
        }

        goto LABEL_72;
      }
    }

    else
    {
      __int128 v30 = MediaAnalysisLogLevel(0LL, v12);
      if ((int)v30 < 3)
      {
        __int16 v29 = 0;
LABEL_75:

LABEL_76:
        goto LABEL_77;
      }

      __int16 v32 = VCPLogInstance(v30, v31);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      int v33 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v16, v33))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v109 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  v33,  "[Restore][%@] Unknown last restore timestmap key; skipping restore",
          buf,
          0xCu);
      }
    }

    __int16 v29 = 0;
LABEL_74:

    goto LABEL_75;
  }

  int v25 = MediaAnalysisLogLevel(0LL, v8);
  if ((int)v25 >= 3)
  {
    id v27 = VCPLogInstance(v25, v26);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v27);
    uint64_t v28 = VCPLogToOSLogType[3];
    if (os_log_type_enabled((os_log_t)v10, v28))
    {
      *(_DWORD *)__int128 buf = 138412290;
      v109 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v10,  v28,  "[Restore][%@] Unknown restore status filepath; skipping restore",
        buf,
        0xCu);
    }

    __int16 v29 = 0;
    goto LABEL_76;
  }

  __int16 v29 = 0;
LABEL_77:

  return v29;
}
      }
    }

    __int16 v24 = *(void **)(*(void *)(a1 + 48) + 32LL);
    int v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88)));
    [v24 removeObjectForKey:v25];

    (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
  }

  __int16 v26 = *(void *)(*(void *)(a1 + 80) + 8LL);
  id v27 = *(void **)(v26 + 40);
  *(void *)(v26 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 72),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 64) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
      }
    }

    __int16 v26 = *(void **)(*(void *)(a1 + 32) + 32LL);
    id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
    [v26 removeObjectForKey:v27];

    uint64_t v28 = *(void *)(a1 + 40);
    __int16 v29 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:*(unsigned int *)(a1 + 68) withDescription:v10];
    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    (*(void (**)(uint64_t, void *))(v28 + 16))(v28, v30);
  }

  __int128 v31 = *(void *)(*(void *)(a1 + 56) + 8LL);
  __int16 v32 = *(void **)(v31 + 40);
  *(void *)(v31 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 72),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 64) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 72),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 64) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 64),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 72),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 64) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 64),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 64),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 64),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 72),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 64) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 72),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 64) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 64),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 64),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
    }

    uint64_t v22 = *(void **)(*(void *)(a1 + 32) + 32LL);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 64),  v26,  v27));
    [v22 removeObjectForKey:v23];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  __int16 v24 = *(void *)(*(void *)(a1 + 56) + 8LL);
  int v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}
  }

  if ([v6 status] == -23802)
  {
    if (self->_imageOnlyAnalysis) {
      __int128 v30 = @"ImageOnly";
    }
    else {
      __int128 v30 = &stru_1001BE5A8;
    }
    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-NoResource",  v30));
    [v17 setObject:v31 forKeyedSubscript:@"AnalysisStatusExtension"];
  }

  else if ([v6 status] == -23808)
  {
    if (self->_imageOnlyAnalysis) {
      __int16 v32 = @"ImageOnly";
    }
    else {
      __int16 v32 = &stru_1001BE5A8;
    }
    int v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-DownloadThrottled",  v32));
    [v17 setObject:v33 forKeyedSubscript:@"AnalysisStatusExtension"];
  }

  else if ([v6 status] == -128)
  {
    if (self->_imageOnlyAnalysis) {
      __int16 v34 = @"ImageOnly";
    }
    else {
      __int16 v34 = &stru_1001BE5A8;
    }
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-Canceled",  v34));
    [v17 setObject:v35 forKeyedSubscript:@"AnalysisStatusExtension"];
  }

  else if ([v6 status])
  {
    imageOnlyAnalysis = self->_imageOnlyAnalysis;
    int v37 = [v6 status];
    __int16 v38 = @"ImageOnly";
    if (!imageOnlyAnalysis) {
      __int16 v38 = &stru_1001BE5A8;
    }
    __int16 v39 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@-SoftFailure-%d",  v38,  v37));
    [v17 setObject:v39 forKeyedSubscript:@"AnalysisStatusExtension"];
  }

  if (self->_imageOnlyAnalysis) {
    __int128 v40 = &off_1001C7C70;
  }
  else {
    __int128 v40 = &off_1001C7C88;
  }
  [v17 setObject:v40 forKeyedSubscript:@"ResourceCondition"];
  __int128 v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( &OBJC_CLASS___NSNumber,  "numberWithBool:",  -[MADPhotosFullAssetProcessingTask doneFullAnalysis:](self, "doneFullAnalysis:", v6)));
  [v17 setObject:v41 forKeyedSubscript:@"ResourceCondition"];

  __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v6 analysisResults]);
  __int128 v43 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v42, "vcp_dateAnalyzed"));
  [v43 timeIntervalSinceReferenceDate];
  uint64_t v45 = v44;

  id v46 = (void *)objc_claimAutoreleasedReturnValue([v6 asset]);
  __int16 v47 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v46, "vcp_modificationDate"));
  [v47 timeIntervalSinceReferenceDate];
  __int16 v49 = v48;

  analysisDatabase = self->_analysisDatabase;
  os_log_type_t v51 = VCPStartTimestampKeyForTask(1LL);
  id v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
  uint64_t v53 = -[VCPDatabaseWriter valueForKey:](analysisDatabase, "valueForKey:", v52);

  uint64_t v54 = (uint64_t)v49;
  uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  (unint64_t)(((((uint64_t)v45 - v54) & (unint64_t)~(((uint64_t)v45 - v54) >> 63))
                                      * (unsigned __int128)0x1845C8A0CE512957uLL) >> 64) >> 13));
  [v17 setObject:v55 forKeyedSubscript:@"DaysWaitedBeforeAnalyzed"];

  [v7 sendEvent:@"com.apple.mediaanalysisd.FullAnalysisPerAssetInfo" withAnalytics:v17];
}

    uint64_t v11 = 0;
  }

LABEL_12:
  return v11;
}

    goto LABEL_41;
  }

  if (!self->_resultDirectoryURL)
  {
    __int16 v26 = MediaAnalysisLogLevel(v11, v12);
    uint64_t v28 = VCPLogInstance(v26, v27);
    __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    __int16 v29 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v24, v29))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v76 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v29,  "%@ No result directory URL; skip saving partial analysis",
        buf,
        0xCu);
    }

    goto LABEL_10;
  }

  unsigned int v14 = objc_msgSend(v8, "vcp_syncPoint");
  if ((v70.flags & 1) != 0)
  {
    __int128 v30 = MediaAnalysisLogLevel(v14, v15);
    if ((int)v30 >= 6)
    {
      __int16 v32 = VCPLogInstance(v30, v31);
      int v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      __int16 v34 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v33, v34))
      {
        time = v70;
        Seconds = CMTimeGetSeconds(&time);
        *(_DWORD *)__int128 buf = 138413058;
        uint64_t v76 = v13;
        uint64_t v77 = 2048;
        uint64_t v78 = Seconds;
        unsigned int v79 = 2048;
        value = v70.value;
        uint64_t v81 = 1024;
        timescale = v70.timescale;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "%@ Saving partial analysis at sync point: %0.3fs (value: %lld, timescale: %d)",  buf,  0x26u);
      }
    }

    os_log_type_t v73 = NSFileProtectionKey;
    int v74 = NSFileProtectionCompleteUntilFirstUserAuthentication;
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v74,  &v73,  1LL));
    v71[0] = @"assetIdentifier";
    v71[1] = @"identifierType";
    v72[0] = v10;
    v72[1] = v9;
    v71[2] = @"analysis";
    v72[2] = v8;
    int v66 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v72,  v71,  3LL));
    __int16 v36 = (void *)objc_claimAutoreleasedReturnValue( +[NSPropertyListSerialization dataWithPropertyList:format:options:error:]( &OBJC_CLASS___NSPropertyListSerialization,  "dataWithPropertyList:format:options:error:"));
    int v37 = 0LL;
    uint64_t v68 = v37;
    if (!v36)
    {
      id v52 = MediaAnalysisLogLevel(v37, v38);
      if ((int)v52 < 3)
      {
LABEL_39:

LABEL_40:
        goto LABEL_41;
      }

      uint64_t v54 = VCPLogInstance(v52, v53);
      uint64_t v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
      __int128 v56 = VCPLogToOSLogType[3];
      uint64_t v67 = v55;
      if (os_log_type_enabled(v55, v56))
      {
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v76 = v13;
        uint64_t v77 = 2112;
        uint64_t v78 = *(double *)&v68;
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "%@ Failed to serialize partial analysis - %@", buf, 0x16u);
      }

    int v25 = MediaAnalysisLogLevel(v21, v22);
    if ((int)v25 >= 6)
    {
      id v27 = VCPLogInstance(v25, v26);
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      if (os_log_type_enabled(v28, type))
      {
        __int16 v29 = (void *)objc_claimAutoreleasedReturnValue([v20 localIdentifier]);
        *(_DWORD *)__int128 buf = v40;
        *(void *)&uint8_t buf[4] = v29;
        uint64_t v50 = 2112;
        os_log_type_t v51 = v41;
        _os_log_impl((void *)&_mh_execute_header, v28, type, "[FaceLibraryProcessing][%@] Asset %@", buf, 0x16u);
      }
    }

    *(void *)__int128 buf = 0LL;
    int v48 = 0;
    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v47 database]);
    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v20 localIdentifier]);
    __int16 v32 = [v30 queryProcessingStatus:buf attempts:&v48 lastAttemptDate:0 andNextAttemptDate:0 forLocalIdentifier:v31 andTaskID:3];

    if (!v32 && v48 && (*(void *)buf == 7LL || *(void *)buf == 2LL))
    {
      int v33 = (void *)objc_claimAutoreleasedReturnValue([v47 database]);
      __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([v20 localIdentifier]);
      [v33 removeProcessingStatusForLocalIdentifier:v34 andTaskID:3];
    }

    uint64_t v35 = -[VCPFaceLibraryProcessingTask _addBatchWithAsset:isRetry:withTask:]( self,  "_addBatchWithAsset:isRetry:withTask:",  v20,  0LL,  v47);
    if (!v35) {
      goto LABEL_27;
    }
    uint64_t v23 = 0;
    uint64_t v6 = v35;
LABEL_28:

    objc_autoreleasePoolPop(v19);
    ++v17;
    if ((v23 & 1) == 0) {
      goto LABEL_32;
    }
  }

  uint64_t v6 = 0;
LABEL_32:

  return v6;
}

      goto LABEL_11;
    }

    goto LABEL_11;
  }

  int v8 = 1;
LABEL_12:

  return v8;
}

    uint64_t v16 = 0;
    goto LABEL_48;
  }

  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:",  v72));
  __int16 v7 = -[os_log_s valueForKey:](v6, "valueForKey:", @"LastComputeSyncBackfillTimestamp");
  id v9 = (uint64_t)v7;
  if (v7)
  {
    uint64_t v10 = MediaAnalysisLogLevel(v7, v8);
    if ((int)v10 >= 5)
    {
      uint64_t v71 = v6;
      uint64_t v12 = VCPLogInstance(v10, v11);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      unsigned int v14 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (char *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)v9));
        *(_DWORD *)__int128 buf = 138412290;
        int v74 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "[ComputeSync|Backfill] Last backfilled on %@; skipping",
          buf,
          0xCu);
      }

      uint64_t v16 = 0;
      goto LABEL_47;
    }

    goto LABEL_10;
  }

  __int16 v21 = MediaAnalysisLogLevel(0LL, v8);
  uint64_t v71 = v6;
  if ((int)v21 >= 5)
  {
    uint64_t v23 = VCPLogInstance(v21, v22);
    __int16 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    int v25 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v24, v25))
    {
      __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v72 photoLibraryURL]);
      id v27 = (char *)objc_claimAutoreleasedReturnValue([v26 path]);
      *(_DWORD *)__int128 buf = 138412290;
      int v74 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "[ComputeSync|Backfill] Attempting backfill for Photo Library %@",  buf,  0xCu);
    }
  }

  uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset vcp_fetchOptionsForLibrary:forTaskID:]( &OBJC_CLASS___PHAsset,  "vcp_fetchOptionsForLibrary:forTaskID:",  v72,  1LL));
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"creationDate",  1LL));
  uint64_t v77 = v28;
  __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v77, 1LL));
  [v69 setSortDescriptors:v29];

  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(+[PHAsset fetchAssetsWithOptions:](&OBJC_CLASS___PHAsset, "fetchAssetsWithOptions:", v69));
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  __int16 v32 = 0LL;
  uint64_t v70 = 0LL;
  int v33 = VCPLogToOSLogType[7];
  *(void *)&__int16 v34 = 138412290LL;
  uint64_t v68 = v34;
  while (v32 < (unint64_t)objc_msgSend(v30, "count", v68))
  {
    uint64_t v35 = objc_autoreleasePoolPush();
    if (!-[VCPPhotosMaintenanceProcessingTask isCancelled](self, "isCancelled"))
    {
      int v37 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
      [v37 pet];

      __int16 v38 = (void *)objc_claimAutoreleasedReturnValue([v30 objectAtIndexedSubscript:v32]);
      __int16 v39 = (void *)objc_claimAutoreleasedReturnValue([v38 mediaAnalysisProperties]);
      __int128 v40 = [v39 localAnalysisStage] == 0;

      if (!v40)
      {
        __int128 v43 = MediaAnalysisLogLevel(v41, v42);
        if ((int)v43 >= 7)
        {
          uint64_t v45 = VCPLogInstance(v43, v44);
          id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
          if (os_log_type_enabled(v46, v33))
          {
            __int16 v47 = (char *)objc_claimAutoreleasedReturnValue([v38 localIdentifier]);
            int v48 = (void *)objc_claimAutoreleasedReturnValue([v38 mediaAnalysisProperties]);
            __int16 v49 = [v48 localAnalysisStage];
            *(_DWORD *)__int128 buf = 138412546;
            int v74 = v47;
            uint64_t v75 = 1024;
            uint64_t v76 = v49;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  v33,  "[ComputeSync|Backfill][%@] Compute sync stage already set as %d; skipping backfill",
              buf,
              0x12u);
          }

          goto LABEL_24;
        }

        goto LABEL_25;
      }

      uint64_t v50 = objc_msgSend(v38, "mad_analysisStageAfterCompletingAnalysis:", 0);
      if ((_DWORD)v50)
      {
        id v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithShort:](&OBJC_CLASS___NSNumber, "numberWithShort:", v50));
        [v31 setObject:v52 forKeyedSubscript:v38];

        if ((unint64_t)[v31 count] < 0x64)
        {
          __int16 v36 = 0;
        }

        else
        {
          -[VCPPhotosMaintenanceProcessingTask _persistBackfillForAssets:photoLibrary:database:]( self,  "_persistBackfillForAssets:photoLibrary:database:",  v31,  v72,  v71);
          uint64_t v53 = [v31 count];
          [v31 removeAllObjects];
          __int16 v36 = 0;
          uint64_t v70 = &v70[(void)v53];
        }
      }

      else
      {
        uint64_t v54 = MediaAnalysisLogLevel(v50, v51);
        if ((int)v54 >= 7)
        {
          __int128 v56 = VCPLogInstance(v54, v55);
          id v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
          if (os_log_type_enabled(v46, v33))
          {
            __int16 v57 = (char *)objc_claimAutoreleasedReturnValue([v38 localIdentifier]);
            *(_DWORD *)__int128 buf = v68;
            int v74 = v57;
            _os_log_impl( (void *)&_mh_execute_header,  v46,  v33,  "[ComputeSync|Backfill][%@] Compute sync stage should be None; skipping backfill",
              buf,
              0xCu);
          }

      uint64_t v17 = 0;
LABEL_46:

      goto LABEL_47;
    }

    uint64_t v60 = v7;
    LOWORD(v56) = 0;
    log = (os_log_s *)objc_msgSend( [PHMediaProcessingAlgorithmVersionProvider alloc],  "initWithSceneAnalysisVersion:faceAnalysisVersion:characterRecognitionAlgorithmVersion:visualSear chAlgorithmVersion:stickerConfidenceAlgorithmVersion:vaAnalysisVersion:vaLocationAnalysisVersion :mediaAnalysisVersion:mediaAnalysisImageVersion:captionGenerationVersion:imageEmbeddingVersion:v ideoEmbeddingVersion:",  0,  0,  0,  0,  0,  0,  v56,  0,  0x46000000000000);
    +[PHAsset mad_sceneConfidenceThresholdForTask:](&OBJC_CLASS___PHAsset, "mad_sceneConfidenceThresholdForTask:", 1LL);
    uint64_t v61 = 0LL;
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v4,  "fetchAssetsForMediaProcessingTaskID:priority:algorithmVersion:sceneConfidenceThreshold:error:",  1,  0,  log,  &v61));
    uint64_t v23 = v61;
    *(void *)&type[4] = v23;
    if (v23)
    {
      int v25 = MediaAnalysisLogLevel(v23, v24);
      if ((int)v25 < 3)
      {
        uint64_t v17 = -18;
LABEL_44:

LABEL_45:
        __int16 v7 = v60;
        goto LABEL_46;
      }

      id v27 = VCPLogInstance(v25, v26);
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      __int16 v29 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v28, v29))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v63 = *(char **)&type[4];
        _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "[VideoEmbedding|Backfill] Failed to fetch assets: %@",  buf,  0xCu);
      }

      uint64_t v17 = -18;
    }

    else
    {
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      int v58 = 0LL;
      __int128 v30 = 0LL;
      __int128 v31 = MediaAnalysisVersion;
      *(void *)os_log_type_t type = VCPLogToOSLogType[7];
      while (v30 < (unint64_t)[v22 count])
      {
        __int16 v32 = objc_autoreleasePoolPush();
        if (-[VCPPhotosMaintenanceProcessingTask isCancelled](self, "isCancelled"))
        {
          int v33 = 1;
        }

        else
        {
          __int16 v34 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
          [v34 pet];

          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v22 objectAtIndexedSubscript:v30]);
          __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 mediaAnalysisProperties]);
          int v37 = (unint64_t)[v36 mediaAnalysisVersion] < v31;

          if (v37)
          {
            __int128 v40 = MediaAnalysisLogLevel(v38, v39);
            if ((int)v40 >= 7)
            {
              __int128 v42 = VCPLogInstance(v40, v41);
              __int128 v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
              if (os_log_type_enabled(v43, (os_log_type_t)type[0]))
              {
                uint64_t v44 = (char *)objc_claimAutoreleasedReturnValue([v35 localIdentifier]);
                *(_DWORD *)__int128 buf = 138412290;
                uint64_t v63 = v44;
                _os_log_impl( (void *)&_mh_execute_header,  v43,  (os_log_type_t)type[0],  "[VideoEmbedding|Backfill][%@] Asset has not been processed yet; skipping backfill",
                  buf,
                  0xCu);
              }
            }

            int v33 = 10;
          }

          else
          {
            -[os_log_s addObject:](v28, "addObject:", v35);
            if ((unint64_t)-[os_log_s count](v28, "count") < 0x64)
            {
              int v33 = 0;
            }

            else
            {
              -[VCPPhotosMaintenanceProcessingTask _persistVideoEmbeddingBackfillForAssets:photoLibrary:]( self,  "_persistVideoEmbeddingBackfillForAssets:photoLibrary:",  v28,  v4);
              uint64_t v45 = -[os_log_s count](v28, "count");
              -[os_log_s removeAllObjects](v28, "removeAllObjects");
              int v33 = 0;
              int v58 = &v58[(void)v45];
            }
          }
        }

        objc_autoreleasePoolPop(v32);
        if (v33 != 10 && v33)
        {
          uint64_t v17 = -128;
          goto LABEL_43;
        }

        ++v30;
      }

      if (-[os_log_s count](v28, "count"))
      {
        -[VCPPhotosMaintenanceProcessingTask _persistVideoEmbeddingBackfillForAssets:photoLibrary:]( self,  "_persistVideoEmbeddingBackfillForAssets:photoLibrary:",  v28,  v4);
        int v58 = &v58[(void)-[os_log_s count](v28, "count")];
      }

      id v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
      [v46 timeIntervalSinceReferenceDate];
      [v60 setValue:(uint64_t)v47 forKey:@"LastVideoEmbeddingVersionBackfillTimestamp"];

      int v48 = [v60 commit];
      uint64_t v50 = MediaAnalysisLogLevel(v48, v49);
      if ((int)v50 >= 5)
      {
        id v52 = VCPLogInstance(v50, v51);
        uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
        uint64_t v54 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v53, v54))
        {
          *(_DWORD *)__int128 buf = 134217984;
          uint64_t v63 = v58;
          _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "[VideoEmbedding|Backfill] Completed backfill for total %lu assets",  buf,  0xCu);
        }
      }

      uint64_t v17 = 0;
    }
      }
    }

    objc_autoreleasePoolPop(v4);
  }

  id v27 = *(void **)(a1 + 56);
  v81[0] = _NSConcreteStackBlock;
  v81[1] = 3221225472LL;
  v81[2] = sub_100117898;
  v81[3] = &unk_1001BDD80;
  uint64_t v84 = *(id *)(a1 + 96);
  v82 = *(id *)(a1 + 40);
  uint64_t v28 = v3;
  uint64_t v83 = v28;
  id v85 = &v97;
  [v27 enumerateKeysAndObjectsUsingBlock:v81];
  __int16 v29 = *(void **)(a1 + 64);
  v76[0] = _NSConcreteStackBlock;
  v76[1] = 3221225472LL;
  v76[2] = sub_100117B9C;
  v76[3] = &unk_1001BDD80;
  unsigned int v79 = *(id *)(a1 + 96);
  uint64_t v77 = *(id *)(a1 + 40);
  __int128 v30 = v28;
  uint64_t v78 = v30;
  uint64_t v80 = &v97;
  [v29 enumerateKeysAndObjectsUsingBlock:v76];
  __int128 v31 = *(void **)(a1 + 72);
  v71[0] = _NSConcreteStackBlock;
  v71[1] = 3221225472LL;
  v71[2] = sub_100117EA0;
  v71[3] = &unk_1001BDD80;
  int v74 = *(id *)(a1 + 96);
  uint64_t v72 = *(id *)(a1 + 40);
  __int16 v32 = v30;
  os_log_type_t v73 = v32;
  uint64_t v75 = &v97;
  int v33 = [v31 enumerateKeysAndObjectsUsingBlock:v71];
  uint64_t v35 = MediaAnalysisLogLevel(v33, v34);
  if ((int)v35 >= 7)
  {
    int v37 = VCPLogInstance(v35, v36);
    __int16 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    __int16 v39 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v38, v39))
    {
      __int128 v40 = *(void *)(a1 + 40);
      __int128 v41 = v98[3];
      __int128 v42 = [*(id *)(a1 + 80) count];
      __int128 v43 = *(void *)(a1 + 104);
      *(_DWORD *)__int128 buf = 138413058;
      *(void *)&uint8_t buf[4] = v40;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v41;
      *(_WORD *)&buf[22] = 2048;
      v108 = v42;
      v109 = 2048;
      v110 = v43;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "%@ Tagged %lu (out of %lu valid among %lu faceCrops) observations in Gallery",  buf,  0x2Au);
    }
  }

  uint64_t v44 = [*(id *)(a1 + 88) count];
  if (v44)
  {
    *(void *)__int128 buf = 0LL;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000LL;
    v108 = 0LL;
    id v46 = MediaAnalysisLogLevel(v44, v45);
    if ((int)v46 >= 4)
    {
      int v48 = VCPLogInstance(v46, v47);
      __int16 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
      uint64_t v50 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v49, v50))
      {
        os_log_type_t v51 = *(void *)(a1 + 40);
        id v52 = [*(id *)(a1 + 88) count];
        *(_DWORD *)v101 = 138412546;
        v102 = v51;
        v103 = 2048;
        v104 = v52;
        _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "%@ Found %lu orphan faces without facecrop; untagging from VUGallery ...",
          v101,
          0x16u);
      }
    }

    v66[0] = _NSConcreteStackBlock;
    v66[1] = 3221225472LL;
    v66[2] = sub_1001181C8;
    v66[3] = &unk_1001BDDA8;
    uint64_t v53 = *(void **)(a1 + 88);
    uint64_t v69 = *(id *)(a1 + 96);
    uint64_t v67 = *(id *)(a1 + 40);
    uint64_t v68 = v32;
    uint64_t v70 = buf;
    uint64_t v54 = [v53 enumerateObjectsUsingBlock:v66];
    __int128 v56 = MediaAnalysisLogLevel(v54, v55);
    if ((int)v56 >= 7)
    {
      int v58 = VCPLogInstance(v56, v57);
      id v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
      uint64_t v60 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = *(void *)(a1 + 40);
        uint64_t v62 = *(void **)(*(void *)&buf[8] + 24LL);
        uint64_t v63 = [*(id *)(a1 + 88) count];
        *(_DWORD *)v101 = 138412802;
        v102 = v61;
        v103 = 2048;
        v104 = v62;
        v105 = 2048;
        v106 = v63;
        _os_log_impl( (void *)&_mh_execute_header,  v59,  v60,  "%@ Untagged %lu (out of %lu) orphan training faces in Gallery",  v101,  0x20u);
      }
    }

    _Block_object_dispose(buf, 8);
  }

  _Block_object_dispose(&v93, 8);
  _Block_object_dispose(&v97, 8);

  return 0LL;
}

    id v9 = MediaAnalysisLogLevel(self, a2);
    if ((int)v9 >= 6)
    {
      uint64_t v11 = VCPLogInstance(v9, v10);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      __int16 v7 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v6, v7))
      {
        *(_WORD *)__int128 buf = 0;
        int v8 = "Device does not have active battery";
        goto LABEL_13;
      }

void sub_10004C310( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

LABEL_22:
  __int16 v24 = 0;
LABEL_23:

  return v24;
}

      LOBYTE(v2sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0;
      return v20;
    }
  }

  int v20 = MADCheckBackUpVersion(a3);
  if (!v20) {
    return v20;
  }
  __int16 v21 = -[PHPhotoLibrary isSystemPhotoLibrary](self, "isSystemPhotoLibrary");
  if ((v21 & 1) == 0)
  {
    int v25 = MediaAnalysisLogLevel(v21, v22);
    id v27 = VCPLogInstance(v25, v26);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    __int16 v19 = VCPLogToOSLogType[6];
    if (!os_log_type_enabled(v8, v19)) {
      goto LABEL_21;
    }
    LOWORD(v32[0]) = 0;
    uint64_t v10 = "Library is not System Photo Library, not eligible for backup/restore";
    goto LABEL_19;
  }

  if ((a3 & 0xFFFFFFFFFFFFFFF7LL) == 2)
  {
    uint64_t v23 = -[PHPhotoLibrary isCloudPhotoLibraryEnabled](self, "isCloudPhotoLibraryEnabled");
    if ((v23 & 1) == 0)
    {
      uint64_t v28 = MediaAnalysisLogLevel(v23, v24);
      __int128 v30 = VCPLogInstance(v28, v29);
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      __int16 v19 = VCPLogToOSLogType[6];
      if (!os_log_type_enabled(v8, v19)) {
        goto LABEL_21;
      }
      LOWORD(v32[0]) = 0;
      uint64_t v10 = "iCloud photo library not enabled, not eligible for backup/restore";
      goto LABEL_19;
    }
  }

  LOBYTE(v2sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 1;
  return v20;
}
      }
    }

    int v37 = *(_DWORD *)(*(void *)&buf[8] + 24LL);
    _Block_object_dispose(buf, 8);

    goto LABEL_24;
  }

  int v37 = 0;
LABEL_24:

  return v37;
}

        uint64_t v35 = *v28;
        goto LABEL_23;
    }
  }

  unsigned int v14 = MediaAnalysisLogLevel(v12, v13);
  if ((int)v14 >= 3)
  {
    uint64_t v16 = VCPLogInstance(v14, v15);
    uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    uint64_t v18 = VCPLogToOSLogType[3];
    log = v17;
    if (os_log_type_enabled(v17, v18))
    {
      __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v96 objectForKeyedSubscript:@"coreAnalyticsEventQueryKey"]);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v99 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  log,  v18,  "[%@] Failed to query progress in default photo library",  buf,  0xCu);
    }

    int v20 = 0LL;
LABEL_42:

    goto LABEL_43;
  }

  int v20 = 0LL;
LABEL_43:

  return v20;
}
    }
  }

  else
  {
    int v33 = MADTaskIdentifierForBackgroundTask(1LL, v12);
    __int16 v34 = objc_claimAutoreleasedReturnValue(v33);
    __int16 v19 = (os_log_s *)v34;
    if (v34)
    {
      __int16 v36 = [v13 valueForKey:v9];
      if (v36)
      {
        int v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)(uint64_t)v36));
        __int16 v39 = MediaAnalysisLogLevel(v37, v38);
        if ((int)v39 >= 7)
        {
          __int128 v41 = VCPLogInstance(v39, v40);
          __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
          __int128 v43 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v42, v43))
          {
            *(_DWORD *)__int128 buf = 138412802;
            uint64_t v67 = @"MediaAnalysisImage";
            uint64_t v68 = 2112;
            *(void *)uint64_t v69 = v37;
            *(_WORD *)&v69[8] = 2048;
            *(void *)&v69[10] = v36;
            uint64_t v44 = "[%@] checkpoint reported on %@ (timestamp: %lld)";
            uint64_t v45 = v42;
            id v46 = v43;
            __int16 v47 = 32;
LABEL_32:
            _os_log_impl((void *)&_mh_execute_header, v45, v46, v44, buf, v47);
            goto LABEL_33;
          }

          goto LABEL_33;
        }
      }

      else
      {
        os_log_type_t v65 = 0LL;
        id v52 = +[BGSystemTaskCheckpoints reportCustomCheckpoint:forTask:error:]( &OBJC_CLASS___BGSystemTaskCheckpoints,  "reportCustomCheckpoint:forTask:error:",  a3,  v19,  &v65);
        uint64_t v53 = v65;
        int v37 = v53;
        if ((v52 & 1) != 0)
        {
          uint64_t v55 = MediaAnalysisLogLevel(v53, v54);
          if ((int)v55 >= 5)
          {
            __int16 v57 = VCPLogInstance(v55, v56);
            int v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
            id v59 = VCPLogToOSLogType[5];
            if (os_log_type_enabled(v58, v59))
            {
              *(_DWORD *)__int128 buf = 138412802;
              uint64_t v67 = @"MediaAnalysisImage";
              uint64_t v68 = 1024;
              *(_DWORD *)uint64_t v69 = a3;
              *(_WORD *)&v69[4] = 2112;
              *(void *)&v69[6] = v19;
              _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "[%@] Reported BGST Custom Checkpoint %d for task taskIdentifier %@",  buf,  0x1Cu);
            }
          }

          __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
          -[os_log_s timeIntervalSinceReferenceDate](v42, "timeIntervalSinceReferenceDate");
          [v13 setValue:(uint64_t)v60 forKey:v9];
          goto LABEL_33;
        }

        uint64_t v61 = MediaAnalysisLogLevel(v53, v54);
        if ((int)v61 >= 3)
        {
          uint64_t v63 = VCPLogInstance(v61, v62);
          __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
          __int128 v64 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v42, v64))
          {
            *(_DWORD *)__int128 buf = 138413058;
            uint64_t v67 = @"MediaAnalysisImage";
            uint64_t v68 = 1024;
            *(_DWORD *)uint64_t v69 = a3;
            *(_WORD *)&v69[4] = 2112;
            *(void *)&v69[6] = v19;
            *(_WORD *)&v69[14] = 2112;
            *(void *)&v69[16] = v37;
            uint64_t v44 = "[%@] Failed to report BGST Custom Checkpoint %d for taskIdentifier %@. Error: %@";
            uint64_t v45 = v42;
            id v46 = v64;
            __int16 v47 = 38;
            goto LABEL_32;
          }

  if (*(void *)buf) {
    CFRelease(*(CFTypeRef *)buf);
  }
  if (v23)
  {
    __int128 v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v23,  0LL));
    v12[2](v12, 0LL, v41);
  }

  else
  {
    ((void (**)(id, void *, void *))v12)[2](v12, v19, 0LL);
  }

  -[MADScopedWatchdog pet](self->_scopedWatchdog, "pet");
}

void sub_10004C78C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004C924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004C9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004CAD4(_Unwind_Exception *a1)
{
}

void sub_10004CD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004CDDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004D014( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10004D400( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_10004D75C(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_10004DC78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10004DD14(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processAssetEntry:*(void *)(a1 + 40)];
}

void sub_10004E420( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31)
{
}

void sub_10004E528(uint64_t a1)
{
  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) librarySpecificFetchOptions]);
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  id obj = *(id *)(*(void *)(a1 + 40) + 8LL);
  id v37 = [obj countByEnumeratingWithState:&v50 objects:v63 count:16];
  if (v37)
  {
    uint64_t v3 = 0LL;
    uint64_t v40 = 0LL;
    uint64_t v36 = *(void *)v51;
    os_log_type_t type = VCPLogToOSLogType[7];
    *(void *)&__int128 v2 = 134218240LL;
    __int128 v33 = v2;
    do
    {
      for (unint64_t i = 0LL; i != v37; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v51 != v36) {
          objc_enumerationMutation(obj);
        }
        __int128 v41 = *(void **)(*((void *)&v50 + 1) + 8LL * (void)i);
        context = objc_autoreleasePoolPush();
        if (![v41 status])
        {
          uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v41 asset]);
          __int128 v42 = (void *)objc_claimAutoreleasedReturnValue( +[PHAssetChangeRequest changeRequestForAsset:]( &OBJC_CLASS___PHAssetChangeRequest,  "changeRequestForAsset:",  v4));

          __int128 v48 = 0u;
          __int128 v49 = 0u;
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          id v43 = (id)objc_claimAutoreleasedReturnValue([v41 detectedFaces]);
          id v5 = [v43 countByEnumeratingWithState:&v46 objects:v62 count:16];
          if (!v5) {
            goto LABEL_27;
          }
          uint64_t v6 = *(void *)v47;
          while (1)
          {
            __int16 v7 = 0LL;
            v40 += (uint64_t)v5;
            do
            {
              if (*(void *)v47 != v6) {
                objc_enumerationMutation(v43);
              }
              int v8 = *(void **)(*((void *)&v46 + 1) + 8LL * (void)v7);
              id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "personLocalIdentifier", v33));
              BOOL v10 = v9 == 0LL;

              if (v10)
              {
                uint64_t v12 = 0LL;
              }

              else
              {
                uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v8 personLocalIdentifier]);
                uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v45 objectForKeyedSubscript:v11]);

                ++v3;
                if (!v12)
                {
                  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v41 detectedPersons]);
                  unsigned int v14 = (void *)objc_claimAutoreleasedReturnValue([v8 personLocalIdentifier]);
                  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKeyedSubscript:v14]);

                  if (v15)
                  {
                    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[PHPersonChangeRequest changeRequestForPerson:]( &OBJC_CLASS___PHPersonChangeRequest,  "changeRequestForPerson:",  v15));
                    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v8 personLocalIdentifier]);
                    [v45 setObject:v12 forKeyedSubscript:v16];
                  }

                  else
                  {
                    uint64_t v12 = 0LL;
                  }
                }
              }

              uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v8 localIdentifier]);
              BOOL v18 = v17 == 0LL;

              if (v18)
              {
                __int16 v21 = (void *)objc_claimAutoreleasedReturnValue( +[PHFaceChangeRequest creationRequestForFace]( &OBJC_CLASS___PHFaceChangeRequest,  "creationRequestForFace"));
                uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 placeholderForCreatedFace]);
                +[VCPFaceUtils assignPropertiesOfVCPPhotosFace:toPHFaceChangeRequest:]( &OBJC_CLASS___VCPFaceUtils,  "assignPropertiesOfVCPPhotosFace:toPHFaceChangeRequest:",  v8,  v21);
                [v21 setNameSource:6];
                id v59 = v22;
                int v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v59,  1LL));
                [v42 addFaces:v25];

                if (!v12) {
                  goto LABEL_25;
                }
                int v58 = v22;
                uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v58,  1LL));
                [v12 addFaces:v23];
              }

              else
              {
                __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v8 localIdentifier]);
                uint64_t v61 = v19;
                int v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v61,  1LL));
                __int16 v21 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesWithLocalIdentifiers:options:]( &OBJC_CLASS___PHFace,  "fetchFacesWithLocalIdentifiers:options:",  v20,  v44));

                uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 firstObject]);
                uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[PHFaceChangeRequest changeRequestForFace:]( &OBJC_CLASS___PHFaceChangeRequest,  "changeRequestForFace:",  v22));
                +[VCPFaceUtils assignPropertiesOfVCPPhotosFace:toPHFaceChangeRequest:]( &OBJC_CLASS___VCPFaceUtils,  "assignPropertiesOfVCPPhotosFace:toPHFaceChangeRequest:",  v8,  v23);
                [v23 setNameSource:6];
                if (v12)
                {
                  uint64_t v60 = v22;
                  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v60,  1LL));
                  [v12 addFaces:v24];
                }
              }

LABEL_25:
              __int16 v7 = (char *)v7 + 1;
            }

            while (v5 != v7);
            id v5 = [v43 countByEnumeratingWithState:&v46 objects:v62 count:16];
            if (!v5)
            {
LABEL_27:

              __int16 v26 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset quickClassificationFaceAdjustmentVersion]( &OBJC_CLASS___PHAsset,  "quickClassificationFaceAdjustmentVersion"));
              [v42 setFaceAdjustmentVersion:v26];

              uint64_t v29 = MediaAnalysisLogLevel(v27, v28);
              if ((int)v29 >= 7)
              {
                uint64_t v31 = VCPLogInstance(v29, v30);
                __int16 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
                if (os_log_type_enabled(v32, type))
                {
                  *(_DWORD *)__int128 buf = v33;
                  uint64_t v55 = v40;
                  __int16 v56 = 2048;
                  uint64_t v57 = v3;
                  _os_log_impl( (void *)&_mh_execute_header,  v32,  type,  "[QuickFaceID] Persisted %lu faces (%lu identified)",  buf,  0x16u);
                }
              }

              break;
            }
          }
        }

        objc_autoreleasePoolPop(context);
      }

      id v37 = [obj countByEnumeratingWithState:&v50 objects:v63 count:16];
    }

    while (v37);
  }
}

void sub_10004EAA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, void *a22)
{
}

void sub_10004EC18(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_10004EC54( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10004F234( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10004F2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 6)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)BOOL v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[MAClientHandler] XPC connection interrupted", v10, 2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained cancelAllRequests];
  }
}

void sub_10004F390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004F3A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[MAClientHandler] XPC connection invalidated", v12, 2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v9 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained cancelAllRequests];
    BOOL v10 = (void *)v9[1];
    v9[1] = 0LL;

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[VCPClientManager sharedManager](&OBJC_CLASS___VCPClientManager, "sharedManager"));
    [v11 removeClientHandler:v9];
  }
}

void sub_10004F478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004F4D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004F690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004F954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004FBDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100050034( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25, void *a26, void *a27)
{
  sub_10000421C((const void **)(v30 - 128));
  _Unwind_Resume(a1);
}

BOOL sub_100050124(id a1)
{
  return 0;
}

void sub_10005012C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel(v3, v4) >= 6)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = *(_DWORD *)(a1 + 72);
      int v16 = 67109120;
      LODWORD(v17) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MAClientHandler] Completed MADRequestID %d",  (uint8_t *)&v16,  8u);
    }
  }

  uint64_t v9 = VCPSignPostLog();
  BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 56);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v16 = 138412290;
    uint64_t v17 = v13;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v12,  "VCPMediaAnalysisClientHandler_IOSurface",  "%@",  (uint8_t *)&v16,  0xCu);
  }

  if (*(void *)(a1 + 64))
  {
    uint64_t v14 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMediaAnalysisClientHandler_IOSurface", v14 - *(void *)(a1 + 64));
  }

  uint64_t v15 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v15 + 16))(v15, 0LL, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v15 + 16))(v15, *(void *)(a1 + 40), 0LL);
  }
}

void sub_1000502B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000502D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10005071C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

BOOL sub_10005080C(id a1)
{
  return 0;
}

void sub_100050814(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel(v3, v4) >= 6)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = *(_DWORD *)(a1 + 80);
      int v16 = 67109120;
      LODWORD(v17) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MAClientHandler] Completed MADRequestID %d",  (uint8_t *)&v16,  8u);
    }
  }

  uint64_t v9 = VCPSignPostLog();
  BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 56);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v16 = 138412290;
    uint64_t v17 = v13;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v12,  "VCPMediaAnalysisClientHandler_URL",  "%@",  (uint8_t *)&v16,  0xCu);
  }

  if (*(void *)(a1 + 64))
  {
    uint64_t v14 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMediaAnalysisClientHandler_URL", v14 - *(void *)(a1 + 64));
  }

  uint64_t v15 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v15 + 16))(v15, 0LL, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v15 + 16))(v15, *(void *)(a1 + 40), 0LL);
  }
  sandbox_extension_release(*(void *)(a1 + 72));
}

void sub_1000509A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000509C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  sandbox_extension_release(*(void *)(a1 + 40));
}

void sub_100050A14( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100050DA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

BOOL sub_100050E70(id a1)
{
  return 0;
}

void sub_100050E78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel(v3, v4) >= 6)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = *(_DWORD *)(a1 + 72);
      int v16 = 67109120;
      LODWORD(v17) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MAClientHandler] Completed MADRequestID %d",  (uint8_t *)&v16,  8u);
    }
  }

  uint64_t v9 = VCPSignPostLog();
  BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 56);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v16 = 138412290;
    uint64_t v17 = v13;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v12,  "VCPMediaAnalysisClientHandler_URL",  "%@",  (uint8_t *)&v16,  0xCu);
  }

  if (*(void *)(a1 + 64))
  {
    uint64_t v14 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMediaAnalysisClientHandler_URL", v14 - *(void *)(a1 + 64));
  }

  uint64_t v15 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v15 + 16))(v15, 0LL, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v15 + 16))(v15, *(void *)(a1 + 40), 0LL);
  }
}

void sub_100051004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100051024(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100051604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100051A8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

BOOL sub_100051B60(id a1)
{
  return 0;
}

void sub_100051B68(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel(v3, v4) >= 6)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = *(_DWORD *)(a1 + 72);
      int v16 = 67109120;
      LODWORD(v17) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MAClientHandler] Completed MADRequestID %d",  (uint8_t *)&v16,  8u);
    }
  }

  uint64_t v9 = VCPSignPostLog();
  BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 56);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v16 = 138412290;
    uint64_t v17 = v13;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v12,  "VCPMediaAnalysisClientHandler_PHAsset",  "%@",  (uint8_t *)&v16,  0xCu);
  }

  if (*(void *)(a1 + 64))
  {
    uint64_t v14 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMediaAnalysisClientHandler_PHAsset", v14 - *(void *)(a1 + 64));
  }

  uint64_t v15 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v15 + 16))(v15, 0LL, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v15 + 16))(v15, *(void *)(a1 + 40), 0LL);
  }
}

void sub_100051CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100051D14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000521B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, void *a27, void *a28)
{
  sub_10000421C((const void **)(v33 - 152));
  _Unwind_Resume(a1);
}

BOOL sub_1000522C0(id a1)
{
  return 0;
}

void sub_1000522C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel(v3, v4) >= 6)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = *(_DWORD *)(a1 + 72);
      int v16 = 67109120;
      LODWORD(v17) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MAClientHandler] Completed MADRequestID %d",  (uint8_t *)&v16,  8u);
    }
  }

  uint64_t v9 = VCPSignPostLog();
  BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 56);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v16 = 138412290;
    uint64_t v17 = v13;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v12,  "VCPMediaAnalysisClientHandler_PHAsset",  "%@",  (uint8_t *)&v16,  0xCu);
  }

  if (*(void *)(a1 + 64))
  {
    uint64_t v14 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMediaAnalysisClientHandler_PHAsset", v14 - *(void *)(a1 + 64));
  }

  uint64_t v15 = *(void *)(a1 + 48);
  if (v3) {
    (*(void (**)(uint64_t, void, id))(v15 + 16))(v15, 0LL, v3);
  }
  else {
    (*(void (**)(uint64_t, void, void))(v15 + 16))(v15, *(void *)(a1 + 40), 0LL);
  }
}

void sub_100052454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100052474(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100052A98( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

BOOL sub_100052BD0(id a1)
{
  return 0;
}

void sub_100052BD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel(v3, v4) >= 6)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = *(_DWORD *)(a1 + 80);
      int v27 = 67109120;
      LODWORD(v2_Block_object_dispose(va, 8) = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MAClientHandler] Completed MADRequestID %d",  (uint8_t *)&v27,  8u);
    }
  }

  uint64_t v9 = VCPSignPostLog();
  BOOL v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  os_signpost_id_t v12 = *(void *)(a1 + 64);
  if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    uint64_t v13 = *(void *)(a1 + 32);
    int v27 = 138412290;
    uint64_t v28 = v13;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v12,  "VCPMediaAnalysisClientHandler_PHAsset",  "%@",  (uint8_t *)&v27,  0xCu);
  }

  if (*(void *)(a1 + 72))
  {
    uint64_t v16 = mach_absolute_time();
    uint64_t v14 = VCPPerformance_LogMeasurement("VCPMediaAnalysisClientHandler_PHAsset", v16 - *(void *)(a1 + 72));
  }

  if (v3)
  {
    if ((int)MediaAnalysisLogLevel(v14, v15) >= 3)
    {
      uint64_t v17 = VCPLogInstance();
      BOOL v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      os_log_type_t v19 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = *(void *)(a1 + 40);
        int v21 = *(_DWORD *)(a1 + 80);
        int v27 = 138412802;
        uint64_t v28 = v20;
        __int16 v29 = 1024;
        int v30 = v21;
        __int16 v31 = 2112;
        id v32 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "[MAClientHandler] Failed to process asset (%@) for MADRequestID %d - %@",  (uint8_t *)&v27,  0x1Cu);
      }
    }
  }

  else if ((int)MediaAnalysisLogLevel(v14, v15) >= 7)
  {
    uint64_t v22 = VCPLogInstance();
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    os_log_type_t v24 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = *(void *)(a1 + 40);
      int v26 = *(_DWORD *)(a1 + 80);
      int v27 = 138412546;
      uint64_t v28 = v25;
      __int16 v29 = 1024;
      int v30 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "[MAClientHandler] Finished processing asset (%@) for MADRequestID %d",  (uint8_t *)&v27,  0x12u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100052E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100052E90(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel(v3, v4) >= 3)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = *(_DWORD *)(a1 + 48);
      int v10 = 138412802;
      uint64_t v11 = v8;
      __int16 v12 = 1024;
      int v13 = v9;
      __int16 v14 = 2112;
      id v15 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MAClientHandler] Failed to schedule processing asset (%@) for MADRequestID %d - %@",  (uint8_t *)&v10,  0x1Cu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100052F90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100053310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000533B8(id a1)
{
  return 0;
}

void sub_1000533C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = v3;
  if (v3)
  {
    if ((int)MediaAnalysisLogLevel(v3, v4) >= 3)
    {
      uint64_t v6 = VCPLogInstance();
      os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      os_log_type_t v8 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v7, v8))
      {
        int v9 = *(_DWORD *)(a1 + 48);
        int v14 = 67109378;
        int v15 = v9;
        __int16 v16 = 2112;
        uint64_t v17 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[MAClientHandler] Failed to process for MADRequestID %d - %@",  (uint8_t *)&v14,  0x12u);
      }
    }
  }

  else if ((int)MediaAnalysisLogLevel(0LL, v4) >= 6)
  {
    uint64_t v10 = VCPLogInstance();
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    os_log_type_t v12 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v11, v12))
    {
      int v13 = *(_DWORD *)(a1 + 48);
      int v14 = 67109120;
      int v15 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "[MAClientHandler] Completed MADRequestID %d",  (uint8_t *)&v14,  8u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100053530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100053550(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 3)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = [*(id *)(a1 + 32) count];
      int v11 = *(_DWORD *)(a1 + 48);
      int v12 = 134218498;
      id v13 = v10;
      __int16 v14 = 1024;
      int v15 = v11;
      __int16 v16 = 2112;
      id v17 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[MAClientHandler] Failed to schedule processing %lu assets MADRequestID %d - %@",  (uint8_t *)&v12,  0x1Cu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100053654(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100053964( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, void *a25)
{
  _Unwind_Resume(a1);
}

id sub_1000539F0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

id sub_100053A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) handleResult:a2 atRequestIdx:a3 forRequestID:*(unsigned int *)(a1 + 40)];
}

BOOL sub_100053A30(id a1)
{
  return 0;
}

void sub_100053A38(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ((int)MediaAnalysisLogLevel(v6, v7) >= 6)
  {
    uint64_t v8 = VCPLogInstance();
    os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    os_log_type_t v10 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v9, v10))
    {
      int v11 = *(_DWORD *)(a1 + 64);
      int v18 = 67109120;
      LODWORD(v19) = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "[MAClientHandler] Completed MADRequestID %d",  (uint8_t *)&v18,  8u);
    }
  }

  uint64_t v12 = VCPSignPostLog();
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  __int16 v14 = v13;
  os_signpost_id_t v15 = *(void *)(a1 + 48);
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v13))
  {
    uint64_t v16 = *(void *)(a1 + 32);
    int v18 = 138412290;
    uint64_t v19 = v16;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v14,  OS_SIGNPOST_INTERVAL_END,  v15,  "VCPMediaAnalysisClientHandler_VideoE2E",  "%@",  (uint8_t *)&v18,  0xCu);
  }

  if (*(void *)(a1 + 56))
  {
    uint64_t v17 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMediaAnalysisClientHandler_VideoE2E", v17 - *(void *)(a1 + 56));
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100053BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100053BFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100053E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100053EBC(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  sandbox_extension_release(*(void *)(a1 + 40));
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100053F18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100054074( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10005485C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10005501C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1000554C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000558F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000559D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100055B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100055C20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100055D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100056058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000560D4(id a1)
{
  return 0;
}

void sub_1000560DC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = VCPSignPostLog();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  os_signpost_id_t v7 = a1[6];
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    uint64_t v8 = a1[4];
    int v10 = 138412290;
    uint64_t v11 = v8;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v7,  "VCPMediaAnalysisClientHandler_TextPrewarmingE2E",  "%@",  (uint8_t *)&v10,  0xCu);
  }

  if (a1[7])
  {
    uint64_t v9 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMediaAnalysisClientHandler_TextPrewarmingE2E", v9 - a1[7]);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_1000561E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000561FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000564E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL sub_10005658C(id a1)
{
  return 0;
}

void sub_100056594(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = VCPSignPostLog();
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  os_signpost_id_t v10 = a1[6];
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    uint64_t v11 = a1[4];
    int v13 = 138412290;
    uint64_t v14 = v11;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v10,  "VCPMediaAnalysisClientHandler_TextProcessingE2E",  "%@",  (uint8_t *)&v13,  0xCu);
  }

  if (a1[7])
  {
    uint64_t v12 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMediaAnalysisClientHandler_TextProcessingE2E", v12 - a1[7]);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_1000566B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000566D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100056968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000569E4(id a1)
{
  return 0;
}

void sub_1000569EC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = VCPSignPostLog();
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  id v6 = v5;
  os_signpost_id_t v7 = a1[6];
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v5))
  {
    uint64_t v8 = a1[4];
    int v10 = 138412290;
    uint64_t v11 = v8;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v6,  OS_SIGNPOST_INTERVAL_END,  v7,  "VCPMediaAnalysisClientHandler_MultiModalPrewarmingE2E",  "%@",  (uint8_t *)&v10,  0xCu);
  }

  if (a1[7])
  {
    uint64_t v9 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMediaAnalysisClientHandler_MultiModalPrewarmingE2E", v9 - a1[7]);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_100056AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100056B0C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100056DB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

BOOL sub_100056E3C(id a1)
{
  return 0;
}

void sub_100056E44(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = VCPSignPostLog();
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  os_signpost_id_t v10 = a1[6];
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    uint64_t v11 = a1[4];
    int v13 = 138412290;
    uint64_t v14 = v11;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v10,  "VCPMediaAnalysisClientHandler_MultiModalProcessingE2E",  "%@",  (uint8_t *)&v13,  0xCu);
  }

  if (a1[7])
  {
    uint64_t v12 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPMediaAnalysisClientHandler_MultiModalProcessingE2E", v12 - a1[7]);
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_100056F64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100056F84(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100057878( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21, void *a22)
{
  _Block_object_dispose((const void *)(v23 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000579F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_100057A08(uint64_t a1)
{
}

void sub_100057A10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  v14[0] = _NSConcreteStackBlock;
  void v14[2] = sub_100057B10;
  v14[3] = &unk_1001BB7C0;
  v14[1] = 3221225472LL;
  id v15 = v7;
  id v9 = *(id *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 32);
  id v16 = v9;
  uint64_t v17 = v10;
  int v22 = *(_DWORD *)(a1 + 72);
  id v18 = v6;
  id v11 = *(id *)(a1 + 56);
  id v19 = v5;
  id v20 = v11;
  uint64_t v21 = *(void *)(a1 + 64);
  id v12 = v5;
  id v13 = v6;
  dispatch_async(v8, v14);
}

void sub_100057B10(uint64_t a1)
{
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_100057D8C;
  v28[3] = &unk_1001BB798;
  __int128 v2 = *(void **)(a1 + 32);
  id v29 = *(id *)(a1 + 40);
  [v2 enumerateObjectsUsingBlock:v28];
  id v3 = *(void **)(*(void *)(a1 + 48) + 32LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88)));
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKeyedSubscript:v4]);

  if (v5)
  {
    if (*(void *)(a1 + 56))
    {
      uint64_t v8 = MediaAnalysisLogLevel(v6, v7);
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 88);
          uint64_t v14 = *(void *)(a1 + 56);
          *(_DWORD *)__int128 buf = 67109378;
          int v31 = v13;
          __int16 v32 = 2112;
          uint64_t v33 = v14;
          id v15 = "[MAClientHandler] MADRequestID %d failed %@";
          id v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, buf, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v19 = MediaAnalysisLogLevel(v6, v7);
      if ((int)v19 >= 6)
      {
        uint64_t v21 = VCPLogInstance(v19, v20);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        os_log_type_t v22 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v11, v22))
        {
          int v23 = *(_DWORD *)(a1 + 88);
          *(_DWORD *)__int128 buf = 67109120;
          int v31 = v23;
          id v15 = "[MAClientHandler] MADRequestID %d completed";
          id v16 = v11;
          os_log_type_t v17 = v22;
          uint32_t v18 = 8;
          goto LABEL_9;
        }

void sub_100057D40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_100057D8C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
  if ((int)v7 >= 7)
  {
    uint64_t v9 = VCPLogInstance(v7, v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    os_log_type_t v11 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v10, v11))
    {
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:a3]);
      int v13 = 138412290;
      uint64_t v14 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[MAClientHandler] Releasing sandbox extension for %@",  (uint8_t *)&v13,  0xCu);
    }
  }

  sandbox_extension_release([v5 longLongValue]);
}

void sub_100057E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100057EB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100057ECC(uint64_t a1)
{
  __int128 v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 88)));
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPFullAnalysisURLProcessingTask taskForURLAsset:withOptions:analysisTypes:progressHandler:completionHandler:]( &OBJC_CLASS___VCPFullAnalysisURLProcessingTask,  "taskForURLAsset:withOptions:analysisTypes:progressHandler:completionHandler:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 80),  *(void *)(a1 + 64),  *(void *)(a1 + 72)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      os_log_type_t v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 88)));
      uint64_t v13 = *(void *)(a1 + 56);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_1000580C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100058564( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34)
{
  _Block_object_dispose((const void *)(v40 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_100058654(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100058670(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_100058744;
  v12[3] = &unk_1001BA1B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[1] = 3221225472LL;
  v12[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v8;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_100058744(uint64_t a1)
{
  __int128 v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 72);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          id v15 = "[MAClientHandler] MADRequestID %d failed %@";
          uint64_t v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 72);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        id v15 = "[MAClientHandler] MADRequestID %d completed";
        uint64_t v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_100058924(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100058948(uint64_t a1)
{
  __int128 v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 88)));
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPFullAnalysisAssetProcessingTask taskWithAsset:andAnalysisTypes:andOptions:andProgressHandler:andCompletionHandler:]( &OBJC_CLASS___VCPFullAnalysisAssetProcessingTask,  "taskWithAsset:andAnalysisTypes:andOptions:andProgressHandler:andCompletionHandler:",  *(void *)(a1 + 40),  *(void *)(a1 + 80),  *(void *)(a1 + 48),  *(void *)(a1 + 64),  *(void *)(a1 + 72)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      id v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 88)));
      uint64_t v13 = *(void *)(a1 + 56);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_100058B44( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100058FD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_100059070(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10005908C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100059144;
  block[3] = &unk_1001BB838;
  block[1] = 3221225472LL;
  block[4] = v6;
  int v14 = *(_DWORD *)(a1 + 56);
  int v15 = a3;
  id v11 = v5;
  id v12 = v7;
  uint64_t v13 = *(void *)(a1 + 48);
  id v9 = v5;
  dispatch_async(v8, block);
}

void sub_100059144(uint64_t a1)
{
  __int128 v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(unsigned int *)(a1 + 68);
    if ((_DWORD)v7)
    {
      uint64_t v8 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d failed %d",  *(unsigned int *)(a1 + 64),  v7));
      uint64_t v10 = MediaAnalysisLogLevel(v8, v9);
      if ((int)v10 < 3)
      {
LABEL_11:
        os_log_type_t v20 = (void *)v8;
LABEL_12:
        int v21 = *(void **)(*(void *)(a1 + 32) + 32LL);
        os_log_type_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
        [v21 removeObjectForKey:v22];

        uint64_t v24 = *(void *)(a1 + 40);
        uint64_t v23 = *(void *)(a1 + 48);
        id v25 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:*(unsigned int *)(a1 + 68) withDescription:v20];
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        (*(void (**)(uint64_t, uint64_t, void *))(v23 + 16))(v23, v24, v26);

        goto LABEL_13;
      }

      uint64_t v12 = VCPLogInstance(v10, v11);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      os_log_type_t v14 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v13, v14))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v30 = v8;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "[MAClientHandler] %@", buf, 0xCu);
      }
    }

    else
    {
      uint64_t v15 = MediaAnalysisLogLevel(v5, v6);
      if ((int)v15 < 6)
      {
        os_log_type_t v20 = 0LL;
        goto LABEL_12;
      }

      uint64_t v17 = VCPLogInstance(v15, v16);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      os_log_type_t v18 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v13, v18))
      {
        int v19 = *(_DWORD *)(a1 + 64);
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v3sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v19;
        _os_log_impl((void *)&_mh_execute_header, v13, v18, "[MAClientHandler] MADRequestID %d completed", buf, 8u);
      }

      uint64_t v8 = 0LL;
    }

    goto LABEL_11;
  }

void sub_100059384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000593D4(uint64_t a1)
{
  __int128 v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 80)));
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPMediaAnalysisServiceTask taskForPhotoLibrary:withAssetLocalIdentifiers:realTime:progressHandler:completionHandler:]( &OBJC_CLASS___VCPMediaAnalysisServiceTask,  "taskForPhotoLibrary:withAssetLocalIdentifiers:realTime:progressHandler:completionHandler:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(unsigned __int8 *)(a1 + 84),  *(void *)(a1 + 64),  *(void *)(a1 + 72)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      uint64_t v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 80)));
      uint64_t v13 = *(void *)(a1 + 56);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_1000595D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

LABEL_36:
}
      }
    }

    -[NSURL stopAccessingSecurityScopedResource](self->_resultDirectoryURL, "stopAccessingSecurityScopedResource");
    goto LABEL_38;
  }

  id v16 = MediaAnalysisLogLevel(v14, v15);
  if ((int)v16 >= 4)
  {
    os_log_type_t v18 = VCPLogInstance(v16, v17);
    int v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    os_log_type_t v20 = VCPLogToOSLogType[4];
    if (os_log_type_enabled((os_log_t)v19, v20))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v76 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v19,  v20,  "%@ Invalid sync point in paused analysis",  buf,  0xCu);
    }

    goto LABEL_40;
  }

      int v19 = 1;
      goto LABEL_37;
    }

    if (objc_msgSend(v6, "vcp_isLivePhoto"))
    {
      os_log_type_t v22 = objc_msgSend(v16, "vcp_hasLocalPhoto:", objc_msgSend(v6, "hasAdjustments"));
      if ((v22 & 1) == 0)
      {
        __int128 v47 = MediaAnalysisLogLevel(v22, v23);
        if ((int)v47 >= 7)
        {
          __int128 v49 = VCPLogInstance(v47, v48);
          id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
          uint64_t v30 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v29, v30))
          {
            int v31 = (void *)objc_claimAutoreleasedReturnValue([v6 localIdentifier]);
            id v59 = 138412290;
            uint64_t v60 = v31;
            __int16 v32 = "[%@] Live Photo has no local image; skipping";
            goto LABEL_29;
          }

          goto LABEL_35;
        }

        goto LABEL_36;
      }
    }

    uint64_t v24 = objc_msgSend(v6, "vcp_isVideoSlowmo");
    if ((_DWORD)v24)
    {
      uint64_t v26 = MediaAnalysisLogLevel(v24, v25);
      if ((int)v26 >= 7)
      {
        uint64_t v28 = VCPLogInstance(v26, v27);
        id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        uint64_t v30 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v29, v30))
        {
          int v31 = (void *)objc_claimAutoreleasedReturnValue([v6 localIdentifier]);
          id v59 = 138412290;
          uint64_t v60 = v31;
          __int16 v32 = "[%@] Slowmo not supported for streaming analysis; skipping";
LABEL_29:
          _os_log_impl((void *)&_mh_execute_header, v29, v30, v32, (uint8_t *)&v59, 0xCu);

          goto LABEL_35;
        }

        goto LABEL_35;
      }

      goto LABEL_36;
    }

    id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "vcp_smallMovieDerivativeResource"));
    if (v29)
    {
      if ([v6 isVideo])
      {
        id v37 = -[os_log_s fileSize](v29, "fileSize");
        __int16 v38 = +[VCPDownloadManager maxSizeBytes](&OBJC_CLASS___VCPDownloadManager, "maxSizeBytes");
        if (v37 > v38)
        {
          uint64_t v40 = MediaAnalysisLogLevel(v38, v39);
          __int128 v42 = VCPLogInstance(v40, v41);
          id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
          uint64_t v44 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v43, v44))
          {
            uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v6 localIdentifier]);
            id v59 = 138412290;
            uint64_t v60 = v45;
            __int128 v46 = "[%@] File size exceeds streaming threshold; skipping";
LABEL_33:
            _os_log_impl((void *)&_mh_execute_header, v43, v44, v46, (uint8_t *)&v59, 0xCu);

            goto LABEL_34;
          }

          goto LABEL_34;
        }

        if (!v37)
        {
          uint64_t v54 = objc_msgSend(v6, "vcp_isLongMovie");
          if ((_DWORD)v54)
          {
            __int16 v56 = MediaAnalysisLogLevel(v54, v55);
            int v58 = VCPLogInstance(v56, v57);
            id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
            uint64_t v44 = VCPLogToOSLogType[7];
            if (!os_log_type_enabled(v43, v44)) {
              goto LABEL_34;
            }
            uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v6 localIdentifier]);
            id v59 = 138412290;
            uint64_t v60 = v45;
            __int128 v46 = "[%@] Duration exceeds streaming threshold; skipping";
            goto LABEL_33;
          }
        }
      }

      goto LABEL_8;
    }

    __int128 v50 = MediaAnalysisLogLevel(0LL, v36);
    __int128 v52 = VCPLogInstance(v50, v51);
    id v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
    uint64_t v44 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v6 localIdentifier]);
      id v59 = 138412290;
      uint64_t v60 = v45;
      __int128 v46 = "[%@] Asset has no small video derivative; skipping";
      goto LABEL_33;
    }

void sub_100059A64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
}

LABEL_21:
  uint64_t v35 =  +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:",  v6);
}
      }

        id v16 = (char *)v16 + 1;
      }

      while (v13 != v16);
      __int16 v38 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v11,  "countByEnumeratingWithState:objects:count:",  &v77,  v88,  16LL);
      uint64_t v13 = v38;
    }

    while (v38);
  }

  __int16 v39 = objc_claimAutoreleasedReturnValue([v72 allValues]);
  assetEntries = v66->_assetEntries;
  v66->_assetEntries = (NSArray *)v39;

  uint64_t v75 = 0u;
  uint64_t v76 = 0u;
  os_log_type_t v73 = 0u;
  int v74 = 0u;
  __int128 v41 = v66->_assetEntries;
  __int128 v42 = -[NSArray countByEnumeratingWithState:objects:count:]( v41,  "countByEnumeratingWithState:objects:count:",  &v73,  v81,  16LL);
  if (v42)
  {
    id v43 = v42;
    uint64_t v44 = *(void *)v74;
    uint64_t v45 = VCPLogToOSLogType[4];
    do
    {
      for (unint64_t i = 0LL; i != v43; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v74 != v44) {
          objc_enumerationMutation(v41);
        }
        __int128 v47 = *(void **)(*((void *)&v73 + 1) + 8LL * (void)i);
        __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v47, "asset", spid));
        __int128 v49 = (void *)objc_claimAutoreleasedReturnValue( +[VCPFaceUtils preferredResourcesForFaceProcessingWithAsset:]( &OBJC_CLASS___VCPFaceUtils,  "preferredResourcesForFaceProcessingWithAsset:",  v48));

        __int128 v50 = (void *)objc_claimAutoreleasedReturnValue( +[VCPFaceUtils resourceForFaceProcessing:allowStreaming:]( &OBJC_CLASS___VCPFaceUtils,  "resourceForFaceProcessing:allowStreaming:",  v49,  1LL));
        [v47 setResource:v50];

        __int128 v51 = (void *)objc_claimAutoreleasedReturnValue([v47 resource]);
        if (!v51)
        {
          uint64_t v54 = MediaAnalysisLogLevel(v52, v53);
          if ((int)v54 >= 4)
          {
            __int16 v56 = VCPLogInstance(v54, v55);
            uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
            if (os_log_type_enabled(v57, v45))
            {
              int v58 = (void *)objc_claimAutoreleasedReturnValue([v47 asset]);
              id v59 = (void *)objc_claimAutoreleasedReturnValue([v58 localIdentifier]);
              *(_DWORD *)__int128 buf = 138412290;
              uint64_t v83 = v59;
              _os_log_impl( (void *)&_mh_execute_header,  v57,  v45,  "[FaceCrop][%@] Failed to identify resource",  buf,  0xCu);
            }
          }
        }
      }

      id v43 = -[NSArray countByEnumeratingWithState:objects:count:]( v41,  "countByEnumeratingWithState:objects:count:",  &v73,  v81,  16LL);
    }

    while (v43);
  }

  uint64_t v61 = VCPSignPostLog(v60);
  uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
  uint64_t v63 = v62;
  if (v67 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v62))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v63,  OS_SIGNPOST_INTERVAL_END,  spid,  "MADPhotosFaceCropGenerationTask_Prepare",  (const char *)&unk_100199097,  buf,  2u);
  }

  -[VCPTimeMeasurement stop](v68, "stop");
  __int128 v64 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  -[VCPTimeMeasurement elapsedTimeSeconds](v68, "elapsedTimeSeconds");
  objc_msgSend( v64,  "accumulateDoubleValue:forField:andEvent:",  @"TotalPrepareTimeInSeconds",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");
}

  __int16 v39 = 1;
LABEL_29:

  return v39;
}
          }

          continue;
        }
      }

      uint64_t v4 = [v2 countByEnumeratingWithState:&v40 objects:v48 count:16];
    }

    while (v4);
  }

  objc_autoreleasePoolPop(context);
  int v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) allValues]);
  __int16 v32 = objc_claimAutoreleasedReturnValue([v31 sortedArrayUsingComparator:&stru_1001BD480]);
  uint64_t v33 = *(void *)(*(void *)(a1 + 40) + 8LL);
  __int16 v34 = *(void **)(v33 + 40);
  *(void *)(v33 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v32;
}

      id v25 = 0LL;
LABEL_37:

      goto LABEL_38;
    }

    if (!v12)
    {
      __int16 v38 = MediaAnalysisLogLevel(v17, v18);
      if ((int)v38 >= 3)
      {
        uint64_t v40 = VCPLogInstance(v38, v39);
        os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        __int128 v41 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v22, v41))
        {
          __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v5 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v62 = v42;
          _os_log_impl( (void *)&_mh_execute_header,  v22,  v41,  "[ComputeSync|Backfill][%@] No full analysis results available, unable to generate payload",  buf,  0xCu);
        }

        goto LABEL_35;
      }

      goto LABEL_21;
    }

    uint64_t v26 = [v5 isVideo];
    if ((_DWORD)v26)
    {
      uint64_t v27 = VCPSignPostLog(v26);
      uint64_t v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      id v29 = os_signpost_id_generate(v28);

      int v31 = VCPSignPostLog(v30);
      __int16 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      uint64_t v33 = v32;
      if (v29 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v32))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v33,  OS_SIGNPOST_INTERVAL_BEGIN,  v29,  "MADMaintenanceBackfill_Movie_PackComputeSyncPayload",  (const char *)&unk_100199097,  buf,  2u);
      }

      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[VCPProtoAssetAnalysis movieAnalysisComputeSyncPayloadFromLegacyDictionary:]( &OBJC_CLASS___VCPProtoAssetAnalysis,  "movieAnalysisComputeSyncPayloadFromLegacyDictionary:",  v12));
      __int16 v34 = VCPSignPostLog(v22);
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      uint64_t v36 = v35;
      if (v29 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v35)) {
        goto LABEL_29;
      }
      *(_WORD *)__int128 buf = 0;
      id v37 = "MADMaintenanceBackfill_Movie_PackComputeSyncPayload";
    }

    else
    {
      id v43 = VCPSignPostLog(v26);
      uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
      id v29 = os_signpost_id_generate(v44);

      __int128 v46 = VCPSignPostLog(v45);
      __int128 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
      __int128 v48 = v47;
      if (v29 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v47))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v48,  OS_SIGNPOST_INTERVAL_BEGIN,  v29,  "MADMaintenanceBackfill_Image_PackComputeSyncPayload",  (const char *)&unk_100199097,  buf,  2u);
      }

      os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[VCPProtoAssetAnalysis imageAnalysisComputeSyncPayloadFromLegacyDictionary:]( &OBJC_CLASS___VCPProtoAssetAnalysis,  "imageAnalysisComputeSyncPayloadFromLegacyDictionary:",  v12));
      __int128 v49 = VCPSignPostLog(v22);
      __int128 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
      uint64_t v36 = v50;
      if (v29 - 1 > 0xFFFFFFFFFFFFFFFDLL || !os_signpost_enabled(v50)) {
        goto LABEL_29;
      }
      *(_WORD *)__int128 buf = 0;
      id v37 = "MADMaintenanceBackfill_Image_PackComputeSyncPayload";
    }

    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v36,  OS_SIGNPOST_INTERVAL_END,  v29,  v37,  (const char *)&unk_100199097,  buf,  2u);
LABEL_29:

    if (v22)
    {
      id v25 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s data](v22, "data"));
LABEL_36:

      goto LABEL_37;
    }

    __int128 v53 = MediaAnalysisLogLevel(v51, v52);
    if ((int)v53 >= 3)
    {
      uint64_t v55 = VCPLogInstance(v53, v54);
      __int16 v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
      uint64_t v57 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v56, v57))
      {
        int v58 = (void *)objc_claimAutoreleasedReturnValue([v5 localIdentifier]);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v62 = v58;
        _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "[ComputeSync|Backfill][%@] Failed to serialize full analysis results as payload",  buf,  0xCu);
      }
    }

  return v31;
}

void sub_100059E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005A340( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_10005A3FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10005A418(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(dispatch_queue_s **)(v3 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10005A4B8;
  block[3] = &unk_1001BB8B0;
  block[4] = v3;
  __int128 v6 = *(_OWORD *)(a1 + 40);
  int v10 = *(_DWORD *)(a1 + 64);
  int v11 = a2;
  id v5 = (id)v6;
  __int128 v8 = v6;
  uint64_t v9 = *(void *)(a1 + 56);
  dispatch_async(v4, block);
}

void sub_10005A4B8(uint64_t a1)
{
  __int128 v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) stop];
    uint64_t v5 = *(unsigned int *)(a1 + 68);
    uint64_t v6 = *(unsigned int *)(a1 + 64);
    [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) elapsedTimeSeconds];
    uint64_t v8 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d failed (err: %d) in %0.6fs",  v6,  v5,  v7));
    int v10 = (void *)v8;
    if (*(_DWORD *)(a1 + 68))
    {
      uint64_t v11 = MediaAnalysisLogLevel(v8, v9);
      if ((int)v11 >= 3)
      {
        uint64_t v13 = VCPLogInstance(v11, v12);
        id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        os_log_type_t v15 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v14, v15))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v34[0] = v10;
          id v16 = "[MAClientHandler] %@";
          id v17 = v14;
          os_log_type_t v18 = v15;
          uint32_t v19 = 12;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v17, v18, v16, buf, v19);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v20 = MediaAnalysisLogLevel(v8, v9);
      if ((int)v20 >= 6)
      {
        uint64_t v22 = VCPLogInstance(v20, v21);
        id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        os_log_type_t v23 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v14, v23))
        {
          int v24 = *(_DWORD *)(a1 + 64);
          [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) elapsedTimeSeconds];
          *(_DWORD *)__int128 buf = 67109376;
          LODWORD(v34[0]) = v24;
          WORD2(v34[0]) = 2048;
          *(void *)((char *)v34 + 6) = v25;
          id v16 = "[MAClientHandler] MADRequestID %d completed in %0.6fs";
          id v17 = v14;
          os_log_type_t v18 = v23;
          uint32_t v19 = 18;
          goto LABEL_9;
        }

void sub_10005A724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005A774(uint64_t a1)
{
  __int128 v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    id v63 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 88)));
    uint64_t v5 = *(void *)(a1 + 56);
    id v6 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v63];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v7);
  }

  else
  {
    uint64_t v8 = objc_autoreleasePoolPush();
    uint64_t v9 = 0LL;
    switch(*(void *)(a1 + 80))
    {
      case 1LL:
        int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:VCPPhotosProcessing_ForceFullScanKey]);
        unsigned int v11 = [v10 BOOLValue];

        if (v11) {
          [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:1 andPhotoLibrary:*(void *)(a1 + 48)];
        }
        uint64_t v73 = *(void *)(a1 + 48);
        uint64_t v12 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v73,  1LL));
        uint64_t v13 = objc_claimAutoreleasedReturnValue( +[VCPLibraryProcessingTask taskWithPhotoLibraries:andOptions:andProgressHandler:andCompletionHandler:andCancelBlock:]( &OBJC_CLASS___VCPLibraryProcessingTask,  "taskWithPhotoLibraries:andOptions:andProgressHandler:andCompletionHandler:andCancelBlock:",  v12,  *(void *)(a1 + 40),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  &stru_1001BB958));
        goto LABEL_37;
      case 2LL:
        id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:VCPPhotosProcessing_ForceFullScanKey]);
        unsigned int v15 = [v14 BOOLValue];

        if (v15) {
          [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:2 andPhotoLibrary:*(void *)(a1 + 48)];
        }
        uint64_t v81 = *(void *)(a1 + 48);
        uint64_t v12 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v81,  1LL));
        uint64_t v13 = objc_claimAutoreleasedReturnValue( +[VCPMADSceneLibraryProcessingTask taskWithPhotoLibraries:cancelBlock:progressHandler:andCompletionHandler:]( &OBJC_CLASS___VCPMADSceneLibraryProcessingTask,  "taskWithPhotoLibraries:cancelBlock:progressHandler:andCompletionHandler:",  v12,  &stru_1001BB8F8,  *(void *)(a1 + 64),  *(void *)(a1 + 72)));
        goto LABEL_37;
      case 3LL:
        id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:VCPPhotosProcessing_ForceFullScanKey]);
        unsigned int v17 = [v16 BOOLValue];

        if (v17) {
          [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:3 andPhotoLibrary:*(void *)(a1 + 48)];
        }
        uint64_t v80 = *(void *)(a1 + 48);
        uint64_t v12 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v80,  1LL));
        uint64_t v13 = objc_claimAutoreleasedReturnValue( +[VCPFaceLibraryProcessingTask taskWithPhotoLibraries:andOptions:andProgressHandler:andCompletionHandler:andCancelBlock:]( &OBJC_CLASS___VCPFaceLibraryProcessingTask,  "taskWithPhotoLibraries:andOptions:andProgressHandler:andCompletionHandler:andCancelBlock:",  v12,  *(void *)(a1 + 40),  *(void *)(a1 + 64),  *(void *)(a1 + 72),  &stru_1001BB918));
        goto LABEL_37;
      case 7LL:
        uint64_t v12 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) objectForKeyedSubscript:VCPTurboProcessing_VCPTaskIDsKey]);
        if (!v12)
        {
          uint64_t v19 = MediaAnalysisLogLevel(0LL, v18);
          if ((int)v19 >= 5)
          {
            uint64_t v21 = VCPLogInstance(v19, v20);
            uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
            os_log_type_t v23 = VCPLogToOSLogType[5];
            if (os_log_type_enabled(v22, v23))
            {
              int v24 = *(_DWORD *)(a1 + 88);
              *(_DWORD *)__int128 buf = 67109378;
              int v77 = v24;
              __int16 v78 = 2112;
              uint64_t v79 = VCPTurboProcessing_VCPTaskIDsKey;
              _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "[MAClientHandler] MADRequestID %d: %@ not specified; added Photos Scene and Face Processing",
                buf,
                0x12u);
            }
          }

          uint64_t v12 = &off_1001C9018;
        }

        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:VCPPhotosProcessing_ForceFullScanKey]);
        unsigned int v26 = [v25 BOOLValue];

        if (v26)
        {
          __int128 v70 = 0u;
          __int128 v71 = 0u;
          __int128 v68 = 0u;
          __int128 v69 = 0u;
          uint64_t v27 = v12;
          id v28 = [v27 countByEnumeratingWithState:&v68 objects:v75 count:16];
          if (v28)
          {
            uint64_t v29 = *(void *)v69;
            do
            {
              for (unint64_t i = 0LL; i != v28; unint64_t i = (char *)i + 1)
              {
                if (*(void *)v69 != v29) {
                  objc_enumerationMutation(v27);
                }
                objc_msgSend( *(id *)(a1 + 32),  "_resetProcessingStatusForTaskID:andPhotoLibrary:",  objc_msgSend(*(id *)(*((void *)&v68 + 1) + 8 * (void)i), "unsignedIntValue"),  *(void *)(a1 + 48));
              }

              id v28 = [v27 countByEnumeratingWithState:&v68 objects:v75 count:16];
            }

            while (v28);
          }

          if ([v27 containsObject:&off_1001C7BC8])
          {
            [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:2 andPhotoLibrary:*(void *)(a1 + 48)];
            [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:3 andPhotoLibrary:*(void *)(a1 + 48)];
            [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:10 andPhotoLibrary:*(void *)(a1 + 48)];
            [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:12 andPhotoLibrary:*(void *)(a1 + 48)];
          }
        }

        v66[0] = _NSConcreteStackBlock;
        v66[1] = 3221225472LL;
        v66[2] = sub_10005B1F4;
        v66[3] = &unk_1001B9A60;
        id v67 = *(id *)(a1 + 72);
        uint64_t v31 = objc_retainBlock(v66);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[VCPCompoundMADTask taskWithPhotoLibrary:forVCPTaskIDs:andOptions:andProgressHandler:andCompletionHandler:andCancelBlock:]( &OBJC_CLASS___VCPCompoundMADTask,  "taskWithPhotoLibrary:forVCPTaskIDs:andOptions:andProgressHandler:andCompletionHandler:andCancelBlock:",  *(void *)(a1 + 48),  v12,  *(void *)(a1 + 40),  *(void *)(a1 + 64),  v31,  &stru_1001BB938));

        goto LABEL_38;
      case 8LL:
        if ([(id)objc_opt_class(*(void *)(a1 + 32)) disablePhotosPostCaptureProcessing])
        {
          __int16 v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Photos post-capture processing has been disabled - %d",  *(unsigned int *)(a1 + 88)));
          uint64_t v33 = *(void *)(a1 + 56);
          id v34 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v32];
          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
          (*(void (**)(uint64_t, void *))(v33 + 16))(v33, v35);
        }

        else
        {
          uint64_t v74 = *(void *)(a1 + 48);
          uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v74,  1LL));
          v64[0] = _NSConcreteStackBlock;
          v64[1] = 3221225472LL;
          v64[2] = sub_10005B258;
          v64[3] = &unk_1001B9A60;
          os_log_type_t v65 = (_UNKNOWN **)*(id *)(a1 + 72);
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[VCPPhotosCaptureProcessingTask taskWithPhotoLibraries:andCompletionHandler:]( &OBJC_CLASS___VCPPhotosCaptureProcessingTask,  "taskWithPhotoLibraries:andCompletionHandler:",  v62,  v64));

          uint64_t v12 = v65;
LABEL_38:

LABEL_39:
          __int16 v38 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) objectForKeyedSubscript:VCPTurboProcessing_QualityOfServiceKey]);
          __int16 v39 = v38;
          if (v38) {
            uint64_t v40 = (uint64_t)[v38 unsignedIntValue];
          }
          else {
            uint64_t v40 = 21LL;
          }
          __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:VCPTurboProcessing_DutyCyclingKey]);
          __int128 v42 = v41;
          if (v41)
          {
            if ([v41 BOOLValue])
            {
              SEL v43 = NSSelectorFromString(@"qosBlock");
              uint64_t v44 = objc_opt_respondsToSelector(v9, v43);
              if ((v44 & 1) != 0)
              {
                uint64_t v46 = MediaAnalysisLogLevel(v44, v45);
                if ((int)v46 >= 6)
                {
                  uint64_t v48 = VCPLogInstance(v46, v47);
                  __int128 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
                  os_log_type_t v50 = VCPLogToOSLogType[6];
                  if (os_log_type_enabled(v49, v50))
                  {
                    *(_WORD *)__int128 buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "[MAClientHandler] DAS duty cycling enabled",  buf,  2u);
                  }
                }

                __int128 v51 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADQoSManager sharedManager](&OBJC_CLASS___VCPMADQoSManager, "sharedManager"));
                [v51 enable];
              }
            }
          }

          __int128 v52 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
          id v53 = [v52 addForegroundTask:v9 withQoS:v40];

          if (v53)
          {
            uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v53));
            uint64_t v55 = *(void **)(*(void *)(a1 + 32) + 32LL);
            __int16 v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(unsigned int *)(a1 + 88)));
            [v55 setObject:v54 forKeyedSubscript:v56];
          }

          else
          {
            uint64_t v57 = *(unsigned int *)(a1 + 88);
            uint64_t v58 = VCPTaskIDDescription(*(void *)(a1 + 80));
            id v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
            uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d for task %@(%lu)",  v57,  v59,  *(void *)(a1 + 80)));

            uint64_t v60 = *(void *)(a1 + 56);
            id v61 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v54];
            __int16 v56 = (void *)objc_claimAutoreleasedReturnValue(v61);
            (*(void (**)(uint64_t, void *))(v60 + 16))(v60, v56);
          }
        }

        objc_autoreleasePoolPop(v8);
        break;
      case 0xALL:
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:VCPPhotosProcessing_ForceFullScanKey]);
        unsigned int v37 = [v36 BOOLValue];

        if (v37) {
          [*(id *)(a1 + 32) _resetProcessingStatusForTaskID:10 andPhotoLibrary:*(void *)(a1 + 48)];
        }
        uint64_t v72 = *(void *)(a1 + 48);
        uint64_t v12 = (_UNKNOWN **)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v72,  1LL));
        uint64_t v13 = objc_claimAutoreleasedReturnValue( +[VCPMADOCRLibraryProcessingTask taskWithPhotoLibraries:cancelBlock:progressHandler:andCompletionHandler:]( &OBJC_CLASS___VCPMADOCRLibraryProcessingTask,  "taskWithPhotoLibraries:cancelBlock:progressHandler:andCompletionHandler:",  v12,  &stru_1001BB978,  *(void *)(a1 + 64),  *(void *)(a1 + 72)));
LABEL_37:
        uint64_t v9 = (void *)v13;
        goto LABEL_38;
      default:
        goto LABEL_39;
    }
  }

void sub_10005B070( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22)
{
  _Unwind_Resume(a1);
}

BOOL sub_10005B1E4(id a1)
{
  return 0;
}

BOOL sub_10005B1EC(id a1)
{
  return 0;
}

void sub_10005B1F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v3 code]);
}

void sub_10005B23C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL sub_10005B250(id a1)
{
  return 0;
}

void sub_10005B258(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v3 code]);
}

void sub_10005B2A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL sub_10005B2B4(id a1)
{
  return 0;
}

BOOL sub_10005B2BC(id a1)
{
  return 0;
}

void sub_10005B638(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005B6B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_10005B784;
  v12[3] = &unk_1001BA1B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[1] = 3221225472LL;
  v12[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v8;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_10005B784(uint64_t a1)
{
  __int128 v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 72);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          id v15 = "[MAClientHandler] MADRequestID %d failed %@";
          uint64_t v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 72);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        id v15 = "[MAClientHandler] MADRequestID %d completed";
        uint64_t v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_10005B964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005B988(uint64_t a1)
{
  __int128 v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    id v25 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 80)));
    uint64_t v5 = *(void *)(a1 + 56);
    id v6 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v25];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v7);
  }

  else
  {
    uint64_t v8 = objc_autoreleasePoolPush();
    uint64_t v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) objectForKeyedSubscript:VCPVideoFramesCaption_TimeRangeKey]);
    CMTimeRangeMakeFromDictionary(&v27, v9);

    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:VCPVideoFramesCaption_FrameRateKey]);
    [v10 floatValue];
    unsigned int v12 = v11;

    uint64_t v13 = *(void *)(a1 + 48);
    CMTimeRange v26 = v27;
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[VCPVideoFramesCaptionTask taskWithFrames:frameRate:timeRange:andCompletionHandler:]( &OBJC_CLASS___VCPVideoFramesCaptionTask,  "taskWithFrames:frameRate:timeRange:andCompletionHandler:",  v13,  &v26,  *(void *)(a1 + 64),  COERCE_DOUBLE(__PAIR64__(v27.duration.flags, v12))));
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v16 = [v15 addForegroundTask:v14 withQoS:25];

    if (v16)
    {
      os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v16));
      uint32_t v18 = *(void **)(*(void *)(a1 + 32) + 32LL);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
      [v18 setObject:v17 forKeyedSubscript:v19];
    }

    else
    {
      uint64_t v20 = *(unsigned int *)(a1 + 80);
      uint64_t v21 = VCPTaskIDDescription(*(void *)(a1 + 72));
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d for task %@(%lu)",  v20,  v22,  *(void *)(a1 + 72)));

      uint64_t v23 = *(void *)(a1 + 56);
      id v24 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v17];
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v24);
      (*(void (**)(uint64_t, void, void *))(v23 + 16))(v23, 0LL, v19);
    }

    objc_autoreleasePoolPop(v8);
  }

void sub_10005BC1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_10005C250( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46)
{
  _Block_object_dispose((const void *)(v52 - 176), 8);
  _Unwind_Resume(a1);
}

id sub_10005C3A0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10005C3BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_10005C490;
  v12[3] = &unk_1001BA1B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[1] = 3221225472LL;
  v12[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v8;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_10005C490(uint64_t a1)
{
  __int128 v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 72);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) description]);
          int v22 = 67109378;
          int v23 = v13;
          __int16 v24 = 2112;
          id v25 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "[MAClientHandler] MADRequestID %d failed %@",  (uint8_t *)&v22,  0x12u);
        }

void sub_10005C68C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005C6B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:a2 withDescription:@"Scene Analysis Failed"];
  id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
  (*(void (**)(uint64_t, void))(v2 + 16))(v2, 0LL);
}

void sub_10005C710( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10005C724(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v19 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 112)));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v20 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 112)));
    uint64_t v4 = *(void *)(a1 + 72);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v20];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    switch(*(void *)(a1 + 104))
    {
      case 2LL:
        uint64_t v8 = -[VCPMADSceneAssetProcessingTask initWithLocalIdentifiers:fromPhotoLibraryWithURL:cancelBlock:progressHandler:completionHandler:]( objc_alloc(&OBJC_CLASS___VCPMADSceneAssetProcessingTask),  "initWithLocalIdentifiers:fromPhotoLibraryWithURL:cancelBlock:progressHandler:completionHandler:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  &stru_1001BB9E8,  *(void *)(a1 + 80),  *(void *)(a1 + 96));
        goto LABEL_10;
      case 3LL:
        uint64_t v8 = (VCPMADSceneAssetProcessingTask *)objc_claimAutoreleasedReturnValue( +[VCPFaceAssetProcessingTask taskWithAssets:andProgressHandler:andCompletionHandler:]( &OBJC_CLASS___VCPFaceAssetProcessingTask,  "taskWithAssets:andProgressHandler:andCompletionHandler:",  *(void *)(a1 + 40),  *(void *)(a1 + 80),  *(void *)(a1 + 88)));
        goto LABEL_10;
      case 4LL:
        uint64_t v8 = (VCPMADSceneAssetProcessingTask *)objc_claimAutoreleasedReturnValue( +[VCPEffectsAssetProcessingTask taskWithAssets:progressHandler:andCompletionHandler:]( &OBJC_CLASS___VCPEffectsAssetProcessingTask,  "taskWithAssets:progressHandler:andCompletionHandler:",  *(void *)(a1 + 40),  *(void *)(a1 + 80),  *(void *)(a1 + 88)));
        goto LABEL_10;
      case 5LL:
        uint64_t v8 = (VCPMADSceneAssetProcessingTask *)objc_claimAutoreleasedReturnValue( +[VCPPhotosSceneprintAssetProcessingTask taskWithAssets:options:andCompletionHandler:]( &OBJC_CLASS___VCPPhotosSceneprintAssetProcessingTask,  "taskWithAssets:options:andCompletionHandler:",  *(void *)(a1 + 40),  *(void *)(a1 + 64),  *(void *)(a1 + 88)));
        goto LABEL_10;
      case 6LL:
        uint64_t v8 = (VCPMADSceneAssetProcessingTask *)objc_claimAutoreleasedReturnValue( +[VCPVideoStabilizationAssetProcessingTask taskWithAssets:andOptions:andCompletionHandler:]( &OBJC_CLASS___VCPVideoStabilizationAssetProcessingTask,  "taskWithAssets:andOptions:andCompletionHandler:",  *(void *)(a1 + 40),  *(void *)(a1 + 64),  *(void *)(a1 + 88)));
LABEL_10:
        uint64_t v21 = v8;
        break;
      default:
        uint64_t v21 = 0LL;
        break;
    }

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v10 = [v9 addForegroundTask:v21 withQoS:25];

    if (v10)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v10));
      os_log_type_t v12 = *(void **)(*(void *)(a1 + 32) + 32LL);
      int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 112)));
      [v12 setObject:v11 forKeyedSubscript:v13];
    }

    else
    {
      uint64_t v14 = *(unsigned int *)(a1 + 112);
      uint64_t v15 = VCPTaskIDDescription(*(void *)(a1 + 104));
      os_log_type_t v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d for task %@(%lu)",  v14,  v16,  *(void *)(a1 + 104)));

      uint64_t v17 = *(void *)(a1 + 72);
      id v18 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v11];
      int v13 = (void *)objc_claimAutoreleasedReturnValue(v18);
      (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0LL, v13);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_10005C9F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

BOOL sub_10005CA4C(id a1)
{
  return 0;
}

void sub_10005CDE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10005CE78(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10005CE94(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(dispatch_queue_s **)(v3 + 24);
  v8[0] = _NSConcreteStackBlock;
  _DWORD v8[2] = sub_10005CF20;
  v8[3] = &unk_1001BA4B8;
  v8[1] = 3221225472LL;
  v8[4] = v3;
  int v11 = *(_DWORD *)(a1 + 56);
  int v12 = a2;
  id v6 = v4;
  uint64_t v7 = *(void *)(a1 + 48);
  id v9 = v6;
  uint64_t v10 = v7;
  dispatch_async(v5, v8);
}

void sub_10005CF20(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    id v5 = *(void **)(*(void *)(a1 + 32) + 32LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56)));
    [v5 removeObjectForKey:v6];

    LODWORD(v6) = *(_DWORD *)(a1 + 60);
    uint64_t v9 = MediaAnalysisLogLevel(v7, v8);
    if ((_DWORD)v6)
    {
      if ((int)v9 >= 3)
      {
        uint64_t v11 = VCPLogInstance(v9, v10);
        int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        os_log_type_t v13 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v12, v13))
        {
          int v14 = *(_DWORD *)(a1 + 56);
          int v15 = *(_DWORD *)(a1 + 60);
          *(_DWORD *)__int128 buf = 67109376;
          int v30 = v14;
          __int16 v31 = 1024;
          int v32 = v15;
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "[MAClientHandler] MADRequestID %d failed %d", buf, 0xEu);
        }
      }

      uint64_t v16 = *(void *)(a1 + 40);
      uint64_t v17 = *(int *)(a1 + 60);
      id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Recents processing failed",  NSLocalizedDescriptionKey));
      id v28 = v18;
      id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
      id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v17,  v19));
      (*(void (**)(uint64_t, void *))(v16 + 16))(v16, v20);
    }

    else
    {
      if ((int)v9 >= 6)
      {
        uint64_t v21 = VCPLogInstance(v9, v10);
        int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        os_log_type_t v23 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v22, v23))
        {
          int v24 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)__int128 buf = 67109120;
          int v30 = v24;
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "[MAClientHandler] MADRequestID %d completed", buf, 8u);
        }
      }

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }
  }

  uint64_t v25 = *(void *)(*(void *)(a1 + 48) + 8LL);
  CMTimeRange v26 = *(void **)(v25 + 40);
  *(void *)(v25 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}

void sub_10005D1A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005D1E4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 56)));
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v7);
  }

  else
  {
    uint64_t v8 = objc_autoreleasePoolPush();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10005D3E8;
    v17[3] = &unk_1001BBA58;
    v17[4] = *(void *)(a1 + 48);
    uint64_t v9 = objc_retainBlock(v17);
    uint64_t v10 = VCPTaskIDDescription(*(void *)(a1 + 48));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    int v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ not supported on this platform",  v11));

    uint64_t v13 = *(void *)(a1 + 40);
    id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v12];
    int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    (*(void (**)(uint64_t, void *))(v13 + 16))(v13, v15);

    objc_autoreleasePoolPop(v8);
  }

void sub_10005D390( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  id v14 = v12;

  _Unwind_Resume(a1);
}

id sub_10005D3E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"creationDate",  0LL));
  uint64_t v21 = v4;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v21, 1LL));
  [v3 setSortDescriptors:v5];

  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  -86400.0));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset fetchAssetsFromCameraSinceDate:options:]( &OBJC_CLASS___PHAsset,  "fetchAssetsFromCameraSinceDate:options:",  v6,  v3));
  uint64_t v9 = MediaAnalysisLogLevel(v7, v8);
  if ((int)v9 >= 5)
  {
    uint64_t v11 = VCPLogInstance(v9, v10);
    int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    os_log_type_t v13 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = VCPTaskIDDescription(*(void *)(a1 + 32));
      int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      int v17 = 138412546;
      id v18 = v15;
      __int16 v19 = 1024;
      unsigned int v20 = [v7 count];
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "[%@] Evaluating %d recently captured assets",  (uint8_t *)&v17,  0x12u);
    }
  }

  return v7;
}

void sub_10005D578(_Unwind_Exception *a1)
{
  id v6 = v4;

  _Unwind_Resume(a1);
}

void sub_10005D7EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Unwind_Resume(a1);
}

void sub_10005D824(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  uint64_t v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v3;
}

void sub_10005D898( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10005DB40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, char a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, id a28)
{
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(a1);
}

void sub_10005DB98(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) allValues]);
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v2;
}

void sub_10005DD7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005DEE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005DF8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005E2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10005E2D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10005E2F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_10005E3C8;
  v12[3] = &unk_1001BA1B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[1] = 3221225472LL;
  v12[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v8;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_10005E3C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 72);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          id v15 = "[MAClientHandler] MADRequestID %d failed %@";
          uint64_t v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 72);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        id v15 = "[MAClientHandler] MADRequestID %d completed";
        uint64_t v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_10005E5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005E5CC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 96)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 96)));
    uint64_t v4 = *(void *)(a1 + 72);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPRequestSuggestedPersonsTask taskWithPersonWithLocalIdentifier:toBeConfirmedPersonSuggestions:toBeRejectedPersonSuggestions:andPhotoLibraryURL:andProgressHandler:andReply:]( &OBJC_CLASS___VCPRequestSuggestedPersonsTask,  "taskWithPersonWithLocalIdentifier:toBeConfirmedPersonSuggestions:toBeRejectedPersonSuggestions:andPhot oLibraryURL:andProgressHandler:andReply:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 80),  *(void *)(a1 + 88)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      id v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 96)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 96)));
      uint64_t v13 = *(void *)(a1 + 72);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_10005E7C8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005EACC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10005EAF4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10005EB10(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10005EBC8;
  block[3] = &unk_1001BBAF8;
  int v16 = *(_DWORD *)(a1 + 56);
  block[1] = 3221225472LL;
  block[4] = v6;
  id v13 = v5;
  id v9 = v7;
  char v17 = a2;
  uint64_t v10 = *(void *)(a1 + 48);
  id v14 = v9;
  uint64_t v15 = v10;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_10005EBC8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 64);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          uint64_t v15 = "[MAClientHandler] MADRequestID %d failed %@";
          int v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 64);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        uint64_t v15 = "[MAClientHandler] MADRequestID %d completed";
        int v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_10005EDA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005EDCC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 80)));
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPRequestUpdateKeyFacesOfPersonsTask taskWithLocalIdentifiers:andForceUpdate:andPhotoLibraryURL:andProgressHandler:andReply:]( &OBJC_CLASS___VCPRequestUpdateKeyFacesOfPersonsTask,  "taskWithLocalIdentifiers:andForceUpdate:andPhotoLibraryURL:andProgressHandler:andReply:",  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 84),  *(void *)(a1 + 48),  *(void *)(a1 + 64),  *(void *)(a1 + 72)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      id v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 80)));
      uint64_t v13 = *(void *)(a1 + 56);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_10005EFC8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005F2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10005F2EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10005F308(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_10005F3DC;
  v12[3] = &unk_1001BA1B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[1] = 3221225472LL;
  v12[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v8;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_10005F3DC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 72);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          id v15 = "[MAClientHandler] MADRequestID %d failed %@";
          uint64_t v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 72);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        id v15 = "[MAClientHandler] MADRequestID %d completed";
        uint64_t v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_10005F5BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005F5E0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 80)));
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPRequestFaceCandidatesforKeyFaceForPersonTask taskWithLocalIdentifiers:andPhotoLibraryURL:andProgressHandler:andReply:]( &OBJC_CLASS___VCPRequestFaceCandidatesforKeyFaceForPersonTask,  "taskWithLocalIdentifiers:andPhotoLibraryURL:andProgressHandler:andReply:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 64),  *(void *)(a1 + 72)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      id v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 80)));
      uint64_t v13 = *(void *)(a1 + 56);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_10005F7D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005FAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10005FAC8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_10005FAE4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10005FB9C;
  block[3] = &unk_1001BBAF8;
  int v16 = *(_DWORD *)(a1 + 56);
  block[1] = 3221225472LL;
  block[4] = v6;
  id v13 = v5;
  id v9 = v7;
  char v17 = a2;
  uint64_t v10 = *(void *)(a1 + 48);
  id v14 = v9;
  uint64_t v15 = v10;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_10005FB9C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 64);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          uint64_t v15 = "[MAClientHandler] MADRequestID %d failed %@";
          int v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 64);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        uint64_t v15 = "[MAClientHandler] MADRequestID %d completed";
        int v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_10005FD7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005FDA0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 72)));
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPRequestResetPersonsTask taskWithPhotoLibraryURL:andProgressHandler:andReply:]( &OBJC_CLASS___VCPRequestResetPersonsTask,  "taskWithPhotoLibraryURL:andProgressHandler:andReply:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 64)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      id v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 72)));
      uint64_t v13 = *(void *)(a1 + 48);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_10005FF98( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100060264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100060288(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_1000602A4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10006035C;
  block[3] = &unk_1001BBAF8;
  int v16 = *(_DWORD *)(a1 + 56);
  block[1] = 3221225472LL;
  block[4] = v6;
  id v13 = v5;
  id v9 = v7;
  char v17 = a2;
  uint64_t v10 = *(void *)(a1 + 48);
  id v14 = v9;
  uint64_t v15 = v10;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_10006035C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 64);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          uint64_t v15 = "[MAClientHandler] MADRequestID %d failed %@";
          int v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 64);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        uint64_t v15 = "[MAClientHandler] MADRequestID %d completed";
        int v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_10006053C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100060560(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 72)));
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPRequestResetFaceClassificationModelTask taskWithPhotoLibraryURL:andProgressHandler:andReply:]( &OBJC_CLASS___VCPRequestResetFaceClassificationModelTask,  "taskWithPhotoLibraryURL:andProgressHandler:andReply:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 64)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      id v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 72)));
      uint64_t v13 = *(void *)(a1 + 48);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_100060758( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100060A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100060A48(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100060A64(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100060B1C;
  block[3] = &unk_1001BBAF8;
  int v16 = *(_DWORD *)(a1 + 56);
  block[1] = 3221225472LL;
  block[4] = v6;
  id v13 = v5;
  id v9 = v7;
  char v17 = a2;
  uint64_t v10 = *(void *)(a1 + 48);
  id v14 = v9;
  uint64_t v15 = v10;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_100060B1C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 64);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          uint64_t v15 = "[MAClientHandler] MADRequestID %d failed %@";
          int v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 64);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        uint64_t v15 = "[MAClientHandler] MADRequestID %d completed";
        int v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_100060CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100060D20(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 72)));
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPResetPetClassificationModelTask taskWithPhotoLibraryURL:andProgressHandler:andReply:]( &OBJC_CLASS___VCPResetPetClassificationModelTask,  "taskWithPhotoLibraryURL:andProgressHandler:andReply:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 64)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      id v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 72)));
      uint64_t v13 = *(void *)(a1 + 48);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_100060F18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100061214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10006123C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100061258(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_10006132C;
  v12[3] = &unk_1001BA1B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[1] = 3221225472LL;
  v12[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v8;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_10006132C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 72);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          id v15 = "[MAClientHandler] MADRequestID %d failed %@";
          uint64_t v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 72);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        id v15 = "[MAClientHandler] MADRequestID %d completed";
        uint64_t v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_10006150C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100061530(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 80)));
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPRequestSuggestedMePersonIdentifierTask taskWithContext:andPhotoLibraryURL:andProgressHandler:andReply:]( &OBJC_CLASS___VCPRequestSuggestedMePersonIdentifierTask,  "taskWithContext:andPhotoLibraryURL:andProgressHandler:andReply:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 64),  *(void *)(a1 + 72)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      id v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 80)));
      uint64_t v13 = *(void *)(a1 + 56);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_100061728( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000618DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100061914(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100061BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100061BD0(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100061BEC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 24);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_100061CC0;
  v12[3] = &unk_1001BA1B0;
  int v17 = *(_DWORD *)(a1 + 56);
  v12[1] = 3221225472LL;
  v12[4] = v7;
  id v13 = v6;
  id v14 = v5;
  id v15 = v8;
  uint64_t v16 = *(void *)(a1 + 48);
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v9, v12);
}

void sub_100061CC0(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 72);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          id v15 = "[MAClientHandler] MADRequestID %d failed %@";
          uint64_t v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 72);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        id v15 = "[MAClientHandler] MADRequestID %d completed";
        uint64_t v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_100061EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100061EC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 72)));
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPRequestClusterCacheValidationTask taskWithPhotoLibraryURL:andProgressHandler:andReply:]( &OBJC_CLASS___VCPRequestClusterCacheValidationTask,  "taskWithPhotoLibraryURL:andProgressHandler:andReply:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 64)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      id v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 72)));
      uint64_t v13 = *(void *)(a1 + 48);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_1000620BC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100062388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000623AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_1000623C8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100062480;
  block[3] = &unk_1001BBAF8;
  int v16 = *(_DWORD *)(a1 + 56);
  block[1] = 3221225472LL;
  block[4] = v6;
  id v13 = v5;
  id v9 = v7;
  char v17 = a2;
  uint64_t v10 = *(void *)(a1 + 48);
  id v14 = v9;
  uint64_t v15 = v10;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_100062480(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 64);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          uint64_t v15 = "[MAClientHandler] MADRequestID %d failed %@";
          int v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 64);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        uint64_t v15 = "[MAClientHandler] MADRequestID %d completed";
        int v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_100062660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100062684(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 72)));
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPRequestResetFaceClusteringStateTask taskWithPhotoLibraryURL:andProgressHandler:andReply:]( &OBJC_CLASS___VCPRequestResetFaceClusteringStateTask,  "taskWithPhotoLibraryURL:andProgressHandler:andReply:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 64)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      id v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 72)));
      uint64_t v13 = *(void *)(a1 + 48);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_10006287C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100062B48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100062B6C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100062B88(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100062C40;
  block[3] = &unk_1001BBAF8;
  int v16 = *(_DWORD *)(a1 + 56);
  block[1] = 3221225472LL;
  block[4] = v6;
  id v13 = v5;
  id v9 = v7;
  char v17 = a2;
  uint64_t v10 = *(void *)(a1 + 48);
  id v14 = v9;
  uint64_t v15 = v10;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_100062C40(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 64);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          uint64_t v15 = "[MAClientHandler] MADRequestID %d failed %@";
          int v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 64);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        uint64_t v15 = "[MAClientHandler] MADRequestID %d completed";
        int v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_100062E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100062E44(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 72)));
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPRequestReclusterFacesTask taskWithPhotoLibraryURL:andProgressHandler:andReply:]( &OBJC_CLASS___VCPRequestReclusterFacesTask,  "taskWithPhotoLibraryURL:andProgressHandler:andReply:",  *(void *)(a1 + 40),  *(void *)(a1 + 56),  *(void *)(a1 + 64)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      id v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 72)));
      uint64_t v13 = *(void *)(a1 + 48);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_10006303C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006332C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100063354(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100063370(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(v6 + 24);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100063428;
  block[3] = &unk_1001BBAF8;
  int v16 = *(_DWORD *)(a1 + 56);
  block[1] = 3221225472LL;
  block[4] = v6;
  id v13 = v5;
  id v9 = v7;
  char v17 = a2;
  uint64_t v10 = *(void *)(a1 + 48);
  id v14 = v9;
  uint64_t v15 = v10;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_100063428(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64)));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 objectForKeyedSubscript:v3]);

  if (v4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
    if (v7)
    {
      if ((int)v8 >= 3)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v11, v12))
        {
          int v13 = *(_DWORD *)(a1 + 64);
          uint64_t v14 = *(void *)(a1 + 40);
          LODWORD(v26) = 67109378;
          HIDWORD(v26) = v13;
          LOWORD(v27) = 2112;
          *(void *)((char *)&v27 + 2) = v14;
          uint64_t v15 = "[MAClientHandler] MADRequestID %d failed %@";
          int v16 = v11;
          os_log_type_t v17 = v12;
          uint32_t v18 = 18;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v16, v17, v15, (uint8_t *)&v26, v18);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else if ((int)v8 >= 6)
    {
      uint64_t v19 = VCPLogInstance(v8, v9);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v20 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v20))
      {
        int v21 = *(_DWORD *)(a1 + 64);
        LODWORD(v26) = 67109120;
        HIDWORD(v26) = v21;
        uint64_t v15 = "[MAClientHandler] MADRequestID %d completed";
        int v16 = v11;
        os_log_type_t v17 = v20;
        uint32_t v18 = 8;
        goto LABEL_9;
      }

void sub_100063608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006362C(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32LL);
  id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:"));

  if (v3)
  {
    id v16 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d already exists",  *(unsigned int *)(a1 + 80)));
    uint64_t v4 = *(void *)(a1 + 56);
    id v5 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967246 withDescription:v16];
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }

  else
  {
    uint64_t v7 = objc_autoreleasePoolPush();
    id v17 = (id)objc_claimAutoreleasedReturnValue( +[VCPRequestRebuildPersonsTask taskWithLocalIdentifiers:andPhotoLibraryURL:andProgressHandler:andReply:]( &OBJC_CLASS___VCPRequestRebuildPersonsTask,  "taskWithLocalIdentifiers:andPhotoLibraryURL:andProgressHandler:andReply:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  *(void *)(a1 + 64),  *(void *)(a1 + 72)));
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
    id v9 = [v8 addForegroundTask:v17 withQoS:25];

    if (v9)
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
      id v11 = *(void **)(*(void *)(a1 + 32) + 32LL);
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80)));
      [v11 setObject:v10 forKeyedSubscript:v12];
    }

    else
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create task for MADRequestID %d",  *(unsigned int *)(a1 + 80)));
      uint64_t v13 = *(void *)(a1 + 56);
      id v14 = [(id)objc_opt_class(*(void *)(a1 + 32)) errorForStatus:4294967278 withDescription:v10];
      os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue(v14);
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v12);
    }

    objc_autoreleasePoolPop(v7);
  }

void sub_100063824( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10006398C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100063BD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100063F84( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_10006400C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id obj = *(id *)(v8 + 40);
  id v9 = [v7 optInStatus:v6 error:&obj];
  objc_storeStrong((id *)(v8 + 40), obj);
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    *a4 = 1;
  }

  else
  {
    uint64_t v13 = VCPMAAutoCounterOptInStatusKey;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v9));
    id v14 = v10;
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
    [*(id *)(a1 + 40) setObject:v11 forKeyedSubscript:v6];
  }
}

void sub_10006412C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100064478( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, char a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, id a26)
{
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void sub_100064500(void *a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v6 = a2;
  uint64_t v7 = (void *)a1[4];
  uint64_t v8 = *(void *)(a1[6] + 8LL);
  id obj = *(id *)(v8 + 40);
  id v9 = [v7 optInUserPickedPerson:v6 error:&obj extendTimeoutBlock:&stru_1001BBBB8 cancelBlock:&stru_1001BBBD8];
  objc_storeStrong((id *)(v8 + 40), obj);
  if (*(void *)(*(void *)(a1[6] + 8LL) + 40LL))
  {
    *a4 = 1;
  }

  else
  {
    uint64_t v15 = VCPMAAutoCounterOptInStatusKey;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v9));
    id v16 = v10;
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v16,  &v15,  1LL));
    os_log_type_t v12 = (void *)a1[5];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:VCPMAPersonIdentifier]);
    [v12 setObject:v11 forKeyedSubscript:v13];
  }
}

void sub_100064654(_Unwind_Exception *a1)
{
  id v5 = v3;

  _Unwind_Resume(a1);
}

void sub_100064694(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000646D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL sub_1000646E4(id a1)
{
  return 0;
}

void sub_100064A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100064AB4(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_100064AF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL sub_100064B04(id a1)
{
  return 0;
}

void sub_100064B0C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_100064B48( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL sub_100064B5C(id a1)
{
  return 0;
}

void sub_100065048( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100065104(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_100065140( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL sub_100065154(id a1)
{
  return 0;
}

void sub_1000654D8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100065574(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000655B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL sub_1000655C4(id a1)
{
  return 0;
}

void sub_100065878( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000658F8(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_100065934( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

BOOL sub_100065948(id a1)
{
  return 0;
}

void sub_100065BEC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100065C6C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v2 = *(void **)(v1 + 40);
  *(void *)(v1 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
}

void sub_100065C80(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ((int)MediaAnalysisLogLevel(v6, v7) >= 6)
  {
    uint64_t v8 = VCPLogInstance();
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    os_log_type_t v10 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v9, v10))
    {
      int v11 = *(_DWORD *)(a1 + 48);
      v12[0] = 67109120;
      v12[1] = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "[MAClientHandler] Completed MADRequestID %d",  (uint8_t *)v12,  8u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100065D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100065DA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100065DF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100066038( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

id sub_10006608C(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_1000660A8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ((int)MediaAnalysisLogLevel(v4, v5) >= 6)
  {
    uint64_t v6 = VCPLogInstance();
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    os_log_type_t v8 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v7, v8))
    {
      int v9 = *(_DWORD *)(a1 + 40);
      v10[0] = 67109120;
      v10[1] = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[MAClientHandler] Completed MADRequestID %d",  (uint8_t *)v10,  8u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100066188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000661A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100066304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100066504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100066544(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:forRequest:", *(unsigned int *)(a1 + 40));
}

void sub_100066560(uint64_t a1, uint64_t a2)
{
  if (!(_DWORD)a2)
  {
    uint64_t v11 = MediaAnalysisLogLevel(a1, a2);
    if ((int)v11 < 6)
    {
      id v16 = 0LL;
      goto LABEL_11;
    }

    uint64_t v13 = VCPLogInstance(v11, v12);
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v14 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v9, v14))
    {
      int v15 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)__int128 buf = 67109120;
      LODWORD(v21) = v15;
      _os_log_impl((void *)&_mh_execute_header, v9, v14, "[MAClientHandler] MADRequestID %d completed", buf, 8u);
    }

    uint64_t v4 = 0LL;
    goto LABEL_9;
  }

  uint64_t v4 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"MADRequestID %d failed %d",  *(unsigned int *)(a1 + 48),  a2));
  uint64_t v6 = MediaAnalysisLogLevel(v4, v5);
  if ((int)v6 >= 3)
  {
    uint64_t v8 = VCPLogInstance(v6, v7);
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    os_log_type_t v10 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v9, v10))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v21 = v4;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "[MAClientHandler] %@", buf, 0xCu);
    }

void sub_100066710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100066740(id a1)
{
  return 0;
}

uint64_t sub_100066748(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100066AEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100066D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100067090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100067124(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel(v3, v4) >= 6)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      int v8 = *(_DWORD *)(a1 + 40);
      v9[0] = 67109120;
      v9[1] = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MAClientHandler] Completed MADRequestID %d",  (uint8_t *)v9,  8u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100067204(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100067220(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000673EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10006741C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_100067464( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000674EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_45:
LABEL_46:
    }

    __int16 v56 = [v55 countByEnumeratingWithState:&v99 objects:v112 count:16];
  }

  while (v56);
LABEL_48:

  v97[0] = _NSConcreteStackBlock;
  v97[1] = 3221225472LL;
  v97[2] = sub_100067FFC;
  v97[3] = &unk_1001B9E98;
  v97[4] = self;
  __int16 v78 = objc_retainBlock(v97);
  v95 = 0u;
  int8x16_t v96 = 0u;
  uint64_t v93 = 0u;
  v94 = 0u;
  uint64_t v79 = [&off_1001C9030 countByEnumeratingWithState:&v93 objects:v103 count:16];
  if (v79)
  {
    uint64_t v80 = *(void *)v94;
    do
    {
      for (j = 0LL; j != v79; j = (char *)j + 1)
      {
        if (*(void *)v94 != v80) {
          objc_enumerationMutation(&off_1001C9030);
        }
        v82 = *(void **)(*((void *)&v93 + 1) + 8LL * (void)j);
        uint64_t v83 = objc_autoreleasePoolPush();
        +[MADProgressManager updateProgressForTask:photoLibrary:reuseCachedValue:cancelOrExtendTimeoutBlock:]( MADProgressManager,  "updateProgressForTask:photoLibrary:reuseCachedValue:cancelOrExtendTimeoutBlock:",  [v82 unsignedIntegerValue],  v92,  0,  v78);
        objc_autoreleasePoolPop(v83);
      }

      uint64_t v79 = [&off_1001C9030 countByEnumeratingWithState:&v93 objects:v103 count:16];
    }

    while (v79);
  }

  uint64_t v84 = (*((uint64_t (**)(double))self->_progressHandler + 2))(100.0);
  id v85 = VCPSignPostLog(v84);
  __int128 v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
  __int128 v87 = v86;
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v86))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v87,  OS_SIGNPOST_INTERVAL_END,  spid,  "MADDatabaseRestoreFastPassProcessingTask",  (const char *)&unk_100199097,  buf,  2u);
  }

  __int128 v88 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( -[MADDatabaseRestoreFastPassProcessingTask completionHandler]( self,  "completionHandler"));
  v88[2](v88, 0LL, 0LL);

  id v53 = 1;
LABEL_31:

  return v53;
}

        goto LABEL_46;
      }

      uint64_t v5 = v8;
    }

    id v67 = objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary mad_backupFilepathForTask:]( self->_photoLibrary,  "mad_backupFilepathForTask:",  self->_taskID));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary mad_intermediateEncryptedRestoreFilepathForTask:]( self->_photoLibrary,  "mad_intermediateEncryptedRestoreFilepathForTask:",  self->_taskID));
    __int128 v71 = 0LL;
    uint64_t v12 = [v3 copyItemAtPath:v67 toPath:v11 error:&v71];
    uint64_t v13 = v71;
    int v15 = v13;
    if ((v12 & 1) == 0)
    {
      int v22 = MediaAnalysisLogLevel(v13, v14);
      if ((int)v22 < 3)
      {
LABEL_44:

        int v8 = v5;
        uint64_t v29 = (os_log_s *)v67;
        goto LABEL_45;
      }

      uint64_t v24 = VCPLogInstance(v22, v23);
      id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      uint64_t v25 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v18, v25))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v74 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  v25,  "  Failed to copy backup file to intermediate location (%@)",  buf,  0xCu);
      }

      uint64_t v6 = v81;
      os_log_type_t v10 = v79;
      uint64_t v25 = v76;
      os_log_type_t v23 = v77;
      uint64_t v26 = v75;
      goto LABEL_46;
    }

    id v59 = MediaAnalysisLogLevel(v13, v14);
    if ((int)v59 >= 7)
    {
      id v61 = VCPLogInstance(v59, v60);
      os_log_type_t v20 = (void *)objc_claimAutoreleasedReturnValue(v61);
      id v53 = VCPLogToOSLogType[7];
      if (os_log_type_enabled((os_log_t)v20, v53))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v90 = v5;
        uint64_t v54 = "[VUDedupe] Person %@ is not verified; ignoring";
        goto LABEL_31;
      }

      goto LABEL_49;
    }
  }

  else
  {
    os_log_type_t v50 = MediaAnalysisLogLevel(v11, v12);
    if ((int)v50 >= 3)
    {
      uint64_t v52 = VCPLogInstance(v50, v51);
      os_log_type_t v20 = (void *)objc_claimAutoreleasedReturnValue(v52);
      id v53 = VCPLogToOSLogType[3];
      if (os_log_type_enabled((os_log_t)v20, v53))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v90 = v5;
        uint64_t v54 = "[VUDedupe] Failed to find person %@; ignoring";
LABEL_31:
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v20, v53, v54, buf, 0xCu);
      }

          os_log_type_t v23 = -18;
          goto LABEL_22;
        }
      }

      *(void *)id v63 = 0LL;
      uint64_t v33 = -[VCPContentAnalysis detectPixelBuffer:contentType:]( contentAnalysis,  "detectPixelBuffer:contentType:",  *(void *)buf,  v63);
      os_log_type_t v23 = (int)v33;
      if ((_DWORD)v33)
      {
        uint64_t v35 = MediaAnalysisLogLevel(v33, v34);
        unsigned int v37 = VCPLogInstance(v35, v36);
        __int16 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        __int16 v39 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v38, v39))
        {
          *(_WORD *)uint64_t v62 = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, v39, "Content analysis failed", v62, 2u);
        }

        goto LABEL_18;
      }

      uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)v63));
      [v19 setObject:v40 forKeyedSubscript:VCPContentTypeKey];
    }

    if ((a3 & 4) == 0)
    {
LABEL_21:
      os_log_type_t v23 = 0;
      goto LABEL_22;
    }

    if (self->_priorityAnalysis
      || (__int128 v42 = (VCPPriorityAnalysis *)objc_claimAutoreleasedReturnValue( +[VCPPriorityAnalysis priorityAnalysis]( &OBJC_CLASS___VCPPriorityAnalysis,  "priorityAnalysis")),  priorityAnalysis = self->_priorityAnalysis,  self->_priorityAnalysis = v42,  priorityAnalysis,  self->_priorityAnalysis))
    {
      *(_DWORD *)id v63 = 0;
      if (v11)
      {
        totalFaceDetectedFrames = self->_totalFaceDetectedFrames;
        self->_totalFaceDetectedFrames = totalFaceDetectedFrames + 1;
        LODWORD(v22) = 0;
        if (totalFaceDetectedFrames >= 5)
        {
          uint64_t v47 = -[VCPPriorityAnalysis calculatePriorityScore:ofPixelBuffer:withMetadata:]( self->_priorityAnalysis,  "calculatePriorityScore:ofPixelBuffer:withMetadata:",  v63,  *(void *)buf,  v11,  v22);
          os_log_type_t v23 = (int)v47;
          if ((_DWORD)v47)
          {
            __int128 v49 = MediaAnalysisLogLevel(v47, v48);
            __int128 v51 = VCPLogInstance(v49, v50);
            __int16 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
            uint64_t v52 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v38, v52))
            {
              *(_WORD *)uint64_t v62 = 0;
              _os_log_impl((void *)&_mh_execute_header, v38, v52, "Priority score calculation failed", v62, 2u);
            }

void sub_100067E80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100067FFC(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
    char v5 = v4[2]();

    if ((v5 & 1) != 0) {
      return 1LL;
    }
  }

  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  return 0LL;
}

void sub_100068084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006822C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10006834C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000685A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006888C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100068914( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  os_log_type_t v10 = v9;

  a9.super_class = (Class)&OBJC_CLASS___MADPhotosFullAssetProcessingTask;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100068A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_53:
    goto LABEL_54;
  }

  uint64_t v29 = MediaAnalysisLogLevel(v18, v19);
  if ((int)v29 >= 7)
  {
    __int16 v31 = VCPLogInstance(v29, v30);
    int v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    uint64_t v33 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v32, v33))
    {
      id v34 = MediaAnalysisTypeShortDescription(objc_msgSend(*a4, "vcp_types"));
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
      *(_DWORD *)__int128 buf = 138412546;
      v98 = v12;
      uint64_t v99 = 2112;
      v100 = v35;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%@ Existing analysis: %@", buf, 0x16u);
    }
  }

  uint64_t v36 = objc_msgSend(*a4, "vcp_degraded");
  unsigned int v37 = [v10 mediaType];
  __int16 v38 = (id *)&OBJC_CLASS___VCPPhotoAnalyzer_ptr;
  if (v37 != (id)1) {
    __int16 v38 = (id *)&OBJC_CLASS___VCPMovieAnalyzer_ptr;
  }
  __int16 v39 = [*v38 canAnalyzeUndegraded:v10 withResources:v96];
  uint64_t v40 = objc_msgSend(v10, "vcp_isAnalysisValid:", *a4);
  if ((v40 & 1) == 0)
  {
    __int128 v69 = MediaAnalysisLogLevel(v40, v41);
    if ((int)v69 >= 5)
    {
      __int128 v71 = VCPLogInstance(v69, v70);
      uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
      uint64_t v73 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v72, v73))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v98 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v72,  v73,  "%@ Asset modified; discarding existing analysis",
          buf,
          0xCu);
      }
    }

    uint64_t v74 = *a4;
    *a4 = 0LL;
LABEL_49:

    goto LABEL_50;
  }

  if ((v36 & v39) == 1)
  {
    __int128 v42 = objc_msgSend(v10, "vcp_isPano");
    if ((v42 & 1) == 0)
    {
      id v18 = MediaAnalysisLogLevel(v42, v43);
      __int128 v87 = VCPLogInstance(v18, v19);
      uint64_t v74 = (id)objc_claimAutoreleasedReturnValue(v87);
      __int128 v88 = VCPLogToOSLogType[6];
      if (os_log_type_enabled((os_log_t)v74, v88))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v98 = v12;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v74, v88, "%@ Undegraded asset available", buf, 0xCu);
      }

      goto LABEL_49;
    }
  }

  uint64_t v44 = (unint64_t)objc_msgSend(*a4, "vcp_types");
  uint64_t v45 = (unint64_t)objc_msgSend(*a4, "vcp_version");
  if (self->_imageOnlyAnalysis)
  {
    uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v10 mediaAnalysisProperties]);
    uint64_t v47 = [v46 mediaAnalysisImageVersion];
    else {
      uint64_t v45 = v45;
    }
  }

  uint64_t v48 = MediaAnalysisTypesUpdatedSince(v45, v10);
  os_log_type_t v50 = v20 & v48 & v44;
  __int128 v51 = (v44 ^ v16) & v20;
  if (!(v50 | v51))
  {
    uint64_t v83 = MediaAnalysisLogLevel(v48, v49);
    id v85 = VCPLogInstance(v83, v84);
    id v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
    __int128 v86 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v67, v86))
    {
      *(_DWORD *)__int128 buf = 138412290;
      v98 = v12;
      _os_log_impl((void *)&_mh_execute_header, v67, v86, "%@ Analysis complete and up-to-date", buf, 0xCu);
    }

    goto LABEL_42;
  }

  if (((v36 | v39) & 1) == 0)
  {
    __int128 v89 = MediaAnalysisLogLevel(v48, v49);
    id v91 = VCPLogInstance(v89, v90);
    __int16 v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
    id v92 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v78, v92))
    {
      uint64_t v93 = MediaAnalysisTypeShortDescription(v16 & 0xFFFFFFFFDFFFFFFFLL);
      v94 = (void *)objc_claimAutoreleasedReturnValue(v93);
      *(_DWORD *)__int128 buf = 138412546;
      v98 = v12;
      uint64_t v99 = 2112;
      v100 = v94;
      _os_log_impl( (void *)&_mh_execute_header,  v78,  v92,  "%@ Incompatible analysis (asset degraded); re-analyze all (%@)",
        buf,
        0x16u);
    }

    goto LABEL_53;
  }

  if (v50)
  {
    uint64_t v48 = MediaAnalysisLogLevel(v48, v49);
    if ((int)v48 >= 6)
    {
      uint64_t v52 = VCPLogInstance(v48, v49);
      id v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
      uint64_t v54 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v53, v54))
      {
        uint64_t v55 = MediaAnalysisTypeShortDescription(v50);
        __int16 v56 = (void *)objc_claimAutoreleasedReturnValue(v55);
        *(_DWORD *)__int128 buf = 138412546;
        v98 = v12;
        uint64_t v99 = 2112;
        v100 = v56;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "%@ Analysis outdated; need to analyze (%@)", buf, 0x16u);
      }
    }
  }

  if (v51)
  {
    uint64_t v57 = MediaAnalysisLogLevel(v48, v49);
    if ((int)v57 >= 6)
    {
      id v59 = VCPLogInstance(v57, v58);
      uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
      id v61 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v60, v61))
      {
        uint64_t v62 = MediaAnalysisTypeShortDescription(v51);
        id v63 = (void *)objc_claimAutoreleasedReturnValue(v62);
        *(_DWORD *)__int128 buf = 138412546;
        v98 = v12;
        uint64_t v99 = 2112;
        v100 = v63;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "%@ Analysis incomplete; need to analyze (%@)", buf, 0x16u);
      }
    }
  }

  os_log_type_t v20 = v50 | v51;
LABEL_54:

  objc_autoreleasePoolPop(context);
  return v20;
}

            [v68 addObject:v42];
            goto LABEL_54;
          }

          uint64_t v72 = MediaAnalysisLogLevel(v70, v71);
          if ((int)v72 >= 5)
          {
            uint64_t v74 = VCPLogInstance(v72, v73);
            uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
            if (!os_log_type_enabled(v52, type)) {
              goto LABEL_37;
            }
            *(_DWORD *)__int128 buf = 138412290;
            v182 = v42;
            uint64_t v54 = v52;
            uint64_t v55 = type;
            __int16 v56 = "[VSKDBUtil][%@] Failed analysis missing Image Embedding (tracked)";
LABEL_35:
            uint64_t v57 = 12;
            goto LABEL_36;
          }
}

      goto LABEL_54;
    }

    uint64_t v17 = 0;
LABEL_54:

LABEL_55:
LABEL_56:
    objc_autoreleasePoolPop(v16);
    if ((v17 | 4) != 4) {
      goto LABEL_64;
    }
    ++v13;
  }

  if ([v80 count])
  {
    __int128 v68 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v68 pet];

    objc_msgSend(v14, "mad_markAsProcessedByTask:forAssets:", objc_msgSend((id)objc_opt_class(self), "taskID"), v80);
    [v80 removeAllObjects];
  }

  if (![v75 count]) {
    goto LABEL_63;
  }
  __int128 v69 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADQoSManager sharedManager](&OBJC_CLASS___VCPMADQoSManager, "sharedManager"));
  v81[0] = _NSConcreteStackBlock;
  v81[1] = 3221225472LL;
  v81[2] = sub_10010433C;
  v81[3] = &unk_1001B9DD8;
  uint64_t v83 = &v95;
  v81[4] = self;
  __int128 v70 = v75;
  v82 = v70;
  objc_msgSend(v69, "runBlock:withTaskID:", v81, objc_msgSend((id)objc_opt_class(self), "taskID"));

  objc_msgSend( v77,  "setCompletedUnitCount:",  (char *)objc_msgSend(v70, "count") + (void)objc_msgSend(v77, "completedUnitCount"));
  LODWORD(v6) = *((_DWORD *)v96 + 6);

  if ((_DWORD)v6) {
    uint64_t v75 = v70;
  }
  else {
LABEL_63:
  }
    LODWORD(v6) = 0;
LABEL_64:
  _Block_object_dispose(&v95, 8);

  return v6;
}
      }
    }

    __int16 v56 = v94;
    id v63 = (os_log_s *)v95;
    goto LABEL_55;
  }

  uint64_t v35 = MediaAnalysisLogLevel(v12, v13);
  if ((int)v35 >= 5)
  {
    unsigned int v37 = VCPLogInstance(v35, v36);
    int v15 = (void *)objc_claimAutoreleasedReturnValue(v37);
    __int16 v38 = VCPLogToOSLogType[5];
    if (os_log_type_enabled((os_log_t)v15, v38))
    {
      __int16 v39 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
      uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue([v39 photoLibraryURL]);
      *(_DWORD *)__int128 buf = 138412546;
      v105 = v40;
      v106 = 2112;
      v107 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  v38,  "  Photo library (%@) not eligible for restoring %@; skipping",
        buf,
        0x16u);
    }

    goto LABEL_62;
  }

void sub_100069208( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

LABEL_68:
          uint64_t v29 = v107;
LABEL_69:
          v109 = v65 | v66;
          goto LABEL_58;
        }

        uint64_t v29 = v107;
        v101 = MediaAnalysisLogLevel(v63, v64);
        v103 = VCPLogInstance(v101, v102);
        __int128 v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
        v104 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v88, v104))
        {
          v105 = MediaAnalysisTypeShortDescription(v109);
          v106 = (__CFString *)objc_claimAutoreleasedReturnValue(v105);
          *(_DWORD *)__int128 buf = 138412546;
          v115 = v110;
          v116 = 2112;
          v117 = v106;
          _os_log_impl( (void *)&_mh_execute_header,  v88,  v104,  "%@ Incompatible analysis (asset degraded); re-analyze all (%@)",
            buf,
            0x16u);
        }

        goto LABEL_56;
      }

      __int16 v38 = MediaAnalysisLogLevel(v57, v58);
      if ((int)v38 < 6)
      {
LABEL_53:
        id v85 = MediaAnalysisLogLevel(v38, v39);
        if ((int)v85 < 6)
        {
LABEL_57:
          uint64_t v29 = v107;
          goto LABEL_58;
        }

        __int128 v87 = VCPLogInstance(v85, v86);
        __int128 v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
        __int128 v89 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v88, v89))
        {
          uint64_t v90 = MediaAnalysisTypeShortDescription(v109);
          id v91 = (__CFString *)objc_claimAutoreleasedReturnValue(v90);
          *(_DWORD *)__int128 buf = 138412546;
          v115 = v110;
          v116 = 2112;
          v117 = v91;
          _os_log_impl((void *)&_mh_execute_header, v88, v89, "%@ No existing analysis; analyze all (%@)", buf, 0x16u);
        }

        goto LABEL_69;
      }

      char v5 = v8;
    }

    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary vcp_mediaAnalysisIntermediateBackupDirectory]( self->_photoLibrary,  "vcp_mediaAnalysisIntermediateBackupDirectory"));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary mad_intermediateUnencryptedBackupFilepathForTask:]( self->_photoLibrary,  "mad_intermediateUnencryptedBackupFilepathForTask:",  self->_taskID));
    uint64_t v13 = objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary mad_intermediateEncryptedBackupFilepathForTask:]( self->_photoLibrary,  "mad_intermediateEncryptedBackupFilepathForTask:",  self->_taskID));
    os_log_type_t v14 = (void *)v13;
    if (v11 && v12 && v13)
    {
      if ([v3 fileExistsAtPath:v11])
      {
        if ([v3 fileExistsAtPath:v12])
        {
          v109 = 0LL;
          int v15 = [v3 removeItemAtPath:v12 error:&v109];
          id v16 = (os_log_s *)v109;
          uint64_t v97 = v16;
          if (!v15) {
            goto LABEL_31;
          }
        }

        else
        {
          uint64_t v97 = 0LL;
        }

        if ([v3 fileExistsAtPath:v14])
        {
          v108 = v97;
          uint64_t v26 = [v3 removeItemAtPath:v14 error:&v108];
          __int128 v27 = v108;

          uint64_t v97 = v27;
          if ((v26 & 1) == 0)
          {
LABEL_31:
            uint64_t v44 = MediaAnalysisLogLevel(v16, v17);
            if ((int)v44 >= 3)
            {
              uint64_t v46 = VCPLogInstance(v44, v45);
              uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
              uint64_t v48 = VCPLogToOSLogType[3];
              if (os_log_type_enabled(v47, v48))
              {
                LODWORD(buf) = 138412290;
                *(void *)((char *)&buf + 4) = v97;
                _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "  Failed to remove existing intermediate backup (%@); backup failed",
                  (uint8_t *)&buf,
                  0xCu);
              }
            }

            goto LABEL_65;
          }
        }
      }

      else
      {
        v119 = NSFilePosixPermissions;
        v120 = &off_1001C7DC0;
        int v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v120,  &v119,  1LL));
        v110 = v5;
        os_log_type_t v23 = [v3 createDirectoryAtPath:v11 withIntermediateDirectories:1 attributes:v22 error:&v110];
        int v8 = v110;

        if ((v23 & 1) == 0)
        {
          __int16 v39 = MediaAnalysisLogLevel(v24, v25);
          if ((int)v39 >= 3)
          {
            __int128 v41 = VCPLogInstance(v39, v40);
            __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
            SEL v43 = VCPLogToOSLogType[3];
            uint64_t v97 = v42;
            if (os_log_type_enabled(v42, v43))
            {
              LODWORD(buf) = 138412290;
              *(void *)((char *)&buf + 4) = v8;
              _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "  Failed to create intermediate backup directory (%@); backup failed",
                (uint8_t *)&buf,
                0xCu);
            }

            goto LABEL_66;
          }

              uint64_t v72 = (id)objc_claimAutoreleasedReturnValue(-[VCPPhotosFaceIdentificationTask completionHandler](self, "completionHandler"));
              (*((void (**)(id, void *, void))v72 + 2))(v72, v71, 0LL);
              uint64_t v46 = 1;
LABEL_74:
              id v16 = v108;
              id v28 = v102;
            }

            else
            {
              if (!a3)
              {
                uint64_t v46 = 0;
                goto LABEL_76;
              }

              v103 = v48;
              v104 = v13;
              v120 = NSLocalizedDescriptionKey;
              __int128 v71 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to load both Person and Pet Identity Models"));
              v121 = v71;
              uint64_t v72 = (id)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v121,  &v120,  1LL));
              v94 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v72));
              v95 = *a3;
              *a3 = v94;

              uint64_t v46 = 0;
            }

            uint64_t v48 = v103;
            uint64_t v13 = v104;
LABEL_76:

            os_log_type_t v14 = v105;
LABEL_77:

            goto LABEL_78;
          }

          __int128 v69 = VCPLogInstance(v67, v68);
          id v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
          __int128 v70 = VCPLogToOSLogType[5];
          if (os_log_type_enabled(v61, v70))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)v128 = v48;
            _os_log_impl((void *)&_mh_execute_header, v61, v70, "Pet Identity Model not exist - %@", buf, 0xCu);
          }

          uint64_t v58 = 0LL;
        }

        goto LABEL_43;
      }

      id v34 = v28;
      uint64_t v35 = a3;
      __int128 v51 = VCPLogInstance(v49, v50);
      __int16 v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      uint64_t v52 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v39, v52))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)v128 = v29;
        _os_log_impl((void *)&_mh_execute_header, v39, v52, "Person Identity Model not exist - %@", buf, 0xCu);
      }

      uint64_t v36 = 0LL;
    }

    id v16 = v108;
    id v53 = &ADClientSetValueForScalarKey_ptr;

    a3 = v35;
    id v28 = v34;
    goto LABEL_30;
  }

  if (a3)
  {
    v125 = NSLocalizedDescriptionKey;
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to open specified Photo Library (%@)",  self->_photoLibraryURL));
    v126 = v14;
    id v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v126,  &v125,  1LL));
    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -50LL,  v16));
    uint64_t v46 = 0;
    id v28 = *a3;
    *a3 = v45;
LABEL_78:

LABEL_79:
    goto LABEL_80;
  }

  uint64_t v46 = 0;
LABEL_80:

  return v46;
}

LABEL_56:
        goto LABEL_57;
      }

      uint64_t v99 = VCPLogInstance(v38, v39);
      uint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
      v100 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v84, v100))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v115 = v110;
        _os_log_impl((void *)&_mh_execute_header, v84, v100, "%@ Undegraded asset available", buf, 0xCu);
      }
    }

    else
    {
      uint64_t v79 = MediaAnalysisLogLevel(v55, v56);
      if ((int)v79 >= 5)
      {
        uint64_t v81 = VCPLogInstance(v79, v80);
        v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
        uint64_t v83 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v82, v83))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v115 = v110;
          _os_log_impl( (void *)&_mh_execute_header,  v82,  v83,  "%@ Asset modified; discarding existing analysis",
            buf,
            0xCu);
        }

        SEL v43 = v112;
      }

      -[VCPDatabaseWriter deleteAnalysisForAsset:](self->_analysisDatabase, "deleteAnalysisForAsset:", v43);
      uint64_t v84 = (os_log_s *)*a4;
      *a4 = 0LL;
    }

    goto LABEL_53;
  }

  uint64_t v26 = MediaAnalysisLogLevel(v14, v15);
  if ((int)v26 < 5)
  {
    v109 = 0LL;
    goto LABEL_59;
  }

  id v28 = VCPLogInstance(v26, v27);
  uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
  int v30 = VCPLogToOSLogType[5];
  if (os_log_type_enabled(v29, v30))
  {
    *(_DWORD *)__int128 buf = 138412290;
    v115 = v110;
    _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "%@ Asset missing modification date; skipping all analysis",
      buf,
      0xCu);
  }

  v109 = 0LL;
LABEL_58:

LABEL_59:
  objc_autoreleasePoolPop(context);

  return v109;
}
              }
            }

            __int128 v69 = (char *)v69 + 1;
          }

          while (v67 != v69);
          v94 = [v66 countByEnumeratingWithState:&v251 objects:v260 count:16];
          id v67 = v94;
        }

        while (v94);
      }

      objc_autoreleasePoolPop(context);
      ++v227;
    }

    v247[0] = _NSConcreteStackBlock;
    v247[1] = 3221225472LL;
    v247[2] = sub_10008754C;
    v247[3] = &unk_1001BA5F8;
    v95 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    v248 = v95;
    v249 = @"[PrepareVideoAnalysisResults]";
    [v238 enumerateKeysAndObjectsUsingBlock:v247];
    int8x16_t v96 = (void *)objc_claimAutoreleasedReturnValue( +[MADSceneClassificationResult resultWithClassifications:]( &OBJC_CLASS___MADSceneClassificationResult,  "resultWithClassifications:",  v95));
    v98 = MediaAnalysisLogLevel(v96, v97);
    if ((int)v98 >= 7)
    {
      v100 = VCPLogInstance(v98, v99);
      v101 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
      if (os_log_type_enabled(v101, type))
      {
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = @"[PrepareVideoAnalysisResults]";
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v96;
        _os_log_impl((void *)&_mh_execute_header, v101, type, "%@ MADSceneClassificationResult %@", buf, 0x16u);
      }
    }

    [v216 addObject:v96];
  }

  v102 = objc_opt_class(&OBJC_CLASS___MADFaceDetectionVideoRequest);
  v103 = ((uint64_t (*)(void *, uint64_t))v218[2])(v218, v102);
  v104 = objc_claimAutoreleasedReturnValue(v103);
  v212 = (void *)v104;
  if (!v104) {
    goto LABEL_99;
  }
  v106 = MediaAnalysisLogLevel(v104, v105);
  if ((int)v106 >= 6)
  {
    v108 = VCPLogInstance(v106, v107);
    v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
    v110 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v109, v110))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = @"[PrepareVideoAnalysisResults]";
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "%@ Parsing video face results", buf, 0xCu);
    }
  }

  v239 = (void *)objc_claimAutoreleasedReturnValue([v217 objectForKeyedSubscript:MediaAnalysisFaceResultsKey]);
  v111 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  v112 = 0LL;
  *(void *)v233 = MediaAnalysisResultFaceBoundsAttributeKey;
  *(void *)typea = MediaAnalysisResultAttributesKey;
  v228 = MediaAnalysisResultFaceQualityAttributeKey;
  v230 = MediaAnalysisResultFaceIDAttributeKey;
  v225 = VCPLogToOSLogType[7];
  v220 = VCPLogToOSLogType[3];
  contexta = v111;
  while (v112 < (unint64_t)[v239 count])
  {
    v113 = objc_autoreleasePoolPush();
    v114 = (void *)objc_claimAutoreleasedReturnValue([v239 objectAtIndexedSubscript:v112]);
    v115 = v114;
    if (v114)
    {
      objc_msgSend(v114, "vcp_timerange");
    }

    else
    {
      v262 = 0u;
      memset(buf, 0, sizeof(buf));
    }

    v116 = (void *)objc_claimAutoreleasedReturnValue([v115 objectForKeyedSubscript:*(void *)typea]);
    v117 = (NSString *)objc_claimAutoreleasedReturnValue([v116 objectForKeyedSubscript:*(void *)v233]);
    v118 = (void *)objc_claimAutoreleasedReturnValue([v116 objectForKeyedSubscript:v230]);
    v119 = (void *)objc_claimAutoreleasedReturnValue([v116 objectForKeyedSubscript:v228]);
    v120 = (void *)objc_claimAutoreleasedReturnValue([v111 objectForKeyedSubscript:v118]);
    v121 = v120 == 0LL;

    if (v121)
    {
      v122 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      [v111 setObject:v122 forKeyedSubscript:v118];
    }

    v246[0] = *(_OWORD *)buf;
    v246[1] = *(_OWORD *)&buf[16];
    v246[2] = v262;
    [v119 doubleValue];
    v124 = v123;
    v263 = NSRectFromString(v117);
    v125 = objc_claimAutoreleasedReturnValue( +[MADDetectedFaceVideoEntry entryWithTimeRange:confidence:boundingBox:]( &OBJC_CLASS___MADDetectedFaceVideoEntry,  "entryWithTimeRange:confidence:boundingBox:",  v246,  v124,  v263.origin.x,  v263.origin.y,  v263.size.width,  v263.size.height));
    v127 = (void *)v125;
    if (v125)
    {
      v128 = MediaAnalysisLogLevel(v125, v126);
      if ((int)v128 >= 7)
      {
        v130 = VCPLogInstance(v128, v129);
        v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(v130);
        if (os_log_type_enabled(v131, v225))
        {
          *(_DWORD *)v256 = 138412546;
          v257 = @"[PrepareVideoAnalysisResults]";
          v258 = 2112;
          v259 = v127;
          _os_log_impl((void *)&_mh_execute_header, v131, v225, "%@ Adding video entry %@", v256, 0x16u);
        }
      }

      v132 = (void *)objc_claimAutoreleasedReturnValue([v111 objectForKeyedSubscript:v118]);
      [v132 addObject:v127];
    }

    else
    {
      v133 = MediaAnalysisLogLevel(0LL, v126);
      v135 = VCPLogInstance(v133, v134);
      v132 = (void *)objc_claimAutoreleasedReturnValue(v135);
      if (os_log_type_enabled((os_log_t)v132, v220))
      {
        *(_DWORD *)v256 = 138412546;
        v257 = @"[PrepareVideoAnalysisResults]";
        v258 = 2112;
        v259 = v116;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v132,  v220,  "%@ Failed to create video entry for %@",  v256,  0x16u);
      }

      v111 = contexta;
    }

LABEL_93:
    objc_autoreleasePoolPop(v113);
    ++v112;
  }

  v244[0] = _NSConcreteStackBlock;
  v244[1] = 3221225472LL;
  v244[2] = sub_1000876BC;
  v244[3] = &unk_1001BC258;
  v136 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
  v245 = v136;
  [v111 enumerateKeysAndObjectsUsingBlock:v244];
  v137 = (void *)objc_claimAutoreleasedReturnValue( +[MADFaceDetectionResult resultWithDetectedFaces:]( &OBJC_CLASS___MADFaceDetectionResult,  "resultWithDetectedFaces:",  v136));
  v139 = MediaAnalysisLogLevel(v137, v138);
  if ((int)v139 >= 7)
  {
    v141 = VCPLogInstance(v139, v140);
    v142 = (os_log_s *)objc_claimAutoreleasedReturnValue(v141);
    if (os_log_type_enabled(v142, v225))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v137;
      _os_log_impl( (void *)&_mh_execute_header,  v142,  v225,  "[MADComputeServiceProcessingTask] MADFaceDetectionResult %@",  buf,  0xCu);
    }
  }

  [v216 addObject:v137];

LABEL_99:
  v143 = objc_opt_class(&OBJC_CLASS___MADMovieCurationRequest);
  v144 = ((uint64_t (*)(void *, uint64_t))v218[2])(v218, v143);
  v145 = objc_claimAutoreleasedReturnValue(v144);
  v229 = (void *)v145;
  if (v145)
  {
    v226 = objc_autoreleasePoolPush();
    v148 = MediaAnalysisLogLevel(v226, v147);
    if ((int)v148 >= 6)
    {
      v150 = VCPLogInstance(v148, v149);
      v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
      v152 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v151, v152))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = @"[PrepareVideoAnalysisResults]";
        _os_log_impl((void *)&_mh_execute_header, v151, v152, "%@ Parsing movie summary results", buf, 0xCu);
      }
    }

    v240 = (void *)objc_claimAutoreleasedReturnValue([v217 objectForKeyedSubscript:MediaAnalysisMovieSummaryResultsKey]);
    v234 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    v153 = 0LL;
    v154 = MediaAnalysisResultQualityKey;
    v155 = MediaAnalysisResultAttributesKey;
    while (1)
    {
      v156 = [v240 count];
      v158 = objc_autoreleasePoolPush();
      v159 = (void *)objc_claimAutoreleasedReturnValue([v240 objectAtIndexedSubscript:v153]);
      v160 = v159;
      if (v159)
      {
        objc_msgSend(v159, "vcp_timerange");
      }

      else
      {
        v262 = 0u;
        memset(buf, 0, sizeof(buf));
      }

      v161 = (void *)objc_claimAutoreleasedReturnValue([v160 objectForKeyedSubscript:v154]);
      [v161 doubleValue];
      v163 = v162;

      v164 = (void *)objc_claimAutoreleasedReturnValue([v160 objectForKeyedSubscript:v155]);
      v243[0] = *(_OWORD *)buf;
      v243[1] = *(_OWORD *)&buf[16];
      v243[2] = v262;
      v165 = (void *)objc_claimAutoreleasedReturnValue( +[MADMovieHighlightEntry entryWithTimeRange:score:attributes:]( &OBJC_CLASS___MADMovieHighlightEntry,  "entryWithTimeRange:score:attributes:",  v243,  v164,  v163));
      [v234 addObject:v165];

      objc_autoreleasePoolPop(v158);
      ++v153;
    }

    v166 = MediaAnalysisLogLevel(v156, v157);
    if ((int)v166 >= 6)
    {
      v168 = VCPLogInstance(v166, v167);
      v169 = (os_log_s *)objc_claimAutoreleasedReturnValue(v168);
      v170 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v169, v170))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = @"[PrepareVideoAnalysisResults]";
        _os_log_impl((void *)&_mh_execute_header, v169, v170, "%@ Parsing movie highlight results", buf, 0xCu);
      }
    }

    typeb = (void *)objc_claimAutoreleasedReturnValue([v217 objectForKeyedSubscript:MediaAnalysisMovieHighlightResultsKey]);
    v231 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    for (unint64_t i = 0LL; ; ++i)
    {
      v172 = [typeb count];
      v174 = objc_autoreleasePoolPush();
      v175 = (void *)objc_claimAutoreleasedReturnValue([typeb objectAtIndexedSubscript:i]);
      v176 = v175;
      if (v175)
      {
        objc_msgSend(v175, "vcp_timerange");
      }

      else
      {
        v262 = 0u;
        memset(buf, 0, sizeof(buf));
      }

      v177 = (void *)objc_claimAutoreleasedReturnValue([v176 objectForKeyedSubscript:v154]);
      [v177 doubleValue];
      v179 = v178;

      v180 = (void *)objc_claimAutoreleasedReturnValue([v176 objectForKeyedSubscript:v155]);
      v242[0] = *(_OWORD *)buf;
      v242[1] = *(_OWORD *)&buf[16];
      v242[2] = v262;
      v181 = (void *)objc_claimAutoreleasedReturnValue( +[MADMovieHighlightEntry entryWithTimeRange:score:attributes:]( &OBJC_CLASS___MADMovieHighlightEntry,  "entryWithTimeRange:score:attributes:",  v242,  v180,  v179));
      [v231 addObject:v181];

      objc_autoreleasePoolPop(v174);
    }

    v182 = MediaAnalysisLogLevel(v172, v173);
    if ((int)v182 >= 6)
    {
      v184 = VCPLogInstance(v182, v183);
      v185 = (os_log_s *)objc_claimAutoreleasedReturnValue(v184);
      v186 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v185, v186))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = @"[PrepareVideoAnalysisResults]";
        _os_log_impl((void *)&_mh_execute_header, v185, v186, "%@ Parsing movie curation score results", buf, 0xCu);
      }
    }

    v187 = (void *)objc_claimAutoreleasedReturnValue([v217 objectForKeyedSubscript:MediaAnalysisMovieHighlightScoreResultsKey]);
    v188 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    for (j = 0; j < (unint64_t)[v187 count]; ++j)
    {
      v190 = objc_autoreleasePoolPush();
      v191 = (void *)objc_claimAutoreleasedReturnValue([v187 objectAtIndexedSubscript:j]);
      v192 = v191;
      if (v191)
      {
        objc_msgSend(v191, "vcp_timerange");
      }

      else
      {
        v262 = 0u;
        memset(buf, 0, sizeof(buf));
      }

      v193 = (void *)objc_claimAutoreleasedReturnValue([v192 objectForKeyedSubscript:v154]);
      [v193 doubleValue];
      v195 = v194;

      v196 = (void *)objc_claimAutoreleasedReturnValue([v192 objectForKeyedSubscript:v155]);
      v241[0] = *(_OWORD *)buf;
      v241[1] = *(_OWORD *)&buf[16];
      v241[2] = v262;
      v197 = (void *)objc_claimAutoreleasedReturnValue( +[MADMovieCurationScoreEntry entryWithTimeRange:score:]( &OBJC_CLASS___MADMovieCurationScoreEntry,  "entryWithTimeRange:score:",  v241,  v195));
      [v188 addObject:v197];

      objc_autoreleasePoolPop(v190);
    }

    v198 = (void *)objc_claimAutoreleasedReturnValue( +[MADMovieCurationResult resultWithSummaryEntries:highlightEntries:curationScoreEntries:]( &OBJC_CLASS___MADMovieCurationResult,  "resultWithSummaryEntries:highlightEntries:curationScoreEntries:",  v234,  v231,  v188));
    v200 = MediaAnalysisLogLevel(v198, v199);
    if ((int)v200 >= 7)
    {
      v202 = VCPLogInstance(v200, v201);
      v203 = (os_log_s *)objc_claimAutoreleasedReturnValue(v202);
      v204 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v203, v204))
      {
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = @"[PrepareVideoAnalysisResults]";
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v198;
        _os_log_impl((void *)&_mh_execute_header, v203, v204, "%@ MADMovieCurationResult %@", buf, 0x16u);
      }
    }

    [v216 addObject:v198];

    objc_autoreleasePoolPop(v226);
  }

  v205 = MediaAnalysisLogLevel(v145, v146);
  if ((int)v205 >= 7)
  {
    v207 = VCPLogInstance(v205, v206);
    v208 = (os_log_s *)objc_claimAutoreleasedReturnValue(v207);
    v209 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v208, v209))
    {
      v210 = [v216 count];
      *(_DWORD *)__int128 buf = 138412802;
      *(void *)&uint8_t buf[4] = @"[PrepareVideoAnalysisResults]";
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v210;
      *(_WORD *)&buf[22] = 2112;
      *(void *)&buf[24] = v216;
      _os_log_impl((void *)&_mh_execute_header, v208, v209, "%@ Prepared %lu requiredAnalysis %@", buf, 0x20u);
    }
  }

  return v216;
}

LABEL_57:
LABEL_18:
      *(void *)__int128 buf = 0LL;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000LL;
      v109 = sub_1000891AC;
      v110 = sub_1000891BC;
      v111 = 0LL;
      if ([v10 isVideo])
      {
        v101[0] = _NSConcreteStackBlock;
        v101[1] = 3221225472LL;
        v101[2] = sub_1000891C4;
        v101[3] = &unk_1001BBF78;
        v101[6] = buf;
        __int128 v42 = v101;
        SEL v43 =  [[VCPMovieAnalyzer alloc] initWithPHAsset:v10 withPausedAnalysis:v98 forAnalysisTypes:a5];
        v101[4] = v43;
        v101[5] = self;
        uint64_t v44 = objc_retainBlock(v101);
        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADQoSManager sharedManager](&OBJC_CLASS___VCPMADQoSManager, "sharedManager"));
        [v45 runBlock:v44 withTaskID:1];

        uint64_t v46 = [v43 status];
      }

      else
      {
        uint64_t v47 = [[VCPPhotoAnalyzer alloc] initWithPHAsset:v10 withExistingAnalysis:v29 forAnalysisTypes:a5];
        [v47 setAllowStreaming:1];
        [v47 setOnDemand:1];
        v100[0] = _NSConcreteStackBlock;
        v100[1] = 3221225472LL;
        v100[2] = sub_100089294;
        v100[3] = &unk_1001BBF78;
        v100[6] = buf;
        __int128 v42 = v100;
        SEL v43 = v47;
        v100[4] = v43;
        v100[5] = self;
        uint64_t v44 = objc_retainBlock(v100);
        uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADQoSManager sharedManager](&OBJC_CLASS___VCPMADQoSManager, "sharedManager"));
        [v48 runBlock:v44 withTaskID:1];

        uint64_t v46 = [v43 status];
      }

      __int128 v49 = v46;

      __int128 v51 = *(void *)(*(void *)&buf[8] + 40LL);
      if (v51)
      {
        uint64_t v52 = MediaAnalysisMergeAnalysis(v29, v51, 1LL);
        id v53 = objc_claimAutoreleasedReturnValue(v52);
        uint64_t v54 = *(void **)(*(void *)&buf[8] + 40LL);
        *(void *)(*(void *)&buf[8] + 40LL) = v53;
      }

      if (v49 == (id)4)
      {
        if (a6)
        {
          v104 = NSLocalizedDescriptionKey;
          uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ Analysis canceled",  v99));
          v105 = v60;
          id v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v105,  &v104,  1LL));
          *a6 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL,  v61));
        }
      }

      else
      {
        if (v49 != (id)2)
        {
          if (a6)
          {
            v102 = NSLocalizedDescriptionKey;
            id v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ Failed to analyze (status:%ld)",  v99,  v49));
            v103 = v63;
            __int128 v64 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v103,  &v102,  1LL));
            *a6 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v64));
          }

          uint64_t v62 = 0LL;
          goto LABEL_35;
        }

        uint64_t v55 = MediaAnalysisLogLevel(v50, v51);
        if ((int)v55 >= 6)
        {
          uint64_t v57 = VCPLogInstance(v55, v56);
          uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
          id v59 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v58, v59))
          {
            *(_DWORD *)v106 = 138412290;
            v107 = v99;
            _os_log_impl((void *)&_mh_execute_header, v58, v59, "%@ Analysis finished", v106, 0xCu);
          }
        }
      }

      uint64_t v62 = *(id *)(*(void *)&buf[8] + 40LL);
LABEL_35:
      _Block_object_dispose(buf, 8);

      goto LABEL_36;
    }

    id v92 = MediaAnalysisLogLevel(v75, v76);
    if ((int)v92 >= 7)
    {
      v94 = VCPLogInstance(v92, v93);
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
      v95 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v35, v95))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v99;
        _os_log_impl((void *)&_mh_execute_header, v35, v95, "%@ Existing analysis doesn't match asset state", buf, 0xCu);
      }

      goto LABEL_54;
    }
  }

  return (int)v10;
}

      goto LABEL_57;
    }

    if (v34)
    {
      uint64_t v60 = MediaAnalysisLogLevel(v54, v55);
      if ((int)v60 >= 3)
      {
        uint64_t v62 = VCPLogInstance(v60, v61);
        id v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
        __int128 v64 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v63, v64))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v105 = v34;
          os_log_type_t v65 = "  Failed to decrypt backup file (%@); restore failed";
          int v66 = v63;
          id v67 = v64;
          __int128 v68 = 12;
LABEL_39:
          _os_log_impl((void *)&_mh_execute_header, v66, v67, v65, buf, v68);
          goto LABEL_55;
        }

        goto LABEL_55;
      }

      goto LABEL_56;
    }

    uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
    v95 = objc_claimAutoreleasedReturnValue(objc_msgSend(v73, "mad_intermediateUnencryptedRestoreFilepathForTask:", 1));

    uint64_t v74 = objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
    uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v74, "vcp_mediaAnalysisDatabaseFilepath"));

    uint64_t v75 = -[VCPRestoreDatabaseTask restoreDatabaseToFilepath:fromBackupFilepath:]( self,  "restoreDatabaseToFilepath:fromBackupFilepath:",  v93,  v95);
    uint64_t v97 = v56;
    LOBYTE(v74) = -[os_log_s removeItemAtPath:error:](v18, "removeItemAtPath:error:", v95, &v97);
    v94 = v97;

    if ((v74 & 1) == 0)
    {
      uint64_t v76 = MediaAnalysisLogLevel(v76, v77);
      if ((int)v76 >= 4)
      {
        id v92 = v29;
        __int16 v78 = VCPLogInstance(v76, v77);
        uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
        uint64_t v80 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v79, v80))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v105 = v94;
          _os_log_impl( (void *)&_mh_execute_header,  v79,  v80,  "  Failed to remove intermediate decrypted restore file (%@)",  buf,  0xCu);
        }

        uint64_t v29 = v92;
      }
    }

    if (v75)
    {
      uint64_t v81 = MediaAnalysisLogLevel(v76, v77);
      if ((int)v81 >= 3)
      {
        uint64_t v83 = VCPLogInstance(v81, v82);
        uint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
        id v85 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v84, v85))
        {
          *(_WORD *)__int128 buf = 0;
          __int128 v86 = "  Failed to restore analysis database; restore failed";
LABEL_52:
          _os_log_impl((void *)&_mh_execute_header, v84, v85, v86, buf, 2u);
          goto LABEL_53;
        }

        goto LABEL_53;
      }
    }

    else
    {
      __int128 v87 = MediaAnalysisLogLevel(v76, v77);
      if ((int)v87 >= 6)
      {
        __int128 v89 = VCPLogInstance(v87, v88);
        uint64_t v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
        id v85 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v84, v85))
        {
          *(_WORD *)__int128 buf = 0;
          __int128 v86 = "  Successfully restored full analysis database";
          goto LABEL_52;
        }

void sub_100069BAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_100069D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100069D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006A1DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006AB18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26)
{
  _Unwind_Resume(a1);
}

void sub_10006ADF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006B3A0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

void sub_10006C164( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
}

void sub_10006CE80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10006D10C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v2 pet];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v3)
  {
    id v4 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
    uint64_t v5 = v4[2]();
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_10006D190(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10006D1B4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v2 pet];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v3)
  {
    id v4 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
    uint64_t v5 = v4[2]();
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_10006D238(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

uint64_t sub_10006D25C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v2 pet];

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v3)
  {
    id v4 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
    uint64_t v5 = v4[2]();
  }

  else
  {
    uint64_t v5 = 0LL;
  }

  return v5;
}

void sub_10006D2E0(_Unwind_Exception *a1)
{
  id v3 = v2;

  _Unwind_Resume(a1);
}

void sub_10006D5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10006D5FC(uint64_t a1)
{
  uint64_t v2 = VCPSignPostLog(a1);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  os_signpost_id_t v4 = os_signpost_id_generate(v3);

  uint64_t v6 = VCPSignPostLog(v5);
  os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int v8 = v7;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_INTERVAL_BEGIN,  v4,  "MADPhotosFullAssetProcessingTask_ProcessAsset",  (const char *)&unk_100199097,  buf,  2u);
  }

  uint64_t v9 = VCPSignPostLog([*(id *)(a1 + 32) processAssetEntry:*(void *)(a1 + 40)]);
  os_log_type_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  uint64_t v11 = v10;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_END,  v4,  "MADPhotosFullAssetProcessingTask_ProcessAsset",  (const char *)&unk_100199097,  v13,  2u);
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

void sub_10006D97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10006DE30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

LABEL_92:
              v108 = MediaAnalysisLogLevel(v61, v62);
              if ((int)v108 >= 6)
              {
                v110 = VCPLogInstance(v108, v109);
                v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
                if (os_log_type_enabled(v111, v255))
                {
                  *(_DWORD *)__int128 buf = 138412290;
                  v272 = v263;
                  _os_log_impl( (void *)&_mh_execute_header,  v111,  v255,  "%@ Prepare to persist existing results",  buf,  0xCu);
                }
              }

              v112 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
              v113 = (void *)objc_claimAutoreleasedReturnValue([v31 existingAnalysis]);
              v114 = [v254 updateAsset:v112 withAnalysis:v113 imageOnly:self->_imageOnlyAnalysis] == 0;

              if (!v114)
              {
                v117 = MediaAnalysisLogLevel(v115, v116);
                if ((int)v117 >= 3)
                {
                  v119 = VCPLogInstance(v117, v118);
                  v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v119);
                  if (os_log_type_enabled(v120, v251))
                  {
                    *(_DWORD *)__int128 buf = 138412290;
                    v272 = v263;
                    _os_log_impl( (void *)&_mh_execute_header,  v120,  v251,  "%@ Failed to update changeManager with existing results",  buf,  0xCu);
                  }
                }
              }
            }

            else
            {
              if (v60) {
                goto LABEL_92;
              }
              id v61 = [0 mediaAnalysisVersion];
              id v61 = [0 videoCaptionVersion];
LABEL_91:
              v104 = (void *)objc_claimAutoreleasedReturnValue([0 mediaAnalysisTimeStamp]);
              v105 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
              v106 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v105, "vcp_modificationDate"));
              v107 = [v104 isEqualToDate:v106];

              if ((v107 & 1) == 0) {
                goto LABEL_92;
              }
            }

            v121 = self->_analysisDatabase;
            v122 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
            v123 = (void *)objc_claimAutoreleasedReturnValue([v122 localIdentifier]);
            v124 = -[VCPDatabaseWriter removeProcessingStatusForLocalIdentifier:andTaskID:]( v121,  "removeProcessingStatusForLocalIdentifier:andTaskID:",  v123,  self->_processingStatusTaskID);

            if ((_DWORD)v124 == -108 || (_DWORD)v124 == -36)
            {
              uint64_t v13 = v124;
            }

            else
            {
              uint64_t v13 = v124;
              if ((_DWORD)v124 != -23) {
                uint64_t v13 = (unint64_t)v58;
              }
            }

            v94 = 1;
            if ((_DWORD)v124 != -108 && (_DWORD)v124 != -36 && (_DWORD)v124 != -23)
            {
              -[MADPhotosFullAssetProcessingTask increaseProcessedJobCountByOne](self, "increaseProcessedJobCountByOne");
              v94 = 11;
            }

            goto LABEL_178;
          }

          uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v31 analysisResults]);
          if (!v35 || ![v31 status])
          {
            v258 = v13;
LABEL_34:

            goto LABEL_51;
          }

          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
          unsigned int v37 = objc_msgSend(v36, "vcp_isLivePhoto");

          if (v37)
          {
            uint64_t v40 = MediaAnalysisLogLevel(v38, v39);
            if ((int)v40 >= 7)
            {
              __int128 v42 = VCPLogInstance(v40, v41);
              SEL v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
              if (os_log_type_enabled(v43, type))
              {
                *(_DWORD *)__int128 buf = 138412290;
                v272 = v263;
                _os_log_impl((void *)&_mh_execute_header, v43, type, "%@ Partial analysis completed", buf, 0xCu);
              }
            }

            uint64_t v44 = self->_analysisDatabase;
            uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
            uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v31 analysisResults]);
            uint64_t v47 = -[VCPDatabaseWriter storeAnalysisForAsset:analysis:](v44, "storeAnalysisForAsset:analysis:", v45, v46);

            if (v47 == -108 || v47 == -36)
            {
              v258 = v47;
            }

            else
            {
              v258 = v47;
              if (v47 != -23) {
                v258 = v13;
              }
            }

            v94 = 1;
            if (v47 == -108 || v47 == -36 || v47 == -23)
            {
              uint64_t v13 = v258;
              goto LABEL_178;
            }

            if (+[VCPVideoCNNAnalyzer isMUBackboneEnabled]( &OBJC_CLASS___VCPVideoCNNAnalyzer,  "isMUBackboneEnabled"))
            {
              v180 = (void *)objc_claimAutoreleasedReturnValue([v31 asset]);
              v181 = (void *)objc_claimAutoreleasedReturnValue([v180 localIdentifier]);
              v182 = (void *)objc_claimAutoreleasedReturnValue([v31 analysisResults]);
              uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue( +[VSKAsset mad_assetsWithLocalIdentifier:mediaAnalysisResults:]( &OBJC_CLASS___VSKAsset,  "mad_assetsWithLocalIdentifier:mediaAnalysisResults:",  v181,  v182));

              [v248 addObjectsFromArray:v35];
              goto LABEL_34;
            }
          }

          else
          {
            v258 = v13;
          }

LABEL_93:
    }

    __int128 v42 = [obj countByEnumeratingWithState:&v149 objects:v161 count:16];
  }

  while (v42);
LABEL_102:

  v107 = (void *)objc_claimAutoreleasedReturnValue([v135 asset]);
  v108 = (void *)objc_claimAutoreleasedReturnValue([v107 adjustmentVersion]);
  [v142 setFaceAdjustmentVersion:v108];

  v109 = (void *)objc_claimAutoreleasedReturnValue([v135 results]);
  v110 = VCPAnalysisResultWarningImageTooSmallKey;
  v111 = (void *)objc_claimAutoreleasedReturnValue([v109 objectForKeyedSubscript:VCPAnalysisResultWarningImageTooSmallKey]);
  v112 = v111 == 0LL;

  if ((v112 & 1) != 0)
  {
    v113 = 0;
  }

  else
  {
    v109 = (void *)objc_claimAutoreleasedReturnValue([v135 results]);
    v112 = objc_claimAutoreleasedReturnValue([v109 objectForKeyedSubscript:v110]);
    v113 = [(id)v112 BOOLValue];

    v116 = MediaAnalysisLogLevel(v114, v115);
    if ((int)v116 >= 7)
    {
      v118 = VCPLogInstance(v116, v117);
      v109 = (void *)objc_claimAutoreleasedReturnValue(v118);
      v112 = VCPLogToOSLogType[7];
      if (os_log_type_enabled((os_log_t)v109, (os_log_type_t)VCPLogToOSLogType[7]))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v155 = v140;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v109,  (os_log_type_t)v112,  "%@ Marking resource is too small",  buf,  0xCu);
      }
    }
  }

  if (((v137 | v113) & 1) != 0)
  {
    else {
      v119 = 11;
    }
  }

  else
  {
    v109 = (void *)objc_claimAutoreleasedReturnValue([v135 asset]);
    v112 = objc_claimAutoreleasedReturnValue([v109 photoLibrary]);
    v119 = (unsigned __int16)objc_msgSend((id)v112, "mad_faceProcessingInternalVersion");
  }

  [v142 setFaceAnalysisVersion:v119];
  if (((v137 | v113) & 1) == 0)
  {
  }

  v120 = (void *)objc_claimAutoreleasedReturnValue([v135 asset]);
  if (objc_msgSend(v120, "mad_isEligibleForComputeSync"))
  {
    v121 = [v142 faceAnalysisVersion];
    v122 = (void *)objc_claimAutoreleasedReturnValue([v135 asset]);
    v123 = (void *)objc_claimAutoreleasedReturnValue([v122 photoLibrary]);
    v124 = objc_msgSend(v123, "mad_faceProcessingInternalVersion") == v121;

    if (v124)
    {
      v125 = (void *)objc_claimAutoreleasedReturnValue([v135 asset]);
      v120 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v125, "mad_refetchAsset"));

      if (v120)
      {
        objc_msgSend( v142,  "setLocalAnalysisStage:",  objc_msgSend(v120, "mad_analysisStageAfterCompletingAnalysis:", 3));
      }

      else
      {
        v126 = (void *)objc_claimAutoreleasedReturnValue([v135 asset]);
        objc_msgSend( v142,  "setLocalAnalysisStage:",  objc_msgSend(v126, "mad_analysisStageAfterCompletingAnalysis:", 3));
      }

      goto LABEL_120;
    }
  }

  else
  {
LABEL_120:
  }

  v127 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
  [v127 accumulateInt64Value:v136 forField:@"NumberOfFacesPersisted" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
  [v127 accumulateInt64Value:v133 forField:@"NumberOfTorsosPersisted" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
  [v127 accumulateInt64Value:v134 forField:@"NumberOfFaceTorsosPersisted" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
  [v127 accumulateInt64Value:v141 forField:@"NumberOfPetsPersisted" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
  v128 = v139;
  *a4 = v128;

LABEL_122:
LABEL_123:
}

LABEL_178:
          objc_autoreleasePoolPop(context);
          if (v94 != 11 && v94)
          {
            v250 = v13;
            goto LABEL_216;
          }

          int v30 = v262 + 1;
        }

        while ((id)(v262 + 1) != v260);
        uint64_t v29 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v266,  v270,  16LL);
        if (!v29)
        {
LABEL_219:

          v218 = -[VCPDatabaseWriter commit](self->_analysisDatabase, "commit");
          if (v218 == -108)
          {
            v220 = -108;
          }

          else
          {
            v219 = v218 == -36 || v218 == -23;
            v220 = v218;
            if (!v219) {
              v220 = v13;
            }
          }

          if (v218 == -108)
          {
            v250 = v220;
          }

          else
          {
            v216 = (os_log_s *)v248;
            if (v218 == -36 || v218 == -23)
            {
              v250 = v220;
              goto LABEL_231;
            }

            if ([v248 count])
            {
              photoLibrardouble y = self->_photoLibrary;
              v223 = (void *)objc_claimAutoreleasedReturnValue(-[MADProcessingTask cancelBlock](self, "cancelBlock"));
              +[MADVectorDatabaseUtilities updateWithAssetsEmbeddings:photoLibrary:cancelBlock:error:]( &OBJC_CLASS___MADVectorDatabaseUtilities,  "updateWithAssetsEmbeddings:photoLibrary:cancelBlock:error:",  v248,  photoLibrary,  v223,  0LL);
            }

            v224 = [v254 publishPendingChanges];
            if ((_DWORD)v224)
            {
              v224 = (id)MediaAnalysisLogLevel(v224, v225);
              if ((int)v224 >= 4)
              {
                v226 = VCPLogInstance(v224, v225);
                v227 = (os_log_s *)objc_claimAutoreleasedReturnValue(v226);
                v228 = VCPLogToOSLogType[4];
                if (os_log_type_enabled(v227, v228))
                {
                  v229 = self->_logPrefix;
                  *(_DWORD *)__int128 buf = 138412290;
                  v272 = v229;
                  _os_log_impl( (void *)&_mh_execute_header,  v227,  v228,  "[%@] Failed to persist full analysis results to Photos",  buf,  0xCu);
                }
              }
            }

            v230 = MediaAnalysisLogLevel(v224, v225);
            if ((int)v230 >= 5)
            {
              v232 = VCPLogInstance(v230, v231);
              v233 = (os_log_s *)objc_claimAutoreleasedReturnValue(v232);
              v234 = VCPLogToOSLogType[5];
              if (os_log_type_enabled(v233, v234))
              {
                v235 = self->_logPrefix;
                *(_DWORD *)__int128 buf = 138412290;
                v272 = v235;
                _os_log_impl( (void *)&_mh_execute_header,  v233,  v234,  "[%@] Finished persisting full analysis results to Photos",  buf,  0xCu);
              }
            }

            v236 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
            [v236 addBreadcrumb:@"[%@] Finished persisting %d assets", self->_logPrefix, -[NSMutableArray count](self->_assetEntries, "count")];

            v238 = VCPSignPostLog(v237);
            v239 = (os_log_s *)objc_claimAutoreleasedReturnValue(v238);
            v240 = v239;
            if (v245 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v239))
            {
              *(_WORD *)__int128 buf = 0;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v240,  OS_SIGNPOST_INTERVAL_END,  spid,  "MADPhotosFullAssetProcessingTask_Publish",  (const char *)&unk_100199097,  buf,  2u);
            }

            -[VCPTimeMeasurement stop](v249, "stop");
            -[MADPhotosFullAssetProcessingTask _reportCoreAnalyticsForSession](self, "_reportCoreAnalyticsForSession");
            id obj = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
            -[VCPTimeMeasurement elapsedTimeSeconds](v249, "elapsedTimeSeconds");
            -[NSMutableArray accumulateDoubleValue:forField:andEvent:]( obj,  "accumulateDoubleValue:forField:andEvent:",  @"TotalPublishTimeInSeconds",  @"com.apple.mediaanalysisd.FullAnalysisRunSession");
            v241 = VCPCoreAnalyticsFieldForFull(self->_imageOnlyAnalysis, self->_mediaType, self->_mediaSubtype, 4LL);
            v242 = (void *)objc_claimAutoreleasedReturnValue(v241);
            if (v242)
            {
              -[VCPTimeMeasurement elapsedTimeSeconds](v249, "elapsedTimeSeconds");
              -[NSMutableArray accumulateDoubleValue:forField:andEvent:]( obj,  "accumulateDoubleValue:forField:andEvent:",  v242,  @"com.apple.mediaanalysisd.FullAnalysisRunSession");
            }

LABEL_216:
          }

          v216 = (os_log_s *)v248;
          goto LABEL_231;
        }
      }
    }

    v213 = MediaAnalysisLogLevel(0LL, v27);
    if ((int)v213 < 3)
    {
      v250 = -18;
    }

    else
    {
      v215 = VCPLogInstance(v213, v214);
      v216 = (os_log_s *)objc_claimAutoreleasedReturnValue(v215);
      v217 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v216, v217))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v216, v217, "Failed to create VCPPhotosAssetChangeManager", buf, 2u);
      }

      v250 = -18;
LABEL_231:
    }
  }

  else
  {
    v250 = 0;
  }

  return v250;
}

void sub_10006F8E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, void *a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40)
{
  _Unwind_Resume(a1);
}

void sub_1000703F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007088C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100070B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100070C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100070CF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100070E20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_117:
        uint64_t v26 = v84;
        goto LABEL_45;
      }

      if (v64 == (id)2)
      {
        id v67 = [v9 removeLocalIdentifierFromBlacklist:v10];
        if (v67 == -108 || v67 == -36)
        {
          uint64_t v26 = v67;
        }

        else
        {
          uint64_t v26 = v67;
          if (v67 != -23) {
            uint64_t v26 = v51;
          }
        }

        if (v67 == -108 || v67 == -36 || v67 == -23) {
          goto LABEL_45;
        }
        if (v62)
        {
          uint64_t v79 = MediaAnalysisStripKeyframeResourceResultsFromAnalysis();
          uint64_t v80 = objc_claimAutoreleasedReturnValue(v79);

          uint64_t v81 = [v9 storeAnalysisForAsset:v8 analysis:v80];
          if (v81 == -108 || v81 == -36)
          {
            v82 = v81;
          }

          else
          {
            v82 = v81;
            if (v81 != -23) {
              v82 = v26;
            }
          }

          if (v81 == -108 || v81 == -36 || v81 == -23)
          {
            v95 = (id)v80;
            uint64_t v26 = v82;
            goto LABEL_45;
          }

          noResultStrip = self->_noResultStrip;
          __int128 v86 = (void *)v80;
          if (!self->_noResultStrip)
          {
            __int128 v87 = MediaAnalysisStripInternalResultsFromAnalysis(v80);
            __int128 v86 = (void *)objc_claimAutoreleasedReturnValue(v87);
          }

          __int128 v88 = (void *)objc_claimAutoreleasedReturnValue([v8 localIdentifier]);
          [v97 setObject:v86 forKey:v88];

          if (!noResultStrip) {
          v95 = (id)v80;
          }
          uint64_t v26 = v82;
        }

        else
        {
          v95 = 0LL;
        }

        __int128 v89 = [v9 commit];
        if (v89 == -108 || v89 == -36)
        {
          uint64_t v84 = v89;
        }

        else
        {
          uint64_t v84 = v89;
          if (v89 != -23) {
            uint64_t v84 = v26;
          }
        }

        if (v89 == -108 || v89 == -36 || v89 == -23) {
          goto LABEL_117;
        }
        if (+[VCPVideoCNNAnalyzer isMUBackboneEnabled]( &OBJC_CLASS___VCPVideoCNNAnalyzer,  "isMUBackboneEnabled"))
        {
          uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([v8 localIdentifier]);
          id v91 = (void *)objc_claimAutoreleasedReturnValue( +[VSKAsset mad_assetsWithLocalIdentifier:mediaAnalysisResults:]( &OBJC_CLASS___VSKAsset,  "mad_assetsWithLocalIdentifier:mediaAnalysisResults:",  v90,  v95));

          if ([v91 count])
          {
            photoLibrardouble y = self->_photoLibrary;
            v99[0] = _NSConcreteStackBlock;
            v99[1] = 3221225472LL;
            v99[2] = sub_100071AEC;
            v99[3] = &unk_1001BBED8;
            v100 = v98;
            +[MADVectorDatabaseUtilities updateWithAssetsEmbeddings:photoLibrary:cancelBlock:error:]( &OBJC_CLASS___MADVectorDatabaseUtilities,  "updateWithAssetsEmbeddings:photoLibrary:cancelBlock:error:",  v91,  photoLibrary,  v99,  0LL);
          }
        }
      }

      else
      {
        uint64_t v74 = MediaAnalysisLogLevel(v65, v66);
        if ((int)v74 >= 4)
        {
          uint64_t v76 = VCPLogInstance(v74, v75);
          int v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
          __int16 v78 = VCPLogToOSLogType[4];
          if (os_log_type_enabled(v77, v78))
          {
            *(_DWORD *)__int128 buf = 138412290;
            v105 = v10;
            _os_log_impl((void *)&_mh_execute_header, v77, v78, "  [%@] Analysis failed to complete", buf, 0xCu);
          }
        }
      }
    }

    uint64_t v26 = 0;
LABEL_45:

    int v15 = v95;
LABEL_46:

    goto LABEL_47;
  }

  id v18 = MediaAnalysisLogLevel(v16, v17);
  if ((int)v18 >= 7)
  {
    os_log_type_t v20 = VCPLogInstance(v18, v19);
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    int v22 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v21, v22))
    {
      *(_DWORD *)__int128 buf = 138412290;
      v105 = v10;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "  [%@] Requested analysis exists within MA DB", buf, 0xCu);
    }
  }

  os_log_type_t v23 = self->_noResultStrip;
  v94 = v15;
  if (!self->_noResultStrip)
  {
    uint64_t v24 = MediaAnalysisStripInternalResultsFromAnalysis(v15);
    v94 = (void *)objc_claimAutoreleasedReturnValue(v24);
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v8 localIdentifier]);
  [v97 setObject:v94 forKey:v25];

  uint64_t v26 = 0;
  if (!v23) {
    goto LABEL_46;
  }
LABEL_47:

  return v26;
}
        }

        else
        {
          v131 = MediaAnalysisLogLevel(0LL, v109);
          if ((int)v131 >= 3)
          {
            v133 = VCPLogInstance(v131, v132);
            v113 = (id)objc_claimAutoreleasedReturnValue(v133);
            if (os_log_type_enabled((os_log_t)v113, v187))
            {
              v134 = (void *)objc_claimAutoreleasedReturnValue([v9 personLocalIdentifier]);
              *(_DWORD *)__int128 buf = 138412546;
              *(void *)&uint8_t buf[4] = v196;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v134;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v113,  v187,  "%@ Invalid confirming person identification %@ for face",  buf,  0x16u);
            }

            goto LABEL_117;
          }
        }

void sub_1000718B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100071A4C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v2 pet];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100071A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100071A9C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v2 pet];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100071ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100071AEC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100071E3C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL sub_100071ECC(uint64_t a1)
{
  return *(_BYTE *)(*(void *)(a1 + 32) + 24) || [*(id *)(a1 + 40) recommendedState] != (id)2;
}

void sub_100071FD0(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  uint64_t v2 = (void *)qword_1001E64F0;
  qword_1001E64F0 = (uint64_t)v1;
}

uint64_t sub_100072184(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000722C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100072350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000725E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007263C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000727AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___MADPhotosOCRAssetProcessingTask;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10007296C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100072C18( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100072D20(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  id v3 = *(void **)(*(void *)(a1 + 32) + 96LL);
  os_signpost_id_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
  [v3 setObject:v2 forKeyedSubscript:v4];

  uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v6 = *(void *)(a1 + 32);
  os_log_type_t v7 = *(void **)(v6 + 104);
  *(void *)(v6 + 104) = v5;
}

void sub_100072DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100072E88(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(a1 + 32) + 112LL);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 96LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
  [v2 removeObjectForKey:v3];

  uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 104);
  *(void *)(v5 + 104) = v4;

  uint64_t v9 = MediaAnalysisLogLevel(v7, v8);
  if ((int)v9 >= 7)
  {
    uint64_t v11 = VCPLogInstance(v9, v10);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    os_log_type_t v13 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v12, v13))
    {
      unsigned int v14 = [*(id *)(*(void *)(a1 + 32) + 96) count];
      v15[0] = 67109120;
      v15[1] = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[OCR] %d downloads pending", (uint8_t *)v15, 8u);
    }
  }

void sub_100072FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100073074(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v3 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 104)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2;
}

void sub_1000730D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100073164(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 112LL) = *(_DWORD *)(a1 + 40);
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 96) count];
      int v9 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)__int128 buf = 67109376;
      unsigned int v22 = v8;
      __int16 v23 = 1024;
      int v24 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[OCR][Download] Canceling %d download requests (%d)",  buf,  0xEu);
    }
  }

  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 96), "allValues", 0));
  id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v17;
    do
    {
      for (unint64_t i = 0LL; i != v11; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v12) {
          objc_enumerationMutation(v10);
        }
        unsigned int v14 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        int v15 = (void *)objc_claimAutoreleasedReturnValue(+[PHAssetResourceManager defaultManager](&OBJC_CLASS___PHAssetResourceManager, "defaultManager"));
        objc_msgSend(v15, "cancelDataRequest:", objc_msgSend(v14, "intValue"));
      }

      id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v11);
  }
}

void sub_10007332C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_48:
    }

    id v53 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v128,  "countByEnumeratingWithState:objects:count:",  &v132,  v140,  16LL);
  }

  while (v53);
LABEL_52:

  id v91 = MediaAnalysisLogLevel(v89, v90);
  if ((int)v91 >= 6)
  {
    uint64_t v93 = VCPLogInstance(v91, v92);
    v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
    v95 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v94, v95))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)v143 = obja;
      _os_log_impl( (void *)&_mh_execute_header,  v94,  v95,  "[OCR][Download] Waiting for %d downloads to complete",  buf,  8u);
    }
  }

  while (1)
  {
    downloadGroup = self->_downloadGroup;
    uint64_t v97 = dispatch_time(0LL, 500000000LL);
    v98 = (id)dispatch_group_wait((dispatch_group_t)downloadGroup, v97);
    if (!v98) {
      break;
    }
    uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue(-[MADProcessingTask cancelBlock](self, "cancelBlock"));
    if (v99)
    {
      v100 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(-[MADProcessingTask cancelBlock](self, "cancelBlock"));
      v101 = v100[2]();

      if (v101)
      {
        v112 = MediaAnalysisLogLevel(v102, v103);
        if ((int)v112 >= 5)
        {
          v114 = VCPLogInstance(v112, v113);
          v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
          v116 = VCPLogToOSLogType[5];
          if (os_log_type_enabled(v115, v116))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v115,  v116,  "[OCR][Download] Processing cancelled; cancelling downloads",
              buf,
              2u);
          }
        }

        v98 = -[MADPhotosOCRAssetProcessingTask cancelRemainingDownloadsWithStatus:]( self,  "cancelRemainingDownloadsWithStatus:",  4294967168LL);
        break;
      }
    }

    v104 = -[MADPhotosOCRAssetProcessingTask downloadInactiveTimeInterval](self, "downloadInactiveTimeInterval");
    if (v106 > 60.0)
    {
      v107 = MediaAnalysisLogLevel(v104, v105);
      if ((int)v107 >= 5)
      {
        v109 = VCPLogInstance(v107, v108);
        v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
        v111 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v110, v111))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v110,  v111,  "[OCR][Download] Download inactivity timeout; cancelling downloads",
            buf,
            2u);
        }
      }

      v98 = -[MADPhotosOCRAssetProcessingTask cancelRemainingDownloadsWithStatus:]( self,  "cancelRemainingDownloadsWithStatus:",  4294943494LL);
      break;
    }
  }

  v117 = VCPSignPostLog(v98);
  v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
  v119 = v118;
  if (v123 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v118))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v119,  OS_SIGNPOST_INTERVAL_END,  spid,  "MADPhotosOCRAssetProcessingTask_Download",  (const char *)&unk_100199097,  buf,  2u);
  }

  v120 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  objc_msgSend( v120,  "addBreadcrumb:",  @"[OCR] Finished downloading %d assets",  -[NSMutableArray count](self->_assetEntries, "count"));

  -[VCPTimeMeasurement stop](v124, "stop");
  v121 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
  -[VCPTimeMeasurement elapsedTimeSeconds](v124, "elapsedTimeSeconds");
  objc_msgSend( v121,  "accumulateDoubleValue:forField:andEvent:",  @"TotalDownloadTimeInSeconds",  @"com.apple.mediaanalysisd.OCRAnalysisRunSession");
}
    }

    uint64_t v46 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v121,  "countByEnumeratingWithState:objects:count:",  &v126,  v134,  16LL);
  }

  while (v46);
LABEL_52:

  id v85 = MediaAnalysisLogLevel(v83, v84);
  if ((int)v85 >= 6)
  {
    __int128 v87 = VCPLogInstance(v85, v86);
    __int128 v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
    __int128 v89 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v88, v89))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)v137 = obja;
      _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "[Face][Download] Waiting for %d downloads to complete",  buf,  8u);
    }
  }

  while (1)
  {
    downloadGroup = self->_downloadGroup;
    id v91 = dispatch_time(0LL, 500000000LL);
    id v92 = (id)dispatch_group_wait((dispatch_group_t)downloadGroup, v91);
    if (!v92) {
      break;
    }
    uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(-[MADProcessingTask cancelBlock](self, "cancelBlock"));
    if (v93)
    {
      v94 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(-[MADProcessingTask cancelBlock](self, "cancelBlock"));
      v95 = v94[2]();

      if (v95)
      {
        v106 = MediaAnalysisLogLevel(v96, v97);
        if ((int)v106 >= 5)
        {
          v108 = VCPLogInstance(v106, v107);
          v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
          v110 = VCPLogToOSLogType[5];
          if (os_log_type_enabled(v109, v110))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "[Face][Download] Processing cancelled; cancelling downloads",
              buf,
              2u);
          }
        }

        id v92 = -[MADPhotosFaceAssetProcessingTask cancelRemainingDownloadsWithStatus:]( self,  "cancelRemainingDownloadsWithStatus:",  4294967168LL,  spid);
        break;
      }
    }

    v98 = -[MADPhotosFaceAssetProcessingTask downloadInactiveTimeInterval](self, "downloadInactiveTimeInterval", spid);
    if (v100 > 60.0)
    {
      v101 = MediaAnalysisLogLevel(v98, v99);
      if ((int)v101 >= 5)
      {
        v103 = VCPLogInstance(v101, v102);
        v104 = (os_log_s *)objc_claimAutoreleasedReturnValue(v103);
        v105 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v104, v105))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v104,  v105,  "[Face][Download] Download inactivity timeout; cancelling downloads",
            buf,
            2u);
        }
      }

      id v92 = -[MADPhotosFaceAssetProcessingTask cancelRemainingDownloadsWithStatus:]( self,  "cancelRemainingDownloadsWithStatus:",  4294943494LL);
      break;
    }
  }

  v111 = VCPSignPostLog(v92);
  v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(v111);
  v113 = v112;
  if (v116 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v112))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v113,  OS_SIGNPOST_INTERVAL_END,  spid,  "MADPhotosFaceAssetProcessingTask_Download",  (const char *)&unk_100199097,  buf,  2u);
  }

  -[VCPTimeMeasurement stop](v117, "stop");
  v114 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
  -[VCPTimeMeasurement elapsedTimeSeconds](v117, "elapsedTimeSeconds");
  objc_msgSend( v114,  "accumulateDoubleValue:forField:andEvent:",  @"TotalDownloadTimeInSeconds",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");
}

      goto LABEL_49;
    }

    uint64_t v40 = MediaAnalysisLogLevel(0LL, v19);
    if ((int)v40 >= 4)
    {
      __int128 v42 = VCPLogInstance(v40, v41);
      SEL v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
      uint64_t v44 = VCPLogToOSLogType[4];
      __int128 v87 = v43;
      if (!os_log_type_enabled(v43, v44)) {
        goto LABEL_52;
      }
      *(_DWORD *)__int128 buf = 138412290;
      v101 = v92;
      id v28 = "[%@] taskIdentifier not found";
      uint64_t v29 = v43;
      int v30 = v44;
      __int16 v31 = 12;
      goto LABEL_18;
    }
  }

            v282 = v25;
            __int128 v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v25, "UUIDString"));
            os_log_type_t v50 = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson localIdentifierWithUUID:]( &OBJC_CLASS___PHPerson,  "localIdentifierWithUUID:",  v49));

            if (!v289)
            {
              v339 = v50;
              __int128 v69 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v339,  1LL));
              __int128 v70 = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchPersonsWithLocalIdentifiers:options:]( &OBJC_CLASS___PHPerson,  "fetchPersonsWithLocalIdentifiers:options:",  v69,  v290));
              __int128 v71 = (void *)objc_claimAutoreleasedReturnValue([v70 firstObject]);

              if (v71)
              {
                __int128 v68 = v71;
LABEL_58:
                v289 = v68;

                goto LABEL_59;
              }

              v200 = MediaAnalysisLogLevel(v72, v73);
              if ((int)v200 >= 3)
              {
                v202 = VCPLogInstance(v200, v201);
                osloga = (os_log_s *)objc_claimAutoreleasedReturnValue(v202);
                v203 = VCPLogToOSLogType[3];
                v204 = osloga;
                if (os_log_type_enabled(osloga, v203))
                {
LABEL_174:
                  *(_DWORD *)__int128 buf = 138412546;
                  v342 = v288;
                  v343 = 2112;
                  v344 = v50;
                  _os_log_impl( (void *)&_mh_execute_header,  v204,  v203,  "%@ tagged Person (%@) does not exist!",  buf,  0x16u);
                }

void sub_100073E30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_100074014(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  unsigned int v8 = *(void **)(a1 + 32);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) asset]);
  uint64_t v10 = (uint64_t)[v8 removeDownloadRequestIDForAsset:v9];

  if (v6)
  {
    if (!(_DWORD)v10)
    {
      id v11 = objc_msgSend(v6, "mad_isDownloadThrottling");
      if ((_DWORD)v11)
      {
        uint64_t v13 = MediaAnalysisLogLevel(v11, v12);
        if ((int)v13 < 3)
        {
          uint64_t v10 = 4294943488LL;
          goto LABEL_16;
        }

        uint64_t v15 = VCPLogInstance(v13, v14);
        __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        os_log_type_t v17 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v16, v17))
        {
          __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) asset]);
          __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 localIdentifier]);
          os_log_type_t v20 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
          int v28 = 138412546;
          uint64_t v29 = v19;
          __int16 v30 = 2112;
          __int16 v31 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "[OCR][Download][%@] Resource download throttled (%@)",  (uint8_t *)&v28,  0x16u);
        }

        uint64_t v10 = 4294943488LL;
      }

      else
      {
        uint64_t v21 = MediaAnalysisLogLevel(v11, v12);
        if ((int)v21 < 3)
        {
          uint64_t v10 = 4294943494LL;
          goto LABEL_16;
        }

        uint64_t v23 = VCPLogInstance(v21, v22);
        __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        os_log_type_t v24 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v16, v24))
        {
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) asset]);
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v25 localIdentifier]);
          __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
          int v28 = 138412546;
          uint64_t v29 = v26;
          __int16 v30 = 2112;
          __int16 v31 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  v24,  "[OCR][Download][%@] Resource download failed (%@)",  (uint8_t *)&v28,  0x16u);
        }

        uint64_t v10 = 4294943494LL;
      }
    }

void sub_10007428C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000746C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_100074B20( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  uint64_t v15 = v13;

  _Unwind_Resume(a1);
}

void sub_100074CE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100074EB8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

LABEL_99:
      goto LABEL_100;
    }

    __int128 v41 = VCPSignPostLog(v32);
    __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
    SEL v43 = os_signpost_id_generate(v42);

    uint64_t v45 = VCPSignPostLog(v44);
    uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    uint64_t v47 = v46;
    if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v46))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v47,  OS_SIGNPOST_INTERVAL_BEGIN,  v43,  "VNImageRequestHandler_init",  (const char *)&unk_100199097,  buf,  2u);
    }

    v179 = -[VNImageRequestHandler initWithURL:options:]( objc_alloc(&OBJC_CLASS___VNImageRequestHandler),  "initWithURL:options:",  v10,  &__NSDictionary0__struct);
    uint64_t v48 = VCPSignPostLog(v179);
    __int128 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
    os_log_type_t v50 = v49;
    if (v43 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v49))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v50,  OS_SIGNPOST_INTERVAL_END,  v43,  "VNImageRequestHandler_init",  (const char *)&unk_100199097,  buf,  2u);
    }

    v181 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    v180 = (void *)objc_claimAutoreleasedReturnValue( +[VNRecognizeDocumentsRequest mad_defaultRequest]( &OBJC_CLASS___VNRecognizeDocumentsRequest,  "mad_defaultRequest"));
    if (VCPPhotosMRCCachingEnabled(objc_msgSend(v181, "addObject:")))
    {
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[VNDetectBarcodesRequest mad_defaultRequest]( &OBJC_CLASS___VNDetectBarcodesRequest,  "mad_defaultRequest"));
      if (!v52)
      {
        v107 = MediaAnalysisLogLevel(0LL, v51);
        if ((int)v107 >= 3)
        {
          v109 = VCPLogInstance(v107, v108);
          v110 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
          v111 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v110, v111))
          {
            v112 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
            v113 = (void *)objc_claimAutoreleasedReturnValue([v112 localIdentifier]);
            v114 = (void *)objc_claimAutoreleasedReturnValue([0 description]);
            *(_DWORD *)__int128 buf = 138412546;
            v186 = v113;
            v187 = 2112;
            v188 = v114;
            _os_log_impl( (void *)&_mh_execute_header,  v110,  v111,  "[OCR][Process][%@] Failed to configure VNDetectBarcodesRequest (%@)",  buf,  0x16u);
          }
        }

        [v8 setStatus:4294967278];
        uint64_t v52 = 0LL;
        __int128 v64 = 0LL;
        goto LABEL_98;
      }

      [v181 addObject:v52];
    }

    else
    {
      uint64_t v52 = 0LL;
    }

    id v53 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
    uint64_t v54 = objc_msgSend(v53, "vcp_ocrMajorDimensionForResource:", v9);

    if (v54)
    {
      [v180 setMaximumProcessingDimensionOnTheLongSide:v54];
      uint64_t v55 = [v52 setMaximumProcessingDimensionOnTheLongSide:v54];
    }

    __int16 v56 = VCPSignPostLog(v55);
    uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
    uint64_t v58 = os_signpost_id_generate(v57);

    uint64_t v60 = VCPSignPostLog(v59);
    id v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
    uint64_t v62 = v61;
    if (v58 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v61))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v62,  OS_SIGNPOST_INTERVAL_BEGIN,  v58,  "VNImageRequestHandler_performRequests",  (const char *)&unk_100199097,  buf,  2u);
    }

    v184 = 0LL;
    id v63 = -[VNImageRequestHandler performRequests:error:](v179, "performRequests:error:", v181, &v184);
    __int128 v64 = v184;
    os_log_type_t v65 = VCPSignPostLog(v64);
    int v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
    id v67 = v66;
    if (v58 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v66))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v67,  OS_SIGNPOST_INTERVAL_END,  v58,  "VNImageRequestHandler_performRequests",  (const char *)&unk_100199097,  buf,  2u);
    }

    if ((v63 & 1) == 0)
    {
      v100 = MediaAnalysisLogLevel(v68, v69);
      if ((int)v100 >= 4)
      {
        v102 = VCPLogInstance(v100, v101);
        v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
        v104 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v103, v104))
        {
          v105 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
          v106 = (void *)objc_claimAutoreleasedReturnValue([v105 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412546;
          v186 = v106;
          v187 = 2112;
          v188 = v64;
          _os_log_impl((void *)&_mh_execute_header, v103, v104, "[OCR][Process][%@] Processing failed (%@)", buf, 0x16u);
        }
      }

      [v8 setStatus:4294967278];
      goto LABEL_98;
    }

    __int128 v70 = (void *)objc_claimAutoreleasedReturnValue([v180 results]);
    v178 = (void *)objc_claimAutoreleasedReturnValue([v70 firstObject]);

    if (!v178)
    {
      v115 = MediaAnalysisLogLevel(v71, v72);
      if ((int)v115 >= 6)
      {
        v117 = VCPLogInstance(v115, v116);
        v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
        v119 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v118, v119))
        {
          v120 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
          v121 = (void *)objc_claimAutoreleasedReturnValue([v120 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          v186 = v121;
          _os_log_impl( (void *)&_mh_execute_header,  v118,  v119,  "[OCR][Process][%@] Processing produced no results",  buf,  0xCu);
        }
      }

      [v8 setStatus:4294967278];
      goto LABEL_97;
    }

    [v8 setVersion:VCPPhotosOCRProcessingVersion];
    uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue([v178 getTranscript]);
    v176 = [v73 length];

    if (v176)
    {
      uint64_t v76 = VCPSignPostLog(v74);
      int v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
      __int16 v78 = os_signpost_id_generate(v77);

      uint64_t v80 = VCPSignPostLog(v79);
      uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
      v82 = v81;
      if (v78 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v81))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v82,  OS_SIGNPOST_INTERVAL_BEGIN,  v78,  "VNDocumentObservation_archive",  (const char *)&unk_100199097,  buf,  2u);
      }

      v183 = v64;
      uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v178,  1LL,  &v183));
      uint64_t v84 = v183;

      __int128 v64 = v84;
      [v8 setOcrData:v83];

      __int128 v86 = VCPSignPostLog(v85);
      __int128 v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
      __int128 v88 = v87;
      if (v78 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v87))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v88,  OS_SIGNPOST_INTERVAL_END,  v78,  "VNDocumentObservation_archive",  (const char *)&unk_100199097,  buf,  2u);
      }

      __int128 v89 = (void *)objc_claimAutoreleasedReturnValue([v8 ocrData]);
      uint64_t v90 = v89 == 0LL;

      if (v90)
      {
        uint64_t v93 = MediaAnalysisLogLevel(v91, v92);
        if ((int)v93 >= 6)
        {
          v95 = VCPLogInstance(v93, v94);
          int8x16_t v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
          uint64_t v97 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v96, v97))
          {
            v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "asset", v176));
            uint64_t v99 = (void *)objc_claimAutoreleasedReturnValue([v98 localIdentifier]);
            *(_DWORD *)__int128 buf = 138412290;
            v186 = v99;
            _os_log_impl( (void *)&_mh_execute_header,  v96,  v97,  "[OCR][Process][%@] Failed to archive OCR results",  buf,  0xCu);
          }
        }

        objc_msgSend(v8, "setStatus:", 4294967278, v176);
LABEL_97:

LABEL_98:
        unsigned int v37 = (os_log_s *)v179;
        goto LABEL_99;
      }
    }

    else
    {
      id v91 = MediaAnalysisLogLevel(v74, v75);
      if ((int)v91 >= 6)
      {
        v123 = VCPLogInstance(v91, v122);
        v124 = (os_log_s *)objc_claimAutoreleasedReturnValue(v123);
        v125 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v124, v125))
        {
          v126 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
          v127 = (void *)objc_claimAutoreleasedReturnValue([v126 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          v186 = v127;
          _os_log_impl( (void *)&_mh_execute_header,  v124,  v125,  "[OCR][Process][%@] No text recognized; skipping archive/persistence",
            buf,
            0xCu);
        }
      }
    }

    if (VCPPhotosMRCCachingEnabled(v91))
    {
      v128 = (void *)objc_claimAutoreleasedReturnValue([v52 results]);
      v129 = [v128 count] == 0;

      if (!v129)
      {
        v132 = VCPSignPostLog(v130);
        v133 = (os_log_s *)objc_claimAutoreleasedReturnValue(v132);
        v134 = os_signpost_id_generate(v133);

        v136 = VCPSignPostLog(v135);
        v137 = (os_log_s *)objc_claimAutoreleasedReturnValue(v136);
        v138 = v137;
        if (v134 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v137))
        {
          *(_WORD *)__int128 buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v138,  OS_SIGNPOST_INTERVAL_BEGIN,  v134,  "VNBarcodeObservation_archive",  (const char *)&unk_100199097,  buf,  2u);
        }

        v139 = (void *)objc_claimAutoreleasedReturnValue([v52 results]);
        v182 = v64;
        v140 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v139,  1LL,  &v182));
        v141 = v182;

        __int128 v64 = v141;
        [v8 setMrcData:v140];

        v143 = VCPSignPostLog(v142);
        v144 = (os_log_s *)objc_claimAutoreleasedReturnValue(v143);
        v145 = v144;
        if (v134 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v144))
        {
          *(_WORD *)__int128 buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v145,  OS_SIGNPOST_INTERVAL_END,  v134,  "VNBarcodeObservation_archive",  (const char *)&unk_100199097,  buf,  2u);
        }

        v146 = (void *)objc_claimAutoreleasedReturnValue([v8 mrcData]);
        v147 = v146 == 0LL;

        if (v147)
        {
          v169 = MediaAnalysisLogLevel(v148, v149);
          if ((int)v169 >= 6)
          {
            v171 = VCPLogInstance(v169, v170);
            v172 = (os_log_s *)objc_claimAutoreleasedReturnValue(v171);
            v173 = VCPLogToOSLogType[6];
            if (os_log_type_enabled(v172, v173))
            {
              v174 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
              v175 = (void *)objc_claimAutoreleasedReturnValue([v174 localIdentifier]);
              *(_DWORD *)__int128 buf = 138412290;
              v186 = v175;
              _os_log_impl( (void *)&_mh_execute_header,  v172,  v173,  "[OCR][Process][%@] Failed to archive MRC results",  buf,  0xCu);
            }
          }

          objc_msgSend(v8, "setStatus:", 4294967278, v176);
          goto LABEL_97;
        }

        v150 = 1;
        goto LABEL_83;
      }

      v151 = MediaAnalysisLogLevel(v130, v131);
      if ((int)v151 >= 6)
      {
        v153 = VCPLogInstance(v151, v152);
        v154 = (os_log_s *)objc_claimAutoreleasedReturnValue(v153);
        v155 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v154, v155))
        {
          v156 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
          v157 = (void *)objc_claimAutoreleasedReturnValue([v156 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          v186 = v157;
          _os_log_impl( (void *)&_mh_execute_header,  v154,  v155,  "[OCR][Process][%@] No MRC detected; skipping archive/persistence",
            buf,
            0xCu);
        }
      }
    }

    v150 = 0;
LABEL_83:
    v158 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "downloadURL", v176));
    v159 = v158 == 0LL;

    if (!v159)
    {
      v160 = (void *)objc_claimAutoreleasedReturnValue([v8 downloadURL]);
      +[PHAssetResourceManager vcp_flushResourceURL:]( &OBJC_CLASS___PHAssetResourceManager,  "vcp_flushResourceURL:",  v160);

      [v8 setDownloadURL:0];
    }

    v161 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
    v162 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v161, "vcp_passedOCRGating"));

    v163 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
    v164 = [v162 BOOLValue];
    if (v177) {
      v165 = 1;
    }
    else {
      v165 = v150;
    }
    v166 = v165 == 0;
    if (v165) {
      v167 = &VCPAnalyticsFieldNumberOfAssetsPassGateWithText;
    }
    else {
      v167 = &VCPAnalyticsFieldNumberOfAssetsPassGateWithoutText;
    }
    v168 = &VCPAnalyticsFieldNumberOfAssetsNotPassGateWithText;
    if (v166) {
      v168 = &VCPAnalyticsFieldNumberOfAssetsNotPassGateWithoutText;
    }
    if (!v164) {
      v167 = v168;
    }
    [v163 accumulateInt64Value:1 forField:*v167 andEvent:@"com.apple.mediaanalysisd.OCRAnalysisRunSession"];

    goto LABEL_97;
  }

  uint64_t v25 = MediaAnalysisLogLevel(v23, v24);
  if ((int)v25 >= 5)
  {
    __int128 v27 = VCPLogInstance(v25, v26);
    int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    uint64_t v29 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v28, v29))
    {
      __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
      __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 localIdentifier]);
      *(_DWORD *)__int128 buf = 138412290;
      v186 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "[OCR][Process][%@] Processing canceled; skipping asset",
        buf,
        0xCu);
    }
  }

  [v8 setStatus:4294967168];
LABEL_100:
}

        goto LABEL_32;
      }

      uint64_t v47 = objc_opt_class(&OBJC_CLASS___MADFaceDetectionImageRequest);
      if ((objc_opt_isKindOfClass(v30, v47) & 1) != 0)
      {
        uint64_t v46 = objc_claimAutoreleasedReturnValue( -[MADComputeServiceProcessingTask _prepareFaceAssetProcessingTask]( self,  "_prepareFaceAssetProcessingTask"));
        v195 = (id)v46;
        if (v46)
        {
LABEL_38:
          [v200 addObject:v46];
          goto LABEL_99;
        }

        if (!-[NSArray count](self->_localIdentifiers, "count")) {
          goto LABEL_99;
        }
        v211 = NSLocalizedDescriptionKey;
        v190 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ Failed to issue request",  v32));
        v212 = v190;
        uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v212,  &v211,  1LL));
        v192 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v84));

        __int128 v87 = MediaAnalysisLogLevel(v85, v86);
        if ((int)v87 >= 3)
        {
          __int128 v89 = VCPLogInstance(v87, v88);
          uint64_t v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
          if (os_log_type_enabled(v90, v196))
          {
            *(_DWORD *)__int128 buf = 138412290;
            v216 = (uint64_t)v192;
            _os_log_impl((void *)&_mh_execute_header, v90, v196, "%@", buf, 0xCu);
          }
        }

void sub_100075CDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10007685C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

id sub_100076A10(uint64_t a1)
{
  return [*(id *)(a1 + 32) processAssetEntry:*(void *)(a1 + 40) resource:*(void *)(a1 + 48) resourceURL:*(void *)(a1 + 56)];
}

LABEL_86:
LABEL_87:
  return (int)p_superclass;
}

      goto LABEL_26;
    }

    -[os_log_s stop](v37, "stop");
    uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
    -[os_log_s elapsedTimeSeconds](v37, "elapsedTimeSeconds");
    objc_msgSend( v80,  "accumulateDoubleValue:forField:andEvent:",  @"FaceClusteringElapsedTimeInSeconds",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");

    [v31 accumulateInt64Value:1 forField:@"NumberOfClusterEvents" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
    if ([*(id *)(*(void *)(a1 + 40) + 32) clustererState] == (id)30) {
      goto LABEL_64;
    }
    if ([*(id *)(a1 + 40) isCancelled])
    {
      uint64_t v33 = -128;
      goto LABEL_26;
    }

    uint64_t v81 = [*(id *)(*(void *)(a1 + 40) + 152) countOfDirtyFaceGroups];
    if (!v81)
    {
LABEL_64:
      uint64_t v33 = 0;
      goto LABEL_26;
    }

    uint64_t v83 = MediaAnalysisLogLevel(v81, v82);
    if ((int)v83 >= 7)
    {
      id v85 = VCPLogInstance(v83, v84);
      __int128 v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
      os_log_type_t type = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v86, type))
      {
        __int128 v87 = [*(id *)(*(void *)(a1 + 40) + 152) countOfDirtyFaceGroups];
        *(_DWORD *)__int128 buf = 138412546;
        v113 = @"[PublishDetectionAndProcessPerson]";
        v114 = 2048;
        v115 = v87;
        _os_log_impl((void *)&_mh_execute_header, v86, type, "%@ countOfDirtyFaceGroups: %lu", buf, 0x16u);
      }
    }

    typea = objc_alloc_init(&OBJC_CLASS___VCPTimeMeasurement);
    -[VCPTimeMeasurement start](typea, "start");
    __int128 v88 = VCPBuildPersons( *(void *)(*(void *)(a1 + 40) + 152LL),  *(void *)(*(void *)(a1 + 40) + 32LL),  *(void *)(*(void *)(a1 + 40) + 8LL),  &stru_1001BCCC8,  v28);
    uint64_t v33 = v88;
    if ((_DWORD)v88)
    {
      uint64_t v90 = MediaAnalysisLogLevel(v88, v89);
      if ((int)v90 >= 3)
      {
        id v92 = VCPLogInstance(v90, v91);
        uint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
        v94 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v93, v94))
        {
          *(_DWORD *)__int128 buf = 138412546;
          v113 = @"[PublishDetectionAndProcessPerson]";
          v114 = 1024;
          LODWORD(v115) = 0;
          _os_log_impl((void *)&_mh_execute_header, v93, v94, "%@ Failed to build person (%d)", buf, 0x12u);
        }

void sub_100077408( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
}

void sub_1000775B4(uint64_t a1)
{
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 56LL);
  id v1 = [obj countByEnumeratingWithState:&v32 objects:v38 count:16];
  if (v1)
  {
    uint64_t v31 = *(void *)v33;
    int v29 = VCPPhotosOCRProcessingFromGatingVersion;
    os_log_type_t type = VCPLogToOSLogType[6];
    *(void *)&__int128 v2 = 138412290LL;
    __int128 v27 = v2;
    do
    {
      for (unint64_t i = 0LL; i != v1; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v33 != v31) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
        id v5 = objc_autoreleasePoolPush();
        if (![v4 status])
        {
          id v6 = [v4 isAnalysisCompleteFromComputeSync];
          if ((_DWORD)v6)
          {
            uint64_t v8 = MediaAnalysisLogLevel(v6, v7);
            uint64_t v10 = VCPLogInstance(v8, v9);
            id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
            if (os_log_type_enabled(v11, type))
            {
              uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v4 asset]);
              uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 localIdentifier]);
              *(_DWORD *)__int128 buf = v27;
              unsigned int v37 = v13;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  type,  "   [%@] Analysis already complete from compute sync ingestion; skip publishing",
                buf,
                0xCu);
            }

            goto LABEL_18;
          }

          if ([v4 version] != v29
            || (uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v4 asset]),
                uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 characterRecognitionProperties]),
                BOOL v16 = [v15 algorithmVersion] == 0,
                v15,
                v14,
                v16))
          {
            os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "asset", v27));
            id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[PHAssetChangeRequest changeRequestForAsset:]( &OBJC_CLASS___PHAssetChangeRequest,  "changeRequestForAsset:",  v17));

            __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v4 ocrData]);
            __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v4 mrcData]);
            signed int v20 = [v4 version];
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v4 asset]);
            uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 adjustmentVersion]);
            -[os_log_s setCharacterRecognitionData:machineReadableCodeData:algorithmVersion:adjustmentVersion:]( v11,  "setCharacterRecognitionData:machineReadableCodeData:algorithmVersion:adjustmentVersion:",  v18,  v19,  v20,  v22);

            uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([v4 asset]);
            LODWORD(v21) = objc_msgSend(v23, "mad_isEligibleForComputeSync");

            if ((_DWORD)v21)
            {
              os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue([v4 asset]);
              uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "mad_refetchAsset"));

              if (v25)
              {
                -[os_log_s setLocalAnalysisStage:]( v11,  "setLocalAnalysisStage:",  objc_msgSend(v25, "mad_analysisStageAfterCompletingAnalysis:", 10));
              }

              else
              {
                uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v4 asset]);
                -[os_log_s setLocalAnalysisStage:]( v11,  "setLocalAnalysisStage:",  objc_msgSend(v26, "mad_analysisStageAfterCompletingAnalysis:", 10));
              }
            }

void sub_100077908( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_1000779E0(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_100077A1C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100077CE8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
}

void sub_100077D14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 6)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MADEmbeddingStoreClientHandler] XPC connection interrupted",  v10,  2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v9 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained cancelAllRequests];
  }
}

void sub_100077DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MADEmbeddingStoreClientHandler] XPC connection invalidated",  v12,  2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v9 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained cancelAllRequests];
    uint64_t v10 = (void *)v9[1];
    v9[1] = 0LL;

    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[VCPClientManager sharedManager](&OBJC_CLASS___VCPClientManager, "sharedManager"));
    [v11 removeClientHandler:v9];
  }
}

void sub_100078870(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  __int128 v2 = (void *)qword_1001E6500;
  qword_1001E6500 = (uint64_t)v1;
}

uint64_t sub_100078A7C(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  [a3 code]);
}

void sub_1000791BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100079230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100079384( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPPhotosCaptureProcessingTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100079620(_Unwind_Exception *a1)
{
}

void sub_1000796A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100079894( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100079908(uint64_t a1)
{
  uint64_t v24 = 0LL;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2020000000LL;
  uint64_t v27 = 0LL;
  uint64_t v20 = 0LL;
  uint64_t v21 = &v20;
  uint64_t v22 = 0x2020000000LL;
  uint64_t v23 = 0LL;
  __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v3 = *(void **)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  void v14[2] = sub_100079B10;
  v14[3] = &unk_1001BC060;
  __int128 v18 = &v24;
  __int128 v19 = &v20;
  id v4 = v2;
  id v15 = v4;
  id v16 = *(id *)(a1 + 40);
  id v17 = *(id *)(a1 + 48);
  id v5 = [v3 enumerateKeysAndObjectsUsingBlock:v14];
  uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
  if ((int)v7 >= 7)
  {
    uint64_t v9 = VCPLogInstance(v7, v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    os_log_type_t v11 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = v25[3];
      uint64_t v13 = v21[3];
      *(_DWORD *)__int128 buf = 134218240;
      uint64_t v29 = v12;
      __int16 v30 = 2048;
      uint64_t v31 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[PhotosCapture] Persisted %lu faces (%lu identified)",  buf,  0x16u);
    }
  }

  _Block_object_dispose(&v20, 8);
  _Block_object_dispose(&v24, 8);
}

void sub_100079AB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, uint64_t a10, uint64_t a11, ...)
{
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v12 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100079B10(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  context = objc_autoreleasePoolPush();
  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue( +[PHAssetChangeRequest changeRequestForAsset:]( &OBJC_CLASS___PHAssetChangeRequest,  "changeRequestForAsset:",  a2,  v5));
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  id obj = v5;
  id v6 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v34;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v34 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)v8);
        ++*(void *)(*(void *)(a1[7] + 8LL) + 24LL);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 personLocalIdentifier]);
        BOOL v11 = v10 == 0LL;

        if (v11)
        {
          uint64_t v14 = 0LL;
        }

        else
        {
          ++*(void *)(*(void *)(a1[8] + 8LL) + 24LL);
          uint64_t v12 = (void *)a1[4];
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 personLocalIdentifier]);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v13]);

          if (!v14)
          {
            id v15 = (void *)a1[5];
            id v16 = (void *)objc_claimAutoreleasedReturnValue([v9 personLocalIdentifier]);
            id v17 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v16]);

            if (v17)
            {
              uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[PHPersonChangeRequest changeRequestForPerson:]( &OBJC_CLASS___PHPersonChangeRequest,  "changeRequestForPerson:",  v17));
              __int128 v18 = (void *)a1[4];
              __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v9 personLocalIdentifier]);
              [v18 setObject:v14 forKeyedSubscript:v19];
            }

            else
            {
              uint64_t v14 = 0LL;
            }
          }
        }

        uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v9 localIdentifier]);
        BOOL v21 = v20 == 0LL;

        if (v21)
        {
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[PHFaceChangeRequest creationRequestForFace]( &OBJC_CLASS___PHFaceChangeRequest,  "creationRequestForFace"));
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 placeholderForCreatedFace]);
          +[VCPFaceUtils assignPropertiesOfVCPPhotosFace:toPHFaceChangeRequest:]( &OBJC_CLASS___VCPFaceUtils,  "assignPropertiesOfVCPPhotosFace:toPHFaceChangeRequest:",  v9,  v24);
          [v24 setNameSource:6];
          __int16 v38 = v25;
          int v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v38,  1LL));
          [v31 addFaces:v28];

          if (!v14) {
            goto LABEL_19;
          }
          unsigned int v37 = v25;
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v37,  1LL));
          [v14 addFaces:v26];
        }

        else
        {
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v9 localIdentifier]);
          uint64_t v40 = v22;
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v40,  1LL));
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesWithLocalIdentifiers:options:]( &OBJC_CLASS___PHFace,  "fetchFacesWithLocalIdentifiers:options:",  v23,  a1[6]));

          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v24 firstObject]);
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[PHFaceChangeRequest changeRequestForFace:]( &OBJC_CLASS___PHFaceChangeRequest,  "changeRequestForFace:",  v25));
          +[VCPFaceUtils assignPropertiesOfVCPPhotosFace:toPHFaceChangeRequest:]( &OBJC_CLASS___VCPFaceUtils,  "assignPropertiesOfVCPPhotosFace:toPHFaceChangeRequest:",  v9,  v26);
          [v26 setNameSource:6];
          if (v14)
          {
            __int16 v39 = v25;
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v39,  1LL));
            [v14 addFaces:v27];
          }
        }

LABEL_19:
        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
    }

    while (v6);
  }

  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset quickClassificationFaceAdjustmentVersion]( &OBJC_CLASS___PHAsset,  "quickClassificationFaceAdjustmentVersion"));
  [v31 setFaceAdjustmentVersion:v29];

  objc_autoreleasePoolPop(context);
}

void sub_100079F1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

LABEL_15:
      __int128 v19 = v54;
      if (v32) {
        goto LABEL_34;
      }
    }

    else
    {
      __int128 v34 = 0LL;
      while (2)
      {
        __int128 v33 = [v8 count];
        if (v34 < (unint64_t)v33)
        {
          __int128 v35 = objc_autoreleasePoolPush();
          __int128 v36 = atomic_load((unsigned __int8 *)&self->_interrupt);
          if ((v36 & 1) != 0 || (unsigned int v37 = atomic_load((unsigned __int8 *)&self->_cancel), (v37 & 1) != 0) && v5)
          {
            __int16 v38 = 3;
          }

          else
          {
            __int16 v39 = (void *)objc_claimAutoreleasedReturnValue([v8 objectAtIndexedSubscript:v34]);
            if (-[VCPPhotosCaptureProcessingTask isAssetEligible:](self, "isAssetEligible:", v39))
            {
              ((void (*)(void *, void *, BOOL))v60[2])(v60, v39, v5);
              __int16 v38 = 0;
            }

            else
            {
              __int16 v38 = 7;
            }
          }

          objc_autoreleasePoolPop(v35);
          switch(v38)
          {
            case 0:
            case 7:
              ++v34;
              continue;
            case 3:
              goto LABEL_34;
            case 6:
              goto LABEL_29;
            default:
              goto LABEL_35;
          }

          goto LABEL_35;
        }

        break;
      }
    }
    }
  }
}
    }
  }
}

          int v28 = 0;
LABEL_16:

          goto LABEL_17;
        }
      }

      else
      {
      }
    }

    uint64_t v29 = MediaAnalysisLogLevel(v11, v12);
    if ((int)v29 >= 5)
    {
      uint64_t v31 = VCPLogInstance(v29, v30);
      __int128 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
      __int128 v33 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v32, v33))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Initialize background analysis metric", buf, 2u);
      }
    }

    -[VCPDataCollectionTask resetBackgroundAnalysisMetrics](self, "resetBackgroundAnalysisMetrics");
    goto LABEL_15;
  }

  int v28 = 0;
LABEL_17:

  return v28;
}
  }

  uint64_t v31 = objc_msgSend(*(id *)(a1 + 48), "isCancelled", v33);

  return v31 ^ 1;
}

    LOBYTE(v131) = 0;
    goto LABEL_16;
  }

  BOOL v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[VCPTask cancel](self, "cancel"));
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[VCPDownloadManager sharedManager](&OBJC_CLASS___VCPDownloadManager, "sharedManager"));
  [v22 setCancel:v21];

LABEL_14:
LABEL_16:
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
  v136 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:",  v27));

  v140 = 0LL;
  int v28 = [v136 getBlacklistedAssetsWithCount:1 localIdentifiers:&v140];
  v133 = v140;
  if (v28 != -108 && v28 != -36 && v28 != -23)
  {
    v124 = v28;
    uint64_t v29 = [v133 count];
    if (v29)
    {
      uint64_t v31 = MediaAnalysisLogLevel(v29, v30);
      if ((int)v31 >= 5)
      {
        __int128 v33 = VCPLogInstance(v31, v32);
        __int128 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        __int128 v35 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v34, v35))
        {
          __int128 v36 = [v133 count];
          *(_DWORD *)__int128 buf = 67109120;
          LODWORD(v142) = v36;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Revisiting %d failed assets", buf, 8u);
        }
      }

      unsigned int v37 = [v133 count];
      __int16 v38 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask progressHandler](self, "progressHandler"));
      v128 = (void *)objc_claimAutoreleasedReturnValue( +[VCPProgressReporter reporterWithIntervalSeconds:andTotalJobCount:andBlock:]( &OBJC_CLASS___VCPProgressReporter,  "reporterWithIntervalSeconds:andTotalJobCount:andBlock:",  10LL,  v37,  v38));

      __int16 v39 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
      v127 = (void *)objc_claimAutoreleasedReturnValue( +[VCPPhotosAssetChangeManager managerForPhotoLibrary:]( &OBJC_CLASS___VCPPhotosAssetChangeManager,  "managerForPhotoLibrary:",  v39));

      if (v127)
      {
        __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
        v126 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset vcp_fetchOptionsForLibrary:forTaskID:]( &OBJC_CLASS___PHAsset,  "vcp_fetchOptionsForLibrary:forTaskID:",  v42,  1LL));

        SEL v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"creationDate",  0LL));
        v147 = v43;
        uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v147, 1LL));
        [v126 setSortDescriptors:v44];

        v135 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset fetchAssetsWithLocalIdentifiers:options:]( &OBJC_CLASS___PHAsset,  "fetchAssetsWithLocalIdentifiers:options:",  v133,  v126));
        uint64_t v45 = 0LL;
        v130 = 0;
        v122 = VCPLogToOSLogType[7];
        os_log_type_t type = VCPLogToOSLogType[5];
        *(void *)&uint64_t v46 = 138412290LL;
        v121 = v46;
        while (1)
        {
          if (v45 >= (unint64_t)objc_msgSend(v135, "count", v121))
          {
LABEL_99:
            v109 = [v136 commit];
            if (v109 == -108 || v109 == -36)
            {
              int v28 = v109;
            }

            else
            {
              int v28 = v109;
              if (v109 != -23) {
                int v28 = v124;
              }
            }

            if (v109 != -108 && v109 != -36 && v109 != -23)
            {
              v110 = (void *)objc_claimAutoreleasedReturnValue(+[VCPDownloadManager sharedManager](&OBJC_CLASS___VCPDownloadManager, "sharedManager"));
              [v110 flush];

              v111 = [v127 publishPendingChanges];
              if ((_DWORD)v111)
              {
                v111 = (id)MediaAnalysisLogLevel(v111, v112);
                if ((int)v111 >= 4)
                {
                  v114 = VCPLogInstance(v111, v113);
                  v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
                  v116 = VCPLogToOSLogType[4];
                  if (os_log_type_enabled(v115, v116))
                  {
                    *(_WORD *)__int128 buf = 0;
                    _os_log_impl( (void *)&_mh_execute_header,  v115,  v116,  "Failed to publish PHAssetPropertySetMediaAnalysis changes",  buf,  2u);
                  }
                }
              }

              v117 = VCPSignPostLog(v111);
              v118 = (os_log_s *)objc_claimAutoreleasedReturnValue(v117);
              v119 = v118;
              if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v118))
              {
                *(_WORD *)__int128 buf = 0;
                _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v119,  OS_SIGNPOST_INTERVAL_END,  spid,  "VCPFailedAssetAnalysisTask",  (const char *)&unk_100199097,  buf,  2u);
              }

              int v28 = v130;
            }

            v107 = (os_log_s *)v126;
            goto LABEL_117;
          }

          uint64_t v47 = objc_autoreleasePoolPush();
          uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v135 objectAtIndexedSubscript:v45]);
          if (-[VCPTask isCancelled](self, "isCancelled"))
          {
            v130 = -128;
            __int128 v49 = 21;
            goto LABEL_66;
          }

          os_log_type_t v50 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
          [v50 pet];

          v134 = (void *)objc_claimAutoreleasedReturnValue( +[PHAssetResource vcp_allAcceptableResourcesForAsset:]( &OBJC_CLASS___PHAssetResource,  "vcp_allAcceptableResourcesForAsset:",  v48));
          __int128 v51 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
          if (![v51 isCloudPhotoLibraryEnabled])
          {
LABEL_39:

LABEL_40:
            uint64_t v57 = 0;
LABEL_41:
            [v128 increaseProcessedJobCountByOne];
            location = 0LL;
            uint64_t v58 = v57 ^ 1u;
            id v59 = -[VCPBackgroundAnalysisTask missingAnalysisForAsset:existingAnalysis:resources:forLocalResourcesOnly:]( self,  "missingAnalysisForAsset:existingAnalysis:resources:forLocalResourcesOnly:",  v48,  &location,  v134,  v58);
            uint64_t v60 = v59;
            if (v59)
            {
              v125 = v57;
              id v61 = VCPSignPostLog(v59);
              uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
              id v63 = os_signpost_id_generate(v62);

              os_log_type_t v65 = VCPSignPostLog(v64);
              int v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
              id v67 = v66;
              if (v63 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v66))
              {
                *(_WORD *)__int128 buf = 0;
                _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v67,  OS_SIGNPOST_INTERVAL_BEGIN,  v63,  "VCPFailedAssetAnalysisTask_UnpackComputeSync",  (const char *)&unk_100199097,  buf,  2u);
              }

              v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v134, "mad_computeSyncResource"));
              __int128 v68 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask cancel](self, "cancel"));
              __int128 v69 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v129,  "mad_existingAnalysisFromComputeSyncForAsset:allowDownload:cancel:",  v48,  0,  v68));

              __int128 v71 = VCPSignPostLog(v70);
              uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
              uint64_t v73 = v72;
              if (v63 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v72))
              {
                *(_WORD *)__int128 buf = 0;
                _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v73,  OS_SIGNPOST_INTERVAL_END,  v63,  "VCPFailedAssetAnalysisTask_UnpackComputeSync",  (const char *)&unk_100199097,  buf,  2u);
              }

              if (v69)
              {
                objc_storeStrong(&location, v69);
                uint64_t v60 = -[VCPBackgroundAnalysisTask missingAnalysisForAsset:withExistingComputeSyncAnalysis:resources:forLocalResourcesOnly:]( self,  "missingAnalysisForAsset:withExistingComputeSyncAnalysis:resources:forLocalResourcesOnly:",  v48,  &location,  v134,  v58);
                uint64_t v75 = MediaAnalysisLogLevel(v60, v74);
                if ((int)v75 >= 5)
                {
                  int v77 = VCPLogInstance(v75, v76);
                  __int16 v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
                  if (os_log_type_enabled(v78, type))
                  {
                    uint64_t v79 = (void *)objc_claimAutoreleasedReturnValue([v48 localIdentifier]);
                    uint64_t v80 = MediaAnalysisTypeShortDescription(objc_msgSend(location, "vcp_types"));
                    uint64_t v81 = (id)objc_claimAutoreleasedReturnValue(v80);
                    v82 = MediaAnalysisTypeShortDescription(v60);
                    uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
                    *(_DWORD *)__int128 buf = 138412802;
                    v142 = v79;
                    v143 = 2112;
                    v144 = v81;
                    v145 = 2112;
                    v146 = v83;
                    _os_log_impl( (void *)&_mh_execute_header,  v78,  type,  "[%@] Reusing analysis results from compute sync (existing: %@, missing: %@)",  buf,  0x20u);
                  }
                }
              }

              uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue([v48 localIdentifier]);
              id v85 = [v136 addAssetToBlacklist:v84];

              __int128 v49 = 21;
              if (v85 == -108 || v85 == -36)
              {
                __int128 v86 = v85;
              }

              else
              {
                __int128 v86 = v85;
                if (v85 != -23)
                {
                  __int128 v49 = 0;
                  __int128 v86 = v130;
                }
              }

              if (v85 == -108 || v85 == -36 || v85 == -23)
              {
                v130 = v86;
              }

              else
              {
                __int128 v87 = [v136 commit];
                __int128 v49 = 21;
                if (v87 == -108 || v87 == -36)
                {
                  v130 = v87;
                }

                else
                {
                  v130 = v87;
                  if (v87 != -23)
                  {
                    __int128 v49 = 0;
                    v130 = v86;
                  }
                }

                if (v87 != -108 && v87 != -36 && v87 != -23)
                {
                  __int128 v88 = (void *)objc_claimAutoreleasedReturnValue( +[VCPAssetAnalysisTask taskWithAnalysisTypes:forAsset:withExistingAnalysis:]( &OBJC_CLASS___VCPAssetAnalysisTask,  "taskWithAnalysisTypes:forAsset:withExistingAnalysis:",  v60,  v48,  location));
                  [v88 setPhotosChangeManager:v127];
                  [v88 setAllowStreaming:v125];
                  __int128 v89 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask cancel](self, "cancel"));
                  [v88 setCancel:v89];

                  uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADQoSManager sharedManager](&OBJC_CLASS___VCPMADQoSManager, "sharedManager"));
                  v137[0] = _NSConcreteStackBlock;
                  v137[1] = 3221225472LL;
                  v137[2] = sub_1000C4C24;
                  v137[3] = &unk_1001BA0C8;
                  id v91 = v88;
                  v138 = v91;
                  [v90 runBlock:v137 withTaskID:1];

                  id v92 = [v91 error];
                  if (v92) {
                    __int128 v49 = 21;
                  }
                  else {
                    __int128 v49 = 0;
                  }
                  uint64_t v93 = v130;
                  if (v92) {
                    uint64_t v93 = v92;
                  }
                  v130 = v93;
                }
              }
            }

            else
            {
              __int128 v49 = 18;
            }

            goto LABEL_65;
          }

          if (objc_msgSend(v48, "vcp_isLivePhoto"))
          {
          }

          else
          {
            if (![v48 isVideo]
              || (objc_msgSend(v48, "vcp_isVideoSlowmo") & 1) != 0)
            {
              goto LABEL_39;
            }

            uint64_t v99 = objc_msgSend(v48, "vcp_isLongMovie");

            if ((v99 & 1) != 0) {
              goto LABEL_40;
            }
          }

          uint64_t v52 = objc_msgSend(v48, "vcp_fullAnalysisTypes");
          id v53 = objc_msgSend(v48, "vcp_fullAnalysisTypesForResources:", v134);
          if (v53 == v52) {
            goto LABEL_40;
          }
          if ((v131 & 1) != 0)
          {
            if (!objc_msgSend(v48, "vcp_isLivePhoto")
              || (uint64_t v55 = objc_msgSend(v134, "vcp_hasLocalPhoto:", objc_msgSend(v48, "hasAdjustments")),
                  (v55 & 1) != 0))
            {
              uint64_t v57 = 1;
              goto LABEL_41;
            }

            v100 = MediaAnalysisLogLevel(v55, v56);
            if ((int)v100 >= 7)
            {
              v102 = VCPLogInstance(v100, v101);
              uint64_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
              if (os_log_type_enabled(v97, v122))
              {
                v103 = (void *)objc_claimAutoreleasedReturnValue([v48 localIdentifier]);
                *(_DWORD *)__int128 buf = v121;
                v142 = v103;
                _os_log_impl( (void *)&_mh_execute_header,  v97,  v122,  "[%@] Live Photo has no local image; skipping",
                  buf,
                  0xCu);
              }
    }
  }
          }
        }
  }

  uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "cancelBlock", v36));
  if (v31)
  {
    __int128 v32 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cancelBlock]);
    __int128 v33 = v32[2]();

    __int128 v34 = v33 ^ 1u;
  }

  else
  {
    __int128 v34 = 1LL;
  }

  return v34;
}
}

          goto LABEL_31;
        }

        if (v17 == (id)1 && ![v9 valueForKey:v53])
        {
          __int128 v33 = objc_autoreleasePoolPush();
          id v67 = v55;
          __int128 v34 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v67,  1LL));
          __int128 v35 = (void *)objc_claimAutoreleasedReturnValue( +[VCPPhotosMaintenanceProcessingTask taskWithPhotoLibraries:andProgressHandler:andCompletionHandler:andCancelBlock:]( &OBJC_CLASS___VCPPhotosMaintenanceProcessingTask,  "taskWithPhotoLibraries:andProgressHandler:andCompletionHandler:andCancelBlock:",  v34,  0LL,  0LL,  v54));

          __int128 v36 = [v35 performForceClusterIfNeededWithPhotoLibrary:v55];
          if ((_DWORD)v36)
          {
            __int16 v38 = MediaAnalysisLogLevel(v36, v37);
            if ((int)v38 >= 3)
            {
              uint64_t v40 = VCPLogInstance(v38, v39);
              __int128 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
              if (os_log_type_enabled(v41, v49))
              {
                *(_WORD *)__int128 buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v41,  v49,  "[MADProgressManager] Failed to cluster as needed",  buf,  2u);
              }
            }
          }

          objc_autoreleasePoolPop(v33);
        }

        if ([v9 keyExistsInKeyValueStore:v23]
          && (__int128 v42 = [v9 valueForKey:v23], v44 = v57 - (void)v42, v57 - (uint64_t)v42 <= 14399))
        {
          uint64_t v45 = MediaAnalysisLogLevel(v42, v43);
          if ((int)v45 >= 6)
          {
            uint64_t v47 = VCPLogInstance(v45, v46);
            int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
            if (os_log_type_enabled(v28, v50))
            {
              *(_DWORD *)__int128 buf = 67109376;
              __int128 v64 = (int)v17;
              os_log_type_t v65 = 2048;
              int v66 = v44;
              uint64_t v29 = v28;
              __int16 v30 = v50;
              uint64_t v31 = "[MADProgressManager] Skipping progress report request for task %d, last report was %lld seconds ago";
              __int128 v32 = 18;
LABEL_14:
              _os_log_impl((void *)&_mh_execute_header, v29, v30, v31, buf, v32);
            }

            goto LABEL_15;
          }
        }

        else
        {
          [v9 setValue:v57 forKey:v23];
          [v9 commit];
          if ([v9 valueForKey:v19]) {
            [a1 updateProgressForTask:v17 photoLibrary:v55 reuseCachedValue:0 cancelOrExtendTimeoutBlock:v54];
          }
        }

    v2->_recommendedState = 5LL;
    v28[0] = @"FullyCharged";
    v28[1] = @"IsCharging";
    v29[0] = &off_1001C87F8;
    v29[1] = &off_1001C87F8;
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  2LL));
    return v12;
  }

  if (HIBYTE(v22))
  {
    uint64_t v14 = 1LL;
  }

  else
  {
    id v15 = MediaAnalysisLogLevel(self, a2);
    if ((int)v15 >= 5)
    {
      id v17 = VCPLogInstance(v15, v16);
      __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      __int128 v19 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v18, v19))
      {
        *(_DWORD *)__int128 buf = 67109120;
        uint64_t v27 = v23;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Device is not fully charged (Battery %d%%)", buf, 8u);
      }
    }

    v2->_recommendedState = 5LL;
    uint64_t v14 = HIBYTE(v22);
  }

  v24[0] = @"FullyCharged";
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v14));
  v24[1] = @"IsCharging";
  v25[0] = v20;
  BOOL v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v22));
  v25[1] = v21;
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v25,  v24,  2LL));

  return v12;
}

    goto LABEL_17;
  }

LABEL_16:
      uint64_t v47 = v12;
      goto LABEL_17;
    }
  }

  if (objc_msgSend(v9, "vcp_isSyndicationLibrary"))
  {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[PHPhotoLibrary vcp_defaultPhotoLibrary](&OBJC_CLASS___PHPhotoLibrary, "vcp_defaultPhotoLibrary"));
    int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "vcp_visionCacheStorageDirectoryURL"));

    uint64_t v29 = [sub_100125AF0() syndication];
  }

  else
  {
    int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "vcp_visionCacheStorageDirectoryURL"));
    uint64_t v29 = [sub_100125AF0() photos];
  }

  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(v29);
  __int128 v69 = 0LL;
  __int128 v70 = &v69;
  __int128 v71 = 0x2050000000LL;
  __int128 v35 = (void *)qword_1001E6760;
  uint64_t v72 = qword_1001E6760;
  if (!qword_1001E6760)
  {
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_100126BB8;
    uint64_t v74 = &unk_1001BDF88;
    uint64_t v75 = &v69;
    sub_100126BB8((uint64_t)buf);
    __int128 v35 = (void *)v70[3];
  }

  __int128 v36 = v35;
  _Block_object_dispose(&v69, 8);
  id v67 = 0LL;
  unsigned int v37 = (GDVUVisualUnderstandingService *)[[v36 alloc] initWithClient:v34 version:1 url:v28 error:&v67];
  __int16 v38 = v67;
  vuService = v12->_vuService;
  v12->_vuService = v37;

  if (v12->_vuService)
  {
    if (!-[VCPPhotosFaceProcessingContext skipGallerySyncing](v12->_context, "skipGallerySyncing"))
    {
      __int128 v42 = objc_alloc_init(&OBJC_CLASS___VCPTimeMeasurement);
      -[VCPTimeMeasurement start](v42, "start");
      SEL v43 = qos_class_self();
      global_queue = dispatch_get_global_queue(v43, 0LL);
      uint64_t v45 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100125BA4;
      block[3] = &unk_1001BE0D0;
      id v63 = v12;
      __int128 v64 = v9;
      os_log_type_t v65 = v42;
      int v66 = v10;
      uint64_t v46 = v42;
      dispatch_async(v45, block);
    }

    goto LABEL_15;
  }

  __int128 v49 = MediaAnalysisLogLevel(v40, v41);
  if ((int)v49 >= 3)
  {
    __int128 v51 = VCPLogInstance(v49, v50);
    uint64_t v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    id v53 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = v12->_logPrefix;
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v54;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "%@ Failed to create MADGDVisualUnderstandingService instance - %@",  buf,  0x16u);
    }
  }

  uint64_t v47 = 0LL;
LABEL_17:

  return v47;
}

  return v23;
}

void sub_10007A5A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_10007A674(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  id v11 = 0LL;
  id v12 = 0LL;
  unsigned int v7 = [v6 processAsset:v5 onDemandDetection:a3 detectedFaces:&v12 detectedPersons:&v11];
  id v8 = v12;
  id v9 = v11;
  if (!v7)
  {
    id v10 = *(id *)(a1 + 40);
    objc_sync_enter(v10);
    if ([v8 count])
    {
      if ((a3 & 1) == 0) {
        ++*(void *)(*(void *)(a1 + 40) + 72LL);
      }
      ++*(void *)(*(void *)(a1 + 40) + 56LL);
      ++*(void *)(*(void *)(a1 + 40) + 64LL);
      *(void *)(*(void *)(a1 + 40) + 80) += [v9 count];
      *(void *)(*(void *)(a1 + 40) + 88) += [v8 count];
      [*(id *)(a1 + 48) setObject:v8 forKeyedSubscript:v5];
      [*(id *)(a1 + 56) addEntriesFromDictionary:v9];
    }

    else if ((_DWORD)a3)
    {
      ++*(void *)(*(void *)(a1 + 40) + 56LL);
    }

    objc_sync_exit(v10);
  }
}

void sub_10007A7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007A7E8(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 26LL));
  if ((v2 & 1) == 0)
  {
    unsigned __int8 v5 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 25LL));
    if ((v5 & 1) == 0 || !*(_BYTE *)(a1 + 64))
    {
      id v6 = objc_autoreleasePoolPush();
      unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectAtIndexedSubscript:a2]);
      unsigned int v8 = objc_msgSend(v7, "vcp_isPano");
      id v9 = *(void **)(a1 + 32);
      if (v8)
      {
        id v10 = v9;
        objc_sync_enter(v10);
        [*(id *)(a1 + 48) addObject:v7];
        objc_sync_exit(v10);
      }

      else if ([v9 isAssetEligible:v7])
      {
        (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
      }

      objc_autoreleasePoolPop(v6);
    }
  }

void sub_10007A8C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007A8E8(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = VCPSignPostLog(v2);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  os_signpost_id_t v5 = os_signpost_id_generate(v4);

  uint64_t v7 = VCPSignPostLog(v6);
  unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  id v9 = v8;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_BEGIN,  v5,  "VCPJIT_Face_PersistBatch",  (const char *)&unk_100199097,  buf,  2u);
  }

  uint64_t v10 = VCPSignPostLog( [*(id *)(a1 + 32) _persistClassifiedFaces:*(void *)(a1 + 40) withDetectedPersons:*(void *)(a1 + 48)]);
  id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  id v12 = v11;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)uint64_t v14 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_INTERVAL_END,  v5,  "VCPJIT_Face_PersistBatch",  (const char *)&unk_100199097,  v14,  2u);
  }

  if (v2)
  {
    uint64_t v13 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPJIT_Face_PersistBatch", v13 - v2);
  }

LABEL_38:
}

            goto LABEL_39;
          }

          __int128 v64 = MediaAnalysisLogLevel(v37, v38);
          int v66 = VCPLogInstance(v64, v65);
          __int128 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v66);
          if (os_log_type_enabled(v42, v137))
          {
            id v67 = (os_log_s *)objc_claimAutoreleasedReturnValue([v32 requestID]);
            *(_DWORD *)__int128 buf = 138412546;
            v157 = v34;
            v158 = 2112;
            v159 = v67;
            _os_log_impl((void *)&_mh_execute_header, v42, v137, "%@ Mismatched requestID %@; skip", buf, 0x16u);
          }

      goto LABEL_39;
    }

    id v67 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[MADComputeServiceProcessingTask _partialAnalysisURL](self, "_partialAnalysisURL"));
    __int16 v39 = -[NSURL startAccessingSecurityScopedResource]( self->_resultDirectoryURL,  "startAccessingSecurityScopedResource");
    if (!v39)
    {
      uint64_t v57 = MediaAnalysisLogLevel(v39, v40);
      if ((int)v57 >= 3)
      {
        id v59 = VCPLogInstance(v57, v58);
        uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
        id v61 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v60, v61))
        {
          resultDirectoryURL = self->_resultDirectoryURL;
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v76 = v13;
          int v77 = 2112;
          __int16 v78 = *(double *)&resultDirectoryURL;
          _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "%@ Failed to start security scoped resource %@",  buf,  0x16u);
        }
      }

      goto LABEL_38;
    }

    __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s path](v67, "path"));
    SEL v43 = [v41 createFileAtPath:v42 contents:v36 attributes:v19];

    if (v43)
    {
      uint64_t v46 = MediaAnalysisLogLevel(v44, v45);
      if ((int)v46 >= 6)
      {
        uint64_t v48 = VCPLogInstance(v46, v47);
        __int128 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        os_log_type_t v50 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v49, v50))
        {
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v76 = v13;
          int v77 = 2112;
          __int16 v78 = *(double *)&v67;
          __int128 v51 = "%@ Save partial analysis to %@";
LABEL_35:
          _os_log_impl((void *)&_mh_execute_header, v49, v50, v51, buf, 0x16u);
          goto LABEL_36;
        }

        goto LABEL_36;
      }
    }

    else
    {
      id v63 = MediaAnalysisLogLevel(v44, v45);
      if ((int)v63 >= 3)
      {
        os_log_type_t v65 = VCPLogInstance(v63, v64);
        __int128 v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
        os_log_type_t v50 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v49, v50))
        {
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v76 = v13;
          int v77 = 2112;
          __int16 v78 = *(double *)&v67;
          __int128 v51 = "%@ Failed to save partial analysis to %@";
          goto LABEL_35;
        }

      if ((self->_subtasks & 0x80) != 0) {
        -[VCPFaceLibraryProcessingTask _processAutoCounterForPhotoLibrary:]( self,  "_processAutoCounterForPhotoLibrary:",  v6);
      }
      (*((void (**)(double))self->_progressHandler + 2))(100.0);
LABEL_41:
      id v9 = 0;
    }
  }

LABEL_43:
LABEL_44:

  return v9;
}

    id v16 = 0;
    goto LABEL_148;
  }

  v319 = 0;
  os_log_type_t type = VCPLogToOSLogType[6];
  v324 = VCPLogToOSLogType[7];
  v323 = PHFacePropertySetIdentifier;
  v322 = PHFacePropertySetCore;
  v320 = PHFacePropertySetPersonBuilder;
  v321 = PHFacePropertySetClustering;
  v318 = VCPLogToOSLogType[3];
  while (1)
  {
    uint64_t v72 = ((uint64_t (*)(void))v328[2])();
    if ((_DWORD)v72)
    {
      v202 = MediaAnalysisLogLevel(v72, v73);
      if ((int)v202 >= 6)
      {
        v204 = VCPLogInstance(v202, v203);
        v205 = (os_log_s *)objc_claimAutoreleasedReturnValue(v204);
        if (os_log_type_enabled(v205, type))
        {
          v206 = self->_logPrefix;
          *(_DWORD *)__int128 buf = 138412290;
          v341 = v206;
          _os_log_impl((void *)&_mh_execute_header, v205, type, "%@ Gallery processing canceled", buf, 0xCu);
        }
      }

      goto LABEL_203;
    }

    uint64_t v74 = -[PHPhotoLibrary countOfFaceCropsToBeGenerated](self->_photoLibrary, "countOfFaceCropsToBeGenerated");
    uint64_t v76 = MediaAnalysisLogLevel(v74, v75);
    if ((int)v76 >= 6)
    {
      __int16 v78 = VCPLogInstance(v76, v77);
      uint64_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
      if (os_log_type_enabled(v79, type))
      {
        uint64_t v80 = self->_logPrefix;
        *(_DWORD *)__int128 buf = 138412546;
        v341 = v80;
        v342 = 2048;
        v343 = (uint64_t)v74;
        _os_log_impl((void *)&_mh_execute_header, v79, type, "%@ Found %lu face crops to generate", buf, 0x16u);
      }
    }

    if (v74)
    {
      uint64_t v81 = mach_absolute_time();
      v82 = VCPSignPostLog(v81);
      uint64_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
      uint64_t v84 = os_signpost_id_generate(v83);

      __int128 v86 = VCPSignPostLog(v85);
      __int128 v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
      __int128 v88 = v87;
      if (v84 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v87))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v88,  OS_SIGNPOST_INTERVAL_BEGIN,  v84,  "MADPhotosPersonProcessingTaskGenerateFaceCrop",  (const char *)&unk_100199097,  buf,  2u);
      }

      __int128 v89 = objc_alloc_init(&OBJC_CLASS___MADPhotosFaceCropGenerationTask);
      uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(-[MADProcessingTask cancelBlock](self, "cancelBlock"));
      -[MADProcessingTask setCancelBlock:](v89, "setCancelBlock:", v90);

      id v91 = -[PHPhotoLibrary newFaceCropsToBeGeneratedFetchOptions]( self->_photoLibrary,  "newFaceCropsToBeGeneratedFetchOptions");
      id v92 = (void *)objc_claimAutoreleasedReturnValue(+[PHFace fetchFacesWithOptions:](&OBJC_CLASS___PHFace, "fetchFacesWithOptions:", v91));
      for (unint64_t i = 0; i < (unint64_t)[v92 count]; ++i)
      {
        v94 = objc_autoreleasePoolPush();
        v95 = (void *)objc_claimAutoreleasedReturnValue([v92 objectAtIndexedSubscript:i]);
        -[MADPhotosFaceCropGenerationTask addFace:](v89, "addFace:", v95);

        if (-[MADPhotosFaceCropGenerationTask count](v89, "count") >= 0x64)
        {
          -[MADPhotosFaceCropGenerationTask prepare](v89, "prepare");
          -[MADPhotosFaceCropGenerationTask process](v89, "process");
          -[MADAssetProcessingTask publish](v89, "publish");
          int8x16_t v96 = objc_alloc_init(&OBJC_CLASS___MADPhotosFaceCropGenerationTask);

          uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue(-[MADProcessingTask cancelBlock](self, "cancelBlock"));
          -[MADProcessingTask setCancelBlock:](v96, "setCancelBlock:", v97);

          __int128 v89 = v96;
        }

        objc_autoreleasePoolPop(v94);
      }

      v98 = -[MADPhotosFaceCropGenerationTask count](v89, "count");
      if (v98)
      {
        -[MADPhotosFaceCropGenerationTask prepare](v89, "prepare");
        -[MADPhotosFaceCropGenerationTask process](v89, "process");
        v98 = -[MADAssetProcessingTask publish](v89, "publish");
      }

      uint64_t v99 = VCPSignPostLog(v98);
      v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
      v101 = v100;
      if (v84 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v100))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v101,  OS_SIGNPOST_INTERVAL_END,  v84,  "MADPhotosPersonProcessingTaskGenerateFaceCrop",  (const char *)&unk_100199097,  buf,  2u);
      }

      if (v81)
      {
        v102 = mach_absolute_time();
        VCPPerformance_LogMeasurement("MADPhotosPersonProcessingTaskGenerateFaceCrop", v102 - v81);
      }

      v103 = -[PHPhotoLibrary countOfFaceCropsToBeGenerated](self->_photoLibrary, "countOfFaceCropsToBeGenerated");
      v105 = MediaAnalysisLogLevel(v103, v104);
      if ((int)v105 >= 7)
      {
        v107 = VCPLogInstance(v105, v106);
        v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v107);
        if (os_log_type_enabled(v108, v324))
        {
          v109 = self->_logPrefix;
          *(_DWORD *)__int128 buf = 138412546;
          v341 = v109;
          v342 = 2048;
          v343 = (uint64_t)v103;
          _os_log_impl((void *)&_mh_execute_header, v108, v324, "%@ Found %lu face crops yet to generate", buf, 0x16u);
        }
      }
    }

    v110 = -[PHPhotoLibrary countOfUnprocessedFaceCrops](self->_photoLibrary, "countOfUnprocessedFaceCrops");
    v112 = MediaAnalysisLogLevel(v110, v111);
    if ((int)v112 >= 6)
    {
      v114 = VCPLogInstance(v112, v113);
      v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
      if (os_log_type_enabled(v115, type))
      {
        v116 = self->_logPrefix;
        *(_DWORD *)__int128 buf = 138412546;
        v341 = v116;
        v342 = 2048;
        v343 = (uint64_t)v110;
        _os_log_impl((void *)&_mh_execute_header, v115, type, "%@ Found %lu face crops to process", buf, 0x16u);
      }
    }

    if (v110)
    {
      v117 = mach_absolute_time();
      v118 = VCPSignPostLog(v117);
      v119 = (os_log_s *)objc_claimAutoreleasedReturnValue(v118);
      v120 = os_signpost_id_generate(v119);

      v122 = VCPSignPostLog(v121);
      v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v122);
      v124 = v123;
      if (v120 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v123))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v124,  OS_SIGNPOST_INTERVAL_BEGIN,  v120,  "MADPhotosPersonProcessingTaskFaceCropProcessing",  (const char *)&unk_100199097,  buf,  2u);
      }

      photoLibrardouble y = self->_photoLibrary;
      v126 = (void *)objc_claimAutoreleasedReturnValue(-[GDVUVisualUnderstandingService gallery](self->_vuService, "gallery"));
      v127 = (void *)objc_claimAutoreleasedReturnValue( +[MADPhotosFaceCropProcessingTask taskWithPhotoLibrary:andGallery:]( &OBJC_CLASS___MADPhotosFaceCropProcessingTask,  "taskWithPhotoLibrary:andGallery:",  photoLibrary,  v126));

      v128 = (void *)objc_claimAutoreleasedReturnValue(-[MADProcessingTask cancelBlock](self, "cancelBlock"));
      [v127 setCancelBlock:v128];

      v129 = VCPSignPostLog([v127 process]);
      v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
      v131 = v130;
      if (v120 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v130))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v131,  OS_SIGNPOST_INTERVAL_END,  v120,  "MADPhotosPersonProcessingTaskFaceCropProcessing",  (const char *)&unk_100199097,  buf,  2u);
      }

      if (v117)
      {
        v132 = mach_absolute_time();
        VCPPerformance_LogMeasurement("MADPhotosPersonProcessingTaskFaceCropProcessing", v132 - v117);
      }

      v133 = -[PHPhotoLibrary countOfUnprocessedFaceCrops](self->_photoLibrary, "countOfUnprocessedFaceCrops");
      v135 = MediaAnalysisLogLevel(v133, v134);
      if ((int)v135 >= 7)
      {
        v137 = VCPLogInstance(v135, v136);
        v138 = (os_log_s *)objc_claimAutoreleasedReturnValue(v137);
        if (os_log_type_enabled(v138, v324))
        {
          v139 = self->_logPrefix;
          *(_DWORD *)__int128 buf = 138412546;
          v341 = v139;
          v342 = 2048;
          v343 = (uint64_t)v133;
          _os_log_impl((void *)&_mh_execute_header, v138, v324, "%@ Found %lu face crops yet to process", buf, 0x16u);
        }
      }
    }

    if (-[PHPhotoLibrary vcp_isSyndicationLibrary](self->_photoLibrary, "vcp_isSyndicationLibrary"))
    {
      v140 = _os_feature_enabled_impl("MediaAnalysis", "VUSyndicationLibrary");
      if ((v140 & 1) == 0) {
        break;
      }
    }

    v142 = (void *)objc_claimAutoreleasedReturnValue(+[MADGDUtilities sharedInstance](&OBJC_CLASS___MADGDUtilities, "sharedInstance"));
    [v142 flush];

    v143 = -[PHPhotoLibrary mad_countOfUnclusteredFaces](self->_photoLibrary, "mad_countOfUnclusteredFaces");
    v145 = MediaAnalysisLogLevel(v143, v144);
    if ((int)v145 >= 6)
    {
      v147 = VCPLogInstance(v145, v146);
      v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
      if (os_log_type_enabled(v148, type))
      {
        v149 = self->_logPrefix;
        *(_DWORD *)__int128 buf = 138412546;
        v341 = v149;
        v342 = 2048;
        v343 = (uint64_t)v143;
        _os_log_impl((void *)&_mh_execute_header, v148, type, "%@ Found %lu faces to add to Gallery", buf, 0x16u);
      }
    }

    if (v143)
    {
      v326 = objc_alloc_init(&OBJC_CLASS___VCPTimeMeasurement);
      -[VCPTimeMeasurement start](v326, "start");
      v150 = mach_absolute_time();
      v151 = VCPSignPostLog(v150);
      v152 = (os_log_s *)objc_claimAutoreleasedReturnValue(v151);
      v153 = os_signpost_id_generate(v152);

      v155 = VCPSignPostLog(v154);
      v156 = (os_log_s *)objc_claimAutoreleasedReturnValue(v155);
      v157 = v156;
      if (v153 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v156))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v157,  OS_SIGNPOST_INTERVAL_BEGIN,  v153,  "MADPhotosPersonProcessingTaskClusterFaceSendFaces",  (const char *)&unk_100199097,  buf,  2u);
      }

      v158 = (void *)objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary mad_unclusteredFacesFetchOptions]( self->_photoLibrary,  "mad_unclusteredFacesFetchOptions"));
      v348[0] = v323;
      v348[1] = v322;
      v348[2] = v321;
      v348[3] = v320;
      v159 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v348, 4LL));
      [v158 setFetchPropertySets:v159];

      v160 = (void *)objc_claimAutoreleasedReturnValue(+[PHFace fetchFacesWithOptions:](&OBJC_CLASS___PHFace, "fetchFacesWithOptions:", v158));
      v161 = (void *)objc_claimAutoreleasedReturnValue(+[MADGDUtilities sharedInstance](&OBJC_CLASS___MADGDUtilities, "sharedInstance"));
      v162 = (void *)objc_claimAutoreleasedReturnValue(-[GDVUVisualUnderstandingService gallery](self->_vuService, "gallery"));
      v336 = 0LL;
      v163 = [v161 prepareClusteringWithFaces:v160 gallery:v162 cancelOrExtendTimeoutBlock:v328 error:&v336];
      v164 = v336;

      if ((v163 & 1) == 0)
      {
        v165 = MediaAnalysisLogLevel(v165, v166);
        if ((int)v165 >= 3)
        {
          v168 = VCPLogInstance(v165, v167);
          v169 = (os_log_s *)objc_claimAutoreleasedReturnValue(v168);
          if (os_log_type_enabled(v169, v318))
          {
            v170 = self->_logPrefix;
            *(_DWORD *)__int128 buf = 138412546;
            v341 = v170;
            v342 = 2112;
            v343 = (uint64_t)v164;
            _os_log_impl((void *)&_mh_execute_header, v169, v318, "%@ Failed to add faces to Gallery - %@", buf, 0x16u);
          }
        }
      }

      v171 = VCPSignPostLog(v165);
      v172 = (os_log_s *)objc_claimAutoreleasedReturnValue(v171);
      v173 = v172;
      if (v153 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v172))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v173,  OS_SIGNPOST_INTERVAL_END,  v153,  "MADPhotosPersonProcessingTaskClusterFaceSendFaces",  (const char *)&unk_100199097,  buf,  2u);
      }

      if (v150)
      {
        v174 = mach_absolute_time();
        VCPPerformance_LogMeasurement("MADPhotosPersonProcessingTaskClusterFaceSendFaces", v174 - v150);
      }

      v175 = -[PHPhotoLibrary mad_countOfUnclusteredFaces](self->_photoLibrary, "mad_countOfUnclusteredFaces");
      v177 = MediaAnalysisLogLevel(v175, v176);
      if ((int)v177 >= 6)
      {
        v179 = VCPLogInstance(v177, v178);
        v180 = (os_log_s *)objc_claimAutoreleasedReturnValue(v179);
        if (os_log_type_enabled(v180, type))
        {
          v181 = self->_logPrefix;
          *(_DWORD *)__int128 buf = 138412546;
          v341 = v181;
          v342 = 2048;
          v343 = (uint64_t)v175;
          _os_log_impl( (void *)&_mh_execute_header,  v180,  type,  "%@ Found %lu (expected 0) faces yet to add to Gallery",  buf,  0x16u);
        }
      }

      -[VCPTimeMeasurement stop](v326, "stop");
      v182 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
      -[VCPTimeMeasurement elapsedTimeSeconds](v326, "elapsedTimeSeconds");
      objc_msgSend( v182,  "accumulateDoubleValue:forField:andEvent:",  @"FaceClusteringElapsedTimeInSeconds",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");
    }

    v183 = (void *)objc_claimAutoreleasedReturnValue(+[MADGDUtilities sharedInstance](&OBJC_CLASS___MADGDUtilities, "sharedInstance"));
    [v183 flush];

    v184 = (void *)objc_claimAutoreleasedReturnValue(-[GDVUVisualUnderstandingService gallery](self->_vuService, "gallery"));
    v185 = [v184 ready];

    if (v185)
    {
      v188 = MediaAnalysisLogLevel(v186, v187);
      v190 = VCPLogInstance(v188, v189);
      v191 = (os_log_s *)objc_claimAutoreleasedReturnValue(v190);
      if (os_log_type_enabled(v191, type))
      {
        v192 = self->_logPrefix;
        *(_DWORD *)__int128 buf = 138412290;
        v341 = v192;
        _os_log_impl((void *)&_mh_execute_header, v191, type, "%@ Gallery is ready; skip updating", buf, 0xCu);
      }
    }

    else
    {
      v335 = 0LL;
      v193 = -[MADPhotosPersonProcessingTask _updateGalleryWithError:](self, "_updateGalleryWithError:", &v335);
      v194 = (os_log_s *)v335;
      v191 = v194;
      if ((v193 & 1) == 0)
      {
        v216 = MediaAnalysisLogLevel(v194, v195);
        v218 = VCPLogInstance(v216, v217);
        v210 = (os_log_s *)objc_claimAutoreleasedReturnValue(v218);
        if (os_log_type_enabled(v210, v318))
        {
          v219 = self->_logPrefix;
          *(_DWORD *)__int128 buf = 138412546;
          v341 = v219;
          v342 = 2112;
          v343 = (uint64_t)v191;
          _os_log_impl((void *)&_mh_execute_header, v210, v318, "%@ Failed to update Gallery - %@", buf, 0x16u);
        }

        goto LABEL_135;
      }

      v319 = 1;
    }

LABEL_117:
    v196 = (void *)objc_claimAutoreleasedReturnValue(+[MADGDUtilities sharedInstance](&OBJC_CLASS___MADGDUtilities, "sharedInstance"));
    [v196 flush];

    v334 = 0LL;
    v197 = -[MADPhotosPersonProcessingTask _buildAndPromotePersonWithError:needReclustering:]( self,  "_buildAndPromotePersonWithError:needReclustering:",  &v334,  &v338);
    v198 = (os_log_s *)v334;
    v191 = v198;
    if ((v197 & 1) == 0)
    {
      v207 = MediaAnalysisLogLevel(v198, v199);
      v209 = VCPLogInstance(v207, v208);
      v210 = (os_log_s *)objc_claimAutoreleasedReturnValue(v209);
      if (os_log_type_enabled(v210, v318))
      {
        v211 = self->_logPrefix;
        *(_DWORD *)__int128 buf = 138412546;
        v341 = v211;
        v342 = 2112;
        v343 = (uint64_t)v191;
        _os_log_impl((void *)&_mh_execute_header, v210, v318, "%@ Failed to update person in Photos - %@", buf, 0x16u);
      }

void sub_10007AEF0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10007AFCC(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 26LL));
  if ((v1 & 1) != 0) {
    return 1LL;
  }
  unsigned __int8 v2 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 25LL));
  return v2 & 1;
}

unint64_t sub_10007AFF8(uint64_t a1, void *a2)
{
  id v2 = a2;
  unint64_t v3 = (unint64_t)[v2 prepare];
  if (!(_DWORD)v3)
  {
    id v4 = [v2 process];
    unint64_t v3 = (unint64_t)v4;
    if ((_DWORD)v4 == -128 || !(_DWORD)v4)
    {
      unsigned int v5 = [v2 publish];
      if (v5) {
        unint64_t v3 = v5;
      }
      else {
        unint64_t v3 = v3;
      }
    }
  }

  return v3;
}

void sub_10007B054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_118:
                v145 = 0;
LABEL_119:
                uint64_t v52 = 1;
                goto LABEL_120;
              }

              if (v82)
              {
                v82 = 1;
              }

              else
              {
                v101 = objc_autoreleasePoolPush();
                v102 = (char *)[v135 count];
                else {
                  v104 = (uint64_t)&v102[-v84];
                }
                v105 = MediaAnalysisLogLevel(v102, v103);
                if ((int)v105 >= 6)
                {
                  v107 = VCPLogInstance(v105, v106);
                  v108 = (os_log_s *)objc_claimAutoreleasedReturnValue(v107);
                  if (os_log_type_enabled(v108, v141))
                  {
                    *(_DWORD *)__int128 buf = 134218240;
                    v170 = ++v128;
                    v171 = 2048;
                    v172 = v104;
                    _os_log_impl( (void *)&_mh_execute_header,  v108,  v141,  "[PhotosCapture] Quick OCR batch %lu, jobs: %lu",  buf,  0x16u);
                  }
                }

                v109 = (void *)objc_claimAutoreleasedReturnValue( +[NSIndexSet indexSetWithIndexesInRange:]( &OBJC_CLASS___NSIndexSet,  "indexSetWithIndexesInRange:",  v84,  v104));
                v110 = (void *)objc_claimAutoreleasedReturnValue([v135 objectsAtIndexes:v109]);
                -[VCPPhotosCaptureProcessingTask ocrProcessingForAssets:](v149, "ocrProcessingForAssets:", v110);

                v84 += v104;
                v82 = v84 >= (unint64_t)[v135 count];

                objc_autoreleasePoolPop(v101);
              }

              v111 = atomic_load((unsigned __int8 *)&v149->_interrupt);
              if ((v111 & 1) != 0)
              {
                if (a3)
                {
                  v156 = NSLocalizedDescriptionKey;
                  v113 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[PhotosCapture] Interrupted with %lu face and %lu OCR job done",  v85,  v84));
                  v157 = v113;
                  v114 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v157,  &v156,  1LL));
                  v115 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL,  v114));
LABEL_117:
                  v124 = *a3;
                  *a3 = v115;
                }

                goto LABEL_118;
              }

              v112 = atomic_load((unsigned __int8 *)&v149->_cancel);
              if ((v112 & 1) != 0)
              {
                if (a3)
                {
                  v154 = NSLocalizedDescriptionKey;
                  v113 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[PhotosCapture] Canceled after screening %lu assets for face and %lu assets for OCR",  v85,  v84));
                  v155 = v113;
                  v114 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v155,  &v154,  1LL));
                  v115 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL,  v114));
                  goto LABEL_117;
                }

                goto LABEL_118;
              }
            }

            v120 = VCPSignPostLog(v81);
            v121 = (os_log_s *)objc_claimAutoreleasedReturnValue(v120);
            v122 = v121;
            if (v127 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v121))
            {
              *(_WORD *)__int128 buf = 0;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v122,  OS_SIGNPOST_INTERVAL_END,  v127,  "VCPJIT_AssetFaceAndOCR_EndToEnd",  (const char *)&unk_100199097,  buf,  2u);
            }

            if (v126)
            {
              v123 = mach_absolute_time();
              VCPPerformance_LogMeasurement("VCPJIT_AssetFaceAndOCR_EndToEnd", v123 - v126);
            }

            MediaAnalysisDaemonReleaseSharedDataStores(v142);
            uint64_t v52 = 0;
LABEL_120:
            v119 = v135;
          }

          id v11 = spida;
          goto LABEL_42;
        }

        int v66 = MediaAnalysisLogLevel(v64, v65);
        if ((int)v66 >= 6)
        {
          __int128 v68 = VCPLogInstance(v66, v67);
          __int128 v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
          if (os_log_type_enabled(v69, v141))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v69,  v141,  "[PhotosCapture] Stop processing after camera faces are processed",  buf,  2u);
          }
        }

        (*((void (**)(void))v149->_completionHandler + 2))();
        uint64_t v52 = 1;
        v145 = 1;
LABEL_43:

LABEL_45:
        objc_autoreleasePoolPop(context);
        if (v52)
        {

          goto LABEL_125;
        }
      }

      id v4 = -[NSArray countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v150,  v176,  16LL);
    }

    while (v4);
  }

  dispatch_group_wait((dispatch_group_t)v149->_persistGroup, 0xFFFFFFFFFFFFFFFFLL);
  (*((void (**)(void))v149->_completionHandler + 2))();
  v145 = 1;
LABEL_125:
  objc_autoreleasePoolPop(v130);
  return v145 & 1;
}

        goto LABEL_119;
      }

      v192 = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchRejectedPersonsForFace:options:]( &OBJC_CLASS___PHPerson,  "fetchRejectedPersonsForFace:options:",  v9,  v182));
      if (![v192 count])
      {
        v162 = MediaAnalysisLogLevel(0LL, v139);
        if ((int)v162 >= 3)
        {
          v164 = VCPLogInstance(v162, v163);
          v110 = (NSUUID *)objc_claimAutoreleasedReturnValue(v164);
          if (os_log_type_enabled((os_log_t)v110, v187))
          {
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v196;
            *(_WORD *)&buf[12] = 2048;
            *(void *)&buf[14] = v203;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v110,  v187,  "%@ Failed to find reject person for face (%ld)",  buf,  0x16u);
          }

          goto LABEL_118;
        }

void sub_10007C05C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, void *a23, void *a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, void *a38)
{
  _Unwind_Resume(a1);
}

void sub_10007C5B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12)
{
  _Unwind_Resume(a1);
}

void sub_10007C830( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_10007C990(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007C9E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007CEC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007D90C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

id sub_10007DA70(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetAnalysisVersionForMediaProcessingTaskID:*(void *)(a1 + 48) assetIdentifiers:*(void *)(a1 + 40)];
}

id sub_10007DA80(uint64_t a1)
{
  return [*(id *)(a1 + 32) resetAnalysisVersionForMediaProcessingTaskID:*(void *)(a1 + 48) assetIdentifiers:*(void *)(a1 + 40)];
}

void sub_10007DC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007DE54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E12C(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_10007E320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F4CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007F9D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, id a42)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);

  _Block_object_dispose((const void *)(v46 - 192), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10007FAC8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_10007FAD8(uint64_t a1)
{
}

void sub_10007FAE0(uint64_t a1, uint64_t a2, double a3)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 5)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2048;
      double v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ %.2f%% complete", (uint8_t *)&v9, 0x16u);
    }
  }

  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a3;
}

void sub_10007FBC8(void *a1, int a2)
{
  id v3 = [*(id *)(*(void *)(a1[8] + 8) + 40) stop];
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 5)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = a1[4];
      [*(id *)(*(void *)(a1[8] + 8) + 40) elapsedTimeSeconds];
      double v12 = @"interrupted";
      *(_DWORD *)__int128 buf = 138413058;
      uint64_t v115 = v10;
      __int16 v116 = 2112;
      if (!a2) {
        double v12 = @"finished";
      }
      uint64_t v117 = (uint64_t)v12;
      __int16 v118 = 2048;
      v119 = v11;
      __int16 v120 = 1024;
      LODWORD(v121) = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ processing %@ after %0.6fs (%d)", buf, 0x26u);
    }
  }

  if (a2 != -128 && a2)
  {
    uint64_t v13 = VCPLogInstance(v5, v6);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT)) {
      sub_10008046C((uint64_t)a1, a2, v14);
    }
  }

  if (a1[5])
  {
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    __int128 v112 = 0u;
    __int128 v113 = 0u;
    __int128 v110 = 0u;
    __int128 v111 = 0u;
    id v16 = [(id)objc_opt_class(a1[6]) producedResultIdentifiers];
    id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    id v18 = [v17 countByEnumeratingWithState:&v110 objects:v123 count:16];
    id v20 = v18;
    if (v18)
    {
      uint64_t v21 = *(void *)v111;
      os_log_type_t v22 = VCPLogToOSLogType[5];
      do
      {
        uint64_t v23 = 0LL;
        do
        {
          if (*(void *)v111 != v21) {
            objc_enumerationMutation(v17);
          }
          uint64_t v24 = *(void *)(*((void *)&v110 + 1) + 8LL * (void)v23);
          uint64_t v25 = MediaAnalysisLogLevel(v18, v19);
          if ((int)v25 >= 5)
          {
            uint64_t v27 = VCPLogInstance(v25, v26);
            int v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
            if (os_log_type_enabled(v28, v22))
            {
              uint64_t v29 = a1[4];
              int v30 = (int)*(double *)(*(void *)(a1[9] + 8LL) + 24LL);
              *(_DWORD *)__int128 buf = 138412802;
              uint64_t v115 = v29;
              __int16 v116 = 2112;
              uint64_t v117 = v24;
              __int16 v118 = 1024;
              LODWORD(v119) = v30;
              _os_log_impl((void *)&_mh_execute_header, v28, v22, "%@ Collecting produced results %@: %d", buf, 0x1Cu);
            }
          }

          id v31 = [[BGSystemTaskResult alloc] initWithIdentifier:v24 cumulativeProductionCount:(int)*(double *)(*(void *)(a1[9] + 8) + 24)];
          [v15 addObject:v31];

          uint64_t v23 = (char *)v23 + 1;
        }

        while (v20 != v23);
        id v18 = [v17 countByEnumeratingWithState:&v110 objects:v123 count:16];
        id v20 = v18;
      }

      while (v18);
    }

    id v32 = [v15 count];
    if (v32)
    {
      uint64_t v34 = MediaAnalysisLogLevel(v32, v33);
      if ((int)v34 >= 5)
      {
        uint64_t v36 = VCPLogInstance(v34, v35);
        unsigned int v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        os_log_type_t v38 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = a1[4];
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v115 = v39;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "%@ Reporting produced results ...", buf, 0xCu);
        }
      }

      uint64_t v40 = (void *)a1[5];
      id v109 = 0LL;
      unsigned __int8 v41 = [v40 producedCumulativeResults:v15 error:&v109];
      id v42 = v109;
      uint64_t v44 = v42;
      if ((v41 & 1) == 0)
      {
        uint64_t v45 = MediaAnalysisLogLevel(v42, v43);
        if ((int)v45 >= 3)
        {
          uint64_t v47 = VCPLogInstance(v45, v46);
          uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
          os_log_type_t v49 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v48, v49))
          {
            uint64_t v50 = a1[4];
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v115 = v50;
            __int16 v116 = 2112;
            uint64_t v117 = (uint64_t)v44;
            _os_log_impl((void *)&_mh_execute_header, v48, v49, "%@ Failed to report produced results - %@", buf, 0x16u);
          }
        }
      }
    }

    if (!a2)
    {
      __int128 v107 = 0u;
      __int128 v108 = 0u;
      __int128 v105 = 0u;
      __int128 v106 = 0u;
      id v51 = [(id)objc_opt_class(a1[6]) featureCodes];
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(v51);
      id v53 = [v52 countByEnumeratingWithState:&v105 objects:v122 count:16];
      if (!v53) {
        goto LABEL_52;
      }
      uint64_t v54 = *(void *)v106;
      os_log_type_t type = VCPLogToOSLogType[3];
      os_log_type_t v55 = VCPLogToOSLogType[5];
      while (1)
      {
        for (unint64_t i = 0LL; i != v53; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v106 != v54) {
            objc_enumerationMutation(v52);
          }
          uint64_t v57 = *(void **)(*((void *)&v105 + 1) + 8LL * (void)i);
          id v58 = [v57 unsignedIntegerValue];
          id v104 = 0LL;
          unsigned __int8 v59 = +[BGSystemTaskCheckpoints reportFeatureCheckpoint:forFeature:error:]( &OBJC_CLASS___BGSystemTaskCheckpoints,  "reportFeatureCheckpoint:forFeature:error:",  30LL,  v58,  &v104);
          id v60 = v104;
          uint64_t v62 = v60;
          if ((v59 & 1) != 0)
          {
            uint64_t v63 = MediaAnalysisLogLevel(v60, v61);
            uint64_t v65 = VCPLogInstance(v63, v64);
            int v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
            if (!os_log_type_enabled(v66, v55)) {
              goto LABEL_49;
            }
            uint64_t v67 = a1[4];
            *(_DWORD *)__int128 buf = 138412802;
            uint64_t v115 = v67;
            __int16 v116 = 2048;
            uint64_t v117 = 30LL;
            __int16 v118 = 2112;
            v119 = v57;
            __int128 v68 = v66;
            os_log_type_t v69 = v55;
            __int128 v70 = "%@ Reported checkpoint %lu for %@";
            uint32_t v71 = 32;
            goto LABEL_48;
          }

          uint64_t v72 = MediaAnalysisLogLevel(v60, v61);
          uint64_t v74 = VCPLogInstance(v72, v73);
          int v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
          if (os_log_type_enabled(v66, type))
          {
            uint64_t v75 = a1[4];
            *(_DWORD *)__int128 buf = 138413058;
            uint64_t v115 = v75;
            __int16 v116 = 2048;
            uint64_t v117 = 30LL;
            __int16 v118 = 2112;
            v119 = v57;
            __int16 v120 = 2112;
            v121 = v62;
            __int128 v68 = v66;
            os_log_type_t v69 = type;
            __int128 v70 = "%@ Failed to report checkpoint %lu for %@ - %@";
            uint32_t v71 = 42;
LABEL_48:
            _os_log_impl((void *)&_mh_execute_header, v68, v69, v70, buf, v71);
          }

void sub_1000803BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008046C(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "%@ processing failed (%d)",  (uint8_t *)&v4,  0x12u);
}

void sub_1000806EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

BOOL sub_100080738(id a1)
{
  return 0;
}

void sub_100080844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100080A4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

BOOL sub_100080A8C(id a1)
{
  return 0;
}

void sub_100080B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100080D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100080FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000811A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _Unwind_Exception *exception_object, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, void *a22, void *a23)
{
  _Unwind_Resume(a1);
}

void sub_100081210(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  uint64_t v10 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[MACS][ResultFor%@][%@]",  *(void *)(a1 + 32),  v7));
  double v12 = (void *)v10;
  if (v9)
  {
    uint64_t v13 = MediaAnalysisLogLevel(v10, v11);
    if ((int)v13 >= 3)
    {
      uint64_t v15 = VCPLogInstance(v13, v14);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      os_log_type_t v17 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v16, v17))
      {
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v39 = v12;
        __int16 v40 = 2112;
        id v41 = v9;
        id v18 = "%@ Failed to process %@";
        uint64_t v19 = v16;
        os_log_type_t v20 = v17;
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, buf, 0x16u);
        goto LABEL_15;
      }

      goto LABEL_15;
    }
  }

  else
  {
    id v21 = [*(id *)(a1 + 40) startAccessingSecurityScopedResource];
    if ((_DWORD)v21)
    {
      uint64_t v23 = MediaAnalysisLogLevel(v21, v22);
      if ((int)v23 >= 7)
      {
        uint64_t v25 = VCPLogInstance(v23, v24);
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        os_log_type_t v27 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v26, v27))
        {
          int v28 = *(void **)(a1 + 40);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v39 = v12;
          __int16 v40 = 2112;
          id v41 = v28;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "%@ Consuming secure scoped result URL %@", buf, 0x16u);
        }
      }

      uint64_t v29 = *(void *)(a1 + 32);
      id v30 = [v7 hash];
      id v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"result-%@-%lu-%lu.data",  v29,  v30,  [v31 hash]));

      id v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) URLByAppendingPathComponent:v16]);
      [*(id *)(a1 + 56) _saveResult:v8 fileURL:v32];
      [*(id *)(a1 + 40) stopAccessingSecurityScopedResource];

      goto LABEL_15;
    }

    uint64_t v33 = MediaAnalysisLogLevel(v21, v22);
    if ((int)v33 >= 3)
    {
      uint64_t v35 = VCPLogInstance(v33, v34);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      os_log_type_t v36 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v16, v36))
      {
        unsigned int v37 = *(void **)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v39 = v12;
        __int16 v40 = 2112;
        id v41 = v37;
        id v18 = "%@ Failed to open secure scoped result URL %@; exit";
        uint64_t v19 = v16;
        os_log_type_t v20 = v36;
        goto LABEL_14;
      }

void sub_1000814DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000816AC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1000816F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  uint64_t v10 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[MACS][ResultFor%@][%@]",  *(void *)(a1 + 32),  v7));
  double v12 = (void *)v10;
  if (v9)
  {
    uint64_t v13 = MediaAnalysisLogLevel(v10, v11);
    if ((int)v13 >= 3)
    {
      uint64_t v15 = VCPLogInstance(v13, v14);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      os_log_type_t v17 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v16, v17))
      {
        *(_DWORD *)__int128 buf = 138412546;
        __int16 v40 = v12;
        __int16 v41 = 2112;
        id v42 = v9;
        id v18 = "%@ Failed to process %@";
        uint64_t v19 = v16;
        os_log_type_t v20 = v17;
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, buf, 0x16u);
        goto LABEL_15;
      }

      goto LABEL_15;
    }
  }

  else
  {
    id v21 = [*(id *)(a1 + 40) startAccessingSecurityScopedResource];
    if ((_DWORD)v21)
    {
      uint64_t v23 = MediaAnalysisLogLevel(v21, v22);
      if ((int)v23 >= 7)
      {
        uint64_t v25 = VCPLogInstance(v23, v24);
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        os_log_type_t v27 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v26, v27))
        {
          int v28 = *(void **)(a1 + 40);
          *(_DWORD *)__int128 buf = 138412546;
          __int16 v40 = v12;
          __int16 v41 = 2112;
          id v42 = v28;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "%@ Consuming secure scoped result URL %@", buf, 0x16u);
        }
      }

      uint64_t v29 = *(void *)(a1 + 32);
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v7 absoluteString]);
      id v31 = [v30 hash];
      id v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"result-%@-%lu-%lu.data",  v29,  v31,  [v32 hash]));

      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) URLByAppendingPathComponent:v16]);
      [*(id *)(a1 + 56) _saveResult:v8 fileURL:v33];
      [*(id *)(a1 + 40) stopAccessingSecurityScopedResource];

      goto LABEL_15;
    }

    uint64_t v34 = MediaAnalysisLogLevel(v21, v22);
    if ((int)v34 >= 3)
    {
      uint64_t v36 = VCPLogInstance(v34, v35);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      os_log_type_t v37 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v16, v37))
      {
        os_log_type_t v38 = *(void **)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        __int16 v40 = v12;
        __int16 v41 = 2112;
        id v42 = v38;
        id v18 = "%@ Failed to open secure scoped result URL %@; exit";
        uint64_t v19 = v16;
        os_log_type_t v20 = v37;
        goto LABEL_14;
      }

void sub_1000819D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100082674( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26)
{
  _Unwind_Resume(a1);
}

void sub_100082970(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v37;
    if (v3) {
      uint64_t v7 = 3LL;
    }
    else {
      uint64_t v7 = 0x7FFFLL;
    }
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v37 != v6) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
        uint64_t v10 = objc_autoreleasePoolPush();
        [v9 setStatus:v7];
        objc_autoreleasePoolPop(v10);
      }

      id v5 = [v4 countByEnumeratingWithState:&v36 objects:v44 count:16];
    }

    while (v5);
  }

  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[MADSystemDataStore systemDataStore](&OBJC_CLASS___MADSystemDataStore, "systemDataStore"));
  id v35 = 0LL;
  unsigned __int8 v12 = [v11 commitChangesOrRollback:&v35];
  id v13 = v35;

  if ((v12 & 1) == 0)
  {
    uint64_t v16 = MediaAnalysisLogLevel(v14, v15);
    if ((int)v16 >= 3)
    {
      uint64_t v18 = VCPLogInstance(v16, v17);
      uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
      os_log_type_t v20 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = *(void *)(a1 + 40);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v41 = v21;
        __int16 v42 = 2112;
        id v43 = v13;
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "%@ Failed to commit changes - %@", buf, 0x16u);
      }
    }

    id v22 = v13;

    id v3 = v22;
  }

  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firstObject]);
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v23 resultDirectoryURL]);
  [v24 stopAccessingSecurityScopedResource];

  uint64_t v27 = MediaAnalysisLogLevel(v25, v26);
  if ((int)v27 >= 7)
  {
    uint64_t v29 = VCPLogInstance(v27, v28);
    id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    os_log_type_t v31 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = *(void *)(a1 + 40);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firstObject]);
      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 resultDirectoryURL]);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v41 = v32;
      __int16 v42 = 2112;
      id v43 = v34;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%@ Closing secure scoped result URL %@", buf, 0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100082C38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100082CA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v5)
  {
    uint64_t v7 = *(void *)v22;
    os_log_type_t v8 = VCPLogToOSLogType[7];
    *(void *)&__int128 v6 = 138412546LL;
    __int128 v20 = v6;
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void **)(*((void *)&v21 + 1) + 8LL * (void)i);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "assetURL", v20, (void)v21));
        [v11 stopAccessingSecurityScopedResource];

        uint64_t v14 = MediaAnalysisLogLevel(v12, v13);
        if ((int)v14 >= 7)
        {
          uint64_t v16 = VCPLogInstance(v14, v15);
          uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, v8))
          {
            uint64_t v18 = *(void *)(a1 + 40);
            uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v10 assetURL]);
            *(_DWORD *)__int128 buf = v20;
            uint64_t v26 = v18;
            __int16 v27 = 2112;
            uint64_t v28 = v19;
            _os_log_impl((void *)&_mh_execute_header, v17, v8, "%@ Closing secure scoped URL %@", buf, 0x16u);
          }
        }
      }

      id v5 = [v4 countByEnumeratingWithState:&v21 objects:v29 count:16];
    }

    while (v5);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100082E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100083068( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000831E8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___MADComputeServiceProcessingTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100083344(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008365C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_100083D34( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35)
{
}

id sub_100083E4C(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_100083E54(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2)
  {
    NSErrorUserInfoKey v29 = NSLocalizedDescriptionKey;
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ Analysis failed - %d",  *(void *)(a1 + 40),  a2));
    id v30 = v3;
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v4));

    uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
    if ((int)v7 >= 3)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v10, v11))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v28 = v22;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%@", buf, 0xCu);
      }
    }

    *(double *)(*(void *)(a1 + 32) + 80LL) = *(double *)(*(void *)(a1 + 32) + 80LL)
                                             + (double)(unint64_t)[*(id *)(*(void *)(a1 + 32) + 24) count];
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 96LL) + 16LL))();
  }

  else
  {
    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _loadAssetsForTaskID:2]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[PHSceneClassification fetchSceneClassificationsGroupedByAssetLocalIdentifierForAssets:]( &OBJC_CLASS___PHSceneClassification,  "fetchSceneClassificationsGroupedByAssetLocalIdentifierForAssets:",  v22));
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    id v13 = *(id *)(*(void *)(a1 + 32) + 24LL);
    id v14 = [v13 countByEnumeratingWithState:&v23 objects:v31 count:16];
    if (v14)
    {
      uint64_t v15 = *(void *)v24;
      do
      {
        for (unint64_t i = 0LL; i != v14; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v15) {
            objc_enumerationMutation(v13);
          }
          uint64_t v17 = *(void *)(*((void *)&v23 + 1) + 8LL * (void)i);
          uint64_t v18 = objc_autoreleasePoolPush();
          uint64_t v19 = *(void **)(a1 + 32);
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v12 objectForKeyedSubscript:v17]);
          __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v19 _prepareSceneResultWithClassifications:v20]);

          *(double *)(*(void *)(a1 + 32) + 80LL) = *(double *)(*(void *)(a1 + 32) + 80LL) + 1.0;
          (*(void (**)(double))(*(void *)(*(void *)(a1 + 32) + 88LL) + 16LL))(*(double *)(*(void *)(a1 + 32) + 80LL) / *(double *)(*(void *)(a1 + 32) + 72LL));
          (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 96LL) + 16LL))();

          objc_autoreleasePoolPop(v18);
        }

        id v14 = [v13 countByEnumeratingWithState:&v23 objects:v31 count:16];
      }

      while (v14);
    }
  }
}

void sub_100084170( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_1000844D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100084BA8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35)
{
}

id sub_100084CF8(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_100084D00(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2)
  {
    NSErrorUserInfoKey v34 = NSLocalizedDescriptionKey;
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ Analysis failed - %d",  *(void *)(a1 + 40),  a2));
    id v35 = v3;
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v35,  &v34,  1LL));
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v4));

    uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
    if ((int)v7 >= 3)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v10, v11))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v33 = v26;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%@", buf, 0xCu);
      }
    }

    *(double *)(*(void *)(a1 + 32) + 80LL) = *(double *)(*(void *)(a1 + 32) + 80LL)
                                             + (double)(unint64_t)[*(id *)(*(void *)(a1 + 32) + 24) count];
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 96LL) + 16LL))();
  }

  else
  {
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _loadAssetsForTaskID:3]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v26 firstObject]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 photoLibrary]);
    uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 librarySpecificFetchOptions]);

    __int128 v25 = (void *)v14;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesGroupedByAssetLocalIdentifierForAssets:options:]( &OBJC_CLASS___PHFace,  "fetchFacesGroupedByAssetLocalIdentifierForAssets:options:",  v26,  v14));
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v28 = 0u;
    __int128 v29 = 0u;
    id obj = *(id *)(*(void *)(a1 + 32) + 24LL);
    id v16 = [obj countByEnumeratingWithState:&v28 objects:v36 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v29;
      do
      {
        for (unint64_t i = 0LL; i != v16; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v29 != v17) {
            objc_enumerationMutation(obj);
          }
          uint64_t v19 = *(void *)(*((void *)&v28 + 1) + 8LL * (void)i);
          __int128 v20 = objc_autoreleasePoolPush();
          __int128 v21 = *(void **)(a1 + 32);
          __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v15 objectForKeyedSubscript:v19]);
          __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([v22 fetchedObjects]);
          __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v21 _prepareFaceResultWithFaces:v23]);

          *(double *)(*(void *)(a1 + 32) + 80LL) = *(double *)(*(void *)(a1 + 32) + 80LL) + 1.0;
          (*(void (**)(double))(*(void *)(*(void *)(a1 + 32) + 88LL) + 16LL))(*(double *)(*(void *)(a1 + 32) + 80LL) / *(double *)(*(void *)(a1 + 32) + 72LL));
          (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 96LL) + 16LL))();

          objc_autoreleasePoolPop(v20);
        }

        id v16 = [obj countByEnumeratingWithState:&v28 objects:v36 count:16];
      }

      while (v16);
    }
  }
}

void sub_100085070( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_1000854D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085974( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
}

void sub_100086FA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, _Unwind_Exception *exception_objecta, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22)
{
  _Unwind_Resume(a1);
}

id sub_100087414(uint64_t a1, uint64_t a2)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (unint64_t i = 0LL; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        if ((objc_opt_isKindOfClass(v7, a2) & 1) != 0)
        {
          id v8 = v7;
          goto LABEL_11;
        }
      }

      id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  id v8 = 0LL;
LABEL_11:

  return v8;
}

void sub_10008752C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008754C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[MADSceneClassification entryWithLabel:confidence:boundingBox:videoEntries:]( &OBJC_CLASS___MADSceneClassification,  "entryWithLabel:confidence:boundingBox:videoEntries:",  v5,  v6,  1.0,  CGRectNull.origin.x,  CGRectNull.origin.y,  CGRectNull.size.width,  CGRectNull.size.height));
  if (v8)
  {
    [*(id *)(a1 + 32) addObject:v8];
  }

  else
  {
    uint64_t v9 = MediaAnalysisLogLevel(0LL, v7);
    if ((int)v9 >= 3)
    {
      uint64_t v11 = VCPLogInstance(v9, v10);
      __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      os_log_type_t v13 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v12, v13))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        int v15 = 138412802;
        uint64_t v16 = v14;
        __int16 v17 = 2112;
        id v18 = v5;
        __int16 v19 = 2112;
        id v20 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "%@ Failed to create classification for label %@ from %@; skip",
          (uint8_t *)&v15,
          0x20u);
      }
    }
  }
}

void sub_100087690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000876BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[MADDetectedFace entryWithFaceID:confidence:boundingBox:videoEntries:]( MADDetectedFace,  "entryWithFaceID:confidence:boundingBox:videoEntries:",  [v5 intValue],  v6,  1.0,  CGRectNull.origin.x,  CGRectNull.origin.y,  CGRectNull.size.width,  CGRectNull.size.height));
  if (v8)
  {
    [*(id *)(a1 + 32) addObject:v8];
  }

  else
  {
    uint64_t v9 = MediaAnalysisLogLevel(0LL, v7);
    if ((int)v9 >= 3)
    {
      uint64_t v11 = VCPLogInstance(v9, v10);
      __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      os_log_type_t v13 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v12, v13))
      {
        int v14 = 138412546;
        id v15 = v5;
        __int16 v16 = 2112;
        id v17 = v6;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "[MADComputeServiceProcessingTask] Failed to create face %@ from %@; skip",
          (uint8_t *)&v14,
          0x16u);
      }
    }
  }
}

void sub_100087800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000879A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000879E4(uint64_t a1, uint64_t a2)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v3 = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v11;
    while (2)
    {
      for (unint64_t i = 0LL; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        if ((objc_opt_isKindOfClass(v7, a2) & 1) != 0)
        {
          id v8 = v7;
          goto LABEL_11;
        }
      }

      id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  id v8 = 0LL;
LABEL_11:

  return v8;
}

void sub_100087AFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100088188( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10008862C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

LABEL_54:
      goto LABEL_55;
    }

    goto LABEL_55;
  }

  int v66 = (unint64_t)objc_msgSend(v29, "vcp_types");
  if ((a5 & ~v66) != 0)
  {
    uint64_t v75 = objc_msgSend(v29, "vcp_degraded");
    if (((v75 | v27) & 1) != 0)
    {
      uint64_t v77 = MediaAnalysisLogLevel(v75, v76);
      if ((int)v77 >= 7)
      {
        os_log_type_t v79 = VCPLogInstance(v77, v78);
        uint64_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
        uint64_t v81 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v80, v81))
        {
          v82 = MediaAnalysisTypeDescription(objc_msgSend(v29, "vcp_types"));
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v99;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = objc_claimAutoreleasedReturnValue(v82);
          uint64_t v96 = *(void **)&buf[14];
          _os_log_impl( (void *)&_mh_execute_header,  v80,  v81,  "%@ Existing analysis doesn't satisfy request (%@)",  buf,  0x16u);
        }
      }

      uint64_t v83 = (unint64_t)objc_msgSend(v29, "vcp_types");
      uint64_t v85 = MediaAnalysisLogLevel(v83, v84);
      a5 &= ~v83;
      uint64_t v87 = VCPLogInstance(v85, v86);
      __int128 v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
      os_log_type_t v89 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v88, v89))
      {
        uint64_t v90 = MediaAnalysisTypeDescription(a5);
        id v91 = objc_claimAutoreleasedReturnValue(v90);
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v99;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v91;
        uint64_t v97 = (void *)v91;
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "%@ Request on-demand analysis types %@", buf, 0x16u);
      }

          objc_autoreleasePoolPop(v43);
        }

        __int128 v37 = [v36 countByEnumeratingWithState:&v174 objects:v185 count:16];
      }

      while (v37);
    }

    os_log_type_t v79 = [v161 count];
    uint64_t v81 = v79;
    if (v79)
    {
      v82 = MediaAnalysisLogLevel(v79, v80);
      if ((int)v82 >= 5)
      {
        uint64_t v84 = VCPLogInstance(v82, v83);
        uint64_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
        uint64_t v86 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v85, v86))
        {
          *(_DWORD *)__int128 buf = 134217984;
          v182 = v81;
          _os_log_impl( (void *)&_mh_execute_header,  v85,  v86,  "[VSKDBUtil] Resetting mediaAnalysisImageVersion and imageEmbeddingVersion (%lu assets)",  buf,  0xCu);
        }
      }

      uint64_t v87 = mach_absolute_time();
      __int128 v88 = VCPSignPostLog(v87);
      os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
      uint64_t v90 = os_signpost_id_generate(v89);

      id v92 = VCPSignPostLog(v91);
      uint64_t v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
      uint64_t v94 = v93;
      if (v90 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v93))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v94,  OS_SIGNPOST_INTERVAL_BEGIN,  v90,  "VSKDBUtil_ResetAnalysisVersion",  (const char *)&unk_100199097,  buf,  2u);
      }

      uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
      [v95 pet];

      uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue([v161 allObjects]);
      v173 = 0LL;
      uint64_t v97 = [v156 resetStateForMediaProcessingTaskID:17 assetIdentifiers:v96 resetOptions:1025 error:&v173];
      v98 = v173;

      if ((v97 & 1) == 0)
      {
        os_log_type_t v99 = MediaAnalysisLogLevel(v99, v100);
        if ((int)v99 >= 3)
        {
          v102 = VCPLogInstance(v99, v101);
          id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
          id v104 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v103, v104))
          {
            *(_DWORD *)__int128 buf = 134218242;
            v182 = v81;
            v183 = 2112;
            *(void *)v184 = v98;
            _os_log_impl( (void *)&_mh_execute_header,  v103,  v104,  "[VSKDBUtil] Failed to reset mediaAnalysisImageVersion and imageEmbeddingVersion (%lu assets) - %@",  buf,  0x16u);
          }
        }
      }

      __int128 v105 = VCPSignPostLog(v99);
      __int128 v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v105);
      __int128 v107 = v106;
      if (v90 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v106))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v107,  OS_SIGNPOST_INTERVAL_END,  v90,  "VSKDBUtil_ResetAnalysisVersion",  (const char *)&unk_100199097,  buf,  2u);
      }

      if (v87)
      {
        __int128 v108 = mach_absolute_time();
        VCPPerformance_LogMeasurement("VSKDBUtil_ResetAnalysisVersion", v108 - v87);
      }
    }

    *(void *)v160 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%lu localIdentifiers",  [v166 count]));

    __int128 v110 = VCPSignPostLog(v109);
    __int128 v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
    __int128 v112 = os_signpost_id_generate(v111);

    v114 = VCPSignPostLog(v113);
    uint64_t v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
    __int16 v116 = v115;
    if (v112 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v115))
    {
      *(_DWORD *)__int128 buf = 138412290;
      v182 = *(void **)v160;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v116,  OS_SIGNPOST_INTERVAL_BEGIN,  v112,  "MADVectorDatabaseUtilities_Update_FetchEmbeddings",  "%@",  buf,  0xCu);
    }

    uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue([v166 allObjects]);
    v172 = 0LL;
    __int16 v16 = [v162 queryAnalysisResultsForAssets:v117 results:&v172];
    __int16 v118 = v172;

    if (v16)
    {
      v121 = MediaAnalysisLogLevel(v119, v120);
      if ((int)v121 >= 3)
      {
        v123 = VCPLogInstance(v121, v122);
        v124 = (os_log_s *)objc_claimAutoreleasedReturnValue(v123);
        v125 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v124, v125))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v182 = *(void **)v160;
          _os_log_impl( (void *)&_mh_execute_header,  v124,  v125,  "[VSKDBUtil] Failed to fetch analysis results for %@",  buf,  0xCu);
        }
      }

      if (!a6) {
        goto LABEL_112;
      }
      v179 = NSLocalizedDescriptionKey;
      v180 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[VSKDBUtil] Failed to fetch analysis results for %@",  *(void *)v160));
      typea = (void *)v180;
      v126 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v180,  &v179,  1LL));
      *a6 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  v16,  v126));
      goto LABEL_85;
    }

    v128 = VCPSignPostLog(v119);
    v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
    v130 = v129;
    if (v112 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v129))
    {
      *(_DWORD *)__int128 buf = 138412290;
      v182 = *(void **)v160;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v130,  OS_SIGNPOST_INTERVAL_END,  v112,  "MADVectorDatabaseUtilities_Update_FetchEmbeddings",  "%@",  buf,  0xCu);
    }

    typea = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    v170 = 0u;
    v171 = 0u;
    v168 = 0u;
    v169 = 0u;
    v131 = v166;
    v132 = [v131 countByEnumeratingWithState:&v168 objects:v178 count:16];
    if (!v132)
    {
LABEL_104:

      v127 = typea;
      if ([typea count])
      {
        __int16 v16 = [(id)objc_opt_class(a1) updateWithAssetsEmbeddings:typea photoLibrary:v156 cancelBlock:v155 error:a6];
        goto LABEL_111;
      }

      v148 = MediaAnalysisLogLevel(0LL, v147);
      if ((int)v148 < 4)
      {
        __int16 v16 = 0;
        goto LABEL_111;
      }

      v150 = VCPLogInstance(v148, v149);
      v126 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
      v151 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v126, v151))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v126,  v151,  "[VSKDBUtil] No assets embeddings to be inserted/updated",  buf,  2u);
      }

      __int16 v16 = 0;
LABEL_85:

      v127 = typea;
LABEL_111:

LABEL_112:
      v158 = *(void **)v160;
LABEL_113:

      goto LABEL_114;
    }

    v133 = *(void *)v169;
    v163 = VCPLogToOSLogType[4];
LABEL_92:
    v134 = 0LL;
    while (1)
    {
      if (*(void *)v169 != v133) {
        objc_enumerationMutation(v131);
      }
      v135 = *(void **)(*((void *)&v168 + 1) + 8 * v134);
      v136 = objc_autoreleasePoolPush();
      v137 = (void *)objc_claimAutoreleasedReturnValue([v118 objectForKeyedSubscript:v135]);
      v138 = v137 == 0LL;

      if (v138)
      {
        v143 = MediaAnalysisLogLevel(v139, v140);
        v145 = VCPLogInstance(v143, v144);
        v142 = (os_log_s *)objc_claimAutoreleasedReturnValue(v145);
        if (os_log_type_enabled(v142, v163))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v182 = v135;
          _os_log_impl((void *)&_mh_execute_header, v142, v163, "[VSKDBUtil][%@] No full analysis results", buf, 0xCu);
        }
      }

      else
      {
        v141 = (void *)objc_claimAutoreleasedReturnValue([v118 objectForKeyedSubscript:v135]);
        v142 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[VSKAsset mad_assetsWithLocalIdentifier:mediaAnalysisResults:]( &OBJC_CLASS___VSKAsset,  "mad_assetsWithLocalIdentifier:mediaAnalysisResults:",  v135,  v141));

        [typea addObjectsFromArray:v142];
      }

LABEL_98:
      objc_autoreleasePoolPop(v136);
      if (v132 == (id)++v134)
      {
        v146 = [v131 countByEnumeratingWithState:&v168 objects:v178 count:16];
        v132 = v146;
        if (!v146) {
          goto LABEL_104;
        }
        goto LABEL_92;
      }
    }
  }

  if (a6)
  {
    v188 = NSLocalizedDescriptionKey;
    v162 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[VSKDBUtil] Cancelled during _updateWithLocalIdentifiers"));
    v189 = v162;
    v167 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v189,  &v188,  1LL));
    *a6 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL));
    __int16 v16 = -128;
LABEL_114:

    goto LABEL_115;
  }

  __int16 v16 = -128;
LABEL_115:

  return v16;
}

LABEL_55:
    __int128 v88 = (os_log_s *)v29;
    __int128 v29 = 0LL;
    goto LABEL_56;
  }

  __int128 v68 = MediaAnalysisLogLevel(v66, v67);
  if ((int)v68 >= 7)
  {
    __int128 v70 = VCPLogInstance(v68, v69);
    uint32_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
    uint64_t v72 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = MediaAnalysisTypeDescription(objc_msgSend(v29, "vcp_types"));
      uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v99;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v74;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "%@ Existing analysis satisfies request (%@)", buf, 0x16u);
    }
  }

  __int128 v29 = v29;

  uint64_t v62 = v29;
LABEL_36:

  return v62;
}

      uint32_t v71 = MediaAnalysisLogLevel(v55, v56);
      uint64_t v73 = VCPLogInstance(v71, v72);
      id v58 = (void *)objc_claimAutoreleasedReturnValue(v73);
      if (os_log_type_enabled((os_log_t)v58, v138))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v155 = v140;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v58,  v138,  "%@ Failed to retrieve faceChangeRequest; skipping",
          buf,
          0xCu);
      }

              goto LABEL_56;
            }

            int v66 = MediaAnalysisLogLevel(v59, v60);
            if ((int)v66 >= 5)
            {
              __int128 v68 = VCPLogInstance(v66, v67);
              os_log_type_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
              if (os_log_type_enabled(v69, v121))
              {
                loga = (os_log_t)objc_claimAutoreleasedReturnValue([v26 asset]);
                __int128 v70 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s localIdentifier](loga, "localIdentifier"));
                *(_DWORD *)__int128 buf = 138412290;
                v135[0] = v70;
                _os_log_impl( (void *)&_mh_execute_header,  v69,  v121,  "[OCR][%@] Analysis remains incomplete with compute sync, falling back to media resource download",  buf,  0xCu);
              }
            }
          }

          uint32_t v71 = (void *)objc_claimAutoreleasedReturnValue([v26 asset]);
          uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue( -[VCPMADOCRAssetBatch remoteResourceForAsset:withAcceptableResources:]( self,  "remoteResourceForAsset:withAcceptableResources:",  v71,  v42));

          if (v72)
          {
            dispatch_group_enter((dispatch_group_t)self->_downloadGroup);
            uint64_t v73 = v26;
            v129 = v73;
            v130 = v72;
            log = v130;
            uint64_t v74 = +[PHAssetResourceManager vcp_requestFileURLForAssetResource:taskID:completionHandler:]( &OBJC_CLASS___PHAssetResourceManager,  "vcp_requestFileURLForAssetResource:taskID:completionHandler:");
            uint64_t v76 = v74;
            if ((_DWORD)v74)
            {
              uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue([v73 asset]);
              -[VCPMADOCRAssetBatch addDownloadRequestID:forAsset:](self, "addDownloadRequestID:forAsset:", v76, v77);

              ++v125;
            }

            else
            {
              uint64_t v84 = MediaAnalysisLogLevel(v74, v75);
              if ((int)v84 >= 4)
              {
                uint64_t v86 = VCPLogInstance(v84, v85);
                __int16 v120 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
                if (os_log_type_enabled(v120, v127))
                {
                  v119 = (void *)objc_claimAutoreleasedReturnValue([v73 asset]);
                  uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue([v119 localIdentifier]);
                  *(_DWORD *)__int128 buf = 138412290;
                  v135[0] = v87;
                  _os_log_impl( (void *)&_mh_execute_header,  v120,  v127,  "[OCR][%@] Failed to initialize resource download",  buf,  0xCu);
                }
              }

              [v73 setStatus:4294943494];
              dispatch_group_leave((dispatch_group_t)self->_downloadGroup);
            }

            goto LABEL_55;
          }
        }

        else if (v49)
        {
          [v26 setVersion:v122];
          goto LABEL_17;
        }
      }

      uint64_t v78 = MediaAnalysisLogLevel(v45, v46);
      if ((int)v78 >= 4)
      {
        uint64_t v80 = VCPLogInstance(v78, v79);
        uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
        if (os_log_type_enabled(v81, v127))
        {
          v82 = (void *)objc_claimAutoreleasedReturnValue([v26 asset]);
          uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v82 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          v135[0] = v83;
          _os_log_impl((void *)&_mh_execute_header, v81, v127, "[OCR][%@] No acceptable resource available", buf, 0xCu);
        }
      }

      [v26 setStatus:4294943494];
      goto LABEL_46;
    }

    uint64_t v50 = MediaAnalysisLogLevel(v37, v38);
    if ((int)v50 >= 4)
    {
      uint64_t v52 = VCPLogInstance(v50, v51);
      id v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
      if (os_log_type_enabled(v53, v127))
      {
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue([v26 asset]);
        os_log_type_t v55 = (void *)objc_claimAutoreleasedReturnValue([v54 localIdentifier]);
        *(_DWORD *)__int128 buf = 138412290;
        v135[0] = v55;
        _os_log_impl((void *)&_mh_execute_header, v53, v127, "[OCR][%@] Asset has no adjustment version", buf, 0xCu);
      }
    }

    [v26 setStatus:4294943493];
LABEL_47:

    objc_autoreleasePoolPop(v24);
    __int128 v21 = -[NSMutableArray count](self->_assetEntries, "count");
    ++v23;
  }

  while (v23 < (unint64_t)v21);
  if (v125)
  {
    __int128 v88 = MediaAnalysisLogLevel(v21, v22);
    if ((int)v88 >= 6)
    {
      uint64_t v90 = VCPLogInstance(v88, v89);
      id v91 = (os_log_s *)objc_claimAutoreleasedReturnValue(v90);
      if (os_log_type_enabled(v91, type))
      {
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v135[0]) = v125;
        _os_log_impl((void *)&_mh_execute_header, v91, type, "[OCR] Waiting for %d downloads to complete", buf, 8u);
      }
    }

    while (1)
    {
      downloadGroup = self->_downloadGroup;
      uint64_t v93 = dispatch_time(0LL, 250000000LL);
      __int128 v21 = (id)dispatch_group_wait((dispatch_group_t)downloadGroup, v93);
      if (!v21) {
        goto LABEL_78;
      }
      cancelBlock = (uint64_t (**)(void))self->_cancelBlock;
      if (cancelBlock)
      {
        uint64_t v95 = cancelBlock[2]();
        if ((_DWORD)v95) {
          break;
        }
      }

      uint64_t v97 = -[VCPMADOCRAssetBatch downloadInactiveTimeInterval](self, "downloadInactiveTimeInterval");
      if (v99 > 60.0)
      {
        uint64_t v100 = MediaAnalysisLogLevel(v97, v98);
        if ((int)v100 >= 5)
        {
          v102 = VCPLogInstance(v100, v101);
          id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
          if (os_log_type_enabled(v103, v121))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v103,  v121,  "[OCR] Download inactivity timeout; cancelling downloads",
              buf,
              2u);
          }

          id v104 = 4294943494LL;
          goto LABEL_74;
        }

        id v104 = 4294943494LL;
LABEL_77:
        __int128 v21 = -[VCPMADOCRAssetBatch cancelRemainingDownloadsWithStatus:]( self,  "cancelRemainingDownloadsWithStatus:",  v104);
        goto LABEL_78;
      }
    }

    __int128 v105 = MediaAnalysisLogLevel(v95, v96);
    if ((int)v105 < 5)
    {
      id v104 = 4294967168LL;
    }

    else
    {
      __int128 v107 = VCPLogInstance(v105, v106);
      id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v107);
      if (os_log_type_enabled(v103, v121))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v103,  v121,  "[OCR] Processing cancelled; cancelling downloads",
          buf,
          2u);
      }

      id v104 = 4294967168LL;
LABEL_74:
    }

    goto LABEL_77;
  }

          __int128 v25 = 15;
LABEL_89:

          __int128 v31 = v130;
          goto LABEL_90;
        }

        __int128 v68 = MediaAnalysisLogLevel(0LL, v47);
        if ((int)v68 >= 3)
        {
          v130 = v45;
          __int128 v70 = VCPLogInstance(v68, v69);
          uint32_t v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
          v131 = v71;
          if (os_log_type_enabled(v71, type))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v71,  type,  "  Failed to deserialize asset analysis; skipping entry",
              buf,
              2u);
          }

          goto LABEL_55;
        }

        __int128 v31 = v45;
LABEL_60:
        __int128 v25 = 15;
LABEL_90:
        __int128 v22 = v19;
LABEL_91:

        goto LABEL_92;
      }

      __int128 v110 = MediaAnalysisLogLevel(v17, v18);
      if ((int)v110 >= 3)
      {
        __int128 v112 = VCPLogInstance(v110, v111);
        __int128 v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
        __int128 v108 = VCPLogToOSLogType[3];
        v102 = v113;
        if (os_log_type_enabled(v113, v108))
        {
          *(_DWORD *)__int128 buf = 67109120;
          LODWORD(v142) = [v12 version];
          id v109 = "  Backup contains invalid version (%u)";
          goto LABEL_122;
        }

        goto LABEL_123;
      }
    }

    else
    {
      id v104 = MediaAnalysisLogLevel(v14, v15);
      if ((int)v104 >= 3)
      {
        __int128 v106 = VCPLogInstance(v104, v105);
        __int128 v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);
        __int128 v108 = VCPLogToOSLogType[3];
        v102 = v107;
        if (os_log_type_enabled(v107, v108))
        {
          *(_DWORD *)__int128 buf = 67109120;
          LODWORD(v142) = [v12 identifier];
          id v109 = "  Backup contains invalid file identifier (%u)";
LABEL_122:
          _os_log_impl((void *)&_mh_execute_header, v102, v108, v109, buf, 8u);
        }
      }

void sub_100089028( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000891AC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_1000891BC(uint64_t a1)
{
}

void sub_1000891C4(void *a1)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100089248;
  v6[3] = &unk_1001B9E98;
  id v2 = (void *)a1[4];
  v6[4] = a1[5];
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 analyzeAsset:v6 streamed:0]);
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v3;
}

id sub_100089248(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v2 pet];

  return [*(id *)(a1 + 32) isCancelled];
}

void sub_100089284(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100089294(void *a1)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100089318;
  v6[3] = &unk_1001B9E98;
  id v2 = (void *)a1[4];
  v6[4] = a1[5];
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 analyzeAsset:v6 withOptions:0]);
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v3;
}

id sub_100089318(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v2 pet];

  return [*(id *)(a1 + 32) isCancelled];
}

void sub_100089354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_80:
    goto LABEL_81;
  }

  NSErrorUserInfoKey v34 = MediaAnalysisLogLevel(v4, v5);
  if ((int)v34 >= 3)
  {
    __int128 v36 = VCPLogInstance(v34, v35);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v36);
    __int128 v37 = VCPLogToOSLogType[3];
    id v15 = @"[ResumePausedVideoAnalysis]";
    if (os_log_type_enabled((os_log_t)v6, v37))
    {
      resultDirectoryURL = self->_resultDirectoryURL;
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = @"[ResumePausedVideoAnalysis]";
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = resultDirectoryURL;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v6,  v37,  "%@ Failed to start security scoped resource %@",  buf,  0x16u);
    }

    __int128 v39 = 0;
    goto LABEL_81;
  }

  __int128 v39 = 0;
  id v15 = @"[ResumePausedVideoAnalysis]";
LABEL_82:

  return v39;
}

void sub_100089F30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_10008A11C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v8 = v6;
  if (v6)
  {
    if ((int)MediaAnalysisLogLevel(v6, v7) >= 3)
    {
      uint64_t v9 = VCPLogInstance();
      __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        int v21 = 138412546;
        uint64_t v22 = v12;
        __int16 v23 = 2112;
        id v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%@ Request failed with error: %@", (uint8_t *)&v21, 0x16u);
      }
    }

    __int128 v13 = (void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    int v14 = v8;
  }

  else
  {
    if ((int)MediaAnalysisLogLevel(0LL, v7) >= 6)
    {
      uint64_t v15 = VCPLogInstance();
      __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      os_log_type_t v17 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        int v21 = 138412546;
        uint64_t v22 = v18;
        __int16 v23 = 2112;
        id v24 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "%@ Request completed with analysis for assets %@",  (uint8_t *)&v21,  0x16u);
      }
    }

    __int128 v13 = (void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    int v14 = v5;
  }

  id v19 = v14;
  id v20 = *v13;
  void *v13 = v19;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10008A2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10008A2EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_10008A8B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008A978(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v8 = v6;
  if (v6)
  {
    if ((int)MediaAnalysisLogLevel(v6, v7) >= 3)
    {
      uint64_t v9 = VCPLogInstance();
      __int128 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        int v21 = 138412546;
        uint64_t v22 = v12;
        __int16 v23 = 2112;
        id v24 = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "%@ Request failed with error: %@", (uint8_t *)&v21, 0x16u);
      }
    }

    __int128 v13 = (void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    int v14 = v8;
  }

  else
  {
    if ((int)MediaAnalysisLogLevel(0LL, v7) >= 6)
    {
      uint64_t v15 = VCPLogInstance();
      __int16 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      os_log_type_t v17 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        int v21 = 138412546;
        uint64_t v22 = v18;
        __int16 v23 = 2112;
        id v24 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "%@ Request completed with analysis for assets %@",  (uint8_t *)&v21,  0x16u);
      }
    }

    __int128 v13 = (void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    int v14 = v5;
  }

  id v19 = v14;
  id v20 = *v13;
  void *v13 = v19;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_10008AB24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10008AB48(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_10008AB90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008AFFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

LABEL_112:
    }

    objc_autoreleasePoolPop(v142);
    ++v141;
    if (v145) {
      break;
    }
  }

  v159 = -[NSMutableArray count](self->_videoProcessingRequests, "count");
  if (v159)
  {
    v161 = -[MADComputeServiceProcessingTask isCancelled](self, "isCancelled");
    if (v161)
    {
      v159 = (id)MediaAnalysisLogLevel(v161, v162);
      if ((int)v159 >= 5)
      {
        v163 = VCPLogInstance(v159, v160);
        v164 = (os_log_s *)objc_claimAutoreleasedReturnValue(v163);
        if (os_log_type_enabled(v164, type))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v216 = (uint64_t)v199;
          _os_log_impl( (void *)&_mh_execute_header,  v164,  type,  "%@ Request is canceled before video processing; quitting ...",
            buf,
            0xCu);
        }
      }
    }

    else
    {
      v159 = -[MADComputeServiceProcessingTask _processVideoRequests](self, "_processVideoRequests");
    }
  }

  v165 = MediaAnalysisLogLevel(v159, v160);
  if ((int)v165 >= 6)
  {
    v167 = VCPLogInstance(v165, v166);
    v168 = (os_log_s *)objc_claimAutoreleasedReturnValue(v167);
    if (os_log_type_enabled(v168, v197))
    {
      *(_DWORD *)__int128 buf = 138412290;
      v216 = (uint64_t)v199;
      _os_log_impl((void *)&_mh_execute_header, v168, v197, "%@ Closing secure scoped resource ... ", buf, 0xCu);
    }
  }

  for (unint64_t i = 0LL; ; ++i)
  {
    v170 = -[NSArray count](self->_assetURLs, "count");
    if (i >= v170) {
      break;
    }
    v172 = MediaAnalysisLogLevel(v170, v171);
    if ((int)v172 >= 7)
    {
      v174 = VCPLogInstance(v172, v173);
      v175 = (os_log_s *)objc_claimAutoreleasedReturnValue(v174);
      if (os_log_type_enabled(v175, v10))
      {
        v176 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndexedSubscript:](self->_assetURLs, "objectAtIndexedSubscript:", i));
        *(_DWORD *)__int128 buf = 138412546;
        v216 = (uint64_t)v199;
        v217 = 2112;
        v218 = (uint64_t)v176;
        _os_log_impl((void *)&_mh_execute_header, v175, v10, "%@ Closing secure scoped URL %@", buf, 0x16u);
      }
    }

    v177 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray objectAtIndexedSubscript:](self->_assetURLs, "objectAtIndexedSubscript:", i));
    [v177 stopAccessingSecurityScopedResource];
  }

  v178 = -[MADComputeServiceProcessingTask isCancelled](self, "isCancelled");
  completionHandler = (void (**)(id, void *))self->_completionHandler;
  if (v178)
  {
    v205 = NSLocalizedDescriptionKey;
    v180 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ Request is canceled",  v199));
    v206 = v180;
    v181 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v206,  &v205,  1LL));
    v182 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL,  v181));
    completionHandler[2](completionHandler, v182);
  }

  else
  {
    completionHandler[2](completionHandler, 0LL);
  }

  return 0;
}
        }

        else
        {
          v153 = MediaAnalysisLogLevel(0LL, v143);
          if ((int)v153 >= 3)
          {
            v155 = VCPLogInstance(v153, v154);
            oslog = (os_log_t)objc_claimAutoreleasedReturnValue(v155);
            if (os_log_type_enabled(oslog, v187))
            {
              v156 = (void *)objc_claimAutoreleasedReturnValue([v192 objectAtIndexedSubscript:v140]);
              v157 = (void *)objc_claimAutoreleasedReturnValue([v156 localIdentifier]);
              *(_DWORD *)__int128 buf = 138412546;
              *(void *)&uint8_t buf[4] = v196;
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v157;
              _os_log_impl( (void *)&_mh_execute_header,  oslog,  v187,  "%@ Invalid rejecting person identification %@ for face",  buf,  0x16u);
            }

            goto LABEL_112;
          }
        }

        objc_autoreleasePoolPop(context);
        continue;
      }
    }

    v128 = MediaAnalysisLogLevel(v64, v65);
    if ((int)v128 >= 3)
    {
      v130 = VCPLogInstance(v128, v129);
      id v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v130);
      if (os_log_type_enabled(v60, v187))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v196;
        v124 = v60;
        v125 = v187;
        v126 = "%@ Failed to add face with ObservationID = 0; ignoring";
        v127 = 12;
LABEL_86:
        _os_log_impl((void *)&_mh_execute_header, v124, v125, v126, buf, v127);
      }

void sub_10008C43C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33, void *a34)
{
  _Unwind_Resume(a1);
}

void sub_10008CCF0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15, const void *a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, id location)
{
  objc_destroyWeak(v30);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_10008CDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 6)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MADComputeServiceClientHandler] XPC connection interrupted",  v12,  2u);
    }
  }

  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 16);
  *(void *)(v8 + 16) = 0LL;

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  os_log_type_t v11 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained cancelAllRequests];
  }
}

void sub_10008CE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008CE84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)int v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MADComputeServiceClientHandler] XPC connection invalidated",  v14,  2u);
    }
  }

  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(v8 + 16);
  *(void *)(v8 + 16) = 0LL;

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  os_log_type_t v11 = WeakRetained;
  if (WeakRetained)
  {
    [WeakRetained cancelAllRequests];
    uint64_t v12 = (void *)v11[1];
    v11[1] = 0LL;

    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(+[VCPClientManager sharedManager](&OBJC_CLASS___VCPClientManager, "sharedManager"));
    [v13 removeClientHandler:v11];
  }
}

void sub_10008CF74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008CF90(id a1, NSError *a2)
{
  id v2 = a2;
  if ((int)MediaAnalysisLogLevel(v2, v3) >= 3)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v5, v6))
    {
      int v7 = 138412290;
      uint64_t v8 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[MADComputeServiceClientHandler] Connecting client proxy error %@",  (uint8_t *)&v7,  0xCu);
    }
  }
}

void sub_10008D058(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008D0B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008D328( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21, void *a22, void *a23)
{
  _Unwind_Resume(a1);
}

void sub_10008D604( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21, void *a22, void *a23)
{
  _Unwind_Resume(a1);
}

void sub_10008DA90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, void *a40)
{
  _Unwind_Resume(a1);
}

id sub_10008DBA4(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:requestID:", *(void *)(a1 + 40));
}

void sub_10008DBB8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  os_log_type_t v11 = v9;
  if (*(void *)(*(void *)(a1 + 32) + 16LL))
  {
    if (v9)
    {
      uint64_t v12 = MediaAnalysisLogLevel(v9, v10);
      if ((int)v12 >= 7)
      {
        uint64_t v14 = VCPLogInstance(v12, v13);
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        os_log_type_t v16 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v15, v16))
        {
          *(_DWORD *)__int128 buf = 138412290;
          __int128 v37 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[MADComputeServiceClientHandler] Entering results handler group with error ... %@",  buf,  0xCu);
        }
      }

      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL));
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      id v19 = *(void **)(v18 + 16);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472LL;
      void v34[2] = sub_10008DEB4;
      v34[3] = &unk_1001BC318;
      v34[4] = v18;
      [v19 handleResults:0 assetRepresentation:v7 requestID:v17 error:v11 acknowledgement:v34];
    }

    else
    {
      uint64_t v25 = MediaAnalysisLogLevel(0LL, v10);
      if ((int)v25 >= 7)
      {
        uint64_t v27 = VCPLogInstance(v25, v26);
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        os_log_type_t v29 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v28, v29))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "[MADComputeServiceClientHandler] Entering results handler group ...",  buf,  2u);
        }
      }

      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL));
      __int128 v30 = *(void **)(*(void *)(a1 + 32) + 16LL);
      id v35 = v8;
      __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v35, 1LL));
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472LL;
      v33[2] = sub_10008DFA4;
      void v33[3] = &unk_1001BC318;
      uint64_t v32 = *(void *)(a1 + 40);
      v33[4] = *(void *)(a1 + 32);
      [v30 handleResults:v31 assetRepresentation:v7 requestID:v32 error:0 acknowledgement:v33];
    }
  }

  else
  {
    uint64_t v20 = MediaAnalysisLogLevel(v9, v10);
    if ((int)v20 >= 6)
    {
      uint64_t v22 = VCPLogInstance(v20, v21);
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      os_log_type_t v24 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v23, v24))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "[MADComputeServiceClientHandler] No remote proxy; exit resultHandler",
          buf,
          2u);
      }
    }
  }
}

void sub_10008DE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008DEB4(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = @"NO";
      if (v2) {
        id v7 = @"YES";
      }
      int v8 = 138412290;
      id v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[MADComputeServiceClientHandler] Received acknowledgement response %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL));
}

void sub_10008DFA4(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = @"NO";
      if (v2) {
        id v7 = @"YES";
      }
      int v8 = 138412290;
      id v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[MADComputeServiceClientHandler] Received acknowledgement response %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL));
}

void sub_10008E094(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 7)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v8, v9))
    {
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[MADComputeServiceClientHandler] Waiting for results handler group ...",  v29,  2u);
    }
  }

  uint64_t v10 = dispatch_group_wait(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v12 = MediaAnalysisLogLevel(v10, v11);
  if ((int)v12 >= 6)
  {
    uint64_t v14 = VCPLogInstance(v12, v13);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    os_log_type_t v16 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v15, v16))
    {
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[MADComputeServiceClientHandler] All results handler calls have returned",  v29,  2u);
    }
  }

  [*(id *)(a1 + 40) timeIntervalSinceNow];
  double v18 = v17;
  v30[0] = VCPAnalytics7458FieldKeyRequestQoS;
  uint64_t v19 = qos_class_self();
  uint64_t v20 = VCPMAQoSDescription(v19);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  v31[0] = v21;
  v30[1] = VCPAnalytics7458FieldKeyRequestCount;
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 48) count]));
  v31[1] = v22;
  v31[2] = @"MACS-URL";
  v30[2] = VCPAnalytics7458FieldKeyRequestType;
  v30[3] = VCPAnalytics7458FieldKeyAssetCount;
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 56) count]));
  v31[3] = v23;
  v30[4] = VCPAnalytics7458FieldKeyClient;
  os_log_type_t v24 = *(const __CFString **)(*(void *)(a1 + 32) + 24LL);
  if (!v24) {
    os_log_type_t v24 = @"Unknown";
  }
  void v31[4] = v24;
  v30[5] = VCPAnalytics7458FieldKeyProcessingTime;
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", -v18));
  v31[5] = v25;
  v30[6] = VCPAnalytics7458FieldKeyError;
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v3 code]));
  v31[6] = v26;
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v31,  v30,  7LL));

  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  [v28 sendEvent:VCPAnalytics7458EventServiceRequest withAnalytics:v27];

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10008E394(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10008E410(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008E700( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, void *a33, void *a34, void *a35)
{
  _Unwind_Resume(a1);
}

id sub_10008E7B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:requestID:", *(void *)(a1 + 40));
}

void sub_10008E7CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v11 = v9;
  if (*(void *)(*(void *)(a1 + 32) + 16LL))
  {
    if (v9)
    {
      uint64_t v12 = MediaAnalysisLogLevel(v9, v10);
      if ((int)v12 >= 7)
      {
        uint64_t v14 = VCPLogInstance(v12, v13);
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        os_log_type_t v16 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v15, v16))
        {
          *(_DWORD *)__int128 buf = 138412290;
          __int128 v37 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[MADComputeServiceClientHandler] Entering results handler group with error ... %@",  buf,  0xCu);
        }
      }

      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL));
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v19 = *(void **)(v18 + 16);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472LL;
      void v34[2] = sub_10008EAC8;
      v34[3] = &unk_1001BC318;
      v34[4] = v18;
      [v19 handleResults:0 assetRepresentation:v7 requestID:v17 error:v11 acknowledgement:v34];
    }

    else
    {
      uint64_t v25 = MediaAnalysisLogLevel(0LL, v10);
      if ((int)v25 >= 7)
      {
        uint64_t v27 = VCPLogInstance(v25, v26);
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        os_log_type_t v29 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v28, v29))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "[MADComputeServiceClientHandler] Entering results handler group ...",  buf,  2u);
        }
      }

      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL));
      __int128 v30 = *(void **)(*(void *)(a1 + 32) + 16LL);
      id v35 = v8;
      __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v35, 1LL));
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472LL;
      v33[2] = sub_10008EBB8;
      void v33[3] = &unk_1001BC318;
      uint64_t v32 = *(void *)(a1 + 40);
      v33[4] = *(void *)(a1 + 32);
      [v30 handleResults:v31 assetRepresentation:v7 requestID:v32 error:0 acknowledgement:v33];
    }
  }

  else
  {
    uint64_t v20 = MediaAnalysisLogLevel(v9, v10);
    if ((int)v20 >= 6)
    {
      uint64_t v22 = VCPLogInstance(v20, v21);
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      os_log_type_t v24 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v23, v24))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "[MADComputeServiceClientHandler] No remote proxy; exit resultHandler",
          buf,
          2u);
      }
    }
  }
}

void sub_10008EA8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008EAC8(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = @"NO";
      if (v2) {
        id v7 = @"YES";
      }
      int v8 = 138412290;
      id v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[MADComputeServiceClientHandler] Received acknowledgement response %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL));
}

void sub_10008EBB8(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = @"NO";
      if (v2) {
        id v7 = @"YES";
      }
      int v8 = 138412290;
      id v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[MADComputeServiceClientHandler] Received acknowledgement response %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL));
}

void sub_10008ECA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 7)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v8, v9))
    {
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[MADComputeServiceClientHandler] Waiting for results handler group ...",  v29,  2u);
    }
  }

  uint64_t v10 = dispatch_group_wait(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v12 = MediaAnalysisLogLevel(v10, v11);
  if ((int)v12 >= 6)
  {
    uint64_t v14 = VCPLogInstance(v12, v13);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    os_log_type_t v16 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v15, v16))
    {
      *(_WORD *)os_log_type_t v29 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[MADComputeServiceClientHandler] All results handler calls have returned",  v29,  2u);
    }
  }

  [*(id *)(a1 + 40) timeIntervalSinceNow];
  double v18 = v17;
  v30[0] = VCPAnalytics7458FieldKeyRequestQoS;
  uint64_t v19 = qos_class_self();
  uint64_t v20 = VCPMAQoSDescription(v19);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  v31[0] = v21;
  v30[1] = VCPAnalytics7458FieldKeyRequestCount;
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 48) count]));
  v31[1] = v22;
  v31[2] = @"MACS-Photos";
  v30[2] = VCPAnalytics7458FieldKeyRequestType;
  v30[3] = VCPAnalytics7458FieldKeyAssetCount;
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 56) count]));
  v31[3] = v23;
  v30[4] = VCPAnalytics7458FieldKeyClient;
  os_log_type_t v24 = *(const __CFString **)(*(void *)(a1 + 32) + 24LL);
  if (!v24) {
    os_log_type_t v24 = @"Unknown";
  }
  void v31[4] = v24;
  v30[5] = VCPAnalytics7458FieldKeyProcessingTime;
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", -v18));
  v31[5] = v25;
  v30[6] = VCPAnalytics7458FieldKeyError;
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v3 code]));
  v31[6] = v26;
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v31,  v30,  7LL));

  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  [v28 sendEvent:VCPAnalytics7458EventServiceRequest withAnalytics:v27];

  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_10008EFA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10008F024(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008F2C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  double v17 = v15;

  _Unwind_Resume(a1);
}

void sub_10008F4D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008F818( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36)
{
  _Unwind_Resume(a1);
}

id sub_10008F8B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "reportProgress:requestID:", *(void *)(a1 + 40));
}

void sub_10008F8CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v11 = v9;
  if (*(void *)(*(void *)(a1 + 32) + 16LL))
  {
    if (v9)
    {
      uint64_t v12 = MediaAnalysisLogLevel(v9, v10);
      if ((int)v12 >= 7)
      {
        uint64_t v14 = VCPLogInstance(v12, v13);
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        os_log_type_t v16 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v15, v16))
        {
          *(_DWORD *)__int128 buf = 138412290;
          __int128 v37 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[MADComputeServiceClientHandler] Entering results handler group with error ... %@",  buf,  0xCu);
        }
      }

      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL));
      uint64_t v18 = *(void *)(a1 + 32);
      uint64_t v17 = *(void *)(a1 + 40);
      uint64_t v19 = *(void **)(v18 + 16);
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472LL;
      void v34[2] = sub_10008FBC8;
      v34[3] = &unk_1001BC318;
      v34[4] = v18;
      [v19 handleResults:0 assetRepresentation:v7 requestID:v17 error:v11 acknowledgement:v34];
    }

    else
    {
      uint64_t v25 = MediaAnalysisLogLevel(0LL, v10);
      if ((int)v25 >= 7)
      {
        uint64_t v27 = VCPLogInstance(v25, v26);
        __int128 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
        os_log_type_t v29 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v28, v29))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "[MADComputeServiceClientHandler] Entering results handler group ...",  buf,  2u);
        }
      }

      dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL));
      __int128 v30 = *(void **)(*(void *)(a1 + 32) + 16LL);
      id v35 = v8;
      __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v35, 1LL));
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472LL;
      v33[2] = sub_10008FCB8;
      void v33[3] = &unk_1001BC318;
      uint64_t v32 = *(void *)(a1 + 40);
      v33[4] = *(void *)(a1 + 32);
      [v30 handleResults:v31 assetRepresentation:v7 requestID:v32 error:0 acknowledgement:v33];
    }
  }

  else
  {
    uint64_t v20 = MediaAnalysisLogLevel(v9, v10);
    if ((int)v20 >= 6)
    {
      uint64_t v22 = VCPLogInstance(v20, v21);
      __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
      os_log_type_t v24 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v23, v24))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "[MADComputeServiceClientHandler] No remote proxy; exit resultHandler",
          buf,
          2u);
      }
    }
  }
}

void sub_10008FB8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008FBC8(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = @"NO";
      if (v2) {
        id v7 = @"YES";
      }
      int v8 = 138412290;
      id v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[MADComputeServiceClientHandler] Received acknowledgement response %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL));
}

void sub_10008FCB8(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 7)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v5, v6))
    {
      id v7 = @"NO";
      if (v2) {
        id v7 = @"YES";
      }
      int v8 = 138412290;
      id v9 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[MADComputeServiceClientHandler] Received acknowledgement response %@",  (uint8_t *)&v8,  0xCu);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL));
}

void sub_10008FDA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 7)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v8, v9))
    {
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[MADComputeServiceClientHandler] Waiting for results handler group ...",  v27,  2u);
    }
  }

  uint64_t v10 = dispatch_group_wait(*(dispatch_group_t *)(*(void *)(a1 + 32) + 48LL), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v12 = MediaAnalysisLogLevel(v10, v11);
  if ((int)v12 >= 6)
  {
    uint64_t v14 = VCPLogInstance(v12, v13);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    os_log_type_t v16 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v15, v16))
    {
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[MADComputeServiceClientHandler] All results handler calls have returned",  v27,  2u);
    }
  }

  [*(id *)(a1 + 40) timeIntervalSinceNow];
  double v18 = v17;
  v28[0] = VCPAnalytics7458FieldKeyRequestQoS;
  uint64_t v19 = qos_class_self();
  uint64_t v20 = VCPMAQoSDescription(v19);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  v29[0] = v21;
  v29[1] = @"MACS-Resume";
  v28[1] = VCPAnalytics7458FieldKeyRequestType;
  v28[2] = VCPAnalytics7458FieldKeyClient;
  uint64_t v22 = *(const __CFString **)(*(void *)(a1 + 32) + 24LL);
  if (!v22) {
    uint64_t v22 = @"Unknown";
  }
  v29[2] = v22;
  v28[3] = VCPAnalytics7458FieldKeyProcessingTime;
  __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", -v18));
  v29[3] = v23;
  void v28[4] = VCPAnalytics7458FieldKeyError;
  os_log_type_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", [v3 code]));
  v29[4] = v24;
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v29,  v28,  5LL));

  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  [v26 sendEvent:VCPAnalytics7458EventServiceRequest withAnalytics:v25];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100090030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100090094(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10009031C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100090560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000906BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000908DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100090B14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100090F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091010(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000914C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000916E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009176C(uint64_t a1, os_log_s *a2)
{
  uint64_t v2 = *(void *)(a1 + 160);
  uint64_t v3 = *(void *)(a1 + 168);
  int v4 = 138412546;
  uint64_t v5 = v2;
  __int16 v6 = 2112;
  uint64_t v7 = v3;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a2,  OS_LOG_TYPE_FAULT,  "%@[%@] Task must be MADPhotosAssetProcessingTask!",  (uint8_t *)&v4,  0x16u);
}

void sub_100091900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009198C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100091E64( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_100092DAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100093030(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v2 pet];

  uint64_t v3 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancel]);
  uint64_t v4 = v3[2]();

  return v4;
}

void sub_10009308C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000930A0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v2 pet];

  uint64_t v3 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancel]);
  uint64_t v4 = v3[2]();

  return v4;
}

void sub_1000930FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100093110(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v2 pet];

  uint64_t v3 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancel]);
  uint64_t v4 = v3[2]();

  return v4;
}

void sub_10009316C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000932A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100093354( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

LABEL_63:
              uint64_t v52 = (char *)v52 + 1;
            }

            while (v50 != v52);
            int v66 = [obj countByEnumeratingWithState:&v132 objects:v144 count:16];
            uint64_t v50 = v66;
          }

          while (v66);
        }

        v130 = 0u;
        v131 = 0u;
        v128 = 0u;
        v129 = 0u;
        uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue([v24 allValues]);
        v114 = v95;
        uint64_t v67 = [v95 countByEnumeratingWithState:&v128 objects:v143 count:16];
        if (!v67)
        {
          uint64_t v63 = 0;
          goto LABEL_139;
        }

        uint64_t v117 = *(void *)v129;
LABEL_73:
        __int128 v68 = 0LL;
        while (1)
        {
          if (*(void *)v129 != v117) {
            objc_enumerationMutation(v114);
          }
          os_log_type_t v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v128 + 1) + 8 * v68) localIdentifier]);
          __int128 v70 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
          uint32_t v71 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset vcp_fetchOptionsForLibrary:forTaskID:]( &OBJC_CLASS___PHAsset,  "vcp_fetchOptionsForLibrary:forTaskID:",  v70,  1LL));

          [v71 setIncludeTrashedAssets:1];
          v142 = v69;
          uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v142,  1LL));
          uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset fetchAssetsWithLocalIdentifiers:options:]( &OBJC_CLASS___PHAsset,  "fetchAssetsWithLocalIdentifiers:options:",  v72,  v71));

          uint64_t v74 = [v73 count];
          if (v74)
          {
            uint64_t v76 = MediaAnalysisLogLevel(v74, v75);
            if ((int)v76 >= 5)
            {
              uint64_t v78 = VCPLogInstance(v76, v77);
              os_log_type_t v79 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
              if (os_log_type_enabled(v79, v121))
              {
                *(_DWORD *)__int128 buf = 138412290;
                v146 = (const char *)v69;
                _os_log_impl( (void *)&_mh_execute_header,  v79,  v121,  "  [%@] Asset in trash; marking analysis for deletion",
                  buf,
                  0xCu);
              }
            }

            uint64_t v80 = [v124 setDeletePendingFlag:1 localIdentifier:v69];
            uint64_t v63 = 6;
            if (v80 == -108 || v80 == -36)
            {
              uint64_t v81 = v80;
            }

            else
            {
              uint64_t v81 = v80;
              if (v80 != -23)
              {
                uint64_t v63 = 0;
                uint64_t v81 = v125;
              }
            }

            if (v80 == -108 || v80 == -36 || v80 == -23) {
              goto LABEL_102;
            }
          }

          else
          {
            v82 = MediaAnalysisLogLevel(0LL, v75);
            if ((int)v82 >= 5)
            {
              uint64_t v84 = VCPLogInstance(v82, v83);
              uint64_t v85 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
              if (os_log_type_enabled(v85, v121))
              {
                *(_DWORD *)__int128 buf = 138412290;
                v146 = (const char *)v69;
                _os_log_impl( (void *)&_mh_execute_header,  v85,  v121,  "  [%@] Asset purged; removing analysis",
                  buf,
                  0xCu);
              }
            }

            uint64_t v86 = [v124 deleteAnalysisForAsset:v69];
            uint64_t v63 = 6;
            if (v86 == -108 || v86 == -36)
            {
              uint64_t v81 = v86;
            }

            else
            {
              uint64_t v81 = v86;
              if (v86 != -23)
              {
                uint64_t v63 = 0;
                uint64_t v81 = v125;
              }
            }

            if (v86 == -108 || v86 == -36 || v86 == -23) {
              goto LABEL_102;
            }
            __int128 v111 = 1;
          }

          if ((unint64_t)++v118 < 0x3E8)
          {
            v125 = v81;
LABEL_114:
            uint64_t v63 = 0;
            goto LABEL_103;
          }

          if ((v111 & 1) == 0) {
            goto LABEL_109;
          }
          __int128 v88 = [v124 setValue:1 forKey:@"HasDeletedAssetsSinceLastBackup"];
          if (v88 == -108 || v88 == -36)
          {
            os_log_type_t v89 = v88;
          }

          else
          {
            os_log_type_t v89 = v88;
            if (v88 != -23) {
              os_log_type_t v89 = v110;
            }
          }

          __int128 v110 = v89;
          uint64_t v63 = 1;
          if (v88 != -108 && v88 != -36 && v88 != -23)
          {
LABEL_109:
            uint64_t v87 = [v124 commit];
            uint64_t v63 = 6;
            if (v87 == -108 || v87 == -36)
            {
              v125 = v87;
            }

            else
            {
              v125 = v87;
              if (v87 != -23)
              {
                uint64_t v63 = 0;
                v125 = v81;
              }
            }

            if (v87 == -108 || v87 == -36 || v87 == -23) {
              goto LABEL_103;
            }
            __int16 v118 = 0LL;
            goto LABEL_114;
          }

            __int128 v31 = 1;
            goto LABEL_64;
          }

          if (v17)
          {
            v82 = MediaAnalysisLogLevel(v50, v51);
            if ((int)v82 >= 6)
            {
              uint64_t v84 = VCPLogInstance(v82, v83);
              uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v84);
              uint64_t v85 = VCPLogToOSLogType[6];
              if (!os_log_type_enabled(v47, v85)) {
                goto LABEL_52;
              }
              LOWORD(v87) = 0;
              os_log_type_t v49 = "  Has asset deletion changes since last backup; performing early backup";
              uint64_t v72 = v47;
              uint64_t v73 = v85;
              uint64_t v74 = 2;
              goto LABEL_51;
            }

            goto LABEL_63;
          }
        }

        id v53 = [v15 timeIntervalSinceDate:v14];
        if (v55 >= 86400.0 && v17 != 0LL)
        {
          uint64_t v75 = MediaAnalysisLogLevel(v53, v54);
          if ((int)v75 >= 6)
          {
            uint64_t v77 = VCPLogInstance(v75, v76);
            uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
            uint64_t v48 = VCPLogToOSLogType[6];
            if (os_log_type_enabled(v47, v48))
            {
              uint64_t v87 = 138412290;
              *(void *)__int128 v88 = v14;
              os_log_type_t v49 = "  Has asset deletion changes since last backup (%@); performing 1-day early backup";
              goto LABEL_50;
            }

    __int128 v30 = 13;
LABEL_85:

    ++v128;
    goto LABEL_86;
  }

  double v17 = MediaAnalysisLogLevel(v7, v8);
  if ((int)v17 >= 3)
  {
    uint64_t v19 = VCPLogInstance(v17, v18);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    uint64_t v21 = VCPLogToOSLogType[3];
    v131 = v20;
    if (os_log_type_enabled(v20, v21))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "  Failed to create backup file", buf, 2u);
    }

    uint64_t v11 = -23;
    goto LABEL_101;
  }

  uint64_t v11 = -23;
LABEL_102:

  objc_autoreleasePoolPop(context);
  __int128 v107 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  __int128 v108 = v107;
  if (v11)
  {
    if ([v107 fileExistsAtPath:v137])
    {
      id v109 = [v108 removeItemAtPath:v137 error:0];
      if ((v109 & 1) == 0)
      {
        __int128 v111 = MediaAnalysisLogLevel(v109, v110);
        if ((int)v111 >= 4)
        {
          __int128 v113 = VCPLogInstance(v111, v112);
          v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
          uint64_t v115 = VCPLogToOSLogType[4];
          if (os_log_type_enabled(v114, v115))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v114,  v115,  "  Failed to delete intermediate file on aborted backup",  buf,  2u);
          }
        }
      }
    }
  }

  return v11;
}

  return 0;
}

LABEL_152:
  LODWORD(v15) = v110;
  uint64_t v19 = v111 & 1;
  if (v118)
  {
LABEL_153:
    if (v19)
    {
      v102 = [v124 setValue:1 forKey:@"HasDeletedAssetsSinceLastBackup"];
      if (v102 == -108)
      {
        id v104 = -108;
      }

      else
      {
        id v103 = v102 == -36 || v102 == -23;
        id v104 = v102;
        if (!v103) {
          id v104 = (int)v15;
        }
      }

      if (v102 == -108 || (v102 != -36 ? (__int128 v107 = v102 == -23) : (__int128 v107 = 1), v107))
      {
        v125 = v104;
        goto LABEL_178;
      }
    }

    else
    {
      id v104 = (int)v15;
    }

    __int128 v105 = [v124 commit];
    if (v105 == -108 || v105 == -36)
    {
      __int128 v106 = v105;
    }

    else
    {
      __int128 v106 = v105;
      if (v105 != -23) {
        __int128 v106 = v104;
      }
    }

    if (v105 == -108 || v105 == -36 || v105 == -23)
    {
      v125 = v106;
      goto LABEL_178;
    }

    goto LABEL_147;
  }

    if (v11->_requirement != 20) {
      break;
    }
  }

  while (v48);
  if (-[PHPhotoLibrary vcp_isSyndicationLibrary](v11->_photoLibrary, "vcp_isSyndicationLibrary"))
  {
    v240 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDefaultPhotoLibraryManager sharedManager]( &OBJC_CLASS___VCPDefaultPhotoLibraryManager,  "sharedManager"));
    v241 = (void *)objc_claimAutoreleasedReturnValue([v240 defaultPhotoLibrary]);

    v242 = -[VCPPhotosQuickFaceIdentificationManager initWithPhotoLibrary:]( objc_alloc(&OBJC_CLASS___VCPPhotosQuickFaceIdentificationManager),  "initWithPhotoLibrary:",  v241);
    photoLibrardouble y = v272->_photoLibrary;
    v273[0] = _NSConcreteStackBlock;
    v273[1] = 3221225472LL;
    v273[2] = sub_1000F1E00;
    v273[3] = &unk_1001B9E98;
    v273[4] = v272;
    -[VCPPhotosQuickFaceIdentificationManager personIdentificationForSyndicationPhotoLibrary:withCancelOrExtendTimeoutBlock:]( v242,  "personIdentificationForSyndicationPhotoLibrary:withCancelOrExtendTimeoutBlock:",  photoLibrary,  v273);

    uint64_t v11 = v272;
  }

  else
  {
    -[MADPhotosPersonProcessingTask _updateVIPModels](v11, "_updateVIPModels");
  }

  v244 = -[VCPTimeMeasurement stop](v259, "stop");
  v246 = MediaAnalysisLogLevel(v244, v245);
  if ((int)v246 >= 6)
  {
    v248 = VCPLogInstance(v246, v247);
    id v91 = (VCPTimeMeasurement *)objc_claimAutoreleasedReturnValue(v248);
    if (os_log_type_enabled(v91, v266))
    {
      v249 = v11->_logPrefix;
      -[VCPTimeMeasurement elapsedTimeSeconds](v259, "elapsedTimeSeconds");
      *(_DWORD *)__int128 buf = 138412546;
      *(void *)&uint8_t buf[4] = v249;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v250;
      _os_log_impl( (void *)&_mh_execute_header,  v91,  v266,  "%@ Finished Legacy Person Processing (%.2f seconds)",  buf,  0x16u);
    }

LABEL_146:
  if (v19) {
    goto LABEL_153;
  }
LABEL_147:
  uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
  VCPCoreAnalyticsReportEventFullAnalysisOverallProgress(v96);

  uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
  v127[0] = _NSConcreteStackBlock;
  v127[1] = 3221225472LL;
  v127[2] = sub_1000944F0;
  v127[3] = &unk_1001B9E98;
  v127[4] = self;
  +[MADVectorDatabaseUtilities syncWithPhotoLibrary:ignoreExpiration:threshold:cancelBlock:error:]( &OBJC_CLASS___MADVectorDatabaseUtilities,  "syncWithPhotoLibrary:ignoreExpiration:threshold:cancelBlock:error:",  v97,  1LL,  v127,  0LL,  0.2);

  os_log_type_t v99 = VCPSignPostLog(v98);
  uint64_t v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
  v101 = v100;
  if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v100))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v101,  OS_SIGNPOST_INTERVAL_END,  spid,  "VCPAssetMaintenanceTask",  (const char *)&unk_100199097,  buf,  2u);
  }

LABEL_178:
  return v125;
}

void sub_1000941A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, void *a31, uint64_t a32, void *a33)
{
  _Unwind_Resume(a1);
}

void sub_100094420(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)a1[4];
  uint64_t v5 = (void *)a1[5];
  id v10 = v3;
  __int16 v6 = (void *)objc_claimAutoreleasedReturnValue([v3 localIdentifier]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v6]);
  objc_msgSend(v4, "updateStatsFlags:forPHAsset:withDatabase:", objc_msgSend(v7, "statsFlags"), v10, a1[6]);

  int v8 = (void *)a1[7];
  os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue([v10 localIdentifier]);
  [v8 removeObject:v9];
}

void sub_1000944C0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1000944F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_10009459C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100094AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100095250( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100095388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000954B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

VCPBackgroundProcessingMetrics *sub_100095508(uint64_t a1)
{
  return  -[VCPBackgroundProcessingMetrics initWithPhotoLibrary:]( objc_alloc(&OBJC_CLASS___VCPBackgroundProcessingMetrics),  "initWithPhotoLibrary:",  *(void *)(a1 + 32));
}

void sub_100095BA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100095F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009656C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100096634(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  uint64_t v2 = (void *)qword_1001E6520;
  qword_1001E6520 = (uint64_t)v1;
}

void sub_1000967E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100096820(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000968A0(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  uint64_t v2 = (void *)qword_1001E6530;
  qword_1001E6530 = (uint64_t)v1;
}

void sub_100096DB4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, void *a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, void *a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, id a38)
{
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v43 - 176), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_100096EB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_100096EC8(uint64_t a1)
{
}

void sub_100096ED0(uint64_t a1, uint64_t a2, double a3)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 5)
  {
    uint64_t v5 = VCPLogInstance();
    __int16 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2048;
      double v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ %.2f%% complete", (uint8_t *)&v9, 0x16u);
    }
  }

uint64_t sub_100096FAC(void *a1)
{
  id v2 = [*(id *)(*(void *)(a1[6] + 8) + 40) stop];
  uint64_t v4 = MediaAnalysisLogLevel(v2, v3);
  if ((int)v4 >= 5)
  {
    uint64_t v6 = VCPLogInstance(v4, v5);
    os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    os_log_type_t v8 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = a1[4];
      [*(id *)(*(void *)(a1[6] + 8) + 40) elapsedTimeSeconds];
      int v22 = 138412546;
      uint64_t v23 = v9;
      __int16 v24 = 2048;
      uint64_t v25 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%@ Ran for %0.6fs", (uint8_t *)&v22, 0x16u);
    }
  }

  uint64_t v11 = *(void *)(a1[7] + 8LL);
  double v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;

  uint64_t v15 = MediaAnalysisLogLevel(v13, v14);
  if ((int)v15 >= 5)
  {
    uint64_t v17 = VCPLogInstance(v15, v16);
    double v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    os_log_type_t v19 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = a1[4];
      int v22 = 138412290;
      uint64_t v23 = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%@ Finished background processing", (uint8_t *)&v22, 0xCu);
    }
  }

  return (*(uint64_t (**)(void))(a1[5] + 16LL))();
}

void sub_100097138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100097150(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100097568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100097768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100097820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100097980( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPVideoFramesCaptionTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100097F28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
}

BOOL sub_100097FE4(id a1)
{
  return 0;
}

void sub_100098150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009826C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000983D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100098478(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 40) requestID]));
  [v2 removeObjectForKey:v3];

  uint64_t v6 = MediaAnalysisLogLevel(v4, v5);
  if ((int)v6 >= 7)
  {
    uint64_t v8 = VCPLogInstance(v6, v7);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    os_log_type_t v10 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) task]);
      id v12 = (id)objc_opt_class(v11);
      id v13 = [*(id *)(a1 + 40) requestID];
      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8LL);
      int v19 = 138413058;
      id v20 = v12;
      __int16 v21 = 2048;
      id v22 = v13;
      __int16 v23 = 1024;
      int v24 = v14;
      __int16 v25 = 2112;
      uint64_t v26 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "[QueuingScheduler] Completed task %@ (MADRequestID %lu, VCPMADTaskID %u) for client %@",  (uint8_t *)&v19,  0x26u);
    }
  }

  do
  {
    id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
    if (!result) {
      break;
    }
    uint64_t v17 = *(id **)(a1 + 32);
    double v18 = (void *)objc_claimAutoreleasedReturnValue([v17[2] objectAtIndexedSubscript:0]);
    LOBYTE(v17) = [v17 scheduleTask:v18];

    id result = [*(id *)(*(void *)(a1 + 32) + 16) removeObjectAtIndex:0];
  }

  while ((v17 & 1) == 0);
  return result;
}

void sub_100098624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100098C78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id *location, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, id a18)
{
  objc_destroyWeak(location);
  objc_destroyWeak(&a18);

  _Unwind_Resume(a1);
}

void sub_100098DCC(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained) {
    [WeakRetained completeTaskWithInfo:*(void *)(a1 + 32) madTaskID:a2];
  }
}

void sub_100098E18( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10009902C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009906C(uint64_t a1)
{
  id v2 = -[MADServiceTaskInformation initWithTask:requestID:schedulingErrorHandler:]( objc_alloc(&OBJC_CLASS___MADServiceTaskInformation),  "initWithTask:requestID:schedulingErrorHandler:",  *(void *)(a1 + 32),  *(void *)(a1 + 56),  *(void *)(a1 + 48));
  id v3 = [*(id *)(*(void *)(a1 + 40) + 24) count];
  id v4 = [(id)objc_opt_class(*(void *)(a1 + 40)) scheduledRequestLimit];
  if (v3 >= v4)
  {
    uint64_t v15 = MediaAnalysisLogLevel(v4, v5);
    if ((int)v15 >= 7)
    {
      uint64_t v17 = VCPLogInstance(v15, v16);
      double v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      os_log_type_t v19 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v18, v19))
      {
        id v20 = (void *)objc_claimAutoreleasedReturnValue(-[MADServiceTaskInformation task](v2, "task"));
        id v21 = (id)objc_opt_class(v20);
        unint64_t v22 = -[MADServiceTaskInformation requestID](v2, "requestID");
        uint64_t v23 = *(void *)(*(void *)(a1 + 40) + 8LL);
        int v24 = 138412802;
        id v25 = v21;
        __int16 v26 = 2048;
        unint64_t v27 = v22;
        __int16 v28 = 2112;
        uint64_t v29 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "[QueuingScheduler] Queuing foreground task %@ (MADRequestID %lu) for client %@ to pending list",  (uint8_t *)&v24,  0x20u);
      }
    }

    [*(id *)(*(void *)(a1 + 40) + 16) addObject:v2];
  }

  else
  {
    uint64_t v6 = MediaAnalysisLogLevel(v4, v5);
    if ((int)v6 >= 7)
    {
      uint64_t v8 = VCPLogInstance(v6, v7);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      os_log_type_t v10 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[MADServiceTaskInformation task](v2, "task"));
        id v12 = (id)objc_opt_class(v11);
        unint64_t v13 = -[MADServiceTaskInformation requestID](v2, "requestID");
        uint64_t v14 = *(void *)(*(void *)(a1 + 40) + 8LL);
        int v24 = 138412802;
        id v25 = v12;
        __int16 v26 = 2048;
        unint64_t v27 = v13;
        __int16 v28 = 2112;
        uint64_t v29 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "[QueuingScheduler] Submitting foreground task %@ (MADRequestID %lu) for client %@ for scheduling",  (uint8_t *)&v24,  0x20u);
      }
    }

    [*(id *)(a1 + 40) scheduleTask:v2];
  }
}

void sub_100099298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000993C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, id a22)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000993F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_100099404(uint64_t a1)
{
}

void sub_10009940C(void *a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 6)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = a1[6];
      uint64_t v9 = *(void **)(a1[4] + 8LL);
      int v45 = 134218242;
      uint64_t v46 = v8;
      __int16 v47 = 2112;
      uint64_t v48 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[QueuingScheduler] Cancelling task (MADRequestID %lu) for client %@",  (uint8_t *)&v45,  0x16u);
    }
  }

  os_log_type_t v10 = *(void **)(a1[4] + 24LL);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a1[6]));
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 objectForKeyedSubscript:v11]);

  if (v12)
  {
    uint64_t v15 = MediaAnalysisLogLevel(v13, v14);
    if ((int)v15 >= 7)
    {
      uint64_t v17 = VCPLogInstance(v15, v16);
      double v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      os_log_type_t v19 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = a1[6];
        id v21 = (void *)objc_claimAutoreleasedReturnValue([v12 scheduledTaskID]);
        uint64_t v22 = *(void *)(a1[4] + 8LL);
        int v45 = 134218498;
        uint64_t v46 = v20;
        __int16 v47 = 2112;
        uint64_t v48 = v21;
        __int16 v49 = 2112;
        uint64_t v50 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "[QueuingScheduler] Attempting to cancel task (MADRequestID %lu, VCPMADTaskID %@) for client %@",  (uint8_t *)&v45,  0x20u);
      }
    }

    uint64_t v23 = objc_claimAutoreleasedReturnValue([v12 scheduledTaskID]);
    uint64_t v24 = *(void *)(a1[5] + 8LL);
    id v25 = *(os_log_s **)(v24 + 40);
    *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v23;
  }

  else
  {
    for (unint64_t i = 0LL; ; ++i)
    {
      id v27 = [*(id *)(a1[4] + 16) count];
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) objectAtIndexedSubscript:i]);
      BOOL v30 = [v29 requestID] == (id)a1[6];

      if (v30)
      {
        id v38 = [*(id *)(a1[4] + 16) removeObjectAtIndex:i];
        uint64_t v40 = MediaAnalysisLogLevel(v38, v39);
        uint64_t v42 = VCPLogInstance(v40, v41);
        id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
        os_log_type_t v34 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v25, v34))
        {
          uint64_t v43 = a1[6];
          uint64_t v44 = *(void **)(a1[4] + 8LL);
          int v45 = 134218242;
          uint64_t v46 = v43;
          __int16 v47 = 2112;
          uint64_t v48 = v44;
          __int128 v37 = "[QueuingScheduler] Removed task (MADRequestID %lu) for client %@ from pending list";
          goto LABEL_23;
        }

        goto LABEL_11;
      }
    }

    uint64_t v31 = MediaAnalysisLogLevel(v27, v28);
    uint64_t v33 = VCPLogInstance(v31, v32);
    id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    os_log_type_t v34 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v25, v34))
    {
      uint64_t v35 = a1[6];
      __int128 v36 = *(void **)(a1[4] + 8LL);
      int v45 = 134218242;
      uint64_t v46 = v35;
      __int16 v47 = 2112;
      uint64_t v48 = v36;
      __int128 v37 = "[QueuingScheduler] Task (MADRequestID %lu) for client %@ already finished or cancelled, unable to cancel";
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v25, v34, v37, (uint8_t *)&v45, 0x16u);
    }
  }

void sub_100099734(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100099978( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, id a29, char a30)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

id sub_1000999D0(void *a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 6)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1[4] + 8LL);
      int v13 = 138412290;
      uint64_t v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[QueuingScheduler] Cancelling all tasks for client %@",  (uint8_t *)&v13,  0xCu);
    }
  }

  uint64_t v9 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) allValues]);
  uint64_t v10 = *(void *)(a1[5] + 8LL);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v9;

  *(void *)(*(void *)(a1[6] + 8) + 24) += [*(id *)(a1[4] + 16) count];
  return [*(id *)(a1[4] + 16) removeAllObjects];
}

id sub_100099B74(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 16) count];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

id sub_100099C34(uint64_t a1)
{
  id v2 = (char *)[*(id *)(*(void *)(a1 + 32) + 16) count];
  id result = [*(id *)(*(void *)(a1 + 32) + 24) count];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = &v2[(void)result];
  return result;
}

void sub_100099D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100099E2C(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  id v2 = (void *)qword_1001E6540;
  qword_1001E6540 = (uint64_t)v1;
}

uint64_t sub_10009A780(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10009A81C;
  block[3] = &unk_1001BC6A0;
  id v5 = *(id *)(a1 + 32);
  if (qword_1001E6550 != -1) {
    dispatch_once(&qword_1001E6550, block);
  }
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();

  return v2;
}

void sub_10009A81C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[MADComputeServiceBackgroundSystemTask sharedTask]( &OBJC_CLASS___MADComputeServiceBackgroundSystemTask,  "sharedTask"));
  id v12 = 0LL;
  [v2 submitTask:&v12];
  id v3 = v12;

  if (v3)
  {
    uint64_t v6 = MediaAnalysisLogLevel(v4, v5);
    if ((int)v6 >= 3)
    {
      uint64_t v8 = VCPLogInstance(v6, v7);
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      os_log_type_t v10 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v14 = v11;
        __int16 v15 = 2112;
        id v16 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "%@ Failed to submit the BGST task with error: %@",  buf,  0x16u);
      }
    }
  }
}

uint64_t sub_10009A924(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  [a2 code]);
}

void sub_10009B398(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  id v3 = *(void **)(*(void *)(a1 + 32) + 56LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
  [v3 setObject:v2 forKeyedSubscript:v4];

  uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 64);
  *(void *)(v6 + 64) = v5;
}

void sub_10009B4E4(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(a1 + 32) + 72LL);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 56LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
  [v2 removeObjectForKey:v3];

  uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 64);
  *(void *)(v5 + 64) = v4;

  uint64_t v9 = MediaAnalysisLogLevel(v7, v8);
  if ((int)v9 >= 7)
  {
    uint64_t v11 = VCPLogInstance(v9, v10);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    os_log_type_t v13 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v12, v13))
    {
      unsigned int v14 = [*(id *)(*(void *)(a1 + 32) + 56) count];
      v15[0] = 67109120;
      v15[1] = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[FaceCrop] %d downloads pending", (uint8_t *)v15, 8u);
    }
  }

void sub_10009B6B4(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v3 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 64)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2;
}

void sub_10009B790(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 72LL) = *(_DWORD *)(a1 + 40);
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 56) count];
      int v9 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)__int128 buf = 67109376;
      unsigned int v23 = v8;
      __int16 v24 = 1024;
      int v25 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[FaceCrop][Download] Canceling %d download requests (%d)",  buf,  0xEu);
    }
  }

  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "allValues", 0));
  id v11 = [v10 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v18;
    do
    {
      for (unint64_t i = 0LL; i != v12; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v13) {
          objc_enumerationMutation(v10);
        }
        __int16 v15 = *(void **)(*((void *)&v17 + 1) + 8LL * (void)i);
        id v16 = (void *)objc_claimAutoreleasedReturnValue(+[PHAssetResourceManager defaultManager](&OBJC_CLASS___PHAssetResourceManager, "defaultManager"));
        objc_msgSend(v16, "cancelDataRequest:", objc_msgSend(v15, "intValue"));
      }

      id v12 = [v10 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }

    while (v12);
  }
}

void sub_10009C00C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  unsigned int v8 = *(void **)(a1 + 32);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) asset]);
  id v10 = [v8 removeDownloadRequestIDForAsset:v9];

  if (v6)
  {
    if ((_DWORD)v10)
    {
      uint64_t v13 = *(void **)(a1 + 40);
      uint64_t v14 = (uint64_t)v10;
    }

    else
    {
      uint64_t v15 = MediaAnalysisLogLevel(v11, v12);
      if ((int)v15 >= 3)
      {
        uint64_t v17 = VCPLogInstance(v15, v16);
        __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        os_log_type_t v19 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v18, v19))
        {
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) asset]);
          id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 localIdentifier]);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
          int v23 = 138412546;
          __int16 v24 = v21;
          __int16 v25 = 2112;
          __int16 v26 = v22;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "[FaceCrop][Download][%@] Failed to download resource (%@)",  (uint8_t *)&v23,  0x16u);
        }
      }

      uint64_t v13 = *(void **)(a1 + 40);
      uint64_t v14 = 4294943494LL;
    }

    [v13 setStatus:v14];
  }

  else
  {
    [*(id *)(a1 + 40) setDownloadURL:v5];
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 40LL));
}

void sub_10009C88C(uint8_t *a1, void *a2, void *a3, os_log_s *a4)
{
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue([a2 localIdentifier]);
  *(_DWORD *)a1 = 138412290;
  *a3 = v7;
  _os_log_fault_impl( (void *)&_mh_execute_header,  a4,  OS_LOG_TYPE_FAULT,  "[FaceCrop] Failed to query asset for face %@; skip",
    a1,
    0xCu);
}

void sub_10009CA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009CAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009CBB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009CC10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009CEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009CF94( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10009D10C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009D6DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

id sub_10009D800(uint64_t a1)
{
  return [*(id *)(a1 + 32) start];
}

id sub_10009D808(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_10009D9C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009DA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009DE1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_10009DEA4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCanceled];
  id v3 = v1;
  if (!(_DWORD)v1)
  {
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v7 pet];
LABEL_6:

    return v3;
  }

  uint64_t v4 = MediaAnalysisLogLevel(v1, v2);
  if ((int)v4 >= 6)
  {
    uint64_t v6 = VCPLogInstance(v4, v5);
    os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    os_log_type_t v8 = VCPLogToOSLogType[6];
    if (os_log_type_enabled((os_log_t)v7, v8))
    {
      v10[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v7, v8, "Canceling MADProgressManager", (uint8_t *)v10, 2u);
    }

    goto LABEL_6;
  }

  return v3;
}

void sub_10009DF58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009E09C(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  uint64_t v2 = (void *)qword_1001E6558;
  qword_1001E6558 = (uint64_t)v1;
}

void sub_10009E1CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10009E1E4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_10009E1F4(uint64_t a1)
{
}

void sub_10009E1FC(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]]);
  uint64_t v3 = *(void *)(a1[7] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v2;

  if (!*(void *)(*(void *)(a1[7] + 8LL) + 40LL))
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue( +[VCPDatabaseWriter databaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseWriter,  "databaseForPhotoLibrary:",  a1[6]));
    uint64_t v6 = *(void *)(a1[7] + 8LL);
    os_log_type_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v5;

    [*(id *)(a1[4] + 16) setObject:*(void *)(*(void *)(a1[7] + 8) + 40) forKeyedSubscript:a1[5]];
  }

void sub_10009E40C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) objectForKeyedSubscript:*(void *)(a1 + 40)]);

  if (v2)
  {
    id v3 = [*(id *)(*(void *)(a1 + 32) + 16) setObject:0 forKeyedSubscript:*(void *)(a1 + 40)];
    uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
    if ((int)v5 >= 6)
    {
      uint64_t v7 = VCPLogInstance(v5, v6);
      os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      os_log_type_t v9 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        int v11 = 138412290;
        uint64_t v12 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[VCPDatabaseManager] Releasing shared database for %@",  (uint8_t *)&v11,  0xCu);
      }
    }
  }

void sub_10009E64C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009E6DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009E82C(_Unwind_Exception *a1)
{
}

void sub_10009EB1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009EDB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009EE40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009EEB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009F028( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___MADPhotosFaceAssetProcessingTask;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10009F1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009F494( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_10009F914( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_10009FA58(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  id v3 = *(void **)(*(void *)(a1 + 32) + 144LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
  [v3 setObject:v2 forKeyedSubscript:v4];

  uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void **)(v6 + 152);
  *(void *)(v6 + 152) = v5;
}

void sub_10009FAEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009FBC0(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(a1 + 32) + 160LL);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 144LL);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
  [v2 removeObjectForKey:v3];

  uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 152);
  *(void *)(v5 + 152) = v4;

  uint64_t v9 = MediaAnalysisLogLevel(v7, v8);
  if ((int)v9 >= 7)
  {
    uint64_t v11 = VCPLogInstance(v9, v10);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    os_log_type_t v13 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v12, v13))
    {
      unsigned int v14 = [*(id *)(*(void *)(a1 + 32) + 144) count];
      v15[0] = 67109120;
      v15[1] = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[Face] %d downloads pending", (uint8_t *)v15, 8u);
    }
  }

void sub_10009FCFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009FDAC(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v3 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 152)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2;
}

void sub_10009FE08( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10009FE9C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 160LL) = *(_DWORD *)(a1 + 40);
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 144) count];
      int v9 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)__int128 buf = 67109376;
      unsigned int v22 = v8;
      __int16 v23 = 1024;
      int v24 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[Face][Download] Canceling %d download requests (%d)",  buf,  0xEu);
    }
  }

  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 144), "allValues", 0));
  id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v17;
    do
    {
      for (unint64_t i = 0LL; i != v11; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v12) {
          objc_enumerationMutation(v10);
        }
        unsigned int v14 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[PHAssetResourceManager defaultManager](&OBJC_CLASS___PHAssetResourceManager, "defaultManager"));
        objc_msgSend(v15, "cancelDataRequest:", objc_msgSend(v14, "intValue"));
      }

      id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v11);
  }
}

void sub_1000A0064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A0ADC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_1000A0C9C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  unsigned int v8 = *(void **)(a1 + 32);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) asset]);
  uint64_t v10 = (uint64_t)[v8 removeDownloadRequestIDForAsset:v9];

  if (v6)
  {
    if (!(_DWORD)v10)
    {
      id v11 = objc_msgSend(v6, "mad_isDownloadThrottling");
      if ((_DWORD)v11)
      {
        uint64_t v13 = MediaAnalysisLogLevel(v11, v12);
        if ((int)v13 < 3)
        {
          uint64_t v10 = 4294943488LL;
          goto LABEL_16;
        }

        uint64_t v15 = VCPLogInstance(v13, v14);
        __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        os_log_type_t v17 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v16, v17))
        {
          __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) asset]);
          __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 localIdentifier]);
          __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
          int v28 = 138412546;
          uint64_t v29 = v19;
          __int16 v30 = 2112;
          uint64_t v31 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "[Face][Download][%@] Resource download throttled (%@)",  (uint8_t *)&v28,  0x16u);
        }

        uint64_t v10 = 4294943488LL;
      }

      else
      {
        uint64_t v21 = MediaAnalysisLogLevel(v11, v12);
        if ((int)v21 < 3)
        {
          uint64_t v10 = 4294943494LL;
          goto LABEL_16;
        }

        uint64_t v23 = VCPLogInstance(v21, v22);
        __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
        os_log_type_t v24 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v16, v24))
        {
          __int16 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) asset]);
          __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v25 localIdentifier]);
          id v27 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
          int v28 = 138412546;
          uint64_t v29 = v26;
          __int16 v30 = 2112;
          uint64_t v31 = v27;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  v24,  "[Face][Download][%@] Resource download failed (%@)",  (uint8_t *)&v28,  0x16u);
        }

        uint64_t v10 = 4294943494LL;
      }
    }

void sub_1000A0F14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A10CC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000A1A1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000A2184( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

id sub_1000A2290(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 downloadResource]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) downloadURL]);
  [v2 _asyncAnalysisWithAssetEntry:v3 resource:v4 resourceURL:v5 isBestResource:1];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) downloadURL]);
  +[PHAssetResourceManager vcp_flushResourceURL:](&OBJC_CLASS___PHAssetResourceManager, "vcp_flushResourceURL:", v6);

  return [*(id *)(a1 + 40) setDownloadURL:0];
}

void sub_1000A2330(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A2350(void *a1)
{
  id v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = (void *)a1[6];
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 privateFileURL]);
  objc_msgSend(v1, "_asyncAnalysisWithAssetEntry:resource:resourceURL:isBestResource:", v2, v3);
}

void sub_1000A23B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000A27B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A36E0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, void *a33)
{
  _Unwind_Resume(a1);
}

void sub_1000A42FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, void *a20, void *a21, void *a22, uint64_t a23, void *a24)
{
}

void sub_1000A44A0(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 64LL);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v11;
    do
    {
      id v5 = 0LL;
      do
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void *)(*((void *)&v10 + 1) + 8LL * (void)v5);
        os_log_type_t v7 = objc_autoreleasePoolPush();
        unsigned int v8 = *(void **)(a1 + 32);
        uint64_t v9 = 0LL;
        [v8 _publishEntry:v6 faceLocalIdentifiers:&v9];
        objc_autoreleasePoolPop(v7);
        id v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v3);
  }
}

void sub_1000A45C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A45E4(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000A4620( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000A47D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000A4810(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v2)
  {
    id v3 = (void *)v2;
    uint64_t v4 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
    char v5 = v4[2]();

    if ((v5 & 1) != 0) {
      return 1LL;
    }
  }

  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  return 0LL;
}

void sub_1000A4898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A4A44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A4A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A4E40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000A5034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A5298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A5698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A57E0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000A5854( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000A58F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000A5D2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20, uint64_t a21, void *a22)
{
}

void sub_1000A60EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000A6460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A6CB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000A70B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A7360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A73B0(id a1)
{
  id v1 = objc_alloc_init(&OBJC_CLASS___VCPMADQoSManager);
  uint64_t v2 = (void *)qword_1001E6588;
  qword_1001E6588 = (uint64_t)v1;
}

void sub_1000A75F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A78A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A7AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A7C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A7C28(uint64_t a1)
{
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  _DWORD v15[2] = sub_1000A7DE8;
  v15[3] = &unk_1001BC8B0;
  uint64_t v1 = *(void *)(a1 + 40);
  v15[4] = *(void *)(a1 + 32);
  v15[5] = v1;
  uint64_t v2 = objc_retainBlock(v15);
  uint64_t v3 = notify_register_dispatch("com.apple.das.clas.startDutyCycling", &dword_1001E659C, &_dispatch_main_q, v2);
  if ((_DWORD)v3)
  {
    uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
    if ((int)v5 >= 4)
    {
      uint64_t v7 = VCPLogInstance(v5, v6);
      unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      os_log_type_t v9 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v8, v9))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "[DAS QoS] Failed to register for notifications", buf, 2u);
      }
    }
  }

  else
  {
    uint64_t v10 = MediaAnalysisLogLevel(v3, v4);
    if ((int)v10 >= 7)
    {
      uint64_t v12 = VCPLogInstance(v10, v11);
      __int128 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      os_log_type_t v14 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v13, v14))
      {
        *(_DWORD *)__int128 buf = 67109120;
        int v17 = dword_1001E659C;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "[DAS QoS] Registered for notifications (%d)", buf, 8u);
      }
    }

    ((void (*)(void *, void))v2[2])(v2, dword_1001E659C);
  }
}

void sub_1000A7DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A7DE8(uint64_t a1, uint64_t token)
{
  int v2 = token;
  uint64_t state64 = 0LL;
  if (dword_1001E659C == (_DWORD)token)
  {
    uint64_t state = notify_get_state(token, &state64);
    BOOL v5 = (_DWORD)state == 0;
    uint64_t v7 = MediaAnalysisLogLevel(state, v6);
    if (v5)
    {
      if ((int)v7 >= 6)
      {
        uint64_t v17 = VCPLogInstance(v7, v8);
        __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        os_log_type_t v19 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v18, v19))
        {
          __int128 v20 = "Background";
          if (!state64) {
            __int128 v20 = "Utility";
          }
          *(_DWORD *)__int128 buf = 136315394;
          uint64_t v31 = v20;
          __int16 v32 = 1024;
          int v33 = v2;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "[DAS QoS] QoS updated to %s (%d)", buf, 0x12u);
        }
      }

      uint64_t v21 = atomic_load(&dword_1001E6598);
      if ((_DWORD)v21)
      {
        id v22 = [(id)objc_opt_class(*(void *)(a1 + 32)) sharedManager];
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        [v23 _reportQoSChange:v21 withTaskID:*(void *)(a1 + 40)];

        if (state64) {
          unsigned int v24 = 9;
        }
        else {
          unsigned int v24 = 17;
        }
        atomic_store(v24, &dword_1001E6598);
        atomic_store(1u, byte_1001E65A8);
      }

      else
      {
        if (state64) {
          unsigned int v25 = 9;
        }
        else {
          unsigned int v25 = 17;
        }
        atomic_store(v25, &dword_1001E6598);
        id v26 = [(id)objc_opt_class(*(void *)(a1 + 32)) sharedManager];
        id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        uint64_t v28 = atomic_load(&dword_1001E6598);
        [v27 _reportStartingQoS:v28 withTaskID:*(void *)(a1 + 40)];
      }
    }

    else if ((int)v7 >= 4)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v10, v11))
      {
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v31) = v2;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "[DAS QoS] Failed to query backoff interval (%d)", buf, 8u);
      }
    }
  }

  else
  {
    uint64_t v12 = MediaAnalysisLogLevel(a1, token);
    if ((int)v12 >= 4)
    {
      uint64_t v14 = VCPLogInstance(v12, v13);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      os_log_type_t v16 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v15, v16))
      {
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v31) = v2;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "[DAS QoS] Recieved notification for unknown token (%d)",  buf,  8u);
      }
    }
  }

void sub_1000A8070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A833C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A8388(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = *(void *)(a1 + 32);
  LODWORD(v4) = *(_DWORD *)(v3 + 28);
  double v5 = (double)((v2 - *(void *)(a1 + 48)) * *(unsigned int *)(v3 + 24)) / (double)v4 / 1000000000.0;
  uint64_t v7 = MediaAnalysisLogLevel(v2, v6);
  if ((int)v7 >= 7)
  {
    uint64_t v9 = VCPLogInstance(v7, v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    os_log_type_t v11 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = VCPTaskIDDescription(*(void *)(a1 + 56));
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      uint64_t v14 = VCPMAQoSDescription(*(unsigned int *)(a1 + 64));
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      *(_DWORD *)__int128 buf = 138413058;
      uint64_t v27 = VCPAnalyticsEventDasDutyCycleTaskKey;
      __int16 v28 = 2112;
      uint64_t v29 = v13;
      __int16 v30 = 2112;
      uint64_t v31 = v15;
      __int16 v32 = 2048;
      double v33 = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "[DAS QoS] %@: %@ - %@: %.2f", buf, 0x2Au);
    }
  }

  os_log_type_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  uint64_t v23 = VCPAnalyticsFieldKeyTaskName;
  uint64_t v17 = VCPTaskIDDescription(*(void *)(a1 + 56));
  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  v25[0] = v18;
  uint64_t v24 = VCPAnalyticsFieldKeyQoS;
  uint64_t v19 = VCPMAQoSDescription(*(unsigned int *)(a1 + 64));
  __int128 v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithDouble:]( &OBJC_CLASS___NSNumber,  "numberWithDouble:",  v5,  v23,  v24,  VCPAnalyticsFieldKeyDuration,  v18,  v20));
  v25[2] = v21;
  id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v25,  &v23,  3LL));
  [v16 sendEvent:VCPAnalyticsEventDasDutyCycleTaskKey withAnalytics:v22];
}

void sub_1000A85B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A8764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000A878C(id a1)
{
  return 0;
}

void sub_1000A8844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_59:
LABEL_60:
            goto LABEL_61;
          }

          id v60 = MediaAnalysisLogLevel(0LL, v46);
          if ((int)v60 >= 4)
          {
            uint64_t v62 = VCPLogInstance(v60, v61);
            uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(v62);
            if (os_log_type_enabled((os_log_t)v48, v99))
            {
              uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue([v28 localIdentifier]);
              *(_DWORD *)__int128 buf = 138412290;
              __int128 v112 = (uint64_t)v63;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v48,  v99,  "  [%@] Failed to serialize asset; skipping",
                buf,
                0xCu);
            }

    uint64_t v10 = 0;
    goto LABEL_60;
  }

  uint64_t v10 = -128;
LABEL_62:

  return v10;
}
            }

            else
            {
              uint64_t v19 = 0;
            }

            uint64_t v35 = v63;
          }

          uint64_t v24 = v35;
        }

        else
        {
          uint64_t v19 = 5;
        }
      }

      uint64_t v12 = v24;
    }

    objc_autoreleasePoolPop(v18);
  }

  while (!v19);
  if (v19 == 5) {
    id v58 = 0;
  }
  else {
    id v58 = v12;
  }

  return v58;
}

        goto LABEL_60;
      }
    }

    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
    uint64_t v21 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v24, "vcp_mediaAnalysisBackupFilepath"));

    unsigned int v25 = objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)v25, "mad_intermediateEncryptedRestoreFilepathForTask:", 1));

    uint64_t v100 = 0LL;
    LOBYTE(v25) = -[os_log_s copyItemAtPath:toPath:error:]( v18,  "copyItemAtPath:toPath:error:",  v21,  v26,  &v100);
    uint64_t v27 = v100;
    uint64_t v29 = v27;
    if ((v25 & 1) == 0)
    {
      int v45 = MediaAnalysisLogLevel(v27, v28);
      if ((int)v45 < 3)
      {
LABEL_58:

        goto LABEL_59;
      }

      __int16 v47 = VCPLogInstance(v45, v46);
      os_log_type_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
      uint64_t v48 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v34, v48))
      {
        *(_DWORD *)__int128 buf = 138412290;
        __int128 v105 = (os_log_s *)v29;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  v48,  "  Failed to copy backup file to intermediate location (%@)",  buf,  0xCu);
      }

LABEL_60:
            uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "mad_allFacesFetchOptions"));
            uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"nameSource != %ld",  3LL));
            [v50 setInternalPredicate:v74];

            osloga = (os_log_s *)[v50 copy];
            -[os_log_s setShouldPrefetchCount:](osloga, "setShouldPrefetchCount:", 1LL);
            if (v284) {
              uint64_t v75 = &off_1001C93A8;
            }
            else {
              uint64_t v75 = &off_1001C93C0;
            }
            [v50 setIncludedDetectionTypes:v75];
            uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesWithVuObservationIDs:options:]( &OBJC_CLASS___PHFace,  "fetchFacesWithVuObservationIDs:options:",  *(void *)(a1 + 48),  v50));
            if (![v76 count])
            {
              os_log_type_t v89 = MediaAnalysisLogLevel(0LL, v77);
              if ((int)v89 >= 4)
              {
                id v91 = VCPLogInstance(v89, v90);
                id v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
                uint64_t v93 = VCPLogToOSLogType[4];
                if (os_log_type_enabled(v92, v93))
                {
                  uint64_t v94 = [*(id *)(a1 + 48) count];
                  *(_DWORD *)__int128 buf = 138412546;
                  v342 = v288;
                  v343 = 2048;
                  v344 = v94;
                  _os_log_impl( (void *)&_mh_execute_header,  v92,  v93,  "%@ Failed to fetched face (expected: %lu)",  buf,  0x16u);
                }

                goto LABEL_163;
              }

    goto LABEL_60;
  }

  uint64_t v48 = MediaAnalysisLogLevel(v46, v47);
  uint64_t v50 = VCPLogInstance(v48, v49);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
  id v51 = VCPLogToOSLogType[5];
  if (os_log_type_enabled(v10, v51))
  {
    uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)v41));
    id v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)v42));
    *(_DWORD *)__int128 buf = 138412546;
    *(void *)__int128 v105 = v52;
    *(_WORD *)&v105[8] = 2112;
    __int128 v106 = v53;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v51,  "[FullCluster] Conditions not met for full-mode clustering (MC enable timestamp: %@, last full-mode clustering time stamp: %@), skip VSK rebuild and VU clustering",  buf,  0x16u);
  }

void sub_1000A92D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, void *a24, uint64_t a25, void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1000A97B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_67:
          goto LABEL_68;
        }

        double v5 = v8;
      }

      if (self->_encryptionManager)
      {
        uint64_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:",  self->_photoLibrary));
        __int16 v28 = MADLastAnalysisBackupTimestampKeyForTask(self->_taskID);
        uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue(v28);
        uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
        [v29 timeIntervalSinceReferenceDate];
        -[os_log_s setValue:forKey:](v97, "setValue:forKey:", (uint64_t)v30, v96);

        -[os_log_s commit](v97, "commit");
        uint64_t v31 = -[MADPhotosBackupAnalysisTask _performBackupAtFilepath:](self, "_performBackupAtFilepath:", v12);
        double v33 = v31;
        if ((_DWORD)v31)
        {
          os_log_type_t v34 = MediaAnalysisLogLevel(v31, v32);
          if ((int)v34 >= 3)
          {
            __int128 v36 = VCPLogInstance(v34, v35);
            __int128 v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
            id v38 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v37, v38))
            {
              LODWORD(buf) = 67109120;
              DWORD1(buf) = v33;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "  Failed to create backup file; backup failed (%d)",
                (uint8_t *)&buf,
                8u);
            }
          }

          goto LABEL_64;
        }

        __int128 v105 = 0LL;
        __int128 v106 = &v105;
        __int128 v107 = 0x2020000000LL;
        v103[0] = _NSConcreteStackBlock;
        v103[1] = 3221225472LL;
        v103[2] = sub_1000AA368;
        v103[3] = &unk_1001BC960;
        id v92 = v12;
        id v104 = v92;
        uint64_t v94 = objc_retainBlock(v103);
        *(void *)&__int128 buf = 0LL;
        *((void *)&buf + 1) = &buf;
        uint64_t v115 = 0x3032000000LL;
        __int16 v116 = sub_1000AA3B8;
        uint64_t v117 = sub_1000AA3C8;
        __int16 v118 = dispatch_semaphore_create(0LL);
        encryptionManager = self->_encryptionManager;
        os_log_type_t v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v11));
        __int16 v56 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v14));
        v102[0] = _NSConcreteStackBlock;
        v102[1] = 3221225472LL;
        v102[2] = sub_1000AA3D0;
        v102[3] = &unk_1001BC988;
        v102[4] = &v105;
        v102[5] = &buf;
        -[PFClientSideEncryptionManager archiveDirectoryAtURL:toOutputURL:dataType:options:entryPredicate:completionHandler:]( encryptionManager,  "archiveDirectoryAtURL:toOutputURL:dataType:options:entryPredicate:completionHandler:",  v55,  v56,  1LL,  0LL,  v94,  v102);

        dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*((void *)&buf + 1) + 40LL), 0xFFFFFFFFFFFFFFFFLL);
        v101 = 0LL;
        LOBYTE(v56) = [v3 removeItemAtPath:v92 error:&v101];
        uint64_t v57 = v101;
        uint64_t v95 = v57;
        if ((v56 & 1) == 0)
        {
          unsigned __int8 v59 = MediaAnalysisLogLevel(v57, v58);
          if ((int)v59 >= 4)
          {
            uint64_t v61 = VCPLogInstance(v59, v60);
            uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
            uint64_t v63 = VCPLogToOSLogType[4];
            if (os_log_type_enabled(v62, v63))
            {
              *(_DWORD *)__int128 v112 = 138412290;
              __int128 v113 = v95;
              _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "  Failed to remove intermediate unencrypted backup (%@)",  v112,  0xCu);
            }
          }
        }

        if (!*((_BYTE *)v106 + 24))
        {
LABEL_63:

          _Block_object_dispose(&buf, 8);
          _Block_object_dispose(&v105, 8);
LABEL_64:

LABEL_65:
          uint64_t v8 = v5;
LABEL_66:

          goto LABEL_67;
        }

        id v91 = (void *)objc_claimAutoreleasedReturnValue( -[PHPhotoLibrary mad_backupFilepathForTask:]( self->_photoLibrary,  "mad_backupFilepathForTask:",  self->_taskID));
        if (objc_msgSend(v3, "fileExistsAtPath:"))
        {
          uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v91));
          uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v14));
          uint64_t v100 = 0LL;
          int v66 = [v3 replaceItemAtURL:v64 withItemAtURL:v65 backupItemName:0 options:0 resultingItemURL:0 error:&v100];
          uint64_t v93 = v100;

          if ((v66 & 1) == 0)
          {
LABEL_47:
            os_log_type_t v69 = MediaAnalysisLogLevel(v67, v68);
            if ((int)v69 >= 3)
            {
              uint32_t v71 = VCPLogInstance(v69, v70);
              uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
              uint64_t v73 = VCPLogToOSLogType[3];
              if (os_log_type_enabled(v72, v73))
              {
                *(_DWORD *)__int128 v112 = 138412290;
                __int128 v113 = v93;
                _os_log_impl( (void *)&_mh_execute_header,  v72,  v73,  "  Failed to migrate file to backup directory (%@); backup failed",
                  v112,
                  0xCu);
              }
            }

            v98 = v95;
            uint64_t v74 = [v3 removeItemAtPath:v14 error:&v98];
            uint64_t v75 = v98;

            if ((v74 & 1) != 0 || (uint64_t v78 = MediaAnalysisLogLevel(v76, v77), (int)v78 < 4))
            {
              uint64_t v95 = v75;
              goto LABEL_62;
            }

            uint64_t v80 = VCPLogInstance(v78, v79);
            uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
            v82 = VCPLogToOSLogType[4];
            if (os_log_type_enabled(v81, v82))
            {
              *(_DWORD *)__int128 v112 = 138412290;
              __int128 v113 = v75;
              _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "  Failed to remove intermediate encrypted backup (%@)",  v112,  0xCu);
            }

            uint64_t v95 = v75;
            goto LABEL_60;
          }
        }

        else
        {
          os_log_type_t v99 = 0LL;
          uint64_t v83 = [v3 moveItemAtPath:v14 toPath:v91 error:&v99];
          uint64_t v67 = v99;
          uint64_t v93 = v67;
          if (!v83) {
            goto LABEL_47;
          }
        }

        uint64_t v84 = MediaAnalysisLogLevel(v67, v68);
        if ((int)v84 < 6)
        {
LABEL_62:

          goto LABEL_63;
        }

        uint64_t v86 = VCPLogInstance(v84, v85);
        uint64_t v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
        uint64_t v87 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v81, v87))
        {
          __int128 v88 = VCPTaskIDDescription(self->_taskID);
          os_log_type_t v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
          *(_DWORD *)__int128 v112 = 138412290;
          __int128 v113 = v89;
          _os_log_impl((void *)&_mh_execute_header, v81, v87, "  Successfully backed up %@", v112, 0xCu);
        }

        goto LABEL_68;
      }

      uint64_t v15 = v18;
    }

    v102 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:",  v4));
    id v38 = MADLastAnalysisBackupTimestampKeyForTask(1LL);
    v101 = (void *)objc_claimAutoreleasedReturnValue(v38);
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    [v39 timeIntervalSinceReferenceDate];
    [v102 setValue:(uint64_t)v40 forKey:v101];

    [v102 commit];
    uint64_t v41 = -[VCPPhotosMaintenanceProcessingTask _createBackupAtFilepath:forPhotoLibrary:]( self,  "_createBackupAtFilepath:forPhotoLibrary:",  v22,  v4);
    uint64_t v43 = v41;
    if ((_DWORD)v41)
    {
      uint64_t v44 = MediaAnalysisLogLevel(v41, v42);
      if ((int)v44 >= 3)
      {
        uint64_t v46 = VCPLogInstance(v44, v45);
        __int16 v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        uint64_t v48 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v47, v48))
        {
          LODWORD(buf) = 67109120;
          DWORD1(buf) = v43;
          _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "  Failed to create backup file; backup failed (%d)",
            (uint8_t *)&buf,
            8u);
        }
      }

      goto LABEL_66;
    }

    __int128 v111 = 0LL;
    __int128 v112 = &v111;
    __int128 v113 = 0x2020000000LL;
    v109[0] = _NSConcreteStackBlock;
    v109[1] = 3221225472LL;
    v109[2] = sub_1000FEBF4;
    v109[3] = &unk_1001BC960;
    id v58 = v22;
    __int128 v110 = v58;
    uint64_t v100 = objc_retainBlock(v109);
    *(void *)&__int128 buf = 0LL;
    *((void *)&buf + 1) = &buf;
    v121 = 0x3032000000LL;
    v122 = sub_1000FEC44;
    v123 = sub_1000FEC54;
    v124 = dispatch_semaphore_create(0LL);
    encryptionManager = self->_encryptionManager;
    id v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v21));
    uint64_t v61 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v103));
    v108[0] = _NSConcreteStackBlock;
    v108[1] = 3221225472LL;
    v108[2] = sub_1000FEC5C;
    v108[3] = &unk_1001BC988;
    v108[4] = &v111;
    v108[5] = &buf;
    -[PFClientSideEncryptionManager archiveDirectoryAtURL:toOutputURL:dataType:options:entryPredicate:completionHandler:]( encryptionManager,  "archiveDirectoryAtURL:toOutputURL:dataType:options:entryPredicate:completionHandler:",  v60,  v61,  1LL,  0LL,  v100,  v108);

    dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*((void *)&buf + 1) + 40LL), 0xFFFFFFFFFFFFFFFFLL);
    __int128 v107 = 0LL;
    uint64_t v62 = v103;
    LOBYTE(v61) = [v13 removeItemAtPath:v58 error:&v107];
    uint64_t v63 = v107;
    uint64_t v65 = v63;
    if ((v61 & 1) == 0)
    {
      int v66 = MediaAnalysisLogLevel(v63, v64);
      if ((int)v66 >= 4)
      {
        __int128 v68 = VCPLogInstance(v66, v67);
        os_log_type_t v69 = (os_log_s *)objc_claimAutoreleasedReturnValue(v68);
        __int128 v70 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v69, v70))
        {
          *(_DWORD *)__int16 v118 = 138412290;
          v119 = v65;
          _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "  Failed to remove intermediate unencrypted backup (%@)",  v118,  0xCu);
        }

        uint64_t v62 = v103;
      }
    }

    if (!*((_BYTE *)v112 + 24))
    {
LABEL_65:

      _Block_object_dispose(&buf, 8);
      _Block_object_dispose(&v111, 8);
LABEL_66:

      __int128 v18 = v15;
      uint64_t v27 = v102;
      goto LABEL_67;
    }

    v98 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "vcp_mediaAnalysisBackupFilepath"));
    if (objc_msgSend(v13, "fileExistsAtPath:"))
    {
      uint32_t v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v98));
      uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v62));
      __int128 v106 = 0LL;
      uint64_t v73 = [v13 replaceItemAtURL:v71 withItemAtURL:v72 backupItemName:0 options:0 resultingItemURL:0 error:&v106];
      os_log_type_t v99 = v106;

      if ((v73 & 1) == 0)
      {
LABEL_48:
        uint64_t v76 = v103;
        uint64_t v77 = MediaAnalysisLogLevel(v74, v75);
        if ((int)v77 >= 3)
        {
          os_log_type_t v79 = VCPLogInstance(v77, v78);
          uint64_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
          uint64_t v81 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v80, v81))
          {
            *(_DWORD *)__int16 v118 = 138412290;
            v119 = v99;
            _os_log_impl( (void *)&_mh_execute_header,  v80,  v81,  "  Failed to migrate file to backup directory (%@); backup failed",
              v118,
              0xCu);
          }

          uint64_t v76 = v103;
        }

        id v104 = v65;
        v82 = [v13 removeItemAtPath:v76 error:&v104];
        uint64_t v83 = v104;

        if ((v82 & 1) == 0)
        {
          uint64_t v86 = MediaAnalysisLogLevel(v84, v85);
          if ((int)v86 >= 4)
          {
            __int128 v88 = VCPLogInstance(v86, v87);
            os_log_type_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
            uint64_t v90 = VCPLogToOSLogType[4];
            if (os_log_type_enabled(v89, v90))
            {
              *(_DWORD *)__int16 v118 = 138412290;
              v119 = v83;
              _os_log_impl( (void *)&_mh_execute_header,  v89,  v90,  "  Failed to remove intermediate encrypted backup (%@)",  v118,  0xCu);
            }
          }
        }

        uint64_t v65 = v83;
LABEL_64:

        goto LABEL_65;
      }
    }

    else
    {
      __int128 v105 = 0LL;
      id v91 = [v13 moveItemAtPath:v62 toPath:v98 error:&v105];
      uint64_t v74 = v105;
      os_log_type_t v99 = v74;
      if (!v91) {
        goto LABEL_48;
      }
    }

    id v92 = MediaAnalysisLogLevel(v74, v75);
    if ((int)v92 >= 6)
    {
      uint64_t v94 = VCPLogInstance(v92, v93);
      uint64_t v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
      uint64_t v96 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v95, v96))
      {
        *(_WORD *)__int16 v118 = 0;
        _os_log_impl((void *)&_mh_execute_header, v95, v96, "  Successfully backed up analysis database", v118, 2u);
      }
    }

    [v102 removeKey:@"HasDeletedAssetsSinceLastBackup"];
    [v102 commit];
    goto LABEL_64;
  }

            typeb = (void *)objc_claimAutoreleasedReturnValue([v184 sortedArrayUsingComparator:&stru_1001BDAC8]);
            __int128 v108 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
            for (j = 0LL; ; ++j)
            {
              __int128 v110 = (unint64_t)[typeb count];
              __int128 v111 = v110 >= 3 ? 3LL : v110;
              if (j >= v111) {
                break;
              }
              __int128 v112 = objc_autoreleasePoolPush();
              __int128 v113 = (void *)objc_claimAutoreleasedReturnValue([typeb objectAtIndexedSubscript:j]);
              v114 = MADErrorStringFromCode([v113 errorCode]);
              uint64_t v115 = (void *)objc_claimAutoreleasedReturnValue(v114);
              __int16 v116 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v113 count]));
              uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@/%@",  v115,  v116));

              [v108 addObject:v117];
              objc_autoreleasePoolPop(v112);
            }

            while ((unint64_t)[v108 count] <= 2)
            {
              v123 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
              [v108 addObject:v123];
            }

            v202[0] = @"Top1Failure";
            v202[1] = @"Top2Failure";
            v202[2] = @"Top3Failure";
            v124 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  v202,  3LL));
            v125 = VCPLogToOSLogType[5];
            for (k = 1LL; k != 4; ++k)
            {
              v127 = objc_autoreleasePoolPush();
              v128 = (void *)objc_claimAutoreleasedReturnValue([v108 objectAtIndexedSubscript:k - 1]);
              v129 = (void *)objc_claimAutoreleasedReturnValue([v124 objectAtIndexedSubscript:k - 1]);
              [v63 setObject:v128 forKey:v129];

              v132 = MediaAnalysisLogLevel(v130, v131);
              if ((int)v132 >= 5)
              {
                v134 = VCPLogInstance(v132, v133);
                v135 = (os_log_s *)objc_claimAutoreleasedReturnValue(v134);
                if (os_log_type_enabled(v135, v125))
                {
                  v136 = (void *)objc_claimAutoreleasedReturnValue([v108 objectAtIndexedSubscript:k - 1]);
                  *(_DWORD *)v199 = 134218242;
                  *(void *)v200 = k;
                  *(_WORD *)&v200[8] = 2112;
                  v201 = v136;
                  _os_log_impl( (void *)&_mh_execute_header,  v135,  v125,  "Reporting daily top%lld Failure: %@",  v199,  0x16u);
                }
              }

              objc_autoreleasePoolPop(v127);
            }

            v137 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
            [v137 sendEvent:@"com.apple.mediaanalysisd.background.dailyreport" withAnalytics:v63];

            v140 = MediaAnalysisLogLevel(v138, v139);
            if ((int)v140 >= 5)
            {
              v142 = VCPLogInstance(v140, v141);
              v143 = (os_log_s *)objc_claimAutoreleasedReturnValue(v142);
              if (os_log_type_enabled(v143, v125))
              {
                *(_DWORD *)v199 = 67109120;
                *(_DWORD *)v200 = a2;
                _os_log_impl((void *)&_mh_execute_header, v143, v125, "Finished daily report for activity %d", v199, 8u);
              }
            }

            v144 = VCPSignPostLog(v140);
            v145 = (os_log_s *)objc_claimAutoreleasedReturnValue(v144);
            v146 = v145;
            if (v174 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v145))
            {
              *(_DWORD *)v199 = 67109120;
              *(_DWORD *)v200 = a2;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v146,  OS_SIGNPOST_INTERVAL_END,  spid,  "VCPAnalyticsEventBackgroundDailyReport",  "%d",  v199,  8u);
            }

            id v22 = 0LL;
LABEL_94:

            goto LABEL_95;
          }
        }

        id v22 = 4294967168LL;
        goto LABEL_94;
      }
    }

    else
    {
      v177 = -1LL;
      if (v26) {
        goto LABEL_13;
      }
    }

    v172 = -1LL;
    goto LABEL_16;
  }

  id v22 = 4294967168LL;
LABEL_95:

  return v22;
}

void sub_1000AA1E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, char a31)
{
  _Block_object_dispose((const void *)(v38 - 208), 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

id sub_1000AA368(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 path]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1000AA3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000AA3B8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_1000AA3C8(uint64_t a1)
{
}

void sub_1000AA3D0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v7 = v5;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    if ((int)MediaAnalysisLogLevel(v5, v6) >= 6)
    {
      uint64_t v8 = VCPLogInstance();
      uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      os_log_type_t v10 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v9, v10))
      {
        LOWORD(v17) = 0;
        os_log_type_t v11 = "  Successfully encrypted intermediate backup file";
        uint64_t v12 = v9;
        os_log_type_t v13 = v10;
        uint32_t v14 = 2;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v17, v14);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if ((int)MediaAnalysisLogLevel(v5, v6) >= 3)
  {
    uint64_t v15 = VCPLogInstance();
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    os_log_type_t v16 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v9, v16))
    {
      int v17 = 138412290;
      __int128 v18 = v7;
      os_log_type_t v11 = "  Failed to encrypt intermediate backup file (%@); backup failed";
      uint64_t v12 = v9;
      os_log_type_t v13 = v16;
      uint32_t v14 = 12;
      goto LABEL_8;
    }

void sub_1000AA524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AA658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AA904(_Unwind_Exception *a1)
{
  id v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000AA9D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AAA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AAA9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AAB14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AAC98(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_1000AAD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AB06C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1000AB15C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 32);
  os_log_type_t v11 = @"Gating description";
  id v12 = v6;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
  id v9 = [v5 integerValue];
  os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
  [v7 saveGatingResult:v8 forVariationType:v9 assetIdentifier:v10];
}

void sub_1000AB240(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AB274(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[PHAssetChangeRequest changeRequestForAsset:]( &OBJC_CLASS___PHAssetChangeRequest,  "changeRequestForAsset:",  *(void *)(a1 + 32)));
  objc_msgSend( v2,  "setVariationSuggestionStates:forVariationType:",  objc_msgSend(*(id *)(a1 + 40), "vcp_loopSugestionState"),  1);
  objc_msgSend( v2,  "setVariationSuggestionStates:forVariationType:",  objc_msgSend(*(id *)(a1 + 40), "vcp_longExposureSugestionState"),  3);
}

void sub_1000AB2E4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000AB390( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___VCPEffectsAssetProcessingTask;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1000AB660( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000AB724(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 48LL));
  return v1 & 1;
}

void sub_1000AB940(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ABADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ABC2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ABD88( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPCompoundMADTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1000ABEF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AC14C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AC310( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000AC4B8(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  [a3 code]);
}

void sub_1000AC6E8(_Unwind_Exception *a1)
{
}

uint64_t sub_1000AC704(uint64_t a1, uint64_t a2, double a3)
{
  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a3;
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 5)
  {
    uint64_t v5 = VCPLogInstance();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      int v9 = 134217984;
      double v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[Unified] Pre-Analysis progress: %.2f%%", (uint8_t *)&v9, 0xCu);
    }
  }

  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 16LL) + 16LL))(*(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) * 0.2);
}

uint64_t sub_1000AC80C(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v7 = @"interrupted";
      if (!v2) {
        os_log_type_t v7 = @"finished";
      }
      int v9 = 138412546;
      double v10 = v7;
      __int16 v11 = 1024;
      int v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Pre-Analysis %@ (%d)", (uint8_t *)&v9, 0x12u);
    }
  }

  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 16LL) + 16LL))(*(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) * 0.2);
}

id sub_1000AC924(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

id sub_1000ACD8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_1000ACE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ACEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_74:
LABEL_75:
            if (v44 == 1)
            {
              if (v54)
              {
                ++v111;
              }

              else if (v51)
              {
                ++v109;
              }

              else
              {
                ++v108;
              }
            }

            else
            {
              ++v117;
            }

            goto LABEL_79;
          }
        }

        uint64_t v54 = v66;
        os_log_type_t v55 = @"Torso";
        goto LABEL_56;
      }

      uint64_t v39 = objc_claimAutoreleasedReturnValue( +[VCPFaceUtils phFaceFromVCPPhotosFace:withFetchOptions:]( &OBJC_CLASS___VCPFaceUtils,  "phFaceFromVCPPhotosFace:withFetchOptions:",  v28,  v121));
      uint64_t v41 = (void *)v39;
      if (v39)
      {
        uint64_t v39 = objc_claimAutoreleasedReturnValue( +[PHFaceChangeRequest changeRequestForFace:]( &OBJC_CLASS___PHFaceChangeRequest,  "changeRequestForFace:",  v39));
        uint64_t v42 = (void *)v39;
        uint64_t v43 = v41;
        if (v39) {
          goto LABEL_30;
        }
      }

      else
      {
        uint64_t v43 = 0LL;
      }

LABEL_79:
LABEL_80:
    }

    id v26 = [obj countByEnumeratingWithState:&v124 objects:v138 count:16];
  }

  while (v26);
LABEL_89:

  __int128 v88 = (void *)objc_claimAutoreleasedReturnValue(-[PHAsset adjustmentVersion](self->_asset, "adjustmentVersion"));
  [v118 setFaceAdjustmentVersion:v88];

  os_log_type_t v89 = VCPAnalysisResultWarningImageTooSmallKey;
  uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKeyedSubscript:]( self->_analysis,  "objectForKeyedSubscript:",  VCPAnalysisResultWarningImageTooSmallKey));
  id v91 = v90 == 0LL;

  if ((v91 & 1) != 0)
  {
    id v92 = 0;
  }

  else
  {
    id v91 = objc_claimAutoreleasedReturnValue(-[NSDictionary objectForKeyedSubscript:](self->_analysis, "objectForKeyedSubscript:", v89));
    id v92 = [(id)v91 BOOLValue];

    uint64_t v95 = MediaAnalysisLogLevel(v93, v94);
    if ((int)v95 >= 7)
    {
      uint64_t v97 = VCPLogInstance(v95, v96);
      id v91 = objc_claimAutoreleasedReturnValue(v97);
      v98 = VCPLogToOSLogType[7];
      if (os_log_type_enabled((os_log_t)v91, v98))
      {
        *(_DWORD *)__int128 buf = 138412290;
        v132 = v116;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v91, v98, "%@ Marking resource is too small", buf, 0xCu);
      }
    }
  }

  if (((v113 | v92) & 1) != 0)
  {
    else {
      os_log_type_t v99 = 11;
    }
  }

  else
  {
    id v91 = objc_claimAutoreleasedReturnValue(-[PHAsset photoLibrary](self->_asset, "photoLibrary"));
    os_log_type_t v99 = (unsigned __int16)objc_msgSend((id)v91, "mad_faceProcessingInternalVersion");
  }

  [v118 setFaceAnalysisVersion:v99];
  if (-[PHAsset mad_isEligibleForComputeSync](self->_asset, "mad_isEligibleForComputeSync"))
  {
    uint64_t v100 = [v118 faceAnalysisVersion];
    v101 = (void *)objc_claimAutoreleasedReturnValue(-[PHAsset photoLibrary](self->_asset, "photoLibrary"));
    v102 = objc_msgSend(v101, "mad_faceProcessingInternalVersion") == v100;

    if (v102) {
      objc_msgSend( v118,  "setLocalAnalysisStage:",  -[PHAsset mad_analysisStageAfterCompletingAnalysis:]( self->_asset,  "mad_analysisStageAfterCompletingAnalysis:",  3));
    }
  }

  if (a3) {
    *a3 = v112;
  }
  [v107 accumulateInt64Value:v111 forField:@"NumberOfFacesPersisted" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
  [v107 accumulateInt64Value:v109 forField:@"NumberOfTorsosPersisted" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
  [v107 accumulateInt64Value:v108 forField:@"NumberOfFaceTorsosPersisted" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
  [v107 accumulateInt64Value:v117 forField:@"NumberOfPetsPersisted" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
}

void sub_1000ADC08( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34)
{
  _Unwind_Resume(a1);
}

void sub_1000ADE2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel(v3, v4) >= 7)
  {
    uint64_t v5 = VCPLogInstance();
    os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ -> %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

void sub_1000ADF08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE06C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE4F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000AE524(void *a1)
{
  id v2 = VCPTransactionWithName((uint64_t)@"VCPFaceProcessingChangeBatch-publish");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = mach_absolute_time();
  uint64_t v5 = VCPSignPostLog(v4);
  os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  os_signpost_id_t v7 = os_signpost_id_generate(v6);

  uint64_t v9 = VCPSignPostLog(v8);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  __int16 v11 = v10;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v11,  OS_SIGNPOST_INTERVAL_BEGIN,  v7,  "VCPFaceProcessingPersistChanges",  (const char *)&unk_100199097,  buf,  2u);
  }

  uint64_t v12 = a1[4];
  os_log_type_t v13 = *(void **)(v12 + 8);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1000AE6D0;
  void v19[3] = &unk_1001BA0C8;
  v19[4] = v12;
  id v14 = [v13 performChangesAndWait:v19 error:a1[6]];
  *(_BYTE *)(*(void *)(a1[5] + 8LL) + 24LL) = (_BYTE)v14;
  uint64_t v15 = VCPSignPostLog(v14);
  os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  int v17 = v16;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_INTERVAL_END,  v7,  "VCPFaceProcessingPersistChanges",  (const char *)&unk_100199097,  buf,  2u);
  }

  if (v4)
  {
    uint64_t v18 = mach_absolute_time();
    VCPPerformance_LogMeasurement("VCPFaceProcessingPersistChanges", v18 - v4);
  }
}

void sub_1000AE6AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000AE6D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _publishPendingChanges];
}

void sub_1000AE7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE870(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AE9F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AEBF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AEC7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000AED68(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_1000AED78(uint64_t a1)
{
}

void sub_1000AED80(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 8) objectForKeyedSubscript:a1[5]]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v2;
}

void sub_1000AEF48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AEF68(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[VCPFaceProcessingResource resourceWithResource:resourceURL:isBestResource:requestDownload:downloadStatus:]( &OBJC_CLASS___VCPFaceProcessingResource,  "resourceWithResource:resourceURL:isBestResource:requestDownload:downloadStatus:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(unsigned __int8 *)(a1 + 68),  *(unsigned __int8 *)(a1 + 69),  *(unsigned int *)(a1 + 64)));
  objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "setObject:forKeyedSubscript:");
}

void sub_1000AEFC4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000AF030(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 80);
  *(void *)(v3 + 8sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v2;

  uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
  if ((int)v7 >= 7)
  {
    uint64_t v9 = VCPLogInstance(v7, v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    os_log_type_t v11 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 80LL);
      int v13 = 138412290;
      uint64_t v14 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Update lastest download timestamp %@", (uint8_t *)&v13, 0xCu);
    }
  }

void sub_1000AF17C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v2 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 80)];
  double v4 = v3;

  if (v4 > 60.0)
  {
    uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
    if ((int)v7 >= 4)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
        [v12 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 80)];
        int v14 = 134217984;
        uint64_t v15 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "File-based download timed-out %.2f", (uint8_t *)&v14, 0xCu);
      }
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 24LL) = 1;
  }

void sub_1000AF2A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AFA20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000AFB00(id a1)
{
  return 0;
}

uint64_t sub_1000AFB08(uint64_t a1)
{
  uint64_t v1 = (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1000AFB54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000AFB64()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_1001E65C0;
  uint64_t v7 = qword_1001E65C0;
  if (!qword_1001E65C0)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_1000B8554;
    v3[3] = &unk_1001B9F10;
    v3[4] = &v4;
    sub_1000B8554((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_1000AFC00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000AFC18(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[MADGDUtilities sharedInstance](&OBJC_CLASS___MADGDUtilities, "sharedInstance"));
  double v3 = *(void **)(a1 + 32);
  uint64_t v4 = v3[17];
  uint64_t v5 = v3[19];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000AFD30;
  v7[3] = &unk_1001B9E98;
  uint64_t v8 = v3;
  [v2 syncVisualUnderstandingService:v4 withPhotosLibrary:v5 cancelOrExtendTimeoutBlock:v7];

  [*(id *)(a1 + 40) stop];
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  [*(id *)(a1 + 40) elapsedTimeSeconds];
  objc_msgSend( v6,  "accumulateDoubleValue:forField:andEvent:",  @"FaceVUSyncElapsedTimeInSeconds",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");
}

void sub_1000AFD00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1000AFD30(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1000AFD78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AFDFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000AFE58( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___VCPFaceProcessingTask;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1000B00E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B019C(_Unwind_Exception *a1)
{
}

void sub_1000B07F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B11C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000B1480(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = *(void *)(v2 + 72);
  *(void *)(v2 + 72) = v3 + 1;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) objectAtIndexedSubscript:v3 % *(void *)(*(void *)(a1 + 32) + 80)]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000B1538;
  block[3] = &unk_1001BBE70;
  uint64_t v5 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  dispatch_async(v4, block);
}

void sub_1000B1538(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  unint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v3 pet];

  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v16 = 0LL;
  LODWORD(v3) = [v4 _detectAsset:v5 withResults:&v16 andBatchContext:*(void *)(a1 + 48)];
  id v6 = v16;
  v11[0] = _NSConcreteStackBlock;
  v11[2] = sub_1000B1658;
  v11[3] = &unk_1001BCB08;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = *(void **)(a1 + 40);
  uint64_t v9 = *(dispatch_queue_s **)(v7 + 96);
  v11[1] = 3221225472LL;
  void v11[4] = v7;
  id v12 = v6;
  int v15 = (int)v3;
  id v13 = v8;
  id v14 = *(id *)(a1 + 48);
  id v10 = v6;
  dispatch_sync(v9, v11);
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 56LL));

  objc_autoreleasePoolPop(v2);
}

void sub_1000B1648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000B1658(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processDetectionResults:*(void *)(a1 + 40) withDetectionStatus:*(unsigned int *)(a1 + 64) asset:*(void *)(a1 + 48) andBatchContext:*(void *)(a1 + 56)];
}

void sub_1000B1A04( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v18 = v16;

  _Unwind_Resume(a1);
}

void sub_1000B2408( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
}

id sub_1000B2628(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

id sub_1000B2630(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v2 pet];

  return [*(id *)(a1 + 32) updateLastestDownloadTimestamp];
}

void sub_1000B266C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B267C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v12 = 0LL;
  id v13 = 0LL;
  unsigned int v4 = [*(id *)(a1 + 32) _copyResourceFromURL:v3 toURL:&v13 forAsset:*(void *)(a1 + 40) error:&v12];
  id v5 = v13;
  id v6 = v12;
  if (v4)
  {
    id v8 = *(void **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 56);
    int v9 = *(unsigned __int8 *)(a1 + 64);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
    [v8 storeResource:v7 resourceURL:v5 isBestResource:v9 != 0 requestDownload:1 downloadStatus:0 forLocalIdentifier:v10];

    os_log_type_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
    [v11 accumulateInt64Value:1 forField:@"NumbeOfResourceDownloads" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];
  }
}

void sub_1000B2784(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1000B27B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = v3;
  if (v3)
  {
    unsigned int v5 = objc_msgSend(v3, "mad_isDownloadThrottling");
    id v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    int v8 = *(unsigned __int8 *)(a1 + 64);
    int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localIdentifier]);
    uint64_t v10 = v5 ? 4294943488LL : 4294966371LL;
    [v6 storeResource:v7 resourceURL:0 isBestResource:v8 != 0 requestDownload:1 downloadStatus:v10 forLocalIdentifier:v9];

    uint64_t v13 = MediaAnalysisLogLevel(v11, v12);
    if ((int)v13 >= 3)
    {
      uint64_t v15 = VCPLogInstance(v13, v14);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      os_log_type_t v17 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) localIdentifier]);
        uint64_t v19 = *(void *)(a1 + 40);
        int v20 = 138412802;
        uint64_t v21 = v18;
        __int16 v22 = 2112;
        uint64_t v23 = v19;
        __int16 v24 = 2112;
        unsigned int v25 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "[%@] Failed to download resource %@ - %@",  (uint8_t *)&v20,  0x20u);
      }
    }
  }

  [*(id *)(a1 + 56) _asyncAnalyzeAsset:*(void *)(a1 + 48) andBatchContext:*(void *)(a1 + 32)];
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 56) + 48LL));
}

void sub_1000B2930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B2E54( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000B2F28(id a1, NSString *a2, NSNumber *a3, BOOL *a4)
{
  unsigned int v5 = a2;
  id v6 = a3;
  uint64_t v8 = MediaAnalysisLogLevel(v6, v7);
  if ((int)v8 >= 7)
  {
    uint64_t v10 = VCPLogInstance(v8, v9);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    os_log_type_t v12 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v11, v12))
    {
      int v14 = 138412546;
      uint64_t v15 = v5;
      __int16 v16 = 2112;
      os_log_type_t v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%@] Cancelling download (ID:%@)", (uint8_t *)&v14, 0x16u);
    }
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[PHAssetResourceManager defaultManager](&OBJC_CLASS___PHAssetResourceManager, "defaultManager"));
  objc_msgSend(v13, "cancelDataRequest:", -[NSNumber intValue](v6, "intValue"));
}

void sub_1000B3038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B3324( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_1000B3594( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B35F0(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(v3 + 152);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000B36CC;
  v5[3] = &unk_1001B9E98;
  v5[4] = v3;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = VCPPromotePersons(v4, &stru_1001BCBB8, v5);
  objc_autoreleasePoolPop(v2);
}

void sub_1000B367C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000B36B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_1000B36CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000B38C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B3924(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  uint64_t v3 = -[VCPPhotosPersistenceDelegate initWithPhotoLibrary:]( objc_alloc(&OBJC_CLASS___VCPPhotosPersistenceDelegate),  "initWithPhotoLibrary:",  *(void *)(*(void *)(a1 + 32) + 152LL));
  uint64_t v4 = -[PNPetPromoterWrapper initWithLibrary:andDelegate:]( objc_alloc(&OBJC_CLASS___PNPetPromoterWrapper),  "initWithLibrary:andDelegate:",  *(void *)(*(void *)(a1 + 32) + 152LL),  v3);
  uint64_t v5 = mach_absolute_time();
  uint64_t v6 = VCPSignPostLog(v5);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  os_signpost_id_t v8 = os_signpost_id_generate(v7);

  uint64_t v10 = VCPSignPostLog(v9);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
  os_log_type_t v12 = v11;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v12,  OS_SIGNPOST_INTERVAL_BEGIN,  v8,  "MADPhotosPersonProcessingTaskPromotePet",  (const char *)&unk_100199097,  buf,  2u);
  }

  *(void *)__int128 buf = 0LL;
  uint64_t v27 = buf;
  uint64_t v28 = 0x3032000000LL;
  uint64_t v29 = sub_1000AED68;
  __int16 v30 = sub_1000AED78;
  id v31 = (id)objc_claimAutoreleasedReturnValue(+[NSDate distantPast](&OBJC_CLASS___NSDate, "distantPast"));
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_1000B3BB8;
  v21[3] = &unk_1001BCC08;
  uint64_t v13 = dispatch_queue_create("MADPetPromotingProgress", 0LL);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  __int16 v22 = v13;
  uint64_t v23 = v14;
  __int16 v24 = buf;
  uint64_t v25 = v15;
  uint64_t v16 = VCPSignPostLog( -[PNPetPromoterWrapper promoteUnverifiedPetsWithUpdateBlock:]( v4,  "promoteUnverifiedPetsWithUpdateBlock:",  v21));
  os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  uint64_t v18 = v17;
  if (v8 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v17))
  {
    *(_WORD *)int v20 = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v18,  OS_SIGNPOST_INTERVAL_END,  v8,  "MADPhotosPersonProcessingTaskPromotePet",  (const char *)&unk_100199097,  v20,  2u);
  }

  if (v5)
  {
    uint64_t v19 = mach_absolute_time();
    VCPPerformance_LogMeasurement("MADPhotosPersonProcessingTaskPromotePet", v19 - v5);
  }

  _Block_object_dispose(buf, 8);
  objc_autoreleasePoolPop(v2);
}

void sub_1000B3B60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, id a24)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1000B3BB8(uint64_t a1, _BYTE *a2, double a3)
{
  if (a3 >= 0.0)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000B3CD8;
    block[3] = &unk_1001BCBE0;
    void block[4] = *(void *)(a1 + 48);
    *(double *)&void block[5] = a3;
    dispatch_async(v5, block);
  }

  id v6 = [*(id *)(a1 + 40) isCancelled];
  if ((_DWORD)v6)
  {
    *a2 = 1;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = -128;
    uint64_t v8 = MediaAnalysisLogLevel(v6, v7);
    uint64_t v10 = VCPLogInstance(v8, v9);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    os_log_type_t v12 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v11, v12))
    {
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cancelling Pet Promoting", v13, 2u);
    }
  }

  else
  {
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    -[os_log_s pet](v11, "pet");
  }
}

void sub_1000B3CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B3CD8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) timeIntervalSinceNow];
  if (v4 < -5.0)
  {
    uint64_t v5 = MediaAnalysisLogLevel(v2, v3);
    if ((int)v5 >= 7)
    {
      uint64_t v7 = VCPLogInstance(v5, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      os_log_type_t v9 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = *(void *)(a1 + 40);
        int v14 = 134217984;
        uint64_t v15 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Pet Promoting progress: %.2f%%", (uint8_t *)&v14, 0xCu);
      }
    }

    uint64_t v11 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v11;
  }

LABEL_193:
          }
        }

        v300 = self->_database;
        v301 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
        [v301 timeIntervalSinceReferenceDate];
        -[VCPDatabaseWriter setValue:forKey:](v300, "setValue:forKey:", (uint64_t)v302, v281);

        v250 = -[VCPDatabaseWriter commit](self->_database, "commit");
        goto LABEL_195;
      }

      v147 = VCPLogInstance(v145, v146);
      v148 = (os_log_s *)objc_claimAutoreleasedReturnValue(v147);
      v149 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v148, v149))
      {
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v140;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v316;
        _os_log_impl( (void *)&_mh_execute_header,  v148,  v149,  "%@ Failed to initialize entities from Gallery - %@",  buf,  0x16u);
      }

      v150 = 0;
    }

    else if (v97)
    {
      v151 = MediaAnalysisLogLevel(v143, v144);
      if ((int)v151 >= 7)
      {
        v153 = VCPLogInstance(v151, v152);
        v154 = (os_log_s *)objc_claimAutoreleasedReturnValue(v153);
        v155 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v154, v155))
        {
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v140;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v315;
          _os_log_impl((void *)&_mh_execute_header, v154, v155, "%@ Update MADGDChangeBookmark %@", buf, 0x16u);
        }
      }

      v340 = 0LL;
      v156 = (void *)objc_claimAutoreleasedReturnValue([v328 encodeToDataAndReturnError:&v340]);
      v157 = (os_log_s *)v340;
      v148 = v157;
      if (!v156)
      {
        v159 = MediaAnalysisLogLevel(v157, v158);
        if ((int)v159 >= 3)
        {
          v161 = VCPLogInstance(v159, v160);
          v162 = (os_log_s *)objc_claimAutoreleasedReturnValue(v161);
          v163 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v162, v163))
          {
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v140;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v148;
            _os_log_impl( (void *)&_mh_execute_header,  v162,  v163,  "%@ Failed to encode updated MADGDChangeBookmark - %@",  buf,  0x16u);
          }
        }
      }

      -[VCPDatabaseWriter updateChangeToken:forTaskID:andChangeTokenType:]( self->_database,  "updateChangeToken:forTaskID:andChangeTokenType:",  v156,  3LL,  2LL);
      -[VCPDatabaseWriter commit](self->_database, "commit");
      v164 = v328;

      v150 = 0;
      v320 = v164;
    }

    else
    {
      v165 = MediaAnalysisLogLevel(v143, v144);
      if ((int)v165 >= 7)
      {
        v167 = VCPLogInstance(v165, v166);
        v168 = (os_log_s *)objc_claimAutoreleasedReturnValue(v167);
        v169 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v168, v169))
        {
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v140;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v315;
          _os_log_impl((void *)&_mh_execute_header, v168, v169, "%@ Initiate MADGDChangeBookmark %@", buf, 0x16u);
        }
      }

      v341 = 0LL;
      v170 = (void *)objc_claimAutoreleasedReturnValue([v315 encodeToDataAndReturnError:&v341]);
      v171 = (os_log_s *)v341;
      v148 = v171;
      if (!v170)
      {
        v173 = MediaAnalysisLogLevel(v171, v172);
        if ((int)v173 >= 3)
        {
          v175 = VCPLogInstance(v173, v174);
          v176 = (os_log_s *)objc_claimAutoreleasedReturnValue(v175);
          v177 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v176, v177))
          {
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v140;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v148;
            _os_log_impl( (void *)&_mh_execute_header,  v176,  v177,  "%@ Failed to encode initial MADGDChangeBookmark - %@",  buf,  0x16u);
          }
        }
      }

      -[VCPDatabaseWriter setChangeToken:forTaskID:andChangeTokenType:]( self->_database,  "setChangeToken:forTaskID:andChangeTokenType:",  v170,  3LL,  2LL);
      -[VCPDatabaseWriter commit](self->_database, "commit");
      v320 = v315;

      v150 = 1;
    }

    goto LABEL_118;
  }

  os_log_type_t v55 = objc_alloc_init(&OBJC_CLASS___VCPTimeMeasurement);
  -[VCPTimeMeasurement start](v55, "start");
  __int16 v56 = mach_absolute_time();
  uint64_t v57 = VCPSignPostLog(v56);
  id v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
  unsigned __int8 v59 = os_signpost_id_generate(v58);

  uint64_t v61 = VCPSignPostLog(v60);
  uint64_t v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
  uint64_t v63 = v62;
  if (v59 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v62))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v63,  OS_SIGNPOST_INTERVAL_BEGIN,  v59,  "FaceProcessingClusterFace",  (const char *)&unk_100199097,  buf,  2u);
  }

  uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(-[GDVUVisualUnderstandingService gallery](self->_vuService, "gallery"));
  uint64_t v65 = (int)v333;
  v362 = v333;
  v359[0] = _NSConcreteStackBlock;
  v359[1] = 3221225472LL;
  v359[2] = sub_1000B60C0;
  v359[3] = &unk_1001BCC30;
  int v66 = v331;
  v360 = v66;
  v361 = v330;
  [v64 updateAndReturnError:&v362 progressHandler:v359];
  uint64_t v67 = v362;

  if (v67)
  {
    __int128 v70 = MediaAnalysisLogLevel(v68, v69);
    if ((int)v70 >= 3)
    {
      uint64_t v72 = VCPLogInstance(v70, v71);
      uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
      uint64_t v74 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v73, v74))
      {
        *(_DWORD *)__int128 buf = 138412546;
        *(void *)&uint8_t buf[4] = v66;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v67;
        _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "%@ Failed to update gallery for face clustering and person building - %@",  buf,  0x16u);
      }
    }

    -[VCPTimeMeasurement stop](v55, "stop");
    uint64_t v65 = [v67 code];
  }

  else
  {
    uint64_t v75 = MediaAnalysisLogLevel(v68, v69);
    if ((int)v75 >= 6)
    {
      uint64_t v77 = VCPLogInstance(v75, v76);
      uint64_t v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
      uint64_t v65 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v78, (os_log_type_t)VCPLogToOSLogType[6]))
      {
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v66;
        _os_log_impl((void *)&_mh_execute_header, v78, (os_log_type_t)v65, "%@ Finished Face Clustering", buf, 0xCu);
      }
    }

    -[VCPTimeMeasurement stop](v55, "stop");
    os_log_type_t v79 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
    -[VCPTimeMeasurement elapsedTimeSeconds](v55, "elapsedTimeSeconds");
    objc_msgSend( v79,  "accumulateDoubleValue:forField:andEvent:",  @"FaceClusteringElapsedTimeInSeconds",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");

    uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
    [v80 accumulateInt64Value:1 forField:@"NumberOfClusterEvents" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];

    v82 = VCPSignPostLog(v81);
    uint64_t v83 = (os_log_s *)objc_claimAutoreleasedReturnValue(v82);
    uint64_t v84 = v83;
    if (v59 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v83))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v84,  OS_SIGNPOST_INTERVAL_END,  v59,  "FaceProcessingClusterFace",  (const char *)&unk_100199097,  buf,  2u);
    }

    if (v56)
    {
      uint64_t v85 = mach_absolute_time();
      VCPPerformance_LogMeasurement("FaceProcessingClusterFace", v85 - v56);
    }
  }

  if (!v67)
  {
    uint64_t v46 = 0LL;
    goto LABEL_50;
  }

LABEL_203:
  return v65;
}

LABEL_204:
}

void sub_1000B5BE0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, void *a18, void *a19, void *a20, void *a21, void *a22, void *a23, uint64_t a24, void *a25, void *a26, void *a27, void *a28, void *a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, void *a46, void *a47, void *a48, void *a49, uint64_t a50,void *a51,void *a52)
{
  _Block_object_dispose((const void *)(v56 - 240), 8);
  _Unwind_Resume(a1);
}

id sub_1000B6068(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1000B60B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000B60C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 7)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      [v3 fractionCompleted];
      int v14 = 138412546;
      uint64_t v15 = v10;
      __int16 v16 = 2048;
      double v17 = (float)(v11 * 100.0);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Gallery updating - %.2f%%", (uint8_t *)&v14, 0x16u);
    }
  }

  int v12 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();

  return v12 ^ 1u;
}

void sub_1000B61D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000B61F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v4 pet];

  uint64_t v33 = 0LL;
  os_log_type_t v34 = &v33;
  uint64_t v35 = 0x2050000000LL;
  uint64_t v5 = (void *)qword_1001E65E0;
  uint64_t v36 = qword_1001E65E0;
  if (!qword_1001E65E0)
  {
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_1000B86FC;
    uint64_t v38 = &unk_1001B9F10;
    uint64_t v39 = &v33;
    sub_1000B86FC((uint64_t)buf);
    uint64_t v5 = (void *)v34[3];
  }

  id v6 = v5;
  _Block_object_dispose(&v33, 8);
  uint64_t v7 = objc_opt_class(v6);
  if ((objc_opt_isKindOfClass(v3, v7) & 1) != 0)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "entityIdentifier", v33));
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 stringValue]);

    id v10 = [*(id *)(a1 + 32) addObject:v9];
    uint64_t v12 = MediaAnalysisLogLevel(v10, v11);
    if ((int)v12 >= 7)
    {
      uint64_t v14 = VCPLogInstance(v12, v13);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      os_log_type_t v16 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = *(void *)(a1 + 40);
        id v18 = [v3 updateType];
        *(_DWORD *)__int128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v18;
        *(_WORD *)&buf[22] = 2112;
        uint64_t v38 = v9;
        uint64_t v19 = "%@ Detected observation update (%lu) for %@";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v15, v16, v19, buf, 0x20u);
        goto LABEL_14;
      }

      goto LABEL_14;
    }

    goto LABEL_15;
  }

  uint64_t v33 = 0LL;
  os_log_type_t v34 = &v33;
  uint64_t v35 = 0x2050000000LL;
  int v20 = (void *)qword_1001E65E8;
  uint64_t v36 = qword_1001E65E8;
  if (!qword_1001E65E8)
  {
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_1000B8750;
    uint64_t v38 = &unk_1001B9F10;
    uint64_t v39 = &v33;
    sub_1000B8750((uint64_t)buf);
    int v20 = (void *)v34[3];
  }

  id v21 = v20;
  _Block_object_dispose(&v33, 8);
  uint64_t v22 = objc_opt_class(v21);
  if ((objc_opt_isKindOfClass(v3, v22) & 1) != 0)
  {
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "entityIdentifier", v33));
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue([v23 stringValue]);

    id v24 = [*(id *)(a1 + 32) addObject:v9];
    uint64_t v26 = MediaAnalysisLogLevel(v24, v25);
    if ((int)v26 >= 7)
    {
      uint64_t v28 = VCPLogInstance(v26, v27);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      os_log_type_t v16 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v29 = *(void *)(a1 + 40);
        id v30 = [v3 updateType];
        *(_DWORD *)__int128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v29;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v30;
        *(_WORD *)&buf[22] = 2112;
        uint64_t v38 = v9;
        uint64_t v19 = "%@ Detected entity update (%lu) for %@";
        goto LABEL_13;
      }

void sub_1000B6510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000B65A4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v90 = a3;
  id v91 = a4;
  id v92 = a5;
  uint64_t v10 = mach_absolute_time();
  uint64_t v11 = VCPSignPostLog(v10);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  os_signpost_id_t v13 = os_signpost_id_generate(v12);

  uint64_t v15 = VCPSignPostLog(v14);
  os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  uint64_t v17 = v16;
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_INTERVAL_BEGIN,  v13,  "GalleryUpdate_updatePhotosWithEntityBlock",  (const char *)&unk_100199097,  buf,  2u);
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v18 pet];

  ++*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL);
  uint64_t v19 = *(void *)(a1 + 32);
  int v20 = (void *)objc_claimAutoreleasedReturnValue([v9 stringValue]);
  os_log_type_t v89 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@[%@][%lu]",  v19,  v20,  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 24LL)));

  uint64_t v23 = MediaAnalysisLogLevel(v21, v22);
  if ((int)v23 >= 7)
  {
    uint64_t v25 = VCPLogInstance(v23, v24);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    os_log_type_t v27 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = [v92 count];
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v97 = v89;
      __int16 v98 = 2048;
      id v99 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "%@ Receiving Photos with %lu face observations ... ",  buf,  0x16u);
    }
  }

  if (!*(void *)(a1 + 40)
    || (uint64_t v29 = *(void **)(a1 + 48),
        id v30 = (void *)objc_claimAutoreleasedReturnValue([v9 stringValue]),
        LOBYTE(v29) = [v29 containsObject:v30],
        v30,
        (v29 & 1) != 0))
  {
LABEL_10:
    unsigned int v31 = objc_autoreleasePoolPush();
    __int16 v32 = (void *)objc_claimAutoreleasedReturnValue(+[MADGDUtilities sharedInstance](&OBJC_CLASS___MADGDUtilities, "sharedInstance"));
    unsigned int v33 = objc_msgSend(*(id *)(*(void *)(a1 + 64) + 152), "vcp_isSyndicationLibrary");
    uint64_t v34 = *(void *)(a1 + 64);
    uint64_t v35 = *(void *)(v34 + 152);
    uint64_t v36 = *(void *)(v34 + 136);
    if (v33)
    {
      uint64_t v37 = *(void *)(a1 + 80);
      id v94 = 0LL;
      unsigned __int8 v38 = [v32 updatePersonWithSyndicationLibrary:v35 service:v36 entityIdentifier:v9 entityClass:v90 observationIDs:v92 ta ggedPersonUUID:v91 cancelOrExtendTimeoutBlock:v37 error:&v94];
      id v39 = v94;
      uint64_t v41 = v39;
      if ((v38 & 1) != 0)
      {
        uint64_t v42 = MediaAnalysisLogLevel(v39, v40);
        uint64_t v44 = VCPLogInstance(v42, v43);
        int v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        os_log_type_t v46 = VCPLogToOSLogType[7];
        if (!os_log_type_enabled(v45, v46)) {
          goto LABEL_34;
        }
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v97 = v89;
        __int16 v47 = "%@ Updated Syndication Library";
        goto LABEL_19;
      }

      uint64_t v71 = MediaAnalysisLogLevel(v39, v40);
      uint64_t v73 = VCPLogInstance(v71, v72);
      int v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
      os_log_type_t v74 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled(v45, v74)) {
        goto LABEL_34;
      }
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v97 = v89;
      __int16 v98 = 2112;
      id v99 = v41;
      __int16 v47 = "%@ Failed to update Syndication Library - %@";
    }

    else
    {
      uint64_t v48 = *(void *)(a1 + 72);
      uint64_t v49 = *(void *)(a1 + 80);
      id v93 = 0LL;
      unsigned __int8 v50 = [v32 updatePersonWithPhotosLibrary:v35 service:v36 entityIdentifier:v9 entityClass:v90 observationIDs:v92 taggedP ersonUUID:v91 keyFaceLocalIdentifiers:v48 cancelOrExtendTimeoutBlock:v49 error:&v93];
      id v51 = v93;
      uint64_t v41 = v51;
      if ((v50 & 1) != 0)
      {
        uint64_t v53 = MediaAnalysisLogLevel(v51, v52);
        uint64_t v55 = VCPLogInstance(v53, v54);
        int v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
        os_log_type_t v46 = VCPLogToOSLogType[7];
        if (!os_log_type_enabled(v45, v46)) {
          goto LABEL_34;
        }
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v97 = v89;
        __int16 v47 = "%@ Updated Photos";
LABEL_19:
        uint64_t v56 = v45;
        os_log_type_t v57 = v46;
        uint32_t v58 = 12;
LABEL_33:
        _os_log_impl((void *)&_mh_execute_header, v56, v57, v47, buf, v58);
        goto LABEL_34;
      }

      uint64_t v75 = MediaAnalysisLogLevel(v51, v52);
      uint64_t v77 = VCPLogInstance(v75, v76);
      int v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
      os_log_type_t v74 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled(v45, v74))
      {
LABEL_34:

LABEL_35:
        objc_autoreleasePoolPop(v31);
        uint64_t v79 = VCPSignPostLog(v78);
        uint64_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
        uint64_t v81 = v80;
        if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v80))
        {
          *(_WORD *)__int128 buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v81,  OS_SIGNPOST_INTERVAL_END,  v13,  "GalleryUpdate_updatePhotosWithEntityBlock",  (const char *)&unk_100199097,  buf,  2u);
        }

        if (v10)
        {
          uint64_t v82 = mach_absolute_time();
          VCPPerformance_LogMeasurement("GalleryUpdate_updatePhotosWithEntityBlock", v82 - v10);
        }

        unsigned int v70 = [*(id *)(a1 + 64) isCancelled];

        goto LABEL_41;
      }

      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v97 = v89;
      __int16 v98 = 2112;
      id v99 = v41;
      __int16 v47 = "%@ Failed to update Photos - %@";
    }

    uint64_t v56 = v45;
    os_log_type_t v57 = v74;
    uint32_t v58 = 22;
    goto LABEL_33;
  }

  unsigned __int8 v59 = (void *)objc_claimAutoreleasedReturnValue([v9 stringValue]);
  uint64_t v95 = v59;
  id v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v95, 1LL));
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchPersonsWithMdIDs:options:]( &OBJC_CLASS___PHPerson,  "fetchPersonsWithMdIDs:options:",  v60,  *(void *)(a1 + 56)));
  BOOL v62 = [v61 count] == 0;

  if (v62)
  {
    uint64_t v84 = MediaAnalysisLogLevel(v63, v64);
    if ((int)v84 >= 5)
    {
      uint64_t v86 = VCPLogInstance(v84, v85);
      uint64_t v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
      os_log_type_t v88 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v87, v88))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v97 = v89;
        _os_log_impl( (void *)&_mh_execute_header,  v87,  v88,  "%@ Person not in Photos DB (should be according to bookmark)",  buf,  0xCu);
      }
    }

    goto LABEL_10;
  }

  uint64_t v65 = MediaAnalysisLogLevel(v63, v64);
  if ((int)v65 >= 7)
  {
    uint64_t v67 = VCPLogInstance(v65, v66);
    __int128 v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
    os_log_type_t v69 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v68, v69))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v97 = v89;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "%@ Person already in Photos DB; skip updating", buf, 0xCu);
    }
  }

  unsigned int v70 = [*(id *)(a1 + 64) isCancelled];
LABEL_41:

  return v70 ^ 1;
}

void sub_1000B6C4C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000B6D34(uint64_t a1, float a2)
{
  unsigned int v4 = [*(id *)(a1 + 32) isCancelled];
  id v5 = [*(id *)(a1 + 32) isCancelled];
  if ((v5 & 1) == 0)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v7 pet];
  }

  uint64_t v8 = MediaAnalysisLogLevel(v5, v6);
  if ((int)v8 >= 6)
  {
    uint64_t v10 = VCPLogInstance(v8, v9);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    os_log_type_t v12 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      int v15 = 138412802;
      uint64_t v16 = v13;
      __int16 v17 = 2048;
      double v18 = a2 * 100.0;
      __int16 v19 = 1024;
      unsigned int v20 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "%@ VUWGallery plugin update progress: %.2f%%, isCancelled %d",  (uint8_t *)&v15,  0x1Cu);
    }
  }

  return v4 ^ 1;
}

void sub_1000B6E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B6FCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B7018(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 7)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v113 = @"[PublishDetectionAndProcessPerson]";
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ Start to publish", buf, 0xCu);
    }
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) changeBatch]);
  id v111 = 0LL;
  unsigned __int8 v9 = [v8 publishWithError:&v111];
  id v10 = v111;

  uint64_t v13 = MediaAnalysisLogLevel(v11, v12);
  if ((int)v13 >= 7)
  {
    uint64_t v15 = VCPLogInstance(v13, v14);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    os_log_type_t v17 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v16, v17))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v113 = @"[PublishDetectionAndProcessPerson]";
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%@ Finished publish", buf, 0xCu);
    }
  }

  if ((v9 & 1) == 0)
  {
    unsigned int v18 = [v10 code];
    if (v18 == -128)
    {
      uint64_t v25 = *(void **)(a1 + 40);
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) processedAssets]);
      os_log_type_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) processingStatusMap]);
      [v25 _recoverAttemptsForAssets:v26 withProcessingStatusMap:v27];

      unsigned int v18 = -128;
      goto LABEL_21;
    }

    if (v18) {
      goto LABEL_21;
    }
  }

  __int128 v109 = 0u;
  __int128 v110 = 0u;
  __int128 v107 = 0u;
  __int128 v108 = 0u;
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) processedAssets]);
  id v20 = [v19 countByEnumeratingWithState:&v107 objects:v116 count:16];
  if (v20)
  {
    uint64_t v21 = *(void *)v108;
    do
    {
      for (unint64_t i = 0LL; i != v20; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v108 != v21) {
          objc_enumerationMutation(v19);
        }
        uint64_t v23 = *(void **)(*(void *)(a1 + 40) + 160LL);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v107 + 1) + 8 * (void)i) localIdentifier]);
        [v23 removeProcessingStatusForLocalIdentifier:v24 andTaskID:3];
      }

      id v20 = [v19 countByEnumeratingWithState:&v107 objects:v116 count:16];
    }

    while (v20);
  }

  [*(id *)(*(void *)(a1 + 40) + 160) commit];
  unsigned int v18 = 0;
LABEL_21:
  *(_DWORD *)(*(void *)(a1 + 40) + 120LL) = v18;
  v106[0] = _NSConcreteStackBlock;
  v106[1] = 3221225472LL;
  v106[2] = sub_1000B7C70;
  v106[3] = &unk_1001B9E98;
  v106[4] = *(void *)(a1 + 40);
  id v28 = objc_retainBlock(v106);
  uint64_t v29 = objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  unsigned int v31 = (void *)v29;
  uint64_t v32 = *(void *)(a1 + 40);
  int v33 = *(_DWORD *)(v32 + 120);
  if (!v33)
  {
    unsigned int v41 = objc_msgSend(*(id *)(v32 + 152), "mad_useVUGallery");
    uint64_t v42 = *(void **)(*(void *)(a1 + 40) + 152LL);
    if (v41)
    {
      if (!objc_msgSend(v42, "vcp_isSyndicationLibrary")
        || (_os_feature_enabled_impl("MediaAnalysis", "VUSyndicationLibrary") & 1) != 0)
      {
        id v43 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 152), "mad_countOfUnclusteredFaces");
        uint64_t v45 = MediaAnalysisLogLevel(v43, v44);
        if ((int)v45 >= 7)
        {
          uint64_t v47 = VCPLogInstance(v45, v46);
          uint64_t v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
          os_log_type_t v49 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v48, v49))
          {
            *(_DWORD *)__int128 buf = 138412546;
            __int128 v113 = @"[PublishDetectionAndProcessPerson]";
            __int16 v114 = 2048;
            id v115 = v43;
            _os_log_impl((void *)&_mh_execute_header, v48, v49, "%@ Found %lu unclustered faces", buf, 0x16u);
          }
        }

        if (v43 >= (id)+[MADGDUtilities clusterFaceCountThreshold]( &OBJC_CLASS___MADGDUtilities,  "clusterFaceCountThreshold"))
        {
          [*(id *)(*(void *)(a1 + 40) + 160) cacheCurrentFaceProgress];
          if (([*(id *)(a1 + 40) isCancelled] & 1) == 0)
          {
            id v50 = [*(id *)(a1 + 40) processFaceCrops];
            int v33 = (int)v50;
            if (!(_DWORD)v50)
            {
              id v75 = [*(id *)(a1 + 40) processGalleryPersons:0];
              int v33 = (int)v75;
              if ((_DWORD)v75)
              {
                uint64_t v77 = MediaAnalysisLogLevel(v75, v76);
                if ((int)v77 >= 3)
                {
                  uint64_t v79 = VCPLogInstance(v77, v78);
                  uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
                  os_log_type_t v38 = VCPLogToOSLogType[3];
                  if (!os_log_type_enabled(v37, v38)) {
                    goto LABEL_26;
                  }
                  *(_DWORD *)__int128 buf = 138412546;
                  __int128 v113 = @"[PublishDetectionAndProcessPerson]";
                  __int16 v114 = 1024;
                  LODWORD(v115) = 0;
                  uint64_t v40 = "%@ Failed to process persons (%d)";
                  goto LABEL_25;
                }
              }

              goto LABEL_44;
            }

            uint64_t v52 = MediaAnalysisLogLevel(v50, v51);
            uint64_t v54 = VCPLogInstance(v52, v53);
            uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
            os_log_type_t v38 = VCPLogToOSLogType[3];
            if (!os_log_type_enabled(v37, v38)) {
              goto LABEL_26;
            }
LABEL_39:
            *(_DWORD *)__int128 buf = 138412546;
            __int128 v113 = @"[PublishDetectionAndProcessPerson]";
            __int16 v114 = 1024;
            LODWORD(v115) = 0;
            uint64_t v40 = "%@ Failed to process facecrops (%d)";
            goto LABEL_25;
          }

          goto LABEL_43;
        }
      }

      goto LABEL_41;
    }

    id v55 = [*(id *)(a1 + 40) processFaceCrops];
    int v33 = (int)v55;
    if ((_DWORD)v55)
    {
      uint64_t v57 = MediaAnalysisLogLevel(v55, v56);
      uint64_t v59 = VCPLogInstance(v57, v58);
      uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
      os_log_type_t v38 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled(v37, v38)) {
        goto LABEL_26;
      }
      goto LABEL_39;
    }

    if ([*(id *)(a1 + 40) isCancelled])
    {
LABEL_43:
      int v33 = -128;
      goto LABEL_44;
    }

    id v60 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 152), "mad_countOfUnclusteredFaces");
    if (!v60)
    {
LABEL_41:
      int v33 = 0;
      goto LABEL_44;
    }

    uint64_t v62 = MediaAnalysisLogLevel(v60, v61);
    if ((int)v62 >= 7)
    {
      uint64_t v64 = VCPLogInstance(v62, v63);
      uint64_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
      os_log_type_t v66 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v65, v66))
      {
        id v67 = objc_msgSend(*(id *)(*(void *)(a1 + 40) + 152), "mad_countOfUnclusteredFaces");
        *(_DWORD *)__int128 buf = 138412546;
        __int128 v113 = @"[PublishDetectionAndProcessPerson]";
        __int16 v114 = 2048;
        id v115 = v67;
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "%@ countOfUnclusteredFaces: %lu", buf, 0x16u);
      }
    }

    uint64_t v37 = objc_alloc_init(&OBJC_CLASS___VCPTimeMeasurement);
    -[os_log_s start](v37, "start");
    id v68 = [*(id *)(*(void *)(a1 + 40) + 32) clusterFacesIfNecessary];
    int v33 = (int)v68;
    if ((_DWORD)v68)
    {
      uint64_t v70 = MediaAnalysisLogLevel(v68, v69);
      uint64_t v72 = VCPLogInstance(v70, v71);
      uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue(v72);
      os_log_type_t v74 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v73, v74))
      {
        *(_DWORD *)__int128 buf = 138412546;
        __int128 v113 = @"[PublishDetectionAndProcessPerson]";
        __int16 v114 = 1024;
        LODWORD(v115) = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "%@ Failed to cluster faces (%d)", buf, 0x12u);
      }

void sub_1000B7AE8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1000B7C20(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000B7C5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_1000B7C70(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000B82A4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1000B83D4(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000B8410( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_1000B8424(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000B8554(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("GDVUEntityRecognitionClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E65C0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_1000B87A4();
    sub_1000B85A8();
  }

void sub_1000B85A8()
{
  id v1 = 0LL;
  if (!qword_1001E65C8)
  {
    __int128 v2 = off_1001BCD08;
    uint64_t v3 = 0LL;
    qword_1001E65C8 = _sl_dlopen(&v2, &v1);
  }

  uint64_t v0 = v1;
  if (!qword_1001E65C8)
  {
    uint64_t v0 = (char *)abort_report_np("%s", v1);
    goto LABEL_7;
  }

  if (v1) {
LABEL_7:
  }
    free(v0);
}

Class sub_1000B8654(uint64_t a1)
{
  Class result = objc_getClass("GDVUVisualUnderstandingService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E65D0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_1000B87C8();
    return (Class)sub_1000B86A8(v3);
  }

  return result;
}

Class sub_1000B86A8(uint64_t a1)
{
  Class result = objc_getClass("GDVUChangeBookmark");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E65D8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_1000B87EC();
    return sub_1000B86FC(v3);
  }

  return result;
}

Class sub_1000B86FC(uint64_t a1)
{
  Class result = objc_getClass("GDVUObservationUpdate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E65E0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_1000B8810();
    return (Class)sub_1000B8750(v3);
  }

  return result;
}

Class sub_1000B8750(uint64_t a1)
{
  Class result = objc_getClass("GDVUEntityUpdate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E65E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_1000B8834();
    return (Class)sub_1000B87A4();
  }

  return result;
}

uint64_t sub_1000B87A4()
{
  uint64_t v0 = abort_report_np("Unable to find class %s", "GDVUEntityRecognitionClient");
  return sub_1000B87C8(v0);
}

uint64_t sub_1000B87C8()
{
  uint64_t v0 = abort_report_np("Unable to find class %s", "GDVUVisualUnderstandingService");
  return sub_1000B87EC(v0);
}

uint64_t sub_1000B87EC()
{
  uint64_t v0 = abort_report_np("Unable to find class %s", "GDVUChangeBookmark");
  return sub_1000B8810(v0);
}

uint64_t sub_1000B8810()
{
  uint64_t v0 = abort_report_np("Unable to find class %s", "GDVUObservationUpdate");
  return sub_1000B8834(v0);
}

VCPFaceLibraryProcessingTask *sub_1000B8834()
{
  uint64_t v0 = (VCPFaceLibraryProcessingTask *)abort_report_np("Unable to find class %s", "GDVUEntityUpdate");
  return -[VCPFaceLibraryProcessingTask init](v0, v1);
}

void sub_1000B8AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000B8AF4(id a1)
{
  return 0;
}

void sub_1000B8BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B8C20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___VCPFaceLibraryProcessingTask;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1000B8F10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000B8FA4(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  __int128 v2 = WeakRetained;
  if (WeakRetained) {
    uint64_t v3 = (uint64_t)[WeakRetained isCancelled];
  }
  else {
    uint64_t v3 = 1LL;
  }

  return v3;
}

void sub_1000B8FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000B96D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000B9854(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) processAssets:*(void *)(*(void *)(a1 + 40) + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_DWORD)result;
  return result;
}

void sub_1000B9DC0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_1000B9ECC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) processAssets:*(void *)(*(void *)(a1 + 40) + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_DWORD)result;
  return result;
}

void sub_1000BA3D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000BA4B8(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 48LL) + 16LL))(a2 * 0.400000006 + 40.0);
}

void sub_1000BAB24( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1000BAE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000BAEFC(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 48LL) + 16LL))(a2 * 0.100000001 + 80.0);
}

void sub_1000BB398( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000BB48C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) processAssets:*(void *)(*(void *)(a1 + 40) + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_DWORD)result;
  return result;
}

void sub_1000BBA8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, void *a25)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000BBB80(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 48LL) + 16LL))(a2 * 0.300000012 + 10.0);
}

void sub_1000BBFB0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_1000BC5F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000BCA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000BCB5C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1000BCBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BCC90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BCCAC(id a1, int a2)
{
  if ((int)MediaAnalysisLogLevel(a1, *(void *)&a2) >= 5)
  {
    uint64_t v3 = VCPLogInstance();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = @"interrupted";
      if (!a2) {
        uint64_t v6 = @"finished";
      }
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 1024;
      int v10 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "[FaceLibraryProcessing] Pre Analysis %@ (%d)",  (uint8_t *)&v7,  0x12u);
    }
  }

uint64_t sub_1000BCD90(uint64_t a1, uint64_t a2, double a3)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 5)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      int v9 = 134217984;
      double v10 = a3;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[FaceLibraryProcessing] Pre Analysis progress: %.2f%%",  (uint8_t *)&v9,  0xCu);
    }
  }

  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 48LL) + 16LL))(a3 * 0.100000001 + 0.0);
}

id sub_1000BCE7C(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000BD02C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1000BD1C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BD520( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  _Unwind_Resume(a1);
}

id sub_1000BD5A0(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) processFaceCrops];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_DWORD)result;
  return result;
}

void sub_1000BD8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000BD948(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000BD950(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v1 pet];
  }

void sub_1000BD9A8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000BDC28( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000BDC80(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) clusterFaces];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_DWORD)result;
  return result;
}

void sub_1000BDFD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, void *a9, void *a10, void *a11, uint64_t a12, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000BE05C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000BE098( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_1000BE0AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000BE0B4(void *a1)
{
  __int128 v2 = objc_autoreleasePoolPush();
  *(_DWORD *)(*(void *)(a1[9] + 8LL) + 24LL) = VCPBuildPersons(a1[4], a1[5], a1[6], a1[7], a1[8]);
  objc_autoreleasePoolPop(v2);
}

void sub_1000BE620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000BE6E4(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1000BE72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BF0C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000BF21C(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000BF258( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_1000BF26C(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

id sub_1000BF274(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1000BF2BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BF7DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_1000BF8D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000BF8E0(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v1 pet];
  }

void sub_1000BF938( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_1000BF94C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1000BF994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BFEA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_1000BFFA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000BFFA8(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isCancelled] & 1) == 0)
  {
    id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v1 pet];
  }

void sub_1000C0000( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_1000C0014(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1000C005C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C049C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C0538(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 48LL) + 16LL))(a2 * 0.100000001 + 90.0);
}

void sub_1000C06A4(id a1)
{
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.mediaanalysisd.MADScopedWatchdog", 0LL);
  __int128 v2 = (void *)qword_1001E65F8;
  qword_1001E65F8 = (uint64_t)v1;
}

void sub_1000C06D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 6)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      v9[0] = 67109120;
      v9[1] = qword_1001E6600;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MADScopedWatchdog] incrementing reference count %u",  (uint8_t *)v9,  8u);
    }
  }

  if (!qword_1001E6600++) {
    [*(id *)(*(void *)(a1 + 32) + 8) enable];
  }
}

void sub_1000C0834(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 6)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      v8[0] = 67109120;
      v8[1] = qword_1001E6600;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "[MADScopedWatchdog] decrementing reference count %u",  (uint8_t *)v8,  8u);
    }
  }

  if (!--qword_1001E6600) {
    [*(id *)(*(void *)(a1 + 32) + 8) disable];
  }
}

void sub_1000C0A40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000C0A70(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_1000C0AB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000C0B40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C0E2C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1000C0EB8(uint64_t a1, uint64_t a2, double a3)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 7)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2048;
      double v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ Download progress: %.2f", (uint8_t *)&v9, 0x16u);
    }
  }

void sub_1000C0F94(uint64_t a1, uint64_t a2)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 6)
  {
    uint64_t v3 = VCPLogInstance();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Downloaded resource received", (uint8_t *)&v7, 0xCu);
    }
  }

void sub_1000C105C(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_log_type_t v5 = v3;
  if (v3)
  {
    if ((int)MediaAnalysisLogLevel(v3, v4) >= 3)
    {
      uint64_t v6 = VCPLogInstance();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      os_log_type_t v8 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v17 = 138412546;
        uint64_t v18 = v9;
        __int16 v19 = 2112;
        id v20 = v5;
        uint64_t v10 = "%@ Failed to download - %@";
        __int16 v11 = v7;
        os_log_type_t v12 = v8;
        uint32_t v13 = 22;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, (uint8_t *)&v17, v13);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if ((int)MediaAnalysisLogLevel(0LL, v4) >= 7)
  {
    uint64_t v14 = VCPLogInstance();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    os_log_type_t v15 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v7, v15))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      int v17 = 138412290;
      uint64_t v18 = v16;
      uint64_t v10 = "%@ Download completed";
      __int16 v11 = v7;
      os_log_type_t v12 = v15;
      uint32_t v13 = 12;
      goto LABEL_8;
    }

void sub_1000C11B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_122:
    uint64_t v70 = 0;
    goto LABEL_123;
  }

  v241 = NSLocalizedDescriptionKey;
  uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue([v18 photoLibraryURL]);
  uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue([v83 path]);
  uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ Photo Library not ready for analysis (%@)",  @"[Face-FP]",  v84));
  v242 = v85;
  uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v242,  &v241,  1LL));
  uint64_t v21 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v86));

  uint64_t v89 = MediaAnalysisLogLevel(v87, v88);
  if ((int)v89 >= 3)
  {
    uint64_t v91 = VCPLogInstance(v89, v90);
    uint64_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
    id v93 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v92, v93))
    {
      os_log_type_t v94 = (void *)objc_claimAutoreleasedReturnValue([v21 description]);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v94;
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "%@", buf, 0xCu);
    }
  }

  if (a3) {
    goto LABEL_37;
  }
LABEL_43:
  uint64_t v70 = 0;
LABEL_130:

  return v70;
}

void sub_1000C2974( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20, void *a21, void *a22, void *a23, void *a24, void *a25, void *a26, _Unwind_Exception *exception_objecta, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, void *a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  _Unwind_Resume(a1);
}

id sub_1000C2D2C(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_1000C2D34(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue([a3 localIdentifier]);
  objc_msgSend(v3, "addObject:");
}

void sub_1000C2D78( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_1000C2D8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

id sub_1000C2D98(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCanceled];
  if ((v1 & 1) == 0)
  {
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1000C2DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2DF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) isCanceled];
  int v5 = (int)v4;
  uint64_t v7 = MediaAnalysisLogLevel(v4, v6);
  if ((int)v7 >= 7)
  {
    uint64_t v9 = VCPLogInstance(v7, v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    os_log_type_t v11 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      [v3 fractionCompleted];
      double v14 = (float)(v13 * 100.0);
      os_log_type_t v15 = @"NO";
      int v18 = 138412802;
      uint64_t v19 = v12;
      if (v5) {
        os_log_type_t v15 = @"YES";
      }
      __int16 v20 = 2048;
      double v21 = v14;
      __int16 v22 = 2112;
      uint64_t v23 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "%@ Gallery updating - %.2f%%, cancelling: %@",  (uint8_t *)&v18,  0x20u);
    }
  }

  if ((v5 & 1) == 0)
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v16 pet];
  }

  return v5 ^ 1u;
}

void sub_1000C2F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C2F74(uint64_t a1, float a2)
{
  id v4 = [*(id *)(a1 + 32) isCanceled];
  int v5 = (int)v4;
  uint64_t v7 = MediaAnalysisLogLevel(v4, v6);
  if ((int)v7 >= 6)
  {
    uint64_t v9 = VCPLogInstance(v7, v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    os_log_type_t v11 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      int v16 = 138412802;
      uint64_t v17 = v12;
      if (v5) {
        float v13 = @"YES";
      }
      else {
        float v13 = @"NO";
      }
      __int16 v18 = 2048;
      double v19 = a2 * 100.0;
      __int16 v20 = 2112;
      double v21 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "%@ VUWGallery plugin updating: %.2f%%, cancelling: %@",  (uint8_t *)&v16,  0x20u);
    }
  }

  if ((v5 & 1) == 0)
  {
    double v14 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v14 pet];
  }

  return v5 ^ 1u;
}

void sub_1000C30B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C310C(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("GDVUVisualUnderstandingService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E6608 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_1000B87C8();
    sub_1000C3160();
  }

void sub_1000C3160()
{
  id v1 = 0LL;
  if (!qword_1001E6610)
  {
    __int128 v2 = off_1001BCF30;
    uint64_t v3 = 0LL;
    qword_1001E6610 = _sl_dlopen(&v2, &v1);
  }

  uint64_t v0 = v1;
  if (!qword_1001E6610)
  {
    uint64_t v0 = (char *)abort_report_np("%s", v1);
    goto LABEL_7;
  }

  if (v1) {
LABEL_7:
  }
    free(v0);
}

VCPFaceAssetProcessingTask *sub_1000C320C(uint64_t a1)
{
  id result = (VCPFaceAssetProcessingTask *)objc_getClass("GDVUEntityRecognitionClient");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E6618 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = (VCPFaceAssetProcessingTask *)sub_1000B87A4();
    return -[VCPFaceAssetProcessingTask initWithAssets:andProgressHandler:andCompletionHandler:](v3, v4, v5, v6, v7);
  }

  return result;
}

void sub_1000C33D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000C342C(id a1)
{
  return 0;
}

void sub_1000C34AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C37F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000C39EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C3D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_91:
            }
          }

          else
          {
            os_log_type_t v94 = MediaAnalysisLogLevel(v53, v54);
            if ((int)v94 >= 7)
            {
              uint64_t v96 = VCPLogInstance(v94, v95);
              uint64_t v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
              if (os_log_type_enabled(v97, v122))
              {
                uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v48 localIdentifier]);
                *(_DWORD *)__int128 buf = v121;
                v142 = v98;
                _os_log_impl((void *)&_mh_execute_header, v97, v122, "[%@] Network unavailable; skipping", buf, 0xCu);
              }

              goto LABEL_91;
            }
          }

          os_log_type_t v49 = 18;
LABEL_65:

LABEL_66:
          objc_autoreleasePoolPop(v47);
          if (v49 > 18) {
            goto LABEL_99;
          }
          ++v45;
        }
      }

      id v104 = MediaAnalysisLogLevel(v40, v41);
      if ((int)v104 < 3)
      {
        id v28 = -18;
      }

      else
      {
        __int128 v106 = VCPLogInstance(v104, v105);
        __int128 v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);
        __int128 v108 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v107, v108))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v107,  v108,  "Failed to retrieve VCPPhotosAssetChangeManager",  buf,  2u);
        }

        id v28 = -18;
LABEL_117:
      }
    }

    else
    {
      id v28 = 0;
    }
  }

  return v28;
}

void sub_1000C49C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, void *a24, void *a25, void *a26, void *a27)
{
  _Unwind_Resume(a1);
}

id sub_1000C4C24(uint64_t a1)
{
  return [*(id *)(a1 + 32) start];
}

LABEL_5:
  double v14 = 0LL;
LABEL_6:

LABEL_29:
  sub_10000421C((const void **)&error);
  return v14;
}
    }
  }

  else
  {
    if (!*a6
      || (uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
          unsigned int v31 = [v18 compare:v30],
          v30,
          v31 != (id)1)
      || v8 && *a6 == 1 && *a5 == 2)
    {
      uint64_t v29 = 1;
      goto LABEL_13;
    }

    uint64_t v35 = MediaAnalysisLogLevel(v32, v33);
    if ((int)v35 >= 6)
    {
      uint64_t v37 = VCPLogInstance(v35, v36);
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      os_log_type_t v38 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v24, v38))
      {
        int v39 = [(id)objc_opt_class(self) name];
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        unsigned int v41 = (void *)objc_claimAutoreleasedReturnValue([v14 localIdentifier]);
        uint64_t v42 = VCPProcessingStatusDescription(*a5);
        id v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
        uint64_t v44 = *a6;
        uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[VCPLogManager dateFormatter](&OBJC_CLASS___VCPLogManager, "dateFormatter"));
        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v45 stringFromDate:v18]);
        *(_DWORD *)__int128 buf = 138413314;
        os_log_type_t v49 = v40;
        id v50 = 2112;
        uint64_t v51 = v41;
        uint64_t v52 = 2112;
        uint64_t v53 = v43;
        uint64_t v54 = 1024;
        id v55 = v44;
        uint64_t v56 = 2112;
        uint64_t v57 = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  v38,  "[%@][%@] Asset skipped (%@|%d); revisit date: %@",
          buf,
          0x30u);
      }

      goto LABEL_5;
    }
  }

  uint64_t v29 = 0;
LABEL_13:

  return v29;
}

void sub_1000C4F8C( _Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  sub_10000421C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1000C5114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C522C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  sub_10000421C((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1000C67A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000C67C8(id a1)
{
  return 0;
}

void sub_1000C6874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C68F0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___VCPLibraryProcessingTask;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1000C6C60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C6FFC( _Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000C7070(id a1, int a2)
{
  if ((int)MediaAnalysisLogLevel(a1, *(void *)&a2) >= 5)
  {
    uint64_t v3 = VCPLogInstance();
    SEL v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      id v6 = @"interrupted";
      if (!a2) {
        id v6 = @"finished";
      }
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 1024;
      int v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pre Analysis %@ (%d)", (uint8_t *)&v7, 0x12u);
    }
  }

uint64_t sub_1000C7154(uint64_t a1, uint64_t a2, double a3)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 5)
  {
    uint64_t v5 = VCPLogInstance();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      int v9 = 134217984;
      double v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Pre Analysis progress: %.2f%%", (uint8_t *)&v9, 0xCu);
    }
  }

  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 32LL) + 16LL))(a3 * 0.1);
}

id sub_1000C723C(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000C7244(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  if ([*(id *)(a1 + 32) isCancelled])
  {
    *a4 = 1;
  }

  else
  {
    id v8 = [v7 isReadyForAnalysis];
    if ((v8 & 1) != 0)
    {
      uint64_t v10 = MediaAnalysisLogLevel(v8, v9);
      if ((int)v10 >= 5)
      {
        uint64_t v12 = VCPLogInstance(v10, v11);
        float v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
        os_log_type_t v14 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v13, v14))
        {
          os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue([v7 photoLibraryURL]);
          int v16 = (void *)objc_claimAutoreleasedReturnValue([v15 path]);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v47 = v16;
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "Processing Library %@ for full analysis", buf, 0xCu);
        }
      }

      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472LL;
      v45[2] = sub_1000C767C;
      v45[3] = &unk_1001B9E98;
      v45[4] = *(void *)(a1 + 32);
      uint64_t v17 = objc_retainBlock(v45);
      +[VCPAnalysisProgressQuery reportProgressForPhotoLibrary:taskID:logMessage:cancelOrExtendTimeoutBlock:]( &OBJC_CLASS___VCPAnalysisProgressQuery,  "reportProgressForPhotoLibrary:taskID:logMessage:cancelOrExtendTimeoutBlock:",  v7,  1LL,  @"Checking progress before task",  v17);
      __int16 v18 = objc_alloc_init(&OBJC_CLASS___VCPTimeMeasurement);
      -[VCPTimeMeasurement start](v18, "start");
      double v19 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:",  v7));
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) createTaskBacklogForPhotoLibrary:v7 withDatabase:v19]);
      id v21 = [v20 count];
      if (v21)
      {
        id v22 = [*(id *)(*(void *)(a1 + 32) + 16) count];
        uint64_t v35 = _NSConcreteStackBlock;
        uint64_t v36 = 3221225472LL;
        uint64_t v37 = sub_1000C76D4;
        os_log_type_t v38 = &unk_1001BCFF0;
        uint64_t v43 = *(void *)(a1 + 48);
        double v44 = 90.0 / (double)(unint64_t)v21 / (double)(unint64_t)v22;
        uint64_t v23 = *(void *)(a1 + 40);
        uint64_t v39 = *(void *)(a1 + 32);
        uint64_t v41 = v23;
        uint64_t v42 = a3;
        id v24 = v7;
        id v40 = v24;
        [v20 enumerateObjectsUsingBlock:&v35];
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[VCPBackgroundProcessingMetrics sharedMetricsWithPhotoLibrary:]( &OBJC_CLASS___VCPBackgroundProcessingMetrics,  "sharedMetricsWithPhotoLibrary:",  v24));
        [v25 persist];

        [v19 flush];
        -[VCPTimeMeasurement stop](v18, "stop");
        -[VCPTimeMeasurement elapsedTimeSeconds](v18, "elapsedTimeSeconds");
        os_log_type_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Checking progress after task (%.2f seconds)",  v26,  v35,  v36,  v37,  v38,  v39));
        +[VCPAnalysisProgressQuery reportProgressForPhotoLibrary:taskID:logMessage:cancelOrExtendTimeoutBlock:]( &OBJC_CLASS___VCPAnalysisProgressQuery,  "reportProgressForPhotoLibrary:taskID:logMessage:cancelOrExtendTimeoutBlock:",  v24,  1LL,  v27,  v17);
        MediaAnalysisDaemonReleaseSharedDataStores(v24);
      }
    }

    else
    {
      uint64_t v28 = MediaAnalysisLogLevel(v8, v9);
      if ((int)v28 >= 5)
      {
        uint64_t v30 = VCPLogInstance(v28, v29);
        unsigned int v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        os_log_type_t v32 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v31, v32))
        {
          int v33 = (void *)objc_claimAutoreleasedReturnValue([v7 photoLibraryURL]);
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v33 path]);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v47 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "Photo Library is not ready for analysis (%@); skipping library",
            buf,
            0xCu);
        }
      }
    }
  }
}

void sub_1000C75C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000C767C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1000C76C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C76D4(uint64_t a1, void *a2, unint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  double v8 = (double)*(unint64_t *)(a1 + 56) * *(double *)(a1 + 64) + 10.0 + (double)a3 * *(double *)(a1 + 72);
  (*(void (**)(double))(*(void *)(*(void *)(a1 + 32) + 32LL) + 16LL))(v8);
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_1000C7B04;
  void v32[3] = &unk_1001BAE28;
  v32[4] = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 72);
  *(double *)&v32[5] = v8;
  v32[6] = v9;
  uint64_t v10 = objc_retainBlock(v32);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  v31[2] = sub_1000C7BF8;
  v31[3] = &unk_1001B9E98;
  void v31[4] = *(void *)(a1 + 32);
  [v7 setCancel:v31];
  [v7 setProgressHandler:v10];
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___VCPUnifiedFullAnalysisTask);
  if ((objc_opt_isKindOfClass(v7, v11) & 1) != 0)
  {
    uint64_t v12 = &VCPAnalyticsFieldUnifiedFullTaskTimestamp;
  }

  else
  {
    uint64_t v13 = objc_opt_class(&OBJC_CLASS___VCPResumePausedAnalysisTask);
    if ((objc_opt_isKindOfClass(v7, v13) & 1) != 0)
    {
      uint64_t v12 = &VCPAnalyticsFieldResumePausedTaskTimestamp;
    }

    else
    {
      uint64_t v14 = objc_opt_class(&OBJC_CLASS___VCPFailedAssetAnalysisTask);
      if ((objc_opt_isKindOfClass(v7, v14) & 1) != 0)
      {
        uint64_t v12 = &VCPAnalyticsFieldFailedAssetTaskTimestamp;
      }

      else
      {
        uint64_t v15 = objc_opt_class(&OBJC_CLASS___VCPMediaTypeAnalysisTask);
        if ((objc_opt_isKindOfClass(v7, v15) & 1) != 0)
        {
          uint64_t v12 = &VCPAnalyticsFieldMediaTypeTaskTimestamp;
        }

        else
        {
          uint64_t v16 = objc_opt_class(&OBJC_CLASS___MADFullAnalysisResultsSynchronizationTask);
          if ((objc_opt_isKindOfClass(v7, v16) & 1) == 0)
          {
            uint64_t v17 = 0LL;
            goto LABEL_13;
          }

          uint64_t v12 = &VCPAnalyticsFieldResultsSynchronizationTaskTimestamp;
        }
      }
    }
  }

  uint64_t v17 = *v12;
  if (v17)
  {
    __int16 v18 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
    double v19 = (void *)objc_claimAutoreleasedReturnValue(+[VCPLogManager dateFormatter](&OBJC_CLASS___VCPLogManager, "dateFormatter"));
    __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 stringFromDate:v20]);
    [v18 setValue:v21 forField:v17 andEvent:@"com.apple.mediaanalysisd.FullAnalysisRunSession"];
  }

void sub_1000C7A80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C7B04(uint64_t a1, uint64_t a2, double a3)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 5)
  {
    uint64_t v5 = VCPLogInstance();
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      int v9 = 134217984;
      double v10 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Media Analysis task progress: %.2f%%", (uint8_t *)&v9, 0xCu);
    }
  }

  return (*(uint64_t (**)(double))(*(void *)(*(void *)(a1 + 32) + 32LL) + 16LL))(*(double *)(a1 + 40) + *(double *)(a1 + 48) * a3 / 100.0);
}

id sub_1000C7BF8(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000C7CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C7D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C8064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C82E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C8594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C8734( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000C8768(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_1000C87B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000C88F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

id sub_1000C8928(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v5 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v5 >= 5)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    double v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v8, v9))
    {
      id v10 = [(id)objc_opt_class(*(void *)(a1 + 32)) name];
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      int v13 = 138412546;
      uint64_t v14 = v11;
      __int16 v15 = 2048;
      double v16 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%@] Pre Analysis progress: %.2f%%", (uint8_t *)&v13, 0x16u);
    }
  }

  return [*(id *)(a1 + 40) setCompletedUnitCount:(uint64_t)a3];
}

void sub_1000C8A24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C8A3C(id a1, int a2)
{
  if ((int)MediaAnalysisLogLevel(a1, *(void *)&a2) >= 5)
  {
    uint64_t v3 = VCPLogInstance();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = @"interrupted";
      if (!a2) {
        uint64_t v6 = @"finished";
      }
      int v7 = 138412546;
      double v8 = v6;
      __int16 v9 = 1024;
      int v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Pre Analysis %@ (%d)", (uint8_t *)&v7, 0x12u);
    }
  }

id sub_1000C8B20(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_1000C8FFC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000C9684( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_1000C9DAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1000CA508( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1000CAA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000CAAD0(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    id v4 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
    char v5 = v4[2]();

    if ((v5 & 1) != 0) {
      return 1LL;
    }
  }

  int v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  return 0LL;
}

void sub_1000CAB58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CB3A8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, void *a36)
{
  _Unwind_Resume(a1);
}

void sub_1000CB504(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = [(id)objc_opt_class(*(void *)(a1 + 32)) name];
      __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      [*(id *)(a1 + 40) fractionCompleted];
      int v13 = 138412546;
      uint64_t v14 = v9;
      __int16 v15 = 2048;
      double v16 = v10 * 100.0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@] Progress: %0.2f%%", (uint8_t *)&v13, 0x16u);
    }
  }

  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 36LL);
  if (v11)
  {
    [*(id *)(a1 + 40) fractionCompleted];
    (*(void (**)(uint64_t, double))(v11 + 16))(v11, v12 * 100.0);
  }

void sub_1000CB634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CB918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  sub_10000421C((const void **)va);
  sub_10000421C((const void **)(v6 - 40));

  _Unwind_Resume(a1);
}

void sub_1000CBA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CBE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CC3A0(_Unwind_Exception *a1)
{
  os_log_type_t v7 = v6;

  _Unwind_Resume(a1);
}

SCMLHandler *__cdecl sub_1000CC420(id a1)
{
  id v1 = objc_alloc(&OBJC_CLASS___SCMLHandler);
  uint64_t v20 = SCMLUseAnyAvailableDevice;
  id v21 = &__kCFBooleanTrue;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v21,  &v20,  1LL));
  id v15 = 0LL;
  uint64_t v3 = -[SCMLHandler initWithOptions:error:](v1, "initWithOptions:error:", v2, &v15);
  id v4 = v15;

  if (v4)
  {
    uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
    if ((int)v7 >= 3)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      double v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = (id)objc_opt_class(&OBJC_CLASS___SCMLHandler);
        int v13 = (void *)objc_claimAutoreleasedReturnValue([v4 description]);
        *(_DWORD *)__int128 buf = 138412546;
        id v17 = v12;
        __int16 v18 = 2112;
        double v19 = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[VCPMADSceneLibraryProcessingTask] Failed to create %@: %@",  buf,  0x16u);
      }
    }
  }

  return v3;
}

void sub_1000CC598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CC66C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CC6E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  double v10 = v9;

  a9.super_class = (Class)&OBJC_CLASS___VCPMADSceneLibraryProcessingTask;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1000CCB5C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_1000CCBF8(uint64_t a1)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v7;
    do
    {
      id v4 = 0LL;
      do
      {
        if (*(void *)v7 != v3) {
          objc_enumerationMutation(v1);
        }
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[PHAssetChangeRequest changeRequestForAsset:]( &OBJC_CLASS___PHAssetChangeRequest,  "changeRequestForAsset:",  *(void *)(*((void *)&v6 + 1) + 8LL * (void)v4),  (void)v6));
        [v5 setImageEmbeddingVersion:70];

        id v4 = (char *)v4 + 1;
      }

      while (v2 != v4);
      id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }

    while (v2);
  }
}

void sub_1000CCD04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_66:
        goto LABEL_67;
      }

      id v81 = objc_autoreleasePoolPush();
      v119.receiver = self;
      v119.super_class = (Class)&OBJC_CLASS___VCPMADSceneLibraryProcessingTask;
      uint64_t v82 = -[VCPMADSceneLibraryProcessingTask cancelBlock](&v119, "cancelBlock");
      uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(v82);
      if (v83
        && (v118.receiver = self,
            v118.super_class = (Class)&OBJC_CLASS___VCPMADSceneLibraryProcessingTask,
            uint64_t v84 = -[VCPMADSceneLibraryProcessingTask cancelBlock](&v118, "cancelBlock"),
            uint64_t v85 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue(v84),
            uint64_t v86 = v85[2](),
            v85,
            v83,
            v86))
      {
        uint64_t v89 = MediaAnalysisLogLevel(v87, v88);
        if ((int)v89 < 5)
        {
          LODWORD(v19) = -128;
          id v93 = 1;
          goto LABEL_54;
        }

        uint64_t v91 = VCPLogInstance(v89, v90);
        uint64_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(v91);
        if (os_log_type_enabled(v92, type))
        {
          *(_DWORD *)__int128 buf = 138412290;
          v126 = v116;
          _os_log_impl((void *)&_mh_execute_header, v92, type, "%@ Processing cancelled", buf, 0xCu);
        }

        LODWORD(v19) = -128;
        id v93 = 1;
      }

      else
      {
        os_log_type_t v94 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
        [v94 pet];

        uint64_t v92 = (os_log_s *)objc_claimAutoreleasedReturnValue([v115 objectAtIndexedSubscript:v79]);
        uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s mediaAnalysisProperties](v92, "mediaAnalysisProperties"));
        uint64_t v96 = v80 == [v95 mediaAnalysisImageVersion];

        if (!v96) {
          goto LABEL_52;
        }
        -[os_log_s addObject:](v111, "addObject:", v92);
        uint64_t v97 = objc_autoreleasePoolPush();
        uint64_t v98 = -[VCPMADSceneLibraryProcessingTask _dataMigrationWithAssets:](self, "_dataMigrationWithAssets:", v111);
        if (!v98)
        {
          -[os_log_s removeAllObjects](v111, "removeAllObjects");
          objc_msgSend( v112,  "setCompletedUnitCount:",  (char *)-[os_log_s count](v111, "count") + (void)objc_msgSend(v112, "completedUnitCount"));
        }

        objc_autoreleasePoolPop(v97);
        if (v98)
        {
          id v93 = 1;
          LODWORD(v19) = v98;
        }

        else
        {
LABEL_52:
          id v93 = 0;
        }
      }

LABEL_54:
      objc_autoreleasePoolPop(v81);
      ++v79;
      if (v93) {
        goto LABEL_66;
      }
    }
  }

  os_log_type_t v27 = MediaAnalysisLogLevel(v25, v26);
  if ((int)v27 >= 5)
  {
    uint64_t v29 = VCPLogInstance(v27, v28);
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    unsigned int v31 = VCPLogToOSLogType[5];
    __int16 v114 = v30;
    if (os_log_type_enabled(v30, v31))
    {
      *(_DWORD *)__int128 buf = 138412290;
      v126 = v116;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%@ Processing cancelled", buf, 0xCu);
    }

    LODWORD(v19) = -128;
    goto LABEL_68;
  }

  LODWORD(v19) = -128;
LABEL_69:

  return (int)v19;
}

                  if (v74 == (id)++v76)
                  {
                    os_log_type_t v74 = [v72 countByEnumeratingWithState:&v111 objects:v119 count:16];
                    if (v74) {
                      goto LABEL_46;
                    }
                    goto LABEL_68;
                  }
                }

                if (!v36)
                {
                  uint64_t v84 = MediaAnalysisLogLevel(v78, v79);
                  if ((int)v84 >= 5)
                  {
                    uint64_t v86 = VCPLogInstance(v84, v85);
                    uint64_t v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
                    if (os_log_type_enabled(v82, type))
                    {
                      id v87 = (void *)objc_claimAutoreleasedReturnValue([v77 localIdentifier]);
                      *(_DWORD *)__int128 buf = 138412290;
                      *(void *)v128 = v87;
                      uint64_t v88 = v82;
                      uint64_t v89 = type;
                      uint64_t v90 = "[%@] Skipped for Person (no identity model)";
                      goto LABEL_63;
                    }

                    goto LABEL_64;
                  }

                  goto LABEL_66;
                }

                __int128 v110 = 0LL;
                uint64_t v80 = (id *)&v110;
                -[VCPPhotosFaceIdentificationTask _classifyPerson:usingModel:withResults:]( self,  "_classifyPerson:usingModel:withResults:",  v77,  v36,  &v110);
                goto LABEL_55;
              }

            int v33 = 4;
LABEL_67:

            goto LABEL_70;
          }
        }

        int v33 = 4;
        goto LABEL_70;
      }

      uint64_t v98 = MediaAnalysisLogLevel(v41, v42);
      if ((int)v98 >= 4)
      {
        uint64_t v100 = VCPLogInstance(v98, v99);
        uint64_t v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v100);
        if (os_log_type_enabled(v96, v12))
        {
          v101 = (void *)objc_claimAutoreleasedReturnValue([v16 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          v148 = v101;
          _os_log_impl( (void *)&_mh_execute_header,  v96,  v12,  "[Sticker][%@] Thumbnail resource not locally available",  buf,  0xCu);
        }

void sub_1000CD758( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20, void *a21, void *a22, void *a23, void *a24, void *a25)
{
}

LABEL_58:
LABEL_59:
  objc_autoreleasePoolPop(context);
  if (!v23) {
LABEL_60:
  }
    os_log_type_t v11 = 0;
LABEL_61:

  return v11;
}
      }
    }

    else
    {
      id v93 = MediaAnalysisLogLevel(0LL, v40);
      if ((int)v93 >= 4)
      {
        uint64_t v95 = VCPLogInstance(v93, v94);
        uint64_t v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
        if (os_log_type_enabled(v96, v12))
        {
          uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue([v16 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          v148 = v97;
          _os_log_impl((void *)&_mh_execute_header, v96, v12, "[Sticker][%@] No thumbnail resource", buf, 0xCu);
        }

        goto LABEL_58;
      }
    }

    int v33 = 4;
LABEL_71:

LABEL_72:
    os_log_type_t v11 = v12;
LABEL_19:
    objc_autoreleasePoolPop(v13);
    if ((v33 | 4) != 4) {
      break;
    }
    ++v10;
  }

  if (objc_msgSend(v138, "count", v127))
  {
    -[MADPhotosOnDemandStaticStickerScoreTask publishResults:](self, "publishResults:", v138);
    id v111 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));

    v138 = (void *)v111;
    os_log_type_t v11 = v12;
  }

  dispatch_group_wait((dispatch_group_t)self->_publishGroup, 0xFFFFFFFFFFFFFFFFLL);
  __int128 v112 = atomic_load((unsigned __int8 *)&self->_publishFailed);
  if ((v112 & 1) != 0)
  {
    if (a3)
    {
      v123 = -[NSError copy](self->_publishError, "copy");
      v122 = (os_log_s *)*a3;
      *a3 = v123;
      goto LABEL_84;
    }

            unsigned int v31 = 0;
            goto LABEL_53;
          }
      }
    }

    else
    {
      uint64_t v86 = MediaAnalysisLogLevel(0LL, v61);
      uint64_t v88 = VCPLogInstance(v86, v87);
      id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
      uint64_t v89 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v68, v89))
      {
        uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(-[PHPhotoLibrary photoLibraryURL](self->_photoLibrary, "photoLibraryURL"));
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)__int128 v105 = v90;
        _os_log_impl( (void *)&_mh_execute_header,  v68,  v89,  "[FullCluster] Failed to obtain vector database for library %@",  buf,  0xCu);
      }
    }

void sub_1000CE15C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, void *a23, void *a24, uint64_t a25, void *a26, void *a27, void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1000CE2C0(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000CE2FC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000CE46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF354( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  uint64_t v24 = v22;
  objc_destroyWeak(v24);
  objc_destroyWeak(v23);
  objc_destroyWeak(&location);

  _Unwind_Resume(a1);
}

void sub_1000CF3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 6)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)double v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[BG Service] XPC connection interrupted", v10, 2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  __int128 v9 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained handleLostConnection];
  }
}

void sub_1000CF450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF460(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    __int128 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)double v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[BG Service] XPC connection invalidated", v10, 2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  __int128 v9 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained handleLostConnection];
  }
}

void sub_1000CF504(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CF5E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void sub_1000CF78C(id a1)
{
  uint64_t v1 = notify_register_check( (const char *)[@"com.apple.mediaanalysisd.serviceProcessID" UTF8String],  &dword_1001E6628);
  int v2 = v1;
  uint64_t v4 = MediaAnalysisLogLevel(v1, v3);
  if (v2)
  {
    uint64_t v6 = VCPLogInstance(v4, v5);
    os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    os_log_type_t v8 = VCPLogToOSLogType[3];
    if (!os_log_type_enabled(v7, v8)) {
      goto LABEL_9;
    }
    int v14 = 67109120;
    int v15 = v2;
    __int128 v9 = "[BG Service] Failed to register for service pid notify token (%d)";
    double v10 = v7;
    os_log_type_t v11 = v8;
    goto LABEL_8;
  }

  uint64_t v12 = VCPLogInstance(v4, v5);
  os_log_type_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
  os_log_type_t v13 = VCPLogToOSLogType[7];
  if (os_log_type_enabled(v7, v13))
  {
    int v14 = 67109120;
    int v15 = dword_1001E6628;
    __int128 v9 = "[BG Service] Register service pid notification token(%d)";
    double v10 = v7;
    os_log_type_t v11 = v13;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v10, v11, v9, (uint8_t *)&v14, 8u);
  }

void sub_1000D0458( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  _Block_object_dispose(&a65, 8);
  _Block_object_dispose((const void *)(v73 - 176), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000D0650(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_1000D0660(uint64_t a1)
{
}

void sub_1000D0668(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 7)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[BG Service] Updating scheduling history session log", v8, 2u);
    }
  }

  VCPCoreAnalyticsSessionLogDatabaseUpdate(*(void *)(a1 + 40), *(void **)(a1 + 32), 0, -1.0);
}

void sub_1000D0700(uint64_t a1, uint64_t a2)
{
  if (!(_DWORD)a2)
  {
    int v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) remoteObjectProxy]);
    [v15 updateProgress:100.0];

    uint64_t v18 = MediaAnalysisLogLevel(v16, v17);
    if ((int)v18 < 5)
    {
      uint64_t v6 = 0LL;
      goto LABEL_16;
    }

    uint64_t v20 = VCPLogInstance(v18, v19);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    os_log_type_t v21 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v12, v21))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v21, "[BG Service] Processing completed", buf, 2u);
    }

    uint64_t v6 = 0LL;
    goto LABEL_14;
  }

  if ((_DWORD)a2 == -128)
  {
    NSErrorUserInfoKey v36 = NSLocalizedDescriptionKey;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[BG Service] Processing canceled"));
    uint64_t v37 = v4;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v37,  &v36,  1LL));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL,  v5));

    uint64_t v9 = MediaAnalysisLogLevel(v7, v8);
    if ((int)v9 >= 5)
    {
      uint64_t v11 = VCPLogInstance(v9, v10);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      os_log_type_t v13 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v12, v13))
      {
        *(_WORD *)__int128 buf = 0;
        int v14 = "[BG Service] Processing canceled";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v12, v13, v14, buf, 2u);
        goto LABEL_14;
      }

      goto LABEL_14;
    }
  }

  else
  {
    NSErrorUserInfoKey v34 = NSLocalizedDescriptionKey;
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[BG Service] Processing failed (%d)",  a2));
    uint64_t v35 = v22;
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v35,  &v34,  1LL));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL,  v23));

    uint64_t v26 = MediaAnalysisLogLevel(v24, v25);
    if ((int)v26 >= 4)
    {
      uint64_t v28 = VCPLogInstance(v26, v27);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      os_log_type_t v13 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v12, v13))
      {
        *(_WORD *)__int128 buf = 0;
        int v14 = "[BG Service] Processing failed";
        goto LABEL_13;
      }

void sub_1000D0A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D0AC8(uint64_t a1, uint64_t a2, double a3)
{
  if ((_DWORD)a2)
  {
    uint64_t v4 = MediaAnalysisLogLevel(a1, a2);
    if ((int)v4 >= 7)
    {
      uint64_t v6 = VCPLogInstance(v4, v5);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      os_log_type_t v8 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v7, v8))
      {
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "[BG Service] Updating scheduling history session log",  v12,  2u);
      }
    }

    VCPCoreAnalyticsSessionLogDatabaseUpdate(*(void *)(a1 + 56), *(void **)(a1 + 40), 0, -1.0);
    uint64_t v9 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    uint64_t v10 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v9;
  }

BOOL sub_1000D0BA4(id a1)
{
  return 0;
}

BOOL sub_1000D0BAC(id a1)
{
  return 0;
}

uint64_t sub_1000D0BB4(uint64_t result, double a2)
{
  return result;
}

BOOL sub_1000D0BD0(id a1)
{
  return 0;
}

uint64_t sub_1000D0BD8(uint64_t result, double a2)
{
  return result;
}

BOOL sub_1000D0BF4(id a1)
{
  return 0;
}

uint64_t sub_1000D0BFC(uint64_t result, double a2)
{
  return result;
}

BOOL sub_1000D0C18(id a1)
{
  return 0;
}

BOOL sub_1000D0C20(id a1)
{
  return 0;
}

BOOL sub_1000D0C28(id a1)
{
  return 0;
}

uint64_t sub_1000D0C30(uint64_t result, double a2)
{
  return result;
}

BOOL sub_1000D0C4C(id a1)
{
  return 0;
}

uint64_t sub_1000D0C54(uint64_t result, double a2)
{
  return result;
}

void sub_1000D0C70(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_1000D0CB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000D0CCC(uint64_t a1)
{
  int v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) remoteObjectProxy]);
  double v3 = COERCE_DOUBLE(atomic_load((unint64_t *)(*(void *)(a1 + 32) + 24LL)));
  id v4 = v2;
  [v2 updateProgress:v3];
}

void sub_1000D0D2C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000D0D40(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[VCPMADTaskScheduler sharedInstance](&OBJC_CLASS___VCPMADTaskScheduler, "sharedInstance"));
  atomic_store( [v2 addForegroundTask:*(void *)(a1 + 40) withQoS:17],  (unsigned int *)(*(void *)(a1 + 32) + 16));
}

void sub_1000D0D9C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000D0EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D0F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_71:
  int v14 = 0;
LABEL_74:

  return v14;
}

    id v68 = 0;
    goto LABEL_72;
  }

  LODWORD(v96) = 0.5;
  -[VCPMovieChangeEntry setActivityScore:](log, "setActivityScore:", v96);
LABEL_77:
  __int16 v114 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v384, "vcp_results"));
  v348 = (void *)objc_claimAutoreleasedReturnValue([v114 objectForKeyedSubscript:MediaAnalysisFacePrintResultsKey]);

  -[VCPMovieChangeEntry setFaceCount:](log, "setFaceCount:", [v348 count]);
  id v115 = (void *)objc_claimAutoreleasedReturnValue([v383 photoLibrary]);
  v351 = (void *)objc_claimAutoreleasedReturnValue([v115 librarySpecificFetchOptions]);

  v446 = PHFacePropertySetClustering;
  __int16 v116 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v446, 1LL));
  [v351 setFetchPropertySets:v116];

  [v351 setIncludeMediaAnalysisProcessingRangeTypes:2];
  v343 = (void *)objc_claimAutoreleasedReturnValue(+[PHFace fetchFacesInAsset:options:](&OBJC_CLASS___PHFace, "fetchFacesInAsset:options:", v383, v351));
  v377 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  v423 = 0u;
  v424 = 0u;
  v421 = 0u;
  v422 = 0u;
  id obj = v343;
  uint64_t v117 = [obj countByEnumeratingWithState:&v421 objects:v445 count:16];
  if (v117)
  {
    __int16 v118 = *(void *)v422;
    v119 = VCPLogToOSLogType[7];
    do
    {
      for (unint64_t i = 0LL; i != v117; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v422 != v118) {
          objc_enumerationMutation(obj);
        }
        v121 = *(void **)(*((void *)&v421 + 1) + 8LL * (void)i);
        v122 = (void *)objc_claimAutoreleasedReturnValue([v121 faceClusteringProperties]);
        v123 = (void *)objc_claimAutoreleasedReturnValue([v122 groupingIdentifier]);
        v124 = [v123 isEqualToString:kVideoFaceGroupIdentifier];

        if (v124)
        {
          v125 = [v377 addObject:v121];
          v127 = MediaAnalysisLogLevel(v125, v126);
          if ((int)v127 >= 7)
          {
            v129 = VCPLogInstance(v127, v128);
            v130 = (os_log_s *)objc_claimAutoreleasedReturnValue(v129);
            if (os_log_type_enabled(v130, v119))
            {
              v131 = (void *)objc_claimAutoreleasedReturnValue([v121 localIdentifier]);
              *(_DWORD *)__int128 buf = 138412290;
              *(void *)v448 = v131;
              _os_log_impl((void *)&_mh_execute_header, v130, v119, "Delete fullrange video face [%@]", buf, 0xCu);
            }
          }
        }
      }

      uint64_t v117 = [obj countByEnumeratingWithState:&v421 objects:v445 count:16];
    }

    while (v117);
  }

  if ([v377 count])
  {
    v132 = (void *)objc_claimAutoreleasedReturnValue([v383 photoLibrary]);
    v419[0] = _NSConcreteStackBlock;
    v419[1] = 3221225472LL;
    v419[2] = sub_1000EC9CC;
    v419[3] = &unk_1001BA0C8;
    v420 = v377;
    v418 = 0LL;
    v133 = [v132 performChangesAndWait:v419 error:&v418];
    v347 = v418;

    if ((v133 & 1) == 0)
    {
      v253 = MediaAnalysisLogLevel(v134, v135);
      if ((int)v253 >= 3)
      {
        v255 = VCPLogInstance(v253, v254);
        v256 = (os_log_s *)objc_claimAutoreleasedReturnValue(v255);
        v257 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v256, v257))
        {
          v258 = (void *)objc_claimAutoreleasedReturnValue([v347 description]);
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)v448 = v258;
          _os_log_impl((void *)&_mh_execute_header, v256, v257, "Failed to delete faces %@", buf, 0xCu);
        }
      }

      id v68 = -18;
      v259 = v420;
LABEL_282:

      v323 = v347;
      goto LABEL_283;
    }
  }

  -[VCPMovieChangeEntry setAudioClassification:](log, "setAudioClassification:", 0LL);
  v136 = objc_msgSend(v384, "vcp_types");
  if ((v136 & 0x200000) != 0)
  {
    v378 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    v138 = objc_msgSend((id)objc_opt_class(PFSceneTaxonomy), "mad_audioTaxonomy:useResultsKey:", 1, 1);
    v139 = (void *)objc_claimAutoreleasedReturnValue(v138);
    v416 = 0u;
    v417 = 0u;
    v414 = 0u;
    v415 = 0u;
    v140 = (void *)objc_claimAutoreleasedReturnValue([v139 allKeys]);
    v141 = [v140 countByEnumeratingWithState:&v414 objects:v444 count:16];
    if (!v141) {
      goto LABEL_106;
    }
    v142 = *(void *)v415;
    while (1)
    {
      for (j = 0LL; j != v141; j = (char *)j + 1)
      {
        if (*(void *)v415 != v142) {
          objc_enumerationMutation(v140);
        }
        v144 = *(void *)(*((void *)&v414 + 1) + 8LL * (void)j);
        v145 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v384, "vcp_results"));
        v146 = (void *)objc_claimAutoreleasedReturnValue([v145 objectForKeyedSubscript:v144]);
        if ([v146 count])
        {
          [v383 duration];
          v148 = v147 > 0.0;

          if (!v148) {
            continue;
          }
          v149 = objc_alloc(&OBJC_CLASS___PHSceneClassification);
          v150 = (void *)objc_claimAutoreleasedReturnValue([v139 objectForKeyedSubscript:v144]);
          v151 = [v150 longLongValue];
          v152 = CGRectNull.origin.y;
          v153 = CGRectNull.size.width;
          v154 = CGRectNull.size.height;
          [v383 duration];
          v145 = objc_msgSend( v149,  "initWithExtendedSceneIdentifier:confidence:boundingBox:startTime:duration:classificationType:",  v151,  3,  1.0,  CGRectNull.origin.x,  v152,  v153,  v154,  0.0,  v155);

          if (v145) {
            [v378 addObject:v145];
          }
        }

        else
        {
        }
      }

      v141 = [v140 countByEnumeratingWithState:&v414 objects:v444 count:16];
      if (!v141)
      {
LABEL_106:

        -[VCPMovieChangeEntry setAudioClassifications:](log, "setAudioClassifications:", v378);
        break;
      }
    }
  }

  v156 = MediaAnalysisLogLevel(v136, v137);
  if ((int)v156 >= 7)
  {
    v158 = VCPLogInstance(v156, v157);
    v159 = (os_log_s *)objc_claimAutoreleasedReturnValue(v158);
    v160 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v159, v160))
    {
      v161 = (void *)objc_claimAutoreleasedReturnValue([v383 localIdentifier]);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)v448 = v161;
      _os_log_impl( (void *)&_mh_execute_header,  v159,  v160,  "publish full-range scene classification result to movie %@",  buf,  0xCu);
    }
  }

  v162 = (unint64_t)objc_msgSend(v384, "vcp_types");
  if ((v162 & 0x40000004000LL) != 0)
  {
    v164 = MediaAnalysisLogLevel(v162, v163);
    if ((int)v164 >= 6)
    {
      v166 = VCPLogInstance(v164, v165);
      v167 = (os_log_s *)objc_claimAutoreleasedReturnValue(v166);
      v168 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v167, v168))
      {
        v169 = (void *)objc_claimAutoreleasedReturnValue([v383 localIdentifier]);
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)v448 = v169;
        _os_log_impl( (void *)&_mh_execute_header,  v167,  v168,  "[%@] check scene classification result from full-range video",  buf,  0xCu);
      }
    }

    v354 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    v379 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    v412 = 0u;
    v413 = 0u;
    v410 = 0u;
    v411 = 0u;
    v170 = (void *)objc_claimAutoreleasedReturnValue([v383 sceneClassifications]);
    v171 = [v170 countByEnumeratingWithState:&v410 objects:v443 count:16];
    if (v171)
    {
      v172 = *(void *)v411;
      do
      {
        for (k = 0LL; k != v171; k = (char *)k + 1)
        {
          if (*(void *)v411 != v172) {
            objc_enumerationMutation(v170);
          }
          v174 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [*(id *)(*((void *)&v410 + 1) + 8 * (void)k) extendedSceneIdentifier]));
          [v379 addObject:v174];
        }

        v171 = [v170 countByEnumeratingWithState:&v410 objects:v443 count:16];
      }

      while (v171);
    }

    v175 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
    v408 = 0u;
    v409 = 0u;
    v406 = 0u;
    v407 = 0u;
    v176 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v384, "vcp_results"));
    v360 = (id)objc_claimAutoreleasedReturnValue([v176 objectForKeyedSubscript:MediaAnalysisClassificationResultsKey]);

    v177 = [v360 countByEnumeratingWithState:&v406 objects:v442 count:16];
    if (v177)
    {
      v368 = *(void *)v407;
      *(void *)os_log_type_t type = MediaAnalysisResultAttributesKey;
      do
      {
        v178 = v177;
        for (m = 0LL; m != v178; m = (char *)m + 1)
        {
          if (*(void *)v407 != v368) {
            objc_enumerationMutation(v360);
          }
          v180 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v406 + 1) + 8 * (void)m) objectForKeyedSubscript:*(void *)type]);
          v404 = 0u;
          v405 = 0u;
          v402 = 0u;
          v403 = 0u;
          v181 = v180;
          v182 = [v181 countByEnumeratingWithState:&v402 objects:v441 count:16];
          if (v182)
          {
            v183 = *(void *)v403;
            do
            {
              for (n = 0LL; n != v182; n = (char *)n + 1)
              {
                if (*(void *)v403 != v183) {
                  objc_enumerationMutation(v181);
                }
                v185 = *(void *)(*((void *)&v402 + 1) + 8LL * (void)n);
                v186 = objc_claimAutoreleasedReturnValue([v181 objectForKeyedSubscript:v185]);
                [(id)v186 floatValue];
                v188 = v187;

                v189 = (void *)objc_claimAutoreleasedReturnValue([v175 objectForKeyedSubscript:v185]);
                LOBYTE(v186) = v189 == 0LL;

                if ((v186 & 1) == 0)
                {
                  v191 = (void *)objc_claimAutoreleasedReturnValue([v175 objectForKeyedSubscript:v185]);
                  [v191 floatValue];
                  v193 = v192;

                  v188 = fmaxf(v193, v188);
                }

                *(float *)&v190 = v188;
                v194 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v190));
                [v175 setObject:v194 forKeyedSubscript:v185];
              }

              v182 = [v181 countByEnumeratingWithState:&v402 objects:v441 count:16];
            }

            while (v182);
          }
        }

        v177 = [v360 countByEnumeratingWithState:&v406 objects:v442 count:16];
      }

      while (v177);
    }

    v400 = 0u;
    v401 = 0u;
    v398 = 0u;
    v399 = 0u;
    v195 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v384, "vcp_results"));
    v356 = (id)objc_claimAutoreleasedReturnValue([v195 objectForKeyedSubscript:MediaAnalysisSafetyResultsKey]);

    v196 = [v356 countByEnumeratingWithState:&v398 objects:v440 count:16];
    if (v196)
    {
      v361 = (id)MediaAnalysisResultAttributesKey;
      *(void *)typea = *(void *)v399;
      context = MediaAnalysisResultSensitivitySceneResultsKey;
      do
      {
        v369 = v196;
        for (iunint64_t i = 0LL; ii != v369; iunint64_t i = (char *)ii + 1)
        {
          if (*(void *)v399 != *(void *)typea) {
            objc_enumerationMutation(v356);
          }
          v198 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v398 + 1) + 8 * (void)ii) objectForKeyedSubscript:v361]);
          v199 = v198;
          if (v198)
          {
            v200 = (void *)objc_claimAutoreleasedReturnValue([v198 objectForKeyedSubscript:context]);
            v396 = 0u;
            v397 = 0u;
            v394 = 0u;
            v395 = 0u;
            v201 = v200;
            v202 = [v201 countByEnumeratingWithState:&v394 objects:v439 count:16];
            if (v202)
            {
              v203 = *(void *)v395;
              do
              {
                for (jj = 0LL; jj != v202; jj = (char *)jj + 1)
                {
                  if (*(void *)v395 != v203) {
                    objc_enumerationMutation(v201);
                  }
                  v205 = *(void *)(*((void *)&v394 + 1) + 8LL * (void)jj);
                  v206 = objc_claimAutoreleasedReturnValue([v201 objectForKeyedSubscript:v205]);
                  [(id)v206 floatValue];
                  v208 = v207;

                  v209 = (void *)objc_claimAutoreleasedReturnValue([v175 objectForKeyedSubscript:v205]);
                  LOBYTE(v206) = v209 == 0LL;

                  if ((v206 & 1) == 0)
                  {
                    v211 = (void *)objc_claimAutoreleasedReturnValue([v175 objectForKeyedSubscript:v205]);
                    [v211 floatValue];
                    v213 = v212;

                    v208 = fmaxf(v213, v208);
                  }

                  *(float *)&v210 = v208;
                  v214 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v210));
                  [v175 setObject:v214 forKeyedSubscript:v205];
                }

                v202 = [v201 countByEnumeratingWithState:&v394 objects:v439 count:16];
              }

              while (v202);
            }
          }
        }

        v196 = [v356 countByEnumeratingWithState:&v398 objects:v440 count:16];
      }

      while (v196);
    }

    v392 = 0u;
    v393 = 0u;
    v390 = 0u;
    v391 = 0u;
    v215 = v175;
    v216 = [v215 countByEnumeratingWithState:&v390 objects:v438 count:16];
    if (v216)
    {
      v370 = 0;
      v217 = *(void *)v391;
      typeb = VCPLogToOSLogType[6];
      do
      {
        for (kk = 0LL; kk != v216; kk = (char *)kk + 1)
        {
          if (*(void *)v391 != v217) {
            objc_enumerationMutation(v215);
          }
          v219 = *(void **)(*((void *)&v390 + 1) + 8LL * (void)kk);
          if (([v379 containsObject:v219] & 1) == 0)
          {
            v220 = (void *)objc_claimAutoreleasedReturnValue(+[PFSceneTaxonomy vcp_sharedTaxonomy](&OBJC_CLASS___PFSceneTaxonomy, "vcp_sharedTaxonomy"));
            v221 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v220, "nodeForExtendedSceneClassId:", objc_msgSend(v219, "longLongValue")));

            if (v221)
            {
              [v221 highPrecisionThreshold];
              v223 = v222;
              [v221 highRecallThreshold];
              v225 = v224;
              [v221 searchThreshold];
              v227 = v225 >= v223 ? v223 : v225;
              v228 = v226 >= v227 ? v227 : v226;
              v229 = (void *)objc_claimAutoreleasedReturnValue([v215 objectForKeyedSubscript:v219]);
              [v229 floatValue];
              v231 = v230;

              v232 = v231;
              if (v228 < v232)
              {
                [v383 duration];
                if (v233 > 0.0)
                {
                  v234 = objc_alloc(&OBJC_CLASS___PHSceneClassification);
                  v235 = [v219 longLongValue];
                  v236 = CGRectNull.origin.y;
                  v237 = CGRectNull.size.width;
                  v238 = CGRectNull.size.height;
                  [v383 duration];
                  v240 = objc_msgSend( v234,  "initWithExtendedSceneIdentifier:confidence:boundingBox:startTime:duration:classificationType:",  v235,  2,  v232,  CGRectNull.origin.x,  v236,  v237,  v238,  0.0,  v239);
                  if (v240)
                  {
                    v241 = [v354 addObject:v240];
                    v243 = MediaAnalysisLogLevel(v241, v242);
                    if ((int)v243 >= 6)
                    {
                      v245 = VCPLogInstance(v243, v244);
                      v246 = (os_log_s *)objc_claimAutoreleasedReturnValue(v245);
                      if (os_log_type_enabled(v246, typeb))
                      {
                        v362 = (id)objc_claimAutoreleasedReturnValue([v383 localIdentifier]);
                        v371 = (void *)objc_claimAutoreleasedReturnValue( +[PFSceneTaxonomy vcp_sharedTaxonomy]( &OBJC_CLASS___PFSceneTaxonomy,  "vcp_sharedTaxonomy"));
                        v247 = (id)objc_claimAutoreleasedReturnValue( objc_msgSend( v371,  "mad_sceneNameFromExtendedSceneId:",  objc_msgSend(v219, "longLongValue")));
                        *(_DWORD *)__int128 buf = 138412802;
                        *(void *)v448 = v362;
                        *(_WORD *)&v448[8] = 2112;
                        *(void *)&v448[10] = v247;
                        v449 = 2048;
                        v450 = v232;
                        _os_log_impl( (void *)&_mh_execute_header,  v246,  typeb,  "[%@] add scene classification result [%@, %f] from full-range video",  buf,  0x20u);
                      }
                    }

                    v370 = 1;
                  }
                }
              }
            }
          }
        }

        v216 = [v215 countByEnumeratingWithState:&v390 objects:v438 count:16];
      }

      while (v216);

      if ((v370 & 1) != 0) {
        -[VCPMovieChangeEntry setSceneClassifications:](log, "setSceneClassifications:", v354);
      }
    }

    else
    {
    }
  }

  v260 = objc_msgSend(v384, "vcp_types");
  v262 = MediaAnalysisLogLevel(v260, v261);
  if ((int)v262 >= 7)
  {
    v264 = VCPLogInstance(v262, v263);
    v265 = (os_log_s *)objc_claimAutoreleasedReturnValue(v264);
    v266 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v265, v266))
    {
      v267 = _os_feature_enabled_impl("MediaAnalysis", "VisualUnderstandingService");
      v268 = objc_claimAutoreleasedReturnValue([v383 localIdentifier]);
      v269 = (void *)v268;
      if (v267) {
        v270 = 15;
      }
      else {
        v270 = 11;
      }
      *(_DWORD *)__int128 buf = 67109378;
      *(_DWORD *)v448 = v270;
      *(_WORD *)&v448[4] = 2112;
      *(void *)&v448[6] = v268;
      _os_log_impl( (void *)&_mh_execute_header,  v265,  v266,  "publish full-range video faces (processing version %d) to movie %@",  buf,  0x12u);
    }
  }

  v347 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  v271 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  v388 = 0u;
  v389 = 0u;
  v386 = 0u;
  v387 = 0u;
  v352 = v348;
  v344 = (os_log_s *)v271;
  v272 = [v352 countByEnumeratingWithState:&v386 objects:v437 count:16];
  if (!v272) {
    goto LABEL_265;
  }
  id v68 = 0;
  v353 = *(void *)v387;
  *(void *)typec = MediaAnalysisResultAttributesKey;
  v363 = (id)MediaAnalysisResultFacePrintAttributeKey;
  v357 = (id)MediaAnalysisResultTorsoPrintAttributeKey;
  v345 = VCPLogToOSLogType[3];
  v346 = VCPLogToOSLogType[7];
  while (2)
  {
    v273 = 0LL;
    v355 = v272;
    do
    {
      if (*(void *)v387 != v353) {
        objc_enumerationMutation(v352);
      }
      v274 = *(void **)(*((void *)&v386 + 1) + 8LL * (void)v273);
      contexta = objc_autoreleasePoolPush();
      v275 = (void *)objc_claimAutoreleasedReturnValue([v274 objectForKeyedSubscript:*(void *)typec]);
      v380 = (void *)objc_claimAutoreleasedReturnValue([v275 objectForKeyedSubscript:v363]);

      v276 = (void *)objc_claimAutoreleasedReturnValue([v274 objectForKeyedSubscript:*(void *)typec]);
      v372 = (void *)objc_claimAutoreleasedReturnValue([v276 objectForKeyedSubscript:v357]);

      v277 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  v380,  0LL);
      v278 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v277,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___VNFaceprint),  v363);
      v280 = (void *)objc_claimAutoreleasedReturnValue(v278);
      if (v280)
      {
        v281 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
        [v280 confidence];
        v283 = v282;
        else {
          v284 = 0.9;
        }
        if (v283 < v284) {
          goto LABEL_249;
        }
        if (v372)
        {
          v285 = -[NSKeyedUnarchiver initForReadingFromData:error:]( objc_alloc(&OBJC_CLASS___NSKeyedUnarchiver),  "initForReadingFromData:error:",  v372,  0LL);
          v286 = -[NSKeyedUnarchiver decodeObjectOfClass:forKey:]( v285,  "decodeObjectOfClass:forKey:",  objc_opt_class(&OBJC_CLASS___VNTorsoprint),  v357);
          v287 = objc_claimAutoreleasedReturnValue(v286);
          if (!v287)
          {
            v309 = MediaAnalysisLogLevel(0LL, v288);
            if ((int)v309 < 3)
            {
              v294 = 61;
LABEL_259:

              goto LABEL_260;
            }

            v311 = VCPLogInstance(v309, v310);
            v312 = (os_log_s *)objc_claimAutoreleasedReturnValue(v311);
            if (os_log_type_enabled(v312, v345))
            {
              v313 = (void *)objc_claimAutoreleasedReturnValue([v383 localIdentifier]);
              *(_DWORD *)__int128 buf = 138412290;
              *(void *)v448 = v313;
              _os_log_impl( (void *)&_mh_execute_header,  v312,  v345,  "Failed to decode torsoprint for asset [%@]",  buf,  0xCu);
            }

            v294 = 61;
LABEL_257:

            goto LABEL_259;
          }

          v289 = (void *)v287;
        }

        else
        {
          v289 = 0LL;
        }

        v349 = v289;
        v350 = [[VNFaceTorsoprint alloc] initWithFaceprint:v280 torsoprint:v289];
        v385 = 0LL;
        v295 = (void *)objc_claimAutoreleasedReturnValue([v350 serializeStateAndReturnError:&v385]);
        v296 = v385;
        v298 = v296;
        if (!v295 || v296)
        {
          v305 = MediaAnalysisLogLevel(v296, v297);
          if ((int)v305 < 3)
          {
            v303 = v298;
            id v68 = -18;
            v304 = 1;
            goto LABEL_247;
          }

          v307 = VCPLogInstance(v305, v306);
          v302 = (os_log_s *)objc_claimAutoreleasedReturnValue(v307);
          v303 = v298;
          if (os_log_type_enabled(v302, v345))
          {
            v308 = (void *)objc_claimAutoreleasedReturnValue([v298 description]);
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)v448 = v308;
            _os_log_impl((void *)&_mh_execute_header, v302, v345, "Unable to serialize faceTorsoprint %@", buf, 0xCu);
          }
        }

        else
        {
          v299 = objc_alloc(&OBJC_CLASS___PHFaceprint);
          else {
            v300 = 11LL;
          }
          v302 = (os_log_s *)[v299 initWithFaceprintData:v295 faceprintVersion:v300];
          if (v302)
          {
            v303 = 0LL;
            [v281 addObject:v350];
            [v347 addObject:v302];
            v304 = 0;
LABEL_246:

LABEL_247:
            if (v304)
            {
              v294 = 1;
LABEL_260:

              goto LABEL_261;
            }

uint64_t sub_1000D1DC4(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(void, double))(*(void *)(*(void *)(a1 + 32) + 32LL) + 16LL))( *(void *)(*(void *)(a1 + 32) + 32LL),  *(double *)(a1 + 40) + a2 / *(double *)(a1 + 48));
}

id sub_1000D1DEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

uint64_t sub_1000D1DF8(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(void, double))(*(void *)(*(void *)(a1 + 32) + 32LL) + 16LL))( *(void *)(*(void *)(a1 + 32) + 32LL),  *(double *)(a1 + 40) + a2 / *(double *)(a1 + 48));
}

id sub_1000D1E20(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

uint64_t sub_1000D1E2C(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(void, double))(*(void *)(*(void *)(a1 + 32) + 32LL) + 16LL))( *(void *)(*(void *)(a1 + 32) + 32LL),  *(double *)(a1 + 40) + a2 / *(double *)(a1 + 48));
}

id sub_1000D1E54(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

uint64_t sub_1000D1E60(uint64_t a1, double a2)
{
  return (*(uint64_t (**)(void, double))(*(void *)(*(void *)(a1 + 32) + 32LL) + 16LL))( *(void *)(*(void *)(a1 + 32) + 32LL),  *(double *)(a1 + 40) + a2 / *(double *)(a1 + 48));
}

id sub_1000D1E88(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_1000D1FFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D20A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D2214( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
}

void sub_1000D2244(id a1)
{
  if ((int)MediaAnalysisLogLevel(a1, v1) >= 7)
  {
    uint64_t v2 = VCPLogInstance();
    double v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    os_log_type_t v4 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v3, v4))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[MAD BG Service] XPC connection interrupted", v5, 2u);
    }
  }

void sub_1000D22C0(uint64_t a1, uint64_t a2)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 5)
  {
    uint64_t v3 = VCPLogInstance();
    os_log_type_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v4, v5))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "[MAD BG Service] XPC connection invalidated", v9, 2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v7 = WeakRetained;
  if (WeakRetained)
  {
    os_log_type_t v8 = (void *)*((void *)WeakRetained + 2);
    *((void *)WeakRetained + 2) = 0LL;
  }
}

void sub_1000D244C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D2ABC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, void *a38, char a39)
{
  _Block_object_dispose(&a39, 8);
  _Block_object_dispose((const void *)(v40 - 256), 8);

  _Block_object_dispose((const void *)(v40 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000D2BF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_1000D2C08(uint64_t a1)
{
}

void sub_1000D2C10(id a1, NSError *a2)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 4)
  {
    uint64_t v2 = VCPLogInstance();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    os_log_type_t v4 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v3, v4))
    {
      *(_WORD *)os_log_type_t v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "[MAD BG Service] Error connecting to wake background analysis service",  v5,  2u);
    }
  }

uint64_t sub_1000D2C8C(uint64_t a1, uint64_t a2)
{
  int v2 = a2;
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 5)
  {
    uint64_t v4 = VCPLogInstance();
    os_log_type_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    os_log_type_t v6 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v5, v6))
    {
      v8[0] = 67109120;
      v8[1] = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "[MAD BG Service] Waked; proceed to service daemon (%d) processing ...",
        (uint8_t *)v8,
        8u);
    }
  }

  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1000D2D58(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 4)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    os_log_type_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
      int v11 = 138412290;
      uint64_t v12 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[MAD BG Service] Connection to background analysis service failed (%@)",  (uint8_t *)&v11,  0xCu);
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1000D2E48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D2E70(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = v3;
  if (v3)
  {
    id v6 = [v3 code];
    if (v6 == (id)-128LL)
    {
      uint64_t v8 = MediaAnalysisLogLevel(-128LL, v7);
      if ((int)v8 >= 5)
      {
        uint64_t v10 = VCPLogInstance(v8, v9);
        int v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        os_log_type_t v12 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v11, v12))
        {
          os_log_type_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 description]);
          int v28 = 138412290;
          double v29 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "[MAD BG Service] Processing canceled (%@)",  (uint8_t *)&v28,  0xCu);
        }

void sub_1000D30A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D30E8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) isCanceled];
  if ((_DWORD)v2)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
    int v5 = *(_DWORD *)(v4 + 24);
    *(_DWORD *)(v4 + 24) = v5 + 1;
    if (!v5 || (id v2 = (id)MediaAnalysisLogLevel(v2, v3), (int)v2 >= 7))
    {
      uint64_t v6 = VCPLogInstance(v2, v3);
      uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
      int v10 = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = v10 + 1;
      uint64_t v11 = 7LL;
      if (!v10) {
        uint64_t v11 = 5LL;
      }
      os_log_type_t v12 = VCPLogToOSLogType[v11];
      if (os_log_type_enabled(v7, v12))
      {
        uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8LL);
        v16[0] = 67109120;
        v16[1] = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  v12,  "[MAD BG Service] Canceling (activity %d) ...",  (uint8_t *)v16,  8u);
      }
    }

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) connection]);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 remoteObjectProxyWithErrorHandler:&stru_1001BD348]);
    [v15 cancelActivity];
  }

void sub_1000D3230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D3254(id a1, NSError *a2)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 4)
  {
    uint64_t v2 = VCPLogInstance();
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    os_log_type_t v4 = VCPLogToOSLogType[4];
    if (os_log_type_enabled(v3, v4))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "[MAD BG Service] Error connecting to background analysis service",  v5,  2u);
    }
  }

uint64_t sub_1000D3430(uint64_t a1, uint64_t a2, void *a3)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  [a3 code]);
}

void sub_1000D3C30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = [(id)objc_opt_class(*(void *)(a1 + 32)) name];
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      [*(id *)(a1 + 40) fractionCompleted];
      int v13 = 138412546;
      uint64_t v14 = v9;
      __int16 v15 = 2048;
      double v16 = v10 * 100.0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@] Progress: %0.2f%%", (uint8_t *)&v13, 0x16u);
    }
  }

  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 44LL);
  if (v11)
  {
    [*(id *)(a1 + 40) fractionCompleted];
    (*(void (**)(uint64_t, double))(v11 + 16))(v11, v12 * 100.0);
  }

void sub_1000D3F3C(id a1)
{
  uint64_t v1 = objc_alloc_init(&OBJC_CLASS___VCPMADProcessingJobManager);
  uint64_t v2 = (void *)qword_1001E6638;
  qword_1001E6638 = (uint64_t)v1;
}

void sub_1000D4308(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v7 = a4;
  id v8 = a3;
  id v9 = (id)objc_claimAutoreleasedReturnValue([v6 objectForKeyedSubscript:a2]);
  [v9 scheduleJob:v7 toDispatchGroup:v8];
}

void sub_1000D4490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D4520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D4748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D47C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D49F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000D4DE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void sub_1000D51E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  __int16 v15 = v13;

  _Unwind_Resume(a1);
}

void sub_1000D53A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D557C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

LABEL_88:
      goto LABEL_89;
    }

    uint64_t v39 = VCPSignPostLog(v30);
    uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    uint64_t v41 = os_signpost_id_generate(v40);

    uint64_t v43 = VCPSignPostLog(v42);
    double v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    uint64_t v45 = v44;
    if (v41 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v44))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v45,  OS_SIGNPOST_INTERVAL_BEGIN,  v41,  "VNImageRequestHandler_init",  (const char *)&unk_100199097,  buf,  2u);
    }

    uint64_t v35 = -[VNImageRequestHandler initWithURL:options:]( objc_alloc(&OBJC_CLASS___VNImageRequestHandler),  "initWithURL:options:",  v10,  &__NSDictionary0__struct);
    uint64_t v46 = VCPSignPostLog(v35);
    uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
    uint64_t v48 = v47;
    if (v41 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v47))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v48,  OS_SIGNPOST_INTERVAL_END,  v41,  "VNImageRequestHandler_init",  (const char *)&unk_100199097,  buf,  2u);
    }

    v165 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    v164 = (void *)objc_claimAutoreleasedReturnValue( +[VNRecognizeDocumentsRequest mad_defaultRequest]( &OBJC_CLASS___VNRecognizeDocumentsRequest,  "mad_defaultRequest"));
    if (VCPPhotosMRCCachingEnabled(objc_msgSend(v165, "addObject:")))
    {
      id v50 = (void *)objc_claimAutoreleasedReturnValue( +[VNDetectBarcodesRequest mad_defaultRequest]( &OBJC_CLASS___VNDetectBarcodesRequest,  "mad_defaultRequest"));
      if (!v50)
      {
        __int128 v106 = MediaAnalysisLogLevel(0LL, v49);
        if ((int)v106 >= 3)
        {
          __int128 v108 = VCPLogInstance(v106, v107);
          __int128 v109 = (os_log_s *)objc_claimAutoreleasedReturnValue(v108);
          __int128 v110 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v109, v110))
          {
            id v111 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
            __int128 v112 = (void *)objc_claimAutoreleasedReturnValue([v111 localIdentifier]);
            __int128 v113 = (void *)objc_claimAutoreleasedReturnValue([0 description]);
            *(_DWORD *)__int128 buf = 138412546;
            v170 = v112;
            v171 = 2112;
            v172 = v113;
            _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "[OCR][%@] Failed to configure VNDetectBarcodesRequest (%@)",  buf,  0x16u);
          }
        }

        [v8 setStatus:4294967278];
        id v50 = 0LL;
        uint64_t v62 = 0LL;
        goto LABEL_87;
      }

      [v165 addObject:v50];
    }

    else
    {
      id v50 = 0LL;
    }

    uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
    uint64_t v52 = objc_msgSend(v51, "vcp_ocrMajorDimensionForResource:", v9);

    if (v52)
    {
      [v164 setMaximumProcessingDimensionOnTheLongSide:v52];
      uint64_t v53 = [v50 setMaximumProcessingDimensionOnTheLongSide:v52];
    }

    uint64_t v54 = VCPSignPostLog(v53);
    id v55 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
    uint64_t v56 = os_signpost_id_generate(v55);

    uint64_t v58 = VCPSignPostLog(v57);
    uint64_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
    id v60 = v59;
    if (v56 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v59))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v60,  OS_SIGNPOST_INTERVAL_BEGIN,  v56,  "VNImageRequestHandler_performRequests",  (const char *)&unk_100199097,  buf,  2u);
    }

    v168 = 0LL;
    uint64_t v61 = -[os_log_s performRequests:error:](v35, "performRequests:error:", v165, &v168);
    uint64_t v62 = v168;
    uint64_t v63 = VCPSignPostLog(v62);
    uint64_t v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
    uint64_t v65 = v64;
    if (v56 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v64))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v65,  OS_SIGNPOST_INTERVAL_END,  v56,  "VNImageRequestHandler_performRequests",  (const char *)&unk_100199097,  buf,  2u);
    }

    if ((v61 & 1) == 0)
    {
      uint64_t v99 = MediaAnalysisLogLevel(v66, v67);
      if ((int)v99 >= 4)
      {
        v101 = VCPLogInstance(v99, v100);
        os_log_type_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
        id v103 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v102, v103))
        {
          id v104 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
          __int128 v105 = (void *)objc_claimAutoreleasedReturnValue([v104 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412546;
          v170 = v105;
          v171 = 2112;
          v172 = v62;
          _os_log_impl((void *)&_mh_execute_header, v102, v103, "[OCR][%@] Processing failed (%@)", buf, 0x16u);
        }
      }

      [v8 setStatus:4294967278];
      goto LABEL_87;
    }

    id v68 = (void *)objc_claimAutoreleasedReturnValue([v164 results]);
    v163 = (void *)objc_claimAutoreleasedReturnValue([v68 firstObject]);

    if (!v163)
    {
      __int16 v114 = MediaAnalysisLogLevel(v69, v70);
      if ((int)v114 >= 6)
      {
        __int16 v116 = VCPLogInstance(v114, v115);
        uint64_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue(v116);
        __int16 v118 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v117, v118))
        {
          v119 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
          __int16 v120 = (void *)objc_claimAutoreleasedReturnValue([v119 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          v170 = v120;
          _os_log_impl((void *)&_mh_execute_header, v117, v118, "[OCR][%@] Processing produced no results", buf, 0xCu);
        }
      }

      [v8 setStatus:4294967278];
      goto LABEL_86;
    }

    [v8 setVersion:VCPPhotosOCRProcessingVersion];
    uint64_t v71 = (void *)objc_claimAutoreleasedReturnValue([v163 getTranscript]);
    uint64_t v72 = [v71 length] == 0;

    if (v72)
    {
      uint64_t v90 = MediaAnalysisLogLevel(v73, v74);
      if ((int)v90 >= 6)
      {
        v122 = VCPLogInstance(v90, v121);
        v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v122);
        v124 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v123, v124))
        {
          v125 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
          v126 = (void *)objc_claimAutoreleasedReturnValue([v125 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          v170 = v126;
          _os_log_impl( (void *)&_mh_execute_header,  v123,  v124,  "[OCR][%@] No text recognized; skipping archive/persistence",
            buf,
            0xCu);
        }
      }
    }

    else
    {
      id v75 = VCPSignPostLog(v73);
      uint64_t v76 = (os_log_s *)objc_claimAutoreleasedReturnValue(v75);
      uint64_t v77 = os_signpost_id_generate(v76);

      uint64_t v79 = VCPSignPostLog(v78);
      uint64_t v80 = (os_log_s *)objc_claimAutoreleasedReturnValue(v79);
      id v81 = v80;
      if (v77 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v80))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v81,  OS_SIGNPOST_INTERVAL_BEGIN,  v77,  "VNDocumentObservation_archive",  (const char *)&unk_100199097,  buf,  2u);
      }

      v167 = v62;
      uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v163,  1LL,  &v167));
      uint64_t v83 = v167;

      uint64_t v62 = v83;
      [v8 setOcrData:v82];

      uint64_t v85 = VCPSignPostLog(v84);
      uint64_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
      id v87 = v86;
      if (v77 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v86))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v87,  OS_SIGNPOST_INTERVAL_END,  v77,  "VNDocumentObservation_archive",  (const char *)&unk_100199097,  buf,  2u);
      }

      uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v8 ocrData]);
      uint64_t v89 = v88 == 0LL;

      if (v89)
      {
        uint64_t v92 = MediaAnalysisLogLevel(v90, v91);
        if ((int)v92 >= 6)
        {
          os_log_type_t v94 = VCPLogInstance(v92, v93);
          uint64_t v95 = (os_log_s *)objc_claimAutoreleasedReturnValue(v94);
          uint64_t v96 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v95, v96))
          {
            uint64_t v97 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
            uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue([v97 localIdentifier]);
            *(_DWORD *)__int128 buf = 138412290;
            v170 = v98;
            _os_log_impl((void *)&_mh_execute_header, v95, v96, "[OCR][%@] Failed to archive OCR results", buf, 0xCu);
          }
        }

        [v8 setStatus:4294967278];
LABEL_86:

LABEL_87:
        goto LABEL_88;
      }
    }

    if (VCPPhotosMRCCachingEnabled(v90))
    {
      v127 = (void *)objc_claimAutoreleasedReturnValue([v50 results]);
      v128 = [v127 count] == 0;

      if (v128)
      {
        v155 = MediaAnalysisLogLevel(v129, v130);
        if ((int)v155 >= 6)
        {
          v157 = VCPLogInstance(v155, v156);
          v158 = (os_log_s *)objc_claimAutoreleasedReturnValue(v157);
          v159 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v158, v159))
          {
            v160 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
            v161 = (void *)objc_claimAutoreleasedReturnValue([v160 localIdentifier]);
            *(_DWORD *)__int128 buf = 138412290;
            v170 = v161;
            _os_log_impl( (void *)&_mh_execute_header,  v158,  v159,  "[OCR][%@] No MRC detected; skipping archive/persistence",
              buf,
              0xCu);
          }
        }
      }

      else
      {
        v131 = VCPSignPostLog(v129);
        v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);
        spid = os_signpost_id_generate(v132);

        v134 = VCPSignPostLog(v133);
        v135 = (os_log_s *)objc_claimAutoreleasedReturnValue(v134);
        v136 = v135;
        if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v135))
        {
          *(_WORD *)__int128 buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v136,  OS_SIGNPOST_INTERVAL_BEGIN,  spid,  "VNBarcodeObservation_archive",  (const char *)&unk_100199097,  buf,  2u);
        }

        v137 = (void *)objc_claimAutoreleasedReturnValue([v50 results]);
        v166 = v62;
        v138 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v137,  1LL,  &v166));
        v139 = v166;

        uint64_t v62 = v139;
        [v8 setMrcData:v138];

        v141 = VCPSignPostLog(v140);
        v142 = (os_log_s *)objc_claimAutoreleasedReturnValue(v141);
        v143 = v142;
        if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v142))
        {
          *(_WORD *)__int128 buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v143,  OS_SIGNPOST_INTERVAL_END,  spid,  "VNBarcodeObservation_archive",  (const char *)&unk_100199097,  buf,  2u);
        }

        v144 = (void *)objc_claimAutoreleasedReturnValue([v8 mrcData]);
        v145 = v144 == 0LL;

        if (v145)
        {
          v148 = MediaAnalysisLogLevel(v146, v147);
          if ((int)v148 >= 6)
          {
            v150 = VCPLogInstance(v148, v149);
            v151 = (os_log_s *)objc_claimAutoreleasedReturnValue(v150);
            v152 = VCPLogToOSLogType[6];
            if (os_log_type_enabled(v151, v152))
            {
              v153 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
              v154 = (void *)objc_claimAutoreleasedReturnValue([v153 localIdentifier]);
              *(_DWORD *)__int128 buf = 138412290;
              v170 = v154;
              _os_log_impl( (void *)&_mh_execute_header,  v151,  v152,  "[OCR][%@] Failed to archive MRC results",  buf,  0xCu);
            }
          }

          [v8 setStatus:4294967278];
        }
      }
    }

    goto LABEL_86;
  }

  os_log_type_t v23 = MediaAnalysisLogLevel(v21, v22);
  if ((int)v23 >= 5)
  {
    id v25 = VCPLogInstance(v23, v24);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    uint64_t v27 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v26, v27))
    {
      int v28 = (void *)objc_claimAutoreleasedReturnValue([v8 asset]);
      double v29 = (void *)objc_claimAutoreleasedReturnValue([v28 localIdentifier]);
      *(_DWORD *)__int128 buf = 138412290;
      v170 = v29;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "[OCR][%@] Processing canceled; skipping asset", buf, 0xCu);
    }
  }

  [v8 setStatus:4294967168];
LABEL_89:
}

void sub_1000D626C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1000D6588(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48)));
  uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 56LL);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
  [v3 setObject:v2 forKeyedSubscript:v4];

  uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(v6 + 64);
  *(void *)(v6 + 64) = v5;
}

void sub_1000D660C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D66D8(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = *(_DWORD *)(*(void *)(a1 + 32) + 72LL);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 56LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localIdentifier]);
  [v2 removeObjectForKey:v3];

  uint64_t v4 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void **)(v5 + 64);
  *(void *)(v5 + 64) = v4;

  uint64_t v9 = MediaAnalysisLogLevel(v7, v8);
  if ((int)v9 >= 7)
  {
    uint64_t v11 = VCPLogInstance(v9, v10);
    double v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    os_log_type_t v13 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v12, v13))
    {
      unsigned int v14 = [*(id *)(*(void *)(a1 + 32) + 56) count];
      v15[0] = 67109120;
      v15[1] = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[OCR] %d downloads pending", (uint8_t *)v15, 8u);
    }
  }

void sub_1000D67FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D68A4(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v3 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 64)];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = v2;
}

void sub_1000D68F8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000D697C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(void *)(a1 + 32) + 72LL) = *(_DWORD *)(a1 + 40);
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 56) count];
      int v9 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)__int128 buf = 67109376;
      unsigned int v22 = v8;
      __int16 v23 = 1024;
      int v24 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[OCR] Canceling %d download requests (%d)", buf, 0xEu);
    }
  }

  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "allValues", 0));
  id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v17;
    do
    {
      for (unint64_t i = 0LL; i != v11; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v12) {
          objc_enumerationMutation(v10);
        }
        unsigned int v14 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue(+[PHAssetResourceManager defaultManager](&OBJC_CLASS___PHAssetResourceManager, "defaultManager"));
        objc_msgSend(v15, "cancelDataRequest:", objc_msgSend(v14, "intValue"));
      }

      id v11 = [v10 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }

    while (v11);
  }
}

void sub_1000D6B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_78:
  __int128 v108 = MediaAnalysisLogLevel(v21, v22);
  if ((int)v108 >= 6)
  {
    __int128 v110 = VCPLogInstance(v108, v109);
    id v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
    __int128 v112 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v111, v112))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "[OCR] Waiting for compute to complete", buf, 2u);
    }
  }

  __int128 v113 = dispatch_group_wait((dispatch_group_t)self->_computeGroup, 0xFFFFFFFFFFFFFFFFLL);
  __int16 v114 = VCPSignPostLog(v113);
  id v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
  __int16 v116 = v115;
  if (spid - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v115))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v116,  OS_SIGNPOST_INTERVAL_END,  spid,  "VCPMADOCRAssetEntry_Process",  (const char *)&unk_100199097,  buf,  2u);
  }

  uint64_t v117 = (uint64_t (**)(void))self->_cancelBlock;
  if (v117 && (v117[2]() & 1) != 0) {
    return -128;
  }
  else {
    return 0;
  }
}
      }

      uint64_t v79 = -[NSArray countByEnumeratingWithState:objects:count:]( v131,  "countByEnumeratingWithState:objects:count:",  &v137,  v152,  16LL);
      *(void *)typea = (*(_DWORD *)typea + (_DWORD)j);
      if (!v79)
      {
LABEL_80:

        id v111 = MediaAnalysisLogLevel(v109, v110);
        if ((int)v111 >= 7)
        {
          __int128 v113 = VCPLogInstance(v111, v112);
          __int16 v114 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
          id v115 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v114, v115))
          {
            __int16 v116 = [v132 count];
            uint64_t v117 = (void *)objc_claimAutoreleasedReturnValue(-[PHAsset localIdentifier](self->_asset, "localIdentifier"));
            *(_DWORD *)__int128 buf = 67109378;
            *(_DWORD *)v150 = v116;
            *(_WORD *)&v150[4] = 2112;
            *(void *)&v150[6] = v117;
            _os_log_impl( (void *)&_mh_execute_header,  v114,  v115,  "setFacesFromEntireVideo %d faces for asset [%@]",  buf,  0x12u);
          }
        }

        [v128 setTemporalFaces:v132];

        break;
      }
    }
  }

  if (-[PHAsset mad_isEligibleForComputeSync](self->_asset, "mad_isEligibleForComputeSync"))
  {
    [v128 setLocalAnalysisStage:self->_analysisStage];
    __int16 v118 = [v128 setComputeSyncMediaAnalysisPayload:self->_computeSyncPayload];
    __int16 v120 = MediaAnalysisLogLevel(v118, v119);
    if ((int)v120 >= 7)
    {
      v122 = VCPLogInstance(v120, v121);
      v123 = (os_log_s *)objc_claimAutoreleasedReturnValue(v122);
      v124 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v123, v124))
      {
        v125 = (void *)objc_claimAutoreleasedReturnValue(-[PHAsset localIdentifier](self->_asset, "localIdentifier"));
        analysisStage = self->_analysisStage;
        v127 = -[NSData length](self->_computeSyncPayload, "length");
        *(_DWORD *)__int128 buf = 138412802;
        *(void *)v150 = v125;
        *(_WORD *)&v150[8] = 1024;
        *(_DWORD *)&v150[10] = analysisStage;
        *(_WORD *)&v150[14] = 1024;
        *(_DWORD *)&v150[16] = v127;
        _os_log_impl( (void *)&_mh_execute_header,  v123,  v124,  "[%@] publish analysis stage (%d) and compute sync payload (%d bytes)",  buf,  0x18u);
      }
    }
  }

void sub_1000D7624( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28, void *a29)
{
  _Unwind_Resume(a1);
}

void sub_1000D77EC(void *a1)
{
  uint64_t v1 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v3 = (void *)a1[6];
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 privateFileURL]);
  objc_msgSend(v1, "processAssetEntry:resource:resourceURL:", v2, v3);
}

void sub_1000D7844( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000D7858(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  os_log_type_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  unsigned int v8 = *(void **)(a1 + 32);
  int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) asset]);
  uint64_t v10 = (uint64_t)[v8 removeDownloadRequestIDForAsset:v9];

  if (v6)
  {
    if (!(_DWORD)v10)
    {
      uint64_t v13 = MediaAnalysisLogLevel(v11, v12);
      if ((int)v13 >= 3)
      {
        uint64_t v15 = VCPLogInstance(v13, v14);
        __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        os_log_type_t v17 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v16, v17))
        {
          __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) asset]);
          __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v18 localIdentifier]);
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([v6 description]);
          *(_DWORD *)__int128 buf = 138412546;
          double v30 = v19;
          __int16 v31 = 2112;
          os_log_type_t v32 = v20;
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "[OCR][%@] Failed to download resource (%@)", buf, 0x16u);
        }
      }

      else {
        uint64_t v10 = 4294943494LL;
      }
    }

    [*(id *)(a1 + 40) setStatus:v10];
  }

  else
  {
    v25[0] = _NSConcreteStackBlock;
    v25[2] = sub_1000D7ADC;
    void v25[3] = &unk_1001BBFF0;
    uint64_t v21 = *(void *)(a1 + 32);
    unsigned int v22 = *(void **)(a1 + 40);
    __int16 v23 = *(dispatch_group_s **)(v21 + 80);
    int v24 = *(dispatch_queue_s **)(v21 + 88);
    v25[1] = 3221225472LL;
    v25[4] = v21;
    id v26 = v22;
    id v27 = *(id *)(a1 + 48);
    id v28 = v5;
    dispatch_group_async(v23, v24, v25);
  }

  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 40LL));
}

void sub_1000D7A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000D7ADC(uint64_t a1)
{
  return +[PHAssetResourceManager vcp_flushResourceURL:]( &OBJC_CLASS___PHAssetResourceManager,  "vcp_flushResourceURL:",  *(void *)(a1 + 56));
}

void sub_1000D82B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15)
{
}

void sub_1000D8400(uint64_t a1)
{
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id obj = *(id *)(*(void *)(a1 + 32) + 8LL);
  id v1 = [obj countByEnumeratingWithState:&v30 objects:v36 count:16];
  if (v1)
  {
    uint64_t v29 = *(void *)v31;
    int v27 = VCPPhotosOCRProcessingFromGatingVersion;
    os_log_type_t type = VCPLogToOSLogType[6];
    *(void *)&__int128 v2 = 138412290LL;
    __int128 v25 = v2;
    do
    {
      for (unint64_t i = 0LL; i != v1; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v31 != v29) {
          objc_enumerationMutation(obj);
        }
        id v4 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
        id v5 = objc_autoreleasePoolPush();
        if (![v4 status])
        {
          id v6 = [v4 isAnalysisCompleteFromComputeSync];
          if ((_DWORD)v6)
          {
            uint64_t v8 = MediaAnalysisLogLevel(v6, v7);
            uint64_t v10 = VCPLogInstance(v8, v9);
            uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
            if (os_log_type_enabled(v11, type))
            {
              uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v4 asset]);
              uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 localIdentifier]);
              *(_DWORD *)__int128 buf = v25;
              uint64_t v35 = v13;
              _os_log_impl( (void *)&_mh_execute_header,  v11,  type,  "   [%@] Analysis already complete from compute sync ingestion; skip publishing",
                buf,
                0xCu);
            }

            goto LABEL_15;
          }

          if ([v4 version] != v27
            || (uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v4 asset]),
                uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v14 characterRecognitionProperties]),
                BOOL v16 = [v15 algorithmVersion] == 0,
                v15,
                v14,
                v16))
          {
            os_log_type_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "asset", v25));
            uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[PHAssetChangeRequest changeRequestForAsset:]( &OBJC_CLASS___PHAssetChangeRequest,  "changeRequestForAsset:",  v17));

            __int128 v18 = (void *)objc_claimAutoreleasedReturnValue([v4 ocrData]);
            __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v4 mrcData]);
            signed int v20 = [v4 version];
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v4 asset]);
            unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 adjustmentVersion]);
            -[os_log_s setCharacterRecognitionData:machineReadableCodeData:algorithmVersion:adjustmentVersion:]( v11,  "setCharacterRecognitionData:machineReadableCodeData:algorithmVersion:adjustmentVersion:",  v18,  v19,  v20,  v22);

            __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v4 asset]);
            LODWORD(v21) = objc_msgSend(v23, "mad_isEligibleForComputeSync");

            if ((_DWORD)v21)
            {
              int v24 = (void *)objc_claimAutoreleasedReturnValue([v4 asset]);
              -[os_log_s setLocalAnalysisStage:]( v11,  "setLocalAnalysisStage:",  objc_msgSend(v24, "mad_analysisStageAfterCompletingAnalysis:", 10));
            }

void sub_1000D8708( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
}

void sub_1000D87C4(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000D8800( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000D8D0C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000D9C8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, void *a27, void *a28)
{
  _Unwind_Resume(a1);
}

LABEL_148:
  }

LABEL_151:
LABEL_152:
  return v198;
}

void sub_1000DB1E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, void *a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, void *a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, void *a35, uint64_t a36, void *a37)
{
  _Unwind_Resume(a1);
}

void sub_1000DB4B8(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000DB4F4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000DBAE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000DBC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DBCF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DC3F0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
}

void sub_1000DD1DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1000DD404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DD634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DD700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DD7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DD818(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DDB40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DDD44(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
  if ((int)v7 >= 7)
  {
    uint64_t v9 = VCPLogInstance(v7, v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    os_log_type_t v11 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v10, v11))
    {
      int v28 = 138412290;
      id v29 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Checking whether %@ Photo Library is in known libraries",  (uint8_t *)&v28,  0xCu);
    }
  }

  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[PHPhotoLibrary wellKnownPhotoLibraryURLForIdentifier:]( &OBJC_CLASS___PHPhotoLibrary,  "wellKnownPhotoLibraryURLForIdentifier:",  a2));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 path]);

  if (v13)
  {
    id v16 = [*(id *)(*(void *)(a1 + 32) + 24) containsObject:v13];
    if ((v16 & 1) == 0)
    {
      uint64_t v18 = MediaAnalysisLogLevel(v16, v17);
      if ((int)v18 >= 7)
      {
        uint64_t v20 = VCPLogInstance(v18, v19);
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        os_log_type_t v22 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v21, v22))
        {
          int v28 = 138412546;
          id v29 = v5;
          __int16 v30 = 2112;
          __int128 v31 = v13;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Adding %@ Photo Library (%@) to known libraries",  (uint8_t *)&v28,  0x16u);
        }
      }

      [*(id *)(*(void *)(a1 + 32) + 24) addObject:v13];
      [*(id *)(a1 + 32) persistPhotoLibraries];
    }
  }

  else
  {
    uint64_t v23 = MediaAnalysisLogLevel(v14, v15);
    if ((int)v23 >= 4)
    {
      uint64_t v25 = VCPLogInstance(v23, v24);
      id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      os_log_type_t v27 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v26, v27))
      {
        int v28 = 138412290;
        id v29 = v5;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "No %@ Photo Library present", (uint8_t *)&v28, 0xCu);
      }
    }
  }
}

void sub_1000DDF98(id a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v5 = (id)objc_claimAutoreleasedReturnValue([v1 persistentDomainForName:MediaAnalysisDaemonDomain]);

  __int128 v2 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKey:VCPPhotoLibrariesDefaultsKey]);
  +[PHPhotoLibrary enableMultiLibraryMode](&OBJC_CLASS___PHPhotoLibrary, "enableMultiLibraryMode");
  uint64_t v3 = -[VCPPhotoLibraryManager initWithPhotoLibraryPaths:]( objc_alloc(&OBJC_CLASS___VCPPhotoLibraryManager),  "initWithPhotoLibraryPaths:",  v2);
  id v4 = (void *)qword_1001E6640;
  qword_1001E6640 = (uint64_t)v3;
}

uint64_t sub_1000DE124(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_1000DE134(uint64_t a1)
{
}

void sub_1000DE13C(uint64_t a1)
{
  context = objc_autoreleasePoolPush();
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  id v2 = *(id *)(*(void *)(a1 + 32) + 24LL);
  id v3 = [v2 countByEnumeratingWithState:&v40 objects:v48 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v41;
    os_log_type_t type = VCPLogToOSLogType[7];
    os_log_type_t v37 = VCPLogToOSLogType[4];
    id v36 = v2;
    do
    {
      for (unint64_t i = 0LL; i != v4; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v41 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v40 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) objectForKeyedSubscript:v7]);

        if (!v8)
        {
          uint64_t v11 = MediaAnalysisLogLevel(v9, v10);
          if ((int)v11 >= 7)
          {
            uint64_t v13 = VCPLogInstance(v11, v12);
            uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
            if (os_log_type_enabled(v14, type))
            {
              *(_DWORD *)__int128 buf = 138412290;
              uint64_t v45 = v7;
              _os_log_impl((void *)&_mh_execute_header, v14, type, "Opening Photo Library at path %@", buf, 0xCu);
            }
          }

          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v7));
          id v16 = -[PHPhotoLibrary initWithPhotoLibraryURL:]( objc_alloc(&OBJC_CLASS___PHPhotoLibrary),  "initWithPhotoLibraryURL:",  v15);
          id v17 = -[PHPhotoLibrary vcp_isSyndicationLibrary](v16, "vcp_isSyndicationLibrary");
          if ((_DWORD)v17)
          {
            uint64_t v19 = MediaAnalysisLogLevel(v17, v18);
            if ((int)v19 >= 7)
            {
              uint64_t v21 = VCPLogInstance(v19, v20);
              os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
              if (os_log_type_enabled(v22, type))
              {
                *(_DWORD *)__int128 buf = 138412290;
                uint64_t v45 = v7;
                _os_log_impl((void *)&_mh_execute_header, v22, type, "Ignoring Syndication Library at %@", buf, 0xCu);
              }

              goto LABEL_21;
            }
          }

          else
          {
            id v39 = 0LL;
            unsigned int v23 = -[PHPhotoLibrary vcp_openAndWaitWithUpgrade:error:]( v16,  "vcp_openAndWaitWithUpgrade:error:",  0LL,  &v39);
            uint64_t v24 = (os_log_s *)v39;
            os_log_type_t v22 = v24;
            if (v23)
            {
              [*(id *)(*(void *)(a1 + 32) + 16) setObject:v16 forKeyedSubscript:v7];
            }

            else
            {
              uint64_t v26 = MediaAnalysisLogLevel(v24, v25);
              if ((int)v26 >= 4)
              {
                uint64_t v28 = VCPLogInstance(v26, v27);
                id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
                if (os_log_type_enabled(v29, v37))
                {
                  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s description](v22, "description"));
                  *(_DWORD *)__int128 buf = 138412546;
                  uint64_t v45 = v7;
                  __int16 v46 = 2112;
                  uint64_t v47 = v30;
                  _os_log_impl( (void *)&_mh_execute_header,  v29,  v37,  "Failed to open Photo Library at path %@ (%@)",  buf,  0x16u);

                  id v2 = v36;
                }
              }
            }

int64_t sub_1000DE48C(id a1, PHPhotoLibrary *a2, PHPhotoLibrary *a3)
{
  id v4 = a2;
  uint64_t v5 = a3;
  if ((-[PHPhotoLibrary isSystemPhotoLibrary](v4, "isSystemPhotoLibrary") & 1) != 0)
  {
LABEL_5:
    int64_t v6 = -1LL;
    goto LABEL_6;
  }

  if ((-[PHPhotoLibrary isSystemPhotoLibrary](v5, "isSystemPhotoLibrary") & 1) == 0)
  {
    if ((-[PHPhotoLibrary vcp_isSyndicationLibrary](v5, "vcp_isSyndicationLibrary") & 1) == 0)
    {
      int64_t v6 = -[PHPhotoLibrary vcp_isSyndicationLibrary](v4, "vcp_isSyndicationLibrary");
      goto LABEL_6;
    }

    goto LABEL_5;
  }

  int64_t v6 = 1LL;
LABEL_6:

  return v6;
}

void sub_1000DE858(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) path]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) objectForKeyedSubscript:v3]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  int64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v4;

  if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
  {
    uint64_t v9 = MediaAnalysisLogLevel(v7, v8);
    if ((int)v9 >= 7)
    {
      uint64_t v11 = VCPLogInstance(v9, v10);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      os_log_type_t v13 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v12, v13))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v47 = v3;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Opening Photo Library at path %@", buf, 0xCu);
      }
    }

    uint64_t v14 = -[PHPhotoLibrary initWithPhotoLibraryURL:]( objc_alloc(&OBJC_CLASS___PHPhotoLibrary),  "initWithPhotoLibraryURL:",  *(void *)(a1 + 32));
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v14;

    id v17 = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), "vcp_isSyndicationLibrary");
    if ((_DWORD)v17)
    {
      uint64_t v19 = MediaAnalysisLogLevel(v17, v18);
      if ((int)v19 >= 7)
      {
        uint64_t v21 = VCPLogInstance(v19, v20);
        os_log_type_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
        os_log_type_t v23 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v22, v23))
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v47 = v3;
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "Ignoring Syndication Library at %@", buf, 0xCu);
        }
      }

      uint64_t v24 = *(void *)(*(void *)(a1 + 48) + 8LL);
      uint64_t v25 = *(void **)(v24 + 40);
      *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
    }

    else
    {
      uint64_t v26 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      id v45 = 0LL;
      unsigned int v27 = objc_msgSend(v26, "vcp_openAndWaitWithUpgrade:error:", 0, &v45);
      id v28 = v45;
      uint64_t v25 = v28;
      if (v27)
      {
        [*(id *)(*(void *)(a1 + 40) + 16) setObject:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) forKeyedSubscript:v3];
        id v30 = [*(id *)(*(void *)(a1 + 40) + 24) containsObject:v3];
        if ((v30 & 1) == 0)
        {
          uint64_t v32 = MediaAnalysisLogLevel(v30, v31);
          if ((int)v32 >= 7)
          {
            uint64_t v34 = VCPLogInstance(v32, v33);
            uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
            os_log_type_t v36 = VCPLogToOSLogType[7];
            if (os_log_type_enabled(v35, v36))
            {
              *(_DWORD *)__int128 buf = 138412290;
              uint64_t v47 = v3;
              _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Adding Photo Library (%@) to known libraries",  buf,  0xCu);
            }
          }

          [*(id *)(*(void *)(a1 + 40) + 24) addObject:v3];
          [*(id *)(a1 + 40) persistPhotoLibraries];
        }
      }

      else
      {
        uint64_t v37 = MediaAnalysisLogLevel(v28, v29);
        if ((int)v37 >= 4)
        {
          uint64_t v39 = VCPLogInstance(v37, v38);
          __int128 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
          os_log_type_t v41 = VCPLogToOSLogType[4];
          if (os_log_type_enabled(v40, v41))
          {
            __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v25 description]);
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v47 = v3;
            __int16 v48 = 2112;
            os_log_type_t v49 = v42;
            _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Failed to open Photo Library at path %@ (%@)",  buf,  0x16u);
          }
        }

        uint64_t v43 = *(void *)(*(void *)(a1 + 48) + 8LL);
        double v44 = *(void **)(v43 + 40);
        *(void *)(v43 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
      }
    }
  }

  objc_autoreleasePoolPop(v2);
}

void sub_1000DEC6C(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  id v2 = (void *)qword_1001E6650;
  qword_1001E6650 = (uint64_t)v1;
}

void sub_1000DF280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000DF590( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, void *a31, char a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, id a37)
{
  _Block_object_dispose(&a32, 8);
  _Block_object_dispose((const void *)(v41 - 200), 8);

  _Block_object_dispose((const void *)(v41 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000DF65C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_1000DF66C(uint64_t a1)
{
}

void sub_1000DF674(uint64_t a1, uint64_t a2, double a3)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 5)
  {
    uint64_t v5 = VCPLogInstance();
    int64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2048;
      double v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@] %.2f%% complete", (uint8_t *)&v9, 0x16u);
    }
  }

uint64_t sub_1000DF750(void *a1, uint64_t a2)
{
  id v4 = [*(id *)(*(void *)(a1[7] + 8) + 40) stop];
  uint64_t v6 = MediaAnalysisLogLevel(v4, v5);
  if ((int)v6 >= 5)
  {
    uint64_t v8 = VCPLogInstance(v6, v7);
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    os_log_type_t v10 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = a1[4];
      [*(id *)(*(void *)(a1[7] + 8) + 40) elapsedTimeSeconds];
      os_log_type_t v13 = @"interrupted";
      int v35 = 138413058;
      uint64_t v36 = v11;
      __int16 v37 = 2112;
      if (!(_DWORD)a2) {
        os_log_type_t v13 = @"finished";
      }
      uint64_t v38 = v13;
      __int16 v39 = 2048;
      uint64_t v40 = v12;
      __int16 v41 = 1024;
      int v42 = a2;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "[%@] BackgroundSystemTask %@ after %0.6fs (%d)",  (uint8_t *)&v35,  0x26u);
    }
  }

  id v14 = [(id)objc_opt_class(a1[5]) taskID];
  if (v14)
  {
    id v16 = (void *)objc_claimAutoreleasedReturnValue(+[PHPhotoLibrary vcp_defaultPhotoLibrary](&OBJC_CLASS___PHPhotoLibrary, "vcp_defaultPhotoLibrary"));
    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:",  v16));

    id v18 = [(id)objc_opt_class(a1[5]) taskID];
    uint64_t v19 = *(void *)(*(void *)(a1[8] + 8LL) + 40LL);
    [*(id *)(*(void *)(a1[7] + 8) + 40) elapsedTimeSeconds];
    objc_msgSend( v17,  "updateSchedulingHistoryForActivityID:startTime:duration:exitStatus:sessionLog:",  v18,  v19,  a2,  0);
    [v17 commit];
    id v20 = [(id)objc_opt_class(a1[5]) taskID];
    [*(id *)(*(void *)(a1[7] + 8) + 40) elapsedTimeSeconds];
    VCPCoreAnalyticsReportEventDasScheduling((uint64_t)v20, a2, v21);
  }

  if ((_DWORD)a2 != -128 && (_DWORD)a2)
  {
    uint64_t v22 = VCPLogInstance(v14, v15);
    os_log_type_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_FAULT)) {
      sub_1000E0650((uint64_t)a1, a2, v23);
    }
  }

  uint64_t v24 = *(void *)(a1[9] + 8LL);
  uint64_t v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;

  uint64_t v28 = MediaAnalysisLogLevel(v26, v27);
  if ((int)v28 >= 5)
  {
    uint64_t v30 = VCPLogInstance(v28, v29);
    uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    os_log_type_t v32 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = a1[4];
      int v35 = 138412290;
      uint64_t v36 = v33;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%@] Finished background processing", (uint8_t *)&v35, 0xCu);
    }
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_1000DFA00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000DFA30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000DFC70( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000DFCBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 7)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v53 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Entering BGST task launch handler.", buf, 0xCu);
    }
  }

  atomic_store(0, (unsigned __int8 *)(*(void *)(a1 + 40) + 9LL));
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472LL;
  v50[2] = sub_1000E0108;
  v50[3] = &unk_1001B9E70;
  int8x16_t v44 = *(int8x16_t *)(a1 + 32);
  id v11 = (id)v44.i64[0];
  int8x16_t v51 = vextq_s8(v44, v44, 8uLL);
  [v3 setExpirationHandler:v50];
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472LL;
  v49[2] = sub_1000E01E4;
  v49[3] = &unk_1001B9E98;
  v49[4] = *(void *)(a1 + 40);
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472LL;
  v45[2] = sub_1000E0200;
  v45[3] = &unk_1001BD520;
  uint64_t v12 = objc_retainBlock(v49);
  id v48 = v12;
  id v46 = *(id *)(a1 + 32);
  id v13 = v3;
  id v47 = v13;
  id v14 = objc_retainBlock(v45);
  id v15 = +[VCPDeviceInformation isHomePod](&OBJC_CLASS___VCPDeviceInformation, "isHomePod");
  if ((_DWORD)v15)
  {
    uint64_t v17 = MediaAnalysisLogLevel(v15, v16);
    if ((int)v17 >= 5)
    {
      uint64_t v19 = VCPLogInstance(v17, v18);
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      os_log_type_t v21 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v53 = v22;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "%@[HomePod] Set xpc transaction exit clean", buf, 0xCu);
      }
    }

    id v15 = (id)xpc_transaction_exit_clean();
  }

  uint64_t v23 = MediaAnalysisLogLevel(v15, v16);
  if ((int)v23 >= 5)
  {
    uint64_t v25 = VCPLogInstance(v23, v24);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    os_log_type_t v27 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v53 = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%@ Running background processing", buf, 0xCu);
    }
  }

  uint64_t v29 = objc_autoreleasePoolPush();
  [*(id *)(a1 + 40) executeWith:v12 completionHandler:v14];
  objc_autoreleasePoolPop(v29);
  uint64_t v32 = MediaAnalysisLogLevel(v30, v31);
  if ((int)v32 >= 5)
  {
    uint64_t v34 = VCPLogInstance(v32, v33);
    int v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    os_log_type_t v36 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v53 = v37;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "%@ Submitted background processing task", buf, 0xCu);
    }
  }

  uint64_t v38 = MediaAnalysisLogLevel(v32, v33);
  if ((int)v38 >= 7)
  {
    uint64_t v40 = VCPLogInstance(v38, v39);
    __int16 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    os_log_type_t v42 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = *(void *)(a1 + 32);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v53 = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%@ Exiting BGST task launch handler.", buf, 0xCu);
    }
  }
}

void sub_1000E009C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28)
{
  _Unwind_Resume(a1);
}

void sub_1000E0108(uint64_t a1, uint64_t a2)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 7)
  {
    uint64_t v3 = VCPLogInstance();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Cancelling by expirationHandler", (uint8_t *)&v7, 0xCu);
    }
  }

uint64_t sub_1000E01E4(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 9LL));
  return v1 & 1;
}

void sub_1000E0200(uint64_t a1, int a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
  if ((_DWORD)v4)
  {
    uint64_t v6 = MediaAnalysisLogLevel(v4, v5);
    if ((int)v6 >= 5)
    {
      uint64_t v8 = VCPLogInstance(v6, v7);
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      os_log_type_t v10 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v59 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "%@ Task is cancelled by DAS", buf, 0xCu);
      }
    }

    uint64_t v12 = *(void **)(a1 + 40);
    id v57 = 0LL;
    unsigned int v13 = [v12 setTaskExpiredWithRetryAfter:&v57 error:0.0];
    id v14 = v57;
    uint64_t v16 = v14;
    if (v13)
    {
      uint64_t v17 = MediaAnalysisLogLevel(v14, v15);
      if ((int)v17 >= 5)
      {
        uint64_t v19 = VCPLogInstance(v17, v18);
        id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
        os_log_type_t v21 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v59 = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "%@ Request retry after 0 seconds", buf, 0xCu);
        }
      }
    }

    else
    {
      uint64_t v44 = MediaAnalysisLogLevel(v14, v15);
      if ((int)v44 >= 3)
      {
        uint64_t v46 = VCPLogInstance(v44, v45);
        id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        os_log_type_t v48 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v47, v48))
        {
          uint64_t v49 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v59 = v49;
          __int16 v60 = 2112;
          uint64_t v61 = v16;
          _os_log_impl((void *)&_mh_execute_header, v47, v48, "%@ Failed to expire task - %@", buf, 0x16u);
        }
      }

      [*(id *)(a1 + 40) setTaskCompleted];
    }
  }

  else
  {
    uint64_t v23 = MediaAnalysisLogLevel(v4, v5);
    if (a2 == -128)
    {
      if ((int)v23 >= 5)
      {
        uint64_t v25 = VCPLogInstance(v23, v24);
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        os_log_type_t v27 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v59 = v28;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "%@ Task is cancelled", buf, 0xCu);
        }
      }

      uint64_t v29 = *(void **)(a1 + 40);
      id v56 = 0LL;
      unsigned int v30 = [v29 setTaskExpiredWithRetryAfter:&v56 error:300.0];
      id v31 = v56;
      uint64_t v33 = v31;
      if (v30)
      {
        uint64_t v34 = MediaAnalysisLogLevel(v31, v32);
        if ((int)v34 >= 5)
        {
          uint64_t v36 = VCPLogInstance(v34, v35);
          uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
          os_log_type_t v38 = VCPLogToOSLogType[5];
          if (os_log_type_enabled(v37, v38))
          {
            uint64_t v39 = *(void *)(a1 + 32);
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v59 = v39;
            __int16 v60 = 1024;
            LODWORD(v61) = 300;
            _os_log_impl((void *)&_mh_execute_header, v37, v38, "%@ Request retry after %d seconds", buf, 0x12u);
          }
        }
      }

      else
      {
        uint64_t v50 = MediaAnalysisLogLevel(v31, v32);
        if ((int)v50 >= 3)
        {
          uint64_t v52 = VCPLogInstance(v50, v51);
          uint64_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
          os_log_type_t v54 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v53, v54))
          {
            uint64_t v55 = *(void *)(a1 + 32);
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v59 = v55;
            __int16 v60 = 2112;
            uint64_t v61 = v33;
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "%@ Failed to expire task - %@", buf, 0x16u);
          }
        }

        [*(id *)(a1 + 40) setTaskCompleted];
      }
    }

    else
    {
      if ((int)v23 >= 5)
      {
        uint64_t v40 = VCPLogInstance(v23, v24);
        __int16 v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        os_log_type_t v42 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = *(void *)(a1 + 32);
          *(_DWORD *)__int128 buf = 138412546;
          uint64_t v59 = v43;
          __int16 v60 = 1024;
          LODWORD(v61) = a2;
          _os_log_impl((void *)&_mh_execute_header, v41, v42, "%@ Task is completed (%d)", buf, 0x12u);
        }
      }

      [*(id *)(a1 + 40) setTaskCompleted];
    }
  }

void sub_1000E0624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E0650(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "[%@] BackgroundSystemTask failed (%d)",  (uint8_t *)&v4,  0x12u);
}

void sub_1000E1E04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000E1E28(id a1)
{
  return 0;
}

void sub_1000E1EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E239C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, void *a30)
{
  _Block_object_dispose((const void *)(v36 - 160), 8);
  _Unwind_Resume(a1);
}

void sub_1000E24C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);
  os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 localIdentifier]);
  if (v9)
  {
    [*(id *)(a1 + 40) setObject:v6 forKeyedSubscript:v9];
  }

  else
  {
    uint64_t v10 = MediaAnalysisLogLevel(0LL, v8);
    if ((int)v10 >= 4)
    {
      uint64_t v12 = VCPLogInstance(v10, v11);
      unsigned int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      os_log_type_t v14 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
        int v16 = 138412546;
        id v17 = v5;
        __int16 v18 = 2112;
        uint64_t v19 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "  Failed to fetch local identifier for cloud identifier %@ (%@); skipping entry",
          (uint8_t *)&v16,
          0x16u);
      }
    }
  }
}

void sub_1000E2610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000E2654(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) count];
  if (result)
  {
    uint64_t v3 = 0LL;
    os_log_type_t v4 = VCPLogToOSLogType[4];
    os_log_type_t v5 = VCPLogToOSLogType[7];
    while (1)
    {
      id v6 = objc_autoreleasePoolPush();
      int v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v3]);
      id v8 = objc_msgSend(v7, "vcp_needsProcessingForTask:", *(void *)(*(void *)(a1 + 40) + 24));
      uint64_t v22 = MediaAnalysisLogLevel(v8, v9);
      if ((int)v22 >= 4)
      {
        uint64_t v24 = VCPLogInstance(v22, v23);
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        if (os_log_type_enabled(v12, v4))
        {
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v7 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v32 = v25;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  v4,  "  [%@] Asset already has analysis results; skipping entry",
            buf,
            0xCu);
        }

        goto LABEL_17;
      }

void sub_1000E28D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_81:
            os_log_type_t v54 = v76;
LABEL_82:

            goto LABEL_83;
          }

          uint64_t v16 = objc_autoreleasePoolPush();
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(+[VCPBackupEntryHeader header](&OBJC_CLASS___VCPBackupEntryHeader, "header"));
          uint64_t v18 = (uint64_t)[v17 readFromStream:v5];
          if (!(_DWORD)v18) {
            break;
          }
          uint64_t v19 = [v5 streamStatus];
          if (v19 == (id)5)
          {
            os_log_type_t v21 = 16;
            goto LABEL_49;
          }

          uint64_t v29 = MediaAnalysisLogLevel(v19, v20);
          if ((int)v29 >= 3)
          {
            id v31 = VCPLogInstance(v29, v30);
            uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
            if (os_log_type_enabled(v27, type))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v27, type, "  Failed to read backup entry header", buf, 2u);
            }

            goto LABEL_29;
          }

          os_log_type_t v21 = 6;
LABEL_48:
          id v15 = v18;
LABEL_49:

          objc_autoreleasePoolPop(v16);
          if (v21 && v21 != 15)
          {
            if (v21 != 16) {
              goto LABEL_81;
            }
            goto LABEL_73;
          }
        }

        uint64_t v22 = [v17 dataLength];
        if (v22 > 0x200000)
        {
          uint64_t v24 = MediaAnalysisLogLevel(v22, v23);
          if ((int)v24 < 3)
          {
            id v15 = 4294967246LL;
            goto LABEL_22;
          }

          uint64_t v26 = VCPLogInstance(v24, v25);
          uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
          if (os_log_type_enabled(v27, type))
          {
            uint64_t v28 = [v17 dataLength];
            *(_DWORD *)__int128 buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v28;
            _os_log_impl((void *)&_mh_execute_header, v27, type, "  Backup entry contains invalid length (%u)", buf, 8u);
          }

          uint64_t v18 = 4294967246LL;
LABEL_29:
          os_log_type_t v21 = 6;
LABEL_47:

          goto LABEL_48;
        }

        if ((++v79 & 0x7F) == 0)
        {
          if (-[MADPhotosRestoreAnalysisTask isCancelled](v80, "isCancelled"))
          {
            id v15 = 4294967168LL;
LABEL_22:
            os_log_type_t v21 = 6;
            goto LABEL_49;
          }

          uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
          [v32 pet];
        }

        uint64_t v27 = (os_log_s *) objc_claimAutoreleasedReturnValue( +[NSMutableData dataWithLength:]( NSMutableData, "dataWithLength:", [v17 dataLength]));
        uint64_t v33 = objc_msgSend( v5,  "vcp_readBuffer:ofLength:",  -[os_log_s mutableBytes](v27, "mutableBytes"),  objc_msgSend(v17, "dataLength"));
        uint64_t v18 = (uint64_t)v33;
        if ((_DWORD)v33)
        {
          uint64_t v35 = MediaAnalysisLogLevel(v33, v34);
          uint64_t v37 = VCPLogInstance(v35, v36);
          os_log_type_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, type))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v38, type, "  Failed to read asset analysis data", buf, 2u);
          }

          os_log_type_t v21 = 6;
          goto LABEL_46;
        }

        if ([v17 isCompressed])
        {
          uint64_t v40 = objc_claimAutoreleasedReturnValue(-[os_log_s decompressData:](v76, "decompressData:", v27));
          if (!v40)
          {
            uint64_t v46 = MediaAnalysisLogLevel(0LL, v39);
            if ((int)v46 < 4)
            {
              os_log_type_t v21 = 15;
              uint64_t v18 = v15;
              goto LABEL_47;
            }

            os_log_type_t v48 = VCPLogInstance(v46, v47);
            os_log_type_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
            if (os_log_type_enabled(v38, (os_log_type_t)v75[0]))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v38,  (os_log_type_t)v75[0],  "  Failed to decompress asset analysis; skipping entry",
                buf,
                2u);
            }

            os_log_type_t v21 = 15;
            goto LABEL_45;
          }
        }

        else
        {
          uint64_t v40 = (uint64_t)v27;
        }

        os_log_type_t v38 = (os_log_s *)[objc_alloc((Class)MADAssetProtoClassForTask(v80->_taskID)) initWithData:v40];
        if (v38)
        {
          [v77 addObject:v38];
          if ((unint64_t)[v77 count] >= 0x80)
          {
            uint64_t v18 = -[MADPhotosRestoreAnalysisTask _persistAssetProtoBatch:successCount:]( v80,  "_persistAssetProtoBatch:successCount:",  v77,  buf);
            if ((_DWORD)v18)
            {
              os_log_type_t v21 = 6;
              uint64_t v27 = (os_log_s *)v40;
LABEL_46:

              goto LABEL_47;
            }

            uint64_t v49 = *(void *)buf;
            uint64_t v50 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));

            os_log_type_t v21 = 0;
            *(void *)&v75[4] += v49;
            uint64_t v27 = (os_log_s *)v40;
            uint64_t v77 = (void *)v50;
LABEL_45:
            uint64_t v18 = v15;
            goto LABEL_46;
          }

          os_log_type_t v21 = 0;
        }

        else
        {
          os_log_type_t v42 = MediaAnalysisLogLevel(0LL, v41);
          if ((int)v42 >= 4)
          {
            uint64_t v44 = VCPLogInstance(v42, v43);
            uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
            if (os_log_type_enabled(v45, (os_log_type_t)v75[0]))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v45,  (os_log_type_t)v75[0],  "  Failed to deserialize asset; skipping entry",
                buf,
                2u);
            }
          }

          os_log_type_t v21 = 15;
        }

        uint64_t v27 = (os_log_s *)v40;
        goto LABEL_45;
      }

      uint64_t v62 = MediaAnalysisLogLevel(v13, v14);
      if ((int)v62 >= 3)
      {
        uint64_t v64 = VCPLogInstance(v62, v63);
        uint64_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
        __int16 v60 = VCPLogToOSLogType[3];
        os_log_type_t v54 = v65;
        if (os_log_type_enabled(v65, v60))
        {
          *(_DWORD *)__int128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = [v8 version];
          uint64_t v61 = "  Backup contains invalid version (%u)";
          goto LABEL_69;
        }

        goto LABEL_70;
      }
    }

    else
    {
      id v56 = MediaAnalysisLogLevel(v10, v11);
      if ((int)v56 >= 3)
      {
        uint64_t v58 = VCPLogInstance(v56, v57);
        uint64_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
        __int16 v60 = VCPLogToOSLogType[3];
        os_log_type_t v54 = v59;
        if (os_log_type_enabled(v59, v60))
        {
          *(_DWORD *)__int128 buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = [v8 identifier];
          uint64_t v61 = "  Backup contains invalid file identifier (%u)";
LABEL_69:
          _os_log_impl((void *)&_mh_execute_header, v54, v60, v61, buf, 8u);
        }

LABEL_70:
        LODWORD(v15) = -50;
        goto LABEL_82;
      }
    }

    LODWORD(v15) = -50;
    goto LABEL_83;
  }

  uint64_t v51 = MediaAnalysisLogLevel(0LL, v7);
  if ((int)v51 >= 3)
  {
    uint64_t v53 = VCPLogInstance(v51, v52);
    os_log_type_t v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
    uint64_t v55 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v54, v55))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "  Failed to read backup file header", buf, 2u);
    }

    LODWORD(v15) = -36;
    goto LABEL_82;
  }

  LODWORD(v15) = -36;
LABEL_83:

  objc_autoreleasePoolPop(context);
  return v15;
}

        goto LABEL_71;
      }

      id v15 = v18;
    }

    os_log_type_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "vcp_mediaAnalysisIntermediateBackupDirectory"));
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mad_intermediateUnencryptedBackupFilepathForTask:", 1));
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "mad_intermediateEncryptedBackupFilepathForTask:", 1));
    if (!v21 || !v22 || !v23)
    {
      uint64_t v18 = v15;
LABEL_69:

      goto LABEL_70;
    }

    id v103 = v23;
    if ([v13 fileExistsAtPath:v21])
    {
      if ([v13 fileExistsAtPath:v22])
      {
        id v115 = 0LL;
        uint64_t v24 = [v13 removeItemAtPath:v22 error:&v115];
        uint64_t v25 = v115;
        uint64_t v27 = v25;
        if (!v24)
        {
LABEL_35:
          uint64_t v53 = MediaAnalysisLogLevel(v25, v26);
          if ((int)v53 >= 3)
          {
            uint64_t v55 = VCPLogInstance(v53, v54);
            id v56 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
            id v57 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v56, v57))
            {
              LODWORD(buf) = 138412290;
              *(void *)((char *)&buf + 4) = v27;
              _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "  Failed to remove existing intermediate backup (%@); backup failed",
                (uint8_t *)&buf,
                0xCu);
            }
          }

          uint64_t v18 = v15;
          goto LABEL_67;
        }
      }

      else
      {
        uint64_t v27 = 0LL;
      }

      if ([v13 fileExistsAtPath:v103])
      {
        __int16 v114 = v27;
        uint64_t v36 = [v13 removeItemAtPath:v103 error:&v114];
        uint64_t v37 = v114;

        uint64_t v27 = v37;
        if ((v36 & 1) == 0) {
          goto LABEL_35;
        }
      }
    }

    else
    {
      v125 = NSFilePosixPermissions;
      v126 = &off_1001C8150;
      uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v126,  &v125,  1LL));
      __int16 v116 = v15;
      uint64_t v33 = [v13 createDirectoryAtPath:v21 withIntermediateDirectories:1 attributes:v32 error:&v116];
      uint64_t v18 = v116;

      if ((v33 & 1) == 0)
      {
        uint64_t v49 = MediaAnalysisLogLevel(v34, v35);
        if ((int)v49 < 3)
        {
LABEL_68:
          uint64_t v23 = v103;
          goto LABEL_69;
        }

        uint64_t v51 = VCPLogInstance(v49, v50);
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(v51);
        uint64_t v52 = VCPLogToOSLogType[3];
        if (os_log_type_enabled((os_log_t)v27, v52))
        {
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v18;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v27,  v52,  "  Failed to create intermediate backup directory (%@); backup failed",
            (uint8_t *)&buf,
            0xCu);
        }

    uint64_t v92 = VCPSignPostLog(v85);
    id v93 = (os_log_s *)objc_claimAutoreleasedReturnValue(v92);
    os_log_type_t v94 = v93;
    if (v84 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v93))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v94,  OS_SIGNPOST_INTERVAL_END,  spid,  "VCPSubsampledAnalysisProcessOlderHighlights",  (const char *)&unk_100199097,  buf,  2u);
    }

    uint64_t v95 = [(id)objc_opt_class(self) prioritizeWallpaperSuggestion];
    if ((_DWORD)v95)
    {
      uint64_t v97 = MediaAnalysisLogLevel(v95, v96);
      if ((int)v97 >= 6)
      {
        uint64_t v99 = VCPLogInstance(v97, v98);
        uint64_t v100 = (os_log_s *)objc_claimAutoreleasedReturnValue(v99);
        v101 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v100, v101))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v100,  v101,  "Collecting all assets in wallpaper suggestions...",  buf,  2u);
        }
      }

      os_log_type_t v102 = VCPSignPostLog(v97);
      id v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
      id v104 = os_signpost_id_generate(v103);

      __int128 v106 = VCPSignPostLog(v105);
      __int128 v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);
      __int128 v108 = v107;
      if (v104 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v107))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v108,  OS_SIGNPOST_INTERVAL_BEGIN,  v104,  "VCPSubsampledAnalysisProcessWallpaperSuggestion",  (const char *)&unk_100199097,  buf,  2u);
      }

      __int128 v109 = -[VCPSubsampledAnalysisTask collectWallpaperSuggestionwithProgressReporter:]( self,  "collectWallpaperSuggestionwithProgressReporter:",  v15);
      os_log_type_t v48 = v109;
      if ((_DWORD)v109) {
        goto LABEL_87;
      }
      __int128 v110 = VCPSignPostLog(v109);
      id v111 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
      __int128 v112 = v111;
      if (v104 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v111))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v112,  OS_SIGNPOST_INTERVAL_END,  v104,  "VCPSubsampledAnalysisProcessWallpaperSuggestion",  (const char *)&unk_100199097,  buf,  2u);
      }
    }

    __int128 v113 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    [v113 timeIntervalSince1970];
    id v115 = v114;

    [self->super._progressHandler setValue:(uint64_t)v115 forKey:v122];
    os_log_type_t v48 = 0;
LABEL_87:
    __int16 v116 = [self->super._progressHandler commit];
    if (v116 == -108 || v116 == -23 || v116 == -36) {
      unsigned int v30 = v116;
    }
    else {
      unsigned int v30 = v48;
    }

LABEL_97:
    return v30;
  }

  if ((int)v10 >= 6)
  {
    uint64_t v28 = VCPLogInstance(v10, v11);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(v28);
    uint64_t v29 = VCPLogToOSLogType[6];
    if (os_log_type_enabled((os_log_t)v15, v29))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  v29,  "Last finish is within cutoff time. Skipping priority asset collection",  buf,  2u);
    }

    unsigned int v30 = 0;
    goto LABEL_97;
  }

  return 0;
}

void sub_1000E30D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1000E379C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1000E3A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E4380( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000E4744( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___VCPMovieChangeEntry;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

LABEL_77:
        }

LABEL_90:
}

void sub_1000E5450( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000E5B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E5CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E5D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E5E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E5EB8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  uint64_t v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___VCPPhotosAssetChangeManager;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1000E6214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000E6A30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1000E7200( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20, void *a21, void *a22, void *a23)
{
  _Unwind_Resume(a1);
}

LABEL_103:
  return v12;
}

              os_log_type_t v21 = -128;
              goto LABEL_104;
            }
          }

          os_log_type_t v74 = (void *)objc_claimAutoreleasedReturnValue( +[VCPPausedAnalysis pausedAnalysis:forAsset:]( &OBJC_CLASS___VCPPausedAnalysis,  "pausedAnalysis:forAsset:",  *(void *)(*((void *)&buf + 1) + 40LL),  v10));
          [v74 persist];

          goto LABEL_103;
        }

        __int16 v41 = MediaAnalysisLogLevel(v26, v27);
        if ((int)v41 >= 4)
        {
          uint64_t v43 = VCPLogInstance(v41, v42);
          uint64_t v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
          uint64_t v45 = VCPLogToOSLogType[4];
          if (os_log_type_enabled(v44, v45))
          {
            LODWORD(v99.value) = 138412290;
            *(CMTimeValue *)((char *)&v99.value + 4) = (CMTimeValue)v11;
            _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "  [%@] Asset modified since analysis paused; discarding paused analysis",
              (uint8_t *)&v99,
              0xCu);
          }
        }

        uint64_t v46 = [v19 decrementBlacklistCountForLocalIdentifier:v11];
        if (v46 == -108 || v46 == -36)
        {
          id v47 = v46;
        }

        else
        {
          id v47 = v46;
          if (v46 != -23) {
            id v47 = v23;
          }
        }

        if (v46 == -108 || v46 == -36 || v46 == -23)
        {
          os_log_type_t v21 = v47;
          goto LABEL_39;
        }

        os_log_type_t v48 = [v19 commit];
        if (v48 == -108 || v48 == -36)
        {
          os_log_type_t v21 = v48;
        }

        else
        {
          os_log_type_t v21 = v48;
          if (v48 != -23) {
            os_log_type_t v21 = v47;
          }
        }

        if (v48 == -108 || v48 == -36 || v48 == -23) {
          goto LABEL_39;
        }
LABEL_38:
        os_log_type_t v21 = 0;
LABEL_39:
        _Block_object_dispose(&buf, 8);

        goto LABEL_40;
      }
    }

    else
    {
      memset(&v92, 0, sizeof(v92));
    }

    uint64_t v35 = MediaAnalysisLogLevel(v25, v24);
    if ((int)v35 >= 4)
    {
      uint64_t v37 = VCPLogInstance(v35, v36);
      os_log_type_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      uint64_t v39 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v38, v39))
      {
        LODWORD(v99.value) = 138412290;
        *(CMTimeValue *)((char *)&v99.value + 4) = (CMTimeValue)v11;
        _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "  [%@] Failed to resume paused analysis (non-fatal)",  (uint8_t *)&v99,  0xCu);
      }
    }

    goto LABEL_38;
  }

  os_log_type_t v21 = 0;
LABEL_41:

  return v21;
}

void sub_1000E8164( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, void *a30, void *a31, void *a32)
{
  _Unwind_Resume(a1);
}

LABEL_144:
LABEL_145:
    uint64_t v16 = 0;
    goto LABEL_146;
  }

  uint64_t v35 = MediaAnalysisLogLevel(v31, v32);
  if ((int)v35 >= 3)
  {
    uint64_t v37 = VCPLogInstance(v35, v36);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    os_log_type_t v38 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v13, v38))
    {
      uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v188 localIdentifier]);
      uint64_t v40 = MediaAnalysisTypeDescription(objc_msgSend(v189, "vcp_types"));
      __int16 v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
      os_log_type_t v42 = MediaAnalysisTypeDescription(v9);
      uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
      *(_DWORD *)__int128 buf = 138412802;
      v217 = v39;
      v218 = 2112;
      v219 = (uint64_t)v41;
      v220 = 2112;
      v221 = (unint64_t)v43;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v38,  "[%@] updateImageAsset : analysis types %@ does not include required types %@, skip",  buf,  0x20u);

      uint64_t v16 = 0;
      goto LABEL_148;
    }

void sub_1000E9960( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

LABEL_249:
            if (![v281 count])
            {
              v294 = 0;
              goto LABEL_260;
            }

            v285 = (NSKeyedUnarchiver *)objc_claimAutoreleasedReturnValue( +[NSMutableDictionary dictionary]( &OBJC_CLASS___NSMutableDictionary,  "dictionary"));
            v318 = -[VCPPhotosAssetChangeManager associateTraitsWithFaceTorspPrints:forAsset:withAnalysis:results:]( self,  "associateTraitsWithFaceTorspPrints:forAsset:withAnalysis:results:",  v281,  v383,  v384,  v285);
            if ((_DWORD)v318)
            {
              v320 = MediaAnalysisLogLevel(v318, v319);
              if ((int)v320 < 3)
              {
                id v68 = -18;
                v294 = 1;
                goto LABEL_259;
              }

              v322 = VCPLogInstance(v320, v321);
              v312 = (os_log_s *)objc_claimAutoreleasedReturnValue(v322);
              if (os_log_type_enabled(v312, v345))
              {
                *(_WORD *)__int128 buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v312, v345, "Failed to associateTraits", buf, 2u);
              }

              id v68 = -18;
              v294 = 1;
            }

            else
            {
              v285 = v285;
              v294 = 0;
              v312 = v344;
              v344 = (os_log_s *)v285;
            }

            goto LABEL_257;
          }

          v303 = 0LL;
          v314 = MediaAnalysisLogLevel(0LL, v301);
          if ((int)v314 >= 3)
          {
            v316 = VCPLogInstance(v314, v315);
            v317 = (os_log_s *)objc_claimAutoreleasedReturnValue(v316);
            if (os_log_type_enabled(v317, v345))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v317, v345, "Unable to create faceprint", buf, 2u);
            }
          }
        }

        id v68 = -18;
        v304 = 1;
        goto LABEL_246;
      }

      v290 = MediaAnalysisLogLevel(0LL, v279);
      if ((int)v290 >= 7)
      {
        v292 = VCPLogInstance(v290, v291);
        v281 = (void *)objc_claimAutoreleasedReturnValue(v292);
        if (os_log_type_enabled((os_log_t)v281, v346))
        {
          v293 = (void *)objc_claimAutoreleasedReturnValue([v383 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)v448 = v293;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v281,  v346,  "Failed to decode faceprint for asset [%@]",  buf,  0xCu);
        }

        v294 = 61;
        goto LABEL_260;
      }

      v294 = 61;
LABEL_261:

      objc_autoreleasePoolPop(contexta);
      if (v294 != 61 && v294)
      {

        v259 = v344;
        goto LABEL_282;
      }

      v273 = (char *)v273 + 1;
    }

    while (v355 != v273);
    v272 = [v352 countByEnumeratingWithState:&v386 objects:v437 count:16];
    if (v272) {
      continue;
    }
    break;
  }

LABEL_265:
  -[VCPMovieChangeEntry setFacesToAdd:](log, "setFacesToAdd:", v347);
  -[VCPMovieChangeEntry setHumanActionsForFacesToAdd:](log, "setHumanActionsForFacesToAdd:", v344);

LABEL_266:
  if ((objc_msgSend(v384, "vcp_types") & 0x40000000) == 0)
  {
LABEL_269:
    -[VCPMovieChangeEntry setScreenTimeDeviceImageSensitivity:]( log,  "setScreenTimeDeviceImageSensitivity:",  [(id)objc_opt_class(self) sensitivityFromAnalysis:v384]);
    if (!objc_msgSend(v383, "mad_isEligibleForComputeSync"))
    {
LABEL_280:
      -[NSMutableArray addObject:](self->_pendingChanges, "addObject:", log);
      id v68 = 0;
      goto LABEL_284;
    }

    v324 = VCPSignPostLog( -[VCPMovieChangeEntry setAnalysisStage:]( log,  "setAnalysisStage:",  objc_msgSend(v383, "mad_analysisStageAfterCompletingAnalysis:", 1)));
    v325 = (os_log_s *)objc_claimAutoreleasedReturnValue(v324);
    v326 = os_signpost_id_generate(v325);

    v328 = VCPSignPostLog(v327);
    v329 = (os_log_s *)objc_claimAutoreleasedReturnValue(v328);
    v330 = v329;
    if (v326 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v329))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v330,  OS_SIGNPOST_INTERVAL_BEGIN,  v326,  "VCPPhotosAssetChangeManager_Movie_PackComputeSyncPayload",  (const char *)&unk_100199097,  buf,  2u);
    }

    v331 = (void *)objc_claimAutoreleasedReturnValue( +[VCPProtoAssetAnalysis movieAnalysisComputeSyncPayloadFromLegacyDictionary:]( &OBJC_CLASS___VCPProtoAssetAnalysis,  "movieAnalysisComputeSyncPayloadFromLegacyDictionary:",  v384));
    v332 = VCPSignPostLog(v331);
    v333 = (os_log_s *)objc_claimAutoreleasedReturnValue(v332);
    v334 = v333;
    if (v326 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v333))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v334,  OS_SIGNPOST_INTERVAL_END,  v326,  "VCPPhotosAssetChangeManager_Movie_PackComputeSyncPayload",  (const char *)&unk_100199097,  buf,  2u);
    }

    if (v331)
    {
      v337 = (os_log_s *)objc_claimAutoreleasedReturnValue([v331 data]);
      -[VCPMovieChangeEntry setComputeSyncPayload:](log, "setComputeSyncPayload:", v337);
    }

    else
    {
      v338 = MediaAnalysisLogLevel(v335, v336);
      v340 = VCPLogInstance(v338, v339);
      v337 = (os_log_s *)objc_claimAutoreleasedReturnValue(v340);
      v341 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v337, v341))
      {
        v342 = (void *)objc_claimAutoreleasedReturnValue([v383 localIdentifier]);
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)v448 = v342;
        _os_log_impl( (void *)&_mh_execute_header,  v337,  v341,  "[%@] Failed to serialize movie analysis results as compute sync payload",  buf,  0xCu);
      }
    }

LABEL_279:
    goto LABEL_280;
  }

  v323 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  id v68 = -[VCPPhotosAssetChangeManager associateTraitsForMovieAsset:withAnalysis:result:]( self,  "associateTraitsForMovieAsset:withAnalysis:result:",  v383,  v384,  v323);
  if (!v68)
  {
    -[VCPMovieChangeEntry setHumanActions:](log, "setHumanActions:", v323);

    goto LABEL_269;
  }

LABEL_283:
LABEL_284:
LABEL_72:

LABEL_73:
LABEL_74:

LABEL_75:
  return v68;
}

void sub_1000EC24C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, void *a31, void *a32, _Unwind_Exception *exception_objecta, void *a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, void *a39, void *a40, void *a41)
{
  _Unwind_Resume(a1);
}

id sub_1000EC9CC(uint64_t a1)
{
  return +[PHFaceChangeRequest deleteFaces:](&OBJC_CLASS___PHFaceChangeRequest, "deleteFaces:", *(void *)(a1 + 32));
}

void sub_1000ECEE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ED420(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ED7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ED830(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v5 = 0u;
  __int128 v6 = 0u;
  id v1 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v2 = [v1 countByEnumeratingWithState:&v5 objects:v9 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v6;
    do
    {
      os_log_type_t v4 = 0LL;
      do
      {
        if (*(void *)v6 != v3) {
          objc_enumerationMutation(v1);
        }
        objc_msgSend(*(id *)(*((void *)&v5 + 1) + 8 * (void)v4), "publish", (void)v5);
        os_log_type_t v4 = (char *)v4 + 1;
      }

      while (v2 != v4);
      id v2 = [v1 countByEnumeratingWithState:&v5 objects:v9 count:16];
    }

    while (v2);
  }
}

void sub_1000ED91C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000ED9EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EDC74( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000EDCC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000EDD44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EDE10(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = atomic_load((unsigned __int8 *)(*(void *)(a1 + 32) + 48LL));
  if ((v3 & 1) != 0)
  {
    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 24LL));
  }

  else
  {
    uint64_t v4 = MediaAnalysisLogLevel(a1, a2);
    if ((int)v4 >= 5)
    {
      uint64_t v6 = VCPLogInstance(v4, v5);
      __int128 v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      os_log_type_t v8 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v7, v8))
      {
        unsigned int v9 = [*(id *)(a1 + 40) count];
        *(_DWORD *)__int128 buf = 67109120;
        LODWORD(v39) = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "[Sticker] Publishing %d results", buf, 8u);
      }
    }

    uint64_t v10 = VCPSignPostLog(v4);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    os_signpost_id_t v12 = os_signpost_id_generate(v11);

    uint64_t v14 = VCPSignPostLog(v13);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    uint64_t v16 = v15;
    if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v16,  OS_SIGNPOST_INTERVAL_BEGIN,  v12,  "MADStickerScore_Persist",  (const char *)&unk_100199097,  buf,  2u);
    }

    uint64_t v17 = *(void **)(a1 + 40);
    uint64_t v18 = *(void **)(*(void *)(a1 + 32) + 8LL);
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_1000EE198;
    v36[3] = &unk_1001BA0C8;
    id v37 = v17;
    id v35 = 0LL;
    unsigned __int8 v19 = [v18 performChangesAndWait:v36 error:&v35];
    id v20 = v35;
    uint64_t v21 = VCPSignPostLog(v20);
    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    uint64_t v23 = v22;
    if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v22))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v23,  OS_SIGNPOST_INTERVAL_END,  v12,  "MADStickerScore_Persist",  (const char *)&unk_100199097,  buf,  2u);
    }

    if ((v19 & 1) == 0)
    {
      uint64_t v26 = MediaAnalysisLogLevel(v24, v25);
      if ((int)v26 >= 3)
      {
        uint64_t v28 = VCPLogInstance(v26, v27);
        uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        os_log_type_t v30 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v29, v30))
        {
          id v31 = (void *)objc_claimAutoreleasedReturnValue([v20 description]);
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v39 = v31;
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "[Sticker] Failed to persist results (%@)", buf, 0xCu);
        }
      }

      atomic_store(1u, (unsigned __int8 *)(*(void *)(a1 + 32) + 48LL));
      id v32 = [v20 copy];
      uint64_t v33 = *(void *)(a1 + 32);
      uint64_t v34 = *(void **)(v33 + 56);
      *(void *)(v33 + 56) = v32;
    }

    dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 32) + 24LL));
  }

void sub_1000EE148( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000EE198(uint64_t a1)
{
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v10;
    do
    {
      for (unint64_t i = 0LL; i != v2; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v3) {
          objc_enumerationMutation(v1);
        }
        uint64_t v5 = *(void **)(*((void *)&v9 + 1) + 8LL * (void)i);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "asset", (void)v9));
        __int128 v7 = (void *)objc_claimAutoreleasedReturnValue( +[PHAssetChangeRequest changeRequestForAsset:]( &OBJC_CLASS___PHAssetChangeRequest,  "changeRequestForAsset:",  v6));

        [v5 stickerScore];
        *(float *)&double v8 = v8;
        [v7 setStickerConfidenceScore:1 stickerAlgorithmVersion:v8];
      }

      id v2 = [v1 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }

    while (v2);
  }
}

void sub_1000EE2D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EEF40( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21, void *a22, uint64_t a23, void *a24, void *a25, uint64_t a26, void *a27, uint64_t a28, uint64_t a29, const void *a30)
{
  sub_10000421C(&a30);
  _Unwind_Resume(a1);
}

void sub_1000EF4F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EF7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EF868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EF900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EFC38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000EFC94(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000EFCD0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1000EFCE4(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_1000EFD20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

LABEL_165:
  }
              }

LABEL_166:
}

              goto LABEL_167;
            }

            uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v289 localIdentifier]);
            uint64_t v52 = [v51 isEqualToString:v50];

            if ((v52 & 1) == 0)
            {
              uint64_t v55 = MediaAnalysisLogLevel(v53, v54);
              if ((int)v55 >= 5)
              {
                id v57 = VCPLogInstance(v55, v56);
                uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
                uint64_t v59 = VCPLogToOSLogType[5];
                if (os_log_type_enabled(v58, v59))
                {
                  __int16 v60 = (void *)objc_claimAutoreleasedReturnValue([v289 localIdentifier]);
                  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v289 localIdentifier]);
                  *(_DWORD *)__int128 buf = 138413314;
                  v342 = v288;
                  v343 = 2112;
                  v344 = v60;
                  v345 = 2112;
                  v346 = v50;
                  v347 = 2112;
                  v348 = v61;
                  v349 = 2112;
                  v350 = v50;
                  _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "%@ mdID Person (%@) is not tagged person (%@); Merge %@ to %@",
                    buf,
                    0x34u);
                }
              }

              v340 = v50;
              uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v340,  1LL));
              uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchPersonsWithLocalIdentifiers:options:]( &OBJC_CLASS___PHPerson,  "fetchPersonsWithLocalIdentifiers:options:",  v62,  v290));
              uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 firstObject]);

              if (v64)
              {
                id v67 = v64;

                id v68 = v67;
                goto LABEL_58;
              }

              v205 = MediaAnalysisLogLevel(v65, v66);
              if ((int)v205 >= 3)
              {
                v207 = VCPLogInstance(v205, v206);
                osloga = (os_log_s *)objc_claimAutoreleasedReturnValue(v207);
                v203 = VCPLogToOSLogType[3];
                v204 = osloga;
                if (os_log_type_enabled(osloga, v203)) {
                  goto LABEL_174;
                }
                goto LABEL_165;
              }

              goto LABEL_166;
            }

void sub_1000F16C8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1A68(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    uint64_t v4 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
    char v5 = v4[2]();

    if ((v5 & 1) != 0) {
      return 1LL;
    }
  }

  __int128 v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  return 0LL;
}

void sub_1000F1AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000F1B14(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_1000F1B24(uint64_t a1)
{
}

void sub_1000F1B2C(uint64_t a1, _BYTE *a2, float a3)
{
  if (a3 >= 0.0)
  {
    char v5 = *(dispatch_queue_s **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000F1CDC;
    block[3] = &unk_1001BA270;
    __int128 v18 = *(_OWORD *)(a1 + 40);
    float v19 = a3;
    dispatch_async(v5, block);
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cancelBlock]);
  if (v6
    && (__int128 v7 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cancelBlock]),
        int v8 = v7[2](),
        v7,
        v6,
        v8))
  {
    *a2 = 1;
    uint64_t v11 = MediaAnalysisLogLevel(v9, v10);
    uint64_t v13 = VCPLogInstance(v11, v12);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 104LL);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v21 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ Cancelling Person Promoting", buf, 0xCu);
    }
  }

  else
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    -[os_log_s pet](v14, "pet");
  }
}

void sub_1000F1CB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F1CDC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) timeIntervalSinceNow];
  if (v4 < -5.0)
  {
    uint64_t v5 = MediaAnalysisLogLevel(v2, v3);
    if ((int)v5 >= 7)
    {
      uint64_t v7 = VCPLogInstance(v5, v6);
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      os_log_type_t v9 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104LL);
        double v11 = *(float *)(a1 + 48);
        int v15 = 138412546;
        uint64_t v16 = v10;
        __int16 v17 = 2048;
        double v18 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "%@ Person Promoting progress: %.2f%%",  (uint8_t *)&v15,  0x16u);
      }
    }

    uint64_t v12 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v12;
  }

uint64_t sub_1000F1E00(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    double v4 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
    char v5 = v4[2]();

    if ((v5 & 1) != 0) {
      return 1LL;
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  return 0LL;
}

void sub_1000F1E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F23E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000F249C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    double v4 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
    char v5 = v4[2]();

    if ((v5 & 1) != 0) {
      return 1LL;
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  return 0LL;
}

void sub_1000F2524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000F2548(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 6)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104LL);
      [v3 fractionCompleted];
      int v14 = 138412546;
      uint64_t v15 = v10;
      __int16 v16 = 2048;
      double v17 = (float)(v11 * 100.0);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Gallery updating - %.2f%%", (uint8_t *)&v14, 0x16u);
    }
  }

  int v12 = (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();

  return v12 ^ 1u;
}

void sub_1000F2664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F43B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, void *a20, uint64_t a21, uint64_t a22, void *a23, void *a24, uint64_t a25, void *a26, void *a27, uint64_t a28, void *a29, uint64_t a30, void *a31, void *a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, void *a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,void *a56,void *a57,void *a58,void *a59,uint64_t a60,char a61)
{
  _Block_object_dispose(&STACK[0x260], 8);
  _Block_object_dispose((const void *)(v64 - 256), 8);

  _Block_object_dispose(&a61, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000F486C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v2)
  {
    id v3 = (void *)v2;
    uint64_t v4 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
    char v5 = v4[2]();

    if ((v5 & 1) != 0) {
      return 1LL;
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  return 0LL;
}

void sub_1000F48F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000F4918(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v4 pet];

  uint64_t v36 = 0LL;
  id v37 = &v36;
  uint64_t v38 = 0x2050000000LL;
  char v5 = (void *)qword_1001E6670;
  uint64_t v39 = qword_1001E6670;
  if (!qword_1001E6670)
  {
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_1000F81B0;
    __int16 v41 = &unk_1001B9F10;
    os_log_type_t v42 = &v36;
    sub_1000F81B0((uint64_t)buf);
    char v5 = (void *)v37[3];
  }

  id v6 = v5;
  _Block_object_dispose(&v36, 8);
  uint64_t v7 = objc_opt_class(v6);
  if ((objc_opt_isKindOfClass(v3, v7) & 1) != 0)
  {
    int v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "entityIdentifier", v36));
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 stringValue]);

    id v10 = [*(id *)(a1 + 32) addObject:v9];
    uint64_t v12 = MediaAnalysisLogLevel(v10, v11);
    if ((int)v12 >= 7)
    {
      uint64_t v14 = VCPLogInstance(v12, v13);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      os_log_type_t v16 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = *(void *)(*(void *)(a1 + 40) + 104LL);
        id v18 = [v3 updateType];
        *(_DWORD *)__int128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v18;
        *(_WORD *)&buf[22] = 2112;
        __int16 v41 = v9;
        float v19 = "%@ Detected observation update (%lu) for %@";
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v15, v16, v19, buf, 0x20u);
        goto LABEL_14;
      }

      goto LABEL_14;
    }

    goto LABEL_15;
  }

  uint64_t v36 = 0LL;
  id v37 = &v36;
  uint64_t v38 = 0x2050000000LL;
  id v20 = (void *)qword_1001E6678;
  uint64_t v39 = qword_1001E6678;
  if (!qword_1001E6678)
  {
    *(void *)__int128 buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472LL;
    *(void *)&uint8_t buf[16] = sub_1000F8204;
    __int16 v41 = &unk_1001B9F10;
    os_log_type_t v42 = &v36;
    sub_1000F8204((uint64_t)buf);
    id v20 = (void *)v37[3];
  }

  id v21 = v20;
  _Block_object_dispose(&v36, 8);
  uint64_t v22 = objc_opt_class(v21);
  if ((objc_opt_isKindOfClass(v3, v22) & 1) != 0)
  {
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "entityIdentifier", v36));
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue([v23 stringValue]);

    id v24 = [*(id *)(a1 + 32) addObject:v9];
    uint64_t v26 = MediaAnalysisLogLevel(v24, v25);
    if ((int)v26 >= 7)
    {
      uint64_t v28 = VCPLogInstance(v26, v27);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      os_log_type_t v16 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v29 = *(void *)(*(void *)(a1 + 40) + 104LL);
        id v30 = [v3 updateType];
        *(_DWORD *)__int128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v29;
        *(_WORD *)&buf[12] = 2048;
        *(void *)&buf[14] = v30;
        *(_WORD *)&buf[22] = 2112;
        __int16 v41 = v9;
        float v19 = "%@ Detected entity update (%lu) for %@";
        goto LABEL_13;
      }

void sub_1000F4C80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000F4D2C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v92 = a3;
  id v93 = a4;
  id v94 = a5;
  uint64_t v10 = mach_absolute_time();
  uint64_t v11 = VCPSignPostLog(v10);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  os_signpost_id_t v13 = os_signpost_id_generate(v12);

  uint64_t v15 = VCPSignPostLog(v14);
  os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  uint64_t v17 = v16;
  if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v16))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v17,  OS_SIGNPOST_INTERVAL_BEGIN,  v13,  "GalleryUpdate_updatePhotosWithEntityBlock",  (const char *)&unk_100199097,  buf,  2u);
  }

  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v18 pet];

  ++*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL);
  uint64_t v19 = *(void *)(*(void *)(a1 + 32) + 104LL);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v9 stringValue]);
  uint64_t v91 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@[%@][%lu]",  v19,  v20,  *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL)));

  uint64_t v23 = MediaAnalysisLogLevel(v21, v22);
  if ((int)v23 >= 7)
  {
    uint64_t v25 = VCPLogInstance(v23, v24);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    os_log_type_t v27 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = [v94 count];
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v99 = v91;
      __int16 v100 = 2048;
      id v101 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "%@ Receiving Photos with %lu face observations ... ",  buf,  0x16u);
    }
  }

  if (!*(void *)(a1 + 40)
    || (uint64_t v29 = *(void **)(a1 + 48),
        id v30 = (void *)objc_claimAutoreleasedReturnValue([v9 stringValue]),
        LOBYTE(v29) = [v29 containsObject:v30],
        v30,
        (v29 & 1) != 0))
  {
LABEL_10:
    id v31 = objc_autoreleasePoolPush();
    id v32 = (void *)objc_claimAutoreleasedReturnValue(+[MADGDUtilities sharedInstance](&OBJC_CLASS___MADGDUtilities, "sharedInstance"));
    unsigned int v33 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "vcp_isSyndicationLibrary");
    uint64_t v34 = *(void *)(a1 + 32);
    uint64_t v35 = *(void *)(v34 + 24);
    uint64_t v36 = *(void *)(v34 + 64);
    if (v33)
    {
      uint64_t v37 = *(void *)(a1 + 72);
      id v96 = 0LL;
      unsigned __int8 v38 = [v32 updatePersonWithSyndicationLibrary:v35 service:v36 entityIdentifier:v9 entityClass:v92 observationIDs:v94 ta ggedPersonUUID:v93 cancelOrExtendTimeoutBlock:v37 error:&v96];
      id v39 = v96;
      __int16 v41 = v39;
      if ((v38 & 1) != 0)
      {
        uint64_t v42 = MediaAnalysisLogLevel(v39, v40);
        uint64_t v44 = VCPLogInstance(v42, v43);
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        os_log_type_t v46 = VCPLogToOSLogType[6];
        if (!os_log_type_enabled(v45, v46)) {
          goto LABEL_35;
        }
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v99 = v91;
        id v47 = "%@ Updated Syndication Library";
        goto LABEL_19;
      }

      uint64_t v72 = MediaAnalysisLogLevel(v39, v40);
      uint64_t v74 = VCPLogInstance(v72, v73);
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
      os_log_type_t v75 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled(v45, v75)) {
        goto LABEL_35;
      }
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v99 = v91;
      __int16 v100 = 2112;
      id v101 = v41;
      id v47 = "%@ Failed to update Syndication Library - %@";
    }

    else
    {
      uint64_t v48 = *(void *)(a1 + 64);
      uint64_t v49 = *(void *)(a1 + 72);
      id v95 = 0LL;
      unsigned __int8 v50 = [v32 updatePersonWithPhotosLibrary:v35 service:v36 entityIdentifier:v9 entityClass:v92 observationIDs:v94 taggedP ersonUUID:v93 keyFaceLocalIdentifiers:v48 cancelOrExtendTimeoutBlock:v49 error:&v95];
      id v51 = v95;
      __int16 v41 = v51;
      if ((v50 & 1) != 0)
      {
        uint64_t v53 = MediaAnalysisLogLevel(v51, v52);
        uint64_t v55 = VCPLogInstance(v53, v54);
        uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v55);
        os_log_type_t v46 = VCPLogToOSLogType[6];
        if (!os_log_type_enabled(v45, v46)) {
          goto LABEL_35;
        }
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v99 = v91;
        id v47 = "%@ Updated Photos";
LABEL_19:
        id v56 = v45;
        os_log_type_t v57 = v46;
        uint32_t v58 = 12;
LABEL_34:
        _os_log_impl((void *)&_mh_execute_header, v56, v57, v47, buf, v58);
        goto LABEL_35;
      }

      uint64_t v76 = MediaAnalysisLogLevel(v51, v52);
      uint64_t v78 = VCPLogInstance(v76, v77);
      uint64_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
      os_log_type_t v75 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled(v45, v75))
      {
LABEL_35:

LABEL_36:
        objc_autoreleasePoolPop(v31);
        uint64_t v80 = VCPSignPostLog(v79);
        id v81 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
        uint64_t v82 = v81;
        if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v81))
        {
          *(_WORD *)__int128 buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v82,  OS_SIGNPOST_INTERVAL_END,  v13,  "GalleryUpdate_updatePhotosWithEntityBlock",  (const char *)&unk_100199097,  buf,  2u);
        }

        if (v10)
        {
          uint64_t v83 = mach_absolute_time();
          VCPPerformance_LogMeasurement("GalleryUpdate_updatePhotosWithEntityBlock", v83 - v10);
        }

        uint64_t v70 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
        if (v70)
        {
          uint64_t v84 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
          int v71 = v84[2]();
        }

        else
        {
          int v71 = 0;
        }

        goto LABEL_44;
      }

      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v99 = v91;
      __int16 v100 = 2112;
      id v101 = v41;
      id v47 = "%@ Failed to update Photos - %@";
    }

    id v56 = v45;
    os_log_type_t v57 = v75;
    uint32_t v58 = 22;
    goto LABEL_34;
  }

  uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v9 stringValue]);
  uint64_t v97 = v59;
  __int16 v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v97, 1LL));
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchPersonsWithMdIDs:options:]( &OBJC_CLASS___PHPerson,  "fetchPersonsWithMdIDs:options:",  v60,  *(void *)(a1 + 56)));
  BOOL v62 = [v61 count] == 0;

  if (v62)
  {
    uint64_t v86 = MediaAnalysisLogLevel(v63, v64);
    if ((int)v86 >= 3)
    {
      uint64_t v88 = VCPLogInstance(v86, v87);
      uint64_t v89 = (os_log_s *)objc_claimAutoreleasedReturnValue(v88);
      os_log_type_t v90 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v89, v90))
      {
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v99 = v91;
        _os_log_impl( (void *)&_mh_execute_header,  v89,  v90,  "%@ Person not in Photos DB (should be according to bookmark)",  buf,  0xCu);
      }
    }

    goto LABEL_10;
  }

  uint64_t v65 = MediaAnalysisLogLevel(v63, v64);
  if ((int)v65 >= 7)
  {
    uint64_t v67 = VCPLogInstance(v65, v66);
    id v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
    os_log_type_t v69 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v68, v69))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v99 = v91;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "%@ Person already in Photos DB; skip updating", buf, 0xCu);
    }
  }

  __int16 v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (!v41)
  {
    int v71 = 0;
    goto LABEL_45;
  }

  uint64_t v70 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  int v71 = v70[2]();
LABEL_44:

LABEL_45:
  return v71 ^ 1u;
}

void sub_1000F5450( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_1000F556C(uint64_t a1, _BYTE *a2, float a3)
{
  if (a3 >= 0.0)
  {
    char v5 = *(dispatch_queue_s **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000F571C;
    block[3] = &unk_1001BA270;
    __int128 v18 = *(_OWORD *)(a1 + 40);
    float v19 = a3;
    dispatch_async(v5, block);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cancelBlock]);
  if (v6
    && (uint64_t v7 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cancelBlock]),
        int v8 = v7[2](),
        v7,
        v6,
        v8))
  {
    *a2 = 1;
    uint64_t v11 = MediaAnalysisLogLevel(v9, v10);
    uint64_t v13 = VCPLogInstance(v11, v12);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 104LL);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v21 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ Cancelling Person Promoting", buf, 0xCu);
    }
  }

  else
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    -[os_log_s pet](v14, "pet");
  }
}

void sub_1000F56F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F571C(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) timeIntervalSinceNow];
  if (v4 < -5.0)
  {
    uint64_t v5 = MediaAnalysisLogLevel(v2, v3);
    if ((int)v5 >= 7)
    {
      uint64_t v7 = VCPLogInstance(v5, v6);
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      os_log_type_t v9 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 104LL);
        double v11 = *(float *)(a1 + 48);
        int v15 = 138412546;
        uint64_t v16 = v10;
        __int16 v17 = 2048;
        double v18 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "%@ Person Promoting progress: %.2f%%",  (uint8_t *)&v15,  0x16u);
      }
    }

    uint64_t v12 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    uint64_t v13 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v12;
  }

void sub_1000F5840(uint64_t a1, _BYTE *a2, double a3)
{
  if (a3 >= 0.0)
  {
    uint64_t v5 = *(dispatch_queue_s **)(a1 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000F59F0;
    block[3] = &unk_1001BCA98;
    __int128 v18 = *(_OWORD *)(a1 + 40);
    double v19 = a3;
    dispatch_async(v5, block);
  }

  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cancelBlock]);
  if (v6
    && (uint64_t v7 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) cancelBlock]),
        int v8 = v7[2](),
        v7,
        v6,
        v8))
  {
    *a2 = 1;
    uint64_t v11 = MediaAnalysisLogLevel(v9, v10);
    uint64_t v13 = VCPLogInstance(v11, v12);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 104LL);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v21 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ Cancelling Pet Promoting", buf, 0xCu);
    }
  }

  else
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    -[os_log_s pet](v14, "pet");
  }
}

void sub_1000F59C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F59F0(void *a1)
{
  id v2 = [*(id *)(*(void *)(a1[5] + 8) + 40) timeIntervalSinceNow];
  if (v4 < -5.0)
  {
    uint64_t v5 = MediaAnalysisLogLevel(v2, v3);
    if ((int)v5 >= 7)
    {
      uint64_t v7 = VCPLogInstance(v5, v6);
      int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      os_log_type_t v9 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = *(void *)(a1[4] + 104LL);
        uint64_t v11 = a1[6];
        int v15 = 138412546;
        uint64_t v16 = v10;
        __int16 v17 = 2048;
        uint64_t v18 = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Pet Promoting progress: %.2f%%", (uint8_t *)&v15, 0x16u);
      }
    }

    uint64_t v12 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    uint64_t v13 = *(void *)(a1[5] + 8LL);
    uint64_t v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v12;
  }

LABEL_135:
      goto LABEL_136;
    }

    v200 = v338 == 0;
    v201 = self->_requirement != 20;

    if (v200 || v201) {
      goto LABEL_137;
    }
  }

  v212 = MediaAnalysisLogLevel(v140, v141);
  if ((int)v212 >= 7)
  {
    v214 = VCPLogInstance(v212, v213);
    v191 = (os_log_s *)objc_claimAutoreleasedReturnValue(v214);
    if (os_log_type_enabled(v191, v324))
    {
      v215 = self->_logPrefix;
      *(_DWORD *)__int128 buf = 138412290;
      v341 = v215;
      _os_log_impl( (void *)&_mh_execute_header,  v191,  v324,  "%@ Skipping clustering and person processing for syndication library",  buf,  0xCu);
    }

            os_log_type_t v102 = (os_log_s *)v133;
LABEL_136:

            goto LABEL_137;
          }

          id v20 = objc_autoreleasePoolPush();
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(+[VCPBackupEntryHeader header](&OBJC_CLASS___VCPBackupEntryHeader, "header"));
          uint64_t v22 = (uint64_t)[v21 readFromStream:v8];
          if (!(_DWORD)v22) {
            break;
          }
          uint64_t v23 = [v8 streamStatus];
          if (v23 == (id)5)
          {
            uint64_t v25 = 16;
            goto LABEL_94;
          }

          unsigned int v33 = MediaAnalysisLogLevel(v23, v24);
          if ((int)v33 >= 3)
          {
            uint64_t v35 = VCPLogInstance(v33, v34);
            id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
            if (os_log_type_enabled(v31, type))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v31, type, "  Failed to read backup entry header", buf, 2u);
            }

            goto LABEL_24;
          }

          uint64_t v25 = 6;
LABEL_93:
          double v19 = v22;
LABEL_94:

          objc_autoreleasePoolPop(v20);
          if (v25 && v25 != 15)
          {
            if (v25 != 16) {
              goto LABEL_135;
            }
            goto LABEL_126;
          }
        }

        uint64_t v26 = [v21 dataLength];
        if (v26 > 0x200000)
        {
          id v28 = MediaAnalysisLogLevel(v26, v27);
          if ((int)v28 < 3)
          {
            double v19 = 4294967246LL;
            uint64_t v25 = 6;
            goto LABEL_94;
          }

          id v30 = VCPLogInstance(v28, v29);
          id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
          if (os_log_type_enabled(v31, type))
          {
            id v32 = [v21 dataLength];
            *(_DWORD *)__int128 buf = 67109120;
            LODWORD(v142) = v32;
            _os_log_impl((void *)&_mh_execute_header, v31, type, "  Backup entry contains invalid length (%u)", buf, 8u);
          }

          uint64_t v22 = 4294967246LL;
LABEL_24:
          uint64_t v25 = 6;
LABEL_92:

          goto LABEL_93;
        }

        if ((++v136 & 0x7F) == 0)
        {
          uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
          [v36 pet];
        }

        id v31 = (os_log_s *) objc_claimAutoreleasedReturnValue( +[NSMutableData dataWithLength:]( NSMutableData, "dataWithLength:", [v21 dataLength]));
        uint64_t v37 = objc_msgSend( v8,  "vcp_readBuffer:ofLength:",  -[os_log_s mutableBytes](v31, "mutableBytes"),  objc_msgSend(v21, "dataLength"));
        uint64_t v22 = (uint64_t)v37;
        if ((_DWORD)v37)
        {
          id v39 = MediaAnalysisLogLevel(v37, v38);
          __int16 v41 = VCPLogInstance(v39, v40);
          uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v42, type))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, type, "  Failed to read asset analysis data", buf, 2u);
          }

          uint64_t v25 = 6;
          goto LABEL_91;
        }

        if ([v21 isCompressed])
        {
          uint64_t v43 = objc_claimAutoreleasedReturnValue([v132 decompressData:v31]);
          if (!v43)
          {
            uint64_t v76 = MediaAnalysisLogLevel(0LL, v44);
            if ((int)v76 < 3)
            {
              uint64_t v25 = 15;
              uint64_t v22 = v19;
              goto LABEL_92;
            }

            uint64_t v78 = VCPLogInstance(v76, v77);
            uint64_t v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v78);
            if (os_log_type_enabled(v42, type))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v42,  type,  "  Failed to decompress asset analysis; skipping entry",
                buf,
                2u);
            }

            goto LABEL_60;
          }

          uint64_t v45 = (os_log_s *)v43;
        }

        else
        {
          uint64_t v45 = v31;
        }

        os_log_type_t v46 = (os_log_s *)[[VCPProtoAssetAnalysis alloc] initWithData:v45];
        uint64_t v42 = v46;
        if (v46)
        {
          v130 = v45;
          v131 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s assetCloudIdentifier](v46, "assetCloudIdentifier"));
          if (v131)
          {
            uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(-[VCPTask photoLibrary](self, "photoLibrary"));
            v140 = 0LL;
            v129 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v49, "mad_localIdentifierForCloudIdentifier:error:", v131, &v140));
            v126 = v140;

            if (v129)
            {
              v125 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s exportToLegacyDictionary](v42, "exportToLegacyDictionary"));
              if (v125)
              {
                v124 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
                v145 = v129;
                uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v145,  1LL));
                uint64_t v54 = [v133 queryHeadersForAssets:v53 analyses:v124] == 0;

                if (!v54) {
                  goto LABEL_39;
                }
                uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](v124, "objectForKeyedSubscript:", v129));
                id v56 = v55;
                if (!v55
                  || (os_log_type_t v57 = objc_msgSend(v55, "vcp_version"),
                      uint32_t v58 = -[os_log_s vcp_version](v125, "vcp_version"),
                      v57 < (int)v58))
                {

LABEL_39:
                  __int16 v60 = [v133 restoreAnalysis:v125 forLocalIdentifier:v129];
                  BOOL v62 = (uint64_t)v60;
                  if ((_DWORD)v60)
                  {
                    uint64_t v63 = MediaAnalysisLogLevel(v60, v61);
                    if ((int)v63 >= 3)
                    {
                      uint64_t v65 = VCPLogInstance(v63, v64);
                      uint64_t v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
                      if (os_log_type_enabled(v66, type))
                      {
                        *(_DWORD *)__int128 buf = 138412290;
                        v142 = (os_log_s *)v129;
                        _os_log_impl( (void *)&_mh_execute_header,  v66,  type,  "  [%@] Failed to restore analysis to database",  buf,  0xCu);
                      }
                    }

                    uint64_t v25 = 6;
                    if ((_DWORD)v62 == -108 || (_DWORD)v62 == -36)
                    {
                      uint64_t v67 = v62;
LABEL_71:
                      if ((_DWORD)v62 == -108 || (_DWORD)v62 == -36 || (_DWORD)v62 == -23)
                      {
                        double v19 = v67;
LABEL_85:

                        goto LABEL_86;
                      }

                      if ((_DWORD)v62 || (v127 = (os_log_s *)((char *)v127 + 1), (v127 & 0x7F) != 0))
                      {
                        double v19 = v67;
LABEL_78:
                        uint64_t v25 = 0;
                        goto LABEL_85;
                      }

                      id v92 = [v133 commit];
                      id v94 = (uint64_t)v92;
                      if (!(_DWORD)v92) {
                        goto LABEL_105;
                      }
                      id v95 = MediaAnalysisLogLevel(v92, v93);
                      if ((int)v95 >= 3)
                      {
                        uint64_t v97 = VCPLogInstance(v95, v96);
                        uint64_t v98 = (os_log_s *)objc_claimAutoreleasedReturnValue(v97);
                        if (os_log_type_enabled(v98, type))
                        {
                          *(_WORD *)__int128 buf = 0;
                          _os_log_impl( (void *)&_mh_execute_header,  v98,  type,  "  Failed to commit restores to database",  buf,  2u);
                        }
                      }

                      uint64_t v25 = 6;
                      if ((_DWORD)v94 == -108 || (_DWORD)v94 == -36)
                      {
                        double v19 = v94;
                        goto LABEL_107;
                      }

                      double v19 = v94;
                      if ((_DWORD)v94 != -23)
                      {
LABEL_105:
                        uint64_t v25 = 0;
                        double v19 = v67;
                      }

LABEL_137:
  if ((((uint64_t (*)(void))v328[2])() & 1) == 0)
  {
    if (-[PHPhotoLibrary vcp_isSyndicationLibrary](self->_photoLibrary, "vcp_isSyndicationLibrary")
      && (_os_feature_enabled_impl("MediaAnalysis", "VUSyndicationLibrary") & 1) == 0)
    {
      v220 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDefaultPhotoLibraryManager sharedManager]( &OBJC_CLASS___VCPDefaultPhotoLibraryManager,  "sharedManager"));
      v221 = (void *)objc_claimAutoreleasedReturnValue([v220 defaultPhotoLibrary]);

      v222 = -[VCPPhotosQuickFaceIdentificationManager initWithPhotoLibrary:]( objc_alloc(&OBJC_CLASS___VCPPhotosQuickFaceIdentificationManager),  "initWithPhotoLibrary:",  v221);
      v223 = self->_photoLibrary;
      v333[0] = _NSConcreteStackBlock;
      v333[1] = 3221225472LL;
      v333[2] = sub_1000F7B0C;
      v333[3] = &unk_1001B9E98;
      v333[4] = self;
      -[VCPPhotosQuickFaceIdentificationManager personIdentificationForSyndicationPhotoLibrary:withCancelOrExtendTimeoutBlock:]( v222,  "personIdentificationForSyndicationPhotoLibrary:withCancelOrExtendTimeoutBlock:",  v223,  v333);
    }

    if ((((uint64_t (*)(void))v328[2])() & 1) == 0)
    {
      v224 = ((uint64_t (*)(void))v328[2])();
      if ((v224 & 1) == 0)
      {
        v226 = MediaAnalysisLogLevel(v224, v225);
        if ((int)v226 >= 6)
        {
          v228 = VCPLogInstance(v226, v227);
          v229 = (os_log_s *)objc_claimAutoreleasedReturnValue(v228);
          if (os_log_type_enabled(v229, type))
          {
            v230 = self->_logPrefix;
            *(_DWORD *)__int128 buf = 138412290;
            v341 = v230;
            _os_log_impl((void *)&_mh_execute_header, v229, type, "%@ Start updating VUWGallery plugins", buf, 0xCu);
          }
        }

        v332[0] = _NSConcreteStackBlock;
        v332[1] = 3221225472LL;
        v332[2] = sub_1000F7BB8;
        v332[3] = &unk_1001BD700;
        v332[4] = self;
        v231 = objc_retainBlock(v332);
        v232 = (void *)objc_claimAutoreleasedReturnValue( +[MADVUWGalleryManager sharedGalleryForPhotoLibrary:]( &OBJC_CLASS___MADVUWGalleryManager,  "sharedGalleryForPhotoLibrary:",  self->_photoLibrary));
        if ((v319 & 1) != 0)
        {
          v233 = mach_absolute_time();
          v234 = VCPSignPostLog(v233);
          v235 = (os_log_s *)objc_claimAutoreleasedReturnValue(v234);
          v236 = os_signpost_id_generate(v235);

          v238 = VCPSignPostLog(v237);
          v239 = (os_log_s *)objc_claimAutoreleasedReturnValue(v238);
          v240 = v239;
          if (v236 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v239))
          {
            *(_WORD *)__int128 buf = 0;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v240,  OS_SIGNPOST_INTERVAL_BEGIN,  v236,  "MADVUWGalleryPluginTypeDeviceOwner",  (const char *)&unk_100199097,  buf,  2u);
          }

          v331 = 0LL;
          v241 = [v232 updatePlugin:0 progressHandler:v231 error:&v331];
          v242 = v331;
          v244 = v242;
          if ((v241 & 1) == 0)
          {
            v242 = (id)MediaAnalysisLogLevel(v242, v243);
            if ((int)v242 >= 3)
            {
              v246 = VCPLogInstance(v242, v245);
              v247 = (os_log_s *)objc_claimAutoreleasedReturnValue(v246);
              if (os_log_type_enabled(v247, v318))
              {
                v248 = self->_logPrefix;
                *(_DWORD *)__int128 buf = 138412546;
                v341 = v248;
                v342 = 2112;
                v343 = (uint64_t)v244;
                _os_log_impl( (void *)&_mh_execute_header,  v247,  v318,  "%@ Failed to update device owner - %@",  buf,  0x16u);
              }
            }
          }

          v249 = VCPSignPostLog(v242);
          v250 = (os_log_s *)objc_claimAutoreleasedReturnValue(v249);
          v251 = v250;
          if (v236 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v250))
          {
            *(_WORD *)__int128 buf = 0;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v251,  OS_SIGNPOST_INTERVAL_END,  v236,  "MADVUWGalleryPluginTypeDeviceOwner",  (const char *)&unk_100199097,  buf,  2u);
          }

          if (v233)
          {
            v253 = mach_absolute_time();
            v252 = VCPPerformance_LogMeasurement("MADVUWGalleryPluginTypeDeviceOwner", v253 - v233);
          }

          v254 = DeviceWithGreymatterSupport(v252);
          if ((_DWORD)v254)
          {
            v256 = mach_absolute_time();
            v257 = VCPSignPostLog(v256);
            v258 = (os_log_s *)objc_claimAutoreleasedReturnValue(v257);
            v259 = os_signpost_id_generate(v258);

            v261 = VCPSignPostLog(v260);
            v262 = (os_log_s *)objc_claimAutoreleasedReturnValue(v261);
            v263 = v262;
            if (v259 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v262))
            {
              *(_WORD *)__int128 buf = 0;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v263,  OS_SIGNPOST_INTERVAL_BEGIN,  v259,  "MADVUWGalleryPluginTypePersonalization",  (const char *)&unk_100199097,  buf,  2u);
            }

            v330 = v244;
            v264 = [v232 updatePlugin:1 progressHandler:v231 error:&v330];
            v265 = v330;

            v244 = v265;
            if ((v264 & 1) == 0)
            {
              v266 = MediaAnalysisLogLevel(v266, v267);
              if ((int)v266 >= 3)
              {
                v269 = VCPLogInstance(v266, v268);
                v270 = (os_log_s *)objc_claimAutoreleasedReturnValue(v269);
                if (os_log_type_enabled(v270, v318))
                {
                  v271 = self->_logPrefix;
                  *(_DWORD *)__int128 buf = 138412546;
                  v341 = v271;
                  v342 = 2112;
                  v343 = (uint64_t)v244;
                  _os_log_impl( (void *)&_mh_execute_header,  v270,  v318,  "%@ Failed to update personalization - %@",  buf,  0x16u);
                }
              }
            }

            v272 = VCPSignPostLog(v266);
            v273 = (os_log_s *)objc_claimAutoreleasedReturnValue(v272);
            v274 = v273;
            if (v259 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v273))
            {
              *(_WORD *)__int128 buf = 0;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v274,  OS_SIGNPOST_INTERVAL_END,  v259,  "MADVUWGalleryPluginTypePersonalization",  (const char *)&unk_100199097,  buf,  2u);
            }

            if (v256)
            {
              v277 = mach_absolute_time();
              v275 = VCPPerformance_LogMeasurement("MADVUWGalleryPluginTypePersonalization", v277 - v256);
            }

            v278 = MediaAnalysisLogLevel(v275, v276);
            if ((int)v278 >= 6)
            {
              v280 = VCPLogInstance(v278, v279);
              v281 = (os_log_s *)objc_claimAutoreleasedReturnValue(v280);
              if (os_log_type_enabled(v281, type))
              {
                v282 = self->_logPrefix;
                *(_DWORD *)__int128 buf = 138412290;
                v341 = v282;
                _os_log_impl((void *)&_mh_execute_header, v281, type, "%@ Finished personalization plugin", buf, 0xCu);
              }
            }

            v254 = -[VCPDatabaseWriter valueForKey:]( self->_analysisDatabase,  "valueForKey:",  VCPKeyValuePrioritizedFaceCheckpointReportedTimestamp);
            if (v254)
            {
              v283 = VCPKeyValuePersonalizationCheckpointReportedTimestamp;
              v254 = -[VCPDatabaseWriter valueForKey:]( self->_analysisDatabase,  "valueForKey:",  VCPKeyValuePersonalizationCheckpointReportedTimestamp);
              if (!v254)
              {
                v329 = v244;
                v284 = +[BGSystemTaskCheckpoints reportFeatureCheckpoint:forFeature:error:]( &OBJC_CLASS___BGSystemTaskCheckpoints,  "reportFeatureCheckpoint:forFeature:error:",  50LL,  802LL,  &v329);
                v285 = v329;

                v244 = v285;
                if ((v284 & 1) != 0)
                {
                  v288 = MediaAnalysisLogLevel(v286, v287);
                  if ((int)v288 >= 5)
                  {
                    v290 = VCPLogInstance(v288, v289);
                    v291 = (os_log_s *)objc_claimAutoreleasedReturnValue(v290);
                    v292 = VCPLogToOSLogType[5];
                    if (os_log_type_enabled(v291, v292))
                    {
                      v293 = self->_logPrefix;
                      *(_DWORD *)__int128 buf = 138412802;
                      v341 = v293;
                      v342 = 2048;
                      v343 = 30LL;
                      v344 = 2048;
                      v345 = 802LL;
                      v294 = "%@ Reported checkpoint %lu for %lu";
                      v295 = v291;
                      v296 = v292;
                      v297 = 32;
                      goto LABEL_191;
                    }

                    goto LABEL_192;
                  }
                }

                else
                {
                  v298 = MediaAnalysisLogLevel(v286, v287);
                  if ((int)v298 >= 3)
                  {
                    v300 = VCPLogInstance(v298, v299);
                    v291 = (os_log_s *)objc_claimAutoreleasedReturnValue(v300);
                    if (os_log_type_enabled(v291, v318))
                    {
                      v301 = self->_logPrefix;
                      *(_DWORD *)__int128 buf = 138413058;
                      v341 = v301;
                      v342 = 2048;
                      v343 = 30LL;
                      v344 = 2048;
                      v345 = 802LL;
                      v346 = 2112;
                      v347 = v285;
                      v294 = "%@ Failed to report checkpoint %lu for %lu - %@";
                      v295 = v291;
                      v296 = v318;
                      v297 = 42;
LABEL_191:
                      _os_log_impl((void *)&_mh_execute_header, v295, v296, v294, buf, v297);
                    }

            v166 = v308[5];
            if (!v166)
            {
LABEL_154:
              *(_BYTE *)(*(void *)(*(void *)(a1 + 104) + 8LL) + 24LL) = 1;
              goto LABEL_162;
            }

            [*(id *)(a1 + 88) _dedupeGraphVerifiedPersonsForPerson:v166 photoLibrary:*(void *)(a1 + 56)];
            v269 = mach_absolute_time();
            v167 = VCPSignPostLog(v269);
            v168 = (os_log_s *)objc_claimAutoreleasedReturnValue(v167);
            spid = os_signpost_id_generate(v168);

            v170 = VCPSignPostLog(v169);
            v171 = (os_log_s *)objc_claimAutoreleasedReturnValue(v170);
            v172 = v171;
            if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v171))
            {
              *(_WORD *)__int128 buf = 0;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v172,  OS_SIGNPOST_INTERVAL_BEGIN,  spid,  "GalleryUpdate_UpdateKeyface",  (const char *)&unk_100199097,  buf,  2u);
            }

            v175 = MediaAnalysisLogLevel(v173, v174);
            if ((int)v175 >= 7)
            {
              v177 = VCPLogInstance(v175, v176);
              v178 = (os_log_s *)objc_claimAutoreleasedReturnValue(v177);
              v179 = VCPLogToOSLogType[7];
              if (os_log_type_enabled(v178, v179))
              {
                v180 = (void *)v308[5];
                *(_DWORD *)__int128 buf = 138412546;
                v342 = v271;
                v343 = 2112;
                v344 = v180;
                _os_log_impl( (void *)&_mh_execute_header,  v178,  v179,  "%@ Checking key face for person %@ ... ",  buf,  0x16u);
              }
            }

            v181 = [v290 copy];
            [v181 setIncludeTorsoOnlyPerson:0];
            v270 = v181;
            v334 = v308[5];
            v182 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v334,  1LL));
            v183 = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchPersonsWithLocalIdentifiers:options:]( &OBJC_CLASS___PHPerson,  "fetchPersonsWithLocalIdentifiers:options:",  v182,  v181));
            v273 = (void *)objc_claimAutoreleasedReturnValue([v183 firstObject]);

            v184 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "mad_allFacesFetchOptions"));
            [v184 setIncludeNonvisibleFaces:0];
            v185 = [v184 setFetchLimit:1];
            if (!v273
              || (v185 = [v273 verifiedType]) != 0
              || (v186 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchKeyFaceForPerson:options:]( PHFace,  "fetchKeyFaceForPerson:options:",  v273,  v184)),  v187 = [v186 count] == 0,  v186,  !v187))
            {
LABEL_148:
              v188 = VCPSignPostLog(v185);
              v189 = (os_log_s *)objc_claimAutoreleasedReturnValue(v188);
              v190 = v189;
              if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v189))
              {
                *(_WORD *)__int128 buf = 0;
                _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v190,  OS_SIGNPOST_INTERVAL_END,  spid,  "GalleryUpdate_UpdateKeyface",  (const char *)&unk_100199097,  buf,  2u);
              }

              if (v269)
              {
                v191 = mach_absolute_time();
                VCPPerformance_LogMeasurement("GalleryUpdate_UpdateKeyface", v191 - v269);
              }

              goto LABEL_154;
            }

            v226 = (void *)objc_claimAutoreleasedReturnValue( -[VCPPhotosPersistenceDelegate bestRepresentativeFaceForPerson:qualityMeasureByFace:candidateFaces:cancelOrExtendTimeoutBlock:]( v283,  "bestRepresentativeFaceForPerson:qualityMeasureByFace:candidateFaces:cancelOrExtendTimeoutBlock:",  v273,  0LL,  0LL,  *(void *)(a1 + 96)));
            if (v226)
            {
              v227 = *(void **)(a1 + 56);
              v295[0] = _NSConcreteStackBlock;
              v295[1] = 3221225472LL;
              v295[2] = sub_10011DD3C;
              v295[3] = &unk_1001B9E00;
              v296 = v273;
              v228 = v226;
              v297 = v228;
              v294 = 0LL;
              v267 = [v227 performChangesAndWait:v295 error:&v294];
              v229 = v294;
              v266 = v229;
              if ((v267 & 1) != 0)
              {
                v231 = MediaAnalysisLogLevel(v229, v230);
                if ((int)v231 >= 7)
                {
                  v233 = VCPLogInstance(v231, v232);
                  v234 = (os_log_s *)objc_claimAutoreleasedReturnValue(v233);
                  v235 = VCPLogToOSLogType[7];
                  if (os_log_type_enabled(v234, v235))
                  {
                    v264 = (void *)objc_claimAutoreleasedReturnValue([v228 localIdentifier]);
                    v236 = [v228 vuObservationID];
                    v237 = (void *)v308[5];
                    *(_DWORD *)__int128 buf = 138413058;
                    v342 = v271;
                    v343 = 2112;
                    v344 = v264;
                    v345 = 2048;
                    v346 = v236;
                    v347 = 2112;
                    v348 = v237;
                    _os_log_impl( (void *)&_mh_execute_header,  v234,  v235,  "%@ Set key face %@-%ld for person %@",  buf,  0x2Au);
                  }
                }

                v238 = (void *)objc_claimAutoreleasedReturnValue([v228 localIdentifier]);

                if (v238)
                {
                  v239 = *(void **)(a1 + 80);
                  v240 = (void *)objc_claimAutoreleasedReturnValue([v228 localIdentifier]);
                  [v239 addObject:v240];
                  goto LABEL_209;
                }
              }

              else
              {
                v255 = MediaAnalysisLogLevel(v229, v230);
                if ((int)v255 >= 3)
                {
                  v257 = VCPLogInstance(v255, v256);
                  v258 = (os_log_s *)objc_claimAutoreleasedReturnValue(v257);
                  v259 = VCPLogToOSLogType[3];
                  if (os_log_type_enabled(v258, v259))
                  {
                    v265 = (void *)objc_claimAutoreleasedReturnValue([v228 localIdentifier]);
                    v260 = [v228 vuObservationID];
                    v261 = (void *)v308[5];
                    *(_DWORD *)__int128 buf = 138413314;
                    v342 = v271;
                    v343 = 2112;
                    v344 = v265;
                    v345 = 2048;
                    v346 = v260;
                    v347 = 2112;
                    v348 = v261;
                    v349 = 2112;
                    v350 = v266;
                    _os_log_impl( (void *)&_mh_execute_header,  v258,  v259,  "%@ Failed to set key face %@-%ld  for person %@ - %@",  buf,  0x34u);
                  }
                }

                if (*(void *)(a1 + 112))
                {
                  v332 = NSLocalizedDescriptionKey;
                  v240 = (void *)objc_claimAutoreleasedReturnValue([v228 localIdentifier]);
                  v262 = [v228 vuObservationID];
                  v272 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to set key face %@-%ld for person %@ - %@",  v240,  v262,  v308[5],  v266));
                  v333 = v272;
                  v263 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v333,  &v332,  1LL));
                  **(void **)(a1 + 112) = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v263));

LABEL_209:
                }
              }

              if (v267) {
                goto LABEL_148;
              }
            }

            else
            {
              v247 = MediaAnalysisLogLevel(0LL, v225);
              if ((int)v247 >= 3)
              {
                v249 = VCPLogInstance(v247, v248);
                v250 = (os_log_s *)objc_claimAutoreleasedReturnValue(v249);
                v251 = VCPLogToOSLogType[3];
                if (os_log_type_enabled(v250, v251))
                {
                  v252 = (void *)v308[5];
                  *(_DWORD *)__int128 buf = 138412546;
                  v342 = v271;
                  v343 = 2112;
                  v344 = v252;
                  _os_log_impl( (void *)&_mh_execute_header,  v250,  v251,  "%@ Failed to load key face for person %@",  buf,  0x16u);
                }
              }

              if (*(void *)(a1 + 112))
              {
                v330 = NSLocalizedDescriptionKey;
                v253 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to load key face for person %@",  v308[5]));
                v331 = v253;
                v254 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v331,  &v330,  1LL));
                **(void **)(a1 + 112) = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v254));
              }
            }

            goto LABEL_162;
          }
        }

        else
        {
          __int16 v41 = 0LL;
        }

        uint64_t v42 = 0LL;
        goto LABEL_47;
      }
    }
  }

  if (!*(void *)(a1 + 112)) {
    return;
  }
  v353 = NSLocalizedDescriptionKey;
  v287 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Update person with photosLibrary cancelled ..."));
  v354 = v287;
  v288 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v354,  &v353,  1LL));
  **(void **)(a1 + 112) = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL,  v288));
LABEL_167:
}

LABEL_192:
                  }
                }

                analysisDatabase = self->_analysisDatabase;
                v303 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
                [v303 timeIntervalSinceReferenceDate];
                -[VCPDatabaseWriter setValue:forKey:](analysisDatabase, "setValue:forKey:", (uint64_t)v304, v283);

                v254 = -[VCPDatabaseWriter commit](self->_analysisDatabase, "commit");
              }
            }
          }

          v305 = MediaAnalysisLogLevel(v254, v255);
          if ((int)v305 >= 6)
          {
            v307 = VCPLogInstance(v305, v306);
            v308 = (os_log_s *)objc_claimAutoreleasedReturnValue(v307);
            if (os_log_type_enabled(v308, type))
            {
              v309 = self->_logPrefix;
              *(_DWORD *)__int128 buf = 138412290;
              v341 = v309;
              _os_log_impl( (void *)&_mh_execute_header,  v308,  type,  "%@ Finished updating VUWGallery plugins",  buf,  0xCu);
            }
          }
        }

        else
        {
          v244 = 0LL;
        }

        v310 = -[os_log_s stop](oslog, "stop");
        v312 = MediaAnalysisLogLevel(v310, v311);
        if ((int)v312 >= 6)
        {
          v314 = VCPLogInstance(v312, v313);
          v315 = (os_log_s *)objc_claimAutoreleasedReturnValue(v314);
          if (os_log_type_enabled(v315, type))
          {
            v316 = self->_logPrefix;
            -[os_log_s elapsedTimeSeconds](oslog, "elapsedTimeSeconds");
            *(_DWORD *)__int128 buf = 138412546;
            v341 = v316;
            v342 = 2048;
            v343 = v317;
            _os_log_impl( (void *)&_mh_execute_header,  v315,  type,  "%@ Finished Gallery Person Processing (%.2f seconds)",  buf,  0x16u);
          }
        }
      }
    }
  }

          objc_autoreleasePoolPop(context);
          objc_autoreleasePoolPop(v829);
LABEL_529:
          __int16 v60 = (os_log_s *)v805;
          goto LABEL_530;
        }
      }

      objc_autoreleasePoolPop(context);
    }

    objc_autoreleasePoolPop(v829);
    v779 = objc_autoreleasePoolPush();
    v785 = mach_absolute_time();
    v124 = VCPSignPostLog(v785);
    v125 = (os_log_s *)objc_claimAutoreleasedReturnValue(v124);
    v789 = os_signpost_id_generate(v125);

    v127 = VCPSignPostLog(v126);
    v128 = (os_log_s *)objc_claimAutoreleasedReturnValue(v127);
    v129 = v128;
    if (v789 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v128))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v129,  OS_SIGNPOST_INTERVAL_BEGIN,  v789,  "GallerySync_loadObservationIDFromPhotos",  (const char *)&unk_100199097,  buf,  2u);
    }

    v130 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    [v130 addBreadcrumb:@"[GallerySync] Reset vuObservationIDs to all unknown vuObservationIDs from Photos DB"];

    v802 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mad_allFacesFetchOptions"));
    v131 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"vuObservationID != 0"));
    [v802 setInternalPredicate:v131];

    v826 = (void *)objc_claimAutoreleasedReturnValue(+[PHFace fetchFacesWithOptions:](&OBJC_CLASS___PHFace, "fetchFacesWithOptions:", v802));
    v806 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableSet setWithCapacity:]( NSMutableSet,  "setWithCapacity:",  [v826 count]));
    if ([v826 count])
    {
      v132 = 0LL;
      do
      {
        v133 = objc_autoreleasePoolPush();
        v134 = (void *)objc_claimAutoreleasedReturnValue([v826 objectAtIndexedSubscript:v132]);
        v135 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v134 vuObservationID]));
        [v806 addObject:v135];

        objc_autoreleasePoolPop(v133);
        ++v132;
      }

      while (v132 < (unint64_t)[v826 count]);
    }

    v798 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mad_allPersonsFetchOptions"));
    v136 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"verifiedType = %ld",  -2LL));
    [v798 setPredicate:v136];

    v814 = (void *)objc_claimAutoreleasedReturnValue(+[PHPerson fetchPersonsWithOptions:](&OBJC_CLASS___PHPerson, "fetchPersonsWithOptions:", v798));
    osloga = (os_log_t)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    v137 = [v814 count];
    if (v137)
    {
      v817 = 0LL;
      v138 = VCPLogToOSLogType[7];
      do
      {
        contexta = objc_autoreleasePoolPush();
        v139 = *(void *)(a1 + 56);
        if (v139)
        {
          v140 = (*(uint64_t (**)(void))(v139 + 16))();
          if ((_DWORD)v140)
          {
            v269 = MediaAnalysisLogLevel(v140, v141);
            if ((int)v269 >= 6)
            {
              v271 = VCPLogInstance(v269, v270);
              v272 = (os_log_s *)objc_claimAutoreleasedReturnValue(v271);
              v273 = VCPLogToOSLogType[6];
              if (os_log_type_enabled(v272, v273))
              {
                *(_DWORD *)__int128 buf = 138412290;
                *(void *)&uint8_t buf[4] = v833;
                _os_log_impl((void *)&_mh_execute_header, v272, v273, "%@ Cancelled", buf, 0xCu);
              }
            }

            objc_autoreleasePoolPop(contexta);
            v274 = 1;
            goto LABEL_242;
          }
        }

        v821 = (void *)objc_claimAutoreleasedReturnValue([v814 objectAtIndexedSubscript:v817]);
        v143 = MediaAnalysisLogLevel(v821, v142);
        if ((int)v143 >= 7)
        {
          v145 = VCPLogInstance(v143, v144);
          v146 = (os_log_s *)objc_claimAutoreleasedReturnValue(v145);
          if (os_log_type_enabled(v146, v138))
          {
            v147 = (void *)objc_claimAutoreleasedReturnValue([v821 localIdentifier]);
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v833;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v147;
            _os_log_impl( (void *)&_mh_execute_header,  v146,  v138,  "%@ Checking tombstone person %@ to collect all connecting faces to remove",  buf,  0x16u);
          }
        }

        v148 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesForPerson:options:]( &OBJC_CLASS___PHFace,  "fetchFacesForPerson:options:",  v821,  v802));
        if ([v148 count])
        {
          v149 = 0LL;
          do
          {
            v150 = objc_autoreleasePoolPush();
            v151 = (void *)objc_claimAutoreleasedReturnValue([v148 objectAtIndexedSubscript:v149]);
            v153 = MediaAnalysisLogLevel(v151, v152);
            if ((int)v153 >= 7)
            {
              v155 = VCPLogInstance(v153, v154);
              v156 = (os_log_s *)objc_claimAutoreleasedReturnValue(v155);
              if (os_log_type_enabled(v156, v138))
              {
                v157 = (void *)objc_claimAutoreleasedReturnValue([v151 localIdentifier]);
                v158 = [v151 vuObservationID];
                v159 = (void *)objc_claimAutoreleasedReturnValue([v151 personLocalIdentifier]);
                *(_DWORD *)__int128 buf = 138413058;
                *(void *)&uint8_t buf[4] = v833;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v157;
                *(_WORD *)&buf[22] = 2048;
                *(void *)&_BYTE buf[24] = v158;
                *(_WORD *)&buf[32] = 2112;
                *(void *)&buf[34] = v159;
                _os_log_impl( (void *)&_mh_execute_header,  v156,  v138,  "%@ Face %@ (%lu) for tombstone person %@",  buf,  0x2Au);
              }
            }

            v160 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v151 vuObservationID]));
            -[os_log_s addObject:](osloga, "addObject:", v160);

            objc_autoreleasePoolPop(v150);
            ++v149;
          }

          while (v149 < (unint64_t)[v148 count]);
        }

        objc_autoreleasePoolPop(contexta);
        v137 = [v814 count];
        ++v817;
      }

      while (v817 < (unint64_t)v137);
    }

    v161 = VCPSignPostLog(v137);
    v162 = (os_log_s *)objc_claimAutoreleasedReturnValue(v161);
    v163 = v162;
    if (v789 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v162))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v163,  OS_SIGNPOST_INTERVAL_END,  v789,  "GallerySync_loadObservationIDFromPhotos",  (const char *)&unk_100199097,  buf,  2u);
    }

    if (v785)
    {
      v164 = mach_absolute_time();
      VCPPerformance_LogMeasurement("GallerySync_loadObservationIDFromPhotos", v164 - v785);
    }

    v165 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    [v165 addBreadcrumb:@"[GallerySync] Finished resetting vuObservationIDs to all unknown vuObservationIDs from Photos DB"];

    *(void *)__int128 buf = 0LL;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000LL;
    *(void *)&_BYTE buf[24] = sub_100110B70;
    *(void *)&buf[32] = sub_100110B80;
    *(void *)&buf[40] = objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    v166 = mach_absolute_time();
    v167 = VCPSignPostLog(v166);
    v168 = (os_log_s *)objc_claimAutoreleasedReturnValue(v167);
    v169 = os_signpost_id_generate(v168);

    v171 = VCPSignPostLog(v170);
    v172 = (os_log_s *)objc_claimAutoreleasedReturnValue(v171);
    v173 = v172;
    if (v169 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v172))
    {
      *(_WORD *)v886 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v173,  OS_SIGNPOST_INTERVAL_BEGIN,  v169,  "GallerySync_loadUnassignedObservationIDFromGallery",  (const char *)&unk_100199097,  v886,  2u);
    }

    v174 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) gallery]);
    v830 = (void *)objc_claimAutoreleasedReturnValue([v174 unassignedObservations]);

    v177 = MediaAnalysisLogLevel(v175, v176);
    if ((int)v177 >= 7)
    {
      v179 = VCPLogInstance(v177, v178);
      v180 = (os_log_s *)objc_claimAutoreleasedReturnValue(v179);
      v181 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v180, v181))
      {
        v182 = [v830 count];
        *(_DWORD *)v886 = 138412546;
        v887 = v833;
        v888 = 2048;
        v889 = (uint64_t)v182;
        _os_log_impl((void *)&_mh_execute_header, v180, v181, "%@ Dicovered %lu unassigned observations", v886, 0x16u);
      }
    }

    v822 = [v830 mutableCopy];
    [v822 minusSet:v806];
    if ([v822 count])
    {
      v183 = [*(id *)(*(void *)&buf[8] + 40) unionSet:v822];
      v185 = MediaAnalysisLogLevel(v183, v184);
      if ((int)v185 >= 5)
      {
        v187 = VCPLogInstance(v185, v186);
        v188 = (os_log_s *)objc_claimAutoreleasedReturnValue(v187);
        v189 = VCPLogToOSLogType[5];
        if (os_log_type_enabled(v188, v189))
        {
          v190 = [v822 count];
          *(_DWORD *)v886 = 138412546;
          v887 = v833;
          v888 = 2048;
          v889 = (uint64_t)v190;
          _os_log_impl( (void *)&_mh_execute_header,  v188,  v189,  "%@ Dicovered %lu unassigned observations also unknown to Photos",  v886,  0x16u);
        }
      }
    }

    v191 = [v830 count];
    if (v191) {
      v191 = [v806 minusSet:v830];
    }
    v192 = VCPSignPostLog(v191);
    v193 = (os_log_s *)objc_claimAutoreleasedReturnValue(v192);
    v194 = v193;
    if (v169 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v193))
    {
      *(_WORD *)v886 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v194,  OS_SIGNPOST_INTERVAL_END,  v169,  "GallerySync_loadUnassignedObservationIDFromGallery",  (const char *)&unk_100199097,  v886,  2u);
    }

    if (v166)
    {
      v195 = mach_absolute_time();
      VCPPerformance_LogMeasurement("GallerySync_loadUnassignedObservationIDFromGallery", v195 - v166);
    }

    v196 = mach_absolute_time();
    v197 = VCPSignPostLog(v196);
    v198 = (os_log_s *)objc_claimAutoreleasedReturnValue(v197);
    v199 = os_signpost_id_generate(v198);

    v201 = VCPSignPostLog(v200);
    v202 = (os_log_s *)objc_claimAutoreleasedReturnValue(v201);
    v203 = v202;
    if (v199 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v202))
    {
      *(_WORD *)v886 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v203,  OS_SIGNPOST_INTERVAL_BEGIN,  v199,  "GallerySync_checkUnknownObservationIDs",  (const char *)&unk_100199097,  v886,  2u);
    }

    v875[0] = 0LL;
    v875[1] = v875;
    v875[2] = 0x2020000000LL;
    v875[3] = 0LL;
    [*(id *)(*(void *)&buf[8] + 40) unionSet:osloga];
    v204 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    [v204 addBreadcrumb:@"[GallerySync] Checking unknown observation ids"];

    v868[0] = _NSConcreteStackBlock;
    v868[1] = 3221225472LL;
    v868[2] = sub_1001163FC;
    v868[3] = &unk_1001BDCB8;
    v873 = v875;
    v872 = *(id *)(a1 + 56);
    v777 = v833;
    v869 = (__CFString *)v777;
    v870 = v805;
    v874 = buf;
    v794 = v806;
    v871 = v794;
    contextb = objc_retainBlock(v868);
    v205 = *(void **)(a1 + 48);
    v867 = 0LL;
    v818 = (void *)objc_claimAutoreleasedReturnValue([v205 entitiesFor:0 error:&v867 body:contextb]);
    v206 = v867;
    v790 = v206;
    if (!v818)
    {
      v260 = MediaAnalysisLogLevel(v206, v207);
      if ((int)v260 >= 3)
      {
        v262 = VCPLogInstance(v260, v261);
        v263 = (os_log_s *)objc_claimAutoreleasedReturnValue(v262);
        v264 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v263, v264))
        {
          *(_DWORD *)v886 = 138412546;
          v887 = v777;
          v888 = 2112;
          v889 = (uint64_t)v790;
          v265 = "%@ Failed to sync - %@";
          v266 = v263;
          v267 = v264;
          v268 = 22;
          goto LABEL_180;
        }

void sub_1000F76FC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, void *a28)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000F7A60(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    double v4 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
    char v5 = v4[2]();

    if ((v5 & 1) != 0) {
      return 1LL;
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  return 0LL;
}

void sub_1000F7AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000F7B0C(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    double v4 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
    char v5 = v4[2]();

    if ((v5 & 1) != 0) {
      return 1LL;
    }
  }

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v7 pet];

  return 0LL;
}

void sub_1000F7B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000F7BB8(uint64_t a1, float a2)
{
  double v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]);
  if (v4
    && (char v5 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancelBlock]),
        char v6 = v5[2](),
        v5,
        v4,
        (v6 & 1) != 0))
  {
    int v9 = 1;
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v10 pet];

    int v9 = 0;
  }

  uint64_t v11 = MediaAnalysisLogLevel(v7, v8);
  if ((int)v11 >= 6)
  {
    uint64_t v13 = VCPLogInstance(v11, v12);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 32) + 104LL);
      int v18 = 138412802;
      uint64_t v19 = v16;
      __int16 v20 = 2048;
      double v21 = a2 * 100.0;
      __int16 v22 = 1024;
      int v23 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "%@ VUWGallery plugin update progress: %.2f%%, isCancelled %d",  (uint8_t *)&v18,  0x1Cu);
    }
  }

  return v9 ^ 1u;
}

void sub_1000F7D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F7F58(_Unwind_Exception *a1)
{
  double v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1000F80B0(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("GDVUChangeBookmark");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E6660 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_1000B87EC();
    sub_1000F8104();
  }

void sub_1000F8104()
{
  id v1 = 0LL;
  if (!qword_1001E6668)
  {
    __int128 v2 = off_1001BD720;
    uint64_t v3 = 0LL;
    qword_1001E6668 = _sl_dlopen(&v2, &v1);
  }

  uint64_t v0 = v1;
  if (!qword_1001E6668)
  {
    uint64_t v0 = (char *)abort_report_np("%s", v1);
    goto LABEL_7;
  }

  if (v1) {
LABEL_7:
  }
    free(v0);
}

Class sub_1000F81B0(uint64_t a1)
{
  Class result = objc_getClass("GDVUObservationUpdate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E6670 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_1000B8810();
    return (Class)sub_1000F8204(v3);
  }

  return result;
}

MADProgressManager *sub_1000F8204(uint64_t a1)
{
  Class result = (MADProgressManager *)objc_getClass("GDVUEntityUpdate");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E6678 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = sub_1000B8834();
    return -[MADProgressManager initWithPhotoLibrary:]((MADProgressManager *)v3, v4, v5);
  }

  return result;
}

void sub_1000F82C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000F8554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_52:
        goto LABEL_53;
      }

      uint64_t v99 = 0LL;
      uint64_t v45 = +[BGSystemTaskCheckpoints reportCustomCheckpoint:forTask:error:]( &OBJC_CLASS___BGSystemTaskCheckpoints,  "reportCustomCheckpoint:forTask:error:",  a5,  v93,  &v99,  0LL);
      os_log_type_t v46 = (os_log_s *)v99;
      uint64_t v87 = v46;
      if ((v45 & 1) != 0)
      {
        uint64_t v48 = MediaAnalysisLogLevel(v46, v47);
        if ((int)v48 >= 5)
        {
          unsigned __int8 v50 = VCPLogInstance(v48, v49);
          id v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
          uint64_t v52 = VCPLogToOSLogType[5];
          if (os_log_type_enabled(v51, v52))
          {
            *(_DWORD *)__int128 buf = 138412802;
            id v101 = v92;
            os_log_type_t v102 = 1024;
            *(_DWORD *)id v103 = a5;
            *(_WORD *)&v103[4] = 2112;
            *(void *)&v103[6] = v93;
            _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "[%@] Reported BGST Custom Checkpoint %d for task taskIdentifier %@",  buf,  0x1Cu);
          }
        }

        objc_msgSend(v88, "timeIntervalSinceReferenceDate", v87);
        [v89 setValue:(uint64_t)v53 forKey:v90];
        *a8 = 1;
      }

      else
      {
        uint64_t v54 = MediaAnalysisLogLevel(v46, v47);
        if ((int)v54 >= 3)
        {
          id v56 = VCPLogInstance(v54, v55);
          os_log_type_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
          uint32_t v58 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v57, v58))
          {
            *(_DWORD *)__int128 buf = 138413058;
            id v101 = v92;
            os_log_type_t v102 = 1024;
            *(_DWORD *)id v103 = a5;
            *(_WORD *)&v103[4] = 2112;
            *(void *)&v103[6] = v93;
            *(_WORD *)&v103[14] = 2112;
            *(void *)&v103[16] = v87;
            _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "[%@] Failed to report BGST Custom Checkpoint %d for taskIdentifier %@ - %@",  buf,  0x26u);
          }
        }
      }

      if (!v12) {
        goto LABEL_52;
      }
      uint64_t v97 = 0u;
      uint64_t v98 = 0u;
      id v95 = 0u;
      id v96 = 0u;
      uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([a1 _featureCodeWithTaskID:a4]);
      __int16 v60 = [v59 countByEnumeratingWithState:&v95 objects:v106 count:16];
      if (!v60) {
        goto LABEL_51;
      }
      uint64_t v61 = *(void *)v96;
      os_log_type_t type = VCPLogToOSLogType[3];
      BOOL v62 = VCPLogToOSLogType[5];
      uint64_t v63 = VCPLogToOSLogType[7];
LABEL_32:
      uint64_t v64 = 0LL;
      while (1)
      {
        if (*(void *)v96 != v61) {
          objc_enumerationMutation(v59);
        }
        uint64_t v65 = *(void **)(*((void *)&v95 + 1) + 8 * v64);
        uint64_t v66 = objc_autoreleasePoolPush();
        if ([v65 unsignedIntegerValue]) {
          break;
        }
        id v81 = MediaAnalysisLogLevel(0LL, v67);
        if ((int)v81 >= 7)
        {
          uint64_t v83 = VCPLogInstance(v81, v82);
          uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
          if (os_log_type_enabled(v72, v63))
          {
            *(_DWORD *)__int128 buf = 138412546;
            id v101 = v92;
            os_log_type_t v102 = 2112;
            *(void *)id v103 = v93;
            _os_log_impl( (void *)&_mh_execute_header,  v72,  v63,  "[%@] Skip reporting BGST Checkpoint for %@: no feature code",  buf,  0x16u);
          }

          goto LABEL_48;
        }

            id v31 = 1;
LABEL_53:

            goto LABEL_64;
          }

          goto LABEL_63;
        }

        os_log_type_t v57 = MediaAnalysisLogLevel(v53, v54);
        if ((int)v57 >= 6)
        {
          uint64_t v59 = VCPLogInstance(v57, v58);
          id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
          __int16 v60 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v47, v60))
          {
            uint64_t v87 = 138412290;
            *(void *)uint64_t v88 = v14;
            uint64_t v61 = "  Analysis backup up-to-date (%@)";
            BOOL v62 = v47;
            uint64_t v63 = v60;
            uint64_t v64 = 12;
LABEL_57:
            _os_log_impl((void *)&_mh_execute_header, v62, v63, v61, (uint8_t *)&v87, v64);
            goto LABEL_58;
          }

          goto LABEL_58;
        }

        goto LABEL_11;
      }

      if (v16)
      {
        uint64_t v44 = MediaAnalysisLogLevel(v18, v19);
        os_log_type_t v46 = VCPLogInstance(v44, v45);
        id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
        uint64_t v48 = VCPLogToOSLogType[6];
        if (!os_log_type_enabled(v47, v48)) {
          goto LABEL_52;
        }
        uint64_t v87 = 138412290;
        *(void *)uint64_t v88 = v14;
        uint64_t v49 = "  Backup outdated (%@); performing backup";
      }

      else
      {
        if (!v17)
        {
          uint64_t v78 = MediaAnalysisLogLevel(v18, v19);
          if ((int)v78 >= 6)
          {
            uint64_t v80 = VCPLogInstance(v78, v79);
            id v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v80);
            id v81 = VCPLogToOSLogType[6];
            if (os_log_type_enabled(v47, v81))
            {
              uint64_t v87 = 67109634;
              *(_DWORD *)uint64_t v88 = 0;
              *(_WORD *)&void v88[4] = 1024;
              *(_DWORD *)&v88[6] = 0;
              *(_WORD *)&v88[10] = 2112;
              *(void *)&v88[12] = v14;
              uint64_t v61 = "  Changes too few (%d, threshold: %d) since last backup (%@); skipping backup";
              BOOL v62 = v47;
              uint64_t v63 = v81;
              uint64_t v64 = 24;
              goto LABEL_57;
            }

void sub_1000F8CDC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21)
{
}

void sub_1000F9130( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  int v23 = v21;

  _Unwind_Resume(a1);
}

void sub_1000F9A48( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, void *a28, void *a29)
{
  _Unwind_Resume(a1);
}

void sub_1000FA1D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FA47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FA63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FA900( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000FAE3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FB150(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FB528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FBBA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000FC060( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21, void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1000FC300( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000FC79C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1000FCA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1000FCA64(id a1)
{
  return 0;
}

void sub_1000FCAFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FCB74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)&OBJC_CLASS___VCPPhotosMaintenanceProcessingTask;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_1000FD26C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FDE80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, void *a29, void *a30, uint64_t a31, uint64_t a32, void *a33)
{
  _Unwind_Resume(a1);
}

LABEL_72:
  return 0;
}

void sub_1000FEA5C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, void *a30, char a31)
{
  _Block_object_dispose((const void *)(v38 - 208), 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

id sub_1000FEBF4(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 path]);
  id v4 = [v3 isEqualToString:*(void *)(a1 + 32)];

  return v4;
}

void sub_1000FEC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000FEC44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_1000FEC54(uint64_t a1)
{
}

void sub_1000FEC5C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v7 = v5;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = a2;
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    if ((int)MediaAnalysisLogLevel(v5, v6) >= 6)
    {
      uint64_t v8 = VCPLogInstance();
      int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      os_log_type_t v10 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v9, v10))
      {
        LOWORD(v17) = 0;
        uint64_t v11 = "  Successfully encrypted intermediate backup file";
        uint64_t v12 = v9;
        os_log_type_t v13 = v10;
        uint32_t v14 = 2;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v12, v13, v11, (uint8_t *)&v17, v14);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if ((int)MediaAnalysisLogLevel(v5, v6) >= 3)
  {
    uint64_t v15 = VCPLogInstance();
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    os_log_type_t v16 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v9, v16))
    {
      int v17 = 138412290;
      int v18 = v7;
      uint64_t v11 = "  Failed to encrypt intermediate backup file (%@); backup failed";
      uint64_t v12 = v9;
      os_log_type_t v13 = v16;
      uint32_t v14 = 12;
      goto LABEL_8;
    }

void sub_1000FEDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FF040( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000FF094(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v3 pet];

  return 0LL;
}

void sub_1000FF0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FF998( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21)
{
  _Unwind_Resume(a1);
}

id sub_1000FFB24(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1000FFB6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000FFB7C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1000FFBC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000FFBD4(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCancelled];
}

void sub_1000FFD08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000FFF00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010042C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001006E4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100100754(uint64_t a1)
{
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id obj = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v22 objects:v32 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v23;
    os_log_type_t type = VCPLogToOSLogType[7];
    do
    {
      for (unint64_t i = 0LL; i != v2; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v3) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        uint64_t v6 = objc_autoreleasePoolPush();
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v5]);
        signed __int16 v8 = (unsigned __int16)[v7 intValue];

        int v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _computeSyncPayloadForAsset:v5 fromDatabase:*(void *)(a1 + 48)]);
        os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[PHAssetChangeRequest changeRequestForAsset:]( &OBJC_CLASS___PHAssetChangeRequest,  "changeRequestForAsset:",  v5));
        int v11 = v8;
        [v10 setLocalAnalysisStage:v8];
        id v12 = [v10 setComputeSyncMediaAnalysisPayload:v9];
        uint64_t v14 = MediaAnalysisLogLevel(v12, v13);
        if ((int)v14 >= 7)
        {
          uint64_t v16 = VCPLogInstance(v14, v15);
          int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, type))
          {
            int v18 = (void *)objc_claimAutoreleasedReturnValue([v5 localIdentifier]);
            unsigned int v19 = [v9 length];
            *(_DWORD *)__int128 buf = 138412802;
            os_log_type_t v27 = v18;
            __int16 v28 = 1024;
            int v29 = v11;
            __int16 v30 = 1024;
            unsigned int v31 = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  type,  "[ComputeSync|Backfill][%@] Publish analysis stage (%d) and compute sync payload (%d bytes)",  buf,  0x18u);
          }
        }

        objc_autoreleasePoolPop(v6);
      }

      id v2 = [obj countByEnumeratingWithState:&v22 objects:v32 count:16];
    }

    while (v2);
  }
}

void sub_100100970( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

void sub_10010101C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100101328( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100101384(uint64_t a1)
{
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v1 = *(id *)(a1 + 32);
  id v2 = [v1 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v17;
    os_log_type_t v4 = VCPLogToOSLogType[7];
    do
    {
      for (unint64_t i = 0LL; i != v2; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v3) {
          objc_enumerationMutation(v1);
        }
        uint64_t v6 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        uint64_t v7 = objc_autoreleasePoolPush();
        signed __int16 v8 = (void *)objc_claimAutoreleasedReturnValue( +[PHAssetChangeRequest changeRequestForAsset:]( &OBJC_CLASS___PHAssetChangeRequest,  "changeRequestForAsset:",  v6));
        id v9 = [v8 setVideoEmbeddingVersion:70];
        uint64_t v11 = MediaAnalysisLogLevel(v9, v10);
        if ((int)v11 >= 7)
        {
          uint64_t v13 = VCPLogInstance(v11, v12);
          uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
          if (os_log_type_enabled(v14, v4))
          {
            uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v6 localIdentifier]);
            *(_DWORD *)__int128 buf = 138412546;
            double v21 = v15;
            __int16 v22 = 1024;
            int v23 = 70;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  v4,  "[VideoEmbedding|Backfill][%@] Publish video embedding version (v%d)",  buf,  0x12u);
          }
        }

        objc_autoreleasePoolPop(v7);
      }

      id v2 = [v1 countByEnumeratingWithState:&v16 objects:v24 count:16];
    }

    while (v2);
  }
}

void sub_100101540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100101AD8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_100101D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100101D4C(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCancelled];
  if ((v1 & 1) == 0)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_100101D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100101F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100102448( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_100102508(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("GDVUVisualUnderstandingService");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E6680 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_1000B87C8();
    sub_10010255C();
  }

void sub_10010255C()
{
  id v1 = 0LL;
  if (!qword_1001E6688)
  {
    __int128 v2 = off_1001BD778;
    uint64_t v3 = 0LL;
    qword_1001E6688 = _sl_dlopen(&v2, &v1);
  }

  uint64_t v0 = v1;
  if (!qword_1001E6688)
  {
    uint64_t v0 = (char *)abort_report_np("%s", v1);
    goto LABEL_7;
  }

  if (v1) {
LABEL_7:
  }
    free(v0);
}

void sub_100102608(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("GDVUEntityRecognitionClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E6690 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    __int128 v2 = (void *)sub_1000B87A4();
    +[PHAssetResourceManager vcp_reportDownloadBytes:taskID:](v2, v3, v4, v5);
  }

void sub_100102E8C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id obj)
{
}

void sub_100102EE8(uint64_t a1, uint64_t a2, double a3)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 7)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2048;
      double v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%@] Download progress: %.2f", (uint8_t *)&v9, 0x16u);
    }
  }

void sub_100102FC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if (v3)
  {
    if ((int)v5 >= 3)
    {
      uint64_t v7 = VCPLogInstance(v5, v6);
      uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
      os_log_type_t v9 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v8, v9))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v3 description]);
        int v17 = 138412546;
        uint64_t v18 = v10;
        __int16 v19 = 2112;
        __int16 v20 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[%@] Failed to download asset resource (%@)",  (uint8_t *)&v17,  0x16u);
      }
    }

    else {
      int v12 = -23802;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v12;
  }

  else
  {
    if ((int)v5 >= 7)
    {
      uint64_t v13 = VCPLogInstance(v5, v6);
      uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
      os_log_type_t v15 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = *(void *)(a1 + 32);
        int v17 = 138412290;
        uint64_t v18 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "[%@] Successfully downloaded asset resource",  (uint8_t *)&v17,  0xCu);
      }
    }

    objc_msgSend( *(id *)(a1 + 64),  "vcp_reportDownloadBytes:taskID:",  objc_msgSend(*(id *)(a1 + 40), "length"),  *(void *)(a1 + 72));
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 48));
}

id sub_100103174(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) appendData:a2];
}

void sub_10010374C(uint64_t a1)
{
  __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  objc_msgSend(v2, "addBreadcrumb:", @"Publishing batch size %lu", objc_msgSend(*(id *)(a1 + 32), "count"));

  id v3 = [*(id *)(a1 + 32) publish];
  if ((_DWORD)v3)
  {
    int v5 = (int)v3;
    uint64_t v6 = MediaAnalysisLogLevel(v3, v4);
    if ((int)v6 >= 3)
    {
      uint64_t v8 = VCPLogInstance(v6, v7);
      os_log_type_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
      os_log_type_t v10 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v14 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to publish batch: %@", buf, 0xCu);
      }
    }

    *(_DWORD *)(*(void *)(a1 + 40) + 24LL) = v5;
  }

  int v12 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  objc_msgSend( v12,  "addBreadcrumb:",  @"Finished publishing batch size %lu",  objc_msgSend(*(id *)(a1 + 32), "count"));
}

void sub_100104268(_Unwind_Exception *a1)
{
}

id sub_1001042BC(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

id sub_1001042C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

id sub_1001042CC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _processAssetsInBatch:*(void *)(a1 + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_DWORD)result;
  return result;
}

id sub_100104300(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _processAssetsInBatch:*(void *)(a1 + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_DWORD)result;
  return result;
}

id sub_100104334(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

id sub_10010433C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) _processAssetsInBatch:*(void *)(a1 + 40)];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = (_DWORD)result;
  return result;
}

CFStringRef VCPCoreAnalyticsFieldForFull(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  switch(a4)
  {
    case 0LL:
      if ((a1 & 1) != 0)
      {
        id result = @"UnifiedImageOnlyEvaluationStepSeconds";
      }

      else if (a2 == 1 && a3 == 8)
      {
        id result = @"UnifiedLivePhotoEvaluationStepSeconds";
      }

      else
      {
        if (a2 != 2) {
          goto LABEL_37;
        }
        id result = @"UnifiedMovieEvaluationStepSeconds";
      }

      break;
    case 1LL:
      if ((a1 & 1) != 0)
      {
        id result = @"UnifiedImageOnlyDownloadStepSeconds";
      }

      else if (a2 == 1 && a3 == 8)
      {
        id result = @"UnifiedLivePhotoDownloadStepSeconds";
      }

      else
      {
        if (a2 != 2) {
          goto LABEL_37;
        }
        id result = @"UnifiedMovieDownloadStepSeconds";
      }

      break;
    case 2LL:
      if ((a1 & 1) != 0)
      {
        id result = @"UnifiedImageOnlyPrepareStepSeconds";
      }

      else if (a2 == 1 && a3 == 8)
      {
        id result = @"UnifiedLivePhotoPrepareStepSeconds";
      }

      else
      {
        if (a2 != 2) {
          goto LABEL_37;
        }
        id result = @"UnifiedMoviePrepareStepSeconds";
      }

      break;
    case 3LL:
      if ((a1 & 1) != 0)
      {
        id result = @"UnifiedImageOnlyProcessStepSeconds";
      }

      else if (a2 == 1 && a3 == 8)
      {
        id result = @"UnifiedLivePhotoProcessStepSeconds";
      }

      else
      {
        if (a2 != 2) {
          goto LABEL_37;
        }
        id result = @"UnifiedMovieProcessStepSeconds";
      }

      break;
    case 4LL:
      if ((a1 & 1) != 0)
      {
        id result = @"UnifiedImageOnlyPublishStepSeconds";
      }

      else if (a2 == 1 && a3 == 8)
      {
        id result = @"UnifiedLivePhotoPublishStepSeconds";
      }

      else
      {
        if (a2 != 2) {
          goto LABEL_37;
        }
        id result = @"UnifiedMoviePublishStepSeconds";
      }

      break;
    default:
LABEL_37:
      uint64_t v11 = v4;
      uint64_t v12 = v5;
      if ((int)MediaAnalysisLogLevel(a1, a2) >= 4)
      {
        uint64_t v7 = VCPLogInstance();
        uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
        os_log_type_t v9 = VCPLogToOSLogType[4];
        if (os_log_type_enabled(v8, v9))
        {
          *(_WORD *)os_log_type_t v10 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "[VCPPhotosCoreAnalytics] Could not determine analysis step field name",  v10,  2u);
        }
      }

      id result = 0LL;
      break;
  }

  return result;
}

void VCPCoreAnalyticsQoSReportSpeed(void *a1, double a2)
{
  id v3 = a1;
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
    v11[0] = v3;
    v10[0] = VCPAnalyticsFieldKeyTaskName;
    v10[1] = VCPAnalyticsFieldKeyQoS;
    uint64_t v5 = qos_class_self();
    uint64_t v6 = VCPMAQoSDescription(v5);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v11[1] = v7;
    _DWORD v10[2] = VCPAnalyticsFieldKeyAvgSpeed;
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a2));
    v11[2] = v8;
    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v11,  v10,  3LL));
    [v4 sendEvent:VCPAnalyticsEventDasDutyCycleTaskKey withAnalytics:v9];
  }
}

void sub_1001047E8(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void VCPCoreAnalyticsReportEventFullAnalysisOverallProgress(void *a1)
{
  id v90 = a1;
  if ([v90 isSystemPhotoLibrary])
  {
    uint64_t v89 = @"/var/mobile/Media/PhotoData/Photos.sqlite";
  }

  else
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([v90 photoLibraryURL]);
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue([v1 path]);
    uint64_t v89 = (__CFString *)objc_claimAutoreleasedReturnValue([v2 stringByAppendingPathComponent:@"database/Photos.sqlite"]);
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 attributesOfItemAtPath:v89 error:0]);
  id v5 = [v4 fileSize];

  if ([v90 isCloudPhotoLibraryEnabled])
  {
    uint64_t v6 = @"iCPL";
LABEL_8:
    uint64_t v86 = (__CFString *)v6;
    goto LABEL_10;
  }

  if ([v90 isSystemPhotoLibrary])
  {
    uint64_t v6 = @"SPL";
    goto LABEL_8;
  }

  uint64_t v86 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"wellKnown_%ld",  [v90 wellKnownPhotoLibraryIdentifier]));
LABEL_10:
  uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"kindSubtype == %d",  2LL));
  unint64_t v7 = (unint64_t)objc_msgSend(v90, "vcp_assetCountWithInternalPredicate:forTaskID:");
  uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"kind == %d",  1LL));
  unint64_t v8 = (unint64_t)objc_msgSend(v90, "vcp_assetCountWithInternalPredicate:forTaskID:");
  uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"kind == %d && kindSubtype != %d",  0LL,  2LL));
  unint64_t v9 = (unint64_t)objc_msgSend(v90, "vcp_assetCountWithInternalPredicate:forTaskID:");
  os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:",  v90));
  uint64_t v11 = (char *)[v10 valueForKey:@"NumberOfTimesScheduledWithPendingAnalysisInLatestVersion"];
  id v12 = [v10 valueForKey:@"NumberOfTimesScheduledWithoutPendingAnalysisInLatestVersion"];
  id v13 = [v10 valueForKey:@"NumberOfTimesScheduledDatabaseCreation"];
  id v14 = [v10 valueForKey:@"TotalAnalyzingTimeDatabaseCreation"];
  uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v10 creationDate]);
  id v79 = v12;
  id v81 = v11;
  uint64_t v76 = (uint64_t)v14;
  id v77 = v13;
  os_log_type_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  int v17 = (void *)objc_claimAutoreleasedReturnValue([v15 components:16 fromDate:v88 toDate:v16 options:0]);

  os_log_type_t v69 = v17;
  uint64_t v84 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%ld",  [v17 day]));
  uint64_t v18 = VCPStartTimestampKeyForTask(1LL);
  __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  id v20 = [v10 valueForKey:v19];

  uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)(uint64_t)v20));
  double v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
  __int16 v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  int v23 = (void *)objc_claimAutoreleasedReturnValue([v21 components:16 fromDate:v87 toDate:v22 options:0]);

  id v68 = v23;
  uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"%d",  [v23 day]));
  uint64_t v91 = 0LL;
  [v10 getBlacklistSizeForThreshold:MediaAnalysisBlacklistThreshold size:&v91];
  unint64_t v75 = (unint64_t)v5;
  id v24 = +[PHAsset vcp_fullAnalysisTypesForAssetType:](&OBJC_CLASS___PHAsset, "vcp_fullAnalysisTypesForAssetType:", 1LL);
  __int128 v25 = [v10 getAssetCountMatchingAllFlags:1];
  id v26 = [v10 getAssetCountMatchingStatsFlags:1 andAnalysisTypes:v24];
  unint64_t v27 = (unint64_t)+[PHAsset vcp_fullAnalysisTypesForAssetType:]( &OBJC_CLASS___PHAsset,  "vcp_fullAnalysisTypesForAssetType:",  2LL);
  __int16 v28 = [v10 getAssetCountMatchingAllFlags:2];
  id v29 = [v10 getAssetCountMatchingStatsFlags:2 andAnalysisTypes:v27 & 0xFFFFFFFFFFEFFFFFLL];
  id v30 = +[PHAsset vcp_fullAnalysisTypesForAssetType:](&OBJC_CLASS___PHAsset, "vcp_fullAnalysisTypesForAssetType:", 4LL);
  unsigned int v31 = [v10 getAssetCountMatchingAllFlags:4];
  id v32 = [v10 getAssetCountMatchingStatsFlags:4 andAnalysisTypes:v30];
  if (v7) {
    unint64_t v33 = 100 * (uint64_t)v29 / v7;
  }
  else {
    unint64_t v33 = 100LL;
  }
  unint64_t v34 = 100LL;
  if (v33 >= 0x64) {
    unint64_t v35 = 100LL;
  }
  else {
    unint64_t v35 = v33;
  }
  if (v9) {
    unint64_t v34 = 100 * (uint64_t)v26 / v9;
  }
  unint64_t v36 = 100LL;
  if (v34 >= 0x64) {
    unint64_t v34 = 100LL;
  }
  unint64_t v70 = v34;
  if (v8) {
    unint64_t v36 = 100 * (uint64_t)v32 / v8;
  }
  unint64_t v37 = 100LL;
  if (v36 >= 0x64) {
    unint64_t v36 = 100LL;
  }
  unint64_t v71 = v36;
  if (v7) {
    unint64_t v37 = 100 * (v28 - (_BYTE *)v29) / v7;
  }
  else {
    float v38 = 100.0;
  }
  if (v9) {
    unint64_t v39 = 100 * (v25 - (_BYTE *)v26) / v9;
  }
  else {
    unint64_t v39 = 100LL;
  }
  else {
    float v40 = 100.0;
  }
  if (v8) {
    unint64_t v41 = 100 * (v31 - (_BYTE *)v32) / v8;
  }
  else {
    unint64_t v41 = 100LL;
  }
  else {
    float v42 = 100.0;
  }
  uint64_t v83 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  v92[0] = @"BlacklistedAssetsCount";
  uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedLong:](&OBJC_CLASS___NSNumber, "numberWithUnsignedLong:", v91));
  v93[0] = v66;
  v92[1] = @"CurrentAnalysisVersion";
  uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%d",  MediaAnalysisVersion));
  v93[1] = v67;
  v92[2] = @"DatabaseSize";
  uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLong:]( NSNumber,  "numberWithUnsignedLong:",  (unint64_t)[v10 sizeBytes] >> 20));
  v93[2] = v65;
  v93[3] = v85;
  v92[3] = @"DaysSinceCurrentAnalysisVersionEstablished";
  v92[4] = @"DaysSinceDatabaseEstablished";
  v93[4] = v84;
  v93[5] = v86;
  v92[5] = @"LibraryType";
  v92[6] = @"NumLivePhotosFullResource";
  uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v7));
  v93[6] = v64;
  v92[7] = @"NumMoviesFullResource";
  uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v8));
  v93[7] = v63;
  v92[8] = @"NumPhotosFullResource";
  uint64_t v43 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v9));
  uint64_t v44 = &v81[(void)v79];
  uint64_t v82 = (void *)v43;
  v93[8] = v43;
  v92[9] = @"NumScheduleSinceCurrentAnalysisVersionEstablished";
  uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v44));
  v93[9] = v80;
  v92[10] = @"NumScheduleSinceDatabaseEstablished";
  uint64_t v45 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v77));
  *(float *)&double v46 = (float)v35;
  uint64_t v78 = (void *)v45;
  v93[10] = v45;
  v92[11] = @"PercentageLivePhotoFullResource";
  uint64_t v47 = objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v46));
  *(float *)&double v48 = fmaxf(v38, 0.0);
  BOOL v62 = (void *)v47;
  v93[11] = v47;
  v92[12] = @"PercentageLivePhotoPartialResource";
  uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v48));
  *(float *)&double v50 = (float)v71;
  v93[12] = v49;
  v92[13] = @"PercentageMovieFullResource";
  id v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v50));
  *(float *)&double v52 = fmaxf(v42, 0.0);
  v93[13] = v51;
  v92[14] = @"PercentageMoviePartialResource";
  uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v52));
  *(float *)&double v54 = (float)v70;
  v93[14] = v53;
  v92[15] = @"PercentagePhotoFullResource";
  uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v54));
  *(float *)&double v56 = fmaxf(v40, 0.0);
  v93[15] = v55;
  v92[16] = @"PercentagePhotoPartialResource";
  os_log_type_t v57 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithFloat:](&OBJC_CLASS___NSNumber, "numberWithFloat:", v56));
  v93[16] = v57;
  v92[17] = @"PhotoLibraryScale";
  uint32_t v58 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v90, "vcp_libraryScaleShortDescription"));
  v93[17] = v58;
  v92[18] = @"PhotosLibraryDatabaseSize";
  uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  v75 >> 20));
  v93[18] = v59;
  v92[19] = @"TotalAnalyzingTimeInMinutes";
  __int16 v60 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", (double)v76 / 60.0));
  v93[19] = v60;
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v93,  v92,  20LL));
  [v83 sendEvent:@"com.apple.mediaanalysisd.fullanalysisoverallprogress" withAnalytics:v61];
}

void sub_1001051A4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, _Unwind_Exception *exception_object, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, void *a37)
{
  _Unwind_Resume(a1);
}

uint64_t VCPCoreAnalyticsReportEventBackgroundDailyReportForActivity(void *a1, uint64_t a2, void *a3)
{
  v192 = a1;
  id v185 = a3;
  uint64_t v4 = VCPSignPostLog(v185);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  os_signpost_id_t v6 = os_signpost_id_generate(v5);

  uint64_t v8 = VCPSignPostLog(v7);
  unint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  os_log_type_t v10 = v9;
  unint64_t v174 = v6 - 1;
  os_signpost_id_t spid = v6;
  if (v6 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v9))
  {
    *(_DWORD *)__int128 buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_INTERVAL_BEGIN,  v6,  "VCPAnalyticsEventBackgroundDailyReport",  "%d",  buf,  8u);
  }

  uint64_t v11 = v185;
  uint64_t v14 = MediaAnalysisLogLevel(v12, v13);
  if ((int)v14 >= 5)
  {
    uint64_t v16 = VCPLogInstance(v14, v15);
    int v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    os_log_type_t v18 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v17, v18))
    {
      *(_DWORD *)__int128 buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Starting daily report for activity %d", buf, 8u);
    }

    uint64_t v11 = v185;
  }

  v191 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:",  v11));
  id v19 = objc_msgSend(v11, "vcp_assetCountForTaskID:", a2);
  id v20 = objc_msgSend(v11, "vcp_processedAssetCountForTaskID:", a2);
  int v21 = [v191 queryAssetCountForTaskID:a2];
  if (!v192 || (v192[2]() & 1) == 0)
  {
    uint64_t v23 = VCPStartTimestampKeyForTask(a2);
    id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    uint64_t v182 = (uint64_t)v20;
    *(void *)os_log_type_t type = v19;
    id v25 = [v191 valueForKey:v24];

    id v26 = [v191 valueForKey:OSVersionUpdateTimestampKey];
    v186 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)(uint64_t)v25));
    v176 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)(uint64_t)v26));
    if (v25)
    {
      unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
      id v29 = (void *)objc_claimAutoreleasedReturnValue([v27 components:16 fromDate:v186 toDate:v28 options:0]);
      uint64_t v177 = (uint64_t)[v29 day];

      if (v26)
      {
LABEL_13:
        id v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
        unsigned int v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
        id v32 = (void *)objc_claimAutoreleasedReturnValue([v30 components:16 fromDate:v176 toDate:v31 options:0]);
        uint64_t v172 = (uint64_t)[v32 day];

LABEL_16:
        uint64_t v33 = VCPPercentCompleteTimestampKeyForTask(a2, VCPAnalysisComplete50Percentage, 1LL);
        unint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
        id v35 = [v191 valueForKey:v34];

        uint64_t v36 = VCPPercentCompleteTimestampKeyForTask(a2, VCPAnalysisComplete90Percentage, 1LL);
        unint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
        id v38 = [v191 valueForKey:v37];

        uint64_t v39 = VCPPercentCompleteTimestampKeyForTask(a2, VCPAnalysisComplete99Percentage, 1LL);
        float v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
        id v41 = [v191 valueForKey:v40];

        v179 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)(uint64_t)v35));
        v180 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)(uint64_t)v38));
        v181 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)(uint64_t)v41));
        float v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
        uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v42 components:16 fromDate:v186 toDate:v179 options:0]);
        id v44 = [v43 day];

        else {
          uint64_t v45 = (uint64_t)v44;
        }
        uint64_t v170 = v45;
        double v46 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
        uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v46 components:16 fromDate:v186 toDate:v180 options:0]);
        id v48 = [v47 day];

        else {
          uint64_t v49 = (uint64_t)v48;
        }
        uint64_t v168 = v49;
        double v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
        id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 components:16 fromDate:v186 toDate:v181 options:0]);
        id v52 = [v51 day];

        uint64_t v53 = 0LL;
        uint64_t v54 = 0LL;
        uint64_t v55 = 0LL;
        uint64_t v164 = v21;
        uint64_t v56 = v182 + v21;
        uint64_t v57 = (*(void *)type - v56) & ~((*(void *)type - v56) >> 63);
        uint64_t v166 = v56 & ~(v56 >> 63);
        double v58 = (float)*(uint64_t *)type;
        double v59 = (float)v182 * 100.0 / v58;
        double v60 = 100.0 - v59;
        double v61 = (float)v21 * 100.0 / v58;
        else {
          uint64_t v62 = (uint64_t)v52;
        }
        uint64_t v161 = v57;
        uint64_t v162 = v62;
        *(void *)__int128 buf = 0LL;
        double v207 = 0.0;
        double v208 = 0.0;
        id v198 = 0LL;
        while (1)
        {
          id v63 = (id)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  (double)qword_100197A90[v55]));
          if (v192)
          {
            if ((v192[2]() & 1) != 0) {
              break;
            }
          }

          uint64_t v64 = (uint64_t)[v191 querySchedulingHistoryRecords:&v198 forActivityID:a2 sinceDate:v63];
          uint64_t v22 = v64;
          if (v192)
          {
            uint64_t v64 = v192[2]();
            if ((v64 & 1) != 0) {
              break;
            }
          }

          if ((_DWORD)v22)
          {
            uint64_t v118 = MediaAnalysisLogLevel(v64, v65);
            if ((int)v118 >= 3)
            {
              uint64_t v120 = VCPLogInstance(v118, v119);
              v121 = (os_log_s *)objc_claimAutoreleasedReturnValue(v120);
              os_log_type_t v122 = VCPLogToOSLogType[3];
              if (os_log_type_enabled(v121, v122))
              {
                *(_DWORD *)v199 = 67109376;
                *(_DWORD *)v200 = v22;
                *(_WORD *)&v200[4] = 1024;
                *(_DWORD *)&v200[6] = a2;
                _os_log_impl( (void *)&_mh_execute_header,  v121,  v122,  "Trying querySchedulingHistoryRecords from DB returned err %d for activity %d",  v199,  0xEu);
              }
            }

            goto LABEL_94;
          }

          for (unint64_t i = 0; i < (unint64_t)[v198 count]; ++i)
          {
            uint64_t v67 = objc_autoreleasePoolPush();
            id v68 = (void *)objc_claimAutoreleasedReturnValue([v198 objectAtIndexedSubscript:i]);
            [v68 duration];
            if (v69 < 0.0) {
              double v69 = 0.0;
            }
            *(double *)&buf[8 * v55] = v69 + *(double *)&buf[8 * v55];
            if (v55) {
              BOOL v70 = 0;
            }
            else {
              BOOL v70 = [v68 exitStatus] == -18;
            }

            objc_autoreleasePoolPop(v67);
            v53 += v55 == 0;
            v54 += v70;
          }

          if (++v55 == 3)
          {
            v204[0] = @"ActivityID";
            v154 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  a2));
            v205[0] = v154;
            v204[1] = @"AttemptedCount";
            v160 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v166));
            v205[1] = v160;
            v204[2] = @"AttemptedCountInteger";
            v167 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v166));
            v205[2] = v167;
            v204[3] = @"AttemptedPercentage";
            v159 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v59 - v61));
            v205[3] = v159;
            v204[4] = @"CrashCount";
            v158 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v54));
            v205[4] = v158;
            v204[5] = @"CrashCountInteger";
            v157 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v54));
            v205[5] = v157;
            v204[6] = @"DaysSinceOSUpdate";
            v156 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v172));
            v205[6] = v156;
            v204[7] = @"DaysSinceVersionUpdate";
            v155 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v177));
            v205[7] = v155;
            v204[8] = @"DaysToComplete50";
            v178 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v170));
            v205[8] = v178;
            v204[9] = @"DaysToComplete90";
            v169 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v168));
            v205[9] = v169;
            v204[10] = @"DaysToComplete99";
            v163 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v162));
            v205[10] = v163;
            v204[11] = @"FailedCount";
            v153 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v164));
            v205[11] = v153;
            v204[12] = @"FailedCountInteger";
            v165 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v164));
            v205[12] = v165;
            v204[13] = @"FailedPercentage";
            v173 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v61));
            v205[13] = v173;
            v204[14] = @"InvokedTimes";
            v152 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v53));
            v205[14] = v152;
            v204[15] = @"InvokedTimesInteger";
            v151 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v53));
            v205[15] = v151;
            v204[16] = @"ProcessedCount";
            v171 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v182));
            v205[16] = v171;
            v204[17] = @"ProcessedCountInteger";
            v183 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v182));
            v205[17] = v183;
            v204[18] = @"ProcessedPercentage";
            v150 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v59));
            v205[18] = v150;
            v204[19] = @"RunTime1DayInteger";
            double v71 = *(double *)buf;
            v149 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", *(double *)buf));
            v205[19] = v149;
            v204[20] = @"RunTime1WeekInteger";
            v148 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v207));
            v205[20] = v148;
            v204[21] = @"RunTime1MonthInteger";
            uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v208));
            v205[21] = v72;
            v205[22] = @"?";
            v204[22] = @"SampleAssetSubtype";
            v204[23] = @"SampleAssetType";
            v204[24] = @"SampleCodec";
            v204[25] = @"SampleHeight";
            v205[23] = &off_1001C8210;
            v205[24] = @"?";
            v205[25] = &off_1001C8210;
            v205[26] = @"?";
            v204[26] = @"SampleUTType";
            v204[27] = @"SampleWidth";
            v205[27] = &off_1001C8210;
            v204[28] = @"TotalCount";
            uint64_t v73 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  *(void *)type));
            v205[28] = v73;
            v204[29] = @"TotalCountInteger";
            uint64_t v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  *(void *)type));
            v205[29] = v74;
            v204[30] = @"TotalRunTime";
            unint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v71));
            v205[30] = v75;
            v204[31] = @"TotalRunTimeInteger";
            uint64_t v76 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v71));
            v205[31] = v76;
            v204[32] = @"UnprocessedCount";
            id v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v161));
            v205[32] = v77;
            v204[33] = @"UnprocessedCountInteger";
            uint64_t v78 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v161));
            v205[33] = v78;
            v204[34] = @"UnprocessedPercentage";
            id v79 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v60));
            v205[34] = v79;
            uint64_t v80 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v205,  v204,  35LL));
            id v63 = [v80 mutableCopy];

            id v197 = 0LL;
            id v81 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  -86400.0));
            unsigned int v82 = [v191 fetchProcessingErrorCodeCounts:&v197 withTaskID:a2 sinceDate:v81 additionalPredicates:0];

            if (v82)
            {
              uint64_t v85 = MediaAnalysisLogLevel(v83, v84);
              if ((int)v85 >= 3)
              {
                uint64_t v87 = VCPLogInstance(v85, v86);
                uint64_t v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
                os_log_type_t v89 = VCPLogToOSLogType[3];
                if (os_log_type_enabled(v88, v89))
                {
                  *(_DWORD *)v199 = 67109376;
                  *(_DWORD *)v200 = v82;
                  *(_WORD *)&v200[4] = 1024;
                  *(_DWORD *)&v200[6] = a2;
                  _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "Trying fetchProcessingErrorCodeCounts from DB returned err %d for activity %d",  v199,  0xEu);
                }
              }
            }

            v184 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
            __int128 v195 = 0u;
            __int128 v196 = 0u;
            __int128 v193 = 0u;
            __int128 v194 = 0u;
            id v90 = v197;
            id v91 = [v90 countByEnumeratingWithState:&v193 objects:v203 count:16];
            if (v91)
            {
              uint64_t v92 = *(void *)v194;
              os_log_type_t typea = VCPLogToOSLogType[3];
              do
              {
                id v93 = 0LL;
                do
                {
                  if (*(void *)v194 != v92) {
                    objc_enumerationMutation(v90);
                  }
                  id v94 = *(void **)(*((void *)&v193 + 1) + 8LL * (void)v93);
                  id v95 = objc_autoreleasePoolPush();
                  if ([v94 intValue] && objc_msgSend(v94, "intValue") != 98)
                  {
                    uint64_t v97 = objc_alloc(&OBJC_CLASS___MADErrorDescriptor);
                    uint64_t v99 = v97;
                    if (v97)
                    {
                      __int16 v100 = v97;
                      signed int v101 = [v94 intValue];
                      os_log_type_t v102 = (void *)objc_claimAutoreleasedReturnValue([v197 objectForKey:v94]);
                      id v103 = -[MADErrorDescriptor initWithErrorCode:count:errorLine:]( v100,  "initWithErrorCode:count:errorLine:",  v101,  (int)[v102 intValue],  0);
                      [v184 addObject:v103];

                      int v96 = 0;
                      goto LABEL_59;
                    }

                    uint64_t v104 = MediaAnalysisLogLevel(0LL, v98);
                    if ((int)v104 < 3)
                    {
                      int v96 = 20;
                    }

                    else
                    {
                      uint64_t v106 = VCPLogInstance(v104, v105);
                      os_log_type_t v102 = (void *)objc_claimAutoreleasedReturnValue(v106);
                      if (os_log_type_enabled((os_log_t)v102, typea))
                      {
                        *(_DWORD *)v199 = 67109120;
                        *(_DWORD *)v200 = a2;
                        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v102,  typea,  "Failed to alloc MADErrorDescriptor during fail retrieval for activity %d",  v199,  8u);
                      }

                      int v96 = 20;
LABEL_59:
                    }

                    goto LABEL_61;
                  }

                  int v96 = 21;
LABEL_61:
                  objc_autoreleasePoolPop(v95);
                  if (v96 != 21 && v96) {
                    goto LABEL_67;
                  }
                  id v93 = (char *)v93 + 1;
                }

                while (v91 != v93);
                id v107 = [v90 countByEnumeratingWithState:&v193 objects:v203 count:16];
                id v91 = v107;
              }

              while (v107);
            }

void sub_100106724( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, void *a34, uint64_t a35, uint64_t a36, void *a37, void *a38, void *a39, uint64_t a40, void *a41, void *a42, _Unwind_Exception *exception_object, uint64_t a44, void *a45, void *a46)
{
  _Unwind_Resume(a1);
}

int64_t sub_100106BB4(id a1, MADErrorDescriptor *a2, MADErrorDescriptor *a3)
{
  return -[MADErrorDescriptor compareByCount:](a3, "compareByCount:", a2);
}

uint64_t VCPCoreAnalyticsReportEventBackgroundDailyReport(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  uint64_t v5 = 0LL;
  do
  {
    os_signpost_id_t v6 = objc_autoreleasePoolPush();
    uint64_t v7 = VCPCoreAnalyticsReportEventBackgroundDailyReportForActivity(v3, qword_100197AA8[v5], v4);
    objc_autoreleasePoolPop(v6);
    if ((_DWORD)v7) {
      break;
    }
  }

  while (v5++ != 6);

  return v7;
}

void sub_100106C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void VCPCoreAnalyticsReportEventDasScheduling(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = VCPTaskIDDescription(a1);
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v6);
  uint64_t v7 = VCPVersionKeyForTask(a1);
  id v35 = (void *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v8 = VCPStartTimestampKeyForTask(a1);
  unint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (v35 && v34)
  {
    id v30 = (void *)objc_claimAutoreleasedReturnValue(+[PHPhotoLibrary vcp_defaultPhotoLibrary](&OBJC_CLASS___PHPhotoLibrary, "vcp_defaultPhotoLibrary"));
    unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:"));
    id v9 = [v27 valueForKey:v35];
    unsigned int v31 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)(uint64_t)[v27 valueForKey:v34]));
    os_log_type_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    id v29 = (void *)objc_claimAutoreleasedReturnValue([v10 components:16 fromDate:v31 toDate:v11 options:0]);

    uint64_t v12 = objc_alloc_init(&OBJC_CLASS___VCPSystemMonitor);
    -[VCPSystemMonitor enable](v12, "enable");
    id v32 = (void *)objc_claimAutoreleasedReturnValue(-[VCPSystemMonitor checkFullyCharged](v12, "checkFullyCharged"));
    __int16 v28 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
    v37[0] = v33;
    v36[0] = @"Activity";
    v36[1] = @"Duration";
    id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", a3));
    v37[1] = v25;
    v36[2] = @"ExitStatus";
    id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", a2));
    v37[2] = v26;
    v36[3] = @"NumberOfAssets";
    id v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  objc_msgSend(v30, "vcp_assetCountForTaskID:", a1)));
    void v37[3] = v24;
    void v36[4] = @"PluggedIn";
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[VCPSystemMonitor checkPluggedIn](v12, "checkPluggedIn")));
    v37[4] = v23;
    v36[5] = @"FullyCharged";
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:@"FullyCharged"]);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v13 BOOLValue]));
    v37[5] = v14;
    v36[6] = @"IsCharging";
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v32 objectForKeyedSubscript:@"IsCharging"]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  [v15 BOOLValue]));
    id v17 = v9;
    v37[6] = v16;
    v36[7] = @"ScreenLocked";
    os_log_type_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[VCPSystemMonitor checkScreenLocked](v12, "checkScreenLocked")));
    v37[7] = v18;
    v36[8] = @"ThermalPressure";
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedLongLong:",  -[VCPSystemMonitor checkThermalPressure](v12, "checkThermalPressure")));
    v37[8] = v19;
    v36[9] = @"ActivityAnalysisVersion";
    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", v17));
    v37[9] = v20;
    v36[10] = @"ActivityAnalysisVersionDaysSinceEstablished";
    int v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v29 day]));
    v37[10] = v21;
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v37,  v36,  11LL));
    [v28 sendEvent:@"com.apple.mediaanalysisd.das.scheduling" withAnalytics:v22];
  }
}

void sub_1001070D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20, void *a21, void *a22)
{
  _Unwind_Resume(a1);
}

id VCPCoreAnalyticsDiscretizeValueToIntervalStart(NSNumber *a1, NSArray *a2)
{
  id v3 = a1;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[NSArray reverseObjectEnumerator](a2, "reverseObjectEnumerator", 0LL));
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v12;
    while (2)
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        int v9 = -[NSNumber intValue](v3, "intValue");
        if (v9 >= (int)[v8 intValue])
        {
          id v5 = v8;
          goto LABEL_11;
        }
      }

      id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

void sub_100107374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void VCPCoreAnalyticsReportEventAnalysisProgress(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = a1;
  if (qword_1001E66B8 != -1) {
    dispatch_once(&qword_1001E66B8, &stru_1001BDAE8);
  }
  os_log_type_t v10 = (NSNumber *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  id v11 = VCPCoreAnalyticsDiscretizeValueToIntervalStart(v10, (NSArray *)qword_1001E6698);
  uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);

  __int128 v13 = &off_1001C8648;
  if (v12) {
    __int128 v14 = (_UNKNOWN **)v12;
  }
  else {
    __int128 v14 = &off_1001C8648;
  }
  uint64_t v15 = (NSNumber *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a3));
  id v16 = VCPCoreAnalyticsDiscretizeValueToIntervalStart(v15, (NSArray *)qword_1001E66A0);
  uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);

  if (v17) {
    __int128 v13 = (_UNKNOWN **)v17;
  }
  os_log_type_t v18 = (NSNumber *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a4));
  id v19 = VCPCoreAnalyticsDiscretizeValueToIntervalStart(v18, (NSArray *)qword_1001E66A8);
  id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

  if (v20)
  {
    int v21 = (NSNumber *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a5));
    id v22 = VCPCoreAnalyticsDiscretizeValueToIntervalStart(v21, (NSArray *)qword_1001E66B0);
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);

    if (v23)
    {
      id v24 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
      v30[0] = v9;
      v29[0] = @"AnalysisType";
      v29[1] = @"DaysSinceStart";
      id v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
      v30[1] = v25;
      v30[2] = v14;
      v29[2] = @"DaysSinceStartDiscrete";
      v29[3] = @"DaysToComplete";
      id v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a3));
      v30[3] = v26;
      v30[4] = v13;
      v29[4] = @"DaysToCompleteDiscrete";
      void v29[5] = @"ProgressPercentage";
      unint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", a4));
      v30[5] = v27;
      v30[6] = v20;
      v29[6] = @"ProgressPercentageDiscrete";
      v29[7] = @"AllowedAssetsCountDiscrete";
      void v30[7] = v23;
      __int16 v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v30,  v29,  8LL));
      [v24 sendEvent:@"com.apple.mediaanalysisd.analysisprogress" withAnalytics:v28];
    }
  }
}

void sub_100107630(_Unwind_Exception *a1)
{
  id v11 = v4;

  _Unwind_Resume(a1);
}

void sub_1001076E8(id a1)
{
  uint64_t v1 = (void *)qword_1001E6698;
  qword_1001E6698 = (uint64_t)&off_1001C9270;

  __int128 v2 = (void *)qword_1001E66A0;
  qword_1001E66A0 = (uint64_t)&off_1001C9288;

  id v3 = (void *)qword_1001E66A8;
  qword_1001E66A8 = (uint64_t)&off_1001C92A0;

  id v4 = (void *)qword_1001E66B0;
  qword_1001E66B0 = (uint64_t)&off_1001C92B8;
}

void VCPCoreAnalyticsReportEventMomentsDeferredProcessing( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, void *a8, double a9)
{
  id v17 = a5;
  id v18 = a6;
  id v19 = a8;
  id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  [v20 timeIntervalSince1970];
  double v22 = v21;

  if (v22 < a9)
  {
    uint64_t v25 = MediaAnalysisLogLevel(v23, v24);
    if ((int)v25 >= 3)
    {
      uint64_t v27 = VCPLogInstance(v25, v26);
      __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
      os_log_type_t v29 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v28, v29))
      {
        *(_DWORD *)__int128 buf = 134218240;
        double v78 = a9;
        __int16 v79 = 2048;
        double v80 = v22;
        id v30 = "[Moments] Processing start time (%f) > end time (%f), skipping CoreAnalytics report";
LABEL_18:
        uint64_t v49 = v28;
        os_log_type_t v50 = v29;
        uint32_t v51 = 22;
LABEL_23:
        _os_log_impl((void *)&_mh_execute_header, v49, v50, v30, buf, v51);
        goto LABEL_24;
      }

      goto LABEL_24;
    }

    goto LABEL_25;
  }

  if (!v17)
  {
    uint64_t v38 = MediaAnalysisLogLevel(v23, v24);
    uint64_t v40 = VCPLogInstance(v38, v39);
    __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
    os_log_type_t v41 = VCPLogToOSLogType[3];
    if (!os_log_type_enabled(v28, v41)) {
      goto LABEL_24;
    }
    *(_WORD *)__int128 buf = 0;
    id v30 = "[Moments] No request date, skipping CoreAnalytics report";
    goto LABEL_22;
  }

  id v31 = [v17 timeIntervalSince1970];
  double v34 = v33;
  if (v33 <= a9)
  {
    if (v18)
    {
      id v42 = [v18 timeIntervalSince1970];
      double v45 = v44;
      if (v44 <= a9)
      {
        __int16 v28 = objc_alloc_init(&OBJC_CLASS___VCPSystemMonitor);
        -[os_log_s enable](v28, "enable");
        id v55 = -[os_log_s checkPluggedIn](v28, "checkPluggedIn");
        if ((unint64_t)v55 <= 1)
        {
          id v73 = v55;
          uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
          v75[0] = @"NumRequestedAssets";
          uint64_t v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a1));
          v76[0] = v72;
          v75[1] = @"NumActualProcessedAssets";
          double v71 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
          v76[1] = v71;
          v75[2] = @"NumAlreadyProcessedAssets";
          BOOL v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a3));
          v76[2] = v70;
          v75[3] = @"NumPendingAssets";
          double v69 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
          v76[3] = v69;
          void v75[4] = @"AnalysisDuration";
          id v68 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  (uint64_t)(v22 - a9)));
          void v76[4] = v68;
          v75[5] = @"ProcessingDeferredDuration";
          uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  (uint64_t)(a9 - v34)));
          v76[5] = v62;
          v75[6] = @"NumDaysSinceEarliestAssetModificationDate";
          id v63 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  (uint64_t)((a9 - v45) / 86400.0)));
          v76[6] = v63;
          v75[7] = @"AnalysisType";
          uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  a7));
          v76[7] = v64;
          v75[8] = @"IsOnBattery";
          uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", v73 != (id)1));
          v76[8] = v65;
          v75[9] = @"LibraryScale";
          uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  objc_msgSend(v19, "vcp_libraryScale")));
          v76[9] = v66;
          uint64_t v67 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v76,  v75,  10LL));
          -[os_log_s sendEvent:withAnalytics:]( v74,  "sendEvent:withAnalytics:",  @"com.apple.mediaanalysisd.MomentsDeferredProcessing",  v67);
        }

        else
        {
          uint64_t v57 = MediaAnalysisLogLevel(v55, v56);
          uint64_t v59 = VCPLogInstance(v57, v58);
          double v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
          os_log_type_t v61 = VCPLogToOSLogType[3];
          uint64_t v74 = v60;
          if (os_log_type_enabled(v60, v61))
          {
            *(_WORD *)__int128 buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "[Moments] Failed to query if device is on battery, skipping CoreAnalytics report",  buf,  2u);
          }
        }

        goto LABEL_24;
      }

      uint64_t v46 = MediaAnalysisLogLevel(v42, v43);
      if ((int)v46 >= 3)
      {
        uint64_t v48 = VCPLogInstance(v46, v47);
        __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
        os_log_type_t v29 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v28, v29))
        {
          *(_DWORD *)__int128 buf = 134218240;
          double v78 = v45;
          __int16 v79 = 2048;
          double v80 = a9;
          id v30 = "[Moments] Earliest asset modification time (%f) > processing start time (%f), skipping CoreAnalytics report";
          goto LABEL_18;
        }

        goto LABEL_24;
      }

      goto LABEL_25;
    }

    uint64_t v52 = MediaAnalysisLogLevel(v31, v32);
    uint64_t v54 = VCPLogInstance(v52, v53);
    __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v54);
    os_log_type_t v41 = VCPLogToOSLogType[3];
    if (!os_log_type_enabled(v28, v41)) {
      goto LABEL_24;
    }
    *(_WORD *)__int128 buf = 0;
    id v30 = "[Moments] No earliest asset modification date, skipping CoreAnalytics report";
LABEL_22:
    uint64_t v49 = v28;
    os_log_type_t v50 = v41;
    uint32_t v51 = 2;
    goto LABEL_23;
  }

  uint64_t v35 = MediaAnalysisLogLevel(v31, v32);
  if ((int)v35 >= 3)
  {
    uint64_t v37 = VCPLogInstance(v35, v36);
    __int16 v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    os_log_type_t v29 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v28, v29))
    {
      *(_DWORD *)__int128 buf = 134218240;
      double v78 = v34;
      __int16 v79 = 2048;
      double v80 = a9;
      id v30 = "[Moments] Request time (%f) > processing start time (%f), skipping CoreAnalytics report";
      goto LABEL_18;
    }

void sub_100107CF8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, uint64_t a16)
{
  _Unwind_Resume(a1);
}

CFStringRef VCPCoreAnalyticsSessionEventName(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 - 1;
  id result = @"com.apple.mediaanalysisd.SceneAnalysisRunSession";
  switch(v3)
  {
    case 0LL:
      id result = @"com.apple.mediaanalysisd.FullAnalysisRunSession";
      break;
    case 1LL:
      return result;
    case 2LL:
      id result = @"com.apple.mediaanalysisd.FaceAnalysisRunSession";
      break;
    case 3LL:
    case 4LL:
    case 5LL:
    case 6LL:
    case 7LL:
    case 8LL:
    case 10LL:
      goto LABEL_5;
    case 9LL:
      id result = @"com.apple.mediaanalysisd.OCRAnalysisRunSession";
      break;
    case 11LL:
      id result = @"com.apple.mediaanalysisd.VisualSearchAnalysisRunSession";
      break;
    default:
      if (a1 == 16)
      {
        id result = @"com.apple.mediaanalysisd.PECAnalysisRunSession";
      }

      else
      {
LABEL_5:
        if ((int)MediaAnalysisLogLevel(@"com.apple.mediaanalysisd.SceneAnalysisRunSession", a2) >= 3)
        {
          uint64_t v5 = VCPLogInstance();
          uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
          os_log_type_t v7 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v6, v7))
          {
            uint64_t v8 = VCPTaskIDDescription(a1);
            id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
            int v10 = 138412290;
            id v11 = v9;
            _os_log_impl((void *)&_mh_execute_header, v6, v7, "[CAM] No session event for %@", (uint8_t *)&v10, 0xCu);
          }
        }

        id result = 0LL;
      }

      break;
  }

  return result;
}

void sub_100107F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id VCPCoreAnalyticsSessionAnalyticData()
{
  id v33 = (id)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  id v1 = [&off_1001C92D0 countByEnumeratingWithState:&v34 objects:v40 count:16];
  if (v1)
  {
    uint64_t v3 = *(void *)v35;
    os_log_type_t v4 = VCPLogToOSLogType[7];
    *(void *)&__int128 v2 = 138412290LL;
    __int128 v32 = v2;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v35 != v3) {
          objc_enumerationMutation(&off_1001C92D0);
        }
        uint64_t v6 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)v5);
        os_log_type_t v7 = objc_autoreleasePoolPush();
        uint64_t v8 = VCPTaskIDDescription([v6 unsignedIntValue]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        uint64_t v11 = MediaAnalysisLogLevel(v9, v10);
        if ((int)v11 >= 7)
        {
          uint64_t v13 = VCPLogInstance(v11, v12);
          __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
          if (os_log_type_enabled(v14, v4))
          {
            *(_DWORD *)__int128 buf = v32;
            uint64_t v39 = v9;
            _os_log_impl((void *)&_mh_execute_header, v14, v4, "[CAM] Fetching session analytic data for %@", buf, 0xCu);
          }
        }

        unsigned int v15 = objc_msgSend(v6, "unsignedIntValue", v32);
        id v17 = VCPCoreAnalyticsSessionEventName(v15, v16);
        id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v0 fetchSessionEvent:v18]);
        if (v19)
        {
          id v20 = [v33 setObject:v19 forKeyedSubscript:v9];
          uint64_t v22 = MediaAnalysisLogLevel(v20, v21);
          if ((int)v22 >= 7)
          {
            uint64_t v24 = VCPLogInstance(v22, v23);
            uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
            if (os_log_type_enabled(v25, v4))
            {
              *(_DWORD *)__int128 buf = v32;
              uint64_t v39 = v19;
              _os_log_impl((void *)&_mh_execute_header, v25, v4, "[CAM] Fetched session analytic data - %@", buf, 0xCu);
            }
          }
        }

        objc_autoreleasePoolPop(v7);
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v1 != v5);
      id v1 = [&off_1001C92D0 countByEnumeratingWithState:&v34 objects:v40 count:16];
    }

    while (v1);
  }

  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[VCPLogManager dateFormatterDateTime](&OBJC_CLASS___VCPLogManager, "dateFormatterDateTime"));
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  __int16 v28 = (void *)objc_claimAutoreleasedReturnValue([v26 stringFromDate:v27]);
  [v33 setObject:v28 forKeyedSubscript:@"timestamp"];

  os_log_type_t v29 = +[NSNumber numberWithInt:](&OBJC_CLASS___NSNumber, "numberWithInt:", getpid());
  id v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
  [v33 setObject:v30 forKeyedSubscript:@"PID"];

  return v33;
}

void sub_100108260( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void VCPCoreAnalyticsSessionLogDatabaseUpdate(uint64_t a1, void *a2, unsigned int a3, double a4)
{
  id v7 = a2;
  uint32_t v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[CAM][TaskID-%d]",  a1));
  id v8 = VCPCoreAnalyticsSessionAnalyticData();
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  uint64_t v10 = objc_claimAutoreleasedReturnValue(+[PHPhotoLibrary vcp_defaultPhotoLibrary](&OBJC_CLASS___PHPhotoLibrary, "vcp_defaultPhotoLibrary"));
  unsigned int v50 = a3;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:",  v10));

  id v53 = 0LL;
  [v11 querySchedulingHistoryRecords:&v53 forActivityID:a1 sinceDate:v7];
  id v12 = v53;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 firstObject]);
  LOBYTE(v1sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v13 == 0LL;

  if ((v10 & 1) == 0)
  {
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v12 firstObject]);
    id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 sessionLog]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 dataUsingEncoding:4]);

    if (!v18)
    {
LABEL_11:

      goto LABEL_12;
    }

    id v52 = 0LL;
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  v18,  0LL,  &v52));
    id v20 = v52;
    uint64_t v49 = v20;
    if (v19)
    {
      uint64_t v22 = MediaAnalysisLogLevel(v20, v21);
      if ((int)v22 >= 7)
      {
        uint64_t v24 = VCPLogInstance(v22, v23);
        uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        os_log_type_t v26 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v12 firstObject]);
          uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v47 sessionLog]);
          *(_DWORD *)__int128 buf = 138412802;
          id v55 = v51;
          __int16 v56 = 2112;
          uint64_t v57 = v27;
          __int16 v58 = 2112;
          uint64_t v59 = v9;
          _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "%@ Merging existing session log %@ with new session log %@",  buf,  0x20u);
        }
      }

      id v28 = [v19 mutableCopy];
      [v28 addEntriesFromDictionary:v9];
      os_log_type_t v29 = v9;
      id v9 = (os_log_s *)v28;
    }

    else
    {
      uint64_t v42 = MediaAnalysisLogLevel(v20, v21);
      uint64_t v44 = VCPLogInstance(v42, v43);
      os_log_type_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
      os_log_type_t v45 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v29, v45))
      {
        uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v12 firstObject]);
        uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v48 sessionLog]);
        *(_DWORD *)__int128 buf = 138412546;
        id v55 = v51;
        __int16 v56 = 2112;
        uint64_t v57 = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  v45,  "%@ Failed to parse existing session log %@; ignoring",
          buf,
          0x16u);
      }
    }

LABEL_10:
    goto LABEL_11;
  }

  uint64_t v38 = MediaAnalysisLogLevel(v14, v15);
  if ((int)v38 >= 7)
  {
    uint64_t v40 = VCPLogInstance(v38, v39);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(v40);
    os_log_type_t v41 = VCPLogToOSLogType[7];
    if (os_log_type_enabled((os_log_t)v18, v41))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v55 = v51;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v18, v41, "%@ No existing session log", buf, 0xCu);
    }

    goto LABEL_11;
  }

void sub_10010873C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void VCPCoreAnalyticsSendAllAnalysisSession()
{
  uint64_t v0 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v1 = [&off_1001C92E8 countByEnumeratingWithState:&v22 objects:v30 count:16];
  if (v1)
  {
    uint64_t v3 = *(void *)v23;
    os_log_type_t v4 = VCPLogToOSLogType[7];
    *(void *)&__int128 v2 = 138412546LL;
    __int128 v21 = v2;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v23 != v3) {
          objc_enumerationMutation(&off_1001C92E8);
        }
        uint64_t v6 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)v5);
        id v7 = objc_autoreleasePoolPush();
        unsigned int v8 = [v6 unsignedIntValue];
        uint64_t v10 = VCPCoreAnalyticsSessionEventName(v8, v9);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        uint64_t v12 = objc_claimAutoreleasedReturnValue([v0 fetchSessionEvent:v11]);
        uint64_t v14 = (void *)v12;
        if (v12)
        {
          uint64_t v15 = MediaAnalysisLogLevel(v12, v13);
          if ((int)v15 >= 7)
          {
            uint64_t v17 = VCPLogInstance(v15, v16);
            id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
            if (os_log_type_enabled(v18, v4))
            {
              uint64_t v19 = VCPTaskIDDescription([v6 unsignedIntValue]);
              id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
              *(_DWORD *)__int128 buf = v21;
              uint64_t v27 = v20;
              __int16 v28 = 2112;
              os_log_type_t v29 = v11;
              _os_log_impl((void *)&_mh_execute_header, v18, v4, "[CAM] Sending session event for %@ - %@", buf, 0x16u);
            }
          }

          objc_msgSend(v0, "sendSessionEvent:", v11, v21);
        }

        objc_autoreleasePoolPop(v7);
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v1 != v5);
      id v1 = [&off_1001C92E8 countByEnumeratingWithState:&v22 objects:v30 count:16];
    }

    while (v1);
  }
}

void sub_100108A28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100108B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100108C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100108DBC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPRequestSuggestedPersonsTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100109084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001090F8(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCanceled];
  if ((v1 & 1) == 0)
  {
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_100109140(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010929C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010934C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001094B0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPRequestUpdateKeyFacesOfPersonsTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100109748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001097B0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCanceled];
  if ((v1 & 1) == 0)
  {
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_1001097F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010992C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001099D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100109B38( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPRequestFaceCandidatesforKeyFaceForPersonTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100109D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100109EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100109F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010A0D4( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPRequestResetPersonsTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10010A53C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010A6B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010A73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010A89C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPRequestResetFaceClassificationModelTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10010AAE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010AC38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010ACC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010AE20( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPResetPetClassificationModelTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10010B064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010B1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010B288(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010B3EC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPRequestSuggestedMePersonIdentifierTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10010B634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010B7A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010B840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010B9A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPRequestPersonPromoterStatusTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10010BC38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010BDA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010BE30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010BF90( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPRequestClusterCacheValidationTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10010C21C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10010C284(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) isCanceled];
  if ((v1 & 1) == 0)
  {
    __int128 v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v2 pet];
  }

  return v1;
}

void sub_10010C2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010C3D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010C458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010C5B8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPRequestResetFaceClusteringStateTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10010CA1C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10010CAFC(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v2 = 0LL;
    while (1)
    {
      uint64_t v3 = objc_autoreleasePoolPush();
      id v4 = [*(id *)(a1 + 40) isCanceled];
      if ((_DWORD)v4) {
        break;
      }
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v2]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[PHFaceChangeRequest changeRequestForFace:]( &OBJC_CLASS___PHFaceChangeRequest,  "changeRequestForFace:",  v6));

      [v7 setVuObservationID:0];
      objc_autoreleasePoolPop(v3);
    }

    uint64_t v8 = MediaAnalysisLogLevel(v4, v5);
    if ((int)v8 >= 6)
    {
      uint64_t v10 = VCPLogInstance(v8, v9);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      os_log_type_t v12 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v12))
      {
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "[ResetFaceClusteringState] Cancelled", v13, 2u);
      }
    }

    objc_autoreleasePoolPop(v3);
  }

void sub_10010CC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010CC38(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 path]);
    unsigned int v6 = [v4 fileExistsAtPath:v5];

    if (v6)
    {
      uint64_t v9 = MediaAnalysisLogLevel(v7, v8);
      if ((int)v9 >= 6)
      {
        uint64_t v11 = VCPLogInstance(v9, v10);
        os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        os_log_type_t v13 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v12, v13))
        {
          *(_DWORD *)__int128 buf = 138412290;
          id v26 = v3;
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "[ResetFaceClusteringState] Dropping %@", buf, 0xCu);
        }
      }

      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
      id v24 = 0LL;
      unsigned __int8 v15 = [v14 removeItemAtURL:v3 error:&v24];
      id v16 = v24;

      if ((v15 & 1) == 0)
      {
        uint64_t v19 = MediaAnalysisLogLevel(v17, v18);
        if ((int)v19 >= 3)
        {
          uint64_t v21 = VCPLogInstance(v19, v20);
          __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
          os_log_type_t v23 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v22, v23))
          {
            *(_DWORD *)__int128 buf = 138412546;
            id v26 = v3;
            __int16 v27 = 2112;
            id v28 = v16;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "[ResetFaceClusteringState] Failed to remove %@ - %@",  buf,  0x16u);
          }
        }

        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = -18;
      }
    }
  }
}

void sub_10010CE14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010CF58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010CFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010D140( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPRequestReclusterFacesTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10010D3C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010D424(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_10010D460( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_10010D474(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_10010D594(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010D63C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010D7A0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, objc_super a10)
{
  a10.super_class = (Class)&OBJC_CLASS___VCPRequestRebuildPersonsTask;
  -[_Unwind_Exception dealloc](&a10, "dealloc");
  _Unwind_Resume(a1);
}

void sub_10010DA54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10010DAC8(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_10010DB04( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

id sub_10010DB18(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_10010DC28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

LABEL_107:
                      if ((_DWORD)v94 == -108 || (_DWORD)v94 == -36 || (_DWORD)v94 == -23) {
                        goto LABEL_85;
                      }
                      goto LABEL_78;
                    }

                    uint64_t v67 = v62;
                    if ((_DWORD)v62 == -23) {
                      goto LABEL_71;
                    }
                  }

                  __int128 v25 = 0;
                  uint64_t v67 = v19;
                  goto LABEL_71;
                }

                uint64_t v87 = MediaAnalysisLogLevel(v58, v59);
                if ((int)v87 >= 5)
                {
                  os_log_type_t v89 = VCPLogInstance(v87, v88);
                  id v90 = (os_log_s *)objc_claimAutoreleasedReturnValue(v89);
                  if (os_log_type_enabled(v90, v128))
                  {
                    v123 = objc_msgSend(v56, "vcp_version");
                    id v91 = -[os_log_s vcp_version](v125, "vcp_version");
                    *(_DWORD *)__int128 buf = 138412802;
                    uint64_t v142 = (os_log_s *)v129;
                    v143 = 1024;
                    *(_DWORD *)uint64_t v144 = v123;
                    *(_WORD *)&v144[4] = 1024;
                    *(_DWORD *)&v144[6] = v91;
                    _os_log_impl( (void *)&_mh_execute_header,  v90,  v128,  "  [%@] Existing version (%d) >= Backup'd analysis version (%d); skipping entry",
                      buf,
                      0x18u);
                  }
                }

LABEL_84:
                __int128 v25 = 15;
                goto LABEL_85;
              }

              uint64_t v83 = MediaAnalysisLogLevel(0LL, v52);
              if ((int)v83 >= 3)
              {
                uint64_t v85 = VCPLogInstance(v83, v84);
                uint64_t v86 = (os_log_s *)objc_claimAutoreleasedReturnValue(v85);
                v124 = v86;
                if (os_log_type_enabled(v86, type))
                {
                  *(_DWORD *)__int128 buf = 138412290;
                  uint64_t v142 = (os_log_s *)v129;
                  _os_log_impl( (void *)&_mh_execute_header,  v86,  type,  "  [%@] Failed to convert asset analysis; skipping entry",
                    buf,
                    0xCu);
                }

                goto LABEL_84;
              }
            }

            else
            {
              __int16 v79 = MediaAnalysisLogLevel(v50, v51);
              if ((int)v79 < 3)
              {
                __int128 v25 = 15;
LABEL_87:

                unint64_t v75 = v126;
LABEL_88:

                goto LABEL_89;
              }

              id v81 = VCPLogInstance(v79, v80);
              unsigned int v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
              os_log_type_t v125 = v82;
              if (os_log_type_enabled(v82, type))
              {
                *(_DWORD *)__int128 buf = 138412546;
                uint64_t v142 = v131;
                v143 = 2112;
                *(void *)uint64_t v144 = v126;
                _os_log_impl( (void *)&_mh_execute_header,  v82,  type,  "  Failed to convert cloud identifier %@ to local identifier (%@); skipping entry",
                  buf,
                  0x16u);
              }
            }

            __int128 v25 = 15;
LABEL_86:

            goto LABEL_87;
          }

          uint64_t v72 = MediaAnalysisLogLevel(0LL, v48);
          if ((int)v72 >= 3)
          {
            uint64_t v74 = VCPLogInstance(v72, v73);
            unint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
            if (os_log_type_enabled((os_log_t)v75, type))
            {
              *(_WORD *)__int128 buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v75,  type,  "  Asset analysis is missing cloud identifier; skipping entry",
                buf,
                2u);
            }

            __int128 v25 = 15;
            goto LABEL_88;
          }

LABEL_123:
        LODWORD(v19) = -50;
        goto LABEL_136;
      }
    }

    LODWORD(v19) = -50;
    goto LABEL_137;
  }

  uint64_t v99 = MediaAnalysisLogLevel(0LL, v11);
  if ((int)v99 >= 3)
  {
    signed int v101 = VCPLogInstance(v99, v100);
    os_log_type_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
    id v103 = VCPLogToOSLogType[3];
    if (os_log_type_enabled(v102, v103))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v102, v103, "  Failed to read backup file header", buf, 2u);
    }

    LODWORD(v19) = -36;
    goto LABEL_136;
  }

  LODWORD(v19) = -36;
LABEL_137:

  objc_autoreleasePoolPop(v137);
  return v19;
}

void sub_10010E828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, void *a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26, void *a27, void *a28)
{
  _Unwind_Resume(a1);
}

void sub_10010F1B8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10010F39C(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  uint64_t v2 = (void *)qword_1001E66C0;
  qword_1001E66C0 = (uint64_t)v1;
}

void sub_10010F600(id a1)
{
  byte_1001E66D8 = 1;
}

MADGDUtilities *__cdecl sub_10010FEB4(id a1)
{
  return objc_alloc_init(&OBJC_CLASS___MADGDUtilities);
}

void sub_10010FEE8(id a1)
{
  if ((int)MediaAnalysisLogLevel(a1, v1) >= 6)
  {
    uint64_t v2 = VCPLogInstance();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    os_log_type_t v4 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v3, v4))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "[MADGDUtilities] Flushing operation queue ...", v5, 2u);
    }
  }

uint64_t sub_100110148(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v37 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  uint64_t v32 = a1;
  id obj = *(id *)(a1 + 32);
  id v4 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
  if (v4)
  {
    id v5 = v4;
    id v6 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)v38;
    os_log_type_t type = VCPLogToOSLogType[7];
    os_log_type_t v34 = VCPLogToOSLogType[3];
    do
    {
      for (unint64_t i = 0LL; i != v5; unint64_t i = (char *)i + 1)
      {
        uint64_t v10 = v6;
        if (*(void *)v38 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v37 + 1) + 8LL * (void)i);
        os_log_type_t v12 = objc_autoreleasePoolPush();
        id v13 = [v11 integerValue];
        id v36 = v6;
        unsigned int v14 = [v3 remove:v13 error:&v36];
        id v6 = v36;

        uint64_t v17 = MediaAnalysisLogLevel(v15, v16);
        if (v14)
        {
          if ((int)v17 >= 7)
          {
            uint64_t v19 = VCPLogInstance(v17, v18);
            uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, type))
            {
              *(_DWORD *)__int128 buf = 138412290;
              uint64_t v42 = v11;
              _os_log_impl((void *)&_mh_execute_header, v20, type, "[GallerySync] Removing %@ ...", buf, 0xCu);
            }
          }

          ++v7;
        }

        else if ((int)v17 >= 3)
        {
          uint64_t v21 = VCPLogInstance(v17, v18);
          __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
          if (os_log_type_enabled(v22, v34))
          {
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v42 = v11;
            __int16 v43 = 2112;
            id v44 = v6;
            _os_log_impl( (void *)&_mh_execute_header,  v22,  v34,  "[GallerySync] Failed to remove observationID %@ from Gallery - %@",  buf,  0x16u);
          }
        }

        objc_autoreleasePoolPop(v12);
      }

      id v5 = [obj countByEnumeratingWithState:&v37 objects:v45 count:16];
    }

    while (v5);
  }

  else
  {
    id v6 = 0LL;
    uint64_t v7 = 0LL;
  }

  uint64_t v25 = MediaAnalysisLogLevel(v23, v24);
  if ((int)v25 >= 7)
  {
    uint64_t v27 = VCPLogInstance(v25, v26);
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    os_log_type_t v29 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v28, v29))
    {
      id v30 = [*(id *)(v32 + 32) count];
      *(_DWORD *)__int128 buf = 134218240;
      uint64_t v42 = v7;
      __int16 v43 = 2048;
      id v44 = v30;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "[GallerySync] Removed %lu (out of %lu) observation(s) from Gallery",  buf,  0x16u);
    }
  }

  return 0LL;
}

id sub_1001105BC(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) count];
  if (result)
  {
    unint64_t v5 = 0LL;
    os_log_type_t v6 = VCPLogToOSLogType[7];
    *(void *)&__int128 v4 = 138412546LL;
    __int128 v17 = v4;
    do
    {
      uint64_t v7 = MediaAnalysisLogLevel(result, v3);
      if ((int)v7 >= 7)
      {
        uint64_t v9 = VCPLogInstance(v7, v8);
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, v6))
        {
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v5]);
          os_log_type_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 localIdentifier]);
          id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v5]);
          id v14 = [v13 vuObservationID];
          *(_DWORD *)__int128 buf = v17;
          uint64_t v19 = v12;
          __int16 v20 = 2048;
          id v21 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  v6,  "[GallerySync] Reset face %@ observationID %lu",  buf,  0x16u);
        }
      }

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectAtIndexedSubscript:", v5, v17));
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[PHFaceChangeRequest changeRequestForFace:]( &OBJC_CLASS___PHFaceChangeRequest,  "changeRequestForFace:",  v15));
      [v16 setVuObservationID:0];

      ++v5;
      id result = [*(id *)(a1 + 32) count];
    }

    while (v5 < (unint64_t)result);
  }

  return result;
}

void sub_100110B30( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, char a32)
{
}

uint64_t sub_100110B70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_100110B80(uint64_t a1)
{
}

void sub_100110B88(void *a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  os_log_type_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v6 pet];

  uint64_t v8 = a1[5];
  if (v8)
  {
    uint64_t v8 = (*(uint64_t (**)(void))(v8 + 16))();
    if ((_DWORD)v8)
    {
      uint64_t v9 = *(void *)(a1[6] + 8LL);
      int v10 = -128;
LABEL_15:
      *(_DWORD *)(v9 + 24) = v10;
      *a3 = 1;
      goto LABEL_16;
    }
  }

  uint64_t v11 = MediaAnalysisLogLevel(v8, v7);
  if ((int)v11 >= 7)
  {
    uint64_t v13 = VCPLogInstance(v11, v12);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    os_log_type_t v15 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = a1[4];
      int v34 = 138412546;
      uint64_t v35 = v16;
      __int16 v36 = 2112;
      id v37 = v5;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%@ Evaluating Change %@", (uint8_t *)&v34, 0x16u);
    }
  }

  id v17 = [v5 hasIncrementalChanges];
  if ((v17 & 1) == 0)
  {
    uint64_t v28 = MediaAnalysisLogLevel(v17, v18);
    if ((int)v28 >= 5)
    {
      uint64_t v30 = VCPLogInstance(v28, v29);
      id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      os_log_type_t v32 = VCPLogToOSLogType[5];
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = a1[4];
        int v34 = 138412546;
        uint64_t v35 = v33;
        __int16 v36 = 2112;
        id v37 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "%@ Non-incremental change (%@); falling back to full scan",
          (uint8_t *)&v34,
          0x16u);
      }
    }

    uint64_t v9 = *(void *)(a1[6] + 8LL);
    int v10 = -23801;
    goto LABEL_15;
  }

  uint64_t v19 = objc_claimAutoreleasedReturnValue([v5 changeToken]);
  uint64_t v20 = *(void *)(a1[7] + 8LL);
  id v21 = *(void **)(v20 + 40);
  *(void *)(v20 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v19;

  id v22 = [v5 changedLocalIdentifiersForEntityClass:objc_opt_class(PHPerson)];
  uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
  uint64_t v24 = *(void **)(*(void *)(a1[8] + 8LL) + 40LL);
  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:PHInsertedLocalIdentifiersKey]);
  [v24 unionSet:v25];

  uint64_t v26 = *(void **)(*(void *)(a1[8] + 8LL) + 40LL);
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v23 objectForKeyedSubscript:PHUpdatedLocalIdentifiersKey]);
  [v26 unionSet:v27];

LABEL_16:
}

void sub_100110E00(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel(v3, v4) >= 7)
  {
    uint64_t v5 = VCPLogInstance();
    os_log_type_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ Changed person %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

void sub_100111170(uint64_t a1)
{
  id v1 = +[PHPersonDeleteRequest deleteRequestsForObjects:ofType:forSelector:]( &OBJC_CLASS___PHPersonDeleteRequest,  "deleteRequestsForObjects:ofType:forSelector:",  *(void *)(a1 + 32),  objc_opt_class(&OBJC_CLASS___PHPerson),  *(void *)(a1 + 40));
  id v4 = (id)objc_claimAutoreleasedReturnValue(v1);
  if ([v4 count])
  {
    unint64_t v2 = 0LL;
    do
    {
      id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 objectAtIndexedSubscript:v2]);
      [v3 setForce:1];

      ++v2;
    }

    while (v2 < (unint64_t)[v4 count]);
  }
}

void sub_100111384( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_10011139C(uint64_t a1)
{
  id v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "vcp_description"));
  v833 = (__CFString *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[GallerySync][%@]",  v1));

  uint64_t v4 = a1;
  if (!*(_BYTE *)(*(void *)(a1 + 40) + 16LL))
  {
    v793 = objc_alloc_init(&OBJC_CLASS___VCPTimeMeasurement);
    -[VCPTimeMeasurement start](v793, "start");
    uint64_t v10 = *(void *)(a1 + 56);
    if (v10)
    {
      uint64_t v11 = (*(uint64_t (**)(void))(v10 + 16))();
      if ((_DWORD)v11)
      {
        uint64_t v13 = MediaAnalysisLogLevel(v11, v12);
        if ((int)v13 < 6)
        {
LABEL_533:

          goto LABEL_534;
        }

        uint64_t v15 = VCPLogInstance(v13, v14);
        uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        os_log_type_t v17 = VCPLogToOSLogType[6];
        uint64_t v18 = v16;
        if (os_log_type_enabled(v16, v17))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v833;
          _os_log_impl((void *)&_mh_execute_header, v18, v17, "%@ Cancelled", buf, 0xCu);
        }

LABEL_532:
        goto LABEL_533;
      }
    }

    v799 = (void *)objc_claimAutoreleasedReturnValue( +[VCPDatabaseManager sharedDatabaseForPhotoLibrary:]( &OBJC_CLASS___VCPDatabaseManager,  "sharedDatabaseForPhotoLibrary:",  *(void *)(a1 + 32)));
    id v19 = objc_msgSend(v799, "valueForKey:");
    double v20 = (double)(uint64_t)v19;
    uint64_t v21 = objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:",  (double)(uint64_t)v19));
    v782 = (void *)v21;
    if (v19)
    {
      uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
      [v23 timeIntervalSinceReferenceDate];
      BOOL v25 = v24 - v20 >= 43200.0;
    }

    else
    {
      BOOL v25 = 1;
    }

    uint64_t v26 = MediaAnalysisLogLevel(v21, v22);
    if ((int)v26 >= 6)
    {
      uint64_t v28 = VCPLogInstance(v26, v27);
      uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      os_log_type_t v30 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v29, v30))
      {
        if (v25) {
          id v31 = @"Yes";
        }
        else {
          id v31 = @"No";
        }
        os_log_type_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[VCPLogManager dateFormatter](&OBJC_CLASS___VCPLogManager, "dateFormatter"));
        id v33 = (id)objc_claimAutoreleasedReturnValue([v32 stringFromDate:v782]);
        *(_DWORD *)__int128 buf = 138412802;
        *(void *)&uint8_t buf[4] = v833;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v31;
        *(_WORD *)&buf[22] = 2112;
        *(void *)&_BYTE buf[24] = v33;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "%@ Deep sync needed: %@ (last sync date: %@", buf, 0x20u);
      }
    }

    uint64_t v775 = mach_absolute_time();
    uint64_t v34 = VCPSignPostLog(v775);
    uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
    os_signpost_id_t spid = os_signpost_id_generate(v35);

    uint64_t v37 = VCPSignPostLog(v36);
    __int128 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
    __int128 v39 = v38;
    if (spid - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v38))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v39,  OS_SIGNPOST_INTERVAL_BEGIN,  spid,  "GallerySync_EndToEnd",  (const char *)&unk_100199097,  buf,  2u);
    }

    id v878 = 0LL;
    [v799 queryChangeToken:&v878 forTaskID:3 andChangeTokenType:3];
    id v797 = v878;
    uint64_t v40 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currentToken]);
    v781 = (void *)v40;
    if (v797)
    {
      uint64_t v42 = MediaAnalysisLogLevel(v40, v41);
      if ((int)v42 >= 6)
      {
        uint64_t v44 = VCPLogInstance(v42, v43);
        os_log_type_t v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        os_log_type_t v46 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v45, v46))
        {
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v833;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v797;
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "%@ Person update change token present (%@)", buf, 0x16u);
        }
      }

      uint64_t v48 = *(void *)(a1 + 32);
      uint64_t v47 = *(void **)(a1 + 40);
      id v877 = 0LL;
      id v876 = 0LL;
      unsigned int v49 = [v47 _fetchChangedPersonSinceChangeToken:v797 photosLibrary:v48 changedPersonLocalIdentifiers:&v877 latestChange Token:&v876 cancelOrExtendTimeoutBlock:*(void *)(a1 + 56)];
      id v784 = v877;
      id v780 = v876;
      BOOL v50 = v49 != 0;
    }

    else
    {
      id v784 = 0LL;
      id v780 = 0LL;
      BOOL v50 = 1;
    }

    BOOL v792 = v50;
    uint64_t v51 = a1;
    uint64_t v52 = *(void *)(a1 + 56);
    if (v52)
    {
      uint64_t v53 = (*(uint64_t (**)(void))(v52 + 16))();
      uint64_t v51 = a1;
      if ((_DWORD)v53)
      {
        uint64_t v55 = MediaAnalysisLogLevel(v53, v54);
        if ((int)v55 < 6)
        {
LABEL_531:

          uint64_t v18 = (os_log_s *)v799;
          goto LABEL_532;
        }

        uint64_t v57 = VCPLogInstance(v55, v56);
        __int16 v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
        os_log_type_t v59 = VCPLogToOSLogType[6];
        double v60 = v58;
        if (os_log_type_enabled(v58, v59))
        {
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v833;
          _os_log_impl((void *)&_mh_execute_header, v60, v59, "%@ Cancelled", buf, 0xCu);
        }

LABEL_530:
        goto LABEL_531;
      }
    }

    v805 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(v51 + 32), "mad_allFacesFetchOptions"));
    v896[0] = PHFacePropertySetIdentifier;
    v896[1] = PHFacePropertySetCore;
    v896[2] = PHFacePropertySetClustering;
    v896[3] = PHFacePropertySetPersonBuilder;
    os_log_type_t v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v896, 4LL));
    [v805 setFetchPropertySets:v61];

    if (!v25) {
      goto LABEL_248;
    }
    v829 = objc_autoreleasePoolPush();
    os_log_t oslog = (os_log_t)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "mad_allPersonsFetchOptionsWithDetectionTypes:andVerifiedTypes:",  0,  &off_1001C9330));
    uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"faceCount = 0"));
    id v63 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s predicate](oslog, "predicate"));

    if (v63)
    {
      uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s predicate](oslog, "predicate"));
      v895[0] = v64;
      v895[1] = v62;
      uint64_t v65 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v895, 2LL));
      uint64_t v66 = objc_claimAutoreleasedReturnValue( +[NSCompoundPredicate andPredicateWithSubpredicates:]( &OBJC_CLASS___NSCompoundPredicate,  "andPredicateWithSubpredicates:",  v65));

      uint64_t v67 = (void *)v66;
    }

    else
    {
      uint64_t v67 = v62;
    }

    v825 = v67;
    -[os_log_s setPredicate:](oslog, "setPredicate:");
    if (v792)
    {
      id v68 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
      [v68 addBreadcrumb:@"[GallerySync] Fetching 0-face unverified persons with fetchOptions: %@", oslog];

      double v69 = (void *)objc_claimAutoreleasedReturnValue(+[PHPerson fetchPersonsWithOptions:](&OBJC_CLASS___PHPerson, "fetchPersonsWithOptions:", oslog));
      BOOL v70 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
      objc_msgSend( v70,  "addBreadcrumb:",  @"[GallerySync] Fetched %lu 0-face unverified persons",  objc_msgSend(v69, "count"));
    }

    else
    {
      double v69 = 0LL;
    }

    if ([v69 count])
    {
      context = objc_autoreleasePoolPush();
      uint64_t v813 = mach_absolute_time();
      uint64_t v71 = VCPSignPostLog(v813);
      uint64_t v72 = (os_log_s *)objc_claimAutoreleasedReturnValue(v71);
      os_signpost_id_t v816 = os_signpost_id_generate(v72);

      uint64_t v74 = VCPSignPostLog(v73);
      unint64_t v75 = (os_log_s *)objc_claimAutoreleasedReturnValue(v74);
      uint64_t v76 = v75;
      if (v816 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v75))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v76,  OS_SIGNPOST_INTERVAL_BEGIN,  v816,  "GallerySync_removeZeroFaceUnverifiedPersons",  (const char *)&unk_100199097,  buf,  2u);
      }

      uint64_t v79 = MediaAnalysisLogLevel(v77, v78);
      if ((int)v79 >= 7)
      {
        uint64_t v81 = VCPLogInstance(v79, v80);
        unsigned int v82 = (os_log_s *)objc_claimAutoreleasedReturnValue(v81);
        os_log_type_t v83 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v82, v83))
        {
          id v84 = [v69 count];
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = @"[GallerySync_UnverifiedPerson]";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v84;
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "%@ Checking %lu 0-face unverified persons", buf, 0x16u);
        }
      }

      uint64_t v85 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
      [v85 addBreadcrumb:@"%@ Checking %lu 0-face unverified persons", @"[GallerySync_UnverifiedPerson]", objc_msgSend(v69, "count")];

      uint64_t v86 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      uint64_t v87 = 0LL;
      if ([v69 count])
      {
        uint64_t v88 = 0LL;
        os_log_type_t v89 = VCPLogToOSLogType[7];
        while (1)
        {
          id v90 = objc_autoreleasePoolPush();
          uint64_t v91 = *(void *)(a1 + 56);
          if (v91)
          {
            uint64_t v92 = (*(uint64_t (**)(void))(v91 + 16))();
            if ((_DWORD)v92) {
              break;
            }
          }

          id v94 = (void *)objc_claimAutoreleasedReturnValue([v69 objectAtIndexedSubscript:v88]);
          id v95 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesForPerson:options:]( &OBJC_CLASS___PHFace,  "fetchFacesForPerson:options:",  v94,  v805));
          BOOL v96 = [v95 count] == 0;

          if (v96)
          {
            [v86 addObject:v94];
            ++v87;
            if ((unint64_t)[v86 count] >= 0x3E8)
            {
              [*(id *)(a1 + 40) _deleteUnverifiedPersonsWithZeroFaces:v86];
              [v86 removeAllObjects];
            }
          }

          else
          {
            uint64_t v99 = MediaAnalysisLogLevel(v97, v98);
            if ((int)v99 >= 7)
            {
              uint64_t v101 = VCPLogInstance(v99, v100);
              os_log_type_t v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
              if (os_log_type_enabled(v102, v89))
              {
                id v103 = (void *)objc_claimAutoreleasedReturnValue([v94 localIdentifier]);
                *(_DWORD *)__int128 buf = 138412546;
                *(void *)&uint8_t buf[4] = @"[GallerySync_UnverifiedPerson]";
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v103;
                _os_log_impl( (void *)&_mh_execute_header,  v102,  v89,  "%@ Ignoring unverified person %@ (has face)",  buf,  0x16u);
              }
            }
          }

          objc_autoreleasePoolPop(v90);
        }

        uint64_t v275 = MediaAnalysisLogLevel(v92, v93);
        if ((int)v275 >= 6)
        {
          uint64_t v277 = VCPLogInstance(v275, v276);
          v278 = (os_log_s *)objc_claimAutoreleasedReturnValue(v277);
          os_log_type_t v279 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v278, v279))
          {
            *(_DWORD *)__int128 buf = 138412290;
            *(void *)&uint8_t buf[4] = @"[GallerySync_UnverifiedPerson]";
            _os_log_impl((void *)&_mh_execute_header, v278, v279, "%@ Cancelled", buf, 0xCu);
          }
        }

        objc_autoreleasePoolPop(v90);
        goto LABEL_192;
      }

LABEL_181:
      }

LABEL_239:
      int v274 = 1;
      goto LABEL_241;
    }

    uint64_t v208 = MediaAnalysisLogLevel(v206, v207);
    if ((int)v208 >= 6)
    {
      uint64_t v210 = VCPLogInstance(v208, v209);
      v211 = (os_log_s *)objc_claimAutoreleasedReturnValue(v210);
      os_log_type_t v212 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v211, v212))
      {
        *(_DWORD *)v886 = 138412546;
        v887 = v777;
        __int16 v888 = 2112;
        uint64_t v889 = (uint64_t)v818;
        _os_log_impl((void *)&_mh_execute_header, v211, v212, "%@ Sync to gallery at ChangeBookmark - %@", v886, 0x16u);
      }
    }

    v213 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    [v213 addBreadcrumb:@"[GallerySync] Finished checking unknown observation ids"];

    uint64_t v215 = VCPSignPostLog(v214);
    v216 = (os_log_s *)objc_claimAutoreleasedReturnValue(v215);
    v217 = v216;
    if (v199 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v216))
    {
      *(_WORD *)v886 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v217,  OS_SIGNPOST_INTERVAL_END,  v199,  "GallerySync_checkUnknownObservationIDs",  (const char *)&unk_100199097,  v886,  2u);
    }

    if (v196)
    {
      uint64_t v218 = mach_absolute_time();
      VCPPerformance_LogMeasurement("GallerySync_checkUnknownObservationIDs", v218 - v196);
    }

    if ([*(id *)(*(void *)&buf[8] + 40) count])
    {
      os_log_type_t type = objc_autoreleasePoolPush();
      uint64_t v220 = MediaAnalysisLogLevel(type, v219);
      if ((int)v220 >= 7)
      {
        uint64_t v222 = VCPLogInstance(v220, v221);
        v223 = (os_log_s *)objc_claimAutoreleasedReturnValue(v222);
        os_log_type_t v224 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v223, v224))
        {
          id v225 = [*(id *)(*(void *)&buf[8] + 40) count];
          *(_DWORD *)v886 = 138412546;
          v887 = @"[GallerySync_ObservationRemove]";
          __int16 v888 = 2048;
          uint64_t v889 = (uint64_t)v225;
          _os_log_impl( (void *)&_mh_execute_header,  v223,  v224,  "%@ Removing %lu observation(s) from Gallery",  v886,  0x16u);
        }
      }

      v226 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
      [v226 addBreadcrumb:@"%@ Removing %lu observation(s) from Gallery", @"[GallerySync_ObservationRemove]", objc_msgSend(*(id *)(*(void *)&buf[8] + 40), "count")];

      os_signpost_id_t v769 = mach_absolute_time();
      uint64_t v227 = VCPSignPostLog(v769);
      v228 = (os_log_s *)objc_claimAutoreleasedReturnValue(v227);
      os_signpost_id_t v786 = os_signpost_id_generate(v228);

      uint64_t v230 = VCPSignPostLog(v229);
      v231 = (os_log_s *)objc_claimAutoreleasedReturnValue(v230);
      v232 = v231;
      if (v786 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v231))
      {
        *(_WORD *)v886 = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v232,  OS_SIGNPOST_INTERVAL_BEGIN,  v786,  "GallerySync_removeUnknownObservationIDsFromGallery",  (const char *)&unk_100199097,  v886,  2u);
      }

      v233 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
      __int128 v865 = 0u;
      __int128 v866 = 0u;
      __int128 v863 = 0u;
      __int128 v864 = 0u;
      id v234 = *(id *)(*(void *)&buf[8] + 40LL);
      id v235 = [v234 countByEnumeratingWithState:&v863 objects:v894 count:16];
      if (v235)
      {
        uint64_t v236 = *(void *)v864;
        os_log_type_t v237 = VCPLogToOSLogType[6];
        while (2)
        {
          for (unint64_t i = 0LL; i != v235; unint64_t i = (char *)i + 1)
          {
            if (*(void *)v864 != v236) {
              objc_enumerationMutation(v234);
            }
            uint64_t v239 = *(void *)(*((void *)&v863 + 1) + 8LL * (void)i);
            v240 = objc_autoreleasePoolPush();
            uint64_t v241 = *(void *)(a1 + 56);
            if (v241 && (uint64_t v242 = (*(uint64_t (**)(void))(v241 + 16))(), (_DWORD)v242))
            {
              uint64_t v244 = MediaAnalysisLogLevel(v242, v243);
              if ((int)v244 >= 6)
              {
                uint64_t v246 = VCPLogInstance(v244, v245);
                v247 = (os_log_s *)objc_claimAutoreleasedReturnValue(v246);
                if (os_log_type_enabled(v247, v237))
                {
                  *(_DWORD *)v886 = 138412290;
                  v887 = @"[GallerySync_ObservationRemove]";
                  _os_log_impl((void *)&_mh_execute_header, v247, v237, "%@ Cancelled", v886, 0xCu);
                }
              }

              int v248 = 0;
            }

            else
            {
              [v233 addObject:v239];
              if ((unint64_t)[v233 count] >= 0x3E9)
              {
                v249 = *(void **)(a1 + 40);
                v250 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) gallery]);
                [v249 _removeObservationIDs:v233 fromGallery:v250];

                [v233 removeAllObjects];
              }

              int v248 = 1;
            }

            objc_autoreleasePoolPop(v240);
            if (!v248)
            {

              int v259 = 0;
              goto LABEL_194;
            }
          }

          id v235 = [v234 countByEnumeratingWithState:&v863 objects:v894 count:16];
          if (v235) {
            continue;
          }
          break;
        }
      }

      if ([v233 count])
      {
        v251 = *(void **)(a1 + 40);
        v252 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) gallery]);
        [v251 _removeObservationIDs:v233 fromGallery:v252];

        [v233 removeAllObjects];
      }

      v253 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
      [v253 addBreadcrumb:@"%@ Finished removing %lu observation(s) from Gallery", @"[GallerySync_ObservationRemove]", objc_msgSend(*(id *)(*(void *)&buf[8] + 40), "count")];

      uint64_t v255 = VCPSignPostLog(v254);
      v256 = (os_log_s *)objc_claimAutoreleasedReturnValue(v255);
      v257 = v256;
      if (v786 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v256))
      {
        *(_WORD *)v886 = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v257,  OS_SIGNPOST_INTERVAL_END,  v786,  "GallerySync_removeUnknownObservationIDsFromGallery",  (const char *)&unk_100199097,  v886,  2u);
      }

      if (v769)
      {
        uint64_t v258 = mach_absolute_time();
        VCPPerformance_LogMeasurement("GallerySync_removeUnknownObservationIDsFromGallery", v258 - v769);
      }

      int v259 = 1;
LABEL_194:

      objc_autoreleasePoolPop(type);
      if (!v259) {
        goto LABEL_239;
      }
    }

    [v794 unionSet:osloga];
    if (![v794 count]) {
      goto LABEL_234;
    }
    v765 = objc_autoreleasePoolPush();
    uint64_t v281 = MediaAnalysisLogLevel(v765, v280);
    if ((int)v281 >= 7)
    {
      uint64_t v283 = VCPLogInstance(v281, v282);
      v284 = (os_log_s *)objc_claimAutoreleasedReturnValue(v283);
      os_log_type_t v285 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v284, v285))
      {
        id v286 = [v794 count];
        *(_DWORD *)v886 = 138412546;
        v887 = @"[GallerySync_ObservationReset]";
        __int16 v888 = 2048;
        uint64_t v889 = (uint64_t)v286;
        _os_log_impl( (void *)&_mh_execute_header,  v284,  v285,  "%@ Resetting %lu vuObservationID(s) in Photos",  v886,  0x16u);
      }
    }

    v287 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    [v287 addBreadcrumb:@"%@ Resetting %lu vuObservationID(s) in Photos", @"[GallerySync_ObservationReset]", objc_msgSend(v794, "count")];

    uint64_t v764 = mach_absolute_time();
    uint64_t v288 = VCPSignPostLog(v764);
    v289 = (os_log_s *)objc_claimAutoreleasedReturnValue(v288);
    os_signpost_id_t v770 = os_signpost_id_generate(v289);

    uint64_t v291 = VCPSignPostLog(v290);
    v292 = (os_log_s *)objc_claimAutoreleasedReturnValue(v291);
    v293 = v292;
    if (v770 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v292))
    {
      *(_WORD *)v886 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v293,  OS_SIGNPOST_INTERVAL_BEGIN,  v770,  "GallerySync_resetVuObservationIDsInPhotos",  (const char *)&unk_100199097,  v886,  2u);
    }

    v294 = (void *)objc_claimAutoreleasedReturnValue([v794 allObjects]);
    unint64_t v295 = 0LL;
    os_log_type_t typea = VCPLogToOSLogType[6];
    os_log_type_t v296 = VCPLogToOSLogType[7];
    os_log_type_t v787 = VCPLogToOSLogType[5];
    while (1)
    {
      unint64_t v297 = v295;
      id v298 = [v294 count];
      v299 = objc_autoreleasePoolPush();
      uint64_t v300 = *(void *)(a1 + 56);
      if (v300 && (uint64_t v301 = (*(uint64_t (**)(void))(v300 + 16))(), (_DWORD)v301))
      {
        uint64_t v303 = MediaAnalysisLogLevel(v301, v302);
        if ((int)v303 < 6)
        {
          char v307 = 0;
          goto LABEL_225;
        }

        uint64_t v305 = VCPLogInstance(v303, v304);
        v306 = (os_log_s *)objc_claimAutoreleasedReturnValue(v305);
        if (os_log_type_enabled(v306, typea))
        {
          *(_DWORD *)v886 = 138412290;
          v887 = @"[GallerySync_ObservationReset]";
          _os_log_impl((void *)&_mh_execute_header, v306, typea, "%@ Cancelled", v886, 0xCu);
        }

        char v307 = 0;
      }

      else
      {
        v308 = (char *)[v294 count];
        else {
          uint64_t v310 = (uint64_t)&v308[-v295];
        }
        uint64_t v311 = MediaAnalysisLogLevel(v308, v309);
        if ((int)v311 >= 7)
        {
          uint64_t v313 = VCPLogInstance(v311, v312);
          v314 = (os_log_s *)objc_claimAutoreleasedReturnValue(v313);
          if (os_log_type_enabled(v314, v296))
          {
            *(_DWORD *)v886 = 138413058;
            v887 = @"[GallerySync_ObservationReset]";
            __int16 v888 = 2048;
            uint64_t v889 = v310;
            __int16 v890 = 2048;
            unint64_t v891 = v297;
            __int16 v892 = 2048;
            unint64_t v893 = v310 + v297;
            _os_log_impl( (void *)&_mh_execute_header,  v314,  v296,  "%@ Reset %lu vuObservationIDsInPhotos[%lu:%lu]",  v886,  0x2Au);
          }
        }

        v306 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(v294, "subarrayWithRange:", v297, v310));
        v315 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesWithVuObservationIDs:options:]( &OBJC_CLASS___PHFace,  "fetchFacesWithVuObservationIDs:options:",  v306,  v802));
        id v316 = [v315 count];
        id v317 = -[os_log_s count](v306, "count");
        if (v316 != v317)
        {
          uint64_t v319 = MediaAnalysisLogLevel(v317, v318);
          if ((int)v319 >= 5)
          {
            uint64_t v321 = VCPLogInstance(v319, v320);
            v322 = (os_log_s *)objc_claimAutoreleasedReturnValue(v321);
            if (os_log_type_enabled(v322, v787))
            {
              id v323 = [v315 count];
              id v324 = -[os_log_s count](v306, "count");
              *(_DWORD *)v886 = 138412802;
              v887 = @"[GallerySync_ObservationReset]";
              __int16 v888 = 2048;
              uint64_t v889 = (uint64_t)v323;
              __int16 v890 = 2048;
              unint64_t v891 = (unint64_t)v324;
              _os_log_impl( (void *)&_mh_execute_header,  v322,  v787,  "%@ Fetched %lu faces from Photos (expected %lu)",  v886,  0x20u);
            }
          }
        }

        [*(id *)(a1 + 40) _resetObservationIDForFaces:v315 fromPhotoLibrary:*(void *)(a1 + 32)];

        unint64_t v295 = v310 + v297;
        char v307 = 1;
      }

LABEL_225:
      objc_autoreleasePoolPop(v299);
      if ((v307 & 1) == 0) {
        goto LABEL_233;
      }
    }

    v325 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    [v325 addBreadcrumb:@"%@ Finished resetting %lu vuObservationID(s) in Photos", @"[GallerySync_ObservationReset]", objc_msgSend(v794, "count")];

    uint64_t v327 = VCPSignPostLog(v326);
    v328 = (os_log_s *)objc_claimAutoreleasedReturnValue(v327);
    v329 = v328;
    if (v770 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v328))
    {
      *(_WORD *)v886 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v329,  OS_SIGNPOST_INTERVAL_END,  v770,  "GallerySync_resetVuObservationIDsInPhotos",  (const char *)&unk_100199097,  v886,  2u);
    }

    if (v764)
    {
      uint64_t v330 = mach_absolute_time();
      VCPPerformance_LogMeasurement("GallerySync_resetVuObservationIDsInPhotos", v330 - v764);
    }

LABEL_233:
    objc_autoreleasePoolPop(v765);
LABEL_234:
    uint64_t v331 = *(void *)(a1 + 56);
    if (v331)
    {
      uint64_t v332 = (*(uint64_t (**)(void))(v331 + 16))();
      if ((_DWORD)v332)
      {
        uint64_t v334 = MediaAnalysisLogLevel(v332, v333);
        if ((int)v334 >= 6)
        {
          uint64_t v336 = VCPLogInstance(v334, v335);
          v263 = (os_log_s *)objc_claimAutoreleasedReturnValue(v336);
          os_log_type_t v337 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v263, v337))
          {
            *(_DWORD *)v886 = 138412290;
            v887 = v777;
            v265 = "%@ Cancelled";
            v266 = v263;
            os_log_type_t v267 = v337;
            uint32_t v268 = 12;
LABEL_180:
            _os_log_impl((void *)&_mh_execute_header, v266, v267, v265, v886, v268);
          }

          goto LABEL_181;
        }

        goto LABEL_239;
      }
    }

    int v274 = 0;
LABEL_241:

    _Block_object_dispose(v875, 8);
    _Block_object_dispose(buf, 8);

LABEL_242:
    objc_autoreleasePoolPop(v779);
    if (v274) {
      goto LABEL_529;
    }
    v338 = objc_autoreleasePoolPush();
    v339 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    [v339 timeIntervalSinceReferenceDate];
    [v799 setValue:(uint64_t)v340 forKey:@"VUDeepSyncTimestamp"];

    id v341 = [v799 commit];
    uint64_t v343 = MediaAnalysisLogLevel(v341, v342);
    if ((int)v343 >= 6)
    {
      uint64_t v345 = VCPLogInstance(v343, v344);
      v346 = (os_log_s *)objc_claimAutoreleasedReturnValue(v345);
      os_log_type_t v347 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v346, v347))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v346, v347, "[GallerySync] Updated deep sync date", buf, 2u);
      }
    }

    objc_autoreleasePoolPop(v338);
LABEL_248:
    typeb = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "mad_allPersonsFetchOptionsWithDetectionTypes:andVerifiedTypes:",  0,  &off_1001C9348));
    if (v792)
    {
      contextc = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchPersonsWithOptions:]( &OBJC_CLASS___PHPerson,  "fetchPersonsWithOptions:",  typeb));
    }

    else
    {
      v348 = (void *)objc_claimAutoreleasedReturnValue([v784 allObjects]);
      contextc = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchPersonsWithLocalIdentifiers:options:]( &OBJC_CLASS___PHPerson,  "fetchPersonsWithLocalIdentifiers:options:",  v348,  typeb));
    }

    if ([contextc count])
    {
      v795 = objc_autoreleasePoolPush();
      v349 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
      [v349 addBreadcrumb:@"%@ Checking %lu verified persons for visible reject faces", @"[GallerySync_VerifiedPerson]", objc_msgSend(contextc, "count")];

      uint64_t v803 = mach_absolute_time();
      uint64_t v350 = VCPSignPostLog(v803);
      v351 = (os_log_s *)objc_claimAutoreleasedReturnValue(v350);
      os_signpost_id_t v800 = os_signpost_id_generate(v351);

      uint64_t v353 = VCPSignPostLog(v352);
      v354 = (os_log_s *)objc_claimAutoreleasedReturnValue(v353);
      v355 = v354;
      if (v800 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v354))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v355,  OS_SIGNPOST_INTERVAL_BEGIN,  v800,  "GallerySync_loadVisibleRejectFaces",  (const char *)&unk_100199097,  buf,  2u);
      }

      v807 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mad_allFacesFetchOptions"));
      [v807 setIncludeNonvisibleFaces:0];
      os_log_t oslogb = (os_log_t)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      uint64_t v356 = 0LL;
      if ([contextc count])
      {
        unint64_t v823 = 0LL;
        os_log_type_t v831 = VCPLogToOSLogType[3];
        do
        {
          v819 = objc_autoreleasePoolPush();
          uint64_t v357 = *(void *)(a1 + 56);
          if (v357)
          {
            uint64_t v358 = (*(uint64_t (**)(void))(v357 + 16))();
            if ((_DWORD)v358)
            {
              uint64_t v387 = MediaAnalysisLogLevel(v358, v359);
              if ((int)v387 >= 6)
              {
                uint64_t v389 = VCPLogInstance(v387, v388);
                v390 = (os_log_s *)objc_claimAutoreleasedReturnValue(v389);
                os_log_type_t v391 = VCPLogToOSLogType[6];
                if (os_log_type_enabled(v390, v391))
                {
                  *(_DWORD *)__int128 buf = 138412290;
                  *(void *)&uint8_t buf[4] = @"[GallerySync_VerifiedPerson]";
                  _os_log_impl((void *)&_mh_execute_header, v390, v391, "%@ Cancelled", buf, 0xCu);
                }
              }

              objc_autoreleasePoolPop(v819);
              break;
            }
          }

          v827 = (void *)objc_claimAutoreleasedReturnValue([contextc objectAtIndexedSubscript:v823]);
          v360 = objc_alloc(&OBJC_CLASS___NSUUID);
          v361 = (void *)objc_claimAutoreleasedReturnValue([v827 uuid]);
          v362 = -[NSUUID initWithUUIDString:](v360, "initWithUUIDString:", v361);

          if (v362)
          {
            v365 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchRejectedFacesForPerson:options:]( &OBJC_CLASS___PHFace,  "fetchRejectedFacesForPerson:options:",  v827,  v807));
            if ([v365 count])
            {
              unint64_t v366 = 0LL;
              do
              {
                v367 = objc_autoreleasePoolPush();
                v368 = (void *)objc_claimAutoreleasedReturnValue([v365 objectAtIndexedSubscript:v366]);
                id v370 = [v368 vuObservationID];
                if (v370)
                {
                  v371 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v370));
                  v372 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](oslogb, "objectForKeyedSubscript:", v371));
                  BOOL v373 = v372 == 0LL;

                  if (v373)
                  {
                    v374 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
                    v375 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v370));
                    -[os_log_s setObject:forKeyedSubscript:](oslogb, "setObject:forKeyedSubscript:", v374, v375);
                  }

                  v376 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v370));
                  v377 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectForKeyedSubscript:](oslogb, "objectForKeyedSubscript:", v376));
                  [v377 addObject:v362];

                  ++v356;
                }

                else
                {
                  uint64_t v378 = MediaAnalysisLogLevel(0LL, v369);
                  if ((int)v378 >= 3)
                  {
                    uint64_t v380 = VCPLogInstance(v378, v379);
                    v381 = (os_log_s *)objc_claimAutoreleasedReturnValue(v380);
                    if (os_log_type_enabled(v381, v831))
                    {
                      v382 = (void *)objc_claimAutoreleasedReturnValue([v368 localIdentifier]);
                      *(_DWORD *)__int128 buf = 138412546;
                      *(void *)&uint8_t buf[4] = @"[GallerySync_VerifiedPerson]";
                      *(_WORD *)&buf[12] = 2112;
                      *(void *)&buf[14] = v382;
                      _os_log_impl( (void *)&_mh_execute_header,  v381,  v831,  "%@ Reject face %@ does not have ObservationID; ignore",
                        buf,
                        0x16u);
                    }
                  }
                }

                objc_autoreleasePoolPop(v367);
                ++v366;
              }

              while (v366 < (unint64_t)[v365 count]);
            }
          }

          else
          {
            uint64_t v383 = MediaAnalysisLogLevel(v363, v364);
            uint64_t v385 = VCPLogInstance(v383, v384);
            v365 = (void *)objc_claimAutoreleasedReturnValue(v385);
            if (os_log_type_enabled((os_log_t)v365, v831))
            {
              v386 = (void *)objc_claimAutoreleasedReturnValue([v827 localIdentifier]);
              *(_DWORD *)__int128 buf = 138412802;
              *(void *)&uint8_t buf[4] = @"[GallerySync_VerifiedPerson]";
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v386;
              *(_WORD *)&buf[22] = 2112;
              *(void *)&_BYTE buf[24] = v827;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v365,  v831,  "%@ Invalid person identification %@ for person %@; ignore",
                buf,
                0x20u);
            }
          }

LABEL_272:
          objc_autoreleasePoolPop(v819);
          ++v823;
        }

        while (v823 < (unint64_t)[contextc count]);
      }

      v392 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
      [v392 addBreadcrumb:@"%@ Finished checking %lu verified persons for visible reject faces", @"[GallerySync_VerifiedPerson]", objc_msgSend(contextc, "count")];

      uint64_t v394 = VCPSignPostLog(v393);
      v395 = (os_log_s *)objc_claimAutoreleasedReturnValue(v394);
      v396 = v395;
      if (v800 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v395))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v396,  OS_SIGNPOST_INTERVAL_END,  v800,  "GallerySync_loadVisibleRejectFaces",  (const char *)&unk_100199097,  buf,  2u);
      }

      if (v803)
      {
        uint64_t v397 = mach_absolute_time();
        VCPPerformance_LogMeasurement("GallerySync_loadVisibleRejectFaces", v397 - v803);
      }

      if (-[os_log_s count](oslogb, "count"))
      {
        v398 = objc_autoreleasePoolPush();
        uint64_t v399 = mach_absolute_time();
        uint64_t v400 = VCPSignPostLog(v399);
        v401 = (os_log_s *)objc_claimAutoreleasedReturnValue(v400);
        os_signpost_id_t v402 = os_signpost_id_generate(v401);

        uint64_t v404 = VCPSignPostLog(v403);
        v405 = (os_log_s *)objc_claimAutoreleasedReturnValue(v404);
        v406 = v405;
        if (v402 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v405))
        {
          *(_WORD *)__int128 buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v406,  OS_SIGNPOST_INTERVAL_BEGIN,  v402,  "GallerySync_tagVisibleRejectFaces",  (const char *)&unk_100199097,  buf,  2u);
        }

        v407 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
        [v407 addBreadcrumb:@"%@ Tagging %lu visible reject faces", @"[GallerySync_VerifiedPerson]", -[os_log_s count](oslogb, "count")];

        v857[0] = _NSConcreteStackBlock;
        v857[1] = 3221225472LL;
        v857[2] = sub_1001168F4;
        v857[3] = &unk_1001BDD08;
        v408 = oslogb;
        v858 = v408;
        id v860 = *(id *)(a1 + 56);
        v859 = @"[GallerySync_VerifiedPerson]";
        BOOL v862 = v792;
        uint64_t v861 = v356;
        v409 = objc_retainBlock(v857);
        v410 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
        [v410 addBreadcrumb:@"%@ Finished tagging %lu visible reject faces", @"[GallerySync_VerifiedPerson]", -[os_log_s count](v408, "count")];

        v411 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) gallery]);
        id v856 = 0LL;
        unsigned __int8 v412 = [v411 mutateAndReturnError:&v856 handler:v409];
        id v413 = v856;

        if ((v412 & 1) == 0)
        {
          uint64_t v414 = MediaAnalysisLogLevel(v414, v415);
          if ((int)v414 >= 3)
          {
            uint64_t v417 = VCPLogInstance(v414, v416);
            v418 = (os_log_s *)objc_claimAutoreleasedReturnValue(v417);
            os_log_type_t v419 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v418, v419))
            {
              *(_DWORD *)__int128 buf = 138412546;
              *(void *)&uint8_t buf[4] = @"[GallerySync_VerifiedPerson]";
              *(_WORD *)&buf[12] = 2112;
              *(void *)&buf[14] = v413;
              _os_log_impl( (void *)&_mh_execute_header,  v418,  v419,  "%@ Failed to tag reject faces in Gallery - %@",  buf,  0x16u);
            }
          }
        }

        uint64_t v420 = VCPSignPostLog(v414);
        v421 = (os_log_s *)objc_claimAutoreleasedReturnValue(v420);
        v422 = v421;
        if (v402 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v421))
        {
          *(_WORD *)__int128 buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v422,  OS_SIGNPOST_INTERVAL_END,  v402,  "GallerySync_tagVisibleRejectFaces",  (const char *)&unk_100199097,  buf,  2u);
        }

        if (v399)
        {
          uint64_t v423 = mach_absolute_time();
          VCPPerformance_LogMeasurement("GallerySync_tagVisibleRejectFaces", v423 - v399);
        }

        objc_autoreleasePoolPop(v398);
      }

      uint64_t v424 = *(void *)(a1 + 56);
      if (v424)
      {
        uint64_t v425 = (*(uint64_t (**)(void))(v424 + 16))();
        if ((_DWORD)v425)
        {
          uint64_t v427 = MediaAnalysisLogLevel(v425, v426);
          if ((int)v427 >= 6)
          {
            uint64_t v429 = VCPLogInstance(v427, v428);
            v430 = (os_log_s *)objc_claimAutoreleasedReturnValue(v429);
            os_log_type_t v431 = VCPLogToOSLogType[6];
            if (os_log_type_enabled(v430, v431))
            {
              *(_DWORD *)__int128 buf = 138412290;
              *(void *)&uint8_t buf[4] = @"[GallerySync_VerifiedPerson]";
              _os_log_impl((void *)&_mh_execute_header, v430, v431, "%@ Cancelled", buf, 0xCu);
            }
          }

          objc_autoreleasePoolPop(v795);
LABEL_528:

          goto LABEL_529;
        }
      }

      objc_autoreleasePoolPop(v795);
    }

    uint64_t v432 = mach_absolute_time();
    uint64_t v433 = VCPSignPostLog(v432);
    v434 = (os_log_s *)objc_claimAutoreleasedReturnValue(v433);
    os_signpost_id_t v435 = os_signpost_id_generate(v434);

    uint64_t v437 = VCPSignPostLog(v436);
    v438 = (os_log_s *)objc_claimAutoreleasedReturnValue(v437);
    v439 = v438;
    if (v435 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v438))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v439,  OS_SIGNPOST_INTERVAL_BEGIN,  v435,  "GallerySync_loadFacecropFaceObservationIDFromPhotos",  (const char *)&unk_100199097,  buf,  2u);
    }

    v778 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mad_allFacesFetchOptions"));
    v440 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"vuObservationID != 0 && (trainingType = %d || trainingType = %d || trainingType = %d)",  1LL,  2LL,  5LL));
    [v778 setInternalPredicate:v440];

    v441 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    [v441 addBreadcrumb:@"[GallerySync] Fetching face crops with fetchOptions: %@", v778];

    v824 = (void *)objc_claimAutoreleasedReturnValue(+[PHFace fetchFacesWithOptions:](&OBJC_CLASS___PHFace, "fetchFacesWithOptions:", v778));
    v442 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
    objc_msgSend(v442, "addBreadcrumb:", @"[GallerySync] Fetched %lu face crops", objc_msgSend(v824, "count"));

    v832 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableSet setWithCapacity:]( NSMutableSet,  "setWithCapacity:",  [v824 count]));
    id v443 = [v824 count];
    if (v443)
    {
      for (unint64_t j = 0LL; j < (unint64_t)v443; ++j)
      {
        v445 = objc_autoreleasePoolPush();
        v446 = (void *)objc_claimAutoreleasedReturnValue([v824 objectAtIndexedSubscript:j]);
        v447 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v446 vuObservationID]));
        [v832 addObject:v447];

        objc_autoreleasePoolPop(v445);
        id v443 = [v824 count];
      }
    }

    uint64_t v448 = VCPSignPostLog(v443);
    v449 = (os_log_s *)objc_claimAutoreleasedReturnValue(v448);
    v450 = v449;
    if (v435 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v449))
    {
      *(_WORD *)__int128 buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v450,  OS_SIGNPOST_INTERVAL_END,  v435,  "GallerySync_loadFacecropFaceObservationIDFromPhotos",  (const char *)&unk_100199097,  buf,  2u);
    }

    if (v432)
    {
      uint64_t v451 = mach_absolute_time();
      VCPPerformance_LogMeasurement("GallerySync_loadFacecropFaceObservationIDFromPhotos", v451 - v432);
    }

    v767 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) librarySpecificFetchOptions]);
    v804 = (void *)objc_claimAutoreleasedReturnValue( +[PHFaceCrop fetchFaceCropsWithOptions:]( &OBJC_CLASS___PHFaceCrop,  "fetchFaceCropsWithOptions:",  v767));
    if ([v804 count])
    {
      v760 = objc_autoreleasePoolPush();
      v453 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
      [v453 addBreadcrumb:@"%@ Checking %lu face crops", @"[GallerySync_FaceCrop]", objc_msgSend(v804, "count")];

      uint64_t v763 = mach_absolute_time();
      uint64_t v454 = VCPSignPostLog(v763);
      v455 = (os_log_s *)objc_claimAutoreleasedReturnValue(v454);
      os_signpost_id_t v762 = os_signpost_id_generate(v455);

      uint64_t v457 = VCPSignPostLog(v456);
      v458 = (os_log_s *)objc_claimAutoreleasedReturnValue(v457);
      v459 = v458;
      if (v762 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v458))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v459,  OS_SIGNPOST_INTERVAL_BEGIN,  v762,  "GallerySync_loadFaceCrops",  (const char *)&unk_100199097,  buf,  2u);
      }

      v771 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      v768 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      v766 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      v761 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
      v776 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 32),  "mad_allPersonsFetchOptionsWithDetectionTypes:andVerifiedTypes:",  0,  &off_1001C9360));
      if ([v804 count])
      {
        unint64_t v808 = 0LL;
        os_log_type_t v788 = VCPLogToOSLogType[3];
        os_log_type_t v828 = VCPLogToOSLogType[7];
        os_log_type_t v758 = VCPLogToOSLogType[6];
        do
        {
          v801 = objc_autoreleasePoolPush();
          uint64_t v460 = *(void *)(a1 + 56);
          if (v460)
          {
            uint64_t v461 = (*(uint64_t (**)(void))(v460 + 16))();
            if ((_DWORD)v461)
            {
              uint64_t v632 = MediaAnalysisLogLevel(v461, v462);
              if ((int)v632 >= 6)
              {
                uint64_t v634 = VCPLogInstance(v632, v633);
                v635 = (os_log_s *)objc_claimAutoreleasedReturnValue(v634);
                if (os_log_type_enabled(v635, v758))
                {
                  *(_DWORD *)__int128 buf = 138412290;
                  *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                  _os_log_impl((void *)&_mh_execute_header, v635, v758, "%@ Cancelled", buf, 0xCu);
                }
              }

              objc_autoreleasePoolPop(v801);
              break;
            }
          }

          v820 = (void *)objc_claimAutoreleasedReturnValue([v804 objectAtIndexedSubscript:v808]);
          v463 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesForFaceCrop:options:]( &OBJC_CLASS___PHFace,  "fetchFacesForFaceCrop:options:",  v820,  v805));
          v464 = (void *)objc_claimAutoreleasedReturnValue([v463 firstObject]);
          v466 = v464;
          if (v464)
          {
            if ([v464 vuObservationID])
            {
              v467 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v466 vuObservationID]));
              [v832 removeObject:v467];
            }

            id v468 = [v463 count];
            if ((unint64_t)v468 >= 2)
            {
              uint64_t v470 = MediaAnalysisLogLevel(v468, v469);
              if ((int)v470 >= 3)
              {
                uint64_t v472 = VCPLogInstance(v470, v471);
                v473 = (os_log_s *)objc_claimAutoreleasedReturnValue(v472);
                if (os_log_type_enabled(v473, v788))
                {
                  v474 = (void *)objc_claimAutoreleasedReturnValue([v820 localIdentifier]);
                  *(_DWORD *)__int128 buf = 138412546;
                  *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                  *(_WORD *)&buf[12] = 2112;
                  *(void *)&buf[14] = v474;
                  _os_log_impl( (void *)&_mh_execute_header,  v473,  v788,  "%@ Fetched multiple faces for faceCrop %@; prefer the first one with vuObservationID",
                    buf,
                    0x16u);
                }
              }

              if ([v463 count])
              {
                unint64_t v475 = 0LL;
                do
                {
                  v476 = objc_autoreleasePoolPush();
                  v477 = (void *)objc_claimAutoreleasedReturnValue([v463 objectAtIndexedSubscript:v475]);
                  if (![v466 vuObservationID] && objc_msgSend(v477, "vuObservationID"))
                  {
                    id v478 = v477;

                    v466 = v478;
                  }

                  v479 = (void *)objc_claimAutoreleasedReturnValue([v466 localIdentifier]);
                  v480 = (void *)objc_claimAutoreleasedReturnValue([v477 localIdentifier]);
                  unsigned int v481 = [v479 isEqualToString:v480];

                  uint64_t v484 = MediaAnalysisLogLevel(v482, v483);
                  if ((int)v484 >= 7)
                  {
                    uint64_t v486 = VCPLogInstance(v484, v485);
                    v487 = (os_log_s *)objc_claimAutoreleasedReturnValue(v486);
                    if (os_log_type_enabled(v487, v828))
                    {
                      v488 = (void *)objc_claimAutoreleasedReturnValue([v477 localIdentifier]);
                      id v489 = [v477 vuObservationID];
                      unsigned int v490 = [v477 trainingType];
                      *(_DWORD *)__int128 buf = 138413314;
                      v491 = @"ignored";
                      if (v481) {
                        v491 = @"preferred";
                      }
                      *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                      *(_WORD *)&buf[12] = 2112;
                      *(void *)&buf[14] = v488;
                      *(_WORD *)&buf[22] = 2048;
                      *(void *)&_BYTE buf[24] = v489;
                      *(_WORD *)&buf[32] = 1024;
                      *(_DWORD *)&buf[34] = v490;
                      *(_WORD *)&buf[38] = 2112;
                      *(void *)&buf[40] = v491;
                      _os_log_impl( (void *)&_mh_execute_header,  v487,  v828,  "%@ --> multiple face %@ (%ld)(trainingType:%d) - %@",  buf,  0x30u);
                    }
                  }

                  if ([v477 vuObservationID])
                  {
                    v492 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v477 vuObservationID]));
                    [v832 removeObject:v492];
                  }

                  objc_autoreleasePoolPop(v476);
                  ++v475;
                }

                while (v475 < (unint64_t)[v463 count]);
              }
            }

            id v796 = [v466 vuObservationID];
            if (v796)
            {
              os_log_t oslogc = (os_log_t)objc_claimAutoreleasedReturnValue( +[PHPerson fetchPersonForFaceCrop:options:]( &OBJC_CLASS___PHPerson,  "fetchPersonForFaceCrop:options:",  v820,  v776));
              if (-[os_log_s count](oslogc, "count"))
              {
                v815 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s firstObject](oslogc, "firstObject"));
                id v495 = -[os_log_s count](oslogc, "count");
                if ((unint64_t)v495 >= 2)
                {
                  uint64_t v497 = MediaAnalysisLogLevel(v495, v496);
                  if ((int)v497 >= 3)
                  {
                    uint64_t v499 = VCPLogInstance(v497, v498);
                    v500 = (os_log_s *)objc_claimAutoreleasedReturnValue(v499);
                    if (os_log_type_enabled(v500, v788))
                    {
                      v501 = (void *)objc_claimAutoreleasedReturnValue([v820 localIdentifier]);
                      *(_DWORD *)__int128 buf = 138412546;
                      *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                      *(_WORD *)&buf[12] = 2112;
                      *(void *)&buf[14] = v501;
                      _os_log_impl( (void *)&_mh_execute_header,  v500,  v788,  "%@ Fetched multiple people for faceCrop %@; prefer the first one",
                        buf,
                        0x16u);
                    }
                  }

                  if (-[os_log_s count](oslogc, "count"))
                  {
                    unint64_t v502 = 0LL;
                    do
                    {
                      v503 = objc_autoreleasePoolPush();
                      v504 = (void *)objc_claimAutoreleasedReturnValue([v815 localIdentifier]);
                      v505 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectAtIndexedSubscript:](oslogc, "objectAtIndexedSubscript:", v502));
                      v506 = (void *)objc_claimAutoreleasedReturnValue([v505 localIdentifier]);
                      unsigned int v507 = [v504 isEqualToString:v506];

                      uint64_t v510 = MediaAnalysisLogLevel(v508, v509);
                      if ((int)v510 >= 7)
                      {
                        uint64_t v512 = VCPLogInstance(v510, v511);
                        v513 = (os_log_s *)objc_claimAutoreleasedReturnValue(v512);
                        if (os_log_type_enabled(v513, v828))
                        {
                          v514 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s objectAtIndexedSubscript:]( oslogc,  "objectAtIndexedSubscript:",  v502));
                          v515 = (void *)objc_claimAutoreleasedReturnValue([v514 localIdentifier]);
                          v516 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s objectAtIndexedSubscript:]( oslogc,  "objectAtIndexedSubscript:",  v502));
                          uint64_t v517 = objc_claimAutoreleasedReturnValue([v516 mdID]);
                          v518 = (void *)v517;
                          *(_DWORD *)__int128 buf = 138413058;
                          v519 = @"ignored";
                          if (v507) {
                            v519 = @"preferred";
                          }
                          *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                          *(_WORD *)&buf[12] = 2112;
                          *(void *)&buf[14] = v515;
                          *(_WORD *)&buf[22] = 2112;
                          *(void *)&_BYTE buf[24] = v517;
                          *(_WORD *)&buf[32] = 2112;
                          *(void *)&buf[34] = v519;
                          _os_log_impl( (void *)&_mh_execute_header,  v513,  v828,  "%@ --> person %@ (%@) - %@",  buf,  0x2Au);
                        }
                      }

                      objc_autoreleasePoolPop(v503);
                      ++v502;
                    }

                    while (v502 < (unint64_t)-[os_log_s count](oslogc, "count"));
                  }
                }

                if (v792
                  || (v520 = (void *)objc_claimAutoreleasedReturnValue([v815 localIdentifier]),
                      unsigned __int8 v521 = [v784 containsObject:v520],
                      v520,
                      (v521 & 1) != 0))
                {
                  if ([v815 type] == (id)-1 && objc_msgSend(v815, "verifiedType") == (id)2)
                  {
                    uint64_t v525 = MediaAnalysisLogLevel(2LL, v524);
                    if ((int)v525 >= 6)
                    {
                      uint64_t v527 = VCPLogInstance(v525, v526);
                      v528 = (os_log_s *)objc_claimAutoreleasedReturnValue(v527);
                      if (os_log_type_enabled(v528, v758))
                      {
                        v529 = (void *)objc_claimAutoreleasedReturnValue([v815 localIdentifier]);
                        v530 = (void *)objc_claimAutoreleasedReturnValue([v815 mdID]);
                        v531 = (void *)objc_claimAutoreleasedReturnValue([v820 localIdentifier]);
                        v532 = (void *)objc_claimAutoreleasedReturnValue([v466 localIdentifier]);
                        *(_DWORD *)__int128 buf = 138413570;
                        *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                        *(_WORD *)&buf[12] = 2112;
                        *(void *)&buf[14] = v529;
                        *(_WORD *)&buf[22] = 2112;
                        *(void *)&_BYTE buf[24] = v530;
                        *(_WORD *)&buf[32] = 2112;
                        *(void *)&buf[34] = v531;
                        *(_WORD *)&buf[42] = 2112;
                        *(void *)&buf[44] = v532;
                        __int16 v880 = 2048;
                        id v881 = v796;
                        _os_log_impl( (void *)&_mh_execute_header,  v528,  v758,  "%@ Hidden Graph-Verified person %@-%@ facecrop %@ face %@-%ld",  buf,  0x3Eu);
                      }
                    }

                    v533 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v796));
                    [v761 setObject:v466 forKeyedSubscript:v533];
                  }

                  id v534 = [v466 trainingType];
                  int v536 = (int)v534;
                  switch((_DWORD)v534)
                  {
                    case 5:
LABEL_379:
                      v537 = (void *)objc_claimAutoreleasedReturnValue([v815 localIdentifier]);
                      v538 = (void *)objc_claimAutoreleasedReturnValue([v466 personLocalIdentifier]);
                      unsigned __int8 v539 = [v537 isEqualToString:v538];

                      if ((v539 & 1) == 0)
                      {
                        uint64_t v542 = MediaAnalysisLogLevel(v540, v541);
                        if ((int)v542 >= 3)
                        {
                          uint64_t v544 = VCPLogInstance(v542, v543);
                          v545 = (os_log_s *)objc_claimAutoreleasedReturnValue(v544);
                          if (os_log_type_enabled(v545, v788))
                          {
                            v546 = (void *)objc_claimAutoreleasedReturnValue([v820 localIdentifier]);
                            v547 = (void *)objc_claimAutoreleasedReturnValue([v815 localIdentifier]);
                            v548 = (void *)objc_claimAutoreleasedReturnValue([v815 mdID]);
                            v549 = (void *)objc_claimAutoreleasedReturnValue([v466 localIdentifier]);
                            v550 = (void *)objc_claimAutoreleasedReturnValue([v466 personLocalIdentifier]);
                            v551 = (void *)objc_claimAutoreleasedReturnValue([v815 localIdentifier]);
                            *(_DWORD *)__int128 buf = 138414082;
                            *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                            *(_WORD *)&buf[12] = 2112;
                            *(void *)&buf[14] = v546;
                            *(_WORD *)&buf[22] = 2112;
                            *(void *)&_BYTE buf[24] = v547;
                            *(_WORD *)&buf[32] = 2112;
                            *(void *)&buf[34] = v548;
                            *(_WORD *)&buf[42] = 2112;
                            *(void *)&buf[44] = v549;
                            __int16 v880 = 2048;
                            id v881 = v796;
                            __int16 v882 = 2112;
                            v883 = v550;
                            __int16 v884 = 2112;
                            v885 = v551;
                            _os_log_impl( (void *)&_mh_execute_header,  v545,  v788,  "%@ Mismatch confirmed faceCrop(%@).person (%@-%@) vs. faceCropFace(%@-%ld).person (%@); ta"
                              "g with faceCrop.person %@",
                              buf,
                              0x52u);
                          }
                        }
                      }

                      v552 = (void *)objc_claimAutoreleasedReturnValue([v815 localIdentifier]);
                      v791 = (void *)objc_claimAutoreleasedReturnValue( +[PHObject uuidFromLocalIdentifier:]( &OBJC_CLASS___PHObject,  "uuidFromLocalIdentifier:",  v552));

                      v554 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  v791);
                      if (v554)
                      {
                        v555 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  v796));
                        if (v536 == 1) {
                          v556 = v771;
                        }
                        else {
                          v556 = v768;
                        }
                        [v556 setObject:v554 forKeyedSubscript:v555];

                        goto LABEL_437;
                      }

                      uint64_t v617 = MediaAnalysisLogLevel(0LL, v553);
                      uint64_t v619 = VCPLogInstance(v617, v618);
                      v620 = (os_log_s *)objc_claimAutoreleasedReturnValue(v619);
                      if (os_log_type_enabled(v620, v788))
                      {
                        v621 = (void *)objc_claimAutoreleasedReturnValue([v815 localIdentifier]);
                        v622 = (void *)objc_claimAutoreleasedReturnValue([v466 localIdentifier]);
                        *(_DWORD *)__int128 buf = 138412802;
                        *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                        *(_WORD *)&buf[12] = 2112;
                        *(void *)&buf[14] = v621;
                        *(_WORD *)&buf[22] = 2112;
                        *(void *)&_BYTE buf[24] = v622;
                        _os_log_impl( (void *)&_mh_execute_header,  v620,  v788,  "%@ Invalid UUID for confirmed person %@ for training face %@",  buf,  0x20u);
                      }

                      break;
                    case 2:
                      v791 = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchRejectedPersonsForFace:options:]( &OBJC_CLASS___PHPerson,  "fetchRejectedPersonsForFace:options:",  v466,  v776));
                      v759 = (void *)objc_claimAutoreleasedReturnValue([v791 firstObject]);
                      if (v759)
                      {
                        id v575 = [v791 count];
                        if ((unint64_t)v575 >= 2)
                        {
                          uint64_t v577 = MediaAnalysisLogLevel(v575, v576);
                          if ((int)v577 >= 3)
                          {
                            uint64_t v579 = VCPLogInstance(v577, v578);
                            v580 = (os_log_s *)objc_claimAutoreleasedReturnValue(v579);
                            if (os_log_type_enabled(v580, v788))
                            {
                              v581 = (void *)objc_claimAutoreleasedReturnValue([v466 localIdentifier]);
                              *(_DWORD *)__int128 buf = 138412802;
                              *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                              *(_WORD *)&buf[12] = 2112;
                              *(void *)&buf[14] = v581;
                              *(_WORD *)&buf[22] = 2048;
                              *(void *)&_BYTE buf[24] = v796;
                              _os_log_impl( (void *)&_mh_execute_header,  v580,  v788,  "%@ Found multiple rejected people for training face %@-%lu; tag with faceCrop.rejectPerson",
                                buf,
                                0x20u);
                            }
                          }

                          if ([v791 count])
                          {
                            unint64_t v582 = 0LL;
                            do
                            {
                              v583 = objc_autoreleasePoolPush();
                              uint64_t v585 = MediaAnalysisLogLevel(v583, v584);
                              if ((int)v585 >= 7)
                              {
                                uint64_t v587 = VCPLogInstance(v585, v586);
                                v588 = (os_log_s *)objc_claimAutoreleasedReturnValue(v587);
                                if (os_log_type_enabled(v588, v828))
                                {
                                  v589 = (void *)objc_claimAutoreleasedReturnValue([v791 objectAtIndexedSubscript:v582]);
                                  v590 = (void *)objc_claimAutoreleasedReturnValue([v589 localIdentifier]);
                                  v591 = (void *)objc_claimAutoreleasedReturnValue([v791 objectAtIndexedSubscript:v582]);
                                  v592 = (void *)objc_claimAutoreleasedReturnValue([v591 mdID]);
                                  *(_DWORD *)__int128 buf = 138412802;
                                  *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                                  *(_WORD *)&buf[12] = 2112;
                                  *(void *)&buf[14] = v590;
                                  *(_WORD *)&buf[22] = 2112;
                                  *(void *)&_BYTE buf[24] = v592;
                                  _os_log_impl( (void *)&_mh_execute_header,  v588,  v828,  "%@ --> reject person %@ (%@)",  buf,  0x20u);
                                }
                              }

                              objc_autoreleasePoolPop(v583);
                              ++v582;
                            }

                            while (v582 < (unint64_t)[v791 count]);
                          }
                        }

                        v593 = (void *)objc_claimAutoreleasedReturnValue([v815 localIdentifier]);
                        v594 = (void *)objc_claimAutoreleasedReturnValue([v759 localIdentifier]);
                        unsigned __int8 v595 = [v593 isEqualToString:v594];

                        if ((v595 & 1) == 0)
                        {
                          uint64_t v598 = MediaAnalysisLogLevel(v596, v597);
                          if ((int)v598 >= 3)
                          {
                            uint64_t v600 = VCPLogInstance(v598, v599);
                            v601 = (os_log_s *)objc_claimAutoreleasedReturnValue(v600);
                            if (os_log_type_enabled(v601, v788))
                            {
                              v602 = (void *)objc_claimAutoreleasedReturnValue([v820 localIdentifier]);
                              v603 = (void *)objc_claimAutoreleasedReturnValue([v815 localIdentifier]);
                              v604 = (void *)objc_claimAutoreleasedReturnValue([v815 mdID]);
                              v605 = (void *)objc_claimAutoreleasedReturnValue([v466 localIdentifier]);
                              v606 = (void *)objc_claimAutoreleasedReturnValue([v759 localIdentifier]);
                              v607 = (void *)objc_claimAutoreleasedReturnValue([v759 mdID]);
                              *(_DWORD *)__int128 buf = 138414082;
                              *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                              *(_WORD *)&buf[12] = 2112;
                              *(void *)&buf[14] = v602;
                              *(_WORD *)&buf[22] = 2112;
                              *(void *)&_BYTE buf[24] = v603;
                              *(_WORD *)&buf[32] = 2112;
                              *(void *)&buf[34] = v604;
                              *(_WORD *)&buf[42] = 2112;
                              *(void *)&buf[44] = v605;
                              __int16 v880 = 2048;
                              id v881 = v796;
                              __int16 v882 = 2112;
                              v883 = v606;
                              __int16 v884 = 2112;
                              v885 = v607;
                              _os_log_impl( (void *)&_mh_execute_header,  v601,  v788,  "%@ Mismatch rejected faceCrop(%@).rejectPerson (%@-%@) vs. faceCropFace(%@-%ld).rejectPe rson (%@-%@); correct with faceCrop.rejectPerson",
                                buf,
                                0x52u);
                            }
                          }
                        }

                        v608 = (void *)objc_claimAutoreleasedReturnValue([v815 localIdentifier]);
                        v609 = (void *)objc_claimAutoreleasedReturnValue( +[PHObject uuidFromLocalIdentifier:]( &OBJC_CLASS___PHObject,  "uuidFromLocalIdentifier:",  v608));

                        v611 = -[NSUUID initWithUUIDString:]( objc_alloc(&OBJC_CLASS___NSUUID),  "initWithUUIDString:",  v609);
                        if (v611)
                        {
                          v612 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  v796));
                          [v766 setObject:v611 forKeyedSubscript:v612];
                          goto LABEL_424;
                        }

                        uint64_t v627 = MediaAnalysisLogLevel(0LL, v610);
                        if ((int)v627 >= 3)
                        {
                          uint64_t v629 = VCPLogInstance(v627, v628);
                          v612 = (os_log_s *)objc_claimAutoreleasedReturnValue(v629);
                          if (os_log_type_enabled(v612, v788))
                          {
                            v630 = (void *)objc_claimAutoreleasedReturnValue([v815 localIdentifier]);
                            v631 = (void *)objc_claimAutoreleasedReturnValue([v466 localIdentifier]);
                            *(_DWORD *)__int128 buf = 138413058;
                            *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                            *(_WORD *)&buf[12] = 2112;
                            *(void *)&buf[14] = v630;
                            *(_WORD *)&buf[22] = 2112;
                            *(void *)&_BYTE buf[24] = v631;
                            *(_WORD *)&buf[32] = 2048;
                            *(void *)&buf[34] = v796;
                            _os_log_impl( (void *)&_mh_execute_header,  v612,  v788,  "%@ Invalid UUID for rejected person %@ for training face %@-%ld",  buf,  0x2Au);
                          }

LABEL_424:
                        }

                        goto LABEL_438;
                      }

                      uint64_t v623 = MediaAnalysisLogLevel(0LL, v574);
                      uint64_t v625 = VCPLogInstance(v623, v624);
                      v620 = (os_log_s *)objc_claimAutoreleasedReturnValue(v625);
                      if (os_log_type_enabled(v620, v788))
                      {
                        v626 = (void *)objc_claimAutoreleasedReturnValue([v466 localIdentifier]);
                        *(_DWORD *)__int128 buf = 138412802;
                        *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                        *(_WORD *)&buf[12] = 2112;
                        *(void *)&buf[14] = v626;
                        *(_WORD *)&buf[22] = 2048;
                        *(void *)&_BYTE buf[24] = v796;
                        _os_log_impl( (void *)&_mh_execute_header,  v620,  v788,  "%@ Failed to find rejected person for training face %@-%lu",  buf,  0x20u);
                      }

                      break;
                    case 1:
                      goto LABEL_379;
                    default:
                      uint64_t v613 = MediaAnalysisLogLevel(v534, v535);
                      if ((int)v613 >= 6)
                      {
                        uint64_t v615 = VCPLogInstance(v613, v614);
                        v791 = (void *)objc_claimAutoreleasedReturnValue(v615);
                        if (os_log_type_enabled((os_log_t)v791, v758))
                        {
                          v616 = (void *)objc_claimAutoreleasedReturnValue([v466 localIdentifier]);
                          *(_DWORD *)__int128 buf = 138413058;
                          *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = v536;
                          *(_WORD *)&buf[18] = 2112;
                          *(void *)&buf[20] = v616;
                          *(_WORD *)&buf[28] = 2048;
                          *(void *)&buf[30] = v796;
                          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v791,  v758,  "%@ Ignored face training type %d for training face %@ (ObservationID %ld)",  buf,  0x26u);
                        }

                        goto LABEL_437;
                      }

                      goto LABEL_438;
                  }

                  goto LABEL_437;
                }

                uint64_t v570 = MediaAnalysisLogLevel(v522, v523);
                if ((int)v570 >= 7)
                {
                  uint64_t v572 = VCPLogInstance(v570, v571);
                  v791 = (void *)objc_claimAutoreleasedReturnValue(v572);
                  if (os_log_type_enabled((os_log_t)v791, v828))
                  {
                    v573 = (void *)objc_claimAutoreleasedReturnValue([v820 localIdentifier]);
                    *(_DWORD *)__int128 buf = 138412546;
                    *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                    *(_WORD *)&buf[12] = 2112;
                    *(void *)&buf[14] = v573;
                    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v791,  v828,  "%@ Ignoring unchanged person %@ during incremental sync",  buf,  0x16u);
                  }

LABEL_437:
                }

LABEL_438:
              }

              else
              {
                uint64_t v565 = MediaAnalysisLogLevel(0LL, v494);
                if ((int)v565 >= 3)
                {
                  uint64_t v567 = VCPLogInstance(v565, v566);
                  v568 = (os_log_s *)objc_claimAutoreleasedReturnValue(v567);
                  if (os_log_type_enabled(v568, v788))
                  {
                    v569 = (void *)objc_claimAutoreleasedReturnValue([v820 localIdentifier]);
                    *(_DWORD *)__int128 buf = 138412546;
                    *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                    *(_WORD *)&buf[12] = 2112;
                    *(void *)&buf[14] = v569;
                    _os_log_impl( (void *)&_mh_execute_header,  v568,  v788,  "%@ Failed to find person for PHFaceCrop %@; ignore",
                      buf,
                      0x16u);
                  }
                }
              }

LABEL_439:
              goto LABEL_440;
            }

            uint64_t v561 = MediaAnalysisLogLevel(0LL, v493);
            if ((int)v561 >= 3)
            {
              uint64_t v563 = VCPLogInstance(v561, v562);
              os_log_t oslogc = (os_log_t)objc_claimAutoreleasedReturnValue(v563);
              if (os_log_type_enabled(oslogc, v788))
              {
                v564 = (void *)objc_claimAutoreleasedReturnValue([v466 localIdentifier]);
                *(_DWORD *)__int128 buf = 138412546;
                *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v564;
                _os_log_impl( (void *)&_mh_execute_header,  oslogc,  v788,  "%@ FaceCrop face %@ does not have valid ObservationID; ignore",
                  buf,
                  0x16u);
              }

              goto LABEL_439;
            }
          }

          else
          {
            uint64_t v557 = MediaAnalysisLogLevel(0LL, v465);
            if ((int)v557 >= 3)
            {
              uint64_t v559 = VCPLogInstance(v557, v558);
              os_log_t oslogc = (os_log_t)objc_claimAutoreleasedReturnValue(v559);
              if (os_log_type_enabled(oslogc, v788))
              {
                v560 = (void *)objc_claimAutoreleasedReturnValue([v820 localIdentifier]);
                *(_DWORD *)__int128 buf = 138412546;
                *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v560;
                _os_log_impl( (void *)&_mh_execute_header,  oslogc,  v788,  "%@ Failed to fetch face for faceCrop %@; ignore",
                  buf,
                  0x16u);
              }

              v466 = 0LL;
              goto LABEL_439;
            }

            v466 = 0LL;
          }

LABEL_440:
          objc_autoreleasePoolPop(v801);
          ++v808;
        }

        while (v808 < (unint64_t)[v804 count]);
      }

      v636 = (char *)[v771 count];
      id v637 = [v768 count];
      unint64_t v638 = (unint64_t)[v766 count];
      uint64_t v640 = MediaAnalysisLogLevel(v638, v639);
      if ((int)v640 >= 7)
      {
        uint64_t v642 = VCPLogInstance(v640, v641);
        v643 = (os_log_s *)objc_claimAutoreleasedReturnValue(v642);
        os_log_type_t v644 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v643, v644))
        {
          id v645 = [v771 count];
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v645;
          _os_log_impl((void *)&_mh_execute_header, v643, v644, "%@ %lu user verified person tags", buf, 0x16u);
        }
      }

      uint64_t v646 = MediaAnalysisLogLevel(v640, v641);
      if ((int)v646 >= 7)
      {
        uint64_t v648 = VCPLogInstance(v646, v647);
        v649 = (os_log_s *)objc_claimAutoreleasedReturnValue(v648);
        os_log_type_t v650 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v649, v650))
        {
          id v651 = [v768 count];
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v651;
          _os_log_impl((void *)&_mh_execute_header, v649, v650, "%@ %lu graph verified person tags", buf, 0x16u);
        }
      }

      uint64_t v652 = MediaAnalysisLogLevel(v646, v647);
      if ((int)v652 >= 7)
      {
        uint64_t v654 = VCPLogInstance(v652, v653);
        v655 = (os_log_s *)objc_claimAutoreleasedReturnValue(v654);
        os_log_type_t v656 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v655, v656))
        {
          id v657 = [v766 count];
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v657;
          _os_log_impl((void *)&_mh_execute_header, v655, v656, "%@ %lu rejected person tags", buf, 0x16u);
        }
      }

      v658 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
      [v658 addBreadcrumb:@"%@ Found %lu user verified tags, %lu graph verified tags, %lu rejected tags", @"[GallerySync_FaceCrop]", objc_msgSend(v771, "count"), objc_msgSend(v768, "count"), objc_msgSend(v766, "count")];

      uint64_t v660 = VCPSignPostLog(v659);
      v661 = (os_log_s *)objc_claimAutoreleasedReturnValue(v660);
      v662 = v661;
      if (v762 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v661))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v662,  OS_SIGNPOST_INTERVAL_END,  v762,  "GallerySync_loadFaceCrops",  (const char *)&unk_100199097,  buf,  2u);
      }

      if (v763)
      {
        uint64_t v663 = mach_absolute_time();
        VCPPerformance_LogMeasurement("GallerySync_loadFaceCrops", v663 - v763);
      }

      os_log_t oslogd = (os_log_t)mach_absolute_time();
      uint64_t v664 = VCPSignPostLog(oslogd);
      v665 = (os_log_s *)objc_claimAutoreleasedReturnValue(v664);
      os_signpost_id_t v666 = os_signpost_id_generate(v665);

      uint64_t v668 = VCPSignPostLog(v667);
      v669 = (os_log_s *)objc_claimAutoreleasedReturnValue(v668);
      v670 = v669;
      if (v666 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v669))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v670,  OS_SIGNPOST_INTERVAL_BEGIN,  v666,  "GallerySync_tagFaceCrops",  (const char *)&unk_100199097,  buf,  2u);
      }

      v671 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
      v672 = &v636[(void)v637 + v638];
      [v671 addBreadcrumb:@"%@ Tagging %lu face crops", @"[GallerySync_FaceCrop]", v672];

      v845[0] = _NSConcreteStackBlock;
      v845[1] = 3221225472LL;
      v845[2] = sub_100116E18;
      v845[3] = &unk_1001BDDD0;
      id v673 = v761;
      id v846 = v673;
      id v854 = *(id *)(a1 + 56);
      v847 = @"[GallerySync_FaceCrop]";
      id v848 = *(id *)(a1 + 32);
      id v674 = v771;
      id v849 = v674;
      id v675 = v768;
      id v850 = v675;
      id v676 = v766;
      id v851 = v676;
      id v852 = v804;
      v855 = v672;
      id v853 = v832;
      v677 = objc_retainBlock(v845);
      v678 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
      [v678 addBreadcrumb:@"%@ Finished tagging %lu face crops", @"[GallerySync_FaceCrop]", v672];

      v679 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) gallery]);
      id v844 = 0LL;
      unsigned __int8 v680 = [v679 mutateAndReturnError:&v844 handler:v677];
      id v681 = v844;

      if ((v680 & 1) == 0)
      {
        uint64_t v682 = MediaAnalysisLogLevel(v682, v683);
        if ((int)v682 >= 3)
        {
          uint64_t v685 = VCPLogInstance(v682, v684);
          v686 = (os_log_s *)objc_claimAutoreleasedReturnValue(v685);
          os_log_type_t v687 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v686, v687))
          {
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = @"[GallerySync_FaceCrop]";
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v681;
            _os_log_impl( (void *)&_mh_execute_header,  v686,  v687,  "%@ Failed to tag training faces in Gallery - %@",  buf,  0x16u);
          }
        }
      }

      uint64_t v688 = VCPSignPostLog(v682);
      v689 = (os_log_s *)objc_claimAutoreleasedReturnValue(v688);
      v690 = v689;
      if (v666 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v689))
      {
        *(_WORD *)__int128 buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v690,  OS_SIGNPOST_INTERVAL_END,  v666,  "GallerySync_tagFaceCrops",  (const char *)&unk_100199097,  buf,  2u);
      }

      if (oslogd)
      {
        uint64_t v691 = mach_absolute_time();
        VCPPerformance_LogMeasurement("GallerySync_tagFaceCrops", v691 - (void)oslogd);
      }

      objc_autoreleasePoolPop(v760);
    }

    if (v792)
    {
      if (v781)
      {
        [v799 setChangeToken:v781 forTaskID:3 andChangeTokenType:3];
        id v692 = [v799 commit];
        uint64_t v694 = MediaAnalysisLogLevel(v692, v693);
        uint64_t v696 = VCPLogInstance(v694, v695);
        v697 = (os_log_s *)objc_claimAutoreleasedReturnValue(v696);
        os_log_type_t v698 = VCPLogToOSLogType[6];
        if (!os_log_type_enabled(v697, v698)) {
          goto LABEL_497;
        }
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v833;
        v699 = "%@ Set PHPersistentChangeToken for Gallery sync";
      }

      else
      {
        uint64_t v705 = MediaAnalysisLogLevel(v799, v452);
        uint64_t v707 = VCPLogInstance(v705, v706);
        v697 = (os_log_s *)objc_claimAutoreleasedReturnValue(v707);
        os_log_type_t v698 = VCPLogToOSLogType[5];
        if (!os_log_type_enabled(v697, v698)) {
          goto LABEL_497;
        }
        *(_DWORD *)__int128 buf = 138412290;
        *(void *)&uint8_t buf[4] = v833;
        v699 = "%@ Full-scan returned without change token; skip setting";
      }
    }

    else if (v780)
    {
      [v799 updateChangeToken:v780 forTaskID:3 andChangeTokenType:3];
      id v700 = [v799 commit];
      uint64_t v702 = MediaAnalysisLogLevel(v700, v701);
      uint64_t v704 = VCPLogInstance(v702, v703);
      v697 = (os_log_s *)objc_claimAutoreleasedReturnValue(v704);
      os_log_type_t v698 = VCPLogToOSLogType[6];
      if (!os_log_type_enabled(v697, v698)) {
        goto LABEL_497;
      }
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v833;
      v699 = "%@ Updated PHPersistentChangeToken for Gallery sync";
    }

    else
    {
      uint64_t v708 = MediaAnalysisLogLevel(v799, v452);
      uint64_t v710 = VCPLogInstance(v708, v709);
      v697 = (os_log_s *)objc_claimAutoreleasedReturnValue(v710);
      os_log_type_t v698 = VCPLogToOSLogType[5];
      if (!os_log_type_enabled(v697, v698))
      {
LABEL_497:

LABEL_498:
        *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 1;
        *(_BYTE *)(*(void *)(a1 + 40) + 16LL) = 1;
        id v711 = [v799 valueForKey:MADPersonProcessingStatusKey];
        v712 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) gallery]);
        unsigned __int8 v713 = [v712 ready];
        if (v711) {
          char v714 = 1;
        }
        else {
          char v714 = v713;
        }

        if ((v714 & 1) != 0)
        {
          uint64_t v717 = MediaAnalysisLogLevel(v715, v716);
          uint64_t v719 = VCPLogInstance(v717, v718);
          v720 = (os_log_s *)objc_claimAutoreleasedReturnValue(v719);
          os_log_type_t v721 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v720, v721))
          {
            uint64_t v722 = MADPersonProcessingStatusDescription(v711);
            id v723 = (id)objc_claimAutoreleasedReturnValue(v722);
            *(_DWORD *)__int128 buf = 138412546;
            *(void *)&uint8_t buf[4] = v833;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v723;
            _os_log_impl( (void *)&_mh_execute_header,  v720,  v721,  "%@ Gallery is ready (Person processing state: %@); skip updating",
              buf,
              0x16u);
          }

LABEL_521:
LABEL_522:
          uint64_t v752 = VCPSignPostLog(-[VCPTimeMeasurement stop](v793, "stop"));
          v753 = (os_log_s *)objc_claimAutoreleasedReturnValue(v752);
          v754 = v753;
          if (spid - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v753))
          {
            *(_WORD *)__int128 buf = 0;
            _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v754,  OS_SIGNPOST_INTERVAL_END,  spid,  "GallerySync_EndToEnd",  (const char *)&unk_100199097,  buf,  2u);
          }

          if (v775)
          {
            uint64_t v755 = mach_absolute_time();
            VCPPerformance_LogMeasurement("GallerySync_EndToEnd", v755 - v775);
          }

          v756 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
          [v756 accumulateInt64Value:1 forField:@"NumberOfFaceVUSyncEvents" andEvent:@"com.apple.mediaanalysisd.FaceAnalysisRunSession"];

          v757 = (void *)objc_claimAutoreleasedReturnValue( +[VCPMADCoreAnalyticsManager sharedManager]( &OBJC_CLASS___VCPMADCoreAnalyticsManager,  "sharedManager"));
          -[VCPTimeMeasurement elapsedTimeSeconds](v793, "elapsedTimeSeconds");
          objc_msgSend( v757,  "accumulateDoubleValue:forField:andEvent:",  @"TotalAnalyzingTimeInSeconds",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");

          goto LABEL_528;
        }

        uint64_t v724 = VCPSignPostLog(v715);
        v725 = (os_log_s *)objc_claimAutoreleasedReturnValue(v724);
        os_signpost_id_t v726 = os_signpost_id_generate(v725);

        uint64_t v728 = VCPSignPostLog(v727);
        v729 = (os_log_s *)objc_claimAutoreleasedReturnValue(v728);
        v730 = v729;
        if (v726 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v729))
        {
          *(_WORD *)__int128 buf = 0;
          _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v730,  OS_SIGNPOST_INTERVAL_BEGIN,  v726,  "GallerySync_Update",  (const char *)&unk_100199097,  buf,  2u);
        }

        v731 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
        [v731 addBreadcrumb:@"%@ Updating VU Gallery", v833];

        v732 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) gallery]);
        id v843 = 0LL;
        v840[0] = _NSConcreteStackBlock;
        v840[1] = 3221225472LL;
        v840[2] = sub_10011847C;
        v840[3] = &unk_1001BDDF8;
        v733 = v833;
        v841 = v733;
        id v842 = *(id *)(a1 + 56);
        unsigned int v734 = [v732 updateAndReturnError:&v843 progressHandler:v840];
        v720 = (os_log_s *)v843;

        v735 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
        [v735 addBreadcrumb:@"%@ Finished updating VU Gallery", v733];

        uint64_t v738 = MediaAnalysisLogLevel(v736, v737);
        if (v734)
        {
          uint64_t v740 = VCPLogInstance(v738, v739);
          v741 = (os_log_s *)objc_claimAutoreleasedReturnValue(v740);
          os_log_type_t v742 = VCPLogToOSLogType[7];
          if (!os_log_type_enabled(v741, v742)) {
            goto LABEL_516;
          }
          *(_DWORD *)__int128 buf = 138412290;
          *(void *)&uint8_t buf[4] = v733;
          v743 = "%@ Gallery updated!";
          v744 = v741;
          os_log_type_t v745 = v742;
          uint32_t v746 = 12;
        }

        else
        {
          uint64_t v747 = VCPLogInstance(v738, v739);
          v741 = (os_log_s *)objc_claimAutoreleasedReturnValue(v747);
          os_log_type_t v748 = VCPLogToOSLogType[3];
          if (!os_log_type_enabled(v741, v748))
          {
LABEL_516:

LABEL_517:
            uint64_t v749 = VCPSignPostLog(v738);
            v750 = (os_log_s *)objc_claimAutoreleasedReturnValue(v749);
            v751 = v750;
            if (v726 - 1 < 0xFFFFFFFFFFFFFFFELL && os_signpost_enabled(v750))
            {
              *(_WORD *)__int128 buf = 0;
              _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v751,  OS_SIGNPOST_INTERVAL_END,  v726,  "GallerySync_Update",  (const char *)&unk_100199097,  buf,  2u);
            }

            goto LABEL_521;
          }

          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v733;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v720;
          v743 = "%@ Failed to update gallery - %@";
          v744 = v741;
          os_log_type_t v745 = v748;
          uint32_t v746 = 22;
        }

        _os_log_impl((void *)&_mh_execute_header, v744, v745, v743, buf, v746);
        goto LABEL_516;
      }

      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v833;
      v699 = "%@ Incremental-scan returned without change token; skip updating";
    }

    _os_log_impl((void *)&_mh_execute_header, v697, v698, v699, buf, 0xCu);
    goto LABEL_497;
  }

  uint64_t v5 = MediaAnalysisLogLevel(v2, v3);
  if ((int)v5 >= 7)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v8, v9))
    {
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v833;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Current session already synced; skip re-syncing", buf, 0xCu);
    }

    uint64_t v4 = a1;
  }

  *(_BYTE *)(*(void *)(*(void *)(v4 + 64) + 8LL) + 24LL) = 1;
LABEL_534:
}

void sub_10011630C(_Unwind_Exception *a1)
{
}

uint64_t sub_1001163FC(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v62 = a3;
  id v61 = a4;
  id v10 = a5;
  ++*(void *)(*(void *)(a1[8] + 8LL) + 24LL);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 stringValue]);
  uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[GallerySync][%@][%lu]",  v11,  *(void *)(*(void *)(a1[8] + 8LL) + 24LL)));

  uint64_t v14 = MediaAnalysisLogLevel(v12, v13);
  if ((int)v14 >= 7)
  {
    uint64_t v16 = VCPLogInstance(v14, v15);
    os_log_type_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    os_log_type_t v18 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v17, v18))
    {
      *(_DWORD *)__int128 buf = 138412546;
      BOOL v70 = v64;
      __int16 v71 = 2048;
      id v72 = [v10 count];
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "%@ Checking Photos with %lu face observations ... ",  buf,  0x16u);
    }
  }

  id v63 = v9;
  if ([v10 count])
  {
    unint64_t v19 = 0LL;
    os_log_type_t type = VCPLogToOSLogType[7];
    double v20 = (void **)&ADClientSetValueForScalarKey_ptr;
    uint64_t v65 = v10;
    while (1)
    {
      uint64_t v21 = objc_autoreleasePoolPush();
      uint64_t v22 = a1[7];
      if (v22)
      {
        uint64_t v23 = (*(uint64_t (**)(void))(v22 + 16))();
        if ((_DWORD)v23) {
          break;
        }
      }

      BOOL v25 = (char *)[v10 count];
      else {
        uint64_t v27 = (uint64_t)&v25[-v19];
      }
      uint64_t v28 = MediaAnalysisLogLevel(v25, v26);
      if ((int)v28 >= 7)
      {
        uint64_t v30 = VCPLogInstance(v28, v29);
        id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)__int128 buf = 138413058;
          BOOL v70 = v64;
          __int16 v71 = 2048;
          id v72 = (id)v27;
          __int16 v73 = 2048;
          unint64_t v74 = v19;
          __int16 v75 = 2048;
          unint64_t v76 = v27 + v19;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  type,  "%@ Checking Photos with %lu faceObservationIDs[%lu:%lu]",  buf,  0x2Au);
        }
      }

      uint64_t v67 = v27;
      context = v21;
      os_log_type_t v32 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "subarrayWithRange:", v19, v27));
      id v33 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesWithVuObservationIDs:options:]( &OBJC_CLASS___PHFace,  "fetchFacesWithVuObservationIDs:options:",  v32,  a1[5]));
      id v34 = [v33 count];
      id v35 = [v32 count];
      if (v34 != v35)
      {
        uint64_t v37 = MediaAnalysisLogLevel(v35, v36);
        if ((int)v37 >= 7)
        {
          uint64_t v39 = VCPLogInstance(v37, v38);
          uint64_t v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
          if (os_log_type_enabled(v40, type))
          {
            id v41 = [v33 count];
            id v42 = [v32 count];
            *(_DWORD *)__int128 buf = 138412802;
            BOOL v70 = v64;
            __int16 v71 = 2048;
            id v72 = v41;
            __int16 v73 = 2048;
            unint64_t v74 = (unint64_t)v42;
            _os_log_impl( (void *)&_mh_execute_header,  v40,  type,  "%@ Found %lu out of %lu faces from Photos",  buf,  0x20u);
          }
        }
      }

      uint64_t v43 = a1;
      uint64_t v44 = v20;
      os_log_type_t v45 = (void *)objc_claimAutoreleasedReturnValue([v20[259] set]);
      if ([v33 count])
      {
        unint64_t v46 = 0LL;
        do
        {
          uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue([v33 objectAtIndexedSubscript:v46]);
          uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v47 vuObservationID]));
          [v45 addObject:v48];

          ++v46;
        }

        while (v46 < (unint64_t)[v33 count]);
      }

      double v20 = v44;
      unsigned int v49 = (void *)objc_claimAutoreleasedReturnValue([v44[259] setWithArray:v32]);
      [v49 minusSet:v45];
      a1 = v43;
      [*(id *)(*(void *)(v43[9] + 8) + 40) unionSet:v49];
      [(id)v43[6] minusSet:v45];
      v19 += v67;

      objc_autoreleasePoolPop(context);
      id v10 = v65;
    }

    uint64_t v54 = MediaAnalysisLogLevel(v23, v24);
    uint64_t v53 = v62;
    uint64_t v52 = v63;
    if ((int)v54 >= 6)
    {
      uint64_t v56 = VCPLogInstance(v54, v55);
      uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
      os_log_type_t v58 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v57, v58))
      {
        os_log_type_t v59 = (void *)a1[4];
        *(_DWORD *)__int128 buf = 138412290;
        BOOL v70 = v59;
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "%@ Cancelled", buf, 0xCu);
      }
    }

    objc_autoreleasePoolPop(v21);
    uint64_t v51 = 0LL;
  }

  else
  {
LABEL_25:
    uint64_t v50 = a1[7];
    if (v50) {
      uint64_t v51 = (*(unsigned int (**)(void))(v50 + 16))() ^ 1;
    }
    else {
      uint64_t v51 = 1LL;
    }
    uint64_t v53 = v62;
    uint64_t v52 = v63;
  }

  return v51;
}

uint64_t sub_1001168F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v23 = 0LL;
  uint64_t v24 = &v23;
  uint64_t v25 = 0x2020000000LL;
  uint64_t v26 = 0LL;
  uint64_t v4 = *(void **)(a1 + 32);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_100116AB4;
  v17[3] = &unk_1001BDCE0;
  id v20 = *(id *)(a1 + 48);
  id v18 = *(id *)(a1 + 40);
  char v22 = *(_BYTE *)(a1 + 64);
  id v5 = v3;
  id v19 = v5;
  uint64_t v21 = &v23;
  id v6 = [v4 enumerateKeysAndObjectsUsingBlock:v17];
  uint64_t v8 = MediaAnalysisLogLevel(v6, v7);
  if ((int)v8 >= 7)
  {
    uint64_t v10 = VCPLogInstance(v8, v9);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    os_log_type_t v12 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = v24[3];
      uint64_t v15 = *(void *)(a1 + 56);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v28 = v13;
      __int16 v29 = 2048;
      uint64_t v30 = v14;
      __int16 v31 = 2048;
      uint64_t v32 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "%@ Tagged %lu (out of %lu) reject observation(s) in Gallery",  buf,  0x20u);
    }
  }

  _Block_object_dispose(&v23, 8);
  return 0LL;
}

void sub_100116A90( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100116AB4(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = objc_autoreleasePoolPush();
  uint64_t v10 = *(void *)(a1 + 48);
  if (v10 && (uint64_t v11 = (*(uint64_t (**)(void))(v10 + 16))(), (_DWORD)v11))
  {
    uint64_t v13 = MediaAnalysisLogLevel(v11, v12);
    if ((int)v13 >= 6)
    {
      uint64_t v15 = VCPLogInstance(v13, v14);
      uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
      os_log_type_t v17 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = *(void *)(a1 + 32);
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v51 = v18;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%@ Cancelled", buf, 0xCu);
      }
    }

    *a4 = 1;
  }

  else
  {
    if (*(_BYTE *)(a1 + 64))
    {
      id v19 = *(void **)(a1 + 40);
      id v49 = 0LL;
      objc_msgSend(v19, "untag:error:", objc_msgSend(v7, "integerValue"), &v49);
      id v20 = v49;
    }

    else
    {
      id v20 = 0LL;
    }

    uint64_t v40 = v9;
    id v41 = v8;
    __int128 v47 = 0u;
    __int128 v48 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    id v21 = v8;
    id v22 = [v21 countByEnumeratingWithState:&v45 objects:v58 count:16];
    if (v22)
    {
      id v23 = v22;
      uint64_t v24 = *(void *)v46;
      os_log_type_t type = VCPLogToOSLogType[7];
      os_log_type_t v43 = VCPLogToOSLogType[3];
      do
      {
        for (unint64_t i = 0LL; i != v23; unint64_t i = (char *)i + 1)
        {
          uint64_t v26 = v20;
          if (*(void *)v46 != v24) {
            objc_enumerationMutation(v21);
          }
          uint64_t v27 = *(void *)(*((void *)&v45 + 1) + 8LL * (void)i);
          uint64_t v28 = *(void **)(a1 + 40);
          id v29 = objc_msgSend(v7, "integerValue", v40, v41);
          id v44 = v20;
          LOBYTE(v2_Block_object_dispose(va, 8) = [v28 tag:v29 with:v27 type:1 error:&v44];
          id v20 = v44;

          uint64_t v32 = MediaAnalysisLogLevel(v30, v31);
          if ((v28 & 1) != 0)
          {
            if ((int)v32 >= 7)
            {
              uint64_t v34 = VCPLogInstance(v32, v33);
              id v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
              if (os_log_type_enabled(v35, type))
              {
                uint64_t v36 = *(void *)(a1 + 32);
                *(_DWORD *)__int128 buf = 138412802;
                uint64_t v51 = v36;
                __int16 v52 = 2112;
                id v53 = v7;
                __int16 v54 = 2112;
                uint64_t v55 = v27;
                _os_log_impl( (void *)&_mh_execute_header,  v35,  type,  "%@ Tagged rejecting face %@ to person %@",  buf,  0x20u);
              }
            }

            ++*(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);
          }

          else if ((int)v32 >= 3)
          {
            uint64_t v37 = VCPLogInstance(v32, v33);
            uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
            if (os_log_type_enabled(v38, v43))
            {
              uint64_t v39 = *(void *)(a1 + 32);
              *(_DWORD *)__int128 buf = 138413058;
              uint64_t v51 = v39;
              __int16 v52 = 2112;
              id v53 = v7;
              __int16 v54 = 2112;
              uint64_t v55 = v27;
              __int16 v56 = 2112;
              id v57 = v20;
              _os_log_impl( (void *)&_mh_execute_header,  v38,  v43,  "%@ Failed to tag rejecting face %@ to person %@ - %@",  buf,  0x2Au);
            }
          }
        }

        id v23 = [v21 countByEnumeratingWithState:&v45 objects:v58 count:16];
      }

      while (v23);
    }

    uint64_t v9 = v40;
    id v8 = v41;
  }

  objc_autoreleasePoolPop(v9);
}

uint64_t sub_100116E18(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v97 = 0LL;
  uint64_t v98 = &v97;
  uint64_t v99 = 0x2020000000LL;
  uint64_t v100 = 0LL;
  uint64_t v93 = 0LL;
  id v94 = &v93;
  uint64_t v95 = 0x2020000000LL;
  uint64_t v96 = 0LL;
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v4 = objc_autoreleasePoolPush();
    v87[0] = _NSConcreteStackBlock;
    v87[1] = 3221225472LL;
    v87[2] = sub_1001174B0;
    v87[3] = &unk_1001BDD58;
    id v88 = *(id *)(a1 + 32);
    id v91 = *(id *)(a1 + 96);
    id v89 = *(id *)(a1 + 40);
    id v90 = v3;
    uint64_t v92 = &v93;
    id v5 = objc_retainBlock(v87);
    id v6 = *(void **)(a1 + 48);
    id v86 = 0LL;
    unsigned int v7 = [v6 performChangesAndWait:v5 error:&v86];
    id v8 = v86;
    uint64_t v10 = v8;
    if (v7)
    {
      uint64_t v11 = MediaAnalysisLogLevel(v8, v9);
      if ((int)v11 >= 7)
      {
        uint64_t v13 = VCPLogInstance(v11, v12);
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
        os_log_type_t v15 = VCPLogToOSLogType[7];
        if (os_log_type_enabled(v14, v15))
        {
          uint64_t v65 = v94[3];
          uint64_t v16 = *(void *)(a1 + 40);
          id v17 = [*(id *)(a1 + 32) count];
          *(_DWORD *)__int128 buf = 138412802;
          *(void *)&uint8_t buf[4] = v16;
          *(_WORD *)&buf[12] = 2048;
          *(void *)&buf[14] = v65;
          *(_WORD *)&buf[22] = 2048;
          id v108 = v17;
          uint64_t v18 = "%@ Remove %lu (out of %lu) observations for hidden Graph-Verified person";
          id v19 = v14;
          os_log_type_t v20 = v15;
          uint32_t v21 = 32;
LABEL_9:
          _os_log_impl((void *)&_mh_execute_header, v19, v20, v18, buf, v21);
          goto LABEL_10;
        }

        goto LABEL_10;
      }
    }

    else
    {
      uint64_t v22 = MediaAnalysisLogLevel(v8, v9);
      if ((int)v22 >= 3)
      {
        uint64_t v24 = VCPLogInstance(v22, v23);
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
        os_log_type_t v25 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v14, v25))
        {
          uint64_t v26 = *(void *)(a1 + 40);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v26;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v10;
          uint64_t v18 = "%@ Failed to remove observations for hidden Graph-Verified person - %@";
          id v19 = v14;
          os_log_type_t v20 = v25;
          uint32_t v21 = 22;
          goto LABEL_9;
        }

void sub_100117448( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

void sub_1001174B0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_100117550;
  v5[3] = &unk_1001BDD30;
  id v8 = *(id *)(a1 + 56);
  id v6 = *(id *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 64);
  id v7 = v3;
  uint64_t v9 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_100117550(void *a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a1[6];
  if (!v9 || (uint64_t v10 = (*(uint64_t (**)(void))(v9 + 16))(), !(_DWORD)v10))
  {
    id v18 = [v7 integerValue];
    if (v18)
    {
      if (v8)
      {
        os_log_type_t v20 = (void *)a1[5];
        id v44 = 0LL;
        unsigned int v21 = objc_msgSend(v20, "remove:error:", objc_msgSend(v7, "integerValue"), &v44);
        id v22 = v44;
        uint64_t v24 = MediaAnalysisLogLevel(v22, v23);
        if (v21)
        {
          if ((int)v24 >= 7)
          {
            uint64_t v26 = VCPLogInstance(v24, v25);
            uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
            os_log_type_t v28 = VCPLogToOSLogType[7];
            if (os_log_type_enabled(v27, v28))
            {
              uint64_t v29 = a1[4];
              *(_DWORD *)__int128 buf = 138412546;
              uint64_t v46 = v29;
              __int16 v47 = 2112;
              id v48 = v7;
              _os_log_impl((void *)&_mh_execute_header, v27, v28, "%@ Removing %@ ...", buf, 0x16u);
            }
          }

          id v30 = (void *)objc_claimAutoreleasedReturnValue( +[PHFaceChangeRequest changeRequestForFace:]( &OBJC_CLASS___PHFaceChangeRequest,  "changeRequestForFace:",  v8));
          [v30 setVuObservationID:-1];
          ++*(void *)(*(void *)(a1[7] + 8LL) + 24LL);
        }

        else
        {
          uint64_t v41 = VCPLogInstance(v24, v25);
          id v30 = (void *)objc_claimAutoreleasedReturnValue(v41);
          os_log_type_t v42 = VCPLogToOSLogType[3];
          if (os_log_type_enabled((os_log_t)v30, v42))
          {
            uint64_t v43 = a1[4];
            *(_DWORD *)__int128 buf = 138412802;
            uint64_t v46 = v43;
            __int16 v47 = 2112;
            id v48 = v7;
            __int16 v49 = 2112;
            id v50 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v30,  v42,  "%@ Failed to remove observationID %@ from Gallery - %@",  buf,  0x20u);
          }
        }

LABEL_27:
        goto LABEL_28;
      }

      uint64_t v37 = MediaAnalysisLogLevel(v18, v19);
      uint64_t v39 = VCPLogInstance(v37, v38);
      id v22 = (id)objc_claimAutoreleasedReturnValue(v39);
      os_log_type_t v34 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled((os_log_t)v22, v34)) {
        goto LABEL_27;
      }
      uint64_t v40 = a1[4];
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v46 = v40;
      uint64_t v36 = "%@ invalid facecrop face for hidden person";
    }

    else
    {
      uint64_t v31 = MediaAnalysisLogLevel(0LL, v19);
      uint64_t v33 = VCPLogInstance(v31, v32);
      id v22 = (id)objc_claimAutoreleasedReturnValue(v33);
      os_log_type_t v34 = VCPLogToOSLogType[3];
      if (!os_log_type_enabled((os_log_t)v22, v34)) {
        goto LABEL_27;
      }
      uint64_t v35 = a1[4];
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v46 = v35;
      uint64_t v36 = "%@ vuObservationID = 0 for face to hidden person";
    }

    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v22, v34, v36, buf, 0xCu);
    goto LABEL_27;
  }

  uint64_t v12 = MediaAnalysisLogLevel(v10, v11);
  if ((int)v12 >= 6)
  {
    uint64_t v14 = VCPLogInstance(v12, v13);
    os_log_type_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    os_log_type_t v16 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = a1[4];
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v46 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%@ Cancelled", buf, 0xCu);
    }
  }

  *a4 = 1;
LABEL_28:
}

void sub_100117898(void *a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = objc_autoreleasePoolPush();
  uint64_t v10 = a1[6];
  if (!v10 || (uint64_t v11 = (*(uint64_t (**)(void))(v10 + 16))(), !(_DWORD)v11))
  {
    id v19 = [v7 integerValue];
    if (v19)
    {
      id v21 = v19;
      id v22 = (void *)a1[5];
      id v41 = 0LL;
      unsigned __int8 v23 = [v22 tag:v21 with:v8 type:0 error:&v41];
      uint64_t v24 = (os_log_s *)v41;
      uint64_t v26 = MediaAnalysisLogLevel(v24, v25);
      if ((v23 & 1) != 0)
      {
        if ((int)v26 >= 7)
        {
          uint64_t v28 = VCPLogInstance(v26, v27);
          uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
          os_log_type_t v30 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = a1[4];
            *(_DWORD *)__int128 buf = 138412802;
            uint64_t v43 = v31;
            __int16 v44 = 2048;
            id v45 = v21;
            __int16 v46 = 2112;
            id v47 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "%@ Tagged user confirmed training face %ld to person %@",  buf,  0x20u);
          }
        }

        ++*(void *)(*(void *)(a1[7] + 8LL) + 24LL);
      }

      else if ((int)v26 >= 3)
      {
        uint64_t v37 = VCPLogInstance(v26, v27);
        uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        os_log_type_t v39 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = a1[4];
          *(_DWORD *)__int128 buf = 138413058;
          uint64_t v43 = v40;
          __int16 v44 = 2048;
          id v45 = v21;
          __int16 v46 = 2112;
          id v47 = v8;
          __int16 v48 = 2112;
          __int16 v49 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "%@ Failed to tag user confirmed training face %ld to person %@ - %@",  buf,  0x2Au);
        }
      }
    }

    else
    {
      uint64_t v32 = MediaAnalysisLogLevel(0LL, v20);
      uint64_t v34 = VCPLogInstance(v32, v33);
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      os_log_type_t v35 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v24, v35))
      {
        uint64_t v36 = a1[4];
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v43 = v36;
        __int16 v44 = 2112;
        id v45 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  v35,  "%@ vuObservationID = 0 for user confirmed training face to person %@",  buf,  0x16u);
      }
    }

    goto LABEL_23;
  }

  uint64_t v13 = MediaAnalysisLogLevel(v11, v12);
  if ((int)v13 >= 6)
  {
    uint64_t v15 = VCPLogInstance(v13, v14);
    os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    os_log_type_t v17 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = a1[4];
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v43 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%@ Cancelled", buf, 0xCu);
    }
  }

  *a4 = 1;
LABEL_23:
  objc_autoreleasePoolPop(v9);
}

void sub_100117B9C(void *a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = objc_autoreleasePoolPush();
  uint64_t v10 = a1[6];
  if (!v10 || (uint64_t v11 = (*(uint64_t (**)(void))(v10 + 16))(), !(_DWORD)v11))
  {
    id v19 = [v7 integerValue];
    if (v19)
    {
      id v21 = v19;
      id v22 = (void *)a1[5];
      id v41 = 0LL;
      unsigned __int8 v23 = [v22 tag:v21 with:v8 type:2 error:&v41];
      uint64_t v24 = (os_log_s *)v41;
      uint64_t v26 = MediaAnalysisLogLevel(v24, v25);
      if ((v23 & 1) != 0)
      {
        if ((int)v26 >= 7)
        {
          uint64_t v28 = VCPLogInstance(v26, v27);
          uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
          os_log_type_t v30 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v29, v30))
          {
            uint64_t v31 = a1[4];
            *(_DWORD *)__int128 buf = 138412802;
            uint64_t v43 = v31;
            __int16 v44 = 2048;
            id v45 = v21;
            __int16 v46 = 2112;
            id v47 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "%@ Tagged graph confirmed training face %ld to person %@",  buf,  0x20u);
          }
        }

        ++*(void *)(*(void *)(a1[7] + 8LL) + 24LL);
      }

      else if ((int)v26 >= 3)
      {
        uint64_t v37 = VCPLogInstance(v26, v27);
        uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        os_log_type_t v39 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = a1[4];
          *(_DWORD *)__int128 buf = 138413058;
          uint64_t v43 = v40;
          __int16 v44 = 2048;
          id v45 = v21;
          __int16 v46 = 2112;
          id v47 = v8;
          __int16 v48 = 2112;
          __int16 v49 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "%@ Failed to tag graph confirmed training face %ld to person %@ - %@",  buf,  0x2Au);
        }
      }
    }

    else
    {
      uint64_t v32 = MediaAnalysisLogLevel(0LL, v20);
      uint64_t v34 = VCPLogInstance(v32, v33);
      uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      os_log_type_t v35 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v24, v35))
      {
        uint64_t v36 = a1[4];
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v43 = v36;
        __int16 v44 = 2112;
        id v45 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v24,  v35,  "%@ vuObservationID = 0 for graph confirmed training face to person %@",  buf,  0x16u);
      }
    }

    goto LABEL_23;
  }

  uint64_t v13 = MediaAnalysisLogLevel(v11, v12);
  if ((int)v13 >= 6)
  {
    uint64_t v15 = VCPLogInstance(v13, v14);
    os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    os_log_type_t v17 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = a1[4];
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v43 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%@ Cancelled", buf, 0xCu);
    }
  }

  *a4 = 1;
LABEL_23:
  objc_autoreleasePoolPop(v9);
}

void sub_100117EA0(void *a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = objc_autoreleasePoolPush();
  uint64_t v10 = a1[6];
  if (!v10 || (uint64_t v11 = (*(uint64_t (**)(void))(v10 + 16))(), !(_DWORD)v11))
  {
    id v19 = [v7 integerValue];
    if (v19)
    {
      id v21 = v19;
      id v22 = (void *)a1[5];
      id v45 = 0LL;
      [v22 untag:v21 error:&v45];
      id v23 = v45;
      uint64_t v24 = (void *)a1[5];
      id v44 = v23;
      unsigned __int8 v25 = [v24 tag:v21 with:v8 type:1 error:&v44];
      uint64_t v26 = (os_log_s *)v44;

      uint64_t v29 = MediaAnalysisLogLevel(v27, v28);
      if ((v25 & 1) != 0)
      {
        if ((int)v29 >= 7)
        {
          uint64_t v31 = VCPLogInstance(v29, v30);
          uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
          os_log_type_t v33 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v32, v33))
          {
            uint64_t v34 = a1[4];
            *(_DWORD *)__int128 buf = 138412802;
            uint64_t v47 = v34;
            __int16 v48 = 2048;
            id v49 = v21;
            __int16 v50 = 2112;
            id v51 = v8;
            _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "%@ Tagged rejected training face %ld to person %@",  buf,  0x20u);
          }
        }

        ++*(void *)(*(void *)(a1[7] + 8LL) + 24LL);
      }

      else if ((int)v29 >= 3)
      {
        uint64_t v40 = VCPLogInstance(v29, v30);
        id v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
        os_log_type_t v42 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = a1[4];
          *(_DWORD *)__int128 buf = 138413058;
          uint64_t v47 = v43;
          __int16 v48 = 2048;
          id v49 = v21;
          __int16 v50 = 2112;
          id v51 = v8;
          __int16 v52 = 2112;
          uint64_t v53 = v26;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "%@ Failed to tag rejected training face %ld to person %@ - %@",  buf,  0x2Au);
        }
      }
    }

    else
    {
      uint64_t v35 = MediaAnalysisLogLevel(0LL, v20);
      uint64_t v37 = VCPLogInstance(v35, v36);
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
      os_log_type_t v38 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v26, v38))
      {
        uint64_t v39 = a1[4];
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v47 = v39;
        __int16 v48 = 2112;
        id v49 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  v38,  "%@ vuObservationID = 0 for rejected training face to person %@",  buf,  0x16u);
      }
    }

    goto LABEL_23;
  }

  uint64_t v13 = MediaAnalysisLogLevel(v11, v12);
  if ((int)v13 >= 6)
  {
    uint64_t v15 = VCPLogInstance(v13, v14);
    os_log_type_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    os_log_type_t v17 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = a1[4];
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v47 = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%@ Cancelled", buf, 0xCu);
    }
  }

  *a4 = 1;
LABEL_23:
  objc_autoreleasePoolPop(v9);
}

void sub_1001181C8(void *a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  uint64_t v6 = a1[6];
  if (!v6 || (uint64_t v7 = (*(uint64_t (**)(void))(v6 + 16))(), !(_DWORD)v7))
  {
    id v15 = [v5 integerValue];
    if (v15)
    {
      id v17 = v15;
      uint64_t v18 = (void *)a1[5];
      id v37 = 0LL;
      unsigned __int8 v19 = [v18 untag:v17 error:&v37];
      uint64_t v20 = (os_log_s *)v37;
      uint64_t v22 = MediaAnalysisLogLevel(v20, v21);
      if ((v19 & 1) != 0)
      {
        if ((int)v22 >= 7)
        {
          uint64_t v24 = VCPLogInstance(v22, v23);
          unsigned __int8 v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
          os_log_type_t v26 = VCPLogToOSLogType[7];
          if (os_log_type_enabled(v25, v26))
          {
            uint64_t v27 = a1[4];
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v39 = v27;
            __int16 v40 = 2048;
            id v41 = v17;
            _os_log_impl((void *)&_mh_execute_header, v25, v26, "%@ Untagged orphan training face %ld", buf, 0x16u);
          }
        }

        ++*(void *)(*(void *)(a1[7] + 8LL) + 24LL);
      }

      else if ((int)v22 >= 3)
      {
        uint64_t v33 = VCPLogInstance(v22, v23);
        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
        os_log_type_t v35 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v36 = a1[4];
          *(_DWORD *)__int128 buf = 138412802;
          uint64_t v39 = v36;
          __int16 v40 = 2048;
          id v41 = v17;
          __int16 v42 = 2112;
          uint64_t v43 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "%@ Failed to untag orphan training face %ld - %@",  buf,  0x20u);
        }
      }
    }

    else
    {
      uint64_t v28 = MediaAnalysisLogLevel(0LL, v16);
      uint64_t v30 = VCPLogInstance(v28, v29);
      uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
      os_log_type_t v31 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v20, v31))
      {
        uint64_t v32 = a1[4];
        *(_DWORD *)__int128 buf = 138412290;
        uint64_t v39 = v32;
        _os_log_impl((void *)&_mh_execute_header, v20, v31, "%@ vuObservationID = 0 for orphan face", buf, 0xCu);
      }
    }

    goto LABEL_23;
  }

  uint64_t v9 = MediaAnalysisLogLevel(v7, v8);
  if ((int)v9 >= 6)
  {
    uint64_t v11 = VCPLogInstance(v9, v10);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    os_log_type_t v13 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = a1[4];
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v39 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%@ Cancelled", buf, 0xCu);
    }
  }

  *a3 = 1;
LABEL_23:
}

uint64_t sub_10011847C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v5 >= 6)
  {
    uint64_t v7 = VCPLogInstance(v5, v6);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    os_log_type_t v9 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      [v3 fractionCompleted];
      int v16 = 138412546;
      uint64_t v17 = v10;
      __int16 v18 = 2048;
      double v19 = (float)(v11 * 100.0);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%@ Gallery updating - %.2f%%", (uint8_t *)&v16, 0x16u);
    }
  }

  uint64_t v12 = *(void *)(a1 + 40);
  if (v12 && ((*(uint64_t (**)(void))(v12 + 16))() & 1) != 0)
  {
    uint64_t v13 = 0LL;
  }

  else
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
    [v14 pet];

    uint64_t v13 = 1LL;
  }

  return v13;
}

void sub_100118AA0(uint64_t a1, _BYTE *a2)
{
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_100118C64;
  v17[3] = &unk_1001BDE48;
  id v18 = *(id *)(a1 + 32);
  id v19 = *(id *)(a1 + 40);
  id v23 = *(id *)(a1 + 80);
  id v20 = *(id *)(a1 + 48);
  id v21 = *(id *)(a1 + 56);
  id v22 = *(id *)(a1 + 64);
  uint64_t v4 = objc_retainBlock(v17);
  uint64_t v5 = *(void **)(a1 + 72);
  id v16 = 0LL;
  unsigned __int8 v6 = [v5 mutateAndReturnError:&v16 handler:v4];
  id v7 = v16;
  os_log_type_t v9 = v7;
  if ((v6 & 1) == 0)
  {
    *a2 = 1;
    uint64_t v10 = MediaAnalysisLogLevel(v7, v8);
    if ((int)v10 >= 3)
    {
      uint64_t v12 = VCPLogInstance(v10, v11);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      os_log_type_t v14 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v25 = v15;
        __int16 v26 = 2112;
        uint64_t v27 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "%@ Failed to add faces to Gallery %@; rollback Photos persistence transaction",
          buf,
          0x16u);
      }
    }
  }
}

uint64_t sub_100118C64(uint64_t a1, void *a2)
{
  id v193 = a2;
  id v182 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "mad_allPersonsFetchOptions"));
  id v3 = [*(id *)(a1 + 40) count];
  if (!v3)
  {
    uint64_t v186 = 0LL;
    goto LABEL_132;
  }

  uint64_t v186 = 0LL;
  uint64_t v5 = 0LL;
  os_log_type_t v183 = VCPLogToOSLogType[5];
  os_log_type_t type = VCPLogToOSLogType[7];
  v180 = (void *)VNAnimalFaceIdentifierCatFace;
  os_log_type_t v181 = (void *)VNAnimalFaceIdentifierDogFace;
  os_log_type_t v187 = VCPLogToOSLogType[3];
  os_log_type_t v188 = VCPLogToOSLogType[4];
  while (1)
  {
    __int128 v194 = objc_autoreleasePoolPush();
    uint64_t v6 = *(void *)(a1 + 72);
    if (v6)
    {
      uint64_t v7 = (*(uint64_t (**)(void))(v6 + 16))();
      if ((_DWORD)v7) {
        break;
      }
    }

    os_log_type_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectAtIndexedSubscript:v5]);
    unsigned int v10 = [v9 detectionType];
    uint64_t v11 = @"Animal";
    if (v10 == 1) {
      uint64_t v11 = @"Human";
    }
    uint64_t v197 = v11;
    uint64_t v12 = *(void *)(a1 + 48);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v9 localIdentifier]);
    uint64_t v196 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@[%@][%@]",  v12,  v197,  v13));

    uint64_t v203 = 0LL;
    os_log_type_t v14 = *(void **)(a1 + 56);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v9 uuid]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 objectForKeyedSubscript:v15]);

    if (v16)
    {
      uint64_t v204 = 0LL;
      v205 = &v204;
      uint64_t v206 = 0x2050000000LL;
      id v19 = (void *)qword_1001E66E8;
      uint64_t v207 = qword_1001E66E8;
      if (!qword_1001E66E8)
      {
        *(void *)__int128 buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3221225472LL;
        *(void *)&uint8_t buf[16] = sub_10011E794;
        *(void *)&_BYTE buf[24] = &unk_1001BDF88;
        v209[0] = &v204;
        sub_10011E794((uint64_t)buf);
        id v19 = (void *)v205[3];
      }

      id v20 = v19;
      _Block_object_dispose(&v204, 8);
      id v198 = objc_alloc_init(v20);
      id v21 = objc_alloc(&OBJC_CLASS___NSUUID);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v16 uuid]);
      id v23 = -[NSUUID initWithUUIDString:](v21, "initWithUUIDString:", v22);
      [v198 setAsset:v23];

      uint64_t v24 = *(void **)(a1 + 64);
      uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v16 uuid]);
      __int16 v26 = (void *)objc_claimAutoreleasedReturnValue([v24 objectForKeyedSubscript:v25]);

      if (v26)
      {
        uint64_t v29 = objc_alloc(&OBJC_CLASS___NSUUID);
        uint64_t v30 = *(void **)(a1 + 64);
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue([v16 uuid]);
        uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKeyedSubscript:v31]);
        uint64_t v33 = -[NSUUID initWithUUIDString:](v29, "initWithUUIDString:", v32);
        [v198 setMoment:v33];

        goto LABEL_12;
      }

      uint64_t v42 = MediaAnalysisLogLevel(v27, v28);
      if ((int)v42 >= 5)
      {
        uint64_t v44 = VCPLogInstance(v42, v43);
        os_log_type_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v44);
        if (os_log_type_enabled(v31, v183))
        {
          id v45 = (void *)objc_claimAutoreleasedReturnValue([v16 localIdentifier]);
          *(_DWORD *)__int128 buf = 138412546;
          *(void *)&uint8_t buf[4] = v196;
          *(_WORD *)&buf[12] = 2112;
          *(void *)&buf[14] = v45;
          _os_log_impl((void *)&_mh_execute_header, v31, v183, "%@ asset %@ does not have a moment", buf, 0x16u);
        }

LABEL_119:
        goto LABEL_120;
      }

      if (![v192 count]) {
        goto LABEL_119;
      }
      uint64_t v140 = 0LL;
      while (2)
      {
        context = objc_autoreleasePoolPush();
        uint64_t v141 = (void *)objc_claimAutoreleasedReturnValue([v192 objectAtIndexedSubscript:v140]);
        uint64_t v142 = (void *)objc_claimAutoreleasedReturnValue([v141 uuid]);
        os_log_t loga = (os_log_t)objc_claimAutoreleasedReturnValue( +[PHObject uuidFromLocalIdentifier:]( &OBJC_CLASS___PHObject,  "uuidFromLocalIdentifier:",  v142));

        uint64_t v144 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", loga);
        if (v144)
        {
          id v199 = 0LL;
          unsigned __int8 v145 = [v193 tag:v203 with:v144 type:1 error:&v199];
          os_log_t oslog = (os_log_t)v199;
          uint64_t v147 = MediaAnalysisLogLevel(oslog, v146);
          if ((v145 & 1) != 0)
          {
            if ((int)v147 >= 7)
            {
              uint64_t v149 = VCPLogInstance(v147, v148);
              uint64_t v179 = (os_log_s *)objc_claimAutoreleasedReturnValue(v149);
              if (os_log_type_enabled(v179, type))
              {
                uint64_t v150 = v203;
                v151 = (void *)objc_claimAutoreleasedReturnValue([v9 personLocalIdentifier]);
                *(_DWORD *)__int128 buf = 138412802;
                *(void *)&uint8_t buf[4] = v196;
                *(_WORD *)&buf[12] = 2048;
                *(void *)&buf[14] = v150;
                *(_WORD *)&buf[22] = 2112;
                *(void *)&_BYTE buf[24] = v151;
                _os_log_impl( (void *)&_mh_execute_header,  v179,  type,  "%@ Tagged rejecting face (%ld) to person %@",  buf,  0x20u);
              }

              uint64_t v152 = v179;
              goto LABEL_111;
            }
          }

          else if ((int)v147 >= 3)
          {
            uint64_t v158 = VCPLogInstance(v147, v148);
            uint64_t v152 = (os_log_s *)objc_claimAutoreleasedReturnValue(v158);
            if (os_log_type_enabled(v152, v187))
            {
              uint64_t v159 = v203;
              uint64_t v160 = objc_claimAutoreleasedReturnValue([v9 personLocalIdentifier]);
              *(_DWORD *)__int128 buf = 138413058;
              *(void *)&uint8_t buf[4] = v196;
              *(_WORD *)&buf[12] = 2048;
              *(void *)&buf[14] = v159;
              *(_WORD *)&buf[22] = 2112;
              *(void *)&_BYTE buf[24] = v160;
              LOWORD(v209[0]) = 2112;
              *(void *)((char *)v209 + 2) = oslog;
              uint64_t v161 = (void *)v160;
              _os_log_impl( (void *)&_mh_execute_header,  v152,  v187,  "%@ Failed to tag rejecting face (%ld) to person %@ - %@",  buf,  0x2Au);
            }

LABEL_111:
          }

LABEL_120:
    }

LABEL_121:
    objc_autoreleasePoolPop(v194);
    id v3 = [*(id *)(a1 + 40) count];
  }

  uint64_t v165 = MediaAnalysisLogLevel(v7, v8);
  if ((int)v165 >= 6)
  {
    uint64_t v167 = VCPLogInstance(v165, v166);
    uint64_t v168 = (os_log_s *)objc_claimAutoreleasedReturnValue(v167);
    os_log_type_t v169 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v168, v169))
    {
      uint64_t v170 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412290;
      *(void *)&uint8_t buf[4] = v170;
      _os_log_impl( (void *)&_mh_execute_header,  v168,  v169,  "%@ Cancelled during adding faces to Gallery; skip remaining faces",
        buf,
        0xCu);
    }
  }

  objc_autoreleasePoolPop(v194);
LABEL_132:
  uint64_t v171 = MediaAnalysisLogLevel(v3, v4);
  if ((int)v171 >= 7)
  {
    uint64_t v173 = VCPLogInstance(v171, v172);
    unint64_t v174 = (os_log_s *)objc_claimAutoreleasedReturnValue(v173);
    os_log_type_t v175 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v174, v175))
    {
      uint64_t v176 = *(void *)(a1 + 48);
      id v177 = [*(id *)(a1 + 40) count];
      *(_DWORD *)__int128 buf = 138412802;
      *(void *)&uint8_t buf[4] = v176;
      *(_WORD *)&buf[12] = 2048;
      *(void *)&buf[14] = v186;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&_BYTE buf[24] = v177;
      _os_log_impl((void *)&_mh_execute_header, v174, v175, "%@ Added %lu of %lu face(s) to Gallery", buf, 0x20u);
    }
  }

  return 0LL;
}

void sub_100119E00(_Unwind_Exception *a1)
{
}

void sub_100119F9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

void sub_100119FC0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) firstObject]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 photoLibrary]);

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "vcp_description"));
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[GalleryFace][%@]",  v4));

  id v6 = [*(id *)(a1 + 32) count];
  uint64_t v8 = MediaAnalysisLogLevel(v6, v7);
  if (v6)
  {
    if ((int)v8 >= 6)
    {
      uint64_t v10 = VCPLogInstance(v8, v9);
      uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      os_log_type_t v12 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v11, v12))
      {
        id v13 = [*(id *)(a1 + 32) count];
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v49 = v5;
        __int16 v50 = 2048;
        id v51 = v13;
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "%@ Preparing to add %lu faces to Gallery", buf, 0x16u);
      }
    }

    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    if (![*(id *)(a1 + 32) count])
    {
LABEL_12:
      if ([v14 count])
      {
        uint64_t v25 = *(void **)(a1 + 40);
        uint64_t v26 = *(void *)(a1 + 48);
        uint64_t v27 = *(void *)(a1 + 56);
        uint64_t v28 = *(void *)(*(void *)(a1 + 64) + 8LL);
        id v46 = *(id *)(v28 + 40);
        unsigned __int8 v29 = [v25 _addFacesWithFaceBatch:v14 gallery:v26 cancelOrExtendTimeoutBlock:v27 error:&v46];
        objc_storeStrong((id *)(v28 + 40), v46);
        if ((v29 & 1) == 0)
        {
          uint64_t v34 = MediaAnalysisLogLevel(v30, v31);
          if ((int)v34 >= 3)
          {
            uint64_t v36 = VCPLogInstance(v34, v35);
            uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
            os_log_type_t v38 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v37, v38))
            {
              uint64_t v39 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
              *(_DWORD *)__int128 buf = 138412546;
              uint64_t v49 = v5;
              __int16 v50 = 2112;
              id v51 = v39;
              _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "%@ Failed to add faces (last batch) to Gallery - %@",  buf,  0x16u);
            }
          }

          goto LABEL_28;
        }

        [v14 removeAllObjects];
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 1;
      goto LABEL_28;
    }

    uint64_t v15 = 0LL;
    while (1)
    {
      id v16 = objc_autoreleasePoolPush();
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v15]);
      [v14 addObject:v17];

      if ((unint64_t)[v14 count] >= 0x3E9)
      {
        uint64_t v18 = *(void **)(a1 + 40);
        uint64_t v19 = *(void *)(a1 + 48);
        uint64_t v20 = *(void *)(a1 + 56);
        uint64_t v21 = *(void *)(*(void *)(a1 + 64) + 8LL);
        id obj = *(id *)(v21 + 40);
        unsigned __int8 v22 = [v18 _addFacesWithFaceBatch:v14 gallery:v19 cancelOrExtendTimeoutBlock:v20 error:&obj];
        objc_storeStrong((id *)(v21 + 40), obj);
        if ((v22 & 1) == 0)
        {
          uint64_t v40 = MediaAnalysisLogLevel(v23, v24);
          if ((int)v40 >= 3)
          {
            uint64_t v42 = VCPLogInstance(v40, v41);
            uint64_t v43 = (os_log_s *)objc_claimAutoreleasedReturnValue(v42);
            os_log_type_t v44 = VCPLogToOSLogType[3];
            if (os_log_type_enabled(v43, v44))
            {
              id v45 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
              *(_DWORD *)__int128 buf = 138412546;
              uint64_t v49 = v5;
              __int16 v50 = 2112;
              id v51 = v45;
              _os_log_impl((void *)&_mh_execute_header, v43, v44, "%@ Failed to add faces to Gallery - %@", buf, 0x16u);
            }
          }

          objc_autoreleasePoolPop(v16);
          goto LABEL_28;
        }

        [v14 removeAllObjects];
      }

      objc_autoreleasePoolPop(v16);
    }
  }

  if ((int)v8 >= 7)
  {
    uint64_t v32 = VCPLogInstance(v8, v9);
    os_log_type_t v14 = (void *)objc_claimAutoreleasedReturnValue(v32);
    os_log_type_t v33 = VCPLogToOSLogType[7];
    if (os_log_type_enabled((os_log_t)v14, v33))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v49 = v5;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v14, v33, "%@ No face to add to Gallery; skip", buf, 0xCu);
    }

void sub_10011A478(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_10011A668;
    v20[3] = &unk_1001BDC18;
    id v21 = *(id *)(a1 + 32);
    id v3 = objc_retainBlock(v20);
    uint64_t v4 = *(void **)(a1 + 40);
    id v19 = 0LL;
    unsigned __int8 v5 = [v4 mutateAndReturnError:&v19 handler:v3];
    id v6 = v19;
    uint64_t v8 = v6;
    if ((v5 & 1) != 0)
    {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
    }

    else
    {
      uint64_t v14 = MediaAnalysisLogLevel(v6, v7);
      if ((int)v14 >= 3)
      {
        uint64_t v16 = VCPLogInstance(v14, v15);
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        os_log_type_t v18 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v17, v18))
        {
          *(_DWORD *)__int128 buf = 138412290;
          uint64_t v23 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "[GalleryFace] Failed to delete faces from Gallery %@",  buf,  0xCu);
        }
      }

      if (*(void *)(a1 + 56)) {
        **(void **)(a1 + 56) = [v8 copy];
      }
    }
  }

  else
  {
    uint64_t v9 = MediaAnalysisLogLevel(0LL, v2);
    if ((int)v9 >= 7)
    {
      uint64_t v11 = VCPLogInstance(v9, v10);
      os_log_type_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      os_log_type_t v13 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v12, v13))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "[GalleryFace] No face to remove to Gallery; skip", buf, 2u);
      }
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 1;
  }

uint64_t sub_10011A668(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v30 = a1;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[PHAsset uuidsFromLocalIdentifiers:]( &OBJC_CLASS___PHAsset,  "uuidsFromLocalIdentifiers:",  *(void *)(a1 + 32)));
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id obj = v4;
  id v5 = [obj countByEnumeratingWithState:&v34 objects:v42 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)v35;
    os_log_type_t type = VCPLogToOSLogType[3];
    do
    {
      for (unint64_t i = 0LL; i != v6; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void *)(*((void *)&v34 + 1) + 8LL * (void)i);
        uint64_t v11 = objc_autoreleasePoolPush();
        os_log_type_t v12 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v10);
        id v33 = 0LL;
        unsigned int v13 = [v3 removeWithAsset:v12 error:&v33];
        id v14 = v33;

        if (v13)
        {
          ++v7;
        }

        else
        {
          uint64_t v17 = MediaAnalysisLogLevel(v15, v16);
          if ((int)v17 >= 3)
          {
            uint64_t v19 = VCPLogInstance(v17, v18);
            uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
            if (os_log_type_enabled(v20, type))
            {
              *(_DWORD *)__int128 buf = 138412546;
              uint64_t v39 = v10;
              __int16 v40 = 2112;
              id v41 = v14;
              _os_log_impl( (void *)&_mh_execute_header,  v20,  type,  "[GalleryFace] Failed to remove observations with asset (uuid:%@) from Gallery - %@; ignore",
                buf,
                0x16u);
            }
          }
        }

        objc_autoreleasePoolPop(v11);
      }

      id v6 = [obj countByEnumeratingWithState:&v34 objects:v42 count:16];
    }

    while (v6);
  }

  else
  {
    uint64_t v7 = 0LL;
  }

  uint64_t v23 = MediaAnalysisLogLevel(v21, v22);
  if ((int)v23 >= 7)
  {
    uint64_t v25 = VCPLogInstance(v23, v24);
    uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
    os_log_type_t v27 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v26, v27))
    {
      id v28 = [*(id *)(v30 + 32) count];
      *(_DWORD *)__int128 buf = 134218240;
      uint64_t v39 = v7;
      __int16 v40 = 2048;
      id v41 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "[GalleryFace] Removed observation(s) with %lu (out of %lu) asset(s) from Gallery",  buf,  0x16u);
    }
  }

  return 0LL;
}

void sub_10011B06C(uint64_t a1)
{
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v3)
  {
    id v6 = v3;
    uint64_t v7 = *(void *)v18;
    os_log_type_t v8 = VCPLogToOSLogType[6];
    *(void *)&__int128 v5 = 138412546LL;
    __int128 v16 = v5;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(v2);
        }
        uint64_t v10 = *(void *)(*((void *)&v17 + 1) + 8LL * (void)v9);
        uint64_t v11 = MediaAnalysisLogLevel(v3, v4);
        if ((int)v11 >= 6)
        {
          uint64_t v13 = VCPLogInstance(v11, v12);
          id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
          if (os_log_type_enabled(v14, v8))
          {
            uint64_t v15 = *(void *)(a1 + 40);
            *(_DWORD *)__int128 buf = v16;
            uint64_t v22 = v15;
            __int16 v23 = 2112;
            uint64_t v24 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  v8,  "[VUDedupe] Dedupping graph-verified persons %@ for user-verified person %@",  buf,  0x16u);
          }
        }

        id v3 =  +[PHPersonChangeRequest changeRequestForDedupingGraphPersons:withUserVerifiedPerson:]( &OBJC_CLASS___PHPersonChangeRequest,  "changeRequestForDedupingGraphPersons:withUserVerifiedPerson:",  *(void *)(a1 + 40),  v10,  v16,  (void)v17);
        uint64_t v9 = (char *)v9 + 1;
      }

      while (v6 != v9);
      id v3 = [v2 countByEnumeratingWithState:&v17 objects:v25 count:16];
      id v6 = v3;
    }

    while (v3);
  }
}

id sub_10011B204(uint64_t a1)
{
  return  +[PHPersonChangeRequest changeRequestForDedupingGraphPersons:]( &OBJC_CLASS___PHPersonChangeRequest,  "changeRequestForDedupingGraphPersons:",  *(void *)(a1 + 32));
}

void sub_10011B3F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 96);
  if (!v1 || !(*(unsigned int (**)(void))(v1 + 16))())
  {
    v287 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stringValue]);
    id v2 = *(void **)(a1 + 40);
    id v3 = [sub_10011D3B0() person];
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    LODWORD(v2) = [v2 isEqual:v4];

    __int128 v5 = @"Animal";
    int v284 = (int)v2;
    if ((_DWORD)v2) {
      __int128 v5 = @"Human";
    }
    uint64_t v288 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[GalleryUpdate][%@][%@]",  v5,  v287));
    uint64_t v7 = MediaAnalysisLogLevel(v288, v6);
    if ((int)v7 >= 6)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v10, v11))
      {
        id v12 = [*(id *)(a1 + 48) count];
        *(_DWORD *)__int128 buf = 138412546;
        id v342 = v288;
        __int16 v343 = 2048;
        id v344 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "%@ Updating Photos with %lu face observations ... ",  buf,  0x16u);
      }
    }

    uint64_t v283 = -[VCPPhotosPersistenceDelegate initWithPhotoLibrary:]( objc_alloc(&OBJC_CLASS___VCPPhotosPersistenceDelegate),  "initWithPhotoLibrary:",  *(void *)(a1 + 56));
    uint64_t v290 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "mad_allPersonsFetchOptions"));
    if (v284) {
      uint64_t v13 = &off_1001C9378;
    }
    else {
      uint64_t v13 = &off_1001C9390;
    }
    [v290 setIncludedDetectionTypes:v13];
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"verifiedType != %ld",  -2LL));
    [v290 setPredicate:v14];

    uint64_t v352 = v287;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v352, 1LL));
    id v286 = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchPersonsWithMdIDs:options:]( &OBJC_CLASS___PHPerson,  "fetchPersonsWithMdIDs:options:",  v15,  v290));

    v289 = (void *)objc_claimAutoreleasedReturnValue([v286 firstObject]);
    id v16 = [v286 count];
    if ((unint64_t)v16 >= 2)
    {
      uint64_t v18 = MediaAnalysisLogLevel(v16, v17);
      if ((int)v18 >= 3)
      {
        uint64_t v20 = VCPLogInstance(v18, v19);
        uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
        os_log_type_t v22 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v21, v22))
        {
          id v23 = [v286 count];
          uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v289 localIdentifier]);
          *(_DWORD *)__int128 buf = 138413058;
          id v342 = v288;
          __int16 v343 = 2048;
          id v344 = v23;
          __int16 v345 = 2112;
          id v346 = v286;
          __int16 v347 = 2112;
          v348 = v24;
          _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "%@ Photos has %lu connected person %@; prefer first %@",
            buf,
            0x2Au);
        }
      }
    }

    uint64_t v25 = (NSUUID *)*(id *)(a1 + 64);
    if (v25) {
      goto LABEL_48;
    }
    uint64_t v281 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "mad_allFacesFetchOptions"));
    os_log_type_t v279 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesWithVuObservationIDs:options:]( &OBJC_CLASS___PHFace,  "fetchFacesWithVuObservationIDs:options:",  *(void *)(a1 + 48),  v281));
    uint64_t v276 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) librarySpecificFetchOptions]);
    int v274 = (void *)objc_claimAutoreleasedReturnValue( +[PHFaceCrop fetchFaceCropByFaceLocalIdentifierForFaces:fetchOptions:]( &OBJC_CLASS___PHFaceCrop,  "fetchFaceCropByFaceLocalIdentifierForFaces:fetchOptions:",  v279,  v276));
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    os_log_t oslog = (os_log_t)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
    __int128 v328 = 0u;
    __int128 v329 = 0u;
    __int128 v326 = 0u;
    __int128 v327 = 0u;
    id v27 = (id)objc_claimAutoreleasedReturnValue([v274 allValues]);
    id v28 = [v27 countByEnumeratingWithState:&v326 objects:v351 count:16];
    if (!v28) {
      goto LABEL_36;
    }
    uint64_t v29 = *(void *)v327;
    while (1)
    {
      for (unint64_t i = 0LL; i != v28; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v327 != v29) {
          objc_enumerationMutation(v27);
        }
        uint64_t v31 = *(void **)(*((void *)&v326 + 1) + 8LL * (void)i);
        uint64_t v32 = objc_autoreleasePoolPush();
        if ([v31 type] == 1)
        {
          id v33 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "mad_allPersonsFetchOptions"));
          __int128 v34 = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchPersonForFaceCrop:options:]( &OBJC_CLASS___PHPerson,  "fetchPersonForFaceCrop:options:",  v31,  v33));
          if ([v34 count])
          {
            __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 firstObject]);
            if ([v35 verifiedType] == (id)1)
            {
              __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 localIdentifier]);
              [v26 addObject:v36];
              goto LABEL_31;
            }

            if ([v35 verifiedType] == (id)2)
            {
              __int128 v36 = (void *)objc_claimAutoreleasedReturnValue([v35 localIdentifier]);
              -[os_log_s addObject:](oslog, "addObject:", v36);
LABEL_31:
            }
          }
        }

        objc_autoreleasePoolPop(v32);
      }

      id v28 = [v27 countByEnumeratingWithState:&v326 objects:v351 count:16];
      if (!v28)
      {
LABEL_36:

        v324[0] = _NSConcreteStackBlock;
        v324[1] = 3221225472LL;
        v324[2] = sub_10011D464;
        v324[3] = &unk_1001BDC68;
        id v37 = v288;
        id v325 = v37;
        [v26 enumerateObjectsUsingBlock:v324];
        v322[0] = _NSConcreteStackBlock;
        v322[1] = 3221225472LL;
        v322[2] = sub_10011D540;
        v322[3] = &unk_1001BDC68;
        id v38 = v37;
        id v323 = v38;
        -[os_log_s enumerateObjectsUsingBlock:](oslog, "enumerateObjectsUsingBlock:", v322);
        if ([v26 count])
        {
          uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v26 anyObject]);
          uint64_t v40 = objc_claimAutoreleasedReturnValue(+[PHPerson uuidFromLocalIdentifier:](&OBJC_CLASS___PHPerson, "uuidFromLocalIdentifier:", v39));
          goto LABEL_40;
        }

        if (oslog)
        {
          uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s anyObject](oslog, "anyObject"));
          uint64_t v40 = objc_claimAutoreleasedReturnValue(+[PHPerson uuidFromLocalIdentifier:](&OBJC_CLASS___PHPerson, "uuidFromLocalIdentifier:", v39));
LABEL_40:
          id v41 = (void *)v40;

          if (v41)
          {
            uint64_t v42 = -[NSUUID initWithUUIDString:](objc_alloc(&OBJC_CLASS___NSUUID), "initWithUUIDString:", v41);
            uint64_t v44 = MediaAnalysisLogLevel(v42, v43);
            if ((int)v44 >= 3)
            {
              uint64_t v46 = VCPLogInstance(v44, v45);
              uint64_t v47 = (os_log_s *)objc_claimAutoreleasedReturnValue(v46);
              os_log_type_t v48 = VCPLogToOSLogType[3];
              if (os_log_type_enabled(v47, v48))
              {
                *(_DWORD *)__int128 buf = 138412546;
                id v342 = v38;
                __int16 v343 = 2112;
                id v344 = v41;
                _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "%@ VU does not provide a tag, but observations contain tagged person %@, MAD will use it",  buf,  0x16u);
              }
            }

LABEL_164:
              goto LABEL_165;
            }

            id v78 = [v76 count];
            id v79 = [*(id *)(a1 + 48) count];
            if (v78 != v79)
            {
              uint64_t v81 = MediaAnalysisLogLevel(v79, v80);
              if ((int)v81 >= 4)
              {
                uint64_t v83 = VCPLogInstance(v81, v82);
                id v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
                os_log_type_t v85 = VCPLogToOSLogType[4];
                if (os_log_type_enabled(v84, v85))
                {
                  id v86 = [v76 count];
                  id v87 = [*(id *)(a1 + 48) count];
                  *(_DWORD *)__int128 buf = 138412802;
                  id v342 = v288;
                  __int16 v343 = 2048;
                  id v344 = v86;
                  __int16 v345 = 2048;
                  id v346 = v87;
                  _os_log_impl( (void *)&_mh_execute_header,  v84,  v85,  "%@ Fetched %lu faces (expected: %lu); ignoring missed faces",
                    buf,
                    0x20u);
                }
              }
            }

            if ((v284 & 1) != 0)
            {
              __int16 v88 = 1;
              goto LABEL_94;
            }

            __int128 v320 = 0u;
            __int128 v321 = 0u;
            __int128 v318 = 0u;
            __int128 v319 = 0u;
            id v95 = v76;
            unsigned __int8 v96 = 0LL;
            uint64_t v97 = 0LL;
            id v98 = [v95 countByEnumeratingWithState:&v318 objects:v338 count:16];
            if (v98)
            {
              uint64_t v99 = *(void *)v319;
              do
              {
                for (unint64_t j = 0LL; j != v98; unint64_t j = (char *)j + 1)
                {
                  if (*(void *)v319 != v99) {
                    objc_enumerationMutation(v95);
                  }
                  id v101 = *(void **)(*((void *)&v318 + 1) + 8LL * (void)j);
                  if ([v101 detectionType] == 3)
                  {
                    ++v97;
                  }

                  else if ([v101 detectionType] == 4)
                  {
                    ++v96;
                  }
                }

                id v98 = [v95 countByEnumeratingWithState:&v318 objects:v338 count:16];
              }

              while (v98);
            }

            uint64_t v104 = MediaAnalysisLogLevel(v102, v103);
            if ((int)v104 >= 6)
            {
              uint64_t v106 = VCPLogInstance(v104, v105);
              unsigned int v107 = (os_log_s *)objc_claimAutoreleasedReturnValue(v106);
              os_log_type_t v108 = VCPLogToOSLogType[6];
              if (os_log_type_enabled(v107, v108))
              {
                *(_DWORD *)__int128 buf = 138412802;
                id v342 = v288;
                __int16 v343 = 2048;
                id v344 = v97;
                __int16 v345 = 2048;
                id v346 = v96;
                _os_log_impl( (void *)&_mh_execute_header,  v107,  v108,  "%@ Count observations when fetching faces: Dog: %lu, Cat: %lu",  buf,  0x20u);
              }
            }

            if (v97 > v96)
            {
              __int16 v88 = 3;
              goto LABEL_94;
            }

            if (v97 >= v96)
            {
              uint64_t v208 = *(void **)(a1 + 72);
              uint64_t v209 = *(void *)(a1 + 32);
              id v317 = 0LL;
              unsigned int v210 = [v208 keyObservationFor:v209 output:&v307 error:&v317];
              id v211 = v317;
              v213 = v211;
              if (v210)
              {
                uint64_t v214 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v307));
                os_log_type_t v337 = v214;
                uint64_t v215 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v337,  1LL));
                v216 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesWithVuObservationIDs:options:]( &OBJC_CLASS___PHFace,  "fetchFacesWithVuObservationIDs:options:",  v215,  v50));
                v217 = (void *)objc_claimAutoreleasedReturnValue([v216 firstObject]);

                if (v217)
                {
                  unsigned __int16 v277 = (unsigned __int16)[v217 detectionType];
                }

                else
                {
                  uint64_t v241 = MediaAnalysisLogLevel(v218, v219);
                  if ((int)v241 >= 3)
                  {
                    uint64_t v243 = VCPLogInstance(v241, v242);
                    uint64_t v244 = (os_log_s *)objc_claimAutoreleasedReturnValue(v243);
                    os_log_type_t v245 = VCPLogToOSLogType[3];
                    if (os_log_type_enabled(v244, v245))
                    {
                      *(_DWORD *)__int128 buf = 138412290;
                      id v342 = v288;
                      _os_log_impl( (void *)&_mh_execute_header,  v244,  v245,  "%@ Failed to fetch key face from Photos DB.Use detection type from the first observation IDs in fetchedFacesWithObservationIDs",  buf,  0xCu);
                    }
                  }

                  uint64_t v246 = (void *)objc_claimAutoreleasedReturnValue([v95 firstObject]);
                  unsigned __int16 v277 = (unsigned __int16)[v246 detectionType];
                }
              }

              else
              {
                uint64_t v220 = MediaAnalysisLogLevel(v211, v212);
                if ((int)v220 >= 3)
                {
                  uint64_t v222 = VCPLogInstance(v220, v221);
                  v223 = (os_log_s *)objc_claimAutoreleasedReturnValue(v222);
                  os_log_type_t v224 = VCPLogToOSLogType[3];
                  if (os_log_type_enabled(v223, v224))
                  {
                    *(_DWORD *)__int128 buf = 138412546;
                    id v342 = v288;
                    __int16 v343 = 2112;
                    id v344 = v213;
                    _os_log_impl( (void *)&_mh_execute_header,  v223,  v224,  "%@ Failed to get key observation from VU with error: %@.Use detection type from the first observat ion IDs in fetchedFacesWithObservationIDs",  buf,  0x16u);
                  }
                }

                v217 = (void *)objc_claimAutoreleasedReturnValue([v95 firstObject]);
                unsigned __int16 v277 = (unsigned __int16)[v217 detectionType];
              }
            }

            else
            {
              __int16 v88 = 4;
LABEL_94:
              unsigned __int16 v277 = v88;
            }

            unsigned int v92 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
            if ([v76 count])
            {
              unint64_t v109 = 0LL;
              os_log_type_t v110 = VCPLogToOSLogType[3];
              do
              {
                unsigned int v111 = objc_autoreleasePoolPush();
                unsigned __int8 v112 = (void *)objc_claimAutoreleasedReturnValue([v76 objectAtIndexedSubscript:v109]);
                if ([v112 trainingType] != 5
                  && [v112 trainingType] != 1)
                {
                  goto LABEL_102;
                }

                id v113 = (void *)objc_claimAutoreleasedReturnValue([v112 personLocalIdentifier]);
                BOOL v114 = v113 == 0LL;

                if (v114)
                {
                  uint64_t v118 = MediaAnalysisLogLevel(v115, v116);
                  uint64_t v120 = VCPLogInstance(v118, v119);
                  uint64_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue(v120);
                  if (os_log_type_enabled(v117, v110))
                  {
                    uint64_t v121 = (void *)objc_claimAutoreleasedReturnValue([v112 localIdentifier]);
                    *(_DWORD *)__int128 buf = 138412546;
                    id v342 = v288;
                    __int16 v343 = 2112;
                    id v344 = v121;
                    _os_log_impl( (void *)&_mh_execute_header,  v117,  v110,  "%@ training face (%@) with no personLocalIdentifier; skipping",
                      buf,
                      0x16u);
                  }
                }

                else
                {
                  uint64_t v117 = (os_log_s *)objc_claimAutoreleasedReturnValue([v112 personLocalIdentifier]);
                  -[os_log_s addObject:](v92, "addObject:", v117);
                }

LABEL_102:
                objc_autoreleasePoolPop(v111);
                ++v109;
              }

              while (v109 < (unint64_t)[v76 count]);
            }

            if (-[os_log_s count](v92, "count"))
            {
              uint64_t v122 = (void *)objc_claimAutoreleasedReturnValue( +[PHPerson fetchPersonsWithLocalIdentifiers:options:]( &OBJC_CLASS___PHPerson,  "fetchPersonsWithLocalIdentifiers:options:",  v92,  v290));
              id v123 = [v122 count];
              id v124 = -[os_log_s count](v92, "count");
              if (v123 != v124)
              {
                uint64_t v126 = MediaAnalysisLogLevel(v124, v125);
                if ((int)v126 >= 3)
                {
                  uint64_t v128 = VCPLogInstance(v126, v127);
                  uint64_t v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
                  os_log_type_t v130 = VCPLogToOSLogType[3];
                  if (os_log_type_enabled(v129, v130))
                  {
                    id v131 = [v122 count];
                    id v132 = -[os_log_s count](v92, "count");
                    *(_DWORD *)__int128 buf = 138412802;
                    id v342 = v288;
                    __int16 v343 = 2048;
                    id v344 = v131;
                    __int16 v345 = 2048;
                    id v346 = v132;
                    _os_log_impl( (void *)&_mh_execute_header,  v129,  v130,  "%@ Retrived %lu (out of %lu) tagged person to merge; ignoring missed person(s)",
                      buf,
                      0x20u);
                  }
                }
              }
            }

            else
            {
              uint64_t v122 = 0LL;
            }

            if ([v76 count])
            {
              id v133 = (id)objc_claimAutoreleasedReturnValue([v76 fetchedObjects]);
              id v134 = (id)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v133));
            }

            else
            {
              id v133 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
              id v134 = v133;
            }

            os_log_type_t v285 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesForPerson:options:]( &OBJC_CLASS___PHFace,  "fetchFacesForPerson:options:",  v289,  v50));
            if ([v285 count])
            {
              id v135 = (id)objc_claimAutoreleasedReturnValue([v285 fetchedObjects]);
              id v280 = (id)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v135));
            }

            else
            {
              id v135 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
              id v280 = v135;
            }

            id v136 = [v134 mutableCopy];
            if ([*(id *)(a1 + 80) count])
            {
              uint64_t v137 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
              v313[0] = _NSConcreteStackBlock;
              v313[1] = 3221225472LL;
              v313[2] = sub_10011D61C;
              v313[3] = &unk_1001BDEE8;
              id v314 = *(id *)(a1 + 80);
              id v138 = v137;
              id v315 = v138;
              id v316 = v288;
              [v136 enumerateObjectsUsingBlock:v313];
              [v136 minusSet:v138];
            }

            uint64_t v139 = v289;
            if (v289)
            {
              [v136 minusSet:v280];
              uint64_t v139 = v289;
            }

            uint64_t v307 = 0LL;
            v308 = &v307;
            uint64_t v309 = 0x3032000000LL;
            uint64_t v310 = sub_100110B70;
            uint64_t v311 = sub_100110B80;
            id v312 = (id)objc_claimAutoreleasedReturnValue([v139 localIdentifier]);
            v299[0] = _NSConcreteStackBlock;
            v299[1] = 3221225472LL;
            v299[2] = sub_10011D748;
            v299[3] = &unk_1001BDF10;
            id v140 = v289;
            id v300 = v140;
            id v141 = v287;
            id v301 = v141;
            uint64_t v305 = &v307;
            id v271 = v288;
            id v302 = v271;
            id v275 = v122;
            id v303 = v275;
            id v142 = v136;
            id v304 = v142;
            unsigned __int16 v306 = v277;
            v278 = objc_retainBlock(v299);
            id v143 = [v142 count];
            if (v289 && !v143)
            {
              unsigned __int8 v145 = (void *)objc_claimAutoreleasedReturnValue([v140 mdID]);
              unsigned __int8 v146 = [v145 isEqualToString:v141];

              if ((v146 & 1) != 0) {
                goto LABEL_127;
              }
LABEL_131:
              uint64_t v153 = MediaAnalysisLogLevel(v143, v144);
              if ((int)v153 >= 6)
              {
                uint64_t v155 = VCPLogInstance(v153, v154);
                v156 = (os_log_s *)objc_claimAutoreleasedReturnValue(v155);
                os_log_type_t v157 = VCPLogToOSLogType[6];
                if (os_log_type_enabled(v156, v157))
                {
                  id v158 = v134;
                  uint64_t v159 = (void *)v308[5];
                  id v160 = [v142 count];
                  uint64_t v161 = (void *)objc_claimAutoreleasedReturnValue([v140 mdID]);
                  *(_DWORD *)__int128 buf = 138413058;
                  id v342 = v271;
                  __int16 v343 = 2112;
                  id v344 = v159;
                  __int16 v345 = 2048;
                  id v346 = v160;
                  __int16 v347 = 2112;
                  v348 = v161;
                  _os_log_impl( (void *)&_mh_execute_header,  v156,  v157,  "%@ Person %@ (%lu faces) (%@) needs update",  buf,  0x2Au);

                  id v134 = v158;
                }
              }

              uint64_t v162 = *(void **)(a1 + 56);
              id v298 = 0LL;
              unsigned __int8 v163 = [v162 performChangesAndWait:v278 error:&v298];
              id v164 = v298;
              uint64_t v150 = v164;
              if ((v163 & 1) != 0)
              {
LABEL_136:

                goto LABEL_137;
              }

              uint64_t v192 = MediaAnalysisLogLevel(v164, v165);
              if ((int)v192 >= 3)
              {
                uint64_t v194 = VCPLogInstance(v192, v193);
                id v195 = (os_log_s *)objc_claimAutoreleasedReturnValue(v194);
                os_log_type_t v196 = VCPLogToOSLogType[3];
                if (os_log_type_enabled(v195, v196))
                {
                  uint64_t v197 = (void *)v308[5];
                  *(_DWORD *)__int128 buf = 138412802;
                  id v342 = v271;
                  __int16 v343 = 2112;
                  id v344 = v197;
                  __int16 v345 = 2112;
                  id v346 = v150;
                  _os_log_impl( (void *)&_mh_execute_header,  v195,  v196,  "%@ Failed to update person %@ - %@",  buf,  0x20u);
                }
              }

              if (*(void *)(a1 + 112))
              {
                NSErrorUserInfoKey v335 = NSLocalizedDescriptionKey;
                id v198 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to update person %@ - %@",  v308[5],  v150));
                uint64_t v336 = v198;
                id v199 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v336,  &v335,  1LL));
                **(void **)(a1 + 112) = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v199));
              }

LABEL_162:
              _Block_object_dispose(&v307, 8);

LABEL_163:
              goto LABEL_164;
            }

            if (v143) {
              goto LABEL_131;
            }
LABEL_127:
            uint64_t v147 = MediaAnalysisLogLevel(v143, v144);
            if ((int)v147 >= 7)
            {
              uint64_t v149 = VCPLogInstance(v147, v148);
              uint64_t v150 = (void *)objc_claimAutoreleasedReturnValue(v149);
              os_log_type_t v151 = VCPLogToOSLogType[7];
              if (os_log_type_enabled((os_log_t)v150, v151))
              {
                uint64_t v152 = (void *)v308[5];
                *(_DWORD *)__int128 buf = 138412546;
                id v342 = v271;
                __int16 v343 = 2112;
                id v344 = v152;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v150,  v151,  "%@ Person %@ is up-to-date",  buf,  0x16u);
              }

              goto LABEL_136;
            }

void sub_10011D340( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

id sub_10011D3B0()
{
  uint64_t v4 = 0LL;
  __int128 v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_1001E66F8;
  uint64_t v7 = qword_1001E66F8;
  if (!qword_1001E66F8)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10011E894;
    v3[3] = &unk_1001BDF88;
    v3[4] = &v4;
    sub_10011E894((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10011D44C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_10011D464(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel(v3, v4) >= 7)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ tagged person (user) %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

void sub_10011D540(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((int)MediaAnalysisLogLevel(v3, v4) >= 7)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2112;
      id v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ tagged person (graph) %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

void sub_10011D61C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 localIdentifier]);
  LODWORD(v4) = [v4 containsObject:v5];

  if ((_DWORD)v4)
  {
    id v6 = [*(id *)(a1 + 40) addObject:v3];
    uint64_t v8 = MediaAnalysisLogLevel(v6, v7);
    if ((int)v8 >= 7)
    {
      uint64_t v10 = VCPLogInstance(v8, v9);
      __int16 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
      os_log_type_t v12 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = *(void *)(a1 + 48);
        id v14 = (void *)objc_claimAutoreleasedReturnValue([v3 localIdentifier]);
        int v15 = 138412546;
        uint64_t v16 = v13;
        __int16 v17 = 2112;
        uint64_t v18 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "%@ Ignoring key face %@ from facesToAdd",  (uint8_t *)&v15,  0x16u);
      }
    }
  }
}

void sub_10011D748(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  uint64_t v3 = VCPSignPostLog(v2);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  os_signpost_id_t v5 = os_signpost_id_generate(v4);

  uint64_t v7 = VCPSignPostLog(v6);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  uint64_t v9 = v8;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_BEGIN,  v5,  "GalleryUpdate_personChangeBlock",  (const char *)&unk_100199097,  buf,  2u);
  }

  if (*(void *)(a1 + 32))
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[PHPersonChangeRequest changeRequestForPerson:]( &OBJC_CLASS___PHPersonChangeRequest,  "changeRequestForPerson:"));
    uint64_t v12 = MediaAnalysisLogLevel(v10, v11);
    if ((int)v12 >= 6)
    {
      uint64_t v14 = VCPLogInstance(v12, v13);
      int v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      os_log_type_t v16 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = *(void *)(a1 + 48);
        uint64_t v18 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v82 = v17;
        __int16 v83 = 2112;
        *(void *)id v84 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "%@ The person (%@) exists, updating ...", buf, 0x16u);
      }
    }

    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mdID]);
    unsigned __int8 v20 = [v19 isEqualToString:*(void *)(a1 + 40)];

    if ((v20 & 1) == 0)
    {
      uint64_t v23 = MediaAnalysisLogLevel(v21, v22);
      if ((int)v23 >= 3)
      {
        uint64_t v25 = VCPLogInstance(v23, v24);
        uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
        os_log_type_t v27 = VCPLogToOSLogType[3];
        if (os_log_type_enabled(v26, v27))
        {
          uint64_t v28 = *(void *)(a1 + 48);
          uint64_t v29 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mdID]);
          uint64_t v31 = *(void **)(a1 + 40);
          *(_DWORD *)__int128 buf = 138413058;
          uint64_t v82 = v28;
          __int16 v83 = 2112;
          *(void *)id v84 = v29;
          *(_WORD *)&v84[8] = 2112;
          *(void *)&v84[10] = v30;
          __int16 v85 = 2112;
          id v86 = v31;
          _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "%@ Person %@:%@ mismatches %@; update Photos with mdID",
            buf,
            0x2Au);
        }
      }

      [v10 setMdID:*(void *)(a1 + 40)];
    }

    id v32 = [*(id *)(a1 + 56) count];
    if (v32)
    {
      uint64_t v34 = MediaAnalysisLogLevel(v32, v33);
      if ((int)v34 >= 6)
      {
        uint64_t v36 = VCPLogInstance(v34, v35);
        id v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
        os_log_type_t v38 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v80 = *(void *)(a1 + 48);
          id v39 = [*(id *)(a1 + 56) count];
          uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localIdentifier]);
          id v41 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) mdID]);
          id v42 = [*(id *)(a1 + 32) verifiedType];
          *(_DWORD *)__int128 buf = 138413314;
          uint64_t v82 = v80;
          __int16 v83 = 2048;
          *(void *)id v84 = v39;
          *(_WORD *)&v84[8] = 2112;
          *(void *)&v84[10] = v40;
          __int16 v85 = 2112;
          id v86 = v41;
          __int16 v87 = 2048;
          id v88 = v42;
          _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "%@ Merging %lu persons to person %@(%@)(VerifyType-%ld)",  buf,  0x34u);
        }
      }

      [v10 mergePersons:*(void *)(a1 + 56)];
    }
  }

  else
  {
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[PHPersonChangeRequest creationRequestForPerson]( &OBJC_CLASS___PHPersonChangeRequest,  "creationRequestForPerson"));
    [v10 setMdID:*(void *)(a1 + 40)];
    [v10 setVerifiedType:0];
    uint64_t v43 = (void *)objc_claimAutoreleasedReturnValue([v10 placeholderForCreatedPerson]);
    uint64_t v44 = objc_claimAutoreleasedReturnValue([v43 localIdentifier]);
    uint64_t v45 = *(void *)(*(void *)(a1 + 72) + 8LL);
    uint64_t v46 = *(void **)(v45 + 40);
    *(void *)(v45 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v44;

    uint64_t v49 = MediaAnalysisLogLevel(v47, v48);
    if ((int)v49 >= 6)
    {
      uint64_t v51 = VCPLogInstance(v49, v50);
      unsigned __int8 v52 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
      os_log_type_t v53 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = *(void *)(a1 + 48);
        uint64_t v55 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v82 = v54;
        __int16 v83 = 2112;
        *(void *)id v84 = v55;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "%@ Creating new person (%@)", buf, 0x16u);
      }
    }
  }

  id v56 = [*(id *)(a1 + 64) count];
  if (v56) {
    id v56 = [v10 addFaces:*(void *)(a1 + 64)];
  }
  uint64_t v58 = MediaAnalysisLogLevel(v56, v57);
  if ((int)v58 >= 7)
  {
    uint64_t v60 = VCPLogInstance(v58, v59);
    uint64_t v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v60);
    os_log_type_t v62 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = *(void *)(a1 + 48);
      id v64 = [*(id *)(a1 + 64) count];
      uint64_t v65 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v82 = v63;
      __int16 v83 = 2048;
      *(void *)id v84 = v64;
      *(_WORD *)&v84[8] = 2112;
      *(void *)&v84[10] = v65;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "%@ Add %lu faces for the person (%@)", buf, 0x20u);
    }
  }

  id v66 = [v10 setDetectionType:*(__int16 *)(a1 + 80)];
  uint64_t v68 = MediaAnalysisLogLevel(v66, v67);
  if ((int)v68 >= 7)
  {
    uint64_t v70 = VCPLogInstance(v68, v69);
    unsigned int v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
    os_log_type_t v72 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = *(void *)(a1 + 48);
      unsigned int v74 = [v10 detectionType];
      uint64_t v75 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v82 = v73;
      __int16 v83 = 1024;
      *(_DWORD *)id v84 = v74;
      *(_WORD *)&v84[4] = 2112;
      *(void *)&v84[6] = v75;
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "%@ Set detectionType = %d for this person (%@)", buf, 0x1Cu);
    }
  }

  uint64_t v76 = VCPSignPostLog(v68);
  uint64_t v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
  id v78 = v77;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v77))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v78,  OS_SIGNPOST_INTERVAL_END,  v5,  "GalleryUpdate_personChangeBlock",  (const char *)&unk_100199097,  buf,  2u);
  }

  if (v2)
  {
    uint64_t v79 = mach_absolute_time();
    VCPPerformance_LogMeasurement("GalleryUpdate_personChangeBlock", v79 - v2);
  }
}

void sub_10011DD3C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( +[PHPersonChangeRequest changeRequestForPerson:]( &OBJC_CLASS___PHPersonChangeRequest,  "changeRequestForPerson:",  *(void *)(a1 + 32)));
  [v2 setKeyFace:*(void *)(a1 + 40) forCluster:0];
}

void sub_10011DF04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2 && (*(unsigned int (**)(void))(v2 + 16))())
  {
    if (!*(void *)(a1 + 88)) {
      return;
    }
    NSErrorUserInfoKey v63 = NSLocalizedDescriptionKey;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Update person with photosLibrary cancelled ..."));
    id v64 = v3;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v64,  &v63,  1LL));
    **(void **)(a1 + 8_Block_object_dispose(va, 8) = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -128LL,  v4));
  }

  else
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stringValue]);
    os_signpost_id_t v5 = *(void **)(a1 + 40);
    id v6 = [sub_10011D3B0() person];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    LODWORD(sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, v5) = [v5 isEqual:v7];

    uint64_t v8 = @"Animal";
    if ((_DWORD)v5) {
      uint64_t v8 = @"Human";
    }
    uint64_t v9 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"[GalleryUpdateSyndication][%@][%@]",  v8,  v3));
    uint64_t v4 = (void *)v9;
    if (*(void *)(a1 + 48))
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 64), "mad_allFacesFetchOptions"));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[PHFace fetchFacesWithVuObservationIDs:options:]( &OBJC_CLASS___PHFace,  "fetchFacesWithVuObservationIDs:options:",  *(void *)(a1 + 56),  v11));
      id v13 = [v12 count];
      id v14 = [*(id *)(a1 + 56) count];
      if (v13 != v14)
      {
        uint64_t v16 = MediaAnalysisLogLevel(v14, v15);
        if ((int)v16 >= 6)
        {
          uint64_t v18 = VCPLogInstance(v16, v17);
          uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
          os_log_type_t v20 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v19, v20))
          {
            id v21 = [v12 count];
            id v22 = [*(id *)(a1 + 56) count];
            uint64_t v23 = *(void *)(a1 + 48);
            *(_DWORD *)__int128 buf = 138413314;
            uint64_t v54 = v4;
            __int16 v55 = 2048;
            id v56 = v21;
            __int16 v57 = 2048;
            id v58 = v22;
            __int16 v59 = 2112;
            uint64_t v60 = v3;
            __int16 v61 = 2112;
            uint64_t v62 = v23;
            _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "%@ Fetched %lu faces (expected %lu) for entity %@ (%@)",  buf,  0x34u);
          }
        }
      }

      v48[0] = _NSConcreteStackBlock;
      v48[1] = 3221225472LL;
      v48[2] = sub_10011E44C;
      v48[3] = &unk_1001B9E00;
      id v24 = v12;
      id v49 = v24;
      id v50 = *(id *)(a1 + 48);
      uint64_t v25 = objc_retainBlock(v48);
      uint64_t v26 = *(void **)(a1 + 64);
      id v47 = 0LL;
      unsigned int v27 = [v26 performChangesAndWait:v25 error:&v47];
      id v28 = v47;
      uint64_t v30 = MediaAnalysisLogLevel(v28, v29);
      if (v27)
      {
        if ((int)v30 >= 6)
        {
          uint64_t v32 = VCPLogInstance(v30, v31);
          uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
          os_log_type_t v34 = VCPLogToOSLogType[6];
          if (os_log_type_enabled(v33, v34))
          {
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v54 = v4;
            _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "%@ Successfully persisted identification results",  buf,  0xCu);
          }
        }

        *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 1;
      }

      else
      {
        if ((int)v30 >= 3)
        {
          uint64_t v41 = VCPLogInstance(v30, v31);
          id v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
          os_log_type_t v43 = VCPLogToOSLogType[3];
          if (os_log_type_enabled(v42, v43))
          {
            *(_DWORD *)__int128 buf = 138412546;
            uint64_t v54 = v4;
            __int16 v55 = 2112;
            id v56 = v28;
            _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "%@ Failed to persist identification results - %@",  buf,  0x16u);
          }
        }

        if (*(void *)(a1 + 88))
        {
          NSErrorUserInfoKey v51 = NSLocalizedDescriptionKey;
          uint64_t v46 = v11;
          uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to update face to person %@ in Syndicatin Library - %@",  *(void *)(a1 + 48),  v28));
          unsigned __int8 v52 = v44;
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v52,  &v51,  1LL));
          **(void **)(a1 + 8_Block_object_dispose(va, 8) = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  NSOSStatusErrorDomain,  -18LL,  v45));

          uint64_t v11 = v46;
        }
      }
    }

    else
    {
      uint64_t v35 = MediaAnalysisLogLevel(v9, v10);
      if ((int)v35 >= 6)
      {
        uint64_t v37 = VCPLogInstance(v35, v36);
        os_log_type_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        os_log_type_t v39 = VCPLogToOSLogType[6];
        if (os_log_type_enabled(v38, v39))
        {
          id v40 = [*(id *)(a1 + 56) count];
          *(_DWORD *)__int128 buf = 138412802;
          uint64_t v54 = v4;
          __int16 v55 = 2048;
          id v56 = v40;
          __int16 v57 = 2112;
          id v58 = v3;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "%@ %lu faces in Syndication clustered to entity %@ without tag; Ignoring",
            buf,
            0x20u);
        }
      }

      *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 1;
    }
  }
}

id sub_10011E44C(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) count];
  if (result)
  {
    for (unint64_t i = 0LL; i < (unint64_t)result; ++i)
    {
      uint64_t v4 = objc_autoreleasePoolPush();
      os_signpost_id_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:i]);
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[PHFaceChangeRequest changeRequestForFace:]( &OBJC_CLASS___PHFaceChangeRequest,  "changeRequestForFace:",  v5));
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) UUIDString]);
      [v6 associateFaceWithPersonUUID:v7];

      [v6 setNameSource:6];
      objc_autoreleasePoolPop(v4);
      id result = [*(id *)(a1 + 32) count];
    }
  }

  return result;
}

void sub_10011E794(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("GDVUContext");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E66E8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_10011E8E8();
    sub_10011E7E8();
  }

void sub_10011E7E8()
{
  id v1 = 0LL;
  if (!qword_1001E66F0)
  {
    __int128 v2 = off_1001BDFA8;
    uint64_t v3 = 0LL;
    qword_1001E66F0 = _sl_dlopen(&v2, &v1);
  }

  uint64_t v0 = v1;
  if (!qword_1001E66F0)
  {
    uint64_t v0 = (char *)abort_report_np("%s", v1);
    goto LABEL_7;
  }

  if (v1) {
LABEL_7:
  }
    free(v0);
}

Class sub_10011E894(uint64_t a1)
{
  Class result = objc_getClass("GDVUEntityClass");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E66F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_10011E90C();
    return (Class)sub_10011E8E8();
  }

  return result;
}

uint64_t sub_10011E8E8()
{
  uint64_t v0 = abort_report_np("Unable to find class %s", "GDVUContext");
  return sub_10011E90C(v0);
}

id sub_10011E90C()
{
  uint64_t v0 = (void *)abort_report_np("Unable to find class %s", "GDVUEntityClass");
  return +[VCPResumePausedAnalysisTask taskWithPhotoLibrary:](v0, v1, v2);
}

void sub_10011E974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10011F314( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, id a38)
{
  _Block_object_dispose(&a33, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10011F434(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_10011F444(uint64_t a1)
{
}

void sub_10011F44C(void *a1)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_10011F4D0;
  v6[3] = &unk_1001B9E98;
  id v2 = (void *)a1[4];
  v6[4] = a1[5];
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 analyzeAsset:v6 streamed:0]);
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  os_signpost_id_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v3;
}

uint64_t sub_10011F4D0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v2 pet];

  uint64_t v3 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancel]);
  uint64_t v4 = v3[2]();

  return v4;
}

void sub_10011F52C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10011F540(uint64_t a1)
{
  SEL v1 = (uint64_t (**)(void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cancel]);
  uint64_t v2 = v1[2]();

  return v2;
}

void sub_10011F57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012080C(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  uint64_t v2 = (void *)qword_1001E6700;
  qword_1001E6700 = (uint64_t)v1;
}

void sub_1001209D0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100120A08(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1001211E0(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (v4)
  {
    [*(id *)(*(void *)(a1 + 32) + 16) addObject:v4];
    os_signpost_id_t v5 = *(void **)(*(void *)(a1 + 32) + 24LL);
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v4 taskID]));
    [v5 addObject:v6];
  }

  else
  {
    uint64_t v7 = MediaAnalysisLogLevel(0LL, v3);
    if ((int)v7 >= 4)
    {
      uint64_t v9 = VCPLogInstance(v7, v8);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      os_log_type_t v11 = VCPLogToOSLogType[4];
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (void *)objc_opt_class(*(void *)(a1 + 32));
        uint64_t v15 = a1 + 40;
        id v13 = *(void **)(a1 + 40);
        uint64_t v14 = *(void *)(v15 + 8);
        id v16 = v12;
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v13 photoLibraryURL]);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 path]);
        int v19 = 138412802;
        os_log_type_t v20 = v12;
        __int16 v21 = 2048;
        uint64_t v22 = v14;
        __int16 v23 = 2112;
        id v24 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "[%@] Failed to create task provider (type %lu) for Library %@; skipping",
          (uint8_t *)&v19,
          0x20u);
      }
    }
  }
}

int64_t sub_100121368(id a1, MADTaskProvider *a2, MADTaskProvider *a3)
{
  id v4 = a2;
  os_signpost_id_t v5 = a3;
  id v6 = -[MADTaskProvider priority](v4, "priority");
  if (v6 > (id)-[MADTaskProvider priority](v5, "priority"))
  {
LABEL_5:
    int64_t v8 = -1LL;
    goto LABEL_6;
  }

  id v7 = -[MADTaskProvider priority](v4, "priority");
  if (v7 >= (id)-[MADTaskProvider priority](v5, "priority"))
  {
    id v9 = -[MADTaskProvider iterations](v4, "iterations");
    if (v9 <= (id)-[MADTaskProvider iterations](v5, "iterations"))
    {
      id v11 = -[MADTaskProvider iterations](v4, "iterations");
      int64_t v8 = v11 < (id)-[MADTaskProvider iterations](v5, "iterations");
      goto LABEL_6;
    }

    goto LABEL_5;
  }

  int64_t v8 = 1LL;
LABEL_6:

  return v8;
}

void sub_1001217DC(uint64_t a1)
{
  uint64_t v2 = VCPSignPostLog(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  os_signpost_id_t v4 = os_signpost_id_generate(v3);

  uint64_t v6 = VCPSignPostLog(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int64_t v8 = v7;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_INTERVAL_BEGIN,  v4,  "MADTaskCoordinator_Prepare",  (const char *)&unk_100199097,  buf,  2u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v9 addBreadcrumb:@"[%@] Preparing assets", v10];

  [*(id *)(a1 + 40) prepare];
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v11 addBreadcrumb:@"[%@] Finished preparing assets", v12];

  uint64_t v14 = VCPSignPostLog(v13);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  id v16 = v15;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v16,  OS_SIGNPOST_INTERVAL_END,  v4,  "MADTaskCoordinator_Prepare",  (const char *)&unk_100199097,  buf,  2u);
  }

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 80LL), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 72LL));
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 48) + 48LL));
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(dispatch_queue_s **)(v17 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100121CE8;
  block[3] = &unk_1001BC6A0;
  void block[4] = v17;
  dispatch_async(v18, block);
  uint64_t v20 = VCPSignPostLog(v19);
  __int16 v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  os_signpost_id_t v22 = os_signpost_id_generate(v21);

  uint64_t v24 = VCPSignPostLog(v23);
  uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
  uint64_t v26 = v25;
  if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v25))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v26,  OS_SIGNPOST_INTERVAL_BEGIN,  v22,  "MADTaskCoordinator_Process",  (const char *)&unk_100199097,  buf,  2u);
  }

  unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v27 addBreadcrumb:@"[%@] Processing assets", v28];

  [*(id *)(a1 + 40) process];
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v29 addBreadcrumb:@"[%@] Finished processing assets", v30];

  uint64_t v32 = VCPSignPostLog(v31);
  uint64_t v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
  os_log_type_t v34 = v33;
  if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v33))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v34,  OS_SIGNPOST_INTERVAL_END,  v22,  "MADTaskCoordinator_Process",  (const char *)&unk_100199097,  buf,  2u);
  }

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 88LL), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v35 = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 80LL));
  uint64_t v36 = VCPSignPostLog(v35);
  uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  os_signpost_id_t v38 = os_signpost_id_generate(v37);

  uint64_t v40 = VCPSignPostLog(v39);
  uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
  id v42 = v41;
  if (v38 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v41))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v42,  OS_SIGNPOST_INTERVAL_BEGIN,  v38,  "MADTaskCoordinator_Publish",  (const char *)&unk_100199097,  buf,  2u);
  }

  os_log_type_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v43 addBreadcrumb:@"[%@] Publishing assets", v44];

  [*(id *)(a1 + 40) publish];
  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v45 addBreadcrumb:@"[%@] Publishing assets", v46];

  uint64_t v48 = VCPSignPostLog(v47);
  id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
  id v50 = v49;
  if (v38 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v49))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v50,  OS_SIGNPOST_INTERVAL_END,  v38,  "MADTaskCoordinator_Publish",  (const char *)&unk_100199097,  buf,  2u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 88LL));
  [*(id *)(a1 + 32) retireTask:*(void *)(a1 + 40)];
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 48) + 48LL));
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 48) + 56LL));
  uint64_t v51 = *(void *)(a1 + 48);
  unsigned __int8 v52 = *(dispatch_queue_s **)(v51 + 40);
  v53[0] = _NSConcreteStackBlock;
  v53[1] = 3221225472LL;
  v53[2] = sub_100121CF0;
  v53[3] = &unk_1001BC6A0;
  v53[4] = v51;
  dispatch_async(v52, v53);
}

id sub_100121CE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateScheduling];
}

id sub_100121CF0(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateScheduling];
}

void sub_100122044(uint64_t a1)
{
  uint64_t v2 = VCPSignPostLog(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  os_signpost_id_t v4 = os_signpost_id_generate(v3);

  uint64_t v6 = VCPSignPostLog(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int64_t v8 = v7;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_INTERVAL_BEGIN,  v4,  "MADTaskCoordinator_Prepare",  (const char *)&unk_100199097,  buf,  2u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v9 addBreadcrumb:@"[%@] Preparing assets", v10];

  [*(id *)(a1 + 40) prepare];
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v11 addBreadcrumb:@"[%@] Finished preparing assets", v12];

  uint64_t v14 = VCPSignPostLog(v13);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  id v16 = v15;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v16,  OS_SIGNPOST_INTERVAL_END,  v4,  "MADTaskCoordinator_Prepare",  (const char *)&unk_100199097,  buf,  2u);
  }

  uint64_t v18 = VCPSignPostLog(v17);
  uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
  os_signpost_id_t v20 = os_signpost_id_generate(v19);

  uint64_t v22 = VCPSignPostLog(v21);
  uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  uint64_t v24 = v23;
  if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v23))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v24,  OS_SIGNPOST_INTERVAL_BEGIN,  v20,  "MADTaskCoordinator_Download",  (const char *)&unk_100199097,  buf,  2u);
  }

  uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v25 addBreadcrumb:@"[%@] Downloading assets", v26];

  [*(id *)(a1 + 40) download];
  unsigned int v27 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v27 addBreadcrumb:@"[%@] Finished downloading assets", v28];

  uint64_t v30 = VCPSignPostLog(v29);
  uint64_t v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  uint64_t v32 = v31;
  if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v31))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v32,  OS_SIGNPOST_INTERVAL_END,  v20,  "MADTaskCoordinator_Download",  (const char *)&unk_100199097,  buf,  2u);
  }

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 120LL), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 112LL));
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 48) + 48LL));
  uint64_t v33 = *(void *)(a1 + 48);
  os_log_type_t v34 = *(dispatch_queue_s **)(v33 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001226B0;
  block[3] = &unk_1001BC6A0;
  void block[4] = v33;
  dispatch_async(v34, block);
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 80LL), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v35 = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 120LL));
  uint64_t v36 = VCPSignPostLog(v35);
  uint64_t v37 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
  os_signpost_id_t v38 = os_signpost_id_generate(v37);

  uint64_t v40 = VCPSignPostLog(v39);
  uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
  id v42 = v41;
  if (v38 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v41))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v42,  OS_SIGNPOST_INTERVAL_BEGIN,  v38,  "MADTaskCoordinator_Process",  (const char *)&unk_100199097,  buf,  2u);
  }

  os_log_type_t v43 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v43 addBreadcrumb:@"[%@] Processing assets", v44];

  [*(id *)(a1 + 40) process];
  uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v45 addBreadcrumb:@"[%@] Finished processing assets", v46];

  uint64_t v48 = VCPSignPostLog(v47);
  id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(v48);
  id v50 = v49;
  if (v38 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v49))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v50,  OS_SIGNPOST_INTERVAL_END,  v38,  "MADTaskCoordinator_Process",  (const char *)&unk_100199097,  buf,  2u);
  }

  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 88LL), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v51 = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 80LL));
  uint64_t v52 = VCPSignPostLog(v51);
  os_log_type_t v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
  os_signpost_id_t v54 = os_signpost_id_generate(v53);

  uint64_t v56 = VCPSignPostLog(v55);
  __int16 v57 = (os_log_s *)objc_claimAutoreleasedReturnValue(v56);
  id v58 = v57;
  if (v54 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v57))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v58,  OS_SIGNPOST_INTERVAL_BEGIN,  v54,  "MADTaskCoordinator_Publish",  (const char *)&unk_100199097,  buf,  2u);
  }

  __int16 v59 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v59 addBreadcrumb:@"[%@] Publishing assets", v60];

  [*(id *)(a1 + 40) publish];
  __int16 v61 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v62 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v61 addBreadcrumb:@"[%@] Finished publishing assets", v62];

  uint64_t v64 = VCPSignPostLog(v63);
  uint64_t v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
  id v66 = v65;
  if (v54 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v65))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v66,  OS_SIGNPOST_INTERVAL_END,  v54,  "MADTaskCoordinator_Publish",  (const char *)&unk_100199097,  buf,  2u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 88LL));
  [*(id *)(a1 + 32) retireTask:*(void *)(a1 + 40)];
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 48) + 48LL));
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 48) + 56LL));
  uint64_t v67 = *(void *)(a1 + 48);
  uint64_t v68 = *(dispatch_queue_s **)(v67 + 40);
  v69[0] = _NSConcreteStackBlock;
  v69[1] = 3221225472LL;
  v69[2] = sub_1001226B8;
  v69[3] = &unk_1001BC6A0;
  v69[4] = v67;
  dispatch_async(v68, v69);
}

id sub_1001226B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateScheduling];
}

id sub_1001226B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateScheduling];
}

void sub_100122980(uint64_t a1)
{
  uint64_t v2 = VCPSignPostLog(a1);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
  os_signpost_id_t v4 = os_signpost_id_generate(v3);

  uint64_t v6 = VCPSignPostLog(v5);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
  int64_t v8 = v7;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v7))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v8,  OS_SIGNPOST_INTERVAL_BEGIN,  v4,  "MADTaskCoordinator_ClusterProcess",  (const char *)&unk_100199097,  buf,  2u);
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v9 addBreadcrumb:@"[%@] Processing cluster task", v10];

  [*(id *)(a1 + 40) process];
  id v11 = (void *)objc_claimAutoreleasedReturnValue(+[MADStateHandler sharedStateHandler](&OBJC_CLASS___MADStateHandler, "sharedStateHandler"));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) logDescription]);
  [v11 addBreadcrumb:@"[%@] Finished processing cluster task", v12];

  uint64_t v14 = VCPSignPostLog(v13);
  uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  id v16 = v15;
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v16,  OS_SIGNPOST_INTERVAL_END,  v4,  "MADTaskCoordinator_ClusterProcess",  (const char *)&unk_100199097,  buf,  2u);
  }

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 48) + 144LL));
  [*(id *)(a1 + 32) retireTask:*(void *)(a1 + 40)];
  dispatch_group_enter(*(dispatch_group_t *)(*(void *)(a1 + 48) + 48LL));
  dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 48) + 56LL));
  uint64_t v17 = *(void *)(a1 + 48);
  uint64_t v18 = *(dispatch_queue_s **)(v17 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100122B70;
  block[3] = &unk_1001BC6A0;
  void block[4] = v17;
  dispatch_async(v18, block);
}

id sub_100122B70(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateScheduling];
}

id sub_100123134(uint64_t a1)
{
  return [*(id *)(a1 + 32) evaluateScheduling];
}

void sub_100123288(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  uint64_t v2 = (void *)qword_1001E6710;
  qword_1001E6710 = (uint64_t)v1;
}

void sub_1001238C0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, void *a27, uint64_t a28, char a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, id a38)
{
  _Block_object_dispose(&a29, 8);
  _Block_object_dispose(&a33, 8);

  _Block_object_dispose((const void *)(v42 - 224), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001239F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_100123A08(uint64_t a1)
{
}

void sub_100123A10(uint64_t a1, uint64_t a2, double a3)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 5)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2048;
      double v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ %.2f%% complete", (uint8_t *)&v9, 0x16u);
    }
  }

  *(double *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = a3;
}

void sub_100123AF8(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  [*(id *)(*(void *)(a1[6] + 8) + 40) stop];
  id v5 = [v4 code];
  uint64_t v7 = MediaAnalysisLogLevel(v5, v6);
  if ((int)v7 >= 5)
  {
    uint64_t v9 = VCPLogInstance(v7, v8);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    os_log_type_t v11 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = a1[4];
      [*(id *)(*(void *)(a1[6] + 8) + 40) elapsedTimeSeconds];
      uint64_t v14 = @"interrupted";
      int v27 = 138413058;
      uint64_t v28 = v12;
      __int16 v29 = 2112;
      if (!(_DWORD)v5) {
        uint64_t v14 = @"finished";
      }
      uint64_t v30 = v14;
      __int16 v31 = 2048;
      uint64_t v32 = v13;
      __int16 v33 = 1024;
      int v34 = (int)v5;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%@ Processing %@ after %0.6fs (%d)", (uint8_t *)&v27, 0x26u);
    }
  }

  if ((_DWORD)v5 != -128 && (_DWORD)v5)
  {
    uint64_t v15 = VCPLogInstance(v7, v8);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_FAULT)) {
      sub_100123D34((uint64_t)a1, (int)v5, v16);
    }
  }

  uint64_t v17 = *(void *)(a1[7] + 8LL);
  uint64_t v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;

  uint64_t v21 = MediaAnalysisLogLevel(v19, v20);
  if ((int)v21 >= 5)
  {
    uint64_t v23 = VCPLogInstance(v21, v22);
    uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    os_log_type_t v25 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = a1[4];
      int v27 = 138412290;
      uint64_t v28 = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "%@ Exiting processing task ...", (uint8_t *)&v27, 0xCu);
    }
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_100123D00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100123D34(uint64_t a1, int a2, os_log_t log)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = 138412546;
  uint64_t v5 = v3;
  __int16 v6 = 1024;
  int v7 = a2;
  _os_log_fault_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_FAULT,  "%@ Processing failed (%d)",  (uint8_t *)&v4,  0x12u);
}

void sub_100123F14(uint64_t a1)
{
  id v1 = objc_alloc_init((Class)objc_opt_class(*(void *)(a1 + 32)));
  uint64_t v2 = (void *)qword_1001E6720;
  qword_1001E6720 = (uint64_t)v1;
}

id sub_1001240A8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 16) addObject:*(void *)(a1 + 40)];
}

void sub_100124148(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    __int16 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 16) count];
      *(_DWORD *)__int128 buf = 67109120;
      LODWORD(v24) = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[MADStateHandler] Dumping %u breadcrumbs...", buf, 8u);
    }
  }

  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  id v9 = *(id *)(*(void *)(a1 + 32) + 16LL);
  id v10 = [v9 countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v10)
  {
    id v12 = v10;
    uint64_t v13 = *(void *)v20;
    os_log_type_t v14 = VCPLogToOSLogType[5];
    do
    {
      uint64_t v15 = 0LL;
      do
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v9);
        }
        uint64_t v16 = *(void *)(*((void *)&v19 + 1) + 8LL * (void)v15);
        id v10 = (id)MediaAnalysisLogLevel(v10, v11);
        if ((int)v10 >= 5)
        {
          uint64_t v17 = VCPLogInstance(v10, v11);
          uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
          if (os_log_type_enabled(v18, v14))
          {
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v24 = v16;
            _os_log_impl((void *)&_mh_execute_header, v18, v14, "[MADStateHandler]\t%@", buf, 0xCu);
          }
        }

        uint64_t v15 = (char *)v15 + 1;
      }

      while (v12 != v15);
      id v10 = [v9 countByEnumeratingWithState:&v19 objects:v25 count:16];
      id v12 = v10;
    }

    while (v10);
  }
}

void sub_100124380(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 24LL) = *(void *)(a1 + 40);
  uint64_t v2 = objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(v3 + 32);
  *(void *)(v3 + 32) = v2;
}

void sub_100124418(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 24LL) = 0LL;
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = 0LL;
}

void *sub_1001244C4(void *result)
{
  uint64_t v1 = result;
  if (result[6])
  {
    Class result = *(id *)(result[4] + 32LL);
    *(void *)v1[6] = result;
  }

  *(void *)(*(void *)(v1[5] + 8LL) + 24LL) = *(void *)(v1[4] + 24LL);
  return result;
}

void sub_100124548(id a1)
{
  uint64_t v1 = objc_claimAutoreleasedReturnValue(+[VCPLogManager dateFormatter](&OBJC_CLASS___VCPLogManager, "dateFormatter"));
  uint64_t v2 = (void *)qword_1001E6738;
  qword_1001E6738 = v1;
}

void sub_100124694( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  id v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)&OBJC_CLASS___VCPSystemMonitor;
  -[_Unwind_Exception dealloc](&a9, "dealloc");
  _Unwind_Resume(a1);
}

void sub_100124D44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100124D68(id a1)
{
  CFTypeRef v2 = IOPSCopyPowerSourcesInfo();
  active = (const void *)IOPSGetActiveBattery();
  byte_1001E6740 = IOPSGetPowerSourceDescription(v2, active) != 0LL;
  sub_10000421C(&v2);
}

void sub_100124DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
}

void sub_100125178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1001254D8(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkPluggedIn];
}

id sub_1001254E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkScreenLocked];
}

id sub_1001254E8(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkFullyCharged];
}

id sub_100125508(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkThermalPressure];
}

id sub_100125510(uint64_t a1)
{
  return [*(id *)(a1 + 32) checkFreeSpace];
}

void sub_100125AD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

id sub_100125AF0()
{
  uint64_t v4 = 0LL;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x2050000000LL;
  uint64_t v0 = (void *)qword_1001E6750;
  uint64_t v7 = qword_1001E6750;
  if (!qword_1001E6750)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100126AB8;
    v3[3] = &unk_1001BDF88;
    v3[4] = &v4;
    sub_100126AB8((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }

  id v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_100125B8C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100125BA4(uint64_t a1)
{
  CFTypeRef v2 = (void *)objc_claimAutoreleasedReturnValue(+[MADGDUtilities sharedInstance](&OBJC_CLASS___MADGDUtilities, "sharedInstance"));
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 208LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  v6[2] = sub_100125C94;
  v6[3] = &unk_1001B99C8;
  id v7 = *(id *)(a1 + 56);
  [v2 syncVisualUnderstandingService:v4 withPhotosLibrary:v3 cancelOrExtendTimeoutBlock:v6];

  [*(id *)(a1 + 48) stop];
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[VCPMADCoreAnalyticsManager sharedManager](&OBJC_CLASS___VCPMADCoreAnalyticsManager, "sharedManager"));
  [*(id *)(a1 + 48) elapsedTimeSeconds];
  objc_msgSend( v5,  "accumulateDoubleValue:forField:andEvent:",  @"FaceVUSyncElapsedTimeInSeconds",  @"com.apple.mediaanalysisd.FaceAnalysisRunSession");
}

uint64_t sub_100125C94(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v3 pet];

  return 0LL;
}

uint64_t sub_100125CE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v3 pet];

  return 0LL;
}

void sub_1001261B0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 200LL) = *(void *)(a1 + 40) == 0LL;
  if (*(_BYTE *)(*(void *)(a1 + 32) + 200LL) && (int)MediaAnalysisLogLevel(a1, a2) >= 6)
  {
    uint64_t v3 = VCPLogInstance();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 176LL);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Asset processing done", (uint8_t *)&v7, 0xCu);
    }
  }

void sub_100126358(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 201LL) = *(void *)(a1 + 40) == 0LL;
  if (*(_BYTE *)(*(void *)(a1 + 32) + 201LL) && (int)MediaAnalysisLogLevel(a1, a2) >= 6)
  {
    uint64_t v3 = VCPLogInstance();
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 176LL);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Download asset processing done", (uint8_t *)&v7, 0xCu);
    }
  }

uint64_t sub_100126508(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = *(void *)(a2 + 40);
  *(void *)(a2 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = 0LL;
  return result;
}

void sub_100126518(uint64_t a1)
{
}

void sub_100126520(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 7)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 176LL);
      int v40 = 138412290;
      uint64_t v41 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "%@ Checking next cluster processing task",  (uint8_t *)&v40,  0xCu);
    }
  }

  uint64_t v9 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v9 + 201))
  {
    unsigned __int8 v10 = 0;
  }

  else
  {
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[VCPInternetReachability sharedInstance](&OBJC_CLASS___VCPInternetReachability, "sharedInstance"));
    unsigned __int8 v10 = [v11 hasWifiOrEthernetConnection];

    uint64_t v9 = *(void *)(a1 + 32);
  }

  if (*(_BYTE *)(v9 + 200) && (v10 & 1) == 0 && !*(void *)(v9 + 152))
  {
    *(void *)(v9 + 152) = 20LL;
    uint64_t v9 = *(void *)(a1 + 32);
  }

  uint64_t v12 = *(void *)(v9 + 152);
  if (v12 == 20 || v12 == 10)
  {
    uint64_t v14 = MediaAnalysisLogLevel(v3, v4);
    if ((int)v14 >= 6)
    {
      uint64_t v16 = VCPLogInstance(v14, v15);
      uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      os_log_type_t v18 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v20 = *(void *)(v19 + 176);
        uint64_t v21 = *(void *)(v19 + 152);
        int v40 = 138412546;
        uint64_t v41 = v20;
        __int16 v42 = 2048;
        uint64_t v43 = v21;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "%@ Scheduling person processing (%lu)",  (uint8_t *)&v40,  0x16u);
      }
    }

    unsigned int v22 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 136), "mad_useVUGallery");
    uint64_t v23 = *(void **)(a1 + 32);
    uint64_t v24 = v23[17];
    uint64_t v25 = v23[19];
    uint64_t v26 = v23[18];
    if (v22) {
      uint64_t v27 = objc_claimAutoreleasedReturnValue( +[MADPhotosPersonProcessingTask taskWithPhotoLibrary:requirement:understandingService:andContext:]( &OBJC_CLASS___MADPhotosPersonProcessingTask,  "taskWithPhotoLibrary:requirement:understandingService:andContext:",  v24,  v25,  v23[26],  v26));
    }
    else {
      uint64_t v27 = objc_claimAutoreleasedReturnValue( +[MADPhotosPersonProcessingTask taskWithPhotoLibrary:requirement:faceClusterer:andContext:]( &OBJC_CLASS___MADPhotosPersonProcessingTask,  "taskWithPhotoLibrary:requirement:faceClusterer:andContext:",  v24,  v25,  v23[21],  v26));
    }
    uint64_t v28 = *(void *)(*(void *)(a1 + 40) + 8LL);
    __int16 v29 = *(void **)(v28 + 40);
    *(void *)(v28 + 4sub_10002C3DC( (void *)&_mh_execute_header,  (os_log_s *)&_os_log_default,  v0,  "Failed to unlock CVPixelBuffer (%p, %d)",  v1,  v2,  v3,  v4, 0) = v27;

    *(void *)(*(void *)(a1 + 32) + 152LL) = 30LL;
    uint64_t v32 = MediaAnalysisLogLevel(v30, v31);
    if ((int)v32 >= 6)
    {
      uint64_t v34 = VCPLogInstance(v32, v33);
      uint64_t v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
      os_log_type_t v36 = VCPLogToOSLogType[6];
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = *(void *)(a1 + 32);
        uint64_t v38 = *(void *)(v37 + 176);
        uint64_t v39 = *(void *)(v37 + 152);
        int v40 = 138412546;
        uint64_t v41 = v38;
        __int16 v42 = 2048;
        uint64_t v43 = v39;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "%@ Scheduled person processing (%lu)",  (uint8_t *)&v40,  0x16u);
      }
    }
  }

void sub_1001268B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = objc_opt_class(&OBJC_CLASS___MADAssetProcessingTask);
  uint64_t isKindOfClass = objc_opt_isKindOfClass(v2, v3);
  if ((isKindOfClass & 1) != 0)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (*(_BYTE *)(v6 + 201))
    {
      LOBYTE(v7) = 1;
    }

    else
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[VCPInternetReachability sharedInstance](&OBJC_CLASS___VCPInternetReachability, "sharedInstance"));
      unsigned int v7 = [v8 hasWifiOrEthernetConnection] ^ 1;

      uint64_t v6 = *(void *)(a1 + 40);
    }

    uint64_t v9 = 10LL;
    *(void *)(v6 + 152) = v9;
    uint64_t v10 = MediaAnalysisLogLevel(isKindOfClass, v5);
    if ((int)v10 >= 7)
    {
      uint64_t v12 = VCPLogInstance(v10, v11);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      os_log_type_t v14 = VCPLogToOSLogType[7];
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = *(void *)(a1 + 40);
        uint64_t v16 = *(void *)(v15 + 176);
        uint64_t v17 = *(void *)(v15 + 152);
        int v18 = 138412546;
        uint64_t v19 = v16;
        __int16 v20 = 2048;
        uint64_t v21 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "%@ Retiring asset processing task; call for person processing (%lu)",
          (uint8_t *)&v18,
          0x16u);
      }
    }
  }

void sub_100126AB8(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = objc_getClass("GDVUEntityRecognitionClient");
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E6750 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    sub_1000B87A4();
    sub_100126B0C();
  }

void sub_100126B0C()
{
  uint64_t v1 = 0LL;
  if (!qword_1001E6758)
  {
    __int128 v2 = off_1001BE0F0;
    uint64_t v3 = 0LL;
    qword_1001E6758 = _sl_dlopen(&v2, &v1);
  }

  uint64_t v0 = v1;
  if (!qword_1001E6758)
  {
    uint64_t v0 = (char *)abort_report_np("%s", v1);
    goto LABEL_7;
  }

  if (v1) {
LABEL_7:
  }
    free(v0);
}

Class sub_100126BB8(uint64_t a1)
{
  Class result = objc_getClass("GDVUVisualUnderstandingService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = result;
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL))
  {
    qword_1001E6760 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL);
  }

  else
  {
    uint64_t v3 = (void *)sub_1000B87C8();
    return (Class)+[MADDatabaseRestoreFastPassBackgroundSystemTask identifier](v3, v4);
  }

  return result;
}

void sub_100126D64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_100126D94(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  (*(void (**)(void, id))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), [v4 code]);
}

void sub_100126DDC( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_100126E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1001270CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100127140(uint64_t a1)
{
  return [*(id *)(a1 + 32) isCanceled];
}

void sub_100127420( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, void *a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, void *a26)
{
  _Unwind_Resume(a1);
}

void sub_1001274AC(uint64_t a1, uint64_t a2, double a3)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 7)
  {
    uint64_t v5 = VCPLogInstance();
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2048;
      double v12 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%@ Download progress: %.2f", (uint8_t *)&v9, 0x16u);
    }
  }

void sub_100127588(uint64_t a1, uint64_t a2)
{
  if ((int)MediaAnalysisLogLevel(a1, a2) >= 6)
  {
    uint64_t v3 = VCPLogInstance();
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    os_log_type_t v5 = VCPLogToOSLogType[6];
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%@ Downloaded resource received", (uint8_t *)&v7, 0xCu);
    }
  }

void sub_100127650(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_log_type_t v5 = v3;
  if (v3)
  {
    if ((int)MediaAnalysisLogLevel(v3, v4) >= 3)
    {
      uint64_t v6 = VCPLogInstance();
      int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
      os_log_type_t v8 = VCPLogToOSLogType[3];
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v17 = 138412546;
        uint64_t v18 = v9;
        __int16 v19 = 2112;
        __int16 v20 = v5;
        uint64_t v10 = "%@ Failed to download - %@";
        __int16 v11 = v7;
        os_log_type_t v12 = v8;
        uint32_t v13 = 22;
LABEL_8:
        _os_log_impl((void *)&_mh_execute_header, v11, v12, v10, (uint8_t *)&v17, v13);
        goto LABEL_9;
      }

      goto LABEL_9;
    }
  }

  else if ((int)MediaAnalysisLogLevel(0LL, v4) >= 7)
  {
    uint64_t v14 = VCPLogInstance();
    int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    os_log_type_t v15 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v7, v15))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      int v17 = 138412290;
      uint64_t v18 = v16;
      uint64_t v10 = "%@ Download completed";
      __int16 v11 = v7;
      os_log_type_t v12 = v15;
      uint32_t v13 = 12;
      goto LABEL_8;
    }

void sub_1001277AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100128990( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, void *a23, void *a24)
{
  _Unwind_Resume(a1);
}

id sub_100128C60(uint64_t a1)
{
  return [*(id *)(a1 + 32) _requestAssetResource:*(void *)(a1 + 40)];
}

LABEL_65:
  os_log_type_t v110 = MediaAnalysisLogLevel(v25, v26);
  if ((int)v110 >= 7)
  {
    unsigned __int8 v112 = VCPLogInstance(v110, v111);
    id v113 = (os_log_s *)objc_claimAutoreleasedReturnValue(v112);
    BOOL v114 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v113, v114))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v113, v114, "Finished subsampled analysis", buf, 2u);
    }
  }

  uint64_t v115 = VCPSignPostLog(v110);
  uint64_t v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
  uint64_t v117 = v116;
  if (v10 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v116))
  {
    *(_WORD *)__int128 buf = 0;
    _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v117,  OS_SIGNPOST_INTERVAL_END,  v5,  "VCPSubsampledAnalysisTask",  (const char *)&unk_100199097,  buf,  2u);
  }

  return 0;
}

void sub_10012CBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10012CBE8(id a1)
{
  return 0;
}

void sub_10012CDF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012CE44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012D024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012D264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012DA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012DB00(id a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue(+[VCPWatchdog sharedWatchdog](&OBJC_CLASS___VCPWatchdog, "sharedWatchdog"));
  [v1 pet];
}

void sub_10012DB3C( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_10012DDE0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  _Unwind_Resume(a1);
}

void sub_10012DE24(id a1)
{
  if ((int)MediaAnalysisLogLevel(a1, v1) >= 7)
  {
    uint64_t v2 = VCPLogInstance();
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    os_log_type_t v4 = VCPLogToOSLogType[7];
    if (os_log_type_enabled(v3, v4))
    {
      *(_WORD *)os_log_type_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Real-time analysis server XPC connection interrupted", v5, 2u);
    }
  }

void sub_10012DEA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = MediaAnalysisLogLevel(a1, a2);
  if ((int)v3 >= 5)
  {
    uint64_t v5 = VCPLogInstance(v3, v4);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    os_log_type_t v7 = VCPLogToOSLogType[5];
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Real-time analysis server XPC connection invalidated", v10, 2u);
    }
  }

  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[VCPClientManager sharedManager](&OBJC_CLASS___VCPClientManager, "sharedManager"));
    [v9 removeClientHandler:WeakRetained];
  }
}

void sub_10012DF5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012DFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10012E4BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id objc_msgSend__calculateCompleteDateWithEvent_progress_taskID_checkpoint_featureAvailableCheck_database_completeTimestampKey_completeThreshold_checkpointTimestampKey_currentDate_startDate_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_calculateCompleteDateWithEvent:progress:taskID:checkpoint:featureAvailableCheck:database:completeTimestampKe y:completeThreshold:checkpointTimestampKey:currentDate:startDate:");
}

id objc_msgSend__cleanupRequestedAssets_fromDatabase_withProcessingType_photoLibrary_unprocessedAssets_earliestAssetModificationDate_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_cleanupRequestedAssets:fromDatabase:withProcessingType:photoLibrary:unprocessedAssets:earliestAssetModificationDate:");
}

id objc_msgSend__fetchChangedPersonSinceChangeToken_photosLibrary_changedPersonLocalIdentifiers_latestChangeToken_cancelOrExtendTimeoutBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_fetchChangedPersonSinceChangeToken:photosLibrary:changedPersonLocalIdentifiers:latestChangeToken:cancelOrExt endTimeoutBlock:");
}

id objc_msgSend__getStartDateFromDatabase_withStartTimestampKey_coreAnalyticsEventKey_andCurrentDate_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_getStartDateFromDatabase:withStartTimestampKey:coreAnalyticsEventKey:andCurrentDate:");
}

id objc_msgSend__isAssetEligible_withAnalysisDatabase_previousStatus_previousAttempts_lastAttemptDate_allowDownload_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_isAssetEligible:withAnalysisDatabase:previousStatus:previousAttempts:lastAttemptDate:allowDownload:");
}

id objc_msgSend__isAssetEligible_withPreviousStatus_previousAttempts_lastAttemptDate_allowDownload_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_isAssetEligible:withPreviousStatus:previousAttempts:lastAttemptDate:allowDownload:");
}

id objc_msgSend__parsePhotosTaxonomyClassificationObservations_toClassificationResults_andDetectorSceneClassIds_isEntityNet_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_parsePhotosTaxonomyClassificationObservations:toClassificationResults:andDetectorSceneClassIds:isEntityNet:");
}

id objc_msgSend__prepareBGSTCheckpointWithEvent_taskID_checkpoint_featureAvailableCheck_database_databaseModified_checkpointTimestampKey_currentDate_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_prepareBGSTCheckpointWithEvent:taskID:checkpoint:featureAvailableCheck:database:databaseModified:checkpointT imestampKey:currentDate:");
}

id objc_msgSend__processDownloadEligibleAssetsInPhotoLibrary_withAnalysisDatabase_andProgress_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_processDownloadEligibleAssetsInPhotoLibrary:withAnalysisDatabase:andProgress:");
}

id objc_msgSend__queryAndReportProgressForAnalysis_photoLibrary_cancelOrExtendTimeoutBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_queryAndReportProgressForAnalysis:photoLibrary:cancelOrExtendTimeoutBlock:");
}

id objc_msgSend__queryAndReportProgressForMediaAnalysisImageForPhotoLibrary_reuseCachedValue_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_queryAndReportProgressForMediaAnalysisImageForPhotoLibrary:reuseCachedValue:");
}

id objc_msgSend__queryAndReportProgressForPhotoLibrary_analysisType_analysisSubtype_queryKeys_cancelOrExtendTimeoutBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_queryAndReportProgressForPhotoLibrary:analysisType:analysisSubtype:queryKeys:cancelOrExtendTimeoutBlock:");
}

id objc_msgSend__queryAndReportProgressForPrioritizedFaceAnalysisForPhotoLibrary_cancelOrExtendTimeoutBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_queryAndReportProgressForPrioritizedFaceAnalysisForPhotoLibrary:cancelOrExtendTimeoutBlock:");
}

id objc_msgSend__reportCoreAnalyticsWithAsset_analysis_analysisStatus_processingInterval_extendedAnalysisStatus_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_reportCoreAnalyticsWithAsset:analysis:analysisStatus:processingInterval:extendedAnalysisStatus:");
}

id objc_msgSend__reportMediaAnalysisImageCheckpoint_withProgressPercentage_checkpointTimestampKey_photoLibrary_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_reportMediaAnalysisImageCheckpoint:withProgressPercentage:checkpointTimestampKey:photoLibrary:");
}

id objc_msgSend__reportMediaAnalysisSubcategoryWorkloadProgress_totalAssetCount_forSubCategory_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_reportMediaAnalysisSubcategoryWorkloadProgress:totalAssetCount:forSubCategory:");
}

id objc_msgSend__storeComputeServiceRequests_assetURLs_extensionData_resultDirectoryURL_resultExtensionData_requestID_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_storeComputeServiceRequests:assetURLs:extensionData:resultDirectoryURL:resultExtensionData:requestID:");
}

id objc_msgSend__storeComputeServiceRequests_localIdentifiers_photoLibraryURL_resultDirectoryURL_resultExtensionData_requestID_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_storeComputeServiceRequests:localIdentifiers:photoLibraryURL:resultDirectoryURL:resultExtensionData:requestID:");
}

id objc_msgSend__taskWithPhotosAssets_photoLibraryURLPath_requestID_requests_resultDirectoryURL_cancelBlock_progressHandler_resultsHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_taskWithPhotosAssets:photoLibraryURLPath:requestID:requests:resultDirectoryURL:cancelBlock:progressHandler:r esultsHandler:completionHandler:");
}

id objc_msgSend__taskWithURLAssets_requestID_requests_resultDirectoryURL_cancelBlock_progressHandler_resultsHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "_taskWithURLAssets:requestID:requests:resultDirectoryURL:cancelBlock:progressHandler:resultsHandler:completionHandler:");
}

id objc_msgSend__updateQuickFaceIDModelForPhotoLibrary_withContext_andQuickFaceIDManager_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "_updateQuickFaceIDModelForPhotoLibrary:withContext:andQuickFaceIDManager:");
}

id objc_msgSend_archiveDirectoryAtURL_toOutputURL_dataType_options_entryPredicate_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "archiveDirectoryAtURL:toOutputURL:dataType:options:entryPredicate:completionHandler:");
}

id objc_msgSend_assetIconicScoreForSceneClassifications_assetLatitude_assetLongitude_sceneGeography_sceneTaxonomy_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "assetIconicScoreForSceneClassifications:assetLatitude:assetLongitude:sceneGeography:sceneTaxonomy:");
}

id objc_msgSend_assetWithImageData_uniformTypeIdentifier_identifier_clientBundleID_clientTeamID_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assetWithImageData:uniformTypeIdentifier:identifier:clientBundleID:clientTeamID:");
}

id objc_msgSend_assetWithLocalIdentifier_version_dateModified_dateAnalyzed_types_flags_statsFlags_masterFingerprint_adjustedFingerprint_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "assetWithLocalIdentifier:version:dateModified:dateAnalyzed:types:flags:statsFlags:masterFingerprint:adjustedFingerprint:");
}

id objc_msgSend_assetWithPhotosAsset_pixelBuffer_orientation_clientBundleID_clientTeamID_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "assetWithPhotosAsset:pixelBuffer:orientation:clientBundleID:clientTeamID:");
}

id objc_msgSend_batchWithAnalysisDatabase_cancelBlock_monochromeBufferCreator_imageLoader_session_ivsPool_rotationModel_rotationBufferCreator_embeddingBufferCreator_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "batchWithAnalysisDatabase:cancelBlock:monochromeBufferCreator:imageLoader:session:ivsPool:rotationModel:rotat ionBufferCreator:embeddingBufferCreator:");
}

id objc_msgSend_bestRepresentativeFaceForPerson_qualityMeasureByFace_candidateFaces_cancelOrExtendTimeoutBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "bestRepresentativeFaceForPerson:qualityMeasureByFace:candidateFaces:cancelOrExtendTimeoutBlock:");
}

id objc_msgSend_calculateAndReportClusterAccuracyWithVisionClusterURL_andPersonClusters_results_extendTimeoutBlock_cancelBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "calculateAndReportClusterAccuracyWithVisionClusterURL:andPersonClusters:results:extendTimeoutBlock:cancelBlock:");
}

id objc_msgSend_calculateAndReportClusterAccuracyWithVisionClusterURL_andPersonClusters_withGroundtruth_results_extendTimeoutBlock_cancelBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "calculateAndReportClusterAccuracyWithVisionClusterURL:andPersonClusters:withGroundtruth:results:extendTimeout Block:cancelBlock:");
}

id objc_msgSend_collectHighlightsOfTypes_withHighlightPredicate_andLimit_andProgressReporter_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "collectHighlightsOfTypes:withHighlightPredicate:andLimit:andProgressReporter:");
}

id objc_msgSend_collectHighlightsOfTypes_withHighlightPredicate_assetPredicate_andLimit_andProgressReporter_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "collectHighlightsOfTypes:withHighlightPredicate:assetPredicate:andLimit:andProgressReporter:");
}

id objc_msgSend_countOfProcessedAssetsForMediaProcessingTaskID_priority_algorithmVersion_sceneConfidenceThreshold_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "countOfProcessedAssetsForMediaProcessingTaskID:priority:algorithmVersion:sceneConfidenceThreshold:error:");
}

id objc_msgSend_entryWithAsset_previousStatus_previousAttempts_lastAttemptDate_analysisTypes_imageOnlyAnalysis_existingAnalysis_isAnalysisFromComputeSync_downloadResource_needDownload_acceptableResources_previousErrorCode_previousErrorLine_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "entryWithAsset:previousStatus:previousAttempts:lastAttemptDate:analysisTypes:imageOnlyAnalysis:existingAnalys is:isAnalysisFromComputeSync:downloadResource:needDownload:acceptableResources:previousErrorCode:previousErrorLine:");
}

id objc_msgSend_entryWithRequestID_bundleIdentifier_sourceIdentifier_assetIdentifier_assetURL_assetURLExtension_resultDirectoryURL_resultDirectoryURLExtension_request_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "entryWithRequestID:bundleIdentifier:sourceIdentifier:assetIdentifier:assetURL:assetURLExtension:resultDirecto ryURL:resultDirectoryURLExtension:request:error:");
}

id objc_msgSend_faceRectFromNormalizedCenterX_normalizedCenterY_normalizedSize_sourceWidth_sourceHeight_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "faceRectFromNormalizedCenterX:normalizedCenterY:normalizedSize:sourceWidth:sourceHeight:");
}

id objc_msgSend_fetchAssetsForMediaProcessingTaskID_priority_algorithmVersion_sceneConfidenceThreshold_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "fetchAssetsForMediaProcessingTaskID:priority:algorithmVersion:sceneConfidenceThreshold:error:");
}

id objc_msgSend_fetchEligibleToRetryLocalIdentifiers_processingStatus_taskID_fetchLimit_additionalPredicates_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "fetchEligibleToRetryLocalIdentifiers:processingStatus:taskID:fetchLimit:additionalPredicates:");
}

id objc_msgSend_fetchEligibleToRetryLocalIdentifiers_withProcessingStatus_andTaskID_andFetchLimit_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchEligibleToRetryLocalIdentifiers:withProcessingStatus:andTaskID:andFetchLimit:");
}

id objc_msgSend_fetchLocalIdentifiers_processingStatus_taskID_attempts_fetchLimit_additionalPredicates_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchLocalIdentifiers:processingStatus:taskID:attempts:fetchLimit:additionalPredicates:");
}

id objc_msgSend_fetchLocalIdentifiers_withProcessingStatus_andTaskID_andAttempts_andFetchLimit_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchLocalIdentifiers:withProcessingStatus:andTaskID:andAttempts:andFetchLimit:");
}

id objc_msgSend_fetchLocalIdentifiersEligibleForRetry_taskID_excludingStatuses_fetchLimit_additionalPredicates_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "fetchLocalIdentifiersEligibleForRetry:taskID:excludingStatuses:fetchLimit:additionalPredicates:");
}

id objc_msgSend_fetchLocalIdentifiersEligibleForRetry_taskID_includingStatuses_fetchLimit_additionalPredicates_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "fetchLocalIdentifiersEligibleForRetry:taskID:includingStatuses:fetchLimit:additionalPredicates:");
}

id objc_msgSend_fetchProcessedAssetsForMediaProcessingTaskID_priority_algorithmVersion_sceneConfidenceThreshold_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "fetchProcessedAssetsForMediaProcessingTaskID:priority:algorithmVersion:sceneConfidenceThreshold:error:");
}

id objc_msgSend_fetchProcessingErrorCodeCounts_withTaskID_sinceDate_additionalPredicates_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "fetchProcessingErrorCodeCounts:withTaskID:sinceDate:additionalPredicates:");
}

id objc_msgSend_fetchUnprocessedAssetsForMediaProcessingTaskID_priority_algorithmVersion_sceneConfidenceThreshold_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "fetchUnprocessedAssetsForMediaProcessingTaskID:priority:algorithmVersion:sceneConfidenceThreshold:error:");
}

id objc_msgSend_generateAndPersistFaceCropsForFaces_withAsset_resource_resourceURL_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "generateAndPersistFaceCropsForFaces:withAsset:resource:resourceURL:error:");
}

id objc_msgSend_generateVIPModelWithType_ignoreLastGenerationTime_evaluationMode_allowUnverifiedPerson_modelGenerated_extendTimeout_andCancel_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "generateVIPModelWithType:ignoreLastGenerationTime:evaluationMode:allowUnverifiedPerson:modelGenerated:extendT imeout:andCancel:");
}

id objc_msgSend_initWithAnalysisDatabase_cancelBlock_monochromeBufferCreator_imageLoader_session_ivsPool_rotationModel_rotationBufferCreator_embeddingBufferCreator_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithAnalysisDatabase:cancelBlock:monochromeBufferCreator:imageLoader:session:ivsPool:rotationModel:rotati onBufferCreator:embeddingBufferCreator:");
}

id objc_msgSend_initWithAnalysisDatabase_photoLibrary_progressReporter_mediaType_mediaSubtype_imageOnlyAnalysis_downloadAllowed_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithAnalysisDatabase:photoLibrary:progressReporter:mediaType:mediaSubtype:imageOnlyAnalysis:downloadAllowed:");
}

id objc_msgSend_initWithAsset_previousStatus_previousAttempts_lastAttemptDate_analysisTypes_imageOnlyAnalysis_existingAnalysis_isAnalysisFromComputeSync_downloadResource_needDownload_acceptableResources_previousErrorCode_previousErrorLine_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithAsset:previousStatus:previousAttempts:lastAttemptDate:analysisTypes:imageOnlyAnalysis:existingAnalysi s:isAnalysisFromComputeSync:downloadResource:needDownload:acceptableResources:previousErrorCode:previousErrorLine:");
}

id objc_msgSend_initWithExtendedSceneIdentifier_confidence_boundingBox_startTime_duration_classificationType_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithExtendedSceneIdentifier:confidence:boundingBox:startTime:duration:classificationType:");
}

id objc_msgSend_initWithFaceLocalIdentifiers_fromPhotoLibraryWithURL_withCompletionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFaceLocalIdentifiers:fromPhotoLibraryWithURL:withCompletionHandler:");
}

id objc_msgSend_initWithFetchBlock_photoLibraryWithURL_cancelBlock_progressHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithFetchBlock:photoLibraryWithURL:cancelBlock:progressHandler:completionHandler:");
}

id objc_msgSend_initWithLocalIdentifier_version_dateModified_dateAnalyzed_types_flags_statsFlags_masterFingerprint_adjustedFingerprint_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithLocalIdentifier:version:dateModified:dateAnalyzed:types:flags:statsFlags:masterFingerprint:adjustedFingerprint:");
}

id objc_msgSend_initWithLocalIdentifiers_andForceUpdate_andPhotoLibraryURL_andProgressHandler_andReply_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithLocalIdentifiers:andForceUpdate:andPhotoLibraryURL:andProgressHandler:andReply:");
}

id objc_msgSend_initWithLocalIdentifiers_fromPhotoLibraryWithURL_cancelBlock_progressHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithLocalIdentifiers:fromPhotoLibraryWithURL:cancelBlock:progressHandler:completionHandler:");
}

id objc_msgSend_initWithPersonWithLocalIdentifier_toBeConfirmedPersonSuggestions_toBeRejectedPersonSuggestions_andPhotoLibraryURL_andProgressHandler_andReply_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithPersonWithLocalIdentifier:toBeConfirmedPersonSuggestions:toBeRejectedPersonSuggestions:andPhotoLibrar yURL:andProgressHandler:andReply:");
}

id objc_msgSend_initWithPhotoLibraries_andOptions_andProgressHandler_andCompletionHandler_andCancelBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPhotoLibraries:andOptions:andProgressHandler:andCompletionHandler:andCancelBlock:");
}

id objc_msgSend_initWithPhotoLibraries_andProgressHandler_andCompletionHandler_andCancelBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPhotoLibraries:andProgressHandler:andCompletionHandler:andCancelBlock:");
}

id objc_msgSend_initWithPhotoLibraries_taskProviderTypes_options_cancelBlock_progressReporter_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPhotoLibraries:taskProviderTypes:options:cancelBlock:progressReporter:");
}

id objc_msgSend_initWithPhotoLibrary_cancelBlock_progressReporter_mediaType_mediaSubtype_imageOnlyAnalysis_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPhotoLibrary:cancelBlock:progressReporter:mediaType:mediaSubtype:imageOnlyAnalysis:");
}

id objc_msgSend_initWithPhotoLibrary_forTaskID_encryptionManager_progressHandler_completionHandler_andCancelBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithPhotoLibrary:forTaskID:encryptionManager:progressHandler:completionHandler:andCancelBlock:");
}

id objc_msgSend_initWithPhotoLibrary_forTaskID_progressHandler_completionHandler_andCancelBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPhotoLibrary:forTaskID:progressHandler:completionHandler:andCancelBlock:");
}

id objc_msgSend_initWithPhotoLibrary_withAssetLocalIdentifiers_realTime_progressHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithPhotoLibrary:withAssetLocalIdentifiers:realTime:progressHandler:completionHandler:");
}

id objc_msgSend_initWithProcessingTypes_forAssetsWithLocalIdentifiers_fromPhotoLibraryWithURL_withProgressHandler_andCompletionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithProcessingTypes:forAssetsWithLocalIdentifiers:fromPhotoLibraryWithURL:withProgressHandler:andCompletionHandler:");
}

id objc_msgSend_initWithRequests_requestID_assetURLs_resultDirectoryURL_cancelBlock_progressHandler_resultsHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithRequests:requestID:assetURLs:resultDirectoryURL:cancelBlock:progressHandler:resultsHandler:completionHandler:");
}

id objc_msgSend_initWithRequests_requestID_localIdentifiers_photoLibraryURL_resultDirectoryURL_cancelBlock_progressHandler_resultsHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithRequests:requestID:localIdentifiers:photoLibraryURL:resultDirectoryURL:cancelBlock:progressHandler:re sultsHandler:completionHandler:");
}

id objc_msgSend_initWithResource_resourceURL_isBestResource_requestDownload_downloadStatus_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "initWithResource:resourceURL:isBestResource:requestDownload:downloadStatus:");
}

id objc_msgSend_initWithSceneAnalysisVersion_faceAnalysisVersion_characterRecognitionAlgorithmVersion_visualSearchAlgorithmVersion_stickerConfidenceAlgorithmVersion_vaAnalysisVersion_vaLocationAnalysisVersion_mediaAnalysisVersion_mediaAnalysisImageVersion_captionGenerationVersion_imageEmbeddingVersion_videoEmbeddingVersion_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "initWithSceneAnalysisVersion:faceAnalysisVersion:characterRecognitionAlgorithmVersion:visualSearchAlgorithmVe rsion:stickerConfidenceAlgorithmVersion:vaAnalysisVersion:vaLocationAnalysisVersion:mediaAnalysisVersion:medi aAnalysisImageVersion:captionGenerationVersion:imageEmbeddingVersion:videoEmbeddingVersion:");
}

id objc_msgSend_loadImageURL_abnormalDimension_withNonPanoPreWarmSizes_toColorPixelBuffer_lumaPixelBuffer_andImage_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "loadImageURL:abnormalDimension:withNonPanoPreWarmSizes:toColorPixelBuffer:lumaPixelBuffer:andImage:");
}

id objc_msgSend_mad_calculateProgressPercentage_totalAssetCount_progressPercentageWithFailure_taskID_phTaskID_priority_failedAssetCount_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "mad_calculateProgressPercentage:totalAssetCount:progressPercentageWithFailure:taskID:phTaskID:priority:failed AssetCount:error:");
}

id objc_msgSend_mad_isAnalysisCompleteFromComputeSyncForAsset_taskID_allowDownload_cancel_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "mad_isAnalysisCompleteFromComputeSyncForAsset:taskID:allowDownload:cancel:");
}

id objc_msgSend_missingAnalysisForAsset_existingAnalysis_resources_forLocalResourcesOnly_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "missingAnalysisForAsset:existingAnalysis:resources:forLocalResourcesOnly:");
}

id objc_msgSend_missingAnalysisForAsset_withExistingComputeSyncAnalysis_resources_forLocalResourcesOnly_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "missingAnalysisForAsset:withExistingComputeSyncAnalysis:resources:forLocalResourcesOnly:");
}

id objc_msgSend_performFailedAssetEvaluationWithTask_localIdentifierBlock_fetchCount_assetCount_download_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "performFailedAssetEvaluationWithTask:localIdentifierBlock:fetchCount:assetCount:download:");
}

id objc_msgSend_personIdentificationForSyndicationPhotoLibrary_withCancelOrExtendTimeoutBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "personIdentificationForSyndicationPhotoLibrary:withCancelOrExtendTimeoutBlock:");
}

id objc_msgSend_processAssetBatch_withDatabase_andStatistics_andVersionTime_andCurrentTime_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "processAssetBatch:withDatabase:andStatistics:andVersionTime:andCurrentTime:");
}

id objc_msgSend_queryPrioritizedLocalIdentifiersWithMediaType_mediaSubtypes_shouldNegateSubtypes_limit_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "queryPrioritizedLocalIdentifiersWithMediaType:mediaSubtypes:shouldNegateSubtypes:limit:");
}

id objc_msgSend_queryProcessingStatus_attempts_lastAttemptDate_andNextAttemptDate_forLocalIdentifier_andTaskID_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "queryProcessingStatus:attempts:lastAttemptDate:andNextAttemptDate:forLocalIdentifier:andTaskID:");
}

id objc_msgSend_removeObservationsWithAssetLocalIdentifiers_gallery_cancelOrExtendTimeoutBlock_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "removeObservationsWithAssetLocalIdentifiers:gallery:cancelOrExtendTimeoutBlock:error:");
}

id objc_msgSend_replaceItemAtURL_withItemAtURL_backupItemName_options_resultingItemURL_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:");
}

id objc_msgSend_reportProgressForPhotoLibrary_taskID_logMessage_cancelOrExtendTimeoutBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportProgressForPhotoLibrary:taskID:logMessage:cancelOrExtendTimeoutBlock:");
}

id objc_msgSend_reportProgressForTaskWithName_withGlobalTarget_completed_atDate_category_subCategory_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "reportProgressForTaskWithName:withGlobalTarget:completed:atDate:category:subCategory:error:");
}

id objc_msgSend_requestDataForAssetResource_options_dataReceivedHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestDataForAssetResource:options:dataReceivedHandler:completionHandler:");
}

id objc_msgSend_requestFileURLForAssetResource_options_urlReceivedHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "requestFileURLForAssetResource:options:urlReceivedHandler:completionHandler:");
}

id objc_msgSend_resourceWithResource_resourceURL_isBestResource_requestDownload_downloadStatus_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "resourceWithResource:resourceURL:isBestResource:requestDownload:downloadStatus:");
}

id objc_msgSend_setAttempts_asset_taskID_status_lastAttemptDate_mediaType_mediaSubtypes_errorCode_errorLine_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "setAttempts:asset:taskID:status:lastAttemptDate:mediaType:mediaSubtypes:errorCode:errorLine:");
}

id objc_msgSend_setCharacterRecognitionData_machineReadableCodeData_algorithmVersion_adjustmentVersion_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setCharacterRecognitionData:machineReadableCodeData:algorithmVersion:adjustmentVersion:");
}

id objc_msgSend_setDuplicateMatchingData_duplicateMatchingAlternateData_processingSucceeded_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "setDuplicateMatchingData:duplicateMatchingAlternateData:processingSucceeded:");
}

id objc_msgSend_storeProgressForActivityID_withAnalysisSubtype_version_processedAssetCount_totalAssetCount_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeProgressForActivityID:withAnalysisSubtype:version:processedAssetCount:totalAssetCount:");
}

id objc_msgSend_storeResource_resourceURL_isBestResource_requestDownload_downloadStatus_forLocalIdentifier_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "storeResource:resourceURL:isBestResource:requestDownload:downloadStatus:forLocalIdentifier:");
}

id objc_msgSend_suggestPersonsForPersonWithLocalIdentifier_toBeConfirmedPersonSuggestions_toBeRejectedPersonSuggestions_context_cancelOrExtendTimeoutBlock_reply_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "suggestPersonsForPersonWithLocalIdentifier:toBeConfirmedPersonSuggestions:toBeRejectedPersonSuggestions:conte xt:cancelOrExtendTimeoutBlock:reply:");
}

id objc_msgSend_syncVisualUnderstandingService_withPhotosLibrary_cancelOrExtendTimeoutBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "syncVisualUnderstandingService:withPhotosLibrary:cancelOrExtendTimeoutBlock:");
}

id objc_msgSend_taskForFragmentData_withProperties_andProgressHandler_andCompletionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskForFragmentData:withProperties:andProgressHandler:andCompletionHandler:");
}

id objc_msgSend_taskForFragmentSurface_withProperties_andProgressHandler_andCompletionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskForFragmentSurface:withProperties:andProgressHandler:andCompletionHandler:");
}

id objc_msgSend_taskForPhotoLibrary_withAssetLocalIdentifiers_realTime_progressHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskForPhotoLibrary:withAssetLocalIdentifiers:realTime:progressHandler:completionHandler:");
}

id objc_msgSend_taskForURLAsset_withOptions_analysisTypes_progressHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskForURLAsset:withOptions:analysisTypes:progressHandler:completionHandler:");
}

id objc_msgSend_taskWithAnalysisDatabase_photoLibrary_progressReporter_mediaType_mediaSubtype_imageOnlyAnalysis_downloadAllowed_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "taskWithAnalysisDatabase:photoLibrary:progressReporter:mediaType:mediaSubtype:imageOnlyAnalysis:downloadAllowed:");
}

id objc_msgSend_taskWithAsset_andAnalysisTypes_andOptions_andProgressHandler_andCompletionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskWithAsset:andAnalysisTypes:andOptions:andProgressHandler:andCompletionHandler:");
}

id objc_msgSend_taskWithCloudIdentifierRequests_photoLibrary_clientBundleID_clientTeamID_cancelBlock_andCompletionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "taskWithCloudIdentifierRequests:photoLibrary:clientBundleID:clientTeamID:cancelBlock:andCompletionHandler:");
}

id objc_msgSend_taskWithFaceLocalIdentifiers_fromPhotoLibraryWithURL_withCompletionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskWithFaceLocalIdentifiers:fromPhotoLibraryWithURL:withCompletionHandler:");
}

id objc_msgSend_taskWithLocalIdentifiers_andForceUpdate_andPhotoLibraryURL_andProgressHandler_andReply_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskWithLocalIdentifiers:andForceUpdate:andPhotoLibraryURL:andProgressHandler:andReply:");
}

id objc_msgSend_taskWithManagedRequests_cancelBlock_progressHandler_resultsHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskWithManagedRequests:cancelBlock:progressHandler:resultsHandler:completionHandler:");
}

id objc_msgSend_taskWithPersonWithLocalIdentifier_toBeConfirmedPersonSuggestions_toBeRejectedPersonSuggestions_andPhotoLibraryURL_andProgressHandler_andReply_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "taskWithPersonWithLocalIdentifier:toBeConfirmedPersonSuggestions:toBeRejectedPersonSuggestions:andPhotoLibrar yURL:andProgressHandler:andReply:");
}

id objc_msgSend_taskWithPhotoLibraries_andOptions_andProgressHandler_andCompletionHandler_andCancelBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskWithPhotoLibraries:andOptions:andProgressHandler:andCompletionHandler:andCancelBlock:");
}

id objc_msgSend_taskWithPhotoLibraries_andProgressHandler_andCompletionHandler_andCancelBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskWithPhotoLibraries:andProgressHandler:andCompletionHandler:andCancelBlock:");
}

id objc_msgSend_taskWithPhotoLibrary_forTaskID_progressHandler_completionHandler_andCancelBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskWithPhotoLibrary:forTaskID:progressHandler:completionHandler:andCancelBlock:");
}

id objc_msgSend_taskWithPhotoLibrary_forVCPTaskIDs_andOptions_andProgressHandler_andCompletionHandler_andCancelBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "taskWithPhotoLibrary:forVCPTaskIDs:andOptions:andProgressHandler:andCompletionHandler:andCancelBlock:");
}

id objc_msgSend_taskWithProcessingTypes_forAssetsWithLocalIdentifiers_fromPhotoLibraryWithURL_withProgressHandler_andCompletionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "taskWithProcessingTypes:forAssetsWithLocalIdentifiers:fromPhotoLibraryWithURL:withProgressHandler:andCompletionHandler:");
}

id objc_msgSend_taskWithRequestID_cancelBlock_progressHandler_resultsHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskWithRequestID:cancelBlock:progressHandler:resultsHandler:completionHandler:");
}

id objc_msgSend_taskWithRequests_forAsset_cancelBlock_progressHandler_resultHandler_andCompletionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "taskWithRequests:forAsset:cancelBlock:progressHandler:resultHandler:andCompletionHandler:");
}

id objc_msgSend_taskWithRequests_requestID_assetURLs_resultDirectoryURL_cancelBlock_progressHandler_resultsHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "taskWithRequests:requestID:assetURLs:resultDirectoryURL:cancelBlock:progressHandler:resultsHandler:completionHandler:");
}

id objc_msgSend_taskWithRequests_requestID_localIdentifiers_photoLibraryURL_resultDirectoryURL_cancelBlock_progressHandler_resultsHandler_completionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "taskWithRequests:requestID:localIdentifiers:photoLibraryURL:resultDirectoryURL:cancelBlock:progressHandler:re sultsHandler:completionHandler:");
}

id objc_msgSend_updateKeyFacesOfPersonsWithLocalIdentifiers_forceUpdate_context_cancelOrExtendTimeoutBlock_reply_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "updateKeyFacesOfPersonsWithLocalIdentifiers:forceUpdate:context:cancelOrExtendTimeoutBlock:reply:");
}

id objc_msgSend_updatePersonWithPhotosLibrary_service_entityIdentifier_entityClass_observationIDs_taggedPersonUUID_keyFaceLocalIdentifiers_cancelOrExtendTimeoutBlock_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "updatePersonWithPhotosLibrary:service:entityIdentifier:entityClass:observationIDs:taggedPersonUUID:keyFaceLoc alIdentifiers:cancelOrExtendTimeoutBlock:error:");
}

id objc_msgSend_updatePersonWithSyndicationLibrary_service_entityIdentifier_entityClass_observationIDs_taggedPersonUUID_cancelOrExtendTimeoutBlock_error_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "updatePersonWithSyndicationLibrary:service:entityIdentifier:entityClass:observationIDs:taggedPersonUUID:cance lOrExtendTimeoutBlock:error:");
}

id objc_msgSend_updateProcessingStatus_andNextAttemptDate_andErrorCode_andErrorLine_forLocalIdentifier_andTaskID_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "updateProcessingStatus:andNextAttemptDate:andErrorCode:andErrorLine:forLocalIdentifier:andTaskID:");
}

id objc_msgSend_updateProgressForTask_photoLibrary_reuseCachedValue_cancelOrExtendTimeoutBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateProgressForTask:photoLibrary:reuseCachedValue:cancelOrExtendTimeoutBlock:");
}

id objc_msgSend_updateProgressIfRequestedForTasks_photoLibrary_reuseCachedValue_cancelOrExtendTimeoutBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateProgressIfRequestedForTasks:photoLibrary:reuseCachedValue:cancelOrExtendTimeoutBlock:");
}

id objc_msgSend_updateSchedulingHistoryForActivityID_startTime_duration_exitStatus_sessionLog_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "updateSchedulingHistoryForActivityID:startTime:duration:exitStatus:sessionLog:");
}

id objc_msgSend_validateClusterAccuracyWithSIMLGroundtruth_results_extendTimeoutBlock_cancelBlock_( void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "validateClusterAccuracyWithSIMLGroundtruth:results:extendTimeoutBlock:cancelBlock:");
}

id objc_msgSend_vcp_requestFileURLForAssetResource_withTaskID_timeoutHandler_urlHandler_andCompletionHandler_( void *a1, const char *a2, ...)
{
  return objc_msgSend( a1,  "vcp_requestFileURLForAssetResource:withTaskID:timeoutHandler:urlHandler:andCompletionHandler:");
}

id objc_msgSend_writeToURL_options_error_(void *a1, const char *a2, ...)
{
  return objc_msgSend(a1, "writeToURL:options:error:");
}