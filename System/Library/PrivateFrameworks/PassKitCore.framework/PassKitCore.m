void sub_100004A24(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  v5 = a1[4];
  v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100004CD8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  v15 = objc_alloc_init(&OBJC_CLASS___PKCreditInstallmentPlanPayment);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v15 withProperties:v7 values:a4];

  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
  v10 = (void *)objc_claimAutoreleasedReturnValue( +[CreditInstallmentPlanLineItem lineItemsForInstallmentPlanPaymentPID:inDatabase:]( &OBJC_CLASS___CreditInstallmentPlanLineItem,  "lineItemsForInstallmentPlanPaymentPID:inDatabase:",  v8,  v9));

  -[PKCreditInstallmentPlanPayment setLineItems:](v15, "setLineItems:", v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue(-[PKCreditInstallmentPlanPayment statementIdentifier](v15, "statementIdentifier"));
  if (v11)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
    v13 = (void *)objc_claimAutoreleasedReturnValue( +[CreditAccountStatement creditAccountStatementWithIdentifier:inDatabase:]( &OBJC_CLASS___CreditAccountStatement,  "creditAccountStatementWithIdentifier:inDatabase:",  v11,  v12));
    v14 = (void *)objc_claimAutoreleasedReturnValue([v13 creditAccountStatement]);

    -[PKCreditInstallmentPlanPayment setStatement:](v15, "setStatement:", v14);
  }

  if (v15) {
    [*(id *)(a1 + 48) addObject:v15];
  }
}

void sub_100005170(id a1, PKCreditInstallmentPlanPayment *a2, id a3)
{
}

void sub_100005178(id a1, PKCreditInstallmentPlanPayment *a2, id a3)
{
}

void sub_100005180(id a1, PKCreditInstallmentPlanPayment *a2, id a3)
{
}

void sub_100005188(id a1, PKCreditInstallmentPlanPayment *a2, id a3)
{
  v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditInstallmentPlanPayment setAmountDue:](v4, "setAmountDue:", v6);
}

void sub_1000051D8(id a1, PKCreditInstallmentPlanPayment *a2, id a3)
{
  v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditInstallmentPlanPayment setAmountPaid:](v4, "setAmountPaid:", v6);
}

void sub_100005228(id a1, PKCreditInstallmentPlanPayment *a2, id a3)
{
  v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditInstallmentPlanPayment setDueDate:](v4, "setDueDate:", v5);
}

void sub_100005274(id a1, PKCreditInstallmentPlanPayment *a2, id a3)
{
  v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditInstallmentPlanPayment setStatementDate:](v4, "setStatementDate:", v5);
}

void sub_1000052C0(id a1, PKCreditInstallmentPlanPayment *a2, id a3)
{
  v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditInstallmentPlanPayment setOriginalAmountDue:](v4, "setOriginalAmountDue:", v6);
}

void sub_100005310(id a1, PKCreditInstallmentPlanPayment *a2, id a3)
{
  v4 = a2;
  -[PKCreditInstallmentPlanPayment setPaymentNumber:](v4, "setPaymentNumber:", [a3 unsignedIntegerValue]);
}

void sub_100005354(id a1, PKCreditInstallmentPlanPayment *a2, id a3)
{
  v4 = a2;
  -[PKCreditInstallmentPlanPayment setPaymentCount:](v4, "setPaymentCount:", [a3 unsignedIntegerValue]);
}
}

void sub_1000065B0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v8 = objc_claimAutoreleasedReturnValue([a2 firstObject]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 firstObject]);

  if (v6 | v8)
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___PKMerchant);
    -[PKMerchant setMapsMerchant:](v7, "setMapsMerchant:", v8);
    -[PKMerchant setMapsBrand:](v7, "setMapsBrand:", v6);
  }

  else
  {
    id v7 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100006784( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000067A0(uint64_t a1, void *a2)
{
  v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = objc_loadWeakRetained(v3);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 mapItems]);

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100006850;
  v7[3] = &unk_1006390A0;
  id v8 = *(id *)(a1 + 32);
  [WeakRetained _brandAndMerchantInformationForMapItems:v6 completion:v7];
}

void sub_100006850(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v8 = objc_claimAutoreleasedReturnValue([a2 firstObject]);
  uint64_t v6 = objc_claimAutoreleasedReturnValue([v5 firstObject]);

  if (v6 | v8)
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___PKMerchant);
    -[PKMerchant setMapsMerchant:](v7, "setMapsMerchant:", v8);
    -[PKMerchant setMapsBrand:](v7, "setMapsBrand:", v6);
  }

  else
  {
    id v7 = 0LL;
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100006DA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(23LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 134218242;
    id v10 = [v5 count];
    __int16 v11 = 2112;
    id v12 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Completed maps data update with %ld items and error %@",  (uint8_t *)&v9,  0x16u);
  }

  [*(id *)(a1 + 32) _brandAndMerchantInformationForMapItems:v5 completion:*(void *)(a1 + 40)];
}

id sub_100007974(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v3 = *(void **)(v2 + 8);
  *(void *)(v2 + 8) = 0LL;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32LL));
  return [*(id *)(a1 + 32) _executeNextRequestIfPossible];
}

Class sub_1000082B0()
{
  if (qword_100707750 != -1) {
    dispatch_once(&qword_100707750, &stru_100639158);
  }
  Class result = objc_getClass("MKMapService");
  qword_100707740 = (uint64_t)result;
  off_100703600 = (uint64_t (*)())sub_10000830C;
  return result;
}

id sub_10000830C()
{
  return (id)qword_100707740;
}

void sub_100008318(id a1)
{
  qword_100707748 = (uint64_t)dlopen("/System/Library/Frameworks/MapKit.framework/MapKit", 2);
}

Class sub_100008340()
{
  if (qword_100707750 != -1) {
    dispatch_once(&qword_100707750, &stru_100639158);
  }
  Class result = objc_getClass("MKLocalSearchRequest");
  qword_100707758 = (uint64_t)result;
  off_100703608 = (uint64_t (*)())sub_10000839C;
  return result;
}

id sub_10000839C()
{
  return (id)qword_100707758;
}

Class sub_1000083A8()
{
  if (qword_100707750 != -1) {
    dispatch_once(&qword_100707750, &stru_100639158);
  }
  Class result = objc_getClass("MKLocalSearch");
  qword_100707760 = (uint64_t)result;
  off_100703610 = (uint64_t (*)())sub_100008404;
  return result;
}

id sub_100008404()
{
  return (id)qword_100707760;
}

Class sub_100008410()
{
  if (qword_100707750 != -1) {
    dispatch_once(&qword_100707750, &stru_100639158);
  }
  Class result = objc_getClass("MKWalletMerchantStylingInfo");
  qword_100707768 = (uint64_t)result;
  off_100703618 = (uint64_t (*)())sub_10000846C;
  return result;
}

id sub_10000846C()
{
  return (id)qword_100707768;
}

Class sub_100008478()
{
  if (qword_100707750 != -1) {
    dispatch_once(&qword_100707750, &stru_100639158);
  }
  Class result = objc_getClass("MKMapItemIdentifier");
  qword_100707770 = (uint64_t)result;
  off_100703680 = (uint64_t (*)())sub_1000084D4;
  return result;
}

id sub_1000084D4()
{
  return (id)qword_100707770;
}

void sub_1000086DC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000086F4(uint64_t a1)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  v9[2] = sub_100008794;
  v9[3] = &unk_100639180;
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 64);
  id v10 = v3;
  uint64_t v13 = v4;
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v11 = v5;
  uint64_t v12 = v6;
  [v2 enumerateKeysAndObjectsUsingBlock:v9];
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);

  return v7;
}

void sub_100008794(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v9 = a2;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[TileState insertState:inDatabase:]( &OBJC_CLASS___TileState,  "insertState:inDatabase:",  a3,  *(void *)(a1 + 32)));
  if (v7)
  {
    id v8 = [objc_alloc(*(Class *)(a1 + 56)) initWithState:v7 identifier:v9 forDescriptor:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 32)];
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = v8 != 0LL;
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = 0;
  }

  if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL)) {
    *a4 = 1;
  }
}

void sub_100008E08(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 copyWithoutCompletion];
  [v2 addObject:v3];
}

BOOL sub_100008E8C(id a1, PKPassShare *a2, unint64_t a3, BOOL *a4)
{
  return PKShareStatusIsPendingVerification(-[PKPassShare status](a2, "status", a3, a4));
}

void sub_100008F50(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  BOOL v3 = *(void *)(a1 + 56) == 0LL;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100009060;
  v10[3] = &unk_100639260;
  id v11 = v2;
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  id v12 = v5;
  uint64_t v14 = v6;
  BOOL v15 = v3;
  *(_OWORD *)id v9 = *(_OWORD *)(a1 + 32);
  id v7 = v9[0];
  int8x16_t v13 = vextq_s8(*(int8x16_t *)v9, *(int8x16_t *)v9, 8uLL);
  v9[0] = v2;
  [v4 _enumerateOperations:v10];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16LL));
  [WeakRetained provisioningOperationsDidUpdate];
}

void sub_100009060(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 shareIdentifier]);
  id v7 = *(void **)(a1 + 32);
  id v8 = v6;
  id v9 = v7;
  if (v8 == v9)
  {
  }

  else
  {
    id v10 = v9;
    if (!v8 || !v9)
    {

      goto LABEL_20;
    }

    unsigned int v11 = [v8 isEqualToString:v9];

    if (!v11) {
      goto LABEL_20;
    }
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v5 transportIdentifier]);
  int8x16_t v13 = *(void **)(a1 + 40);
  id v14 = v12;
  id v15 = v13;
  if (v14 != v15)
  {
    v16 = v15;
    if (v14 && v15)
    {
      unsigned __int8 v17 = [v14 isEqualToString:v15];

      if ((v17 & 1) == 0) {
        goto LABEL_21;
      }
      goto LABEL_14;
    }

LABEL_20:
    goto LABEL_21;
  }

LABEL_14:
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = PKSharingLoggableMailboxAddress(*(void *)(a1 + 40));
    v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
    *(_DWORD *)buf = 138412546;
    uint64_t v32 = v20;
    __int16 v33 = 2112;
    v34 = v22;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "StatefulProvisioningManager: Notifying operation of activation code failure for share: '%@' transportIdentifier: '%@'",  buf,  0x16u);
  }

  v23 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 32LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000092D4;
  block[3] = &unk_100639238;
  uint64_t v29 = *(void *)(a1 + 64);
  char v30 = *(_BYTE *)(a1 + 72);
  id v24 = v5;
  id v28 = v24;
  dispatch_async(v23, block);
  if (*(_BYTE *)(a1 + 72))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16LL));
    id v26 = [v24 copyWithoutCompletion];
    [WeakRetained finishedStatefulProvisioningAttemptWithSuccess:0 operation:v26 share:*(void *)(a1 + 56)];
  }

  *a3 = 1;

LABEL_21:
}

void sub_1000092D4(uint64_t a1)
{
  if (*(void *)(a1 + 40) == 1LL)
  {
    uint64_t v2 = 3LL;
  }

  else if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v2 = 5LL;
  }

  else
  {
    uint64_t v2 = 2LL;
  }

  id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSError pkSharingError:](&OBJC_CLASS___NSError, "pkSharingError:", v2));
  BOOL v3 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completion]);
  ((void (**)(void, void, id))v3)[2](v3, 0LL, v4);
}

void sub_1000093E0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) devicePrimaryPaymentApplication]);
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue([v2 subcredentials]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 anyObject]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
  uint64_t v17 = 0LL;
  v18 = &v17;
  uint64_t v19 = 0x2020000000LL;
  char v20 = 0;
  uint64_t v6 = *(void **)(a1 + 40);
  id v9 = _NSConcreteStackBlock;
  uint64_t v10 = 3221225472LL;
  unsigned int v11 = sub_100009520;
  id v12 = &unk_1006392D8;
  int8x16_t v13 = v6;
  id v7 = v5;
  id v14 = v7;
  id v15 = *(id *)(a1 + 32);
  v16 = &v17;
  [v6 _enumerateOperations:&v9];
  if (*((_BYTE *)v18 + 24))
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16LL));
    objc_msgSend(WeakRetained, "provisioningOperationsDidUpdate", v9, v10, v11, v12, v13, v14);
  }

  _Block_object_dispose(&v17, 8);
}

void sub_100009508( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100009520(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 8LL);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 transportIdentifier]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 passShareForTransportIdentifier:v7]);

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 subcredentialIdentifier]);
  uint64_t v10 = *(void **)(a1 + 40);
  id v11 = v9;
  id v12 = v10;
  if (v11 == v12)
  {

    goto LABEL_10;
  }

  int8x16_t v13 = v12;
  if (v11) {
    BOOL v14 = v12 == 0LL;
  }
  else {
    BOOL v14 = 1;
  }
  if (v14)
  {

LABEL_14:
    goto LABEL_15;
  }

  unsigned int v15 = [v11 isEqualToString:v12];

  if (!v15) {
    goto LABEL_14;
  }
LABEL_10:
  unsigned int v16 = [*(id *)(a1 + 32) _isPassProvisioningComplete:*(void *)(a1 + 48)];

  if (v16)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
      char v20 = (void *)objc_claimAutoreleasedReturnValue([v5 transportIdentifier]);
      uint64_t v21 = PKSharingLoggableMailboxAddress(v20);
      v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
      *(_DWORD *)buf = 138412546;
      v34 = v19;
      __int16 v35 = 2112;
      v36 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "StatefulProvisioningManager: Notifying operation of activation code success for share: '%@' transportIdentifier: '%@'",  buf,  0x16u);
    }

    v23 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
    v27 = _NSConcreteStackBlock;
    uint64_t v28 = 3221225472LL;
    uint64_t v29 = sub_10000979C;
    char v30 = &unk_1006392B0;
    id v24 = v5;
    id v31 = v24;
    id v32 = *(id *)(a1 + 48);
    dispatch_async(v23, &v27);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = 1;
    *a3 = 1;
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
    id v26 = objc_msgSend(v24, "copyWithoutCompletion", v27, v28, v29, v30);
    [WeakRetained finishedStatefulProvisioningAttemptWithSuccess:1 operation:v26 share:v8];
  }

LABEL_15:
}

    goto LABEL_16;
  }

  id v5 = PKLogFacilityTypeGetObject(0LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int8x16_t v13 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Registration requested with coalescing action",  v13,  2u);
  }

  id v7 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) lastObject]);
  if (!v7) {
    goto LABEL_16;
  }
  id v4 = (os_log_s *)v7;
  if (*(void *)(v7 + 24)
    || ![*(id *)(v7 + 40) isEqual:*(void *)(a1 + 40)]
    || (*((_BYTE *)v4 + 16) != 0) == (*(_BYTE *)(a1 + 72) == 0)
    || (*((_BYTE *)v4 + 17) != 0) != (*(_BYTE *)(a1 + 73) != 0))
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Registration creating new task as mismatch with current task was detected",  v12,  2u);
    }

    goto LABEL_15;
  }

  id v11 = *(void **)(a1 + 56);
  if (v11) {
    sub_10000B134((uint64_t)v4, v11);
  }
LABEL_19:
}

      v22 = PKLocalizedPaymentString(@"SECURE_ELEMENT_ACCESS_VIOLATION_OWNERSHIP_LOST_TITLE_GENERIC");
      v18 = (void *)objc_claimAutoreleasedReturnValue(v22);
LABEL_16:
      id v4 = -[PDGenericUserNotification initWithTitle:message:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:",  v18,  v12);

      id v5 = @"Secure Element Ownership Lost";
      uint64_t v6 = @"lost-ownership";
LABEL_17:
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_1004413DC((uint64_t)v5, v24, v25, v26, v27, v28, v29, v30);
      }

      id v31 = PKAggDKeyPaymentLifecycleDelete;
      v37 = @"reason";
      v38 = v6;
      id v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL));
      PKAnalyticsSendEvent(v31, v32);

      __int16 v33 = PDWalletUserNotificationSecureElementAccessLost;
      [*(id *)(*(void *)(a1 + 32) + 56) removeUserNotificationWithIdentifier:PDWalletUserNotificationSecureElementAccessLost];
      -[PDUserNotification setNotificationIdentifier:](v4, "setNotificationIdentifier:", v33);
      [*(id *)(*(void *)(a1 + 32) + 56) insertUserNotification:v4];
      __int16 v35 = *(void *)(a1 + 32);
      if (v35) {
        sub_100021C44(v35, v34, v5, 0LL, 5LL);
      }
      v36 = *(void *)(a1 + 40);
      if (v36) {
        (*(void (**)(uint64_t, void))(v36 + 16))(v36, 0LL);
      }

      return;
    case 3LL:
      uint64_t v19 = objc_alloc(&OBJC_CLASS___PDWalletUserNotification);
      char v20 = PKLocalizedPaymentString(@"SECURE_ELEMENT_ACCESS_VIOLATION_AUTOMATIC_LOGIN");
      uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      id v4 = -[PDGenericUserNotification initWithMessage:](v19, "initWithMessage:", v21);

      id v5 = @"Automatic Login Enabled";
      uint64_t v6 = @"autologin-enabled";
      goto LABEL_17;
    case 4LL:
      id v4 = 0LL;
      id v5 = @"Secure Element Hardware Changed";
      uint64_t v6 = @"se-hardware-change";
      goto LABEL_17;
    default:
      id v4 = 0LL;
      id v5 = 0LL;
      uint64_t v6 = &stru_100662310;
      goto LABEL_17;
  }

        uint64_t Object = PKLogFacilityTypeGetObject(6LL);
        uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          char v20 = (void *)objc_claimAutoreleasedReturnValue([v6 regionCode]);
          uint64_t v21 = 138412802;
          v22 = v20;
          v23 = 2112;
          id v24 = v8;
          v25 = 2112;
          id v26 = v10;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Device is upgraded but not pending device upgrade tasks for primary region: %@ from %@ to %@",  (uint8_t *)&v21,  0x20u);
        }

        objc_msgSend(*(id *)(a1 + 32), "_queue_completeDeviceUpgradeTasks");
        goto LABEL_18;
      }
    }

    else if (PDUpgradeTasksVersion() > 1)
    {
      goto LABEL_15;
    }

    unsigned int v15 = PKLogFacilityTypeGetObject(6LL);
    unsigned int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 regionCode]);
      uint64_t v21 = 138412802;
      v22 = v17;
      v23 = 2112;
      id v24 = v8;
      v25 = 2112;
      id v26 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Device upgrade tasks for primary region: %@ are required with upgrade from %@ to %@",  (uint8_t *)&v21,  0x20u);
    }

    [*(id *)(a1 + 32) _scheduleDeviceUpgradeTaskActivityWithRandomizeStartDate:*(unsigned __int8 *)(a1 + 40)];
    goto LABEL_18;
  }

  int8x16_t v13 = PKLogFacilityTypeGetObject(6LL);
  BOOL v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v21) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "passd cannot start device upgrade tasks as we are not registered yet",  (uint8_t *)&v21,  2u);
  }

  [*(id *)(a1 + 32) unscheduleDeviceUpgradeTaskActivity];
}

    id v24 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
    v25 = (void *)objc_claimAutoreleasedReturnValue([v24 passWithUniqueIdentifier:v15]);

    v22 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _cloudStoreSpecificKeysForItem:paymentPass:]( self,  "_cloudStoreSpecificKeysForItem:paymentPass:",  v7,  v25));
    goto LABEL_16;
  }

  v22 = 0LL;
LABEL_16:

  return v22;
}

  if (-[NSMutableSet count](v6, "count"))
  {
    id v26 = v6;
    uint64_t v29 = 0u;
    char v30 = 0u;
    v27 = 0u;
    uint64_t v28 = 0u;
    int8x16_t v13 = (void *)objc_claimAutoreleasedReturnValue( -[PKPeerPaymentAccount associatedAccountInformation]( self->_prefetchedPeerPaymentAccount,  "associatedAccountInformation"));
    BOOL v14 = (void *)objc_claimAutoreleasedReturnValue([v13 associatedAccounts]);

    unsigned int v15 = [v14 countByEnumeratingWithState:&v27 objects:v35 count:16];
    if (v15)
    {
      unsigned int v16 = v15;
      uint64_t v17 = *(void *)v28;
      while (2)
      {
        for (j = 0LL; j != v16; j = (char *)j + 1)
        {
          if (*(void *)v28 != v17) {
            objc_enumerationMutation(v14);
          }
          uint64_t v19 = *(void **)(*((void *)&v27 + 1) + 8LL * (void)j);
          if ([v19 role] == (id)1)
          {
            databaseManager = self->_databaseManager;
            uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v19 transactionSourceIdentifier]);
            v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v21));
            v23 = (void *)objc_claimAutoreleasedReturnValue([v19 createdDate]);
            id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
            v25 = -[PDDatabaseManager transactionsCountForTransactionSourceIdentifiers:withPeerPaymentCounterpartHandles:forPeerPaymentSubtype:startDate:endDate:]( databaseManager,  "transactionsCountForTransactionSourceIdentifiers:withPeerPaymentCounterpartHandles:forPeerPaymentSub type:startDate:endDate:",  v22,  v26,  2LL,  v23,  v24);

            if (v25)
            {
              self->_hasSentMoneyToAnyParticipant = 1;
              goto LABEL_28;
            }
          }
        }

        unsigned int v16 = [v14 countByEnumeratingWithState:&v27 objects:v35 count:16];
        if (v16) {
          continue;
        }
        break;
      }
    }

  return v7;
}

      obj = v12;
LABEL_154:

      goto LABEL_155;
    }

    if (v9 == (id)3)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v7 TCIs]);
      v102 = objc_claimAutoreleasedReturnValue([v11 firstObject]);

      v106 = (void *)objc_claimAutoreleasedReturnValue([v7 readerIdentifier]);
      context = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      if ((v112 & 1) != 0)
      {
        obj = 0LL;
      }

      else
      {
        v45 = (void *)objc_claimAutoreleasedReturnValue([v7 credentialIdentifier]);
        v120 = (void *)objc_claimAutoreleasedReturnValue([v7 applicationIdentifier]);
        *((_BYTE *)v182 + 24) = v106 != 0LL;
        v46 = objc_autoreleasePoolPush();
        if (v102) {
          v47 = objc_claimAutoreleasedReturnValue( -[PDDatabaseManager contactlessAccessPaymentPassesWithTCI:readerId:]( self,  "contactlessAccessPaymentPassesWithTCI:readerId:",  v102,  v106));
        }
        else {
          v47 = objc_claimAutoreleasedReturnValue(-[PDDatabaseManager passesForPaymentType:](self, "passesForPaymentType:", 1001LL));
        }
        v71 = (void *)v47;
        objc_autoreleasePoolPop(v46);
        v72 = [v118 fieldType];
        v179 = 0u;
        v180 = 0u;
        v177 = 0u;
        v178 = 0u;
        obj = v71;
        v73 = [obj countByEnumeratingWithState:&v177 objects:v207 count:16];
        if (v73)
        {
          v104 = *(void *)v178;
          v74 = v120 == 0LL;
          LODWORD(v100) = v72 != (id)1;
          HIDWORD(v100) = v120 == 0LL;
          if (v72 == (id)1) {
            v74 = 0;
          }
          v103 = v74;
          do
          {
            v101 = v73;
            v75 = 0LL;
            do
            {
              if (*(void *)v178 != v104) {
                objc_enumerationMutation(obj);
              }
              v76 = *(void **)(*((void *)&v177 + 1) + 8 * v75);
              v110 = v75;
              v105 = v76;
              if (v103)
              {
                v77 = 1;
                v78 = 1;
              }

              else
              {
                v175 = 0u;
                v176 = 0u;
                v173 = 0u;
                v174 = 0u;
                v79 = (void *)objc_claimAutoreleasedReturnValue([v76 deviceContactlessPaymentApplications]);
                v80 = [v79 countByEnumeratingWithState:&v173 objects:v206 count:16];
                v77 = v100;
                v78 = BYTE4(v100);
                if (v80)
                {
                  v122 = v79;
                  v124 = *(void *)v174;
                  v77 = v100;
                  v78 = BYTE4(v100);
                  do
                  {
                    v126 = v80;
                    for (j = 0LL; j != v126; j = (char *)j + 1)
                    {
                      if (*(void *)v174 != v124) {
                        objc_enumerationMutation(v122);
                      }
                      v82 = *(void **)(*((void *)&v173 + 1) + 8LL * (void)j);
                      if ((v78 & 1) != 0)
                      {
                        v78 = 1;
                      }

                      else
                      {
                        v128 = *(void **)(*((void *)&v173 + 1) + 8LL * (void)j);
                        v83 = (void *)objc_claimAutoreleasedReturnValue([v82 applicationIdentifier]);
                        v78 = [v83 isEqualToString:v120];

                        v82 = v128;
                        if ((v78 & (v45 != 0LL)) == 1)
                        {
                          v171 = 0u;
                          v172 = 0u;
                          v169 = 0u;
                          v170 = 0u;
                          v84 = (void *)objc_claimAutoreleasedReturnValue([v128 subcredentials]);
                          v78 = 0;
                          v85 = [v84 countByEnumeratingWithState:&v169 objects:v205 count:16];
                          if (v85)
                          {
                            v86 = *(void *)v170;
                            do
                            {
                              for (k = 0LL; k != v85; k = (char *)k + 1)
                              {
                                if (*(void *)v170 != v86) {
                                  objc_enumerationMutation(v84);
                                }
                                v88 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*((void *)&v169 + 1) + 8 * (void)k),  "identifier",  v100));
                                v89 = [v88 isEqualToString:v45];

                                v78 |= v89;
                              }

                              v85 = [v84 countByEnumeratingWithState:&v169 objects:v205 count:16];
                            }

                            while (v85);
                          }

                          v82 = v128;
                        }
                      }

                      if ((v77 & 1) != 0)
                      {
                        v77 = 1;
                      }

                      else
                      {
                        v167 = 0u;
                        v168 = 0u;
                        v165 = 0u;
                        v166 = 0u;
                        v90 = (void *)objc_claimAutoreleasedReturnValue([v82 automaticSelectionCriteria]);
                        v77 = 0;
                        v91 = [v90 countByEnumeratingWithState:&v165 objects:v204 count:16];
                        if (v91)
                        {
                          v92 = *(void *)v166;
                          do
                          {
                            for (m = 0LL; m != v91; m = (char *)m + 1)
                            {
                              if (*(void *)v166 != v92) {
                                objc_enumerationMutation(v90);
                              }
                              v77 |= objc_msgSend( *(id *)(*((void *)&v165 + 1) + 8 * (void)m),  "technologyType",  v100) == (id)2;
                            }

                            v91 = [v90 countByEnumeratingWithState:&v165 objects:v204 count:16];
                          }

                          while (v91);
                        }
                      }
                    }

                    v79 = v122;
                    v80 = [v122 countByEnumeratingWithState:&v173 objects:v206 count:16];
                  }

                  while (v80);
                }
              }

              if ((v78 & 1) != 0 && (v77 & 1) != 0)
              {
                -[NSMutableArray addObject:](context, "addObject:", v105);
                *((_BYTE *)v186 + 24) = 1;
              }

              v75 = v110 + 1;
            }

            while ((id)(v110 + 1) != v101);
            v73 = [obj countByEnumeratingWithState:&v177 objects:v207 count:16];
          }

          while (v73);
        }

        v94 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray pk_arrayByApplyingBlock:](context, "pk_arrayByApplyingBlock:", &stru_1006471D8));
        v95 = [v94 mutableCopy];
        v96 = (void *)v190[5];
        v190[5] = (uint64_t)v95;
      }

      if ((unint64_t)objc_msgSend((id)v190[5], "count", v100) >= 2)
      {
        v159[0] = _NSConcreteStackBlock;
        v159[1] = 3221225472LL;
        v159[2] = sub_100169B74;
        v159[3] = &unk_10063CB58;
        v160 = v115;
        v161 = self;
        v164 = &v189;
        v162 = context;
        v163 = v106;
        [v117 addOperation:v159];
      }

      id v12 = (id)v102;
      goto LABEL_154;
    }

    if (([v7 technology] & 8) != 0)
    {
      v38 = [v7 terminalType];
      v39 = v38;
      v41 = v38 != (id)5 && v38 != 0LL;
      v123 = v41;
      v42 = objc_autoreleasePoolPush();
      v43 = (void *)objc_claimAutoreleasedReturnValue([v118 merchantIdentifiers]);
      obj = (id)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager passesWithPassTypeIdentifierHashes:automaticSelectionOnly:]( self,  "passesWithPassTypeIdentifierHashes:automaticSelectionOnly:",  v43,  1LL));

      objc_autoreleasePoolPop(v42);
      v44 = [v118 valueAddedServiceMode];
      if ((unint64_t)v44 >= 2)
      {
        if (v44 == (id)2 || v44 == (id)4 && [obj count])
        {
          if (!v39 || v39 == (id)5) {
            goto LABEL_155;
          }
          goto LABEL_94;
        }

        if (!v39 || v39 == (id)5) {
          goto LABEL_155;
        }
LABEL_19:
        uint64_t v19 = objc_autoreleasePoolPush();
        char v20 = (void *)objc_claimAutoreleasedReturnValue(-[PDDatabaseManager passesOfType:](self, "passesOfType:", 1LL));
        v125 = objc_msgSend(v20, "pk_mutableArrayCopy");
        uint64_t v21 = [v125 count];
        if (!v21)
        {

          v125 = 0LL;
        }

        v22 = objc_alloc(&OBJC_CLASS___NSMutableOrderedSet);
        else {
          v23 = (uint64_t)v21;
        }
        id v24 = -[NSMutableOrderedSet initWithCapacity:](v22, "initWithCapacity:", v23);

        objc_autoreleasePoolPop(v19);
        if (v9 == (id)2)
        {
          contexta = objc_autoreleasePoolPush();
          v109 = (void *)objc_claimAutoreleasedReturnValue([v118 TCIs]);
          v25 = (void *)objc_claimAutoreleasedReturnValue([v109 firstObject]);
          v121 = v24;
          id v26 = v125;
          v27 = v25;
          uint64_t v28 = v27;
          v127 = v26;
          if (v26 && v27 && (uint64_t v29 = (char *)[v26 count]) != 0)
          {
            char v30 = 0LL;
            id v31 = 0LL;
            v119 = 0;
            do
            {
              id v32 = (void *)objc_claimAutoreleasedReturnValue([v127 objectAtIndexedSubscript:v30]);
              if ([v32 isTransitPass])
              {
                v198 = 0u;
                v197 = 0u;
                v196 = 0u;
                v195 = 0u;
                __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 deviceContactlessPaymentApplications]);
                v34 = [v33 countByEnumeratingWithState:&v195 objects:v208 count:16];
                if (v34)
                {
                  __int16 v35 = *(void *)v196;
                  while (2)
                  {
                    for (n = 0LL; n != v34; n = (char *)n + 1)
                    {
                      if (*(void *)v196 != v35) {
                        objc_enumerationMutation(v33);
                      }
                      if ([*(id *)(*((void *)&v195 + 1) + 8 * (void)n) supportsAutomaticSelectionForTCI:v28])
                      {

                        v37 = (void *)objc_claimAutoreleasedReturnValue([v32 uniqueID]);
                        -[NSMutableOrderedSet addObject:](v121, "addObject:", v37);

                        if (!v31) {
                          id v31 = objc_alloc_init(&OBJC_CLASS___NSMutableIndexSet);
                        }
                        -[NSMutableIndexSet addIndex:](v31, "addIndex:", v30);
                        v119 = 1;
                        goto LABEL_42;
                      }
                    }

                    v34 = [v33 countByEnumeratingWithState:&v195 objects:v208 count:16];
                    if (v34) {
                      continue;
                    }
                    break;
                  }
                }
              }
  }

  objc_msgSend(*(id *)(a1 + 40), "_executeNextResetRequestIfPossible", (void)v13);
}
}

        -[PDUbiquityManager _queue_copyCatalogToUbiquity:](self, "_queue_copyCatalogToUbiquity:", v7);
        goto LABEL_20;
      }

      if (v11)
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v29 = v7;
        char v30 = 2112;
        id v31 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Comparing local and ubiquitous catalogs\nLocal: %@\nUbiquitous: %@",  buf,  0x16u);
      }

      id v12 = [v7 isNewerThanCatalog:v23[5]];
      int8x16_t v13 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      if (v12)
      {
        if (v13)
        {
          *(_WORD *)buf = 0;
          BOOL v14 = "Taking local catalog.";
          unsigned int v15 = v10;
          unsigned int v16 = 2;
LABEL_14:
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
          goto LABEL_15;
        }

        goto LABEL_15;
      }

      if (v13)
      {
        *(_WORD *)buf = 0;
        v18 = "Taking ubiquitous catalog.";
        uint64_t v19 = v10;
        char v20 = 2;
        goto LABEL_18;
      }
    }

    else
    {
      if (!v8)
      {
LABEL_20:

        goto LABEL_21;
      }

      uint64_t v17 = PKLogFacilityTypeGetObject(1LL);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v29 = v8;
        v18 = "Taking ubiquitous catalog because there is no local catalog: %@";
        uint64_t v19 = v10;
        char v20 = 12;
LABEL_18:
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
      }
    }

    -[PDUbiquityManager _queue_copyCatalogToLocalStore:](self, "_queue_copyCatalogToLocalStore:", v23[5]);
    goto LABEL_20;
  }
}

          id v5 = v23;
          id v4 = v24;
        }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

      -[NSMutableArray addObject:](self->_pendingNotifications, "addObject:", v4);
      goto LABEL_16;
    }

    if (!self->_serviceCenterConnected && [v4 isServiceNotification])
    {
      id v5 = PKLogFacilityTypeGetObject(0LL);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = 138412546;
        id v12 = v4;
        int8x16_t v13 = 2112;
        BOOL v14 = self;
        id v7 = "Cannot insert Service Notification: %@ in Notification Center: %@ as connecting has not completed yet.";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, 0x16u);
        goto LABEL_15;
      }

      goto LABEL_15;
    }

    -[PDUserNotificationCenter _insertUserNotification:](self, "_insertUserNotification:", v4);
  }

  else
  {
    id v8 = PKLogFacilityTypeGetObject(0LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = 138412546;
      id v12 = v4;
      int8x16_t v13 = 2112;
      BOOL v14 = self;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Cannot insert User Notification: %@ in Notification Center: %@ as it is not valid.",  (uint8_t *)&v11,  0x16u);
    }
  }

  id v11 = (const __CFString *)PDPreferenceKey_FieldDetectAvailable;
  if ((byte_100707AAC & 1) == 0)
  {
    byte_100707AAC = 1;
    id v12 = PDPreferencesDomain_ClassD;
    _CFPreferencesSetBackupDisabled( PDPreferencesDomain_ClassD,  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost,  0LL,  1LL);
    _CFPreferencesSetFileProtectionClass(v12, kCFPreferencesCurrentUser, kCFPreferencesAnyHost, 0LL, 4LL);
  }

  if (v11)
  {
    if (v7) {
      int8x16_t v13 = kCFBooleanTrue;
    }
    else {
      int8x16_t v13 = kCFBooleanFalse;
    }
    CFPreferencesSetValue(v11, v13, PDPreferencesDomain_ClassD, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    os_unfair_lock_unlock(&stru_100707AA8);
  }

  else
  {
    __break(1u);
  }

    BOOL v14 = 0;
    goto LABEL_16;
  }

  id v8 = v7;
  if ([v5 updateReasonIsInitialDownload])
  {
    id v9 = PKLogFacilityTypeGetObject(23LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 updateReasonsDescription]);
      v18 = 138543874;
      uint64_t v19 = v6;
      char v20 = 2114;
      uint64_t v21 = v11;
      v22 = 2112;
      v23 = v5;
      id v12 = "Not creating %{public}@ for transaction that was part of the initial cloudkit sync. Update Reasons: %{public"
            "}@. Transaction: %@";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v18, 0x20u);

      goto LABEL_15;
    }

    goto LABEL_15;
  }

  if ((v8 & 0x1000) != 0)
  {
    unsigned int v15 = PKLogFacilityTypeGetObject(23LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 updateReasonsDescription]);
      v18 = 138543874;
      uint64_t v19 = v6;
      char v20 = 2114;
      uint64_t v21 = v11;
      v22 = 2112;
      v23 = v5;
      id v12 = "Not creating %{public}@ for transaction that was part of initial notification service update. Update Reasons"
            ": %{public}@. Transaction: %@";
      goto LABEL_14;
    }

    goto LABEL_15;
  }

  if ((v8 & 0x4000) != 0)
  {
    unsigned int v16 = PKLogFacilityTypeGetObject(23LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 updateReasonsDescription]);
      v18 = 138543874;
      uint64_t v19 = v6;
      char v20 = 2114;
      uint64_t v21 = v11;
      v22 = 2112;
      v23 = v5;
      id v12 = "Not creating %{public}@ for transaction that was reprocessed for merchant cleanup. Update Reasons: %{public}"
            "@. Transaction: %@";
      goto LABEL_14;
    }

    goto LABEL_15;
  }

  BOOL v14 = 1;
LABEL_16:

  return v14;
}

  (*(void (**)(void))(a1[6] + 16LL))();
}

      goto LABEL_16;
    }
  }

      id v11 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager passUniqueIdentifierForTransactionWithIdentifier:]( self->_databaseManager,  "passUniqueIdentifierForTransactionWithIdentifier:",  v16));
      id v12 = -[PDPassPaymentTransactionAuthenticationUserNotification initWithPaymentTransaction:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDPassPaymentTransactionAuthenticationUserNotification),  "initWithPaymentTransaction:forPassUniqueIdentifier:",  v5,  v11);
      -[PDUserNotification setSuppressionBehavior:](v12, "setSuppressionBehavior:", 1LL);
      -[PDUserNotificationManager insertUserNotification:]( self->_userNotificationManager,  "insertUserNotification:",  v12);
      -[PDDatabaseManager addProcessedAuthenticationMechanisms:forTransactionIdentifier:]( self->_databaseManager,  "addProcessedAuthenticationMechanisms:forTransactionIdentifier:",  v9,  v16);
      int8x16_t v13 = self->_latestTransactionPendingUserNotification;
      self->_latestTransactionPendingUserNotification = 0LL;

      goto LABEL_16;
    }
  }

      Class result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
    }

    while ((result & 1) != 0);
  }

  return result;
}

    LOBYTE(v7) = 0;
    goto LABEL_16;
  }

  if (v7)
  {
    if (!sub_1002CD314( (BOOL)v4,  (uint64_t)@"pass_tile_state_default",  (uint64_t)@"secondary_accessory_pid INTEGER")) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }

  return v12;
}

          uint64_t Object = PKLogFacilityTypeGetObject(0LL);
          char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v28 = v13;
            _os_log_error_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_ERROR,  "Unable to find valid provider for auxiliary requirement %@",  buf,  0xCu);
          }

          if (a3) {
            *a3 = 0;
          }
        }

        uint64_t v10 = [v8 countByEnumeratingWithState:&v23 objects:v29 count:16];
      }

      while (v10);
    }
  }

  else
  {
    id v7 = 0LL;
  }

  return v7;
}

    BOOL v14 = 1LL;
LABEL_23:

    goto LABEL_24;
  }

  __break(1u);
  return result;
}

void sub_10000979C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completion]);
  (*((void (**)(id, void, void))v2 + 2))(v2, *(void *)(a1 + 40), 0LL);
}

void sub_1000099EC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    int8x16_t v13 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "StatefulProvisioningManager: Terminated stateful provisioning for share: '%@'",  buf,  0xCu);
  }

  id v5 = *(void **)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  id v9[2] = sub_100009B20;
  v9[3] = &unk_100639328;
  id v10 = v2;
  int8x16_t v8 = *(int8x16_t *)(a1 + 32);
  id v6 = (id)v8.i64[0];
  int8x16_t v11 = vextq_s8(v8, v8, 8uLL);
  id v7 = v2;
  [v5 _enumerateOperations:v9];
}

void sub_100009B20(void *a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 shareIdentifier]);
  id v7 = (void *)a1[4];
  id v8 = v6;
  id v9 = v7;
  if (v8 == v9)
  {
  }

  else
  {
    id v10 = v9;
    if (!v8 || !v9)
    {

      goto LABEL_9;
    }

    unsigned int v11 = [v8 isEqualToString:v9];

    if (!v11) {
      goto LABEL_9;
    }
  }

  id v12 = *(dispatch_queue_s **)(a1[5] + 32LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100009C50;
  block[3] = &unk_100639300;
  id v13 = v5;
  id v16 = v13;
  dispatch_async(v12, block);
  id WeakRetained = objc_loadWeakRetained((id *)(a1[5] + 16LL));
  [WeakRetained finishedStatefulProvisioningAttemptWithSuccess:0 operation:v13 share:a1[6]];

  *a3 = 1;
LABEL_9:
}

void sub_100009C50(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSError pkSharingError:](&OBJC_CLASS___NSError, "pkSharingError:", 5LL));
  id v2 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completion]);
  ((void (**)(void, void, id))v2)[2](v2, 0LL, v3);
}

void sub_100009D60(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = -[PKPassShareActivationOption initWithDefaultIdentifierForType:]( objc_alloc(&OBJC_CLASS___PKPassShareActivationOption),  "initWithDefaultIdentifierForType:",  1LL);
    -[PKPassShareActivationOption setValue:](v2, "setValue:", *(void *)(a1 + 32));
    id v3 = *(void **)(a1 + 40);
    id v4 = objc_alloc(&OBJC_CLASS___PKPassShareActivationOptions);
    id v13 = v2;
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v13, 1LL));
    id v6 = [v4 initWithOptions:v5];
    [v3 setActivationOptions:v6];
  }

  else
  {
    [*(id *)(a1 + 40) setActivationOptions:0];
  }

  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
    int v11 = 138412290;
    id v12 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "StatefulProvisioningManager: Marking share '%@' as pending activation while waiting for verification.",  (uint8_t *)&v11,  0xCu);
  }

  [*(id *)(a1 + 40) setStatus:4];
  [*(id *)(*(void *)(a1 + 48) + 8) addPassShare:*(void *)(a1 + 40) forPassUniqueIdentifier:0];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 48) + 16LL));
  [WeakRetained provisioningOperationsDidUpdate];
}

void sub_100009F6C(uint64_t a1)
{
  id v6 = _NSConcreteStackBlock;
  uint64_t v7 = 3221225472LL;
  id v8 = sub_100009FF4;
  id v9 = &unk_100639378;
  id v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  id v10 = v3;
  uint64_t v11 = v4;
  [v2 _enumerateOperations:&v6];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 16LL));
  objc_msgSend(WeakRetained, "provisioningOperationsDidUpdate", v6, v7, v8, v9);
}

void sub_100009FF4(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 transportIdentifier]);
  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = v6;
  id v9 = v7;
  if (v8 == v9)
  {
  }

  else
  {
    id v10 = v9;
    if (!v8 || !v9)
    {

LABEL_11:
      *a3 = 0;
      goto LABEL_12;
    }

    unsigned int v11 = [v8 isEqualToString:v9];

    if (!v11) {
      goto LABEL_11;
    }
  }

  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = PKSharingLoggableMailboxAddress(*(void *)(a1 + 32));
    unsigned int v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    *(_DWORD *)buf = 138412290;
    id v26 = v15;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "StatefulProvisioningManager: Terminated stateful provisioning for transportIdentifier: '%@'",  buf,  0xCu);
  }

  id v16 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 32LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10000A204;
  block[3] = &unk_100639300;
  id v17 = v5;
  id v24 = v17;
  dispatch_async(v16, block);
  v18 = *(void **)(*(void *)(a1 + 40) + 8LL);
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v17 shareIdentifier]);
  char v20 = (void *)objc_claimAutoreleasedReturnValue([v18 passShareForIdentifier:v19]);

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 16LL));
  id v22 = [v17 copyWithoutCompletion];
  [WeakRetained finishedStatefulProvisioningAttemptWithSuccess:0 operation:v22 share:v20];

  *a3 = 1;
LABEL_12:
}

void sub_10000A204(uint64_t a1)
{
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSError pkSharingError:](&OBJC_CLASS___NSError, "pkSharingError:", 5LL));
  id v2 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completion]);
  ((void (**)(void, void, id))v2)[2](v2, 0LL, v3);
}

void sub_10000A2E4(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v17 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "StatefulProvisioningManager: Adding new operation %@",  buf,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 40);
  id v5 = (id *)(a1 + 40);
  [*(id *)(v6 + 40) addObject:*(v5 - 1)];
  objc_initWeak((id *)buf, *v5);
  dispatch_time_t v7 = dispatch_time(0LL, 30000000000LL);
  id v8 = (dispatch_queue_s *)*((void *)*v5 + 3);
  id v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472LL;
  id v12 = sub_10000A48C;
  id v13 = &unk_1006393A0;
  objc_copyWeak(&v15, (id *)buf);
  id v14 = *(v5 - 1);
  dispatch_after(v7, v8, &v10);
  id WeakRetained = objc_loadWeakRetained((id *)*v5 + 2);
  objc_msgSend(WeakRetained, "provisioningOperationsDidUpdate", v10, v11, v12, v13);

  objc_destroyWeak(&v15);
  objc_destroyWeak((id *)buf);
}

void sub_10000A468( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_10000A48C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [WeakRetained _operationDidTimeout:*(void *)(a1 + 32)];
}

BOOL sub_10000A82C(id a1, PDSharingStatefulProvisioningOperation *a2, unint64_t a3, BOOL *a4)
{
  return -[PDSharingStatefulProvisioningOperation isForegroundOperation](a2, "isForegroundOperation", a3, a4);
}

id sub_10000A834(id a1, PDSharingStatefulProvisioningOperation *a2)
{
  return -[PDSharingStatefulProvisioningOperation shareIdentifier](a2, "shareIdentifier");
}

void sub_10000ACCC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10000AE7C(id a1, PKTransactionReleasedData *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKTransactionReleasedData setPrivacyPolicyURL:](v4, "setPrivacyPolicyURL:", v5);
}

void sub_10000AEC8(id a1, PKTransactionReleasedData *a2, id a3)
{
}

void sub_10000AED0(id a1, PKTransactionReleasedData *a2, id a3)
{
}

id sub_10000AF34(id a1, uint64_t a2, void *a3, char a4)
{
  id v7 = a3;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)&OBJC_CLASS___PDDeviceRegistrationTask;
    id v8 = objc_msgSendSuper2(&v12, "init");
    a1 = v8;
    if (v8)
    {
      v8[3] = a2;
      id v9 = [v7 copy];
      id v10 = (void *)*((void *)a1 + 4);
      *((void *)a1 + 4) = v9;

      *((_BYTE *)a1 + 16) = a4;
    }
  }

  return a1;
}

void *sub_10000AFBC(void *a1, void *a2, void *a3, char a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = sub_10000AF34(a1, 2LL, a2, a4);
    if (v8)
    {
      id v9 = [v7 copy];
      id v10 = (void *)v8[7];
      v8[7] = v9;
    }
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

void *sub_10000B034(void *a1, void *a2, void *a3, char a4)
{
  id v7 = a3;
  if (a1)
  {
    id v8 = sub_10000AF34(a1, 1LL, a2, a4);
    if (v8)
    {
      id v9 = [v7 copy];
      id v10 = (void *)v8[6];
      v8[6] = v9;
    }
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

void *sub_10000B0AC(void *a1, void *a2, void *a3, char a4, char a5)
{
  id v9 = a3;
  if (a1)
  {
    id v10 = sub_10000AF34(a1, 0LL, a2, a4);
    if (v10)
    {
      id v11 = [v9 copy];
      objc_super v12 = (void *)v10[5];
      v10[5] = v11;

      *((_BYTE *)v10 + 17) = a5;
    }
  }

  else
  {
    id v10 = 0LL;
  }

  return v10;
}

void sub_10000B134(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = *(void **)(a1 + 8);
    id v8 = v3;
    if (!v4)
    {
      id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      uint64_t v6 = *(void **)(a1 + 8);
      *(void *)(a1 + _Block_object_dispose(va, 8) = v5;

      uint64_t v4 = *(void **)(a1 + 8);
    }

    id v7 = objc_retainBlock(v8);
    [v4 addObject:v7];

    id v3 = v8;
  }
}

void *sub_10000B1A8(void *result)
{
  if (result)
  {
    v1 = (void *)result[1];
    result[1] = 0LL;
    id v2 = v1;

    id v3 = [v2 copy];
    return v3;
  }

  return result;
}

void sub_10000B4F0(id *a1)
{
  if (!a1) {
    return;
  }
  id v2 = (void *)objc_claimAutoreleasedReturnValue([a1[3] sharedWebService]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 context]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 configurationDate]);
  if (v4 && sub_10000C4A0((uint64_t)a1, 0LL))
  {
    int v5 = PKAutomaticRegistrationSupported();

    if (v5)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Payment web service context changed. Performing device registration",  buf,  2u);
      }

      [a1 performDeviceRegistrationForReason:@"payment context changed" brokerURL:0 action:1 forceApplePayRegister:0 forcePeerPaymentRegister:0 completion:0];
      return;
    }
  }

  else
  {
  }

  uint64_t v8 = PKLogFacilityTypeGetObject(6LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Payment web service context changed. Skipping device registration",  v10,  2u);
  }
}

void sub_10000B718(uint64_t a1)
{
  id v2 = sub_10000AFBC( objc_alloc(&OBJC_CLASS___PDDeviceRegistrationTask),  *(void **)(a1 + 32),  *(void **)(a1 + 40),  *(_BYTE *)(a1 + 64));
  id v3 = v2;
  uint64_t v4 = *(void **)(a1 + 56);
  id v5 = v2;
  if (v4)
  {
    sub_10000B134((uint64_t)v2, v4);
    id v3 = v5;
  }

  sub_10000B780(*(void *)(a1 + 48), v3);
}

void sub_10000B780(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = [*(id *)(a1 + 16) count];
    [*(id *)(a1 + 16) addObject:v3];
    if (v4)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v7 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Registration attempt already underway",  v7,  2u);
      }
    }

    else
    {
      sub_10000BC3C((dispatch_queue_t *)a1, v3);
    }
  }
}

void sub_10000B908(uint64_t a1)
{
  id v2 = sub_10000B034( objc_alloc(&OBJC_CLASS___PDDeviceRegistrationTask),  *(void **)(a1 + 32),  *(void **)(a1 + 40),  *(_BYTE *)(a1 + 64));
  id v3 = v2;
  id v4 = *(void **)(a1 + 56);
  id v5 = v2;
  if (v4)
  {
    sub_10000B134((uint64_t)v2, v4);
    id v3 = v5;
  }

  sub_10000B780(*(void *)(a1 + 48), v3);
}

void sub_10000BA64(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2 != 1)
  {
    if (v2)
    {
LABEL_16:
      uint64_t v8 = sub_10000B0AC( objc_alloc(&OBJC_CLASS___PDDeviceRegistrationTask),  *(void **)(a1 + 48),  *(void **)(a1 + 40),  *(_BYTE *)(a1 + 72),  *(_BYTE *)(a1 + 73));
      id v9 = v8;
      id v10 = *(void **)(a1 + 56);
      if (v10) {
        sub_10000B134((uint64_t)v8, v10);
      }
      sub_10000B780(*(void *)(a1 + 32), v9);

      id v4 = 0LL;
      goto LABEL_19;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Registration requested with queueing action",  buf,  2u);
    }

void sub_10000BC3C(dispatch_queue_t *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    dispatch_assert_queue_V2(a1[1]);
    id v4 = objc_alloc(&OBJC_CLASS___NSString);
    if (v3) {
      uint64_t v5 = v3[4];
    }
    else {
      uint64_t v5 = 0LL;
    }
    uint64_t v6 = -[NSString initWithFormat:](v4, "initWithFormat:", @"PDDeviceRegistrationService.registering.%@", v5);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10000BD14;
    v8[3] = &unk_100639558;
    id v9 = (id)PDOSTransactionCreate(-[NSString UTF8String](v6, "UTF8String"));
    id v10 = a1;
    id v7 = v9;
    sub_10000BDD8(a1, v3, v8);
  }
}

void sub_10000BD14(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
}

void sub_10000BD1C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    id v9 = *(dispatch_queue_s **)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10000CD08;
    v10[3] = &unk_100639288;
    void v10[4] = a1;
    uint64_t v13 = a2;
    id v11 = v7;
    id v12 = v8;
    dispatch_async(v9, v10);
  }
}

void sub_10000BDD8(dispatch_queue_t *a1, void *a2, void *a3)
{
  uint64_t v5 = a2;
  id v6 = a3;
  if (a1)
  {
    dispatch_assert_queue_V2(a1[1]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(-[dispatch_queue_t paymentWebServiceCoordinator](a1, "paymentWebServiceCoordinator"));
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 sharedWebService]);

    id v9 = (void *)objc_claimAutoreleasedReturnValue(-[dispatch_queue_t peerPaymentWebServiceCoordinator](a1, "peerPaymentWebServiceCoordinator"));
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 sharedPeerPaymentWebService]);

    if (v5) {
      id v11 = (__CFString *)v5[4];
    }
    else {
      id v11 = 0LL;
    }
    if (!v11) {
      id v11 = @"default";
    }
    id v12 = v11;
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v26 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Attempting registration for reason: %{public}@",  buf,  0xCu);
    }

    [v8 addDiagnosticReason:v12];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10000BFD8;
    v18[3] = &unk_100639660;
    id v19 = v8;
    char v20 = v12;
    id v24 = v6;
    uint64_t v21 = v5;
    id v22 = a1;
    id v23 = v10;
    id v15 = v10;
    id v16 = v12;
    id v17 = v8;
    sub_10000CAC4((uint64_t)a1, v21, v17, v18);
  }
}

void sub_10000BFD8(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    id v26 = _NSConcreteStackBlock;
    uint64_t v27 = 3221225472LL;
    uint64_t v28 = sub_10000C24C;
    uint64_t v29 = &unk_100639638;
    id v30 = *(id *)(a1 + 32);
    id v31 = *(id *)(a1 + 40);
    id v3 = *(id *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v5 = *(void **)(a1 + 64);
    id v32 = v3;
    uint64_t v33 = v4;
    id v34 = v5;
    id v35 = *(id *)(a1 + 72);
    id v6 = objc_retainBlock(&v26);
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Attempting to register for Apple Pay.",  buf,  2u);
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "paymentWebServiceCoordinator", v26, v27, v28, v29));
    id v10 = v9;
    if (v9)
    {
      id v11 = *(void **)(a1 + 48);
      if (!v11)
      {
        uint64_t v13 = 0LL;
        goto LABEL_10;
      }

      uint64_t v12 = v11[3];
      switch(v12)
      {
        case 2LL:
          uint64_t v23 = v11[7];
          uint64_t v24 = *(void *)(a1 + 48);
          if (v24) {
            BOOL v25 = *(unsigned __int8 *)(v24 + 16) != 0;
          }
          else {
            BOOL v25 = 0LL;
          }
          [v9 performRegistrationForMemberOfRegions:v23 force:v25 completion:v6];
          goto LABEL_25;
        case 1LL:
          uint64_t v20 = v11[6];
          uint64_t v21 = *(void *)(a1 + 48);
          if (v21) {
            BOOL v22 = *(unsigned __int8 *)(v21 + 16) != 0;
          }
          else {
            BOOL v22 = 0LL;
          }
          [v9 performRegistrationForRegion:v20 force:v22 completion:v6];
          goto LABEL_25;
        case 0LL:
          uint64_t v13 = v11[5];
LABEL_10:
          uint64_t v14 = *(void *)(a1 + 48);
          if (v14) {
            BOOL v15 = *(unsigned __int8 *)(v14 + 16) != 0;
          }
          else {
            BOOL v15 = 0LL;
          }
          [v9 performRegistrationForBrokerURL:v13 force:v15 completion:v6];
LABEL_25:

          return;
      }
    }

    uint64_t v19 = *(void *)(a1 + 72);
    if (v19) {
      (*(void (**)(uint64_t, uint64_t, void, void))(v19 + 16))(v19, 2LL, 0LL, 0LL);
    }
    goto LABEL_25;
  }

  [*(id *)(a1 + 32) removeDiagnosticReason:*(void *)(a1 + 40)];
  uint64_t v16 = PKLogFacilityTypeGetObject(6LL);
  id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Cannot automatically register because the pre-conditions failed.",  buf,  2u);
  }

  uint64_t v18 = *(void *)(a1 + 72);
  if (v18) {
    (*(void (**)(uint64_t, uint64_t, void, void))(v18 + 16))(v18, 2LL, 0LL, 0LL);
  }
}

void sub_10000C24C(uint64_t a1, int a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v6)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Successfully registered for Apple Pay.",  buf,  2u);
    }

    id v7 = *(_BYTE **)(a1 + 48);
    if (v7) {
      BOOL v8 = v7[17] != 0;
    }
    else {
      BOOL v8 = 0;
    }
    if (sub_10000C4A0(*(void *)(a1 + 56), v7))
    {
      id v9 = *(void **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      v20[2] = sub_10000C64C;
      v20[3] = &unk_1006395A8;
      id v21 = v9;
      id v22 = *(id *)(a1 + 64);
      id v10 = *(id *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 56);
      id v23 = v10;
      uint64_t v24 = v11;
      BOOL v26 = v8;
      id v25 = *(id *)(a1 + 72);
      [v21 _canRegisterForPeerPaymentWithCompletion:v20];

      id v12 = v21;
    }

    else
    {
      uint64_t v14 = PKLogFacilityTypeGetObject(11LL);
      BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Peer payment registration not attempted",  buf,  2u);
      }

      uint64_t v16 = *(void *)(a1 + 72);
      if (!v16) {
        goto LABEL_17;
      }
      id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
      (*(void (**)(uint64_t, uint64_t, id, void))(v16 + 16))(v16, 16LL, v12, 0LL);
    }

LABEL_17:
    id v17 = *(void **)(a1 + 32);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_10000C9BC;
    v18[3] = &unk_100639610;
    id v19 = v17;
    [v19 _shouldPerformApplePayTrustRegistrationWithCompletion:v18];

    return;
  }

  if (v6)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Failed to register for Apple Pay.",  buf,  2u);
  }

  uint64_t v13 = *(void *)(a1 + 72);
  if (v13) {
    (*(void (**)(uint64_t, uint64_t, void, void))(v13 + 16))(v13, 4LL, 0LL, 0LL);
  }
}

uint64_t sub_10000C4A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (!a1)
  {
LABEL_26:
    uint64_t v14 = 0LL;
    goto LABEL_27;
  }

  if (v3) {
    BOOL v5 = *((_BYTE *)v3 + 17) != 0;
  }
  else {
    BOOL v5 = 0;
  }
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedPeerPaymentWebService]);
  unsigned int v7 = v5 | [v6 needsRegistration];

  if ((PKIsMac(v8, v9) & 1) != 0) {
    uint64_t v10 = 0LL;
  }
  else {
    uint64_t v10 = PKIsTV() ^ 1;
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) sharedWebService]);
  unsigned int v12 = [v11 _needsRegistrationShouldCheckSecureElementOwnership:v10];

  int v13 = v5 | PKUserHasDisabledPeerPayment() ^ 1;
  if ((v7 & v10) != 1 || v12 || (v13 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v17 = @"N";
      if (v7) {
        uint64_t v18 = @"Y";
      }
      else {
        uint64_t v18 = @"N";
      }
      if ((_DWORD)v10) {
        id v19 = @"Y";
      }
      else {
        id v19 = @"N";
      }
      int v22 = 138413058;
      id v23 = v18;
      if (v12) {
        uint64_t v20 = @"N";
      }
      else {
        uint64_t v20 = @"Y";
      }
      __int16 v24 = 2112;
      id v25 = v19;
      __int16 v26 = 2112;
      uint64_t v27 = v20;
      if (v13) {
        id v17 = @"Y";
      }
      __int16 v28 = 2112;
      uint64_t v29 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Peer payment registration should not be attempted. peerPaymentNotRegistered: %@ supportedHa rdware: %@ brokerRegistered: %@ userEnabled: %@",  (uint8_t *)&v22,  0x2Au);
    }

    goto LABEL_26;
  }

  uint64_t v14 = 1LL;
LABEL_27:

  return v14;
}

void sub_10000C64C(uint64_t a1, int a2)
{
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) context]);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([v4 peerPaymentServiceURL]);
  uint64_t v6 = PKPeerPaymentServiceOverrideURL();
  unsigned int v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Using overridden peer payment service url '%@'",  buf,  0xCu);
    }

    id v10 = v7;
    BOOL v5 = v10;
  }

  if (a2 && v5)
  {
    [*(id *)(a1 + 40) addDiagnosticReason:*(void *)(a1 + 48)];
    uint64_t v11 = *(void **)(a1 + 56);
    uint64_t v12 = *(unsigned __int8 *)(a1 + 72);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10000C864;
    v17[3] = &unk_100639580;
    int v13 = *(void **)(a1 + 32);
    id v18 = *(id *)(a1 + 40);
    id v19 = *(id *)(a1 + 48);
    id v21 = *(id *)(a1 + 64);
    id v20 = v4;
    sub_10000C8BC(v11, v5, v13, v12, v17);
  }

  else
  {
    uint64_t v14 = PKLogFacilityTypeGetObject(11LL);
    BOOL v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Peer payment registration not available for current device registration data.",  buf,  2u);
    }

    uint64_t v16 = *(void *)(a1 + 64);
    if (v16) {
      (*(void (**)(uint64_t, uint64_t, void *, void))(v16 + 16))(v16, 16LL, v4, 0LL);
    }
  }
}

void sub_10000C864(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  [*(id *)(a1 + 32) removeDiagnosticReason:*(void *)(a1 + 40)];
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5) {
    (*(void (**)(uint64_t, uint64_t, void, id))(v5 + 16))(v5, a2 | 0x10, *(void *)(a1 + 48), v6);
  }
}

void sub_10000C8BC(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a5;
  if (a1)
  {
    id v10 = a2;
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a3 context]);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 pushToken]);

    if ((a4 & 1) != 0) {
      uint64_t v13 = 0LL;
    }
    else {
      uint64_t v13 = PKIsWatch();
    }
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([a1 peerPaymentWebServiceCoordinator]);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10000CF88;
    v15[3] = &unk_100639688;
    id v16 = v9;
    [v14 performDeviceRegistrationWithRegistrationURL:v10 pushToken:v12 forceReregister:a4 abridgedRegistration:v13 completion:v15];
  }
}

id *sub_10000C9BC(id *result, int a2)
{
  if (a2) {
    return (id *)_[result[4] performApplePayTrustRegistrationWithCompletion:&stru_1006395E8];
  }
  return result;
}

void sub_10000C9D4(id a1, PKApplePayTrustKey *a2, NSError *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(15LL);
  unsigned int v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v8)
    {
      int v10 = 138412290;
      uint64_t v11 = v4;
      id v9 = "Apple Pay Trust registration succeeded with key: %@.";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v10, 0xCu);
    }
  }

  else if (v8)
  {
    int v10 = 138543362;
    uint64_t v11 = v5;
    id v9 = "Apple Pay Trust registration failed with error: %{public}@";
    goto LABEL_6;
  }
}

void sub_10000CAC4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    id v10 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_10000D14C;
    v29[3] = &unk_1006396D8;
    v29[4] = a1;
    [v10 addOperation:v29];
    v27[0] = 0LL;
    v27[1] = v27;
    v27[2] = 0x3032000000LL;
    v27[3] = sub_10000D20C;
    v27[4] = sub_10000D21C;
    id v28 = 0LL;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_10000D224;
    v24[3] = &unk_100639728;
    __int16 v26 = v27;
    id v11 = v8;
    id v25 = v11;
    [v10 addOperation:v24];
    v22[0] = 0LL;
    v22[1] = v22;
    v22[2] = 0x2020000000LL;
    char v23 = 0;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_10000D4D0;
    v17[3] = &unk_100639750;
    id v18 = v7;
    id v19 = v11;
    id v20 = v27;
    id v21 = v22;
    [v10 addOperation:v17];
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_10000D978;
    v14[3] = &unk_100639778;
    id v15 = v9;
    id v16 = v22;
    id v13 = [v10 evaluateWithInput:v12 completion:v14];

    _Block_object_dispose(v22, 8);
    _Block_object_dispose(v27, 8);
  }
}

void sub_10000CCDC(_Unwind_Exception *a1)
{
}

void sub_10000CD08(uint64_t a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) firstObject]);
  if (v2)
  {
    uint64_t v3 = v2;
    [*(id *)(*(void *)(a1 + 32) + 16) removeObjectAtIndex:0];
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    uint64_t v4 = sub_10000B1A8((void *)v3);
    id v5 = [v4 countByEnumeratingWithState:&v16 objects:v22 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v17;
      do
      {
        id v8 = 0LL;
        do
        {
          if (*(void *)v17 != v7) {
            objc_enumerationMutation(v4);
          }
          (*(void (**)(void))(*(void *)(*((void *)&v16 + 1) + 8LL * (void)v8) + 16LL))(*(void *)(*((void *)&v16 + 1) + 8LL * (void)v8));
          id v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v16 objects:v22 count:16];
      }

      while (v6);
    }

    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = *(id *)(v3 + 32);
      *(_DWORD *)buf = 138543362;
      id v21 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Completed processing registration attempt with reason :%{public}@",  buf,  0xCu);
    }

    id v12 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "count", (void)v16);
    BOOL v13 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v12)
    {
      if (v13)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Processing next registration attempt",  buf,  2u);
      }

      uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) firstObject]);
      sub_10000BC3C(*(void *)(a1 + 32), v14);
      uint64_t v3 = v14;
    }

    else
    {
      if (v13)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Completed processing all registration attempts",  buf,  2u);
      }
    }
  }

  else
  {
    uint64_t v15 = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  OS_LOG_TYPE_DEFAULT,  "Error: no registration task found for completion",  buf,  2u);
    }
  }
}

void sub_10000CF88(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v8)
    {
      LOWORD(v16) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Successfully registered with the peer payment service.",  (uint8_t *)&v16,  2u);
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      id v10 = *(void (**)(void))(v9 + 16);
LABEL_16:
      v10();
    }
  }

  else
  {
    if (v8)
    {
      int v16 = 138412290;
      id v17 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Failed to register with the peer payment service: %@.",  (uint8_t *)&v16,  0xCu);
    }

    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 domain]);
    unsigned int v12 = [v11 isEqualToString:PKPeerPaymentWebServiceErrorDomain];

    if (v12)
    {
      id v13 = [v5 code];
      id v14 = v13;
      if (v13 == (id)40319 || v13 == (id)40308)
      {
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v16 = 134217984;
          id v17 = v14;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Including PKDeviceRegistrationResultPeerPaymentDoNotRetry in result due to terminal server response %li",  (uint8_t *)&v16,  0xCu);
        }
      }
    }

    uint64_t v15 = *(void *)(a1 + 32);
    if (v15)
    {
      id v10 = *(void (**)(void))(v15 + 16);
      goto LABEL_16;
    }
  }
}

void sub_10000D14C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  BOOL v8 = *(void **)(*(void *)(a1 + 32) + 24LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  v11[2] = sub_10000D1F8;
  v11[3] = &unk_1006396B0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  [v8 updateWebServiceConfigurationWithCompletion:v11];
}

uint64_t sub_10000D1F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

uint64_t sub_10000D20C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10000D21C(uint64_t a1)
{
}

void sub_10000D224(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _appleAccountInformation]);
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  id v11 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (!v11
    || ([v11 aidaAccountAvailable] & 1) != 0
    || ([*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) aidaAccountRequiresAuthentication] & 1) == 0)
  {
LABEL_11:
    v7[2](v7, v6, 0LL);
    goto LABEL_12;
  }

  unsigned __int8 v12 = +[PDSetupAssistantCompleteMonitor hasCompletedSetupAssistant]( &OBJC_CLASS___PDSetupAssistantCompleteMonitor,  "hasCompletedSetupAssistant");
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
  if ((v12 & 1) == 0)
  {
    if (v15)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: account requires token renewal, but setup assistant not complete",  buf,  2u);
    }

    goto LABEL_11;
  }

  if (v15)
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: renewing apple account auth",  buf,  2u);
  }

  int v16 = (void *)objc_claimAutoreleasedReturnValue(+[PKAppleAccountManager sharedInstance](&OBJC_CLASS___PKAppleAccountManager, "sharedInstance"));
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  v17[2] = sub_10000D3DC;
  v17[3] = &unk_100639700;
  uint64_t v20 = *(void *)(a1 + 40);
  __int128 v19 = v7;
  id v18 = v6;
  [v16 renewAppleAccountWithCompletionHandler:v17];

LABEL_12:
}

void sub_10000D3DC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v8)
    {
      *(_WORD *)id v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Failed to renewed applet account auth",  v13,  2u);
    }

    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = 0LL;
  }

  else
  {
    if (v8)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Successfully renewed applet account auth",  buf,  2u);
    }

    uint64_t v11 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v12 = v5;
    id v10 = *(void **)(v11 + 40);
    *(void *)(v11 + 40) = v12;
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10000D4D0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  uint64_t v10 = *(void *)(a1 + 32);
  if (!v10)
  {
LABEL_5:
    char v12 = [*(id *)(a1 + 40) registrationSetupSupportedInRegion] ^ 1;
    goto LABEL_6;
  }

  uint64_t v11 = *(void *)(v10 + 24);
  if ((unint64_t)(v11 - 1) >= 2)
  {
    if (v11)
    {
      PKAutomaticRegistrationSupported();
LABEL_11:
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      goto LABEL_49;
    }

    goto LABEL_5;
  }

  char v12 = 0;
LABEL_6:
  uint64_t v13 = PKAutomaticRegistrationSupported();
  if ((v12 & 1) != 0 || !(_DWORD)v13) {
    goto LABEL_11;
  }
  uint64_t v15 = PKPasscodeEnabled(v13, v14);
  int v16 = v15;
  int IsAvailable = PKSecureElementIsAvailable(v15, v17);
  __int128 v19 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (v19) {
    unsigned int v20 = [v19 aidaAccountAvailable];
  }
  else {
    unsigned int v20 = 0;
  }
  int v39 = PKIsSRD();
  char v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) aaAlternateDSID]);
  int v40 = PKIsBeneficiaryAccountWithAltDsid();

  __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) targetDevice]);
  id v25 = [v24 secureElementOwnershipStateForCurrentUser];

  uint64_t v26 = PKLogFacilityTypeGetObject(6LL);
  int v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = @"YES";
    if (!IsAvailable) {
      uint64_t v27 = @"NO";
    }
    *(_DWORD *)buf = 138543362;
    v42 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Secure Element Available: %{public}@",  buf,  0xCu);
  }

  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    id v28 = @"YES";
    if (!v16) {
      id v28 = @"NO";
    }
    *(_DWORD *)buf = 138543362;
    v42 = v28;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Passcode is enabled: %{public}@",  buf,  0xCu);
  }

  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = @"NO";
    if (v20) {
      uint64_t v29 = @"YES";
    }
    *(_DWORD *)buf = 138543362;
    v42 = v29;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: AppleIDAuth account for primary Apple Account: %{public}@",  buf,  0xCu);
  }

  unsigned int v30 = v20;
  unint64_t v31 = (unint64_t)v25 - 1;

  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    id v32 = @"NO";
    if (v31 < 3) {
      id v32 = @"YES";
    }
    else {
      uint64_t v33 = *(&off_100639798 + (void)v25);
    }
    *(_DWORD *)buf = 138543618;
    v42 = v32;
    __int16 v43 = 2112;
    v44 = v33;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Secure element ownership state valid: %{public}@ - %@",  buf,  0x16u);
  }

  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    id v34 = @"NO";
    if (v39) {
      id v34 = @"YES";
    }
    *(_DWORD *)buf = 138543362;
    v42 = v34;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Is SRD: %{public}@",  buf,  0xCu);
  }

  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    id v35 = @"NO";
    if (v40) {
      id v35 = @"YES";
    }
    *(_DWORD *)buf = 138543362;
    v42 = v35;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Is Beneficiary Account: %{public}@",  buf,  0xCu);
  }

  char v36 = 0;
  if (v16) {
    char v37 = v39;
  }
  else {
    char v37 = 1;
  }
  if ((v37 & 1) == 0)
  {
    if (IsAvailable)
    {
      if (((v30 ^ 1) & 1) == 0)
      {
        char v36 = v40 ^ 1;
        if (v31 >= 3) {
          char v36 = 0;
        }
      }
    }
  }

  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v36;
LABEL_49:
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
      v38 = @"YES";
    }
    else {
      v38 = @"NO";
    }
    *(_DWORD *)buf = 138543362;
    v42 = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "RegistrationService: Can automatically register %{public}@",  buf,  0xCu);
  }

  v9[2](v9, v8, 0LL);
}

uint64_t sub_10000D978(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3 = objc_autoreleasePoolPush();
  uint64_t v4 = objc_autoreleasePoolPush();
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNotificationCenter defaultCenter](&OBJC_CLASS___NSNotificationCenter, "defaultCenter"));
  id v6 =  [v5 addObserverForName:NSCurrentLocaleDidChangeNotification object:0 queue:0 usingBlock:&stru_1006397F8];

  id v7 = PDDefaultQueue();
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  dispatch_sync(v8, &stru_100639818);

  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSRunLoop currentRunLoop](&OBJC_CLASS___NSRunLoop, "currentRunLoop"));
  objc_autoreleasePoolPop(v4);
  [v9 run];

  objc_autoreleasePoolPop(v3);
  return 0;
}

void sub_10000E108(id a1, NSNotification *a2)
{
  uint64_t v2 = a2;
  PDSetPaymentSetupFeaturesAreDirty(1LL);
  PDSetSpotlightIndexNeedsIndexing(1LL);
  exit(0);
}

void sub_10000E324(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
  [v3 updateWalletBadgeCount];

  if ([*(id *)(a1 + 32) _canShowPayLaterNotificationsForAccount:v4 financingPlan:*(void *)(a1 + 40)])
  {
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeNewFinancingPlanNotification:oldFinancingPlan:account:",  *(void *)(a1 + 40),  *(void *)(a1 + 40),  v4);
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeCanceledFinancingPlanNotification:oldFinancingPlan:account:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v4);
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeNewPaymentNotification:oldFinancingPlan:account:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v4);
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeDeclinedPaymentNotification:oldFinancingPlan:account:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v4);
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeFinancingPlanPaymentReminderNotifications:account:",  *(void *)(a1 + 40),  v4);
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeFinancingPlanPastDueNotifications:oldFinancingPlan:account:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v4);
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeFinancingPlanScheduleSummaryReasonNotifications:oldFinancingPlan:account:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v4);
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeRefundPaymentNotification:oldFinancingPlan:account:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v4);
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeFinancingPlanDisputeNotifications:oldFinancingPlan:account:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v4);
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeAdjustmentPaymentNotification:oldFinancingPlan:account:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v4);
  }
}

void sub_10000E4A0(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
  [v3 updateWalletBadgeCount];

  if ([*(id *)(a1 + 32) _canShowPayLaterNotificationsForAccount:v4 financingPlan:*(void *)(a1 + 40)])
  {
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeNewFinancingPlanNotification:oldFinancingPlan:account:",  *(void *)(a1 + 40),  0,  v4);
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeFinancingPlanPaymentReminderNotifications:account:",  *(void *)(a1 + 40),  v4);
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeFinancingPlanPastDueNotifications:oldFinancingPlan:account:",  *(void *)(a1 + 40),  0,  v4);
  }
}

void sub_10000E5BC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
  [v2 updateWalletBadgeCount];

  for (uint64_t i = 0LL; i != 3; ++i)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountFinancingPlanUserNotification notificationIdentifierForFinancingPlan:updateType:]( &OBJC_CLASS___PDAccountFinancingPlanUserNotification,  "notificationIdentifierForFinancingPlan:updateType:",  *(void *)(a1 + 40),  i));
    [v4 removeUserNotificationWithIdentifier:v5];
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountFinancingPlanPaidOffNotification notificationIdentifierForFinancingPlan:]( &OBJC_CLASS___PDAccountFinancingPlanPaidOffNotification,  "notificationIdentifierForFinancingPlan:",  *(void *)(a1 + 40)));
  [v6 removeUserNotificationWithIdentifier:v7];

  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) scheduleSummary]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 payments]);

  id v10 = [v9 countByEnumeratingWithState:&v48 objects:v54 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v49;
    do
    {
      uint64_t v13 = 0LL;
      do
      {
        if (*(void *)v49 != v12) {
          objc_enumerationMutation(v9);
        }
        uint64_t v14 = *(void *)(*((void *)&v48 + 1) + 8LL * (void)v13);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
        int v16 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountFinancingPlanPaymentNotification notificationIdentifierForPayment:]( &OBJC_CLASS___PDAccountFinancingPlanPaymentNotification,  "notificationIdentifierForPayment:",  v14));
        [v15 removeUserNotificationWithIdentifier:v16];

        uint64_t v13 = (char *)v13 + 1;
      }

      while (v11 != v13);
      id v11 = [v9 countByEnumeratingWithState:&v48 objects:v54 count:16];
    }

    while (v11);
  }

  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) disputes]);
  id v18 = [v17 countByEnumeratingWithState:&v44 objects:v53 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v45;
    do
    {
      id v21 = 0LL;
      do
      {
        if (*(void *)v45 != v20) {
          objc_enumerationMutation(v17);
        }
        uint64_t v22 = *(void *)(*((void *)&v44 + 1) + 8LL * (void)v21);
        char v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
        __int16 v24 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountFinancingPlanDisputeUpdateNotification notificationIdentifierForFinancingPlan:dispute:type:]( &OBJC_CLASS___PDAccountFinancingPlanDisputeUpdateNotification,  "notificationIdentifierForFinancingPlan:dispute:type:",  *(void *)(a1 + 40),  v22,  0LL));
        [v23 removeUserNotificationWithIdentifier:v24];

        id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountFinancingPlanDisputeUpdateNotification notificationIdentifierForFinancingPlan:dispute:type:]( &OBJC_CLASS___PDAccountFinancingPlanDisputeUpdateNotification,  "notificationIdentifierForFinancingPlan:dispute:type:",  *(void *)(a1 + 40),  v22,  1LL));
        [v25 removeUserNotificationWithIdentifier:v26];

        id v21 = (char *)v21 + 1;
      }

      while (v19 != v21);
      id v19 = [v17 countByEnumeratingWithState:&v44 objects:v53 count:16];
    }

    while (v19);
  }

  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "scheduleSummary", 0));
  id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 installments]);

  id v29 = [v28 countByEnumeratingWithState:&v40 objects:v52 count:16];
  if (v29)
  {
    id v30 = v29;
    uint64_t v31 = *(void *)v41;
    do
    {
      id v32 = 0LL;
      do
      {
        if (*(void *)v41 != v31) {
          objc_enumerationMutation(v28);
        }
        uint64_t v33 = 0LL;
        uint64_t v34 = *(void *)(*((void *)&v40 + 1) + 8LL * (void)v32);
        do
        {
          id v35 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
          char v36 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountFinancingPlanPaymentReminderNotification notificationIdentifierForInstallment:reminderOffset:]( &OBJC_CLASS___PDAccountFinancingPlanPaymentReminderNotification,  "notificationIdentifierForInstallment:reminderOffset:",  v34,  v33));
          [v35 removeUserNotificationWithIdentifier:v36];

          ++v33;
        }

        while (v33 != 3);
        id v32 = (char *)v32 + 1;
      }

      while (v32 != v30);
      id v30 = [v28 countByEnumeratingWithState:&v40 objects:v52 count:16];
    }

    while (v30);
  }

  for (uint64_t j = 0LL; j != 17; ++j)
  {
    v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
    int v39 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountFinancingPlanPastDueNotification notificationIdentifierForFinancingPlan:daysPastDueEnum:]( &OBJC_CLASS___PDAccountFinancingPlanPastDueNotification,  "notificationIdentifierForFinancingPlan:daysPastDueEnum:",  *(void *)(a1 + 40),  j));
    [v38 removeUserNotificationWithIdentifier:v39];
  }

id sub_10000EABC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
  [v2 updateWalletBadgeCount];

  id result = [*(id *)(a1 + 32) _canShowPayLaterNotificationsForAccount:*(void *)(a1 + 40) overrideBlockNotifications:1];
  if ((_DWORD)result)
  {
    objc_msgSend( *(id *)(a1 + 32),  "_queue_computeAccountStateChangeNotification:oldAccount:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
    return _objc_msgSend( *(id *)(a1 + 32),  "_queue_removeSummaryTimesForAccountChangedIfNecessary:oldAccount:",  *(void *)(a1 + 40),  *(void *)(a1 + 48));
  }

  return result;
}

LABEL_8:
    goto LABEL_15;
  }

  [v11 timeIntervalSinceNow];
  if (fabs(v14) > 86400.0)
  {
    uint64_t v15 = PKLogFacilityTypeGetObject(14LL);
    int v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      id v30 = v12;
      uint64_t v31 = 2112;
      id v32 = v11;
      uint64_t v17 = "New Financing Plan %@ has a transactionDate more than 1 day ago %@, skip notification.";
      id v18 = v16;
      id v19 = 22;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
      goto LABEL_8;
    }

    goto LABEL_8;
  }

  id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Found an existing active user notification for a new financing plan %@. Updating contents but not re-rolling banner.",  v12));
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Creating new notification for a new financing plan %@",  v12));
  char v23 = -[PDAccountFinancingPlanUserNotification initWithFinancingPlan:updateType:passUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDAccountFinancingPlanUserNotification),  "initWithFinancingPlan:updateType:passUniqueIdentifier:",  v8,  1LL,  v13);
  if (a4)
  {
    id v28 = v21;
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountFinancingPlanUserNotification notificationIdentifierForFinancingPlan:updateType:]( &OBJC_CLASS___PDAccountFinancingPlanUserNotification,  "notificationIdentifierForFinancingPlan:updateType:",  v8,  1LL));
    id v25 = (void *)objc_claimAutoreleasedReturnValue(-[PDAccountNotificationController userNotificationManager](self, "userNotificationManager"));
    uint64_t v26 = [v25 hasNotificationApplicationMessageWithIdentifier:v24];

    if (v26)
    {
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[PDAccountNotificationController userNotificationManager](self, "userNotificationManager"));
      [v27 updateNotificationApplicationMessageWithNotification:v23];
    }

    id v21 = v28;
  }

  else
  {
    -[PDAccountNotificationController _queue_addOrUpdateNotification:updateLogLine:addLogLine:]( self,  "_queue_addOrUpdateNotification:updateLogLine:addLogLine:",  v23,  v21,  v22);
  }

LABEL_15:
}

    goto LABEL_9;
  }

  if (!-[PKEntitlementWhitelist passesAllAccess](self->_whitelist, "passesAllAccess"))
  {
    uint64_t v12 = PKLogFacilityTypeGetObject(0LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1004414F0();
    }
    goto LABEL_8;
  }

  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10004F594;
  v13[3] = &unk_10063C8B0;
  v13[4] = self;
  uint64_t v14 = v8;
  uint64_t v15 = v9;
  -[PDPassLibrary _getPassWithUniqueID:handler:](self, "_getPassWithUniqueID:handler:", v15, v13);

LABEL_9:
}
}
}
}
}

    sub_1000CBBF4((uint64_t)self, v8, v6);
  }
}

    return;
  }

  self->_started = 1;
  -[PDNetworkTask performStart:](self, "performStart:", a3);
}
}

    id v5 = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_9;
  }

  if (v2 != (id)1) {
    goto LABEL_8;
  }
  uint64_t v3 = (unint64_t)[v1 state] - 1;
  if (v3 >= 5) {
    goto LABEL_8;
  }
  id v4 = &unk_1004D6CC8;
LABEL_7:
  id v5 = v4[v3];
LABEL_9:

  return v5;
}
}
}
}
}
}

  return v22;
}

  return v9;
}

    goto LABEL_9;
  }

  if (-[PDTransactionNotificationController _transactionHasBeenUpdatedRecentlyEnoughForNotification:]( self,  "_transactionHasBeenUpdatedRecentlyEnoughForNotification:",  v5))
  {
    uint64_t v12 = -[PDTransactionNotificationController _shouldCreateNotificationForTransactionUpdateReasons:notificationTypeDescription:]( self,  "_shouldCreateNotificationForTransactionUpdateReasons:notificationTypeDescription:",  v5,  @"merchant transaction notification");
    goto LABEL_10;
  }
}
}
}
}

    __int16 v24 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v25 = (void *)objc_claimAutoreleasedReturnValue([v8 parentRegion]);
    if (v6)
    {
      if (!v12)
      {
        uint64_t Object = PKLogFacilityTypeGetObject(18LL);
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v83 = v8;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "No matching result for region %@ during single update",  buf,  0xCu);
        }

        id v28 = 0LL;
        goto LABEL_46;
      }
    }

    else if (!v12)
    {
      id v29 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
      if (v25)
      {
        id v30 = (void *)objc_claimAutoreleasedReturnValue([a1 insertOrUpdateRegion:v25 inDatabase:v9]);
        uint64_t v31 = v30;
        if (v30)
        {
          id v32 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [v30 persistentID]));
          uint64_t v33 = v25;
          uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([a1 _predicateForParentPID:v32]);
          -[NSMutableArray addObject:](v29, "addObject:", v34);

          id v25 = v33;
          -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v32, @"parent_pid");
        }
      }

      id v35 = (void *)objc_claimAutoreleasedReturnValue([v8 abbreviationCode]);

      if (v35)
      {
        char v36 = (void *)objc_claimAutoreleasedReturnValue([v8 abbreviationCode]);
        char v37 = objc_claimAutoreleasedReturnValue([a1 _predicateForCode:v36]);
      }

      else
      {
        char v36 = (void *)objc_claimAutoreleasedReturnValue([v8 localizedName]);
        char v37 = objc_claimAutoreleasedReturnValue([a1 _predicateForName:v36]);
      }

      int v39 = (void *)v37;
      -[NSMutableArray addObject:](v29, "addObject:", v37);

      __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([v8 localeIdentifier]);
      __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([a1 _predicateForLocaleIdentifier:v40]);
      -[NSMutableArray addObject:](v29, "addObject:", v41);

      __int128 v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "_predicateForType:", objc_msgSend(v8, "type")));
      -[NSMutableArray addObject:](v29, "addObject:", v42);

      __int128 v43 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v29));
      uint64_t v12 = (id)objc_claimAutoreleasedReturnValue([a1 anyInDatabase:v9 predicate:v43]);
    }

    __int128 v44 = (void *)objc_claimAutoreleasedReturnValue([v8 abbreviationCode]);
    -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v44, @"abbreviation_code");

    __int128 v45 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v8 type]));
    -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v45, @"type");

    [v8 displayRegion];
    __int128 v47 = v46;
    __int128 v49 = v48;
    p_info = (__objc2_class_ro **)(&OBJC_CLASS___PassAnnotations + 32);
    if (!v12)
    {
      v70 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
      v71 = (void *)objc_claimAutoreleasedReturnValue([v70 UUIDString]);
      -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v71, @"identifier");

      v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v14));
      -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v72, @"latitude");

      v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v16));
      -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v73, @"longitude");

      v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v47));
      -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v74, @"latitude_delta");

      v75 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v49));
      -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v75, @"longitude_delta");

      v76 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v8 muid]));
      -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v76, @"muid");

      v77 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v8 resultProviderIdentifier]));
      -[NSMutableDictionary setObjectOrNull:forKey:]( v24,  "setObjectOrNull:forKey:",  v77,  @"result_provider_identifier");

      uint64_t v12 = [objc_alloc((Class)a1) initWithPropertyValues:v24 inDatabase:v9];
      v57 = (id)objc_claimAutoreleasedReturnValue([v8 localizedName]);
LABEL_45:
      v78 = (void *)objc_claimAutoreleasedReturnValue([v8 localeIdentifier]);
      objc_msgSend( p_info + 396,  "insertName:localeIdentifier:forWorldRegionPID:inDatabase:",  v57,  v78,  objc_msgSend(v12, "persistentID"),  v9);

      uint64_t v27 = (os_log_s *)v12;
      id v28 = v27;
LABEL_46:

      goto LABEL_47;
    }

    v86.latitude = v14;
    v86.longitude = v16;
    if (CLLocationCoordinate2DIsValid(v86))
    {
      __int128 v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v14));
      -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v51, @"latitude");

      v52 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v16));
      -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v52, @"longitude");

      v53 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v47));
      -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v53, @"latitude_delta");

      v54 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithDouble:](&OBJC_CLASS___NSNumber, "numberWithDouble:", v49));
      -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v54, @"longitude_delta");
    }

    if ([v8 muid])
    {
      v55 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedLongLong:]( NSNumber,  "numberWithUnsignedLongLong:",  [v8 muid]));
      -[NSMutableDictionary setObjectOrNull:forKey:](v24, "setObjectOrNull:forKey:", v55, @"muid");

      v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( NSNumber,  "numberWithInt:",  [v8 resultProviderIdentifier]));
      -[NSMutableDictionary setObjectOrNull:forKey:]( v24,  "setObjectOrNull:forKey:",  v56,  @"result_provider_identifier");
    }

    [v12 setValuesWithDictionary:v24];
    v57 = (id)objc_claimAutoreleasedReturnValue([v8 localizedName]);
    v58 = (void *)objc_claimAutoreleasedReturnValue([v8 abbreviationCode]);
    v59 = [v58 length];

    if (!v59)
    {
LABEL_44:
      p_info = &OBJC_CLASS___PassAnnotations.info;
      goto LABEL_45;
    }

    v80 = v25;
    v60 = (void *)objc_claimAutoreleasedReturnValue([v12 valueForProperty:@"pid"]);
    v61 = [v60 longLongValue];
    v62 = (void *)objc_claimAutoreleasedReturnValue([v8 localeIdentifier]);
    v63 = (void *)objc_claimAutoreleasedReturnValue( +[WorldRegionLocalizedContent localizedNameForWorldRegionPID:localeIdentifier:inDatabase:]( &OBJC_CLASS___WorldRegionLocalizedContent,  "localizedNameForWorldRegionPID:localeIdentifier:inDatabase:",  v61,  v62,  v9));

    v65 = objc_opt_class(&OBJC_CLASS___NSString, v64);
    if ((objc_opt_isKindOfClass(v63, v65) & 1) == 0 || ![v63 length])
    {
LABEL_43:

      id v25 = v80;
      goto LABEL_44;
    }

    v66 = (void *)objc_claimAutoreleasedReturnValue([v8 abbreviationCode]);
    v57 = v57;
    v67 = v66;
    if (v57 == v67)
    {
    }

    else
    {
      v68 = v67;
      if (!v57 || !v67)
      {

        goto LABEL_42;
      }

      v69 = [v57 isEqualToString:v67];

      if (!v69) {
        goto LABEL_43;
      }
    }

    v68 = v57;
    v57 = v63;
LABEL_42:

    goto LABEL_43;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([a1 _predicateForIdentifier:v10]);
  uint64_t v12 = (id)objc_claimAutoreleasedReturnValue([a1 anyInDatabase:v9 predicate:v11]);

  if (v12)
  {
    [v8 displayRegion];
    uint64_t v14 = v13;
    int v16 = v15;
    goto LABEL_8;
  }

  v38 = PKLogFacilityTypeGetObject(18LL);
  __int16 v24 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue(v38);
  if (os_log_type_enabled((os_log_t)v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v83 = v10;
    v84 = 2048;
    v85 = [v8 type];
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v24,  OS_LOG_TYPE_DEFAULT,  "No matching region for ID %@, type: %lu",  buf,  0x16u);
  }

  id v28 = 0LL;
LABEL_47:

  return v28;
}

    uint64_t v9 = v1;
    goto LABEL_9;
  }

  id v6 = -[NSSet initWithObjects:]( objc_alloc(&OBJC_CLASS___NSSet),  "initWithObjects:",  @"PDAvailableWhileLockedPreviousSetting",  @"PDMigratedAvailableWhileLocked",  @"PDDiscoveryItemStatus",  @"PDDiscoveryEngagementMessageStatus",  @"PDDiscoveryDismissalCountDict",  @"PDDiscoveryDismissedSet",  @"PDDiscoveryEngagementMessageStatus",  @"PDDiscoveryExpandedSet",  @"PDDiscoveryExpansionCountDict",  @"PDDiscoveryNotificationsStatus",  @"PDDiscoverySwipedCountDict",  0LL);
  id v19 = 0u;
  uint64_t v20 = 0u;
  id v21 = 0u;
  uint64_t v22 = 0u;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSSet allKeys](v7, "allKeys"));
  id v11 = [v10 countByEnumeratingWithState:&v19 objects:v29 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void *)(*((void *)&v19 + 1) + 8LL * (void)i);
        if (-[NSSet containsObject:](v6, "containsObject:", v15)) {
          -[NSSet removeObjectForKey:](v7, "removeObjectForKey:", v15);
        }
      }

      uint64_t v12 = [v10 countByEnumeratingWithState:&v19 objects:v29 count:16];
    }

    while (v12);
  }

  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v26 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "PDRestorePassdPreferences: Completed sanitizing safehaven passd.plist %@",  buf,  0xCu);
  }

  CFPreferencesSetMultiple( (CFDictionaryRef)v7,  0LL,  @"com.apple.passd",  kCFPreferencesCurrentUser,  kCFPreferencesAnyHost);
  if (!CFPreferencesSynchronize(@"com.apple.passd", kCFPreferencesCurrentUser, kCFPreferencesAnyHost))
  {
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      sub_1004423C0(v1);
    }
    goto LABEL_8;
  }

  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "PDRestorePassdPreferences: Successfully restored passd.plist",  buf,  2u);
  }

  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue([v3 path]);
  int v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  if ([v16 fileExistsAtPath:v9])
  {
    id v18 = 0LL;
    [v16 removeItemAtPath:v9 error:&v18];
    uint64_t v17 = (os_log_s *)v18;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v26 = (NSSet *)v9;
      uint64_t v27 = 2112;
      id v28 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "PDRestorePassdPreferences: Removed %@ with error %@",  buf,  0x16u);
    }
  }

  else
  {
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v26 = (NSSet *)v9;
      _os_log_impl( (void *)&_mh_execute_header,  v1,  OS_LOG_TYPE_DEFAULT,  "PDRestorePassdPreferences: Not removing %@ because it doesnt exist",  buf,  0xCu);
    }

    uint64_t v17 = v1;
  }

LABEL_9:
}

    PKAnalyticsSendEvent(v8, 0LL);
    goto LABEL_9;
  }

  if (a3 == 2)
  {
    id v7 = [v5 canReportIdentifierToAggd];
    id v8 = PKAggDKeyDiscoveryMessageActioned;
    if ((v7 & 1) != 0)
    {
      int v16 = @"identifier";
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
      uint64_t v17 = v9;
      id v10 = &v17;
      id v11 = &v16;
LABEL_7:
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v10,  v11,  1LL));
      PKAnalyticsSendEvent(v8, v13);

      goto LABEL_9;
    }

    goto LABEL_8;
  }

    id v8 = 0;
    goto LABEL_9;
  }

  if (!sortedPassUniqueIdentifiers) {
    goto LABEL_8;
  }
  self->_sortedPassUniqueIdentifiers = 0LL;
  id v8 = 1;
LABEL_7:

LABEL_9:
  return v8;
}

    goto LABEL_9;
  }

  id v11 = PKSharingRelayServerPushTopics();
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  uint64_t v13 = [v12 containsObject:v5];

  if (v13) {
    -[PDSharingChannelMonitor checkForNewSharingMessagesWithShouldCheckAllEndpoint:completion:]( self,  "checkForNewSharingMessagesWithShouldCheckAllEndpoint:completion:",  1LL,  &stru_1006592E0);
  }
LABEL_9:
}
}
}

  uint64_t v15 = [a1 keyCreationMetadata];
  if (v15)
  {
    int v16 = v15;
    uint64_t v14 = [v15 signatureIdentityAccount];

    if (v14)
    {
      uint64_t v12 = [v14 subcredentialIdentifier];
      id v4 = v12;
      goto LABEL_11;
    }
  }

LABEL_9:
}
}
}

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    goto LABEL_10;
  }

  if (PKPassbookIsCurrentlyDeletedByUser())
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Wallet must not be deleted", buf, 2u);
    }

    goto LABEL_9;
  }

  id v7 = *(void **)(a1 + 40);
  if (!v7 || (v8 = [v7 isPeerPaymentRequest], id v7 = *(void **)(a1 + 40), (v8 & 1) != 0))
  {
LABEL_13:
    if ([v7 requestType] == (id)3
      || [*(id *)(a1 + 40) isVirtualCardRequest])
    {
      uint64_t v9 = *(void **)(*(void *)(a1 + 32) + 88LL);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) passTypeIdentifier]);
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) passSerialNumber]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 passWithPassTypeID:v10 serialNumber:v11]);
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 paymentPass]);
      ((void (*)(void *, void *))v2[2])(v2, v13);

      goto LABEL_10;
    }

    uint64_t v26 = [*(id *)(a1 + 40) requestType];
    uint64_t v27 = *(void **)(a1 + 40);
    if (v26 == (id)5)
    {
      id v28 = (void *)objc_claimAutoreleasedReturnValue([v27 installmentConfiguration]);
      id v29 = PKFeatureIdentifierFromPaymentSetupFeatureType([v28 feature]);

      id v30 = *(void *)(a1 + 32);
      uint64_t v31 = *(void **)(v30 + 152);
      v45[0] = _NSConcreteStackBlock;
      v45[1] = 3221225472LL;
      v45[2] = sub_100048948;
      v45[3] = &unk_100639AC8;
      v45[4] = v30;
      __int128 v46 = *(id *)(a1 + 48);
      [v31 defaultAccountForFeature:v29 completion:v45];
      id v32 = v46;
LABEL_29:

      goto LABEL_10;
    }

    if ([v27 requestType] == (id)4)
    {
      id v35 = *(void *)(a1 + 32);
      char v36 = *(void **)(v35 + 152);
      v43[0] = _NSConcreteStackBlock;
      v43[1] = 3221225472LL;
      v43[2] = sub_100048A50;
      v43[3] = &unk_100639AC8;
      v43[4] = v35;
      __int128 v44 = *(id *)(a1 + 48);
      [v36 defaultAccountForFeature:2 completion:v43];
      id v32 = v44;
      goto LABEL_29;
    }

    if ([*(id *)(a1 + 40) isPayLaterPaymentRequest])
    {
      char v37 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) payLaterPaymentRequest]);
      else {
        v38 = 2LL;
      }
      (*(void (**)(void, uint64_t, void, void))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  v38,  0LL,  0LL);

      goto LABEL_10;
    }

    int v39 = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      id v6 = "Error: Unsupported payment request type being checked";
      goto LABEL_8;
    }

    goto LABEL_9;
  }

  if ([v7 requestType]
    && [*(id *)(a1 + 40) requestType] != (id)8
    && [*(id *)(a1 + 40) requestType] != (id)10)
  {
    id v7 = *(void **)(a1 + 40);
    goto LABEL_13;
  }

  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSSet setWithObjects:]( &OBJC_CLASS___NSSet,  "setWithObjects:",  &off_10068FB10,  &off_10068FB28,  &off_10068FB40,  &off_10068FB58,  &off_10068FB70,  &off_10068FB88,  0LL));
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) supportedNetworks]);
  int v16 = [v15 count];

  if (v16)
  {
    __int128 v41 = *(void **)(a1 + 32);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) supportedNetworks]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v17));
    __int128 v42 = v14;
    id v19 = [*(id *)(a1 + 40) merchantCapabilities];
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) originatingURL]);
    id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 host]);
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) supportedCountries]);
    char v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [*(id *)(a1 + 40) requestType]));
    __int16 v24 = [*(id *)(a1 + 40) isMultiTokenRequest];
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472LL;
    v47[2] = sub_100048750;
    v47[3] = &unk_10063C428;
    __int128 v48 = v2;
    LOBYTE(v40) = v24;
    id v25 = v19;
    uint64_t v14 = v42;
    [v41 _passesWithSupportedNetworks:v18 merchantCapabilities:v25 webDomain:v21 issuerCountryCodes:v22 paymentApplicationStates:v42 paymentReq uestType:v23 isMultiTokensRequest:v40 handler:v47];
  }

  else
  {
    uint64_t v33 = PKLogFacilityTypeGetObject(6LL);
    uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Error: No supported networks provided, payment request not possible to complete.",  buf,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

LABEL_10:
}
}

    return;
  }

  -[PDCloudStoreContainer setAccountChangedNotificationReceived:](self, "setAccountChangedNotificationReceived:", 1LL);
  uint64_t v9 = PKLogFacilityTypeGetObject(9LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainerConfiguration logDescription](self->_configuration, "logDescription"));
    *(_DWORD *)buf = 138543362;
    uint64_t v14 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] received CKAccountChangedNotification",  buf,  0xCu);
  }

  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100074734;
  v12[3] = &unk_10063DB10;
  v12[4] = self;
  -[PDCloudStoreContainer _queue_cloudStoreAccountInformationWithCompletion:]( self,  "_queue_cloudStoreAccountInformationWithCompletion:",  v12);
}

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v2);
  id v8 = 1LL;
LABEL_11:

  return v8;
}

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    goto LABEL_10;
  }

  if (([v4 canSharePeerPaymentAccount] & 1) == 0)
  {
    uint64_t v14 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot share invitation for receipient %@ because they are not eligible to share a peer payment account",  *(void *)(a1 + 32),  v19,  v20,  v21,  v22));
    uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8LL);
    int v16 = *(void **)(v15 + 40);
    *(void *)(v15 + 40) = v14;

    uint64_t v17 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v18 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      *(_DWORD *)buf = 138543362;
      id v25 = v18;
      goto LABEL_8;
    }

    goto LABEL_9;
  }

  id v6 = *(void *)(a1 + 40);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", *(void *)(a1 + 32)));
  (*(void (**)(uint64_t, uint64_t, void *))(v6 + 16))(v6, 1LL, v7);

LABEL_10:
}
}

  uint64_t v13 = (void *)PKCloudStorePassesSyncSecureContainerName;
  uint64_t v14 = v6;
  uint64_t v15 = v13;
  if (v15 == v14)
  {

LABEL_15:
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[Pass predicateForIsCloudKitSecurelyArchived:]( &OBJC_CLASS___Pass,  "predicateForIsCloudKitSecurelyArchived:",  0LL));
    v26[0] = v10;
    id v11 = (void *)objc_claimAutoreleasedReturnValue(+[Pass predicateForIsRevoked:](&OBJC_CLASS___Pass, "predicateForIsRevoked:", 0LL));
    v26[1] = v11;
    uint64_t v12 = v26;
    goto LABEL_16;
  }

  int v16 = v15;
  if (v6 && v15)
  {
    uint64_t v17 = [v14 isEqualToString:v15];

    if (!v17) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }

LABEL_18:
  uint64_t Object = PKLogFacilityTypeGetObject(24LL);
  id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v24 = 138543362;
    id v25 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "unknown cloud store identifier: %{public}@",  (uint8_t *)&v24,  0xCu);
  }

  id v21 = 0LL;
LABEL_21:

  return v21;
}

  id v11 = (void *)PKCloudStorePassesSyncSecureContainerName;
  uint64_t v12 = v6;
  uint64_t v13 = v11;
  if (v13 == v12)
  {

LABEL_15:
    id v10 = objc_claimAutoreleasedReturnValue( +[Pass predicateForIsCloudKitSecurelyArchived:]( &OBJC_CLASS___Pass,  "predicateForIsCloudKitSecurelyArchived:",  1LL));
    goto LABEL_16;
  }

  uint64_t v14 = v13;
  if (v6 && v13)
  {
    uint64_t v15 = [v12 isEqualToString:v13];

    if (!v15) {
      goto LABEL_18;
    }
    goto LABEL_15;
  }

  if (v12) {
    goto LABEL_18;
  }
  id v18 = (void *)objc_claimAutoreleasedReturnValue(+[Pass predicateForIsCloudKitArchived:](&OBJC_CLASS___Pass, "predicateForIsCloudKitArchived:", 1LL));
  v23[0] = v18;
  id v19 = (void *)objc_claimAutoreleasedReturnValue( +[Pass predicateForIsCloudKitSecurelyArchived:]( &OBJC_CLASS___Pass,  "predicateForIsCloudKitSecurelyArchived:",  1LL));
  v23[1] = v19;
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v23, 2LL));
  int v16 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAnyPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAnyPredicates:",  v20));

LABEL_17:
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity queryWithDatabase:predicate:]( &OBJC_CLASS___Pass,  "queryWithDatabase:predicate:",  self->_database,  v16));
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10012B5FC;
  v21[3] = &unk_100645160;
  uint64_t v22 = v6;
  +[Pass enumeratePassesForQuery:withHandler:](&OBJC_CLASS___Pass, "enumeratePassesForQuery:withHandler:", v17, v21);

LABEL_18:
}

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), v2);
  id v8 = 1LL;
LABEL_11:

  return v8;
}
}

  uint64_t v12 = 0;
LABEL_10:

  return v12;
}
}
}

    uint64_t v3 = 0;
    goto LABEL_10;
  }

  if (!-[PDCarKeyRequirementsChecker carAccessFeatureAvailable]( self->_carKeyRequirementsChecker,  "carAccessFeatureAvailable"))
  {
    id v8 = PKLogFacilityTypeGetObject(22LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = 0;
      id v6 = "Requesting to disable persistent field detect - feature not available";
      id v7 = (uint8_t *)&v9;
      goto LABEL_8;
    }

    goto LABEL_9;
  }

  uint64_t v3 = 1;
LABEL_10:
  PDCarPairingStateSet(v3);
  sub_10015B884((uint64_t)self->_fieldDetectorManager);
}
}

  -[PDPaymentTransactionProcessor _updateActiveState](self, "_updateActiveState", v31, v32, v33, v34);
}

BOOL sub_10000F9F4(id a1, PKPayLaterInstallment *a2, unint64_t a3, BOOL *a4)
{
  return -[PKPayLaterInstallment status](a2, "status", a3, a4) == (id)1;
}

int64_t sub_10000FA14(id a1, PKPayLaterInstallment *a2, PKPayLaterInstallment *a3)
{
  id v4 = a3;
  id v5 = (void *)objc_claimAutoreleasedReturnValue(-[PKPayLaterInstallment dueDate](a2, "dueDate"));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(-[PKPayLaterInstallment dueDate](v4, "dueDate"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_10000FD10(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [v2 scheduledNotificationActivitiesForPassUniqueIdentifier:*(void *)(a1 + 40) ofType:54]);

  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v4 = v3;
  id v5 = [v4 countByEnumeratingWithState:&v26 objects:v32 count:16];
  if (v5)
  {
    id v8 = v5;
    uint64_t v9 = *(void *)v27;
    *(void *)&__int128 v7 = 138412290LL;
    __int128 v25 = v7;
    do
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v27 != v9) {
          objc_enumerationMutation(v4);
        }
        id v11 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)i);
        uint64_t v12 = objc_opt_class(&OBJC_CLASS___PDAccountFinancingPlanPastDueNotification, v6);
        if ((objc_opt_isKindOfClass(v11, v12) & 1) != 0)
        {
          id v13 = v11;
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) planIdentifier]);
          uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v13 planIdentifier]);
          id v16 = v14;
          id v17 = v15;
          if (v16 != v17)
          {
            id v18 = v17;
            if (v16 && v17)
            {
              unsigned __int8 v19 = [v16 isEqualToString:v17];

              if ((v19 & 1) == 0) {
                goto LABEL_18;
              }
LABEL_13:
              uint64_t Object = PKLogFacilityTypeGetObject(14LL);
              id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = v25;
                id v31 = v13;
                _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Removing future scheduled financing plan past due notification: %@",  buf,  0xCu);
              }

              id v16 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) userNotificationManager]);
              [v16 removeUserNotification:v13];
            }

            else
            {
            }

LABEL_18:
            continue;
          }

          goto LABEL_13;
        }
      }

      id v8 = [v4 countByEnumeratingWithState:&v26 objects:v32 count:16];
    }

    while (v8);
  }

  for (uint64_t j = 0LL; j != 17; ++j)
  {
    char v23 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userNotificationManager", v25, (void)v26));
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue( +[PDAccountFinancingPlanPastDueNotification notificationIdentifierForFinancingPlan:daysPastDueEnum:]( &OBJC_CLASS___PDAccountFinancingPlanPastDueNotification,  "notificationIdentifierForFinancingPlan:daysPastDueEnum:",  *(void *)(a1 + 48),  j));
    [v23 removeUserNotificationWithIdentifier:v24];
  }
}

id sub_100010D20(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a2 disputes]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "pk_arrayByApplyingBlock:", &stru_100639928));
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v3));

  return v4;
}

id sub_100010D8C(id a1, PKPayLaterFinancingPlanDispute *a2)
{
  return -[PKPayLaterFinancingPlanDispute identifier](a2, "identifier");
}

id sub_100010D94(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___PDAccountFinancingPlanDisputeUpdateNotification, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) != 0)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    __int128 v7 = (void *)objc_claimAutoreleasedReturnValue([v3 disputeIdentifier]);
    id v8 = [v6 containsObject:v7];
  }

  else
  {
    id v8 = 0LL;
  }

  return v8;
}

id sub_100010E14(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  id v4 = [v2 containsObject:v3];

  return v4;
}

int64_t sub_100010E58(id a1, PKPayLaterFinancingPlanDispute *a2, PKPayLaterFinancingPlanDispute *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[PKPayLaterFinancingPlanDispute lastUpdated](a2, "lastUpdated"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[PKPayLaterFinancingPlanDispute lastUpdated](v4, "lastUpdated"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

int64_t sub_100010EC4(id a1, PKPayLaterFinancingPlanDispute *a2, PKPayLaterFinancingPlanDispute *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[PKPayLaterFinancingPlanDispute lastUpdated](a2, "lastUpdated"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[PKPayLaterFinancingPlanDispute lastUpdated](v4, "lastUpdated"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

id sub_1000114E8(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 scheduleSummary]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 paymentsOfType:*(void *)(a1 + 32)]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pk_arrayByApplyingBlock:", &stru_100639A18));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v5));

  return v6;
}

id sub_10001156C(id a1, PKPayLaterPayment *a2)
{
  return -[PKPayLaterPayment paymentIdentifier](a2, "paymentIdentifier");
}

id sub_100011574(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 paymentIdentifier]);
  id v4 = [v2 containsObject:v3];

  return v4;
}

int64_t sub_1000115B8(id a1, PKPayLaterPayment *a2, PKPayLaterPayment *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[PKPayLaterPayment postedDate](a2, "postedDate"));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[PKPayLaterPayment postedDate](v4, "postedDate"));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_1000116E0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountManager]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100011778;
  v4[3] = &unk_100639AC8;
  uint64_t v3 = *(void *)(a1 + 40);
  v4[4] = *(void *)(a1 + 32);
  id v5 = *(id *)(a1 + 48);
  [v2 accountWithIdentifier:v3 completion:v4];
}

void sub_100011778(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_100011820;
  v7[3] = &unk_1006396B0;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_100011820(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_100011940(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100011A1C;
  v10[3] = &unk_100639B18;
  id v11 = v3;
  id v12 = *(id *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 32);
  id v13 = v5;
  uint64_t v14 = v6;
  id v7 = *(id *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  id v15 = v7;
  uint64_t v16 = v8;
  id v9 = v3;
  dispatch_async(v4, v10);
}

void sub_100011A1C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 && [v2 isActive])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      int v12 = 138412290;
      uint64_t v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v12, 0xCu);
    }

    uint64_t v6 = *(void **)(a1 + 48);
    uint64_t v7 = 2LL;
  }

  else
  {
    uint64_t v8 = PKLogFacilityTypeGetObject(14LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 64);
      int v12 = 138412290;
      uint64_t v13 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v12, 0xCu);
    }

    uint64_t v6 = *(void **)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 72);
  }

  [v6 setSuppressionBehavior:v7];
  [*(id *)(a1 + 48) setReissueBannerOnUpdate:0];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) userNotificationManager]);
  [v11 insertUserNotification:*(void *)(a1 + 48)];
}

BOOL sub_100011C4C(id a1, PKPayLaterFinancingPlanDispute *a2)
{
  return -[PKPayLaterFinancingPlanDispute isTerminal](a2, "isTerminal") ^ 1;
}

BOOL sub_100011C68(id a1, PKPayLaterFinancingPlanDispute *a2)
{
  return -[PKPayLaterFinancingPlanDispute isTerminal](a2, "isTerminal") ^ 1;
}

LABEL_13:
    goto LABEL_14;
  }

  uint64_t v10 = v9;
  if ([v6 feature] != (id)3)
  {
LABEL_14:
    uint64_t v13 = 0;
    goto LABEL_15;
  }

  if ((v8 & (v10 ^ 1 | v4) & 1) == 0)
  {
    unsigned __int8 v19 = PKLogFacilityTypeGetObject(14LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v23[0] = 67109632;
      v23[1] = v8;
      __int16 v24 = 1024;
      __int128 v25 = v10;
      __int128 v26 = 1024;
      __int128 v27 = v4;
      uint64_t v16 = "Skipping pay later notifications for account with supportsShowNotifications: %d, blockNotifications: %d, ove"
            "rrideBlockNotifications: %d";
      id v17 = v15;
      id v18 = 20;
      goto LABEL_12;
    }

    goto LABEL_13;
  }

  if (!v7)
  {
    id v21 = PKLogFacilityTypeGetObject(14LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    LOWORD(v23[0]) = 0;
    uint64_t v16 = "Skipping pay later notifications for because no associatedPassUniqueID defined on the pay later account.";
    goto LABEL_9;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue(-[PDAccountNotificationController databaseManager](self, "databaseManager"));
  int v12 = [v11 passExistsWithUniqueID:v7];

  if ((v12 & 1) == 0)
  {
    uint64_t v22 = PKLogFacilityTypeGetObject(14LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_13;
    }
    LOWORD(v23[0]) = 0;
    uint64_t v16 = "Skipping pay later notifications since the pass doesn't exist on device.";
    goto LABEL_9;
  }

  uint64_t v13 = 1;
LABEL_15:

  return v13;
}

  if ((a2 & 2) != 0)
  {
LABEL_16:
    int v12 = atomic_load((unsigned __int8 *)(a1 + 9));
    if (v12 == 1)
    {
      uint64_t v13 = -[objc_class hasStashedValuesOnDisk](off_1007037A8(), "hasStashedValuesOnDisk") ^ 1;
    }

    else
    {
      uint64_t v14 = PKLogFacilityTypeGetObject(0LL);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Skipping icloud restore check as keybag is still locked",  buf,  2u);
      }

      uint64_t v13 = 0;
    }

    uint64_t v16 = (unsigned __int8 *)(a1 + 10);
    do
    {
      if (__ldaxr(v16))
      {
        __clrex();
        goto LABEL_28;
      }
    }

    while (__stlxr(v13, v16));
    id v18 = PKLogFacilityTypeGetObject(0LL);
    unsigned __int8 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v223 = v13;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Updated icloud restore state : %d", buf, 8u);
    }
  }
}
}
}

    if (v4 == (id)++v7)
    {
      id v4 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
      if (v4) {
        goto LABEL_3;
      }
      goto LABEL_15;
    }
  }

  uint64_t v1 = v19;
LABEL_17:
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  __int128 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
    *(_DWORD *)buf = 138412290;
    int v39 = v27;
    _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Revoking share %@ to allow for new provisioning.",  buf,  0xCu);
  }

  __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([v8 subcredentialIdentifier]);
  [*(id *)(*(void *)(v1 + 32) + 8) userDidTerminatePendingShareActivationForShare:v8];

  if (v28)
  {
    __int128 v29 = *(void **)(*(void *)(v1 + 32) + 56LL);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_1000CB324;
    v32[3] = &unk_10063B3A0;
    uint64_t v33 = *(id *)(v1 + 48);
    [v29 revokeSubcredentialForIdentifier:v28 withCompletion:v32];

    goto LABEL_22;
  }
}

  objc_destroyWeak(&location);
}

  uint64_t v13 = *(void *)(a1 + 40);
  if (v13) {
    (*(void (**)(void))(v13 + 16))();
  }
}

    self->_hasQueriedAnyCreditAccountIsClosed = 1;
  }

  return self->_anyCreditAccountIsClosed;
}

    self->_hasQueriedAnyCreditAccountIsRemoved = 1;
  }

  return self->_anyCreditAccountIsRemoved;
}

      self->_hasQueriedFamilyCircleCurrentUserAge = 1;
      id v9 = [v5 age];
      if (!v9)
      {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 dateOfBirth]);
        uint64_t Object = PKLogFacilityTypeGetObject(16LL);
        int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        uint64_t v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
        if (v10)
        {
          if (v13)
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v22 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "The current users age is zero. Trying to figure out age from date of birth %@",  buf,  0xCu);
          }

          int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
          id v15 = (void *)objc_claimAutoreleasedReturnValue( -[os_log_s components:fromDate:toDate:options:]( v12,  "components:fromDate:toDate:options:",  4LL,  v10,  v14,  0LL));
          id v9 = [v15 year];
        }

        else
        {
          if (v13)
          {
            *(_WORD *)buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "The current users age is zero and there is no date of birth defined",  buf,  2u);
          }

          id v9 = 0LL;
        }
      }

      self->_familyCircleCurrentUserAge = (int64_t)v9;
    }
  }

  return self->_familyCircleCurrentUserAge;
}

  if (-[NSMutableArray count](v23, "count"))
  {
    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication predicateForPaymentMethodTypes:]( &OBJC_CLASS___PaymentApplication,  "predicateForPaymentMethodTypes:",  v23));
    [v16 addObject:v24];
  }

  __int128 v25 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteCompoundPredicate predicateMatchingAllPredicates:]( &OBJC_CLASS___SQLiteCompoundPredicate,  "predicateMatchingAllPredicates:",  v16));
  __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteEntity anyInDatabase:predicate:]( &OBJC_CLASS___PaymentApplication,  "anyInDatabase:predicate:",  self->_database,  v25));
  __int128 v27 = v26 != 0LL;

  return v27;
}
    }

    id v17 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%u",  arc4random_uniform(0x2706u) + 1);
    id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
    -[PKPaymentApplication setDPANSuffix:](v7, "setDPANSuffix:", v18);
    -[PKPaymentApplication setSupportsInAppPayment:](v7, "setSupportsInAppPayment:", 1LL);
    -[PKPaymentApplication setSupportsContactlessPayment:](v7, "setSupportsContactlessPayment:", 1LL);
    unsigned __int8 v19 = PDGenerateRandomDeviceIdentifier(-[PKPaymentApplication setState:](v7, "setState:", 1LL));
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
    -[PKPaymentApplication setDPANIdentifier:](v7, "setDPANIdentifier:", v20);

    uint64_t v22 = PDGenerateRandomDeviceIdentifier(v21);
    char v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    -[PKPaymentApplication setApplicationIdentifier:](v7, "setApplicationIdentifier:", v23);

    __int16 v24 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
    -[PKPaymentApplication setSecureElementIdentifier:](v7, "setSecureElementIdentifier:", v24);

    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v7));
    [v4 setPaymentApplications:v25];
  }
}
}
}

    __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _cannotPerformActionErrorWithFailureReason:v21]);
    ((void (*)(void *, void, void, void *))v9[2])(v9, 0LL, 0LL, v25);

    goto LABEL_14;
  }

  uint64_t v10 = *(void **)(a1 + 48);
  if (!v10)
  {
    id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot decline an invalid invitation with a nil recipientHandle."));
    __int16 v24 = PKLogFacilityTypeGetObject(9LL);
    char v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v41 = v21;
      goto LABEL_12;
    }

    goto LABEL_13;
  }

  __int128 v26 = v4;
  id v11 = PKLogFacilityTypeGetObject(9LL);
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    __int128 v41 = v10;
    __int128 v42 = 2112;
    __int128 v43 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Attempting to decline invitation for %@ in %@",  buf,  0x16u);
  }

  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 64);
  id v15 = *(void *)(a1 + 80);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  v28[2] = sub_1001969B4;
  v28[3] = &unk_100648B50;
  uint64_t v16 = *(void **)(a1 + 32);
  __int128 v29 = *(id *)(a1 + 40);
  id v35 = v9;
  id v17 = *(id *)(a1 + 48);
  id v18 = *(void *)(a1 + 32);
  id v30 = v17;
  id v31 = v18;
  id v32 = v5;
  uint64_t v33 = *(id *)(a1 + 56);
  unsigned __int8 v19 = *(id *)(a1 + 64);
  uint64_t v20 = *(void *)(a1 + 80);
  uint64_t v34 = v19;
  char v36 = v20;
  [v16 _zoneWideShareForCloudStoreZone:v32 createIfNotExists:1 operationGroupName:v13 operationGroupNameSuffix:v14 qualityOfService:v15 completion:v28];

  id v21 = v29;
  id v4 = v26;
LABEL_14:
}

  replyQueue = self->_replyQueue;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1001AF3CC;
  v13[3] = &unk_100645D90;
  uint64_t v14 = v4;
  id v15 = (char)v7;
  int v12 = v4;
  dispatch_async((dispatch_queue_t)replyQueue, v13);
}

  return v8;
}

  return v7;
}

    return;
  }

  if (!self->_locationManager)
  {
    uint64_t v6 = objc_alloc(&OBJC_CLASS___CLLocationManager);
    uint64_t v7 = PKPassRelevancyBundle();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 bundlePath]);
    uint64_t v10 = PDDefaultQueue();
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    int v12 = -[CLLocationManager initWithEffectiveBundlePath:delegate:onQueue:]( v6,  "initWithEffectiveBundlePath:delegate:onQueue:",  v9,  self,  v11);
    locationManager = self->_locationManager;
    self->_locationManager = v12;

    -[CLLocationManager setDesiredAccuracy:](self->_locationManager, "setDesiredAccuracy:", 500.0);
  }

  uint64_t v14 = PKLogFacilityTypeGetObject(12LL);
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: started monitoring location",  buf,  2u);
  }

  uint64_t v16 = (NSDate *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  lastCheckDate = self->_lastCheckDate;
  self->_lastCheckDate = v16;

  -[CLLocationManager setDelegate:](self->_locationManager, "setDelegate:", self);
  -[CLLocationManager startUpdatingLocation](self->_locationManager, "startUpdatingLocation");
  self->_monitoringLocation = 1;
  id v18 = (OS_os_transaction *)PDOSTransactionCreate("PDTransitNotificationService.location_monitor");
  locationMonitorTransaction = self->_locationMonitorTransaction;
  self->_locationMonitorTransaction = v18;

  uint64_t v20 = PDDefaultQueue();
  id v21 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v20);
  uint64_t v22 = (OS_dispatch_source *)dispatch_source_create( (dispatch_source_type_t)&_dispatch_source_type_timer,  0LL,  0LL,  v21);
  locationTimer = self->_locationTimer;
  self->_locationTimer = v22;

  __int16 v24 = self->_locationTimer;
  __int128 v25 = dispatch_time(0LL, 30000000000LL);
  dispatch_source_set_timer((dispatch_source_t)v24, v25, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  __int128 v26 = self->_locationTimer;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472LL;
  handler[2] = sub_1002EDB74;
  handler[3] = &unk_100639300;
  handler[4] = self;
  dispatch_source_set_event_handler((dispatch_source_t)v26, handler);
  dispatch_resume((dispatch_object_t)self->_locationTimer);
}
}

  return v12;
}

    id result = sub_10043074C(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

void sub_100012138(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [v5 setOrder:a3];
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[PaymentTransactionAward insertPaymentTransactionAward:forPaymentTransactionPID:inDatabase:]( &OBJC_CLASS___PaymentTransactionAward,  "insertPaymentTransactionAward:forPaymentTransactionPID:inDatabase:",  v5,  *(void *)(a1 + 48),  *(void *)(a1 + 32)));

  [*(id *)(a1 + 40) safelyAddObject:v6];
}

void sub_100012458(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  int v12 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionAward);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v12 withProperties:v6 values:a4];
  uint64_t v7 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a4 + 8 * (void)[v6 indexOfObject:@"amount"]);
  uint64_t v9 = *(void *)(a4 + 8 * (void)[v6 indexOfObject:@"currency"]);
  id v10 = [v6 indexOfObject:@"exponent"];

  id v11 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v7,  "_postProcessedAmountForDecimalAmount:currency:exponent:",  v8,  v9,  objc_msgSend(*(id *)(a4 + 8 * (void)v10), "integerValue")));
  -[PKPaymentTransactionAward setAmount:](v12, "setAmount:", v11);

  [*(id *)(a1 + 40) safelyAddObject:v12];
}

void sub_10001281C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v11 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionAward);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v11 withProperties:v6 values:a4];
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 48),  "_postProcessedAmountForDecimalAmount:currency:exponent:",  *(void *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"amount")),  *(void *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"currency")),  objc_msgSend( *(id *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"exponent")),  "integerValue")));
  -[PKPaymentTransactionAward setAmount:](v11, "setAmount:", v7);

  id v8 = [v6 count];
  id v9 = *(id *)(a4 + 8LL * (void)v8 - 8);
  id v10 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v9]);
  if (!v10)
  {
    id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    [*(id *)(a1 + 40) setObject:v10 forKey:v9];
  }

  -[NSMutableArray addObject:](v10, "addObject:", v11);
}

void sub_100012FDC(id a1, PKPaymentTransactionAward *a2, id a3)
{
}

void sub_100012FE4(id a1, PKPaymentTransactionAward *a2, id a3)
{
}

void sub_100012FEC(id a1, PKPaymentTransactionAward *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionAward setOrder:](v4, "setOrder:", [a3 integerValue]);
}

void sub_100013030(id a1, PKPaymentTransactionAward *a2, id a3)
{
}

void sub_100013038(id a1, PKPaymentTransactionAward *a2, id a3)
{
}

void sub_100013040(id a1, PKPaymentTransactionAward *a2, id a3)
{
}

void sub_100013048(id a1, PKPaymentTransactionAward *a2, id a3)
{
}

void sub_100013050(id a1, PKPaymentTransactionAward *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionAward setHasDeepLink:](v4, "setHasDeepLink:", [a3 BOOLValue]);
}

void sub_100013094(id a1, PKPaymentTransactionAward *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionAward setClaimExpired:](v4, "setClaimExpired:", [a3 BOOLValue]);
}

void sub_1000130D8(id a1, PKPaymentTransactionAward *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionAward setRedeemExpired:](v4, "setRedeemExpired:", [a3 BOOLValue]);
}

void sub_10001311C(id a1, PKPaymentTransactionAward *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentTransactionAward setClaimExpiryDate:](v4, "setClaimExpiryDate:", v5);
}

void sub_100013168(id a1, PKPaymentTransactionAward *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPaymentTransactionAward setRedeemExpiryDate:](v4, "setRedeemExpiryDate:", v5);
}

void sub_100013724(uint64_t a1, uint64_t a2)
{
  id v4 = objc_alloc(&OBJC_CLASS___AccountHold);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  id v8 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[AccountHold hold](v8, "hold"));
  [v6 addObject:v7];
}

void sub_100013A20(id a1, PKAccountHold *a2, id a3)
{
}

void sub_100013A28(id a1, PKAccountHold *a2, id a3)
{
  id v4 = a2;
  -[PKAccountHold setType:](v4, "setType:", [a3 integerValue]);
}

void sub_100013A6C(id a1, PKAccountHold *a2, id a3)
{
  id v4 = a2;
  -[PKAccountHold setState:](v4, "setState:", [a3 integerValue]);
}

void sub_100013BDC(void *a1, uint64_t a2, uint64_t a3)
{
  id v12 = *(id *)(a3 + 8LL * a1[6]);
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(*(void *)(a3 + 8LL * a1[7]));
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber notANumber](&OBJC_CLASS___NSDecimalNumber, "notANumber"));
    unsigned __int8 v8 = [v6 isEqualToNumber:v7];

    if ((v8 & 1) == 0)
    {
      if (v12)
      {
        id v9 = (void *)a1[5];
        uint64_t v10 = PKCurrencyAmountMake(v6, v12);
        id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
        [v9 setCurrencyAmount:v11];
      }
    }
  }
}

id _ActionURLsForSQLValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary, v3);
  uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSString, v5);
  unsigned __int8 v8 = -[NSSet initWithObjects:](v2, "initWithObjects:", v4, v6, objc_opt_class(&OBJC_CLASS___NSURL, v7), 0LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v8,  v1,  0LL));

  return v9;
}

id _SQLValueForActionInfo(void *a1)
{
  id v1 = a1;
  if (!v1
    || (uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v1,  1LL,  0LL))) == 0LL)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v2;
}

id _SQLValueForActionIconURLs(void *a1)
{
  id v1 = a1;
  if (!v1
    || (uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v1,  1LL,  0LL))) == 0LL)
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }

  return v2;
}

id _ActionIconURLsForSQLValue(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc(&OBJC_CLASS___NSSet);
  uint64_t v4 = objc_opt_class(&OBJC_CLASS___NSDictionary, v3);
  uint64_t v6 = -[NSSet initWithObjects:](v2, "initWithObjects:", v4, objc_opt_class(&OBJC_CLASS___NSString, v5), 0LL);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v6,  v1,  0LL));

  return v7;
}

void sub_100014658(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___DiscoveryEngagementMessage),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[DiscoveryEngagementMessage engagementMessage](v5, "engagementMessage"));
  [v3 addObject:v4];
}

void sub_100014940(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v19 = a3;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  obuint64_t j = a2;
  id v4 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = 0LL;
    uint64_t v21 = 0LL;
    uint64_t v7 = 0LL;
    uint64_t v8 = *(void *)v24;
    do
    {
      id v9 = 0LL;
      uint64_t v20 = v6;
      uint64_t v10 = v19 + 8LL * (void)v6;
      do
      {
        if (*(void *)v24 != v8) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v23 + 1) + 8LL * (void)v9);
        id v12 = *(void **)(v10 + 8LL * (void)v9);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null", v19));
        if (v12 == v13) {
          uint64_t v14 = 0LL;
        }
        else {
          uint64_t v14 = *(void **)(v10 + 8LL * (void)v9);
        }
        id v15 = v14;

        if ([v11 isEqualToString:@"n"])
        {
          uint64_t v16 = (void *)v7;
          uint64_t v7 = _DateForSQLValue(v15);
        }

        else if ([v11 isEqualToString:@"o"])
        {
          uint64_t v16 = (void *)v21;
          uint64_t v21 = _DateForSQLValue(v15);
        }

        else
        {
          uint64_t v17 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v11]);
          uint64_t v16 = (void *)v17;
          if (v17) {
            (*(void (**)(uint64_t, void, id))(v17 + 16))(v17, *(void *)(a1 + 40), v15);
          }
        }

        id v9 = (char *)v9 + 1;
      }

      while (v5 != v9);
      id v5 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
      uint64_t v6 = (char *)v9 + (void)v20;
    }

    while (v5);
  }

  else
  {
    uint64_t v21 = 0LL;
    uint64_t v7 = 0LL;
  }

  if (v7 | v21)
  {
    id v18 = [[PKDiscoveryRelevantDateRange alloc] initWithStartDate:v7 endDate:v21];
    [*(id *)(a1 + 40) setRelevantDateRange:v18];
  }
}

void sub_100015308(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
}

void sub_100015310(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryEngagementMessage setVersion:](v4, "setVersion:", [a3 integerValue]);
}

void sub_100015354(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
}

void sub_10001535C(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_OSVersionRequirementRangeForSQLValue(a3);
  -[PKDiscoveryEngagementMessage setOsVersionRange:](v4, "setOsVersionRange:", v5);
}

void sub_1000153A8(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryEngagementMessage setPassQualifier:](v4, "setPassQualifier:", [a3 integerValue]);
}

void sub_1000153EC(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
}

void sub_1000153F4(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
}

void sub_1000153FC(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKDiscoveryEngagementMessage action](a2, "action"));
  [v5 setTitleKey:v4];
}

void sub_100015448(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKDiscoveryEngagementMessage action](a2, "action"));
  id v5 = [v4 integerValue];

  [v6 setType:v5];
}

void sub_1000154A4(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a2;
  id v5 = _ActionIconURLsForSQLValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKDiscoveryEngagementMessage setIconURLs:](v4, "setIconURLs:", v6);
}

void sub_1000154F4(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a3;
  id v7 = (id)objc_claimAutoreleasedReturnValue(-[PKDiscoveryEngagementMessage action](a2, "action"));
  id v5 = _ActionURLsForSQLValue(v4);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  [v7 setActionInfo:v6];
}

void sub_100015558(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryEngagementMessage setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_10001559C(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryEngagementMessage setViewCount:](v4, "setViewCount:", [a3 integerValue]);
}

void sub_1000155E0(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryEngagementMessage setReportIdentifierToAggd:]( v4,  "setReportIdentifierToAggd:",  [a3 BOOLValue]);
}

void sub_100015624(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryEngagementMessage setMaxViewCount:](v4, "setMaxViewCount:", [a3 integerValue]);
}

void sub_100015668(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a2;
  -[PKDiscoveryEngagementMessage setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1000156AC(id a1, PKDiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_HardwareVersionRangeForSQLValue(a3);
  -[PKDiscoveryEngagementMessage setHardwareVersionRange:](v4, "setHardwareVersionRange:", v5);
}

void sub_100015B98(id a1, DiscoveryEngagementMessage *a2, id a3)
{
  id v4 = a2;
  -[DiscoveryEngagementMessage setMessageOrder:](v4, "setMessageOrder:", [a3 integerValue]);
}

id sub_100015BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___DiscoveryEngagementMessage,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void PDServerRun()
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v1 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "passd launch: starting...", buf, 2u);
  }

  uint64_t v2 = &dword_100000018;
  do
  {
    *(_DWORD *)((char *)qword_100707788 + v2) = 0;
    v2 += 40LL;
  }

  while (v2 != 384);
  PDXPCEventStreamRegisterForLaunchEvents();
  PDNFSecureXPCEventListenerCreate();
  id v3 = PKPassLibraryMachServiceName;
  if (qword_100707788[0]) {
    goto LABEL_23;
  }
  id v4 = v3;
  id v5 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  v3);
  id v6 = (void *)qword_100707788[0];
  qword_100707788[0] = (uint64_t)v5;

  qword_100707790 = (uint64_t)sub_1000160D0;
  unk_100707798 = sub_10001613C;

  id v7 = PKPaymentServiceMachServiceName;
  if (qword_1007077B0) {
    goto LABEL_23;
  }
  uint64_t v8 = v7;
  id v9 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  v7);
  uint64_t v10 = (void *)qword_1007077B0;
  qword_1007077B0 = (uint64_t)v9;

  qword_1007077B8 = (uint64_t)sub_100016294;
  unk_1007077C0 = sub_1000162F4;

  id v11 = PKInAppPaymentServiceMachServiceName;
  if (qword_1007077D8) {
    goto LABEL_23;
  }
  id v12 = v11;
  uint64_t v13 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  v11);
  uint64_t v14 = (void *)qword_1007077D8;
  qword_1007077D8 = (uint64_t)v13;

  qword_1007077E0 = (uint64_t)sub_1000164F4;
  unk_1007077E8 = sub_100016560;

  id v15 = PKContinuityPaymentServiceMachName;
  if (qword_100707800) {
    goto LABEL_23;
  }
  uint64_t v16 = v15;
  uint64_t v17 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  v15);
  id v18 = (void *)qword_100707800;
  qword_100707800 = (uint64_t)v17;

  qword_100707808 = (uint64_t)sub_1000165D4;
  unk_100707810 = sub_100016634;

  id v19 = PKTrustedDeviceEnrollmentInfoProviderServiceName;
  if (qword_100707828) {
    goto LABEL_23;
  }
  uint64_t v20 = v19;
  uint64_t v21 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  v19);
  uint64_t v22 = (void *)qword_100707828;
  qword_100707828 = (uint64_t)v21;

  qword_100707830 = (uint64_t)sub_100016640;
  unk_100707838 = sub_1000166A0;

  id v23 = PKPeerPaymentServiceMachServiceName;
  if (qword_100707850) {
    goto LABEL_23;
  }
  __int128 v24 = v23;
  __int128 v25 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  v23);
  __int128 v26 = (void *)qword_100707850;
  qword_100707850 = (uint64_t)v25;

  qword_100707858 = (uint64_t)sub_1000166AC;
  unk_100707860 = sub_10001670C;

  id v27 = PKCloudStoreServiceMachServiceName;
  if (qword_100707878) {
    goto LABEL_23;
  }
  __int128 v28 = v27;
  __int128 v29 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  v27);
  id v30 = (void *)qword_100707878;
  qword_100707878 = (uint64_t)v29;

  qword_100707880 = (uint64_t)sub_10001678C;
  unk_100707888 = sub_1000167EC;

  id v31 = PKDeviceRegistrationServiceMachServiceName;
  if (qword_1007078A0) {
    goto LABEL_23;
  }
  id v32 = v31;
  uint64_t v33 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  v31);
  uint64_t v34 = (void *)qword_1007078A0;
  qword_1007078A0 = (uint64_t)v33;

  qword_1007078A8 = (uint64_t)sub_100016848;
  unk_1007078B0 = sub_1000168A8;

  id v35 = PKAccountServiceMachServiceName;
  if (qword_1007078C8)
  {
LABEL_23:
    __break(1u);
  }

  else
  {
    char v36 = v35;
    char v37 = -[NSXPCListener initWithMachServiceName:]( objc_alloc(&OBJC_CLASS___NSXPCListener),  "initWithMachServiceName:",  v35);
    v38 = (void *)qword_1007078C8;
    qword_1007078C8 = (uint64_t)v37;

    qword_1007078D0 = (uint64_t)sub_1000168B4;
    unk_1007078D8 = sub_100016914;

    int v39 = sub_100016970(objc_alloc(&OBJC_CLASS___PDServer));
    __int128 v40 = (void *)qword_100707778;
    qword_100707778 = (uint64_t)v39;

    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "passd launch: created PDServer.", v47, 2u);
    }

    for (uint64_t i = 0LL; i != 45; i += 5LL)
    {
      __int128 v42 = (void *)qword_100707788[i];
      if (v42)
      {
        uint64_t v43 = qword_100707778;
        id v44 = v42;
        [v44 setDelegate:v43];
        [v44 activate];
      }
    }

    PDNFSecureXPCRegisterSecureElementEventObserver((void *)qword_100707778);
    PDXPCEventStreamBeginEventDelivery();
    PDNFSecureXPCEventListenerActivate();
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, PKServiceListenerResumedNotification, 0LL, 0LL, 0);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "passd launch: finished.", v46, 2u);
    }
  }

PDPassLibrary *sub_1000160D0(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  id v5 = -[PDPassLibrary initWithConnection:server:]( objc_alloc(&OBJC_CLASS___PDPassLibrary),  "initWithConnection:server:",  v3,  v4);

  -[PDPassLibrary setDelegate:](v5, "setDelegate:", v4);
  return v5;
}

void sub_10001613C(void *a1, void *a2)
{
  uint64_t v3 = a1[9];
  id v6 = a2;
  id v4 = a1;
  [v6 setSecureElement:v3];
  [v6 setExpressPassManager:v4[39]];
  [v6 setCardFileManager:v4[4]];
  [v6 setDatabaseManager:v4[6]];
  [v6 setUserNotificationManager:v4[7]];
  [v6 setWebServicesCoordinator:v4[34]];
  [v6 setPaymentWebServicesCoordinator:v4[12]];
  [v6 setUsageNotificationServer:v4[36]];
  [v6 setIdsManager:v4[37]];
  [v6 setSpotlightIndexer:v4[41]];
  [v6 setAccountManager:v4[16]];
  [v6 setDefaultPassManager:v4[42]];
  [v6 setExpressUpgradeController:v4[46]];
  [v6 setSubcredentialManager:v4[22]];
  [v6 setCarKeyRequirementsChecker:v4[24]];
  [v6 setIssuerBindingManager:v4[64]];
  [v6 setPassLiveRenderManager:v4[66]];
  [v6 setDynamicStateManager:v4[65]];
  [v6 setPushProvisioningManager:v4[26]];
  [v6 setIsoManager:v4[25]];
  [v6 setAuxiliaryCapabilityManager:v4[29]];
  [v6 setDeviceRegistrationServiceCoordinator:v4[32]];
  uint64_t v5 = v4[67];

  [v6 setProvisioningRequirementsChecker:v5];
}

PDPaymentService *sub_100016294(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = -[PDPaymentService initWithConnection:server:]( objc_alloc(&OBJC_CLASS___PDPaymentService),  "initWithConnection:server:",  v3,  v4);

  return v5;
}

void sub_1000162F4(void *a1, void *a2)
{
  uint64_t v3 = a1[9];
  id v6 = a2;
  id v4 = a1;
  [v6 setSecureElement:v3];
  [v6 setExpressPassManager:v4[39]];
  [v6 setDatabaseManager:v4[6]];
  [v6 setPeerPaymentWebServicesCoordinator:v4[13]];
  [v6 setPaymentTransactionProcessor:v4[10]];
  [v6 setPaymentWebServiceCoordinator:v4[12]];
  [v6 setNotificationServiceCoordinator:v4[11]];
  [v6 setCloudStoreNotificationCoordinator:v4[31]];
  [v6 setUserNotificationManager:v4[7]];
  [v6 setTransitStateManager:v4[40]];
  [v6 setDefaultPassManager:v4[42]];
  [v6 setPushNotificationManager:v4[8]];
  [v6 setDevicePasscodeManager:v4[43]];
  [v6 setApplyManager:v4[15]];
  [v6 setAccountManager:v4[16]];
  [v6 setFamilyMemberManager:v4[51]];
  [v6 setTapToRadarDelegate:v4];
  [v6 setPaymentOffersManager:v4[21]];
  [v6 setSubcredentialManager:v4[22]];
  [v6 setNFCPairingManager:v4[23]];
  [v6 setCardFileManager:v4[4]];
  [v6 setPassTileManager:v4[53]];
  [v6 setMapsBrandAndMerchantUpdater:v4[48]];
  [v6 setPushProvisioningManager:v4[26]];
  [v6 setSharingManager:v4[56]];
  [v6 setPendingProvisioningManager:v4[57]];
  [v6 setIssuerBindingManager:v4[64]];
  [v6 setBarcodeCredentialManager:v4[27]];
  [v6 setTransactionAuthenticationManager:v4[28]];
  [v6 setAuxiliaryCapabilityManager:v4[29]];
  [v6 setIso18013Manager:v4[25]];
  [v6 setTransactionReceiptFileManager:v4[50]];
  [v6 setIdsSharingManager:v4[38]];
  [v6 setApplicationMessageManager:v4[62]];
  [v6 setPaymentUserCommunicationManager:v4[63]];
  [v6 setAuxiliaryPassInformationManager:v4[58]];
  uint64_t v5 = v4[61];

  [v6 setPassKitEventPublisher:v5];
}

PDInAppPaymentService *sub_1000164F4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = -[PDInAppPaymentService initWithConnection:server:]( objc_alloc(&OBJC_CLASS___PDInAppPaymentService),  "initWithConnection:server:",  v3,  v4);

  -[PDInAppPaymentService setDelegate:](v5, "setDelegate:", v4);
  return v5;
}

void sub_100016560(void *a1, void *a2)
{
  uint64_t v3 = a1[12];
  id v6 = a2;
  id v4 = a1;
  [v6 setPaymentWebServiceCoordinator:v3];
  [v6 setIdsManager:v4[37]];
  [v6 setDatabaseManager:v4[6]];
  uint64_t v5 = v4[9];

  [v6 setSecureElement:v5];
}

PDContinuityPaymentService *sub_1000165D4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = -[PDContinuityPaymentService initWithConnection:server:]( objc_alloc(&OBJC_CLASS___PDContinuityPaymentService),  "initWithConnection:server:",  v3,  v4);

  return v5;
}

id sub_100016634(uint64_t a1, void *a2)
{
  return [a2 setIdsManager:*(void *)(a1 + 296)];
}

PDTrustedDeviceEnrollmentInfoProvider *sub_100016640(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = -[PDTrustedDeviceEnrollmentInfoProvider initWithConnection:server:]( objc_alloc(&OBJC_CLASS___PDTrustedDeviceEnrollmentInfoProvider),  "initWithConnection:server:",  v3,  v4);

  return v5;
}

id sub_1000166A0(uint64_t a1, void *a2)
{
  return [a2 setPaymentWebServiceCoordinator:*(void *)(a1 + 96)];
}

PDPeerPaymentService *sub_1000166AC(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = -[PDPeerPaymentService initWithConnection:server:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentService),  "initWithConnection:server:",  v3,  v4);

  return v5;
}

void sub_10001670C(void *a1, void *a2)
{
  uint64_t v3 = a1[14];
  id v6 = a2;
  id v4 = a1;
  [v6 setPeerPaymentAccountManager:v3];
  [v6 setPeerPaymentWebServiceCoordinator:v4[13]];
  [v6 setDatabaseManager:v4[6]];
  [v6 setUserNotificationManager:v4[7]];
  uint64_t v5 = v4[38];

  [v6 setIdsSharingManager:v5];
}

PDCloudStoreService *sub_10001678C(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = -[PDCloudStoreService initWithConnection:server:]( objc_alloc(&OBJC_CLASS___PDCloudStoreService),  "initWithConnection:server:",  v3,  v4);

  return v5;
}

void sub_1000167EC(void *a1, void *a2)
{
  uint64_t v3 = a1[31];
  id v6 = a2;
  id v4 = a1;
  [v6 setCloudStoreNotificationCoordinator:v3];
  uint64_t v5 = v4[30];

  [v6 setTransactionSourceController:v5];
}

PDDeviceRegistrationService *sub_100016848(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = -[PDDeviceRegistrationService initWithConnection:server:]( objc_alloc(&OBJC_CLASS___PDDeviceRegistrationService),  "initWithConnection:server:",  v3,  v4);

  return v5;
}

id sub_1000168A8(uint64_t a1, void *a2)
{
  return [a2 setDeviceRegistrationServiceCoordinator:*(void *)(a1 + 256)];
}

PDAccountService *sub_1000168B4(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = a1;
  uint64_t v5 = -[PDAccountService initWithConnection:server:]( objc_alloc(&OBJC_CLASS___PDAccountService),  "initWithConnection:server:",  v3,  v4);

  return v5;
}

void sub_100016914(void *a1, void *a2)
{
  uint64_t v3 = a1[16];
  id v6 = a2;
  id v4 = a1;
  [v6 setAccountManager:v3];
  uint64_t v5 = v4[59];

  [v6 setStatementMetadataProcessor:v5];
}

void *sub_100016970(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  v12.receiver = a1;
  v12.super_class = (Class)&OBJC_CLASS___PDServer;
  id v1 = objc_msgSendSuper2(&v12, "init");
  uint64_t v2 = v1;
  if (v1)
  {
    *((_DWORD *)v1 + 4) = 0;
    *((_DWORD *)v1 + 140) = 0;
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    id v4 = (void *)v2[60];
    v2[60] = v3;

    id v5 = sub_100016A7C(objc_alloc(&OBJC_CLASS___PDServerUnprotectedManagers));
    id v6 = (void *)v2[72];
    v2[72] = v5;

    sub_100016BF8((uint64_t)v2, 7);
    id v7 = (void *)v2[72];
    if (v7) {
      id v7 = (void *)v7[1];
    }
    uint64_t v8 = v7;
    sub_10015BA4C((uint64_t)v8, v2);
    sub_10015B78C((uint64_t)v8);
    id v9 = (void *)v2[72];
    if (v9) {
      id v9 = (void *)v9[3];
    }
    uint64_t v10 = v9;
    [v10 registerConsumer:v2];
    [v10 start];
  }

  return v2;
}

id sub_100016A7C(void *a1)
{
  if (!a1) {
    return 0LL;
  }
  v13.receiver = a1;
  v13.super_class = (Class)&OBJC_CLASS___PDServerUnprotectedManagers;
  id v1 = objc_msgSendSuper2(&v13, "init");
  if (v1)
  {
    uint64_t v2 = sub_10015B6CC(objc_alloc(&OBJC_CLASS___PDFieldDetectorManager));
    uint64_t v3 = (void *)*((void *)v1 + 1);
    *((void *)v1 + 1) = v2;

    id v4 = objc_alloc_init(&OBJC_CLASS___PDAssertionManager);
    id v5 = (void *)*((void *)v1 + 2);
    *((void *)v1 + 2) = v4;

    id v6 = objc_alloc_init(&OBJC_CLASS___PDNotificationStreamManager);
    id v7 = (void *)*((void *)v1 + 3);
    *((void *)v1 + 3) = v6;

    uint64_t v8 = sub_1001AD598( (id *)objc_alloc(&OBJC_CLASS___PDRemoteInterfacePresenter),  *((void **)v1 + 1),  *((void **)v1 + 3),  *((void **)v1 + 2));
    id v9 = (void *)*((void *)v1 + 4);
    *((void *)v1 + 4) = v8;

    uint64_t v10 = objc_claimAutoreleasedReturnValue(+[PKMobileAssetManager sharedInstance](&OBJC_CLASS___PKMobileAssetManager, "sharedInstance"));
    id v11 = (void *)*((void *)v1 + 5);
    *((void *)v1 + 5) = v10;
  }

  return v1;
}

uint64_t sub_100016B5C(uint64_t result)
{
  if (result) {
    return *(void *)(result + 8);
  }
  return result;
}

uint64_t sub_100016B68(uint64_t result)
{
  if (result) {
    return *(void *)(result + 16);
  }
  return result;
}

uint64_t sub_100016B74(uint64_t result)
{
  if (result) {
    return *(void *)(result + 24);
  }
  return result;
}

uint64_t sub_100016B80(uint64_t result)
{
  if (result) {
    return *(void *)(result + 32);
  }
  return result;
}

void sub_100016BF8(uint64_t a1, char a2)
{
  if (!a1) {
    return;
  }
  int v3 = atomic_load((unsigned __int8 *)(a1 + 8));
  if (v3 == 1)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "passd initialization: Previously initialized ignoring request",  buf,  2u);
    }

    return;
  }

  if ((a2 & 1) != 0)
  {
    int v7 = PDProtectedDataAvailable();
    uint64_t v8 = (unsigned __int8 *)(a1 + 9);
    while (!__ldaxr(v8))
    {
      if (!__stlxr(v7, v8))
      {
        uint64_t v10 = PKLogFacilityTypeGetObject(0LL);
        id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          BOOL v223 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Updated file protection state : %d",  buf,  8u);
        }

        goto LABEL_13;
      }
    }

    __clrex();
    if ((a2 & 2) == 0) {
      goto LABEL_28;
    }
    goto LABEL_16;
  }

LABEL_28:
  int v20 = atomic_load((unsigned __int8 *)(a1 + 9));
  int v21 = atomic_load((unsigned __int8 *)(a1 + 10));
  uint64_t v22 = PKLogFacilityTypeGetObject(0LL);
  id v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
  if (v20 == 1 && v21 == 1)
  {
    if (v24)
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "passd initialization: criteria satisfied",  buf,  2u);
    }

    __int128 v26 = *(void **)(a1 + 576);
    if (v26) {
      __int128 v26 = (void *)v26[1];
    }
    id v27 = v26;
    __int128 v28 = *(void **)(a1 + 576);
    if (v28) {
      __int128 v28 = (void *)v28[2];
    }
    __int128 v29 = v28;
    id v30 = *(void **)(a1 + 576);
    if (v30) {
      id v30 = (void *)v30[3];
    }
    v220 = v30;
    id v31 = *(void **)(a1 + 576);
    if (v31) {
      id v31 = (void *)v31[4];
    }
    id v32 = v31;
    uint64_t v33 = _set_user_dir_suffix("com.apple.passd");
    uint64_t v34 = PKHomeDirectoryPath(v33);
    id v35 = (void *)objc_claimAutoreleasedReturnValue(v34);
    char v36 = (void *)objc_claimAutoreleasedReturnValue([v35 stringByAppendingPathComponent:PDDatabaseName]);
    uint64_t v37 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v36));

    v38 = (void *)objc_claimAutoreleasedReturnValue([v35 stringByAppendingPathComponent:@"UserNotifications.archive"]);
    uint64_t v39 = objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v38));

    _VerifyOrCreateDirectoryStructure();
    _VerifyOrUpdateDirectoryFileProtection(0);
    __int128 v40 = objc_alloc_init(&OBJC_CLASS___PKUsageNotificationServer);
    __int128 v41 = *(void **)(a1 + 288);
    *(void *)(a1 + 28_Block_object_dispose((const void *)(v1 - 184), 8) = v40;

    __int128 v42 = objc_alloc_init(&OBJC_CLASS___PDPushNotificationManager);
    uint64_t v43 = *(void **)(a1 + 64);
    *(void *)(a1 + 64) = v42;

    v219 = -[PKIDSService initWithServiceName:]( objc_alloc(&OBJC_CLASS___PKIDSService),  "initWithServiceName:",  @"com.apple.private.alloy.applepay.sharing");
    id v44 = -[PKSharingIDSManager initWithIDSService:]( objc_alloc(&OBJC_CLASS___PKSharingIDSManager),  "initWithIDSService:",  v219);
    __int128 v45 = *(void **)(a1 + 304);
    *(void *)(a1 + 304) = v44;

    [*(id *)(a1 + 304) addDelegate:a1];
    [*(id *)(a1 + 304) setDataSource:a1];
    __int128 v46 = -[PDCardFileManager initWithDelegate:cloudStoreCoordinatorDelegate:]( objc_alloc(&OBJC_CLASS___PDCardFileManager),  "initWithDelegate:cloudStoreCoordinatorDelegate:",  a1,  0LL);
    __int128 v47 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = v46;

    v207 = (void *)v37;
    __int128 v48 = -[PDDatabaseManager initWithURL:delegate:report:]( objc_alloc(&OBJC_CLASS___PDDatabaseManager),  "initWithURL:delegate:report:",  v37,  a1,  buf);
    __int128 v49 = *(void **)(a1 + 48);
    *(void *)(a1 + 4_Block_object_dispose((const void *)(v1 - 184), 8) = v48;

    int v214 = buf[0];
    if (buf[0])
    {
      if (buf[2])
      {
        if (buf[1]) {
          BOOL v50 = buf[3] == 0;
        }
        else {
          BOOL v50 = 1LL;
        }
      }

      else
      {
        BOOL v50 = 0LL;
      }

      *(_BYTE *)(a1 + 12) = v50;
    }

    else
    {
      *(_BYTE *)(a1 + 12) = 0;
      +[PDUbiquityManager removeLastEventIdentifier](&OBJC_CLASS___PDUbiquityManager, "removeLastEventIdentifier");
      BOOL v50 = 0LL;
    }

    uint64_t v51 = objc_claimAutoreleasedReturnValue(+[PKSecureElement sharedSecureElement](&OBJC_CLASS___PKSecureElement, "sharedSecureElement"));
    v52 = *(void **)(a1 + 72);
    *(void *)(a1 + 72) = v51;

    [*(id *)(a1 + 32) setSecureElement:*(void *)(a1 + 72)];
    v53 = -[PDCloudStoreNotificationCoordinator initWithPushNotificationManager:sharingIDSManger:databaseManager:]( objc_alloc(&OBJC_CLASS___PDCloudStoreNotificationCoordinator),  "initWithPushNotificationManager:sharingIDSManger:databaseManager:",  *(void *)(a1 + 64),  *(void *)(a1 + 304),  *(void *)(a1 + 48));
    v54 = *(void **)(a1 + 248);
    *(void *)(a1 + 24_Block_object_dispose((const void *)(v1 - 184), 8) = v53;

    [*(id *)(a1 + 32) setCloudStoreCoordinatorDelegate:*(void *)(a1 + 248)];
    v55 = sub_10030BB90((uint64_t)&OBJC_CLASS___PDApplicationMessageManager, *(void **)(a1 + 48), (void *)a1);
    v56 = *(void **)(a1 + 496);
    *(void *)(a1 + 496) = v55;

    v57 = objc_alloc_init(&OBJC_CLASS___PKPaymentHostEndpointRegistry);
    v58 = *(void **)(a1 + 264);
    *(void *)(a1 + 264) = v57;

    v59 = -[PDMapsBrandAndMerchantUpdater initWithDataSource:]( objc_alloc(&OBJC_CLASS___PDMapsBrandAndMerchantUpdater),  "initWithDataSource:",  *(void *)(a1 + 48));
    v60 = *(void **)(a1 + 384);
    *(void *)(a1 + 384) = v59;

    v61 = -[PDPayLaterMerchantProcessor initWithMapsBrandAndMerchantUpdater:databaseManager:]( objc_alloc(&OBJC_CLASS___PDPayLaterMerchantProcessor),  "initWithMapsBrandAndMerchantUpdater:databaseManager:",  *(void *)(a1 + 384),  *(void *)(a1 + 48));
    v62 = *(void **)(a1 + 392);
    *(void *)(a1 + 392) = v61;

    v63 = objc_alloc_init(&OBJC_CLASS___PKIDSManager);
    v64 = *(void **)(a1 + 296);
    *(void *)(a1 + 296) = v63;

    sub_1001ADBA8((uint64_t)v32, *(void **)(a1 + 48));
    v65 = sub_10014A128( (dispatch_queue_attr_s *)objc_alloc(&OBJC_CLASS___PDExpressPassManager),  *(void **)(a1 + 48),  v29,  *(void **)(a1 + 72),  v32,  v220,  0LL,  v50);
    v66 = *(void **)(a1 + 312);
    *(void *)(a1 + 312) = v65;

    sub_10014DBAC(*(void *)(a1 + 312), (void *)a1);
    v218 = v32;
    sub_1001ADC08((uint64_t)v32, *(void **)(a1 + 312));
    [*(id *)(a1 + 296) addDelegate:a1];
    [*(id *)(a1 + 296) setDataSource:a1];
    v67 = objc_alloc_init(&OBJC_CLASS___PDFamilyCircleManager);
    v68 = *(void **)(a1 + 408);
    *(void *)(a1 + 40_Block_object_dispose((const void *)(v1 - 184), 8) = v67;

    v69 = objc_alloc(&OBJC_CLASS___PDTransactionReceiptFileManager);
    uint64_t v70 = PKReceiptsDirectoryURL();
    v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
    v72 = -[PDTransactionReceiptFileManager initWithDirectoryURL:delegate:]( v69,  "initWithDirectoryURL:delegate:",  v71,  a1);
    v73 = *(void **)(a1 + 400);
    *(void *)(a1 + 400) = v72;

    v74 = -[PDPaymentWebServiceCoordinator initWithPushNotificationManager:databaseManager:passStore:assertionManager:cloudStoreCoordinator:idsManager:tapToRadarDelegate:receiptFileManager:expressPassManager:familyCircleManager:]( objc_alloc(&OBJC_CLASS___PDPaymentWebServiceCoordinator),  "initWithPushNotificationManager:databaseManager:passStore:assertionManager:cloudStoreCoordinator:idsManager: tapToRadarDelegate:receiptFileManager:expressPassManager:familyCircleManager:",  *(void *)(a1 + 64),  *(void *)(a1 + 48),  *(void *)(a1 + 32),  v29,  *(void *)(a1 + 248),  *(void *)(a1 + 296),  a1,  *(void *)(a1 + 400),  *(void *)(a1 + 312),  *(void *)(a1 + 408));
    v75 = *(void **)(a1 + 96);
    *(void *)(a1 + 96) = v74;

    [*(id *)(a1 + 96) setAssertionManager:v29];
    v76 = objc_alloc(&OBJC_CLASS___PDPaymentTransactionProcessor);
    id v77 = PDDefaultQueue();
    v78 = (void *)objc_claimAutoreleasedReturnValue(v77);
    v79 = -[PDPaymentTransactionProcessor initWithQueue:mapsBrandAndMerchantUpdater:paymentWebServiceCoordinator:]( v76,  "initWithQueue:mapsBrandAndMerchantUpdater:paymentWebServiceCoordinator:",  v78,  *(void *)(a1 + 384),  *(void *)(a1 + 96));
    v80 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = v79;

    [*(id *)(a1 + 80) setUsageNotificationServer:*(void *)(a1 + 288)];
    [*(id *)(a1 + 80) registerObserver:a1];
    [*(id *)(a1 + 80) setDataSource:a1];
    v81 = objc_alloc(&OBJC_CLASS___PDUserNotificationManager);
    uint64_t v82 = *(void *)(a1 + 48);
    v83 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) sharedWebService]);
    v215 = (void *)v39;
    v84 = -[PDUserNotificationManager initWithArchiveFileURL:databaseManager:assertionManager:paymentWebService:paymentWebServiceCoordinator:applicationMessageManager:delegate:]( v81,  "initWithArchiveFileURL:databaseManager:assertionManager:paymentWebService:paymentWebServiceCoordinator:appli cationMessageManager:delegate:",  v39,  v82,  v29,  v83,  *(void *)(a1 + 96),  *(void *)(a1 + 496),  a1);
    v85 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v84;

    [*(id *)(a1 + 96) setUserNotificationManager:*(void *)(a1 + 56)];
    v86 = -[PDPaymentUserCommunicationManager initWithNotificationManager:paymentWebServiceCoordinator:applicationMessageManager:]( objc_alloc(&OBJC_CLASS___PDPaymentUserCommunicationManager),  "initWithNotificationManager:paymentWebServiceCoordinator:applicationMessageManager:",  *(void *)(a1 + 56),  *(void *)(a1 + 96),  *(void *)(a1 + 496));
    v87 = *(void **)(a1 + 504);
    *(void *)(a1 + 504) = v86;

    v88 = -[PDTransitStateManager initWithDatabaseManager:expressPassManager:secureElement:transactionProcessor:paymentWebServiceCoordinator:delegate:]( objc_alloc(&OBJC_CLASS___PDTransitStateManager),  "initWithDatabaseManager:expressPassManager:secureElement:transactionProcessor:paymentWebServiceCoordinator:delegate:",  *(void *)(a1 + 48),  *(void *)(a1 + 312),  *(void *)(a1 + 72),  *(void *)(a1 + 80),  *(void *)(a1 + 96),  a1);
    v89 = *(void **)(a1 + 320);
    *(void *)(a1 + 320) = v88;

    v90 = -[PDISO18013Manager initWithSecureElement:userNotificationManager:]( objc_alloc(&OBJC_CLASS___PDISO18013Manager),  "initWithSecureElement:userNotificationManager:",  *(void *)(a1 + 72),  *(void *)(a1 + 56));
    v91 = *(void **)(a1 + 200);
    *(void *)(a1 + 200) = v90;

    v92 = objc_alloc(&OBJC_CLASS___PDPeerPaymentWebServiceCoordinator);
    uint64_t v93 = *(void *)(a1 + 64);
    v94 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) sharedWebService]);
    v95 = -[PDPeerPaymentWebServiceCoordinator initWithPushNotificationManager:paymentWebService:assertionManager:userNotificationManager:sharingIDSManager:familyCircleManager:dataSource:passStore:tapToRadarDelegate:]( v92,  "initWithPushNotificationManager:paymentWebService:assertionManager:userNotificationManager:sharingIDSManager :familyCircleManager:dataSource:passStore:tapToRadarDelegate:",  v93,  v94,  v29,  *(void *)(a1 + 56),  *(void *)(a1 + 304),  *(void *)(a1 + 408),  *(void *)(a1 + 48),  *(void *)(a1 + 32),  a1);
    v96 = *(void **)(a1 + 104);
    *(void *)(a1 + 104) = v95;

    [*(id *)(a1 + 104) registerObserver:a1];
    [*(id *)(a1 + 96) setPeerPaymentWebServiceCoordinator:*(void *)(a1 + 104)];
    [*(id *)(a1 + 96) setIsoManager:*(void *)(a1 + 200)];
    v97 = -[PDPeerPaymentAccountManager initWithDatabaseManager:cloudStoreNotificationCoordinator:transactionProcessor:]( objc_alloc(&OBJC_CLASS___PDPeerPaymentAccountManager),  "initWithDatabaseManager:cloudStoreNotificationCoordinator:transactionProcessor:",  *(void *)(a1 + 48),  *(void *)(a1 + 248),  *(void *)(a1 + 80));
    v98 = *(void **)(a1 + 112);
    *(void *)(a1 + 112) = v97;

    LOBYTE(v206) = v50;
    v99 = -[PDAccountManager initWithPushNotificationManager:paymentWebServiceCoordinator:databaseManager:userNotificationManager:payLaterMerchantProcessor:cloudStoreNotificationCoordinator:deviceEnvironmentStore:databaseRecreated:]( objc_alloc(&OBJC_CLASS___PDAccountManager),  "initWithPushNotificationManager:paymentWebServiceCoordinator:databaseManager:userNotificationManager:payLate rMerchantProcessor:cloudStoreNotificationCoordinator:deviceEnvironmentStore:databaseRecreated:",  *(void *)(a1 + 64),  *(void *)(a1 + 96),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 392),  *(void *)(a1 + 248),  *(void *)(a1 + 160),  v206);
    v100 = *(void **)(a1 + 128);
    *(void *)(a1 + 12_Block_object_dispose((const void *)(v1 - 184), 8) = v99;

    [*(id *)(a1 + 128) registerObserver:a1];
    [*(id *)(a1 + 96) setAccountManager:*(void *)(a1 + 128)];
    [*(id *)(a1 + 408) addObserver:*(void *)(a1 + 128)];
    v101 = -[PDPaymentOffersManager initWithPushNotificationManager:paymentWebServiceCoordinator:databaseManager:]( objc_alloc(&OBJC_CLASS___PDPaymentOffersManager),  "initWithPushNotificationManager:paymentWebServiceCoordinator:databaseManager:",  *(void *)(a1 + 64),  *(void *)(a1 + 96),  *(void *)(a1 + 48));
    v102 = *(void **)(a1 + 168);
    *(void *)(a1 + 16_Block_object_dispose((const void *)(v1 - 184), 8) = v101;

    v103 = -[PDAccountNotificationController initWithAccountManager:userNotificationManager:databaseManager:paymentWebServiceCoordinator:peerPaymentWebServiceCoordinator:familyMemberManager:]( objc_alloc(&OBJC_CLASS___PDAccountNotificationController),  "initWithAccountManager:userNotificationManager:databaseManager:paymentWebServiceCoordinator:peerPaymentWebS erviceCoordinator:familyMemberManager:",  *(void *)(a1 + 128),  *(void *)(a1 + 56),  *(void *)(a1 + 48),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 408));
    v104 = *(void **)(a1 + 136);
    *(void *)(a1 + 136) = v103;

    [*(id *)(a1 + 128) setAccountNotificationController:*(void *)(a1 + 136)];
    v105 = -[PDAccountAdStatusChangesObserver initWithAccountManager:]( objc_alloc(&OBJC_CLASS___PDAccountAdStatusChangesObserver),  "initWithAccountManager:",  *(void *)(a1 + 128));
    v106 = *(void **)(a1 + 144);
    *(void *)(a1 + 144) = v105;

    BOOL v213 = v50;
    v107 = -[PDApplyManager initWithPushNotificationManager:paymentWebServiceCoordinator:databaseManager:accountManager:databaseRecreated:]( objc_alloc(&OBJC_CLASS___PDApplyManager),  "initWithPushNotificationManager:paymentWebServiceCoordinator:databaseManager:accountManager:databaseRecreated:",  *(void *)(a1 + 64),  *(void *)(a1 + 96),  *(void *)(a1 + 48),  *(void *)(a1 + 128),  v50);
    v108 = *(void **)(a1 + 120);
    *(void *)(a1 + 120) = v107;

    [*(id *)(a1 + 96) setApplyManager:*(void *)(a1 + 120)];
    v212 = -[PDApplePayCloudStoreContainer initWithDataSource:delegate:transactionProcessor:accountManager:paymentWebServiceCoordinator:peerPaymentWebServiceCoordinator:familyCircleManager:spotlightIndexer:notificationStreamManager:]( objc_alloc(&OBJC_CLASS___PDApplePayCloudStoreContainer),  "initWithDataSource:delegate:transactionProcessor:accountManager:paymentWebServiceCoordinator:peerPaymentWeb ServiceCoordinator:familyCircleManager:spotlightIndexer:notificationStreamManager:",  *(void *)(a1 + 48),  a1,  *(void *)(a1 + 80),  *(void *)(a1 + 128),  *(void *)(a1 + 96),  *(void *)(a1 + 104),  *(void *)(a1 + 408),  *(void *)(a1 + 328),  v220);
    objc_msgSend(*(id *)(a1 + 248), "setApplePayContainer:");
    v211 = -[PDPassCloudStoreContainer initWithDataSource:]( objc_alloc(&OBJC_CLASS___PDPassCloudStoreContainer),  "initWithDataSource:",  *(void *)(a1 + 48));
    objc_msgSend(*(id *)(a1 + 248), "setPassContainer:");
    [*(id *)(a1 + 248) schedulePassSyncBackgroundActivity];
    [*(id *)(a1 + 248) schedulePassChangesBackgroundActivity];
    v109 = -[PDCarKeyRequirementsChecker initWithWebServiceCoordinator:databaseManager:]( objc_alloc(&OBJC_CLASS___PDCarKeyRequirementsChecker),  "initWithWebServiceCoordinator:databaseManager:",  *(void *)(a1 + 96),  *(void *)(a1 + 48));
    v110 = *(void **)(a1 + 192);
    *(void *)(a1 + 192) = v109;

    v111 = objc_alloc_init(&OBJC_CLASS___PKDAManager);
    v112 = -[PDAppletSubcredentialManager initWithDatabaseManager:cardFileManager:paymentWebServiceCoordinator:daManager:carKeyRequirementsChecker:secureElement:assertionManager:notificationManager:]( objc_alloc(&OBJC_CLASS___PDAppletSubcredentialManager),  "initWithDatabaseManager:cardFileManager:paymentWebServiceCoordinator:daManager:carKeyRequirementsChecker:se cureElement:assertionManager:notificationManager:",  *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(void *)(a1 + 96),  v111,  *(void *)(a1 + 192),  *(void *)(a1 + 72),  v29,  *(void *)(a1 + 56));
    v113 = *(void **)(a1 + 176);
    *(void *)(a1 + 176) = v112;

    [*(id *)(a1 + 176) registerObserver:a1];
    [*(id *)(a1 + 96) setCredentialManager:*(void *)(a1 + 176)];
    v210 = v111;
    v114 = -[PDNFCInitiatedPairingManager initWithFieldDetectorManager:daManager:carKeyRequirementsChecker:remoteInterfacePresenter:assertionManager:]( objc_alloc(&OBJC_CLASS___PDNFCInitiatedPairingManager),  "initWithFieldDetectorManager:daManager:carKeyRequirementsChecker:remoteInterfacePresenter:assertionManager:",  v27,  v111,  *(void *)(a1 + 192),  v218,  v29);
    v115 = *(void **)(a1 + 184);
    *(void *)(a1 + 184) = v114;

    sub_100151588(*(void *)(a1 + 312), *(void **)(a1 + 184));
    v116 = -[PDAccountStatementMetadataProcessor initWithDatabaseManager:accountManager:cloudStoreNotificationCoordinator:]( objc_alloc(&OBJC_CLASS___PDAccountStatementMetadataProcessor),  "initWithDatabaseManager:accountManager:cloudStoreNotificationCoordinator:",  *(void *)(a1 + 48),  *(void *)(a1 + 128),  *(void *)(a1 + 248));
    v117 = *(void **)(a1 + 472);
    *(void *)(a1 + 472) = v116;

    v118 = -[PDDeviceRegistrationServiceCoordinator initWithPaymentWebServiceCoordinator:peerPaymentWebServiceCoordinator:]( objc_alloc(&OBJC_CLASS___PDDeviceRegistrationServiceCoordinator),  "initWithPaymentWebServiceCoordinator:peerPaymentWebServiceCoordinator:",  *(void *)(a1 + 96),  *(void *)(a1 + 104));
    v119 = *(void **)(a1 + 256);
    *(void *)(a1 + 256) = v118;

    v120 = -[PDPushProvisioningManager initWithDataBaseManager:cardFileManager:userNotificationManager:paymentWebServiceCoordinator:familyCircleManager:secureElement:assertionManager:deviceRegistrationServiceCoordinator:notificationStreamManager:pendingProvisioningManager:]( objc_alloc(&OBJC_CLASS___PDPushProvisioningManager),  "initWithDataBaseManager:cardFileManager:userNotificationManager:paymentWebServiceCoordinator:familyCircleMa nager:secureElement:assertionManager:deviceRegistrationServiceCoordinator:notificationStreamManager:pending ProvisioningManager:",  *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(void *)(a1 + 56),  *(void *)(a1 + 96),  *(void *)(a1 + 408),  *(void *)(a1 + 72),  v29,  *(void *)(a1 + 256),  v220,  0LL);
    v121 = *(void **)(a1 + 208);
    *(void *)(a1 + 20_Block_object_dispose((const void *)(v1 - 184), 8) = v120;

    [*(id *)(a1 + 208) setCloudStoreCoordinator:*(void *)(a1 + 248)];
    [*(id *)(a1 + 96) setPushProvisioningManager:*(void *)(a1 + 208)];
    [*(id *)(a1 + 96) setDeviceRegistrationServiceCoordinator:*(void *)(a1 + 256)];
    [*(id *)(a1 + 48) setCloudStoreCoordinator:*(void *)(a1 + 248)];
    [*(id *)(a1 + 248) registerObserver:*(void *)(a1 + 104)];
    [*(id *)(a1 + 248) registerObserver:*(void *)(a1 + 128)];
    [*(id *)(a1 + 104) setCloudStoreNotificationCoordinator:*(void *)(a1 + 248)];
    [*(id *)(a1 + 104) setDeviceRegistrationCoordinator:*(void *)(a1 + 256)];
    v122 = -[PDNotificationServiceCoordinator initWithPushNotificationManager:databaseManager:userNotificationManager:paymentTransactionProcessor:paymentWebServiceCoordinator:]( objc_alloc(&OBJC_CLASS___PDNotificationServiceCoordinator),  "initWithPushNotificationManager:databaseManager:userNotificationManager:paymentTransactionProcessor:payment WebServiceCoordinator:",  *(void *)(a1 + 64),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 80),  *(void *)(a1 + 96));
    v123 = *(void **)(a1 + 88);
    *(void *)(a1 + 8_Block_object_dispose((const void *)(v1 - 184), 8) = v122;

    v124 = -[PDWebServicesCoordinator initWithPushNotificationManager:databaseManager:cardFileManager:]( objc_alloc(&OBJC_CLASS___PDWebServicesCoordinator),  "initWithPushNotificationManager:databaseManager:cardFileManager:",  *(void *)(a1 + 64),  *(void *)(a1 + 48),  *(void *)(a1 + 32));
    v125 = *(void **)(a1 + 272);
    *(void *)(a1 + 272) = v124;

    v126 = -[PDIssuerBindingManager initWithDatabaseManager:cardFileManager:notificationMananger:notificationStreamManager:webServiceCoordinator:paymentWebServiceCoordinator:secureElement:]( objc_alloc(&OBJC_CLASS___PDIssuerBindingManager),  "initWithDatabaseManager:cardFileManager:notificationMananger:notificationStreamManager:webServiceCoordinato r:paymentWebServiceCoordinator:secureElement:",  *(void *)(a1 + 48),  *(void *)(a1 + 32),  *(void *)(a1 + 56),  v220,  *(void *)(a1 + 272),  *(void *)(a1 + 96),  *(void *)(a1 + 72));
    v127 = *(void **)(a1 + 512);
    *(void *)(a1 + 512) = v126;

    [*(id *)(a1 + 512) registerObserver:a1];
    v128 = -[PDPassDynamicStateManager initWithDatabaseManager:]( objc_alloc(&OBJC_CLASS___PDPassDynamicStateManager),  "initWithDatabaseManager:",  *(void *)(a1 + 48));
    v129 = *(void **)(a1 + 520);
    *(void *)(a1 + 520) = v128;

    [*(id *)(a1 + 520) setObserver:a1];
    v130 = -[PDPassLiveRenderManager initWithDatabaseManager:dynamicStateManager:]( objc_alloc(&OBJC_CLASS___PDPassLiveRenderManager),  "initWithDatabaseManager:dynamicStateManager:",  *(void *)(a1 + 48),  *(void *)(a1 + 520));
    v131 = *(void **)(a1 + 528);
    *(void *)(a1 + 52_Block_object_dispose((const void *)(v1 - 184), 8) = v130;

    v132 = -[PDMapsMerchantProcessingService initWithDatabaseManager:transactionProcessor:webServiceCoordinator:]( objc_alloc(&OBJC_CLASS___PDMapsMerchantProcessingService),  "initWithDatabaseManager:transactionProcessor:webServiceCoordinator:",  *(void *)(a1 + 48),  *(void *)(a1 + 80),  *(void *)(a1 + 96));
    v133 = *(void **)(a1 + 376);
    *(void *)(a1 + 376) = v132;

    v217 = v27;
    v134 = -[PDDefaultPassManager initWithDatabaseManager:fieldDetectorManager:remoteInterfacePresenter:assertionManager:delegate:]( objc_alloc(&OBJC_CLASS___PDDefaultPassManager),  "initWithDatabaseManager:fieldDetectorManager:remoteInterfacePresenter:assertionManager:delegate:",  *(void *)(a1 + 48),  v27,  v218,  v29,  a1);
    v135 = *(void **)(a1 + 336);
    *(void *)(a1 + 336) = v134;

    [*(id *)(a1 + 96) setDefaultPassManager:*(void *)(a1 + 336)];
    v136 = objc_alloc(&OBJC_CLASS___PDDevicePasscodeManager);
    v137 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) sharedWebService]);
    v138 = -[PDDevicePasscodeManager initWithPaymentWebService:databaseManager:assertionManager:]( v136,  "initWithPaymentWebService:databaseManager:assertionManager:",  v137,  *(void *)(a1 + 48),  v29);
    v139 = *(void **)(a1 + 344);
    *(void *)(a1 + 344) = v138;

    [*(id *)(a1 + 96) setDevicePasscodeManager:*(void *)(a1 + 344)];
    v209 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) sharedWebService]);
    v140 = -[PDPassUpgradeController initWithWebService:cardFileManager:]( objc_alloc(&OBJC_CLASS___PDPassUpgradeController),  "initWithWebService:cardFileManager:",  v209,  *(void *)(a1 + 32));
    v141 = *(void **)(a1 + 360);
    *(void *)(a1 + 360) = v140;

    v142 = -[PDExpressTransitUpgradeController initWithPaymentWebServiceCoordinator:databaseManager:expressPassManager:notificationManager:assertionManager:passUpgradeController:]( objc_alloc(&OBJC_CLASS___PDExpressTransitUpgradeController),  "initWithPaymentWebServiceCoordinator:databaseManager:expressPassManager:notificationManager:assertionManage r:passUpgradeController:",  *(void *)(a1 + 96),  *(void *)(a1 + 48),  *(void *)(a1 + 312),  *(void *)(a1 + 56),  v29,  *(void *)(a1 + 360));
    v143 = *(void **)(a1 + 368);
    *(void *)(a1 + 36_Block_object_dispose((const void *)(v1 - 184), 8) = v142;

    v144 = -[PDTransitNotificationService initWithPaymentWebServiceCoordinator:notificationManager:userNotificationManager:databaseManager:expressPassManager:upgradeController:]( objc_alloc(&OBJC_CLASS___PDTransitNotificationService),  "initWithPaymentWebServiceCoordinator:notificationManager:userNotificationManager:databaseManager:expressPas sManager:upgradeController:",  *(void *)(a1 + 96),  v220,  *(void *)(a1 + 56),  *(void *)(a1 + 48),  *(void *)(a1 + 312),  *(void *)(a1 + 368));
    v145 = *(void **)(a1 + 352);
    *(void *)(a1 + 352) = v144;

    v146 = -[PDDeviceEnvironmentStore initWithDatabaseManager:]( objc_alloc(&OBJC_CLASS___PDDeviceEnvironmentStore),  "initWithDatabaseManager:",  *(void *)(a1 + 48));
    v147 = *(void **)(a1 + 160);
    *(void *)(a1 + 160) = v146;

    v148 = objc_alloc_init(&OBJC_CLASS___PDBarcodeCertificateManager);
    v149 = -[PDAuxiliaryCapabilityManager initWithDatabaseManager:paymentWebServiceCoordinator:secureElement:pushNotificationManager:iSO18013Manager:barcodeCertManager:subcredentialManager:]( objc_alloc(&OBJC_CLASS___PDAuxiliaryCapabilityManager),  "initWithDatabaseManager:paymentWebServiceCoordinator:secureElement:pushNotificationManager:iSO18013Manager: barcodeCertManager:subcredentialManager:",  *(void *)(a1 + 48),  *(void *)(a1 + 96),  *(void *)(a1 + 72),  *(void *)(a1 + 64),  *(void *)(a1 + 200),  v148,  *(void *)(a1 + 176));
    v150 = *(void **)(a1 + 232);
    *(void *)(a1 + 232) = v149;

    [*(id *)(a1 + 96) setAuxiliaryCapabilityManager:*(void *)(a1 + 232)];
    v208 = v148;
    v151 = -[PDBarcodeCredentialManager initWithDatabaseManager:paymentWebServiceCoordinator:pushNotificationManager:barcodeCertManager:auxiliaryCapabilityManager:]( objc_alloc(&OBJC_CLASS___PDBarcodeCredentialManager),  "initWithDatabaseManager:paymentWebServiceCoordinator:pushNotificationManager:barcodeCertManager:auxiliaryCa pabilityManager:",  *(void *)(a1 + 48),  *(void *)(a1 + 96),  *(void *)(a1 + 64),  v148,  *(void *)(a1 + 232));
    v152 = *(void **)(a1 + 216);
    *(void *)(a1 + 216) = v151;

    [*(id *)(a1 + 232) addDelegate:*(void *)(a1 + 216)];
    v216 = v29;
    v153 = -[PDTransactionAuthenticationManager initWithDatabaseManager:auxiliaryCapabilityManager:notificationServiceCoordinator:userNotificationManager:transactionProcessor:assertionManager:pushNotificationManager:]( objc_alloc(&OBJC_CLASS___PDTransactionAuthenticationManager),  "initWithDatabaseManager:auxiliaryCapabilityManager:notificationServiceCoordinator:userNotificationManager:t ransactionProcessor:assertionManager:pushNotificationManager:",  *(void *)(a1 + 48),  *(void *)(a1 + 216),  *(void *)(a1 + 88),  *(void *)(a1 + 56),  *(void *)(a1 + 80),  v29,  *(void *)(a1 + 64));
    v154 = *(void **)(a1 + 224);
    *(void *)(a1 + 224) = v153;

    v155 = -[PDTransactionNotificationController initWithUserNotificationManager:databaseManager:accountManager:peerPaymentWebServiceCoordinator:familyCircleManager:]( objc_alloc(&OBJC_CLASS___PDTransactionNotificationController),  "initWithUserNotificationManager:databaseManager:accountManager:peerPaymentWebServiceCoordinator:familyCircleManager:",  *(void *)(a1 + 56),  *(void *)(a1 + 48),  *(void *)(a1 + 128),  *(void *)(a1 + 104),  *(void *)(a1 + 408));
    v156 = *(void **)(a1 + 416);
    *(void *)(a1 + 416) = v155;

    v157 = sub_10033AED4( (id *)objc_alloc(&OBJC_CLASS___PDPassTileManager),  *(void **)(a1 + 32),  *(void **)(a1 + 48),  (void *)a1);
    v158 = *(void **)(a1 + 424);
    *(void *)(a1 + 424) = v157;

    v159 = sub_1002E0584( (id *)objc_alloc(&OBJC_CLASS___PDVehicleFunctionsManager),  *(void **)(a1 + 48),  *(void **)(a1 + 424));
    v160 = *(void **)(a1 + 432);
    *(void *)(a1 + 432) = v159;

    v161 = sub_10033DD9C((id *)objc_alloc(&OBJC_CLASS___PDBalanceManager), *(void **)(a1 + 48), *(void **)(a1 + 424));
    v162 = *(void **)(a1 + 440);
    *(void *)(a1 + 440) = v161;

    [*(id *)(a1 + 88) setPassTileManager:*(void *)(a1 + 424)];
    v163 = -[PDSharingManager initWithWebServiceCoordinator:databaseManager:notificationManager:pushNotificationManager:cardFileManager:subcredentialManager:applicationMessageManager:remoteInterfacePresenter:idsSharingService:cloudStoreDelegate:delegate:]( objc_alloc(&OBJC_CLASS___PDSharingManager),  "initWithWebServiceCoordinator:databaseManager:notificationManager:pushNotificationManager:cardFileManager:s ubcredentialManager:applicationMessageManager:remoteInterfacePresenter:idsSharingService:cloudStoreDelegate:delegate:",  *(void *)(a1 + 96),  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 64),  *(void *)(a1 + 32),  *(void *)(a1 + 176),  *(void *)(a1 + 496),  v218,  v219,  *(void *)(a1 + 248),  a1);
    v164 = *(void **)(a1 + 448);
    *(void *)(a1 + 44_Block_object_dispose((const void *)(v1 - 184), 8) = v163;

    v165 = -[PDAuxiliaryPassInformationManager initWithDatabaseManager:withMerchantUpdater:userNotificationManager:]( objc_alloc(&OBJC_CLASS___PDAuxiliaryPassInformationManager),  "initWithDatabaseManager:withMerchantUpdater:userNotificationManager:",  *(void *)(a1 + 48),  *(void *)(a1 + 384),  *(void *)(a1 + 56));
    v166 = *(void **)(a1 + 464);
    *(void *)(a1 + 464) = v165;

    v167 = -[PDCloudStoreTransactionSourceController initWithDatabaseManager:accountManager:peerPaymentWebServiceCoordinator:cloudStoreNotificationCoordinator:]( objc_alloc(&OBJC_CLASS___PDCloudStoreTransactionSourceController),  "initWithDatabaseManager:accountManager:peerPaymentWebServiceCoordinator:cloudStoreNotificationCoordinator:",  *(void *)(a1 + 48),  *(void *)(a1 + 128),  *(void *)(a1 + 104),  *(void *)(a1 + 248));
    v168 = *(void **)(a1 + 240);
    *(void *)(a1 + 240) = v167;

    [*(id *)(a1 + 96) setSharingManager:*(void *)(a1 + 448)];
    v169 = -[PDPassSignalManager initWithDatabaseManager:paymentWebServiceCoordinator:]( objc_alloc(&OBJC_CLASS___PDPassSignalManager),  "initWithDatabaseManager:paymentWebServiceCoordinator:",  *(void *)(a1 + 48),  *(void *)(a1 + 96));
    v170 = *(void **)(a1 + 552);
    *(void *)(a1 + 552) = v169;

    v171 = objc_alloc(&OBJC_CLASS___PDPendingProvisioningManager);
    uint64_t v172 = *(void *)(a1 + 48);
    uint64_t v173 = *(void *)(a1 + 496);
    uint64_t v174 = *(void *)(a1 + 192);
    uint64_t v176 = *(void *)(a1 + 96);
    uint64_t v175 = *(void *)(a1 + 104);
    uint64_t v177 = *(void *)(a1 + 248);
    v178 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 448) channelManager]);
    v179 = -[PDPendingProvisioningManager initWithDatabaseManager:applicationMessageManager:webServiceCoordinator:carKeyRequirementsChecker:peerPaymentWebServiceCoordinator:notificationStreamManager:cloudStoreCoordinator:sharingChannelManager:notificationManager:]( v171,  "initWithDatabaseManager:applicationMessageManager:webServiceCoordinator:carKeyRequirementsChecker:peerPayme ntWebServiceCoordinator:notificationStreamManager:cloudStoreCoordinator:sharingChannelManager:notificationManager:",  v172,  v173,  v176,  v174,  v175,  v220,  v177,  v178,  *(void *)(a1 + 56));
    v180 = *(void **)(a1 + 456);
    *(void *)(a1 + 456) = v179;

    [*(id *)(a1 + 456) setDelegate:a1];
    [*(id *)(a1 + 96) setPendingProvisioningManager:*(void *)(a1 + 456)];
    [*(id *)(a1 + 208) setPendingProvisioningManager:*(void *)(a1 + 456)];
    v181 = objc_alloc(&OBJC_CLASS___PDProvisioningRequirementsChecker);
    v182 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) sharedWebService]);
    v183 = -[PDProvisioningRequirementsChecker initWithWebService:cloudStoreCoordinator:]( v181,  "initWithWebService:cloudStoreCoordinator:",  v182,  *(void *)(a1 + 248));
    v184 = *(void **)(a1 + 536);
    *(void *)(a1 + 536) = v183;

    [*(id *)(a1 + 96) setProvisioningRequirementsChecker:*(void *)(a1 + 536)];
    v185 = -[PDPassVerificationManager initWithDatabaseManager:userNotificationManager:webServiceCoordinator:secureElement:]( objc_alloc(&OBJC_CLASS___PDPassVerificationManager),  "initWithDatabaseManager:userNotificationManager:webServiceCoordinator:secureElement:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  *(void *)(a1 + 96),  *(void *)(a1 + 72));
    v186 = *(void **)(a1 + 544);
    *(void *)(a1 + 544) = v185;

    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 16));
    v187 = objc_alloc(&OBJC_CLASS___NSMutableSet);
    v188 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passUniqueIDs]);
    v189 = -[NSMutableSet initWithArray:](v187, "initWithArray:", v188);
    v190 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v189;

    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 16));
    v191 = objc_autoreleasePoolPush();
    if (v213 || ([*(id *)(a1 + 48) verifyIntegrity] & 1) == 0)
    {
      id v193 = PDDefaultQueue();
      v194 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v193);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000185F8;
      block[3] = &unk_100639300;
      void block[4] = a1;
      dispatch_async(v194, block);

      char v192 = 0;
    }

    else
    {
      char v192 = 1;
    }

    objc_autoreleasePoolPop(v191);
    [*(id *)(a1 + 336) setDelegate:a1];
    [*(id *)(a1 + 32) startObservingUbiquityEvents];
    [*(id *)(a1 + 64) connect];
    -[PKIDSService start](v219, "start");
    [*(id *)(a1 + 272) connect];
    sub_10030BD78(*(void *)(a1 + 496));
    [*(id *)(a1 + 88) connect];
    [*(id *)(a1 + 56) connect];
    sub_1001ADB94((uint64_t)v218);
    [*(id *)(a1 + 544) connect];
    if ((v192 & 1) == 0)
    {
      [*(id *)(a1 + 272) nukeTasks];
      [*(id *)(a1 + 88) nukeTasks];
      [*(id *)(a1 + 216) nukeTasks];
    }

    if (buf[0] && buf[1] == 2) {
      sub_100018600(a1);
    }
    v195 = objc_alloc(&OBJC_CLASS___PDPassSyncCloudStoreContainer);
    v196 = (void *)objc_claimAutoreleasedReturnValue( +[PDCloudStoreContainerConfiguration passSyncConfigWithDataSource:]( &OBJC_CLASS___PDCloudStoreContainerConfiguration,  "passSyncConfigWithDataSource:",  *(void *)(a1 + 48)));
    v197 = -[PDPassSyncCloudStoreContainer initWithConfiguration:](v195, "initWithConfiguration:", v196);

    v198 = objc_alloc(&OBJC_CLASS___PDPassSyncCloudStoreContainer);
    v199 = (void *)objc_claimAutoreleasedReturnValue( +[PDCloudStoreContainerConfiguration passSyncSecureConfigWithDataSource:]( &OBJC_CLASS___PDCloudStoreContainerConfiguration,  "passSyncSecureConfigWithDataSource:",  *(void *)(a1 + 48)));
    v200 = -[PDPassSyncCloudStoreContainer initWithConfiguration:](v198, "initWithConfiguration:", v199);

    v201 = -[PDCardCloudManager initWithContainer:]( objc_alloc(&OBJC_CLASS___PDCardCloudManager),  "initWithContainer:",  v197);
    v202 = -[PDCardCloudManager initWithContainer:]( objc_alloc(&OBJC_CLASS___PDCardCloudManager),  "initWithContainer:",  v200);
    v203 = -[PDCardCloudManagerChangeRegistry initWithDatabaseManager:]( objc_alloc(&OBJC_CLASS___PDCardCloudManagerChangeRegistry),  "initWithDatabaseManager:",  *(void *)(a1 + 48));
    v204 = -[PDCloudSyncCoordinator initWithChangeRegistry:databaseManager:cardFileManager:cloudStoreManager:secureCloudStoreManager:]( objc_alloc(&OBJC_CLASS___PDCloudSyncCoordinator),  "initWithChangeRegistry:databaseManager:cardFileManager:cloudStoreManager:secureCloudStoreManager:",  v203,  *(void *)(a1 + 48),  *(void *)(a1 + 32),  v201,  v202);
    v205 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v204;

    [*(id *)(a1 + 248) setPassSyncContainer:v197];
    [*(id *)(a1 + 248) setPassSyncSecureContainer:v200];
    if (!v214) {
      [*(id *)(a1 + 32) startUbiquity];
    }
    sub_10014AB18(*(void *)(a1 + 312));
    sub_1000186B8(a1);
    sub_10001870C(a1);
    [*(id *)(a1 + 104) updateSharedCache];
    atomic_store(1u, (unsigned __int8 *)(a1 + 8));
    sub_1000188A8((id)a1);
  }

  else
  {
    if (v24)
    {
      *(_DWORD *)buf = 67109632;
      BOOL v223 = v21 == 1;
      __int16 v224 = 1024;
      BOOL v225 = v20 == 1;
      __int16 v226 = 1024;
      int v227 = 1;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "passd initialization: waiting for: iCloud restore complete: %d & File protection enabled: %d & Hardware check: %d",  buf,  0x14u);
    }

    atomic_store(0, (unsigned __int8 *)(a1 + 8));
  }

    return self->_hasSentMoneyToAnyParticipant;
  }

  return 0;
}

  if (v84[5] && v78[5])
  {
    delegateQueue = self->_delegateQueue;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1001241BC;
    block[3] = &unk_10063B2B0;
    void block[4] = self;
    v54 = v52;
    v55 = &v77;
    v56 = &v83;
    dispatch_async((dispatch_queue_t)delegateQueue, block);
  }

  if (v49) {
    v49[2](v49, v28, v90[5]);
  }

  _Block_object_dispose(&v77, 8);
  _Block_object_dispose(&v83, 8);

  _Block_object_dispose(&v89, 8);
  _Block_object_dispose(&v95, 8);

  _Block_object_dispose(&v101, 8);
  _Block_object_dispose(&v107, 8);
}

  if ((PKEqualObjects(v4, *(void *)(*(void *)(a1 + 32) + 72LL)) & 1) != 0)
  {
    if (!v17) {
      goto LABEL_50;
    }
    __int128 v25 = *(void **)(*(void *)(a1 + 32) + 72LL);
    goto LABEL_44;
  }

    id v31 = 0LL;
    goto LABEL_55;
  }

  id v31 = 0LL;
  unsigned int v13 = v28;
LABEL_55:

  return v31;
}

  if ((PKEqualObjects(v4, *(void *)(*(void *)(a1 + 32) + 80LL)) & 1) != 0)
  {
    if (!v17) {
      goto LABEL_50;
    }
    __int128 v25 = *(void **)(*(void *)(a1 + 32) + 80LL);
    goto LABEL_44;
  }

      goto LABEL_29;
    }

    __int128 v26 = -[PDPassGroupingProfile passStyle](self, "passStyle");
    unsigned int v13 = v26 == [v7 passStyle];
    if ((v29 & 1) == 0)
    {
      __int128 v25 = (void *)v32;
      if (v32) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

void _VerifyOrCreateDirectoryStructure()
{
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v0 = PKHomeDirectoryPath();
  id v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  [v2 createDirectoryAtPath:v1 withIntermediateDirectories:1 attributes:0 error:0];
}

void _VerifyOrUpdateDirectoryFileProtection(int a1)
{
  if ((PDProtectedDataAvailable() & 1) != 0)
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v3 = PKHomeDirectoryPath();
    id v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    if (![v2 fileExistsAtPath:v4])
    {
LABEL_33:

      goto LABEL_37;
    }

    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v4));
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 URLByResolvingSymlinksInPath]);

    if ((a1 & 1) != 0)
    {
      id v7 = 0LL;
    }

    else
    {
      NSURLResourceKey v58 = NSURLFileProtectionKey;
      __int128 v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v58, 1LL));
      id v52 = 0LL;
      id v30 = (void *)objc_claimAutoreleasedReturnValue([v6 resourceValuesForKeys:v29 error:&v52]);
      id v7 = v52;

      if (!v30)
      {
        uint64_t Object = PKLogFacilityTypeGetObject(0LL);
        uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
          sub_100441250((uint64_t)v7, v10, v35, v36, v37, v38, v39, v40);
        }
        goto LABEL_31;
      }

      id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 objectForKeyedSubscript:NSURLFileProtectionKey]);
      if (v31)
      {
        id v32 = v31;
        unsigned int v33 = [v31 isEqualToString:NSURLFileProtectionNone];

        if (!v33) {
          goto LABEL_32;
        }
      }

      else
      {
      }
    }

    __int128 v42 = v4;
    uint64_t v8 = PKLogFacilityTypeGetObject(0LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100441224();
    }
    oslog = v9;

    NSURLResourceKey v56 = NSURLFileProtectionKey;
    NSURLFileProtectionType v57 = NSURLFileProtectionCompleteUntilFirstUserAuthentication;
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v57,  &v56,  1LL));
    id v11 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s allKeys](v10, "allKeys"));
    uint64_t v43 = v2;
    __int128 v41 = v6;
    int v12 = (void *)objc_claimAutoreleasedReturnValue( [v2 enumeratorAtURL:v6 includingPropertiesForKeys:v11 options:0 errorHandler:0]);
    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    id v13 = [v12 countByEnumeratingWithState:&v48 objects:v55 count:16];
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v49;
      do
      {
        for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v49 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);

          id v47 = 0LL;
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 resourceValuesForKeys:v11 error:&v47]);
          id v19 = v47;
          int v20 = PKEqualObjects(v10, v18);

          id v7 = 0LL;
          if (v20) {
            BOOL v21 = v19 == 0LL;
          }
          else {
            BOOL v21 = 0;
          }
          if (!v21)
          {

            id v46 = 0LL;
            unsigned int v22 = [v17 setResourceValues:v10 error:&v46];
            id v23 = v46;
            id v7 = 0LL;
            if (!v22 || v23 != 0LL)
            {
              id v25 = v23;
              if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v54 = v17;
                _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "PDServer: failed to update data protection for %@.",  buf,  0xCu);
              }

              id v7 = v25;
            }
          }
        }

        id v14 = [v12 countByEnumeratingWithState:&v48 objects:v55 count:16];
      }

      while (v14);
    }

    id v45 = 0LL;
    id v6 = v41;
    unsigned int v26 = [v41 setResourceValues:v10 error:&v45];
    id v27 = v45;
    id v7 = v27;
    if (!v26 || v27)
    {
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v54 = v41;
        _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "PDServer: failed to update data protection for %@.",  buf,  0xCu);
      }
    }

    id v4 = v42;
    id v2 = v43;
LABEL_31:

LABEL_32:
    goto LABEL_33;
  }

  if (!a1) {
    return;
  }
  uint64_t v28 = PKLogFacilityTypeGetObject(0LL);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(v28);
  if (os_log_type_enabled((os_log_t)v2, OS_LOG_TYPE_ERROR)) {
    sub_1004412B4();
  }
LABEL_37:
}

id sub_1000185F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) handleDatabaseIntegrityProblem];
}

void sub_100018600(uint64_t a1)
{
  if (a1 && os_variant_has_internal_ui(PKOSVariantSubsystem))
  {
    id v2 = -[PDGenericUserNotification initWithTitle:message:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:",  @"Database Removed [Internal]",  @"Do not file radar, known issue. The Wallet database was removed because its version was not recognized. Some of your settings and data may have been reset.");
    [*(id *)(a1 + 56) insertUserNotification:v2];
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Presented internal-only database removed (version was not recognized) banner.",  v5,  2u);
    }
  }

void sub_1000186B8(uint64_t a1)
{
  if (a1)
  {
    if (!*(void *)(a1 + 488))
    {
      id v2 = -[PDXPCEventPublisher initWithStreamName:]( objc_alloc(&OBJC_CLASS___PDXPCEventPublisher),  "initWithStreamName:",  @"com.apple.passd.matching");
      uint64_t v3 = *(void **)(a1 + 488);
      *(void *)(a1 + 48_Block_object_dispose((const void *)(v1 - 184), 8) = v2;
    }
  }

void sub_10001870C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = 0LL;
    char v3 = 0;
    while (2)
    {
      id v4 = &qword_100707788[5 * v2++];
      id v5 = (id *)(v4 + 4);
      while (1)
      {
        os_unfair_lock_lock((os_unfair_lock_t)v5 - 2);
        if (*(v5 - 2))
        {
          if (*v5 && [*v5 count]) {
            break;
          }
        }

        os_unfair_lock_unlock((os_unfair_lock_t)v5 - 2);
        ++v2;
        v5 += 5;
        if (v2 == 10)
        {
          if ((v3 & 1) == 0) {
            return;
          }
          goto LABEL_19;
        }
      }

      __int128 v13 = 0u;
      __int128 v14 = 0u;
      __int128 v11 = 0u;
      __int128 v12 = 0u;
      id v6 = *v5;
      id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
      if (v7)
      {
        id v8 = v7;
        uint64_t v9 = *(void *)v12;
        do
        {
          for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v12 != v9) {
              objc_enumerationMutation(v6);
            }
            ((void (*)(uint64_t, void))*(v5 - 2))(a1, *(void *)(*((void *)&v11 + 1) + 8LL * (void)i));
          }

          id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
        }

        while (v8);
      }

      os_unfair_lock_unlock((os_unfair_lock_t)v5 - 2);
      char v3 = 1;
      if (v2 != 9) {
        continue;
      }
      break;
    }

LABEL_19:
    PKAnalyticsSendEvent(PKAggDKeyPassdRestoreServices, 0LL);
  }

    goto LABEL_20;
  }

  uint64_t v10 = (__CFString *)v6;
  if (v10 == @"AccountStatementMetadataActivity"
    || (__int128 v11 = v10) != 0LL
    && (__int128 v12 = -[__CFString isEqualToString:]( v10,  "isEqualToString:",  @"AccountStatementMetadataActivity"),  v11,  v12))
  {
    __int128 v29 = v7;
    id v30 = v6;
    __int128 v13 = PKLogFacilityTypeGetObject(9LL);
    __int128 v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Running AccountStatementMetadataActivity task",  buf,  2u);
    }

    self->_runningScheduledActivity = 1;
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[PDAccountStatementMetadataProcessor _queue_eligibleAccounts](self, "_queue_eligibleAccounts"));
    uint64_t v16 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    uint64_t v36 = 0u;
    uint64_t v37 = 0u;
    uint64_t v38 = 0u;
    uint64_t v39 = 0u;
    obuint64_t j = v15;
    uint64_t v17 = [obj countByEnumeratingWithState:&v36 objects:v44 count:16];
    if (v17)
    {
      uint64_t v18 = v17;
      id v19 = *(void *)v37;
      do
      {
        for (uint64_t i = 0LL; i != v18; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v37 != v19) {
            objc_enumerationMutation(obj);
          }
          BOOL v21 = *(void **)(*((void *)&v36 + 1) + 8LL * (void)i);
          unsigned int v22 = PKAccountTypeToString(objc_msgSend(v21, "type", v29, v30));
          id v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
          BOOL v24 = (void *)objc_claimAutoreleasedReturnValue([v21 accountIdentifier]);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            __int128 v41 = v24;
            __int128 v42 = 2112;
            uint64_t v43 = v23;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Running AccountStatementMetadataActivity task for account identifier %@, type %@",  buf,  0x16u);
          }

          v33[0] = _NSConcreteStackBlock;
          v33[1] = 3221225472LL;
          v33[2] = sub_10003BF5C;
          v33[3] = &unk_10063BAD8;
          v33[4] = v21;
          v33[5] = self;
          uint64_t v34 = v24;
          uint64_t v35 = v23;
          id v25 = v23;
          unsigned int v26 = v24;
          [v16 addOperation:v33];
        }

        uint64_t v18 = [obj countByEnumeratingWithState:&v36 objects:v44 count:16];
      }

      while (v18);
    }

    uint64_t v9 = (os_log_s *)obj;

    id v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472LL;
    v32[2] = sub_10003C1EC;
    v32[3] = &unk_10063BB00;
    v32[4] = self;
    uint64_t v28 = [v16 evaluateWithInput:v27 completion:v32];

    id v7 = v29;
    id v6 = v30;
    goto LABEL_19;
  }

  return v11;
}

      ++*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);
LABEL_20:

      goto LABEL_21;
    }

    v55 = 0LL;
    goto LABEL_20;
  }

  unsigned int v22 = self->_databaseManager;
  id v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  -[PDDatabaseManager updateLastUpdatedDate:forNotificationService:]( v22,  "updateLastUpdatedDate:forNotificationService:",  v23,  v11);

  if (v13) {
    -[PDDatabaseManager updateLastUpdatedTag:forNotificationService:]( self->_databaseManager,  "updateLastUpdatedTag:forNotificationService:",  v13,  v11);
  }
  id v19 = 0LL;
  v65 = 0LL;
  if (v7) {
    goto LABEL_9;
  }
LABEL_42:
}

  [v9 removeObject:v5];
  if (![v9 count])
  {

    uint64_t v9 = 0LL;
  }

  [*(id *)(*(void *)(a1 + 32) + 40) setObject:v9 forKeyedSubscript:*(void *)(a1 + 40)];
  int v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) objectForKey:*(void *)(a1 + 40)]);
  BOOL v21 = v20;
  if (v20)
  {
    unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([v20 objectForKey:*(void *)(a1 + 56)]);
    id v23 = v22 == 0LL;
    if (v22) {
      [v21 removeObjectForKey:*(void *)(a1 + 56)];
    }
    if ([v21 count])
    {
      if (!v19) {
        goto LABEL_26;
      }
LABEL_31:
      BOOL v24 = *(void *)(a1 + 32);
      id v25 = *(void **)(a1 + 40);
      unsigned int v26 = *(void **)(v24 + 8);
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3221225472LL;
      v42[2] = sub_100083B08;
      v42[3] = &unk_10063E468;
      v42[4] = v24;
      uint64_t v43 = v25;
      id v27 = v3;
      uint64_t v28 = *(void *)(a1 + 56);
      id v44 = v27;
      id v45 = v28;
      [v26 performTransactionWithBlock:v42];

      if (v23) {
        goto LABEL_42;
      }
      goto LABEL_32;
    }

    [*(id *)(*(void *)(a1 + 32) + 48) removeObjectForKey:*(void *)(a1 + 40)];
    if (v19) {
      goto LABEL_31;
    }
  }

  else
  {
    unsigned int v22 = 0LL;
    id v23 = 1;
    if (v19) {
      goto LABEL_31;
    }
  }

    [v14 udpateWithIsCloudKitSecurelyArchived:0];
    [v14 udpateWithCloudKitSecureMetadata:0];
    goto LABEL_20;
  }

LABEL_10:
  [v14 udpateWithIsCloudKitArchived:0];
  [v14 udpateWithCloudKitMetadata:0];
LABEL_20:
}

    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[PKPayLaterFinancingPlan completedFinancingPlanStates]( &OBJC_CLASS___PKPayLaterFinancingPlan,  "completedFinancingPlanStates"));
    int v20 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterFinancingPlan financingPlansForEndpointMetadataPID:states:transactionStartDate:transactionEndDate:installmentDueOrPaidDateStart:installmentDueOrPaidDateEnd:limit:inDatabase:]( &OBJC_CLASS___PayLaterFinancingPlan,  "financingPlansForEndpointMetadataPID:states:transactionStartDate:transactionEndDate:installmentDue OrPaidDateStart:installmentDueOrPaidDateEnd:limit:inDatabase:",  v10,  v19,  v27,  v26,  v25,  v12,  0LL,  self->_database));

    [v7 setCompletedFinancingPlans:v20];
    if ((v11 & 0x10) == 0)
    {
LABEL_9:
      if ((v11 & 0x20) == 0) {
        goto LABEL_10;
      }
      goto LABEL_21;
    }

  if (!*(_BYTE *)(a1 + 56))
  {
    if (([v3 accountStateDirty] & 1) == 0)
    {
      uint64_t v17 = *(_BYTE *)(a1 + 56) != 0;
      goto LABEL_25;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      __int128 v29 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Account with identifier %@ is dirty, forcing extended account update",  buf,  0xCu);
    }
  }

  uint64_t v17 = 1LL;
LABEL_25:
  if (objc_msgSend(v3, "feature", (void)v24) == (id)3 || objc_msgSend(v3, "feature") == (id)5)
  {
    uint64_t v18 = PKLogFacilityTypeGetObject(14LL);
    id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = PKFeatureIdentifierToString([v3 feature]);
      BOOL v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
      unsigned int v22 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      __int128 v29 = v21;
      id v30 = 2112;
      id v31 = v22;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Not fetching an extended account for account type: %@, identifier: %@",  buf,  0x16u);
    }

    uint64_t v17 = 0LL;
  }

  id v23 = -[PDAccountManagerAccountRequest initWithAccountIdentifier:]( objc_alloc(&OBJC_CLASS___PDAccountManagerAccountRequest),  "initWithAccountIdentifier:",  *(void *)(a1 + 40));
  -[PDAccountManagerAccountRequest setFetchExtendedAccount:](v23, "setFetchExtendedAccount:", v17);
  -[PDAccountManagerAccountRequest addCompletion:](v23, "addCompletion:", *(void *)(a1 + 48));
  [*(id *)(a1 + 32) _addAccountManagerFetchRequest:v23];
}

  if (!-[PDTransactionNotificationController _transactionHasBeenUpdatedRecentlyEnoughForNotification:]( self,  "_transactionHasBeenUpdatedRecentlyEnoughForNotification:",  v6))
  {
LABEL_27:
    id v25 = 0;
    goto LABEL_28;
  }

  id v25 = -[PDTransactionNotificationController _shouldCreateNotificationForTransactionUpdateReasons:notificationTypeDescription:]( self,  "_shouldCreateNotificationForTransactionUpdateReasons:notificationTypeDescription:",  v6,  @"merchant transaction notification");
LABEL_28:

  return v25;
}

  uint64_t v34 = objc_opt_class(&OBJC_CLASS___NSString, v17);
  __int128 v51 = 0LL;
  uint64_t v35 = PDTypecheckObjectForKey(v14, @"response", @"lastUpdatedTag", v34, 1LL, &v51);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v35);
  uint64_t v37 = v51;
  if (v6)
  {
    uint64_t v38 = 0LL;
LABEL_25:
    uint64_t v39 = 0LL;
    goto LABEL_26;
  }

  uint64_t v40 = objc_opt_class(&OBJC_CLASS___NSString, v36);
  __int128 v50 = 0LL;
  __int128 v41 = PDTypecheckObjectForKey(v14, @"response", @"authenticationToken", v40, 1LL, &v50);
  id v6 = (void *)objc_claimAutoreleasedReturnValue(v41);
  uint64_t v39 = v50;
  if (v6)
  {
    uint64_t v38 = 0LL;
  }

  else
  {
    uint64_t v43 = objc_opt_class(&OBJC_CLASS___NSString, v42);
    __int128 v49 = 0LL;
    id v44 = PDTypecheckObjectForKey(v14, @"response", @"appLaunchToken", v43, 1LL, &v49);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v44);
    uint64_t v38 = v49;
    if (!v6)
    {
      __int128 v29 = objc_alloc_init(&OBJC_CLASS___PDNotificationServiceGetUpdatesResult);
      -[PDNotificationServiceGetUpdatesResult setNotifications:](v29, "setNotifications:", v33);
      -[PDNotificationServiceGetUpdatesResult setBalances:](v29, "setBalances:", v48);
      -[PDNotificationServiceGetUpdatesResult setPlans:](v29, "setPlans:", v47);
      -[PDNotificationServiceGetUpdatesResult setTileConfigurations:](v29, "setTileConfigurations:", v18);
      -[PDNotificationServiceGetUpdatesResult setLastUpdatedTag:](v29, "setLastUpdatedTag:", v37);
      -[PDNotificationServiceGetUpdatesResult setAuthenticationToken:](v29, "setAuthenticationToken:", v39);
      -[PDNotificationServiceGetUpdatesResult setAppLaunchToken:](v29, "setAppLaunchToken:", v38);
      goto LABEL_27;
    }
  }

LABEL_20:
      goto LABEL_21;
    }
  }

  LOBYTE(v13) = 0;
LABEL_22:

  return v13;
}
}
}

  __int128 v42 = v6;
  uint64_t v43 = v4;

  __int128 v41 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager paymentPassesEligibleForDefaultCardSelection]( self->_databaseManager,  "paymentPassesEligibleForDefaultCardSelection"));
  int v20 = (void *)objc_claimAutoreleasedReturnValue([v41 allObjects]);
  BOOL v21 = (void *)objc_claimAutoreleasedReturnValue([v20 sortedArrayUsingComparator:&stru_100657B00]);

  id v46 = 0u;
  id v47 = 0u;
  id v44 = 0u;
  id v45 = 0u;
  __int128 v12 = v21;
  unsigned int v22 = [v12 countByEnumeratingWithState:&v44 objects:v49 count:16];
  if (v22)
  {
    id v23 = v22;
    BOOL v24 = 0LL;
    id v25 = 0LL;
    unsigned int v26 = *(void *)v45;
LABEL_21:
    id v27 = 0LL;
    while (1)
    {
      if (*(void *)v45 != v26) {
        objc_enumerationMutation(v12);
      }
      uint64_t v28 = *(void **)(*((void *)&v44 + 1) + 8 * v27);
      if (v8
        && (__int128 v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v44 + 1) + 8 * v27) uniqueID]),
            id v30 = [v29 isEqualToString:v8],
            v29,
            (v30 & 1) != 0))
      {
        id v31 = v24;
        BOOL v24 = v28;
      }

      else
      {
        if (![v28 isTransitPass]
          || (id v32 = (void *)objc_claimAutoreleasedReturnValue([v28 devicePrimaryPaymentApplication]),
              unsigned int v33 = [v32 paymentNetworkIdentifier],
              v32,
              v33 != (id)113))
        {
          uint64_t v35 = v28;

          id v6 = v42;
          id v4 = v43;
          uint64_t v9 = v41;
          if (v35) {
            goto LABEL_41;
          }
          if (!v24) {
            goto LABEL_42;
          }
LABEL_40:
          BOOL v24 = v24;
          uint64_t v35 = v24;
LABEL_41:

          id v25 = v35;
          goto LABEL_42;
        }

        if (v25) {
          uint64_t v28 = v25;
        }
        id v31 = v25;
        id v25 = v28;
      }

      uint64_t v34 = v28;

      if (v23 == (id)++v27)
      {
        id v23 = [v12 countByEnumeratingWithState:&v44 objects:v49 count:16];
        if (v23) {
          goto LABEL_21;
        }
        goto LABEL_39;
      }
    }
  }

  BOOL v24 = 0LL;
  id v25 = 0LL;
LABEL_39:

  id v6 = v42;
  id v4 = v43;
  uint64_t v9 = v41;
  if (v24) {
    goto LABEL_40;
  }
LABEL_42:

  return v25;
}
}
}

  uint64_t v39 = 0LL;
  v117 = v115 & 0xC000000000000001LL;
  v114 = v115 & 0xFFFFFFFFFFFFFF8LL;
  v113 = v115 + 32;
  v120 = (char *)&type metadata for Swift.AnyObject + 8;
  v116 = v38;
  do
  {
    if (v117)
    {
      uint64_t v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v115);
    }

    else
    {
      if (v39 >= *(void *)(v114 + 16)) {
        goto LABEL_70;
      }
      uint64_t v40 = *(id *)(v113 + 8 * v39);
    }

    __int128 v41 = v40;
    __int128 v42 = __OFADD__(v39, 1LL);
    uint64_t v43 = v39 + 1;
    if (v42) {
      goto LABEL_69;
    }
    id v44 = [v40 subcredentials];
    if (!v44) {
      goto LABEL_86;
    }
    uint64_t v37 = (uint64_t)v44;
    v119 = v43;
    id v45 = sub_100424A90(0LL, &qword_1007074A0, &OBJC_CLASS___PKAppletSubcredential_ptr);
    id v46 = sub_10042D628();
    id v47 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v37, v45, v46);

    v121 = v45;
    if ((v47 & 0xC000000000000001LL) != 0)
    {
      if (v47 < 0) {
        __int128 v49 = v47;
      }
      else {
        __int128 v49 = v47 & 0xFFFFFFFFFFFFFF8LL;
      }
      __int128 v50 = __CocoaSet.makeIterator()(v49);
      __int128 v48 = Set.Iterator.init(_cocoa:)(v135, v50, v45, v46);
      id v47 = v135[0];
      v124 = v135[1];
      __int128 v51 = v135[2];
      id v52 = v135[3];
      v53 = v135[4];
    }

    else
    {
      id v52 = 0LL;
      v54 = -1LL << *(_BYTE *)(v47 + 32);
      v55 = *(void *)(v47 + 56);
      v124 = v47 + 56;
      NSURLResourceKey v56 = ~v54;
      NSURLFileProtectionType v57 = -v54;
      if (v57 < 64) {
        NSURLResourceKey v58 = ~(-1LL << v57);
      }
      else {
        NSURLResourceKey v58 = -1LL;
      }
      v53 = v58 & v55;
      __int128 v51 = v56;
    }

    v122 = v47 & 0x7FFFFFFFFFFFFFFFLL;
    v118 = v51;
    v123 = (unint64_t)(v51 + 64) >> 6;
    v125 = v47;
    if (v47 < 0)
    {
LABEL_57:
      uint64_t v37 = v122;
      v66 = __CocoaSet.Iterator.next()(v48);
      if (!v66) {
        goto LABEL_20;
      }
      uint64_t v37 = v66;
      v127 = v66;
      swift_unknownObjectRetain(v66);
      swift_dynamicCast(&aBlock, &v127, v120, v121, 7LL);
      v65 = aBlock;
      swift_unknownObjectRelease(v37);
      v61 = v52;
      v59 = v53;
      if (!v65) {
        goto LABEL_20;
      }
      goto LABEL_59;
    }

    while (v53)
    {
      v59 = (v53 - 1) & v53;
      v60 = __clz(__rbit64(v53)) | (v52 << 6);
      v61 = v52;
LABEL_55:
      v65 = (void **)*(id *)(*(void *)(v47 + 48) + 8 * v60);
      if (!v65) {
        goto LABEL_20;
      }
LABEL_59:
      uint64_t v37 = (uint64_t)v18;
      if ((v19(v41, v65) & 1) != 0)
      {
        v126 = v59;
        v67 = [v41 applicationIdentifier];
        if (!v67)
        {
          swift_release(v110);
          v98 = v111;
          _Block_release(v111);
          _Block_release(v98);
          _Block_release(v98);
          _Block_release(v98);
          _Block_release(v98);
          __break(1u);
LABEL_85:
          swift_release(v110);
          v99 = v111;
          _Block_release(v111);
          _Block_release(v99);
          _Block_release(v99);
          _Block_release(v99);
          _Block_release(v99);
          __break(1u);
LABEL_86:
          swift_release(v110);
          v100 = v111;
          _Block_release(v111);
          _Block_release(v100);
          _Block_release(v100);
          _Block_release(v100);
          _Block_release(v100);
          __break(1u);
          goto LABEL_87;
        }

        v69 = v67;
        uint64_t v70 = v41;
        v71 = v19;
        v72 = v18;
        v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67, v68);
        v75 = v74;

        v76 = [v65 identifier];
        if (!v76) {
          goto LABEL_85;
        }
        v78 = v76;
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76, v77);
        v81 = v80;

        uint64_t v37 = (uint64_t)&v134;
        sub_10043F0F4((uint64_t *)&aBlock, v73, v75, v79, v81);

        swift_bridgeObjectRelease(v129);
        __int128 v48 = (void *)swift_bridgeObjectRelease(v131);
        id v52 = v61;
        uint64_t v18 = v72;
        id v19 = v71;
        __int128 v41 = v70;
        id v47 = v125;
        v53 = v126;
        if (v125 < 0) {
          goto LABEL_57;
        }
      }

      else
      {

        id v52 = v61;
        v53 = v59;
        if (v47 < 0) {
          goto LABEL_57;
        }
      }
    }

    v62 = v52 + 1;
    if (__OFADD__(v52, 1LL))
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      if (v37 < 0) {
        v92 = v37;
      }
      else {
        v92 = v37 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v37);
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v92);
      if (!v38) {
        goto LABEL_75;
      }
      goto LABEL_19;
    }

    if (v62 < v123)
    {
      v63 = *(void *)(v124 + 8 * v62);
      v61 = v52 + 1;
      if (v63) {
        goto LABEL_54;
      }
      v61 = v52 + 2;
      if (v52 + 2 >= v123) {
        goto LABEL_20;
      }
      v63 = *(void *)(v124 + 8 * v61);
      if (v63) {
        goto LABEL_54;
      }
      v61 = v52 + 3;
      if (v52 + 3 >= v123) {
        goto LABEL_20;
      }
      v63 = *(void *)(v124 + 8 * v61);
      if (v63) {
        goto LABEL_54;
      }
      v61 = v52 + 4;
      if (v52 + 4 >= v123) {
        goto LABEL_20;
      }
      v63 = *(void *)(v124 + 8 * v61);
      if (v63)
      {
LABEL_54:
        v59 = (v63 - 1) & v63;
        v60 = __clz(__rbit64(v63)) + (v61 << 6);
        goto LABEL_55;
      }

      v64 = v52 + 5;
      while (v123 != v64)
      {
        v63 = *(void *)(v124 + 8 * v64++);
        if (v63)
        {
          v61 = v64 - 1;
          goto LABEL_54;
        }
      }
    }

  uint64_t v39 = 0LL;
  v117 = v115 & 0xC000000000000001LL;
  v114 = v115 & 0xFFFFFFFFFFFFFF8LL;
  v113 = v115 + 32;
  v120 = (char *)&type metadata for Swift.AnyObject + 8;
  v116 = v38;
  do
  {
    if (v117)
    {
      uint64_t v40 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v39, v115);
    }

    else
    {
      if (v39 >= *(void *)(v114 + 16)) {
        goto LABEL_70;
      }
      uint64_t v40 = *(id *)(v113 + 8 * v39);
    }

    __int128 v41 = v40;
    __int128 v42 = __OFADD__(v39, 1LL);
    uint64_t v43 = v39 + 1;
    if (v42) {
      goto LABEL_69;
    }
    id v44 = [v40 subcredentials];
    if (!v44) {
      goto LABEL_86;
    }
    uint64_t v37 = (uint64_t)v44;
    v119 = v43;
    id v45 = sub_100424A90(0LL, &qword_1007074A0, &OBJC_CLASS___PKAppletSubcredential_ptr);
    id v46 = sub_10042D628();
    id v47 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v37, v45, v46);

    v121 = v45;
    if ((v47 & 0xC000000000000001LL) != 0)
    {
      if (v47 < 0) {
        __int128 v49 = v47;
      }
      else {
        __int128 v49 = v47 & 0xFFFFFFFFFFFFFF8LL;
      }
      __int128 v50 = __CocoaSet.makeIterator()(v49);
      __int128 v48 = Set.Iterator.init(_cocoa:)(v135, v50, v45, v46);
      id v47 = v135[0];
      v124 = v135[1];
      __int128 v51 = v135[2];
      id v52 = v135[3];
      v53 = v135[4];
    }

    else
    {
      id v52 = 0LL;
      v54 = -1LL << *(_BYTE *)(v47 + 32);
      v55 = *(void *)(v47 + 56);
      v124 = v47 + 56;
      NSURLResourceKey v56 = ~v54;
      NSURLFileProtectionType v57 = -v54;
      if (v57 < 64) {
        NSURLResourceKey v58 = ~(-1LL << v57);
      }
      else {
        NSURLResourceKey v58 = -1LL;
      }
      v53 = v58 & v55;
      __int128 v51 = v56;
    }

    v122 = v47 & 0x7FFFFFFFFFFFFFFFLL;
    v118 = v51;
    v123 = (unint64_t)(v51 + 64) >> 6;
    v125 = v47;
    if (v47 < 0)
    {
LABEL_57:
      uint64_t v37 = v122;
      v66 = __CocoaSet.Iterator.next()(v48);
      if (!v66) {
        goto LABEL_20;
      }
      uint64_t v37 = v66;
      v127 = v66;
      swift_unknownObjectRetain(v66);
      swift_dynamicCast(&aBlock, &v127, v120, v121, 7LL);
      v65 = aBlock;
      swift_unknownObjectRelease(v37);
      v61 = v52;
      v59 = v53;
      if (!v65) {
        goto LABEL_20;
      }
      goto LABEL_59;
    }

    while (v53)
    {
      v59 = (v53 - 1) & v53;
      v60 = __clz(__rbit64(v53)) | (v52 << 6);
      v61 = v52;
LABEL_55:
      v65 = (void **)*(id *)(*(void *)(v47 + 48) + 8 * v60);
      if (!v65) {
        goto LABEL_20;
      }
LABEL_59:
      uint64_t v37 = (uint64_t)v18;
      if ((v19(v41, v65) & 1) != 0)
      {
        v126 = v59;
        v67 = [v41 applicationIdentifier];
        if (!v67)
        {
          swift_release(v110);
          v98 = v111;
          _Block_release(v111);
          _Block_release(v98);
          _Block_release(v98);
          _Block_release(v98);
          _Block_release(v98);
          __break(1u);
LABEL_85:
          swift_release(v110);
          v99 = v111;
          _Block_release(v111);
          _Block_release(v99);
          _Block_release(v99);
          _Block_release(v99);
          _Block_release(v99);
          __break(1u);
LABEL_86:
          swift_release(v110);
          v100 = v111;
          _Block_release(v111);
          _Block_release(v100);
          _Block_release(v100);
          _Block_release(v100);
          _Block_release(v100);
          __break(1u);
          goto LABEL_87;
        }

        v69 = v67;
        uint64_t v70 = v41;
        v71 = v19;
        v72 = v18;
        v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67, v68);
        v75 = v74;

        v76 = [v65 identifier];
        if (!v76) {
          goto LABEL_85;
        }
        v78 = v76;
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76, v77);
        v81 = v80;

        uint64_t v37 = (uint64_t)&v134;
        sub_10043F0F4((uint64_t *)&aBlock, v73, v75, v79, v81);

        swift_bridgeObjectRelease(v129);
        __int128 v48 = (void *)swift_bridgeObjectRelease(v131);
        id v52 = v61;
        uint64_t v18 = v72;
        id v19 = v71;
        __int128 v41 = v70;
        id v47 = v125;
        v53 = v126;
        if (v125 < 0) {
          goto LABEL_57;
        }
      }

      else
      {

        id v52 = v61;
        v53 = v59;
        if (v47 < 0) {
          goto LABEL_57;
        }
      }
    }

    v62 = v52 + 1;
    if (__OFADD__(v52, 1LL))
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      if (v37 < 0) {
        v92 = v37;
      }
      else {
        v92 = v37 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v37);
      uint64_t v38 = _CocoaArrayWrapper.endIndex.getter(v92);
      if (!v38) {
        goto LABEL_75;
      }
      goto LABEL_19;
    }

    if (v62 < v123)
    {
      v63 = *(void *)(v124 + 8 * v62);
      v61 = v52 + 1;
      if (v63) {
        goto LABEL_54;
      }
      v61 = v52 + 2;
      if (v52 + 2 >= v123) {
        goto LABEL_20;
      }
      v63 = *(void *)(v124 + 8 * v61);
      if (v63) {
        goto LABEL_54;
      }
      v61 = v52 + 3;
      if (v52 + 3 >= v123) {
        goto LABEL_20;
      }
      v63 = *(void *)(v124 + 8 * v61);
      if (v63) {
        goto LABEL_54;
      }
      v61 = v52 + 4;
      if (v52 + 4 >= v123) {
        goto LABEL_20;
      }
      v63 = *(void *)(v124 + 8 * v61);
      if (v63)
      {
LABEL_54:
        v59 = (v63 - 1) & v63;
        v60 = __clz(__rbit64(v63)) + (v61 << 6);
        goto LABEL_55;
      }

      v64 = v52 + 5;
      while (v123 != v64)
      {
        v63 = *(void *)(v124 + 8 * v64++);
        if (v63)
        {
          v61 = v64 - 1;
          goto LABEL_54;
        }
      }
    }

        swift_bridgeObjectRelease(v11);
        goto LABEL_20;
      }
    }

    if (v11 < 0) {
      id v25 = v11;
    }
    else {
      id v25 = v11 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v11);
    __int128 v12 = _CocoaArrayWrapper.endIndex.getter(v25);
    swift_bridgeObjectRelease(v11);
    id v52 = v7;
    if (v12) {
      goto LABEL_5;
    }
    goto LABEL_19;
  }

  return result;
}

  __int128 v41 = 0LL;
  v117 = v114 & 0xC000000000000001LL;
  v113 = v114 & 0xFFFFFFFFFFFFFF8LL;
  v112 = v114 + 32;
  v120 = (char *)&type metadata for Swift.AnyObject + 8;
  v116 = v18;
  v115 = v40;
  do
  {
    if (v117)
    {
      __int128 v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v114);
    }

    else
    {
      if (v41 >= *(void *)(v113 + 16)) {
        goto LABEL_70;
      }
      __int128 v42 = *(id *)(v112 + 8 * v41);
    }

    uint64_t v43 = v42;
    id v44 = __OFADD__(v41, 1LL);
    id v45 = v41 + 1;
    if (v44) {
      goto LABEL_69;
    }
    id v46 = [v42 subcredentials];
    if (!v46) {
      goto LABEL_86;
    }
    uint64_t v39 = (uint64_t)v46;
    v119 = v45;
    id v47 = sub_100424A90(0LL, &qword_1007074A0, &OBJC_CLASS___PKAppletSubcredential_ptr);
    __int128 v48 = sub_10042D628();
    __int128 v49 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v39, v47, v48);

    v121 = v47;
    if ((v49 & 0xC000000000000001LL) != 0)
    {
      if (v49 < 0) {
        __int128 v51 = v49;
      }
      else {
        __int128 v51 = v49 & 0xFFFFFFFFFFFFFF8LL;
      }
      id v52 = __CocoaSet.makeIterator()(v51);
      __int128 v50 = Set.Iterator.init(_cocoa:)(v135, v52, v47, v48);
      __int128 v49 = v135[0];
      v124 = v135[1];
      v53 = v135[2];
      v54 = v135[3];
      v55 = v135[4];
    }

    else
    {
      v54 = 0LL;
      NSURLResourceKey v56 = -1LL << *(_BYTE *)(v49 + 32);
      NSURLFileProtectionType v57 = *(void *)(v49 + 56);
      v124 = v49 + 56;
      NSURLResourceKey v58 = ~v56;
      v59 = -v56;
      if (v59 < 64) {
        v60 = ~(-1LL << v59);
      }
      else {
        v60 = -1LL;
      }
      v55 = v60 & v57;
      v53 = v58;
    }

    v122 = v49 & 0x7FFFFFFFFFFFFFFFLL;
    v118 = v53;
    v123 = (unint64_t)(v53 + 64) >> 6;
    v125 = v49;
    if (v49 < 0)
    {
LABEL_57:
      uint64_t v39 = v122;
      v67 = __CocoaSet.Iterator.next()(v50);
      if (!v67) {
        goto LABEL_20;
      }
      uint64_t v39 = v67;
      v127 = v67;
      swift_unknownObjectRetain(v67);
      swift_dynamicCast(&aBlock, &v127, v120, v121, 7LL);
      v66 = aBlock;
      swift_unknownObjectRelease(v39);
      v62 = v54;
      uint64_t v18 = v55;
      if (!v66) {
        goto LABEL_20;
      }
      goto LABEL_59;
    }

    while (v55)
    {
      uint64_t v18 = (v55 - 1) & v55;
      v61 = __clz(__rbit64(v55)) | (v54 << 6);
      v62 = v54;
LABEL_55:
      v66 = (void **)*(id *)(*(void *)(v49 + 48) + 8 * v61);
      if (!v66) {
        goto LABEL_20;
      }
LABEL_59:
      uint64_t v39 = v20;
      if ((v21(v43, v66) & 1) != 0)
      {
        v126 = v18;
        v68 = v43;
        v69 = [v43 applicationIdentifier];
        if (!v69)
        {
          swift_release(v109);
          v98 = v110;
          _Block_release(v110);
          _Block_release(v98);
          _Block_release(v98);
          _Block_release(v98);
          _Block_release(v98);
          __break(1u);
LABEL_85:
          swift_release(v109);
          v99 = v110;
          _Block_release(v110);
          _Block_release(v99);
          _Block_release(v99);
          _Block_release(v99);
          _Block_release(v99);
          __break(1u);
LABEL_86:
          swift_release(v109);
          v100 = v110;
          _Block_release(v110);
          _Block_release(v100);
          _Block_release(v100);
          _Block_release(v100);
          _Block_release(v100);
          __break(1u);
          goto LABEL_87;
        }

        v71 = v69;
        v72 = v21;
        uint64_t v18 = v20;
        v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69, v70);
        v75 = v74;

        v76 = [v66 identifier];
        if (!v76) {
          goto LABEL_85;
        }
        v78 = v76;
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76, v77);
        v81 = v80;

        uint64_t v39 = (uint64_t)&v134;
        sub_10043F108((uint64_t *)&aBlock, v73, v75, v79, v81);

        swift_bridgeObjectRelease(v129);
        __int128 v50 = (void *)swift_bridgeObjectRelease(v131);
        v54 = v62;
        int v20 = v18;
        BOOL v21 = v72;
        uint64_t v43 = v68;
        __int128 v49 = v125;
        v55 = v126;
        if (v125 < 0) {
          goto LABEL_57;
        }
      }

      else
      {

        v54 = v62;
        v55 = v18;
        if (v49 < 0) {
          goto LABEL_57;
        }
      }
    }

    v63 = v54 + 1;
    if (__OFADD__(v54, 1LL))
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      if (v39 < 0) {
        v92 = v39;
      }
      else {
        v92 = v39 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v39);
      uint64_t v40 = _CocoaArrayWrapper.endIndex.getter(v92);
      if (!v40) {
        goto LABEL_75;
      }
      goto LABEL_19;
    }

    if (v63 < v123)
    {
      v64 = *(void *)(v124 + 8 * v63);
      v62 = v54 + 1;
      if (v64) {
        goto LABEL_54;
      }
      v62 = v54 + 2;
      if (v54 + 2 >= v123) {
        goto LABEL_20;
      }
      v64 = *(void *)(v124 + 8 * v62);
      if (v64) {
        goto LABEL_54;
      }
      v62 = v54 + 3;
      if (v54 + 3 >= v123) {
        goto LABEL_20;
      }
      v64 = *(void *)(v124 + 8 * v62);
      if (v64) {
        goto LABEL_54;
      }
      v62 = v54 + 4;
      if (v54 + 4 >= v123) {
        goto LABEL_20;
      }
      v64 = *(void *)(v124 + 8 * v62);
      if (v64)
      {
LABEL_54:
        uint64_t v18 = (v64 - 1) & v64;
        v61 = __clz(__rbit64(v64)) + (v62 << 6);
        goto LABEL_55;
      }

      v65 = v54 + 5;
      while (v123 != v65)
      {
        v64 = *(void *)(v124 + 8 * v65++);
        if (v64)
        {
          v62 = v65 - 1;
          goto LABEL_54;
        }
      }
    }

  __int128 v41 = 0LL;
  v117 = v114 & 0xC000000000000001LL;
  v113 = v114 & 0xFFFFFFFFFFFFFF8LL;
  v112 = v114 + 32;
  v120 = (char *)&type metadata for Swift.AnyObject + 8;
  v116 = v18;
  v115 = v40;
  do
  {
    if (v117)
    {
      __int128 v42 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v114);
    }

    else
    {
      if (v41 >= *(void *)(v113 + 16)) {
        goto LABEL_70;
      }
      __int128 v42 = *(id *)(v112 + 8 * v41);
    }

    uint64_t v43 = v42;
    id v44 = __OFADD__(v41, 1LL);
    id v45 = v41 + 1;
    if (v44) {
      goto LABEL_69;
    }
    id v46 = [v42 subcredentials];
    if (!v46) {
      goto LABEL_86;
    }
    uint64_t v39 = (uint64_t)v46;
    v119 = v45;
    id v47 = sub_100424A90(0LL, &qword_1007074A0, &OBJC_CLASS___PKAppletSubcredential_ptr);
    __int128 v48 = sub_10042D628();
    __int128 v49 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v39, v47, v48);

    v121 = v47;
    if ((v49 & 0xC000000000000001LL) != 0)
    {
      if (v49 < 0) {
        __int128 v51 = v49;
      }
      else {
        __int128 v51 = v49 & 0xFFFFFFFFFFFFFF8LL;
      }
      id v52 = __CocoaSet.makeIterator()(v51);
      __int128 v50 = Set.Iterator.init(_cocoa:)(v135, v52, v47, v48);
      __int128 v49 = v135[0];
      v124 = v135[1];
      v53 = v135[2];
      v54 = v135[3];
      v55 = v135[4];
    }

    else
    {
      v54 = 0LL;
      NSURLResourceKey v56 = -1LL << *(_BYTE *)(v49 + 32);
      NSURLFileProtectionType v57 = *(void *)(v49 + 56);
      v124 = v49 + 56;
      NSURLResourceKey v58 = ~v56;
      v59 = -v56;
      if (v59 < 64) {
        v60 = ~(-1LL << v59);
      }
      else {
        v60 = -1LL;
      }
      v55 = v60 & v57;
      v53 = v58;
    }

    v122 = v49 & 0x7FFFFFFFFFFFFFFFLL;
    v118 = v53;
    v123 = (unint64_t)(v53 + 64) >> 6;
    v125 = v49;
    if (v49 < 0)
    {
LABEL_57:
      uint64_t v39 = v122;
      v67 = __CocoaSet.Iterator.next()(v50);
      if (!v67) {
        goto LABEL_20;
      }
      uint64_t v39 = v67;
      v127 = v67;
      swift_unknownObjectRetain(v67);
      swift_dynamicCast(&aBlock, &v127, v120, v121, 7LL);
      v66 = aBlock;
      swift_unknownObjectRelease(v39);
      v62 = v54;
      uint64_t v18 = v55;
      if (!v66) {
        goto LABEL_20;
      }
      goto LABEL_59;
    }

    while (v55)
    {
      uint64_t v18 = (v55 - 1) & v55;
      v61 = __clz(__rbit64(v55)) | (v54 << 6);
      v62 = v54;
LABEL_55:
      v66 = (void **)*(id *)(*(void *)(v49 + 48) + 8 * v61);
      if (!v66) {
        goto LABEL_20;
      }
LABEL_59:
      uint64_t v39 = v20;
      if ((v21(v43, v66) & 1) != 0)
      {
        v126 = v18;
        v68 = v43;
        v69 = [v43 applicationIdentifier];
        if (!v69)
        {
          swift_release(v109);
          v98 = v110;
          _Block_release(v110);
          _Block_release(v98);
          _Block_release(v98);
          _Block_release(v98);
          _Block_release(v98);
          __break(1u);
LABEL_85:
          swift_release(v109);
          v99 = v110;
          _Block_release(v110);
          _Block_release(v99);
          _Block_release(v99);
          _Block_release(v99);
          _Block_release(v99);
          __break(1u);
LABEL_86:
          swift_release(v109);
          v100 = v110;
          _Block_release(v110);
          _Block_release(v100);
          _Block_release(v100);
          _Block_release(v100);
          _Block_release(v100);
          __break(1u);
          goto LABEL_87;
        }

        v71 = v69;
        v72 = v21;
        uint64_t v18 = v20;
        v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v69, v70);
        v75 = v74;

        v76 = [v66 identifier];
        if (!v76) {
          goto LABEL_85;
        }
        v78 = v76;
        v79 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76, v77);
        v81 = v80;

        uint64_t v39 = (uint64_t)&v134;
        sub_10043F108((uint64_t *)&aBlock, v73, v75, v79, v81);

        swift_bridgeObjectRelease(v129);
        __int128 v50 = (void *)swift_bridgeObjectRelease(v131);
        v54 = v62;
        int v20 = v18;
        BOOL v21 = v72;
        uint64_t v43 = v68;
        __int128 v49 = v125;
        v55 = v126;
        if (v125 < 0) {
          goto LABEL_57;
        }
      }

      else
      {

        v54 = v62;
        v55 = v18;
        if (v49 < 0) {
          goto LABEL_57;
        }
      }
    }

    v63 = v54 + 1;
    if (__OFADD__(v54, 1LL))
    {
      __break(1u);
LABEL_69:
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      if (v39 < 0) {
        v92 = v39;
      }
      else {
        v92 = v39 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v39);
      uint64_t v40 = _CocoaArrayWrapper.endIndex.getter(v92);
      if (!v40) {
        goto LABEL_75;
      }
      goto LABEL_19;
    }

    if (v63 < v123)
    {
      v64 = *(void *)(v124 + 8 * v63);
      v62 = v54 + 1;
      if (v64) {
        goto LABEL_54;
      }
      v62 = v54 + 2;
      if (v54 + 2 >= v123) {
        goto LABEL_20;
      }
      v64 = *(void *)(v124 + 8 * v62);
      if (v64) {
        goto LABEL_54;
      }
      v62 = v54 + 3;
      if (v54 + 3 >= v123) {
        goto LABEL_20;
      }
      v64 = *(void *)(v124 + 8 * v62);
      if (v64) {
        goto LABEL_54;
      }
      v62 = v54 + 4;
      if (v54 + 4 >= v123) {
        goto LABEL_20;
      }
      v64 = *(void *)(v124 + 8 * v62);
      if (v64)
      {
LABEL_54:
        uint64_t v18 = (v64 - 1) & v64;
        v61 = __clz(__rbit64(v64)) + (v62 << 6);
        goto LABEL_55;
      }

      v65 = v54 + 5;
      while (v123 != v65)
      {
        v64 = *(void *)(v124 + 8 * v65++);
        if (v64)
        {
          v62 = v65 - 1;
          goto LABEL_54;
        }
      }
    }

id sub_1000188A8(id result)
{
  if (result)
  {
    uint64_t v1 = (uint64_t)result;
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_100018A2C;
    v4[3] = &unk_100639300;
    v4[4] = result;
    sub_100018978(v4);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_100018C70;
    v3[3] = &unk_100639300;
    v3[4] = v1;
    sub_100018978(v3);
    v2[0] = _NSConcreteStackBlock;
    v2[1] = 3221225472LL;
    v2[2] = sub_100019234;
    v2[3] = &unk_100639610;
    v2[4] = v1;
    sub_100019674(v1, 0LL, v2);
    [*(id *)(v1 + 448) start];
    return [*(id *)(v1 + 160) start];
  }

  return result;
}

void sub_100018978(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (void *)PDOSTransactionCreate("PDServer.utility");
  id v3 = PDUtilityQueue();
  id v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10002AC10;
  v7[3] = &unk_10063AC90;
  id v8 = v2;
  id v9 = v1;
  id v5 = v1;
  id v6 = v2;
  dispatch_async(v4, v7);
}

uint64_t sub_100018A2C(uint64_t a1, uint64_t a2)
{
  if (PKSecureElementIsAvailable(a1, a2) || PKIsHandoffClient())
  {
    uint64_t v3 = *(void *)(a1 + 32);
    id v4 = *(void **)(v3 + 96);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    v6[2] = sub_100018AAC;
    v6[3] = &unk_100639300;
    v6[4] = v3;
    [v4 updateWebServiceConfigurationWithCompletion:v6];
  }

  sub_100018BCC(*(void *)(a1 + 32));
  return PDEnableAutomaticInternalLogging();
}

void sub_100018AAC(uint64_t a1)
{
}

void sub_100018AF0(uint64_t a1)
{
  if (a1)
  {
    id v12 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) sharedWebService]);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v12 context]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 configuration]);

    id v4 = (void *)objc_claimAutoreleasedReturnValue([v12 targetDevice]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 deviceRegion]);
    [v3 dynamicAssetPrefetchTimeIntervalForRegion:v5];
    double v7 = v6;

    id v8 = *(void **)(a1 + 576);
    if (v8) {
      id v8 = (void *)v8[5];
    }
    id v9 = v8;
    id v10 = PDUtilityQueue();
    __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    [v9 schedulePrefetchDynamicAssetsWithInterval:v11 queue:v7];
  }

void sub_100018BCC(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = PDLastLogDateDefault;
    if (sub_10002A1B0(a1, PDLastLogDateDefault) > 86400.0)
    {
      sub_10002A270(a1);
      id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      [v4 setObject:v3 forKey:v2];
    }
  }

void sub_100018C70(uint64_t a1)
{
  if ((PKStoreDemoModeEnabled() & 1) != 0 || PKUIOnlyDemoModeEnabled())
  {
    sub_100018DD8(*(id **)(a1 + 32));
    if (PKGenerateStoreDemoTransactionsDaily())
    {
      uint64_t v2 = PKLastGeneratedStoreDemoTransactionsDate();
      uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
      id v4 = v3;
      if (!v3
        || ([v3 timeIntervalSinceNow],
            double v6 = v5,
            double v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
            id v8 = [v7 compare:v4],
            v7,
            v8 == (id)-1LL)
        || fabs(v6 / 3600.0) >= 18.0)
      {
        uint64_t Object = PKLogFacilityTypeGetObject(6LL);
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          int v12 = 138412290;
          __int128 v13 = v4;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Regenerating demo transactions. Last generation date: %@",  (uint8_t *)&v12,  0xCu);
        }

        [*(id *)(*(void *)(a1 + 32) + 48) generateDemoTransactionsForAllPaymentPasses];
        __int128 v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
        PKSetLastGeneratedStoreDemoTransactionsDate();
      }
    }
  }

void sub_100018DD8(id *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([a1 catalogOfRecord]);
  uint64_t v39 = a1;
  uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v2 groups]);
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v54 = 0u;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a1[6] passesOfType:1]);
  id v4 = [v3 countByEnumeratingWithState:&v51 objects:v56 count:16];
  if (!v4)
  {
    double v6 = 0LL;
    double v7 = 0LL;
    goto LABEL_20;
  }

  id v5 = v4;
  double v6 = 0LL;
  double v7 = 0LL;
  uint64_t v8 = *(void *)v52;
  do
  {
    for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v52 != v8) {
        objc_enumerationMutation(v3);
      }
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v51 + 1) + 8 * (void)i) paymentPass]);
      if ([v10 hasAssociatedPeerPaymentAccount])
      {
        uint64_t v11 = objc_claimAutoreleasedReturnValue([v10 uniqueID]);
        int v12 = v7;
        double v7 = (void *)v11;
LABEL_13:

        goto LABEL_14;
      }

      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v10 associatedAccountServiceAccountIdentifier]);

      if (v13)
      {
        uint64_t v14 = objc_claimAutoreleasedReturnValue([v10 uniqueID]);
        int v12 = v6;
        double v6 = (void *)v14;
        goto LABEL_13;
      }

LABEL_14:
      if (v7 && v6) {
        goto LABEL_20;
      }
    }

    id v5 = [v3 countByEnumeratingWithState:&v51 objects:v56 count:16];
  }

  while (v5);
LABEL_20:
  __int128 v42 = v6;

  __int128 v49 = 0u;
  __int128 v50 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  __int128 v41 = v2;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue([v2 groups]);
  id v15 = [obj countByEnumeratingWithState:&v47 objects:v55 count:16];
  if (v15)
  {
    id v16 = v15;
    uint64_t v17 = 0LL;
    uint64_t v18 = 0LL;
    uint64_t v19 = *(void *)v48;
    while (1)
    {
      for (uint64_t j = 0LL; j != v16; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v48 != v19) {
          objc_enumerationMutation(obj);
        }
        BOOL v21 = *(void **)(*((void *)&v47 + 1) + 8LL * (void)j);
        unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue([v21 uniqueIDs]);
        unsigned __int8 v23 = [v22 containsObject:v7];

        if ((v23 & 1) != 0)
        {
          BOOL v24 = v18;
          id v25 = v17;
          unsigned int v26 = v21;
LABEL_29:
          id v29 = v21;

          uint64_t v17 = v25;
          goto LABEL_30;
        }

        unsigned int v26 = v18;
        id v27 = (void *)objc_claimAutoreleasedReturnValue([v21 uniqueIDs]);
        unsigned int v28 = [v27 containsObject:v42];

        BOOL v24 = v17;
        id v25 = v21;
        if (v28) {
          goto LABEL_29;
        }
LABEL_30:
        uint64_t v18 = v26;
        if (v26 && v17) {
          goto LABEL_36;
        }
      }

      id v16 = [obj countByEnumeratingWithState:&v47 objects:v55 count:16];
      if (!v16) {
        goto LABEL_36;
      }
    }
  }

  uint64_t v17 = 0LL;
  uint64_t v18 = 0LL;
LABEL_36:

  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3221225472LL;
  v45[2] = sub_10002A4B8;
  v45[3] = &unk_10063AC48;
  id v30 = v40;
  id v46 = v30;
  id v31 = objc_retainBlock(v45);
  id v32 = (char *)[v30 count];
  unsigned int v33 = v32 - 1;
  if (v7 && v42)
  {
    uint64_t v34 = v32;
    id v35 = v42;
    ((void (*)(void *, char *, void *))v31[2])(v31, v33, v17);
    ((void (*)(void *, char *, void *))v31[2])(v31, v34 - 2, v18);
    uint64_t v36 = v39;
  }

  else
  {
    uint64_t v36 = v39;
    if (v42)
    {
      id v35 = v42;
      ((void (*)(void *, char *, void *))v31[2])(v31, v33, v17);
    }

    else if (v7)
    {
      id v35 = v7;
      ((void (*)(void *, char *, void *))v31[2])(v31, v33, v18);
    }

    else
    {
      id v35 = 0LL;
    }
  }

  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Updating store demo pass order.", buf, 2u);
  }

  [v36[42] updateDefaultPaymentPassIdentifier:v35];
  [v36[4] writeCatalogOfRecord:v41 source:4];
}
    }
  }

  if (a3 == 1)
  {
    [v7 setIsSRD:PKIsSRD()];
    objc_msgSend( v7,  "setInFailForward:",  +[PKSecureElement isInFailForward](PKSecureElement, "isInFailForward"));
  }

  if (v6) {
    v6[2](v6, v7);
  }
}

    return objc_msgSend(*(id *)(a1 + 40), "_queue_completeDeviceUpgradeTasks");
  }

  uint64_t v2 = PDUpgradeTasksRetryCount();
  if (v2 <= 2)
  {
    uint64_t v3 = v2 + 1;
    id v4 = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v13 = 134218240;
      uint64_t v14 = v3;
      id v15 = 2048;
      id v16 = PDUpgradeTasksVersion();
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Device upgrade tasks failed and will retry at next scheduled activity with upgrade task version: %ld and retryCount: %ld",  (uint8_t *)&v13,  0x16u);
    }

    double v6 = v3;
    return (id)PDSetUpgradeTasksRetryCount(v6);
  }

  id v10 = PDUpgradeTasksVersion();
  uint64_t v11 = PKLogFacilityTypeGetObject(6LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v13 = 134217984;
    uint64_t v14 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Device upgrade tasks failed and have exceeded retry, marking upgrade task version: %ld as completed and resetting retries to 0",  (uint8_t *)&v13,  0xCu);
  }

  PDSetUpgradeTasksVersion(v10 + 1);
  if (v10 >= 1)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      id v9 = "Device upgrade tasks completed after exceeding retries";
      goto LABEL_13;
    }

    goto LABEL_14;
  }

  double v6 = 0LL;
  return (id)PDSetUpgradeTasksRetryCount(v6);
}
}

    goto LABEL_15;
  }

  PDOpenWalletUI(0LL, v5);
LABEL_15:
}

  return v12;
}

  return v17;
}
}

      id v5 = 0LL;
      __int128 v13 = 0LL;
LABEL_15:

      goto LABEL_16;
    }

    if (v5)
    {
      v18.receiver = self;
      v18.super_class = (Class)&OBJC_CLASS___PDBarcodeServiceConnectionForbiddenErrorResponse;
      __int128 v13 = -[PDBarcodeServiceConnectionForbiddenErrorResponse init](&v18, "init");
      if (!v13)
      {
        self = 0LL;
        goto LABEL_16;
      }

      self = (PDBarcodeServiceConnectionForbiddenErrorResponse *)objc_claimAutoreleasedReturnValue( [v5 PKStringForKey:@"errorCode"]);
      v13->_errorCode = (int64_t)-[PDBarcodeServiceConnectionForbiddenErrorResponse integerValue]( self,  "integerValue");
      id v15 = objc_claimAutoreleasedReturnValue([v5 PKStringForKey:@"debugDescription"]);
      serverDebugDescription = v13->_serverDebugDescription;
      v13->_serverDebugDescription = (NSString *)v15;
      goto LABEL_15;
    }
  }

  else
  {
    id v5 = 0LL;
  }

  __int128 v13 = 0LL;
LABEL_16:

  return v13;
}

    __int128 v13 = 0LL;
    goto LABEL_13;
  }

  __break(1u);
  return result;
}
}
}
}

  if (!self->_transitBalanceCurrencyCode || !self->_transitBalance)
  {
    id v29 = (void *)objc_claimAutoreleasedReturnValue(-[PDPassPaymentTransactionUserNotification _locationString](self, "_locationString"));
    goto LABEL_37;
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v7 amount]);

  uint64_t v19 = &_s10Foundation22_convertErrorToNSErrorySo0E0Cs0C0_pF_ptr;
  if (v18)
  {
    int v20 = (void *)objc_claimAutoreleasedReturnValue([v7 amount]);
    if (!self->_transitBalanceCurrencyCode)
    {
      BOOL v21 = (NSString *)objc_claimAutoreleasedReturnValue([v7 currencyCode]);
      unsigned int v22 = self->_transitBalanceCurrencyCode;
      self->_transitBalanceCurrencyCode = v21;
    }

    if (v20) {
      goto LABEL_20;
    }
LABEL_34:
    id v25 = self->_transitBalanceCurrencyCode;
    goto LABEL_35;
  }

  v55 = v6;
  NSURLResourceKey v56 = v4;
  int v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
  NSURLFileProtectionType v57 = 0u;
  NSURLResourceKey v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  __int128 v54 = v7;
  id v30 = (void *)objc_claimAutoreleasedReturnValue([v7 amounts]);
  id v31 = [v30 countByEnumeratingWithState:&v57 objects:v61 count:16];
  if (v31)
  {
    id v32 = v31;
    unsigned int v33 = *(void *)v58;
    do
    {
      uint64_t v34 = 0LL;
      id v35 = v20;
      do
      {
        if (*(void *)v58 != v33) {
          objc_enumerationMutation(v30);
        }
        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v57 + 1) + 8 * (void)v34) amount]);
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 amount]);

        int v20 = (void *)objc_claimAutoreleasedReturnValue([v35 decimalNumberByAdding:v37]);
        uint64_t v34 = (char *)v34 + 1;
        id v35 = v20;
      }

      while (v32 != v34);
      id v32 = [v30 countByEnumeratingWithState:&v57 objects:v61 count:16];
    }

    while (v32);
  }

  if (self->_transitBalanceCurrencyCode)
  {
    double v6 = v55;
    id v4 = v56;
    double v7 = v54;
  }

  else
  {
    double v7 = v54;
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v54 amounts]);
    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 firstObject]);
    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v39 amount]);
    __int128 v41 = (NSString *)objc_claimAutoreleasedReturnValue([v40 currency]);
    __int128 v42 = self->_transitBalanceCurrencyCode;
    self->_transitBalanceCurrencyCode = v41;

    double v6 = v55;
    id v4 = v56;
  }

  uint64_t v19 = &_s10Foundation22_convertErrorToNSErrorySo0E0Cs0C0_pF_ptr;
  if (!v20) {
    goto LABEL_34;
  }
LABEL_20:
  unsigned __int8 v23 = (void *)objc_claimAutoreleasedReturnValue([v19[369] zero]);
  BOOL v24 = [v20 isEqualToNumber:v23];

  id v25 = self->_transitBalanceCurrencyCode;
  if ((v24 & 1) != 0)
  {
LABEL_35:
    uint64_t v43 = PKFormattedCurrencyStringFromNumber(self->_transitBalance, v25);
    id v27 = (void *)objc_claimAutoreleasedReturnValue(v43);
    unsigned int v28 = PKLocalizedPaymentString(@"TRANSIT_NOTIFICATION_CURRENT_BALANCE_FORMAT", @"%@", v27);
    goto LABEL_36;
  }

  unsigned int v26 = PKFormattedCurrencyStringFromNumber(self->_transitBalance, v25);
  id v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
  unsigned int v28 = PKLocalizedPaymentString(@"TRANSIT_NOTIFICATION_NEW_BALANCE_FORMAT", @"%@", v27);
LABEL_36:
  id v29 = (void *)objc_claimAutoreleasedReturnValue(v28);

LABEL_37:
  id v44 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v7,  "formattedTransitTransactionMessageForPass:suppressNoChargeAmount:",  v6,  objc_msgSend(v6, "shouldSuppressNoChargeAmount")));
  id v45 = v29;
  id v46 = v45;
  __int128 v47 = v45;
  if (v44)
  {
    if (v45)
    {
      __int128 v47 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"%@\n%@", v44, v45));
    }

    else
    {
      __int128 v47 = v44;
    }
  }

  return v47;
}

      id v9 = *(void *)(a1 + 40);
      if (v9)
      {
        id v10 = *(void (**)(void))(v9 + 16);
        goto LABEL_20;
      }

      break;
    case 2uLL:
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v12) = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Notification Authorization already authorized",  (uint8_t *)&v12,  2u);
      }

      uint64_t v11 = *(void *)(a1 + 40);
      if (v11)
      {
        id v10 = *(void (**)(void))(v11 + 16);
LABEL_20:
        v10();
      }

      break;
    default:
      break;
  }
}
}

      id v5 = 0LL;
      __int128 v13 = 0LL;
LABEL_15:

      goto LABEL_16;
    }

    if (v5)
    {
      v18.receiver = self;
      v18.super_class = (Class)&OBJC_CLASS___PDNotificationServiceConnectionForbiddenErrorResponse;
      __int128 v13 = -[PDNotificationServiceConnectionForbiddenErrorResponse init](&v18, "init");
      if (!v13)
      {
        self = 0LL;
        goto LABEL_16;
      }

      self = (PDNotificationServiceConnectionForbiddenErrorResponse *)objc_claimAutoreleasedReturnValue( [v5 PKStringForKey:@"errorCode"]);
      v13->_errorCode = (int64_t)-[PDNotificationServiceConnectionForbiddenErrorResponse integerValue]( self,  "integerValue");
      id v15 = objc_claimAutoreleasedReturnValue([v5 PKStringForKey:@"debugDescription"]);
      serverDebugDescription = v13->_serverDebugDescription;
      v13->_serverDebugDescription = (NSString *)v15;
      goto LABEL_15;
    }
  }

  else
  {
    id v5 = 0LL;
  }

  __int128 v13 = 0LL;
LABEL_16:

  return v13;
}
}
      }

      return v6;
    default:
      __int128 v13 = 0LL;
      goto LABEL_14;
  }

      return v6;
    case 3uLL:
    case 4uLL:
    case 5uLL:
      id v9 = PKLocalizedCocoonString(@"NOTIFICATION_FINANCING_PLAN_DISPUTE_RESOLVED_TITLE");
      id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v11 = PKLocalizedCocoonString( @"NOTIFICATION_FINANCING_PLAN_DISPUTE_RESOLVED_MESSAGE",  @"%@",  v8);
      goto LABEL_8;
    case 6uLL:
LABEL_4:
      __int128 v13 = PKLocalizedCocoonString(@"NOTIFICATION_FINANCING_PLAN_DISPUTE_GENERIC_TITLE");
      id v10 = (void *)objc_claimAutoreleasedReturnValue(v13);
      uint64_t v11 = PKLocalizedCocoonString( @"NOTIFICATION_FINANCING_PLAN_DISPUTE_GENERIC_MESSAGE",  @"%@",  v8);
      goto LABEL_8;
    default:
      goto LABEL_13;
  }
}

        uint64_t v14 = [objc_alloc((Class)a1) initWithRecordFetchTaskWithTask:v6 transactionSourcePID:v13 cloudStoreZonePID:v15 inDatabase:v7];
        goto LABEL_19;
      }

      int v20 = PKLogFacilityTypeGetObject(9LL);
      uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v22 = 138412546;
        unsigned __int8 v23 = v6;
        BOOL v24 = 2112;
        id v25 = v10;
        uint64_t v19 = "Error tried to insert task %@ with a cloudStoreZone %@ that doesnt exist in the database";
        goto LABEL_17;
      }
    }

    uint64_t v14 = 0LL;
    goto LABEL_19;
  }

  uint64_t v14 = 0LL;
LABEL_20:

  return v14;
}

  if (v12)
  {
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v24 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
      *(_DWORD *)buf = 138412290;
      uint64_t v36 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Reverse geocoding for transaction %@",  buf,  0xCu);
    }

    geocoder = v28->_geocoder;
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472LL;
    v30[2] = sub_10032B89C;
    v30[3] = &unk_1006390F0;
    id v31 = v6;
    id v32 = v8;
    -[CLGeocoder reverseGeocodeLocation:completionHandler:]( geocoder,  "reverseGeocodeLocation:completionHandler:",  v12,  v30);
  }

  else
  {
    ((void (*)(void *, id, void, void, void))v8[2])(v8, v6, 0LL, 0LL, 0LL);
  }

    LOBYTE(v12) = sub_1002CD0D0((BOOL)v4, 16081LL);
  }
}
}

  __break(1u);
  return result;
}

void sub_100019234(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472LL;
  v1[2] = sub_100019288;
  v1[3] = &unk_100639300;
  v1[4] = *(void *)(a1 + 32);
  sub_100018978(v1);
}

void sub_100019288(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 576LL);
  if (v2) {
    uint64_t v3 = *(void **)(v2 + 24);
  }
  else {
    uint64_t v3 = 0LL;
  }
  [v3 recalculateNotificationNames];
  [*(id *)(*(void *)(a1 + 32) + 336) updateContactlessPassesAvailability];
  [*(id *)(*(void *)(a1 + 32) + 336) updateDefaultPaymentPassIfNeeded];
  [*(id *)(*(void *)(a1 + 32) + 512) scheduleVerifyAllIssuerBoundPassesActivity];
  sub_10001935C(*(void *)(a1 + 32));
  if ([*(id *)(*(void *)(a1 + 32) + 48) passExistsWithPassType:1])
  {
    [*(id *)(*(void *)(a1 + 32) + 96) connect];
    [*(id *)(*(void *)(a1 + 32) + 96) scheduleConsistencyCheckIfNecessary];
  }

  id v4 = (id)objc_claimAutoreleasedReturnValue(+[PEPServiceConfiguration sharedInstance](&OBJC_CLASS___PEPServiceConfiguration, "sharedInstance"));
  [v4 registerNetworkDefaultsForAppID:@"com.apple.passd"];
}

void sub_10001935C(uint64_t a1)
{
  if (a1)
  {
    int v1 = PKAccessPassVisibilityEnabled();
    int v2 = PDMigratedAvailableWhileLocked();
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
    uint64_t v4 = MCFeatureCardsWhileLockedAllowed;
    unsigned int v5 = [v3 effectiveBoolValueForSetting:MCFeatureCardsWhileLockedAllowed];

    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    double v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = @"N";
      if (v1) {
        id v9 = @"Y";
      }
      else {
        id v9 = @"N";
      }
      if (v2) {
        id v10 = @"Y";
      }
      else {
        id v10 = @"N";
      }
      int v29 = 138412802;
      id v30 = v9;
      __int16 v31 = 2112;
      id v32 = v10;
      if (v5 == 1) {
        uint64_t v8 = @"Y";
      }
      __int16 v33 = 2112;
      uint64_t v34 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Migrating AvailableWhileLocked: featureEnabled: %@ hasMigrated: %@ current: %@",  (uint8_t *)&v29,  0x20u);
    }

    int v14 = v2 ^ 1;
    if (((v1 ^ 1) & 1) != 0 || v14)
    {
      if (((v1 ^ 1 | v2) & 1) != 0)
      {
        if (((v1 | v14) & 1) != 0)
        {
          uint64_t IsAvailable = PKUserIntentIsAvailable(v11, v12, v13);
          int v16 = IsAvailable;
          int v19 = PDSanitizedAvailableWhileLocked(IsAvailable, v17, v18);
          if (v16)
          {
            if ((v19 & 1) == 0)
            {
              int v20 = (void *)objc_claimAutoreleasedReturnValue( +[MCProfileConnection sharedConnection]( &OBJC_CLASS___MCProfileConnection,  "sharedConnection"));
              [v20 setBoolValue:1 forSetting:v4];

              PDSetSanitizedAvailableWhileLocked(1LL);
            }

            if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_36;
            }
            LOWORD(v29) = 0;
            BOOL v21 = "Migrating AvailableWhileLocked: (Old) sanitizing";
          }

          else
          {
            if (v19) {
              PDSetSanitizedAvailableWhileLocked(0LL);
            }
            if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_36;
            }
            LOWORD(v29) = 0;
            BOOL v21 = "Migrating AvailableWhileLocked: (Old) resetting sanitization";
          }

          id v27 = v7;
          uint32_t v28 = 2;
          goto LABEL_35;
        }

        uint64_t locked = PDAvailableWhileLockedPreviousSetting(v11, v12, v13);
        id v25 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
        [v25 setBoolValue:locked forSetting:v4];

        PDSetMigratedAvailableWhileLocked(0LL);
        PDSetSanitizedAvailableWhileLocked(1LL);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v26 = @"N";
          if ((_DWORD)locked) {
            unsigned int v26 = @"Y";
          }
          int v29 = 138412290;
          id v30 = v26;
          BOOL v21 = "Migrating AvailableWhileLocked: (New -> Old) previous: %@";
LABEL_29:
          id v27 = v7;
          uint32_t v28 = 12;
LABEL_35:
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v21, (uint8_t *)&v29, v28);
        }
      }

      else
      {
        PDSetAvailableWhileLockedPreviousSetting(v5 == 1);
        unsigned int v22 = (void *)objc_claimAutoreleasedReturnValue(+[MCProfileConnection sharedConnection](&OBJC_CLASS___MCProfileConnection, "sharedConnection"));
        [v22 setBoolValue:0 forSetting:v4];

        PDSetMigratedAvailableWhileLocked(1LL);
        PDSetSanitizedAvailableWhileLocked(1LL);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          unsigned __int8 v23 = @"N";
          if (v5 == 1) {
            unsigned __int8 v23 = @"Y";
          }
          int v29 = 138412290;
          id v30 = v23;
          BOOL v21 = "Migrating AvailableWhileLocked: (Old -> New) current: %@";
          goto LABEL_29;
        }
      }

LABEL_36:
    }
  }

  return v3 != 0LL;
}

    __int16 v31 = 0LL;
    id v10 = v67;
    uint64_t v13 = v25;
LABEL_52:
    int v14 = v64;
    goto LABEL_53;
  }

  if (v16 == (id)2)
  {
    v67 = v10;
    int v19 = (id)objc_claimAutoreleasedReturnValue([v12 remainingMinimumPayment]);
    int v20 = objc_claimAutoreleasedReturnValue([v14 minimumDue]);
    BOOL v21 = (void *)v20;
    if (v20) {
      unsigned int v22 = (void *)v20;
    }
    else {
      unsigned int v22 = v19;
    }
    unsigned __int8 v23 = v22;
    if (v21 && v19 && [v19 compare:v21] == (id)-1)
    {
      v62 = self;
      v64 = v14;
      id v25 = v13;
      id v35 = v19;

      BOOL v24 = 1;
      unsigned __int8 v23 = v35;
LABEL_30:
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
      uint64_t v37 = [v36 compare:v23];

      if (v37 == (id)-1LL)
      {
        uint64_t v13 = v25;
        if (a5 != 1)
        {
          uint64_t v38 = v62;
          if (!a5)
          {
            uint64_t v39 = @"ACCOUNT_SERVICE_PAYMENT_SCHEDULED_NOTIFICATION_MINIMUM_PAYMENT_TOMORROW_BODY_FORMAT";
            uint64_t v40 = @"ACCOUNT_SERVICE_PAYMENT_SCHEDULED_NOTIFICATION_REMAINING_MINIMUM_PAYMENT_TOMORROW_BODY_FORMAT";
LABEL_40:
            if (v24) {
              id v44 = v40;
            }
            else {
              id v44 = v39;
            }
            id v45 = PKLocalizedFeatureString(v44, v38->_featureIdentifier);
            id v46 = objc_claimAutoreleasedReturnValue(v45);
            __int128 v47 = PKFormattedCurrencyStringFromNumber(v23, v13);
            __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
            v66 = (void *)v46;
            __int128 v49 = PKStringWithValidatedFormat(v46, @"%@");
            __int16 v31 = (void *)objc_claimAutoreleasedReturnValue(v49);
            id v10 = v67;
LABEL_51:

            goto LABEL_52;
          }

    sub_100422D78(v1);
    return;
  }

  __break(1u);
}

void sub_100019674(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  double v7 = (void (**)(void, void))v5;
  if (a1)
  {
    if ((PDProtectedDataAvailable() & 1) != 0)
    {
      if ((PKUIOnlyDemoModeEnabled() & 1) != 0
        || (PKStoreDemoModeEnabled() & 1) != 0
        || PKHandsOnDemoModeEnabled())
      {
        [*(id *)(a1 + 48) passExistsWithPassType:1];
LABEL_8:
        uint64_t Object = PKLogFacilityTypeGetObject(6LL);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(Object);
        if (!os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
        {
LABEL_11:

LABEL_12:
          if (!v7) {
            goto LABEL_18;
          }
          goto LABEL_17;
        }

        *(_WORD *)buf = 0;
        id v10 = "Skipping Secure Element Access Policy validation - in demo mode.";
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
        goto LABEL_11;
      }

      char v13 = PKPPTTestingEnabled();
      unsigned int v14 = [*(id *)(a1 + 48) passExistsWithPassType:1];
      if ((v13 & 1) != 0) {
        goto LABEL_8;
      }
      unsigned int v15 = v14;
      int v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) sharedWebService]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 context]);
      unsigned int v18 = [v17 isRegistered] | v15;

      uint64_t v19 = PKLogFacilityTypeGetObject(6LL);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v19);
      BOOL v20 = os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT);
      if (v18 != 1)
      {
        if (!v20) {
          goto LABEL_11;
        }
        *(_WORD *)buf = 0;
        id v10 = "Skipping Secure Element Access Policy validation.";
        goto LABEL_10;
      }

      if (v20)
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_DEFAULT,  "Validating Secure Element access policies...",  buf,  2u);
      }

      v46[0] = _NSConcreteStackBlock;
      v46[1] = 3221225472LL;
      v46[2] = sub_10002971C;
      v46[3] = &unk_10063AAC8;
      v46[4] = a1;
      BOOL v21 = v7;
      id v47 = v21;
      unsigned int v22 = objc_retainBlock(v46);
      int v24 = PKPasscodeEnabled(v22, v23);
      int v25 = PKAutomaticLoginEnabled();
      if (!v24)
      {
        unsigned int v26 = (void (*)(void *, uint64_t, void))v22[2];
        id v27 = v22;
        uint64_t v28 = 1LL;
        goto LABEL_29;
      }

      if (v25)
      {
        unsigned int v26 = (void (*)(void *, uint64_t, void))v22[2];
        id v27 = v22;
        uint64_t v28 = 3LL;
LABEL_29:
        v26(v27, v28, 0LL);
LABEL_43:

        goto LABEL_18;
      }

      int v29 = *(void **)(a1 + 72);
      if (v29) {
        unint64_t v30 = (unint64_t)[v29 ownershipStateForCurrentUser];
      }
      else {
        unint64_t v30 = 3LL;
      }
      if (v15)
      {
        if (v30 <= 7)
        {
          if (((1LL << v30) & 0xB2) != 0)
          {
            ((void (*)(void *, uint64_t, unint64_t))v22[2])(v22, 2LL, v30);
            goto LABEL_43;
          }

          if (((1LL << v30) & 0xD) == 0)
          {
            v42[0] = _NSConcreteStackBlock;
            v42[1] = 3221225472LL;
            v42[2] = sub_100029A2C;
            v42[3] = &unk_10063AB18;
            uint64_t v43 = v22;
            uint64_t v45 = 6LL;
            id v44 = v21;
            PKRootVolumeIsBootVolume(v42);

            __int16 v33 = v43;
            goto LABEL_42;
          }

          goto LABEL_41;
        }
      }

      else if (v30 <= 3 && v30 != 1)
      {
LABEL_41:
        uint64_t v34 = *(void **)(a1 + 72);
        v37[0] = _NSConcreteStackBlock;
        v37[1] = 3221225472LL;
        v37[2] = sub_100029B7C;
        v37[3] = &unk_10063AB68;
        uint64_t v38 = v21;
        uint64_t v39 = v22;
        uint64_t v40 = a2;
        unint64_t v41 = v30;
        [v34 pairingStateWithCompletion:v37];

        __int16 v33 = v38;
        goto LABEL_42;
      }

      id v31 = PDDefaultQueue();
      id v32 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v31);
      v35[0] = _NSConcreteStackBlock;
      v35[1] = 3221225472LL;
      v35[2] = sub_100029DBC;
      v35[3] = &unk_10063A830;
      uint64_t v36 = v21;
      dispatch_async(v32, v35);

      __int16 v33 = v36;
LABEL_42:

      goto LABEL_43;
    }

    uint64_t v11 = PKLogFacilityTypeGetObject(6LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Cannot validate Secure Element access policies - data unavailable. Deferring...",  buf,  2u);
    }

    if (v7) {
LABEL_17:
    }
      v7[2](v7, 1LL);
  }

LABEL_18:
}

    if (([*(id *)(a1 + 32) _writePass:v5 withSettings:v9 | (16 * (PKValueAddedServicesAutomaticSelectionDefaultForPass(v5) != 0)) error:&v16] & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_19;
  }

    -[PDCloudStoreContainer setOperationError:](self, "setOperationError:", v6);
    -[PDPassSyncCloudStoreContainer advanceToNextState:](self, "advanceToNextState:", 3LL);

    return;
  }

  if (!self->_isReadOnly)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainerConfiguration logDescription](self->_configuration, "logDescription"));
      id v10 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
      unsigned int v14 = 138543618;
      unsigned int v15 = v9;
      int v16 = 2112;
      uint64_t v17 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] asking %@ to preapre for syncing",  (uint8_t *)&v14,  0x16u);
    }

    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(-[PDPassSyncCloudStoreContainer localStore](self, "localStore"));
    objc_msgSend( v11,  "preapareForSyncingAndRegisterChanges:",  -[PDPassSyncCloudStoreContainer isDeltaSyncPossible](self, "isDeltaSyncPossible"));
  }

  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainerConfiguration logDescription](self->_configuration, "logDescription"));
    unsigned int v14 = 138543362;
    unsigned int v15 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] did preapare for setup, advancing",  (uint8_t *)&v14,  0xCu);
  }

  -[PDPassSyncCloudStoreContainer passOnHandlingStateChange](self, "passOnHandlingStateChange");
}
}

    uint64_t v70 = v25;
    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[PKPaymentTransaction recordNamePrefix](&OBJC_CLASS___PKPaymentTransaction, "recordNamePrefix"));
    uint64_t v39 = objc_claimAutoreleasedReturnValue([v38 stringByAppendingString:*(void *)(a1 + 48)]);

    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    v72 = (void *)v39;
    unint64_t v41 = objc_claimAutoreleasedReturnValue([v40 cloudStoreRecordWithRecordName:v39 recordType:v18 inCloudStoreZone:v76]);

    __int128 v42 = (void *)v41;
    objc_msgSend(*(id *)(a1 + 56), "pk_safelyAddObject:", v41);
    uint64_t v43 = PKLogFacilityTypeGetObject(9LL);
    id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
    uint64_t v45 = os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT);
    if (v42)
    {
      if (v45)
      {
        id v46 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138543362;
        v80 = v46;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Not fetching TransactionDeviceData recordType for transaction with service id %{public}@ since a cache of the Transaction recordType is present",  buf,  0xCu);
      }

      id v47 = *(void **)(a1 + 32);
      __int128 v48 = *(void *)(a1 + 48);
      __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([v42 description]);
      id v77 = v49;
      __int128 v50 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v77, 1LL));
      [v47 reportContainerChangeSignpostEventType:53 stateName:v48 objectNames:v50 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
    }

    else
    {
      if (v45)
      {
        NSURLFileProtectionType v57 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138543362;
        v80 = v57;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Need PKCloudTransactionDeviceDataRecordType record type for transaction with service id %{public}@.",  buf,  0xCu);
      }

      NSURLResourceKey v58 = (void *)objc_claimAutoreleasedReturnValue([v7 recordsWithRecordType:v15]);
      v59 = (void *)objc_claimAutoreleasedReturnValue([v58 firstObject]);

      v69 = v59;
      v60 = (void *)objc_claimAutoreleasedReturnValue([v59 recordID]);
      __int128 v50 = (void *)objc_claimAutoreleasedReturnValue([v60 zoneID]);

      if (v50)
      {
        id v44 = -[CKRecordID initWithRecordName:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecordID),  "initWithRecordName:zoneID:",  v72,  v50);
        [*(id *)(a1 + 64) addObject:v44];
      }

      else if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        v68 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138543362;
        v80 = v68;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "Cannot fetch PKCloudTransactionDeviceDataRecordType record type for transaction with service id %{public}@ bec ause there is no associated zone.",  buf,  0xCu);
      }

      __int128 v49 = v69;
      __int128 v42 = 0LL;
    }

    int v25 = v70;
LABEL_44:
    id v5 = v74;
LABEL_45:

LABEL_46:
  }

  objc_autoreleasePoolPop(context);
}
}

        self->_hasQueriedDefaultCreditAccountHasUnderageParticipant = 1;
      }
    }
  }

  return self->_defaultCreditAccountHasUnderageParticipant;
}

  return v8;
}

  return (char)v21;
}

    unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterInstallment upcomingInstallmentsForAccountIdentifier:limit:inDatabase:]( PayLaterInstallment,  "upcomingInstallmentsForAccountIdentifier:limit:inDatabase:",  v6,  [v4 upcomingInstallmentsLimit],  self->_database));
    [v7 setUpcomingInstallments:v18];

    if ((v11 & 8) == 0)
    {
LABEL_8:
      if ((v11 & 0x10) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }

    if (!v61[5])
    {
      id v32 = (void *)objc_claimAutoreleasedReturnValue(-[PDDatabaseManager peerPaymentAccount](self, "peerPaymentAccount"));
      __int16 v33 = (void *)objc_claimAutoreleasedReturnValue([v32 associatedAccountInformation]);
      v41[0] = _NSConcreteStackBlock;
      v41[1] = 3221225472LL;
      v41[2] = sub_100143F24;
      v41[3] = &unk_100645850;
      v41[4] = self;
      uint64_t v34 = v8;
      __int128 v42 = v34;
      uint64_t v43 = &v60;
      id v44 = &v50;
      uint64_t v45 = &v56;
      [v33 enumerateAssociatedAccountsUsingBlock:v41];

      if (!v61[5])
      {
        uint64_t Object = PKLogFacilityTypeGetObject(9LL);
        uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v67 = v34;
          _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Error: could not find the transactionSourceIdentifier for the card or peer payment transaction with service identifier %@",  buf,  0xCu);
        }
      }
    }
  }

  if (a4) {
    *a4 = (id) v51[5];
  }
  if (a5) {
    *a5 = v57[3];
  }
  if (a6) {
    *a6 = v17;
  }
  uint64_t v37 = (id)v61[5];

  _Block_object_dispose(&v50, 8);
  _Block_object_dispose(&v56, 8);

  _Block_object_dispose(&v60, 8);
  return v37;
}
}
}
}

          unsigned int v15 = @"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_IPHONE";
          BOOL v20 = PKLocalizedStringInMarketBundle( @"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE_IPHONE",  v7);
          BOOL v21 = objc_claimAutoreleasedReturnValue(v20);

          uint64_t v11 = (void *)v21;
          goto LABEL_19;
        }
      }

      else
      {
        unsigned int v15 = 0LL;
        uint64_t v11 = 0LL;
        id v9 = 0LL;
      }

      uint64_t v12 = @"TRANSIT_MARKET_NOTIFICATION_TITLE_IPHONE";
      unsigned int v18 = PKLocalizedStringInMarketBundle(@"TRANSIT_MARKET_NOTIFICATION_TITLE_IPHONE", v7);
      uint64_t v19 = objc_claimAutoreleasedReturnValue(v18);

      id v9 = (void *)v19;
      if (!v11) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_31:
}
}

  switch((unint64_t)v10)
  {
    case 0uLL:
    case 2uLL:
    case 3uLL:
    case 0xFuLL:
    case 0x10uLL:
      if (v10 != v34 || v33 != v32) {
        -[PDApplyNotificationController _queue_removeAllNotificationsForApplicationIdentifier:]( self,  "_queue_removeAllNotificationsForApplicationIdentifier:",  v11);
      }
      break;
    case 1uLL:
      -[PDApplyNotificationController _insertOrUpdateFeatureApplicationNewNotificationsForOldApplication:newApplication:preferredLanguage:]( self,  "_insertOrUpdateFeatureApplicationNewNotificationsForOldApplication:newApplication:preferredLanguage:",  v8,  v35,  v9);
      break;
    case 4uLL:
      -[PDApplyNotificationController _insertOrUpdateFeatureApplicationOpenNotificationsForOldApplication:newApplication:preferredLanguage:]( self,  "_insertOrUpdateFeatureApplicationOpenNotificationsForOldApplication:newApplication:preferredLanguage:",  v8,  v35,  v9);
      break;
    case 5uLL:
      -[PDApplyNotificationController _insertOrUpdateFeatureApplicationPendingNotificationsForOldApplication:newApplication:preferredLanguage:]( self,  "_insertOrUpdateFeatureApplicationPendingNotificationsForOldApplication:newApplication:preferredLanguage:",  v8,  v35,  v9);
      break;
    case 6uLL:
      -[PDApplyNotificationController _insertOrUpdateFeatureApplicationApprovedNotificationsForOldApplication:newApplication:preferredLanguage:]( self,  "_insertOrUpdateFeatureApplicationApprovedNotificationsForOldApplication:newApplication:preferredLanguage:",  v8,  v35,  v9);
      break;
    case 7uLL:
    case 8uLL:
      -[PDApplyNotificationController _insertOrUpdateFeatureApplicationAcceptedNotificationsForOldApplication:newApplication:preferredLanguage:]( self,  "_insertOrUpdateFeatureApplicationAcceptedNotificationsForOldApplication:newApplication:preferredLanguage:",  v8,  v35,  v9);
      break;
    case 9uLL:
      -[PDApplyNotificationController _insertOrUpdateFeatureApplicationBookedNotificationsForOldApplication:newApplication:preferredLanguage:]( self,  "_insertOrUpdateFeatureApplicationBookedNotificationsForOldApplication:newApplication:preferredLanguage:",  v8,  v35,  v9);
      break;
    case 0xAuLL:
      -[PDApplyNotificationController _insertOrUpdateFeatureApplicationWithdrawnNotificationsForOldApplication:newApplication:preferredLanguage:]( self,  "_insertOrUpdateFeatureApplicationWithdrawnNotificationsForOldApplication:newApplication:preferredLanguage:",  v8,  v35,  v9);
      break;
    case 0xBuLL:
    case 0xDuLL:
      -[PDApplyNotificationController _insertOrUpdateFeatureApplicationTerminatedNotificationsForOldApplication:newApplication:preferredLanguage:]( self,  "_insertOrUpdateFeatureApplicationTerminatedNotificationsForOldApplication:newApplication:preferredLanguage:",  v8,  v35,  v9);
      break;
    case 0xCuLL:
      -[PDApplyNotificationController _insertOrUpdateFeatureApplicationExpiredNotificationsForOldApplication:newApplication:preferredLanguage:]( self,  "_insertOrUpdateFeatureApplicationExpiredNotificationsForOldApplication:newApplication:preferredLanguage:",  v8,  v35,  v9);
      break;
    case 0xEuLL:
      -[PDApplyNotificationController _insertOrUpdateFeatureApplicationClosedNotificationForOldApplication:newApplication:preferredLanguage:]( self,  "_insertOrUpdateFeatureApplicationClosedNotificationForOldApplication:newApplication:preferredLanguage:",  v8,  v35,  v9);
      break;
    default:
      break;
  }

LABEL_33:
}

    goto LABEL_19;
  }

  unsigned int v14 = PKLogFacilityTypeGetObject(6LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v14);
  if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_DEFAULT,  "No default card, attempting to find a card if possible",  buf,  2u);
  }

uint64_t sub_100019B04(uint64_t result, uint64_t a2)
{
  if (result)
  {
    uint64_t v2 = result;
    int v3 = atomic_load((unsigned __int8 *)(result + 8));
    if (v3 == 1)
    {
      return 1LL;
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(4LL);
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG)) {
        sub_1004412E0(a2, v6, v7, v8, v9, v10, v11, v12);
      }

      id v13 = PDDefaultQueue();
      unsigned int v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v13);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_100019BD0;
      block[3] = &unk_100639300;
      void block[4] = v2;
      dispatch_sync(v14, block);

      return atomic_load((unsigned __int8 *)(v2 + 8));
    }
  }

  return result;
}

void sub_100019BD0(uint64_t a1)
{
}

void sub_100019CB4(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  if (a1)
  {
    if (a3 <= 8
      && (uint64_t v6 = (uint64_t (*)(uint64_t, id))qword_100707788[5 * a3 + 1]) != 0LL
      && (uint64_t v7 = v6(a1, v5), (v8 = objc_claimAutoreleasedReturnValue(v7)) != 0))
    {
      uint64_t v9 = (void *)v8;
      uint64_t v10 = &qword_100707788[5 * a3];
      uint64_t v11 = (os_unfair_lock_s *)(v10 + 3);
      os_unfair_lock_lock((os_unfair_lock_t)v10 + 6);
      unsigned int v14 = (void *)v10[4];
      id v13 = (void **)(v10 + 4);
      uint64_t v12 = v14;
      if (!v14)
      {
        unsigned int v15 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
        int v16 = *v13;
        void *v13 = v15;

        uint64_t v12 = *v13;
      }

      [v12 addObject:v9];
      objc_initWeak(&location, v5);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      v25[2] = sub_100019ED8;
      v25[3] = &unk_10063A190;
      objc_copyWeak(v28, &location);
      char v29 = a3;
      id v17 = v9;
      v28[1] = &qword_100707788[5 * a3];
      id v26 = v17;
      uint64_t v27 = a1;
      [v5 setInvalidationHandler:v25];
      uint64_t v19 = _NSConcreteStackBlock;
      uint64_t v20 = 3221225472LL;
      BOOL v21 = sub_10001A0E8;
      unsigned int v22 = &unk_10063A1B8;
      objc_copyWeak(&v23, &location);
      char v24 = a3;
      [v5 setInterruptionHandler:&v19];
      unsigned int v18 = (void (*)(uint64_t, id))qword_100707788[5 * a3 + 2];
      if (v18) {
        v18(a1, v17);
      }
      objc_msgSend(v5, "activate", v19, v20, v21, v22);
      os_unfair_lock_unlock(v11);
      [v17 activated];
      objc_destroyWeak(&v23);

      objc_destroyWeak(v28);
      objc_destroyWeak(&location);
    }

    else
    {
      [v5 invalidate];
    }
  }
}

void sub_100019EA8(_Unwind_Exception *a1)
{
}

void sub_100019ED8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  unsigned int v3 = [WeakRetained processIdentifier];
  uint64_t Object = PKLogFacilityTypeGetObject(4LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v6 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)buf = 67109632;
    int v20 = v6;
    __int16 v21 = 2048;
    id v22 = WeakRetained;
    __int16 v23 = 1024;
    unsigned int v24 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_INFO,  "PDXPCServiceListener %u (%p:%d): connection invalidated",  buf,  0x18u);
  }

  [*(id *)(a1 + 32) clearConnectionReference];
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 56) + 24LL));
  [*(id *)(*(void *)(a1 + 56) + 32) removeObject:*(void *)(a1 + 32)];
  if (*(_BYTE *)(a1 + 64) == 2)
  {
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v7 = *(id *)(*(void *)(a1 + 56) + 32LL);
    id v8 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = *(void *)v15;
      while (2)
      {
        uint64_t v11 = 0LL;
        do
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * (void)v11), "connection", (void)v14));
          unsigned int v13 = [v12 processIdentifier];

          if (v13 == v3)
          {

            goto LABEL_14;
          }

          uint64_t v11 = (char *)v11 + 1;
        }

        while (v9 != v11);
        id v9 = [v7 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 56) + 24LL));
    objc_msgSend( *(id *)(*(void *)(a1 + 40) + 264),  "removeListenerEndpointsForProcessIdentifier:",  objc_msgSend(WeakRetained, "processIdentifier"));
  }

  else
  {
LABEL_14:
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 56) + 24LL));
  }
}

void sub_10001A0E8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t Object = PKLogFacilityTypeGetObject(4LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
  {
    int v5 = *(unsigned __int8 *)(a1 + 40);
    v6[0] = 67109632;
    v6[1] = v5;
    __int16 v7 = 2048;
    id v8 = WeakRetained;
    __int16 v9 = 1024;
    unsigned int v10 = [WeakRetained processIdentifier];
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_INFO,  "PDXPCServiceListener %u (%p:%d): connection interrupted",  (uint8_t *)v6,  0x18u);
  }

  +[NSException raise:format:]( &OBJC_CLASS___NSException,  "raise:format:",  NSInternalInconsistencyException,  @"Unexpected interruption on connection");
}

LABEL_106:
}

        uint64_t v45 = v177;
LABEL_107:

        goto LABEL_108;
      }

      if (![v68 returnRecords])
      {
        v61 = v190;
        goto LABEL_152;
      }

      v81 = objc_alloc(&OBJC_CLASS___PKCloudRecordTransaction);
      uint64_t v82 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", obj));
      v83 = v81;
      id v8 = v186;
      v80 = [v83 initWithRecords:v82];

      [v80 setTransaction:v43];
      [*(id *)(v199 + 64) addCloudRecord:v80 forContainerDatabaseIdentifier:*(void *)(v199 + 40)];
    }

    else
    {
      v79 = PKLogFacilityTypeGetObject(9LL);
      v80 = (id)objc_claimAutoreleasedReturnValue(v79);
      if (os_log_type_enabled((os_log_t)v80, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        int v227 = (uint64_t)obj;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v80,  OS_LOG_TYPE_DEFAULT,  "Cannot parse transaction from records %@",  buf,  0xCu);
      }

      uint64_t v43 = 0LL;
    }

    v61 = v190;
LABEL_151:

    goto LABEL_152;
  }

  v62 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Skipping processing %@ because pass is not on device",  v14));
  v63 = PKLogFacilityTypeGetObject(9LL);
  v64 = (os_log_s *)objc_claimAutoreleasedReturnValue(v63);
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    int v227 = v62;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  v65 = *(void **)(v199 + 32);
  v66 = *(void *)(v199 + 48);
  v188 = (void *)v62;
  BOOL v225 = v62;
  uint64_t v43 = (PKPaymentTransaction *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v225,  1LL));
  [v65 reportContainerChangeSignpostEventType:45 stateName:v66 objectNames:v43 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
  v61 = 0LL;
LABEL_154:

  objc_autoreleasePoolPop(v6);
}

    v148 = v12;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v177 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "There is no altDSID defined for record %@",  buf,  0xCu);
    }

    v120 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
    v113 = (os_log_t)objc_claimAutoreleasedReturnValue([v120 accountWithIdentifier:v156]);

    v121 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
    v122 = v8;
    v123 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s associatedPassUniqueID](v113, "associatedPassUniqueID"));
    v124 = (void *)objc_claimAutoreleasedReturnValue([v121 transactionSourceIdentifiersForPassUniqueIdentifier:v123]);
    uint64_t v43 = (id)objc_claimAutoreleasedReturnValue([v124 anyObject]);

    id v8 = v122;
    self = v160;

    v67 = 0LL;
    uint64_t v12 = v148;
    __int128 v14 = v155;
LABEL_110:
  }

  if (!v43)
  {
LABEL_112:
    v125 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
    v126 = (void *)objc_claimAutoreleasedReturnValue([v125 transactionsWithServiceIdentifier:v13]);

    if ([v126 count] == (id)1)
    {
      v127 = (void *)objc_claimAutoreleasedReturnValue([v126 anyObject]);
      uint64_t v43 = (id)objc_claimAutoreleasedReturnValue([v127 transactionSourceIdentifier]);

      if (!v43) {
        goto LABEL_120;
      }
    }

    else
    {
      if ((unint64_t)[v126 count] >= 2)
      {
        v128 = PKLogFacilityTypeGetObject(9LL);
        v129 = (os_log_s *)objc_claimAutoreleasedReturnValue(v128);
        if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
        {
          v130 = [v126 count];
          *(_DWORD *)buf = 138543874;
          uint64_t v177 = v13;
          v178 = 2048;
          v179 = v130;
          v180 = 2112;
          v181 = v126;
          _os_log_impl( (void *)&_mh_execute_header,  v129,  OS_LOG_TYPE_DEFAULT,  "There is more than one transaction with the service identifier %{public}@. We have enough information to det ermine which one out of %lu %@",  buf,  0x20u);
        }
      }

LABEL_120:
      v131 = PKLogFacilityTypeGetObject(9LL);
      v132 = (os_log_s *)objc_claimAutoreleasedReturnValue(v131);
      if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        uint64_t v177 = v8;
        v178 = 2114;
        v179 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v132,  OS_LOG_TYPE_DEFAULT,  "Could not find a transactionSourceIdentifier for record %@ and recordType %{public}@",  buf,  0x16u);
      }

      uint64_t v43 = 0LL;
    }
  }
}

void sub_10001AE28(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if (!v3) {
      __break(1u);
    }
    id v5 = PDDefaultQueue();
    int v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    PDWakePassbookInBackground();

    id v7 = sub_100028B28(a1);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ([v8 count])
    {
      __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) effectiveCatalog]);
      unsigned int v10 = *(void **)(a1 + 520);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 passDynamicStateForUniqueIdentifier:v11]);

      __int16 v21 = _NSConcreteStackBlock;
      uint64_t v22 = 3221225472LL;
      __int16 v23 = sub_100028BA4;
      unsigned int v24 = &unk_10063A8F8;
      id v25 = v4;
      id v26 = v12;
      id v27 = v9;
      id v13 = v9;
      id v14 = v12;
      __int128 v15 = objc_retainBlock(&v21);
      sub_1000288A8(a1, v15, v8);
    }

    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter",  v21,  v22,  v23,  v24));
    uint64_t v17 = PKPassLibraryDidUpdatePassNotification;
    uint64_t v28 = PKPassLibraryUniqueIDUserInfoKey;
    unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
    char v29 = v18;
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v29,  &v28,  1LL));
    [v16 postNotificationName:v17 object:0 userInfo:v19];

    xpc_object_t v20 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v20, "Name", (const char *)[PKPassLibraryDidChangeNotification UTF8String]);
    [*(id *)(a1 + 488) sendEvent:v20];
  }
}

id sub_10001B068(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v4 = (id)TCCAccessCopyInformationForBundleId(@"com.apple.Passbook");
    id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v13;
      while (2)
      {
        for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v6) {
            objc_enumerationMutation(v4);
          }
          id v8 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
          __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", kTCCInfoService, (void)v12));
          if ([v9 isEqualToString:v3])
          {
            id v5 = (id)objc_claimAutoreleasedReturnValue([v8 objectForKeyedSubscript:kTCCInfoGranted]);

            goto LABEL_12;
          }
        }

        id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
        if (v5) {
          continue;
        }
        break;
      }
    }

LABEL_12:
    id v10 = [v5 BOOLValue];
  }

  else
  {
    id v10 = 0LL;
  }

  return v10;
}

  __int128 v14 = PKLocalizedPaymentString(@"CARDS_READY_TO_USE_NO_EXPRESS", @"%lu", v12, v18, (void)v20);
LABEL_16:
  __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  __int128 v16 = -[PDGenericUserNotification initWithTitle:message:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:forPassUniqueIdentifier:",  0LL,  v15,  0LL);
  -[PDUserNotification setSuppressionBehavior:](v16, "setSuppressionBehavior:", 2LL);
  [*(id *)(*(void *)(a1 + 40) + 56) insertUserNotification:v16];
}
}
}

      __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  4LL,  0LL));
      (*((void (**)(id, void, void, void *))v7 + 2))(v7, 0LL, 0LL, v16);

      goto LABEL_13;
    }

    -[PDCarKeyRequirementsChecker canAddCarKeyPassWithConfiguration:completion:]( self->_carKeyRequirementsChecker,  "canAddCarKeyPassWithConfiguration:completion:",  v6,  v7);
  }

      id v10 = 0;
      goto LABEL_22;
    }

    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(-[PDDatabaseManager dbPeerPaymentAccount](databaseManager, "dbPeerPaymentAccount"));
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v9 associatedPassUniqueID]);
    __int128 v13 = v25;
    __int128 v14 = v12;
    if (v14 == v13)
    {
    }

    else
    {
      __int128 v15 = v14;
      if (!v13 || !v14)
      {

        id v10 = 0;
LABEL_21:

        goto LABEL_22;
      }

      __int128 v16 = [v13 isEqualToString:v14];

      if (!v16) {
        goto LABEL_12;
      }
    }

    uint64_t v17 = (char *)[v9 state] - 1;
    unsigned int v18 = self->_databaseManager;
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v9 associatedPassUniqueID]);
    xpc_object_t v20 = (void *)objc_claimAutoreleasedReturnValue(-[PDDatabaseManager passWithUniqueIdentifier:](v18, "passWithUniqueIdentifier:", v19));
    __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v20 paymentPass]);

    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v9 peerPaymentAccount]);
    uint64_t v22 = PKPeerPaymentAccountResolutionForAccountAndPeerPaymentPass(v21, v15);

    id v10 = v22 != 1 && (unint64_t)v17 < 2;
    goto LABEL_21;
  }

  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    *(void *)(*(void *)(a1 + 32) + 8LL) = 0LL;
    __int128 v13 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) != 0;
  }

  else
  {
    __int128 v13 = 0LL;
  }

  return v13;
}

    if ([v9 supportsTransit])
    {
      uint64_t Object = PKLogFacilityTypeGetObject(12LL);
      __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        id v27 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "PDTransitStateManager: %@ posseses applet data. Updating...",  buf,  0xCu);
      }

      unsigned int v18 = *(void **)(a1 + 40);
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
      xpc_object_t v20 = (void *)objc_claimAutoreleasedReturnValue([v9 secureElementIdentifier]);
      __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v9 applicationIdentifier]);
      [v18 fetchAndCacheTransitStateForPassUniqueIdentifier:v19 secureElementIdentifier:v20 paymentApplicationIdentifier:v21];
    }
  }
}

    goto LABEL_13;
  }

  if (v7)
  {
    id v8 = @"REVOKED";
    if (!*(_BYTE *)(a1 + 57)) {
      id v8 = @"not revoked";
    }
    *(_DWORD *)buf = 138412546;
    __int128 v15 = v4;
    __int128 v16 = 2112;
    uint64_t v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Revocation check for pass [%@] succeeded with result: %@",  buf,  0x16u);
  }

  __int16 v9 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  [v9 notePassWithUniqueID:v10 isRevoked:*(unsigned __int8 *)(a1 + 57)];

  if (*(_BYTE *)(a1 + 57))
  {
    uint64_t v11 = PKLogFacilityTypeGetObject(0LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v15 = v4;
      __int128 v12 = "Certificate revoked for pass (%@)";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v12, buf, 0xCu);
      goto LABEL_12;
    }

    goto LABEL_12;
  }

    self->_hasPeerPaymentSetupRecurringP2PPayment = (char)v5;
    self->_hasQueriedPeerPaymentHasSetupRecurringP2PPayment = 1;
  }

  return self->_hasPeerPaymentSetupRecurringP2PPayment;
}

LABEL_13:
    id v5 = 0LL;
LABEL_14:

    self = 0LL;
    goto LABEL_15;
  }

  if (!v5) {
    goto LABEL_14;
  }
  v16.receiver = self;
  v16.super_class = (Class)&OBJC_CLASS___PDBarcodeServiceBarcodeEventResponse;
  self = -[PDBarcodeServiceBarcodeEventResponse init](&v16, "init");
  if (!self) {
    goto LABEL_14;
  }
  self->_transactionAvailable = [v5 PKBoolForKey:@"transactionAvailable"];
LABEL_15:

  return self;
}
}
}

  -[NSMutableDictionary removeObjectForKey:](self->_taskToResultMap, "removeObjectForKey:", v15);
  -[NSMutableDictionary removeObjectForKey:](self->_taskToHandlerMap, "removeObjectForKey:", v15);
}

  __int128 v13 = *(void *)(a1 + 72);
  if (v13)
  {
    __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) _cannotPerformActionErrorWithFailureReason:v9]);
    (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v14);
LABEL_16:
  }
}

    [v9 deleteLocalAccountWithIdentifier:v10 completion:0];
    goto LABEL_14;
  }

  uint64_t v6 = (__CFString *)*(id *)(a1 + 40);
  if (v6 == @"1234567890"
    || (id v7 = v6) != 0LL
    && (id v8 = -[__CFString isEqualToString:](v6, "isEqualToString:", @"1234567890"),
        v7,
        v8))
  {
    __int16 v9 = *(void **)(a1 + 32);
    id v10 = *(void *)(a1 + 40);
    uint64_t v11 = *(void **)(a1 + 48);
    if (v11)
    {
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      v20[2] = sub_1001DF5F4;
      v20[3] = &unk_10063A830;
      __int16 v21 = v11;
      [v9 deleteLocalAccountWithIdentifier:v10 completion:v20];
      __int128 v12 = v21;
LABEL_11:

      goto LABEL_14;
    }

    goto LABEL_12;
  }

    [*(id *)(v8 + 64) addObject:v5];
    goto LABEL_13;
  }

  if (([v3 isEqual:*(void *)(a1 + 32)] & 1) == 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 32) insertOrUpdateFeatureApplication:*(void *)(a1 + 32)]);
    uint64_t v6 = *(void *)(a1 + 40);
    if (v4)
    {
      id v7 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(v6 + 72) objectForKeyedSubscript:v4]);
      if (!v7)
      {
        id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        [*(id *)(*(void *)(a1 + 40) + 72) setObject:v7 forKeyedSubscript:v4];
      }

      -[NSMutableArray removeObject:](v7, "removeObject:", v3);
LABEL_10:
      -[NSMutableArray addObject:](v7, "addObject:", v5);

LABEL_13:
      [*(id *)(a1 + 40) _postApplicationsChangedNotification];
      [*(id *)(a1 + 40) _concludeIDVSessionIfNeededForFeatureApplication:*(void *)(a1 + 32)];
      __int16 v9 = *(void **)(a1 + 40);
      if (v3)
      {
        id v10 = *(void *)(a1 + 32);
        v17[0] = v3;
        v17[1] = v10;
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v17, 2LL));
        unsigned int v18 = v11;
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL));
        [v9 _processChangedApplications:v12];
      }

      else
      {
        uint64_t v19 = *(void *)(a1 + 32);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v19, 1LL));
        [v9 _processAddedApplications:v11];
      }

      goto LABEL_17;
    }

    [*(id *)(v6 + 64) removeObject:v3];
    id v8 = *(void *)(a1 + 40);
    goto LABEL_12;
  }
}

    v8[2](v8, v12, 0LL);
  }
}
}

    id v7 = 0;
    goto LABEL_13;
  }

  if (!-[PDExpressTransitUpgradeController hasAttemptedDefaultPassExpressUpgrade]( self->_upgradeController,  "hasAttemptedDefaultPassExpressUpgrade"))
  {
    __int128 v12 = PKLogFacilityTypeGetObject(12LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v14 = 138412290;
      __int128 v15 = v4;
      uint64_t v11 = "PDTransitNotificationService: should not send Open-Loop renotify campaign notification for %@ because no aut"
            "omatic express upgrade has ever been made";
      goto LABEL_11;
    }

    goto LABEL_12;
  }

  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[PDTransitNotificationService _hasSentRenotifyNotificationForRenotifyCampaign:]( self,  "_hasSentRenotifyNotificationForRenotifyCampaign:",  v5));
  id v7 = v6 == 0LL;
  if (v6)
  {
    id v8 = PKLogFacilityTypeGetObject(12LL);
    __int16 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v14 = 138412546;
      __int128 v15 = v4;
      __int128 v16 = 2112;
      uint64_t v17 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: should not send Open-Loop renotify campaign notification for %@ because the campai gn has already been notified within another market (%@)",  (uint8_t *)&v14,  0x16u);
    }

    goto LABEL_12;
  }
}
}

  id v35 = (unint64_t *)(a6 + 16);
  uint64_t v36 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v66, v65, v15);
  swift_beginAccess(a6 + 16, aBlock, 33LL, 0LL);
  uint64_t v37 = *(void *)(a6 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
  *(void *)(a6 + 16) = v37;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v37 = sub_10043EB28(0, *(void *)(v37 + 16) + 1LL, 1, v37);
    *id v35 = v37;
  }

  uint64_t v40 = *(void *)(v37 + 16);
  uint64_t v39 = *(void *)(v37 + 24);
  if (v40 >= v39 >> 1)
  {
    uint64_t v37 = sub_10043EB28(v39 > 1, v40 + 1, 1, v37);
    *id v35 = v37;
  }

  *(void *)(v37 + 16) = v40 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v16 + 32))( v37 + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
  + *(void *)(v16 + 72) * v40,
    v36,
    v15);
  swift_endAccess(aBlock);
  v68(v70, 0LL);
  return swift_release(v28);
}

void sub_10001B1E8(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a1)
  {
    if (!v7) {
      __break(1u);
    }
    id v9 = PDDefaultQueue();
    id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    PDWakePassbookInBackground();

    id v11 = sub_100028B28(a1);
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    if ([v12 count])
    {
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) effectiveCatalog]);
      __int16 v23 = _NSConcreteStackBlock;
      uint64_t v24 = 3221225472LL;
      id v25 = sub_100028B94;
      id v26 = &unk_10063A8F8;
      id v27 = v7;
      id v28 = v8;
      id v29 = v13;
      id v14 = v13;
      __int128 v15 = objc_retainBlock(&v23);
      sub_1000288A8(a1, v15, v12);
    }

    __int128 v16 = *(void **)(a1 + 104);
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "uniqueID", v23, v24, v25, v26));
    [v16 handlePassLibraryChangedWithPassUniqueIdentifier:v17];

    unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
    v30[0] = PKPassLibraryUniqueIDUserInfoKey;
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
    v31[0] = v19;
    v30[1] = PKPassLibraryPassSourceUserInfoKey;
    xpc_object_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a4));
    v31[1] = v20;
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v31,  v30,  2LL));

    [v18 postNotificationName:PKPassLibraryDidAddPassNotification object:0 userInfo:v21];
    xpc_object_t v22 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v22, "Name", (const char *)[PKPassLibraryDidChangeNotification UTF8String]);
    [*(id *)(a1 + 488) sendEvent:v22];
  }
}

void sub_10001B458(id a1, NSError *a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    uint64_t v6 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDServer: Finished pass signal donation with error: %@",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_10001B4FC(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    sub_10001935C(*(void *)(a1 + 40));
    id v2 = [*(id *)(a1 + 32) associatedAccountFeatureIdentifier];
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v3 = *(void *)(a1 + 64);
    if (v2 == (id)2 && v4 != v3)
    {
      uint64_t v6 = v3 == 1 ? @"Pass Personalized" : @"Pass Lost";
      BOOL v7 = v4 == 7 || v3 == 7;
      if (v7 || v3 == 1) {
        +[PKHomeScreenWidgetController reloadWidget:budgeted:reason:]( &OBJC_CLASS___PKHomeScreenWidgetController,  "reloadWidget:budgeted:reason:",  PKHomeScreenWidgetKindAppleCard,  0LL,  v6);
      }
    }

    if ([*(id *)(*(void *)(a1 + 40) + 456) isTrackingProvisioningOfPass:*(void *)(a1 + 32)])
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Skipping state change notification because active provisioning in progress",  buf,  2u);
      }
    }

    else
    {
      sub_10001B6E0(*(void *)(a1 + 40), *(void **)(a1 + 32), *(void *)(a1 + 56), *(void *)(a1 + 64));
    }

    [*(id *)(*(void *)(a1 + 40) + 456) passAddedOrUpdated:*(void *)(a1 + 32)];
    sub_10001B780(*(void *)(a1 + 40), *(void **)(a1 + 32));
  }

  else
  {
    uint64_t v11 = *(void *)(a1 + 72);
    BOOL v12 = v11 == 5 || v11 == 3;
    if (v12
      && *(void *)(a1 + 80) == 2LL
      && [*(id *)(a1 + 48) hasValidNFCPayload]
      && [*(id *)(a1 + 48) isValid])
    {
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uniqueID]);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 48) objectSettingsManager]);
      BOOL v15 = sub_1003AFB84((uint64_t)v14, v13);

      if (!v15)
      {
        uint64_t v16 = PKLogFacilityTypeGetObject(1LL);
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)unsigned int v18 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "A new NFC pass was added with no pass settings. Adding default settings.",  v18,  2u);
        }

        [*(id *)(*(void *)(a1 + 40) + 48) updateSettings:19 forPassWithUniqueIdentifier:v13];
      }
    }
  }

void sub_10001B6E0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = v7;
  if (a1)
  {
    id v9 = *(void **)(a1 + 96);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100024B48;
    v10[3] = &unk_10063A670;
    void v10[4] = a1;
    id v11 = v7;
    uint64_t v12 = a3;
    uint64_t v13 = a4;
    [v9 performHandlerOnSharedWebServiceQueue:v10];
  }
}

void sub_10001B780(uint64_t a1, void *a2)
{
  id v34 = a2;
  if (a1)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v34 transitCommutePlans]);
    if ([v3 count])
    {
      __int128 v37 = 0u;
      __int128 v38 = 0u;
      __int128 v35 = 0u;
      __int128 v36 = 0u;
      id v4 = v3;
      id v5 = [v4 countByEnumeratingWithState:&v35 objects:v43 count:16];
      if (!v5) {
        goto LABEL_30;
      }
      id v6 = v5;
      unint64_t v30 = v3;
      uint64_t v7 = *(void *)v36;
      uint64_t v31 = a1;
      id v32 = v4;
      while (1)
      {
        id v8 = 0LL;
        id v33 = v6;
        do
        {
          if (*(void *)v36 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)v8);
          if (((unint64_t)[v9 properties] & 3) == 1)
          {
            id v10 = v4;
            id v11 = (void *)objc_claimAutoreleasedReturnValue([v34 uniqueID]);
            uint64_t v12 = a1;
            uint64_t v13 = *(void **)(a1 + 48);
            id v14 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
            BOOL v15 = (void *)objc_claimAutoreleasedReturnValue( [v13 commutePlanReminderForCommutePlanIdentifier:v14 withPassUniqueIdentifier:v11]);

            uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v9 expiryDate]);
            [v15 timeInterval];
            if (!v16 || v17 == 0.0)
            {
              uint64_t Object = PKLogFacilityTypeGetObject(6LL);
              uint64_t v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                uint64_t v40 = v15;
                __int16 v41 = 2112;
                __int128 v42 = v16;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Remove PDUserNotificationTypePassCommutePlanRenewalReminder for reminder: %@, expirationDate: %@",  buf,  0x16u);
              }

              a1 = v12;
              [*(id *)(v12 + 56) removeUserNotificationsForPassUniqueIdentifier:v11 ofType:8];
              id v6 = v33;
              id v4 = v10;
            }

            else
            {
              unsigned int v18 = (void *)objc_claimAutoreleasedReturnValue([v16 dateByAddingTimeInterval:-v17]);
              uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
              id v20 = [v19 compare:v18];

              if (v20 == (id)-1LL)
              {
                xpc_object_t v22 = -[PDPassCommutePlanRenewalReminderUserNotification initWithPaymentPass:commutePlan:]( objc_alloc(&OBJC_CLASS___PDPassCommutePlanRenewalReminderUserNotification),  "initWithPaymentPass:commutePlan:",  v34,  v9);
                if (!v22) {
                  goto LABEL_21;
                }
                uint64_t v25 = PKLogFacilityTypeGetObject(6LL);
                id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
                id v6 = v33;
                if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412546;
                  uint64_t v40 = v15;
                  __int16 v41 = 2112;
                  __int128 v42 = v16;
                  _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Insert PDUserNotificationTypePassCommutePlanRenewalReminder for reminder: %@, expirationDate: %@",  buf,  0x16u);
                }

                -[PDUserNotification setDate:](v22, "setDate:", v18);
                a1 = v31;
                [*(id *)(v31 + 56) insertUserNotification:v22];
                id v4 = v32;
              }

              else
              {
                uint64_t v21 = PKLogFacilityTypeGetObject(6LL);
                xpc_object_t v22 = (PDPassCommutePlanRenewalReminderUserNotification *)objc_claimAutoreleasedReturnValue(v21);
                if (os_log_type_enabled((os_log_t)v22, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412546;
                  uint64_t v40 = v15;
                  __int16 v41 = 2112;
                  __int128 v42 = v16;
                  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v22,  OS_LOG_TYPE_DEFAULT,  "PDUserNotificationTypePassCommutePlanRenewalReminder not added for reminder: %@, expirationDate: %@",  buf,  0x16u);
                }

LABEL_21:
                a1 = v31;
                id v4 = v32;
                id v6 = v33;
              }
            }
          }

          id v8 = (char *)v8 + 1;
        }

        while (v6 != v8);
        id v6 = [v4 countByEnumeratingWithState:&v35 objects:v43 count:16];
        if (!v6)
        {
          uint64_t v3 = v30;
          goto LABEL_30;
        }
      }
    }

    uint64_t v27 = PKLogFacilityTypeGetObject(6LL);
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Remove PDUserNotificationTypePassCommutePlanRenewalReminder because there is no commute plan",  buf,  2u);
    }

    id v29 = *(void **)(a1 + 56);
    id v4 = (id)objc_claimAutoreleasedReturnValue([v34 uniqueID]);
    [v29 removeUserNotificationsForPassUniqueIdentifier:v4 ofType:8];
LABEL_30:
  }
}

          double v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
          v8[2](v8, 0LL, v17);

          goto LABEL_22;
        }
      }

      id v9 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager passWithUniqueIdentifier:]( self->_databaseManager,  "passWithUniqueIdentifier:",  v7));
      if ([v9 passType] == (id)1)
      {
        -[PDPassLibrary _getServiceProviderDataForPass:completion:]( self,  "_getServiceProviderDataForPass:completion:",  v9,  v8);
        goto LABEL_22;
      }

      uint64_t v16 = PKLogFacilityTypeGetObject(0LL);
      id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v18 = 138412290;
        uint64_t v19 = v7;
        BOOL v15 = "Couldn't get service provider data: Pass for unique ID %@ wasn't a secure element pass";
        goto LABEL_20;
      }

      goto LABEL_21;
    }

    id v10 = PKLogFacilityTypeGetObject(0LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v18 = 136315138;
      uint64_t v19 = "-[PDPassLibrary usingSynchronousProxy:getServiceProviderDataForUniqueID:completion:]";
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  (uint8_t *)&v18,  0xCu);
    }

    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  4LL,  0LL));
    v8[2](v8, 0LL, v9);
  }

  else
  {
    uint64_t v12 = PKLogFacilityTypeGetObject(0LL);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v18 = 136315138;
      uint64_t v19 = "-[PDPassLibrary usingSynchronousProxy:getServiceProviderDataForUniqueID:completion:]";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_DEFAULT,  "%s requires a completion",  (uint8_t *)&v18,  0xCu);
    }
  }
}

  (*(void (**)(void))(*(void *)(v1 + 48) + 16LL))();
LABEL_22:
}

  if (v20 != v23 && v58[5])
  {
    uint64_t v31 = objc_loadWeakRetained((id *)&self->_notificationServicesDelegate);
    id v32 = v31;
    id v33 = v84[5];
    id v34 = v58[5];
    if (v23) {
      [v31 handlePushEnabledForPass:v33 withNotificationService:v34];
    }
    else {
      [v31 handlePushDisabledForPass:v33 withNotificationService:v34];
    }

    __int128 v35 = self->_delegateQueue;
    v42[0] = _NSConcreteStackBlock;
    v42[1] = 3221225472LL;
    v42[2] = sub_100120938;
    v42[3] = &unk_10063B300;
    void v42[4] = self;
    uint64_t v43 = v8;
    id v44 = v26;
    dispatch_async((dispatch_queue_t)v35, v42);
  }

  if ((v27 & 0x30) != 0)
  {
    __int128 v36 = objc_loadWeakRetained((id *)&self->_delegate);
    [v36 noteAutomaticallyPresentSettingsChangedForPassWithUniqueIdentifier:v8];
  }

  if (v40 != v25)
  {
    __int128 v37 = objc_loadWeakRetained((id *)&self->_delegate);
    [v37 paymentPassWithUniqueIdentifier:v8 didEnableDailyCashNotifications:v25 != 0];
  }

  if (v80[3] != v76[3])
  {
    __int128 v38 = objc_loadWeakRetained((id *)&self->_delegate);
    [v38 noteSettingsChangedForPassWithUniqueIdentifier:v8 newSettings:v76[3]];
  }

LABEL_34:
  _Block_object_dispose(&v57, 8);

  _Block_object_dispose(&v63, 8);
  _Block_object_dispose(&v69, 8);

  _Block_object_dispose(&v75, 8);
  _Block_object_dispose(&v79, 8);
  _Block_object_dispose(&v83, 8);
}

    __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v4 relevantFinancingPlanStates]);
    uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterFinancingPlan financingPlansForEndpointMetadataPID:states:transactionStartDate:transactionEndDate:installmentDueOrPaidDateStart:installmentDueOrPaidDateEnd:limit:inDatabase:]( &OBJC_CLASS___PayLaterFinancingPlan,  "financingPlansForEndpointMetadataPID:states:transactionStartDate:transactionEndDate:installmentDue OrPaidDateStart:installmentDueOrPaidDateEnd:limit:inDatabase:",  v10,  v23,  v27,  v26,  v25,  v12,  0LL,  self->_database));

    [v7 setRelevantFinancingPlans:v24];
    if ((v11 & 0x40) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }

  uint64_t v25 = v11;

  return v25;
}
}

    goto LABEL_22;
  }

  BOOL v15 = 0;
LABEL_24:

  return v15;
}

    goto LABEL_22;
  }

  id v14 = 0;
LABEL_24:

  return v14;
}
}

  _Block_object_dispose(&v22, 8);
}

  v135 = objc_alloc_init(&OBJC_CLASS___NSDateFormatter);
  -[NSDateFormatter setLocalizedDateFormatFromTemplate:]( v135,  "setLocalizedDateFormatFromTemplate:",  @"LLLL yyyy");
  v79 = PKStartOfMonth(v133);
  v80 = (void *)objc_claimAutoreleasedReturnValue(v79);
  v81 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  months = self->_months;
  self->_months = v81;

  if ([v80 compare:v61] == (id)-1)
  {
    do
    {
      -[NSMutableArray addObject:](self->_months, "addObject:", v80);
      Month = PKStartOfNextMonth(v80);
      v83 = (void *)objc_claimAutoreleasedReturnValue(Month);

      v80 = v83;
    }

    while ([v83 compare:v61] == (id)-1);
  }

  else
  {
    v83 = v80;
  }

  v130 = v83;
  if (-[NSMutableArray count](self->_months, "count"))
  {
    v85 = (char *)-[NSMutableArray count](self->_months, "count") - 1;
    if ((uint64_t)v85 >= 0)
    {
      v86 = 0LL;
      while (1)
      {
        v87 = v58;
        v88 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](self->_months, "objectAtIndex:", v85));
        NSURLResourceKey v58 = objc_alloc_init(&OBJC_CLASS___PDSearchServiceInvertedIndexEntry);

        -[PDSearchServiceInvertedIndexEntry setType:](v58, "setType:", 5LL);
        -[PDSearchServiceInvertedIndexEntry setDate:](v58, "setDate:", v88);
        v89 = (void *)objc_claimAutoreleasedReturnValue(-[NSDateFormatter stringFromDate:](v135, "stringFromDate:", v88));
        -[PDSearchService _addWord:forEntry:](self, "_addWord:forEntry:", v89, v58);

        if (!v86) {
          break;
        }
        if (v86 == 1)
        {
          v90 = @"SEARCH_LAST_MONTH";
LABEL_31:
          v91 = PKLocalizedString(&v90->isa);
          v92 = (void *)objc_claimAutoreleasedReturnValue(v91);
          -[PDSearchService _addWord:forEntry:](self, "_addWord:forEntry:", v92, v58);
        }

        ++v86;
      }

      v90 = @"SEARCH_THIS_MONTH";
      goto LABEL_31;
    }
  }

          continue;
        }
      }

      uint64_t v7 = [v5 countByEnumeratingWithState:&v21 objects:v28 count:16];
    }

    while (v7);
  }
}

  id result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, v21);
  }
  return result;
}
      }

      id v10 = [v7 countByEnumeratingWithState:&v29 objects:v37 count:16];
    }

    while (v10);
  }
}
}
}

    *(void *)(isUniquelyReferenced_nonNull_native + 8 * (a1 >> 6) + 64) |= 1LL << a1;
    uint64_t v27 = (void *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 32 * a1);
    *uint64_t v27 = v40;
    v27[1] = v18;
    v27[2] = a3;
    v27[3] = v16;
    id v26 = v38;
    *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 8 * a1) = v38;
    id v28 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    id v29 = __OFADD__(v28, 1LL);
    unint64_t v30 = v28 + 1;
    if (v29) {
      goto LABEL_26;
    }
    id v5 = v18;
    *(void *)(isUniquelyReferenced_nonNull_native + 16) = v30;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v16);
    goto LABEL_23;
  }

  __break(1u);
LABEL_33:
  id result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for PDARRAliroSignatureProvider.IdentifierPair);
  __break(1u);
  return result;
}

void sub_10001C120(id a1, NSError *a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    id v6 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDServer: Finished pass signal donation with error: %@",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_10001C1C4(id a1)
{
}

void sub_10001C1E8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    if (!v3) {
      __break(1u);
    }
    id v5 = PDDefaultQueue();
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    PDWakePassbookInBackground();

    id v7 = sub_100028B28(a1);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ([v8 count])
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) effectiveCatalog]);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472LL;
      v19[2] = sub_100028BC0;
      v19[3] = &unk_10063A920;
      id v20 = v4;
      id v21 = v9;
      id v10 = v9;
      id v11 = objc_retainBlock(v19);
      sub_1000288A8(a1, v11, v8);
    }

    uint64_t v12 = *(void **)(a1 + 104);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
    [v12 handlePassLibraryChangedWithPassUniqueIdentifier:v13];

    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
    uint64_t v15 = PKPassLibraryDidRemovePassNotification;
    uint64_t v22 = PKPassLibraryUniqueIDUserInfoKey;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v4 uniqueID]);
    __int16 v23 = v16;
    double v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL));
    [v14 postNotificationName:v15 object:0 userInfo:v17];

    xpc_object_t v18 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v18, "Name", (const char *)[PKPassLibraryDidChangeNotification UTF8String]);
    [*(id *)(a1 + 488) sendEvent:v18];
  }
}

void sub_10001C408(id a1, BOOL a2)
{
  if (!a2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Failed to update upgrade passcode policy for pass deletation",  v4,  2u);
    }
  }

void sub_10001C56C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (a1 && *(id *)(a1 + 280) != v4)
  {
    id v10 = v4;
    objc_storeStrong((id *)(a1 + 280), a2);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) effectiveCatalog]);
    id v6 = *(void **)(a1 + 48);
    id v7 = sub_10001D630((id *)a1);
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    [v6 applyCatalogOfRecord:v8];

    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) effectiveCatalog]);
    if (([v5 isEquivalentToCatalog:v9] & 1) == 0)
    {
      sub_100028BDC(a1, v9);
      -[PDExpressPassManager secureElementExpressConfigurationNeedsUpdate]_0(*(void *)(a1 + 312));
    }

    id v4 = v10;
  }
}

BOOL sub_10001CB0C(uint64_t a1)
{
  if (a1)
  {
    __int128 v53 = (void *)PDOSTransactionCreate("PDServer");
    uint64_t v88 = 0LL;
    v89 = &v88;
    uint64_t v90 = 0x2020000000LL;
    char v91 = 1;
    v87[0] = _NSConcreteStackBlock;
    v87[1] = 3221225472LL;
    v87[2] = sub_100029464;
    v87[3] = &unk_10063AA60;
    v87[5] = &v88;
    uint64_t v58 = a1;
    v87[4] = a1;
    v59 = objc_retainBlock(v87);
    id v85 = 0LL;
    id v86 = 0LL;
    [*(id *)(a1 + 48) computeExtraneousUniqueIDs:&v86 missingUniqueIDs:&v85];
    __int128 v83 = 0u;
    __int128 v84 = 0u;
    __int128 v81 = 0u;
    __int128 v82 = 0u;
    id v2 = v86;
    id v3 = [v2 countByEnumeratingWithState:&v81 objects:v99 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v82;
      while (2)
      {
        for (uint64_t i = 0LL; i != v3; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v82 != v4) {
            objc_enumerationMutation(v2);
          }
          uint64_t v6 = *(void *)(*((void *)&v81 + 1) + 8LL * (void)i);
          id v7 = objc_autoreleasePoolPush();
          ((void (*)(void))v59[2])();
          int v8 = *((unsigned __int8 *)v89 + 24);
          if (*((_BYTE *)v89 + 24))
          {
            uint64_t Object = PKLogFacilityTypeGetObject(0LL);
            id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v6;
              _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Database contained extraneous (or duplicate) Unique Identifier: %@",  buf,  0xCu);
            }

            [*(id *)(v58 + 48) prepareToDeletePassWithUniqueIdentifier:v6];
            [*(id *)(v58 + 48) deletePassWithUniqueIdentifier:v6];
          }

          objc_autoreleasePoolPop(v7);
          if (!v8)
          {

            BOOL v32 = 0;
            goto LABEL_97;
          }
        }

        id v3 = [v2 countByEnumeratingWithState:&v81 objects:v99 count:16];
        if (v3) {
          continue;
        }
        break;
      }

      BOOL v92 = 0;
    }

    __int128 v79 = 0u;
    __int128 v80 = 0u;
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    obuint64_t j = v85;
    id v11 = [obj countByEnumeratingWithState:&v77 objects:v97 count:16];
    if (v11)
    {
      uint64_t v55 = *(void *)v78;
      while (2)
      {
        uint64_t v12 = 0LL;
        id v56 = v11;
        do
        {
          if (*(void *)v78 != v55) {
            objc_enumerationMutation(obj);
          }
          uint64_t v13 = *(void *)(*((void *)&v77 + 1) + 8LL * (void)v12);
          context = objc_autoreleasePoolPush();
          ((void (*)(void))v59[2])();
          if (*((_BYTE *)v89 + 24))
          {
            uint64_t v14 = PKLogFacilityTypeGetObject(0LL);
            uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(void *)&uint8_t buf[4] = v13;
              _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Database was missing uniqueID: %@",  buf,  0xCu);
            }

            uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v58 + 32) objectWithUniqueID:v13]);
            if ([v16 passType] == (id)1) {
              double v17 = v16;
            }
            else {
              double v17 = 0LL;
            }
            id v18 = v17;
            uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v58 + 32) passDaemonDataForUniqueID:v13]);
            if ([*(id *)(v58 + 48) insertPass:v16 withDaemonData:v19 source:0])
            {
              if (v18)
              {
                id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v58 + 72) secureElementIdentifiers]);
                [v18 updateDevicePaymentApplicationsWithSecureElementIdentifiers:v20];

                __int128 v75 = 0u;
                __int128 v76 = 0u;
                __int128 v73 = 0u;
                __int128 v74 = 0u;
                id v21 = (void *)objc_claimAutoreleasedReturnValue([v18 devicePaymentApplications]);
                id v22 = [v21 countByEnumeratingWithState:&v73 objects:v96 count:16];
                if (v22)
                {
                  id v23 = 0LL;
                  uint64_t v24 = *(void *)v74;
                  do
                  {
                    for (uint64_t j = 0LL; j != v22; uint64_t j = (char *)j + 1)
                    {
                      if (*(void *)v74 != v24) {
                        objc_enumerationMutation(v21);
                      }
                      uint64_t v27 = v26;
                      if (v26)
                      {
                        if (v23) {
                          [v23 unionSet:v26];
                        }
                        else {
                          id v23 = [v26 mutableCopy];
                        }
                      }
                    }

                    id v22 = [v21 countByEnumeratingWithState:&v73 objects:v96 count:16];
                  }

                  while (v22);

                  if (v23) {
                    [*(id *)(v58 + 176) restoreSubcredentialsInDatabase:v23 withCompletion:0];
                  }
                }

                else
                {

                  id v23 = 0LL;
                }
              }

              int v28 = 0;
            }

            else
            {
              int v28 = 7;
            }
          }

          else
          {
            BOOL v92 = 0;
            int v28 = 1;
          }

          objc_autoreleasePoolPop(context);
          if (v28 != 7 && v28)
          {

            BOOL v32 = v92;
            goto LABEL_97;
          }

          uint64_t v12 = (char *)v12 + 1;
        }

        while (v12 != v56);
        id v11 = [obj countByEnumeratingWithState:&v77 objects:v97 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }

    *(void *)buf = 0LL;
    id v72 = 0LL;
    [*(id *)(v58 + 48) computeTransactionReceiptExtraneousUniqueIDs:buf missingUniqueIDs:buf removedUniqueIDs:&v72];
    __int128 v70 = 0u;
    __int128 v71 = 0u;
    __int128 v68 = 0u;
    __int128 v69 = 0u;
    id v29 = v72;
    id v30 = [v29 countByEnumeratingWithState:&v68 objects:v95 count:16];
    if (v30)
    {
      uint64_t v31 = *(void *)v69;
      BOOL v32 = v92;
      while (2)
      {
        for (k = 0LL; k != v30; k = (char *)k + 1)
        {
          if (*(void *)v69 != v31) {
            objc_enumerationMutation(v29);
          }
          uint64_t v34 = *(void *)(*((void *)&v68 + 1) + 8LL * (void)k);
          __int128 v35 = objc_autoreleasePoolPush();
          ((void (*)(void))v59[2])();
          int v36 = *((unsigned __int8 *)v89 + 24);
          if (*((_BYTE *)v89 + 24)) {
            [*(id *)(v58 + 400) deleteTransactionReceiptWithUniqueID:v34];
          }
          else {
            BOOL v32 = 0;
          }
          objc_autoreleasePoolPop(v35);
          if (!v36)
          {

            goto LABEL_96;
          }
        }

        id v30 = [v29 countByEnumeratingWithState:&v68 objects:v95 count:16];
        if (v30) {
          continue;
        }
        break;
      }

      BOOL v92 = v32;
    }

    __int128 v66 = 0u;
    __int128 v67 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    id v37 = *(id *)buf;
    id v38 = [v37 countByEnumeratingWithState:&v64 objects:v94 count:16];
    if (v38)
    {
      uint64_t v39 = *(void *)v65;
      BOOL v32 = v92;
      while (2)
      {
        for (m = 0LL; m != v38; m = (char *)m + 1)
        {
          if (*(void *)v65 != v39) {
            objc_enumerationMutation(v37);
          }
          uint64_t v41 = *(void *)(*((void *)&v64 + 1) + 8LL * (void)m);
          __int128 v42 = objc_autoreleasePoolPush();
          ((void (*)(void))v59[2])();
          int v43 = *((unsigned __int8 *)v89 + 24);
          if (*((_BYTE *)v89 + 24)) {
            [*(id *)(v58 + 48) deleteTransactionReceiptWithUniqueID:v41];
          }
          else {
            BOOL v32 = 0;
          }
          objc_autoreleasePoolPop(v42);
          if (!v43)
          {

            goto LABEL_96;
          }
        }

        id v38 = [v37 countByEnumeratingWithState:&v64 objects:v94 count:16];
        if (v38) {
          continue;
        }
        break;
      }

      BOOL v92 = v32;
    }

    __int128 v62 = 0u;
    __int128 v63 = 0u;
    __int128 v60 = 0u;
    __int128 v61 = 0u;
    id v44 = [0 countByEnumeratingWithState:&v60 objects:v93 count:16];
    if (v44)
    {
      uint64_t v45 = *(void *)v61;
      BOOL v32 = v92;
LABEL_77:
      uint64_t v46 = 0LL;
      while (1)
      {
        if (*(void *)v61 != v45) {
          objc_enumerationMutation(0LL);
        }
        uint64_t v47 = *(void *)(*((void *)&v60 + 1) + 8 * v46);
        __int128 v48 = objc_autoreleasePoolPush();
        ((void (*)(void))v59[2])();
        int v49 = *((unsigned __int8 *)v89 + 24);
        if (*((_BYTE *)v89 + 24))
        {
          __int128 v50 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v58 + 400) transactionReceiptWithUniqueID:v47]);
          if (v50) {
            id v51 = [*(id *)(v58 + 48) insertOrUpdateTransactionReceipt:v50];
          }
        }

        else
        {
          BOOL v32 = 0;
        }

        objc_autoreleasePoolPop(v48);
        if (!v49) {
          break;
        }
        if (v44 == (id)++v46)
        {
          id v44 = [0 countByEnumeratingWithState:&v60 objects:v93 count:16];
          if (v44) {
            goto LABEL_77;
          }
          goto LABEL_88;
        }
      }
    }

    else
    {
LABEL_88:
      ((void (*)(void))v59[2])();
      if (*((_BYTE *)v89 + 24))
      {
        sub_100024538(v58);
        [*(id *)(v58 + 32) scheduleImmediateRevocationCheck];
        if (*(_BYTE *)(v58 + 12))
        {
          *(_BYTE *)(v58 + 12) = 0;
          sub_10014ABC4(*(void *)(v58 + 312));
          [*(id *)(v58 + 128) databaseRestored];
          [*(id *)(v58 + 120) databaseRestored];
          [*(id *)(v58 + 328) databaseRestored];
        }
      }

      BOOL v32 = *((_BYTE *)v89 + 24) != 0;
    }

LABEL_96:
LABEL_97:
    _Block_object_dispose(&v88, 8);
  }

  else
  {
    return 0;
  }

  return v32;
}

void sub_10001D39C(_Unwind_Exception *a1)
{
}

void sub_10001D4B8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  if (v2)
  {
    id v3 = v2;
    sub_10001AE28(*(void *)(a1 + 32), v2);
    id v2 = v3;
  }
}

id *sub_10001D630(id *a1)
{
  if (a1)
  {
    int v1 = a1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000294D0;
    block[3] = &unk_100639300;
    void block[4] = a1;
    if (qword_100707780 != -1) {
      dispatch_once(&qword_100707780, block);
    }
    a1 = (id *)v1[35];
  }

  return a1;
}

void sub_10001D6B4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = (void *)PDOSTransactionCreate("PDServer.installmentUpdates");
    objc_initWeak(&location, a1);
    id v8 = PDHeavyQueue();
    id v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100028DA8;
    block[3] = &unk_10063A968;
    id v12 = v7;
    id v10 = v7;
    objc_copyWeak(&v15, &location);
    id v13 = v5;
    id v14 = v6;
    dispatch_async(v9, block);

    objc_destroyWeak(&v15);
    objc_destroyWeak(&location);
  }
}

void sub_10001D7C8(_Unwind_Exception *a1)
{
}

BOOL sub_10001DB74(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 secureElementIdentifier]);
  uint64_t v4 = *(void **)(a1 + 32);
  if (v4) {
    BOOL v5 = v3 == 0LL;
  }
  else {
    BOOL v5 = 1;
  }
  BOOL v6 = !v5 && [v4 indexOfObject:v3] != (id)0x7FFFFFFFFFFFFFFFLL;

  return v6;
}

void sub_10001DBD4(uint64_t a1, void *a2)
{
  if (a2) {
    sub_10001D6B4(*(void **)(a1 + 32), a2, 0LL);
  }
}

LABEL_30:
  id v37 = [v16 transactionType];
  id v38 = (void *)objc_claimAutoreleasedReturnValue([v16 transactionDate]);
  [v38 timeIntervalSinceNow];
  uint64_t v40 = v39;

  if (!v37 && fabs(v40) <= 259200.0)
  {
    if (v14)
    {
      __int128 v42 = (void *)objc_claimAutoreleasedReturnValue([v16 merchant]);
      int v43 = [v42 category];
      id v44 = v15;
      uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v14 merchant]);
      uint64_t v46 = v43 != [v45 category];

      id v15 = v44;
    }

    else
    {
      uint64_t v46 = 1LL;
    }

    uint64_t v41 = -[PDDatabaseManager recomputeCategoryVisualizationMagnitudesForPassUniqueID:withStyle:]( self->_databaseManager,  "recomputeCategoryVisualizationMagnitudesForPassUniqueID:withStyle:",  v21,  v46);
  }

  if (PKRewardsCenterEnabled(v41) && [v16 accountType] == (id)2)
  {
    uint64_t v47 = [v14 transactionType];
    v136 = [v16 transactionStatus];
    __int128 v48 = [v14 transactionStatus];
    int v49 = [v16 impactsPromotionProgress];
    __int128 v50 = -[PDDatabaseManager transactionSourceTypeForTransactionSourceIdentifier:]( self->_databaseManager,  "transactionSourceTypeForTransactionSourceIdentifier:",  v15);
    if (v50)
    {
      if (v50 != 2) {
        goto LABEL_51;
      }
      id v51 = v47;
      v139 = v15;
      __int128 v52 = (void *)objc_claimAutoreleasedReturnValue([v16 altDSID]);
      __int128 v53 = PKAltDSIDIsCurrentUser();

      id v15 = v139;
    }

    else
    {
      id v51 = v47;
      __int128 v53 = 1;
    }

    uint64_t v55 = v37 != v51 || v136 != v48;
    if ((v49 & v53) == 1 && v55)
    {
      accountManager = self->_accountManager;
      NSURLFileProtectionType v57 = (void *)objc_claimAutoreleasedReturnValue([v16 accountIdentifier]);
      -[PDAccountManager updateAccountPromotionsForAccountWithIdentifier:observeCooldownPeriod:completion:]( accountManager,  "updateAccountPromotionsForAccountWithIdentifier:observeCooldownPeriod:completion:",  v57,  1LL,  &stru_10063A380);
    }
  }

              id v23 = (char *)v23 + 1;
            }

            while (v21 != v23);
            id v29 = [v19 countByEnumeratingWithState:&v40 objects:v50 count:16];
            id v21 = v29;
          }

          while (v29);
        }
      }

      uint64_t v39 = [obj countByEnumeratingWithState:&v44 objects:v51 count:16];
    }

    while (v39);
  }

  id v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v16, "objectForKey:", &off_10068FB10));
  uint64_t v31 = v30;
  if (v30 && [v30 state] == (id)1) {
    [v31 setState:0];
  }
  BOOL v32 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary allValues](v16, "allValues", oslog));
  id v7 = v35;
  BOOL v6 = v36;
  if (os_log_type_enabled(osloga, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    int v49 = v32;
    _os_log_impl( (void *)&_mh_execute_header,  osloga,  OS_LOG_TYPE_DEFAULT,  "Returning payment setup features from remote devices :%@",  buf,  0xCu);
  }

  ((void (**)(id, void *))v35)[2](v35, v32);
LABEL_49:
}

  uint64_t v24 = v242;
  if (v24 != @"list")
  {
    uint64_t v25 = v24;
    if (v24)
    {
      id v26 = -[__CFString isEqualToString:](v24, "isEqualToString:", @"list");

      if (v26) {
        goto LABEL_33;
      }
      id v33 = v25;
      if (v33 == @"create"
        || (uint64_t v34 = v33,
            __int128 v35 = -[__CFString isEqualToString:](v33, "isEqualToString:", @"create"),
            v34,
            v35))
      {
        int v36 = *(void *)(a1 + 40);
        id v37 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"type"));
        id v38 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"payload"));
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"stateful"));
        uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"region"));
        sub_1000D0798(v36, v37, v38, v39 != 0LL, (uint64_t)v40, *(void **)(a1 + 48));

LABEL_56:
        id v20 = v242;
        goto LABEL_208;
      }

      __int128 v50 = v34;
      if (v50 == @"store"
        || (id v51 = v50,
            __int128 v52 = -[__CFString isEqualToString:](v50, "isEqualToString:", @"store"),
            v51,
            v52))
      {
        __int128 v53 = *(void *)(a1 + 40);
        __int128 v54 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"id"));
        uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"payload"));
        sub_1000D0998(v53, v54, v55, *(void **)(a1 + 48));
LABEL_54:

LABEL_55:
        goto LABEL_56;
      }

      __int128 v67 = v51;
      id v20 = v242;
      if (v67 == @"get"
        || (__int128 v68 = v67,
            __int128 v69 = -[__CFString isEqualToString:](v67, "isEqualToString:", @"get"),
            v68,
            v69))
      {
        __int128 v70 = *(void *)(a1 + 40);
        __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"id"));
        sub_1000D0B88(v70, v48, *(void **)(a1 + 48));
        goto LABEL_135;
      }

      __int128 v84 = v68;
      if (v84 == @"relinquish"
        || (id v85 = v84,
            id v86 = -[__CFString isEqualToString:](v84, "isEqualToString:", @"relinquish"),
            v85,
            v86))
      {
        v87 = *(void *)(a1 + 40);
        __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"id"));
        sub_1000D0CCC(v87, v48, *(void **)(a1 + 48));
        goto LABEL_135;
      }

      v112 = v85;
      if (v112 == @"delete"
        || (v113 = v112,
            v114 = -[__CFString isEqualToString:](v112, "isEqualToString:", @"delete"),
            v113,
            v114))
      {
        v115 = *(void *)(a1 + 40);
        __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"id"));
        sub_1000D0E04(v115, v48, *(void **)(a1 + 48));
        goto LABEL_135;
      }

      v137 = v113;
      if (v137 == @"delete_all"
        || (v138 = v137,
            v139 = -[__CFString isEqualToString:](v137, "isEqualToString:", @"delete_all"),
            v138,
            v139))
      {
        sub_1000D0F48(*(void *)(a1 + 40), *(void **)(a1 + 48));
        goto LABEL_208;
      }
    }

    if (PKEqualObjects(v25, @"messages"))
    {
      sub_1000D10C8(*(void *)(a1 + 40), *(void **)(a1 + 48));
      goto LABEL_208;
    }

    v140 = v25;
    if (v140 == @"ping")
    {
LABEL_134:
      v143 = *(void *)(a1 + 40);
      __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"id"));
      sub_1000D12F8(v143, v48, *(void **)(a1 + 48));
      goto LABEL_135;
    }

    if (v25)
    {
      v141 = v140;
      v142 = -[__CFString isEqualToString:](v140, "isEqualToString:", @"ping");

      if (v142) {
        goto LABEL_134;
      }
      v144 = v141;
      if (v144 == @"pushToken"
        || (v145 = v144,
            v146 = -[__CFString isEqualToString:](v144, "isEqualToString:", @"pushToken"),
            v145,
            v146))
      {
        v147 = *(void *)(a1 + 40);
        __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"env"));
        sub_1000D13EC(v147, (uint64_t)v48, *(void **)(a1 + 48));
        goto LABEL_135;
      }
    }

    goto LABEL_206;
  }

    PKAnalyticsSendEvent(*v26, 0LL);
    goto LABEL_31;
  }

  if (!v9)
  {
    id v26 = &PKAggDKeyCloudStoreFailureNetworkUnvailable;
    goto LABEL_30;
  }

  -[PDCloudStoreContainer _queue_retryContainerStateWithError:operationGroupNameSuffix:retryCount:completion:]( self,  "_queue_retryContainerStateWithError:operationGroupNameSuffix:retryCount:completion:",  v18,  v16,  a6,  v17);
LABEL_33:
}
  }

  else
  {
    id v21 = 0LL;
  }

  return v21;
}

  return a1;
}

        BOOL v6 = v33 + 1;
      }

      while ((id)(v33 + 1) != v32);
      BOOL v32 = [obj countByEnumeratingWithState:&v41 objects:v47 count:16];
    }

    while (v32);
  }

  id v26 = -[NSMutableDictionary copy](v30, "copy");

  return v26;
}

        goto LABEL_31;
      }
}

  swift_bridgeObjectRelease(a1);
  return 0LL;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

LABEL_51:
  uint64_t v58 = v16;
  v59 = [v16 transactionType];
  if (v59 == (id)14)
  {
    if ([v16 suppressBehavior] != (id)1)
    {
      __int128 v64 = PKLogFacilityTypeGetObject(6LL);
      __int128 v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v66 = (void *)objc_claimAutoreleasedReturnValue([v16 serviceIdentifier]);
        *(_DWORD *)buf = 138412290;
        v162 = (uint64_t)v66;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "Suppressing installment plan transaction for identifier: %@",  buf,  0xCu);
      }

      __int128 v67 = objc_claimAutoreleasedReturnValue( -[PDDatabaseManager updateSuppressBehavior:forPaymentTransaction:sourceIdentifier:]( self->_databaseManager,  "updateSuppressBehavior:forPaymentTransaction:sourceIdentifier:",  1LL,  v16,  v15));
      uint64_t v58 = (id)v67;
    }

    goto LABEL_79;
  }

  __int128 v60 = (unint64_t)v59;
  if (v59 != (id)8)
  {
    __int128 v68 = v15;
    __int128 v69 = [v16 transactionStatus];
    __int128 v70 = (void *)objc_claimAutoreleasedReturnValue([v16 accountIdentifier]);
    if (v70)
    {
      __int128 v71 = 0;
      if ([v16 hasNotificationServiceData] && v69 == (id)8)
      {
        id v72 = (void *)objc_claimAutoreleasedReturnValue([v16 amount]);
        if (v72)
        {
          v140 = (void *)objc_claimAutoreleasedReturnValue([v16 amount]);
          __int128 v73 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
          __int128 v71 = [v140 isEqualToNumber:v73];
        }

        else
        {
          __int128 v71 = 1;
        }

        uint64_t v58 = v16;
      }
    }

    else
    {
      __int128 v71 = 0;
    }

    __int128 v74 = v71 | PKPaymentTransactionHasAuthenticationRequest(v58);
    __int128 v75 = [v58 suppressBehavior];
    if (v74 != 1 || v75 == (id)1)
    {
      if (v75 == (id)1) {
        __int128 v81 = v74;
      }
      else {
        __int128 v81 = 1;
      }
      id v15 = v68;
      if ((v81 & 1) != 0 || (sub_10001F2D8((id *)&self->super.isa, v68, v58) & 1) != 0)
      {
LABEL_78:
        if (v60 > 1) {
          goto LABEL_101;
        }
LABEL_79:
        databaseManager = self->_databaseManager;
        __int128 v83 = (void *)objc_claimAutoreleasedReturnValue([v58 serviceIdentifier]);
        __int128 v63 = (id)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager redemptionAccountEventWithTransactionIdentifier:]( databaseManager,  "redemptionAccountEventWithTransactionIdentifier:",  v83));

        if ([v63 type] == (id)1)
        {
          __int128 v84 = (void *)objc_claimAutoreleasedReturnValue([v63 items]);
          id v85 = (void *)objc_claimAutoreleasedReturnValue([v84 anyObject]);

          if (v85)
          {
            v87 = objc_opt_class(&OBJC_CLASS___PKAccountRewards, v86);
            if ((objc_opt_isKindOfClass(v85, v87) & 1) != 0)
            {
              uint64_t v88 = v15;
              v89 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v85 status]);
              if (v89 == @"success"
                || (uint64_t v90 = v89) != 0LL
                && (char v91 = -[__CFString isEqualToString:](v89, "isEqualToString:", @"success"),
                    v90,
                    v90,
                    v91))
              {
                BOOL v92 = [v85 type];
                if ([v58 redemptionType] != v92)
                {
                  v138 = v14;
                  uint64_t v93 = PKLogFacilityTypeGetObject(23LL);
                  v94 = (os_log_s *)objc_claimAutoreleasedReturnValue(v93);
                  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                  {
                    v95 = PKAccountEventTypeToString([v63 type]);
                    v96 = (void *)objc_claimAutoreleasedReturnValue(v95);
                    v97 = (__CFString *)objc_claimAutoreleasedReturnValue([v58 serviceIdentifier]);
                    *(_DWORD *)buf = 138412546;
                    v162 = (uint64_t)v96;
                    v163 = 2112;
                    v164 = v97;
                    _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "Updating redemption type: %@ for transaction %@",  buf,  0x16u);
                  }

                  v98 = objc_claimAutoreleasedReturnValue( -[PDDatabaseManager updateRedemptionType:forPaymentTransaction:sourceIdentifier:]( self->_databaseManager,  "updateRedemptionType:forPaymentTransaction:sourceIdentifier:",  v92,  v58,  v88));
                  v99 = (void *)objc_claimAutoreleasedReturnValue([v85 identifier]);
                  v100 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager transactionWithReferenceIdentifier:]( self->_databaseManager,  "transactionWithReferenceIdentifier:",  v99));
                  v101 = os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT);
                  if (v100)
                  {
                    if (v101)
                    {
                      *(_DWORD *)buf = 138412290;
                      v162 = (uint64_t)v99;
                      _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "Suppressing disbursement with identifier %@",  buf,  0xCu);
                    }

                    v102 = self->_databaseManager;
                    v94 = (os_log_s *)objc_claimAutoreleasedReturnValue([v100 transactionSourceIdentifier]);
                    v103 =  -[PDDatabaseManager updateSuppressBehavior:forPaymentTransaction:sourceIdentifier:]( v102,  "updateSuppressBehavior:forPaymentTransaction:sourceIdentifier:",  1LL,  v100,  v94);
                  }

                  else if (v101)
                  {
                    *(_DWORD *)buf = 138412290;
                    v162 = (uint64_t)v99;
                    _os_log_impl( (void *)&_mh_execute_header,  v94,  OS_LOG_TYPE_DEFAULT,  "No transaction to suppress with identifier %@",  buf,  0xCu);
                  }

                  uint64_t v58 = (id)v98;
                  id v14 = v138;
                }
              }

              id v15 = v88;
            }
          }
        }

        goto LABEL_100;
      }

      v104 = PKLogFacilityTypeGetObject(23LL);
      __int128 v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v104);
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        v105 = (void *)objc_claimAutoreleasedReturnValue([v58 serviceIdentifier]);
        *(_DWORD *)buf = 138412290;
        v162 = (uint64_t)v105;
        _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "Unsuppressing transaction for identifier: %@",  buf,  0xCu);
      }

      __int128 v79 = 2LL;
    }

    else
    {
      __int128 v76 = PKLogFacilityTypeGetObject(23LL);
      __int128 v77 = (os_log_s *)objc_claimAutoreleasedReturnValue(v76);
      id v15 = v68;
      if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v78 = (void *)objc_claimAutoreleasedReturnValue([v58 serviceIdentifier]);
        *(_DWORD *)buf = 138412290;
        v162 = (uint64_t)v78;
        _os_log_impl( (void *)&_mh_execute_header,  v77,  OS_LOG_TYPE_DEFAULT,  "Suppressing transaction for identifier: %@",  buf,  0xCu);
      }

      __int128 v79 = 1LL;
    }

    __int128 v80 = objc_claimAutoreleasedReturnValue( -[PDDatabaseManager updateSuppressBehavior:forPaymentTransaction:sourceIdentifier:]( self->_databaseManager,  "updateSuppressBehavior:forPaymentTransaction:sourceIdentifier:",  v79,  v58,  v15));
    uint64_t v58 = (id)v80;
    goto LABEL_78;
  }

  if ([v16 suppressBehavior] != (id)1)
  {
    __int128 v61 = (void *)objc_claimAutoreleasedReturnValue([v16 referenceIdentifier]);
    __int128 v62 = self->_accountManager;
    v148[0] = _NSConcreteStackBlock;
    v148[1] = 3221225472LL;
    v148[2] = sub_10001EE1C;
    v148[3] = &unk_10063A3A8;
    v148[4] = self;
    v149 = v61;
    uint64_t v58 = v16;
    v150 = v58;
    v151 = v15;
    __int128 v63 = v61;
    -[PDAccountManager eventWithIdentifier:completion:](v62, "eventWithIdentifier:completion:", v63, v148);

LABEL_100:
  }
}

LABEL_101:
  v106 = objc_claimAutoreleasedReturnValue([v58 associatedReceiptUniqueID]);
  if (v106)
  {
    v107 = (void *)v106;
    v108 = (void *)objc_claimAutoreleasedReturnValue([v58 receiptProviderURL]);

    if (v108)
    {
      v109 = v14 && [v14 transactionStatus] != (id)1 && objc_msgSend(v58, "transactionStatus") == (id)1;
      v110 = self->_databaseManager;
      v111 = (void *)objc_claimAutoreleasedReturnValue([v58 associatedReceiptUniqueID]);
      v112 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager transactionReceiptWithUniqueID:]( v110,  "transactionReceiptWithUniqueID:",  v111));

      if (v112) {
        v113 = v109;
      }
      else {
        v113 = 1;
      }
      v114 = PKLogFacilityTypeGetObject(6LL);
      v115 = (os_log_s *)objc_claimAutoreleasedReturnValue(v114);
      v116 = os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT);
      if ((v142 & 1) != 0 || !v113)
      {
        if (v116)
        {
          v118 = objc_claimAutoreleasedReturnValue([v58 serviceIdentifier]);
          v119 = (void *)v118;
          v120 = @"NO";
          if (v142) {
            v121 = @"YES";
          }
          else {
            v121 = @"NO";
          }
          *(_DWORD *)buf = 138413058;
          v162 = v118;
          if (v112) {
            v122 = @"YES";
          }
          else {
            v122 = @"NO";
          }
          v164 = v121;
          v163 = 2112;
          v165 = 2112;
          if (v109) {
            v120 = @"YES";
          }
          v166 = v122;
          v167 = 2112;
          v168 = v120;
          _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEFAULT,  "Not downloading receipt for transaction %@, isInitialDownload: %@, existingReceipt: %@, transactionCleared: %@",  buf,  0x2Au);
        }
      }

      else
      {
        if (v116)
        {
          v117 = (void *)objc_claimAutoreleasedReturnValue([v58 serviceIdentifier]);
          *(_DWORD *)buf = 138412290;
          v162 = (uint64_t)v117;
          _os_log_impl( (void *)&_mh_execute_header,  v115,  OS_LOG_TYPE_DEFAULT,  "Downloading receipt for transaction with identifier %@",  buf,  0xCu);
        }

        -[PDPaymentWebServiceCoordinator downloadReceiptForTransaction:]( self->_paymentWebServiceCoordinator,  "downloadReceiptForTransaction:",  v58);
      }
    }
  }

  sub_10001F440((uint64_t)self, v15, v58);
  if (!v14)
  {
    v123 = (void *)objc_claimAutoreleasedReturnValue([v58 transactionDate]);
    if (v123)
    {
      v141 = v15;
      v124 = objc_claimAutoreleasedReturnValue( -[PDDatabaseManager paymentApplicationForTransactionSourceIdentifier:]( self->_databaseManager,  "paymentApplicationForTransactionSourceIdentifier:",  v15));
      v137 = v58;
      v143 = (void *)v124;
      if (v124)
      {
        v160 = v124;
        v125 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v160,  1LL));
      }

      else
      {
        v126 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager paymentApplicationsForPassUniqueIdentifier:]( self->_databaseManager,  "paymentApplicationsForPassUniqueIdentifier:",  v21));
        v125 = (void *)objc_claimAutoreleasedReturnValue([v126 allObjects]);
      }

      v146 = 0u;
      v147 = 0u;
      v144 = 0u;
      v145 = 0u;
      v127 = v125;
      v128 = [v127 countByEnumeratingWithState:&v144 objects:v159 count:16];
      if (v128)
      {
        v129 = v128;
        v130 = *(void *)v145;
        do
        {
          for (uint64_t i = 0LL; i != v129; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v145 != v130) {
              objc_enumerationMutation(v127);
            }
            v132 = *(void **)(*((void *)&v144 + 1) + 8LL * (void)i);
            v133 = objc_alloc(&OBJC_CLASS___PKPaymentApplicationUsageSummary);
            v134 = (void *)objc_claimAutoreleasedReturnValue([v132 applicationIdentifier]);
            v135 = -[PKPaymentApplicationUsageSummary initWithPassUniqueIdentifier:paymentApplicationIdentifier:lastUsedTransaction:]( v133,  "initWithPassUniqueIdentifier:paymentApplicationIdentifier:lastUsedTransaction:",  v21,  v134,  v123);

            -[PDDatabaseManager insertPaymentApplicationUsageSummary:]( self->_databaseManager,  "insertPaymentApplicationUsageSummary:",  v135);
          }

          v129 = [v127 countByEnumeratingWithState:&v144 objects:v159 count:16];
        }

        while (v129);
      }

      id v14 = 0LL;
      id v15 = v141;
      uint64_t v58 = v137;
    }
  }
}

  id v14 = v155;
  __int128 v64 = 0LL;
LABEL_102:

  id v13 = v136;
  __int128 v67 = v142;
  if (!v43)
  {
LABEL_103:
    if (v67)
    {
      v110 = v67;
      v111 = PKAltDSIDIsCurrentUser(v67);
      v112 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
      v113 = v112;
      if (v111)
      {
        logb = (os_log_t)objc_claimAutoreleasedReturnValue(-[os_log_s accountWithIdentifier:](v112, "accountWithIdentifier:", v156));

        v114 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
        v115 = v14;
        v116 = v8;
        v117 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s associatedPassUniqueID](logb, "associatedPassUniqueID"));
        v118 = v12;
        v119 = (void *)objc_claimAutoreleasedReturnValue([v114 transactionSourceIdentifiersForPassUniqueIdentifier:v117]);
        v143 = v110;
        int v43 = (id)objc_claimAutoreleasedReturnValue([v119 anyObject]);

        id v12 = v118;
        id v8 = v116;
        id v14 = v115;
        self = v160;

        v113 = logb;
        __int128 v67 = v143;
      }

      else
      {
        __int128 v67 = v110;
        int v43 = (id)objc_claimAutoreleasedReturnValue( -[os_log_s transactionSourceIdentifierForAccountUserAltDSID:accountIdentifier:]( v112,  "transactionSourceIdentifierForAccountUserAltDSID:accountIdentifier:",  v110,  v156));
      }

      goto LABEL_110;
    }

LABEL_102:
              goto LABEL_103;
            }

            __int128 v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
            uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue( -[PDAccountManager _expirationMessagingStartDateForMessagingInfo:account:now:]( v71,  "_expirationMessagingStartDateForMessagingInfo:account:now:",  v37,  v70,  v61));

            if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              id v85 = (uint64_t)v38;
              id v86 = 2112;
              v87 = (PDAccountPhysicalCardExpiredNotification *)v46;
              _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "Set physical card expired messaging start date for card %@ to %@",  buf,  0x16u);
            }

            PKAppleCardSetPhysicalCardExpiredMessagingStartDate(v74, v38, v46);
            if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              id v85 = (uint64_t)v74;
              _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "Updating physical card expiration messaging for account %@",  buf,  0xCu);
            }

            if (!v69 || v14 && -[NSCalendar state](v14, "state") != (id)4) {
              goto LABEL_101;
            }
            v59 = -[PDAccountPhysicalCardExpiredNotification initWithAccountIdentifier:physicalCardIdentifier:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDAccountPhysicalCardExpiredNotification),  "initWithAccountIdentifier:physicalCardIdentifier:forPassUniqueIdentifier:",  v74,  v38,  v68);
            -[PDUserNotification setDate:](v59, "setDate:", v46);
            -[PDUserNotificationManager insertUserNotification:]( v71->_userNotificationManager,  "insertUserNotification:",  v59);
LABEL_100:

            goto LABEL_101;
          }

          id v44 = (PDAccountPhysicalCardExpiredNotification *)v52;
          if (v46) {
            __int128 v53 = v52 == 0LL;
          }
          else {
            __int128 v53 = 1;
          }
          if (v53) {
            goto LABEL_69;
          }
          __int128 v62 = -[os_log_s isEqualToString:](v46, "isEqualToString:", v52);

          if ((v62 & 1) != 0) {
            goto LABEL_81;
          }
        }

        else if (v39 == (id)1 && v14 != 0LL)
        {
          uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(-[NSCalendar identifier](v14, "identifier"));
          __int128 v42 = v38;
          int v43 = v41;
          if (v42 == v43)
          {

LABEL_72:
            uint64_t v55 = PKAppleCardPhysicalCardExpiringSoonMessagingStartDate(v74, v42);
            id v44 = (PDAccountPhysicalCardExpiredNotification *)objc_claimAutoreleasedReturnValue(v55);
            if (v44)
            {
              uint64_t v46 = oslog;
              if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                id v85 = (uint64_t)v42;
                id v86 = 2112;
                v87 = v44;
                id v56 = oslog;
                NSURLFileProtectionType v57 = "We have already scheduled a start date for physical card expiring soon messaging for card %@: %@";
                goto LABEL_84;
              }

              goto LABEL_101;
            }

            uint64_t v58 = PKAppleCardPhysicalCardExpiredMessagingStartDate(v74, v42);
            uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
            if (v46)
            {
              v59 = (PDAccountPhysicalCardExpiredNotification *)oslog;
              if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                id v85 = (uint64_t)v42;
                id v86 = 2112;
                v87 = (PDAccountPhysicalCardExpiredNotification *)v46;
                _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "We have already scheduled a start date for physical card expired messaging for card %@: %@",  buf,  0x16u);
                v59 = (PDAccountPhysicalCardExpiredNotification *)oslog;
              }
            }

            else
            {
              __int128 v63 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
              v59 = (PDAccountPhysicalCardExpiredNotification *)objc_claimAutoreleasedReturnValue( -[PDAccountManager _expirationMessagingStartDateForMessagingInfo:account:now:]( v71,  "_expirationMessagingStartDateForMessagingInfo:account:now:",  v37,  v70,  v63));

              if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                id v85 = (uint64_t)v42;
                id v86 = 2112;
                v87 = v59;
                _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "Set physical card expiring soon messaging start date for card %@ to %@",  buf,  0x16u);
              }

              PKAppleCardSetPhysicalCardExpiringSoonMessagingStartDate(v74, v42, v59);
              if (v69 && -[NSCalendar state](v14, "state") != (id)4)
              {
                __int128 v64 = -[PDAccountPhysicalCardExpiringSoonNotification initWithAccount:physicalCard:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDAccountPhysicalCardExpiringSoonNotification),  "initWithAccount:physicalCard:forPassUniqueIdentifier:",  v70,  v14,  v68);
                -[PDUserNotification setDate:](v64, "setDate:", v59);
                -[PDUserNotificationManager insertUserNotification:]( v71->_userNotificationManager,  "insertUserNotification:",  v64);
              }
            }

            goto LABEL_100;
          }

          id v44 = v43;
          if (v42) {
            uint64_t v45 = v43 == 0LL;
          }
          else {
            uint64_t v45 = 1;
          }
          if (v45)
          {

            uint64_t v46 = (os_log_s *)v42;
            goto LABEL_101;
          }

          __int128 v54 = -[PDAccountPhysicalCardExpiredNotification isEqualToString:](v42, "isEqualToString:", v43);

          if (v54) {
            goto LABEL_72;
          }
        }

id sub_10001EB68(uint64_t a1)
{
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1007077C8);
    if (qword_1007077D0 && [(id)qword_1007077D0 count]) {
      id v1 = [(id)qword_1007077D0 copy];
    }
    else {
      id v1 = 0LL;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1007077C8);
  }

  else
  {
    id v1 = 0LL;
  }

  return v1;
}

id sub_10001EBD4(uint64_t a1, void *a2)
{
  return _[a2 sendTransactionSourceIdentifier:*(void *)(a1 + 32) didReceiveTransaction:*(void *)(a1 + 40)];
}

void sub_10001EBE0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  [*(id *)(*(void *)(a1 + 32) + 480) removeObject:*(void *)(a1 + 40)];
  if (a2)
  {
    [*(id *)(a1 + 48) setDeviceScoreIdentifiersSubmitted:1];
    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Updating local database after device submitted the device score identifiers.",  (uint8_t *)&v11,  2u);
    }

    id v8 =  [*(id *)(*(void *)(a1 + 32) + 48) insertOrUpdatePaymentTransaction:*(void *)(a1 + 48) withTransactionSourceIdentifier:*(void *)(a1 + 56) insertionMode:0 performTruncation:0 insertedTransaction:0];
  }

  else
  {
    uint64_t v9 = PKLogFacilityTypeGetObject(11LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      id v12 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Device score identifier submission failed with error: %@",  (uint8_t *)&v11,  0xCu);
    }
  }
}

void sub_10001ED28(id a1, NSArray *a2, NSError *a3)
{
  uint64_t v4 = a2;
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v8)
    {
      int v12 = 138412290;
      id v13 = v5;
      uint64_t v9 = "Error updating account promotions in response to transaction update: %@";
      id v10 = v7;
      uint32_t v11 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v12, v11);
    }
  }

  else if (v8)
  {
    LOWORD(v12) = 0;
    uint64_t v9 = "Did update account promotions in response to transaction update";
    id v10 = v7;
    uint32_t v11 = 2;
    goto LABEL_6;
  }
}

void sub_10001EE1C(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    if ([v3 type] == (id)1)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 items]);
      BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v5 anyObject]);

      if (v6)
      {
        uint64_t v8 = objc_opt_class(&OBJC_CLASS___PKAccountRewards, v7);
        if ((objc_opt_isKindOfClass(v6, v8) & 1) != 0)
        {
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v6 transactionIdentifiers]);
          if ([v9 count])
          {

LABEL_10:
            __int128 v50 = 0u;
            __int128 v51 = 0u;
            __int128 v48 = 0u;
            __int128 v49 = 0u;
            double v17 = (void *)objc_claimAutoreleasedReturnValue([v6 transactionIdentifiers]);
            id v18 = [v17 countByEnumeratingWithState:&v48 objects:v55 count:16];
            if (v18)
            {
              id v19 = v18;
              uint64_t v20 = *(void *)v49;
              while (2)
              {
                for (uint64_t i = 0LL; i != v19; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v49 != v20) {
                    objc_enumerationMutation(v17);
                  }
                  id v22 = *(os_log_s **)(*((void *)&v48 + 1) + 8LL * (void)i);
                  id v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 48) ambiguousTransactionWithServiceIdentifier:v22]);

                  if (!v23)
                  {
                    uint64_t Object = PKLogFacilityTypeGetObject(23LL);
                    id v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
                    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 138412290;
                      __int128 v54 = v22;
                      _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "No card transaction for identifier: %@",  buf,  0xCu);
                    }

                    char v43 = 1;
                    goto LABEL_28;
                  }
                }

                id v19 = [v17 countByEnumeratingWithState:&v48 objects:v55 count:16];
                if (v19) {
                  continue;
                }
                break;
              }
            }

            char v43 = 0;
LABEL_28:

            __int128 v46 = 0u;
            __int128 v47 = 0u;
            __int128 v44 = 0u;
            __int128 v45 = 0u;
            uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v6 rewardsAddedIdentifiers]);
            id v28 = [v27 countByEnumeratingWithState:&v44 objects:v52 count:16];
            if (v28)
            {
              id v29 = v28;
              uint64_t v30 = *(void *)v45;
              while (2)
              {
                for (uint64_t j = 0LL; j != v29; uint64_t j = (char *)j + 1)
                {
                  if (*(void *)v45 != v30) {
                    objc_enumerationMutation(v27);
                  }
                  BOOL v32 = *(os_log_s **)(*((void *)&v44 + 1) + 8LL * (void)j);
                  id v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 48) accountEventWithIdentifier:v32]);

                  if (!v33)
                  {
                    uint64_t v38 = PKLogFacilityTypeGetObject(23LL);
                    uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
                    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)buf = 138412290;
                      __int128 v54 = v32;
                      _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "No rewards added event for identifier: %@",  buf,  0xCu);
                    }

                    goto LABEL_43;
                  }
                }

                id v29 = [v27 countByEnumeratingWithState:&v44 objects:v52 count:16];
                if (v29) {
                  continue;
                }
                break;
              }
            }

            if ((v43 & 1) != 0)
            {
LABEL_43:
              uint64_t v40 = PKLogFacilityTypeGetObject(14LL);
              uint64_t v41 = (os_log_s *)objc_claimAutoreleasedReturnValue(v40);
              if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
              {
                __int128 v42 = (os_log_s *)a1[5];
                *(_DWORD *)buf = 138412290;
                __int128 v54 = v42;
                _os_log_impl( (void *)&_mh_execute_header,  v41,  OS_LOG_TYPE_DEFAULT,  "Not suppressing transaction from UI: %@, waiting for more events",  buf,  0xCu);
              }
            }

            else
            {
              uint64_t v34 = PKLogFacilityTypeGetObject(14LL);
              __int128 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
              if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
              {
                int v36 = (os_log_s *)a1[5];
                *(_DWORD *)buf = 138412290;
                __int128 v54 = v36;
                _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "Suppressing transaction from UI: %@",  buf,  0xCu);
              }

              id v37 =  [*(id *)(a1[4] + 48) updateSuppressBehavior:1 forPaymentTransaction:a1[6] sourceIdentifier:a1[7]];
            }

            goto LABEL_23;
          }

          id v15 = (void *)objc_claimAutoreleasedReturnValue([v6 rewardsAddedIdentifiers]);
          id v16 = [v15 count];

          if (v16) {
            goto LABEL_10;
          }
        }
      }

      uint64_t v24 = PKLogFacilityTypeGetObject(23LL);
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_22;
      }
      *(_DWORD *)buf = 138412290;
      __int128 v54 = (os_log_s *)v4;
      id v13 = "Transaction not suppressed with event: %@";
      id v14 = v12;
    }

    else
    {
      uint64_t v10 = PKLogFacilityTypeGetObject(23LL);
      BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(v10);
      if (!os_log_type_enabled((os_log_t)v6, OS_LOG_TYPE_DEFAULT))
      {
LABEL_23:

        goto LABEL_24;
      }

      uint64_t v11 = PKAccountEventTypeToString([v4 type]);
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      *(_DWORD *)buf = 138412290;
      __int128 v54 = v12;
      id v13 = "Redemption event is of incorrect type: %@";
      id v14 = (os_log_s *)v6;
    }

    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v13, buf, 0xCu);
LABEL_22:

    goto LABEL_23;
  }

LABEL_24:
}
      }

      uint64_t v7 = [obj countByEnumeratingWithState:&v57 objects:v71 count:16];
    }

    while (v7);
  }

  if (-[NSMutableArray count](v47, "count"))
  {
    id v29 = PKLogFacilityTypeGetObject(14LL);
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    uint64_t v31 = v46;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v63 = v47;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Fetching missing transactions with query configurations %@",  buf,  0xCu);
    }

    BOOL v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) applePayContainer]);
    id v33 = PKCloudStoreOperationGroupStatementMetadataProcessing;
    v49[0] = _NSConcreteStackBlock;
    v49[2] = sub_10003B204;
    v49[3] = &unk_10063B998;
    uint64_t v34 = a1[7];
    __int128 v35 = (void *)a1[5];
    v49[4] = a1[4];
    __int128 v54 = v34;
    int v36 = PKCloudStoreOperationGroupSuffixStatementMetadataProcessing;
    v49[1] = 3221225472LL;
    id v37 = v35;
    uint64_t v38 = a1[8];
    __int128 v50 = v37;
    uint64_t v55 = v38;
    uint64_t v39 = v46;
    uint64_t v40 = a1[6];
    __int128 v51 = v39;
    id v56 = v40;
    uint64_t v41 = v43;
    __int128 v53 = v43;
    __int128 v42 = v44;
    __int128 v52 = v44;
    [v32 fetchItemsWithQueryConfigurations:v47 returnRecords:0 storeRecords:1 groupName:v33 groupSuffix:v36 completion:v49];
  }

  else
  {
    uint64_t v41 = v43;
    __int128 v42 = v44;
    (*((void (**)(id, id, void))v43 + 2))(v43, v44, 0LL);
    uint64_t v31 = v46;
  }
}
  }
}
          }

          -[NSMutableSet pk_safelyAddObject:](v6, "pk_safelyAddObject:", v18);
        }

        id v15 = [obj countByEnumeratingWithState:&v37 objects:v49 count:16];
      }

      while (v15);
    }

    uint64_t v31 = PKLogFacilityTypeGetObject(11LL);
    BOOL v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      __int128 v47 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Cleaning up recurring payments not in identifiers: %@",  buf,  0xCu);
    }

    +[PeerPaymentRecurringPayment deleteEntitiesForPeerPaymentRecurringPaymentNotIncludingIdentifiers:inDatabase:]( &OBJC_CLASS___PeerPaymentRecurringPayment,  "deleteEntitiesForPeerPaymentRecurringPaymentNotIncludingIdentifiers:inDatabase:",  v6,  self->_database);
    uint64_t v4 = v33;
    id v5 = v34;
  }
}

    uint64_t v31 = 0LL;
    uint64_t v10 = v67;
LABEL_53:

    goto LABEL_54;
  }

  if (!v18) {
    goto LABEL_28;
  }
  id v28 = v13;
  id v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
  uint64_t v30 = [v29 compare:v18];

  if (v30 == (id)-1LL)
  {
    id v13 = v28;
    if (a5 == 1)
    {
      v59 = PKLocalizedFeatureString( @"ACCOUNT_SERVICE_PAYMENT_SCHEDULED_NOTIFICATION_DEFAULT_PAYMENT_7_DAYS_BODY_FORMAT",  self->_featureIdentifier);
      id v19 = (id)objc_claimAutoreleasedReturnValue(v59);
      __int128 v60 = PKFormattedCurrencyStringFromNumber(v18, v13);
      id v21 = (void *)objc_claimAutoreleasedReturnValue(v60);
      id v23 = (id)objc_claimAutoreleasedReturnValue([(id)qword_100707A80 stringFromDate:v10]);
      __int128 v61 = PKStringWithValidatedFormat(v19, @"%@%@");
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v61);
      goto LABEL_53;
    }

    if (!a5)
    {
      BOOL v32 = PKLocalizedFeatureString( @"ACCOUNT_SERVICE_PAYMENT_SCHEDULED_NOTIFICATION_DEFAULT_PAYMENT_TOMORROW_BODY_FORMAT",  self->_featureIdentifier);
      id v19 = (id)objc_claimAutoreleasedReturnValue(v32);
      id v33 = PKFormattedCurrencyStringFromNumber(v18, v13);
      id v21 = (void *)objc_claimAutoreleasedReturnValue(v33);
      uint64_t v34 = PKStringWithValidatedFormat(v19, @"%@");
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(v34);
LABEL_54:

      goto LABEL_55;
    }
  }
}
      }

      id v5 = [v2 countByEnumeratingWithState:&v27 objects:v35 count:16];
    }

    while (v5);
  }
}

        id v37 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[11] + 8) + 40) decimalNumberByAdding:v15]);
        uint64_t v38 = a1[11];
LABEL_25:
        uint64_t v39 = *(void *)(v38 + 8);
        BOOL v32 = *(void **)(v39 + 40);
        *(void *)(v39 + 40) = v37;
        goto LABEL_26;
      }

      int v36 = (unint64_t)(v22 - 5) > 1;
      uint64_t v34 = v43;
      id v33 = v44;
      a1 = v41;
      __int128 v35 = v42;
      id v2 = v40;
      if (!v36) {
        goto LABEL_24;
      }
LABEL_27:

      id result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, v2);
      if ((result & 1) == 0) {
        return result;
      }
    }

    uint64_t v34 = v43;
    id v33 = v44;
    a1 = v41;
    __int128 v35 = v42;
    id v2 = v40;
    if (v24 != (id)2) {
      goto LABEL_27;
    }
    goto LABEL_24;
  }

  return result;
}

        __break(1u);
        goto LABEL_25;
      }

id *sub_10001F2D8(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if ([a1[6] transactionSourceTypeForTransactionSourceIdentifier:v5] == (id)2)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 accountIdentifier]);
      uint64_t v8 = objc_claimAutoreleasedReturnValue([v6 altDSID]);
      uint64_t v9 = (void *)v8;
      if (v7 && v8)
      {
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([a1[6] accountIdentifierWithPreviousAccountIdentifier:v7]);
        if (v10)
        {
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( [a1[6] transactionSourceIdentifierForAccountUserAltDSID:v9 accountIdentifier:v10]);
          id v12 = a1[6];
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 serviceIdentifier]);
          a1 = (id *)[v12 hasTransactionWithServiceIdentifier:v13 transactionSourceIdentifier:v11];
        }

        else
        {
          a1 = 0LL;
        }
      }

      else
      {
        uint64_t Object = PKLogFacilityTypeGetObject(14LL);
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          v17[0] = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Error: an account identifier or altDSID is not defined on an account user transaction",  (uint8_t *)v17,  2u);
        }

        a1 = 0LL;
      }
    }

    else
    {
      a1 = 0LL;
    }
  }

  return a1;
}

void sub_10001F440(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1 && [*(id *)(a1 + 48) transactionSourceTypeForTransactionSourceIdentifier:v5] == (id)2)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 accountIdentifier]);
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v6 altDSID]);
    uint64_t v9 = (void *)v8;
    if (v7 && v8)
    {
      id v10 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) previousAccountIdentifierForAccountIdentifier:v7]);
      if ([v10 count])
      {
        id v21 = v7;
        id v22 = v6;
        id v23 = v5;
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 serviceIdentifier]);
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        __int128 v27 = 0u;
        id v10 = v10;
        id v12 = [v10 countByEnumeratingWithState:&v24 objects:v34 count:16];
        if (v12)
        {
          id v13 = v12;
          uint64_t v14 = *(void *)v25;
          do
          {
            for (uint64_t i = 0LL; i != v13; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v25 != v14) {
                objc_enumerationMutation(v10);
              }
              uint64_t v16 = *(void *)(*((void *)&v24 + 1) + 8LL * (void)i);
              double v17 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) transactionSourceIdentifierForAccountUserAltDSID:v9 accountIdentifier:v16]);
              if (v17
                && [*(id *)(a1 + 48) suppressionBehaviorForTransactionSourceIdentifier:v17 serviceIdentifier:v11] != (id)1)
              {
                uint64_t Object = PKLogFacilityTypeGetObject(14LL);
                id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
                if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412802;
                  uint64_t v29 = v16;
                  __int16 v30 = 2112;
                  uint64_t v31 = v9;
                  __int16 v32 = 2112;
                  id v33 = v11;
                  _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Suppressing replayed transaction for account identifier %@ user altDSID %@ and serviceIdentifier %@",  buf,  0x20u);
                }

                [*(id *)(a1 + 48) updateSuppressBehavior:1 forTransactionSourceIdentifier:v17 serviceIdentifier:v11];
              }
            }

            id v13 = [v10 countByEnumeratingWithState:&v24 objects:v34 count:16];
          }

          while (v13);
        }

        id v6 = v22;
        id v5 = v23;
        uint64_t v7 = v21;
      }
    }

    else
    {
      uint64_t v20 = PKLogFacilityTypeGetObject(14LL);
      id v10 = (id)objc_claimAutoreleasedReturnValue(v20);
      if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v10,  OS_LOG_TYPE_DEFAULT,  "Error: an account identifier or altDSID is not defined on an account user transaction",  buf,  2u);
      }
    }
  }
}

id sub_10001F77C(uint64_t a1, void *a2)
{
  return _[a2 sendPaymentPassWithUniqueIdentifier:*(void *)(a1 + 32) didUpdateCategoryVisualizationWithStyle:*(void *)(a1 + 40)];
}

id sub_10001F818(uint64_t a1, void *a2)
{
  return _[a2 sendDidRecieveCredentialInvitation:*(void *)(a1 + 32)];
}

id sub_10001F98C(void *a1, void *a2)
{
  return [a2 sendCredential:a1[4] forPaymentApplication:a1[5] didUpdateRangingSuspensionReasons:a1[6]];
}

void sub_10001FA4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PDDefaultQueue();
  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10001FAE4;
  v7[3] = &unk_1006392B0;
  void v7[4] = *(void *)(a1 + 32);
  id v8 = v3;
  id v6 = v3;
  dispatch_async(v5, v7);
}

id sub_10001FAE4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 136) updateDailyCashNotificationsWithAccount:*(void *)(a1 + 40)];
}

void sub_10001FC5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      id v10 = 0LL;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        [*(id *)(a1 + 32) transactionSourceIdentifier:v5 willRemoveTransaction:*(void *)(*((void *)&v11 + 1) + 8 * (void)v10)];
        id v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v8);
  }
}

id sub_10001FE30(uint64_t a1, void *a2)
{
  return _[a2 sendTransactionSourceIdentifier:*(void *)(a1 + 32) didRemoveTransactionWithIdentifier:*(void *)(a1 + 40)];
}

void sub_10001FE3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    [*(id *)(a1 + 328) transactionSourceIdentifier:v5 didRemoveTransactionWithIdentifier:v6];
    uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) passUniqueIdentifierForTransactionSourceIdentifier:v5]);
    id v8 = (void *)v7;
    if (v6 && v7)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
      v11[0] = PKDistributedNotificationTransactionIdentifierKey;
      v11[1] = PKDistributedNotificationTransactionPassUniqueIDKey;
      v12[0] = v6;
      v12[1] = v8;
      v11[2] = PKDistributedNotificationTransactionSourceTransactionIdentifierKey;
      v12[2] = v5;
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v12,  v11,  3LL));
      [v9 postNotificationName:PKDistributedNotificationPaymentTransactionRemoved object:0 userInfo:v10];
    }
  }
}

id sub_100020044(uint64_t a1, void *a2)
{
  return _[a2 sendDidRemoveTransactionsWithSourceIdentifierMapping:*(void *)(a1 + 32)];
}

void sub_100020050(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v12;
    do
    {
      id v10 = 0LL;
      do
      {
        if (*(void *)v12 != v9) {
          objc_enumerationMutation(v6);
        }
        sub_10001FE3C(*(void *)(a1 + 32), v5, *(void **)(*((void *)&v11 + 1) + 8LL * (void)v10));
        id v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v8);
  }
}

id sub_100020214(uint64_t a1, void *a2)
{
  return _[a2 sendPaymentPassWithUniqueIdentifier:*(void *)(a1 + 32) didReceiveMessage:*(void *)(a1 + 40)];
}

void sub_100020450(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v3));
  [v4 sendPaymentPassWithUniqueIdentifier:v2 didReceiveBalanceUpdate:v5];
}

void sub_1000204B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (a1)
  {
    __int128 v11 = *(void **)(a1 + 56);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100020834;
    void v12[3] = &unk_10063A4B8;
    id v13 = v9;
    uint64_t v14 = a1;
    id v15 = v7;
    id v16 = v8;
    [v11 userNotificationsForPassUniqueIdentifier:v15 ofType:7 completion:v12];
  }
}

id sub_100020688(uint64_t a1, void *a2)
{
  return _[a2 sendPaymentPassWithUniqueIdentifier:*(void *)(a1 + 32) didReceivePlanUpdate:*(void *)(a1 + 40)];
}

id sub_100020824(void *a1, void *a2)
{
  return _[a2 sendPaymentPassWithUniqueIdentifier:a1[4] didUpdateBalanceReminder:a1[5] forBalanceWithIdentifier:a1[6]];
}

void sub_100020834(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifiers]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 anyObject]);

  id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 48) balanceReminderThresholdForBalanceIdentifier:v5 withPassUniqueIdentifier:*(void *)(a1 + 48)]);
  if (!v6) {
    goto LABEL_15;
  }
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 48) passWithUniqueIdentifier:*(void *)(a1 + 48)]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 paymentPass]);

  if (![v8 isAutoTopUpBalance:*(void *)(a1 + 32)])
  {
LABEL_14:

LABEL_15:
    else {
      id v8 = 0LL;
    }
    obuint64_t j = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) currencyCode]);
    double v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) value]);
    __int128 v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) value]);
    if (!v8 || !v17 || !v53)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = *(os_log_s **)(a1 + 48);
        *(_DWORD *)buf = 138413058;
        __int128 v75 = v29;
        __int16 v76 = 2112;
        __int128 v77 = v8;
        __int16 v78 = 2112;
        __int128 v79 = v17;
        __int16 v80 = 2112;
        __int128 v81 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Ignoring lowBalance evaluation for pass %@. (threshold %@, newBalance: %@, oldBalance: %@)",  buf,  0x2Au);
      }

      goto LABEL_70;
    }

    __int128 v51 = v5;
    id v52 = v3;
    __int128 v66 = 0u;
    __int128 v67 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    id v18 = v3;
    id v19 = [v18 countByEnumeratingWithState:&v64 objects:v84 count:16];
    __int128 v50 = v6;
    if (v19)
    {
      id v20 = v19;
      char v21 = 0;
      uint64_t v22 = *(void *)v65;
      do
      {
        for (uint64_t i = 0LL; i != v20; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v65 != v22) {
            objc_enumerationMutation(v18);
          }
          __int128 v24 = *(os_log_s **)(*((void *)&v64 + 1) + 8LL * (void)i);
          if ((-[os_log_s isActive](v24, "isActive") & 1) == 0)
          {
            uint64_t v25 = PKLogFacilityTypeGetObject(6LL);
            __int128 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              __int128 v75 = v24;
              _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Removing an existing lowBalance reminder notification because it is inactive: %@",  buf,  0xCu);
            }

            [*(id *)(*(void *)(a1 + 40) + 56) removeUserNotification:v24];
            v21 |= [v17 compare:v8] == (id)-1;
          }
        }

        id v20 = [v18 countByEnumeratingWithState:&v64 objects:v84 count:16];
      }

      while (v20);

      id v6 = v50;
      if ((v21 & 1) != 0) {
        goto LABEL_50;
      }
    }

    else
    {
    }

    if ([v17 compare:v8] == (id)-1 && objc_msgSend(v53, "compare:", v8) != (id)-1)
    {
LABEL_50:
      id v5 = v51;
      id v28 = -[PDPassLowBalanceReminderUserNotification initWithCurrentBalance:balanceCurrency:exponent:reminderAmount:reminderCurrency:passUniqueIdentifier:balanceIdentifier:]( [PDPassLowBalanceReminderUserNotification alloc],  "initWithCurrentBalance:balanceCurrency:exponent:reminderAmount:reminderCurrency:passUniqueIdentifier:balanceIdentifier:",  v17,  obj,  [*(id *)(a1 + 32) exponent],  v8,  obj,  *(void *)(a1 + 48),  v51);
      [*(id *)(*(void *)(a1 + 40) + 56) insertUserNotification:v28];
      uint64_t v38 = PKLogFacilityTypeGetObject(6LL);
      uint64_t v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
      id v3 = v52;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138413314;
        __int128 v75 = v28;
        __int16 v76 = 2112;
        __int128 v77 = v40;
        __int16 v78 = 2112;
        __int128 v79 = v8;
        __int16 v80 = 2112;
        __int128 v81 = v17;
        __int16 v82 = 2112;
        __int128 v83 = v53;
        _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "Inserting new lowBalance notification %@ for pass %@ because new balance dropped below threshold. (threshold % @, newBalance: %@, oldBalance: %@)",  buf,  0x34u);
      }

      goto LABEL_70;
    }

    id v5 = v51;
    id v3 = v52;
    if ([v17 compare:v8] == (id)-1)
    {
      if (!v18) {
        goto LABEL_71;
      }
      __int128 v58 = 0u;
      __int128 v59 = 0u;
      __int128 v56 = 0u;
      __int128 v57 = 0u;
      id v28 = (os_log_s *)v18;
      id v42 = -[os_log_s countByEnumeratingWithState:objects:count:]( v28,  "countByEnumeratingWithState:objects:count:",  &v56,  v72,  16LL);
      if (!v42)
      {
        id v5 = v51;
        id v3 = v52;
        goto LABEL_70;
      }

      id v43 = v42;
      uint64_t v44 = *(void *)v57;
      do
      {
        for (uint64_t j = 0LL; j != v43; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v57 != v44) {
            objc_enumerationMutation(v28);
          }
          __int128 v46 = *(void **)(*((void *)&v56 + 1) + 8LL * (void)j);
          objc_msgSend( v46,  "updateBalanceAmount:currency:exponent:",  v17,  obj,  objc_msgSend(*(id *)(a1 + 32), "exponent"));
          [v46 updateReminderAmount:v8 currency:obj];
          [v46 setReissueBannerOnUpdate:0];
          [*(id *)(*(void *)(a1 + 40) + 56) insertUserNotification:v46];
          uint64_t v47 = PKLogFacilityTypeGetObject(6LL);
          __int128 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v49 = *(void **)(a1 + 48);
            *(_DWORD *)buf = 138413314;
            __int128 v75 = (os_log_s *)v46;
            __int16 v76 = 2112;
            __int128 v77 = v49;
            __int16 v78 = 2112;
            __int128 v79 = v8;
            __int16 v80 = 2112;
            __int128 v81 = v17;
            __int16 v82 = 2112;
            __int128 v83 = v53;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "Updating existing lowBalance notification %@ for pass %@ (threshold %@, newBalance: %@, oldBalance: %@)",  buf,  0x34u);
          }
        }

        id v43 = -[os_log_s countByEnumeratingWithState:objects:count:]( v28,  "countByEnumeratingWithState:objects:count:",  &v56,  v72,  16LL);
      }

      while (v43);
      id v5 = v51;
      id v3 = v52;
    }

    else
    {
      if (!v18) {
        goto LABEL_71;
      }
      __int16 v30 = v8;
      __int128 v62 = 0u;
      __int128 v63 = 0u;
      __int128 v60 = 0u;
      __int128 v61 = 0u;
      id v31 = v18;
      id v32 = [v31 countByEnumeratingWithState:&v60 objects:v73 count:16];
      if (v32)
      {
        id v33 = v32;
        uint64_t v34 = *(void *)v61;
        do
        {
          for (k = 0LL; k != v33; k = (char *)k + 1)
          {
            if (*(void *)v61 != v34) {
              objc_enumerationMutation(v31);
            }
            [*(id *)(*(void *)(a1 + 40) + 56) removeUserNotification:*(void *)(*((void *)&v60 + 1) + 8 * (void)k)];
          }

          id v33 = [v31 countByEnumeratingWithState:&v60 objects:v73 count:16];
        }

        while (v33);
      }

      uint64_t v36 = PKLogFacilityTypeGetObject(6LL);
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        id v6 = v50;
        id v8 = v30;
        goto LABEL_70;
      }

      id v37 = *(os_log_s **)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      __int128 v75 = v37;
      __int16 v76 = 2112;
      id v8 = v30;
      __int128 v77 = v30;
      __int16 v78 = 2112;
      __int128 v79 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Dropping current lowBalance notifications for pass %@ because new balance became above threshold. (threshold %@, newBalance: %@)",  buf,  0x20u);
    }

    id v6 = v50;
LABEL_70:

LABEL_71:
LABEL_72:

    goto LABEL_73;
  }

  if (![v8 isAutoTopEnabled])
  {
    [v6 setEnabled:1];
    [*(id *)(*(void *)(a1 + 40) + 48) setBalanceReminder:v6 forBalanceIdentifier:v5 withPassUniqueIdentifier:*(void *)(a1 + 48)];
    goto LABEL_14;
  }

  [v6 setEnabled:0];
  [*(id *)(*(void *)(a1 + 40) + 48) setBalanceReminder:v6 forBalanceIdentifier:v5 withPassUniqueIdentifier:*(void *)(a1 + 48)];
  __int128 v68 = 0u;
  __int128 v69 = 0u;
  __int128 v70 = 0u;
  __int128 v71 = 0u;
  obuint64_t j = v3;
  id v9 = [obj countByEnumeratingWithState:&v68 objects:v85 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v55 = v8;
    __int128 v11 = v6;
    uint64_t v12 = *(void *)v69;
    while (2)
    {
      for (m = 0LL; m != v10; m = (char *)m + 1)
      {
        if (*(void *)v69 != v12) {
          objc_enumerationMutation(obj);
        }
        uint64_t v14 = *(void **)(*((void *)&v68 + 1) + 8LL * (void)m);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 balanceIdentifier]);
        int v16 = PKEqualObjects(v15, v5);

        if (v16)
        {
          [*(id *)(*(void *)(a1 + 40) + 56) removeUserNotification:v14];
          uint64_t v41 = PKLogFacilityTypeGetObject(6LL);
          double v17 = (void *)objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled((os_log_t)v17, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            __int128 v75 = (os_log_s *)v14;
            _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v17,  OS_LOG_TYPE_DEFAULT,  "Removing an existing lowBalance reminder notification because auto top up is enabled: %@",  buf,  0xCu);
          }

          id v6 = v11;
          id v8 = v55;
          goto LABEL_72;
        }
      }

      id v10 = [obj countByEnumeratingWithState:&v68 objects:v85 count:16];
      if (v10) {
        continue;
      }
      break;
    }

    id v6 = v11;
    id v8 = v55;
  }

LABEL_73:
}

  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v9 supportedFeatures]);
  +[SavingsAccountFeatureDescriptor updateSavingsAccountFeatureDescriptors:forAccountPID:inDatabase:]( &OBJC_CLASS___SavingsAccountFeatureDescriptor,  "updateSavingsAccountFeatureDescriptors:forAccountPID:inDatabase:",  v30,  v74,  v10);
LABEL_74:

LABEL_75:
LABEL_76:
}

id sub_100021244(uint64_t a1, void *a2)
{
  return _[a2 sendPaymentPassWithUniqueIdentifier:*(void *)(a1 + 32) didEnableTransactionService:*(unsigned __int8 *)(a1 + 40)];
}

id sub_1000212F4(uint64_t a1, void *a2)
{
  return _[a2 sendPaymentPassWithUniqueIdentifier:*(void *)(a1 + 32) didEnableMessageService:*(unsigned __int8 *)(a1 + 40)];
}

id sub_100021470(uint64_t a1, void *a2)
{
  return _[a2 sendPassWithUniqueIdentifier:*(void *)(a1 + 32) didReceiveValueAddedServiceTransaction:*(void *)(a1 + 40)];
}

id sub_1000215F4(uint64_t a1, void *a2)
{
  return _[a2 sendPaymentPassWithUniqueIdentifier:*(void *)(a1 + 32) didUpdateWithTransitProperties:*(void *)(a1 + 40)];
}

void sub_100021600(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = *(void *)v14;
      do
      {
        for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v7) {
            objc_enumerationMutation(v4);
          }
          id v9 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 paymentTransaction]);
          id v11 = [v10 transitType];
          id v12 = *(id *)(a1 + 40);

          if (v11 == v12)
          {
            [v9 invalidateTransitBalance];
            [*(id *)(*(void *)(a1 + 32) + 56) insertUserNotification:v9];
          }

          else
          {
            [*(id *)(*(void *)(a1 + 32) + 56) removeUserNotification:v9];
          }
        }

        id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v6);
    }
  }
}

LABEL_38:
}
}

  PKExcludeFileURLFromBackup(v6);
}

            id v4 = 0LL;
            goto LABEL_39;
          }

          if (!v29) {
            goto LABEL_38;
          }
          __int128 v35 = 138543618;
          uint64_t v36 = v9;
          id v37 = 2114;
          uint64_t v38 = v14;
          uint64_t v22 = "PKExpressPassManager: WARNING EXPRESS KEY (%{public}@:%{public}@) IN USE. DOES NOT MATCH REQUESTED APPLE"
                "T! Please file a radar.";
LABEL_36:
          __int16 v30 = v19;
          id v31 = 22;
          goto LABEL_37;
        }
      }

      id v4 = 0LL;
    }

    else
    {
      [v3 associateWithApplicationIdentifier:a1[4] keyIdentifier:a1[5] terminalReaderIdentifier:0 passUniqueIdentifier:a1[6]];
      id v4 = 1LL;
    }
  }

  else if ((v5 & 1) != 0)
  {
    goto LABEL_39;
  }

  [v3 receiveEvents:1024];
  if ([v3 isIgnorable])
  {
    id v23 = [v3 copy];
    __int128 v24 = *(void *)(a1[7] + 8LL);
    uint64_t v25 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = v23;
  }

      goto LABEL_39;
    }

    if (v5)
    {
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue( -[PDTransitNotificationService _hasSentRenotifyNotificationForRenotifyCampaign:]( self,  "_hasSentRenotifyNotificationForRenotifyCampaign:",  v5));
      if (!v13) {
        goto LABEL_42;
      }
      uint64_t v7 = (BOOL)v13;
      if (!v6)
      {

        goto LABEL_35;
      }
    }

    else if (!v6)
    {
      goto LABEL_35;
    }

    id v23 = (void *)objc_claimAutoreleasedReturnValue( -[PDTransitNotificationService _hasSentRenotifyNotificationForRenotifyCampaign:]( self,  "_hasSentRenotifyNotificationForRenotifyCampaign:",  v6));

    if (v5) {
    if (v23)
    }
    {
LABEL_35:
      __int128 v24 = PKLogFacilityTypeGetObject(12LL);
      char v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = 138412546;
        __int16 v30 = (unint64_t)v4;
        id v31 = 2048;
        id v32 = v12;
        uint64_t v22 = "PDTransitNotificationService: should not send market notificaiton for %@.\n"
              "Notification of type (%lu) has already been sent and all active renotify campaigns have been sent";
        goto LABEL_37;
      }

      goto LABEL_38;
    }

      uint64_t v2 = v39;
      id v11 = v37;
      uint64_t v7 = v38;
      __int128 v13 = v36;
    }
  }

  if (objc_msgSend(*(id *)(a1 + 32), "accountType", v36, v37, v38) == (id)4)
  {
    id v33 = *(void *)(a1 + 40);
    if ([*(id *)(a1 + 32) transactionType] == (id)6)
    {
      uint64_t v34 = [*(id *)(a1 + 32) topUpType];
      if (!v33 && v34 == (id)6) {
        +[PKEngagementEventTrigger fireAppleAccountInStoreTopUpEvent]( &OBJC_CLASS___PKEngagementEventTrigger,  "fireAppleAccountInStoreTopUpEvent");
      }
    }
  }

  if ([*(id *)(a1 + 32) peerPaymentType] == (id)1
    || [*(id *)(a1 + 32) peerPaymentType] == (id)2)
  {
    __int128 v35 = [*(id *)(a1 + 32) peerPaymentPaymentMode] != (id)2 || v2;
    if ((v35 & 1) == 0) {
      +[PKEngagementEventTrigger firePeerPaymentDeviceTapTransactionAddedEvent]( &OBJC_CLASS___PKEngagementEventTrigger,  "firePeerPaymentDeviceTapTransactionAddedEvent");
    }
  }

BOOL sub_100021C44(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v7 = a3;
  if (!a1)
  {
    BOOL v11 = 0LL;
    goto LABEL_19;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    id v29 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDServer: obliterating apple pay for %{public}@.",  buf,  0xCu);
  }

  int v10 = atomic_load((unsigned __int8 *)(a1 + 8));
  BOOL v11 = v10 == 1;
  if (v10 == 1)
  {
    id v12 = objc_autoreleasePoolPush();
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "passUniqueIDsOfType:", 1, 0));
    id v14 = [v13 countByEnumeratingWithState:&v23 objects:v27 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v24;
      do
      {
        for (uint64_t i = 0LL; i != v15; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v16) {
            objc_enumerationMutation(v13);
          }
          [*(id *)(a1 + 32) deleteCardWithUniqueID:*(void *)(*((void *)&v23 + 1) + 8 * (void)i) forReason:a5 withDiagnosticReason:v7];
        }

        id v15 = [v13 countByEnumeratingWithState:&v23 objects:v27 count:16];
      }

      while (v15);
    }

    objc_autoreleasePoolPop(v12);
    [*(id *)(a1 + 120) noteAccountDeletionWithCompletion:0];
    [*(id *)(a1 + 128) noteAccountDeletionWithCompletion:0];
    [*(id *)(a1 + 328) deleteAllFinHealthDataWithCompletion:0];
    [*(id *)(a1 + 104) deleteSharedWebServiceWithDiagnosticReason:v7];
    [*(id *)(a1 + 168) noteAccountDeleted];
    [*(id *)(a1 + 96) deleteSharedWebServiceWithDiagnosticReason:v7];
    id v18 = *(void **)(a1 + 360);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) sharedWebService]);
    [v18 setPaymentWebService:v19];

    [*(id *)(a1 + 344) updateUpgradedPasscodePolicyEnforcementWithCompletion:&stru_10063A940];
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    *(_WORD *)buf = 0;
    id v20 = "PDServer: finished oblierating apple pay.";
  }

  else
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    *(_WORD *)buf = 0;
    id v20 = "PDServer: passd is not active - ignoring apple pay reset request.";
  }

  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v20, buf, 2u);
LABEL_18:

LABEL_19:
  return v11;
}

void sub_100021FCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    if (!v5) {
      __break(1u);
    }
    id v7 = PDDefaultQueue();
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    PDWakePassbookInBackground();

    id v9 = sub_100028B28(a1);
    int v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    if ([v10 count])
    {
      BOOL v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) effectiveCatalog]);
      id v19 = _NSConcreteStackBlock;
      uint64_t v20 = 3221225472LL;
      char v21 = sub_100028BCC;
      uint64_t v22 = &unk_10063A8F8;
      id v23 = v5;
      id v24 = v6;
      id v25 = v11;
      id v12 = v11;
      __int128 v13 = objc_retainBlock(&v19);
      sub_1000288A8(a1, v13, v10);
    }

    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter",  v19,  v20,  v21,  v22));
    uint64_t v15 = PKPassLibraryDidRecoverPassNotification;
    uint64_t v26 = PKPassLibraryUniqueIDUserInfoKey;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
    __int128 v27 = v16;
    double v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v27,  &v26,  1LL));
    [v14 postNotificationName:v15 object:0 userInfo:v17];

    xpc_object_t v18 = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string(v18, "Name", (const char *)[PKPassLibraryDidChangeNotification UTF8String]);
    [*(id *)(a1 + 488) sendEvent:v18];
  }
}

void sub_1000224D0(uint64_t a1)
{
}

void sub_1000224E0(id *a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (a1)
  {
    id v6 = [v7 type];
    if (v6 == (id)1)
    {
      if (v5) {
        v5[2](v5);
      }
    }

    else if (!v6)
    {
      sub_100022720(a1, v5);
    }
  }
}

void sub_100022558(uint64_t a1)
{
}

void sub_100022568(id *a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (a1)
  {
    id v6 = [v7 type];
    if (v6 == (id)1)
    {
      sub_100022888(a1, v7, v5);
    }

    else if (!v6)
    {
      sub_1000227D4(a1, v7, v5);
    }
  }
}

void sub_1000225E4(uint64_t a1)
{
}

void sub_1000225F4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = [v5 type];
    if (v7 == (id)1)
    {
      objc_initWeak(&location, a1);
      id v8 = (void *)a1[16];
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      id v9[2] = sub_100022C60;
      v9[3] = &unk_10063A530;
      objc_copyWeak(&v11, &location);
      id v10 = v6;
      [v8 defaultAccountForFeature:4 completion:v9];

      objc_destroyWeak(&v11);
      objc_destroyWeak(&location);
    }

    else if (!v7)
    {
      if ([v5 event] == (id)2) {
        sub_1000229B4((uint64_t)a1, v6);
      }
      else {
        sub_100022AB8((id *)a1, v6);
      }
    }
  }
}

void sub_100022704(_Unwind_Exception *a1)
{
}

void sub_100022720(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = v3;
    PKDisableAutomaticRegistration(0LL);
    PKDisableCloudKitEnvironmentChangeHandling(0LL);
    [a1[32] performDeviceRegistrationForReason:@"account added" brokerURL:0 action:0 forceApplePayRegister:0 forcePeerPaymentRegister:0 completion:&stru_10063A570];
    [a1[5] deleteCloudSyncRelatedInformation];
    [a1[4] restartUbiquity];
    +[PKWalletVisibility updateWalletVisibility](&OBJC_CLASS___PKWalletVisibility, "updateWalletVisibility");
    [a1[12] noteAccountChanged];
    [a1[31] noteAccountAdded];
    [a1[64] noteAccountAdded];
    id v3 = v4;
    if (v4)
    {
      (*((void (**)(id))v4 + 2))(v4);
      id v3 = v4;
    }
  }
}

void sub_1000227D4(id *a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (a1)
  {
    PKDisableCloudKitEnvironmentChangeHandling(0LL);
    if ([v6 enablementOfWalletDataclassChanged])
    {
      [a1[31] noteCloudSyncPassesSwitchChanged];
      +[PKWalletVisibility updateWalletVisibility](&OBJC_CLASS___PKWalletVisibility, "updateWalletVisibility");
    }

    [a1[12] noteAccountChanged];
    if (v5) {
      v5[2](v5);
    }
  }
}

void sub_100022888(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore ams_sharedAccountStore](&OBJC_CLASS___ACAccountStore, "ams_sharedAccountStore"));
    objc_initWeak(&location, a1);
    id v8 = (void *)a1[16];
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100023324;
    v10[3] = &unk_10063A628;
    objc_copyWeak(&v14, &location);
    id v11 = v5;
    id v9 = v7;
    id v12 = v9;
    id v13 = v6;
    [v8 defaultAccountForFeature:4 completion:v10];

    objc_destroyWeak(&v14);
    objc_destroyWeak(&location);
  }
}

void sub_100022998(_Unwind_Exception *a1)
{
}

void sub_1000229B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    int v4 = PKiCloudSignoutShouldDeleteLocalData();
    if ((PKHandsOnDemoModeEnabled() & 1) != 0) {
      int v5 = 1;
    }
    else {
      int v5 = PKStoreDemoModeEnabled();
    }
    uint64_t v6 = _os_feature_enabled_impl("Wallet", "DeletePassesOnSignout");
    if ((_DWORD)v6 && (PKIsPhone(v6, v7), PKSetiCloudSignoutShouldDeleteLocalData(0LL), ((v4 ^ 1 | v5) & 1) == 0))
    {
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v10 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "iCloud signout handler - removing all passes",  v10,  2u);
      }

      [*(id *)(a1 + 32) deleteAllWithDiagnosticReason:@"Account Deleted"];
      if (v3) {
        goto LABEL_8;
      }
    }

    else
    {
      [*(id *)(a1 + 512) noteAccountRemoved];
      if (v3) {
LABEL_8:
      }
        v3[2](v3);
    }
  }
}

void sub_100022AB8(id *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    PKDisableAutomaticRegistration(1LL);
    PKDisableCloudKitEnvironmentChangeHandling(1LL);
    uint64_t v4 = PKAggDKeyPaymentLifecycleDelete;
    PKAggDClientAddValueForScalarKey(PKAggDKeyPaymentLifecycleDelete, 1LL);
    uint64_t v5 = PKAnalyticsSendEvent(v4, &off_100691220);
    if ((PKHandsOnDemoModeEnabled(v5) & 1) == 0 && (PKStoreDemoModeEnabled() & 1) == 0)
    {
      sub_100021C44((uint64_t)a1, v6, @"Account Deleted", 0LL, 5LL);
      +[PKWalletVisibility updateWalletVisibility](&OBJC_CLASS___PKWalletVisibility, "updateWalletVisibility");
      PKSetStockholmEnvironmentDisplayName(0LL);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[PKPaymentOptionsDefaults defaults](&OBJC_CLASS___PKPaymentOptionsDefaults, "defaults"));
      [v7 deleteAllLocalDefaults];

      +[PKPassOwnershipToken deleteAllLocalKeychainOwnershipTokens]( &OBJC_CLASS___PKPassOwnershipToken,  "deleteAllLocalKeychainOwnershipTokens");
    }

    [a1[31] noteAccountDeleted];
    [a1[5] deleteCloudSyncRelatedInformation];
    [a1[6] deleteAllCloudStoreContainerChangeEventHistory];
    [a1[16] noteAccountDeletionWithCompletion:&stru_10063A590];
    [a1[15] noteAccountDeletionWithCompletion:&stru_10063A5B0];
    [a1[44] noteAccountRemoved];
    [a1[21] noteAccountDeleted];
    PKSetiCloudSignoutShouldDeleteLocalData(0LL);
    [a1[13] deleteSharedWebServiceWithDiagnosticReason:@"Account Deleted"];
    id v8 = objc_alloc_init(&OBJC_CLASS___PKBankAccountInformation);
    [v8 deleteAllLocalBankInformation];

    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100022E60;
    v10[3] = &unk_10063A5D8;
    id v11 = v3;
    id v9 =  +[PKPeerPaymentSession startPeerPaymentSessionWithCompletion:]( &OBJC_CLASS___PKPeerPaymentSession,  "startPeerPaymentSessionWithCompletion:",  v10);
  }
}

void sub_100022C60(uint64_t a1, void *a2)
{
  id v7 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (v7 && WeakRetained)
  {
    uint64_t v4 = (void *)WeakRetained[4];
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v7 associatedPassUniqueID]);
    [v4 deleteCardWithUniqueID:v5 forReason:6 withDiagnosticReason:@"iTunes Account Deleted"];
  }

  uint64_t v6 = *(void *)(a1 + 32);
  if (v6) {
    (*(void (**)(void))(v6 + 16))();
  }
}

void sub_100022DB4(id a1, unint64_t a2, PKPaymentWebServiceContext *a3, NSError *a4)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 134217984;
    unint64_t v8 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Device Registration result was: %lu",  (uint8_t *)&v7,  0xCu);
  }
}

uint64_t sub_100022E60(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 deleteApplet];
  [v3 invalidateSessionWithCompletion:0];

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100023008(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) description]);
    *(_DWORD *)buf = 138412290;
    id v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Starting backup with files: %@", buf, 0xCu);
  }

  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100023150;
  v6[3] = &unk_10063A600;
  uint64_t v5 = *(void **)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  [v5 enumerateObjectsUsingBlock:v6];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Finished backup of files.", buf, 2u);
  }
}

void sub_100023150(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a2;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectAtIndex:a3]);
  [v6 truncateFileAtOffset:0];
  [v6 seekToFileOffset:0];
  id v7 = -[NSData initWithContentsOfURL:](objc_alloc(&OBJC_CLASS___NSData), "initWithContentsOfURL:", v5);

  id v17 = 0LL;
  [v6 writeData:v7 error:&v17];
  id v8 = v17;
  if (v8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 description]);
      *(_DWORD *)buf = 138543362;
      id v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Unable to write to file: %{public}@",  buf,  0xCu);
    }
  }

  id v16 = 0LL;
  [v6 closeAndReturnError:&v16];
  id v12 = v16;

  if (v12)
  {
    uint64_t v13 = PKLogFacilityTypeGetObject(0LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v12 description]);
      *(_DWORD *)buf = 138543362;
      id v19 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Unable to close file: %{public}@", buf, 0xCu);
    }
  }
}

void sub_100023324(uint64_t a1, void *a2)
{
  id v3 = a2;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  id v5 = WeakRetained;
  if (!v3 || !WeakRetained) {
    goto LABEL_12;
  }
  unsigned int v6 = [*(id *)(a1 + 32) accountStorefrontChanged];
  unsigned int v7 = objc_msgSend(*(id *)(a1 + 40), "ams_isActiveAccountCombined");
  id v8 = v7
     ? @"Apple Account storefront does not match PKAccount country code"
     : @"iCloud and iTunes Account Mismatch";
  if (v7 && !v6) {
    goto LABEL_12;
  }
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 138412290;
    id v17 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "%@: removing Apple Account pass if needed",  (uint8_t *)&v16,  0xCu);
  }

  id v11 = (void *)*((void *)v5 + 4);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v3 associatedPassUniqueID]);
  [v11 deleteCardWithUniqueID:v12 forReason:6 withDiagnosticReason:v8];

  if (v6)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "ams_activeiTunesAccount"));
    id v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "ams_storefront"));

    [*((id *)v5 + 16) resolveAccountStorefrontCountryMismatchForAccount:v3 newCountryCode:v14 completion:*(void *)(a1 + 48)];
  }

  else
  {
LABEL_12:
    uint64_t v15 = *(void *)(a1 + 48);
    if (v15) {
      (*(void (**)(void))(v15 + 16))();
    }
  }
}

void sub_1000236B4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48)) {
    sub_100024538(*(void *)(a1 + 32));
  }
  [*(id *)(*(void *)(a1 + 32) + 32) performImageMigrationWithStartTime:*(double *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 48) migrateObjectSettings];
  sub_10001935C(*(void *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100024728;
  v3[3] = &unk_100639610;
  v3[4] = v2;
  sub_100019674(v2, 0LL, v3);
}

void sub_100023770(uint64_t a1)
{
  if (a1)
  {
    uint64_t v1 = ((uint64_t (*)(void))PKKeychainVersion)();
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    int v3 = [v2 intValue];

    if (v3 < 2)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Migrating keychain to version 2", buf, 2u);
      }

      id v6 = [[PKKeychainItemWrapper alloc] initWithIdentifier:@"PKBillingAddressesKeychainKey" accessGroup:@"com.apple.PassbookUIService" serviceName:0 type:1 invisible:0];
      id v7 = [[PKKeychainItemWrapper alloc] initWithIdentifier:@"PKBillingAddressKeychainKey" accessGroup:@"com.apple.PassbookUIService" serviceName:0 type:2 invisible:0];
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 objectForKey:kSecValueData]);
      uint64_t v9 = objc_claimAutoreleasedReturnValue([v7 objectForKey:kSecValueData]);
      id v10 = (void *)v9;
      if (!v8 && v9)
      {
        id v11 = objc_alloc(&OBJC_CLASS___NSSet);
        uint64_t v13 = objc_opt_class(&OBJC_CLASS___NSDictionary, v12);
        uint64_t v15 = -[NSSet initWithObjects:](v11, "initWithObjects:", v13, objc_opt_class(&OBJC_CLASS___NSString, v14), 0LL);
        int v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v15,  v10,  0LL));

        uint64_t v18 = objc_opt_class(&OBJC_CLASS___NSDictionary, v17);
        if ((objc_opt_isKindOfClass(v16, v18) & 1) != 0)
        {
          v111 = v16;
          id v115 = v7;
          id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](&OBJC_CLASS___NSMutableSet, "set"));
          v110 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](&OBJC_CLASS___NSMutableDictionary, "dictionary"));
          __int128 v128 = 0u;
          __int128 v129 = 0u;
          __int128 v130 = 0u;
          __int128 v131 = 0u;
          uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) passesOfType:1]);
          id v21 = [v20 countByEnumeratingWithState:&v128 objects:v137 count:16];
          if (v21)
          {
            id v22 = v21;
            uint64_t v23 = *(void *)v129;
            do
            {
              for (uint64_t i = 0LL; i != v22; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v129 != v23) {
                  objc_enumerationMutation(v20);
                }
                id v25 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v128 + 1) + 8 * (void)i) primaryAccountIdentifier]);
                [v19 addObject:v25];
              }

              id v22 = [v20 countByEnumeratingWithState:&v128 objects:v137 count:16];
            }

            while (v22);
          }

          int v16 = v111;
          [v110 setObject:v19 forKey:v111];
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v110,  1LL,  0LL));
          [v6 setObject:v26 forKey:kSecValueData];

          id v27 = [[PKKeychainItemWrapper alloc] initWithIdentifier:@"PKBillingAddressKeychainKey" accessGroup:@"com.apple.PassbookUIService" serviceName:0 type:2 invisible:0];
          [v27 resetKeychainItem];

          id v7 = v115;
        }
      }

      id v28 = (void *)objc_claimAutoreleasedReturnValue(+[PKPaymentOptionsDefaults defaults](&OBJC_CLASS___PKPaymentOptionsDefaults, "defaults"));
      [v28 migrateToSyncable];

      PKSetKeychainVersion(&off_10068FA20);
    }

    uint64_t v29 = ((uint64_t (*)(void))PKKeychainVersion)();
    __int16 v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    int v31 = [v30 intValue];

    if (v31 < 3)
    {
      uint64_t v32 = PKLogFacilityTypeGetObject(0LL);
      id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue(v32);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Migrating keychain to version 3. Inferring recents update",  buf,  2u);
      }

      uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[PKPaymentOptionsDefaults defaults](&OBJC_CLASS___PKPaymentOptionsDefaults, "defaults"));
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v34 defaultShippingAddress]);

      if (v35)
      {
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Migrating default shipping address",  buf,  2u);
        }

        uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(+[PKPaymentOptionsDefaults defaults](&OBJC_CLASS___PKPaymentOptionsDefaults, "defaults"));
        id v37 = (void *)objc_claimAutoreleasedReturnValue([v35 contactWithCleanedUpDistrict]);
        [v36 setDefaultShippingAddress:v37];
      }

      v112 = v35;
      __int128 v126 = 0u;
      __int128 v127 = 0u;
      __int128 v124 = 0u;
      __int128 v125 = 0u;
      uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) passesOfType:1]);
      id v39 = [v38 countByEnumeratingWithState:&v124 objects:v136 count:16];
      if (v39)
      {
        id v40 = v39;
        uint64_t v41 = *(void *)v125;
        do
        {
          for (uint64_t j = 0LL; j != v40; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v125 != v41) {
              objc_enumerationMutation(v38);
            }
            id v43 = *(void **)(*((void *)&v124 + 1) + 8LL * (void)j);
            uint64_t v44 = (void *)objc_claimAutoreleasedReturnValue(+[PKPaymentOptionsDefaults defaults](&OBJC_CLASS___PKPaymentOptionsDefaults, "defaults"));
            __int128 v45 = (void *)objc_claimAutoreleasedReturnValue([v44 defaultBillingAddressForPaymentPass:v43]);

            if (v45)
            {
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              {
                __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v43 primaryAccountIdentifier]);
                *(_DWORD *)buf = 138412290;
                v135 = v46;
                _os_log_impl( (void *)&_mh_execute_header,  v33,  OS_LOG_TYPE_DEFAULT,  "Migrating billing address for payment pass: %@",  buf,  0xCu);
              }

              uint64_t v47 = (void *)objc_claimAutoreleasedReturnValue(+[PKPaymentOptionsDefaults defaults](&OBJC_CLASS___PKPaymentOptionsDefaults, "defaults"));
              __int128 v48 = (void *)objc_claimAutoreleasedReturnValue([v45 contactWithCleanedUpDistrict]);
              [v47 setDefaultBillingAddress:v48 forPaymentPass:v43];
            }
          }

          id v40 = [v38 countByEnumeratingWithState:&v124 objects:v136 count:16];
        }

        while (v40);
      }

      PKSetKeychainVersion(&off_10068FA38);
    }

    uint64_t v49 = ((uint64_t (*)(void))PKKeychainVersion)();
    __int128 v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
    int v51 = [v50 intValue];

    if (v51 < 4)
    {
      uint64_t v53 = PKLogFacilityTypeGetObject(0LL);
      __int128 v54 = (os_log_s *)objc_claimAutoreleasedReturnValue(v53);
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Adding service name to keychain items",  buf,  2u);
      }

      __int128 v122 = 0u;
      __int128 v123 = 0u;
      __int128 v120 = 0u;
      __int128 v121 = 0u;
      id v55 = [&off_100690EC0 countByEnumeratingWithState:&v120 objects:v133 count:16];
      if (v55)
      {
        id v56 = v55;
        uint64_t v57 = *(void *)v121;
        do
        {
          for (k = 0LL; k != v56; k = (char *)k + 1)
          {
            if (*(void *)v121 != v57) {
              objc_enumerationMutation(&off_100690EC0);
            }
            __int128 v59 = *(void **)(*((void *)&v120 + 1) + 8LL * (void)k);
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              v135 = v59;
              _os_log_impl( (void *)&_mh_execute_header,  v54,  OS_LOG_TYPE_DEFAULT,  "Migrating keychain key: %@",  buf,  0xCu);
            }

            id v60 = [[PKKeychainItemWrapper alloc] initWithIdentifier:v59 accessGroup:@"com.apple.PassbookUIService" serviceName:0 type:1 invisible:0];
            __int128 v61 = (void *)objc_claimAutoreleasedReturnValue([v60 objectForKey:kSecValueData]);
            if (v61)
            {
              [v60 resetKeychainItem];
              id v62 = [[PKKeychainItemWrapper alloc] initWithIdentifier:v59 accessGroup:@"com.apple.PassbookUIService" serviceName:@"com.apple.passkit" type:1 invisible:0];
              [v62 setObject:v61 forKey:kSecValueData];
            }
          }

          id v56 = [&off_100690EC0 countByEnumeratingWithState:&v120 objects:v133 count:16];
        }

        while (v56);
      }

      uint64_t v52 = PKSetKeychainVersion(&off_10068FA50);
    }

    uint64_t v63 = PKKeychainVersion(v52);
    __int128 v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
    int v65 = [v64 intValue];

    if (v65 < 5)
    {
      uint64_t v67 = PKLogFacilityTypeGetObject(0LL);
      __int128 v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Migrating keychain to version 5. Transfering peer payment bank information to new keychain.",  buf,  2u);
      }

      id v69 = [[PKKeychainItemWrapper alloc] initWithIdentifier:@"PKPeerPaymentUnitedStatesBankAccountInformationKeychainKey" accessGroup:@"com.apple.Passbook.PeerPayment" serviceName:@"com.apple.passkit" type:1 invisible:0];
      __int128 v70 = (void *)objc_claimAutoreleasedReturnValue([v69 objectForKey:kSecValueData]);
      if (v70)
      {
        [v69 resetKeychainItem];
        id v71 = [[PKKeychainItemWrapper alloc] initWithIdentifier:@"PKPeerPaymentUnitedStatesBankAccountInformationKeychainKey" accessGroup:@"com.apple.Passbook.PeerPayment" serviceName:@"com.apple.passkit" type:1 invisible:0];
        [v71 setLabel:@"com.apple.passkit"];
        id v72 = (void *)objc_claimAutoreleasedReturnValue([v71 objectForKey:kSecValueData]);
        if (!v72) {
          [v71 setObject:v70 forKey:kSecValueData];
        }
      }

      PKSetKeychainVersion(&off_10068FA68);
    }

    uint64_t v73 = PKKeychainVersion(v66);
    __int128 v74 = (void *)objc_claimAutoreleasedReturnValue(v73);
    int v75 = [v74 intValue];

    if (v75 < 6)
    {
      uint64_t v77 = PKLogFacilityTypeGetObject(0LL);
      __int16 v78 = (os_log_s *)objc_claimAutoreleasedReturnValue(v77);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "Migrating keychain to version 6. Updating billing address for card from accountIdentifier to pass primaryAccountIdentifier.",  buf,  2u);
      }

      __int128 v79 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) accounts]);
      __int16 v80 = (void *)objc_claimAutoreleasedReturnValue([v79 allObjects]);

      if ([v80 count])
      {
        __int128 v81 = (void *)objc_claimAutoreleasedReturnValue(+[PKPaymentOptionsDefaults defaults](&OBJC_CLASS___PKPaymentOptionsDefaults, "defaults"));
        __int128 v116 = 0u;
        __int128 v117 = 0u;
        __int128 v118 = 0u;
        __int128 v119 = 0u;
        v113 = v80;
        id v82 = v80;
        id v83 = [v82 countByEnumeratingWithState:&v116 objects:v132 count:16];
        if (!v83) {
          goto LABEL_81;
        }
        id v84 = v83;
        uint64_t v85 = *(void *)v117;
        while (1)
        {
          for (m = 0LL; m != v84; m = (char *)m + 1)
          {
            if (*(void *)v117 != v85) {
              objc_enumerationMutation(v82);
            }
            v87 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v116 + 1) + 8 * (void)m) accountIdentifier]);
            uint64_t v88 = (void *)objc_claimAutoreleasedReturnValue([v81 defaultBillingAddressForPrimaryAccountIdentifier:v87]);
            if (v88)
            {
              v89 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) primaryAccountIdentifierForAssociatedAccountIdentifier:v87]);
              if (v89)
              {
                [v81 setDefaultBillingAddress:v88 forPrimaryAccountIdentifier:v89];
                if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  v135 = v87;
                  uint64_t v90 = v78;
                  char v91 = "Migration added default billing address for primaryAccountIdentifier of accountIdentifier: %@";
                  goto LABEL_75;
                }
              }

              else if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v135 = v87;
                uint64_t v90 = v78;
                char v91 = "Cannot migrate address for accountIdentifier: %@ with nil primaryAccountIdentifier";
LABEL_75:
                _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, v91, buf, 0xCu);
              }

              [v81 deleteDefaultBillingAddressForPrimaryAccountIdentifier:v87];
              if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v135 = v87;
                _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "Migration removed default billing address for accountIdentifier: %@",  buf,  0xCu);
              }
            }
          }

          id v84 = [v82 countByEnumeratingWithState:&v116 objects:v132 count:16];
          if (!v84)
          {
LABEL_81:

            __int16 v80 = v113;
            break;
          }
        }
      }

      PKSetKeychainVersion(&off_10068FA80);
    }

    uint64_t v92 = PKKeychainVersion(v76);
    uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue(v92);
    int v94 = [v93 intValue];

    if (v94 < 7)
    {
      uint64_t v96 = PKLogFacilityTypeGetObject(0LL);
      v97 = (os_log_s *)objc_claimAutoreleasedReturnValue(v96);
      if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v97,  OS_LOG_TYPE_DEFAULT,  "Migrating keychain to version 7. Hiding ownership tokens in keychain.",  buf,  2u);
      }

      +[PKPassOwnershipToken queryKeychainForOwnershipTokens:]( &OBJC_CLASS___PKPassOwnershipToken,  "queryKeychainForOwnershipTokens:",  &stru_10063AAA0);
      uint64_t v95 = PKSetKeychainVersion(&off_10068FA98);
    }

    uint64_t v98 = PKKeychainVersion(v95);
    v99 = (void *)objc_claimAutoreleasedReturnValue(v98);
    int v100 = [v99 intValue];

    uint64_t v101 = PKLogFacilityTypeGetObject(0LL);
    v102 = (os_log_s *)objc_claimAutoreleasedReturnValue(v101);
    v103 = v102;
    if (v100 <= 7)
    {
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "Migrating keychain to version 8. Updating account attestation to type cloud in keychain.",  buf,  2u);
      }

      id v104 = objc_alloc(&OBJC_CLASS___PKKeychainItemWrapper);
      uint64_t v105 = PKPassdBundleIdentifier;
      id v106 = [v104 initWithIdentifier:@"PKAnonymizationSaltKeychainKey" accessGroup:PKPassdBundleIdentifier serviceName:@"com.apple.passd.account-attestation"];
      v107 = (void *)objc_claimAutoreleasedReturnValue([v106 objectForKey:kSecValueData]);
      if (v107)
      {
        [v106 resetKeychainItem];
        id v108 = [[PKKeychainItemWrapper alloc] initWithIdentifier:@"PKAnonymizationSaltKeychainKey" accessGroup:v105 serviceName:@"com.apple.passd.account-attestation" type:1 invisible:1 accessibility:1];
        v109 = (void *)objc_claimAutoreleasedReturnValue([v108 objectForKey:kSecValueData]);
        if (!v109) {
          [v108 setObject:v107 forKey:kSecValueData];
        }
      }

      PKSetKeychainVersion(&off_10068FAB0);
    }

    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "Keychain migration complete", buf, 2u);
    }
  }

void sub_100024538(uint64_t a1)
{
  if (a1)
  {
    int v2 = PKStoreDemoModeEnabled();
    uint64_t v3 = PKUIOnlyDemoModeEnabled();
    int v4 = v3;
    if ((v2 & 1) != 0 || (_DWORD)v3)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = @"NO";
        if (v2) {
          uint64_t v14 = @"YES";
        }
        else {
          uint64_t v14 = @"NO";
        }
        if (v4) {
          uint64_t v13 = @"YES";
        }
        *(_DWORD *)uint64_t v18 = 138412546;
        *(void *)&void v18[4] = v14;
        *(_WORD *)&v18[12] = 2112;
        *(void *)&v18[14] = v13;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDServer: Skipping applying backup exclusions to existing passes (PKStoreDemoModeEnabled: %@, PKUIOnlyDemoModeEnabled: %@).",  v18,  0x16u);
      }
    }

    else
    {
      uint64_t v5 = PKCardsDirectoryURL(v3);
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
      *(void *)uint64_t v18 = 0LL;
      *(void *)&v18[8] = v18;
      *(void *)&uint8_t v18[16] = 0x2020000000LL;
      uint64_t v19 = 0LL;
      id v7 = objc_autoreleasePoolPush();
      id v8 = *(void **)(a1 + 48);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      v15[2] = sub_10002A390;
      v15[3] = &unk_10063ABE0;
      void v15[4] = v6;
      v15[5] = v18;
      [v8 enumeratePassSyncabilityPropertiesWithHandler:v15];
      objc_autoreleasePoolPop(v7);
      uint64_t v9 = PKLogFacilityTypeGetObject(0LL);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)(*(void *)&v18[8] + 24LL);
        *(_DWORD *)buf = 134217984;
        uint64_t v17 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "PDServer: Applied backup exclusions to %lu passes.",  buf,  0xCu);
      }

      _Block_object_dispose(v18, 8);
    }
  }

void sub_100024708( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100024728(uint64_t a1, uint64_t a2)
{
  if ((_DWORD)a2)
  {
    sub_100024758(*(void *)(a1 + 32), a2);
    sub_10002493C(*(void *)(a1 + 32));
  }

void sub_100024758(uint64_t a1, uint64_t a2)
{
  if (a1 && PKSecureElementIsAvailable(a1, a2))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Checking migration of primary region topic",  (uint8_t *)&v16,  2u);
    }

    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 96) sharedWebServiceContext]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 primaryRegion]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 trustedServiceManagerPushTopic]);

    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) primaryRegionTopic]);
    if ([v8 length]) {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) primaryRegionTopic]);
    }
    else {
      uint64_t v9 = 0LL;
    }

    id v10 = v9;
    id v11 = v7;
    uint64_t v12 = v11;
    if (v10 == v11)
    {

      uint64_t v14 = v12;
    }

    else
    {
      if (v11 && v10)
      {
        unsigned __int8 v13 = [v10 isEqualToString:v11];

        if ((v13 & 1) != 0) {
          goto LABEL_19;
        }
      }

      else
      {
      }

      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 138412290;
        uint64_t v17 = v12;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Updating secure element primaryRegionTopic to :%@",  (uint8_t *)&v16,  0xCu);
      }

      uint64_t v15 = *(void **)(a1 + 72);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v5 TSMURLStringByPushTopic]);
      [v15 setRegistrationInformation:v14 primaryRegionTopic:v12];
    }

LABEL_19:
  }

void sub_10002493C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = PKUIOnlyDemoModeEnabled();
    if ((v2 & 1) != 0)
    {
      int v4 = 1;
    }

    else
    {
      uint64_t v2 = PKStoreDemoModeEnabled();
      int v4 = v2;
    }

    if (PKSecureElementIsAvailable(v2, v3)
      && ((PDProtectedDataAvailable() ^ 1 | v4) & 1) == 0
      && ([*(id *)(a1 + 48) passExistsWithPassType:1] & 1) == 0)
    {
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passesOfType:1]);
      id v6 = [v5 count];

      if (!v6)
      {
        id v7 = *(void **)(a1 + 72);
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472LL;
        v8[2] = sub_100029E3C;
        v8[3] = &unk_10063ABB8;
        void v8[4] = a1;
        [v7 allAppletsWithCompletion:v8];
      }
    }
  }

id sub_100024A0C(uint64_t a1)
{
  return [*(id *)(a1 + 40) handleDatabaseIntegrityProblem];
}

void sub_100024A14(id a1, NSError *a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  int v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[NSError description](a2, "description"));
    int v6 = 138412290;
    id v7 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Donated pass information with error: %@",  (uint8_t *)&v6,  0xCu);
  }
}

void sub_100024B48(uint64_t a1, void *a2)
{
}

void sub_100024B60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, int a6)
{
  id v62 = a2;
  id v11 = a5;
  if (a1 && v62 && a3 != a4)
  {
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v62 uniqueID]);
    unsigned __int8 v13 = (void *)objc_claimAutoreleasedReturnValue([v62 localizedDescription]);
    uint64_t v14 = PKPassLocalizedStringForStateWithFormat(@"PASS_NOTIFICATION_TITLE", v62, a4, 0LL);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
    id v60 = v13;
    uint64_t v16 = PKPassLocalizedStringForStateWithFormat(@"PASS_NOTIFICATION_DESCRIPTION", v62, a4, @"%@");
    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    unsigned int v18 = [v62 supportsBarcodePayment];
    if (v17) {
      goto LABEL_5;
    }
    unsigned int v21 = v18;
    else {
      unsigned int v22 = [v62 isIdentityPass];
    }
    uint64_t v17 = 0LL;
    switch(a4)
    {
      case 6LL:
      case 9LL:
        if (v21)
        {
          uint64_t v26 = PKLocalizedAquamanString( @"PAYMENT_ACCOUNT_SUSPENDED_NOTIFICATION_FORMAT",  @"%@",  v13);
          goto LABEL_51;
        }

        uint64_t v49 = @"PAYMENT_SUSPENDED_NOTIFICATION_FORMAT";
        __int128 v50 = @"GENERIC_SUSPENDED_NOTIFICATION_FORMAT";
        goto LABEL_57;
      case 7LL:
      case 8LL:
      case 11LL:
      case 12LL:
      case 13LL:
      case 14LL:
        goto LABEL_5;
      case 10LL:
        if (v21)
        {
          uint64_t v26 = PKLocalizedAquamanString( @"PAYMENT_ACCOUNT_REMOVED_NOTIFICATION_FORMAT",  @"%@",  v13);
LABEL_51:
          uint64_t v47 = objc_claimAutoreleasedReturnValue(v26);
          goto LABEL_54;
        }

        uint64_t v49 = @"PAYMENT_REMOVED_NOTIFICATION_FORMAT";
        __int128 v50 = @"GENERIC_REMOVED_NOTIFICATION_FORMAT";
LABEL_57:
        if (v22) {
          p_isa = &v50->isa;
        }
        else {
          p_isa = &v49->isa;
        }
        uint64_t v52 = PKLocalizedPaymentString(p_isa);
        uint64_t v53 = objc_claimAutoreleasedReturnValue(v52);
        __int128 v54 = (void *)v53;
        id v60 = v13;
        goto LABEL_85;
      case 15LL:
        if ([v62 isCarKeyPass])
        {
          uint64_t v48 = PKLocalizedShareableCredentialString( @"SHARE_NOTIFICATION_RECIPIENT_REVOKED",  @"%@",  v13);
          uint64_t v47 = objc_claimAutoreleasedReturnValue(v48);
LABEL_54:
          uint64_t v17 = (void *)v47;
        }

        else
        {
          uint64_t v17 = 0LL;
        }

        goto LABEL_5;
      default:
        if (a4 != 1) {
          goto LABEL_5;
        }
        if ([v62 supportsOnlyTransit])
        {
          if (a6) {
            __int16 v30 = @"TRANSIT_CARD_READY_TO_USE_FORMAT_EXPRESS";
          }
          else {
            __int16 v30 = @"TRANSIT_CARD_READY_TO_USE_FORMAT";
          }
          goto LABEL_82;
        }

        if ([v62 isAccessPass])
        {
          switch((unint64_t)[v62 accessType])
          {
            case 0uLL:
              if (a6) {
                __int16 v30 = @"GENERIC_READY_TO_USE_FORMAT_EXPRESS";
              }
              else {
                __int16 v30 = @"GENERIC_READY_TO_USE_FORMAT";
              }
              goto LABEL_82;
            case 1uLL:
            case 3uLL:
            case 4uLL:
            case 5uLL:
            case 6uLL:
              if (a6) {
                __int16 v30 = @"GENERIC_READY_TO_USE_FORMAT_KEY_EXPRESS";
              }
              else {
                __int16 v30 = @"GENERIC_READY_TO_USE_FORMAT_KEY";
              }
              goto LABEL_82;
            case 2uLL:
              if (a6) {
                __int16 v30 = @"GENERIC_READY_TO_USE_FORMAT_BADGE_EXPRESS";
              }
              else {
                __int16 v30 = @"GENERIC_READY_TO_USE_FORMAT_BADGE";
              }
              goto LABEL_82;
            default:
              __int128 v54 = 0LL;
              break;
          }

LABEL_84:
          id v60 = v13;
          uint64_t v53 = (uint64_t)v54;
LABEL_85:
          uint64_t v59 = PKStringWithValidatedFormat(v53, @"%@");
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(v59);

LABEL_5:
          if (a4 == 1)
          {
            if ([v62 muteReadyForUseNotification])
            {
              int v19 = 0;
              char v20 = 0;
              if (!v17) {
                goto LABEL_34;
              }
            }

            else
            {
              if ([v62 hasAssociatedPeerPaymentAccount])
              {
                uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) peerPaymentAccount]);
                BOOL v24 = [v23 role] != 0;
                unsigned int v25 = objc_msgSend(v23, "isParticipantAccountLockedByOwner", v60);

                int v19 = v24 & ~v25;
              }

              else
              {
                int v19 = 1;
              }

              id v27 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "associatedAccountServiceAccountIdentifier", v60));

              if (v27)
              {
                id v28 = (void *)objc_claimAutoreleasedReturnValue([v62 devicePrimaryPaymentApplication]);
                id v29 = [v28 paymentNetworkIdentifier];

                char v20 = 0;
                if (v29 == (id)135) {
                  int v19 = 0;
                }
                if (!v17)
                {
LABEL_34:
                  if (objc_msgSend( *(id *)(a1 + 48),  "hasAnyMessagesForPassWithUniqueIdentifier:",  v12,  v60))
                  {
                    __int128 v61 = v17;
                    id v33 = v11;
                    uint64_t v34 = v13;
                    __int128 v35 = v15;
                    uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) allMessagesForPassWithUniqueIdentifier:v12]);
                    id v37 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:",  @"messageType == %d",  1LL));
                    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v36 filteredSetUsingPredicate:v37]);
                    id v39 = (PKPaymentMessage *)objc_claimAutoreleasedReturnValue([v38 anyObject]);

                    uint64_t v15 = v35;
                    unsigned __int8 v13 = v34;
                    id v11 = v33;
                    if ((v20 & 1) != 0)
                    {
                      uint64_t v17 = v61;
                      if (v39)
                      {
LABEL_40:
                        -[PKPaymentMessage setMessageType:](v39, "setMessageType:", 1LL);
                        id v42 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
                        -[PKPaymentMessage setMessageDate:](v39, "setMessageDate:", v42);

                        -[PKPaymentMessage setContent:](v39, "setContent:", v17);
                        if ([v62 isAccessPass])
                        {
                          id v43 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithDaysFromNow:]( &OBJC_CLASS___NSDate,  "dateWithDaysFromNow:",  3LL));
                          -[PKPaymentMessage setExpirationDate:](v39, "setExpirationDate:", v43);
                        }

                        else
                        {
                          -[PKPaymentMessage setExpirationDate:](v39, "setExpirationDate:", 0LL);
                        }

                        -[PKPaymentMessage setArchived:](v39, "setArchived:", 0LL);
                        id v46 =  [*(id *)(a1 + 48) insertOrUpdatePaymentMessage:v39 forPassUniqueIdentifier:v12 paymentApplication:0 performTruncation:0];
                        goto LABEL_46;
                      }

      id v8 = v153;
      id v11 = v158;
LABEL_87:
      __int16 v30 = log;

      uint64_t v92 = v140 + 1;
      uint64_t v9 = v152;
    }

    while ((id)(v140 + 1) != v138);
    id v43 = 0LL;
    self = v160;
    v138 = [obj countByEnumeratingWithState:&v167 objects:v175 count:16];
    if (v138) {
      continue;
    }
    break;
  }
}

LABEL_39:
                      id v39 = objc_alloc_init(&OBJC_CLASS___PKPaymentMessage);
                      id v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
                      uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v40 UUIDString]);
                      -[PKPaymentMessage setServiceIdentifier:](v39, "setServiceIdentifier:", v41);

                      goto LABEL_40;
                    }

                    uint64_t v17 = v61;
                    if (v39)
                    {
                      uint64_t v44 = *(void **)(a1 + 48);
                      __int128 v45 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentMessage identifier](v39, "identifier"));
                      [v44 archiveMessageWithIdentifier:v45];

LABEL_46:
                    }
                  }

                  else if ((v20 & 1) != 0)
                  {
                    goto LABEL_39;
                  }

                  break;
                }
              }

              else
              {
                char v20 = 1;
                if (!v17) {
                  goto LABEL_34;
                }
              }
            }
          }

          else
          {
            char v20 = 0;
            int v19 = 1;
            if (!v17) {
              goto LABEL_34;
            }
          }

          int v31 = (void *)objc_claimAutoreleasedReturnValue( [PDWalletUserNotificationPassStateChanged stringByAppendingFormat:@":%@", v12]);
          if (v19 && [v17 length])
          {
            uint64_t v32 = -[PDGenericUserNotification initWithTitle:message:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:forPassUniqueIdentifier:",  v15,  v17,  v12);
            -[PDUserNotification setNotificationIdentifier:](v32, "setNotificationIdentifier:", v31);
            -[PDUserNotification setReissueBannerOnUpdate:](v32, "setReissueBannerOnUpdate:", 1LL);
            -[PDUserNotification setSuppressionBehavior:](v32, "setSuppressionBehavior:", 2LL);
            [*(id *)(a1 + 56) insertUserNotification:v32];
          }

          goto LABEL_34;
        }

        if ([v62 supportsBarcodePayment])
        {
          __int16 v30 = @"PAYMENT_READY_TO_USE_WALLET_FORMAT";
LABEL_82:
          uint64_t v58 = PKLocalizedPaymentString(&v30->isa);
          uint64_t v56 = objc_claimAutoreleasedReturnValue(v58);
          goto LABEL_83;
        }

        if ([v62 isIdentityPass])
        {
          uint64_t v55 = PKLocalizedIdentityString(@"ID_READY_TO_USE_FORMAT");
          uint64_t v56 = objc_claimAutoreleasedReturnValue(v55);
        }

        else
        {
          if (![v62 hasActiveVirtualCardAccordingToWebService:v11])
          {
            __int16 v30 = @"PAYMENT_READY_TO_USE_FORMAT";
            goto LABEL_82;
          }

          uint64_t v57 = PKLocalizedVirtualCardString(@"VIRTUAL_CARD_PAYMENT_READY_TO_USE_FORMAT");
          uint64_t v56 = objc_claimAutoreleasedReturnValue(v57);
        }

                    if (v25 == (id)++v27)
                    {
                      unsigned int v25 = [v22 countByEnumeratingWithState:&v166 objects:v192 count:16];
                      if (!v25)
                      {
LABEL_41:

                        id v37 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
                        v162 = 0u;
                        v163 = 0u;
                        v164 = 0u;
                        v165 = 0u;
                        uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v131 shareParticipants]);
                        id v39 = [v38 countByEnumeratingWithState:&v162 objects:v191 count:16];
                        if (v39)
                        {
                          id v40 = v39;
                          uint64_t v41 = *(void *)v163;
                          do
                          {
                            for (uint64_t i = 0LL; i != v40; uint64_t i = (char *)i + 1)
                            {
                              if (*(void *)v163 != v41) {
                                objc_enumerationMutation(v38);
                              }
                              id v43 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v162 + 1) + 8 * (void)i) participantHandle]);
                              -[NSMutableSet addObject:](v37, "addObject:", v43);
                            }

                            id v40 = [v38 countByEnumeratingWithState:&v162 objects:v191 count:16];
                          }

                          while (v40);
                        }

                        v132 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
                        v158 = 0u;
                        v159 = 0u;
                        v160 = 0u;
                        v161 = 0u;
                        uint64_t v15 = v135;
                        uint64_t v44 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v158,  v190,  16LL);
                        if (v44)
                        {
                          __int128 v45 = v44;
                          id v46 = *(void *)v159;
                          do
                          {
                            for (uint64_t j = 0LL; j != v45; uint64_t j = (char *)j + 1)
                            {
                              if (*(void *)v159 != v46) {
                                objc_enumerationMutation(v15);
                              }
                              uint64_t v48 = *(void **)(*((void *)&v158 + 1) + 8LL * (void)j);
                              v157[0] = _NSConcreteStackBlock;
                              v157[1] = 3221225472LL;
                              v157[2] = sub_1000A00D4;
                              v157[3] = &unk_10063F440;
                              v157[4] = v48;
                              if ((-[NSMutableSet pk_hasObjectPassingTest:]( v37,  "pk_hasObjectPassingTest:",  v157) & 1) == 0)
                              {
                                uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v48 appleID]);
                                if (v49)
                                {
                                  -[NSMutableSet addObject:](v132, "addObject:", v49);
                                }

                                else
                                {
                                  __int128 v50 = PKLogFacilityTypeGetObject(9LL);
                                  int v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
                                  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                                  {
                                    *(_DWORD *)buf = 138412290;
                                    v182 = (os_log_s *)v48;
                                    _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "There is no appleID for user %@ and no family member with the altDSID",  buf,  0xCu);
                                  }
                                }
                              }
                            }

                            __int128 v45 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v158,  v190,  16LL);
                          }

                          while (v45);
                        }

                        v136 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
                        v153 = 0u;
                        v154 = 0u;
                        v155 = 0u;
                        v156 = 0u;
                        uint64_t v52 = v37;
                        uint64_t v53 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v52,  "countByEnumeratingWithState:objects:count:",  &v153,  v189,  16LL);
                        if (v53)
                        {
                          __int128 v54 = v53;
                          uint64_t v55 = *(void *)v154;
                          do
                          {
                            for (k = 0LL; k != v54; k = (char *)k + 1)
                            {
                              if (*(void *)v154 != v55) {
                                objc_enumerationMutation(v52);
                              }
                              uint64_t v57 = *(void *)(*((void *)&v153 + 1) + 8LL * (void)k);
                              v152[0] = _NSConcreteStackBlock;
                              v152[1] = 3221225472LL;
                              v152[2] = sub_1000A00E0;
                              v152[3] = &unk_10063F468;
                              v152[4] = v57;
                              if ((-[NSMutableArray pk_containsObjectPassingTest:]( v15,  "pk_containsObjectPassingTest:",  v152) & 1) == 0) {
                                -[NSMutableSet addObject:](v136, "addObject:", v57);
                              }
                            }

                            __int128 v54 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v52,  "countByEnumeratingWithState:objects:count:",  &v153,  v189,  16LL);
                          }

                          while (v54);
                        }

                        if (-[NSMutableSet count](v132, "count"))
                        {
                          uint64_t v58 = PKLogFacilityTypeGetObject(9LL);
                          uint64_t v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
                          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
                          {
                            id v60 = (os_log_s *)-[NSMutableSet count](v132, "count");
                            __int128 v61 = (os_log_s *)objc_claimAutoreleasedReturnValue([v138 zoneName]);
                            id v62 = (void *)objc_claimAutoreleasedReturnValue([v131 zoneName]);
                            *(_DWORD *)buf = 134218754;
                            v182 = v60;
                            v183 = 2114;
                            v184 = v61;
                            v185 = 2114;
                            v186 = (uint64_t)v62;
                            v187 = 2112;
                            v188 = v132;
                            _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "%lu account users that need a zone share for shared account zone %{public}@, cloud store z one %{public}@: %@",  buf,  0x2Au);
                          }

                          v150 = 0u;
                          v151 = 0u;
                          v148 = 0u;
                          v149 = 0u;
                          uint64_t v63 = v132;
                          __int128 v64 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v63,  "countByEnumeratingWithState:objects:count:",  &v148,  v180,  16LL);
                          if (v64)
                          {
                            int v65 = v64;
                            uint64_t v66 = *(void *)v149;
                            do
                            {
                              for (m = 0LL; m != v65; m = (char *)m + 1)
                              {
                                if (*(void *)v149 != v66) {
                                  objc_enumerationMutation(v63);
                                }
                                __int128 v68 = *(void *)(*((void *)&v148 + 1) + 8LL * (void)m);
                                id v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
                                [v69 cloudStoreContainer:*(void *)(a1 + 32) sendZoneShareInvitationForHandle:v68 zoneName:v16 permission:3 qualitOfService:17 completion:0];
                              }

                              int v65 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v63,  "countByEnumeratingWithState:objects:count:",  &v148,  v180,  16LL);
                            }

                            while (v65);
                          }
                        }

                        unsigned __int8 v13 = v131;
                        if (-[NSMutableSet count](v136, "count"))
                        {
                          __int128 v70 = PKLogFacilityTypeGetObject(9LL);
                          id v71 = (os_log_s *)objc_claimAutoreleasedReturnValue(v70);
                          if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
                          {
                            id v72 = (os_log_s *)-[NSMutableSet count](v136, "count");
                            uint64_t v73 = (os_log_s *)objc_claimAutoreleasedReturnValue([v138 zoneName]);
                            __int128 v74 = (void *)objc_claimAutoreleasedReturnValue([v131 zoneName]);
                            *(_DWORD *)buf = 134218754;
                            v182 = v72;
                            v183 = 2114;
                            v184 = v73;
                            v185 = 2114;
                            v186 = (uint64_t)v74;
                            v187 = 2112;
                            v188 = v136;
                            _os_log_impl( (void *)&_mh_execute_header,  v71,  OS_LOG_TYPE_DEFAULT,  "%lu account users that need to be removed from the zone share for shared account zone %{pu blic}@, cloud store zone %{public}@: %@",  buf,  0x2Au);
                          }

                          v146 = 0u;
                          v147 = 0u;
                          v144 = 0u;
                          v145 = 0u;
                          int v75 = v136;
                          uint64_t v76 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v75,  "countByEnumeratingWithState:objects:count:",  &v144,  v179,  16LL);
                          if (v76)
                          {
                            uint64_t v77 = v76;
                            __int16 v78 = *(void *)v145;
                            do
                            {
                              for (n = 0LL; n != v77; n = (char *)n + 1)
                              {
                                if (*(void *)v145 != v78) {
                                  objc_enumerationMutation(v75);
                                }
                                __int16 v80 = *(void *)(*((void *)&v144 + 1) + 8LL * (void)n);
                                __int128 v81 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
                                [v81 cloudStoreContainer:*(void *)(a1 + 32) removeZoneShareInvitationForHandle:v80 zoneName:v16 qualitOfService:17 completion:0];
                              }

                              uint64_t v77 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v75,  "countByEnumeratingWithState:objects:count:",  &v144,  v179,  16LL);
                            }

                            while (v77);
                          }

                          unsigned __int8 v13 = v131;
                        }

                        id v8 = v126;
                        uint64_t v3 = v127;
                        uint64_t v9 = v125;
                        id v11 = v129;
                        id v10 = v130;
                        goto LABEL_94;
                      }

                      continue;
                    }

                    goto LABEL_25;
                  }
                }

                unsigned int v21 = -[NSMutableArray isEqualToString:](v14, "isEqualToString:", v3);

                unsigned int v18 = v134;
                if ((v21 & 1) == 0) {
                  goto LABEL_22;
                }
              }

              else
              {
                int v19 = PKLogFacilityTypeGetObject(9LL);
                uint64_t v15 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(v19);
                if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_DEFAULT))
                {
                  char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([v138 zoneName]);
                  *(_DWORD *)buf = 138543362;
                  v182 = v20;
                  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  OS_LOG_TYPE_DEFAULT,  "Error: A cloud store zone was not found for shared account cloud store zone %{public}@",  buf,  0xCu);
                }
        }

        id v33 = [v31 countByEnumeratingWithState:&v75 objects:v87 count:16];
      }

      while (v33);

      unsigned __int8 v13 = v58;
      unsigned int v21 = v63;
      id v46 = v73;
      if (!v73) {
LABEL_44:
      }
        id v46 = (void *)objc_claimAutoreleasedReturnValue([v31 anyObject]);
      uint64_t v47 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransaction);
      -[PKPaymentTransaction setTransactionType:](v47, "setTransactionType:", 14LL);
      -[PKPaymentTransaction setTransactionSource:](v47, "setTransactionSource:", 4LL);
      a6 = v61;
      -[PKPaymentTransaction setRedemptionType:](v47, "setRedemptionType:", v61);
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v46 transactionDate]);
      -[PKPaymentTransaction setTransactionDate:](v47, "setTransactionDate:", v48);

      -[PKPaymentTransaction setInstallmentPlan:](v47, "setInstallmentPlan:", v70);
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v70 totalAmount]);
      -[PKPaymentTransaction setAmount:](v47, "setAmount:", v49);

      __int128 v50 = (void *)objc_claimAutoreleasedReturnValue([v70 currencyCode]);
      -[PKPaymentTransaction setCurrencyCode:](v47, "setCurrencyCode:", v50);

      -[PKPaymentTransaction setTransactionStatus:](v47, "setTransactionStatus:", 1LL);
      int v51 = (void *)objc_claimAutoreleasedReturnValue([v70 identifier]);
      -[PKPaymentTransaction setIdentifier:](v47, "setIdentifier:", v51);

      -[PKPaymentTransaction setRewardsTotalAmount:](v47, "setRewardsTotalAmount:", v30);
      uint64_t v52 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction currencyCode](v47, "currencyCode"));
      -[PKPaymentTransaction setRewardsTotalCurrencyCode:](v47, "setRewardsTotalCurrencyCode:", v52);

      uint64_t v53 = (void *)objc_claimAutoreleasedReturnValue([v70 rewards]);
      -[PKPaymentTransaction setRewards:](v47, "setRewards:", v53);

      -[PKPaymentTransaction setAccountType:](v47, "setAccountType:", 2LL);
      -[NSMutableSet addObject:](v62, "addObject:", v47);

      unsigned int v18 = v60;
      uint64_t i = v71;
LABEL_46:
    }

    id v69 = [obj countByEnumeratingWithState:&v83 objects:v89 count:16];
  }

  while (v69);
LABEL_48:

  __int128 v54 = -[NSMutableSet copy](v62, "copy");
LABEL_50:

  return v54;
}

  return v4;
}

      __int16 v30 = (void *)objc_claimAutoreleasedReturnValue([v9 supportedFeatures]);
      +[PayLaterAccountFeatureDescriptor insertOrUpdatePayLaterAccountFeatureDescriptors:forAccountPID:inDatabase:]( &OBJC_CLASS___PayLaterAccountFeatureDescriptor,  "insertOrUpdatePayLaterAccountFeatureDescriptors:forAccountPID:inDatabase:",  v30,  v39,  v10);
      goto LABEL_74;
    case 3uLL:
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 details]);
      id v86 = (void *)objc_claimAutoreleasedReturnValue([v11 appleBalanceDetails]);
      if (v86)
      {
        unsigned __int8 v13 =  +[AppleBalanceAccountDetails insertOrUpdateAccountDetails:forAccountPID:inDatabase:]( &OBJC_CLASS___AppleBalanceAccountDetails,  "insertOrUpdateAccountDetails:forAccountPID:inDatabase:",  v11,  a4,  v10);
      }

      else
      {
        __int128 v50 = PKLogFacilityTypeGetObject(14LL);
        int v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v53 = (objc_class *)objc_opt_class(v11, v52);
          __int128 v54 = NSStringFromClass(v53);
          uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
          *(_DWORD *)buf = 138543362;
          id v108 = v55;
          _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Details are not of class appleBalance:%{public}@",  buf,  0xCu);
        }

        if (v6) {
          +[AppleBalanceAccountDetails deleteAccountDetailsForAccountPID:inDatabase:]( &OBJC_CLASS___AppleBalanceAccountDetails,  "deleteAccountDetailsForAccountPID:inDatabase:",  a4,  v10);
        }
      }

      uint64_t v56 = a4;
      uint64_t v93 = 0u;
      int v94 = 0u;
      char v91 = 0u;
      uint64_t v92 = 0u;
      uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v9 supportedFeatures]);
      uint64_t v58 = [v57 countByEnumeratingWithState:&v91 objects:v104 count:16];
      if (!v58) {
        goto LABEL_56;
      }
      id v60 = v58;
      __int128 v61 = *(void *)v92;
      while (2)
      {
        for (uint64_t j = 0LL; j != v60; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v92 != v61) {
            objc_enumerationMutation(v57);
          }
          uint64_t v63 = *(void *)(*((void *)&v91 + 1) + 8LL * (void)j);
          __int128 v64 = objc_opt_class(&OBJC_CLASS___PKAppleBalanceAccountFeatureDescriptor, v59);
          if ((objc_opt_isKindOfClass(v63, v64) & 1) == 0)
          {

            int v65 = PKLogFacilityTypeGetObject(14LL);
            uint64_t v66 = (os_log_s *)objc_claimAutoreleasedReturnValue(v65);
            if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v66,  OS_LOG_TYPE_DEFAULT,  "Descriptors did not match PKAppleAccountFeatureDescriptor class.",  buf,  2u);
            }

            if (v85) {
              +[AppleBalanceAccountFeatureDescriptor deleteAppleBalanceAccountFeatureDescriptorsForAccountPID:inDatabase:]( &OBJC_CLASS___AppleBalanceAccountFeatureDescriptor,  "deleteAppleBalanceAccountFeatureDescriptorsForAccountPID:inDatabase:",  v56,  v10);
            }
            goto LABEL_75;
          }
        }

        id v60 = [v57 countByEnumeratingWithState:&v91 objects:v104 count:16];
        if (v60) {
          continue;
        }
        break;
      }
}

      id v10 = 0LL;
LABEL_40:

      goto LABEL_41;
    }

    if (-[PDTransitNotificationService _shouldSendOpenLoopRenotifyNotificationForTransitMarket:]( self,  "_shouldSendOpenLoopRenotifyNotificationForTransitMarket:",  v4))
    {
      id v10 = 8LL;
      goto LABEL_40;
    }

    id v28 = PKLogFacilityTypeGetObject(12LL);
    unsigned int v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      id v29 = 134218242;
      __int16 v30 = v12;
      int v31 = 2112;
      uint64_t v32 = (unint64_t)v4;
      unsigned int v22 = "PDTransitNotificationService: should not send market notification as all valid cases fell through with sent type %lu for %@";
      goto LABEL_37;
    }

    goto LABEL_38;
  }

  id v10 = 0LL;
LABEL_41:

  return v10;
}

        v110 = static Logger.auxiliaryCapability.getter(v75);
        v111 = (os_log_s *)Logger.logObject.getter(v110);
        v112 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v111, v112))
        {
          v113 = v4;
          v114 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)v114 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v111,  v112,  "PDARRUnifiedAccessDecryptionProvider: Previously generated key material missing public key identifier",  v114,  2u);
          id v115 = v114;
          int v4 = v113;
          swift_slowDealloc(v115, -1LL, -1LL);
        }

        (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
        static String._unconditionallyBridgeFromObjectiveC(_:)(PKAuxiliaryCapabilityErrorDomain, v116);
        __int128 v118 = v117;
        __int128 v119 = objc_allocWithZone(&OBJC_CLASS___NSError);
        __int128 v120 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v118);
        BOOL v24 = [v119 initWithDomain:v120 code:4 userInfo:0];

        id v46 = (NSString)_convertErrorToNSError(_:)(v24);
        ((void (**)(void, void, void, NSString))a2)[2](a2, 0LL, 0LL, v46);
        swift_release(v123);

        goto LABEL_42;
      }

      int v75 = (id)swift_bridgeObjectRelease(v78);
      goto LABEL_39;
    }

    id v83 = static Logger.auxiliaryCapability.getter(0LL);
    id v84 = (os_log_s *)Logger.logObject.getter(v83);
    uint64_t v85 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v84, v85))
    {
      id v86 = v4;
      v87 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v87 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v84,  v85,  "PDARRUnifiedAccessDecryptionProvider: Missing previously generated key material",  v87,  2u);
      uint64_t v88 = v87;
      int v4 = v86;
      swift_slowDealloc(v88, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    static String._unconditionallyBridgeFromObjectiveC(_:)(PKAuxiliaryCapabilityErrorDomain, v89);
    char v91 = v90;
    uint64_t v92 = objc_allocWithZone(&OBJC_CLASS___NSError);
    uint64_t v93 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v91);
    BOOL v24 = [v92 initWithDomain:v93 code:4 userInfo:0];

    id v46 = (NSString)_convertErrorToNSError(_:)(v24);
    ((void (**)(void, void, void, NSString))a2)[2](a2, 0LL, 0LL, v46);
    uint64_t v63 = v20;
LABEL_14:
    swift_release(v63);
LABEL_42:

    return;
  }

  __int128 v121 = v4;
  __int128 v123 = v20;
  BOOL v24 = v23;
  unsigned int v25 = [v24 devicePaymentApplications];
  if (!v25)
  {
LABEL_45:
    _Block_release(a2);
    __break(1u);
    goto LABEL_46;
  }

  uint64_t v26 = v25;
  id v27 = sub_100424A90(0LL, &qword_1007071E0, &OBJC_CLASS___PKPaymentApplication_ptr);
  id v28 = sub_100422D80((unint64_t *)&unk_100706E60, &qword_1007071E0, &OBJC_CLASS___PKPaymentApplication_ptr);
  id v29 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v26, v27, v28);

  sub_100424EB0(v29);
  int v31 = v30;
  uint64_t v32 = swift_bridgeObjectRelease(v29);
  if (!v31)
  {
LABEL_15:
    __int128 v64 = static Logger.auxiliaryCapability.getter(v32);
    int v65 = (os_log_s *)Logger.logObject.getter(v64);
    uint64_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "PDARRUnifiedAccessDecryptionProvider: Pass missing subcredential",  v67,  2u);
      swift_slowDealloc(v67, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v121);
    static String._unconditionallyBridgeFromObjectiveC(_:)(PKAuxiliaryCapabilityErrorDomain, v68);
    __int128 v70 = v69;
    id v71 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v72 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v70);
    uint64_t v73 = [v71 initWithDomain:v72 code:4 userInfo:0];

    id v46 = (NSString)_convertErrorToNSError(_:)(v73);
    ((void (**)(void, void, void, NSString))a2)[2](a2, 0LL, 0LL, v46);
    swift_release(v123);

    goto LABEL_42;
  }

  id v33 = [v31 subcredentials];

  if (!v33)
  {
LABEL_46:
    _Block_release(a2);
    __break(1u);
    goto LABEL_47;
  }

  uint64_t v34 = sub_100424A90(0LL, &qword_1007074A0, &OBJC_CLASS___PKAppletSubcredential_ptr);
  __int128 v35 = sub_100422D80((unint64_t *)&qword_100706E70, &qword_1007074A0, &OBJC_CLASS___PKAppletSubcredential_ptr);
  uint64_t v36 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v33, v34, v35);

  id v37 = (id)sub_10043BCD8(v36);
  uint64_t v32 = swift_bridgeObjectRelease(v36);
  if (!v37) {
    goto LABEL_15;
  }
  uint64_t v38 = [v37 identifier];
  if (v38)
  {
    id v40 = v38;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v38, v39);
    id v42 = v41;

    int v4 = v121;
LABEL_9:

    id v43 = swift_allocObject(&unk_10065FA48, 32LL, 7LL);
    uint64_t v44 = v123;
    *(void *)(v43 + 16) = sub_1004263D4;
    *(void *)(v43 + 24) = v44;
    swift_retain_n(v44, 2LL);
    __int128 v45 = [a1 secureElement];
    if (v45)
    {
      BOOL v24 = v45;
      id v46 = String._bridgeToObjectiveC()();
      uint64_t v47 = swift_allocObject(&unk_10065FA70, 32LL, 7LL);
      *(void *)(v47 + 16) = sub_100426400;
      *(void *)(v47 + 24) = v43;
      aBlock[4] = sub_100426428;
      __int128 v125 = v47;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_100425844;
      aBlock[3] = &unk_10065FA88;
      uint64_t v48 = _Block_copy(aBlock);
      uint64_t v49 = v125;
      swift_retain(v43);
      swift_release(v49);
      [v24 generateSEEncryptionCertificateForSubCredentialId:v46 completion:v48];
      _Block_release(v48);
      swift_bridgeObjectRelease(v42);
      __int128 v50 = v44;
    }

    else
    {
      int v94 = v44;
      uint64_t v95 = static Logger.auxiliaryCapability.getter(0LL);
      uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
      v97 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v96, v97))
      {
        uint64_t v98 = v4;
        v99 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)v99 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v96,  v97,  "PDARRUnifiedAccessDecryptionProvider: Missing secure element",  v99,  2u);
        int v100 = v99;
        int v4 = v98;
        swift_slowDealloc(v100, -1LL, -1LL);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v17, v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)(PKAuxiliaryCapabilityErrorDomain, v101);
      v103 = v102;
      id v104 = objc_allocWithZone(&OBJC_CLASS___NSError);
      uint64_t v105 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v103);
      BOOL v24 = [v104 initWithDomain:v105 code:4 userInfo:0];

      id v46 = (NSString)_convertErrorToNSError(_:)(v24);
      ((void (**)(void, void, void, NSString))a2)[2](a2, 0LL, 0LL, v46);
      swift_bridgeObjectRelease(v42);
      __int128 v50 = v94;
    }

    swift_release_n(v50, 2LL);
    swift_release(v43);

    goto LABEL_42;
  }

    return;
  }

  if (v32 == (id)8)
  {
    id v33 = [v29 keyCreationMetadata];
    if (v33)
    {
      uint64_t v34 = v33;
      __int128 v35 = [v33 signatureAliroHome];

      if (v35)
      {
        uint64_t v36 = [v35 readerIdentifier];
        id v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
        id v39 = v38;

        id v40 = [v35 readerPublicKey];
        uint64_t v41 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v40);
        id v43 = v42;

        uint64_t v44 = [v35 homeIdentifier];
        __int128 v45 = v150;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        id v46 = [v149 secureElement];
        v146 = v41;
        if (v46)
        {
          uint64_t v47 = v46;
          v152 = Data._bridgeToObjectiveC()().super.isa;
          v48.super.isa = Data._bridgeToObjectiveC()().super.isa;
          v153 = (const void *)v39;
          uint64_t v49 = v48.super.isa;
          __int128 v50 = UUID._bridgeToObjectiveC()().super.isa;
          int v51 = swift_allocObject(&unk_10065FF20, 32LL, 7LL);
          uint64_t v52 = v154;
          *(void *)(v51 + 16) = sub_1004263D4;
          *(void *)(v51 + 24) = v52;
          v159 = sub_10042D770;
          v160 = v51;
          aBlock = _NSConcreteStackBlock;
          v156 = 1107296256LL;
          v157 = sub_100435490;
          v158 = &unk_10065FF38;
          uint64_t v53 = _Block_copy(&aBlock);
          __int128 v54 = v43;
          uint64_t v55 = v37;
          uint64_t v56 = v160;
          swift_retain(v52);
          swift_release(v56);
          uint64_t v57 = v152;
          [v47 createAliroHomeKeyWithReaderIdentifier:v152 readerPublicKey:v49 homeIdentifier:v50 withCompletion:v53];
          sub_100421520(v55, (unint64_t)v153);
          sub_100421520(v146, v54);
          _Block_release(v53);

          (*(void (**)(char *, uint64_t))(v147 + 8))(v150, v148);
          swift_release(v52);
        }

        else
        {
          __int128 v125 = static Logger.auxiliaryCapability.getter(0LL);
          __int128 v126 = (os_log_s *)Logger.logObject.getter(v125);
          __int128 v127 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v126, v127))
          {
            __int128 v128 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
            *(_WORD *)__int128 v128 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v126,  v127,  "PDARRAliroSignatureProvider: Missing secure element",  v128,  2u);
            swift_slowDealloc(v128, -1LL, -1LL);
          }

          (*(void (**)(char *, Class))(v151 + 8))(v10, v152);
          static String._unconditionallyBridgeFromObjectiveC(_:)(PKAuxiliaryCapabilityErrorDomain, v129);
          __int128 v131 = v130;
          v132 = objc_allocWithZone(&OBJC_CLASS___NSError);
          v133 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v131);
          v134 = [v132 initWithDomain:v133 code:4 userInfo:0];

          v135 = (void *)_convertErrorToNSError(_:)(v134);
          (*((void (**)(const void *, void, void, void *))v153 + 2))(v153, 0LL, 0LL, v135);

          sub_100421520(v37, v39);
          sub_100421520(v146, v43);

          (*(void (**)(char *, uint64_t))(v147 + 8))(v45, v148);
          swift_release(v154);
        }

        return;
      }
    }

    static Logger.auxiliaryCapability.getter(v33);
    v87 = v31;
    uint64_t v88 = (os_log_s *)Logger.logObject.getter(v87);
    v89 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v89))
    {
      uint64_t v90 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v90 = 134217984;
      aBlock = (void **)[v29 type];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v156, v90 + 4);

      _os_log_impl( (void *)&_mh_execute_header,  v88,  v89,  "PDARRAliroSignatureProvider: Missing key creation metadata for requirement type: %lu",  v90,  0xCu);
      swift_slowDealloc(v90, -1LL, -1LL);
    }

    else
    {

      uint64_t v88 = (os_log_s *)v87;
    }

    v111 = v154;

    (*(void (**)(char *, Class))(v151 + 8))(v13, v152);
    static String._unconditionallyBridgeFromObjectiveC(_:)(PKAuxiliaryCapabilityErrorDomain, v112);
    v114 = v113;
    id v115 = objc_allocWithZone(&OBJC_CLASS___NSError);
    __int128 v116 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v114);
    __int128 v117 = [v115 initWithDomain:v116 code:4 userInfo:0];

    __int128 v118 = (void *)_convertErrorToNSError(_:)(v117);
    (*((void (**)(const void *, void, void, void *))v153 + 2))(v153, 0LL, 0LL, v118);
    __int128 v119 = v111;
LABEL_31:
    swift_release(v119);

    return;
  }

  static Logger.auxiliaryCapability.getter(v32);
  __int128 v81 = v31;
  id v82 = (os_log_s *)Logger.logObject.getter(v81);
  id v83 = static os_log_type_t.error.getter();
  id v84 = os_log_type_enabled(v82, v83);
  uint64_t v85 = v154;
  if (v84)
  {
    id v86 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)id v86 = 134217984;
    aBlock = (void **)[v29 type];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v156, v86 + 4);

    _os_log_impl( (void *)&_mh_execute_header,  v82,  v83,  "PDARRAliroSignatureProvider: Unknown requirement type: %lu",  v86,  0xCu);
    swift_slowDealloc(v86, -1LL, -1LL);
  }

  else
  {

    id v82 = (os_log_s *)v81;
  }

  (*(void (**)(char *, Class))(v151 + 8))(v25, v152);
  static String._unconditionallyBridgeFromObjectiveC(_:)(PKAuxiliaryCapabilityErrorDomain, v100);
  v102 = v101;
  v103 = objc_allocWithZone(&OBJC_CLASS___NSError);
  id v104 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v102);
  uint64_t v105 = [v103 initWithDomain:v104 code:4 userInfo:0];

  id v106 = v105;
  v107 = (void *)_convertErrorToNSError(_:)(v106);
  (*((void (**)(const void *, void, void, void *))v153 + 2))(v153, 0LL, 0LL, v107);
  swift_release(v85);
}

  _Block_release(a3);
  _Block_release(a3);
  __break(1u);
LABEL_40:
  _Block_release(a3);
  _Block_release(a3);
  __break(1u);
}

LABEL_83:
        __int128 v54 = (void *)v56;
        goto LABEL_84;
    }
  }
}

BOOL sub_1000252DC(id a1, PKSecureElementPass *a2, unint64_t a3, BOOL *a4)
{
  int v4 = a2;
  BOOL v5 = (-[PKSecureElementPass muteReadyForUseNotification](v4, "muteReadyForUseNotification") & 1) == 0
    && -[PKSecureElementPass passActivationState](v4, "passActivationState") == PKSecureElementPassActivationStateActivated;

  return v5;
}

void sub_100025324(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 312LL);
  BOOL v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000253D8;
  v8[3] = &unk_10063A6D8;
  int v6 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v6;
  id v10 = v3;
  id v7 = v3;
  sub_10014B8A4(v4, v5, v8);
}

void sub_1000253D8(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  BOOL v5 = *(void **)(a1 + 40);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v5 devicePrimaryPaymentApplication]);
  sub_100024B60(v4, v5, 0, (uint64_t)[v6 state], *(void **)(a1 + 48), a2);
}

void sub_100025440(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "pk_setByApplyingBlock:", &stru_10063A740));
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (!v5)
  {

    uint64_t v12 = *(void *)(a1 + 48);
    if (v12) {
      goto LABEL_12;
    }
    uint64_t v7 = 0LL;
LABEL_14:
    uint64_t v17 = v7;
    uint64_t v19 = v7;
    unsigned __int8 v13 = @"CARDS_READY_TO_USE_EXPRESS";
    goto LABEL_15;
  }

  id v6 = v5;
  uint64_t v7 = 0LL;
  uint64_t v8 = *(void *)v21;
  do
  {
    for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v21 != v8) {
        objc_enumerationMutation(v4);
      }
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v20 + 1) + 8 * (void)i) uniqueID]);
      unsigned int v11 = [v3 containsObject:v10];

      v7 += v11;
    }

    id v6 = [v4 countByEnumeratingWithState:&v20 objects:v24 count:16];
  }

  while (v6);

  uint64_t v12 = *(void *)(a1 + 48);
  if (v7 == v12) {
    goto LABEL_14;
  }
  if (v7)
  {
    uint64_t v17 = *(void *)(a1 + 48);
    uint64_t v19 = v7;
    unsigned __int8 v13 = @"CARDS_READY_TO_USE_SOME_EXPRESS";
LABEL_15:
    uint64_t v14 = PKLocalizedPaymentString(&v13->isa, @"%lu%lu", v17, v19, (void)v20);
    goto LABEL_16;
  }

id sub_100025624(id a1, PKExpressPassConfiguration *a2)
{
  return -[PKExpressPassConfiguration passUniqueIdentifier](a2, "passUniqueIdentifier");
}

void sub_100025790(uint64_t a1, uint64_t a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = PKDeviceRegistrationResultToString(a2);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    *(_DWORD *)buf = 138412290;
    uint64_t v15 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Completed device registration from IDS message with result %@",  buf,  0xCu);
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) idsDestination]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 name]);

  id v10 = *(void **)(*(void *)(a1 + 40) + 304LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000258D4;
  void v12[3] = &unk_10063A790;
  id v13 = v9;
  id v11 = v9;
  [v10 sendRemoteRegistrationRequestResult:a2 forHandle:v11 completion:v12];
}

void sub_1000258D4(uint64_t a1, uint64_t a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = 138412546;
    uint64_t v8 = v6;
    __int16 v9 = 2112;
    uint64_t v10 = a2;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Finished sending device registration result response to handle %@, with error %@",  (uint8_t *)&v7,  0x16u);
  }
}

LABEL_16:
}

        objc_storeStrong((id *)(*(void *)(a1[7] + 8LL) + 40LL), v8);
LABEL_17:
        if (*(void *)(*(void *)(a1[8] + 8LL) + 40LL) && *(void *)(*(void *)(a1[7] + 8LL) + 40LL)) {
          goto LABEL_23;
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v5);
  }
}

    goto LABEL_17;
  }

  uint64_t v14 = v9;
  if (v8 == v14)
  {

LABEL_12:
    __int128 v23 = PKLogFacilityTypeGetObject(6LL);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v24) = 0;
      uint64_t v19 = "The new and old transaction source identifiers match, no need to migrate.";
      goto LABEL_14;
    }

    goto LABEL_16;
  }

  uint64_t v15 = v14;
  uint64_t v16 = [v8 isEqualToString:v14];

  if (v16) {
    goto LABEL_12;
  }
  +[PaymentTransaction updateTransactionsWithTransactionSource:toTransactionSource:inDatabase:]( &OBJC_CLASS___PaymentTransaction,  "updateTransactionsWithTransactionSource:toTransactionSource:inDatabase:",  v11,  v12,  v10);
LABEL_17:
}
      }

      id v28 = [v26 countByEnumeratingWithState:&v54 objects:v63 count:16];
    }

    while (v28);
  }

  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    id v39 = [v26 count];
    id v40 = -[NSMutableSet count](v49, "count");
    *(_DWORD *)buf = 134218240;
    uint64_t v59 = v39;
    id v60 = 2048;
    __int128 v61 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "passesForNonWebInAppPaymentOnNetworks passes: %ld, filtered: %ld",  buf,  0x16u);
  }

  return v49;
}
      }

      uint64_t v26 = [v24 countByEnumeratingWithState:&v50 objects:v59 count:16];
    }

    while (v26);
  }

  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    id v37 = [v24 count];
    uint64_t v38 = -[NSMutableSet count](v45, "count");
    *(_DWORD *)buf = 134218240;
    uint64_t v55 = v37;
    uint64_t v56 = 2048;
    uint64_t v57 = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "passesForWebPaymentOnNetworks passes: %ld, filtered: %ld",  buf,  0x16u);
  }

  return v45;
}

        if ([v20 sortingState] == (id)1)
        {
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v20 archivedTimestamp]);

          if (!v26)
          {
            id v27 = (void *)objc_claimAutoreleasedReturnValue( +[PassAnnotations anyInDatabase:withPassID:]( &OBJC_CLASS___PassAnnotations,  "anyInDatabase:withPassID:",  self->_database,  v19));
            id v28 = (void *)objc_claimAutoreleasedReturnValue([v17 expirationDate]);
            id v29 = v28;
            if (v28)
            {
              __int16 v30 = v28;
            }

            else
            {
              uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue([v17 relevantDates]);
              id v39 = (void *)objc_claimAutoreleasedReturnValue( +[PKPassRelevantDate findDateFromDates:option:]( &OBJC_CLASS___PKPassRelevantDate,  "findDateFromDates:option:",  v38,  3LL));

              if (v39) {
                id v40 = v39;
              }
              else {
                id v40 = (id)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
              }
              __int16 v30 = v40;
            }

            [v27 updateArchivedTimestamp:v30];
            id v43 = objc_claimAutoreleasedReturnValue([v27 passAnnotations]);

            __int128 v20 = (void *)v43;
            id v11 = &OBJC_CLASS___SQLitePropertyPredicate;
          }
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:](v54, "setObject:forKeyedSubscript:", v20, v19);
LABEL_49:

        objc_autoreleasePoolPop(v18);
      }

      uint64_t v55 = [obj countByEnumeratingWithState:&v60 objects:v68 count:16];
    }

    while (v55);
  }

  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  __int128 v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v67 = v48 ^ 1u;
    _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Finished updating Pass Annotations:\nExpired Passes section enabled by user:%ld",  buf,  0xCu);
  }

  id v46 = -[NSMutableDictionary copy](v54, "copy");
  return v46;
}

  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:0];
  *(_BYTE *)(*(void *)(a1 + 32) + 129LL) = 0;
  objc_msgSend(*(id *)(a1 + 32), "_queue_cancelCloudStoreInitializationTimer");
  __int128 v20 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v20 + 128))
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Processing account changed notification by trying to initalize the cloud store again.",  buf,  2u);
    }

    *(_BYTE *)(*(void *)(a1 + 32) + 128LL) = 0;
    return [*(id *)(a1 + 32) initialCloudDatabaseSetupWithOperationGroupNameSuffix:*(void *)(a1 + 56) completion:0];
  }

  else
  {
    if (*(_BYTE *)(v20 + 32))
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Cloud Store setup is complete, but we have to invalidate the cloud store. Invalidating cloud store now.",  buf,  2u);
      }

      [*(id *)(a1 + 32) invalidateCloudStoreWithOperationGroupNameSuffix:*(void *)(a1 + 56) clearCache:1 completion:0];
      __int128 v21 = *(void **)(a1 + 32);
      __int128 v22 = *(void *)(a1 + 48);
      __int128 v23 = 0LL;
    }

    else
    {
      *(_BYTE *)(v20 + 12_Block_object_dispose(va, 8) = 0;
      __int128 v21 = *(void **)(a1 + 32);
      __int128 v23 = *(unsigned __int8 *)(a1 + 64);
      __int128 v22 = *(void *)(a1 + 48);
    }

    return [v21 _markEndCloudStoreDatabaseSetupWithSuccess:v23 error:v22];
  }

  if (!v14)
  {
LABEL_26:
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    unsigned int v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v26 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      id v39 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Cannot parse activation code from %@",  buf,  0xCu);
    }

    goto LABEL_29;
  }

  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v3 accountIdentifier]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) physicalCardsForAccountWithIdentifier:v15]);
  __int16 v30 = 0u;
  int v31 = 0u;
  uint64_t v32 = 0u;
  id v33 = 0u;
  uint64_t v17 = v16;
  uint64_t v18 = [v17 countByEnumeratingWithState:&v30 objects:v42 count:16];
  if (v18)
  {
    uint64_t v19 = v18;
    __int128 v20 = *(void *)v31;
    while (2)
    {
      for (uint64_t j = 0LL; j != v19; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v31 != v20) {
          objc_enumerationMutation(v17);
        }
        __int128 v22 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)j);
        if (+[PKPhysicalCard physicalCard:matchesActivationCode:]( &OBJC_CLASS___PKPhysicalCard,  "physicalCard:matchesActivationCode:",  v22,  v14))
        {
          id v27 = PKLogFacilityTypeGetObject(14LL);
          id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412546;
            id v39 = v14;
            id v40 = 2112;
            uint64_t v41 = v22;
            _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Found phyical card that matches activation code %@, %@",  buf,  0x16u);
          }

          __int128 v23 = v22;
          goto LABEL_34;
        }
      }

      uint64_t v19 = [v17 countByEnumeratingWithState:&v30 objects:v42 count:16];
      if (v19) {
        continue;
      }
      break;
    }
  }

  __int128 v23 = 0LL;
LABEL_34:

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_30:
}

  return self;
}
}

  if (v4) {
    id v27 = 15LL;
  }
  else {
    id v27 = 6LL;
  }
  id v28 = (void *)objc_claimAutoreleasedReturnValue([v6 notificationIdentifier]);
  id v29 = [v7 copy];
  __int16 v30 = (void *)objc_claimAutoreleasedReturnValue( +[UNNotificationRequest requestWithIdentifier:content:trigger:destinations:]( &OBJC_CLASS___UNNotificationRequest,  "requestWithIdentifier:content:trigger:destinations:",  v28,  v29,  0LL,  v27));

  return v30;
}
}
    }
  }

  else
  {
    v7[2](v7, 1LL);
  }

  objc_destroyWeak(&location);
}

  v8.receiver = self;
  v8.super_class = (Class)&OBJC_CLASS___PendingProvisioning;
  uint64_t v6 = -[SQLiteEntity deleteFromDatabase](&v8, "deleteFromDatabase");

  return v6;
}
  }

  else
  {
    LOBYTE(v7) = 1;
  }

  return (char)v7;
}
}

  return v7;
}

          uint64_t v8 = v34;
        }

        uint64_t v17 = [v8 isActive];
        uint64_t v19 = v17;
        if (v11)
        {
          if (v17)
          {
            __int128 v20 = objc_opt_class(&OBJC_CLASS___PDDiscoveryUserNotification, v18);
            if ((objc_opt_isKindOfClass(v8, v20) & 1) != 0)
            {
              __int128 v21 = v8;
              __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v21 discoveryNotification]);
              [v11 localizeWithBundle:v28];
              if (([v22 isEqualForDisplayToNotification:v11] & 1) == 0)
              {
                [v21 setDiscoveryNotification:v11];
                -[PDUserNotificationManager insertUserNotification:]( v30->_userNotificationManager,  "insertUserNotification:",  v21);
              }
            }

            else
            {
              uint64_t Object = PKLogFacilityTypeGetObject(16LL);
              __int128 v21 = (id)objc_claimAutoreleasedReturnValue(Object);
              if (os_log_type_enabled((os_log_t)v21, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412546;
                uint64_t v44 = v30;
                __int128 v45 = 2112;
                id v46 = v8;
                _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v21,  OS_LOG_TYPE_DEFAULT,  "%@: Found user notification that wasn't a discovery notification: %@",  buf,  0x16u);
              }
            }
          }

          else if (([v11 isTerminalStatus] & 1) == 0)
          {
            [v11 setStatus:4];
            __int128 v23 =  -[PDDatabaseManager insertOrUpdateDiscoveryNotification:]( v30->_databaseManager,  "insertOrUpdateDiscoveryNotification:",  v11);
            id v27 = 1;
          }

          if (([v11 isDelivered] & 1) == 0)
          {
            unsigned int v25 = PKLogFacilityTypeGetObject(16LL);
            uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412546;
              uint64_t v44 = v30;
              __int128 v45 = 2112;
              id v46 = v11;
              _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "%@: Found user notification that wasn't delivered: %@",  buf,  0x16u);
            }
          }
        }

        if ((v19 & 1) == 0) {
          -[PDUserNotificationManager removeUserNotification:]( v30->_userNotificationManager,  "removeUserNotification:",  v8);
        }
      }

      uint64_t v6 = obj;
      id v33 = [obj countByEnumeratingWithState:&v39 objects:v48 count:16];
    }

    while (v33);

    if ((v27 & 1) != 0) {
      -[PDDiscoveryManager _queue_updateDiscoveryNotificationsStatusDefaults]( v30,  "_queue_updateDiscoveryNotificationsStatusDefaults");
    }
  }

  else
  {
  }
}
}

  uint64_t v14 = 0LL;
LABEL_24:

  return v14;
}

void sub_100025D00( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

uint64_t sub_100025D44(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100025D54(uint64_t a1)
{
}

void sub_100025D5C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 40);
  __int16 v9 = *(void **)(*(void *)(a1 + 32) + 408LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100025E24;
  v13[3] = &unk_10063A7B8;
  id v10 = v8;
  __int128 v17 = *(_OWORD *)(a1 + 48);
  id v15 = v6;
  id v16 = v7;
  id v14 = v10;
  id v11 = v6;
  id v12 = v7;
  [v9 familyMembersWithCachePolicy:0 completion:v13];
}

void sub_100025E24(void *a1, void *a2)
{
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        __int16 v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "appleID", (void)v18));
        id v10 = (void *)a1[4];
        id v11 = v9;
        id v12 = v10;
        if (v11 == v12)
        {
        }

        else
        {
          id v13 = v12;
          if (v11) {
            BOOL v14 = v12 == 0LL;
          }
          else {
            BOOL v14 = 1;
          }
          if (v14)
          {

LABEL_15:
            id v16 = (void *)objc_claimAutoreleasedReturnValue([v8 appleIDAliases]);
            unsigned int v17 = [v16 containsObject:a1[4]];

            if (!v17) {
              goto LABEL_17;
            }
            goto LABEL_16;
          }

          unsigned __int8 v15 = [v11 isEqualToString:v12];

          if ((v15 & 1) == 0) {
            goto LABEL_15;
          }
        }

LABEL_23:
  (*(void (**)(void))(a1[6] + 16LL))();
}
}

    __int16 v9 = (char *)v9 + 1;
  }

  while (v7 != v9);
  id v7 = [v5 countByEnumeratingWithState:&v47 objects:v55 count:16];
  if (v7) {
    goto LABEL_5;
  }
LABEL_25:

  __int128 v19 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot share invitation for receipient %@ because they are not an account user",  *(void *)(a1 + 40)));
  __int128 v20 = *(void *)(*(void *)(a1 + 64) + 8LL);
  __int128 v21 = *(void **)(v20 + 40);
  *(void *)(v20 + 40) = v19;

  __int128 v22 = PKLogFacilityTypeGetObject(9LL);
  __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v24 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    *(_DWORD *)buf = 138412290;
    uint64_t v57 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }

  (*((void (**)(id, void, void))v3 + 2))(v3, 0LL, 0LL);
LABEL_29:
  __int16 v30 = v46;
LABEL_30:

LABEL_31:
}
}

  [v9 updateSortingState:a3];
LABEL_30:
}

    self->_hasQueriedPeerPaymentHasSetupRecurringP2PPaymentForAnyParticipant = 1;
  }

  return self->_hasPeerPaymentSetupRecurringP2PPaymentForAnyParticipant;
}
}

  return v6;
}

  if (*(_BYTE *)(a1 + 130))
  {
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      id v16 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) data]);
      unsigned int v17 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
      *(_DWORD *)buf = 138412546;
      id v28 = v16;
      id v29 = 2114;
      __int16 v30 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "CKFetchRecordZoneChangesOperation saving token %@ for zone %{public}@",  buf,  0x16u);
    }

    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  *(void *)(a1 + 56),  1LL,  0LL));
    __int128 v19 = *(void **)(*(void *)(a1 + 32) + 152LL);
    __int128 v20 = *(void *)(a1 + 80);
    __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v19 containerDatabaseIdentifier:v20 didUpdateChangeToken:v18 fetchTimestamp:v21 forZoneID:*(void *)(a1 + 40)];

    __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
    if (v22)
    {
      __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
      uint64_t v26 = v23;
      BOOL v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v26, 1LL));
    }

    else
    {
      BOOL v24 = 0LL;
    }

    [*(id *)(a1 + 32) reportContainerChangeSignpostEventType:16 stateName:0 objectNames:v24 changeToken:v18 error:0 operationGroupName:*(void *)(a1 + 88) operationGroupNameSuffix:*(void *)(a1 + 96)];
  }

  --*(void *)(*(void *)(*(void *)(a1 + 120) + 8LL) + 24LL);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 104) + 16LL))();
}
}

      [v29 addObjectsFromArray:v15];
      goto LABEL_24;
    }

    id v29 = v33;
    [v33 addObjectsFromArray:v14];

    id v28 = 0LL;
LABEL_22:
    if (!v26) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }

  if (a3 != 1)
  {
    if (a3)
    {
      id v29 = v33;
      goto LABEL_32;
    }

    id v29 = v33;
    if (v25)
    {
      [v33 addObjectsFromArray:v14];
      if (!v26) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }

    goto LABEL_22;
  }

  if (v25)
  {
    id v29 = v33;
    [v33 addObjectsFromArray:v14];
    __int16 v30 = -[PKChangeHistoryEvent initWithType:recordType:recordUniqueID:timestamp:]( objc_alloc(&OBJC_CLASS___PKChangeHistoryEvent),  "initWithType:recordType:recordUniqueID:timestamp:",  0LL,  a4,  v35,  v34);

    id v28 = v30;
    if (!v26) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }

  id v29 = v33;
  if (v26) {
LABEL_28:
  }
    [v29 addObjectsFromArray:v15];
LABEL_29:
  if (v27)
  {
    [v29 addObjectsFromArray:v16];
    int v31 = -[PKChangeHistoryEvent initWithType:recordType:recordUniqueID:timestamp:]( objc_alloc(&OBJC_CLASS___PKChangeHistoryEvent),  "initWithType:recordType:recordUniqueID:timestamp:",  0LL,  a4,  v35,  v34);

    id v28 = v31;
  }

  os_unfair_lock_unlock(&self->_lockOperation);
}

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  __int16 v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_100424A90(0LL, &qword_100706E38, &OBJC_CLASS___PKPendingProvisioning_ptr);
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  __int16 v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    _s14descr1006609C1C13ProvisionTaskCMa();
    swift_arrayInitWithCopy(a1);
    return a3;
  }

    *(void *)(isUniquelyReferenced_nonNull_native + 8 * (a1 >> 6) + 64) |= 1LL << a1;
    id v29 = (uint64_t *)(*(void *)(isUniquelyReferenced_nonNull_native + 48) + 32 * a1);
    *id v29 = v42;
    v29[1] = v3;
    v29[2] = v16;
    v29[3] = v18;
    id v28 = v40;
    *(void *)(*(void *)(isUniquelyReferenced_nonNull_native + 56) + 8 * a1) = v40;
    __int16 v30 = *(void *)(isUniquelyReferenced_nonNull_native + 16);
    int v31 = __OFADD__(v30, 1LL);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_28;
    }
    id v5 = v3;
    *(void *)(isUniquelyReferenced_nonNull_native + 16) = v32;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(v18);
    goto LABEL_25;
  }

  __break(1u);
LABEL_35:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for PDARRUnifiedAccessSignatureProvider.IdentifierPair);
  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_24;
    }

    __break(1u);
    goto LABEL_23;
  }

  if ((a3 & 1) == 0)
  {
LABEL_25:
    __break(1u);
    return;
  }

  if (a4 < 0) {
    uint64_t v8 = a4;
  }
  else {
    uint64_t v8 = a4 & 0xFFFFFFFFFFFFFF8LL;
  }
  __int16 v9 = __CocoaSet.element(at:)(a1, a2, v8);
  __int128 v21 = v9;
  id v10 = sub_100424A90(0LL, &qword_1007074A0, &OBJC_CLASS___PKAppletSubcredential_ptr);
  swift_unknownObjectRetain(v9);
  swift_dynamicCast(&v22, &v21, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
  swift_unknownObjectRelease(v9);
}

void sub_10002601C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
  if (!v8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    BOOL v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v25 = *(void **)(a1 + 32);
      int v27 = 138412290;
      id v28 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Error: cannot fetch account users for a nil account defined on %@",  (uint8_t *)&v27,  0xCu);
    }

    goto LABEL_10;
  }

  __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) altDSID]);
  if (!v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 48) accountUserForAccountWithIdentifier:v8 handle:*(void *)(a1 + 48)]);
    __int16 v9 = (void *)objc_claimAutoreleasedReturnValue([v10 altDSID]);
    uint64_t v11 = PKLogFacilityTypeGetObject(9LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 32);
      int v27 = 138412802;
      id v28 = v10;
      __int16 v29 = 2112;
      uint64_t v30 = v13;
      __int16 v31 = 2112;
      uint64_t v32 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Found account user %@ for configuration %@ with altDSID %@",  (uint8_t *)&v27,  0x20u);
    }

    if (!v9)
    {
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = *(void **)(a1 + 32);
        int v27 = 138412290;
        id v28 = v26;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Error: cannot fetch account users for a nil altDSID defined on %@",  (uint8_t *)&v27,  0xCu);
      }

LABEL_10:
      v7[2](v7, v6, 0LL);
      goto LABEL_11;
    }
  }

  uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 48) accountUserWithAltDSID:v9 accountIdentifier:v8]);
  uint64_t v15 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;

  unsigned int v17 = *(void **)(*(void *)(a1 + 40) + 48LL);
  uint64_t v18 = PKCurrentUserAltDSID();
  __int128 v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  uint64_t v20 = objc_claimAutoreleasedReturnValue([v17 accountUserWithAltDSID:v19 accountIdentifier:v8]);
  uint64_t v21 = *(void *)(*(void *)(a1 + 72) + 8LL);
  __int128 v22 = *(void **)(v21 + 40);
  *(void *)(v21 + 40) = v20;

  v7[2](v7, v6, 0LL);
LABEL_11:
}

void sub_1000262B0(void *a1)
{
  id v2 = [[PKSharingIDSManagerHandlerDetails alloc] initWithFamilyMember:*(void *)(*(void *)(a1[5] + 8) + 40) accountUser:*(void *)(*(void *)(a1[6] + 8) + 40)];
  id v3 = [[PKSharingIDSManagerHandlerDetails alloc] initWithFamilyMember:*(void *)(*(void *)(a1[7] + 8) + 40) accountUser:*(void *)(*(void *)(a1[8] + 8) + 40)];
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412546;
    id v7 = v2;
    __int16 v8 = 2112;
    id v9 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Found currentUserDetails: %@, handleUserDetails: %@",  (uint8_t *)&v6,  0x16u);
  }

  (*(void (**)(void))(a1[4] + 16LL))();
}

LABEL_6:
}
}

  uint64_t v13 = 0LL;
LABEL_11:

  return v13;
}

  uint64_t v13 = 0LL;
LABEL_11:

  return v13;
}
}
}
}

  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  -[NSMutableDictionary setObjectOrNull:forKey:](v4, "setObjectOrNull:forKey:", v17, @"d");

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v3 registrationBackoffCounter]));
  -[NSMutableDictionary setObjectOrNull:forKey:](v4, "setObjectOrNull:forKey:", v18, @"f");

  return v4;
}
}
}
}
}
}
}
}

  uint64_t v13 = 0LL;
LABEL_11:

  return v13;
}

  uint64_t v13 = 0LL;
LABEL_11:

  return v13;
}
}
}
}
}
}

  [v3 safelySetObject:v4 forKey:@"requiredPersonalizationInfo"];
  id v9 = (void *)objc_claimAutoreleasedReturnValue(-[PDPersonalizePassTask personalizationToken](self, "personalizationToken"));
  [v3 safelySetObject:v9 forKey:@"personalizationToken"];

  return v3;
}
}
}
}
}
}

  id v16 = -[NSMutableDictionary copy](v4, "copy");

  return v16;
}
}

  return v12;
}
}
}
}
}

    LOBYTE(v5) = 0;
  }

    __int16 v8 = sub_1002CD0D0((BOOL)v4, 15061LL);
    goto LABEL_7;
  }

  if (sub_1002CCA50( (BOOL)v4,  @"CREATE TABLE IF NOT EXISTS payment_setup_features (pid INTEGER, identifiers BLOB, localized_display_name TEXT, feature_type INTEGER, feature_state INTEGER, supported_options INTEGER, supported_devices INTEGER, product_identifier TEXT, partner_identifier TEXT, feature_identifier INTEGER, dirty_state_identifier TEXT, last_updated_date INTEGER, product_type INTEGER, product_state INTEGER, notification_title TEXT, notification_message TEXT, PRIMARY KEY (pid));"))
  {
    goto LABEL_6;
  }
}

  id v12 = 0;
LABEL_11:

  return v12;
}

  id v12 = 0;
LABEL_16:

  return v12;
}

  id v12 = 0;
LABEL_21:

  return v12;
}

  id v12 = 0;
LABEL_18:

  return v12;
}

  id v12 = 0;
LABEL_13:

  return v12;
}

  id v12 = 0;
LABEL_13:

  return v12;
}

  id v12 = 0;
LABEL_26:

  return v12;
}

  id v12 = 0;
LABEL_15:

  return v12;
}

  id v12 = 0;
LABEL_13:

  return v12;
}

  id v12 = 0;
LABEL_15:

  return v12;
}

  id v12 = 0;
LABEL_13:

  return v12;
}

  id v12 = 0;
LABEL_13:

  return v12;
}

  id v12 = 0;
LABEL_13:

  return v12;
}

  id v12 = 0;
LABEL_13:

  return v12;
}

    if (++v10 == v8)
    {
      swift_bridgeObjectRelease(v11);

      swift_bridgeObjectRelease_n(v7, 2LL);
      return 0LL;
    }
  }

  __break(1u);
LABEL_74:
  __break(1u);
  return result;
}

uint64_t sub_100026578(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000266C8(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32) != 0LL);
}

void sub_10002694C(uint64_t a1)
{
  if (*(void *)(a1 + 48)) {
    return;
  }
  if ([*(id *)(a1 + 32) isEqualToString:PDDarwinNotificationMobileKeyBagFirstUnlock])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Keybag unlocked notification received",  buf,  2u);
    }

    id v4 = (unsigned __int8 *)(*(void *)(a1 + 40) + 9LL);
    while (!__ldaxr(v4))
    {
      if (!__stlxr(1u, v4))
      {
        sub_100016BF8(*(void *)(a1 + 40), 2);
        return;
      }
    }

LABEL_17:
    __clrex();
    return;
  }

  if ([*(id *)(a1 + 32) isEqualToString:off_1007037B0()])
  {
    uint64_t v6 = PKLogFacilityTypeGetObject(0LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "iCloud restore complete notification received",  buf,  2u);
    }

    __int16 v8 = (unsigned __int8 *)(*(void *)(a1 + 40) + 10LL);
    while (!__ldaxr(v8))
    {
      if (!__stlxr(1u, v8))
      {
        PDRestorePassdPreferences();
        sub_100016BF8(*(void *)(a1 + 40), 0);
        PKPassbookIsCurrentlyDeletedByUser();
        return;
      }
    }

    goto LABEL_17;
  }

  if ([*(id *)(a1 + 32) isEqualToString:PKDarwinNotificationEventLostModeStateChanged])
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[FMDFMIPManager sharedInstance](&OBJC_CLASS___FMDFMIPManager, "sharedInstance"));
    unsigned __int8 v11 = [v10 lostModeIsActive];

    if ((v11 & 1) != 0)
    {
      uint64_t v12 = PKLogFacilityTypeGetObject(0LL);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Lost Mode Is Active", buf, 2u);
      }

      PKSetNeedsLostModeExitAuth(1LL);
      PKAnalyticsSendEvent(PKAggDKeyPaymentLifecycleSuspendFMIPLostMode, 0LL);
    }

    else
    {
      PKAnalyticsSendEvent(PKAggDKeyPaymentLifecycleResume, 0LL);
      uint64_t v14 = PKLogFacilityTypeGetObject(0LL);
      uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Processing Lost Mode Exit", buf, 2u);
      }

      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 48) allPaymentApplications]);
      if ([v16 count])
      {
        uint64_t v17 = PKLogFacilityTypeGetObject(6LL);
        uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Starting FMDFMIP lost mode exit.",  buf,  2u);
        }

        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[FMDFMIPManager sharedInstance](&OBJC_CLASS___FMDFMIPManager, "sharedInstance"));
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472LL;
        v22[2] = sub_100026DA0;
        void v22[3] = &unk_10063A790;
        v22[4] = *(void *)(a1 + 40);
        -[os_log_s initiateLostModeExitAuthWithCompletion:](v15, "initiateLostModeExitAuthWithCompletion:", v22);
      }

      else if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "No Cards. Skipping Lost Mode Exit",  buf,  2u);
      }
    }
  }

  else if ([*(id *)(a1 + 32) isEqualToString:PKDarwinNotificationEventDeveloperImageMounted])
  {
    id v21 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 96) sharedWebServiceContext]);
    [v21 setConfigurationDate:0];
    [*(id *)(*(void *)(a1 + 40) + 96) updateSharedWebServiceContext:v21];
    [*(id *)(*(void *)(a1 + 40) + 96) updateWebServiceConfigurationWithCompletion:0];
  }

  else if ([*(id *)(a1 + 32) isEqualToString:PDDarwinNotificationEventPasswordChanged])
  {
    sub_100019674(*(void *)(a1 + 40), 1LL, 0LL);
    id v19 = [*(id *)(*(void *)(a1 + 40) + 256) notePasscodeChanged];
  }

  else if ([*(id *)(a1 + 32) isEqualToString:PDDarwinNotificationEventBluetoothPowerChanged])
  {
    _[*(id *)(*(void *)(a1 + 40) + 176) updateSubcredentialsForBluetoothPowerChange];
  }
}
}

    __int16 v29 = objc_msgSend( v15,  "pk_encryptedObjectForKey:ofClass:",  PKCloudAccountBalanceUpdateAmountKey,  objc_opt_class(NSNumber, v22));
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (v30)
    {
      __int16 v31 = (void *)objc_claimAutoreleasedReturnValue([v6 appleBalanceDetails]);
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue([v31 currencyCode]);

      -[os_log_s decimalValue](v30, "decimalValue");
      id v33 = (void *)objc_claimAutoreleasedReturnValue( +[NSDecimalNumber decimalNumberWithDecimal:]( &OBJC_CLASS___NSDecimalNumber,  "decimalNumberWithDecimal:",  v39));
      uint64_t v34 = PKCurrencyAmountMake(v33, v32);
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue(v34);

      -[PDAccountManager insertAccountBalanceUpdateNotificationForAccount:updateAmount:]( self->_accountManager,  "insertAccountBalanceUpdateNotificationForAccount:updateAmount:",  v6,  v35);
    }

    else
    {
      uint64_t v36 = PKLogFacilityTypeGetObject(9LL);
      uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v36);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v7 description]);
        *(_DWORD *)buf = 138412290;
        uint64_t v41 = v37;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Error: missing balance update amount for balance update notification for account record %@",  buf,  0xCu);
      }
    }

LABEL_22:
    goto LABEL_23;
  }

  __int128 v23 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled((os_log_t)v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v15,  OS_LOG_TYPE_DEFAULT,  "Not inserting account balance update notification: balance update notifications disabled",  buf,  2u);
  }
}

  return v6;
}

  return v6;
}

        id v2 = (char *)v2 + 1;
      }

      while (v20 != v2);
      uint64_t v17 = [obj countByEnumeratingWithState:&v21 objects:v25 count:16];
      uint64_t v20 = v17;
    }

    while (v17);
  }
}
      }

      unsigned __int8 v11 = [v8 countByEnumeratingWithState:&v49 objects:v58 count:16];
      if (!v11)
      {
LABEL_19:

        id v46 = 0u;
        uint64_t v47 = 0u;
        uint64_t v44 = 0u;
        __int128 v45 = 0u;
        __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v42 PKArrayForKey:@"enqueued"]);
        __int128 v23 = [v22 countByEnumeratingWithState:&v44 objects:v53 count:16];
        if (!v23) {
          goto LABEL_34;
        }
        unsigned int v25 = v23;
        uint64_t v26 = *(void *)v45;
        while (1)
        {
          for (uint64_t j = 0LL; j != v25; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v45 != v26) {
              objc_enumerationMutation(v22);
            }
            id v28 = *(void *)(*((void *)&v44 + 1) + 8LL * (void)j);
            __int16 v29 = objc_opt_class(&OBJC_CLASS___NSData, v24);
            if ((objc_opt_isKindOfClass(v28, v29) & 1) != 0)
            {
              __int16 v31 = objc_opt_class(&OBJC_CLASS___PDNetworkTask, v30);
              id v43 = 0LL;
              uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClass:fromData:error:",  v31,  v28,  &v43));
              id v33 = (os_log_s *)v43;
              if (v32)
              {
                -[NSMutableArray addObject:](self->_enqueuedTasks, "addObject:", v32);
                if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  uint64_t v55 = v32;
                  _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "     --> enqueued task: %@",  buf,  0xCu);
                }

                goto LABEL_32;
              }
            }

            else
            {
              id v33 = 0LL;
            }

            uint64_t v34 = PKLogFacilityTypeGetObject(0LL);
            uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v55 = v33;
              _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "PDNetworkTaskmanager: error occurred while trying to unarchive enqueued task. The data will be discarded. %@.",  buf,  0xCu);
            }

  id v21 = *(void **)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 48);
  __int128 v22 = *(dispatch_queue_s **)(v20 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001ACEA4;
  block[3] = &unk_1006392B0;
  void block[4] = v20;
  int v27 = v21;
  dispatch_sync(v22, block);
}

  return v6;
}

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v6 != v4);
      id v4 = [obj countByEnumeratingWithState:&v33 objects:v40 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "No matching virtual card to update", buf, 2u);
  }

  if (*(void *)(a1 + 48))
  {
    uint64_t v37 = NSLocalizedDescriptionKey;
    uint64_t v38 = @"PDAccountManager could not save the virtual card's last AutoFilled date because no matching virtual card was found";
    id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL));
    uint64_t v18 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  0LL,  v21));

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
LABEL_24:
  }
}

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

      id v33 = 0;
      goto LABEL_22;
    }

    if (v35)
    {
      uint64_t v36 = PDAccountEndpointBackOffEndpointTypeToString(a3);
      uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
      id v43 = 138412802;
      uint64_t v44 = v37;
      __int128 v45 = 2112;
      id v46 = v18;
      uint64_t v47 = 2112;
      uint64_t v48 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Proactively fetching %@ endpoint for account %@ since the last fetch date was %@",  (uint8_t *)&v43,  0x20u);
    }

    id v33 = 1;
  }

  uint64_t v13 = *(void **)(a1 + 48);
  if (v13)
  {
    uint64_t v14 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 24LL);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_100282F90;
    v15[3] = &unk_10063A830;
    id v16 = v13;
    dispatch_async(v14, v15);
  }
}

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), v3);
  uint64_t v6 = 1LL;
LABEL_19:

  return v6;
}

    id v9 = 0LL;
    goto LABEL_18;
  }

  if (!-[PDUserNotificationIconStore _storeImage:assetType:identifier:]( self,  "_storeImage:assetType:identifier:",  v8,  a3,  v6))
  {
    uint64_t v13 = PKLogFacilityTypeGetObject(6LL);
    unsigned __int8 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      else {
        uint64_t v14 = (uint64_t)*(&off_100654668 + a3);
      }
      uint64_t v17 = 138412546;
      uint64_t v18 = v14;
      id v19 = 2112;
      uint64_t v20 = v6;
      uint64_t v15 = "Error storing notification asset %@ for account %@.";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v17, 0x16u);
      goto LABEL_17;
    }

    goto LABEL_17;
  }

LABEL_5:
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v7));
LABEL_18:

  return v9;
}

    id v9 = 0LL;
    goto LABEL_18;
  }

  if (!-[PDUserNotificationIconStore _storeImage:assetType:identifier:]( self,  "_storeImage:assetType:identifier:",  v8,  a3,  v6))
  {
    uint64_t v13 = PKLogFacilityTypeGetObject(6LL);
    unsigned __int8 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      else {
        uint64_t v14 = (uint64_t)*(&off_100654668 + a3);
      }
      uint64_t v17 = 138412546;
      uint64_t v18 = v14;
      id v19 = 2112;
      uint64_t v20 = v6;
      uint64_t v15 = "Error storing notification asset %@ for pass %@.";
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v17, 0x16u);
      goto LABEL_17;
    }

    goto LABEL_17;
  }

LABEL_5:
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v7));
LABEL_18:

  return v9;
}

    if (v4) {
      v4[2](v4, v7, 0LL);
    }
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  4LL,  0LL));
    if (v4) {
      ((void (**)(id, uint64_t, void *))v4)[2](v4, 0LL, v10);
    }
  }
}

  os_unfair_lock_unlock(p_lock);
  return v7;
}

LABEL_21:
      v7[2](v7, v6, 0LL);
      goto LABEL_22;
    }

    if (!*(_BYTE *)(a1 + 89))
    {
      id v9 = PKLogFacilityTypeGetObject(28LL);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        unsigned __int8 v11 = *(void *)(a1 + 56);
        uint64_t v12 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        __int128 v45 = v11;
        id v46 = 2112;
        uint64_t v47 = v12;
        uint64_t v13 = "Requirement is registered and shouldCheckRegisteredRequirement is false, skipping. For pass %@ for requirement: %@";
LABEL_16:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v13, buf, 0x16u);
        goto LABEL_17;
      }

      goto LABEL_17;
    }
  }

  else if (!*(_BYTE *)(a1 + 88))
  {
    uint64_t v14 = [*(id *)(a1 + 40) canLocallyValidateRegistrationState];
    uint64_t v15 = PKLogFacilityTypeGetObject(28LL);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    uint64_t v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    if (!v14)
    {
      if (v17)
      {
        uint64_t v32 = *(void *)(a1 + 56);
        id v33 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        __int128 v45 = v32;
        id v46 = 2112;
        uint64_t v47 = v33;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Registration status already not registered, skipping. For pass %@ for requirement: %@",  buf,  0x16u);
      }

      goto LABEL_21;
    }

    if (v17)
    {
      uint64_t v18 = *(void *)(a1 + 56);
      id v19 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      __int128 v45 = v18;
      id v46 = 2112;
      uint64_t v47 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Registration status not registered, but allowing local validation. For pass %@ for requirement: %@",  buf,  0x16u);
    }
  }

  uint64_t v20 = PKLogFacilityTypeGetObject(28LL);
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v22 = *(void *)(a1 + 56);
    __int128 v23 = *(void *)(a1 + 40);
    *(_DWORD *)buf = 138412546;
    __int128 v45 = v22;
    id v46 = 2112;
    uint64_t v47 = v23;
    _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Checking registration status for pass %@ for requirement: %@",  buf,  0x16u);
  }

  BOOL v24 = *(void *)(a1 + 40);
  v34[0] = _NSConcreteStackBlock;
  v34[1] = 3221225472LL;
  v34[2] = sub_10039FF90;
  v34[3] = &unk_10065A230;
  id v43 = v8;
  unsigned int v25 = *(void **)(a1 + 64);
  uint64_t v26 = *(void *)(a1 + 72);
  __int128 v35 = *(id *)(a1 + 56);
  int v27 = *(id *)(a1 + 40);
  id v28 = *(void *)(a1 + 32);
  uint64_t v36 = v27;
  uint64_t v37 = v28;
  uint64_t v38 = *(id *)(a1 + 48);
  id v39 = *(id *)(a1 + 80);
  id v40 = *(id *)(a1 + 72);
  id v42 = v7;
  uint64_t v41 = v6;
  [v25 isRegisteredForRequirement:v24 context:v26 completion:v34];

LABEL_22:
}

  __int128 v61 = PKUseMockSURFServer(v42, v43);
  if ((v61 & 1) != 0 || PKStoreDemoModeEnabled(v61, v62))
  {
    uint64_t v63 = objc_claimAutoreleasedReturnValue(-[PDPeerPaymentWebServiceCoordinator _mockAccountInitialState](v20, "_mockAccountInitialState"));
    mockAccount = v20->_mockAccount;
    v20->_mockAccount = (PKPeerPaymentAccount *)v63;
  }

  int v65 = PDDefaultQueue();
  uint64_t v66 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v65);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1003C202C;
  block[3] = &unk_100639300;
  uint64_t v67 = v20;
  __int16 v80 = v67;
  dispatch_async(v66, block);

  -[PDPeerPaymentWebServiceCoordinator _updatePushTopics](v67, "_updatePushTopics");
  -[PDPeerPaymentWebServiceCoordinator _schedulePeerPaymentCoordinatorActivities]( v67,  "_schedulePeerPaymentCoordinatorActivities");
  __int128 v68 = objc_claimAutoreleasedReturnValue( +[NSHashTable pk_weakObjectsHashTableUsingPointerPersonality]( &OBJC_CLASS___NSHashTable,  "pk_weakObjectsHashTableUsingPointerPersonality"));
  observers = v67->_observers;
  v67->_observers = (NSHashTable *)v68;

  *(void *)&v67->_lockObservers._os_unfair_lock_opaque = 0LL;
LABEL_21:

  return v20;
}

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v3 altDSID]);
  if (v13)
  {
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) _associatedAccountRemoteRegistrationActivityIdentifierForAltDSID:v13]);
    PDScheduledActivityRemove(@"PDPeerPaymentWebServiceCoordinator", v14);
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 56) + 64) accountInvitationWithAltDSID:v13]);
    id v16 = v15;
    if (v15)
    {
      if ([v15 status] == (id)1)
      {
        [v16 setRegistrationResult:*(void *)(a1 + 64)];
        id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 104LL));
        uint64_t v18 = objc_claimAutoreleasedReturnValue( [WeakRetained insertOrUpdatePeerPaymentAccount:*(void *)(*(void *)(a1 + 56) + 64)]);
        id v19 = *(void *)(a1 + 56);
        uint64_t v20 = *(void **)(v19 + 64);
        *(void *)(v19 + 64) = v18;

        [*(id *)(a1 + 56) _scheduleAssociatedAccountRemoteRegistrationActivityIfNecessaryForReason:2];
      }
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(11LL);
      uint64_t v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v32 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "There is no peer payment account invitation for family member %@",  buf,  0xCu);
      }
    }
  }

  else
  {
    id v21 = PKLogFacilityTypeGetObject(11LL);
    uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v22 = *(void **)(a1 + 48);
      __int128 v23 = @"YES";
      if (*(_BYTE *)(a1 + 72)) {
        BOOL v24 = @"YES";
      }
      else {
        BOOL v24 = @"NO";
      }
      if (!*(_BYTE *)(a1 + 73)) {
        __int128 v23 = @"NO";
      }
      *(_DWORD *)buf = 138412802;
      uint64_t v32 = v22;
      id v33 = 2112;
      uint64_t v34 = v24;
      __int128 v35 = 2112;
      uint64_t v36 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Error: could not find family member from destination %@ after a remote registration result was received. Peer pa yment registration success: %@, Broker registration success %@",  buf,  0x20u);
    }
  }
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 5;
  __int16 v8 = v6 - 5;
  if (!v7) {
    __int16 v8 = -1;
  }
  return (v8 + 1);
}

      swift_unknownObjectRelease(v12);
      uint64_t v1 = v43;
      id v5 = v45;
      if (v9 == v45) {
        return;
      }
    }
  }

  uint64_t v26 = 0LL;
  id v42 = v1 + 32;
  uint64_t v44 = *(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  while (v26 != v44)
  {
    int v27 = v4[5];
    id v28 = *(id *)(v42 + 8 * v26);
    __int16 v29 = NSObject._rawHashValue(seed:)(v27);
    uint64_t v30 = -1LL << *((_BYTE *)v4 + 32);
    __int16 v31 = v29 & ~v30;
    uint64_t v32 = v31 >> 6;
    id v33 = *(void *)&v8[8 * (v31 >> 6)];
    uint64_t v34 = 1LL << v31;
    if (((1LL << v31) & v33) != 0)
    {
      sub_100424A90(0LL, &qword_1007071E0, &OBJC_CLASS___PKPaymentApplication_ptr);
      __int128 v35 = *(id *)(v4[6] + 8 * v31);
      uint64_t v36 = static NSObject.== infix(_:_:)();

      if ((v36 & 1) != 0)
      {
LABEL_30:

        goto LABEL_31;
      }

      uint64_t v37 = ~v30;
      while (1)
      {
        __int16 v31 = (v31 + 1) & v37;
        uint64_t v32 = v31 >> 6;
        id v33 = *(void *)&v8[8 * (v31 >> 6)];
        uint64_t v34 = 1LL << v31;
        if ((v33 & (1LL << v31)) == 0) {
          break;
        }
        uint64_t v38 = *(id *)(v4[6] + 8 * v31);
        id v39 = static NSObject.== infix(_:_:)();

        if ((v39 & 1) != 0) {
          goto LABEL_30;
        }
      }
    }

    *(void *)&v8[8 * v32] = v34 | v33;
    *(void *)(v4[6] + 8 * v31) = v28;
    id v40 = v4[2];
    unsigned __int8 v11 = __OFADD__(v40, 1LL);
    uint64_t v41 = v40 + 1;
    if (v11) {
      goto LABEL_44;
    }
    v4[2] = v41;
LABEL_31:
    if (++v26 == v45) {
      return;
    }
  }

  uint64_t v6 = *a1;
  id v7 = v6 >= 3;
  __int16 v8 = v6 - 3;
  if (!v7) {
    __int16 v8 = -1;
  }
  return (v8 + 1);
}

  uint64_t v6 = *a1;
  id v7 = v6 >= 2;
  __int16 v8 = v6 - 2;
  if (!v7) {
    __int16 v8 = -1;
  }
  return (v8 + 1);
}

void sub_100026DA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      int v7 = 138412290;
      id v8 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Failed to un-suspend passes from Lost Mode. Asking server for latest versions. Error: %@",  (uint8_t *)&v7,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 96) initiateDevicePassesDownload];
  }

  else
  {
    if (v6)
    {
      LOWORD(v7) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Completed FMDFMIP lost mode exit.",  (uint8_t *)&v7,  2u);
    }

    PKSetNeedsLostModeExitAuth(0LL);
  }
}

void sub_100026EA4(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v3 = a2;
    sub_1000186B8(a1);
    xpc_object_t xdict = xpc_dictionary_create(0LL, 0LL, 0LL);
    xpc_dictionary_set_string( xdict,  "Name",  (const char *)[PKPassLibraryCanAddPassChangeNotification UTF8String]);
    [*(id *)(a1 + 488) sendEvent:xdict completion:v3];
  }

void sub_100027378(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v9 = v3;
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serialNumber]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v9 associatedPassSerialNumber]);
    if (([v4 isEqualToString:v5] & 1) == 0)
    {

      goto LABEL_6;
    }

    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passTypeIdentifier]);
    int v7 = (void *)objc_claimAutoreleasedReturnValue([v9 associatedPassTypeIdentifier]);
    unsigned int v8 = [v6 isEqualToString:v7];

    id v3 = v9;
    if (v8)
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_6:
      id v3 = v9;
    }
  }
}

void sub_1000277D0(uint64_t a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      BOOL v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend( *(id *)(*(void *)(a1 + 40) + 32),  "deleteCardWithUniqueID:forReason:withDiagnosticReason:",  *(void *)(*((void *)&v7 + 1) + 8 * (void)v6),  6,  @"Database marked for deletion",  (void)v7);
        BOOL v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_100027954(uint64_t a1)
{
  sub_100019674(*(void *)(a1 + 32), *(void *)(a1 + 40) == 2LL, 0LL);
}

id sub_100027A4C(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 56) updateUserNotificationsForUpdatedExpressPassConfigurations:*(void *)(a1 + 40)];
}

id sub_100027BD8(uint64_t a1, void *a2)
{
  return _[a2 sendDidUpdateDefaultPaymentPassWithUniqueIdentifier:*(void *)(a1 + 32)];
}

id sub_100027FA4(uint64_t a1, void *a2)
{
  return _[a2 sendSharesDidUpdateWithPaymentPassWithUniqueIdentifier:*(void *)(a1 + 32)];
}

void sub_100028378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "User declined to file a radar.", buf, 2u);
    }
  }

  else
  {
    else {
      BOOL v6 = @"Generated Wallet Bug: %@";
    }
    id v14 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", v6, *(void *)(a1 + 40)));
    else {
      __int128 v7 = @"[Please enter a brief description of what you were doing]\n\nGeneration Reason: %@";
    }
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableString stringWithFormat:]( &OBJC_CLASS___NSMutableString,  "stringWithFormat:",  v7,  *(void *)(a1 + 40)));
    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) relatedRadar]);

    if (v9)
    {
      __int128 v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) relatedRadar]);
      [v8 appendFormat:@"\nRelated Radar: %@\n", v10];
    }

    uint64_t v11 = PKCreateTapToRadarURL(v14, v8, @"Serious Bug", @"I Didn't Try", 0LL, 0LL);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[LSApplicationWorkspace defaultWorkspace](&OBJC_CLASS___LSApplicationWorkspace, "defaultWorkspace"));
    [v13 openURL:v12 configuration:0 completionHandler:0];
  }

id sub_1000285C0(uint64_t a1, void *a2)
{
  return _[a2 sendDidUpdateApplicationMessages:*(void *)(a1 + 32)];
}

id sub_10002868C(void *a1, void *a2)
{
  return _[a2 sendPassWithUniqueIdentifier:a1[4] didUpdateTiles:a1[5] forContext:a1[6]];
}

void sub_100028730(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count]) {
    sub_100028768(*(void *)(a1 + 40), *(void **)(a1 + 32));
  }
}

void sub_100028768(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (!a1)
  {
LABEL_6:

    return;
  }

  if (v3)
  {
    id v5 = PDDefaultQueue();
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    PDWakePassbookInBackground();

    id v7 = sub_100028B28(a1);
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ([v8 count])
    {
      __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) effectiveCatalog]);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_100028BB4;
      void v12[3] = &unk_10063A920;
      id v13 = v4;
      id v14 = v9;
      id v10 = v9;
      uint64_t v11 = objc_retainBlock(v12);
      sub_1000288A8(a1, v11, v8);
    }

    goto LABEL_6;
  }

  __break(1u);
}

void sub_1000288A8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1 && v5 && [v6 count])
  {
    __int128 v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v38 = 0u;
    id v10 = v7;
    id v11 = [v10 countByEnumeratingWithState:&v35 objects:v41 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v36;
      do
      {
        for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v36 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void **)(*((void *)&v35 + 1) + 8LL * (void)i);
          else {
            id v16 = v8;
          }
          -[NSMutableArray addObject:](v16, "addObject:", v15);
        }

        id v12 = [v10 countByEnumeratingWithState:&v35 objects:v41 count:16];
      }

      while (v12);
    }

    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    uint64_t v17 = v8;
    id v18 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v31,  v40,  16LL);
    if (v18)
    {
      id v19 = v18;
      uint64_t v20 = *(void *)v32;
      do
      {
        for (uint64_t j = 0LL; j != v19; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v32 != v20) {
            objc_enumerationMutation(v17);
          }
          v5[2](v5, *(void *)(*((void *)&v31 + 1) + 8LL * (void)j));
        }

        id v19 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v17,  "countByEnumeratingWithState:objects:count:",  &v31,  v40,  16LL);
      }

      while (v19);
    }

    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    __int128 v22 = v9;
    id v23 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v22,  "countByEnumeratingWithState:objects:count:",  &v27,  v39,  16LL);
    if (v23)
    {
      id v24 = v23;
      uint64_t v25 = *(void *)v28;
      do
      {
        for (k = 0LL; k != v24; k = (char *)k + 1)
        {
          if (*(void *)v28 != v25) {
            objc_enumerationMutation(v22);
          }
          v5[2](v5, *(void *)(*((void *)&v27 + 1) + 8LL * (void)k));
        }

        id v24 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v22,  "countByEnumeratingWithState:objects:count:",  &v27,  v39,  16LL);
      }

      while (v24);
    }
  }
}

id sub_100028B28(uint64_t a1)
{
  if (a1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&dword_1007077A0);
    if (qword_1007077A8 && [(id)qword_1007077A8 count]) {
      id v1 = [(id)qword_1007077A8 copy];
    }
    else {
      id v1 = 0LL;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&dword_1007077A0);
  }

  else
  {
    id v1 = 0LL;
  }

  return v1;
}

id sub_100028B94(void *a1, void *a2)
{
  return _[a2 sendPassAdded:a1[4] state:a1[5] catalog:a1[6]];
}

id sub_100028BA4(void *a1, void *a2)
{
  return _[a2 sendPassUpdated:a1[4] state:a1[5] catalog:a1[6]];
}

id sub_100028BB4(uint64_t a1, void *a2)
{
  return _[a2 sendDynamicStatesUpdated:*(void *)(a1 + 32) catalog:*(void *)(a1 + 40)];
}

id sub_100028BC0(uint64_t a1, void *a2)
{
  return _[a2 sendPassRemoved:*(void *)(a1 + 32) catalog:*(void *)(a1 + 40)];
}

id sub_100028BCC(void *a1, void *a2)
{
  return _[a2 sendPassRecovered:a1[4] state:a1[5] catalog:a1[6]];
}

void sub_100028BDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1 && v3)
  {
    id v5 = PDDefaultQueue();
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    PDWakePassbookInBackground();

    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v7 = sub_100028B28(a1);
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      id v10 = v9;
      uint64_t v11 = *(void *)v15;
      do
      {
        id v12 = 0LL;
        do
        {
          if (*(void *)v15 != v11) {
            objc_enumerationMutation(v8);
          }
          objc_msgSend(*(id *)(*((void *)&v14 + 1) + 8 * (void)v12), "sendCatalogChanged:", v4, (void)v14);
          id v12 = (char *)v12 + 1;
        }

        while (v10 != v12);
        id v10 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }

      while (v10);
    }

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
    [v13 postNotificationName:PKPassLibraryCatalogDidChangeNotification object:0];
  }
}

void sub_100028D3C(id a1, BOOL a2)
{
  if (!a2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Failed to update upgrade passcode policy after remove all secure element passes",  v4,  2u);
    }
  }

void sub_100028DA8(void **a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained(a1 + 7);
  sub_100028DE4(WeakRetained, a1[5], a1[6]);
}

void sub_100028DE4(id *a1, void *a2, void *a3)
{
  id v31 = a2;
  id v29 = a3;
  val = a1;
  if (a1)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v31 creditDetails]);
    __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v5 installmentPlans]);

    if ([v30 count])
    {
      __int128 v33 = (void *)objc_claimAutoreleasedReturnValue([v31 accountIdentifier]);
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v31 associatedPassUniqueID]);
      __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([a1[6] transactionSourceIdentifiersForPassUniqueIdentifier:v27]);
      __int128 v34 = (void *)objc_claimAutoreleasedReturnValue([v28 anyObject]);
      if (v34)
      {
        id v6 = (void *)objc_claimAutoreleasedReturnValue([v29 creditDetails]);
        uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v6 installmentPlans]);

        id v7 = (void *)objc_claimAutoreleasedReturnValue([v26 allObjects]);
        __int128 v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "pk_indexDictionaryByApplyingBlock:", &stru_10063A9A8));

        objc_initWeak(&location, a1);
        __int128 v47 = 0u;
        __int128 v45 = 0u;
        __int128 v46 = 0u;
        __int128 v44 = 0u;
        obuint64_t j = v30;
        id v8 = [obj countByEnumeratingWithState:&v44 objects:v53 count:16];
        if (v8)
        {
          uint64_t v36 = *(void *)v45;
          do
          {
            id v38 = v8;
            for (uint64_t i = 0LL; i != v38; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v45 != v36) {
                objc_enumerationMutation(obj);
              }
              id v10 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)i);
              uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "identifier", v26));
              id v12 = (void *)objc_claimAutoreleasedReturnValue([v37 objectForKey:v11]);
              uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v10 payments]);
              __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v12 payments]);
              if ([v14 count])
              {
                __int128 v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "pk_indexDictionaryByApplyingBlock:", &stru_10063A9E8));
                v42[0] = _NSConcreteStackBlock;
                v42[1] = 3221225472LL;
                v42[2] = sub_100029334;
                v42[3] = &unk_10063AA10;
                id v16 = v15;
                id v43 = v16;
                id v17 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "pk_objectsPassingTest:", v42));
              }

              else
              {
                uint64_t Object = PKLogFacilityTypeGetObject(14LL);
                id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
                if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 138412290;
                  id v50 = v11;
                  _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Updating all payment transactions for installment plan %@",  buf,  0xCu);
                }

                id v17 = v13;
              }

              id v20 = [v17 count];
              uint64_t v21 = PKLogFacilityTypeGetObject(14LL);
              __int128 v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
              BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
              if (v20)
              {
                if (v23)
                {
                  *(_DWORD *)buf = 134218242;
                  id v50 = v20;
                  __int16 v51 = 2112;
                  uint64_t v52 = v11;
                  _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Creating or updating %ld payment transactions for installment plan %@",  buf,  0x16u);
                }

                id v24 = val[6];
                v39[0] = _NSConcreteStackBlock;
                v39[1] = 3221225472LL;
                v39[2] = sub_100029408;
                v39[3] = &unk_10063AA38;
                objc_copyWeak(&v41, &location);
                id v40 = v34;
                [v24 insertOrUpdateTransactionsForInstallmentPayments:v17 installmentPlan:v10 accountIdentifier:v33 transactionSourceId entifier:v40 transactionProcessingBlock:v39];

                objc_destroyWeak(&v41);
              }

              else
              {
                if (v23)
                {
                  *(_DWORD *)buf = 138412290;
                  id v50 = v11;
                  _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "No changes to payment transactions for installment plan %@",  buf,  0xCu);
                }
              }
            }

            id v8 = [obj countByEnumeratingWithState:&v44 objects:v53 count:16];
          }

          while (v8);
        }

        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([val[6] installmentPlanTransactionsForTransactionSourceIdentifiers:v28]);
        [val[6] updateSuppressBehavior:1 forPaymentTransactions:v25 sourceIdentifier:v34];

        objc_destroyWeak(&location);
      }
    }
  }
}

void sub_1000292D0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, id location)
{
}

NSCopying *__cdecl sub_100029324(id a1, PKCreditInstallmentPlan *a2)
{
  return (NSCopying *)-[PKCreditInstallmentPlan identifier](a2, "identifier");
}

NSCopying *__cdecl sub_10002932C(id a1, PKCreditInstallmentPlanPayment *a2)
{
  return (NSCopying *)-[PKCreditInstallmentPlanPayment identifier](a2, "identifier");
}

uint64_t sub_100029334(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKey:v5]);

  if (v6)
  {
    id v7 = [v6 copy];
    id v8 = [v3 copy];
    [v7 setLineItems:0];
    [v7 setStatement:0];
    [v8 setLineItems:0];
    [v8 setStatement:0];
    uint64_t v9 = PKEqualObjects(v7, v8) ^ 1;
  }

  else
  {
    uint64_t v9 = 1LL;
  }

  return v9;
}

void sub_100029408(uint64_t a1, void *a2)
{
  id v3 = (id *)(a1 + 40);
  id v4 = a2;
  id WeakRetained = (id *)objc_loadWeakRetained(v3);
  [WeakRetained[10] processPaymentTransaction:v4 forTransactionSourceIdentifier:*(void *)(a1 + 32)];
}

uint64_t sub_100029464(uint64_t result)
{
  if (*(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL))
  {
    id v1 = (unsigned __int8 *)(*(void *)(result + 32) + 11LL);
    while (1)
    {
      int v2 = __ldaxr(v1);
      if (v2 != 1) {
        break;
      }
      if (!__stlxr(2u, v1))
      {
        *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = 0;
        return result;
      }
    }

    __clrex();
    *(_BYTE *)(*(void *)(*(void *)(result + 40) + 8LL) + 24LL) = v2 != 2;
  }

  return result;
}

void sub_1000294D0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 280))
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(v1 + 32) catalogOfRecord]);
    uint64_t v4 = *(void *)(a1 + 32);
    id v5 = *(void **)(v4 + 280);
    *(void *)(v4 + 280) = v3;
  }

void sub_10002951C(id a1, NSSet *a2, NSError *a3)
{
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  obuint64_t j = a2;
  id v3 = -[NSSet countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v20,  v24,  16LL);
  if (v3)
  {
    id v4 = v3;
    uint64_t v19 = *(void *)v21;
    uint64_t v5 = PKPassdBundleIdentifier;
    id v6 = &OBJC_CLASS___PKAccountWebServiceRequestPhysicalCardRequest_ptr;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v21 != v19) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v20 + 1) + 8LL * (void)i);
        id v9 = objc_alloc((Class)v6[162]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 ownershipTokenIdentifier]);
        id v11 = [v9 initWithIdentifier:v10 accessGroup:v5 serviceName:@"com.apple.passd.pass-ownership-token" type:1 invisible:0];

        id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 objectForKey:kSecValueData]);
        if (v12)
        {
          [v11 resetKeychainItem];
          uint64_t v13 = v6;
          id v14 = objc_alloc((Class)v6[162]);
          __int128 v15 = (void *)objc_claimAutoreleasedReturnValue([v8 ownershipTokenIdentifier]);
          id v16 = [v14 initWithIdentifier:v15 accessGroup:v5 serviceName:@"com.apple.passd.pass-ownership-token" type:1 invisible:1];

          id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 objectForKey:kSecValueData]);
          if (!v17) {
            [v16 setObject:v12 forKey:kSecValueData];
          }

          id v6 = v13;
        }
      }

      id v4 = -[NSSet countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v20,  v24,  16LL);
    }

    while (v4);
  }
}

void sub_10002971C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  switch(a2)
  {
    case 0LL:
      id v4 = 0LL;
      uint64_t v5 = @"Invalid SE-SEP Pairing";
      id v6 = @"invalid-pairing";
      goto LABEL_17;
    case 1LL:
      if (PKIsMac(a1, a2))
      {
        id v7 = objc_alloc(&OBJC_CLASS___PDWalletUserNotification);
        uint64_t v8 = PKLocalizedPaymentString(@"SECURE_ELEMENT_ACCESS_VIOLATION_PASSCODE_MAC");
        id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        id v4 = -[PDGenericUserNotification initWithMessage:](v7, "initWithMessage:", v9);
      }

      else
      {
        id v4 = 0LL;
      }

      uint64_t v5 = @"Passcode Disabled";
      id v6 = @"passcode-disabled";
      goto LABEL_17;
    case 2LL:
      uint64_t v11 = PKLocalizedPaymentString(@"SECURE_ELEMENT_ACCESS_VIOLATION_OWNERSHIP_LOST_MESSAGE");
      id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      if ((a3 & 0xFFFFFFFFFFFFFFFELL) != 4) {
        goto LABEL_15;
      }
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 72) ownerUserUUID]);
      uint64_t v14 = PKUserFullNameForUserUUID();
      uint64_t v15 = objc_claimAutoreleasedReturnValue(v14);
      if (v15)
      {
        id v16 = (void *)v15;
        uint64_t v17 = PKLocalizedPaymentString( @"SECURE_ELEMENT_ACCESS_VIOLATION_OWNERSHIP_LOST_TITLE_USER_FORMAT",  @"%@",  v15);
        id v18 = (void *)objc_claimAutoreleasedReturnValue(v17);

        if (v18) {
          goto LABEL_16;
        }
      }

      else
      {
      }

void sub_100029A2C(uint64_t a1, char a2)
{
  id v4 = PDDefaultQueue();
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  id v9[2] = sub_100029AD4;
  v9[3] = &unk_10063AAF0;
  char v13 = a2;
  id v6 = *(id *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v10 = v6;
  uint64_t v12 = v7;
  id v11 = v8;
  dispatch_async(v5, v9);
}

uint64_t sub_100029AD4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56)) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Secure Element access is unknown!", v5, 2u);
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, 0LL);
  }
  return result;
}

void sub_100029B7C(uint64_t a1, uint64_t a2)
{
  id v4 = PDDefaultQueue();
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100029C28;
  block[3] = &unk_10063AB40;
  uint64_t v9 = a2;
  id v7 = *(id *)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  __int128 v10 = *(_OWORD *)(a1 + 48);
  dispatch_async(v5, block);
}

uint64_t sub_100029C28(void *a1)
{
  uint64_t v2 = a1[6];
  if (v2 != 2)
  {
    if (v2 == 1)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      LOWORD(v13) = 0;
      uint64_t v5 = "Secure Element is paired.";
      id v6 = v4;
      uint32_t v7 = 2;
    }

    else
    {
      uint64_t v11 = PKLogFacilityTypeGetObject(6LL);
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_15;
      }
      uint64_t v12 = @"unknown";
      if (v2 == 3) {
        uint64_t v12 = @"PKSecureElementPairingStateRestricted";
      }
      if (!v2) {
        uint64_t v12 = @"PKSecureElementPairingStateUnknown";
      }
      int v13 = 138543362;
      uint64_t v14 = v12;
      uint64_t v5 = "Secure Element is %{public}@ - assuming paired.";
      id v6 = v4;
      uint32_t v7 = 12;
    }

    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v13, v7);
LABEL_15:

    uint64_t result = a1[4];
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1LL);
    }
    return result;
  }

  uint64_t v8 = PKLogFacilityTypeGetObject(6LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Secure Element is unpaired.",  (uint8_t *)&v13,  2u);
  }

  return (*(uint64_t (**)(void))(a1[5] + 16LL))();
}

uint64_t sub_100029DBC(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Secure Element is not owned by current user - aborting validation of access policies.",  v5,  2u);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1LL);
  }
  return result;
}

void sub_100029E3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = PDDefaultQueue();
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100029ED4;
  v8[3] = &unk_1006392B0;
  uint64_t v6 = *(void *)(a1 + 32);
  id v9 = v3;
  uint64_t v10 = v6;
  id v7 = v3;
  dispatch_async(v5, v8);
}

void sub_100029ED4(uint64_t a1)
{
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (!v3)
  {
LABEL_13:

    return;
  }

  id v4 = v3;
  uint64_t v5 = *(void *)v17;
LABEL_3:
  uint64_t v6 = 0LL;
  while (1)
  {
    if (*(void *)v17 != v5) {
      objc_enumerationMutation(v2);
    }
    id v7 = *(void **)(*((void *)&v16 + 1) + 8 * v6);
    id v8 = [v7 lifecycleState];
    unsigned __int8 v9 = [v7 isLocked];
    if ((v9 & 1) != 0)
    {

LABEL_21:
      uint64_t v12 = *(void *)(a1 + 40);
      int v13 = *(void **)(v12 + 72);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_10002A050;
      v14[3] = &unk_10063AB90;
      void v14[4] = v12;
      unsigned __int8 v15 = v9;
      [v13 pairingStateWithCompletion:v14];
      return;
    }

    if (v8 == (id)15 || v8 == (id)23) {
      break;
    }
    if (v4 == (id)++v6)
    {
      id v4 = [v2 countByEnumeratingWithState:&v16 objects:v20 count:16];
      if (v4) {
        goto LABEL_3;
      }
      goto LABEL_13;
    }
  }

  if ((v9 & 1) != 0) {
    goto LABEL_21;
  }
  if (v8 == (id)15 || v8 == (id)23) {
    goto LABEL_21;
  }
}

void sub_10002A050(uint64_t a1, uint64_t a2)
{
  id v4 = PDDefaultQueue();
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10002A0D4;
  block[3] = &unk_100639238;
  void block[4] = *(void *)(a1 + 32);
  void block[5] = a2;
  char v7 = *(_BYTE *)(a1 + 40);
  dispatch_async(v5, block);
}

void *sub_10002A0D4(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5];
  if (v2 == 2)
  {
    if (!*((_BYTE *)result + 48)) {
      return result;
    }
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "WARNING: orphaned locked applets detected in unpaired SE...performing temporary workaround.",  v7,  2u);
    }

    uint64_t v5 = 1LL;
  }

  else
  {
    if (v2 != 1) {
      return result;
    }
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100441440();
    }
    uint64_t v5 = 0LL;
  }

  return [*(id *)(v1[4] + 72) markAllAppletsForDeletionWithExternalAuthorization:0 obliterate:v5 completion:0];
}

double sub_10002A1B0(uint64_t a1, void *a2)
{
  if (!a1) {
    return 0.0;
  }
  id v2 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 objectForKey:v2]);

  if (v4 && (uint64_t v6 = objc_opt_class(&OBJC_CLASS___NSDate, v5), (objc_opt_isKindOfClass(v4, v6) & 1) != 0))
  {
    char v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v7 timeIntervalSinceDate:v4];
    double v9 = v8;
  }

  else
  {
    double v9 = 1.79769313e308;
  }

  return v9;
}

void sub_10002A270(uint64_t a1)
{
  if (a1)
  {
    id v1 = [*(id *)(a1 + 48) numberOfRealPasses];
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      id v10 = v1;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Aggregate dictionary pass count log: %lu",  buf,  0xCu);
    }

    uint64_t v4 = PKAggDKeyPassesCount;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  v1,  @"passcount"));
    double v8 = v5;
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v8,  &v7,  1LL));
    PKAnalyticsSendEvent(v4, v6);
  }

void sub_10002A390(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v12 = a2;
  if ((PKPassSupportsSyncing(a3, a4, a5) & 1) == 0)
  {
    double v9 = *(void **)(a1 + 32);
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v12 stringByAppendingPathExtension:PKRawPassExtension]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 URLByAppendingPathComponent:v10 isDirectory:1]);

    PKExcludeFileURLFromBackup(v11);
    ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
  }
}

void sub_10002A444(id a1, NSString *a2, unint64_t a3, BOOL *a4)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKHomeDirectoryPath(v4);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  id v8 = (id)objc_claimAutoreleasedReturnValue([v6 stringByAppendingPathComponent:v4]);

  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  [v7 removeItemAtPath:v8 error:0];
}

void sub_10002A4B8(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v10 = v5;
    id v6 = [*(id *)(a1 + 32) indexOfObject:v5];
    id v5 = v10;
    if (v6 != (id)0x7FFFFFFFFFFFFFFFLL && v6 != (id)a2)
    {
      id v8 = v6;
      id v9 = [*(id *)(a1 + 32) count];
      id v5 = v10;
      if ((a2 & 0x8000000000000000LL) == 0 && (unint64_t)v9 > a2)
      {
        [*(id *)(a1 + 32) removeObjectAtIndex:v8];
        [*(id *)(a1 + 32) insertObject:v10 atIndex:a2];
        id v5 = v10;
      }
    }
  }
}

id sub_10002A5E4(uint64_t a1, void *a2)
{
  return _[a2 sendDidReceivePendingProvisioningUpdate:*(void *)(a1 + 32)];
}

uint64_t sub_10002A820(uint64_t result)
{
  if (result) {
    return *(void *)(result + 576);
  }
  return result;
}

Class sub_10002AB80()
{
  if (qword_100707900 != -1) {
    dispatch_once(&qword_100707900, &stru_10063AC68);
  }
  Class result = objc_getClass("BFFSettingsManager");
  qword_1007078F0 = (uint64_t)result;
  off_1007037A8 = (uint64_t (*)())sub_10002ABDC;
  return result;
}

id sub_10002ABDC()
{
  return (id)qword_1007078F0;
}

void sub_10002ABE8(id a1)
{
  qword_1007078F8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/SetupAssistant.framework/SetupAssistant", 2);
}

uint64_t sub_10002AC10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_10002AC1C()
{
  if (qword_100707900 != -1) {
    dispatch_once(&qword_100707900, &stru_10063AC68);
  }
  uint64_t result = *(void *)dlsym((void *)qword_1007078F8, "BFFBuddyDidRestoreSafeHavenNotification");
  qword_100707908 = result;
  off_1007037B0 = sub_10002AC84;
  return result;
}

uint64_t sub_10002AC84()
{
  return qword_100707908;
}

void sub_10002AC90( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

  ;
}

void sub_10002ACB0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

void sub_10002ACC0( void *a1, os_log_s *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
}

  ;
}

void sub_10002B4F8(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = PKSharedWebServiceContextPath();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  [v2 archiveAtPath:v4];

  [*(id *)(*(void *)(a1 + 40) + 16) noteWebServiceDidChange];
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
  [v5 postNotificationName:PDSharedPaymentWebServiceDidChangeNotification object:0];
}

void sub_10002B5F8(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = PKBackgroundWebServiceContextPath();
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  [v1 archiveAtPath:v3];
}

void sub_10002BEA0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithUTF8String:]( &OBJC_CLASS___NSString,  "stringWithUTF8String:",  kNSURLSessionLaunchOnDemandNotificationName));
  PDXPCEventStreamRegisterObserver(v2, v3, *(void **)(*(void *)(a1 + 32) + 128LL));

  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = PDDefaultQueue();
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  PDScheduledActivityClientRegister(@"PDPaymentWebServiceCoordinator", v4, v6);
}

id sub_10002C0A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateWebServiceConfigurationWithCompletion:*(void *)(a1 + 40)];
}

void sub_10002C15C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
    int v9 = 138412290;
    id v10 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Configure payment session complete with error: %@",  (uint8_t *)&v9,  0xCu);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(void))(v8 + 16))();
  }
}

void sub_10002C2F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v4 localizedDescription]);
    int v9 = 138412290;
    id v10 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Configure payment session complete with error: %@",  (uint8_t *)&v9,  0xCu);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(void))(v8 + 16))();
  }
}

void sub_10002C760(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebService]);
    (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
  }

void sub_10002C85C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v37 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Deleting shared webservice… (reason: '%@')",  buf,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedWebService]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 sessionConfiguration]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 URLCache]);
  [v7 removeAllCachedResponses];

  [*(id *)(*(void *)(a1 + 40) + 112) clearPaymentSetupFeatures];
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  id v8 = *(id *)(*(void *)(a1 + 40) + 168LL);
  id v9 = [v8 countByEnumeratingWithState:&v31 objects:v35 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v32;
    do
    {
      id v12 = 0LL;
      do
      {
        if (*(void *)v32 != v11) {
          objc_enumerationMutation(v8);
        }
        [*(id *)(*((void *)&v31 + 1) + 8 * (void)v12) setCancelled:1];
        id v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v31 objects:v35 count:16];
    }

    while (v10);
  }

  [*(id *)(a1 + 40) unscheduleDeviceCheckIn];
  [*(id *)(a1 + 40) unscheduleDeviceUpgradeTaskActivity];
  [v5 invalidateBackgroundSession];
  int v13 = (void *)objc_claimAutoreleasedReturnValue([v5 context]);
  unsigned int v14 = [v13 isRegistered];

  if (v14) {
    [v5 diagnosticSessionWithReason:*(void *)(a1 + 32) sessionHandler:&stru_10063ACF8];
  }
  else {
    [v5 invalidate];
  }
  unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v16 = PKSharedWebServiceContextPath();
  __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  [v15 removeItemAtPath:v17 error:0];

  __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
  uint64_t v19 = PKBackgroundWebServiceContextPath();
  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  [v18 removeItemAtPath:v20 error:0];

  __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedWebService]);
  if (v21)
  {
    objc_msgSend(*(id *)(*(void *)(a1 + 40) + 8), "unregisterConsumer:");
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Recreating shared webservice…", buf, 2u);
    }

    uint64_t v22 = -[PDPaymentWebServiceTargetDevice initWithDataSource:]( objc_alloc(&OBJC_CLASS___PDPaymentWebServiceTargetDevice),  "initWithDataSource:",  *(void *)(a1 + 40));
    uint64_t v23 = PKSharedWebServiceContextPath();
    id v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( +[PKPaymentWebServiceContext contextWithArchive:]( &OBJC_CLASS___PKPaymentWebServiceContext,  "contextWithArchive:",  v24));

    uint64_t v26 = -[PKPaymentWebService initWithContext:targetDevice:archiver:tapToRadarDelegate:]( objc_alloc(&OBJC_CLASS___PKPaymentWebService),  "initWithContext:targetDevice:archiver:tapToRadarDelegate:",  v25,  v22,  *(void *)(*(void *)(a1 + 40) + 48LL),  *(void *)(*(void *)(a1 + 40) + 184LL));
    -[PKPaymentWebService configurePaymentServiceWithCompletion:](v26, "configurePaymentServiceWithCompletion:", 0LL);
    [*(id *)(a1 + 40) setSharedWebService:v26];
    id v27 = PDDefaultQueue();
    uint64_t v28 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v27);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10002CCC8;
    block[3] = &unk_100639300;
    void block[4] = *(void *)(a1 + 40);
    dispatch_async(v28, block);
  }

  +[PKAccountAttestationRequest removeLocalAccountAttesationData]( &OBJC_CLASS___PKAccountAttestationRequest,  "removeLocalAccountAttesationData");
  [*(id *)(a1 + 40) noteWebServiceDidChange];
  uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDistributedNotificationCenter defaultCenter]( &OBJC_CLASS___NSDistributedNotificationCenter,  "defaultCenter"));
  [v29 postNotificationName:PDSharedPaymentWebServiceDidChangeNotification object:0];
}

void sub_10002CC30(id a1, PKWebService *a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10002CCA0;
  v3[3] = &unk_10063AD20;
  uint64_t v4 = a2;
  id v2 = v4;
  -[PKWebService unregisterDeviceWithCompletion:](v2, "unregisterDeviceWithCompletion:", v3);
}

id sub_10002CCA0(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

id sub_10002CCC8(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "registerConsumer:");
}

void sub_10002CEB4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedWebService]);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  id v9[2] = sub_10002CF84;
  v9[3] = &unk_10063AD48;
  id v6 = *(id *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v10 = v6;
  uint64_t v11 = v7;
  id v12 = v2;
  id v13 = *(id *)(a1 + 72);
  id v8 = v2;
  [v8 submitVerificationCode:v3 verificationData:v4 forPass:v5 completion:v9];
}

void sub_10002CF84(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(37LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (a2 == 1)
  {
    if (v11)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Verification code accepted", buf, 2u);
    }

    if (v7)
    {
      uint64_t v12 = a1[5];
      id v13 = (void *)a1[6];
      unsigned int v14 = *(dispatch_queue_s **)(v12 + 128);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10002D0EC;
      block[3] = &unk_100639350;
      void block[4] = v12;
      id v19 = v13;
      id v20 = v7;
      dispatch_async(v14, block);
    }

    uint64_t v15 = a1[7];
    if (v15)
    {
      uint64_t v16 = *(void (**)(void))(v15 + 16);
LABEL_12:
      v16();
    }
  }

  else
  {
    if (v11)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Verification code FAILED", buf, 2u);
    }

    uint64_t v17 = a1[7];
    if (v17)
    {
      uint64_t v16 = *(void (**)(void))(v17 + 16);
      goto LABEL_12;
    }
  }
}

void sub_10002D0EC(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10002D174;
  v3[3] = &unk_100639350;
  id v2 = *(void **)(a1 + 40);
  id v4 = *(id *)(a1 + 32);
  id v5 = v2;
  id v6 = *(id *)(a1 + 48);
  objc_msgSend(v4, "_queue_setupBackgroundWebServiceWithCompletion:", v3);
}

void sub_10002D174(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10002D200;
  block[3] = &unk_100639350;
  id v7 = v2;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 32);
  id v8 = v4;
  uint64_t v9 = v5;
  dispatch_async(v3, block);
}

id sub_10002D200(uint64_t a1)
{
  return _[*(id *)(a1 + 32) backgroundDownloadRemotePassAssets:*(void *)(a1 + 40) cloudStoreCoordinatorDelegate:*(void *)(*(void *)(a1 + 48) + 88)];
}

void sub_10002D270(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebService]);
  uint64_t v3 = v2;
  if (*(void *)(*(void *)(a1 + 32) + 120LL)
    || (id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 context]),
        uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 secureElementID]),
        unsigned __int8 v6 = +[PKSecureElementConsistencyChecker isCheckingConsistencyForSecureElementID:]( &OBJC_CLASS___PKSecureElementConsistencyChecker,  "isCheckingConsistencyForSecureElementID:",  v5),  v5,  v4,  (v6 & 1) != 0))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Consistency check already in progress...",  v15,  2u);
    }
  }

  else
  {
    uint64_t v9 = -[PKSecureElementConsistencyChecker initWithPaymentWebService:delegate:cloudStoreCoordinatorDelegate:]( objc_alloc(&OBJC_CLASS___PKSecureElementConsistencyChecker),  "initWithPaymentWebService:delegate:cloudStoreCoordinatorDelegate:",  v3,  *(void *)(a1 + 32),  *(void *)(*(void *)(a1 + 32) + 88LL));
    uint64_t v10 = *(void *)(a1 + 32);
    BOOL v11 = *(void **)(v10 + 120);
    *(void *)(v10 + 120) = v9;

    uint64_t v12 = (void *)PDOSTransactionCreate("PDPaymentWebServiceCoordinator.consistency_check");
    uint64_t v13 = *(void *)(a1 + 32);
    unsigned int v14 = *(void **)(v13 + 120);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10002D3D8;
    v16[3] = &unk_1006392B0;
    v16[4] = v13;
    id v17 = v12;
    id v8 = v12;
    [v14 startWithCompletion:v16];
  }
}

void sub_10002D3D8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(v1 + 120);
  *(void *)(v1 + 120) = 0LL;
}

id sub_10002D440(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10002D494;
  v3[3] = &unk_100639300;
  void v3[4] = v1;
  return objc_msgSend(v1, "_queue_setupBackgroundWebServiceWithCompletion:", v3);
}

void sub_10002D494(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(dispatch_queue_s **)(v1 + 128);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10002D4EC;
  block[3] = &unk_100639300;
  void block[4] = v1;
  dispatch_async(v2, block);
}

void sub_10002D4EC(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebService]);
  [v1 backgroundDownloadPassesSinceLastUpdatedTag:0];
}

void sub_10002D5B4(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) merchant]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 identifier]);
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([v5 hexEncoding]);
    int v12 = 138412290;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Processing VAS Transaction for Merchant ID: %@",  (uint8_t *)&v12,  0xCu);
  }

  if (PKNetworkConnectivityAvailable([*(id *)(a1 + 40) connect]))
  {
    [*(id *)(a1 + 40) _processValueAddedServiceTransaction:*(void *)(a1 + 32)];
  }

  else
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    id v8 = (void *)v7;
    if (v7) {
      uint64_t v9 = (const __CFString *)v7;
    }
    else {
      uint64_t v9 = &stru_100662310;
    }
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([@"VASTransactionProcessor." stringByAppendingString:v9]);

    BOOL v11 = (void *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  0LL));
    [v11 setRequireNetworkConnectivity:1];
    PDScheduledActivityRegister(@"PDPaymentWebServiceCoordinator", v10, v11);
  }

void sub_10002D8D4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 192) containsObject:*(void *)(a1 + 40)])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Ignoring receipt download because download is already in progress",  v12,  2u);
    }
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = objc_alloc(&OBJC_CLASS___PKTransactionReceiptAuthorizationRequest);
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) receiptProviderIdentifier]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) receiptIdentifier]);
    if (v4)
    {
      uint64_t v3 = (os_log_s *)objc_msgSend( v5,  "initWithReceiptServiceIdentifier:receiptIdentifier:cardNumberSuffix:featureIdentifier:",  v6,  v7,  *(void *)(a1 + 48),  objc_msgSend(*(id *)(a1 + 56), "featureIdentifier"));
    }

    else
    {
      uint64_t v8 = PKCurrentUserAltDSID();
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      uint64_t v3 = (os_log_s *)objc_msgSend( v5,  "initWithReceiptServiceIdentifier:receiptIdentifier:altDSID:featureIdentifier:",  v6,  v7,  v9,  objc_msgSend(*(id *)(a1 + 56), "featureIdentifier"));
    }

    if (v3)
    {
      [*(id *)(*(void *)(a1 + 32) + 192) addObject:*(void *)(a1 + 40)];
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebService]);
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472LL;
      v13[2] = sub_10002DAB0;
      v13[3] = &unk_10063AE88;
      void v13[4] = *(void *)(a1 + 32);
      id v14 = *(id *)(a1 + 64);
      id v15 = *(id *)(a1 + 56);
      id v16 = v10;
      id v17 = *(id *)(a1 + 40);
      id v11 = v10;
      [v11 transactionReceiptAuthorizationWithRequest:v3 completion:v13];
    }
  }
}

void sub_10002DAB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10002DBAC;
  block[3] = &unk_10063AE60;
  id v14 = v5;
  id v15 = v7;
  id v16 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  uint64_t v10 = *(void *)(a1 + 32);
  id v17 = v9;
  uint64_t v18 = v10;
  id v19 = *(id *)(a1 + 64);
  id v20 = v6;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v8, block);
}

void sub_10002DBAC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) authorizationToken]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) signature]);
  uint64_t v4 = (void *)v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 80);
      *(_DWORD *)buf = 138412290;
      uint64_t v19 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Receipt authorization token error: %@",  buf,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 64) + 192) removeObject:*(void *)(a1 + 72)];
  }

  else
  {
    id v9 = objc_alloc(&OBJC_CLASS___PKTransactionReceiptRequest);
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) receiptIdentifier]);
    id v12 = [v9 initWithReceiptProviderURL:v10 authorizationToken:v2 signature:v4 receiptIdentifier:v11];

    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) conversationIdentifier]);
    [v12 setConversationIdentifier:v13];

    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    v15[2] = sub_10002DD78;
    v15[3] = &unk_10063AE38;
    id v14 = *(void **)(a1 + 56);
    void v15[4] = *(void *)(a1 + 64);
    id v16 = *(id *)(a1 + 72);
    id v17 = *(id *)(a1 + 48);
    [v14 transactionReceiptWithRequest:v12 completion:v15];
  }
}

void sub_10002DD78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10002DE4C;
  block[3] = &unk_10063AE10;
  id v14 = v5;
  id v9 = v7;
  uint64_t v10 = *(void *)(a1 + 32);
  id v15 = v9;
  uint64_t v16 = v10;
  id v17 = *(id *)(a1 + 48);
  id v18 = v6;
  id v11 = v6;
  id v12 = v5;
  dispatch_async(v8, block);
}

void sub_10002DE4C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 uniqueID]);

    if (!v3) {
      [*(id *)(a1 + 32) setUniqueID:*(void *)(a1 + 40)];
    }
    uint64_t v4 = *(void *)(a1 + 48);
    id v5 = *(void **)(v4 + 96);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10002DFB4;
    v10[3] = &unk_10063ADE8;
    void v10[4] = v4;
    uint64_t v6 = *(void *)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 32);
    id v13 = *(id *)(a1 + 56);
    [v5 writeTransactionReceipt:v6 completion:v10];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 64);
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error downloading receipt: %@", buf, 0xCu);
    }

    [*(id *)(*(void *)(a1 + 48) + 192) removeObject:*(void *)(a1 + 40)];
  }

void sub_10002DFB4(uint64_t a1, char a2)
{
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10002E064;
  block[3] = &unk_10063ADC0;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  uint64_t v6 = *(dispatch_queue_s **)(v4 + 128);
  block[1] = 3221225472LL;
  void block[4] = v4;
  id v8 = v5;
  char v11 = a2;
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  dispatch_async(v6, block);
}

void sub_10002E064(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    id v2 = *(void **)(a1 + 32);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472LL;
    v3[2] = sub_10002E104;
    v3[3] = &unk_10063AD98;
    void v3[4] = v2;
    id v4 = *(id *)(a1 + 48);
    id v5 = *(id *)(a1 + 56);
    [v2 _accessObserversWithHandler:v3];
  }

void sub_10002E104(uint64_t a1, void *a2)
{
  id v6 = a2;
  if ((objc_opt_respondsToSelector( v6,  "paymentWebServiceCoordinator:didDownloadTransactionReceipt:forTransactionWithIdentifier:") & 1) != 0)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) identifier]);
    [v6 paymentWebServiceCoordinator:v3 didDownloadTransactionReceipt:v4 forTransactionWithIdentifier:v5];
  }
}

id sub_10002E204(uint64_t a1)
{
  return _[*(id *)(a1 + 32) _paymentHardwareStatusWithType:*(void *)(a1 + 48) completion:*(void *)(a1 + 40)];
}

void sub_10002E560(uint64_t a1)
{
  id v4 = 0LL;
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[PKAccountAttestationRequest defaultAnonymizationSaltWithError:]( &OBJC_CLASS___PKAccountAttestationRequest,  "defaultAnonymizationSaltWithError:",  &v4));
  id v3 = v4;
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10002E674(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[PKAccountAttestationRequest setDefaultAnonymizationSalt:]( &OBJC_CLASS___PKAccountAttestationRequest,  "setDefaultAnonymizationSalt:",  *(void *)(a1 + 32)));
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3)
  {
    id v4 = v2;
    (*(void (**)(void))(v3 + 16))();
    id v2 = v4;
  }
}

void sub_10002E770(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebService]);
  [v2 registerCredentialWithRequest:*(void *)(a1 + 40) withCompletion:*(void *)(a1 + 48)];
}

void sub_10002E82C(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_10002E89C;
  v2[3] = &unk_1006392B0;
  id v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  objc_msgSend(v3, "_queue_setupBackgroundWebServiceWithCompletion:", v2);
}

void sub_10002E89C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(v1 + 128);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10002E910;
  v4[3] = &unk_1006392B0;
  v4[4] = v1;
  id v5 = v2;
  dispatch_async(v3, v4);
}

void sub_10002E910(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebService]);
  [v2 backgroundRegisterCredentialWithRequest:*(void *)(a1 + 40)];
}

void sub_10002EA60(id *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = a1[4];
    id v5 = (void *)objc_claimAutoreleasedReturnValue([a1[5] description]);
    *(_DWORD *)buf = 138412546;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&buf[12] = 2112;
    *(void *)&buf[14] = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Received push for push topic: %@ userInfo:%@",  buf,  0x16u);
  }

  *(void *)buf = 0LL;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2020000000LL;
  char v17 = 1;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[6] sharedWebServiceContext]);
  uint64_t v7 = v6;
  if (v6)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 regions]);
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472LL;
    v11[2] = sub_10002EC48;
    void v11[3] = &unk_10063AF98;
    id v12 = a1[4];
    uint64_t v15 = buf;
    int8x16_t v10 = *(int8x16_t *)(a1 + 5);
    id v9 = (id)v10.i64[0];
    int8x16_t v13 = vextq_s8(v10, v10, 8uLL);
    id v14 = v7;
    [v8 enumerateKeysAndObjectsUsingBlock:v11];
  }

  if (*(_BYTE *)(*(void *)&buf[8] + 24LL)) {
    [a1[6] _fetchPassesIfNecessaryForPushTopic:a1[4]];
  }

  _Block_object_dispose(buf, 8);
}

void sub_10002EC28(_Unwind_Exception *a1)
{
}

void sub_10002EC48(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 userNotificationPushTopic]);
  unsigned int v10 = [v9 isEqualToString:*(void *)(a1 + 32)];

  if (v10)
  {
    *a4 = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
    [*(id *)(a1 + 40) _performNotificationActionWithUserInfo:*(void *)(a1 + 48)];
    goto LABEL_12;
  }

  char v11 = (void *)objc_claimAutoreleasedReturnValue([v8 deviceCheckInPushTopic]);
  unsigned int v12 = [v11 isEqualToString:*(void *)(a1 + 32)];

  if (v12)
  {
    *a4 = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "passd requesting device check in from push",  buf,  2u);
    }

    objc_msgSend(*(id *)(a1 + 40), "_queue_cancelAllDeviceCheckInTasks");
    [*(id *)(a1 + 56) atomicallyUpdateRegionWithIdentifier:v7 updateBlock:&stru_10063AEF0];
    [*(id *)(*(void *)(a1 + 40) + 48) archiveContext:*(void *)(a1 + 56)];
    uint64_t v15 = objc_alloc_init(&OBJC_CLASS___PDDeviceCheckInTask);
    objc_msgSend(*(id *)(a1 + 40), "_queue_enqueueDeviceCheckInTask:", v15);
LABEL_11:

    goto LABEL_12;
  }

  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v8 productsPushTopic]);
  unsigned int v17 = [v16 isEqualToString:*(void *)(a1 + 32)];

  if (v17)
  {
    *a4 = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
    uint64_t v18 = PKLogFacilityTypeGetObject(6LL);
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Product update push received", v35, 2u);
    }

    [*(id *)(*(void *)(a1 + 40) + 112) markProductsDirty];
    uint64_t v15 = (PDDeviceCheckInTask *)objc_alloc_init(&OBJC_CLASS___PKPaymentAvailableProductsRequest);
    -[PDDeviceCheckInTask addDiagnosticReason:](v15, "addDiagnosticReason:", @"passd - push");
    [*(id *)(*(void *)(a1 + 40) + 112) handleWebServiceRequest:v15 completion:&stru_10063AF30];
    goto LABEL_11;
  }

  id v20 = (void *)objc_claimAutoreleasedReturnValue([v8 transactionZonePushTopic]);
  unsigned int v21 = [v20 isEqualToString:*(void *)(a1 + 32)];

  if (v21)
  {
    *a4 = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
    uint64_t v22 = PKLogFacilityTypeGetObject(6LL);
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v34 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "Transaction zone recreate push received",  v34,  2u);
    }

    objc_msgSend(*(id *)(a1 + 40), "_queue_recreateCloudStoreTransactionZoneWithCompletion:", &stru_10063AF70);
    goto LABEL_12;
  }

  id v24 = (void *)objc_claimAutoreleasedReturnValue([v8 provisioningTargetsPushTopic]);
  if ([v24 isEqualToString:*(void *)(a1 + 32)])
  {

LABEL_20:
    *a4 = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
    uint64_t v26 = PKLogFacilityTypeGetObject(6LL);
    id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v33 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Provisioning sharing identifiers push recieved, will attempt to provision.",  v33,  2u);
    }

    objc_msgSend(*(id *)(a1 + 40), "_queue_provisionPushProvisioningSharingIdentifiers");
    goto LABEL_12;
  }

  unsigned __int8 v25 = [*(id *)(a1 + 32) isEqualToString:@"com.apple.pay.provision"];

  if ((v25 & 1) != 0) {
    goto LABEL_20;
  }
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v8 ownershipTokensPushTopic]);
  unsigned int v29 = [v28 isEqualToString:*(void *)(a1 + 32)];

  if (v29)
  {
    *a4 = 1;
    *(_BYTE *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 24LL) = 0;
    uint64_t v30 = PKLogFacilityTypeGetObject(6LL);
    __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Ownership tokens push recieved.", v32, 2u);
    }

    objc_msgSend(*(id *)(a1 + 40), "_queue_performOwnershipTokensRequestWithUserInfo:", *(void *)(a1 + 48));
  }

PKPaymentWebServiceRegion *__cdecl sub_10002F034(id a1, PKPaymentWebServiceRegion *a2)
{
  return (PKPaymentWebServiceRegion *)-[PKPaymentWebServiceRegion regionBySettingOutstandingCheckInAction:lastDeviceCheckInBuildVersion:]( a2,  "regionBySettingOutstandingCheckInAction:lastDeviceCheckInBuildVersion:",  0LL,  0LL);
}

void sub_10002F044(id a1, PKPaymentAvailableProductsResponse *a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Finished updating products for push", v5, 2u);
  }
}

void sub_10002F0AC(id a1, BOOL a2, NSError *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Finished recreating transaction zone from push",  v5,  2u);
  }
}

void sub_10002F190(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138412290;
    uint64_t v18 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Applying push notification token: %@…",  buf,  0xCu);
  }

  if (*(void *)(a1 + 32))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedWebService]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 context]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
    unsigned __int8 v8 = [v7 isEqualToString:*(void *)(a1 + 32)];

    if ((v8 & 1) == 0)
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
        *(_DWORD *)buf = 138412290;
        uint64_t v18 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "New push token is different than current push token: %@",  buf,  0xCu);
      }

      unsigned int v10 = (void *)objc_claimAutoreleasedReturnValue([v5 context]);
      unsigned int v11 = [v10 isRegistered];

      if (v11)
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Reregistering with a new push token…",  buf,  2u);
        }

        [v6 setNextPushToken:*(void *)(a1 + 32)];
        unsigned int v12 = *(void **)(a1 + 40);
        int8x16_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 primaryBrokerURL]);
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472LL;
        v15[2] = sub_10002F43C;
        v15[3] = &unk_10063AFC0;
        id v16 = *(id *)(a1 + 32);
        objc_msgSend(v12, "_queue_registerDeviceAtBrokerURL:completion:", v13, v15);
      }

      else
      {
        [v6 setPushToken:*(void *)(a1 + 32)];
        [*(id *)(*(void *)(a1 + 40) + 48) archiveContext:v6];
      }
    }

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v6 pushToken]);
      *(_DWORD *)buf = 138412290;
      uint64_t v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Applied token: %@", buf, 0xCu);
    }
  }

void sub_10002F43C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    id v9 = @"NO";
    *(_DWORD *)unsigned int v12 = 138412802;
    if (a2) {
      id v9 = @"YES";
    }
    *(void *)&void v12[4] = v8;
    __int16 v13 = 2112;
    id v14 = v9;
    __int16 v15 = 2112;
    id v16 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Broker reregister with push token %@ succeeded %@ with error %@",  v12,  0x20u);
  }

  unsigned int v10 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  PKAnalyticsReportEventTypePushTokenUpdate,  PKAnalyticsReportEventKey);
  if (a2) {
    unsigned int v11 = @"success";
  }
  else {
    unsigned int v11 = @"failure";
  }
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v10,  "setObject:forKeyedSubscript:",  v11,  PKAnalyticsReportPushTokenUpdateStatus,  *(void *)v12);
  +[PKAnalyticsReporter sendSingularEvent:](&OBJC_CLASS___PKAnalyticsReporter, "sendSingularEvent:", v10);
}

void sub_10002F63C(uint64_t a1)
{
  id v2 = [[PKPaymentDeprovisionRequest alloc] initWithPaymentPass:*(void *)(a1 + 32)];
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedWebService]);
  uint64_t v4 = *(void *)(a1 + 48);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10002F730;
  v8[3] = &unk_10063AFE8;
  id v9 = v2;
  id v5 = v2;
  [v3 diagnosticSessionWithReason:v4 sessionHandler:v8];

  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedWebServiceContext]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  [v6 removeVerificationRequestRecordForUniqueID:v7];

  [*(id *)(*(void *)(a1 + 40) + 48) archiveContext:v6];
}

id sub_10002F730(uint64_t a1, void *a2)
{
  return _[a2 deprovisionForRequest:*(void *)(a1 + 32) completion:0];
}

void sub_10002F814(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Payment pass added. Checking if SE is already personalized",  buf,  2u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 16) primaryPaymentApplicationForPassUniqueIdentifier:v4]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 applicationIdentifier]);

  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  id v9 = *(void **)(v7 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10002F940;
  void v12[3] = &unk_10063B010;
  void v12[4] = v7;
  id v13 = v4;
  id v14 = v8;
  id v15 = v6;
  id v10 = v6;
  id v11 = v4;
  [v9 appletWithIdentifier:v10 completion:v12];
}

void sub_10002F940(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) primaryPaymentApplicationForPassUniqueIdentifier:*(void *)(a1 + 40)]);
  if (v3
    && ((id v5 = [v3 lifecycleState], v5 == (id)23) || v5 == (id)15)
    && ([v4 state] == (id)2 || objc_msgSend(v4, "state") == (id)3))
  {
    dispatch_queue_global_t global_queue = dispatch_get_global_queue(0LL, 0LL);
    uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(global_queue);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_10002FAD0;
    v13[3] = &unk_100639350;
    id v14 = (os_log_s *)*(id *)(a1 + 48);
    id v8 = *(id *)(a1 + 56);
    uint64_t v9 = *(void *)(a1 + 32);
    id v15 = v8;
    uint64_t v16 = v9;
    id v10 = v13;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100039760;
    block[3] = &unk_10063A830;
    id v18 = v10;
    dispatch_async(v7, block);

    id v11 = v14;
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(block[0]) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "SE is not personalized yet.",  (uint8_t *)block,  2u);
    }
  }
}

void sub_10002FAD0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passTypeIdentifier]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serialNumber]);
    uint64_t v6 = *(void *)(a1 + 40);
    int v9 = 138412802;
    id v10 = v4;
    __int16 v11 = 2112;
    unsigned int v12 = v5;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "SE is already perso'd for %@:%@ aid: %@, fetching passes…",  (uint8_t *)&v9,  0x20u);
  }

  uint64_t v7 = *(void **)(a1 + 48);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passTypeIdentifier]);
  [v7 _fetchPassesIfNecessaryForPushTopic:v8];
}

void sub_10002FC88(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "paymentWebServiceCoordinator:didDownloadPass:") & 1) != 0) {
    [v3 paymentWebServiceCoordinator:*(void *)(a1 + 32) didDownloadPass:*(void *)(a1 + 40)];
  }
}

void sub_10002FD98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10002FE28;
  v4[3] = &unk_10063B038;
  id v3 = *(void **)(a1 + 40);
  id v5 = *(id *)(a1 + 32);
  id v6 = v3;
  [v5 _accessObserversWithHandler:v4];
}

void sub_10002FE28(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "paymentWebServiceCoordinator:didDownloadPassRemoteAssets:") & 1) != 0) {
    [v3 paymentWebServiceCoordinator:*(void *)(a1 + 32) didDownloadPassRemoteAssets:*(void *)(a1 + 40)];
  }
}

void sub_1000300DC(uint64_t a1)
{
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v24 objects:v34 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v25;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v25 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v24 + 1) + 8LL * (void)i);
        uint64_t Object = PKLogFacilityTypeGetObject(6LL);
        int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 passTypeIdentifier]);
          __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v7 serialNumber]);
          uint64_t v12 = *(void *)(a1 + 40);
          *(_DWORD *)buf = 138412802;
          unsigned int v29 = v10;
          __int16 v30 = 2112;
          __int128 v31 = v11;
          __int16 v32 = 2112;
          uint64_t v33 = v12;
          _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%@:%@ not found in list of passes server expects to be on device for region %@. Redownloading…",  buf,  0x20u);
        }

        __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) sharedWebService]);
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v7 passTypeIdentifier]);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v7 serialNumber]);
        [v13 backgroundDownloadWithPassTypeIdentifier:v14 serialNumber:v15];
      }

      id v4 = [v2 countByEnumeratingWithState:&v24 objects:v34 count:16];
    }

    while (v4);
  }

  uint64_t v16 = PDPaymentWebServicePushTopicsNeedingUpdate();
  unsigned int v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  id v18 = v17;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_10003034C;
  v20[3] = &unk_10063AD98;
  uint64_t v19 = *(void **)(a1 + 56);
  id v21 = *(id *)(a1 + 48);
  id v22 = v19;
  id v23 = *(id *)(a1 + 40);
  [v21 _accessObserversWithHandler:v20];
}

void sub_10003034C(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector( v3,  "paymentWebServiceCoordinator:didDownloadSerialNumbersForInstalledPasses:inRegion:") & 1) != 0) {
    [v3 paymentWebServiceCoordinator:a1[4] didDownloadSerialNumbersForInstalledPasses:a1[5] inRegion:a1[6]];
  }
}

void sub_100030460(void *a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector( v3,  "paymentWebServiceCoordinator:didRegisterCredentialWithIdentifier:response:error:") & 1) != 0) {
    [v3 paymentWebServiceCoordinator:a1[4] didRegisterCredentialWithIdentifier:a1[5] response:a1[6] error:a1[7]];
  }
}

id sub_10003052C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedWebService]);

  if (v2 != v3) {
    objc_msgSend(*(id *)(a1 + 40), "_queue_setupBackgroundWebServiceWithCompletion:", 0);
  }
  id v4 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_1000305BC;
  v6[3] = &unk_10063B0B0;
  void v6[4] = v4;
  return [v4 _accessObserversWithHandler:v6];
}

void sub_1000305BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "paymentWebServiceCoordinatorBackgroundSessionDidBecomeInvalid:") & 1) != 0) {
    [v3 paymentWebServiceCoordinatorBackgroundSessionDidBecomeInvalid:*(void *)(a1 + 32)];
  }
}

uint64_t sub_100030778(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100030788(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebService]);
  uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v2 context]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v33 configuration]);
  __int16 v32 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int16 v30 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v45 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  __int128 v48 = 0u;
  uint64_t v29 = a1;
  id v5 = *(id *)(a1 + 40);
  id v6 = [v5 countByEnumeratingWithState:&v45 objects:v52 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v46;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v46 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v45 + 1) + 8LL * (void)i);
        __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([v3 brokerURLForRegion:v10]);
        if (v11 && PKRegistrationSupportedInRegionForWebService(v10, v2))
        {
          uint64_t v12 = objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", v11));
          if (v12)
          {
            __int16 v13 = (NSMutableArray *)v12;
          }

          else
          {
            __int16 v13 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
            -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v13, v11);
            -[NSMutableArray addObject:](v32, "addObject:", v11);
          }

          -[NSMutableArray addObject:](v13, "addObject:", v10);
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v45 objects:v52 count:16];
    }

    while (v7);
  }

  v40[0] = _NSConcreteStackBlock;
  v40[1] = 3221225472LL;
  v40[2] = sub_100030BD0;
  v40[3] = &unk_10063B0D8;
  id v14 = (id)objc_claimAutoreleasedReturnValue([v2 primaryBrokerURL]);
  id v41 = v14;
  __int128 v31 = v30;
  id v42 = v31;
  id v15 = v4;
  id v43 = v15;
  id v44 = *(id *)(v29 + 40);
  -[NSMutableArray sortUsingComparator:](v32, "sortUsingComparator:", v40);
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  uint64_t v16 = v32;
  id v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v16,  "countByEnumeratingWithState:objects:count:",  &v36,  v51,  16LL);
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v37;
    while (2)
    {
      for (uint64_t j = 0LL; j != v18; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v37 != v19) {
          objc_enumerationMutation(v16);
        }
        id v21 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v15,  "objectForKeyedSubscript:",  *(void *)(*((void *)&v36 + 1) + 8LL * (void)j)));
        id v22 = (void *)objc_claimAutoreleasedReturnValue([v21 firstObject]);

        if (v22)
        {

          objc_msgSend( *(id *)(v29 + 32),  "_queue_performRegistrationForRegion:force:completion:",  v22,  *(unsigned __int8 *)(v29 + 56),  *(void *)(v29 + 48));
          __int128 v26 = v31;
          goto LABEL_28;
        }
      }

      id v18 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v16,  "countByEnumeratingWithState:objects:count:",  &v36,  v51,  16LL);
      if (v18) {
        continue;
      }
      break;
    }
  }

  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  __int128 v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = *(void *)(v29 + 40);
    *(_DWORD *)buf = 138412290;
    uint64_t v50 = v25;
    _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "PDPaymentWebServiceCoordinator: could not register for member of %@ - either not supported or no broker URLs.",  buf,  0xCu);
  }

  __int128 v26 = v31;
  if (*(void *)(v29 + 48))
  {
    id v27 = PDDefaultQueue();
    uint64_t v28 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v27);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100030D6C;
    block[3] = &unk_10063A830;
    id v35 = *(id *)(v29 + 48);
    dispatch_async(v28, block);

    id v22 = v35;
LABEL_28:
  }
}

uint64_t sub_100030BD0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ((PKEqualObjects(v5, v6) & 1) != 0)
  {
    uint64_t v7 = 0LL;
    goto LABEL_7;
  }

  if ((PKEqualObjects(v5, *(void *)(a1 + 32)) & 1) != 0)
  {
LABEL_4:
    uint64_t v7 = -1LL;
    goto LABEL_7;
  }

  if ((PKEqualObjects(v6, *(void *)(a1 + 32)) & 1) != 0) {
    goto LABEL_6;
  }
  unsigned int v9 = [*(id *)(a1 + 40) containsObject:v5];
  unsigned int v10 = [*(id *)(a1 + 40) containsObject:v6];
  if (v9 && !v10) {
    goto LABEL_4;
  }
  if ((v9 | v10 ^ 1) != 1)
  {
LABEL_6:
    uint64_t v7 = 1LL;
    goto LABEL_7;
  }

  __int16 v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v5]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 firstObject]);

  __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKeyedSubscript:v6]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 firstObject]);

  if (v12) {
    unint64_t v15 = (unint64_t)[*(id *)(a1 + 56) indexOfObject:v12];
  }
  else {
    unint64_t v15 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v14) {
    unint64_t v16 = (unint64_t)[*(id *)(a1 + 56) indexOfObject:v14];
  }
  else {
    unint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v15 == v16)
  {
    uint64_t v7 = 0LL;
  }

  else if (v15 == 0x7FFFFFFFFFFFFFFFLL || v16 != 0x7FFFFFFFFFFFFFFFLL)
  {
    if (v15 != 0x7FFFFFFFFFFFFFFFLL || v16 == 0x7FFFFFFFFFFFFFFFLL)
    {
      if (v15 < v16) {
        uint64_t v7 = -1LL;
      }
      else {
        uint64_t v7 = 1LL;
      }
    }

    else
    {
      uint64_t v7 = 1LL;
    }
  }

  else
  {
    uint64_t v7 = -1LL;
  }

LABEL_7:
  return v7;
}

uint64_t sub_100030D6C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100030E3C(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_performRegistrationForRegion:force:completion:",  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 48));
}

LABEL_22:
  if (v9)
  {
    __int128 v26 = PDDefaultQueue();
    id v27 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v26);
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472LL;
    void v31[2] = sub_1000313FC;
    v31[3] = &unk_10063A830;
    __int16 v32 = v9;
    dispatch_async(v27, v31);

    __int16 v13 = v32;
    goto LABEL_24;
  }
}

    id v18 = v10;
    if (v18)
    {
      uint64_t v25 = v18;

      __int128 v26 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v25 appleID]);
      -[NSMutableSet pk_safelyAddObject:](v26, "pk_safelyAddObject:", v27);

      -[NSMutableSet pk_safelyAddObject:](v26, "pk_safelyAddObject:", *(void *)(a1 + 40));
      uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v25 addressableHandles]);
      -[NSMutableSet unionSet:](v26, "unionSet:", v28);

      uint64_t v29 = -[NSMutableSet copy](v26, "copy");
      (*((void (**)(id, uint64_t, id))v3 + 2))(v3, 1LL, v29);

      goto LABEL_29;
    }

  return v33;
}

  _Block_object_dispose(&v28, 8);
  _Block_object_dispose(&v34, 8);
}
}

      self->_willRequireIndexing = 1;
      goto LABEL_23;
    }

    if (!self->_willRequireIndexing)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager batchOfActionableIndexerItemsWithCount:]( self->_databaseManager,  "batchOfActionableIndexerItemsWithCount:",  1LL));
      uint64_t v8 = [v7 count];

      if (v8 == (id)1)
      {
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          unsigned int v9 = "At least one item requires indexing";
LABEL_21:
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v9, buf, 2u);
          goto LABEL_22;
        }

        goto LABEL_22;
      }
    }
  }

    id v20 = (v29 - 1) & v29;
    __int128 v24 = __clz(__rbit64(v29)) + (a5 << 6);
    goto LABEL_6;
  }

    uint64_t v7 = (v15 - 1) & v15;
    __int16 v11 = __clz(__rbit64(v15)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = *(void *)(*(void *)(a1 + 48) + 16 * v11 + 8);
    swift_bridgeObjectRetain(v12);
    __int16 v13 = String._bridgeToObjectiveC()();
    [a2 unregisterMessageForIdentifier:v13];
    swift_bridgeObjectRelease(v12);
  }

  unint64_t v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return;
  }

  unint64_t v15 = *(void *)(v4 + 8 * v16);
  if (v15)
  {
    unsigned int v9 = v16;
    goto LABEL_22;
  }

  while (1)
  {
    unsigned int v9 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v9 >= v8) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v4 + 8 * v9);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }

  id v23 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1LL << a3;
  __int128 v24 = (uint64_t *)(*(void *)(v23 + 48) + 16 * a3);
  *__int128 v24 = v8;
  v24[1] = a2;
  uint64_t v25 = *(void *)(v23 + 16);
  __int128 v26 = __OFADD__(v25, 1LL);
  id v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v23 + 16) = v27;
  }
  return result;
}

  uint64_t v29 = *v35;
  *(void *)(*v35 + 8 * (a5 >> 6) + 56) |= 1LL << a5;
  __int16 v30 = (uint64_t *)(*(void *)(v29 + 48) + 32 * a5);
  *__int16 v30 = v14;
  v30[1] = a2;
  void v30[2] = a3;
  v30[3] = a4;
  __int128 v31 = *(void *)(v29 + 16);
  __int16 v32 = __OFADD__(v31, 1LL);
  uint64_t v33 = v31 + 1;
  if (v32) {
    __break(1u);
  }
  else {
    *(void *)(v29 + 16) = v33;
  }
  return result;
}

LABEL_25:
}
}
}
}

    id v23 = 0;
    goto LABEL_26;
  }

  if (!sortedPassUniqueIdentifiers) {
    goto LABEL_25;
  }
  self->_sortedPassUniqueIdentifiers = 0LL;

LABEL_24:
  id v23 = 1;
LABEL_26:

  return v23;
}

LABEL_29:
        unsigned int v10 = v29;
        id v6 = v30;
        goto LABEL_30;
      }

      uint64_t v25 = (unint64_t)[v20 virtualCardVPANOrigin];
      __int128 v26 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
      if ((v25 & 0xFFFFFFFFFFFFFFFELL) == 4)
      {
        if (v26)
        {
          *(_DWORD *)buf = 134217984;
          id v41 = (id)v25;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "VPAN Issuance: Pass issued VPAN due to %ld, notifying user",  buf,  0xCu);
        }

        -[PDPaymentUserCommunicationManager sendVirtualCardNumberIssuedDueToTransactionNotificationForPaymentPass:withCompletion:]( v28,  "sendVirtualCardNumberIssuedDueToTransactionNotificationForPaymentPass:withCompletion:",  v30,  0LL);
        goto LABEL_29;
      }

      if (v26)
      {
        *(_DWORD *)buf = 134217984;
        id v41 = (id)v25;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "VPAN Issuance: Pass issued VPAN due to %ld, no need to notify user",  buf,  0xCu);
      }
    }

    unint64_t v16 = [obj countByEnumeratingWithState:&v35 objects:v39 count:16];
    unsigned int v10 = v29;
    id v6 = v30;
    if (v16) {
      continue;
    }
    break;
  }

  swift_bridgeObjectRelease(v11);
  id v44 = objc_opt_self(&OBJC_CLASS___PKPendingStatefulTransferProvisioning);
  __int128 v45 = swift_dynamicCastObjCClass(a1, v44);
  if (!v45) {
    return 0LL;
  }
  __int128 v46 = (void *)v45;
  __int128 v47 = a1;
  uint64_t v49 = [v46 transportIdentifier];
  if (!v49)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0LL, v48);
    __int16 v51 = v50;
    uint64_t v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v51);
  }

  uint64_t v52 = [(id)objc_opt_self(PKSharingExistingChannelDescriptor) existingForTransportIdentifier:v49];

  uint64_t v53 = *(void **)(v1 + OBJC_IVAR___PDPendingProvisioningManager_sharingChannelManager);
  uint64_t result = PDHeavyQueue();
  if (result)
  {
    __int128 v54 = result;
    uint64_t v55 = [v53 handleForDescriptor:v52 queue:result];

    if (v55)
    {
      uint64_t v56 = v55;
      uint64_t v57 = [v46 invitation];
      uint64_t v58 = [v46 share];
      uint64_t v29 = [objc_allocWithZone(PKStatefulTransferCredential) initWithSharingChannelHandle:v56 invitation:v57 share:v58];

      if (v29)
      {
        uint64_t v59 = v29;
        id v60 = [v46 originalShareURL];
        [v59 setOriginalShareURL:v60];

        __int128 v61 = v59;
        id v62 = [v46 accountAttestationAnonymizationSalt];
        [v61 setAccountAttestationAnonymizationSalt:v62];
      }

      uint64_t v63 = [v46 provisioningState];
      if (v63)
      {
        __int128 v64 = v63;
        if (v29)
        {
          int v65 = v29;
          __int128 v64 = v64;
          [v65 setState:v64];
        }

        else
        {
        }
      }

      else
      {
      }
    }

    else
    {
      id v69 = [v47 provisioningState];
      if (v69)
      {
        __int128 v70 = v69;
        id v71 = [v69 sid];

        uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v71, v72);
        int v75 = v74;
      }

      else
      {
        uint64_t v73 = 0LL;
        int v75 = 0xE000000000000000LL;
      }

      static Logger.Provisioning.add.getter(v69);
      __int16 v80 = swift_bridgeObjectRetain(v75);
      __int128 v81 = (os_log_s *)Logger.logObject.getter(v80);
      id v82 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v93 = v73;
        id v83 = swift_slowAlloc(12LL, -1LL);
        uint64_t v95 = v47;
        id v84 = (uint8_t *)v83;
        uint64_t v85 = swift_slowAlloc(32LL, -1LL);
        int v94 = v52;
        id v86 = v85;
        v97 = v85;
        *(_DWORD *)id v84 = 136315138;
        swift_bridgeObjectRetain(v75);
        uint64_t v96 = sub_100430468(v93, v75, &v97);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v84 + 4);
        swift_bridgeObjectRelease_n(v75, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "[%s] Pending: Failed to acquire handle", v84, 0xCu);
        swift_arrayDestroy(v86, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1LL, -1LL);
        swift_slowDealloc(v84, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v75, 2LL);
      }

      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      return 0LL;
    }

    return v29;
  }

  __break(1u);
  return result;
}

  __break(1u);
}

    uint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    id v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    id v18 = 16 * v15;
    uint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v1_Block_object_dispose((const void *)(v1 - 80), 8) = v19;
    uint64_t result = (void *)swift_unknownObjectRetain(v19);
  }

  id v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  id v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    unsigned int v9 = v22;
    goto LABEL_25;
  }

  while (1)
  {
    unsigned int v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    id v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }

    uint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    unint64_t v16 = 8 * v15;
    id v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    uint64_t result = (void *)swift_bridgeObjectRetain(v17);
  }

  id v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  uint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    unsigned int v9 = v20;
    goto LABEL_25;
  }

  while (1)
  {
    unsigned int v9 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }

    __int16 v13 = (v26 - 1) & v26;
    unint64_t v16 = __clz(__rbit64(v26)) + (v10 << 6);
LABEL_12:
    id v17 = 32 * v16;
    id v18 = (void *)(*(void *)(v3 + 48) + 32 * v16);
    uint64_t v19 = v18[1];
    id v20 = v18[2];
    id v21 = v18[3];
    id v22 = 8 * v16;
    id v23 = *(void **)(*(void *)(v3 + 56) + v22);
    __int128 v24 = (void *)(*(void *)(v5 + 48) + v17);
    *__int128 v24 = *v18;
    v24[1] = v19;
    v24[2] = v20;
    v24[3] = v21;
    *(void *)(*(void *)(v5 + 56) + v22) = v23;
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRetain(v21);
    uint64_t result = v23;
  }

  id v27 = v25 + 2;
  if (v27 >= v14) {
    goto LABEL_26;
  }
  __int128 v26 = *(void *)(v7 + 8 * v27);
  if (v26)
  {
    unsigned int v10 = v27;
    goto LABEL_25;
  }

  while (1)
  {
    unsigned int v10 = v27 + 1;
    if (__OFADD__(v27, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_26;
    }
    __int128 v26 = *(void *)(v7 + 8 * v10);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }

  __int16 v32 = *(void *)(v45 + v8);
  *(void *)(v45 + v_Block_object_dispose((const void *)(v1 - 80), 8) = v15;
  swift_bridgeObjectRelease(v32);
  os_unfair_lock_unlock(v7);
  uint64_t v33 = v14[2];
  if (v33)
  {
    __int128 v34 = v14 + 6;
    do
    {
      __int128 v36 = (void (*)(uint64_t))*(v34 - 1);
      id v35 = *v34;
      __int128 v37 = swift_retain(*v34);
      v36(v37);
      swift_release(v35);
      v34 += 3;
      --v33;
    }

    while (v33);
  }

  return swift_bridgeObjectRelease(v14);
}

void sub_10003127C(uint64_t a1, int a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDPaymentWebServiceCoordinator: registering for region %{public}@.",  buf,  0xCu);
    }

    [*(id *)(a1 + 40) performRegistrationForBrokerURL:*(void *)(a1 + 48) force:*(unsigned __int8 *)(a1 + 64) completion:*(void *)(a1 + 56)];
  }

  else
  {
    if (v6)
    {
      uint64_t v8 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      uint64_t v14 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDPaymentWebServiceCoordinator: failed initial registration with device region - skipping registration for region %{public}@.",  buf,  0xCu);
    }

    if (*(void *)(a1 + 56))
    {
      id v9 = PDDefaultQueue();
      unsigned int v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v9);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000313EC;
      block[3] = &unk_10063A830;
      id v12 = *(id *)(a1 + 56);
      dispatch_async(v10, block);
    }
  }

uint64_t sub_1000313EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000313FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000314BC(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_performRegistrationForBrokerURL:force:completion:",  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 56),  *(void *)(a1 + 48));
}

uint64_t sub_1000317A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1000317B4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000317C4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100031918(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_1000319D0;
  block[3] = &unk_10063B150;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(v7 + 128);
  block[1] = 3221225472LL;
  uint64_t v15 = a2;
  void block[4] = v7;
  id v12 = v6;
  id v13 = v8;
  id v14 = *(id *)(a1 + 48);
  id v10 = v6;
  dispatch_async(v9, block);
}

void sub_1000319D0(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = (void *)v2[6];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 sharedWebServiceContext]);
  [v3 archiveContext:v4];

  [*(id *)(*(void *)(a1 + 32) + 112) clearPaymentSetupFeatures];
  id v5 = PDDefaultQueue();
  id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v5);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_100031ABC;
  block[3] = &unk_10063B150;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  uint64_t v13 = v7;
  block[1] = 3221225472LL;
  id v10 = v8;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  dispatch_async(v6, block);
}

uint64_t sub_100031ABC(void *a1)
{
  if (a1[8] == 1LL && !a1[5])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[6];
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDPaymentWebServiceCoordinator: registered with broker at %@.",  (uint8_t *)&v9,  0xCu);
    }

    uint64_t v5 = 1LL;
  }

  else
  {
    uint64_t v2 = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = a1[6];
      int v9 = 138412290;
      uint64_t v10 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDPaymentWebServiceCoordinator: failed to register with broker at %@.",  (uint8_t *)&v9,  0xCu);
    }

    uint64_t v5 = 0LL;
  }

  uint64_t result = a1[7];
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, v5, a1[5]);
  }
  return result;
}

void sub_100031C5C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebService]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 context]);
  unsigned __int8 v4 = [v3 isRegistered];

  if ((v4 & 1) != 0)
  {
    *(void *)buf = 0LL;
    id v17 = buf;
    uint64_t v18 = 0x2020000000LL;
    char v19 = 0;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebServiceContext]);
    id v6 = v5;
    if (v5)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 regions]);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      v15[2] = sub_100031E1C;
      v15[3] = &unk_10063B1A0;
      void v15[4] = *(void *)(a1 + 32);
      void v15[5] = buf;
      [v7 enumerateKeysAndObjectsUsingBlock:v15];
    }

    objc_msgSend(*(id *)(a1 + 32), "_queue_deviceCheckInRepeatInterval");
    uint64_t v9 = v8;
    id v10 = PDDefaultQueue();
    id v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100031F0C;
    block[3] = &unk_10063B1C8;
    void block[4] = *(void *)(a1 + 32);
    void block[5] = buf;
    void block[6] = v9;
    dispatch_async(v11, block);

    _Block_object_dispose(buf, 8);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "passd cannot start device check in as we are not registered yet",  buf,  2u);
    }

    [*(id *)(a1 + 32) unscheduleDeviceCheckIn];
  }

void sub_100031E00(_Unwind_Exception *a1)
{
}

void sub_100031E1C(uint64_t a1, void *a2, uint64_t a3, _BYTE *a4)
{
  id v7 = a2;
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = objc_msgSend( *(id *)(a1 + 32),  "_queue_automaticDeviceCheckInRequiredForRegion:",  a3);
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Region: %@ requires device check in",  (uint8_t *)&v10,  0xCu);
    }

    *a4 = 1;
  }
}

id sub_100031F0C(uint64_t a1)
{
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL)) {
    return _objc_msgSend( *(id *)(a1 + 32),  "_queue_scheduleDeviceCheckInWithStartTimeOffset:repeatInterval:randomizeTimes:",  1,  *(double *)(a1 + 48),  *(double *)(a1 + 48));
  }
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "No regions require device check in", v5, 2u);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_queue_unscheduleDeviceCheckIn");
}

void sub_10003200C(uint64_t a1)
{
  uint64_t v3 = v2;
  id v4 = PDDefaultQueue();
  uint64_t v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100032098;
  block[3] = &unk_10063B1F0;
  void block[4] = *(void *)(a1 + 32);
  void block[5] = *(void *)(a1 + 40);
  void block[6] = v3;
  dispatch_async(v5, block);
}

id sub_100032098(uint64_t a1)
{
  return _objc_msgSend( *(id *)(a1 + 32),  "_queue_scheduleDeviceCheckInWithStartTimeOffset:repeatInterval:randomizeTimes:",  0,  *(double *)(a1 + 40),  *(double *)(a1 + 48));
}

id sub_1000325D8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_unscheduleDeviceCheckIn");
}

void sub_1000326E4(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "passd - perform device check in called",  buf,  2u);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebService]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 context]);
  unsigned __int8 v6 = [v5 isRegistered];

  if ((v6 & 1) != 0)
  {
    id v7 = objc_alloc_init(&OBJC_CLASS___PDDeviceCheckInTask);
    -[PDDeviceCheckInTask setCanPromptForAuth:](v7, "setCanPromptForAuth:", 1LL);
    if (*(void *)(a1 + 40))
    {
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(-[PDDeviceCheckInTask completionHandlers](v7, "completionHandlers"));
      id v9 = objc_retainBlock(*(id *)(a1 + 40));
      [v8 addObject:v9];
    }

    objc_msgSend(*(id *)(a1 + 32), "_queue_enqueueDeviceCheckInTask:", v7);
  }

  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "passd cannot start device check in as we are not registered yet",  v11,  2u);
    }

    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, void, void))(v10 + 16))(v10, 0LL, 0LL);
    }
  }

void sub_100032BBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(a1 + 48);
  uint64_t v3 = *(dispatch_queue_s **)(v1 + 128);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100032C30;
  v4[3] = &unk_1006392B0;
  void v4[4] = v1;
  id v5 = v2;
  dispatch_async(v3, v4);
}

void sub_100032C30(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebServiceContext]);
  if (v2)
  {
    id v4 = *(void **)(a1 + 32);
    uint64_t v3 = *(void **)(a1 + 40);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100032D38;
    v7[3] = &unk_10063B2D8;
    void v7[4] = v4;
    id v8 = v3;
    id v9 = v2;
    objc_msgSend(v4, "_queue_checkContextForDeviceCheckInAuthRequirement:completion:", v8, v7);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    unsigned __int8 v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "passd cannot start device check in as there is no context",  buf,  2u);
    }

    objc_msgSend(*(id *)(a1 + 32), "_queue_completeDeviceCheckInTask:success:error:", *(void *)(a1 + 40), 0, 0);
  }
}

void sub_100032D38(id *a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5 || (a2 & 1) == 0)
  {
    objc_msgSend(a1[4], "_queue_completeDeviceCheckInTask:success:error:", a1[5], 0, v5);
  }

  else
  {
    unsigned __int8 v6 = (void *)objc_claimAutoreleasedReturnValue([a1[6] configuration]);
    uint64_t v7 = PKCurrentRegion();
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if ([v6 deviceCheckInDisabledForRegion:v8])
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Check in is disabled for device region: %@ - wait for next scheduled task run and check again",  (uint8_t *)&buf,  0xCu);
      }

      objc_msgSend(a1[4], "_queue_completeDeviceCheckInTask:success:error:", a1[5], 0, 0);
    }

    else
    {
      v31[0] = 0LL;
      v31[1] = v31;
      void v31[2] = 0x2020000000LL;
      char v32 = 1;
      *(void *)&__int128 buf = 0LL;
      *((void *)&buf + 1) = &buf;
      uint64_t v34 = 0x3032000000LL;
      id v35 = sub_100033010;
      __int128 v36 = sub_100033020;
      id v37 = 0LL;
      dispatch_group_t v11 = dispatch_group_create();
      id v12 = (void *)objc_claimAutoreleasedReturnValue([a1[6] regions]);
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_100033028;
      v23[3] = &unk_10063B288;
      id v13 = v6;
      uint64_t v29 = v31;
      id v14 = a1[4];
      id v24 = v13;
      id v25 = v14;
      uint64_t v15 = v11;
      __int128 v26 = v15;
      p___int128 buf = &buf;
      id v27 = a1[5];
      id v28 = a1[6];
      [v12 enumerateKeysAndObjectsUsingBlock:v23];

      id v16 = a1[4];
      id v17 = a1[5];
      uint64_t v18 = (dispatch_queue_s *)*((void *)v16 + 16);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000334E0;
      block[3] = &unk_10063B2B0;
      void block[4] = v16;
      id v20 = v17;
      id v21 = v31;
      id v22 = &buf;
      dispatch_group_notify(v15, v18, block);

      _Block_object_dispose(&buf, 8);
      _Block_object_dispose(v31, 8);
    }
  }
}

void sub_100032FE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_100033010(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100033020(uint64_t a1)
{
}

void sub_100033028(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 regionCode]);
  if ([*(id *)(a1 + 32) deviceCheckInDisabledForRegion:v7])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v22 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Check in is disabled for region: %@ - wait for next scheduled task run and check again",  buf,  0xCu);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 0;
  }

  else if (objc_msgSend(*(id *)(a1 + 40), "_queue_automaticDeviceCheckInRequiredForRegion:", v6))
  {
    dispatch_group_enter(*(dispatch_group_t *)(a1 + 48));
    id v10 = [v6 outstandingCheckInAction];
    dispatch_group_t v11 = *(void **)(a1 + 40);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    v14[2] = sub_100033250;
    v14[3] = &unk_10063B260;
    void v14[4] = v11;
    __int128 v19 = *(_OWORD *)(a1 + 72);
    id v15 = *(id *)(a1 + 56);
    id v16 = *(id *)(a1 + 64);
    id v17 = v5;
    id v20 = v10;
    id v18 = *(id *)(a1 + 48);
    objc_msgSend(v11, "_queue_handleCheckInForRegion:action:completion:", v17, v10, v14);
  }

  else
  {
    uint64_t v12 = PKLogFacilityTypeGetObject(6LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v22 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Region: %@ does not require device check in",  buf,  0xCu);
    }
  }
}

void sub_100033250(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  v11[0] = _NSConcreteStackBlock;
  v11[2] = sub_100033344;
  void v11[3] = &unk_10063B238;
  id v6 = *(void **)(a1 + 40);
  uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
  v11[1] = 3221225472LL;
  char v20 = a2;
  __int128 v18 = *(_OWORD *)(a1 + 72);
  id v12 = v5;
  id v13 = v6;
  id v14 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  uint64_t v19 = *(void *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 32);
  id v15 = v8;
  uint64_t v16 = v9;
  id v17 = *(id *)(a1 + 64);
  id v10 = v5;
  dispatch_async(v7, v11);
}

void sub_100033344(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 80) + 8LL);
  if (*(_BYTE *)(v2 + 24)) {
    *(_BYTE *)(v2 + 24) = *(_BYTE *)(a1 + 104);
  }
  uint64_t v3 = *(void *)(*(void *)(a1 + 88) + 8LL);
  uint64_t v5 = *(void *)(v3 + 40);
  id v4 = (id *)(v3 + 40);
  if (!v5) {
    objc_storeStrong(v4, *(id *)(a1 + 32));
  }
  if ([*(id *)(a1 + 40) cancelled])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Device check in task was cancelled - skipping context update",  buf,  2u);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 24LL) = 0;
  }

  else
  {
    id v8 = *(void **)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_10003345C;
    v10[3] = &unk_10063B210;
    char v11 = *(_BYTE *)(a1 + 104);
    void v10[4] = *(void *)(a1 + 96);
    [v8 atomicallyUpdateRegionWithIdentifier:v9 updateBlock:v10];
    [*(id *)(*(void *)(a1 + 64) + 48) archiveContext:*(void *)(a1 + 48)];
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

id sub_10003345C(uint64_t a1, void *a2)
{
  if (*(_BYTE *)(a1 + 40))
  {
    id v2 = a2;
    uint64_t v3 = PKDeviceBuildVersion();
    id v4 = (id)objc_claimAutoreleasedReturnValue(v3);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v2 regionBySettingOutstandingCheckInAction:0 lastDeviceCheckInBuildVersion:v4]);
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    id v4 = a2;
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 regionBySettingOutstandingCheckInAction:v6 lastDeviceCheckInBuildVersion:0]);
  }

  return v5;
}

id sub_1000334E0(uint64_t a1)
{
  return objc_msgSend( *(id *)(a1 + 32),  "_queue_completeDeviceCheckInTask:success:error:",  *(void *)(a1 + 40),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8) + 24),  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
}

void sub_1000336D0(uint64_t a1)
{
  __int128 v6 = 0u;
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "completionHandlers", 0));
  id v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = *(void *)v7;
    do
    {
      uint64_t v5 = 0LL;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v1);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v6 + 1) + 8LL * (void)v5) + 16LL))();
        uint64_t v5 = (char *)v5 + 1;
      }

      while (v3 != v5);
      id v3 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }

    while (v3);
  }
}

id sub_1000337CC(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_queue_unscheduleDeviceCheckIn");
  if (*(_BYTE *)(a1 + 48)) {
    return _objc_msgSend( *(id *)(a1 + 32),  "_queue_scheduleDeviceCheckInWithStartTimeOffset:repeatInterval:randomizeTimes:",  1,  *(double *)(a1 + 40),  *(double *)(a1 + 40));
  }
  return result;
}

void sub_1000339BC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
}

void sub_1000339D4(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  if ([a3 outstandingCheckInAction] == (id)4)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    __int128 v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Region: %@ requires user initalited device check in as it was waiting for auth",  (uint8_t *)&v10,  0xCu);
    }

    *(_BYTE *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = 1;
    *a4 = 1;
  }
}

void sub_100033AB8(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100033B2C;
  v4[3] = &unk_10063B350;
  uint64_t v6 = a2;
  id v5 = v2;
  dispatch_async(v3, v4);
}

void sub_100033B2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      *(_WORD *)int v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Grand slam token renew for device check in failed",  v10,  2u);
    }

    NSErrorUserInfoKey v11 = NSLocalizedDescriptionKey;
    uint64_t v6 = PKLocalizedPaymentString(@"AUTH_ERROR");
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    id v12 = v7;
    __int128 v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));

    __int128 v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKWebServiceErrorDomain,  1LL,  v8));
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    if (v5)
    {
      *(_WORD *)int v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Grand slam token renew for device check in success",  v10,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

void sub_100033E8C(uint64_t a1, uint64_t a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  BOOL v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 134218242;
    uint64_t v12 = a2;
    __int16 v13 = 2112;
    uint64_t v14 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "passd found outstanding action to perform: %ld for region: %@",  buf,  0x16u);
  }

  uint64_t v8 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  id v9[2] = sub_100033FA4;
  v9[3] = &unk_10063B3A0;
  id v10 = *(id *)(a1 + 48);
  [v7 _handleDeviceCheckInAction:a2 region:v8 completion:v9];
}

uint64_t sub_100033FA4(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, a2, 0LL);
  }
  return result;
}

void sub_100033FBC(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (!v7 || v5)
  {
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v5);
    }
  }

  else
  {
    (*(void (**)(void, id))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), [v7 action]);
  }
}

LABEL_11:
      if (v9) {
        (*((void (**)(id, uint64_t))v9 + 2))(v9, 1LL);
      }
      break;
    case 5LL:
      uint64_t v19 = PKLogFacilityTypeGetObject(6LL);
      char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v42 = v8;
        _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Device check in requested reregister for peer payment: %@",  buf,  0xCu);
      }

      id v21 = (void *)PDOSTransactionCreate("PDPaymentWebServiceCoordinator.check_in.re_register_peer_payment");
      peerPaymentWebServiceCoordinator = self->_peerPaymentWebServiceCoordinator;
      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472LL;
      v33[2] = sub_10003462C;
      v33[3] = &unk_10063B468;
      uint64_t v34 = v21;
      id v35 = v9;
      id v23 = v21;
      -[PDPeerPaymentWebServiceCoordinator registerDeviceWithReason:completion:]( peerPaymentWebServiceCoordinator,  "registerDeviceWithReason:completion:",  @"Registering peer payment for device check in",  v33);

      break;
    default:
      break;
  }
}

    goto LABEL_12;
  }

  self->_didSuccessfullySyncAtLeastOnce = 1;
  id v10 = [v4 typeOfSyncPerformed];
  NSErrorUserInfoKey v11 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  __int16 v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (!v10)
  {
    if (v13)
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainerConfiguration logDescription](self->_configuration, "logDescription"));
      *(_DWORD *)__int128 buf = 138543362;
      uint64_t v19 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] will upload local data after download (full-sync)",  buf,  0xCu);
    }

    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[PDPassSyncCloudStoreContainer localStore](self, "localStore"));
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    v17[2] = sub_100071E34;
    v17[3] = &unk_10063AFC0;
    void v17[4] = self;
    -[os_log_s saveLocalDataInContainer:completion:](v7, "saveLocalDataInContainer:completion:", v4, v17);
    goto LABEL_11;
  }

  if (v13)
  {
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainerConfiguration logDescription](self->_configuration, "logDescription"));
    *(_DWORD *)__int128 buf = 138543362;
    uint64_t v19 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] will upload local data after download (delta-sync)",  buf,  0xCu);
  }

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100071F98;
  v16[3] = &unk_10063AFC0;
  v16[4] = self;
  -[PDPassSyncCloudStoreContainer processPendingChanges:](self, "processPendingChanges:", v16);
LABEL_12:
}

    NSErrorUserInfoKey v11 = 0LL;
    goto LABEL_12;
  }

  NSErrorUserInfoKey v11 = 0LL;
LABEL_13:

  return v11;
}

    return 0;
  }

  if (PKIsSRD())
  {
    __int128 v9 = PKLogFacilityTypeGetObject(27LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v23 = 0;
      NSErrorUserInfoKey v11 = "Push provisioning: Device does not support push provisioning - is SRD";
      uint64_t v12 = (uint8_t *)&v23;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, v12, 2u);
      goto LABEL_11;
    }

    goto LABEL_11;
  }

  if (PKIsBeneficiaryAccount())
  {
    uint64_t v14 = PKLogFacilityTypeGetObject(27LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      NSErrorUserInfoKey v11 = "Push provisioning: Device does not support push provisioning - is beneficiary account";
      uint64_t v12 = buf;
      goto LABEL_10;
    }

    goto LABEL_11;
  }

  if (v7 && (PKNearFieldSupportsSimultaneousRequestRouting() & 1) == 0)
  {
    uint64_t v19 = PKLogFacilityTypeGetObject(27LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    id v21 = 0;
    NSErrorUserInfoKey v11 = "Push provisioning: Device does not support push provisioning - device doesn't support unified access";
    uint64_t v12 = (uint8_t *)&v21;
    goto LABEL_10;
  }

  uint64_t v16 = -[PDDatabaseManager countActiveSecureElementPasses](self->_databaseManager, "countActiveSecureElementPasses");
  id v17 = PKMaxPaymentCards();
  uint64_t result = 1;
  if (v17 && v16 + a5 > v17)
  {
    __int128 v18 = PKLogFacilityTypeGetObject(27LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_11;
    }
    char v20 = 0;
    NSErrorUserInfoKey v11 = "Push provisioning: Device does not support push provisioning - max pass count reached";
    uint64_t v12 = (uint8_t *)&v20;
    goto LABEL_10;
  }

  return result;
}

  return (char)v4;
}

    -[PDDatabaseManager _applyDemoPaymentApplicationToPass:](self, "_applyDemoPaymentApplicationToPass:", v7);
    char v32 = 1;
LABEL_14:
    id v15 = (void *)objc_claimAutoreleasedReturnValue(-[PKSecureElement secureElementIdentifiers](self->_secureElement, "secureElementIdentifiers"));
    [v7 updateDevicePaymentApplicationsWithSecureElementIdentifiers:v15];

    goto LABEL_15;
  }

  if (v9 == (id)1) {
    goto LABEL_11;
  }
  char v32 = 1;
LABEL_15:
  int v75 = 0LL;
  uint64_t v76 = &v75;
  uint64_t v77 = 0x2020000000LL;
  __int16 v78 = 0;
  id v69 = 0LL;
  __int128 v70 = &v69;
  id v71 = 0x3032000000LL;
  id v72 = sub_10011BCF0;
  uint64_t v73 = sub_10011BD00;
  __int128 v74 = 0LL;
  uint64_t v63 = 0LL;
  __int128 v64 = &v63;
  int v65 = 0x3032000000LL;
  uint64_t v66 = sub_10011BCF0;
  uint64_t v67 = sub_10011BD00;
  __int128 v68 = 0LL;
  uint64_t v57 = 0LL;
  uint64_t v58 = &v57;
  uint64_t v59 = 0x3032000000LL;
  id v60 = sub_10011BCF0;
  __int128 v61 = sub_10011BD00;
  id v62 = 0LL;
  __int128 v54 = 0LL;
  uint64_t v55 = &v54;
  uint64_t v56 = 0x2020000000LL;
  __int128 v48 = 0LL;
  uint64_t v49 = &v48;
  uint64_t v50 = 0x3032000000LL;
  __int16 v51 = sub_10011BCF0;
  uint64_t v52 = sub_10011BD00;
  uint64_t v53 = 0LL;
  database = self->_database;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472LL;
  v36[2] = sub_10011CA54;
  v36[3] = &unk_100644E50;
  v36[4] = self;
  id v37 = v12;
  id v17 = v7;
  __int128 v38 = v17;
  id v41 = &v54;
  uint64_t v33 = v11;
  __int128 v39 = v33;
  id v40 = v35;
  id v42 = &v48;
  id v43 = &v63;
  id v44 = &v57;
  __int128 v45 = &v69;
  __int128 v18 = v37;
  __int128 v46 = &v75;
  __int128 v47 = a5;
  sub_1002CCC5C((uint64_t)database, v36);
  uint64_t v19 = *((unsigned __int8 *)v76 + 24);
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  id v22 = os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  if (v19)
  {
    if (v22)
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int16 v80 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "PDDatabaseManager: inserted pass %@.",  buf,  0xCu);
    }

    if (v64[5])
    {
      id WeakRetained = objc_loadWeakRetained((id *)&self->_notificationServicesDelegate);
      [WeakRetained handleInsertionOfPass:v17 withNotificationService:v64[5]];
    }

    if (v58[5])
    {
      id v24 = objc_loadWeakRetained((id *)&self->_notificationServicesDelegate);
      [v24 handleInsertionOfPass:v17 withNotificationService:v58[5]];
    }

    if (v70[5])
    {
      id v25 = objc_loadWeakRetained((id *)&self->_webServicesDelegate);
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v17 serialNumber]);
      id v27 = (void *)objc_claimAutoreleasedReturnValue([v17 authenticationToken]);
      [v25 handleInsertion:v26 authToken:v27 webService:v70[5] pushEnabled:*((unsigned __int8 *)v55 + 24) source:a5];
    }

    if (v9 == (id)1)
    {
      if (v32)
      {
        -[PDDatabaseManager _applyDemoPaymentTransactionsToPass:](self, "_applyDemoPaymentTransactionsToPass:", v17);
        -[PDDatabaseManager _applyDemoFelicaAppletStateToPass:](self, "_applyDemoFelicaAppletStateToPass:", v17);
      }

      id v28 = objc_loadWeakRetained((id *)&self->_paymentServicesDelegate);
      [v28 handleInsertionForPaymentPass:v17];

      uint64_t v29 = objc_loadWeakRetained((id *)&self->_delegate);
      __int16 v30 = objc_alloc_init(&OBJC_CLASS___NSSet);
      [v29 paymentPass:v17 didUpdatePaymentApplications:v30 toPaymentApplications:v49[5]];
    }

    __int16 v13 = *((_BYTE *)v76 + 24) != 0;
  }

  else
  {
    if (v22)
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int16 v80 = v18;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "PDDatabaseManager: failed to insert pass %@.",  buf,  0xCu);
    }

    __int16 v13 = 0;
  }

  _Block_object_dispose(&v48, 8);
  _Block_object_dispose(&v54, 8);
  _Block_object_dispose(&v57, 8);

  _Block_object_dispose(&v63, 8);
  _Block_object_dispose(&v69, 8);

  _Block_object_dispose(&v75, 8);
  uint64_t v8 = v35;
LABEL_33:

  return v13;
}

      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v4 countFinancingPlanStates]);
      uint64_t v14 = +[PayLaterFinancingPlan countOfFinancingPlansForEndpointMetadataPID:financingPlanStates:inDatabase:]( &OBJC_CLASS___PayLaterFinancingPlan,  "countOfFinancingPlansForEndpointMetadataPID:financingPlanStates:inDatabase:",  v10,  v13,  self->_database);

      [v7 setFinancingPlanCount:v14];
      goto LABEL_12;
    }

      goto LABEL_12;
    }

    if (!-[PDAccessPassSharingIDSService isEndpoint:forSameDeviceIn:]( self->_idsService,  "isEndpoint:forSameDeviceIn:",  v7,  v10))
    {
      NSErrorUserInfoKey v11 = PKLogFacilityTypeGetObject(34LL);
      uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v17 = 0;
        __int16 v13 = "Received IDS message, but existing channel is for different device. Ignoring message.";
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, v17, 2u);
        goto LABEL_11;
      }

      goto LABEL_11;
    }
  }

  else
  {
    -[PDDatabaseManager insertSharingEndpoint:](self->_databaseManager, "insertSharingEndpoint:", v7);
  }

  databaseManager = self->_databaseManager;
  __int128 v18 = v6;
  id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v18, 1LL));
  -[PDDatabaseManager insertOrUpdateSharingMessages:storePayloads:transportIdentifier:]( databaseManager,  "insertOrUpdateSharingMessages:storePayloads:transportIdentifier:",  v15,  1LL,  v8);

  -[PDSharingChannelManager handleOutstandingShareMessage:endpoint:]( self,  "handleOutstandingShareMessage:endpoint:",  v6,  v7);
LABEL_12:
}

    __int128 v18 = 0;
    goto LABEL_12;
  }

  if (v17)
  {
    id v21 = 138412290;
    id v22 = v14;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Received sharing invitation %@",  (uint8_t *)&v21,  0xCu);
  }

  if (!-[PDDatabaseManager addSharingInvitation:](self->_databaseManager, "addSharingInvitation:", v14))
  {
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      id v21 = 138412290;
      id v22 = v10;
      uint64_t v19 = "Failed to add sharing invitation %@ to database";
      goto LABEL_10;
    }

    goto LABEL_11;
  }

  __int128 v18 = 1;
LABEL_12:

  return v18;
}

  uint64_t v8 = 0;
LABEL_12:

  return v8;
}

  id v10 = *(void **)(a1 + 32);
  NSErrorUserInfoKey v11 = *(void **)(*(void *)(a1 + 40) + 88LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1001623D4;
  v13[3] = &unk_100646D90;
  uint64_t v14 = v4;
  id v15 = v10;
  uint64_t v16 = *(id *)(a1 + 48);
  id v17 = *(id *)(a1 + 56);
  uint64_t v12 = v4;
  [v11 performHandlerOnSharedWebServiceQueue:v13];
}

    goto LABEL_12;
  }

  if ((isKindOfClass & 1) != 0)
  {
    NSErrorUserInfoKey v11 = (void (**)(void, void, void))objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKey:]( self->_taskToHandlerMap,  "objectForKey:",  v15));
    if (v11)
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 passesData]);
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v7 error]);
      ((void (**)(void, void *, void *))v11)[2](v11, v12, v13);

LABEL_8:
      goto LABEL_11;
    }

    goto LABEL_11;
  }

  if (v18)
  {
    __int128 v39 = (void *)objc_claimAutoreleasedReturnValue( -[PDCloudStoreContainer _cannotPerformActionErrorWithFailureReason:]( self,  "_cannotPerformActionErrorWithFailureReason:",  v38));
    (*((void (**)(id, void, void *))v18 + 2))(v18, 0LL, v39);
LABEL_13:
  }
}
}
}

    goto LABEL_12;
  }

  if (!-[PDAccountPaymentPastDueUserNotification isValid](v8, "isValid"))
  {
    id v10 = PKLogFacilityTypeGetObject(14LL);
    NSErrorUserInfoKey v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315394;
      uint64_t v19 = "-[PDAccountPaymentPastDueUserNotification initWithPassUniqueIdentifier:account:]";
      char v20 = 2112;
      id v21 = v8;
      uint64_t v12 = "Skipping %s: notification is invalid: %@";
      __int16 v13 = v11;
      uint64_t v14 = 22;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v14);
      goto LABEL_11;
    }

    goto LABEL_11;
  }
}
}
}
}

  return v5;
}
}

    __int16 v13 = 0LL;
    goto LABEL_12;
  }

  __int16 v13 = v5;
LABEL_12:

LABEL_13:
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v13 PKStringForKey:@"updatedTransactionStatus"]);
  id v17 = PKPaymentTransactionStatusFromString();

  if (v17 == -1)
  {
    uint64_t v19 = 0LL;
  }

  else
  {
    v28.receiver = self;
    v28.super_class = (Class)&OBJC_CLASS___PDNotificationServiceTransactionAuthenticationResponse;
    __int128 v18 = -[PDNotificationServiceTransactionAuthenticationResponse init](&v28, "init");
    uint64_t v19 = v18;
    if (v18)
    {
      v18->_updatedTransactionStatus = v17;
      char v20 = (void *)objc_claimAutoreleasedReturnValue([v13 PKStringForKey:@"authenticationError"]);
      v19->_authenticationFailure = PKTransactionAuthenticationFailureFromString();

      id v21 = objc_alloc(&OBJC_CLASS___PKTransactionAuthenticationContext);
      id v22 = (void *)objc_claimAutoreleasedReturnValue([v13 PKDictionaryForKey:@"updatedAuthenticationDetails"]);
      id v23 = -[PKTransactionAuthenticationContext initWithDictionary:](v21, "initWithDictionary:", v22);
      updatedAuthenticationContext = v19->_updatedAuthenticationContext;
      v19->_updatedAuthenticationContext = v23;

      self = (PDNotificationServiceTransactionAuthenticationResponse *)objc_claimAutoreleasedReturnValue( [v13 PKStringForKey:@"signingCertificate"]);
      if (-[PDNotificationServiceTransactionAuthenticationResponse length](self, "length"))
      {
        id v25 = -[NSData initWithBase64EncodedString:options:]( objc_alloc(&OBJC_CLASS___NSData),  "initWithBase64EncodedString:options:",  self,  0LL);
        signingCertificate = v19->_signingCertificate;
        v19->_signingCertificate = v25;
      }
    }

    else
    {
      self = 0LL;
    }
  }

  return v19;
}
}

    id v15 = 0;
    goto LABEL_24;
  }

  if ([v4 type] != (id)1)
  {
    __int128 v18 = PKLogFacilityTypeGetObject(12LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      id v17 = "PDTransitNotificationService: should not send notification because market is not transit";
      goto LABEL_10;
    }

    goto LABEL_11;
  }

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v4 region]);
  uint64_t v33 = 0LL;
  uint64_t v34 = &v33;
  id v35 = 0x2020000000LL;
  __int128 v36 = 0;
  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v4 expressCredentialTypes]);
  __int128 v26 = _NSConcreteStackBlock;
  id v27 = 3221225472LL;
  id v28 = sub_1002ED5A8;
  uint64_t v29 = &unk_100654AD8;
  char v32 = &v33;
  __int16 v30 = v6;
  id v10 = v8;
  __int128 v31 = v10;
  [v9 enumerateObjectsUsingBlock:&v26];
  id v25 = v9;
  if (*((_BYTE *)v34 + 24))
  {
    NSErrorUserInfoKey v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "targetDevice", v9, v26, v27, v28, v29, v30));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 deviceRegion]);
    __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 cellularNetworkRegion]);
    uint64_t v14 = [v4 shouldConsiderCellularRegion];
    if ((PKEqualObjects(v12, v10) & 1) != 0 || v14 && (PKEqualObjects(v13, v10) & 1) != 0)
    {
      id v15 = 1;
    }

    else
    {
      id v21 = PKLogFacilityTypeGetObject(12LL);
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = @"NO";
        *(_DWORD *)__int128 buf = 138413314;
        __int128 v38 = v4;
        __int128 v39 = 2112;
        if (v14) {
          id v23 = @"YES";
        }
        id v40 = v12;
        id v41 = 2112;
        id v42 = v13;
        id v43 = 2112;
        id v44 = v10;
        __int128 v45 = 2112;
        __int128 v46 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: should not send notification for %@.\n Device region: %@ cellularRegion: %@ marketRegion: %@ shouldConsiderCellularRegion: %@",  buf,  0x34u);
      }

      id v15 = 0;
    }
  }

  else
  {
    uint64_t v19 = PKLogFacilityTypeGetObject(12LL);
    char v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      __int128 v38 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: should not send notification for %@ because it didn't meet threshold",  buf,  0xCu);
    }

    id v15 = *((_BYTE *)v34 + 24) != 0;
  }

  _Block_object_dispose(&v33, 8);
LABEL_24:

  return v15;
}
}
}

  return v6;
}

    uint64_t v29 = [v15 count];
    id v24 = 0LL;
    goto LABEL_12;
  }

  if (a5) {
    goto LABEL_11;
  }
  id v24 = 0LL;
LABEL_13:

  return v24;
}

      ((void (*)(void ***, id, void))v14[2])(v14, v10, 0LL);
      goto LABEL_12;
    }

    if (![v15 requestedAuthenticationMechanisms]
      || [v15 requestedAuthenticationMechanisms] == (id)8)
    {
      id v23 = PKLogFacilityTypeGetObject(28LL);
      __int128 v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Transaction does not have mechanisms needing submission. Not submitting authentication results.",  buf,  2u);
      }

      goto LABEL_11;
    }

    id v24 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager transactionAuthenticationResultForTransactionIdentifier:]( self->_databaseManager,  "transactionAuthenticationResultForTransactionIdentifier:",  v16));
    if ([v24 hasDataForAllRequestedAuthenticationMechanisms])
    {
      -[PDTransactionAuthenticationManager _submitAuthenticationResult:forTransaction:pass:retryForInvalidCertificate:sessionExchangeToken:completion:]( self,  "_submitAuthenticationResult:forTransaction:pass:retryForInvalidCertificate:sessionExchangeToken:completion:",  v24,  v10,  v11,  1LL,  v12,  v14);
    }

    else
    {
      id v25 = PKLogFacilityTypeGetObject(28LL);
      __int128 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v34 = v24;
        id v35 = 2112;
        __int128 v36 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Transaction authentication does not have results for all requested mechanisms. Not submitting authentication r esults %@ with context %@.",  buf,  0x16u);
      }

      ((void (*)(void ***, id, void))v14[2])(v14, v10, 0LL);
    }
  }

  else
  {
    id v37 = NSDebugDescriptionErrorKey;
    __int128 v38 = @"No pass or transction to submit authentication result for";
    id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v38,  &v37,  1LL,  v27,  v28,  v29,  v30,  v31));
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  1LL,  v15));
    ((void (*)(void ***, void, void *))v14[2])(v14, 0LL, v16);
  }

  return (char)v7;
}
}
}

  return v7;
}

  return v7;
}

  return v7;
}

  return v8;
}

  return v8;
}
}

        uint64_t v8 = self->_error;
        p_error = &self->_error;
        *((_BYTE *)p_error - 39) = 0;
        if (!v8)
        {
LABEL_12:
          __int128 v9 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKRulesErrorDomain,  7LL,  0LL));
          id v10 = *p_error;
          *p_error = (NSError *)v9;

          uint64_t v4 = v12;
        }

        break;
    }
  }
}
}

      id v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10) {
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
      goto LABEL_5;
    }

    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }

void sub_1000343C4(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v18 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Device check in requested reregister for: %@",  buf,  0xCu);
  }

  id v5 = (void *)PDOSTransactionCreate("PDPaymentWebServiceCoordinator.check_in.re_register");
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedWebServiceContext]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 regions]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:*(void *)(a1 + 32)]);

  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 brokerURL]);
  [*(id *)(a1 + 48) addDiagnosticReason:@"Registering for device check in"];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100034570;
  void v12[3] = &unk_10063B418;
  id v13 = v5;
  id v10 = *(void **)(a1 + 40);
  id v14 = *(id *)(a1 + 48);
  id v15 = @"Registering for device check in";
  id v16 = *(id *)(a1 + 56);
  id v11 = v5;
  objc_msgSend(v10, "_queue_registerDeviceAtBrokerURL:completion:", v9, v12);
}

void sub_100034570(uint64_t a1, char a2, void *a3)
{
  id v8 = a3;
  [*(id *)(a1 + 40) removeDiagnosticReason:*(void *)(a1 + 48)];
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    if ((a2 & 1) != 0)
    {
      BOOL v6 = 1LL;
    }

    else if (v8)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 domain]);
      else {
        BOOL v6 = 0LL;
      }

      uint64_t v5 = *(void *)(a1 + 56);
    }

    else
    {
      BOOL v6 = 0LL;
    }

    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v6);
  }
}

uint64_t sub_10003462C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100034640(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v18 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Device check in requested registration update for: %@",  buf,  0xCu);
  }

  uint64_t v5 = (void *)PDOSTransactionCreate("PDPaymentWebServiceCoordinator.check_in.register");
  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedWebServiceContext]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 regions]);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 objectForKey:*(void *)(a1 + 32)]);

  __int128 v9 = (void *)objc_claimAutoreleasedReturnValue([v8 brokerURL]);
  [*(id *)(a1 + 48) addDiagnosticReason:@"Updating registration for device check in"];
  id v10 = *(void **)(a1 + 48);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000347EC;
  void v12[3] = &unk_10063B490;
  id v13 = v5;
  id v14 = v10;
  id v15 = @"Updating registration for device check in";
  id v16 = *(id *)(a1 + 56);
  id v11 = v5;
  [v10 updateRegistrationDataAtBrokerURL:v9 completion:v12];
}

void sub_1000347EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  [*(id *)(a1 + 40) removeDiagnosticReason:*(void *)(a1 + 48)];
  uint64_t v5 = *(void *)(a1 + 56);
  if (v5)
  {
    if (a2 == 1)
    {
      BOOL v6 = 1LL;
    }

    else if (v8)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 domain]);
      else {
        BOOL v6 = 0LL;
      }

      uint64_t v5 = *(void *)(a1 + 56);
    }

    else
    {
      BOOL v6 = 0LL;
    }

    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v6);
  }
}

void sub_1000348AC(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Device check in requested configuration update for: %@",  buf,  0xCu);
  }

  uint64_t v5 = (void *)PDOSTransactionCreate("PDPaymentWebServiceCoordinator.check_in.configure");
  [*(id *)(a1 + 40) addDiagnosticReason:@"Configuring web service for device check in"];
  BOOL v6 = *(void **)(a1 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100034A00;
  v8[3] = &unk_10063B490;
  id v9 = v5;
  id v10 = v6;
  id v11 = @"Configuring web service for device check in";
  id v12 = *(id *)(a1 + 48);
  id v7 = v5;
  [v6 configurePaymentServiceWithCompletion:v8];
}

uint64_t sub_100034A00(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, a2 == 1);
  }
  return result;
}

void sub_100034B04(uint64_t a1)
{
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebServiceContext]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100034BA0;
  v6[3] = &unk_10063B4B8;
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  id v7 = v3;
  uint64_t v8 = v4;
  [v5 atomicallyUpdateRegionWithIdentifier:v2 updateBlock:v6];
  [*(id *)(*(void *)(a1 + 32) + 48) archiveContext:v5];
}

id sub_100034BA0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v4 = a2;
  id v5 = v4;
  if (v3)
  {
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v4 regionBySettingOutstandingCheckInAction:v2 lastDeviceCheckInBuildVersion:v3]);
  }

  else
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([v4 lastDeviceCheckInBuildVersion]);
    BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v5 regionBySettingOutstandingCheckInAction:v2 lastDeviceCheckInBuildVersion:v7]);

    id v5 = (void *)v7;
  }

  return v6;
}

void sub_100034D6C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) type] == (id)1)
  {
    uint64_t v2 = *(void **)(*(void *)(a1 + 40) + 120LL);
    if (v2)
    {
      [v2 invalidate];
      uint64_t v3 = *(void *)(a1 + 40);
      id v4 = *(void **)(v3 + 120);
      *(void *)(v3 + 120) = 0LL;

      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      BOOL v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Provisioning starting, rescheduling consistency check…",  v9,  2u);
      }

      uint64_t v7 = *(void **)(a1 + 40);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  120.0));
      [v7 scheduleConsistencyCheck:v8 pluggedIn:0 backoffLevel:0];
    }
  }

id sub_100035074(uint64_t a1)
{
  return [*(id *)(a1 + 32) _handleDownloadedPass:*(void *)(a1 + 40)];
}

void sub_100035418( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, char a38)
{
}

void sub_100035460(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = *(void **)(v3 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000354FC;
  v7[3] = &unk_10063B508;
  void v7[4] = v3;
  __int128 v6 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v6;
  __int128 v8 = v6;
  [v4 consistencyCheckDeviceCredentialsWithCompletion:v7];
}

void sub_1000354FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) setDeviceCredentials:v3];
  id v4 = *(void **)(*(void *)(a1 + 32) + 296LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000355BC;
  v8[3] = &unk_10063B4E0;
  id v9 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 40);
  id v5 = (id)v7;
  __int128 v10 = v7;
  id v6 = v3;
  [v4 allCredentialsWithCompletion:v8];
}

void sub_1000355BC(void *a1, void *a2)
{
  id v7 = a2;
  if (v7)
  {
    id v3 = (void *)a1[4];
    uint64_t v4 = *(void *)(a1[6] + 8LL);
    id v5 = *(void **)(v4 + 40);
    if (v3)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v3 arrayByAddingObjectsFromArray:v7]);
      [v5 setDeviceCredentials:v6];
    }

    else
    {
      [*(id *)(v4 + 40) setDeviceCredentials:v7];
    }
  }

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_10003571C(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) shouldStartConsistencyCheck];
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      if (*(_BYTE *)(a1 + 56)) {
        id v6 = @"Y";
      }
      else {
        id v6 = @"N";
      }
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412802;
      uint64_t v20 = v7;
      __int16 v21 = 2112;
      id v22 = v6;
      __int16 v23 = 2112;
      uint64_t v24 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Scheduling consistency check for %@. pluggedIn: %@ backoff: %@ ",  buf,  0x20u);
    }

    [*(id *)(a1 + 32) connect];
    if (*(void *)(a1 + 48))
    {
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebServiceContext]);
      __int128 v10 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
      id v13 = _NSConcreteStackBlock;
      uint64_t v14 = 3221225472LL;
      id v15 = sub_100035930;
      id v16 = &unk_1006392B0;
      id v17 = v9;
      id v18 = *(id *)(a1 + 48);
      id v11 = v9;
      dispatch_sync(v10, &v13);
      objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "archiveContext:", v11, v13, v14, v15, v16);
    }

    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  *(void *)(a1 + 40)));
    -[os_log_s setRequireNetworkConnectivity:](v4, "setRequireNetworkConnectivity:", 1LL);
    -[os_log_s setRequireMainsPower:](v4, "setRequireMainsPower:", *(unsigned __int8 *)(a1 + 56));
    PDScheduledActivityRegister(@"PDPaymentWebServiceCoordinator", @"ConsistencyCheck", v4);
  }

  else if (v5)
  {
    uint64_t v12 = *(void *)(a1 + 40);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v20 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Ignoring request to schedule consistency check for %@",  buf,  0xCu);
  }
}

void sub_100035930(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_100035998;
  v2[3] = &unk_10063B530;
  uint64_t v1 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  [v1 atomicallyUpdatePrimaryRegion:v2];
}

id sub_100035998(uint64_t a1, void *a2)
{
  unsigned int v2 = *(void **)(a1 + 32);
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "regionBySettingConsistencyCheckBackoffLevel:", objc_msgSend(v2, "integerValue")));

  return v4;
}

void sub_1000360E4(_Unwind_Exception *a1)
{
}

void sub_10003611C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[5];
  id v9 = *(void **)(a1[4] + 32LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000361DC;
  v13[3] = &unk_10063B580;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v9 markAppletsWithIdentifiersForDeletion:v8 completion:v13];
}

uint64_t sub_1000361DC(void *a1, char a2)
{
  uint64_t v2 = *(void *)(a1[6] + 8LL);
  if (*(_BYTE *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(_BYTE *)(v2 + 24) = v3;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

void sub_100036208(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 232LL));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000362D4;
  v13[3] = &unk_10063B5D0;
  uint64_t v10 = a1[5];
  uint64_t v9 = a1[6];
  id v15 = v7;
  uint64_t v16 = v9;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [WeakRetained requestRegistrationForCredentialWithIdentifier:v10 completion:v13];
}

uint64_t sub_1000362D4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  if (a3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = *(_BYTE *)(v3 + 24) == 0;
  }
  char v5 = !v4;
  *(_BYTE *)(v3 + 24) = v5;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

void sub_100036304(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 232LL));
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pk_setByApplyingBlock:", &stru_10063B610));
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100036430;
  v13[3] = &unk_10063B580;
  uint64_t v10 = *(void *)(a1 + 48);
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [WeakRetained revokeSubcredentials:v9 withCompletion:v13];
}

id sub_1000363EC(id a1, NSString *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = -[PKAppletSubcredential initWithIdentifier:]( objc_alloc(&OBJC_CLASS___PKAppletSubcredential),  "initWithIdentifier:",  v2);

  return v3;
}

uint64_t sub_100036430(void *a1, char a2)
{
  uint64_t v2 = *(void *)(a1[6] + 8LL);
  if (*(_BYTE *)(v2 + 24)) {
    char v3 = a2;
  }
  else {
    char v3 = 0;
  }
  *(_BYTE *)(v2 + 24) = v3;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

void sub_10003645C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[5];
  uint64_t v9 = *(void **)(a1[4] + 296LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10003651C;
  v13[3] = &unk_10063B638;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v9 deleteCredentialsForCredentialIds:v8 completion:v13];
}

uint64_t sub_10003651C(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1[6] + 8LL);
  if (a2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(_BYTE *)(v2 + 24) == 0;
  }
  char v4 = !v3;
  *(_BYTE *)(v2 + 24) = v4;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

void sub_10003654C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[5];
  uint64_t v9 = *(void **)(a1[4] + 296LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_10003660C;
  v13[3] = &unk_10063B638;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v9 activateCredentialsForCredentialIds:v8 completion:v13];
}

uint64_t sub_10003660C(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1[6] + 8LL);
  if (a2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(_BYTE *)(v2 + 24) == 0;
  }
  char v4 = !v3;
  *(_BYTE *)(v2 + 24) = v4;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

void sub_10003663C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[5];
  uint64_t v9 = *(void **)(a1[4] + 296LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000366FC;
  v13[3] = &unk_10063B638;
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v10;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v9 suspendCredentialsForCredentialIds:v8 completion:v13];
}

uint64_t sub_1000366FC(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1[6] + 8LL);
  if (a2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(_BYTE *)(v2 + 24) == 0;
  }
  char v4 = !v3;
  *(_BYTE *)(v2 + 24) = v4;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

void sub_10003672C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(*(void *)(a1 + 32) + 16LL);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) appletIdentifier]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) subcredentialIdentifier]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue( [v8 passUniqueIdentifierWithPaymentApplicationIdentifier:v9 subcredentialIdentifier:v10]);

  if (v11)
  {
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) passWithUniqueIdentifier:v11]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 secureElementPass]);

    id v14 = *(void **)(*(void *)(a1 + 32) + 296LL);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    v18[2] = sub_100036900;
    v18[3] = &unk_10063B638;
    uint64_t v21 = *(void *)(a1 + 48);
    id v20 = v7;
    id v19 = v6;
    [v14 handlePaymentPassUpdateFrom:v13 priorPaymentApplications:0 completion:v18];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 40);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v23 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "uploadISOCredentialsForPaymentApplicationAndSubcredentialIds unable to find pass for %@",  buf,  0xCu);
    }

    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

uint64_t sub_100036900(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1[6] + 8LL);
  if (a2) {
    BOOL v3 = 1;
  }
  else {
    BOOL v3 = *(_BYTE *)(v2 + 24) == 0;
  }
  char v4 = !v3;
  *(_BYTE *)(v2 + 24) = v4;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

uint64_t sub_100036930(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL));
}

id sub_100036C5C(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_queue_coeleaseDeviceCheckInCompletion:", 0);
}

void sub_100036D18(uint64_t a1, int a2)
{
  if (a2)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    _DWORD v6[2] = sub_100036D90;
    v6[3] = &unk_10063B660;
    BOOL v3 = *(void **)(a1 + 32);
    id v4 = *(id *)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    id v7 = v4;
    uint64_t v8 = v5;
    [v3 downloadPassWithCompletion:v6];
  }

void sub_100036D90(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5 && a2)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSFileManager defaultManager](&OBJC_CLASS___NSFileManager, "defaultManager"));
    uint64_t v7 = PKVASPassCacheDirectoryPath();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSURL fileURLWithPath:](&OBJC_CLASS___NSURL, "fileURLWithPath:", v8));

    [v6 createDirectoryAtURL:v9 withIntermediateDirectories:1 attributes:0 error:0];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 URLByAppendingPathComponent:v10 isDirectory:0]);

    id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 URLByAppendingPathExtension:PKRawPassExtension]);
    id v13 = (void *)objc_claimAutoreleasedReturnValue([v5 dataAccessor]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 fileURL]);
    [v6 removeItemAtURL:v12 error:0];
    if ([v6 copyItemAtURL:v14 toURL:v12 error:0])
    {
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) merchant]);
      uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 identifier]);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 hexEncoding]);

      id v18 = objc_alloc(&OBJC_CLASS___PDWalletValueAddedServiceTransactionUserNotification);
      id v19 = (void *)objc_claimAutoreleasedReturnValue([v5 localizedDescription]);
      id v20 = -[PDWalletValueAddedServiceTransactionUserNotification initWithMerchantIdentifier:localizedPassDescription:passUniqueIdentifier:]( v18,  "initWithMerchantIdentifier:localizedPassDescription:passUniqueIdentifier:",  v17,  v19,  v10);

      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 248LL));
      [WeakRetained insertUserNotification:v20];

      id v22 = *(void **)(a1 + 32);
      uint64_t v23 = *(void **)(*(void *)(a1 + 40) + 16LL);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v22 merchant]);
      [v23 valueAddedMerchantWasPresented:v24];
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(2LL);
      __int128 v26 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v27 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v26,  OS_LOG_TYPE_DEFAULT,  "Couldn't copy the VAS pass to our cache",  v27,  2u);
      }
    }
  }
}

void sub_100037064(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___PKPaymentNotificationActionRequest);
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) PKStringForKey:@"action"]);
  [v2 setAction:v3];

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) PKStringForKey:@"requestId"]);
  [v2 setRequestID:v4];
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedWebService]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_100037148;
  v6[3] = &unk_10063B6B0;
  void v6[4] = *(void *)(a1 + 40);
  [v5 performNotificationActionRequest:v2 completion:v6];
}

void sub_100037148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == 1 && a3 && !a4)
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_userNotificationFromResponse:"));
    if (v6)
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 248LL));
      [WeakRetained insertUserNotification:v6];
    }
  }

void sub_100037594(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_100037604;
  v2[3] = &unk_1006392B0;
  uint64_t v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  objc_msgSend(v3, "_queue_setupBackgroundWebServiceWithCompletion:", v2);
}

void sub_100037604(uint64_t a1)
{
  id v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 128LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  _DWORD v6[2] = sub_10003767C;
  v6[3] = &unk_1006392B0;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 32);
  id v7 = v4;
  uint64_t v8 = v5;
  dispatch_async(v3, v6);
}

void sub_10003767C(uint64_t a1)
{
  uint64_t v2 = PDPaymentWebServicePushTopicsNeedingUpdate();
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = v3;
  if (v3) {
    id v5 = v3;
  }
  else {
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
  }
  id v6 = v5;

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 setByAddingObject:*(void *)(a1 + 32)]);
  PDSetPaymentWebServicePushTopicsNeedingUpdate();

  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)__int128 buf = 138412290;
    uint64_t v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Fetching passes if necessary for push topic %@.",  buf,  0xCu);
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) sharedWebService]);
  id v12 = *(void **)(a1 + 32);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  v14[2] = sub_1000377F0;
  v14[3] = &unk_10063B6D8;
  id v15 = v12;
  id v16 = v11;
  id v13 = v11;
  [v13 getHasBackgroundDownloadTaskPassesForPushTopic:v15 completion:v14];
}

void sub_1000377F0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = PDPaymentWebServicePushTopicsNeedingUpdate();
  id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  unsigned int v8 = [v7 containsObject:*(void *)(a1 + 32)];
  unsigned int v9 = [v7 containsObject:*(void *)(a1 + 32)];
  if (v9) {
    BOOL v10 = a2 == 0;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    [v5 timeIntervalSinceNow];
    if (fabs(v14) <= 60.0) {
      goto LABEL_9;
    }
LABEL_7:
    uint64_t v11 = PDPaymentWebServicePushTopicsNeedingUpdate();
    id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    id v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "pk_setByRemovingObject:", *(void *)(a1 + 32)));
    PDSetPaymentWebServicePushTopicsNeedingUpdate();

    [*(id *)(a1 + 40) backgroundDownloadPassesForPushTopic:*(void *)(a1 + 32) sinceLastUpdatedTag:1];
    goto LABEL_14;
  }

  if (v9) {
    goto LABEL_7;
  }
LABEL_9:
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = @"NO";
    int v19 = 138412802;
    if (v8) {
      uint64_t v18 = @"YES";
    }
    uint64_t v20 = v17;
    __int16 v21 = 2112;
    id v22 = v18;
    __int16 v23 = 2112;
    id v24 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Not background downloading passes for push topic %@. Needs update: %@, last request date %@",  (uint8_t *)&v19,  0x20u);
  }

LABEL_14:
}

id sub_100037B3C(uint64_t a1, void *a2)
{
  return _[a2 deprovisionForRequest:*(void *)(a1 + 32) completion:0];
}

void sub_100037C5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((objc_opt_respondsToSelector(v3, "paymentWebServiceCoordinatorWebServiceDidChange:") & 1) != 0) {
    [v3 paymentWebServiceCoordinatorWebServiceDidChange:*(void *)(a1 + 32)];
  }
}

void sub_100037D94(id a1, BOOL a2, NSError *a3)
{
  BOOL v4 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = @"NO";
    if (v4) {
      id v7 = @"YES";
    }
    int v8 = 138412546;
    unsigned int v9 = v7;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Completed sending ownership tokens with success: %@, error %@",  (uint8_t *)&v8,  0x16u);
  }
}

id sub_100037F20(void *a1)
{
  return _[*(id *)(a1[4] + 200) processSafariCredentialEligibility:a1[5] completion:a1[6]];
}

void sub_100037F98(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebService]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 context]);
  unsigned __int8 v4 = [v3 isRegistered];

  if ((v4 & 1) != 0)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebServiceContext]);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 primaryRegion]);
    uint64_t v7 = PKDeviceBuildVersion();
    int v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v6 lastDeviceUpgradeTaskBuildVersion]);
    __int16 v10 = (void *)v9;
    if (v8 && v9)
    {
      id v11 = [v8 compare:v9 options:1];
      uint64_t v12 = PDUpgradeTasksVersion();
      if (!v11 || v12 >= 2)
      {
        if (!v11)
        {
          [*(id *)(a1 + 32) unscheduleDeviceUpgradeTaskActivity];
LABEL_18:

          return;
        }

void sub_1000382A0(uint64_t a1)
{
  uint64_t Criteria = PDScheduledActivityGetCriteria(@"PDPaymentWebServiceCoordinator", @"DeviceUpgradeTasks");
  id v3 = (void *)objc_claimAutoreleasedReturnValue(Criteria);
  if (!v3)
  {
    if (*(_BYTE *)(a1 + 40)) {
      double v7 = (double)arc4random_uniform(0x15180u);
    }
    else {
      double v7 = 0.0;
    }
    double v8 = (double)arc4random_uniform(0xE10u) + 82800.0;
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceNow:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceNow:",  v7));
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria maintenanceActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "maintenanceActivityCriteriaWithStartDate:",  v5));
    [v6 setRequireNetworkConnectivity:1];
    [v6 setRepeating:1];
    [v6 setRepeatInterval:v8];
    [v6 setReason:@"Device Upgrade Tasks"];
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    __int16 v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v6 debugDescription]);
      int v12 = 138412290;
      uint64_t v13 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "passd scheduling device upgrade tasks: %@",  (uint8_t *)&v12,  0xCu);
    }

    PDScheduledActivityRegister(@"PDPaymentWebServiceCoordinator", @"DeviceUpgradeTasks", v6);
    goto LABEL_10;
  }

  uint64_t v4 = PKLogFacilityTypeGetObject(6LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v3 debugDescription]);
    int v12 = 138412290;
    uint64_t v13 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Device upgrade tasks already scheduled: %@",  (uint8_t *)&v12,  0xCu);
LABEL_10:
  }
}

uint64_t sub_100038524(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unscheduling device upgrade tasks", v5, 2u);
  }

  [*(id *)(a1 + 32) connect];
  return PDScheduledActivityRemove(@"PDPaymentWebServiceCoordinator", @"DeviceUpgradeTasks");
}

PKPaymentWebServiceRegion *__cdecl sub_10003860C(id a1, PKPaymentWebServiceRegion *a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = PKDeviceBuildVersion();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  id v5 = (void *)objc_claimAutoreleasedReturnValue( -[PKPaymentWebServiceRegion regionBySettingLastDeviceUpgradeTaskBuildVersion:]( v2,  "regionBySettingLastDeviceUpgradeTaskBuildVersion:",  v4));

  return (PKPaymentWebServiceRegion *)v5;
}

void sub_1000386B8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) sharedWebServiceContext]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 primaryRegion]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 regionCode]);

  if ([v2 contextMeetsDeviceUpgradeTasksEnablementThresholdForRegion:v4])
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    id inited = objc_initWeak(location, *(id *)(a1 + 32));
    uint64_t v7 = PDUpgradeTasksVersion(inited);
    uint64_t v8 = v7;
    if (v7 <= 0)
    {
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472LL;
      v16[2] = sub_100038934;
      v16[3] = &unk_10063B7E0;
      objc_copyWeak(v17, location);
      v17[1] = (id)1;
      [v5 addOperation:v16];
      objc_destroyWeak(v17);
    }

    if (PDUpgradeTasksVersion(v7) > 1)
    {
      if (v8 >= 1)
      {
        objc_msgSend(*(id *)(a1 + 32), "_queue_completeDeviceUpgradeTasks");
LABEL_11:
        objc_destroyWeak(location);
        goto LABEL_12;
      }
    }

    else
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      v14[2] = sub_100038C48;
      v14[3] = &unk_10063B7E0;
      objc_copyWeak(v15, location);
      v15[1] = (id)2;
      [v5 addOperation:v14];
      objc_destroyWeak(v15);
    }

    __int16 v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_100038F78;
    void v12[3] = &unk_10063B830;
    objc_copyWeak(&v13, location);
    id v11 = [v5 evaluateWithInput:v10 completion:v12];

    objc_destroyWeak(&v13);
    goto LABEL_11;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v5 = (id)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(location[0]) = 0;
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_DEFAULT,  "Skipping Device Upgrade Tasks because the threshold has been exceeded",  (uint8_t *)location,  2u);
  }

void sub_1000388F4(_Unwind_Exception *a1)
{
}

void sub_100038934(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v9 = WeakRetained;
  if (WeakRetained)
  {
    __int16 v10 = WeakRetained[16];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100038A28;
    block[3] = &unk_10063B7B8;
    void block[4] = WeakRetained;
    objc_copyWeak(v14, (id *)(a1 + 32));
    v14[1] = *(id *)(a1 + 40);
    id v13 = v7;
    id v12 = v6;
    dispatch_async(v10, block);

    objc_destroyWeak(v14);
  }
}

void sub_100038A28(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100038AF0;
  v3[3] = &unk_10063B790;
  objc_copyWeak(v6, (id *)(a1 + 56));
  v6[1] = *(id *)(a1 + 64);
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  objc_msgSend(v2, "_queue_performContactInformationFetchTaskWithCompletion:", v3);

  objc_destroyWeak(v6);
}

void sub_100038ADC(_Unwind_Exception *a1)
{
}

void sub_100038AF0(uint64_t a1, char a2)
{
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 48));
  id v5 = WeakRetained;
  if (WeakRetained)
  {
    id v6 = WeakRetained[16];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_100038BA4;
    v7[3] = &unk_10063B768;
    char v11 = a2;
    uint64_t v10 = *(void *)(a1 + 56);
    id v9 = *(id *)(a1 + 40);
    id v8 = *(id *)(a1 + 32);
    dispatch_async(v6, v7);
  }
}

uint64_t sub_100038BA4(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Successfully fetched contact information in device upgrade task",  v5,  2u);
    }

    PDSetUpgradeTasksVersion(*(void *)(a1 + 48));
    PDSetUpgradeTasksRetryCount(0LL);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100038C48(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  char v11 = WeakRetained;
  if (WeakRetained)
  {
    if ([*((id *)WeakRetained + 2) hasAccountServicingEventsWithStatus:0])
    {
      id v12 = (void *)v11[11];
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      id v15[2] = sub_100038DDC;
      v15[3] = &unk_10063B790;
      objc_copyWeak(v18, (id *)(a1 + 32));
      v18[1] = *(id *)(a1 + 40);
      id v17 = v9;
      id v16 = v8;
      [v12 refetchAccountEventsWithUnknownServicingStatusWithCompletion:v15];

      objc_destroyWeak(v18);
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      double v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "No account servicing events with unknown status to re-fetch, completing device upgrade task successfully",  buf,  2u);
      }

      PDSetUpgradeTasksVersion(*(void *)(a1 + 40));
      PDSetUpgradeTasksRetryCount(0LL);
      (*((void (**)(id, id, void))v9 + 2))(v9, v8, 0LL);
    }
  }
}

void sub_100038DC8(_Unwind_Exception *a1)
{
}

void sub_100038DDC(id *a1, char a2)
{
  id v4 = a1 + 6;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained(a1 + 6);
  id v6 = WeakRetained;
  if (WeakRetained)
  {
    id v7 = WeakRetained[16];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100038EB8;
    block[3] = &unk_10063B808;
    objc_copyWeak(v11, v4);
    char v12 = a2;
    v11[1] = a1[7];
    id v10 = a1[5];
    id v9 = a1[4];
    dispatch_async(v7, block);

    objc_destroyWeak(v11);
  }
}

void sub_100038EB8(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    if (*(_BYTE *)(a1 + 64))
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v5 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Successfully re-fetched account servicing events with unknown status in device upgrade task",  v5,  2u);
      }

      PDSetUpgradeTasksVersion(*(void *)(a1 + 56));
      PDSetUpgradeTasksRetryCount(0LL);
    }

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100038F78(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id WeakRetained = (dispatch_queue_s **)objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    id v8 = WeakRetained[16];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    id v9[2] = sub_100039010;
    v9[3] = &unk_1006392B0;
    id v10 = v5;
    char v11 = v7;
    dispatch_async(v8, v9);
  }
}

id sub_100039010(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isCanceled] & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      id v9 = "Successfully completed all device upgrade tasks.";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v13, 2u);
    }

void sub_100039270(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) context]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_100039318;
  v3[3] = &unk_10063B530;
  id v4 = *(id *)(a1 + 40);
  [v2 atomicallyUpdatePrimaryRegion:v3];
  [*(id *)(*(void *)(a1 + 32) + 48) archiveContext:v2];
}

id sub_100039318(uint64_t a1, void *a2)
{
  return [a2 regionBySettingLastDeviceUpgradeTaskBuildVersion:*(void *)(a1 + 32)];
}

void sub_100039760(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

id sub_100039910(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_updateScheduledActivityIfNeccessary");
}

id sub_100039A80(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_updateScheduledActivityIfNeccessary");
}

id sub_100039AE0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_updateScheduledActivityIfNeccessary");
}

id sub_100039B40(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_updateScheduledActivityIfNeccessary");
}

void sub_100039BC4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) associatedAccountServiceAccountIdentifier]);

  if (v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDAccountStatementMetadataProcessor passAdded",  v5,  2u);
    }

    objc_msgSend(*(id *)(a1 + 40), "_queue_updateScheduledActivityIfNeccessary");
  }

void sub_100039CCC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) associatedAccountServiceAccountIdentifier]);

  if (v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDAccountStatementMetadataProcessor passRemoved",  v5,  2u);
    }

    objc_msgSend(*(id *)(a1 + 40), "_queue_updateScheduledActivityIfNeccessary");
  }

void sub_100039E00(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Statement metadata process request starting %@",  (uint8_t *)&buf,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
  id v6 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  *(void *)&__int128 buf = 0LL;
  *((void *)&buf + 1) = &buf;
  uint64_t v52 = 0x3032000000LL;
  uint64_t v53 = sub_10003A23C;
  __int128 v54 = sub_10003A24C;
  id v55 = 0LL;
  v49[0] = 0LL;
  v49[1] = v49;
  v49[2] = 0x3032000000LL;
  v49[3] = sub_10003A23C;
  v49[4] = sub_10003A24C;
  id v50 = 0LL;
  v47[0] = 0LL;
  v47[1] = v47;
  v47[2] = 0x3032000000LL;
  v47[3] = sub_10003A23C;
  v47[4] = sub_10003A24C;
  id v48 = 0LL;
  v45[0] = 0LL;
  v45[1] = v45;
  v45[2] = 0x3032000000LL;
  v45[3] = sub_10003A23C;
  void v45[4] = sub_10003A24C;
  id v46 = 0LL;
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472LL;
  v42[2] = sub_10003A254;
  v42[3] = &unk_10063B5A8;
  void v42[4] = *(void *)(a1 + 40);
  id v7 = v5;
  id v43 = v7;
  p___int128 buf = &buf;
  [v6 addOperation:v42];
  v37[0] = _NSConcreteStackBlock;
  v37[1] = 3221225472LL;
  v37[2] = sub_10003A428;
  v37[3] = &unk_10063B920;
  id v40 = &buf;
  int8x16_t v16 = *(int8x16_t *)(a1 + 32);
  id v8 = (id)v16.i64[0];
  int8x16_t v38 = vextq_s8(v16, v16, 8uLL);
  id v9 = v7;
  id v39 = v9;
  id v41 = v47;
  [v6 addOperation:v37];
  v32[0] = _NSConcreteStackBlock;
  v32[1] = 3221225472LL;
  v32[2] = sub_10003AA10;
  v32[3] = &unk_10063B948;
  v32[4] = *(void *)(a1 + 40);
  uint64_t v34 = v47;
  id v10 = v9;
  id v33 = v10;
  id v35 = v45;
  __int128 v36 = &buf;
  [v6 addOperation:v32];
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_10003ACD4;
  v27[3] = &unk_10063B9C0;
  v27[4] = *(void *)(a1 + 40);
  uint64_t v29 = &buf;
  __int16 v30 = v47;
  __int128 v31 = v45;
  id v11 = v10;
  id v28 = v11;
  [v6 addOperation:v27];
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472LL;
  v24[2] = sub_10003B67C;
  v24[3] = &unk_10063BA38;
  __int128 v26 = v47;
  int8x16_t v17 = *(int8x16_t *)(a1 + 32);
  id v12 = (id)v17.i64[0];
  int8x16_t v25 = vextq_s8(v17, v17, 8uLL);
  [v6 addOperation:v24];
  int v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  id v18[2] = sub_10003BA94;
  v18[3] = &unk_10063BA60;
  id v14 = v11;
  id v19 = v14;
  int v21 = v47;
  id v22 = &buf;
  id v20 = *(id *)(a1 + 48);
  __int16 v23 = v49;
  id v15 = [v6 evaluateWithInput:v13 completion:v18];

  _Block_object_dispose(v45, 8);
  _Block_object_dispose(v47, 8);

  _Block_object_dispose(v49, 8);
  _Block_object_dispose(&buf, 8);
}

void sub_10003A1F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

uint64_t sub_10003A23C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10003A24C(uint64_t a1)
{
}

void sub_10003A254(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  id v10 = *(void **)(v8 + 16);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  id v14[2] = sub_10003A314;
  v14[3] = &unk_10063B8A8;
  uint64_t v11 = a1[6];
  id v16 = v7;
  uint64_t v17 = v11;
  void v14[4] = v8;
  id v15 = v6;
  id v12 = v6;
  id v13 = v7;
  [v10 accountWithIdentifier:v9 completion:v14];
}

void sub_10003A314(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(dispatch_queue_s **)(v4 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10003A3D4;
  block[3] = &unk_10063B880;
  id v10 = v3;
  uint64_t v11 = v4;
  __int128 v8 = *(_OWORD *)(a1 + 48);
  id v6 = (id)v8;
  __int128 v13 = v8;
  id v12 = *(id *)(a1 + 40);
  id v7 = v3;
  dispatch_async(v5, block);
}

uint64_t sub_10003A3D4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 56) + 16))( *(void *)(a1 + 56),  *(void *)(a1 + 48),  objc_msgSend( *(id *)(a1 + 40),  "_queue_isAccountEligible:",  *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)) ^ 1);
}

void sub_10003A428(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = PKAccountTypeToString([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) type]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) statementIdentifier]);

  if (v10)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) statementIdentifier]);
      *(_DWORD *)__int128 buf = 138412290;
      id v39 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Using statement metadata from request to process %@",  buf,  0xCu);
    }

    uint64_t v14 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) statementIdentifier]);
  }

  else
  {
    uint64_t v14 = objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(*(void *)(a1 + 32) + 8),  "latestStatementIdentifierThatNeedsMetadataProcessingForAccountIdentifier:accountType:maxProcessedAttemptCount:",  *(void *)(a1 + 48),  objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), "type"),  3));
  }

  id v15 = (void *)v14;
  uint64_t v16 = PKLogFacilityTypeGetObject(14LL);
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
  if (v15)
  {
    if (v18)
    {
      uint64_t v19 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412802;
      id v39 = v15;
      __int16 v40 = 2112;
      uint64_t v41 = v19;
      __int16 v42 = 2112;
      id v43 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Statement identifier that needs processing: %@, for account: %@, type: %@",  buf,  0x20u);
    }

    uint64_t v20 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 8) accountStatementMetadataForStatementIdentifier:v15 accountIdentifier:*(void *)(a1 + 48)]);
    uint64_t v21 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v22 = *(void **)(v21 + 40);
    *(void *)(v21 + 40) = v20;

    if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL))
    {
      v7[2](v7, v6, 0LL);
    }

    else
    {
      id v24 = *(void **)(*(void *)(a1 + 32) + 16LL);
      uint64_t v25 = *(void *)(a1 + 48);
      id v26 = [*(id *)(a1 + 40) reason];
      uint64_t v27 = 1LL;
      if (v26 != (id)1) {
        uint64_t v27 = 2LL;
      }
      if (v26 == (id)2) {
        uint64_t v28 = 3LL;
      }
      else {
        uint64_t v28 = v27;
      }
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472LL;
      void v31[2] = sub_10003A788;
      void v31[3] = &unk_10063B8F8;
      v31[4] = *(void *)(a1 + 32);
      id v32 = v15;
      id v33 = *(id *)(a1 + 48);
      id v34 = v9;
      __int128 v36 = v7;
      id v29 = v6;
      uint64_t v30 = *(void *)(a1 + 64);
      id v35 = v29;
      uint64_t v37 = v30;
      [v24 updateAccountStatementMetadataForStatementIdentifier:v32 accountIdentifier:v25 trigger:v28 completion:v31];
    }
  }

  else
  {
    if (v18)
    {
      __int16 v23 = *(void **)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412290;
      id v39 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Not processing statement metadata for account %@ since there are no statement identifiers to process",  buf,  0xCu);
    }

    v7[2](v7, v6, 1LL);
  }
}

void sub_10003A788(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10003A89C;
  void v12[3] = &unk_10063B8D0;
  id v13 = v6;
  id v14 = v7;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v19 = *(id *)(a1 + 72);
  id v9 = *(id *)(a1 + 64);
  uint64_t v20 = *(void *)(a1 + 80);
  id v17 = v9;
  id v18 = v5;
  id v10 = v5;
  id v11 = v6;
  dispatch_async(v8, v12);
}

uint64_t sub_10003A89C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(a1 + 48);
      uint64_t v7 = *(void *)(a1 + 56);
      int v11 = 138413058;
      uint64_t v12 = v5;
      __int16 v13 = 2112;
      uint64_t v14 = v6;
      __int16 v15 = 2112;
      uint64_t v16 = v7;
      __int16 v17 = 2112;
      uint64_t v18 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Error getting statement metadata for statement identifier %@, account identifier %@, account type %@. Error %@",  (uint8_t *)&v11,  0x2Au);
    }
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL), *(id *)(a1 + 72));
    uint64_t v8 = PKLogFacilityTypeGetObject(14LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
      int v11 = 138412290;
      uint64_t v12 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Recieved statement metadata %@",  (uint8_t *)&v11,  0xCu);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_10003AA10(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = a4;
  id v10 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
  if (!v10)
  {
LABEL_6:
    v9[2](v9, v8, 1LL);
    goto LABEL_9;
  }

  if ([v10 hasBeenProcessed])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v13 = (void *)a1[5];
      uint64_t v14 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
      int v28 = 138412546;
      id v29 = v13;
      __int16 v30 = 2112;
      uint64_t v31 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Not processing statement metadata for account %@ since it has already been processed %@",  (uint8_t *)&v28,  0x16u);
    }

    goto LABEL_6;
  }

  uint64_t v15 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) itemsMissingFromDevice]);
  uint64_t v16 = *(void *)(a1[7] + 8LL);
  __int16 v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v15;

  if ([*(id *)(*(void *)(a1[7] + 8) + 40) count])
  {
    v9[2](v9, v8, 0LL);
  }

  else
  {
    uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) statementIdentifier]);
    uint64_t v19 = PKLogFacilityTypeGetObject(14LL);
    uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = a1[5];
      uint64_t v22 = PKAccountTypeToString([*(id *)(*(void *)(a1[8] + 8) + 40) type]);
      __int16 v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      int v28 = 138412802;
      id v29 = v18;
      __int16 v30 = 2112;
      uint64_t v31 = v21;
      __int16 v32 = 2112;
      id v33 = v23;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "There are no items missing for statement %@, account identifier %@, account type %@. Marking the statement metad ata items as processed.",  (uint8_t *)&v28,  0x20u);
    }

    uint64_t v24 = objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 8) markStatementMetadataItems:0 asProcessed:1 error:0 statementIdentifier:v18 accountIdentifier:a1[5]]);
    uint64_t v25 = *(void *)(a1[6] + 8LL);
    id v26 = *(void **)(v25 + 40);
    *(void *)(v25 + 40) = v24;

    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
      int v28 = 138412290;
      id v29 = v27;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Updated statement metadata after processing: %@",  (uint8_t *)&v28,  0xCu);
    }

    v9[2](v9, v8, 1LL);
  }

void sub_10003ACD4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v44 = a3;
  id v43 = a4;
  uint64_t v45 = PKPaymentTransactionAccountTypeFromAccountType([*(id *)(*(void *)(a1[6] + 8) + 40) type]);
  __int128 v47 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v46 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[7] + 8) + 40) statementIdentifier]);
  __int128 v57 = 0u;
  __int128 v58 = 0u;
  __int128 v59 = 0u;
  __int128 v60 = 0u;
  obuint64_t j = *(id *)(*(void *)(a1[8] + 8LL) + 40LL);
  id v6 = [obj countByEnumeratingWithState:&v57 objects:v71 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v58;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v58 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(NSMutableArray **)(*((void *)&v57 + 1) + 8LL * (void)i);
        int v11 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray identifier](v10, "identifier"));
        uint64_t v12 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(-[NSMutableArray zoneName](v10, "zoneName"));
        __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray originatorAltDSID](v10, "originatorAltDSID"));
        if (v11) {
          BOOL v14 = v12 == 0LL;
        }
        else {
          BOOL v14 = 1;
        }
        if (v14)
        {
          uint64_t Object = PKLogFacilityTypeGetObject(14LL);
          uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            uint64_t v63 = v10;
            _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "The zoneName or identifier wasnt defined on the item %@",  buf,  0xCu);
          }
        }

        else
        {
          __int16 v17 = *(void **)(a1[4] + 24LL);
          __int128 v70 = v12;
          uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v70,  1LL));
          unsigned __int8 v19 = [v17 hasCachedCloudStoreZoneInApplePayContainerForZoneNames:v18];

          if ((v19 & 1) != 0)
          {
            id v20 = -[NSMutableArray type](v10, "type");
            if (v20 == (id)2)
            {
              uint64_t v21 = (os_log_s *)[[PKCloudStoreZoneQueryConfiguration alloc] initWithTransactionSourceIdentifier:0 accountIdentifier:a1[5] accountType:v45 accountEventIdentifi er:v11 altDSID:v13 zoneName:v12];
LABEL_21:
              uint64_t v16 = v21;
            }

            else
            {
              if (v20 == (id)1)
              {
                uint64_t v21 = (os_log_s *)[[PKCloudStoreZoneQueryConfiguration alloc] initWithTransactionSourceIdentifier:0 accountIdentifier:a1[5] accountType:v45 serviceIdentifier:v11  altDSID:v13 zoneName:v12];
                goto LABEL_21;
              }

              uint64_t v16 = 0LL;
            }

            -[NSMutableArray safelyAddObject:](v47, "safelyAddObject:", v16);
            goto LABEL_24;
          }

          uint64_t v22 = PKLogFacilityTypeGetObject(14LL);
          __int16 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v24 = PKAccountStatementMetadataItemTypeToString(-[NSMutableArray type](v10, "type"));
            uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
            uint64_t v26 = a1[5];
            *(_DWORD *)__int128 buf = 138413058;
            uint64_t v63 = v12;
            __int16 v64 = 2112;
            int v65 = v11;
            __int16 v66 = 2112;
            uint64_t v67 = v25;
            __int16 v68 = 2112;
            uint64_t v69 = v26;
            _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "The zone %@ is not cached on device for identifier %@, type %@, and accountIdentifier %@",  buf,  0x2Au);
          }

          uint64_t v27 = *(void **)(a1[4] + 8LL);
          uint64_t v61 = v10;
          uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v61,  1LL));
          id v28 =  [v27 markStatementMetadataItems:v16 asProcessed:0 error:2 statementIdentifier:v46 accountIdentifier:a1[5]];
        }

void sub_10003B204(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(a1 + 40);
  id v7 = *(dispatch_queue_s **)(v5 + 32);
  block[0] = _NSConcreteStackBlock;
  block[2] = sub_10003B2F4;
  block[3] = &unk_10063B970;
  uint64_t v20 = *(void *)(a1 + 72);
  block[1] = 3221225472LL;
  id v14 = v4;
  uint64_t v15 = v5;
  id v8 = v6;
  uint64_t v9 = *(void *)(a1 + 80);
  id v16 = v8;
  uint64_t v21 = v9;
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 88);
  id v17 = v10;
  uint64_t v22 = v11;
  id v19 = *(id *)(a1 + 64);
  id v18 = *(id *)(a1 + 56);
  id v12 = v4;
  dispatch_async(v7, block);
}

uint64_t sub_10003B2F4(void *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    int v30 = 138412290;
    uint64_t v31 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Completed fetching missing transactions from CloudKit with error: %@",  (uint8_t *)&v30,  0xCu);
  }

  uint64_t v5 = *(void **)(a1[5] + 8LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[10] + 8) + 40) statementIdentifier]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v5 accountStatementMetadataForStatementIdentifier:v6 accountIdentifier:a1[6]]);
  uint64_t v8 = *(void *)(a1[10] + 8LL);
  uint64_t v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v7;

  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(*(void *)(a1[10] + 8LL) + 40LL);
    int v30 = 138412290;
    uint64_t v31 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Statement metadata after CloudKit fetching: %@",  (uint8_t *)&v30,  0xCu);
  }

  uint64_t v11 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[10] + 8) + 40) itemsMissingFromDevice]);
  uint64_t v12 = *(void *)(a1[11] + 8LL);
  __int16 v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v11;

  id v14 = [*(id *)(*(void *)(a1[11] + 8) + 40) count];
  BOOL v15 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(*(void *)(a1[11] + 8LL) + 40LL);
      int v30 = 138412290;
      uint64_t v31 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Missing items after attempting CloudKit fetch and store: %@",  (uint8_t *)&v30,  0xCu);
    }

    uint64_t v17 = objc_claimAutoreleasedReturnValue( [*(id *)(a1[5] + 8) markStatementMetadataItems:*(void *)(*(void *)(a1[11] + 8) + 40) asProcessed:0 error:1 statementIdentifier:a1[7] accountIdentifier:a1[6]]);
    uint64_t v18 = *(void *)(a1[10] + 8LL);
    id v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = *(void *)(*(void *)(a1[10] + 8LL) + 40LL);
      int v30 = 138412290;
      uint64_t v31 = v20;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Marking statement metadata as not processed: %@",  (uint8_t *)&v30,  0xCu);
    }
  }

  else
  {
    if (v15)
    {
      uint64_t v22 = a1[6];
      uint64_t v21 = a1[7];
      uint64_t v23 = PKAccountTypeToString([*(id *)(*(void *)(a1[12] + 8) + 40) type]);
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      int v30 = 138412802;
      uint64_t v31 = v21;
      __int16 v32 = 2112;
      uint64_t v33 = v22;
      __int16 v34 = 2112;
      id v35 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Successfully fetched all missing items from the statement metadata. Account identifier: %@, statement identifier %@, account type %@. Marking the statement metadata as processed.",  (uint8_t *)&v30,  0x20u);
    }

    uint64_t v25 = objc_claimAutoreleasedReturnValue( [*(id *)(a1[5] + 8) markStatementMetadataItems:0 asProcessed:1 error:0 statementIdentifier:a1[7] accountIdentifier:a1[6]]);
    uint64_t v26 = *(void *)(a1[10] + 8LL);
    uint64_t v27 = *(void **)(v26 + 40);
    *(void *)(v26 + 40) = v25;

    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = *(void *)(*(void *)(a1[10] + 8LL) + 40LL);
      int v30 = 138412290;
      uint64_t v31 = v28;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Updated statement metadata after processing: %@",  (uint8_t *)&v30,  0xCu);
    }
  }

  return (*(uint64_t (**)(void))(a1[9] + 16LL))();
}

void sub_10003B67C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) reportForMissingItems]);
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v11)
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v23 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Sending statement metadata report to server: %@",  buf,  0xCu);
    }

    uint64_t v12 = *(void **)(*(void *)(a1 + 32) + 16LL);
    id v13 = [*(id *)(a1 + 40) reason];
    uint64_t v14 = 1LL;
    if (v13 != (id)1) {
      uint64_t v14 = 2LL;
    }
    if (v13 == (id)2) {
      uint64_t v15 = 3LL;
    }
    else {
      uint64_t v15 = v14;
    }
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    id v17[2] = sub_10003B85C;
    v17[3] = &unk_10063BA10;
    uint64_t v16 = *(void *)(a1 + 48);
    void v17[4] = *(void *)(a1 + 32);
    uint64_t v21 = v16;
    id v18 = v8;
    id v20 = v7;
    id v19 = v6;
    [v12 sendAccountReport:v18 trigger:v15 completion:v17];
  }

  else
  {
    if (v11)
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "There is no statement metadata report that needs to be sent to server",  buf,  2u);
    }

    (*((void (**)(id, id, uint64_t))v7 + 2))(v7, v6, 1LL);
  }
}

void sub_10003B85C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(v4 + 32);
  v8[0] = _NSConcreteStackBlock;
  v8[2] = sub_10003B928;
  v8[3] = &unk_10063B9E8;
  uint64_t v14 = *(void *)(a1 + 64);
  v8[1] = 3221225472LL;
  id v9 = v3;
  uint64_t v10 = v4;
  id v11 = v5;
  id v13 = *(id *)(a1 + 56);
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v6, v8);
}

uint64_t sub_10003B928(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138412290;
      uint64_t v16 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Error sending statement metadata report to server: %@",  (uint8_t *)&v15,  0xCu);
    }
  }

  uint64_t v5 = a1[6];
  id v6 = *(void **)(a1[5] + 8LL);
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t v8 = objc_claimAutoreleasedReturnValue([v6 updateStatementMetadataWithReport:v5 reportDate:v7]);
  uint64_t v9 = *(void *)(a1[9] + 8LL);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  uint64_t v11 = PKLogFacilityTypeGetObject(14LL);
  id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = *(void *)(*(void *)(a1[9] + 8LL) + 40LL);
    int v15 = 138412290;
    uint64_t v16 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Updated statement metadata after report sent to server: %@",  (uint8_t *)&v15,  0xCu);
  }

  return (*(uint64_t (**)(void))(a1[8] + 16LL))();
}

void sub_10003BA94(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(14LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = a1[4];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) statementIdentifier]);
    uint64_t v12 = PKAccountTypeToString([*(id *)(*(void *)(a1[7] + 8) + 40) type]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    int v15 = 138412802;
    uint64_t v16 = v10;
    __int16 v17 = 2112;
    id v18 = v11;
    __int16 v19 = 2112;
    id v20 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Completed statement metadata processing: Account identifier: %@, statement identifier %@, account type %@.",  (uint8_t *)&v15,  0x20u);
  }

  uint64_t v14 = a1[5];
  if (v14) {
    (*(void (**)(uint64_t, void, void))(v14 + 16))( v14,  *(void *)(*(void *)(a1[6] + 8LL) + 40LL),  *(void *)(*(void *)(a1[8] + 8LL) + 40LL));
  }
}

LABEL_20:
}

    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( +[PKPayLaterFinancingPlan activeFinancingPlanStates]( &OBJC_CLASS___PKPayLaterFinancingPlan,  "activeFinancingPlanStates"));
    uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterFinancingPlan financingPlansForEndpointMetadataPID:states:transactionStartDate:transactionEndDate:installmentDueOrPaidDateStart:installmentDueOrPaidDateEnd:limit:inDatabase:]( &OBJC_CLASS___PayLaterFinancingPlan,  "financingPlansForEndpointMetadataPID:states:transactionStartDate:transactionEndDate:installmentDue OrPaidDateStart:installmentDueOrPaidDateEnd:limit:inDatabase:",  v10,  v21,  v27,  v26,  v25,  v12,  0LL,  self->_database));

    [v7 setActiveFinancingPlans:v22];
    if ((v11 & 0x20) == 0)
    {
LABEL_10:
      if ((v11 & 0x40) == 0)
      {
LABEL_12:

LABEL_14:
        goto LABEL_15;
      }

  uint64_t v31 = v6;
  return v31;
}
}
}

            uint64_t v16 = 0LL;
LABEL_37:

            goto LABEL_38;
          }

          id v46 = v12;
          __int128 v47 = v17;
          uint64_t v22 = 0;
LABEL_28:
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString stringByAppendingString:](v19, "stringByAppendingString:", @"_TITLE"));
          uint64_t v26 = PKLocalizationKeyForPassType(v25, v6);
          uint64_t v27 = (NSString *)objc_claimAutoreleasedReturnValue(v26);
          uint64_t v28 = PKLocalizedShareableCredentialString(v27);
          uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue(v28);

          uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString stringByAppendingString:](v19, "stringByAppendingString:", @"_BODY"));
          int v30 = PKLocalizationKeyForPassType(v29, v6);
          uint64_t v31 = (NSString *)objc_claimAutoreleasedReturnValue(v30);

          if (v22) {
            __int16 v32 = PKLocalizedShareableCredentialString(v31, @"%@%@", v46, v47);
          }
          else {
            __int16 v32 = PKLocalizedShareableCredentialString(v31, @"%@", v47);
          }
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
          __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([(id)v7 identifier]);
          id v35 = v34;
          id v44 = v31;
          if (v34)
          {
            uint64_t v36 = v34;
          }

          else
          {
            id v37 = objc_claimAutoreleasedReturnValue([v9 identifier]);
            uint64_t v38 = (void *)v37;
            id v39 = &stru_100662310;
            if (v37) {
              id v39 = (__CFString *)v37;
            }
            uint64_t v36 = v39;
          }

          uint64_t v40 = objc_alloc(&OBJC_CLASS___PDShareUpdateUserNotification);
          uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
          id v48 = v36;
          __int16 v42 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v48,  1LL));
          uint64_t v16 = -[PDShareUpdateUserNotification initWithTitle:message:forPassUniqueIdentifier:shareIdentifiers:]( v40,  "initWithTitle:message:forPassUniqueIdentifier:shareIdentifiers:",  v45,  v33,  v41,  v42);

          uint64_t v12 = v46;
          __int16 v17 = v47;
          goto LABEL_37;
        }

        if (v11 == (id)1)
        {
          id v46 = v12;
          __int128 v47 = v17;
          uint64_t v22 = 0;
          __int16 v19 = @"SHARE_NOTIFICATION_ACTIVE_MESSAGE";
          goto LABEL_28;
        }

        if (v11 != (id)6) {
          goto LABEL_20;
        }
      }

      else if (v10 == (id)6)
      {
        goto LABEL_20;
      }

      id v46 = v12;
      __int128 v47 = v17;
      uint64_t v22 = 0;
      __int16 v19 = @"SHARE_NOTIFICATION_SHARE_REMOVED_MESSAGE";
      goto LABEL_28;
    }

    id v46 = v12;
    __int128 v47 = v17;
    uint64_t v23 = v12 == 0LL;
    uint64_t v22 = v12 != 0LL;
    if (v23) {
      __int16 v19 = @"SHARE_NOTIFICATION_SHARE_ADDED_MESSAGE";
    }
    else {
      __int16 v19 = @"SHARE_NOTIFICATION_SHARE_ADDED_MESSAGE_SENDER";
    }
    goto LABEL_28;
  }

  uint64_t v16 = 0LL;
LABEL_38:

  return v16;
}
        }

        uint64_t v11 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
      }

      while (v11);
      if (v12)
      {
        uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) paymentWebServiceCoordinator]);
        [v23 submitVerificationCode:*(void *)(a1 + 40) verificationData:*(void *)(a1 + 56) forPass:v12 handler:*(void *)(a1 + 64)];
      }
    }
  }

  else
  {
    uint64_t v24 = PKLogFacilityTypeGetObject(6LL);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v39 = "-[PDPaymentService submitVerificationCode:verificationData:forDPANIdentifier:handler:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

      uint64_t v10 = v33 + 1;
      uint64_t v8 = v34;
      uint64_t v4 = v35;
      uint64_t v9 = v31;
    }

    while ((id)(v33 + 1) != v32);
    uint64_t v25 = 0LL;
    __int16 v32 = [v34 countByEnumeratingWithState:&v43 objects:v48 count:16];
  }

  while (v32);
LABEL_25:

  if (!v25) {
    goto LABEL_26;
  }
LABEL_27:

  return v25;
}

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    return;
  }

  if ((PKRelevancyLocationServicesEnabled() & 1) == 0)
  {
    uint64_t v8 = PKLogFacilityTypeGetObject(12LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: should not send notification due to location authorization",  buf,  2u);
    }

    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = PKPassKitCoreBundle();
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 bundlePath]);
      uint64_t v12 = (os_log_s *)(int)+[CLLocationManager authorizationStatusForBundlePath:]( &OBJC_CLASS___CLLocationManager,  "authorizationStatusForBundlePath:",  v11);
      uint64_t v13 = PKPassRelevancyBundle();
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      int v15 = (void *)objc_claimAutoreleasedReturnValue([v14 bundlePath]);
      uint64_t v16 = +[CLLocationManager authorizationStatusForBundlePath:]( &OBJC_CLASS___CLLocationManager,  "authorizationStatusForBundlePath:",  v15);
      *(_DWORD *)__int128 buf = 134218240;
      uint64_t v45 = v12;
      id v46 = 2048;
      __int128 v47 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: PKPassKitCoreBundle status %ld; PKPassRelevancyBundle status %ld",
        buf,
        0x16u);
    }

    goto LABEL_20;
  }

  uint64_t v4 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v4 + 88))
  {
    uint64_t v5 = PKLogFacilityTypeGetObject(12LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      id v7 = "PDTransitNotificationService: should not send notification because we are already monitoring location";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, buf, 2u);
      goto LABEL_20;
    }

    goto LABEL_20;
  }

  id v18 = atomic_load((unsigned __int8 *)(v4 + 120));
  if ((v18 & 1) != 0)
  {
    uint64_t v21 = PKLogFacilityTypeGetObject(12LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      id v7 = "PDTransitNotificationService: should not send notification because a pass upgrade is already in progress";
      goto LABEL_19;
    }

    goto LABEL_20;
  }

  if (PKPerformEagerTransitNotificationChecks())
  {
    __int16 v19 = PKLogFacilityTypeGetObject(12LL);
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(v19);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: Performing eager check due to internal setting and ignoring last check and device setup time",  buf,  2u);
    }

    goto LABEL_32;
  }

  id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[PDSetupAssistantCompleteMonitor lastSetupAssistantExitDate]( &OBJC_CLASS___PDSetupAssistantCompleteMonitor,  "lastSetupAssistantExitDate"));
  uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
  uint64_t v23 = v22;
  if (v20 && ![v22 isDateInToday:v20])
  {
    if (!*(void *)(*(void *)(a1 + 32) + 112LL)
      || (uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date")),
          [v27 timeIntervalSinceDate:*(void *)(*(void *)(a1 + 32) + 112)],
          uint64_t v29 = v28,
          v27,
          v29 >= 3600.0))
    {

LABEL_32:
      __int16 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) sharedWebServiceContext]);
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([v32 configuration]);

      uint64_t v33 = *(void *)(a1 + 32);
      if (v20)
      {
        __int16 v34 = *(void **)(v33 + 32);
        v40[0] = _NSConcreteStackBlock;
        v40[1] = 3221225472LL;
        v40[2] = sub_1002ECA08;
        v40[3] = &unk_1006410C8;
        id v35 = v20;
        uint64_t v36 = *(void *)(a1 + 32);
        id v37 = *(void **)(a1 + 40);
        uint64_t v41 = v35;
        __int16 v42 = v36;
        id v43 = v37;
        [v34 alertNotificationsEnabled:v40];
      }

      else
      {
        [*(id *)(v33 + 16) updateWebServiceConfigurationWithCompletion:0];
        uint64_t v38 = PKLogFacilityTypeGetObject(12LL);
        id v39 = (os_log_s *)objc_claimAutoreleasedReturnValue(v38);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v39,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: should not send notification because region config is missing",  buf,  2u);
        }

        (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
      }

      goto LABEL_37;
    }

    int v30 = PKLogFacilityTypeGetObject(12LL);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(os_log_s **)(*(void *)(a1 + 32) + 112LL);
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v45 = v31;
      uint64_t v26 = "PDTransitNotificationService: should not check notification because we recently checked at %@";
      goto LABEL_25;
    }
  }

  else
  {
    uint64_t v24 = PKLogFacilityTypeGetObject(12LL);
    uint64_t v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v45 = v20;
      uint64_t v26 = "PDTransitNotificationService: should not check notification because device setup too recent: %@.";
LABEL_25:
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v26, buf, 0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_37:
}
}

  return v14;
}
}
}

    sub_100422D78(v47);

    id v39 = v119;
  }

  while (v119 != v116);
  id v82 = v115;
  swift_bridgeObjectRelease(v115);
  id v83 = v134;
  if (v134[2]) {
    goto LABEL_65;
  }
LABEL_76:
  swift_bridgeObjectRelease(v82);
  uint64_t v93 = swift_bridgeObjectRelease(v83);
  if (v108)
  {
    int v94 = static Logger.auxiliaryCapability.getter(v93);
    uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
    uint64_t v96 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v95, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v97 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v95,  v96,  "PDARRAliroSignatureProvider: No existing key materials for requirement (unmatched requirement in pass)",  v97,  2u);
      swift_slowDealloc(v97, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v106);
    uint64_t v24 = v111;
    v111[2](v111, 2LL);
  }

  else
  {
    uint64_t v24 = v111;
    v111[2](v111, 1LL);
  }

  swift_release(v110);
  swift_release(v109);

  uint64_t v25 = v18;
LABEL_82:
  swift_release(v25);
LABEL_83:
  _Block_release(v24);
  _Block_release(v24);
  _Block_release(v24);
  _Block_release(v24);
}

    sub_100422D78(v47);

    id v39 = v119;
  }

  while (v119 != v116);
  id v82 = v115;
  swift_bridgeObjectRelease(v115);
  id v83 = v134;
  if (v134[2]) {
    goto LABEL_65;
  }
LABEL_76:
  swift_bridgeObjectRelease(v82);
  uint64_t v93 = swift_bridgeObjectRelease(v83);
  if (v108)
  {
    int v94 = static Logger.auxiliaryCapability.getter(v93);
    uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
    uint64_t v96 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v95, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v97 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v95,  v96,  "PDARRAliroSignatureProvider: No existing key materials for requirement (unmatched requirement in pass)",  v97,  2u);
      swift_slowDealloc(v97, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v106);
    uint64_t v24 = v111;
    v111[2](v111, 2LL, 0LL);
  }

  else
  {
    uint64_t v24 = v111;
    v111[2](v111, 1LL, 0LL);
  }

  swift_release(v110);
  swift_release(v109);

  uint64_t v25 = v18;
LABEL_82:
  swift_release(v25);
LABEL_83:
  _Block_release(v24);
  _Block_release(v24);
  _Block_release(v24);
  _Block_release(v24);
}

    sub_100422D78(v49);

    uint64_t v41 = v119;
    LODWORD(v1_Block_object_dispose((const void *)(v61 - 144), 8) = v116;
  }

  while (v119 != v115);
  id v82 = v114;
  swift_bridgeObjectRelease(v114);
  id v83 = v134;
  if (v134[2]) {
    goto LABEL_65;
  }
LABEL_76:
  swift_bridgeObjectRelease(v82);
  uint64_t v93 = swift_bridgeObjectRelease(v83);
  if (v107)
  {
    int v94 = static Logger.auxiliaryCapability.getter(v93);
    uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
    uint64_t v96 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v95, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v97 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v95,  v96,  "PDARRUnifiedAccessSignatureProvider: No existing key materials for requirement (unmatched requirement in pass)",  v97,  2u);
      swift_slowDealloc(v97, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v106);
    uint64_t v26 = v110;
    v110[2](v110, 2LL);
  }

  else
  {
    uint64_t v26 = v110;
    v110[2](v110, 1LL);
  }

  swift_release(v109);
  swift_release(v108);

  uint64_t v27 = v20;
LABEL_82:
  swift_release(v27);
LABEL_83:
  _Block_release(v26);
  _Block_release(v26);
  _Block_release(v26);
  _Block_release(v26);
}

    sub_100422D78(v49);

    uint64_t v41 = v119;
    LODWORD(v1_Block_object_dispose((const void *)(v61 - 144), 8) = v116;
  }

  while (v119 != v115);
  id v82 = v114;
  swift_bridgeObjectRelease(v114);
  id v83 = v134;
  if (v134[2]) {
    goto LABEL_65;
  }
LABEL_76:
  swift_bridgeObjectRelease(v82);
  uint64_t v93 = swift_bridgeObjectRelease(v83);
  if (v107)
  {
    int v94 = static Logger.auxiliaryCapability.getter(v93);
    uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
    uint64_t v96 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v95, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v97 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v95,  v96,  "PDARRUnifiedAccessSignatureProvider: No existing key materials for requirement (unmatched requirement in pass)",  v97,  2u);
      swift_slowDealloc(v97, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v105 + 8))(v103, v106);
    uint64_t v26 = v110;
    v110[2](v110, 2LL, 0LL);
  }

  else
  {
    uint64_t v26 = v110;
    v110[2](v110, 1LL, 0LL);
  }

  swift_release(v109);
  swift_release(v108);

  uint64_t v27 = v20;
LABEL_82:
  swift_release(v27);
LABEL_83:
  _Block_release(v26);
  _Block_release(v26);
  _Block_release(v26);
  _Block_release(v26);
}

void sub_10003BF5C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = objc_alloc(&OBJC_CLASS___PDAccountStatementMetadataProcessorRequest);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_10003C078;
  v15[3] = &unk_10063BAB0;
  uint64_t v10 = *(void **)(a1 + 48);
  void v15[4] = *(void *)(a1 + 40);
  id v16 = v10;
  id v11 = *(id *)(a1 + 56);
  id v18 = v6;
  id v19 = v7;
  id v17 = v11;
  id v12 = v6;
  id v13 = v7;
  uint64_t v14 = -[PDAccountStatementMetadataProcessorRequest initWithAccountIdentifier:statementIdentifier:reason:completion:]( v8,  "initWithAccountIdentifier:statementIdentifier:reason:completion:",  v9,  0LL,  2LL,  v15);

  [*(id *)(a1 + 40) _addRequestToProcessQueue:v14];
}

void sub_10003C078(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 32LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10003C128;
  v4[3] = &unk_10063BA88;
  id v5 = v2;
  id v6 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 64);
  id v7 = *(id *)(a1 + 56);
  dispatch_async(v3, v4);
}

uint64_t sub_10003C128(void *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    int v7 = 138412546;
    uint64_t v8 = v4;
    __int16 v9 = 2112;
    uint64_t v10 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Completed scheduled activity AccountStatementMetadataActivity for account identifier %@, type %@",  (uint8_t *)&v7,  0x16u);
  }

  return (*(uint64_t (**)(void))(a1[7] + 16LL))();
}

id sub_10003C1EC(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 52LL) = 0;
  return objc_msgSend(*(id *)(a1 + 32), "_queue_updateScheduledActivityIfNeccessary");
}

void sub_10003C524(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(void **)(a1 + 40);
  uint64_t v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10003C5E4;
  void v12[3] = &unk_10063B060;
  id v13 = v7;
  id v14 = v5;
  uint64_t v9 = *(void *)(a1 + 32);
  id v15 = v6;
  uint64_t v16 = v9;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, v12);
}

id sub_10003C5E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  id v3 = *(void **)(v2 + 64);
  *(void *)(v2 + 64) = 0LL;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 56) + 48LL));
  return [*(id *)(a1 + 56) _executeNextRequestIfPossible];
}

id sub_10003C6B4(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_isAccountEligible:", a2);
}

void sub_10003D494( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_10003D4AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v2 + 24))
  {
    unsigned __int8 v3 = [*(id *)(a1 + 32) setValue:0 forProperty:@"processed_auth_mechanisms"];
    uint64_t v2 = *(void *)(*(void *)(a1 + 40) + 8LL);
  }

  else
  {
    unsigned __int8 v3 = 0;
  }

  *(_BYTE *)(v2 + 24) = v3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v4 + 24))
  {
    unsigned __int8 v5 = [*(id *)(a1 + 32) setValue:0 forProperty:@"data_collected_auth_mechanisms"];
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  }

  else
  {
    unsigned __int8 v5 = 0;
  }

  *(_BYTE *)(v4 + 24) = v5;
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v6 + 24))
  {
    unsigned __int8 v7 = [*(id *)(a1 + 32) setValue:0 forProperty:@"complete"];
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
  }

  else
  {
    unsigned __int8 v7 = 0;
  }

  *(_BYTE *)(v6 + 24) = v7;
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v8 + 24))
  {
    unsigned __int8 v9 = [*(id *)(a1 + 32) setValue:0 forProperty:@"auth_data_payment_pin"];
    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8LL);
  }

  else
  {
    unsigned __int8 v9 = 0;
  }

  *(_BYTE *)(v8 + 24) = v9;
  uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v10 + 24))
  {
    unsigned __int8 v11 = [*(id *)(a1 + 32) setValue:0 forProperty:@"auth_data_transaction_signature"];
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8LL);
  }

  else
  {
    unsigned __int8 v11 = 0;
  }

  *(_BYTE *)(v10 + 24) = v11;
  uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
  if (*(_BYTE *)(v12 + 24))
  {
    unsigned __int8 v13 = [*(id *)(a1 + 32) setValue:0 forProperty:@"auth_data_user_confirmation"];
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8LL);
  }

  else
  {
    unsigned __int8 v13 = 0;
  }

  *(_BYTE *)(v12 + 24) = v13;
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_10003DA14( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
}

uint64_t sub_10003DA70(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10003DA80(uint64_t a1)
{
}

void sub_10003DA88(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10003DB34;
  void v12[3] = &unk_10063BBA0;
  unsigned __int8 v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v14 = v7;
  uint64_t v15 = v8;
  id v13 = v6;
  id v10 = v6;
  id v11 = v7;
  [v9 fetchHomesWithCompletion:v12];
}

uint64_t sub_10003DB34(void *a1, void *a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue([a2 firstObject]);
  uint64_t v4 = *(void *)(a1[6] + 8LL);
  unsigned __int8 v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;

  return (*(uint64_t (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) == 0LL);
}

void sub_10003DB8C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  uint64_t v16 = *(void *)(a1 + 32);
  unsigned __int8 v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v16, 1LL));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10003DCA0;
  void v12[3] = &unk_10063BBF0;
  __int128 v15 = *(_OWORD *)(a1 + 48);
  id v13 = v6;
  id v14 = v7;
  id v10 = v6;
  id v11 = v7;
  [v8 inviteUsersWithInviteInformation:v9 completionHandler:v12];
}

void sub_10003DCA0(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = objc_claimAutoreleasedReturnValue([a2 firstObject]);
  uint64_t v7 = *(void *)(a1[6] + 8LL);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  uint64_t v9 = *(void *)(a1[7] + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v5;
  id v12 = v5;

  if (*(void *)(*(void *)(a1[7] + 8LL) + 40LL)) {
    BOOL v11 = 1LL;
  }
  else {
    BOOL v11 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL) == 0LL;
  }
  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v11);
}

void sub_10003DD50(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = a4;
  id v13 = a3;
  id v7 = objc_alloc(&OBJC_CLASS___PKSharingHomeInvitation);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) displayInformation]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) appleSharingDict]);
  id v10 = [v7 initWithDisplayInformation:v8 appleSharingDict:v9];
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  v6[2](v6, v13, *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) == 0LL);
}

void sub_10003DE2C(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (([a4 isCanceled] & 1) != 0
    || *(void *)(*(void *)(a1[6] + 8LL) + 40LL)
    || (uint64_t v8 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL)) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
      int v12 = 138412290;
      uint64_t v13 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: Unable to created home share message, error: %@",  (uint8_t *)&v12,  0xCu);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  else
  {
    uint64_t v9 = PKLogFacilityTypeGetObject(33LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      uint64_t v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "SharingManagementService: successfully created home share message. \n %@",  (uint8_t *)&v12,  0xCu);
    }

    uint64_t v11 = objc_alloc_init(&OBJC_CLASS___PDCreateShareContext);
    -[PDCreateShareContext addInvite:primary:]( v11,  "addInvite:primary:",  *(void *)(*(void *)(a1[7] + 8LL) + 40LL),  1LL);
    (*(void (**)(void))(a1[5] + 16LL))();
  }

Class sub_10003E000()
{
  if (qword_100707928 != -1) {
    dispatch_once(&qword_100707928, &stru_10063BC88);
  }
  Class result = objc_getClass("HMUserInviteInformation");
  qword_100707918 = (uint64_t)result;
  off_1007047D8 = (uint64_t (*)())sub_10003E05C;
  return result;
}

id sub_10003E05C()
{
  return (id)qword_100707918;
}

void sub_10003E068(id a1)
{
  qword_100707920 = (uint64_t)dlopen("/System/Library/Frameworks/HomeKit.framework/HomeKit", 2);
}

void sub_10003E43C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc(&OBJC_CLASS___CloudStoreContainerChangeEvent);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v8 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  uint64_t v6 = *(void **)(a1 + 40);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[CloudStoreContainerChangeEvent event](v8, "event"));
  [v6 safelyAddObject:v7];
}

void sub_10003E94C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10003EEAC(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
}

void sub_10003EEB4(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCloudStoreContainerChangeEvent setEventType:](v4, "setEventType:", [a3 integerValue]);
}

void sub_10003EEF8(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCloudStoreContainerChangeEvent setChangeType:](v4, "setChangeType:", [a3 integerValue]);
}

void sub_10003EF3C(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCloudStoreContainerChangeEvent setTimestamp:](v4, "setTimestamp:", v5);
}

void sub_10003EF88(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
}

void sub_10003EF90(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
}

void sub_10003EF98(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
}

void sub_10003EFA0(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
}

void sub_10003EFA8(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
}

void sub_10003EFB0(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
}

void sub_10003EFB8(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKCloudStoreContainerChangeEvent setObjectNames:](v4, "setObjectNames:", v5);
}

void sub_10003F010(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
}

void sub_10003F018(id a1, PKCloudStoreContainerChangeEvent *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCloudStoreContainerChangeEvent setTimeInterval:]( v4,  "setTimeInterval:",  (double)(uint64_t)[a3 integerValue]);
}

void sub_10003F2B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  [v2 addObject:v3];
}

void sub_10003F420(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___PKAccountPromotion);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v7 values:a4];

  [*(id *)(a1 + 56) populateAssociatedCompletionStepsForPromotion:v8 promotionPID:a2 inDatabase:*(void *)(a1 + 40)];
  [*(id *)(a1 + 48) addObject:v8];
}

void sub_10003FEC0(id a1, PKAccountPromotion *a2, id a3)
{
}

void sub_10003FEC8(id a1, PKAccountPromotion *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountPromotion setType:](v4, "setType:", [a3 integerValue]);
}

void sub_10003FF0C(id a1, PKAccountPromotion *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountPromotion setStartDate:](v4, "setStartDate:", v5);
}

void sub_10003FF58(id a1, PKAccountPromotion *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountPromotion setEndDate:](v4, "setEndDate:", v5);
}

void sub_10003FFA4(id a1, PKAccountPromotion *a2, id a3)
{
}

void sub_10003FFAC(id a1, PKAccountPromotion *a2, id a3)
{
}

void sub_10003FFB4(id a1, PKAccountPromotion *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKAccountPromotion setImpressionCount:](v4, "setImpressionCount:", [a3 integerValue]);
}

void sub_10004011C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10004097C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100040AC4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___PKPeerPaymentAccountInvitation);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_100040BF0(id a1, PKPeerPaymentAccountInvitation *a2, id a3)
{
}

void sub_100040BF8(id a1, PKPeerPaymentAccountInvitation *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccountInvitation setStatus:](v4, "setStatus:", [a3 integerValue]);
}

void sub_100040C3C(id a1, PKPeerPaymentAccountInvitation *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccountInvitation setRegistrationResult:]( v4,  "setRegistrationResult:",  [a3 integerValue]);
}

void sub_100040C80(id a1, PKPeerPaymentAccountInvitation *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPeerPaymentAccountInvitation setRemoteRegistrationRequestLevel:]( v4,  "setRemoteRegistrationRequestLevel:",  [a3 integerValue]);
}

void sub_100040D04(id a1)
{
  id v1 = -[PDXPCEventStreamsManager _init](objc_alloc(&OBJC_CLASS___PDXPCEventStreamsManager), "_init");
  uint64_t v2 = (void *)qword_100707930;
  qword_100707930 = (uint64_t)v1;
}

void sub_100040E24(uint64_t a1)
{
}

void sub_100040ED0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2)
  {
    *(void *)(v1 + _Block_object_dispose((const void *)(v43 - 152), 8) = v2 + 1;
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8LL);
      int v7 = 134349056;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDXPCEventStreamsManager: deferral count %{public}lu.",  (uint8_t *)&v7,  0xCu);
    }
  }

void sub_100040FE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2)
  {
    *(void *)(v1 + _Block_object_dispose((const void *)(v43 - 152), 8) = v2 - 1;
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (v7)
      {
        *(_DWORD *)__int128 buf = 134349056;
        uint64_t v17 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDXPCEventStreamsManager: deferral count %{public}lu.",  buf,  0xCu);
      }
    }

    else
    {
      if (v7)
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDXPCEventStreamsManager: delivering deferred events for all streams.",  buf,  2u);
      }

      __int128 v14 = 0u;
      __int128 v15 = 0u;
      __int128 v12 = 0u;
      __int128 v13 = 0u;
      uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "objectEnumerator", 0));
      id v8 = -[os_log_s countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v12,  v18,  16LL);
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v13;
        do
        {
          uint64_t v11 = 0LL;
          do
          {
            if (*(void *)v13 != v10) {
              objc_enumerationMutation(v6);
            }
            [*(id *)(*((void *)&v12 + 1) + 8 * (void)v11) beginEventDelivery];
            uint64_t v11 = (char *)v11 + 1;
          }

          while (v9 != v11);
          id v9 = -[os_log_s countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v12,  v18,  16LL);
        }

        while (v9);
      }
    }
  }

void sub_10004129C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000412B4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000412C4(uint64_t a1)
{
}

void sub_1000412CC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) _managerForEventStream:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000413F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100041410(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 16) objectForKeyedSubscript:a1[5]]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void PDXPCEventStreamRegisterObserver(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = a1;
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[PDXPCEventStreamsManager eventStreamManager]( &OBJC_CLASS___PDXPCEventStreamsManager,  "eventStreamManager"));
  [v8 registerObserver:v7 forEventStream:v6 withReplyQueue:v5];
}

void PDXPCEventStreamRegisterForLaunchEvents()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue( +[PDXPCEventStreamsManager eventStreamManager]( &OBJC_CLASS___PDXPCEventStreamsManager,  "eventStreamManager"));
  [v0 registerForLaunchEvents];
}

void PDXPCEventStreamPauseEventDelivery()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue( +[PDXPCEventStreamsManager eventStreamManager]( &OBJC_CLASS___PDXPCEventStreamsManager,  "eventStreamManager"));
  [v0 pauseEventDelivery];
}

void PDXPCEventStreamBeginEventDelivery()
{
  id v0 = (id)objc_claimAutoreleasedReturnValue( +[PDXPCEventStreamsManager eventStreamManager]( &OBJC_CLASS___PDXPCEventStreamsManager,  "eventStreamManager"));
  [v0 beginEventDelivery];
}

void sub_100041878(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = objc_autoreleasePoolPush();
  kdebug_trace(730333204LL, 0LL, 0LL, 0LL, 0LL);
  id v5 = *(void **)(a1 + 32);
  id v7 = v3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v7, 1LL));
  [v5 _deliverEvents:v6 eventsWerePreviouslyDeferred:0];

  objc_autoreleasePoolPop(v4);
}

id sub_100041A20(uint64_t a1)
{
  return [*(id *)(a1 + 40) _deliverEvents:*(void *)(a1 + 48) eventsWerePreviouslyDeferred:1];
}

id sub_10004226C(uint64_t a1)
{
  return _[*(id *)(a1 + 40) receivedXPCEvent:*(void *)(a1 + 48) forEventStream:*(void *)(*(void *)(a1 + 56) + 8)];
}

id *sub_100043248(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

void sub_10004348C(uint64_t a1, uint64_t a2)
{
  id v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___PayLaterFinancingPlan),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(-[PayLaterFinancingPlan planIdentifier](v5, "planIdentifier"));
  objc_msgSend(v3, "pk_safelyAddObject:", v4);
}

void sub_1000436D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
}

uint64_t sub_1000436F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100043700(uint64_t a1)
{
}

void sub_100043708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(*(void *)a3);
  id v16 = (id)objc_claimAutoreleasedReturnValue(v5);
  id v6 = *(id *)(a3 + 8);
  if (v16) {
    BOOL v7 = v6 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    uint64_t v8 = PKCurrencyAmountMake(v16, v6);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8LL);
    uint64_t v11 = *(void **)(v10 + 40);
    if (v11)
    {
      uint64_t v12 = objc_claimAutoreleasedReturnValue([v11 currencyAmountByAddingCurrencyAmount:v9]);
      uint64_t v13 = *(void *)(*(void *)(a1 + 32) + 8LL);
      __int128 v14 = *(void **)(v13 + 40);
      *(void *)(v13 + 40) = v12;
    }

    else
    {
      id v15 = v9;
      __int128 v14 = *(void **)(v10 + 40);
      *(void *)(v10 + 40) = v15;
    }
  }
}

void sub_1000438EC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v19 = objc_alloc_init(&OBJC_CLASS___PKPayLaterFinancingPlan);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v19 withProperties:v7 values:a4];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterFinancingPlanSummary anyInDatabase:forFinancingPlanPID:]( &OBJC_CLASS___PayLaterFinancingPlanSummary,  "anyInDatabase:forFinancingPlanPID:",  *(void *)(a1 + 40),  a2));
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 planSummary]);

  -[PKPayLaterFinancingPlan setPlanSummary:](v19, "setPlanSummary:", v9);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterMerchant anyInDatabase:forFinancingPlanPID:]( &OBJC_CLASS___PayLaterMerchant,  "anyInDatabase:forFinancingPlanPID:",  *(void *)(a1 + 40),  a2));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 payLaterMerchant]);

  -[PKPayLaterFinancingPlan setMerchant:](v19, "setMerchant:", v11);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterFinancingPlanScheduleSummary anyInDatabase:forFinancingPlanPID:]( &OBJC_CLASS___PayLaterFinancingPlanScheduleSummary,  "anyInDatabase:forFinancingPlanPID:",  *(void *)(a1 + 40),  a2));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 scheduleSummary]);

  -[PKPayLaterFinancingPlan setScheduleSummary:](v19, "setScheduleSummary:", v13);
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterFinancingPlanFundingSource anyInDatabase:forPlanPID:]( &OBJC_CLASS___PayLaterFinancingPlanFundingSource,  "anyInDatabase:forPlanPID:",  *(void *)(a1 + 40),  a2));
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 fundingSource]);
  -[PKPayLaterFinancingPlan setFundingSource:](v19, "setFundingSource:", v15);

  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterFinancingPlanDispute financingPlanDisputesForFinancingPlanPID:inDatabase:]( &OBJC_CLASS___PayLaterFinancingPlanDispute,  "financingPlanDisputesForFinancingPlanPID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  -[PKPayLaterFinancingPlan setDisputes:](v19, "setDisputes:", v16);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterFinancingPlanTermsDetails anyInDatabase:forFinancingPlanPID:]( &OBJC_CLASS___PayLaterFinancingPlanTermsDetails,  "anyInDatabase:forFinancingPlanPID:",  *(void *)(a1 + 40),  a2));
  id v18 = (void *)objc_claimAutoreleasedReturnValue([v17 termsDetails]);

  -[PKPayLaterFinancingPlan setTermsDetails:](v19, "setTermsDetails:", v18);
  if (v19) {
    [*(id *)(a1 + 48) addObject:v19];
  }
}

void sub_100043FF0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100044A6C(id a1, PKPayLaterFinancingPlan *a2, id a3)
{
}

void sub_100044A74(id a1, PKPayLaterFinancingPlan *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterFinancingPlan setProductType:](v4, "setProductType:", [a3 integerValue]);
}

void sub_100044AB8(id a1, PKPayLaterFinancingPlan *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterFinancingPlan setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_100044B04(id a1, PKPayLaterFinancingPlan *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterFinancingPlan setState:](v4, "setState:", [a3 integerValue]);
}

void sub_100044B48(id a1, PKPayLaterFinancingPlan *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterFinancingPlan setPlanChannel:](v4, "setPlanChannel:", [a3 integerValue]);
}

void sub_100044B8C(id a1, PKPayLaterFinancingPlan *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterFinancingPlan setStateReason:](v4, "setStateReason:", [a3 integerValue]);
}

void sub_100044BD0(id a1, PKPayLaterFinancingPlan *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterFinancingPlan setRequiresGenericMessaging:]( v4,  "setRequiresGenericMessaging:",  [a3 BOOLValue]);
}

void sub_100044C14(id a1, PKPayLaterFinancingPlan *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterFinancingPlan setCancellable:](v4, "setCancellable:", [a3 BOOLValue]);
}

void sub_100044C58(id a1, PKPayLaterFinancingPlan *a2, id a3)
{
}

void sub_100044EA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100044EB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100044EC8(uint64_t a1)
{
}

BOOL sub_100044ED0(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

void sub_100045028(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v9 = *(void **)(a1 + 40);
  id v10 = a3;
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v9 _propertySetters]);
  [v9 applyPropertySetters:v11 toObject:*(void *)(a1 + 32) withProperties:v10 values:a4];

  *a6 = 1;
}

void sub_1000452A0(id a1, PKPendingAccountCredential *a2, id a3)
{
}

void sub_1000452A8(id a1, PKPendingAccountCredential *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPendingAccountCredential setFeature:](v4, "setFeature:", PKFeatureIdentifierFromString(a3));
}

void sub_1000452EC(id a1, PKPendingAccountCredential *a2, id a3)
{
}

void sub_100045724(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10004586C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKCategoryVisualizationMagnitude);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_100045BD0(id a1, PKCategoryVisualizationMagnitude *a2, id a3)
{
}

void sub_100045BD8(id a1, PKCategoryVisualizationMagnitude *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCategoryVisualizationMagnitude setBucket:](v4, "setBucket:", [a3 integerValue]);
}

void sub_100045C1C(id a1, PKCategoryVisualizationMagnitude *a2, id a3)
{
  uint64_t v4 = a2;
  [a3 doubleValue];
  -[PKCategoryVisualizationMagnitude setMagnitude:](v4, "setMagnitude:");
}

void sub_1000469A8(uint64_t a1)
{
  id v6 = (id)PDOSTransactionCreate("PDPassLibrary");
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) passesOfStyles:*(void *)(a1 + 48)]);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _entitlementFilteredPasses:v3]);
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

  objc_autoreleasePoolPop(v2);
}

void sub_100046B7C(uint64_t a1)
{
  id v6 = (id)PDOSTransactionCreate("PDPassLibrary");
  id v2 = objc_autoreleasePoolPush();
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) passWithProvisioningCredentialHash:*(void *)(a1 + 40)]);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sanitizePassIfNeeded:v3]);
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);

  objc_autoreleasePoolPop(v2);
}

void sub_10004722C(uint64_t a1, uint64_t a2)
{
  if (PKIsMac(a1, a2))
  {
    PDOpenPaymentSetupUI(0LL, 0LL);
  }

  else if (PKPassbookIsCurrentlyDeletedByUser())
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Prompting user to install Wallet", buf, 2u);
    }

    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100047350;
    v8[3] = &unk_10063A830;
    id v9 = *(id *)(a1 + 40);
    PKShowAlertForWalletUninstalled(v8);
  }

  else
  {
    uint64_t v5 = *(void **)(a1 + 32);
    uint64_t v6 = v5[3];
    id v7 = (id)objc_claimAutoreleasedReturnValue([v5 connection]);
    sub_1001ADA8C(v6, 0LL, (uint64_t)v7, 0LL, 0LL);
  }

uint64_t sub_100047350(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100047AD4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100047BE4(void *a1)
{
  if ([*(id *)(a1[4] + 8) passesAllAccess])
  {
    uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) passUniqueIdentifierWithAssociatedAccountIdentifier:a1[5]]);
    uint64_t v3 = a1[6];
    id v8 = (id)v2;
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[4] + 88), "passWithUniqueIdentifier:"));
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 paymentPass]);
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      id v10 = "-[PDPassLibrary paymentPassWithAssociatedAccountIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    (*(void (**)(void))(a1[6] + 16LL))();
  }

uint64_t sub_100047F44(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100048058(uint64_t a1)
{
  v50[0] = _NSConcreteStackBlock;
  v50[1] = 3221225472LL;
  v50[2] = sub_1000485F8;
  v50[3] = &unk_10063C3D8;
  v50[4] = *(void *)(a1 + 32);
  id v51 = *(id *)(a1 + 48);
  uint64_t v2 = objc_retainBlock(v50);
  if (([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess] & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      uint64_t v6 = "Must have payment all access entitlement";
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v6, buf, 2u);
    }

void sub_1000485F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3)
  {
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
    switch((unint64_t)[v4 activationState])
    {
      case 0uLL:
      case 1uLL:
      case 2uLL:
      case 4uLL:
        break;
      case 3uLL:
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 devicePrimaryPaymentApplication]);
        [v6 state];

        break;
      default:
        uint64_t Object = PKLogFacilityTypeGetObject(6LL);
        unsigned __int8 v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id v9 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Unexpected state found, returning invalid",  v9,  2u);
        }

        break;
    }
  }

  else
  {
    uint64_t v5 = 0LL;
    [*(id *)(*(void *)(a1 + 32) + 88) passExistsWithPassType:1];
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100048750(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 allObjects]);
  id v8 = [v3 mutableCopy];

  uint64_t v4 = PDDefaultPaymentPassUniqueIdentifier();
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  id v9[2] = sub_100048810;
  v9[3] = &unk_10063C400;
  void v9[4] = v5;
  [v8 sortUsingComparator:v9];
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v8 firstObject]);
  (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);
}

uint64_t sub_100048810(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [v5 activationState];
  id v8 = [v6 activationState];
  if (v7 != v8)
  {
    if (!v7) {
      goto LABEL_15;
    }
    if (!v8) {
      goto LABEL_17;
    }
    if (v7 == (id)2) {
      goto LABEL_15;
    }
    if (v8 == (id)2) {
      goto LABEL_17;
    }
    if (v7 == (id)1) {
      goto LABEL_15;
    }
    if (v8 == (id)1) {
      goto LABEL_17;
    }
    if (v7 == (id)3)
    {
LABEL_15:
      uint64_t v15 = -1LL;
      goto LABEL_18;
    }

    if (v8 == (id)3) {
      goto LABEL_17;
    }
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
  unsigned __int8 v10 = [v9 isEqualToString:*(void *)(a1 + 32)];

  if ((v10 & 1) != 0) {
    goto LABEL_15;
  }
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
  unsigned __int8 v12 = [v11 isEqualToString:*(void *)(a1 + 32)];

  if ((v12 & 1) != 0)
  {
LABEL_17:
    uint64_t v15 = 1LL;
    goto LABEL_18;
  }

  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v5 ingestedDate]);
  __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v6 ingestedDate]);
  if ([v13 compare:v14] == (id)-1) {
    uint64_t v15 = 1LL;
  }
  else {
    uint64_t v15 = -1LL;
  }

LABEL_18:
  return v15;
}

void sub_100048948(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v9 = v3;
  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 associatedPassUniqueID]);
    if ([v9 state] == (id)1)
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) passWithUniqueIdentifier:v4]);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 paymentPass]);

      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
    }

    else
    {
      if ([v9 state] == (id)4)
      {
        uint64_t v7 = 8LL;
        id v8 = 0LL;
      }

      else
      {
        uint64_t v7 = 0LL;
        id v8 = v4;
      }

      (*(void (**)(void, uint64_t, void *, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  v7,  v8,  0LL);
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

void sub_100048A50(uint64_t a1, void *a2)
{
  if (a2)
  {
    id v5 = (id)objc_claimAutoreleasedReturnValue([a2 associatedPassUniqueID]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) passWithUniqueIdentifier:v5]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 paymentPass]);

    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_100048D30(uint64_t a1)
{
  uint64_t v2 = (void *)PDOSTransactionCreate("PDPassLibrary");
  id v3 = objc_autoreleasePoolPush();
  id v4 = 0LL;
  id v5 = 0LL;
  [*(id *)(*(void *)(a1 + 32) + 88) getCatalog:&v4 passes:&v5 dbStates:0 ofPassTypes:*(void *)(a1 + 48) limitResults:*(unsigned __int8 *)(a1 + 56)];
  [*(id *)(a1 + 32) _sanitizePasses:v5];
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

  objc_autoreleasePoolPop(v3);
}

uint64_t sub_100048DD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100048FC0(uint64_t a1)
{
  uint64_t v2 = (void *)PDOSTransactionCreate("PDPassLibrary");
  id v3 = objc_autoreleasePoolPush();
  id v11 = 0LL;
  id v12 = 0LL;
  id v10 = 0LL;
  objc_msgSend( *(id *)(*(void *)(a1 + 32) + 88),  "getCatalog:passes:dbStates:ofPassTypes:limitResults:",  &v11,  &v12,  &v10,  objc_msgSend(*(id *)(a1 + 40), "allowedPassType"),  objc_msgSend(*(id *)(a1 + 40), "limitResults"));
  [*(id *)(a1 + 32) _sanitizePasses:v12];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 192) passDynamicStatesFromStates:v10]);
  id v5 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) accounts]);
  id v7 = objc_alloc(&OBJC_CLASS___PKGroupsControllerSnapshot);
  if (v4) {
    id v8 = v4;
  }
  else {
    id v8 = &__NSDictionary0__struct;
  }
  id v9 = [v7 initWithPasses:v12 states:v8 annotations:v5 accounts:v6 catalog:v11];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();

  objc_autoreleasePoolPop(v3);
}

uint64_t sub_100049134(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000492E4(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2[11] paymentPassesPendingActivation]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 _entitlementFilteredPasses:v4]);
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);
}

id sub_100049408(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 40) + 8) passesAllAccess];
  if ((_DWORD)result) {
    return [*(id *)(*(void *)(a1 + 40) + 80) writeCatalogOfRecord:*(void *)(a1 + 48) source:4];
  }
  return result;
}

void *sub_1000494AC(void *result, uint64_t a2)
{
  if (a2) {
    return _[*(id *)(result[4] + 120) notifyPassUsed:a2 fromSource:result[5]];
  }
  return result;
}

id sub_100049678(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 32) _entitledForObject:v3 forActions:2])
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sanitizePassIfNeeded:v3]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 secureElementPass]);
  }

  else
  {
    id v5 = 0LL;
  }

  return v5;
}

void sub_100049864(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  char v6 = *(_BYTE *)(a1 + 80);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_10004991C;
  v10[3] = &unk_10063C4F0;
  uint64_t v7 = *(void *)(a1 + 72);
  id v8 = *(id *)(a1 + 64);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v8;
  LOBYTE(v9) = v6;
  [v2 _paymentPassesForNetworks:v3 capabilities:v7 issuerCountryCodes:v4 webPayment:0 paymentApplicationStates:0 paymentRequestType:v5 isM ultiTokensRequest:v9 withHandler:v10];
}

void sub_10004991C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _entitlementFilteredPasses:a2]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_100049A7C(uint64_t a1)
{
  id v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  char v7 = *(_BYTE *)(a1 + 80);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_100049B64;
  void v11[3] = &unk_10063C540;
  id v8 = v2;
  uint64_t v9 = *(void *)(a1 + 72);
  id v12 = v8;
  uint64_t v15 = v9;
  id v13 = *(id *)(a1 + 48);
  id v14 = *(id *)(a1 + 64);
  LOBYTE(v10) = v7;
  [v3 _paymentPassesForNetworks:v8 capabilities:v4 issuerCountryCodes:v5 webPayment:0 paymentApplicationStates:0 paymentRequestType:v6 isM ultiTokensRequest:v10 withHandler:v11];
}

uint64_t sub_100049B64(void *a1, void *a2)
{
  id v3 = [a2 count];
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = a1[7];
    uint64_t v7 = a1[4];
    uint64_t v8 = a1[5];
    int v10 = 138544130;
    uint64_t v11 = v7;
    __int16 v12 = 1026;
    int v13 = v6;
    __int16 v14 = 2114;
    uint64_t v15 = v8;
    __int16 v16 = 1026;
    BOOL v17 = v3 != 0LL;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "-hasInAppPaymentPassesForNetworks:%{public}@ capabilities:%{public}x issuerCountryCodes:%{public}@ returns %{public}d",  (uint8_t *)&v10,  0x22u);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_100049DFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5)
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v5 = 0LL;
    }

    else
    {
      if (![v3 count])
      {
        (*(void (**)(void, id))(*(void *)(a1 + 80) + 16))( *(void *)(a1 + 80),  [*(id *)(a1 + 48) _hasPaymentPassesForNetworks:*(void *)(a1 + 56) capabilities:*(void *)(a1 + 88) paymentApplicationStates:*(void *)(a1 + 64)]);
        goto LABEL_7;
      }

      uint64_t v5 = *(void *)(a1 + 32);
    }
  }

  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  char v10 = *(_BYTE *)(a1 + 96);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  id v14[2] = sub_100049F14;
  v14[3] = &unk_10063C428;
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 88);
  id v15 = *(id *)(a1 + 80);
  LOBYTE(v13) = v10;
  [v6 _passesWithSupportedNetworks:v8 merchantCapabilities:v12 webDomain:v5 issuerCountryCodes:v7 paymentApplicationStates:v9 paymentReque stType:v11 isMultiTokensRequest:v13 handler:v14];

LABEL_7:
}

uint64_t sub_100049F14(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  [a2 count] != 0);
}

void sub_10004A17C(uint64_t a1, void *a2)
{
  id v6 = [a2 mutableCopy];
  if ([*(id *)(a1 + 32) containsObject:PKPaymentNetworkPrivateLabel])
  {
    id v3 = *(void **)(a1 + 48);
    if (*(void *)(a1 + 40)) {
      uint64_t v4 = objc_claimAutoreleasedReturnValue( objc_msgSend( v3,  "_inAppPrivateLabelPaymentPassesForWebDomain:issuerCountryCodes:paymentApplicationStates:isMultiTokensRequest:"));
    }
    else {
      uint64_t v4 = objc_claimAutoreleasedReturnValue( objc_msgSend( v3,  "_inAppPrivateLabelPaymentPassesForApplicationIdentifier:issuerCountryCodes:paymentApplicationStates:isMul tiTokensRequest:"));
    }
    uint64_t v5 = (void *)v4;
    [v6 unionSet:v4];
  }

  (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_10004A454( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10004A470(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10004A480(uint64_t a1)
{
}

void sub_10004A488(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v19;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v18 + 1) + 8LL * (void)i);
        if ([v8 state] != (id)1)
        {
          uint64_t v9 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
          v17[0] = _NSConcreteStackBlock;
          v17[1] = 3221225472LL;
          id v17[2] = sub_10004A630;
          v17[3] = &unk_10063C5B8;
          void v17[4] = v8;
          uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 objectsPassingTest:v17]);
          uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
          uint64_t v12 = *(void **)(v11 + 40);
          *(void *)(v11 + 40) = v10;
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v18 objects:v22 count:16];
    }

    while (v5);
  }

  uint64_t v13 = *(void *)(a1 + 32);
  __int16 v14 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (v14) {
    id v15 = [v14 copy];
  }
  else {
    id v15 = (id)objc_claimAutoreleasedReturnValue(+[NSSet set](&OBJC_CLASS___NSSet, "set"));
  }
  __int16 v16 = v15;
  (*(void (**)(uint64_t, id))(v13 + 16))(v13, v15);
}

uint64_t sub_10004A630(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 associatedAccountServiceAccountIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
  uint64_t v5 = [v3 isEqualToString:v4] ^ 1;

  return v5;
}

void sub_10004AB5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _inAppPrivateLabelPaymentPassesForApplicationIdentifier:*(void *)(a1 + 40) issuerCountryCodes:*(void *)(a1 + 48) paymentApplicationStates:0 isMul tiTokensRequest:*(unsigned __int8 *)(a1 + 64)]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10004ACE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _inAppPrivateLabelPaymentPassesForWebDomain:*(void *)(a1 + 40) issuerCountryCodes:*(void *)(a1 + 48) paymentApplicationStates:0 isMultiTokensRequest:*(unsigned __int8 *)(a1 + 64)]);
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

void sub_10004AE64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _inAppPrivateLabelPaymentPassesForApplicationIdentifier:*(void *)(a1 + 40) issuerCountryCodes:*(void *)(a1 + 48) paymentApplicationStates:0 isMul tiTokensRequest:*(unsigned __int8 *)(a1 + 64)]);
  (*(void (**)(uint64_t, BOOL))(v1 + 16))(v1, [v2 count] != 0);
}

void sub_10004AFF0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _inAppPrivateLabelPaymentPassesForWebDomain:*(void *)(a1 + 40) issuerCountryCodes:*(void *)(a1 + 48) paymentApplicationStates:0 isMultiTokensRequest:*(unsigned __int8 *)(a1 + 64)]);
  (*(void (**)(uint64_t, BOOL))(v1 + 16))(v1, [v2 count] != 0);
}

void sub_10004B148(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( NSMutableArray,  "arrayWithCapacity:",  [*(id *)(a1 + 32) count]));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10004B1FC;
  v5[3] = &unk_10063C630;
  id v3 = *(void **)(a1 + 32);
  v5[4] = *(void *)(a1 + 40);
  id v6 = v2;
  id v4 = v2;
  [v3 enumerateObjectsUsingBlock:v5];
  [*(id *)(a1 + 40) _sanitizePasses:v4];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10004B1FC(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) passWithUniqueIdentifier:a2]);
  if (v3)
  {
    uint64_t v5 = v3;
    unsigned int v4 = [*(id *)(a1 + 32) _entitledForObject:v3 forActions:2];
    id v3 = v5;
    if (v4)
    {
      [*(id *)(a1 + 40) addObject:v5];
      id v3 = v5;
    }
  }
}

void sub_10004B40C(uint64_t a1, void *a2)
{
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  obuint64_t j = a2;
  id v3 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)v6);
        dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
        uint64_t v8 = *(void **)(a1 + 40);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472LL;
        id v11[2] = sub_10004B590;
        void v11[3] = &unk_10063A6D8;
        id v12 = *(id *)(a1 + 48);
        uint64_t v13 = v7;
        id v14 = *(id *)(a1 + 32);
        [v8 supportsSearchForPassUniqueID:v9 completion:v11];

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v4);
  }
}

void sub_10004B590(uint64_t a1, int a2)
{
  if (a2) {
    [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_10004B5BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10004B7BC(uint64_t a1)
{
  uint64_t v28 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) passes]);
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v3 = [v2 countByEnumeratingWithState:&v34 objects:v42 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v35;
    uint64_t v30 = v2;
    uint64_t v31 = a1;
    uint64_t v29 = *(void *)v35;
    do
    {
      id v6 = 0LL;
      id v32 = v4;
      do
      {
        if (*(void *)v35 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v34 + 1) + 8LL * (void)v6);
        if ([v7 passType] == (id)1)
        {
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 associatedApplicationIdentifiers]);
          id v9 = *(id *)(a1 + 40);
          id v10 = v8;
          uint64_t v11 = v10;
          if (v9 && [v10 count])
          {
            __int128 v40 = 0u;
            __int128 v41 = 0u;
            __int128 v38 = 0u;
            __int128 v39 = 0u;
            uint64_t v33 = v11;
            id v12 = v11;
            id v13 = [v12 countByEnumeratingWithState:&v38 objects:v43 count:16];
            if (v13)
            {
              id v14 = v13;
              uint64_t v15 = *(void *)v39;
              while (2)
              {
                for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v39 != v15) {
                    objc_enumerationMutation(v12);
                  }
                  __int128 v17 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)i);
                  if ([v17 hasSuffix:@".*"])
                  {
                    uint64_t v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "substringToIndex:", (char *)objc_msgSend(v17, "length") - 1));
                    if (v18)
                    {
                      __int128 v19 = (void *)v18;
                      unsigned __int8 v20 = [v9 hasPrefix:v18];

                      if ((v20 & 1) != 0) {
                        goto LABEL_28;
                      }
                    }
                  }

                  else
                  {
                    id v21 = v9;
                    id v22 = v17;
                    if (v22 == v21)
                    {

LABEL_28:
                      id v25 = (void *)objc_claimAutoreleasedReturnValue([v7 uniqueID]);
                      -[NSMutableSet addObject:](v28, "addObject:", v25);

                      goto LABEL_29;
                    }

                    uint64_t v23 = v22;
                    if (v22)
                    {
                      unsigned __int8 v24 = [v21 isEqualToString:v22];

                      if ((v24 & 1) != 0) {
                        goto LABEL_28;
                      }
                    }

                    else
                    {
                    }
                  }
                }

                id v14 = [v12 countByEnumeratingWithState:&v38 objects:v43 count:16];
                if (v14) {
                  continue;
                }
                break;
              }
            }

LABEL_29:
            uint64_t v2 = v30;
            a1 = v31;
            uint64_t v5 = v29;
            id v4 = v32;
            uint64_t v11 = v33;
          }

          else
          {
          }
        }

        id v6 = (char *)v6 + 1;
      }

      while (v6 != v4);
      id v4 = [v2 countByEnumeratingWithState:&v34 objects:v42 count:16];
    }

    while (v4);
  }

  uint64_t v26 = *(void *)(a1 + 48);
  id v27 = -[NSMutableSet copy](v28, "copy");
  (*(void (**)(uint64_t, id))(v26 + 16))(v26, v27);
}

void sub_10004BBC4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(v1 + 88);
  uint64_t v4 = *(void *)(v1 + 96);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10004BC5C;
  v5[3] = &unk_10063C680;
  id v6 = *(id *)(a1 + 48);
  [v3 fieldMetadataForFieldWithProperties:v2 withExpressPassManager:v4 completion:v5];
}

uint64_t sub_10004BC5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004BE44(void *a1)
{
  uint64_t v1 = a1[6];
  id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 80) objectWithUniqueID:a1[5]]);
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([v4 dataAccessor]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 manifestHash]);
  (*(void (**)(uint64_t, void *))(v1 + 16))(v1, v3);
}

void sub_10004BF98(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) passesAllAccess])
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) passesEnabledForValuedAddedServicesWithAutomaticSelection:1]);
    [*(id *)(a1 + 32) _sanitizePasses:v2];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

id sub_10004C0B8(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sanitizePassIfNeeded:a2]);
  if ([v3 passType] == (id)1)
  {
    if (*(void *)(a1 + 40))
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 associatedWebDomains]);
      id v5 = [v4 containsObject:*(void *)(a1 + 40)];
    }

    else
    {
      id v5 = 0LL;
    }
  }

  else
  {
    id v5 = [*(id *)(a1 + 32) _entitledForObject:v3 forActions:2];
  }

  return v5;
}

id sub_10004C1D4(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sanitizePassIfNeeded:a2]);
  if ([v3 passType] == (id)1)
  {
    if (*(void *)(a1 + 40))
    {
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 associatedApplicationIdentifiers]);
      id v5 = [v4 containsObject:*(void *)(a1 + 40)];
    }

    else
    {
      id v5 = 0LL;
    }
  }

  else
  {
    id v5 = [*(id *)(a1 + 32) _entitledForObject:v3 forActions:2];
  }

  return v5;
}

LABEL_37:
}

              id v5 = v51;
            }

            else
            {
              if (v28)
              {
                *(_DWORD *)__int128 buf = 138543362;
                __int16 v68 = v20;
                _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Cannot delete transaction. No payment pass in local database with service identifier %{public}@",  buf,  0xCu);
              }

              uint64_t v33 = v27;
            }
          }

          else
          {
            id v44 = PKLogFacilityTypeGetObject(9LL);
            id v25 = (void *)objc_claimAutoreleasedReturnValue(v44);
            if (os_log_type_enabled((os_log_t)v25, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412546;
              __int16 v68 = 0LL;
              uint64_t v69 = 2114;
              __int128 v70 = v20;
              _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v25,  OS_LOG_TYPE_DEFAULT,  "Cannot delete transaction. No transactionSourceIdentifier %@ in local database with service identifier %{public}@",  buf,  0x16u);
            }
          }

          id v12 = v52;

          id v10 = v54;
          goto LABEL_40;
        }

        if ([*(id *)(v10 + 32) _isAccountEventFromRecordType:v18])
        {
          uint64_t v56 = v15;
          __int128 v36 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[PKAccountEvent eventIdentifierFromRecordName:]( &OBJC_CLASS___PKAccountEvent,  "eventIdentifierFromRecordName:",  v17));
          __int128 v37 = PKLogFacilityTypeGetObject(9LL);
          __int128 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            __int16 v68 = v36;
            _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "Deleting event with identifier %@",  buf,  0xCu);
          }

          __int128 v39 = *(void **)(*(void *)(v10 + 32) + 256LL);
          v59[0] = _NSConcreteStackBlock;
          v59[1] = 3221225472LL;
          v59[2] = sub_10008B574;
          v59[3] = &unk_100639300;
          __int128 v60 = v36;
          unsigned __int8 v20 = v36;
          [v39 deleteEventWithIdentifier:v20 completion:v59];
          uint64_t v23 = v60;
        }

        else
        {
          uint64_t v56 = v15;
          __int128 v40 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[PKAccount accountIdentifierFromRecordName:]( &OBJC_CLASS___PKAccount,  "accountIdentifierFromRecordName:",  v17));
          __int128 v41 = PKLogFacilityTypeGetObject(9LL);
          __int16 v42 = (os_log_s *)objc_claimAutoreleasedReturnValue(v41);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 138412290;
            __int16 v68 = v40;
            _os_log_impl( (void *)&_mh_execute_header,  v42,  OS_LOG_TYPE_DEFAULT,  "Deleting account with identifier %@",  buf,  0xCu);
          }

          uint64_t v43 = *(void **)(*(void *)(v10 + 32) + 256LL);
          v57[0] = _NSConcreteStackBlock;
          v57[1] = 3221225472LL;
          v57[2] = sub_10008B61C;
          v57[3] = &unk_10063A790;
          __int128 v58 = v40;
          unsigned __int8 v20 = v40;
          [v43 deleteAccountWithIdentifier:v20 completion:v57];
          uint64_t v23 = v58;
        }

            __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", 0LL));
            id v2 = v45;
            -[NSMutableDictionary setObject:forKey:](v45, "setObject:forKey:", v36, v10);

            a1 = v44;
            [*(id *)(v44 + 40) _queueIndexOfAccountWithIdentifier:v10];
            id v3 = v43;
            uint64_t v8 = v46;
            id v5 = v47;
LABEL_9:
            id v13 = PKLogFacilityTypeGetObject(14LL);
            id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(v13);
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
              *(_DWORD *)__int128 buf = 138412290;
              __int16 v64 = v15;
              _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Not inserting account event %@ because pass is not present",  buf,  0xCu);
            }
          }

          goto LABEL_46;
        }

        __int128 v16 = PKLogFacilityTypeGetObject(14LL);
        id v10 = (void *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled((os_log_t)v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v10,  OS_LOG_TYPE_DEFAULT,  "Event with missing account identifier",  buf,  2u);
        }
}

  if (v7 < 0) {
    id v27 = v7;
  }
  else {
    id v27 = v7 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v7);
  uint64_t v8 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  id v9 = v8 + v6;
  if (__OFADD__(v8, v6)) {
    goto LABEL_42;
  }
LABEL_8:
  uint64_t v7 = *v3;
  isUniquelyReferenced_nonNull_bridgeuint64_t Object = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  void *v3 = v7;
  uint64_t v8 = 0LL;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000LL) == 0 && (v7 & 0x4000000000000000LL) == 0)
  {
    uint64_t v11 = v7 & 0xFFFFFFFFFFFFFF8LL;
    if (v9 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8LL) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v8 = 1LL;
  }

  id v12 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
LABEL_15:
  if (v12 <= v9) {
    id v12 = v9;
  }
  swift_bridgeObjectRetain(v7);
  id v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1LL, v7);
  id v14 = *v3;
  void *v3 = v13;
  swift_bridgeObjectRelease(v14);
  uint64_t v11 = *v3 & 0xFFFFFFFFFFFFFF8LL;
LABEL_18:
  uint64_t v15 = v11 + 32;
  __int128 v16 = (char *)(v11 + 32 + 8 * v4);
  __int128 v17 = _s14descr1006609C1C13ProvisionTaskCMa();
  uint64_t v18 = (void *)swift_arrayDestroy(v16, v5, v17);
  if (!v6) {
    return specialized Array._endMutation()(v18);
  }
  __int128 v19 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    unsigned __int8 v20 = *(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    id v21 = v20 - v2;
    if (!__OFSUB__(v20, v2)) {
      goto LABEL_21;
    }
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  if (v19 < 0) {
    uint64_t v29 = *v3;
  }
  else {
    uint64_t v29 = v19 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*v3);
  uint64_t v30 = _CocoaArrayWrapper.endIndex.getter(v29);
  uint64_t v18 = (void *)swift_bridgeObjectRelease(v19);
  id v21 = v30 - v2;
  if (__OFSUB__(v30, v2)) {
    goto LABEL_52;
  }
LABEL_21:
  if ((v21 & 0x8000000000000000LL) == 0)
  {
    id v22 = (char *)(v15 + 8 * v2);
    if (v4 != v2 || v16 >= &v22[8 * v21]) {
      uint64_t v18 = memmove(v16, v22, 8 * v21);
    }
    id v2 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      uint64_t v23 = *(void *)((v2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
      unsigned __int8 v24 = v23 + v6;
      if (!__OFADD__(v23, v6))
      {
LABEL_27:
        *(void *)((*v3 & 0xFFFFFFFFFFFFF8LL) + 0x10) = v24;
        return specialized Array._endMutation()(v18);
      }

      goto LABEL_58;
    }

void sub_10004C78C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) passesAllAccess])
  {
    uint64_t v2 = PDDefaultPaymentPassUniqueIdentifier();
    id v6 = (id)objc_claimAutoreleasedReturnValue(v2);
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) passWithUniqueIdentifier:v6]);
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 paymentPass]);
    (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v5);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10004C9E4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) passesAllAccess]
    && (uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 96LL)) != 0)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472LL;
    v4[2] = sub_10004CAA4;
    v4[3] = &unk_10063C4F0;
    id v3 = *(id *)(a1 + 40);
    void v4[4] = *(void *)(a1 + 32);
    id v5 = v3;
    sub_10014BBB0(v2, 2LL, v4);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_10004CAA4(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = *(void **)(*(void *)(a1 + 32) + 88LL);
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 anyObject]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v6 passUniqueIdentifier]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 passWithUniqueIdentifier:v4]);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
}

void sub_10004CC00(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) passesAllAccess]
    && (uint64_t v2 = *(void *)(a1 + 32), *(void *)(v2 + 96)))
  {
    uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(v2 + 88) passesOfType:1]);
    uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    __int128 v50 = 0u;
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    __int128 v53 = 0u;
    uint64_t v28 = a1;
    uint64_t v29 = (void *)v3;
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _entitlementFilteredPasses:v3]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 allObjects]);

    obuint64_t j = v6;
    id v32 = [v6 countByEnumeratingWithState:&v50 objects:v57 count:16];
    if (v32)
    {
      uint64_t v31 = *(void *)v51;
      do
      {
        uint64_t v7 = 0LL;
        do
        {
          if (*(void *)v51 != v31) {
            objc_enumerationMutation(obj);
          }
          uint64_t v33 = v7;
          uint64_t v8 = *(void **)(*((void *)&v50 + 1) + 8 * v7);
          __int128 v46 = 0u;
          __int128 v47 = 0u;
          __int128 v48 = 0u;
          __int128 v49 = 0u;
          id v36 = (id)objc_claimAutoreleasedReturnValue([v8 paymentApplications]);
          id v9 = [v36 countByEnumeratingWithState:&v46 objects:v56 count:16];
          if (v9)
          {
            id v10 = v9;
            uint64_t v11 = *(void *)v47;
            uint64_t v34 = *(void *)v47;
            do
            {
              id v12 = 0LL;
              id v35 = v10;
              do
              {
                if (*(void *)v47 != v11) {
                  objc_enumerationMutation(v36);
                }
                id v13 = *(void **)(*((void *)&v46 + 1) + 8LL * (void)v12);
                if ([v13 paymentType] == (id)1000)
                {
                  __int128 v37 = v12;
                  __int128 v44 = 0u;
                  __int128 v45 = 0u;
                  __int128 v42 = 0u;
                  __int128 v43 = 0u;
                  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 supportedTransitNetworkIdentifiers]);
                  id v15 = [v14 countByEnumeratingWithState:&v42 objects:v55 count:16];
                  if (v15)
                  {
                    id v16 = v15;
                    uint64_t v17 = *(void *)v43;
                    do
                    {
                      for (uint64_t i = 0LL; i != v16; uint64_t i = (char *)i + 1)
                      {
                        if (*(void *)v43 != v17) {
                          objc_enumerationMutation(v14);
                        }
                        uint64_t v19 = *(void *)(*((void *)&v42 + 1) + 8LL * (void)i);
                        unsigned __int8 v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v4, "objectForKey:", v19));
                        if (v20)
                        {
                          id v21 = -[NSMutableArray initWithArray:]( objc_alloc(&OBJC_CLASS___NSMutableArray),  "initWithArray:",  v20);
                          -[NSMutableArray addObject:](v21, "addObject:", v8);
                        }

                        else
                        {
                          uint64_t v54 = v8;
                          id v21 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v54,  1LL));
                        }

                        -[NSMutableDictionary setObject:forKey:](v4, "setObject:forKey:", v21, v19);
                      }

                      id v16 = [v14 countByEnumeratingWithState:&v42 objects:v55 count:16];
                    }

                    while (v16);
                  }

                  uint64_t v11 = v34;
                  id v10 = v35;
                  id v12 = v37;
                }

                id v12 = (char *)v12 + 1;
              }

              while (v12 != v10);
              id v10 = [v36 countByEnumeratingWithState:&v46 objects:v56 count:16];
            }

            while (v10);
          }

          uint64_t v7 = v33 + 1;
        }

        while ((id)(v33 + 1) != v32);
        id v32 = [obj countByEnumeratingWithState:&v50 objects:v57 count:16];
      }

      while (v32);
    }

    uint64_t v22 = PDDefaultPaymentPassUniqueIdentifier();
    uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
    unsigned __int8 v24 = *(void **)(v28 + 40);
    uint64_t v25 = *(void *)(*(void *)(v28 + 32) + 96LL);
    v38[0] = _NSConcreteStackBlock;
    v38[1] = 3221225472LL;
    v38[2] = sub_10004D024;
    v38[3] = &unk_10063C748;
    __int128 v39 = v4;
    id v40 = v23;
    id v41 = v24;
    id v26 = v23;
    id v27 = v4;
    sub_10014C1C8(v25, v38);
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(a1 + 40) + 16LL))(*(void *)(a1 + 40), 0LL);
  }

void sub_10004D024(uint64_t a1, void *a2)
{
  id v3 = a2;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_10004D254;
  v23[3] = &unk_10063C6F8;
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  unsigned __int8 v24 = v4;
  [v3 enumerateObjectsUsingBlock:v23];
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) allKeys]);
  id v5 = [obj countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v20;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v7) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void *)(*((void *)&v19 + 1) + 8LL * (void)i);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v9]);
        id v11 = [v10 copy];

        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        v16[2] = sub_10004D2D0;
        v16[3] = &unk_10063C720;
        uint64_t v17 = v4;
        id v18 = *(id *)(a1 + 40);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 sortedArrayUsingComparator:v16]);
        [*(id *)(a1 + 32) setObject:v12 forKey:v9];
      }

      id v6 = [obj countByEnumeratingWithState:&v19 objects:v25 count:16];
    }

    while (v6);
  }

  uint64_t v13 = *(void *)(a1 + 48);
  id v14 = [*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, id))(v13 + 16))(v13, v14);
}

void sub_10004D254(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 passInformation]);
  id v4 = [v3 cardType];

  if (v4 == (id)2)
  {
    id v5 = *(void **)(a1 + 32);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v7 passUniqueIdentifier]);
    [v5 addObject:v6];
  }
}

uint64_t sub_10004D2D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[PKTransitPassProperties passPropertiesForPass:]( &OBJC_CLASS___PKTransitPassProperties,  "passPropertiesForPass:",  v5));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[PKTransitPassProperties passPropertiesForPass:]( &OBJC_CLASS___PKTransitPassProperties,  "passPropertiesForPass:",  v6));
  unsigned int v9 = [v7 isEnRoute];
  unsigned __int8 v10 = [v8 isEnRoute];
  if (v9) {
    uint64_t v11 = -1LL;
  }
  else {
    uint64_t v11 = 1LL;
  }
  if ((v9 & 1) == 0 && (v10 & 1) == 0)
  {
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v7 balance]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 balance]);
    id v14 = v13;
    uint64_t v29 = (void *)v12;
    if (v12 && v13)
    {
      uint64_t v11 = (uint64_t)[v13 compare:v12];
    }

    else if (v12)
    {
      uint64_t v11 = -1LL;
    }

    else
    {
      uint64_t v11 = v13 != 0LL;
    }

    id v15 = *(void **)(a1 + 32);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
    unsigned int v17 = [v15 containsObject:v16];

    id v18 = *(void **)(a1 + 32);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
    LODWORD(v1_Block_object_dispose(va, 8) = [v18 containsObject:v19];

    if (v17 == (_DWORD)v18)
    {
      if (v11) {
        char v20 = v17;
      }
      else {
        char v20 = 0;
      }
      if ((v20 & 1) == 0)
      {
        uint64_t v21 = *(void *)(a1 + 40);
        __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
        int v23 = PKEqualObjects(v21, v22);

        uint64_t v24 = *(void *)(a1 + 40);
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
        int v26 = PKEqualObjects(v24, v25);

        uint64_t v27 = -1LL;
        if (!v23) {
          uint64_t v27 = 1LL;
        }
        if (v23 != v26) {
          uint64_t v11 = v27;
        }
      }
    }

    else if (v17)
    {
      uint64_t v11 = -1LL;
    }

    else
    {
      uint64_t v11 = 1LL;
    }
  }

  return v11;
}

void sub_10004D5C8(id *a1)
{
  if ([*((id *)a1[4] + 1) passesAllAccess] && (uint64_t v2 = (id *)a1[4], v2[12]))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([v2[11] passesOfType:1]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([a1[4] _entitlementFilteredPasses:v3]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allObjects]);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    v16[2] = sub_10004D77C;
    v16[3] = &unk_10063C770;
    id v17 = a1[5];
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pk_objectsPassingTest:", v16));

    uint64_t v7 = PDDefaultPaymentPassUniqueIdentifier();
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = *((void *)a1[4] + 12);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_10004D8B4;
    void v12[3] = &unk_10063C748;
    id v13 = v6;
    id v14 = v8;
    id v15 = a1[6];
    id v10 = v8;
    id v11 = v6;
    sub_10014C1C8(v9, v12);
  }

  else
  {
    (*((void (**)(void))a1[6] + 2))();
  }

uint64_t sub_10004D77C(uint64_t a1, void *a2)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "paymentApplications", 0));
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
        if ([v8 paymentType] == (id)1000)
        {
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 appletDataFormat]);
          char v10 = PKEqualObjects(v9, *(void *)(a1 + 32));

          if ((v10 & 1) != 0)
          {
            uint64_t v11 = 1LL;
            goto LABEL_12;
          }
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  uint64_t v11 = 0LL;
LABEL_12:

  return v11;
}

void sub_10004D8B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_10004D9C0;
  void v11[3] = &unk_10063C6F8;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v12 = v4;
  [v3 enumerateObjectsUsingBlock:v11];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10004DA3C;
  v8[3] = &unk_10063C720;
  uint64_t v9 = v4;
  id v5 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  uint64_t v7 = v4;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 sortedArrayUsingComparator:v8]);
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10004D9C0(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v7 passInformation]);
  id v4 = [v3 cardType];

  if (v4 == (id)2)
  {
    id v5 = *(void **)(a1 + 32);
    uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v7 passUniqueIdentifier]);
    [v5 addObject:v6];
  }
}

uint64_t sub_10004DA3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue( +[PKTransitPassProperties passPropertiesForPass:]( &OBJC_CLASS___PKTransitPassProperties,  "passPropertiesForPass:",  v5));
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[PKTransitPassProperties passPropertiesForPass:]( &OBJC_CLASS___PKTransitPassProperties,  "passPropertiesForPass:",  v6));
  unsigned int v9 = [v7 isEnRoute];
  unsigned __int8 v10 = [v8 isEnRoute];
  if (v9) {
    uint64_t v11 = -1LL;
  }
  else {
    uint64_t v11 = 1LL;
  }
  if ((v9 & 1) == 0 && (v10 & 1) == 0)
  {
    uint64_t v12 = objc_claimAutoreleasedReturnValue([v7 balance]);
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v8 balance]);
    __int128 v14 = v13;
    uint64_t v29 = (void *)v12;
    if (v12 && v13)
    {
      uint64_t v11 = (uint64_t)[v13 compare:v12];
    }

    else if (v12)
    {
      uint64_t v11 = -1LL;
    }

    else
    {
      uint64_t v11 = v13 != 0LL;
    }

    __int128 v15 = *(void **)(a1 + 32);
    __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
    unsigned int v17 = [v15 containsObject:v16];

    id v18 = *(void **)(a1 + 32);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
    LODWORD(v1_Block_object_dispose(va, 8) = [v18 containsObject:v19];

    if (v17 == (_DWORD)v18)
    {
      if (v11) {
        char v20 = v17;
      }
      else {
        char v20 = 0;
      }
      if ((v20 & 1) == 0)
      {
        uint64_t v21 = *(void *)(a1 + 40);
        __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
        int v23 = PKEqualObjects(v21, v22);

        uint64_t v24 = *(void *)(a1 + 40);
        uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v6 uniqueID]);
        int v26 = PKEqualObjects(v24, v25);

        uint64_t v27 = -1LL;
        if (!v23) {
          uint64_t v27 = 1LL;
        }
        if (v23 != v26) {
          uint64_t v11 = v27;
        }
      }
    }

    else if (v17)
    {
      uint64_t v11 = -1LL;
    }

    else
    {
      uint64_t v11 = 1LL;
    }
  }

  return v11;
}

void sub_10004E178( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, char a43)
{
}

void sub_10004E1BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 40);
  unsigned int v9 = *(void **)(*(void *)(a1 + 32) + 64LL);
  v12[0] = _NSConcreteStackBlock;
  v12[2] = sub_10004E290;
  void v12[3] = &unk_10063C7E8;
  v12[1] = 3221225472LL;
  id v14 = v6;
  id v15 = v7;
  id v13 = v8;
  __int128 v16 = *(_OWORD *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 64);
  id v10 = v6;
  id v11 = v7;
  [v9 performHandlerOnSharedWebServiceQueue:v12];
}

void sub_10004E290(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PDSharingManagementRetrievePartnerEncryptionCertificateRequest);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 targetDevice]);
  -[PDSharingManagementRetrievePartnerEncryptionCertificateRequest setTargetDevice:](v4, "setTargetDevice:", v5);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passTypeIdentifier]);
  -[PDSharingManagementRequest setRegionIdentifier:](v4, "setRegionIdentifier:", v6);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serialNumber]);
  -[PDSharingManagementRetrievePartnerEncryptionCertificateRequest setPassSerialNumber:](v4, "setPassSerialNumber:", v7);

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v3 context]);
  unsigned int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 deviceID]);
  if (v9)
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 regionForIdentifier:v6]);
    id v11 = v10;
    if (v10) {
      id v12 = v10;
    }
    else {
      id v12 = (id)objc_claimAutoreleasedReturnValue([v8 primaryRegion]);
    }
    __int128 v16 = v12;
    __int128 v22 = v12;

    uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 brokerURL]);
    id v18 = (void *)objc_claimAutoreleasedReturnValue([v5 appleAccountInformation]);
    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue( -[PDSharingManagementRetrievePartnerEncryptionCertificateRequest urlRequestWithServiceURL:deviceIdentifier:appleAccountInformation:]( v4,  "urlRequestWithServiceURL:deviceIdentifier:appleAccountInformation:",  v17,  v9,  v18));

    id v20 = [v3 nextTaskID];
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_10004E4EC;
    v23[3] = &unk_10063C7C0;
    id v24 = v3;
    __int128 v27 = *(_OWORD *)(a1 + 64);
    uint64_t v21 = *(void **)(a1 + 48);
    uint64_t v28 = *(void *)(a1 + 56);
    id v26 = v21;
    id v25 = *(id *)(a1 + 40);
    [v24 performRequest:v19 taskIdentifier:v20 retries:1 authHandling:0 completionHandler:v23];
  }

  else
  {
    uint64_t v13 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  0LL,  0LL));
    uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v15 = *(void **)(v14 + 40);
    *(void *)(v14 + 40) = v13;

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_10004E4EC(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v25 = 0LL;
  id v26 = &v25;
  uint64_t v27 = 0x3032000000LL;
  uint64_t v28 = sub_10004A470;
  uint64_t v29 = sub_10004A480;
  id v30 = 0LL;
  id v10 = (void *)a1[4];
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_10004E788;
  void v22[3] = &unk_10063C798;
  id v24 = &v25;
  id v11 = v7;
  id v23 = v11;
  if ([v10 _resultForResponse:v8 error:v9 successHandler:v22] != (id)1 && !v9)
  {
    NSErrorUserInfoKey v31 = NSLocalizedDescriptionKey;
    id v32 = @"Received non 2XX http status code";
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v32,  &v31,  1LL));
    id v9 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  0LL,  v12));
  }

  uint64_t v13 = (void *)v26[5];
  if (v13)
  {
    id v14 = v13;
    uint64_t v15 = objc_claimAutoreleasedReturnValue([v14 certificate]);
    uint64_t v16 = *(void *)(a1[7] + 8LL);
    uint64_t v17 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;

    id v18 = (void *)objc_claimAutoreleasedReturnValue([v14 supportedEncryptionSchemes]);
    uint64_t v19 = objc_claimAutoreleasedReturnValue([v18 firstObject]);
    uint64_t v20 = *(void *)(a1[8] + 8LL);
    uint64_t v21 = *(void **)(v20 + 40);
    *(void *)(v20 + 40) = v19;

    objc_storeStrong((id *)(*(void *)(a1[9] + 8LL) + 40LL), v9);
    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    (*(void (**)(void))(a1[6] + 16LL))();
  }

  _Block_object_dispose(&v25, 8);
}

void sub_10004E760( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

BOOL sub_10004E788(uint64_t a1)
{
  uint64_t v2 = -[PDSharingManagementRetrievePartnerEncryptionCertificateResponse initWithData:]( objc_alloc(&OBJC_CLASS___PDSharingManagementRetrievePartnerEncryptionCertificateResponse),  "initWithData:",  *(void *)(a1 + 32));
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) != 0LL;
}

void sub_10004E7E0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = PKPublicKeyFromCertificate(*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_10004E8D4;
  v15[3] = &unk_10063C838;
  __int128 v18 = *(_OWORD *)(a1 + 64);
  id v16 = v6;
  id v17 = v7;
  id v13 = v6;
  id v14 = v7;
  [v8 _getEncryptedServiceProviderDataForSecureElementPass:v9 publicKey:v11 scheme:v12 completion:v15];
}

void sub_10004E8D4(void *a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v16 = 0LL;
  id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  a2,  0LL,  &v16));
  id v7 = v16;
  if (v7)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412290;
      id v18 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDPasslibary: Error converting encrypted payload to JSON string: %@",  buf,  0xCu);
    }
  }

  uint64_t v10 = *(void *)(a1[6] + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v6;
  id v12 = v6;

  uint64_t v13 = *(void *)(a1[7] + 8LL);
  id v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v5;
  id v15 = v5;

  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_10004EA30(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
  if (v8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 138412290;
      uint64_t v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "PDPasslibary: Failed to encrypt serviceproviderData: %@",  (uint8_t *)&v11,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10004F1B0(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 248LL));
  [WeakRetained checkForTransitNotification];
}

void sub_10004F2D4(void *a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 paymentPass]);
  if (v3)
  {
    id v4 = PDDefaultQueue();
    id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10004F410;
    block[3] = &unk_100639350;
    id v6 = (void *)a1[5];
    void block[4] = a1[4];
    id v11 = v6;
    id v12 = v3;
    dispatch_async(v5, block);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[6];
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v14 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "TransitMessage could not find payment pass for uniqueID:%@. fail to post upgraded pass notification",  buf,  0xCu);
    }
  }
}

void sub_10004F410(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 248LL));
  [WeakRetained postUpgradedPassNotificationForMarket:a1[5] pass:a1[6]];
}

void sub_10004F594(void *a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 paymentPass]);
  if (v3)
  {
    id v4 = PDDefaultQueue();
    id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v4);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10004F6D0;
    block[3] = &unk_100639350;
    id v6 = (void *)a1[5];
    void block[4] = a1[4];
    id v11 = v6;
    id v12 = v3;
    dispatch_async(v5, block);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[6];
      *(_DWORD *)__int128 buf = 138412290;
      uint64_t v14 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "TransitMessage could not find payment pass for uniqueID:%@. fail to post upgrade selection notification",  buf,  0xCu);
    }
  }
}

void sub_10004F6D0(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 248LL));
  [WeakRetained postUpgradesAvailableNotificationForMarket:a1[5] pass:a1[6]];
}

void sub_10005009C(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) passWithPassTypeID:a1[5] serialNumber:a1[6]]);
  uint64_t v3 = (objc_class *)+[PKPass classForPassType:]( &OBJC_CLASS___PKPass,  "classForPassType:",  PKPassTypeForPassTypeIdentifier(a1[5]));
  id v4 = -[objc_class defaultSettings](v3, "defaultSettings");
  if (v2)
  {
    id v5 = [*(id *)(a1[4] + 88) settingsForPass:v2];
  }

  else
  {
    id v5 = v4;
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = a1[5];
      uint64_t v9 = a1[6];
      uint64_t v10 = NSStringFromClass(v3);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      int v14 = 138412802;
      uint64_t v15 = v8;
      __int16 v16 = 2112;
      uint64_t v17 = v9;
      __int16 v18 = 2114;
      uint64_t v19 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Notice: Didn't find a db pass with with type: %@ and serial number: %@. Falling back to default %{public}@ settings.",  (uint8_t *)&v14,  0x20u);
    }
  }

  uint64_t v12 = a1[7];
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v2 manifestHash]);
  (*(void (**)(uint64_t, void *, id))(v12 + 16))(v12, v13, v5);
}

void sub_1000502D0(uint64_t a1)
{
  id v2 = +[PKPass createWithData:warnings:error:]( &OBJC_CLASS___PKPass,  "createWithData:warnings:error:",  *(void *)(a1 + 32),  0LL,  0LL);
  objc_msgSend(*(id *)(a1 + 40), "_queue_replacePass:handler:", v2, *(void *)(a1 + 48));
}

uint64_t sub_100050580(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100050708(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void (**)(uint64_t, id))(v2 + 16);
  id v4 = a2;
  v3(v2, v4);
  [v4 invalidate];
}

void sub_100050800(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v4 = a2;
  id v3 = [v4 consumeImageSet];
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  [v4 invalidate];
}

void sub_1000509D0(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void (**)(uint64_t, id))(v2 + 16);
  id v4 = a2;
  v3(v2, v4);
  [v4 invalidate];
}

id sub_100050AF8(void *a1)
{
  return _[*(id *)(a1[4] + 88) updateSettings:a1[6] forObjectWithUniqueIdentifier:a1[5]];
}

uint64_t sub_100050C30(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, 1LL);
  }
  return result;
}

void sub_100050F40(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 248LL));
  if ((objc_opt_respondsToSelector( WeakRetained,  "rescheduleCommutePlanRenewalRemindersForPaymentPassWithUniqueIdentifier:") & 1) != 0) {
    [WeakRetained rescheduleCommutePlanRenewalRemindersForPaymentPassWithUniqueIdentifier:*(void *)(a1 + 40)];
  }
}

id sub_100051070(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 8) passesAllAccess];
  if ((_DWORD)result) {
    return _[*(id *)(*(void *)(a1 + 32) + 88) noteObjectSharedWithUniqueID:*(void *)(a1 + 40)];
  }
  return result;
}

void sub_100051360(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_1000513E8;
  v6[3] = &unk_10063C950;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateObjectsWithOptions:2 usingBlock:v6];
  [*(id *)(a1 + 32) removeAllObjects];
}

uint64_t sub_1000513E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000513F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000515DC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_100051664;
  v6[3] = &unk_10063C9C8;
  id v7 = v3;
  id v5 = v3;
  [v4 unarchivePassesWithOptions:2 usingBlock:v6];
  [*(id *)(a1 + 32) invalidate];
}

uint64_t sub_100051664(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100051674(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000517C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v14;
    do
    {
      uint64_t v8 = 0LL;
      do
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)v8);
        uint64_t v10 = objc_autoreleasePoolPush();
        id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "createPass", (void)v13));
        if (v11)
        {
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 properties]);
          v3[2](v3, v11, v12);

          [v9 invalidate];
        }

        objc_autoreleasePoolPop(v10);
        uint64_t v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v6);
  }
}

uint64_t sub_100051920(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100051C90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100051CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = *(void **)(*(void *)(a1 + 32) + 48LL);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSValue valueWithPointer:](&OBJC_CLASS___NSValue, "valueWithPointer:", a2));
  [v6 removeObject:v7];

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 40LL));
  if (a3 == 1)
  {
    id v8 = PDDefaultQueue();
    uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100051E14;
    block[3] = &unk_10063CA40;
    void block[4] = *(void *)(a1 + 32);
    id v11 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 40);
    dispatch_async(v9, block);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

uint64_t sub_100051E14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100052030(uint64_t a1)
{
  id v23 = (void *)PDOSTransactionCreate("PDPassLibrary");
  uint64_t v24 = a1;
  uint64_t v25 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  id v2 = [obj countByEnumeratingWithState:&v40 objects:v48 count:16];
  if (v2)
  {
    char v3 = 0;
    uint64_t v4 = *(void *)v41;
    do
    {
      for (uint64_t i = 0LL; i != v2; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v41 != v4) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v40 + 1) + 8LL * (void)i);
        *(void *)uint64_t v34 = 0LL;
        id v35 = v34;
        uint64_t v36 = 0x3032000000LL;
        __int128 v37 = sub_10004A470;
        __int128 v38 = sub_10004A480;
        id v39 = 0LL;
        if ((v3 & 1) != 0)
        {
          char v3 = 1;
          goto LABEL_22;
        }

        uint64_t v7 = objc_autoreleasePoolPush();
        v33[0] = _NSConcreteStackBlock;
        v33[1] = 3221225472LL;
        v33[2] = sub_1000524C0;
        v33[3] = &unk_10063CA90;
        v33[4] = v34;
        [v6 accessFileDescriptorWithBlock:v33];
        uint64_t v8 = *((void *)v35 + 5);
        if (v8)
        {
          id v31 = 0LL;
          id v32 = 0LL;
          id v9 = +[PKPass createWithFileDataAccessor:validationOptions:warnings:error:]( &OBJC_CLASS___PKPass,  "createWithFileDataAccessor:validationOptions:warnings:error:",  v8,  2LL,  &v32,  &v31);
          id v10 = v32;
          id v11 = (os_log_s *)v31;
          if (v11)
          {
            uint64_t Object = PKLogFacilityTypeGetObject(0LL);
            __int128 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412546;
              id v45 = v9;
              __int16 v46 = 2112;
              __int128 v47 = v11;
              _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Failed to add unsigned pass: %@ due to validation error: %@",  buf,  0x16u);
            }

            goto LABEL_19;
          }

          uint64_t v14 = objc_claimAutoreleasedReturnValue( +[PKPlaceholderPassGenerator addManifestIfNecessaryToPass:]( &OBJC_CLASS___PKPlaceholderPassGenerator,  "addManifestIfNecessaryToPass:",  v9));
          __int128 v13 = (os_log_s *)v14;
          if (!v9 || v14)
          {
            uint64_t v15 = PKLogFacilityTypeGetObject(0LL);
            __int128 v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__int128 buf = 138412546;
              id v45 = v9;
              __int16 v46 = 2112;
              __int128 v47 = v13;
              _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Failed to add unsigned pass: %@ error: %@",  buf,  0x16u);
            }

LABEL_19:
            char v3 = 1;
          }

          else
          {
            -[NSMutableArray addObject:](v25, "addObject:", v9);
            char v3 = 0;
          }

          goto LABEL_21;
        }

        char v3 = 1;
LABEL_21:
        objc_autoreleasePoolPop(v7);
LABEL_22:
        [v6 invalidate];
        _Block_object_dispose(v34, 8);
      }

      id v2 = [obj countByEnumeratingWithState:&v40 objects:v48 count:16];
    }

    while (v2);
  }

  id v17 = [*(id *)(v24 + 32) count];
  if (v17 == -[NSMutableArray count](v25, "count"))
  {
    id v18 = PDDefaultQueue();
    uint64_t v19 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v18);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100052508;
    block[3] = &unk_10063BA88;
    void block[4] = *(void *)(v24 + 40);
    uint64_t v28 = v25;
    id v30 = *(id *)(v24 + 48);
    id v29 = v23;
    dispatch_async(v19, block);
  }

  else
  {
    uint64_t v20 = PKLogFacilityTypeGetObject(0LL);
    uint64_t v21 = (os_log_s *)objc_claimAutoreleasedReturnValue(v20);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v34 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  OS_LOG_TYPE_DEFAULT,  "Attempting to add unsigned passes, but unable to create PKPasses.",  v34,  2u);
    }

    uint64_t v22 = *(void *)(v24 + 48);
    if (v22) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v22, 2LL);
    }
  }
}

void sub_100052498( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, char a31)
{
}

void sub_1000524C0(uint64_t a1, uint64_t a2)
{
  id v3 = [[PKSerializedDataAccessor alloc] initWithFileDescriptor:a2 error:0];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  id v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_100052508(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100052598;
  v4[3] = &unk_10063CAB8;
  id v6 = *(id *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  [v2 _addPasses:v3 withCompletion:v4];
}

uint64_t sub_100052598(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000526F4(uint64_t a1)
{
  id v2 = (void *)PDOSTransactionCreate("PDPassLibrary");
  id v3 = [*(id *)(a1 + 32) count];
  id v4 = objc_alloc_init(&OBJC_CLASS___PKHMHomeManager);
  if (v4)
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    id v9[2] = sub_100052834;
    v9[3] = &unk_10063CC20;
    int8x16_t v8 = *(int8x16_t *)(a1 + 32);
    id v5 = (id)v8.i64[0];
    int8x16_t v10 = vextq_s8(v8, v8, 8uLL);
    id v14 = v3;
    id v13 = *(id *)(a1 + 48);
    id v11 = v2;
    id v12 = v4;
    [v12 fetchHomesWithCompletion:v9];
  }

  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  4LL,  0LL));
      (*(void (**)(uint64_t, void, void *))(v6 + 16))(v6, 0LL, v7);
    }
  }
}

void sub_100052834(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  v56[0] = 0LL;
  v56[1] = v56;
  v56[2] = 0x3032000000LL;
  v56[3] = sub_10004A470;
  v56[4] = sub_10004A480;
  id v57 = 0LL;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 UUIDString]);

  v54[0] = _NSConcreteStackBlock;
  v54[1] = 3221225472LL;
  v54[2] = sub_100052CF0;
  v54[3] = &unk_10063CB08;
  v54[4] = *(void *)(a1 + 32);
  id v26 = v7;
  id v55 = v26;
  [v4 addOperation:v54];
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  obuint64_t j = v3;
  id v8 = [obj countByEnumeratingWithState:&v50 objects:v62 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v51;
    do
    {
      int8x16_t v10 = 0LL;
      do
      {
        if (*(void *)v51 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void *)(*((void *)&v50 + 1) + 8LL * (void)v10);
        v45[0] = _NSConcreteStackBlock;
        v45[1] = 3221225472LL;
        v45[2] = sub_100052E40;
        v45[3] = &unk_10063CB58;
        void v45[4] = v11;
        id v12 = *(id *)(a1 + 40);
        __int128 v49 = v56;
        uint64_t v13 = *(void *)(a1 + 32);
        id v46 = v12;
        uint64_t v47 = v13;
        __int128 v48 = v5;
        [v4 addOperation:v45];

        int8x16_t v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [obj countByEnumeratingWithState:&v50 objects:v62 count:16];
    }

    while (v8);
  }

  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472LL;
  v42[2] = sub_1000530C8;
  v42[3] = &unk_10063CB80;
  uint64_t v44 = *(void *)(a1 + 72);
  id v14 = v5;
  __int128 v43 = v14;
  [v4 addOperation:v42];
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) sharedWebService]);
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 targetDevice]);
  if (PKTargetDeviceSupportsExpress())
  {
    if (*(void *)(a1 + 72))
    {
      unint64_t v17 = 0LL;
      do
      {
        v37[0] = _NSConcreteStackBlock;
        v37[1] = 3221225472LL;
        v37[2] = sub_1000531D8;
        v37[3] = &unk_10063CBD0;
        __int128 v38 = v14;
        unint64_t v41 = v17;
        id v39 = v16;
        id v40 = v15;
        [v4 addOperation:v37];

        ++v17;
      }

      while (v17 < *(void *)(a1 + 72));
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    uint64_t v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 138412546;
      __int128 v59 = v14;
      __int16 v60 = 2112;
      uint64_t v61 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Skipping adding HomeKeys (%@) to express as target device (%@) does not support express",  buf,  0x16u);
    }
  }

  uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472LL;
  id v28[2] = sub_10005338C;
  v28[3] = &unk_10063CBF8;
  uint64_t v36 = v56;
  uint64_t v21 = v14;
  id v29 = v21;
  id v22 = *(id *)(a1 + 40);
  uint64_t v23 = *(void *)(a1 + 32);
  id v30 = v22;
  uint64_t v31 = v23;
  id v35 = *(id *)(a1 + 64);
  id v24 = v26;
  id v32 = v24;
  id v33 = *(id *)(a1 + 48);
  id v34 = *(id *)(a1 + 56);
  id v25 = [v4 evaluateWithInput:v20 completion:v28];

  _Block_object_dispose(v56, 8);
}

void sub_100052CB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
}

void sub_100052CF0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  int8x16_t v10 = *(void **)(v8 + 32);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100052DB4;
  v13[3] = &unk_10063CAE0;
  id v14 = v6;
  id v15 = v7;
  id v11 = v6;
  id v12 = v7;
  [v10 acquireAssertionOfType:1 withIdentifier:v9 reason:@"Unsigned pass provisioning" handler:v13];
}

uint64_t sub_100052DB4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Adding HomeKey unable to aquire provisioning assertion",  v6,  2u);
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100052E40(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) walletKeyPassSerialNumber]);
  if ([*(id *)(a1 + 40) containsObject:v8])
  {
    uint64_t v9 = *(void **)(a1 + 32);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    id v15[2] = sub_100052F58;
    v15[3] = &unk_10063CB30;
    id v10 = v8;
    uint64_t v11 = *(void *)(a1 + 64);
    id v16 = v10;
    uint64_t v21 = v11;
    id v20 = v7;
    id v12 = v6;
    uint64_t v13 = *(void *)(a1 + 48);
    id v14 = *(void **)(a1 + 56);
    id v17 = v12;
    uint64_t v18 = v13;
    id v19 = v14;
    [v9 addWalletKeyWithOptions:1 completionHandler:v15];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_100052F58(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a1[4];
      int v13 = 138412546;
      uint64_t v14 = v9;
      __int16 v15 = 2112;
      id v16 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Adding HomeKey for home %@ returned error %@",  (uint8_t *)&v13,  0x16u);
    }

    objc_storeStrong((id *)(*(void *)(a1[9] + 8LL) + 40LL), a3);
    (*(void (**)(void))(a1[8] + 16LL))();
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1[6] + 88) passWithPassTypeID:@"paymentpass.com.apple.dev1" serialNumber:a1[4]]);
    uint64_t v11 = (void *)a1[7];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 paymentPass]);
    [v11 safelyAddObject:v12];

    (*(void (**)(void))(a1[8] + 16LL))();
  }
}

void sub_1000530C8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = *(id *)(a1 + 40);
  id v7 = a4;
  id v8 = a3;
  id v9 = [v5 count];
  uint64_t Object = PKLogFacilityTypeGetObject(22LL);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    id v12 = @"Y";
    if (v6 != v9) {
      id v12 = @"N";
    }
    int v13 = 138412290;
    uint64_t v14 = v12;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Adding HomeKey provisioned all passes: %@",  (uint8_t *)&v13,  0xCu);
  }

  v7[2](v7, v8, v6 != v9);
}

void sub_1000531D8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndex:*(void *)(a1 + 56)]);
  id v10 = *(void **)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  id v14[2] = sub_1000532BC;
  v14[3] = &unk_10063CBA8;
  id v16 = v6;
  id v17 = v7;
  id v15 = v8;
  id v11 = v6;
  id v12 = v7;
  id v13 = v8;
  [v10 paymentWebService:v9 handlePotentialExpressPass:v13 withCompletionHandler:v14];
}

void sub_1000532BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "Adding HomeKey failed to enable express for %@ pass.",  (uint8_t *)&v7,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10005338C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL)
    || (id v8 = [*(id *)(a1 + 32) count], v8 != objc_msgSend(*(id *)(a1 + 40), "count"))
    || [v7 isCanceled])
  {
    id v33 = v7;
    id v9 = v6;
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
      id v13 = [*(id *)(a1 + 32) count];
      *(_DWORD *)__int128 buf = 138412546;
      id v40 = v12;
      __int16 v41 = 2048;
      id v42 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Adding HomeKey Error adding HomeKeys: %@. Removing %lu added HomeKeys.",  buf,  0x16u);
    }

    __int128 v36 = 0u;
    __int128 v37 = 0u;
    __int128 v34 = 0u;
    __int128 v35 = 0u;
    id v14 = *(id *)(a1 + 32);
    id v15 = [v14 countByEnumeratingWithState:&v34 objects:v38 count:16];
    if (v15)
    {
      id v16 = v15;
      uint64_t v17 = *(void *)v35;
      do
      {
        for (uint64_t i = 0LL; i != v16; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v35 != v17) {
            objc_enumerationMutation(v14);
          }
          id v19 = *(void **)(*(void *)(a1 + 48) + 80LL);
          id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v34 + 1) + 8 * (void)i) uniqueID]);
          [v19 deleteCardWithUniqueID:v20 forReason:3 withDiagnosticReason:@"Cleaning up homekey because operation failed"];
        }

        id v16 = [v14 countByEnumeratingWithState:&v34 objects:v38 count:16];
      }

      while (v16);
    }

    uint64_t v21 = *(void *)(*(void *)(a1 + 88) + 8LL);
    id v22 = *(void **)(v21 + 40);
    if (v22)
    {
      id v23 = v22;
      id v24 = *(void **)(v21 + 40);
      *(void *)(v21 + 40) = v23;
    }

    else
    {
      uint64_t v25 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
      uint64_t v26 = *(void *)(*(void *)(a1 + 88) + 8LL);
      id v24 = *(void **)(v26 + 40);
      *(void *)(v26 + 40) = v25;
    }

    id v6 = v9;

    uint64_t v27 = *(void *)(a1 + 80);
    id v7 = v33;
    if (v27)
    {
      uint64_t v28 = *(void (**)(void))(v27 + 16);
LABEL_18:
      v28();
    }
  }

  else
  {
    uint64_t v29 = PKLogFacilityTypeGetObject(22LL);
    id v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      id v31 = [*(id *)(a1 + 32) count];
      *(_DWORD *)__int128 buf = 134217984;
      id v40 = v31;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Adding HomeKey provisioned %lu passes",  buf,  0xCu);
    }

    uint64_t v32 = *(void *)(a1 + 80);
    if (v32)
    {
      uint64_t v28 = *(void (**)(void))(v32 + 16);
      goto LABEL_18;
    }
  }

  [*(id *)(*(void *)(a1 + 48) + 32) invalidateAssertionOfType:1 withIdentifier:*(void *)(a1 + 56) handler:0];
}

void sub_1000537CC(uint64_t a1)
{
  id v2 = (void *)PDOSTransactionCreate("PDPassLibrary");
  id v3 = objc_alloc_init(&OBJC_CLASS___PKHMHomeManager);
  if (v3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_1000538A8;
    v5[3] = &unk_10063CC98;
    id v8 = *(id *)(a1 + 32);
    id v6 = v2;
    id v7 = v3;
    [v7 fetchHomesWithCompletion:v5];
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4) {
      (*(void (**)(uint64_t, void, void))(v4 + 16))(v4, 0LL, 0LL);
    }
  }
}

void sub_1000538A8(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v6 = v3;
  id v7 = [v6 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v23;
    do
    {
      id v10 = 0LL;
      do
      {
        if (*(void *)v23 != v9) {
          objc_enumerationMutation(v6);
        }
        uint64_t v11 = *(void *)(*((void *)&v22 + 1) + 8LL * (void)v10);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472LL;
        v20[2] = sub_100053AC8;
        v20[3] = &unk_10063CB08;
        void v20[4] = v11;
        uint64_t v21 = v5;
        [v4 addOperation:v20];

        id v10 = (char *)v10 + 1;
      }

      while (v8 != v10);
      id v8 = [v6 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }

    while (v8);
  }

  id v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_100053CAC;
  v15[3] = &unk_10063CC70;
  id v16 = v5;
  id v19 = a1[6];
  id v17 = a1[4];
  id v18 = a1[5];
  id v13 = v5;
  id v14 = [v4 evaluateWithInput:v12 completion:v15];
}

void sub_100053AC8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) walletKeyPassSerialNumber]);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  id v14[2] = sub_100053BB0;
  v14[3] = &unk_10063CC48;
  id v15 = v8;
  uint64_t v9 = *(void **)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v17 = v6;
  id v18 = v7;
  id v16 = v10;
  id v11 = v6;
  id v12 = v7;
  id v13 = v8;
  [v9 fetchAvailableWalletKeyEncodedPKPass:v14];
}

void sub_100053BB0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(22LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v10 = 138412546;
      uint64_t v11 = v9;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Fetched available pass for home %@ returned error %@",  (uint8_t *)&v10,  0x16u);
    }
  }

  else
  {
    [*(id *)(a1 + 40) addObject:v5];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100053CAC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(22LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = [*(id *)(a1 + 32) count];
    int v12 = 134217984;
    id v13 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Found %lu available HomeKey passes",  (uint8_t *)&v12,  0xCu);
  }

  uint64_t v11 = *(void *)(a1 + 56);
  if (v11) {
    (*(void (**)(uint64_t, void, void))(v11 + 16))(v11, *(void *)(a1 + 32), 0LL);
  }
}

void sub_100053EC0(uint64_t a1)
{
  id v2 = (void *)PDOSTransactionCreate("PDPassLibrary");
  id v3 = objc_autoreleasePoolPush();
  uint64_t v13 = 0LL;
  id v14 = &v13;
  uint64_t v15 = 0x3032000000LL;
  id v16 = sub_10004A470;
  id v17 = sub_10004A480;
  id v18 = 0LL;
  id v4 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_10005406C;
  void v12[3] = &unk_10063CA90;
  void v12[4] = &v13;
  [v4 accessFileDescriptorWithBlock:v12];
  [*(id *)(a1 + 32) invalidate];
  uint64_t v5 = v14[5];
  if (v5)
  {
    id v10 = 0LL;
    id v11 = 0LL;
    id v6 = +[PKPass createWithFileDataAccessor:validationOptions:warnings:error:]( &OBJC_CLASS___PKPass,  "createWithFileDataAccessor:validationOptions:warnings:error:",  v5,  2LL,  &v11,  &v10);
    id v7 = v11;
    unint64_t v8 = (unint64_t)v10;
    uint64_t v9 = objc_claimAutoreleasedReturnValue( +[PKPlaceholderPassGenerator addManifestIfNecessaryToPass:]( &OBJC_CLASS___PKPlaceholderPassGenerator,  "addManifestIfNecessaryToPass:",  v6));
    if (v9 | v8) {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
    else {
      objc_msgSend(*(id *)(a1 + 40), "_queue_replacePass:handler:", v6, *(void *)(a1 + 48));
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  _Block_object_dispose(&v13, 8);

  objc_autoreleasePoolPop(v3);
}

void sub_10005404C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005406C(uint64_t a1, uint64_t a2)
{
  id v3 = [[PKSerializedDataAccessor alloc] initWithFileDescriptor:a2 error:0];
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

uint64_t sub_100054204(void *a1)
{
  return (*(uint64_t (**)(void))(a1[7] + 16LL))();
}

void sub_1000543A0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) passWithPassTypeID:*(void *)(a1 + 40) serialNumber:*(void *)(a1 + 48)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 paymentPass]);

  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) sharedWebService]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 targetDevice]);
    if (PKTargetDeviceSupportsExpress())
    {
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      id v14[2] = sub_1000545C0;
      v14[3] = &unk_10063CCC0;
      id v15 = v3;
      id v16 = *(id *)(a1 + 56);
      [v5 paymentWebService:v4 handlePotentialExpressPass:v15 withCompletionHandler:v14];
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__int128 buf = 138412290;
        id v18 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Attempting to call enableExpressForPassWithPassTypeIdentifier, but target device (%@) does not support express",  buf,  0xCu);
      }

      uint64_t v13 = *(void *)(a1 + 56);
      if (v13) {
        (*(void (**)(uint64_t, void))(v13 + 16))(v13, 0LL);
      }
    }
  }

  else
  {
    uint64_t v6 = PKLogFacilityTypeGetObject(0LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v8 = *(void **)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412546;
      id v18 = v8;
      __int16 v19 = 2112;
      uint64_t v20 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "EnableExpressForPassWithPassTypeIdentifier unable to find pass with identifier: %@ serialNumber: %@",  buf,  0x16u);
    }

    uint64_t v10 = *(void *)(a1 + 56);
    if (v10) {
      (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0LL);
    }
  }
}

void sub_1000545C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(a1 + 32);
    int v8 = 138412546;
    id v9 = v3;
    __int16 v10 = 2112;
    uint64_t v11 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "EnableExpressForPassWithPassTypeIdentifier enabled %@ expressModes for %@ pass.",  (uint8_t *)&v8,  0x16u);
  }

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, BOOL))(v7 + 16))(v7, v3 != 0LL);
  }
}

uint64_t sub_100054780(uint64_t a1)
{
  id v2 = *(void **)(a1 + 32);
  if (v2
    && [v2 length]
    && [*(id *)(a1 + 40) _entitledForUniqueID:*(void *)(a1 + 32) forActions:8])
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 88) passWithUniqueIdentifier:*(void *)(a1 + 32)]);
    uint64_t v4 = v3;
    if (v3)
    {
      if ([v3 passType] == (id)1) {
        uint64_t v5 = 6LL;
      }
      else {
        uint64_t v5 = 3LL;
      }
      [*(id *)(*(void *)(a1 + 40) + 80) deleteCardWithUniqueID:*(void *)(a1 + 32) forReason:v5 withDiagnosticReason:*(void *)(a1 + 48)];
    }
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

uint64_t sub_1000548F8(uint64_t a1)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v13;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v13 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v12 + 1) + 8LL * (void)v6);
        if (v7
          && objc_msgSend(*(id *)(*((void *)&v12 + 1) + 8 * (void)v6), "length", (void)v12)
          && [*(id *)(a1 + 40) _entitledForUniqueID:v7 forActions:8])
        {
          int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 88) passWithUniqueIdentifier:v7]);
          id v9 = v8;
          if (v8)
          {
            if ([v8 passType] == (id)1) {
              uint64_t v10 = 7LL;
            }
            else {
              uint64_t v10 = 4LL;
            }
            [*(id *)(*(void *)(a1 + 40) + 80) deleteCardWithUniqueID:v7 forReason:v10 withDiagnosticReason:*(void *)(a1 + 48)];
          }
        }

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v4);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

uint64_t sub_100054B30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 && [*(id *)(a1 + 40) _entitledForUniqueID:v2 forActions:2])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 40) + 248LL));
    [WeakRetained recoverPassWithUniqueID:*(void *)(a1 + 32)];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_100054C54(void *a1)
{
  if ([*(id *)(a1[4] + 8) passesAllAccess])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 248LL));
    [WeakRetained removePassesOfType:a1[7] withDiagnosticReason:a1[5]];
  }

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_100054D80(void *a1)
{
  if (([*(id *)(a1[4] + 8) passesAllAccess] & 1) != 0
    || [*(id *)(a1[4] + 8) paymentAllAccess])
  {
    id v2 = [*(id *)(a1[4] + 16) resetApplePayWithType:0 diagnosticReason:a1[5]];
  }

  else
  {
    id v2 = 0LL;
  }

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, id))(result + 16))(result, v2);
  }
  return result;
}

id sub_100054EE0(void *a1)
{
  if (*(void *)(a1[4] + 72LL)) {
    return _[*(id *)(a1[4] + 72) updatePassWithUniqueIdentifier:a1[5] handler:a1[6]];
  }
  else {
    return (id)(*(uint64_t (**)(void))(a1[6] + 16LL))();
  }
}

id sub_10005504C(void *a1)
{
  if (*(void *)(a1[4] + 72LL)) {
    return _[*(id *)(a1[4] + 72) personalizePassWithUniqueIdentifier:a1[5] contact:a1[6] personalizationToken:a1[7] requiredPersonalizationFields:a1[9] personalizat ionSource:a1[10] handler:a1[8]];
  }
  else {
    return (id)(*(uint64_t (**)(void))(a1[8] + 16LL))();
  }
}

uint64_t sub_100055180(uint64_t a1)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  [*(id *)(*(void *)(a1 + 32) + 88) hasCandidatePasses]);
}

void sub_1000553D0(uint64_t a1)
{
  if (*(void *)(a1 + 56))
  {
    id v2 = *(void **)(a1 + 32);
    if (v2
      && [v2 length]
      && ([*(id *)(a1 + 40) _entitledForUniqueID:*(void *)(a1 + 32) forActions:2] & 1) != 0)
    {
      if (![*(id *)(*(void *)(a1 + 40) + 8) paymentAllAccess]
        || PKForceSignDataApplicationStateForegroundRunningCheck())
      {
        id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) remoteProcessApplicationInfo]);
        if (![v3 isRunning] || !objc_msgSend(v3, "isVisible"))
        {
          uint64_t Object = PKLogFacilityTypeGetObject(6LL);
          uint64_t v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__int128 buf = 136315138;
            uint64_t v28 = "-[PDPassLibrary signData:forPassUniqueID:completion:]_block_invoke";
            _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "%s requires the client to be running in the foreground",  buf,  0xCu);
          }

          uint64_t v21 = *(void *)(a1 + 56);
          uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
          (*(void (**)(uint64_t, void, void, void *))(v21 + 16))(v21, 0LL, 0LL, v7);
          goto LABEL_24;
        }
      }

      id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 88) passWithUniqueIdentifier:*(void *)(a1 + 32)]);
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 paymentPass]);
      uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 devicePrimaryPaymentApplication]);
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 subcredentials]);
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 anyObject]);

      if (v7)
      {
        uint64_t v8 = PKBundleIdentifierForPID([*(id *)(a1 + 40) remoteProcessIdentifier]);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 UUIDString]);
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([@"frameworkSignature-" stringByAppendingString:v11]);

        uint64_t v13 = *(void *)(a1 + 48);
        __int128 v14 = *(void **)(*(void *)(a1 + 40) + 160LL);
        v25[0] = _NSConcreteStackBlock;
        v25[1] = 3221225472LL;
        v25[2] = sub_100055820;
        v25[3] = &unk_10063CD38;
        id v26 = *(id *)(a1 + 56);
        [v14 signData:v13 auth:0 bundleIdentifier:v9 nonce:v12 credential:v7 completion:v25];
      }

      else
      {
        uint64_t v22 = PKLogFacilityTypeGetObject(6LL);
        __int128 v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__int128 buf = 136315138;
          uint64_t v28 = "-[PDPassLibrary signData:forPassUniqueID:completion:]_block_invoke";
          _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "%s requires a pass with a credential",  buf,  0xCu);
        }

        uint64_t v24 = *(void *)(a1 + 56);
        id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  1LL,  0LL));
        (*(void (**)(uint64_t, void, void, void *))(v24 + 16))(v24, 0LL, 0LL, v9);
      }

LABEL_24:
      goto LABEL_25;
    }

    uint64_t v15 = PKLogFacilityTypeGetObject(6LL);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v28 = "-[PDPassLibrary signData:forPassUniqueID:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v17 = *(void *)(a1 + 56);
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  4LL,  0LL));
    (*(void (**)(uint64_t, void, void, void *))(v17 + 16))(v17, 0LL, 0LL, v3);
  }

  else
  {
    uint64_t v18 = PKLogFacilityTypeGetObject(6LL);
    id v3 = (void *)objc_claimAutoreleasedReturnValue(v18);
    if (os_log_type_enabled((os_log_t)v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)__int128 buf = 136315138;
      uint64_t v28 = "-[PDPassLibrary signData:forPassUniqueID:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v3,  OS_LOG_TYPE_DEFAULT,  "%s requires a completion",  buf,  0xCu);
    }
  }

void sub_100055820(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = PDDefaultQueue();
  uint64_t v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_100055914;
  v16[3] = &unk_10063CD10;
  id v17 = v9;
  id v12 = *(id *)(a1 + 32);
  id v19 = v8;
  id v20 = v12;
  id v18 = v7;
  id v13 = v8;
  id v14 = v7;
  id v15 = v9;
  dispatch_async(v11, v16);
}

void sub_100055914(void *a1)
{
  uint64_t v1 = a1[7];
  if (a1[4])
  {
    id v2 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
    (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0LL, 0LL, v2);
  }

  else
  {
    (*(void (**)(void, void, void, void))(v1 + 16))(a1[7], a1[5], a1[6], 0LL);
  }

id sub_100055B74(void *a1)
{
  return [*(id *)(a1[4] + 56) createFidoKeyForRelyingParty:a1[5] relyingPartyAccountHash:a1[6] challenge:a1[7] externalizedAuth:a1[8] completion:a1[9]];
}

id sub_100055D04(void *a1)
{
  return [*(id *)(a1[4] + 56) checkFidoKeyPresenceForRelyingParty:a1[5] relyingPartyAccountHash:a1[6] fidoKeyHash:a1[7] completion:a1[8]];
}

id sub_100055F30(void *a1)
{
  return [*(id *)(a1[4] + 56) signWithFidoKeyForRelyingParty:a1[5] relyingPartyAccountHash:a1[6] fidoKeyHash:a1[7] challenge:a1[8] publicKeyIdentifier:a1[9] externalized Auth:a1[10] completion:a1[11]];
}

id sub_1000560C8(void *a1)
{
  return _[*(id *)(a1[4] + 56) generateSEEncryptionCertificateForSubCredentialId:a1[5] completion:a1[6]];
}

id sub_100056240(void *a1)
{
  return [*(id *)(a1[4] + 208) generateISOEncryptionCertificateForSubCredentialId:a1[5] completion:a1[6]];
}

id sub_1000563D0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 208LL);
  id v3 = -[NSSet initWithObjects:](objc_alloc(&OBJC_CLASS___NSSet), "initWithObjects:", *(void *)(a1 + 40), 0LL);
  [v2 deleteSubCredentialIdentifiers:v3 cardType:3];

  return [*(id *)(*(void *)(a1 + 32) + 160) revokeSubcredentialForIdentifier:*(void *)(a1 + 40) withCompletion:0];
}

id sub_1000565B4(void *a1)
{
  return [*(id *)(a1[4] + 208) addISO18013Blobs:a1[5] cardType:a1[7] completion:a1[6]];
}

id sub_100056738(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) longTermPrivacyKeyForCredentialGroupIdentifier:*(void *)(a1 + 40) reuseExisting:*(unsigned __int8 *)(a1 + 56) completion:*(void *)(a1 + 48)];
}

void sub_1000568F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 224LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10005697C;
  v3[3] = &unk_10063CDD8;
  id v4 = *(id *)(a1 + 48);
  [v2 registerLocalAuxiliaryCapabilities:v1 withPass:0 completion:v3];
}

void sub_10005697C(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v13 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    id v7 = [a2 copy];
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v13 keyEnumerator]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 nextObject]);
    if (v9)
    {
      id v10 = (void *)v9;
      do
      {
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v13 objectForKey:v10]);
        [v7 setObject:v11 forKey:v10];

        uint64_t v12 = objc_claimAutoreleasedReturnValue([v8 nextObject]);
        id v10 = (void *)v12;
      }

      while (v12);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_100056BB8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = *(void **)(*(void *)(a1 + 32) + 56LL);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100056C44;
  v4[3] = &unk_10063CE00;
  uint64_t v3 = *(void *)(a1 + 56);
  id v5 = *(id *)(a1 + 48);
  [v2 signChallenge:v1 signatureEntanglementMode:v3 completion:v4];
}

uint64_t sub_100056C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(result + 16))(result, a2, a3, 0LL);
  }
  return result;
}

void sub_100057940(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) configurationType];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_100057B64;
  v15[3] = &unk_100639688;
  id v16 = *(id *)(a1 + 48);
  uint64_t v3 = objc_retainBlock(v15);
  if (v2 == (id)3)
  {
    if (!*(_BYTE *)(a1 + 56))
    {
      [*(id *)(a1 + 40) canAddHomeKeyWithConfiguration:*(void *)(a1 + 32) completion:v3];
      goto LABEL_17;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    *(_WORD *)__int128 buf = 0;
    uint64_t v6 = "canAddSecureElementPassWithConfiguration: HomeKey not supported synchronously";
    goto LABEL_8;
  }

  if (+[PKWalletVisibility isWalletRestricted](&OBJC_CLASS___PKWalletVisibility, "isWalletRestricted"))
  {
    uint64_t v7 = PKLogFacilityTypeGetObject(6LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    *(_WORD *)__int128 buf = 0;
    uint64_t v6 = "canAddSecureElementPassWithConfiguration: called while Wallet is restricted";
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v6, buf, 2u);
LABEL_9:

LABEL_10:
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
    ((void (*)(void *, void, void *))v3[2])(v3, 0LL, v8);

    goto LABEL_17;
  }

  switch((unint64_t)v2)
  {
    case 1uLL:
      id v10 = *(void **)(a1 + 32);
      uint64_t v9 = *(void **)(a1 + 40);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472LL;
      v12[2] = sub_100057C58;
      void v12[3] = &unk_10063CE28;
      id v13 = v3;
      id v11 = v10;
      [v9 canAddCarKeyPassWithConfiguration:v11 completion:v12];

      break;
    case 2uLL:
    case 4uLL:
      if (![*(id *)(a1 + 32) conformsToProtocol:&OBJC_PROTOCOL___PKPushablePassConfigurationProvider]) {
        goto LABEL_10;
      }
      [*(id *)(a1 + 40) canAddPushablePassWithConfiguration:*(void *)(a1 + 32) completion:v3];
      break;
    case 5uLL:
      [*(id *)(a1 + 40) canAddClassicApplePayCredentialWithConfiguration:*(void *)(a1 + 32) completion:*(void *)(a1 + 48)];
      break;
    default:
      goto LABEL_10;
  }

void sub_100057B64(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = @"NO";
    if (a2) {
      id v8 = @"YES";
    }
    int v9 = 138412546;
    id v10 = v8;
    __int16 v11 = 2112;
    id v12 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "canAddSecureElementPassWithConfiguration: returning result: %@, error: %@",  (uint8_t *)&v9,  0x16u);
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100057C58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_100057C68(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_100057D80(uint64_t a1)
{
  return [*(id *)(a1 + 32) canAddCarKeyPassWithConfiguration:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_100057FA4(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v9 = v5;
  if (!a2)
  {
    if ([v5 containsNotManagedAccount])
    {
      uint64_t v6 = PKPassKitErrorDomain;
      uint64_t v7 = 4LL;
LABEL_7:
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v6,  v7,  0LL));
      (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();

      goto LABEL_8;
    }

    if (![*(id *)(a1 + 32) _isWatchIssuerAppProvisioningSupported])
    {
      uint64_t v6 = PKPassKitErrorDomain;
      uint64_t v7 = 1LL;
      goto LABEL_7;
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
LABEL_8:
}

void sub_100058550(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412802;
    id v15 = v7;
    __int16 v16 = 2048;
    uint64_t v17 = a2;
    __int16 v18 = 2112;
    id v19 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "PDPassLibrary canAddHomeKeyWithConfiguration: %@, errorCode: %lu error: %@",  (uint8_t *)&v14,  0x20u);
  }

  __int16 v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  -[NSMutableDictionary setObject:forKeyedSubscript:]( v11,  "setObject:forKeyedSubscript:",  v7,  NSDebugDescriptionErrorKey);
  -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v8, NSUnderlyingErrorKey);
  uint64_t v12 = *(void *)(a1 + 32);
  id v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  a2,  v11));
  (*(void (**)(uint64_t, void, void *))(v12 + 16))(v12, 0LL, v13);
}

void sub_1000586C0(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 64LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_10005876C;
  v6[3] = &unk_10063CF40;
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  id v8 = v3;
  void v6[4] = v4;
  id v7 = v5;
  id v9 = *(id *)(a1 + 56);
  [v2 validatePreconditionsWithCompletion:v6];
}

void sub_10005876C(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) sharedWebService]);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 targetDevice]);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100058874;
    v8[3] = &unk_10063CF18;
    id v5 = *(id *)(a1 + 48);
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(a1 + 40);
    id v10 = v5;
    void v8[4] = v6;
    id v9 = v7;
    id v11 = *(id *)(a1 + 56);
    [v4 paymentWebService:v3 setNewAuthRandomIfNecessaryReturningPairingState:v8];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

void sub_100058874(uint64_t a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if ((a2 & 1) != 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "PDPassLibrary canAddHomeKeyWithConfiguration: SE Valid",  buf,  2u);
    }

    id v11 = *(void **)(*(void *)(a1 + 32) + 232LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    id v14[2] = sub_1000589D0;
    v14[3] = &unk_10063CEF0;
    id v17 = *(id *)(a1 + 48);
    id v15 = *(id *)(a1 + 40);
    id v12 = *(id *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 32);
    id v18 = v12;
    uint64_t v16 = v13;
    [v11 performDeviceRegistrationForReason:@"HomeKey preflight" brokerURL:0 action:1 forceApplePayRegister:0 forcePeerPaymentRegister:0 completion:v14];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1000589D0(uint64_t a1)
{
  if ((PKDisableDynamicSEAllocation() & 1) != 0)
  {
    uint64_t v2 = PKMaxPaymentCards();
    if (v2 - 1 >= (unint64_t)[*(id *)(*(void *)(a1 + 40) + 88) countActiveSecureElementPasses])
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v5 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDPassLibrary canAddHomeKeyWithConfiguration: passed preflight!",  v5,  2u);
      }

      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    }

    else
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
  }

  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    id v6[2] = sub_100058B28;
    v6[3] = &unk_10063CEC8;
    id v7 = *(id *)(a1 + 32);
    id v8 = *(id *)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    +[PKProvisioningSEStorageSnapshot getCurrentSnapshot:]( &OBJC_CLASS___PKProvisioningSEStorageSnapshot,  "getCurrentSnapshot:",  v6);
  }

uint64_t sub_100058B28(void *a1, void *a2)
{
  id v3 = (void *)a1[4];
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 appletTypes]);
  unsigned __int8 v6 = [v4 addAppletTypesToSnapshot:v5];

  if ((v6 & 1) == 0) {
    return (*(uint64_t (**)(void))(a1[5] + 16LL))();
  }
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PDPassLibrary canAddHomeKeyWithConfiguration: passed preflight!",  v10,  2u);
  }

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

id sub_100058DD0(void *a1)
{
  return [*(id *)(a1[4] + 240) meetsWithRequirementsContainer:a1[5] completion:a1[6]];
}

void sub_100058F80(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) secureElementIdentifiers]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 firstObject]);

  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = *(void **)(*(void *)(a1 + 32) + 56LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_100059054;
  v8[3] = &unk_10063CF90;
  id v9 = v3;
  uint64_t v6 = *(void *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v7 = v3;
  [v5 generateTransactionKeyWithReaderIdentifier:v4 readerPublicKey:v6 withCompletion:v8];
}

void sub_100059054(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (v11)
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 hexEncoding]);
    int v14 = (void *)objc_claimAutoreleasedReturnValue([v13 uppercaseString]);
  }

  else
  {
    int v14 = 0LL;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    int v21 = 138413058;
    uint64_t v22 = v17;
    __int16 v23 = 2112;
    uint64_t v24 = v14;
    __int16 v25 = 2112;
    id v26 = v9;
    __int16 v27 = 2112;
    id v28 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "GenerateTransactionKeyWithReaderIdentifier returned secureElementIdentifier: %@ appletIdentifier: %@ transactionKe yIdentifier: %@ transactionKey: %@",  (uint8_t *)&v21,  0x2Au);
  }

  if (v12)
  {
    (*(void (**)(void, void, void, void, void, id))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  0LL,  0LL,  0LL,  v12);
  }

  else
  {
    uint64_t v18 = *(void *)(a1 + 40);
    if (v10 && v9 && (uint64_t v19 = *(void *)(a1 + 32)) != 0 && v14)
    {
      (*(void (**)(void, uint64_t, void *, id, id, void))(v18 + 16))( *(void *)(a1 + 40),  v19,  v14,  v9,  v10,  0LL);
    }

    else
    {
      id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  1LL,  0LL));
      (*(void (**)(uint64_t, void, void, void, void, void *))(v18 + 16))(v18, 0LL, 0LL, 0LL, 0LL, v20);
    }
  }
}

void sub_10005941C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) passWithPassTypeID:@"paymentpass.com.apple.dev1" serialNumber:*(void *)(a1 + 40)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 secureElementPass]);

  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  if (*(void *)(a1 + 48))
  {
    id v5 = [[PKPassAuxiliaryRegistrationSignatureRequirement alloc] initWithType:2];
    id v6 = objc_alloc(&OBJC_CLASS___PKPassAuxiliaryCapabilitySignatureUnifiedAccessHomeKeyCreationMetadata);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) readerGroupIdentifier]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) readerGroupPublicKey]);
    id v9 = [v6 initWithReaderIdentifier:v7 readerPublicKey:v8];

    [v5 setKeyCreationMetadata:v9];
    -[NSMutableArray addObject:](v4, "addObject:", v5);
  }

  if (*(void *)(a1 + 56))
  {
    id v10 = [[PKPassAuxiliaryRegistrationSignatureRequirement alloc] initWithType:8];
    id v11 = objc_alloc(&OBJC_CLASS___PKPassAuxiliaryCapabilitySignatureAliroHomeKeyCreationMetadata);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) readerGroupIdentifier]);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) readerGroupPublicKey]);
    id v14 = [v11 initWithReaderIdentifier:v12 readerPublicKey:v13 homeIdentifier:*(void *)(a1 + 64)];

    [v10 setKeyCreationMetadata:v14];
    -[NSMutableArray addObject:](v4, "addObject:", v10);
  }

  id v15 = *(void **)(*(void *)(a1 + 32) + 224LL);
  id v16 = -[NSMutableArray copy](v4, "copy");
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  id v18[2] = sub_100059634;
  v18[3] = &unk_10063D030;
  id v17 = *(id *)(a1 + 72);
  void v18[4] = *(void *)(a1 + 32);
  id v19 = v17;
  [v15 registerLocalAuxiliaryCapabilities:v16 withPass:v3 completion:v18];
}

void sub_100059634(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 56) secureElementIdentifiers]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 firstObject]);

    id v12 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v14 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    v27[0] = 0LL;
    v27[1] = v27;
    v27[2] = 0x3032000000LL;
    v27[3] = sub_10004A470;
    v27[4] = sub_10004A480;
    id v28 = 0LL;
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472LL;
    v21[2] = sub_10005985C;
    v21[3] = &unk_10063CFE0;
    v21[4] = v11;
    id v22 = v7;
    __int16 v23 = v12;
    id v24 = v8;
    __int16 v25 = v13;
    id v26 = v27;
    [v14 addOperation:v21];
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    id v18[2] = sub_100059BF4;
    v18[3] = &unk_10063D008;
    id v20 = v27;
    id v16 = *(id *)(a1 + 40);
    void v18[5] = v13;
    id v19 = v16;
    void v18[4] = v12;
    id v17 = [v14 evaluateWithInput:v15 completion:v18];

    _Block_object_dispose(v27, 8);
  }
}

void sub_100059844( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, char a28)
{
}

void sub_10005985C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_100059AA8;
  v27[3] = &unk_10063CFB8;
  v27[4] = *(void *)(a1 + 32);
  id v8 = objc_retainBlock(v27);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) keyEnumerator]);
  uint64_t v10 = objc_claimAutoreleasedReturnValue([v9 nextObject]);
  if (v10)
  {
    id v11 = (void *)v10;
    do
    {
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v11]);
      id v13 = v11;
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 contents]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 firstObject]);

      if (v15)
      {
        uint64_t v16 = ((uint64_t (*)(void *, id, void *))v8[2])(v8, [v13 type], v15);
        id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        [*(id *)(a1 + 48) addObject:v17];
      }

      id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 nextObject]);
    }

    while (v11);
  }

  uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) keyEnumerator]);
  uint64_t v19 = objc_claimAutoreleasedReturnValue([v18 nextObject]);
  if (v19)
  {
    id v20 = (void *)v19;
    do
    {
      int v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKey:v20]);
      id v22 = v20;
      __int16 v23 = (void *)objc_claimAutoreleasedReturnValue([v21 contents]);
      id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 firstObject]);

      if (v24)
      {
        uint64_t v25 = ((uint64_t (*)(void *, id, void *))v8[2])(v8, [v22 type], v24);
        id v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
        [*(id *)(a1 + 48) addObject:v26];
        [*(id *)(a1 + 64) addObject:v26];
      }

      id v20 = (void *)objc_claimAutoreleasedReturnValue([v18 nextObject]);
    }

    while (v20);
  }

  v7[2](v7, v6, *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL) != 0LL);
}

PKPaymentApplication *sub_100059AA8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = objc_alloc(&OBJC_CLASS___PKAppletSubcredential);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 publicKeyIdentifier]);
  id v8 = -[PKAppletSubcredential initWithIdentifier:](v6, "initWithIdentifier:", v7);

  -[PKAppletSubcredential setCredentialType:](v8, "setCredentialType:", 133LL);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 publicKey]);
  -[PKAppletSubcredential setTransactionKey:](v8, "setTransactionKey:", v9);

  uint64_t v10 = objc_alloc_init(&OBJC_CLASS___PKPaymentApplication);
  -[PKPaymentApplication setSecureElementIdentifier:](v10, "setSecureElementIdentifier:", *(void *)(a1 + 32));
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 applicationIdentifier]);

  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 hexEncoding]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 uppercaseString]);
  -[PKPaymentApplication setApplicationIdentifier:](v10, "setApplicationIdentifier:", v13);

  if (a2 == 8) {
    uint64_t v14 = 1004LL;
  }
  else {
    uint64_t v14 = 1003LL;
  }
  -[PKPaymentApplication setPaymentType:](v10, "setPaymentType:", v14);
  id v15 = -[NSSet initWithObjects:](objc_alloc(&OBJC_CLASS___NSSet), "initWithObjects:", v8, 0LL);
  -[PKPaymentApplication setSubcredentials:](v10, "setSubcredentials:", v15);

  return v10;
}

void sub_100059BF4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v11)
    {
      int v17 = 138412290;
      id v18 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "ConfigureHomeAuxiliaryCapabilitiesForSerialNumber failed with error: %@",  (uint8_t *)&v17,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    if (v11)
    {
      id v12 = [*(id *)(a1 + 32) count];
      int v17 = 134217984;
      id v18 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "ConfigureHomeAuxiliaryCapabilitiesForSerialNumber successfully configured %ld descriptors.",  (uint8_t *)&v17,  0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 48);
    id v14 = [*(id *)(a1 + 32) copy];
    id v15 = [*(id *)(a1 + 40) copy];
    id v16 = [&__NSArray0__struct copy];
    (*(void (**)(uint64_t, id, id, id, void))(v13 + 16))( v13,  v14,  v15,  v16,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL));
  }
}

void sub_100059EF4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 88) passWithPassTypeID:*(void *)(a1 + 40) serialNumber:*(void *)(a1 + 48)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 secureElementPass]);

  if (v3)
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 devicePaymentApplications]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 anyObject]);

    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 subcredentials]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 anyObject]);

    if (v7)
    {
      id v8 = *(void **)(*(void *)(a1 + 32) + 56LL);
      v21[0] = _NSConcreteStackBlock;
      v21[1] = 3221225472LL;
      v21[2] = sub_10005A258;
      v21[3] = &unk_10063D080;
      id v22 = v5;
      id v23 = v7;
      id v24 = *(id *)(a1 + 40);
      id v25 = *(id *)(a1 + 48);
      id v26 = *(id *)(a1 + 56);
      [v8 allAppletsAndCredentialsWithCompletion:v21];

      id v9 = v22;
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(0LL);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(void *)(a1 + 40);
        uint64_t v18 = *(void *)(a1 + 48);
        *(_DWORD *)__int128 buf = 138412546;
        uint64_t v32 = v17;
        __int16 v33 = 2112;
        uint64_t v34 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "FetchTransactionKeyForPassTypeIdentifier no subcredential found for pass: %@ - %@",  buf,  0x16u);
      }

      uint64_t v19 = *(void *)(a1 + 56);
      NSErrorUserInfoKey v27 = NSDebugDescriptionErrorKey;
      id v28 = @"unable to find subcredential on pass";
      id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v28,  &v27,  1LL));
      id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  1LL,  v9));
      (*(void (**)(uint64_t, void, void *))(v19 + 16))(v19, 0LL, v20);
    }
  }

  else
  {
    uint64_t v10 = PKLogFacilityTypeGetObject(0LL);
    BOOL v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 48);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v32 = v12;
      __int16 v33 = 2112;
      uint64_t v34 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "FetchTransactionKeyForPassTypeIdentifier unable to find pass: %@ - %@",  buf,  0x16u);
    }

    uint64_t v14 = *(void *)(a1 + 56);
    NSErrorUserInfoKey v29 = NSDebugDescriptionErrorKey;
    id v30 = @"unable to find pass";
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  1LL,  v5));
    (*(void (**)(uint64_t, void, void *))(v14 + 16))(v14, 0LL, v7);
  }
}

void sub_10005A258(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 applicationIdentifier]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 objectForKeyedSubscript:v6]);

  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_10005A4E0;
  v21[3] = &unk_10063D058;
  id v22 = *(id *)(a1 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "pk_firstObjectPassingTest:", v21));

  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v11)
    {
      uint64_t v12 = *(void *)(a1 + 48);
      uint64_t v13 = *(void *)(a1 + 56);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 appletIdentifier]);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
      *(_DWORD *)__int128 buf = 138413058;
      uint64_t v26 = v12;
      __int16 v27 = 2112;
      uint64_t v28 = v13;
      __int16 v29 = 2112;
      id v30 = v14;
      __int16 v31 = 2112;
      uint64_t v32 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "FetchTransactionKeyForPassTypeIdentifier found applet subcredential for pass %@ - %@, appletId: %@ subcredentialId: %@",  buf,  0x2Au);
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

  else
  {
    if (v11)
    {
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v17 = *(void *)(a1 + 56);
      *(_DWORD *)__int128 buf = 138412546;
      uint64_t v26 = v16;
      __int16 v27 = 2112;
      uint64_t v28 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "FetchTransactionKeyForPassTypeIdentifier no matching applet found for pass: %@ - %@",  buf,  0x16u);
    }

    uint64_t v18 = *(void *)(a1 + 64);
    NSErrorUserInfoKey v23 = NSDebugDescriptionErrorKey;
    id v24 = @"unable to find applet on SE";
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v24,  &v23,  1LL));
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  1LL,  v19));
    (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0LL, v20);
  }
}

uint64_t sub_10005A4E0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_10005A74C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if (v7)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDPassLibrary pushProvisioningNoncesWithCredentialCount failied registration with error: %@",  (uint8_t *)&v10,  0xCu);
    }

    (*(void (**)(void))(a1[5] + 16LL))();
  }

  else
  {
    [*(id *)(a1[4] + 176) pushProvisioningNoncesWithCredentialCount:a1[6] completion:a1[5]];
  }
}

void sub_10005A8D8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 shareablePassConfiguration]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

void sub_10005AF3C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (*(_BYTE *)(a1 + 48))
  {
    id v7 = *(void **)(a1 + 32);
    uint64_t v8 = -[NSOrderedSet initWithArray:](objc_alloc(&OBJC_CLASS___NSOrderedSet), "initWithArray:", v5);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    id v9[2] = sub_10005B03C;
    v9[3] = &unk_10063D0F8;
    id v12 = *(id *)(a1 + 40);
    id v10 = v5;
    id v11 = v6;
    [v7 addPassesWithData:v8 handler:v9];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }
}

uint64_t sub_10005B03C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

LABEL_27:
}

      id v24 = (void *)objc_claimAutoreleasedReturnValue([v6 sessionIdentifier]);
      if (v24)
      {
        id v25 = -[PDSharingIDSEndpoint initWithSessionIdentifier:deviceIdentifier:]( objc_alloc(&OBJC_CLASS___PDSharingIDSEndpoint),  "initWithSessionIdentifier:deviceIdentifier:",  v24,  v22);
LABEL_40:
        uint64_t v34 = v25;
        __int128 v35 = self->_databaseManager;
        __int128 v36 = (void *)objc_claimAutoreleasedReturnValue(-[PDSharingIDSEndpoint transportIdentifier](v25, "transportIdentifier"));
        __int128 v37 = objc_claimAutoreleasedReturnValue( -[PDDatabaseManager sharingEndpointForTransportIdentifier:]( v35,  "sharingEndpointForTransportIdentifier:",  v36));
        __int128 v38 = (void *)v37;
        if (v37) {
          id v39 = (void *)v37;
        }
        else {
          id v39 = v34;
        }
        id v7 = v39;
      }

      else
      {
        if (v22)
        {
          __int16 v41 = -[PDSharingIDSEndpoint initWithDeviceIdentifier:]( objc_alloc(&OBJC_CLASS___PDSharingIDSEndpoint),  "initWithDeviceIdentifier:",  v22);
          goto LABEL_46;
        }

  replyQueue = self->_replyQueue;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001AF220;
  block[3] = &unk_1006396B0;
  __int128 v35 = v21;
  __int128 v36 = v9;
  __int16 v31 = v21;
  dispatch_async((dispatch_queue_t)replyQueue, block);

LABEL_28:
}
      }

      uint64_t v4 = [v2 countByEnumeratingWithState:&v39 objects:v47 count:16];
      if (!v4)
      {
LABEL_29:

        __int16 v27 = *(void **)(v1 + 40);
        uint64_t v28 = *(dispatch_queue_s **)(*(void *)(v1 + 32) + 144LL);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_1001D9CC0;
        block[3] = &unk_10063C6A8;
        __int128 v36 = v34;
        __int128 v37 = v33;
        __int128 v38 = v27;
        __int16 v29 = v33;
        id v30 = v34;
        dispatch_async(v28, block);

        return;
      }
    }
  }

  __int16 v31 = PKLogFacilityTypeGetObject(14LL);
  uint64_t v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v31);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int128 buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Skipping account update as we don't have account URLs",  buf,  2u);
  }

  (*(void (**)(void))(*(void *)(v1 + 40) + 16LL))();
}

                id v24 = PKLocalizedStringInMarketBundle( @"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE",  v7);
                id v25 = (void *)objc_claimAutoreleasedReturnValue(v24);

                if ([v25 isEqualToString:@"TRANSIT_MARKET_NOTIFICATION_MULTIPLE_PRODUCTS_MESSAGE"])
                {

                  id v11 = 0LL;
                }

                else
                {
                  id v11 = v25;
                }

                goto LABEL_30;
              }

              id v9 = 0LL;
            }

            if (!v11) {
              goto LABEL_27;
            }
            goto LABEL_26;
          }

        __int16 v29 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v12, "objectForKey:", v24));
        if (v29)
        {
        }

        else
        {
          id v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v42, "objectForKey:", v24));

          if (!v30) {
            -[NSMutableArray addObject:](v17, "addObject:", v24);
          }
        }

        __int16 v31 = 0;
        if (v25) {
          goto LABEL_36;
        }
LABEL_42:
      }

      id v20 = [v18 countByEnumeratingWithState:&v45 objects:v51 count:16];
    }

    while (v20);
  }

  if (-[NSMutableArray count](v17, "count")) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v40,  "setObject:forKeyedSubscript:",  v17,  @"MarketGeoSuppressedNotifications");
  }
  if (-[NSMutableDictionary count](v12, "count")) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v40,  "setObject:forKeyedSubscript:",  v12,  @"MarketGeoDCINotifications");
  }
  if (-[NSMutableDictionary count](v42, "count")) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v40,  "setObject:forKeyedSubscript:",  v42,  @"MarketGeoUpgradeNotifications");
  }
  if (-[NSMutableDictionary count](v44, "count")) {
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v40,  "setObject:forKeyedSubscript:",  v44,  @"MarketGeoRenotifyNotifications");
  }
  uint64_t Object = PKLogFacilityTypeGetObject(12LL);
  __int128 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int128 buf = 138412290;
    __int128 v50 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "PDTransitNotificationService: Updating sent dictionary to:\n%@",  buf,  0xCu);
  }

  id v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSUserDefaults standardUserDefaults](&OBJC_CLASS___NSUserDefaults, "standardUserDefaults"));
  [v39 setObject:v40 forKey:@"PDTransitNotificationServiceSentNotifications"];
}

    id v25 = (void *)v32;
    goto LABEL_28;
  }

  uint64_t v13 = 0;
LABEL_35:

  return v13;
}
}
}

  swift_release(a2);
  swift_bridgeObjectRelease(a2);
  __int16 v31 = a7 < 8;
  a5 = v42;
  int v21 = v39;
  a7 = v40;
  id v22 = (unint64_t (*)(id *))v38;
  if (v31) {
    return ((uint64_t (*)(uint64_t, void))a5)(a7, 0LL);
  }
  id v20 = (unint64_t)v43;
  (*(void (**)(char *, uint64_t, int64_t))(v38 + 16))(v43, v37, v39);
  a2 = v36;
  swift_beginAccess(v36, v44, 33LL, 0LL);
  a3 = (void *)*a2;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
  *a2 = a3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_36;
  }
LABEL_29:
  uint64_t v34 = a3[2];
  __int16 v33 = a3[3];
  if (v34 >= v33 >> 1)
  {
    a3 = (void *)sub_10043EB28(v33 > 1, v34 + 1, 1, (unint64_t)a3);
    *a2 = a3;
  }

  a3[2] = v34 + 1;
  (*((void (**)(unint64_t, unint64_t, int64_t))v22 + 4))( (unint64_t)a3 + ((*((unsigned __int8 *)v22 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v22 + 80))
  + *((void *)v22 + 9) * v34,
    v20,
    v21);
  swift_endAccess(v44);
  return ((uint64_t (*)(void, void))a5)(a7, 0LL);
}

    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    id v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      id v11 = a3;
      goto LABEL_33;
    }

    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

    id v12 = (v21 - 1) & v21;
    id v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain(v18);
  }

  id v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  int v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    id v9 = v22;
    goto LABEL_27;
  }

  while (1)
  {
    id v9 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }

    uint64_t v13 = (v24 - 1) & v24;
    uint64_t v16 = __clz(__rbit64(v24)) + (v10 << 6);
LABEL_12:
    uint64_t v17 = 32 * v16;
    uint64_t v18 = (void *)(*(void *)(v3 + 48) + v17);
    uint64_t v19 = v18[1];
    id v20 = v18[2];
    int v21 = v18[3];
    id v22 = (void *)(*(void *)(v5 + 48) + v17);
    void *v22 = *v18;
    v22[1] = v19;
    v22[2] = v20;
    void v22[3] = v21;
    swift_bridgeObjectRetain(v19);
    uint64_t result = (void *)swift_bridgeObjectRetain(v21);
  }

  id v25 = v23 + 3;
  if (v25 >= v14) {
    goto LABEL_28;
  }
  id v24 = *(void *)(v7 + 8 * v25);
  if (v24)
  {
    id v10 = v25;
    goto LABEL_27;
  }

  while (1)
  {
    id v10 = v25 + 1;
    if (__OFADD__(v25, 1LL)) {
      break;
    }
    if (v10 >= v14) {
      goto LABEL_28;
    }
    id v24 = *(void *)(v7 + 8 * v10);
    ++v25;
    if (v24) {
      goto LABEL_27;
    }
  }

id sub_10005B6D4(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _sanitizePassIfNeeded:a2]);
  id v4 = [*(id *)(a1 + 32) _entitledForObject:v3 forActions:2];

  return v4;
}

id sub_10005BA34(uint64_t a1)
{
  return _[*(id *)(a1 + 32) getPassWithUniqueID:*(void *)(a1 + 40) handler:*(void *)(a1 + 48)];
}

void sub_10005BADC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 32);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_10005BB58;
  v6[3] = &unk_10063C950;
  id v7 = v3;
  id v5 = v3;
  [v4 enumerateObjectsUsingBlock:v6];
}

uint64_t sub_10005BB58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10005BC9C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005BCC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
    if ([v5 passType] == (id)1) {
      *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 1;
    }
    id v16 = 0LL;
    unsigned int v8 = [*(id *)(*(void *)(a1 + 32) + 88) passExistsWithUniqueID:v7];
    if (v6)
    {
      uint64_t v9 = objc_claimAutoreleasedReturnValue([v5 secureElementPass]);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 provisioningMetadata]);
      [(id)v9 setProvisioningMetadata:v10];

      unsigned int v11 = [v6 hasCustomizedSettings];
      if ((v11 & 1) != 0 || ((v8 ^ 1) & 1) != 0)
      {
        if (v11) {
          id v15 = v6;
        }
        else {
          id v15 = v5;
        }
        uint64_t v9 = (uint64_t)[v15 settings];
        goto LABEL_18;
      }
    }

    else
    {
      uint64_t v9 = (uint64_t)[v5 settings];
      if ((id)v9 != objc_msgSend((id)objc_opt_class(v5, v12), "defaultSettings")) {
        goto LABEL_18;
      }
    }

    if (((v8 ^ 1) & 1) == 0)
    {
      if (![*(id *)(a1 + 32) _writePass:v5 error:&v16])
      {
LABEL_11:
        uint64_t Object = PKLogFacilityTypeGetObject(0LL);
        uint64_t v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
          sub_100441660((uint64_t)v7, &v16, v14);
        }

        goto LABEL_20;
      }

void sub_10005BE94(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      int v9 = 138412290;
      id v10 = v2;
      id v6 = "TPSDiscoverabilitySignal - Failed to donate discoverability signal - pass added: %@";
      id v7 = v4;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v9, v8);
    }
  }

  else if (v5)
  {
    LOWORD(v9) = 0;
    id v6 = "TPSDiscoverabilitySignal - Successfully donated discoverability signal - pass added";
    id v7 = v4;
    uint32_t v8 = 2;
    goto LABEL_6;
  }
}

void sub_10005C0F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

id sub_10005C118(void *a1)
{
  id result = [*(id *)(a1[4] + 80) writeCard:a1[5] source:4 error:a1[7]];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_10005C2DC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 primaryPassDiff]);
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_10005C390(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) passesAllAccess])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 248LL));
    [WeakRetained introduceDatabaseIntegrityProblem];
  }

void sub_10005C4B4(void *a1)
{
  if ([*(id *)(a1[4] + 8) passesAllAccess])
  {
    [*(id *)(a1[4] + 88) updateIngestedDate:a1[5] forUniqueID:a1[6]];
    id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) passWithUniqueIdentifier:a1[6]]);
    [*(id *)(a1[4] + 136) passAddedOrUpdated:v2];
  }

void sub_10005C64C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess]
    && [*(id *)(*(void *)(a1 + 32) + 8) peerPaymentAllAccess]
    && [*(id *)(*(void *)(a1 + 32) + 8) passesAllAccess])
  {
    switch((unint64_t)[*(id *)(a1 + 40) type])
    {
      case 0uLL:
        uint64_t Object = PKLogFacilityTypeGetObject(0LL);
        id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "passd was asked to respond to account change that is unsupported.",  buf,  2u);
        }

        goto LABEL_9;
      case 1uLL:
        uint64_t v6 = PKLogFacilityTypeGetObject(0LL);
        id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "passd was asked to respond to account addition.",  buf,  2u);
        }

        id v8 = PDDefaultQueue();
        int v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v8);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472LL;
        block[2] = sub_10005C96C;
        block[3] = &unk_10063AC90;
        void block[4] = *(void *)(a1 + 32);
        id v26 = *(id *)(a1 + 48);
        dispatch_async(v9, block);

        id v10 = v26;
        goto LABEL_21;
      case 2uLL:
        uint64_t v11 = PKLogFacilityTypeGetObject(0LL);
        uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "passd was asked to respond to account update.",  buf,  2u);
        }

        id v13 = PDDefaultQueue();
        uint64_t v14 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v13);
        v22[0] = _NSConcreteStackBlock;
        v22[1] = 3221225472LL;
        v22[2] = sub_10005C9B4;
        void v22[3] = &unk_100639AF0;
        id v15 = *(void **)(a1 + 40);
        void v22[4] = *(void *)(a1 + 32);
        id v23 = v15;
        id v24 = *(id *)(a1 + 48);
        dispatch_async(v14, v22);

        id v10 = v23;
        goto LABEL_21;
      case 3uLL:
        uint64_t v16 = PKLogFacilityTypeGetObject(0LL);
        uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int128 buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "passd was asked to respond to account deletetion.",  buf,  2u);
        }

        id v18 = PDDefaultQueue();
        uint64_t v19 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v18);
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472LL;
        v20[2] = sub_10005C9FC;
        v20[3] = &unk_10063AC90;
        void v20[4] = *(void *)(a1 + 32);
        id v21 = *(id *)(a1 + 48);
        dispatch_async(v19, v20);

        id v10 = v21;
LABEL_21:

        break;
      default:
        return;
    }
  }

  else
  {
    uint64_t v4 = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(v4);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10044173C();
    }
LABEL_9:

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      (*(void (**)(void))(v5 + 16))();
    }
  }

void sub_10005C96C(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 248LL));
  [WeakRetained primaryAppleAccountWasAdded:*(void *)(a1 + 40)];
}

void sub_10005C9B4(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 248LL));
  [WeakRetained primaryAppleAccountWasUpdated:a1[5] handler:a1[6]];
}

void sub_10005C9FC(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 248LL));
  [WeakRetained primaryAppleAccountWasDeleted:*(void *)(a1 + 40)];
}

void sub_10005CB44(void *a1)
{
  if ([*(id *)(a1[4] + 8) paymentAllAccess]
    && [*(id *)(a1[4] + 8) peerPaymentAllAccess]
    && [*(id *)(a1[4] + 8) passesAllAccess])
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 248LL));
    [WeakRetained noteACAccountChanged:a1[5] handler:a1[6]];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_10044173C();
    }

    uint64_t v4 = a1[6];
    if (v4) {
      (*(void (**)(void))(v4 + 16))();
    }
  }

void sub_10005CC8C(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 80) catalogOfRecord]);
  [v2 shuffle:*(unsigned int *)(a1 + 40)];
  [*(id *)(*(void *)(a1 + 32) + 80) writeCatalogOfRecord:v2 source:4];
}

void sub_10005CDF8(void *a1)
{
  id v2 = -[PDGenericUserNotification initWithTitle:message:forPassUniqueIdentifier:]( objc_alloc(&OBJC_CLASS___PDWalletUserNotification),  "initWithTitle:message:forPassUniqueIdentifier:",  a1[4],  a1[5],  a1[6]);
  id v3 = v2;
  uint64_t v4 = v2;
  if (a1[7])
  {
    -[PDUserNotification setCustomActionRoute:](v2, "setCustomActionRoute:");
    id v3 = v4;
  }

  [*(id *)(a1[8] + 104) insertUserNotification:v3];
}

void sub_10005CF34(void *a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 104) pendingNotificationDescriptionsWithIdentifier:a1[5]]);
  uint64_t v3 = a1[6];
  if (v3)
  {
    uint64_t v4 = v2;
    (*(void (**)(void))(v3 + 16))();
    id v2 = v4;
  }
}

id sub_10005D054(void *a1)
{
  return _[*(id *)(a1[4] + 104) updateDate:a1[5] forPendingNotificationWithIdentifier:a1[6]];
}

id sub_10005D2B0(uint64_t a1)
{
  return _[*(id *)(*(void *)(a1 + 32) + 80) forceImmediateRevocationCheck];
}

uint64_t sub_10005D358(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) passesAllAccess])
  {
    [*(id *)(*(void *)(a1 + 32) + 136) reindexAllContent];
    uint64_t result = *(void *)(a1 + 40);
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(void))(result + 16))();
  }

  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100441768();
  }

  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_10005D4AC(void *a1)
{
  if ([*(id *)(a1[4] + 8) passesAllAccess])
  {
    [*(id *)(a1[4] + 136) reindexContentForIdentifiers:a1[5]];
    uint64_t result = a1[6];
    if (!result) {
      return result;
    }
    return (*(uint64_t (**)(void))(result + 16))();
  }

  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
    sub_100441768();
  }

  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10005D5DC(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) passesAllAccess])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    uint64_t v3 = *(void **)(a1 + 40);
    uint64_t v4 = *(void **)(v2 + 136);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_10005D6B4;
    v8[3] = &unk_10063AC90;
    void v8[4] = v2;
    id v9 = v3;
    [v4 resetWithCompletion:v8];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_100441794();
    }

    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      (*(void (**)(void))(v7 + 16))();
    }
  }

void sub_10005D6B4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 136LL);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10005D72C;
  v3[3] = &unk_10063A830;
  id v4 = v1;
  [v2 deleteAllFinHealthDataWithCompletion:v3];
}

uint64_t sub_10005D72C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10005D7D4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) passesAllAccess])
  {
    uint64_t v2 = *(void **)(a1 + 40);
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 136LL);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_10005D8AC;
    v7[3] = &unk_10063D230;
    id v8 = v2;
    [v3 statusWithCompletion:v7];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1004417C0();
    }

    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
    }
  }

uint64_t sub_10005D8AC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10005DE84(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10005E0BC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___PDMissingRemoteAssetsPersistentStoreItem);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10005E450(id a1, PDMissingRemoteAssetsPersistentStoreItem *a2, id a3)
{
}

void sub_10005E458(id a1, PDMissingRemoteAssetsPersistentStoreItem *a2, id a3)
{
  id v4 = a2;
  -[PDMissingRemoteAssetsPersistentStoreItem setDownloadRetriesCount:]( v4,  "setDownloadRetriesCount:",  [a3 unsignedIntegerValue]);
}

void sub_10005EBD4(id a1, PKFeatureApplicationOfferDetails *a2, id a3)
{
}

void sub_10005EBDC(id a1, PKFeatureApplicationOfferDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKFeatureApplicationOfferDetails setExpiryDate:](v4, "setExpiryDate:", v5);
}

void sub_10005EC28(id a1, PKFeatureApplicationOfferDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber decimalNumberWithString:](&OBJC_CLASS___NSDecimalNumber, "decimalNumberWithString:", a3));
  -[PKFeatureApplicationOfferDetails setCreditLimit:](v4, "setCreditLimit:", v5);
}

void sub_10005EC8C(id a1, PKFeatureApplicationOfferDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber decimalNumberWithString:](&OBJC_CLASS___NSDecimalNumber, "decimalNumberWithString:", a3));
  -[PKFeatureApplicationOfferDetails setAnnualFee:](v4, "setAnnualFee:", v5);
}

void sub_10005ECF0(id a1, PKFeatureApplicationOfferDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber decimalNumberWithString:](&OBJC_CLASS___NSDecimalNumber, "decimalNumberWithString:", a3));
  -[PKFeatureApplicationOfferDetails setAprForPurchase:](v4, "setAprForPurchase:", v5);
}

void sub_10005ED54(id a1, PKFeatureApplicationOfferDetails *a2, id a3)
{
}

void sub_10005ED5C(id a1, PKFeatureApplicationOfferDetails *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKFeatureApplicationOfferDetails setBalance:](v4, "setBalance:", v6);
}

void sub_10005EE88(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_10005F0B4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

NSMutableDictionary *sub_10005F0CC(NSMutableDictionary *a1, void *a2)
{
  uint64_t v2 = a1;
  if (a1)
  {
    id v3 = a2;
    id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100061298;
    v10[3] = &unk_10063D5D0;
    id v13 = (id)objc_opt_class(v2, v5);
    id v11 = (id)objc_claimAutoreleasedReturnValue([v13 databaseTable]);
    uint64_t v6 = v4;
    uint64_t v12 = v6;
    id v7 = v11;
    [v3 enumerateKeysAndObjectsUsingBlock:v10];

    id v8 = v12;
    uint64_t v2 = v6;
  }

  return v2;
}

uint64_t sub_10005F1AC(uint64_t a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10005F238;
  v7[3] = &unk_10063D3C0;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = *(id *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  id v8 = v3;
  uint64_t v9 = v4;
  [v2 enumerateKeysAndObjectsUsingBlock:v7];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL);

  return v5;
}

void sub_10005F238(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a3;
  id v8 = a2;
  uint64_t v10 = sub_10005F2E0((uint64_t)&OBJC_CLASS___SQLiteEntity, v7);
  BOOL v9 = sub_10005F404((uint64_t)&OBJC_CLASS___SQLiteEntity, v7, v10, *(void *)(a1 + 48), v8, *(void **)(a1 + 32));

  if (!v9)
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = 0;
    *a4 = 1;
  }
}

NSMutableArray *sub_10005F2E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  objc_opt_self(a1);
  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v12;
    do
    {
      BOOL v9 = 0LL;
      do
      {
        if (*(void *)v12 != v8) {
          objc_enumerationMutation(v5);
        }
        -[NSMutableArray addObject:]( v4,  "addObject:",  *(void *)(*((void *)&v11 + 1) + 8LL * (void)v9),  (void)v11);
        BOOL v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v7);
  }

  -[NSMutableArray sortUsingComparator:](v4, "sortUsingComparator:", &stru_10063D580);
  return v4;
}

BOOL sub_10005F404(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v28 = a2;
  id v10 = a3;
  id v11 = a5;
  id v12 = a6;
  __int128 v13 = (void *)objc_opt_self(a1);
  uint64_t v40 = 0LL;
  __int16 v41 = &v40;
  uint64_t v42 = 0x2020000000LL;
  char v43 = 1;
  __int128 v14 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"INSERT OR REPLACE INTO ");
  -[NSMutableString appendString:](v14, "appendString:", v11);
  -[NSMutableString appendString:](v14, "appendString:", @" (");
  uint64_t v15 = objc_claimAutoreleasedReturnValue([v13 foreignKeyColumnForTable:v11]);
  uint64_t v16 = (void *)v15;
  if (v15) {
    uint64_t v17 = (const __CFString *)v15;
  }
  else {
    uint64_t v17 = @"ROWID";
  }
  -[NSMutableString appendString:](v14, "appendString:", v17, v28);
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v18 = v10;
  id v19 = [v18 countByEnumeratingWithState:&v36 objects:v44 count:16];
  if (v19)
  {
    uint64_t v20 = *(void *)v37;
    do
    {
      for (uint64_t i = 0LL; i != v19; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v37 != v20) {
          objc_enumerationMutation(v18);
        }
        uint64_t v22 = *(void *)(*((void *)&v36 + 1) + 8LL * (void)i);
        -[NSMutableString appendString:](v14, "appendString:", @", ");
        -[NSMutableString appendString:](v14, "appendString:", v22);
      }

      id v19 = [v18 countByEnumeratingWithState:&v36 objects:v44 count:16];
    }

    while (v19);
  }

  -[NSMutableString appendString:](v14, "appendString:", @" VALUES (?"));
  -[NSMutableString appendString:](v14, "appendString:", @";"));
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472LL;
  void v31[2] = sub_100061140;
  void v31[3] = &unk_10063D5A8;
  uint64_t v35 = a4;
  id v24 = v18;
  id v32 = v24;
  id v25 = v29;
  id v33 = v25;
  uint64_t v34 = &v40;
  sub_1002CCDD0((uint64_t)v12, v14, 1, v31);
  BOOL v26 = *((_BYTE *)v41 + 24) != 0;

  _Block_object_dispose(&v40, 8);
  return v26;
}

void sub_10005F6CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
}

void sub_10005F7A0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) databasePropertyToSetClientProperty:v5]);
  if (v7)
  {
    uint64_t v8 = *(void **)(a1 + 32);
    BOOL v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) databaseValueForProperty:v7 clientValue:v6]);
    [v8 setObject:v9 forKey:v7];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v13 = (void *)objc_opt_class(*(void *)(a1 + 40), v12);
      int v15 = 138543618;
      uint64_t v16 = v13;
      __int16 v17 = 2112;
      id v18 = v5;
      id v14 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "%{public}@: Unrecognized client key: %@",  (uint8_t *)&v15,  0x16u);
    }
  }
}

void sub_10005FAD0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

BOOL sub_10005FAE8(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)objc_opt_class(*(void *)(a1 + 32), a2);
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 databaseTable]);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_10005FCB4(v4, v5, @"ROWID");

  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  id v6 = (id)objc_claimAutoreleasedReturnValue([v3 foreignDatabaseTablesToDelete]);
  id v7 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v7)
  {
    id v8 = v7;
    uint64_t v9 = *(void *)v16;
    while (2)
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v9) {
          objc_enumerationMutation(v6);
        }
        id v11 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "foreignKeyColumnForTable:", v11, (void)v15));
        if (v12)
        {
          *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = sub_10005FCB4(*(void *)(a1 + 32), v11, v12);
          if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL))
          {

            goto LABEL_12;
          }
        }
      }

      id v8 = [v6 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }

uint64_t sub_10005FCB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    uint64_t v11 = 0LL;
    uint64_t v12 = &v11;
    uint64_t v13 = 0x2020000000LL;
    char v14 = 0;
    id v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"DELETE FROM %@ WHERE %@ = ?;",
           v5,
           v6);
    uint64_t v8 = *(void *)(a1 + 8);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000613A0;
    v10[3] = &unk_10063D460;
    void v10[4] = a1;
    void v10[5] = &v11;
    sub_1002CCDD0(v8, v7, 1, v10);
    a1 = *((_BYTE *)v12 + 24) != 0;

    _Block_object_dispose(&v11, 8);
  }

  return a1;
}

void sub_10005FDA4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_10005FEAC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10005FEC4(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

NSMutableDictionary *sub_10005FF14(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    id v5 = [v3 count];
    id v6 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  v5);
    if (v5 == (id)1
      && (id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 objectAtIndexedSubscript:0]),
          unsigned int v8 = [v7 isEqualToString:@"ROWID"],
          v7,
          v8))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( &OBJC_CLASS___NSNumber,  "numberWithLongLong:",  *(void *)(a1 + 16)));
      -[NSMutableDictionary setObject:forKeyedSubscript:](v6, "setObject:forKeyedSubscript:", v9, @"ROWID");
    }

    else
    {
      id v44 = v5;
      uint64_t v47 = v6;
      uint64_t v45 = a1;
      context = objc_autoreleasePoolPush();
      uint64_t v11 = (void *)objc_opt_class(a1, v10);
      __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([v11 databaseTable]);
      uint64_t v12 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"SELECT ");
      uint64_t v13 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      char v14 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      __int128 v50 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
      __int128 v65 = 0u;
      __int128 v66 = 0u;
      __int128 v67 = 0u;
      __int128 v68 = 0u;
      __int128 v48 = v4;
      id v15 = v4;
      id v16 = [v15 countByEnumeratingWithState:&v65 objects:v71 count:16];
      if (v16)
      {
        id v17 = v16;
        uint64_t v18 = *(void *)v66;
        do
        {
          for (uint64_t i = 0LL; i != v17; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v66 != v18) {
              objc_enumerationMutation(v15);
            }
            uint64_t v20 = *(void *)(*((void *)&v65 + 1) + 8LL * (void)i);
            id v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKey:](v13, "objectForKey:", v20));

            if (!v21)
            {
              uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v11 disambiguatedSQLForProperty:v20]);
              -[NSMutableDictionary setObject:forKeyedSubscript:](v13, "setObject:forKeyedSubscript:", v22, v20);
              -[NSMutableSet addObject:](v14, "addObject:", v22);
              [v11 addJoinClausesForProperty:v20 toJoins:v50];
            }
          }

          id v17 = [v15 countByEnumeratingWithState:&v65 objects:v71 count:16];
        }

        while (v17);
      }

      char v43 = v14;
      id v23 = -[NSMutableSet pk_mutableArrayCopy](v14, "pk_mutableArrayCopy");
      id v24 = -[NSMutableSet pk_mutableArrayCopy](v50, "pk_mutableArrayCopy");
      [v23 sortUsingComparator:&stru_10063D4A0];
      uint64_t v42 = v24;
      [v24 sortUsingComparator:&stru_10063D4C0];
      __int128 v63 = 0u;
      __int128 v64 = 0u;
      __int128 v61 = 0u;
      __int128 v62 = 0u;
      id v25 = v23;
      id v26 = [v25 countByEnumeratingWithState:&v61 objects:v70 count:16];
      if (v26)
      {
        id v27 = v26;
        uint64_t v28 = *(void *)v62;
        char v29 = 1;
        do
        {
          for (uint64_t j = 0LL; j != v27; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v62 != v28) {
              objc_enumerationMutation(v25);
            }
            uint64_t v31 = *(void *)(*((void *)&v61 + 1) + 8LL * (void)j);
            if ((v29 & 1) == 0) {
              -[NSMutableString appendString:](v12, "appendString:", @", ");
            }
            -[NSMutableString appendString:](v12, "appendString:", v31);
            char v29 = 0;
          }

          id v27 = [v25 countByEnumeratingWithState:&v61 objects:v70 count:16];
          char v29 = 0;
        }

        while (v27);
      }

      -[NSMutableString appendString:](v12, "appendString:", @" FROM ");
      -[NSMutableString appendString:](v12, "appendString:", v49);
      __int128 v59 = 0u;
      __int128 v60 = 0u;
      __int128 v57 = 0u;
      __int128 v58 = 0u;
      id v32 = v42;
      id v33 = [v32 countByEnumeratingWithState:&v57 objects:v69 count:16];
      if (v33)
      {
        id v34 = v33;
        uint64_t v35 = *(void *)v58;
        do
        {
          for (k = 0LL; k != v34; k = (char *)k + 1)
          {
            if (*(void *)v58 != v35) {
              objc_enumerationMutation(v32);
            }
            uint64_t v37 = *(void *)(*((void *)&v57 + 1) + 8LL * (void)k);
            -[NSMutableString appendString:](v12, "appendString:", @" ");
            -[NSMutableString appendString:](v12, "appendString:", v37);
          }

          id v34 = [v32 countByEnumeratingWithState:&v57 objects:v69 count:16];
        }

        while (v34);
      }

      -[NSMutableString appendString:](v12, "appendString:", @" WHERE ");
      -[NSMutableString appendString:](v12, "appendString:", v49);
      -[NSMutableString appendString:](v12, "appendString:", @".ROWID = ?;");

      uint64_t v38 = *(void *)(v45 + 8);
      v51[0] = _NSConcreteStackBlock;
      v51[1] = 3221225472LL;
      v51[2] = sub_100060444;
      v51[3] = &unk_10063D4E8;
      id v56 = v44;
      v51[4] = v45;
      id v52 = v25;
      id v53 = v15;
      uint64_t v54 = v13;
      id v6 = v47;
      id v55 = v6;
      __int128 v39 = v13;
      id v40 = v25;
      sub_1002CCDD0(v38, v12, 1, v51);

      objc_autoreleasePoolPop(context);
      uint64_t v4 = v48;
    }
  }

  else
  {
    id v6 = 0LL;
  }

  return v6;
}

int64_t sub_100060434(id a1, NSString *a2, NSString *a3)
{
  return -[NSString compare:](a2, "compare:", a3);
}

int64_t sub_10006043C(id a1, NSString *a2, NSString *a3)
{
  return -[NSString compare:](a2, "compare:", a3);
}

void sub_100060444(uint64_t a1, sqlite3_stmt *a2)
{
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    uint64_t v4 = -[NSMutableDictionary initWithCapacity:]( objc_alloc(&OBJC_CLASS___NSMutableDictionary),  "initWithCapacity:",  *(void *)(a1 + 72));
    id v5 = (char *)[*(id *)(a1 + 40) count];
    if (v5)
    {
      id v6 = v5;
      for (uint64_t i = 0LL; i != v6; ++i)
      {
        unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectAtIndexedSubscript:i]);
        uint64_t v9 = SQLiteCopyFoundationValueForStatementColumn(a2, (int)i);
        if (v9) {
          -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v9, v8);
        }
      }
    }

    __int128 v20 = 0u;
    __int128 v21 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v10 = *(id *)(a1 + 48);
    id v11 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v19;
      do
      {
        for (uint64_t j = 0LL; j != v12; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v19 != v13) {
            objc_enumerationMutation(v10);
          }
          uint64_t v15 = *(void *)(*((void *)&v18 + 1) + 8LL * (void)j);
          id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", v15, (void)v18));
          id v17 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v4, "objectForKeyedSubscript:", v16));
          [*(id *)(a1 + 64) setObject:v17 forKeyedSubscript:v15];
        }

        id v12 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }

      while (v12);
    }
  }

void sub_1000607E8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100060804(uint64_t a1)
{
  uint64_t v2 = sub_10005F0CC(*(NSMutableDictionary **)(a1 + 32), *(void **)(a1 + 40));
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000608AC;
  v7[3] = &unk_10063D538;
  uint64_t v11 = *(void *)(a1 + 64);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 32);
  id v8 = v3;
  uint64_t v9 = v4;
  uint64_t v10 = *(void *)(a1 + 56);
  -[NSMutableDictionary enumerateKeysAndObjectsUsingBlock:](v2, "enumerateKeysAndObjectsUsingBlock:", v7);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL);

  return v5;
}

void sub_1000608AC(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = sub_10005F2E0((uint64_t)&OBJC_CLASS___SQLiteEntity, v8);
  uint64_t v10 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) foreignKeyColumnForTable:v7]);
  if (v10) {
    uint64_t v11 = (__CFString *)v10;
  }
  else {
    uint64_t v11 = @"ROWID";
  }
  uint64_t v36 = 0LL;
  uint64_t v37 = &v36;
  uint64_t v38 = 0x2020000000LL;
  char v39 = 1;
  if (([v7 isEqualToString:*(void *)(a1 + 32)] & 1) == 0)
  {
    id v12 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"SELECT 1 FROM ");
    -[NSMutableString appendString:](v12, "appendString:", v7);
    -[NSMutableString appendString:](v12, "appendString:", @" WHERE ");
    -[NSMutableString appendString:](v12, "appendString:", v11);
    -[NSMutableString appendString:](v12, "appendString:", @" =  ? LIMIT 1;");
    uint64_t v13 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(v13 + 8);
    v35[0] = _NSConcreteStackBlock;
    v35[1] = 3221225472LL;
    v35[2] = sub_100060C9C;
    v35[3] = &unk_10063D460;
    void v35[4] = v13;
    v35[5] = &v36;
    sub_1002CCDD0(v14, v12, 1, v35);
  }

  if (*((_BYTE *)v37 + 24))
  {
    uint64_t v15 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"UPDATE ");
    -[NSMutableString appendString:](v15, "appendString:", v7);
    -[NSMutableString appendString:](v15, "appendString:", @" SET ");
    id v23 = v9;
    id v24 = a4;
    id v25 = v8;
    id v26 = v7;
    __int128 v33 = 0u;
    __int128 v34 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id v16 = v9;
    id v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v16,  "countByEnumeratingWithState:objects:count:",  &v31,  v40,  16LL);
    if (v17)
    {
      char v18 = 0;
      uint64_t v19 = *(void *)v32;
      do
      {
        for (uint64_t i = 0LL; i != v17; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v32 != v19) {
            objc_enumerationMutation(v16);
          }
          uint64_t v21 = *(void *)(*((void *)&v31 + 1) + 8LL * (void)i);
          if ((v18 & 1) != 0) {
            -[NSMutableString appendString:](v15, "appendString:", @", ");
          }
          -[NSMutableString appendString:](v15, "appendString:", v21);
          -[NSMutableString appendString:](v15, "appendString:", @" = ?");
          char v18 = 1;
        }

        id v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v16,  "countByEnumeratingWithState:objects:count:",  &v31,  v40,  16LL);
      }

      while (v17);
    }

    id v8 = v25;
    id v7 = v26;
    uint64_t v9 = v23;
    a4 = v24;
    -[NSMutableString appendString:](v15, "appendString:", @" WHERE ");
    -[NSMutableString appendString:](v15, "appendString:", v26);
    -[NSMutableString appendString:](v15, "appendString:", @".");
    -[NSMutableString appendString:](v15, "appendString:", v11);
    -[NSMutableString appendString:](v15, "appendString:", @" = ?;");
    uint64_t v22 = *(void *)(*(void *)(a1 + 40) + 8LL);
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_100060CEC;
    v27[3] = &unk_10063D510;
    uint64_t v28 = v16;
    id v29 = v25;
    __int128 v30 = *(_OWORD *)(a1 + 40);
    sub_1002CCDD0(v22, v15, 1, v27);
  }

  else
  {
    *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = sub_10005F404( (uint64_t)&OBJC_CLASS___SQLiteEntity,  v8,  v9,  *(void *)(*(void *)(a1 + 40) + 16LL),  v7,  *(void **)(*(void *)(a1 + 40) + 8LL));
  }

  *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) ^ 1;
  _Block_object_dispose(&v36, 8);
}

void sub_100060C64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, char a37)
{
}

uint64_t sub_100060C9C(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

uint64_t sub_100060CEC(uint64_t a1, sqlite3_stmt *a2)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v15;
    int v8 = 1;
    do
    {
      uint64_t v9 = 0LL;
      int v10 = v8;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v11 = (objc_object *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 40),  "objectForKeyedSubscript:",  *(void *)(*((void *)&v14 + 1) + 8 * (void)v9),  (void)v14));
        SQLiteBindFoundationValueToStatement(a2, v10 + (_DWORD)v9, v11);

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
      int v8 = v10 + (_DWORD)v9;
    }

    while (v6);
    int v12 = v10 + (_DWORD)v9;
  }

  else
  {
    int v12 = 1;
  }

  sqlite3_bind_int64(a2, v12, *(void *)(*(void *)(a1 + 48) + 16LL));
  uint64_t result = sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = result;
  return result;
}

int64_t sub_100061138(id a1, NSString *a2, NSString *a3)
{
  return -[NSString compare:](a2, "compare:", a3);
}

uint64_t sub_100061140(uint64_t a1, sqlite3_stmt *a2)
{
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v13;
    int v8 = 2;
    do
    {
      uint64_t v9 = 0LL;
      do
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        int v10 = (objc_object *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 40),  "objectForKey:",  *(void *)(*((void *)&v12 + 1) + 8 * (void)v9),  (void)v12));
        SQLiteBindFoundationValueToStatement(a2, v8 + (_DWORD)v9, v10);

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v6 != v9);
      id v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      v8 += (int)v9;
    }

    while (v6);
  }

  uint64_t result = sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = result;
  return result;
}

void sub_100061298(id *a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  if (([v12 isEqualToString:@"ROWID"] & 1) == 0)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[6] foreignDatabaseTableForProperty:v12]);
    uint64_t v7 = v6;
    if (v6)
    {
      id v8 = v6;
      id v9 = (id)objc_claimAutoreleasedReturnValue([a1[6] foreignDatabaseColumnForProperty:v12]);
    }

    else
    {
      id v8 = a1[4];
      id v9 = v12;
    }

    int v10 = v9;
    uint64_t v11 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([a1[5] objectForKeyedSubscript:v8]);
    if (!v11)
    {
      uint64_t v11 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      [a1[5] setObject:v11 forKeyedSubscript:v8];
    }

    -[NSMutableDictionary setObject:forKeyedSubscript:](v11, "setObject:forKeyedSubscript:", v5, v10);
  }
}

uint64_t sub_1000613A0(uint64_t a1, sqlite3_stmt *a2)
{
  uint64_t result = sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_100061900(id a1, PKPayLaterAccountProductEligibleSpend *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPayLaterAccountProductEligibleSpend setExpirationDate:](v4, "setExpirationDate:", v5);
}

void sub_100061AA0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100061F40(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 32LL);
  id v3 = objc_opt_new(&OBJC_CLASS___PDSafariCredentialEligibilityQueueItem);
  -[PDSafariCredentialEligibilityQueueItem setCredentials:](v3, "setCredentials:", *(void *)(a1 + 40));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100062100;
  void v12[3] = &unk_10063D638;
  objc_copyWeak(&v14, &location);
  id v13 = *(id *)(a1 + 48);
  -[PDSafariCredentialEligibilityQueueItem setCompletion:](v3, "setCompletion:", v12);
  id v4 = *(void **)(*(void *)(a1 + 32) + 32LL);
  if (v4)
  {
    [v4 addObject:v3];
  }

  else
  {
    uint64_t v5 = objc_claimAutoreleasedReturnValue(+[NSMutableArray arrayWithObject:](&OBJC_CLASS___NSMutableArray, "arrayWithObject:", v3));
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(v6 + 32);
    *(void *)(v6 + 32) = v5;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v10)
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Queue already exists, will wait for next item to pop queue",  v11,  2u);
    }
  }

  else
  {
    if (v10)
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Immediately popping the queue to start the process",  v11,  2u);
    }

    [*(id *)(a1 + 32) _popEligibilityQueue];
  }

  objc_destroyWeak(&v14);
  objc_destroyWeak(&location);
}

void sub_1000620D8( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_100062100(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v11 = a2;
  id v7 = a3;
  id v8 = a4;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(uint64_t, id, id, id))(v10 + 16))(v10, v11, v7, v8);
  }
  [WeakRetained _popEligibilityQueue];
}

void sub_1000621F8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 32) count];
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      id v6 = [*(id *)(*(void *)(a1 + 32) + 32) count];
      int v8 = 134217984;
      id v9 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Popping item from the queue (count: %ld)",  (uint8_t *)&v8,  0xCu);
    }

    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 32) firstObject]);
    [*(id *)(*(void *)(a1 + 32) + 32) removeObjectAtIndex:0];
    [*(id *)(a1 + 32) _processEligibilityItem:v7];
  }

  else
  {
    if (v5)
    {
      LOWORD(v_Block_object_dispose(va, 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Queue empty, so tearing down resources",  (uint8_t *)&v8,  2u);
    }

    [*(id *)(a1 + 32) _cleanupQueueResources];
  }

void sub_1000624AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100062568;
  v4[3] = &unk_10063D6B0;
  void v4[4] = v2;
  objc_copyWeak(&v6, (id *)(a1 + 48));
  id v5 = *(id *)(a1 + 40);
  [v3 diagnosticSessionWithReason:@"CheckSafariCredentialProvisioningEligibility" sessionHandler:v4];

  objc_destroyWeak(&v6);
}

void sub_100062554(_Unwind_Exception *a1)
{
}

void sub_100062568(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100062624;
  block[3] = &unk_10063D688;
  objc_copyWeak(&v9, (id *)(a1 + 48));
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, block);

  objc_destroyWeak(&v9);
}

void sub_100062624(uint64_t a1)
{
  uint64_t v2 = (id *)(a1 + 48);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  if (WeakRetained)
  {
    id v4 = -[PKPaymentProvisioningController initWithWebService:localPaymentService:]( objc_alloc(&OBJC_CLASS___PKPaymentProvisioningController),  "initWithWebService:localPaymentService:",  *(void *)(a1 + 32),  0LL);
    id v5 = (void *)WeakRetained[5];
    WeakRetained[5] = v4;

    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Preflighting provisioning controller",  buf,  2u);
    }

    id v8 = (void *)WeakRetained[5];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    id v9[2] = sub_100062764;
    v9[3] = &unk_10063D660;
    objc_copyWeak(&v11, v2);
    id v10 = *(id *)(a1 + 40);
    [v8 preflightWithRequirements:5 completionRequirements:5 completion:v9];

    objc_destroyWeak(&v11);
  }
}

void sub_100062750(_Unwind_Exception *a1)
{
}

void sub_100062764(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    if (a2)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Safari Import: Preflight success!", buf, 2u);
      }

      [WeakRetained _associateCredentialsForItem:*(void *)(a1 + 32)];
    }

    else
    {
      id v9 = PDDefaultQueue();
      id v10 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v9);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_10006287C;
      block[3] = &unk_100639350;
      id v12 = v5;
      id v13 = *(id *)(a1 + 32);
      id v14 = WeakRetained;
      dispatch_async(v10, block);
    }
  }
}

void sub_10006287C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v9 = 138412290;
    uint64_t v10 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Preflight failed: %@",  (uint8_t *)&v9,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) completion]);
  if (v5)
  {
    id v6 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) completion]);
    ((void (**)(void, void *, void *, void))v6)[2]( v6,  &__NSArray0__struct,  &__NSArray0__struct,  *(void *)(a1 + 32));
  }

  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = 0LL;
}

void sub_1000629F4(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + 32) + 40LL))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Associating credentials with provisioning controller",  (uint8_t *)&buf,  2u);
    }

    objc_initWeak(&buf, *(id *)(a1 + 32));
    uint64_t v4 = *(void **)(*(void *)(a1 + 32) + 40LL);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) credentials]);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_100062C48;
    v8[3] = &unk_10063D728;
    void v8[4] = *(void *)(a1 + 32);
    objc_copyWeak(&v10, &buf);
    id v9 = *(id *)(a1 + 40);
    [v4 associateCredentials:v5 withCompletionHandler:v8];

    objc_destroyWeak(&v10);
    objc_destroyWeak(&buf);
  }

  else
  {
    id v6 = PDDefaultQueue();
    uint64_t v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v6);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_100062B98;
    block[3] = &unk_100639300;
    id v13 = *(id *)(a1 + 40);
    dispatch_async(v7, block);
  }

void sub_100062B74( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
}

void sub_100062B98(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Provisioning controller already destroyed, can't associate",  v6,  2u);
  }

  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completion]);
  if (v4)
  {
    id v5 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) completion]);
    ((void (**)(void, void *, void *, void))v5)[2](v5, &__NSArray0__struct, &__NSArray0__struct, 0LL);
  }

void sub_100062C48(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100062D18;
  block[3] = &unk_10063D700;
  objc_copyWeak(&v14, (id *)(a1 + 48));
  char v15 = a2;
  id v11 = v5;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v12 = v7;
  uint64_t v13 = v8;
  id v9 = v5;
  dispatch_async(v6, block);

  objc_destroyWeak(&v14);
}

void sub_100062D18(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
  if (WeakRetained)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    int v4 = *(unsigned __int8 *)(a1 + 64);
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    uint64_t v36 = WeakRetained;
    uint64_t v37 = v3;
    if (v4)
    {
      if (v7)
      {
        *(_WORD *)id buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Association succeeded",  buf,  2u);
      }

      __int128 v50 = 0u;
      __int128 v51 = 0u;
      __int128 v49 = 0u;
      __int128 v48 = 0u;
      id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue([WeakRetained[5] associatedCredentials]);
      id v8 = -[os_log_s countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v48,  v55,  16LL);
      if (v8)
      {
        id v9 = v8;
        uint64_t v10 = *(void *)v49;
        do
        {
          for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v49 != v10) {
              objc_enumerationMutation(v6);
            }
            id v12 = *(void **)(*((void *)&v48 + 1) + 8LL * (void)i);
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 safariCredential]);
            [v3 safelyAddObject:v13];

            [WeakRetained[5] resolveProvisioningForCredential:v12];
          }

          id v9 = -[os_log_s countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v48,  v55,  16LL);
        }

        while (v9);
      }
    }

    else if (v7)
    {
      uint64_t v14 = *(void *)(a1 + 32);
      *(_DWORD *)id buf = 138412290;
      uint64_t v54 = v14;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Association failed: %@",  buf,  0xCu);
    }

    uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
    uint64_t v39 = a1;
    __int128 v44 = 0u;
    __int128 v45 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    char v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) credentials]);
    id v16 = [v15 countByEnumeratingWithState:&v44 objects:v52 count:16];
    if (v16)
    {
      id v17 = v16;
      uint64_t v18 = *(void *)v45;
      do
      {
        for (uint64_t j = 0LL; j != v17; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v45 != v18) {
            objc_enumerationMutation(v15);
          }
          __int128 v20 = *(void **)(*((void *)&v44 + 1) + 8LL * (void)j);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 state]);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 eligibilityResponse]);

          if (v22)
          {
            if ([v22 eligibilityStatus] == (id)3)
            {
              uint64_t v23 = PKLogFacilityTypeGetObject(6LL);
              id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)id buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Credential is already provisioned",  buf,  2u);
              }

              id v25 = *(void **)(*(void *)(v39 + 48) + 24LL);
              id v26 = (void *)objc_claimAutoreleasedReturnValue([v22 fpanIdentifier]);
              id v27 = (void *)objc_claimAutoreleasedReturnValue([v25 passWithPrimaryAccountIdentifier:v26]);
              uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([v27 paymentPass]);

              if (v28)
              {
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)id buf = 0;
                  _os_log_impl( (void *)&_mh_execute_header,  v24,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Found pass for already provisioned credential",  buf,  2u);
                }

                id v29 = -[PDSafariCredentialEligibilityCredentialPassPair initWithCredential:paymentPass:]( objc_alloc(&OBJC_CLASS___PDSafariCredentialEligibilityCredentialPassPair),  "initWithCredential:paymentPass:",  v20,  v28);
                [v38 safelyAddObject:v29];
              }
            }

            else if ([v22 eligibilityStatus] == (id)1 {
                   && [v22 supersededBy]
            }
                   && ([v37 containsObject:v20] & 1) == 0)
            {
              uint64_t v30 = PKLogFacilityTypeGetObject(6LL);
              __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)id buf = 0;
                _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Credential was a card on file, but not provisioned",  buf,  2u);
              }

              [v37 safelyAddObject:v20];
            }
          }
        }

        id v17 = [v15 countByEnumeratingWithState:&v44 objects:v52 count:16];
      }

      while (v17);
    }

    id WeakRetained = v36;
    [v36[5] reset];
    id v32 = PDDefaultQueue();
    __int128 v33 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000631F4;
    block[3] = &unk_100639350;
    id v41 = v37;
    id v42 = v38;
    id v43 = *(id *)(v39 + 40);
    id v34 = v38;
    id v35 = v37;
    dispatch_async(v33, block);
  }
}

void sub_1000631F4(id *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [a1[4] count];
    id v5 = [a1[5] count];
    int v10 = 134218240;
    id v11 = v4;
    __int16 v12 = 2048;
    id v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Safari Import: Safari count: %ld, Provisioned count: %ld",  (uint8_t *)&v10,  0x16u);
  }

  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[6] completion]);
  if (v6)
  {
    BOOL v7 = (void (**)(void, void, void, void))objc_claimAutoreleasedReturnValue([a1[6] completion]);
    id v8 = [a1[4] copy];
    id v9 = [a1[5] copy];
    ((void (**)(void, id, id, void))v7)[2](v7, v8, v9, 0LL);
  }

void sub_100063A10(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100063BCC(id a1, PDPassEndpointMetadata *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDPassEndpointMetadata setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_100063C18(id a1, PDPassEndpointMetadata *a2, id a3)
{
  id v4 = a2;
  -[PDPassEndpointMetadata setDirty:](v4, "setDirty:", [a3 BOOLValue]);
}

void sub_100063C5C(id a1, PDPassEndpointMetadata *a2, id a3)
{
  id v4 = a2;
  -[PDPassEndpointMetadata setType:](v4, "setType:", [a3 integerValue]);
}

void sub_100063CA0(id a1, PDPassEndpointMetadata *a2, id a3)
{
}

id sub_100063EEC(uint64_t a1, uint64_t a2, void *a3)
{
  return [*(id *)(a1 + 32) addObject:*a3];
}

id sub_100064060(uint64_t a1, uint64_t a2, void *a3)
{
  return [*(id *)(a1 + 32) addObject:*a3];
}

void sub_10006416C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

BOOL sub_100064184(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  *(void *)(a1 + 32),  *(void *)(a1 + 40)));
  if (v2)
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[SQLiteContainsPredicate doesNotContainPredicateWithProperty:values:]( &OBJC_CLASS___SQLiteContainsPredicate,  "doesNotContainPredicateWithProperty:values:",  @"participant_identifier",  *(void *)(a1 + 48)));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) queryWithDatabase:*(void *)(a1 + 32) predicate:v3]);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = [v4 deleteAllEntities];

    id v5 = -[NSMutableSet initWithSet:](objc_alloc(&OBJC_CLASS___NSMutableSet), "initWithSet:", *(void *)(a1 + 48));
    uint64_t v6 = *(void **)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 32);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 _predicateForPassUniqueID:*(void *)(a1 + 40)]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 queryWithDatabase:v7 predicate:v8]);

    uint64_t v30 = @"participant_identifier";
    int v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v30, 1LL));
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3221225472LL;
    v27[2] = sub_10006442C;
    v27[3] = &unk_10063D7F0;
    id v11 = v5;
    uint64_t v28 = v11;
    [v9 enumerateProperties:v10 usingBlock:v27];

    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v23 = 0u;
    __int128 v24 = 0u;
    __int16 v12 = v11;
    id v13 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v23,  v29,  16LL);
    if (v13)
    {
      id v14 = v13;
      uint64_t v15 = *(void *)v24;
      do
      {
        for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v24 != v15) {
            objc_enumerationMutation(v12);
          }
          uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8LL);
          if (*(_BYTE *)(v17 + 24))
          {
            uint64_t v18 = *(void *)(*((void *)&v23 + 1) + 8LL * (void)i);
            uint64_t v19 = objc_alloc(&OBJC_CLASS___TileDescriptorStateParticipant);
            id v20 = -[TileDescriptorStateParticipant _initWitParticipantID:forPass:inDatabase:]( v19,  "_initWitParticipantID:forPass:inDatabase:",  v18,  v2,  *(void *)(a1 + 32),  (void)v23);
            *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) = v20 != 0LL;
          }

          else
          {
            *(_BYTE *)(v17 + 24) = 0;
          }
        }

        id v14 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v12,  "countByEnumeratingWithState:objects:count:",  &v23,  v29,  16LL);
      }

      while (v14);
    }

    BOOL v21 = *(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL) != 0;
  }

  else
  {
    [*(id *)(a1 + 64) removeParticipantsForPassUniqueID:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 32)];
    BOOL v21 = 0LL;
  }

  return v21;
}

id sub_10006442C(uint64_t a1, uint64_t a2, void *a3)
{
  return [*(id *)(a1 + 32) removeObject:*a3];
}

void sub_1000647EC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100064804(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100064814(uint64_t a1)
{
}

BOOL sub_10006481C(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithPendingProvisioning:*(void *)(a1 + 32) forBasePendingProvisioning:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

void sub_100064974(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v9 = *(void **)(a1 + 40);
  id v10 = a3;
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 _propertySetters]);
  [v9 applyPropertySetters:v11 toObject:*(void *)(a1 + 32) withProperties:v10 values:a4];

  *a6 = 1;
}

void sub_100064C64(id a1, PKPendingCarKeyProvisioning *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPendingCarKeyProvisioning configuration](a2, "configuration"));
  [v5 setManufacturerIdentifier:v4];
}

void sub_100064CB0(id a1, PKPendingCarKeyProvisioning *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPendingCarKeyProvisioning configuration](a2, "configuration"));
  [v5 setIssuerIdentifier:v4];
}

void sub_100064CFC(id a1, PKPendingCarKeyProvisioning *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPendingCarKeyProvisioning configuration](a2, "configuration"));
  [v5 setProvisioningTemplateIdentifier:v4];
}

void sub_100064D48(id a1, PKPendingCarKeyProvisioning *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPendingCarKeyProvisioning configuration](a2, "configuration"));
  LODWORD(a2) = [v4 unsignedIntValue];

  [v5 setSupportedRadioTechnologies:a2];
}

void sub_100064DA4(id a1, PKPendingCarKeyProvisioning *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPendingCarKeyProvisioning configuration](a2, "configuration"));
  [v5 setProductPlanIdentifier:v4];
}

void sub_100064DF0(id a1, PKPendingCarKeyProvisioning *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPendingCarKeyProvisioning configuration](a2, "configuration"));
  [v5 setVehicleName:v4];
}

void sub_100064E3C(id a1, PKPendingCarKeyProvisioning *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPendingCarKeyProvisioning configuration](a2, "configuration"));
  [v5 setPairedReaderIdentifier:v4];
}

void sub_100065374(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a2;
  objc_msgSend( (id)objc_opt_class(v5, v7),  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v6,  a3);

  id v8 = [*(id *)(a1 + 32) persistentID];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  id v13 = (id)objc_claimAutoreleasedReturnValue( +[PayLaterInstallment payLaterInstallmentsForScheduleSummaryPID:inDatabase:]( &OBJC_CLASS___PayLaterInstallment,  "payLaterInstallmentsForScheduleSummaryPID:inDatabase:",  v8,  v9));

  [*(id *)(a1 + 48) setInstallments:v13];
  id v10 = [*(id *)(a1 + 32) persistentID];
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  __int16 v12 = (void *)objc_claimAutoreleasedReturnValue( +[PayLaterPayment payLaterPaymentsForScheduleSummaryPID:inDatabase:]( &OBJC_CLASS___PayLaterPayment,  "payLaterPaymentsForScheduleSummaryPID:inDatabase:",  v10,  v11));

  [*(id *)(a1 + 48) setPayments:v12];
}

void sub_10006559C(id a1, PKPayLaterFinancingPlanScheduleSummary *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanScheduleSummary setScheduleSummaryReason:]( v4,  "setScheduleSummaryReason:",  [a3 integerValue]);
}

void sub_100065828( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100065840(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100065850(uint64_t a1)
{
}

BOOL sub_100065858(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithMetadata:*(void *)(a1 + 32) forBaseMetadata:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

void sub_1000659F4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4, uint64_t a5, _BYTE *a6)
{
  if (*a4)
  {
    id v8 = *a4;
    id v9 = objc_alloc(&OBJC_CLASS___NSSet);
    uint64_t v11 = objc_opt_class(&OBJC_CLASS___NSArray, v10);
    id v13 = -[NSSet initWithObjects:](v9, "initWithObjects:", v11, objc_opt_class(&OBJC_CLASS___NSNumber, v12), 0LL);
    id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:]( &OBJC_CLASS___NSKeyedUnarchiver,  "unarchivedObjectOfClasses:fromData:error:",  v13,  v8,  0LL));

    [*(id *)(a1 + 32) setVehicleFunctions:v14];
  }

  *a6 = 1;
}

void sub_100066080(uint64_t a1, uint64_t a2, void *a3, id *a4)
{
  id v9 = a3;
  id v7 = *a4;
  if (v7)
  {
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSString, v6);
    if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0) {
      [*(id *)(a1 + 32) addObject:v7];
    }
  }
}

void sub_100066248(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = *a4;
  id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKey:v7]);
  id v8 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v16;
    do
    {
      for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v10) {
          objc_enumerationMutation(obj);
        }
        uint64_t v12 = *(void **)(*((void *)&v15 + 1) + 8LL * (void)i);
        [v12 setTransactionSourceIdentifier:v6];
        id v13 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withTransactionSourcePID:]( PaymentApplication,  "anyInDatabase:withTransactionSourcePID:",  *(void *)(a1 + 40),  [v7 longLongValue]));
        [v12 setHasAssociatedPaymentApplication:v13 != 0];
      }

      id v9 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }

    while (v9);
  }
}

void sub_100067088(uint64_t a1, uint64_t a2, void *a3)
{
  id v10 = a3;
  uint64_t v5 = objc_autoreleasePoolPush();
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 valueForProperty:@"b"]);
  if (v8)
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___NSString, v7);
    if ((objc_opt_isKindOfClass(v8, v9) & 1) != 0) {
      [*(id *)(a1 + 40) addObject:v8];
    }
  }

  objc_autoreleasePoolPop(v5);
}

void sub_100067374(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  uint64_t v5 = objc_autoreleasePoolPush();
  id v6 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___AccountRewards),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v7 = *(void **)(a1 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue(-[AccountRewards rewards](v6, "rewards"));
  [v7 addObject:v8];

  objc_autoreleasePoolPop(v5);
}

void sub_1000677DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 40);
  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) currencyAmount]);
  [v4 setCurrencyAmount:v5];
}

void sub_100067B88(id a1, PKAccountRewards *a2, id a3)
{
}

void sub_100067B90(id a1, PKAccountRewards *a2, id a3)
{
  id v4 = a2;
  -[PKAccountRewards setType:](v4, "setType:", [a3 integerValue]);
}

void sub_100067BD4(id a1, PKAccountRewards *a2, id a3)
{
}

void sub_100067BDC(id a1, PKAccountRewards *a2, id a3)
{
  id v4 = a2;
  -[PKAccountRewards setStatusCode:](v4, "setStatusCode:", [a3 integerValue]);
}

void sub_1000680A8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 updateCloudStoreWithLocalItemsWithConfigurations:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService updateCloudStoreWithLocalItemsWithConfigurations:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      __int128 v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService updateCloudStoreWithLocalItemsWithConfigurations:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService updateCloudStoreWithLocalItemsWithConfigurations:completion:]_block_invoke"));
      __int128 v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_1000684AC(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 removeAllItems:*(void *)(a1 + 64) inZoneName:*(void *)(a1 + 40) containerName:*(void *)(a1 + 48) storeLocally:*(unsigned __int8 *)(a1 + 72) completion:*(void *)(a1 + 56)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService removeAllItems:inZoneName:containerName:storeLocally:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 56);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      __int128 v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService removeAllItems:inZoneName:containerName:storeLocally:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 56);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService removeAllItems:inZoneName:containerName:storeLocally:completion:]_block_invoke"));
      __int128 v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_1000688C8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 removeRecordWithRecordName:*(void *)(a1 + 40) zoneName:*(void *)(a1 + 48) containerName:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService removeRecordWithRecordName:zoneName:containerName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 64);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      __int128 v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService removeRecordWithRecordName:zoneName:containerName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 64);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService removeRecordWithRecordName:zoneName:containerName:completion:]_block_invoke"));
      __int128 v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v8);

LABEL_12:
    }
  }

void sub_100068C80(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 allItemsOfItemType:*(void *)(a1 + 48) storeLocally:*(unsigned __int8 *)(a1 + 56) completion:*(void *)(a1 + 40)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService allItemsOfItemType:storeLocally:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 40);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      __int128 v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService allItemsOfItemType:storeLocally:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 40);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService allItemsOfItemType:storeLocally:completion:]_block_invoke"));
      __int128 v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_100069070(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 applePayContainerItemsFromDate:*(void *)(a1 + 40) toDate:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService applePayContainerItemsFromDate:toDate:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 56);
    NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
    __int128 v17 = @"Cloud store not initialized";
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
    (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService applePayContainerItemsFromDate:toDate:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 56);
    NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService applePayContainerItemsFromDate:toDate:completion:]_block_invoke"));
    __int128 v15 = v6;
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
    id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
    (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);
  }
}

void sub_100069450(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 itemOfItemType:*(void *)(a1 + 56) recordName:*(void *)(a1 + 40) qualityOfService:*(void *)(a1 + 64) completion:*(void *)(a1 + 48)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService itemOfItemType:recordName:qualityOfService:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      __int128 v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService itemOfItemType:recordName:qualityOfService:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService itemOfItemType:recordName:qualityOfService:completion:]_block_invoke"));
      __int128 v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_100069838(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 itemOfItemTypeFromAllZones:*(void *)(a1 + 56) recordName:*(void *)(a1 + 40) qualityOfService:*(void *)(a1 + 64) completion:*(void *)(a1 + 48)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService itemOfItemTypeFromAllZones:recordName:qualityOfService:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      __int128 v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService itemOfItemTypeFromAllZones:recordName:qualityOfService:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService itemOfItemTypeFromAllZones:recordName:qualityOfService:completion:]_block_invoke"));
      __int128 v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_100069C08(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 cloudStoreRecordArrayWithConfiguration:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService cloudStoreRecordArrayWithConfiguration:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      __int128 v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService cloudStoreRecordArrayWithConfiguration:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService cloudStoreRecordArrayWithConfiguration:completion:]_block_invoke"));
      __int128 v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_100069FF4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 resetContainerWithIdentifier:*(void *)(a1 + 40) zoneNames:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService resetContainerWithIdentifier:zoneNames:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 56);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      __int128 v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService resetContainerWithIdentifier:zoneNames:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 56);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService resetContainerWithIdentifier:zoneNames:completion:]_block_invoke"));
      __int128 v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_10006A3C4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 simulateCloudStorePushForContainerIdentifier:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService simulateCloudStorePushForContainerIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      __int128 v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void, void *))(v11 + 16))(v11, 0LL, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService simulateCloudStorePushForContainerIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService simulateCloudStorePushForContainerIdentifier:completion:]_block_invoke"));
      __int128 v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void, void *))(v5 + 16))(v5, 0LL, 0LL, v8);

LABEL_12:
    }
  }

void sub_10006A798(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionSourceController]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionSourceController]);
      [v13 simulatePassProvisioningForPassUniqueIdentifier:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService simulatePassProvisioningForPassUniqueIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      __int128 v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService simulatePassProvisioningForPassUniqueIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService simulatePassProvisioningForPassUniqueIdentifier:completion:]_block_invoke"));
      __int128 v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v8);

LABEL_12:
    }
  }

void sub_10006AB5C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 applePayContainer]);

    if (v3)
    {
      id v15 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v15 applePayContainer]);
      [v4 generateRandomTransactionForTransactionSourceIdentifier:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      BOOL v21 = "-[PDCloudStoreService generateRandomTransactionForTransactionSourceIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 48);
    if (v13)
    {
      NSErrorUserInfoKey v18 = NSLocalizedDescriptionKey;
      uint64_t v19 = @"Cloud store not initialized";
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
      NSErrorUserInfoKey v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v8));
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v14);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v5 = PKLogFacilityTypeGetObject(0LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      BOOL v21 = "-[PDCloudStoreService generateRandomTransactionForTransactionSourceIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v7 = *(void *)(a1 + 48);
    if (v7)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService generateRandomTransactionForTransactionSourceIdentifier:completion:]_block_invoke"));
      __int128 v17 = v8;
      id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v9));
      (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v10);

LABEL_12:
    }
  }

void sub_10006AF78(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 applePayContainer]);

    if (v3)
    {
      id v15 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      id v4 = (void *)objc_claimAutoreleasedReturnValue([v15 applePayContainer]);
      [v4 uploadTransaction:*(void *)(a1 + 40) forTransactionSourceIdentifier:*(void *)(a1 + 48) includeServerData:*(unsigned __int8 *)(a1 + 64) completion:*(void *)(a1 + 56)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      BOOL v21 = "-[PDCloudStoreService uploadTransaction:forTransactionSourceIdentifier:includeServerData:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 56);
    if (v13)
    {
      NSErrorUserInfoKey v18 = NSLocalizedDescriptionKey;
      uint64_t v19 = @"Cloud store not initialized";
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
      NSErrorUserInfoKey v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v8));
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v14);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v5 = PKLogFacilityTypeGetObject(0LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      BOOL v21 = "-[PDCloudStoreService uploadTransaction:forTransactionSourceIdentifier:includeServerData:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v7 = *(void *)(a1 + 56);
    if (v7)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService uploadTransaction:forTransactionSourceIdentifier:includeServerData:completi on:]_block_invoke"));
      __int128 v17 = v8;
      id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v9));
      (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v10);

LABEL_12:
    }
  }

void sub_10006B38C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 deleteZone:*(void *)(a1 + 40) containerName:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService deleteZone:containerName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 56);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      __int128 v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService deleteZone:containerName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 56);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService deleteZone:containerName:completion:]_block_invoke"));
      id v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_10006B77C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 createZone:*(void *)(a1 + 40) containerName:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService createZone:containerName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 56);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      __int128 v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v19 = "-[PDCloudStoreService createZone:containerName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 56);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService createZone:containerName:completion:]_block_invoke"));
      id v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_10006BB6C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 applePayContainer]);

    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 40);
      uint64_t v5 = *(void *)(a1 + 48);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      id v15[2] = sub_10006BE28;
      v15[3] = &unk_10063DA70;
      id v16 = *(id *)(a1 + 56);
      [v3 populateEvents:v4 forAccountIdentifier:v5 completion:v15];
      id v6 = v16;
LABEL_13:

LABEL_14:
      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      uint64_t v22 = "-[PDCloudStoreService populateEvents:forAccountIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v9 = *(void *)(a1 + 56);
    if (!v9) {
      goto LABEL_14;
    }
    NSErrorUserInfoKey v19 = NSLocalizedDescriptionKey;
    id v20 = @"Cloud store not initialized";
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v20,  &v19,  1LL));
    id v10 = PKPassKitErrorDomain;
    uint64_t v11 = -5000LL;
LABEL_12:
    NSErrorUserInfoKey v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v10,  v11,  v6));
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v14);

    goto LABEL_13;
  }

  uint64_t v7 = PKLogFacilityTypeGetObject(0LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)id buf = 136315138;
    uint64_t v22 = "-[PDCloudStoreService populateEvents:forAccountIdentifier:completion:]_block_invoke";
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
  }

  uint64_t v9 = *(void *)(a1 + 56);
  if (v9)
  {
    NSErrorUserInfoKey v17 = NSLocalizedDescriptionKey;
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService populateEvents:forAccountIdentifier:completion:]_block_invoke"));
    NSErrorUserInfoKey v18 = v3;
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v18,  &v17,  1LL));
    id v10 = PKPassKitErrorDomain;
    uint64_t v11 = -5002LL;
    goto LABEL_12;
  }

uint64_t sub_10006BE28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10006BF8C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 declineInvitationForRecipientHandle:*(void *)(a1 + 40) zoneName:*(void *)(a1 + 48) containerName:*(void *)(a1 + 56) qualityOfService:*(void *)(a1 + 72) completion:*(void *)(a1 + 64)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService declineInvitationForRecipientHandle:zoneName:containerName:qualityOfService:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 64);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      NSErrorUserInfoKey v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService declineInvitationForRecipientHandle:zoneName:containerName:qualityOfService:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 64);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService declineInvitationForRecipientHandle:zoneName:containerName:qualityOfService :completion:]_block_invoke"));
      id v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_10006C3B0(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 createInvitationForRecipientHandle:*(void *)(a1 + 40) zoneName:*(void *)(a1 + 48) containerName:*(void *)(a1 + 56) qualityOfService:*(void *)(a1 + 72) completion:*(void *)(a1 + 64)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService createInvitationForRecipientHandle:zoneName:containerName:qualityOfService:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 64);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      NSErrorUserInfoKey v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService createInvitationForRecipientHandle:zoneName:containerName:qualityOfService:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 64);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService createInvitationForRecipientHandle:zoneName:containerName:qualityOfService: completion:]_block_invoke"));
      id v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_10006C7B4(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 shareForZoneName:*(void *)(a1 + 40) containerName:*(void *)(a1 + 48) qualityOfService:*(void *)(a1 + 64) completion:*(void *)(a1 + 56)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService shareForZoneName:containerName:qualityOfService:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 56);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      NSErrorUserInfoKey v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService shareForZoneName:containerName:qualityOfService:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 56);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService shareForZoneName:containerName:qualityOfService:completion:]_block_invoke"));
      id v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_10006CB84(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 diagnosticInfoForContainerWithName:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService diagnosticInfoForContainerWithName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      NSErrorUserInfoKey v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService diagnosticInfoForContainerWithName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService diagnosticInfoForContainerWithName:completion:]_block_invoke"));
      id v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_10006CF50(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 diagnosticSnapshotForContainerWithName:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService diagnosticSnapshotForContainerWithName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      NSErrorUserInfoKey v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService diagnosticSnapshotForContainerWithName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService diagnosticSnapshotForContainerWithName:completion:]_block_invoke"));
      id v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_10006D320(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
      [v13 performAction:*(void *)(a1 + 56) inContainerWithName:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService performAction:inContainerWithName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      NSErrorUserInfoKey v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService performAction:inContainerWithName:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService performAction:inContainerWithName:completion:]_block_invoke"));
      id v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v8);

LABEL_12:
    }
  }

void sub_10006D6E8(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionSourceController]);
      [v13 performBackgroundTransactionSyncFromDate:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService performBackgroundTransactionSyncFromDate:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 48);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      NSErrorUserInfoKey v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v11 + 16))(v11, 0LL, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService performBackgroundTransactionSyncFromDate:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 48);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService performBackgroundTransactionSyncFromDate:completion:]_block_invoke"));
      id v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0LL, v8);

LABEL_12:
    }
  }

void sub_10006DA88(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      id v13 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionSourceController]);
      [v13 performBackgroundRecordChangesSyncWithCompletion:*(void *)(a1 + 40)];

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService performBackgroundRecordChangesSyncWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v11 = *(void *)(a1 + 40);
    if (v11)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      NSErrorUserInfoKey v17 = @"Cloud store not initialized";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v6));
      (*(void (**)(uint64_t, void *))(v11 + 16))(v11, v12);

      goto LABEL_12;
    }
  }

  else
  {
    uint64_t v3 = PKLogFacilityTypeGetObject(0LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      NSErrorUserInfoKey v19 = "-[PDCloudStoreService performBackgroundRecordChangesSyncWithCompletion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v5 = *(void *)(a1 + 40);
    if (v5)
    {
      NSErrorUserInfoKey v14 = NSLocalizedDescriptionKey;
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService performBackgroundRecordChangesSyncWithCompletion:]_block_invoke"));
      id v15 = v6;
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v15,  &v14,  1LL));
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v7));
      (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v8);

LABEL_12:
    }
  }

void sub_10006DE4C(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 32) + 8) paymentAllAccess])
  {
    id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);

    if (v2)
    {
      uint64_t v3 = *(void *)(a1 + 48);
      if (v3)
      {
        id v15 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
        uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v15 changeHistoryForContainerIdentifier:*(void *)(a1 + 40)]);
        (*(void (**)(uint64_t, void *, void))(v3 + 16))(v3, v4, 0LL);
      }

      return;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      BOOL v21 = "-[PDCloudStoreService changeHistoryForContainerIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Cloud store not initialized. Cannot call method: %s",  buf,  0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 48);
    if (v13)
    {
      NSErrorUserInfoKey v18 = NSLocalizedDescriptionKey;
      NSErrorUserInfoKey v19 = @"Cloud store not initialized";
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v19,  &v18,  1LL));
      NSErrorUserInfoKey v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5000LL,  v8));
      (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v14);

      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v5 = PKLogFacilityTypeGetObject(0LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 136315138;
      BOOL v21 = "-[PDCloudStoreService changeHistoryForContainerIdentifier:completion:]_block_invoke";
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Client is not entitled for method: %s",  buf,  0xCu);
    }

    uint64_t v7 = *(void *)(a1 + 48);
    if (v7)
    {
      NSErrorUserInfoKey v16 = NSLocalizedDescriptionKey;
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Client is not entitled for method: %s",  "-[PDCloudStoreService changeHistoryForContainerIdentifier:completion:]_block_invoke"));
      NSErrorUserInfoKey v17 = v8;
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v17,  &v16,  1LL));
      id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5002LL,  v9));
      (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0LL, v10);

LABEL_13:
    }
  }

void sub_10006E26C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10006E2FC;
  v4[3] = &unk_100639688;
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 setupCloudDatabaseForContainerName:v3 completion:v4];
}

uint64_t sub_10006E2FC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10006E440(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10006E4D0;
  v4[3] = &unk_10063DAC0;
  uint64_t v3 = *(void *)(a1 + 40);
  id v5 = *(id *)(a1 + 48);
  [v2 cloudStoreStatusForContainer:v3 completion:v4];
}

uint64_t sub_10006E4D0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10006E5E8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10006E66C;
  v3[3] = &unk_100639688;
  id v4 = *(id *)(a1 + 40);
  [v2 checkTLKsMissingWithCompletion:v3];
}

uint64_t sub_10006E66C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10006E784(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudStoreNotificationCoordinator]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_10006E808;
  v3[3] = &unk_100639688;
  id v4 = *(id *)(a1 + 40);
  [v2 resetApplePayManateeViewWithCompletion:v3];
}

uint64_t sub_10006E808(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10006E8C0(uint64_t a1)
{
  id v2 = objc_autoreleasePoolPush();
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  objc_autoreleasePoolPop(v2);
}

void sub_10006EA7C(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 > 4) {
    uint64_t v3 = @"unkown reason";
  }
  else {
    uint64_t v3 = off_10063DDF8[v2];
  }
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(unsigned __int8 *)(v4 + 200);
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v8)
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v4 + 184) logDescription]);
      int v14 = 138543618;
      id v15 = v9;
      __int16 v16 = 2114;
      NSErrorUserInfoKey v17 = v3;
      id v10 = "[PDPassCloudStore(%{public}@)] won't synchronize container is readonly: %{public}@";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)&v14, 0x16u);
    }
  }

  else
  {
    if (v8)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v4 + 184) logDescription]);
      int v14 = 138543618;
      id v15 = v11;
      __int16 v16 = 2114;
      NSErrorUserInfoKey v17 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] synchronization data requested: %{public}@",  (uint8_t *)&v14,  0x16u);
    }

    unsigned int v12 = [*(id *)(a1 + 32) ensureSyncPreconditionsAreMet];
    uint64_t v13 = *(os_unfair_lock_s **)(a1 + 32);
    if (v12)
    {
      -[os_unfair_lock_s downloadCloudDataWithReason:](v13, "downloadCloudDataWithReason:", *(void *)(a1 + 40));
      return;
    }

    os_unfair_lock_lock(v13 + 54);
    *(_BYTE *)(*(void *)(a1 + 32) + 203LL) = 1;
    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 216LL));
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
      int v14 = 138543618;
      id v15 = v9;
      __int16 v16 = 2114;
      NSErrorUserInfoKey v17 = v3;
      id v10 = "[PDPassCloudStore(%{public}@)] won't synchronize container now: %{public}@ (precondition)";
      goto LABEL_13;
    }
  }
}

void sub_10006ED0C(uint64_t a1)
{
  unint64_t v2 = @"unkown reason";
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3 == 1) {
    unint64_t v2 = @"perodic check-in";
  }
  if (v3) {
    int v5 = v2;
  }
  else {
    int v5 = @"reachability change";
  }
  int v6 = *(unsigned __int8 *)(v4 + 200);
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v4 + 184) logDescription]);
      *(_DWORD *)id buf = 138543618;
      NSErrorUserInfoKey v17 = v10;
      __int16 v18 = 2114;
      NSErrorUserInfoKey v19 = v5;
      uint64_t v11 = "[PDPassCloudStore(%{public}@)] won't process pending changes because container is readonly: %{public}@";
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v11, buf, 0x16u);
    }
  }

  else
  {
    if (v9)
    {
      unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v4 + 184) logDescription]);
      *(_DWORD *)id buf = 138543618;
      NSErrorUserInfoKey v17 = v12;
      __int16 v18 = 2114;
      NSErrorUserInfoKey v19 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] processing pending changes requested: %{public}@",  buf,  0x16u);
    }

    if ([*(id *)(a1 + 32) ensureSyncPreconditionsAreMet])
    {
      uint64_t v13 = *(void **)(a1 + 32);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      id v14[2] = sub_10006EF38;
      v14[3] = &unk_10063DAE8;
      void v14[4] = v13;
      id v15 = (__CFString *)v5;
      [v13 processPendingChanges:v14];

      return;
    }

    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
      *(_DWORD *)id buf = 138543618;
      NSErrorUserInfoKey v17 = v10;
      __int16 v18 = 2114;
      NSErrorUserInfoKey v19 = v5;
      uint64_t v11 = "[PDPassCloudStore(%{public}@)] won't process pending changes now:%{public}@ (precondition)";
      goto LABEL_15;
    }
  }
}

void sub_10006EF38(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = *(void **)(*(void *)(a1 + 32) + 184LL);
    id v9 = a3;
    id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 logDescription]);
    uint64_t v11 = *(void *)(a1 + 40);
    unsigned int v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));

    int v13 = 138544130;
    int v14 = v10;
    __int16 v15 = 2114;
    uint64_t v16 = v11;
    __int16 v17 = 2114;
    __int16 v18 = v12;
    __int16 v19 = 2114;
    id v20 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] because:%{public}@ did process pending changes:%{public}@ %{public}@",  (uint8_t *)&v13,  0x2Au);
  }
}

void sub_10006F0B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 208);
  *(void *)(v2 + 20_Block_object_dispose(va, 8) = 0LL;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 216LL));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 184) stringPrefixedWithContainerName:@"PDPassSyncCloudStoreContainerLastDownloadDateKey"]);
  PKSharedCacheRemoveObjectForKey(v4);

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
  [v5 cloudStoreContainer:*(void *)(a1 + 32) reinitializeContainerAndInvalidateFirst:1];
}

LABEL_43:
      return 0;
    }

    if (v13)
    {
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainerConfiguration logDescription](self->_configuration, "logDescription"));
      id v27 = 138543362;
      uint64_t v28 = v26;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] wallet dataclass is now enabled - setting up again",  (uint8_t *)&v27,  0xCu);
    }

    uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer delegate](self, "delegate"));
    uint64_t v4 = v22;
    __int128 v23 = self;
    __int128 v24 = 1LL;
LABEL_42:
    -[os_log_s cloudStoreContainer:reinitializeContainerAndInvalidateFirst:]( v22,  "cloudStoreContainer:reinitializeContainerAndInvalidateFirst:",  v23,  v24);
    goto LABEL_43;
  }

  if (isDownloading)
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainerConfiguration logDescription](self->_configuration, "logDescription"));
      id v27 = 138543362;
      uint64_t v28 = v7;
      BOOL v8 = "[PDPassCloudStore(%{public}@)] downloading data - uploads and more downloads will happen later";
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v27, 0xCu);

      goto LABEL_43;
    }

    goto LABEL_43;
  }

  didSuccessfullySyncAtLeastOnce = self->_didSuccessfullySyncAtLeastOnce;
  uint64_t v16 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (!didSuccessfullySyncAtLeastOnce)
  {
    if (v16)
    {
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainerConfiguration logDescription](self->_configuration, "logDescription"));
      id v27 = 138543362;
      uint64_t v28 = v25;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] container never synced - tryng to download first",  (uint8_t *)&v27,  0xCu);
    }

    -[PDPassSyncCloudStoreContainer downloadCloudDataWithReason:](self, "downloadCloudDataWithReason:", 3LL);
    return 0;
  }

  if (v16)
  {
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainerConfiguration logDescription](self->_configuration, "logDescription"));
    id v27 = 138543362;
    uint64_t v28 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] sync preconditions are met",  (uint8_t *)&v27,  0xCu);
  }

  return 1;
}

          int v13 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
          -[os_log_s cloudStoreContainer:reinitializeContainerAndInvalidateFirst:]( v13,  "cloudStoreContainer:reinitializeContainerAndInvalidateFirst:",  *(void *)(a1 + 32),  1LL);
          goto LABEL_44;
        }

        if (v29)
        {
          id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v21 + 184) logDescription]);
          uint64_t v30 = 138543362;
          __int128 v31 = v10;
          uint64_t v11 = "[PDPassCloudStore(%{public}@)] neither account nor secure sync availabilty did change";
          goto LABEL_39;
        }

        goto LABEL_44;
      }
    }

    else
    {
      uint64_t v7 = 1;
    }

    if (v4 == (id)15) {
      BOOL v8 = v7;
    }
    else {
      BOOL v8 = 0;
    }
    goto LABEL_24;
  }

  __int16 v15 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
    uint64_t v30 = 138543362;
    __int128 v31 = v17;
    _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] CKAccountState is not available",  (uint8_t *)&v30,  0xCu);
  }

  [*(id *)(a1 + 32) advanceToNextState:3 withError:*(void *)(a1 + 48)];
}

LABEL_44:
            id v41 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager categoryVisualizationMagnitudesForPassUniqueID:]( self,  "categoryVisualizationMagnitudesForPassUniqueID:",  v6,  v55));
            id v42 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
            for (uint64_t j = 0LL; j != 8; ++j)
            {
              __int128 v44 = (float)*((uint64_t *)v85 + j) / (float)v26;
              __int128 v45 = objc_alloc_init(&OBJC_CLASS___PKCategoryVisualizationMagnitude);
              -[PKCategoryVisualizationMagnitude setPassUniqueIdentifier:](v45, "setPassUniqueIdentifier:", v6);
              -[PKCategoryVisualizationMagnitude setBucket:](v45, "setBucket:", j);
              -[PKCategoryVisualizationMagnitude setMagnitude:](v45, "setMagnitude:", v44);
              -[NSMutableSet addObject:](v42, "addObject:", v45);
            }

            __int128 v46 = -[NSMutableSet copy](v42, "copy");
            if ((PKEqualObjects(v46, v41) & 1) != 0)
            {
              __int128 v47 = v57;
              if (!v57) {
                goto LABEL_58;
              }
            }

            else
            {
              uint64_t v77 = 0u;
              __int16 v78 = 0u;
              int v75 = 0u;
              uint64_t v76 = 0u;
              __int128 v48 = v46;
              __int128 v49 = [v48 countByEnumeratingWithState:&v75 objects:v83 count:16];
              if (v49)
              {
                __int128 v50 = v49;
                __int128 v51 = *(void *)v76;
                do
                {
                  for (k = 0LL; k != v50; k = (char *)k + 1)
                  {
                    if (*(void *)v76 != v51) {
                      objc_enumerationMutation(v48);
                    }
                    id v53 =  +[CategoryVisualizationMagnitude insertOrUpdateMagnitude:inDatabase:]( &OBJC_CLASS___CategoryVisualizationMagnitude,  "insertOrUpdateMagnitude:inDatabase:",  *(void *)(*((void *)&v75 + 1) + 8LL * (void)k),  self->_database);
                  }

                  __int128 v50 = [v48 countByEnumeratingWithState:&v75 objects:v83 count:16];
                }

                while (v50);
              }

              __int128 v47 = v57;
            }

            delegateQueue = self->_delegateQueue;
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_100137234;
            block[3] = &unk_100639288;
            void block[4] = self;
            id v72 = v6;
            uint64_t v73 = v46;
            __int128 v74 = v47;
            dispatch_async((dispatch_queue_t)delegateQueue, block);

LABEL_58:
            BOOL v8 = v64;
            uint64_t v7 = v65;
            id v10 = v62;
            id v9 = v63;
            goto LABEL_59;
          }

LABEL_44:
    if ((PKHideCardBenefitRewards() & 1) == 0
      && (!-[PKPaymentTransaction transactionStatus](v11, "transactionStatus")
       || -[PKPaymentTransaction transactionStatus](v11, "transactionStatus") == (id)1
       || -[PKPaymentTransaction transactionStatus](v11, "transactionStatus") == (id)-1LL
       || -[PKPaymentTransaction transactionStatus](v11, "transactionStatus") == (id)8))
    {
      id v32 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentRewardsRedemption rewardsRedemptionWithPaymentHash:inDatabase:]( &OBJC_CLASS___PaymentRewardsRedemption,  "rewardsRedemptionWithPaymentHash:inDatabase:",  v68,  v8));
    }

    __int128 v33 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionAmount paymentAmountsInDatabase:forPaymentTransactionPID:]( &OBJC_CLASS___PaymentTransactionAmount,  "paymentAmountsInDatabase:forPaymentTransactionPID:",  v8,  a2));
    -[PKPaymentTransaction setAmounts:](v11, "setAmounts:", v33);
    id v34 = (void *)objc_claimAutoreleasedReturnValue( +[TransactionCommutePlanUnit pk_transactionCommutePlanUnitsInDatabase:forPaymentTransactionPID:]( &OBJC_CLASS___TransactionCommutePlanUnit,  "pk_transactionCommutePlanUnitsInDatabase:forPaymentTransactionPID:",  v8,  a2));
    -[PKPaymentTransaction setPlans:](v11, "setPlans:", v34);
    if (a1[25])
    {
      id v35 = (void *)objc_claimAutoreleasedReturnValue( +[WorldRegion regionsForTransactionPID:localeIdentifier:inDatabase:]( &OBJC_CLASS___WorldRegion,  "regionsForTransactionPID:localeIdentifier:inDatabase:",  a2,  a1[2],  v8));
      if (v35) {
        [a1[25] setObject:v35 forKeyedSubscript:v9];
      }
    }

    if (a1[26])
    {
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionTag paymentTransactionTagsForPID:inDatabase:]( &OBJC_CLASS___PaymentTransactionTag,  "paymentTransactionTagsForPID:inDatabase:",  a2,  v8));
      if (v36) {
        [a1[26] setObject:v36 forKeyedSubscript:v9];
      }
    }

    uint64_t v37 = *(id *)(a4 + 8LL * (void)a1[20]);
    if (v37)
    {
      uint64_t v38 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([a1[27] objectForKeyedSubscript:v37]);
      if (!v38)
      {
        uint64_t v38 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        [a1[27] setObject:v38 forKeyedSubscript:v37];
      }

      -[NSMutableArray addObject:](v38, "addObject:", v11);
    }

    uint64_t v39 = *(id *)(a4 + 8LL * (void)a1[21]);
    if (v39)
    {
      id v40 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([a1[28] objectForKeyedSubscript:v39]);
      if (!v40)
      {
        id v40 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        [a1[28] setObject:v40 forKeyedSubscript:v39];
      }

      -[NSMutableArray addObject:](v40, "addObject:", v11);
    }

    id v41 = *(id *)(a4 + 8LL * (void)a1[22]);
    if (v41)
    {
      id v42 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([a1[29] objectForKeyedSubscript:v41]);
      if (!v42)
      {
        id v42 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        [a1[29] setObject:v42 forKeyedSubscript:v41];
      }

      -[NSMutableArray addObject:](v42, "addObject:", v11);
    }

    a1 = v11;

    goto LABEL_73;
  }

  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Range requires lowerBound <= upperBound",  39LL,  2LL,  "Swift/Range.swift",  17LL,  2,  754LL,  0);
  __break(1u);
LABEL_44:
  LOBYTE(v47) = 2;
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Must take zero or more splits",  29LL,  2LL,  "Swift/Collection.swift",  22LL,  v47,  1552LL,  0);
  __break(1u);
  return result;
}

id sub_10006F728()
{
  id v0 = (void *)objc_claimAutoreleasedReturnValue(+[ACAccountStore defaultStore](&OBJC_CLASS___ACAccountStore, "defaultStore"));
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v0, "aa_primaryAppleAccount"));

  id v2 = [v1 isEnabledForDataclass:ACAccountDataclassShoebox];
  return v2;
}

void sub_10006FE44(uint64_t a1, void *a2, void *a3)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_10006FEEC;
  v7[3] = &unk_100639350;
  id v8 = a2;
  id v9 = a3;
  id v10 = *(id *)(a1 + 32);
  id v5 = v9;
  id v6 = v8;
  [v10 onWorkQueue:v7];
}

void sub_10006FEEC(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) accountStatus];
  if (*(void *)(a1 + 40))
  {
    objc_msgSend(*(id *)(a1 + 48), "setOperationError:");
    uint64_t v3 = *(void **)(a1 + 48);
    uint64_t v4 = 3LL;
LABEL_3:
    [v3 advanceToNextState:v4];
    return;
  }

  id v5 = v2;
  id v6 = *(void **)(a1 + 32);
  if (v6) {
    BOOL v7 = v5 == (id)1;
  }
  else {
    BOOL v7 = 0;
  }
  if (v7 && ([v6 hasValidCredentials] & 1) != 0)
  {
    unsigned int v8 = [*(id *)(*(void *)(a1 + 48) + 184) isEndToEndEncrypted];
    unsigned __int8 v9 = [*(id *)(a1 + 32) deviceToDeviceEncryptionAvailability];
    if (!v8)
    {
      *(_BYTE *)(*(void *)(a1 + 48) + 200LL) = v9 & 1;
      uint64_t v3 = *(void **)(a1 + 48);
      uint64_t v4 = 5LL;
      goto LABEL_3;
    }

    *(_BYTE *)(*(void *)(a1 + 48) + 200LL) = (v9 & 1) == 0LL;
    unsigned __int8 v10 = [*(id *)(a1 + 32) deviceToDeviceEncryptionAvailability];
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    unsigned int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    if ((v10 & 2) != 0)
    {
      if (v13)
      {
        __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 184) logDescription]);
        *(_DWORD *)id buf = 138543362;
        BOOL v21 = v18;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] secure sync is possible now",  buf,  0xCu);
      }

      [*(id *)(a1 + 48) advanceToNextState:5];
    }

    else
    {
      if (v13)
      {
        int v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 184) logDescription]);
        __int16 v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInt:]( &OBJC_CLASS___NSNumber,  "numberWithInt:",  *(_BYTE *)(*(void *)(a1 + 48) + 200LL) == 0));
        *(_DWORD *)id buf = 138543618;
        BOOL v21 = v14;
        __int16 v22 = 2114;
        __int128 v23 = v15;
        _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] secure sync is not possible now (supported by account:%{public}@)",  buf,  0x16u);
      }

      uint64_t v16 = *(void **)(a1 + 48);
      __int16 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 errorWithCode:-4005 description:@"Manatee not available now"]);
      [v16 advanceToNextState:3 withError:v17];
    }
  }

  else
  {
    id v19 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) errorWithCode:-4008 description:@"User has an invalid account state"]);
    objc_msgSend(*(id *)(a1 + 48), "setOperationError:");
    [*(id *)(a1 + 48) advanceToNextState:3];
  }

id sub_1000709A4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) finishDownloadOfCloudDataWithContents:*(void *)(a1 + 40) forReason:*(void *)(a1 + 48)];
}

id sub_1000709D4(uint64_t a1)
{
  return _[*(id *)(a1 + 32) finishDownloadOfCloudDataWithContents:*(void *)(a1 + 40) forReason:*(void *)(a1 + 48)];
}

void sub_100071074(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = *(void **)(*(void *)(a1 + 32) + 184LL);
    id v9 = a3;
    unsigned __int8 v10 = (void *)objc_claimAutoreleasedReturnValue([v8 logDescription]);
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));

    int v12 = 138543874;
    BOOL v13 = v10;
    __int16 v14 = 2114;
    __int16 v15 = v11;
    __int16 v16 = 2114;
    id v17 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] did process pending changes:%{public}@ after graceful abort %{public}@",  (uint8_t *)&v12,  0x20u);
  }
}

void sub_100071310(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (![*(id *)(a1 + 32) didEncounterChangeTokenExpiredError:v6])
  {
    [*(id *)(a1 + 32) moveItemsFromResponse:v5 duringDeltaSync:1 orError:v6 toContents:*(void *)(a1 + 48)];
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v12)
      {
        BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
        int v16 = 138543362;
        id v17 = v13;
        __int16 v14 = "[PDPassCloudStore(%{public}@)] error downloading records (delta-sync)";
LABEL_10:
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&v16, 0xCu);
      }
    }

    else if (v12)
    {
      BOOL v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
      int v16 = 138543362;
      id v17 = v13;
      __int16 v14 = "[PDPassCloudStore(%{public}@)] did download records (delta-sync)";
      goto LABEL_10;
    }

    (*(void (**)(void, uint64_t))(*(void *)(a1 + 56) + 16LL))(*(void *)(a1 + 56), v15);
    goto LABEL_12;
  }

  uint64_t v7 = PKLogFacilityTypeGetObject(9LL);
  unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
    int v16 = 138543362;
    id v17 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] can't download records with expired token (delta-sync)",  (uint8_t *)&v16,  0xCu);
  }

  [*(id *)(a1 + 32) doFullSyncOfZone:*(void *)(a1 + 40) andFill:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
LABEL_12:
}

void sub_100071704(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  unsigned int v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
    *(_DWORD *)id buf = 138543362;
    int v16 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] did download record batch (full-sync)",  buf,  0xCu);
  }

  unsigned __int8 v10 = objc_alloc_init(&OBJC_CLASS___PDPassCloudStoreContainerContent);
  [*(id *)(a1 + 32) moveItemsFromResponse:v5 duringDeltaSync:0 orError:0 toContents:v10];
  [*(id *)(a1 + 32) moveItemsFromBatchContents:v10 toFinalContents:*(void *)(a1 + 40)];
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localStore]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100071890;
  v13[3] = &unk_100639688;
  id v14 = v6;
  id v12 = v6;
  [v11 saveRemoteDataFromContainer:v10 completion:v13];
}

uint64_t sub_100071890(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10007189C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (a3)
  {
    if (v7)
    {
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
      int v12 = 138543362;
      BOOL v13 = v8;
      id v9 = "[PDPassCloudStore(%{public}@)] error downloading records (full-sync)";
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v12, 0xCu);
    }
  }

  else if (v7)
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
    int v12 = 138543362;
    BOOL v13 = v8;
    id v9 = "[PDPassCloudStore(%{public}@)] did download all records (full-sync)";
    goto LABEL_6;
  }

  return (*(uint64_t (**)(void, uint64_t))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v10);
}

void sub_100071E34(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
    *(_DWORD *)id buf = 138543362;
    BOOL v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] did upload local data after download (full-sync)",  buf,  0xCu);
  }

  unsigned int v8 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100071F5C;
  v10[3] = &unk_1006392B0;
  void v10[4] = v8;
  id v11 = v4;
  id v9 = v4;
  [v8 onWorkQueue:v10];
}

id sub_100071F5C(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localStore]);
  [v2 didFinishSync:*(void *)(a1 + 40)];

  return _[*(id *)(a1 + 32) retryExecutingAnyDroppedDownload];
}

void sub_100071F98(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
    *(_DWORD *)id buf = 138543874;
    uint64_t v15 = v8;
    __int16 v16 = 2114;
    id v17 = v9;
    __int16 v18 = 2114;
    id v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] did process pending changes:%{public}@ after download (delta-sync) %{public}@",  buf,  0x20u);
  }

  uint64_t v10 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000720FC;
  void v12[3] = &unk_1006392B0;
  void v12[4] = v10;
  id v13 = v5;
  id v11 = v5;
  [v10 onWorkQueue:v12];
}

id sub_1000720FC(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localStore]);
  [v2 didFinishSync:*(void *)(a1 + 40)];

  return _[*(id *)(a1 + 32) retryExecutingAnyDroppedDownload];
}

void sub_1000723AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
    *(_DWORD *)id buf = 138543362;
    id v13 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] did upload local data after download (full-sync)",  buf,  0xCu);
  }

  unsigned int v8 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000724D4;
  v10[3] = &unk_1006392B0;
  void v10[4] = v8;
  id v11 = v4;
  id v9 = v4;
  [v8 onWorkQueue:v10];
}

id sub_1000724D4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localStore]);
  [v2 didFinishSync:*(void *)(a1 + 40)];

  return _[*(id *)(a1 + 32) retryExecutingAnyDroppedDownload];
}

void sub_100072520(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  BOOL v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](&OBJC_CLASS___NSNumber, "numberWithBool:", a2));
    *(_DWORD *)id buf = 138543874;
    uint64_t v15 = v8;
    __int16 v16 = 2114;
    id v17 = v9;
    __int16 v18 = 2114;
    id v19 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] did process pending changes: %{public}@ after download (delta-sync) %{public}@",  buf,  0x20u);
  }

  uint64_t v10 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100072684;
  void v12[3] = &unk_1006392B0;
  void v12[4] = v10;
  id v13 = v5;
  id v11 = v5;
  [v10 onWorkQueue:v12];
}

id sub_100072684(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localStore]);
  [v2 didFinishSync:*(void *)(a1 + 40)];

  return _[*(id *)(a1 + 32) retryExecutingAnyDroppedDownload];
}

void sub_100072E08(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(v2 + 203);
  *(_BYTE *)(v2 + 203) = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 216LL));
  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
      int v7 = 138543362;
      unsigned int v8 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] will retry a dropped download",  (uint8_t *)&v7,  0xCu);
    }

    [*(id *)(a1 + 32) synchronizeWithReason:3];
  }

void sub_100073278(id *a1)
{
  uint64_t v2 = (id *)a1[4];
  if (*((_BYTE *)v2 + 200))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v2[23] logDescription]);
      *(_DWORD *)id buf = 138543362;
      BOOL v21 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] won't upload passes because container is readonly",  buf,  0xCu);
    }

    id v6 = a1[6];
    if (v6)
    {
      uint64_t v7 = 206LL;
LABEL_6:
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDPassContainerErrorDomain",  v7,  0LL));
      (*((void (**)(id, void, void, void *))v6 + 2))(v6, 0LL, 0LL, v8);
LABEL_10:
    }
  }

  else if ([a1[5] count])
  {
    if ([a1[4] ensureSyncPreconditionsAreMet])
    {
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[5], "pk_arrayByApplyingBlock:", &stru_10063DBC8));
      id v9 = a1[4];
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v8));
      uint64_t v11 = PKCloudStoreOperationGroupUserActionExplicit;
      uint64_t v12 = PKCloudStoreOperationGroupSuffixCopyRecords;
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      id v18[2] = sub_1000735BC;
      v18[3] = &unk_10063DBF0;
      id v19 = a1[6];
      [v9 updateCloudStoreWithLocalItemsWithConfigurations:v10 groupName:v11 groupNameSuffix:v12 qualityOfService:17 completion:v18];

      goto LABEL_10;
    }

    uint64_t v14 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*((id *)a1[4] + 23) logDescription]);
      *(_DWORD *)id buf = 138543362;
      BOOL v21 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] not ready for passes update (precondition)",  buf,  0xCu);
    }

    id v6 = a1[6];
    if (v6)
    {
      uint64_t v7 = 205LL;
      goto LABEL_6;
    }
  }

  else
  {
    id v13 = a1[6];
    if (v13)
    {
      id v17 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDPassContainerErrorDomain",  201LL,  0LL));
      (*((void (**)(id, void, void))v13 + 2))(v13, 0LL, 0LL);
    }
  }

PKCloudStoreUploadItemConfiguration *__cdecl sub_100073578(id a1, PKPass *a2)
{
  uint64_t v2 = a2;
  int v3 = -[PKCloudStoreUploadItemConfiguration initWithItem:]( objc_alloc(&OBJC_CLASS___PKCloudStoreUploadItemConfiguration),  "initWithItem:",  v2);

  return v3;
}

uint64_t sub_1000735BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_100073678(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(_BYTE *)(v2 + 200))
  {
    unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
    id v7 = (id)objc_claimAutoreleasedReturnValue([v8 databaseForScope:2]);

    if (!v7)
    {
      uint64_t v15 = *(void *)(a1 + 48);
      if (v15)
      {
        __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDPassContainerErrorDomain",  204LL,  0LL));
        (*(void (**)(uint64_t, void, void *))(v15 + 16))(v15, 0LL, v16);
      }

      goto LABEL_20;
    }

    __int128 v23 = _NSConcreteStackBlock;
    uint64_t v24 = 3221225472LL;
    __int128 v25 = sub_100073A10;
    __int128 v26 = &unk_10063DC18;
    id v9 = *(void **)(a1 + 40);
    uint64_t v27 = *(void *)(a1 + 32);
    id v7 = v7;
    id v28 = v7;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "pk_arrayByApplyingBlock:", &v23));
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "pk_objectsPassingTest:", &stru_10063DC58, v23, v24, v25, v26, v27));

    if ([v11 count])
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v7 identifier]);
      id v29 = v12;
      id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v11));
      uint64_t v30 = v13;
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v30,  &v29,  1LL));

      if ([*(id *)(a1 + 32) ensureSyncPreconditionsAreMet])
      {
        [*(id *)(a1 + 32) performDeletes:v14 completion:*(void *)(a1 + 48)];
      }

      else
      {
        uint64_t Object = PKLogFacilityTypeGetObject(9LL);
        id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
          *(_DWORD *)id buf = 138543362;
          id v32 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] not ready for pass removal (preconditon)",  buf,  0xCu);
        }

        uint64_t v21 = *(void *)(a1 + 48);
        if (v21)
        {
          __int16 v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDPassContainerErrorDomain",  205LL,  0LL));
          (*(void (**)(uint64_t, void, void *))(v21 + 16))(v21, 0LL, v22);
        }
      }
    }

    else
    {
      uint64_t v17 = *(void *)(a1 + 48);
      if (!v17)
      {
LABEL_19:

        goto LABEL_20;
      }

      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDPassContainerErrorDomain",  202LL,  0LL));
      (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0LL, v14);
    }

    goto LABEL_19;
  }

  uint64_t v3 = PKLogFacilityTypeGetObject(9LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 184) logDescription]);
    *(_DWORD *)id buf = 138543362;
    id v32 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] won't delete passes because container is readonly",  buf,  0xCu);
  }

  uint64_t v6 = *(void *)(a1 + 48);
  if (v6)
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDPassContainerErrorDomain",  206LL,  0LL));
    (*(void (**)(uint64_t, void, id))(v6 + 16))(v6, 0LL, v7);
LABEL_20:
  }

id sub_100073A10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) cloudPassIDForLocalUniqueID:a2 inDatabase:*(void *)(a1 + 40)]);
  uint64_t v3 = v2;
  if (v2) {
    id v4 = v2;
  }
  else {
    id v4 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  id v5 = v4;

  return v5;
}

BOOL sub_100073A68(id a1, id a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));

  return v5 != v4;
}

void sub_100073D9C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v11 = a5;
  id v7 = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100073E78;
  void v12[3] = &unk_10063A468;
  unsigned int v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v13 = v8;
  [v7 enumerateKeysAndObjectsUsingBlock:v12];

  id v9 = -[NSMutableArray count](v8, "count");
  if (v11 && !v9)
  {

    unsigned int v8 = 0LL;
  }

  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(uint64_t, NSMutableArray *, id))(v10 + 16))(v10, v8, v11);
  }
}

void sub_100073E78(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      unsigned int v8 = 0LL;
      do
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v11 + 1) + 8 * (void)v8) recordName]);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[PKPass uniqueIDFromRecordName:](&OBJC_CLASS___PKPass, "uniqueIDFromRecordName:", v9));

        if (v10) {
          [*(id *)(a1 + 32) addObject:v10];
        }

        unsigned int v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v6);
  }
}

void sub_100074054(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_BYTE *)(v2 + 200))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 184) logDescription]);
      *(_DWORD *)id buf = 138543362;
      __int16 v22 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] won't update cloud catalog because container is readonly",  buf,  0xCu);
    }

    uint64_t v6 = *(void *)(a1 + 48);
    if (v6)
    {
      uint64_t v7 = (PKCloudStoreUploadItemConfiguration *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDPassContainerErrorDomain",  206LL,  0LL));
      (*(void (**)(uint64_t, void, PKCloudStoreUploadItemConfiguration *))(v6 + 16))(v6, 0LL, v7);
      goto LABEL_16;
    }
  }

  else
  {
    if (*(void *)(a1 + 40))
    {
      uint64_t v7 = -[PKCloudStoreUploadItemConfiguration initWithItem:]( objc_alloc(&OBJC_CLASS___PKCloudStoreUploadItemConfiguration),  "initWithItem:",  *(void *)(a1 + 40));
      if ([*(id *)(a1 + 32) ensureSyncPreconditionsAreMet])
      {
        unsigned int v8 = *(void **)(a1 + 32);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v7));
        uint64_t v10 = PKCloudStoreOperationGroupUserActionExplicit;
        uint64_t v11 = PKCloudStoreOperationGroupSuffixCatalogUpdated;
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472LL;
        v19[2] = sub_10007436C;
        v19[3] = &unk_10063DBF0;
        id v20 = *(id *)(a1 + 48);
        [v8 updateCloudStoreWithLocalItemsWithConfigurations:v9 groupName:v10 groupNameSuffix:v11 qualityOfService:17 completion:v19];

        __int128 v12 = v20;
      }

      else
      {
        uint64_t v14 = PKLogFacilityTypeGetObject(9LL);
        uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
          *(_DWORD *)id buf = 138543362;
          __int16 v22 = v16;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "[PDPassCloudStore(%{public}@)] not ready for cataog update (preconditon)",  buf,  0xCu);
        }

        uint64_t v17 = *(void *)(a1 + 48);
        if (!v17) {
          goto LABEL_16;
        }
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDPassContainerErrorDomain",  205LL,  0LL));
        (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0LL, v12);
      }

LABEL_16:
      return;
    }

    uint64_t v13 = *(void *)(a1 + 48);
    if (v13)
    {
      id v18 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  @"PDPassContainerErrorDomain",  203LL,  0LL));
      (*(void (**)(uint64_t, void))(v13 + 16))(v13, 0LL);
    }
  }

void sub_10007436C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    id v6 = a4;
    id v7 = (id)objc_claimAutoreleasedReturnValue([a2 firstObject]);
    (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v7, v6);
  }

void sub_100074438(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 208);
  *(void *)(v2 + 20_Block_object_dispose(va, 8) = 0LL;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 216LL));
  id v4 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 184) stringPrefixedWithContainerName:@"PDPassSyncCloudStoreContainerLastDownloadDateKey"]);
  PKSharedCacheRemoveObjectForKey(v4);
}

void sub_100074734(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000747DC;
  v10[3] = &unk_100639350;
  void v10[4] = v7;
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  [v7 onWorkQueue:v10];
}

void sub_1000747DC(uint64_t a1)
{
  if (([*(id *)(a1 + 32) accountChangedNotificationReceived] & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
      int v30 = 138543362;
      __int128 v31 = v10;
      id v11 = "[PDPassCloudStore(%{public}@)] Old CKAccountChangedNotification handler called";
LABEL_39:
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v30, 0xCu);
    }

LABEL_44:
    return;
  }

  [*(id *)(a1 + 32) setAccountChangedNotificationReceived:0];
  id v2 = [*(id *)(a1 + 32) nextExpectedState];
  if (v2 != (id)1 && v2 != (id)15)
  {
    uint64_t v12 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_44;
    }
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 184) logDescription]);
    int v30 = 138543362;
    __int128 v31 = v10;
    id v11 = "[PDPassCloudStore(%{public}@)] CKAccountChangedNotification received during state change";
    goto LABEL_39;
  }

  id v4 = v2;
  id v5 = *(void **)(a1 + 40);
  if (v5)
  {
    if ([v5 accountStatus] == (id)1)
    {
      unsigned int v6 = [*(id *)(a1 + 40) hasValidCredentials];
      int v7 = v6 ^ 1;
      if (v4 == (id)1 && v6 && (sub_10006F728() & 1) != 0)
      {
        int v8 = 1;
LABEL_24:
        unsigned __int8 v18 = [*(id *)(a1 + 40) deviceToDeviceEncryptionAvailability];
        if ((v18 & 1) != 0) {
          unint64_t v19 = ((unint64_t)[*(id *)(a1 + 40) deviceToDeviceEncryptionAvailability] >> 1) & 1;
        }
        else {
          LODWORD(v19) = 0;
        }
        unsigned int v20 = [*(id *)(*(void *)(a1 + 32) + 184) isEndToEndEncrypted];
        uint64_t v21 = *(void *)(a1 + 32);
        BOOL v22 = *(_BYTE *)(v21 + 200) != 0;
        if ((v18 & 1) != 0) {
          BOOL v22 = *(_BYTE *)(v21 + 200) == 0;
        }
        BOOL v23 = *(_BYTE *)(v21 + 200) == 0;
        if ((_DWORD)v19) {
          BOOL v23 = *(_BYTE *)(v21 + 200) != 0;
        }
        if (!v20) {
          BOOL v23 = v22;
        }
        if (v8)
        {
          uint64_t v24 = PKLogFacilityTypeGetObject(9LL);
          uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v24);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v21 + 184) logDescription]);
            int v30 = 138543362;
            __int128 v31 = v25;
            __int128 v26 = "[PDPassCloudStore(%{public}@)] account availabilty changed";
LABEL_42:
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v26, (uint8_t *)&v30, 0xCu);

            goto LABEL_43;
          }

          goto LABEL_43;
        }

        char v27 = v7 | !v23;
        uint64_t v28 = PKLogFacilityTypeGetObject(9LL);
        uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
        BOOL v29 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
        if ((v27 & 1) == 0)
        {
          if (v29)
          {
            __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v21 + 184) logDescription]);
            int v30 = 138543362;
            __int128 v31 = v25;
            __int128 v26 = "[PDPassCloudStore(%{public}@)] secure sync availabilty changed";
            goto LABEL_42;
          }

        goto LABEL_45;
      }

      if (v45)
      {
        *(_DWORD *)id buf = 138412290;
        *(void *)uint64_t v206 = v163;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Could Not Match Transaction on Payment Hash: %@",  buf,  0xCu);
      }

      PKAnalyticsSendEvent(PKAggDKeyPaymentTransactionIdentifierMatchFailed, 0LL);
    }

    BOOL v22 = 0LL;
LABEL_45:
    if (a7 >= 2)
    {
      if (a7 == 2)
      {
        if (v22)
        {
          __int128 v59 = (void *)objc_claimAutoreleasedReturnValue([v22 identifier]);
          v154 = (void *)objc_claimAutoreleasedReturnValue([v22 serviceIdentifier]);
          v166 = v22;
          __int128 v60 = (void *)objc_claimAutoreleasedReturnValue([v22 paymentTransaction]);
          delegateQueue = self->_delegateQueue;
          v180[0] = _NSConcreteStackBlock;
          v180[1] = 3221225472LL;
          v180[2] = sub_100129B94;
          v180[3] = &unk_100639350;
          v180[4] = self;
          __int128 v62 = v15;
          v181 = v62;
          __int128 v50 = v60;
          v182 = v50;
          dispatch_async((dispatch_queue_t)delegateQueue, v180);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id buf = 138543618;
            *(void *)uint64_t v206 = v59;
            *(_WORD *)&v206[8] = 2114;
            *(void *)&v206[10] = v154;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Removing Existing Transaction with Identifier: %{public}@, serviceIdentifier: %{public}@",  buf,  0x16u);
          }

          [v166 deleteFromDatabase];
          if ((v158 & 1) == 0)
          {
            id WeakRetained = objc_loadWeakRetained((id *)&self->_cloudStoreCoordinator);
            __int128 v64 = (void *)objc_claimAutoreleasedReturnValue([WeakRetained applePayContainer]);
            v176[0] = _NSConcreteStackBlock;
            v176[1] = 3221225472LL;
            v176[2] = sub_100129BD4;
            v176[3] = &unk_10063ADE8;
            v176[4] = self;
            uint64_t v177 = v50;
            v178 = v154;
            v179 = v62;
            [v64 canSyncTransactionFromCloudKitForTransactionSourceIdentifier:v179 completion:v176];
          }

          __int128 v65 = self->_delegateQueue;
          v173[0] = _NSConcreteStackBlock;
          v173[1] = 3221225472LL;
          v173[2] = sub_100129CD8;
          v173[3] = &unk_100639350;
          v173[4] = self;
          uint64_t v174 = v62;
          uint64_t v175 = v59;
          __int128 v66 = v59;
          dispatch_async((dispatch_queue_t)v65, v173);

          BOOL v22 = 0LL;
          BOOL v23 = 0LL;
          __int16 v16 = v159;
          unsigned int v20 = v170;
          goto LABEL_175;
        }

        v166 = 0LL;
      }

      else
      {
        if (a7 == 3)
        {
          if (!v22)
          {
            __int128 v46 = (void *)objc_claimAutoreleasedReturnValue([v14 merchant]);
            __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v46 name]);

            v154 = v47;
            __int128 v48 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction closestPendingTransactionInDatabase:fromTransactionDate:withNotificationServiceData:forMerchantName:forTransactionSourceIdentifiers:]( &OBJC_CLASS___PaymentTransaction,  "closestPendingTransactionInDatabase:fromTransactionDate:withNotificationServiceData:forMer chantName:forTransactionSourceIdentifiers:",  self->_database,  v160,  1LL,  v47,  v162));
            BOOL v22 = v48;
            if (!v48)
            {
              v166 = 0LL;
              BOOL v23 = 0LL;
              __int16 v16 = v159;
              goto LABEL_176;
            }

            __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([v48 identifier]);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)id buf = 138543362;
              *(void *)uint64_t v206 = v49;
              _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Soft-Matched Transaction to Transaction with Identifier: %{public}@",  buf,  0xCu);
            }
          }

          v154 = (void *)objc_claimAutoreleasedReturnValue([v22 identifier]);
          __int128 v50 = (id)objc_claimAutoreleasedReturnValue([v22 paymentTransaction]);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id buf = 138543618;
            *(void *)uint64_t v206 = v154;
            *(_WORD *)&v206[8] = 2112;
            *(void *)&v206[10] = v14;
            _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Replacing Existing Transaction with Identifier: %{public}@ with Transaction: %@",  buf,  0x16u);
          }

          [v22 replaceWithPaymentTransaction:v14];
          BOOL v23 = (id)objc_claimAutoreleasedReturnValue([v22 paymentTransaction]);
          [v23 addUpdateReasons:v152];
          v166 = v22;
          if (v23)
          {
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)id buf = 138543618;
              *(void *)uint64_t v206 = v154;
              *(_WORD *)&v206[8] = 2112;
              *(void *)&v206[10] = v23;
              _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Resulting Transaction with identifier %{public}@: %@",  buf,  0x16u);
            }

            if ((v158 & 1) == 0 && ([v23 updateReasonIsInitialDownload] & 1) == 0)
            {
              v203 = v23;
              __int128 v51 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v203,  1LL));
              -[PDDatabaseManager _updateCloudStoreWithTransactions:transactionSourceIdentifier:]( self,  "_updateCloudStoreWithTransactions:transactionSourceIdentifier:",  v51,  v15);
            }

            id v52 = self->_delegateQueue;
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_100129B50;
            block[3] = &unk_10063B060;
            void block[4] = self;
            v184 = v15;
            BOOL v23 = v23;
            v185 = v23;
            __int128 v50 = v50;
            v186 = v50;
            dispatch_async((dispatch_queue_t)v52, block);
          }

          BOOL v22 = 0LL;
          goto LABEL_174;
        }

        v166 = v22;
        BOOL v22 = 0LL;
      }

      BOOL v23 = 0LL;
      __int16 v16 = v159;
      __int128 v74 = v163;
      int v75 = v161;
LABEL_177:

      goto LABEL_178;
    }

    if (v22)
    {
      LODWORD(v53) = 0;
      goto LABEL_65;
    }

    if (![v14 supportsFuzzyMatching])
    {
LABEL_197:
      if (a7 == 1)
      {
        v142 = 0;
        v146 = 0LL;
        __int128 v50 = 0LL;
        int v100 = 0LL;
        v97 = 0LL;
        unsigned int v20 = v170;
        goto LABEL_151;
      }

      v144 = 1;
      if (v165) {
        __int128 v118 = 1LL;
      }
      else {
        __int128 v118 = 2LL;
      }
      v168 = v118;
      __int128 v119 = objc_claimAutoreleasedReturnValue( +[Pass anyInDatabase:withUniqueID:]( &OBJC_CLASS___Pass,  "anyInDatabase:withUniqueID:",  self->_database,  v161));
      __int128 v120 = objc_claimAutoreleasedReturnValue( -[PDDatabaseManager paymentApplicationIdentifierForTransactionSourceIdentifier:]( self,  "paymentApplicationIdentifierForTransactionSourceIdentifier:",  v15));
      database = self->_database;
      __int128 v122 = (void *)objc_claimAutoreleasedReturnValue(-[PKSecureElement secureElementIdentifiers](self->_secureElement, "secureElementIdentifiers"));
      __int128 v123 = database;
      v99 = (id)v119;
      v141 = (void *)v120;
      __int128 v124 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentApplication anyInDatabase:withApplicationIdentifier:secureElementIdentifiers:]( &OBJC_CLASS___PaymentApplication,  "anyInDatabase:withApplicationIdentifier:secureElementIdentifiers:",  v123,  v120,  v122));

      v138 = v124;
      __int128 v125 = [v124 paymentNetworkIdentifier];
      __int128 v126 = PKMaxPaymentTransactionsForCredentialType(v125);
      if ((PKDisableTransactionTableTruncation() & 1) == 0)
      {
        __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v99 associatedAccountIdentifier]);
        if (!v127)
        {
          v144 = 1;
          if ((PKTransactionsUnlimitedForCredentialType(v125) & 1) == 0 && v27 - 1 >= 3)
          {
            if (+[PaymentTransaction numberOfPaymentTransactionsInDatabase:forTransactionSourceIdentifiers:withNotificationServiceData:newerThanDate:]( &OBJC_CLASS___PaymentTransaction,  "numberOfPaymentTransactionsInDatabase:forTransactionSourceIdentifiers:withNotificationServiceData:newerThanDate:",  self->_database,  v162,  v168,  v160) >= v126)
            {
              v146 = 0LL;
              int v100 = 0LL;
              v97 = 0LL;
              unsigned int v20 = v170;
LABEL_224:

              v142 = 0;
              __int128 v50 = 0LL;
              uint64_t v101 = v141;
LABEL_150:

LABEL_151:
              v166 = v97;
              BOOL v23 = (id)objc_claimAutoreleasedReturnValue([v97 paymentTransaction]);
              [v23 addUpdateReasons:v152];
              v154 = v100;
              BOOL v22 = (void *)objc_claimAutoreleasedReturnValue([v100 transactionArchive]);
              if (!v22)
              {
                v102 = PKLogFacilityTypeGetObject(0LL);
                v103 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
                if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)id buf = 138543618;
                  *(void *)uint64_t v206 = v20;
                  *(_WORD *)&v206[8] = 2112;
                  *(void *)&v206[10] = v23;
                  _os_log_impl( (void *)&_mh_execute_header,  v103,  OS_LOG_TYPE_DEFAULT,  "Error: There is no transaction archive for transaction with identifier %{public}@ %@",  buf,  0x16u);
                }
              }

              if (v23)
              {
                if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)id buf = 138543874;
                  *(void *)uint64_t v206 = v20;
                  *(_WORD *)&v206[8] = 2112;
                  *(void *)&v206[10] = v23;
                  v207 = 2112;
                  *(void *)v208 = v22;
                  _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "resulting transaction for identifier %{public}@: %@ and archive: %@",  buf,  0x20u);
                }

                if ((v142 | [v23 updateReasonIsInitialDownload] ^ 1) == 1)
                {
                  id v104 = [v23 hasCloudArchivableDeviceData];
                  uint64_t v105 = [v50 isCloudArchivableDeviceDataEqual:v23] ^ 1;
                  v143 = [v146 allArchiveLocationsWithType:0 areArchived:1];
                  v140 = [v22 allArchiveLocationsWithType:0 areArchived:1];
                  id v106 = [v23 updateReasonIsInitialDownload];
                  v150 = v104;
                  if ((v106 & 1) != 0)
                  {
                    v107 = 0;
                  }

                  else
                  {
                    if (v50) {
                      id v108 = v105;
                    }
                    else {
                      id v108 = 1;
                    }
                    if ((v104 & ~v158) == 1 && (v108 & 1) != 0) {
                      v107 = 1;
                    }
                    else {
                      v107 = v158 & (v143 & v140 ^ 1);
                    }
                  }

                  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)id buf = 138545922;
                    *(void *)uint64_t v206 = v170;
                    *(_WORD *)&v206[8] = 2114;
                    *(void *)&v206[10] = v171;
                    v207 = 1024;
                    *(_DWORD *)v208 = v107;
                    *(_WORD *)&v208[4] = 1024;
                    *(_DWORD *)&v208[6] = v50 != 0LL;
                    LOWORD(v209) = 1024;
                    *(_DWORD *)((char *)&v209 + 2) = v150;
                    HIWORD(v209) = 1024;
                    v210 = v105;
                    v211 = 1024;
                    v212 = v143;
                    BOOL v213 = 1024;
                    int v214 = v140;
                    v215 = 1024;
                    v216 = v143 & v140;
                    v217 = 1024;
                    v218 = v158;
                    v219 = 1024;
                    v220 = v106;
                    _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "should update cloud store for id %{public}@ service id %{public}@: %d (%d, %d, %d, %d, %d, %d, %d, %d)",  buf,  0x4Cu);
                  }

                  unsigned int v20 = v170;
                  if (v107)
                  {
                    v204 = v23;
                    v109 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v204,  1LL));
                    -[PDDatabaseManager _updateCloudStoreWithTransactions:transactionSourceIdentifier:]( self,  "_updateCloudStoreWithTransactions:transactionSourceIdentifier:",  v109,  v15);
                  }
                }

                v110 = self->_delegateQueue;
                v187[0] = _NSConcreteStackBlock;
                v187[1] = 3221225472LL;
                v187[2] = sub_100129B0C;
                v187[3] = &unk_10063B060;
                v187[4] = self;
                v188 = v15;
                v189 = v23;
                v190 = v50;
                dispatch_async((dispatch_queue_t)v110, v187);
              }

LABEL_174:
              __int16 v16 = v159;
LABEL_175:

LABEL_176:
              __int128 v74 = v163;
              int v75 = v161;

              goto LABEL_177;
            }

            v144 = 0;
          }

          __int128 v31 = 0LL;
          uint64_t v10 = v67;
          goto LABEL_52;
        }

        __int128 v50 = @"ACCOUNT_SERVICE_PAYMENT_SCHEDULED_NOTIFICATION_MINIMUM_PAYMENT_7_DAYS_BODY_FORMAT";
        __int128 v51 = @"ACCOUNT_SERVICE_PAYMENT_SCHEDULED_NOTIFICATION_REMAINING_MINIMUM_PAYMENT_7_DAYS_BODY_FORMAT";
        goto LABEL_47;
      }

      goto LABEL_36;
    }

    uint64_t v24 = v23 == v19;
    if (v23)
    {
      __int128 v62 = self;
      __int128 v64 = v14;
      __int128 v25 = v13;
      goto LABEL_30;
    }

  v110 = (void *)objc_claimAutoreleasedReturnValue(-[PDDatabaseManager rewardsValuesForUnit:](v138->_databaseManager, "rewardsValuesForUnit:", 1LL));
  v111 = (void *)objc_claimAutoreleasedReturnValue([v110 allObjects]);
  v112 = (void *)objc_claimAutoreleasedReturnValue([v111 sortedArrayUsingComparator:&stru_10064ED88]);

  v141 = 0u;
  v142 = 0u;
  v139 = 0u;
  v140 = 0u;
  obuint64_t j = v112;
  v113 = [obj countByEnumeratingWithState:&v139 objects:v143 count:16];
  if (v113)
  {
    v114 = v113;
    id v115 = *(void *)v140;
    do
    {
      __int128 v116 = 0LL;
      __int128 v117 = v58;
      do
      {
        if (*(void *)v140 != v115) {
          objc_enumerationMutation(obj);
        }
        __int128 v118 = *(void *)(*((void *)&v139 + 1) + 8LL * (void)v116);
        __int128 v58 = objc_alloc_init(&OBJC_CLASS___PDSearchServiceInvertedIndexEntry);

        -[PDSearchServiceInvertedIndexEntry setType:](v58, "setType:", 8LL);
        -[PDSearchServiceInvertedIndexEntry setRewardsValue:](v58, "setRewardsValue:", v118);
        -[PDSearchServiceInvertedIndexEntry setRewardsValueUnit:](v58, "setRewardsValueUnit:", 1LL);
        __int128 v119 = PKFormattedStringMinimalFractionDigitsFromNumber(v118, 0LL);
        __int128 v126 = (void *)objc_claimAutoreleasedReturnValue(v119);
        __int128 v120 = PKLocalizedFeatureString( @"PAYMENT_TRANSACTION_DETAILS_PERCENT_CASH_BACK_FORMAT",  2LL,  @"%@%%");
        __int128 v121 = (void *)objc_claimAutoreleasedReturnValue(v120);

        __int128 v122 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v121,  "stringByReplacingOccurrencesOfString:withString:",  @" ",  @" ",  v126));
        -[PDSearchService _addWord:forEntry:](v138, "_addWord:forEntry:", v122, v58);
        __int128 v123 = PKLocalizedFeatureString(@"TRANSACTION_REWARDS_CASH_BACK", 2LL);
        __int128 v124 = (void *)objc_claimAutoreleasedReturnValue(v123);
        __int128 v125 = (void *)objc_claimAutoreleasedReturnValue([v124 stringByReplacingOccurrencesOfString:@" " withString:@" "]);
        -[PDSearchService _addWord:forEntry:](v138, "_addWord:forEntry:", v125, v58);

        __int128 v116 = (char *)v116 + 1;
        __int128 v117 = v58;
      }

      while (v114 != v116);
      v114 = [obj countByEnumeratingWithState:&v139 objects:v143 count:16];
    }

    while (v114);
  }

  v132[2](v132);
}

id sub_100074C6C(id a1, PKCloudStoreUploadItemConfiguration *a2)
{
  id v2 = a2;
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(-[PKCloudStoreUploadItemConfiguration item](v2, "item"));
  if ([v3 itemType] == (id)3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[PKCatalog catalogWithLocalCatalog:ubiquitousCatalog:]( &OBJC_CLASS___PKCatalog,  "catalogWithLocalCatalog:ubiquitousCatalog:",  0LL,  v3));
    id v5 = -[PKCloudStoreUploadItemConfiguration initWithItem:]( objc_alloc(&OBJC_CLASS___PKCloudStoreUploadItemConfiguration),  "initWithItem:",  v4);
  }

  else
  {
    id v5 = v2;
  }

  return v5;
}

void sub_100075520(uint64_t a1)
{
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472LL;
  v2[2] = sub_100075590;
  v2[3] = &unk_10063DCE8;
  uint64_t v1 = *(void **)(a1 + 40);
  id v3 = *(id *)(a1 + 32);
  id v4 = v1;
  objc_msgSend(v3, "_queue_cloudStoreAccountInformationWithCompletion:", v2);
}

void sub_100075590(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = [v3 deviceToDeviceEncryptionAvailability];
  unsigned __int8 v5 = [v3 deviceToDeviceEncryptionAvailability];

  id v6 = objc_alloc(&OBJC_CLASS___PKCloudStoreContainerDiagnostics);
  id v7 = [*(id *)(a1 + 32) isSetup];
  int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) stateDescription]);
  id v9 = [*(id *)(a1 + 32) isWalletSyncEnabled];
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) syncTokenDescription]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) lastSyncDateDescription]);
  unsigned __int8 v12 = [*(id *)(a1 + 32) isDeltaSyncPossible];
  BOOL v13 = (v5 & 2) != 0 && *(_BYTE *)(*(void *)(a1 + 32) + 200LL) == 0;
  BYTE3(v14) = v13;
  LOBYTE(v14) = v12;
  BYTE2(v14) = (v5 & 2) != 0;
  BYTE1(v14) = v4 & 1;
  id v15 = objc_msgSend( v6,  "initWithIsEnabled:isSetup:status:isSyncEnabled:syncToken:lastSyncDate:didFinishInitialSync:isAccountManateeCap able:isDeviceManateeCapable:isManateeEnabled:",  1,  v7,  v8,  v9,  v10,  v11,  v14);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100075724(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 databaseForScope:2]);

  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerManager", 0));
  unsigned __int8 v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allPossibleZoneIDsInContainerDatabase:v3]);

  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    uint64_t v8 = *(void *)v14;
    do
    {
      id v9 = 0LL;
      do
      {
        if (*(void *)v14 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)v9);
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
        unsigned __int8 v12 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
        [v11 containerDatabaseIdentifier:v12 didUpdateChangeToken:0 fetchTimestamp:0 forZoneID:v10];

        id v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v7);
  }
}

void sub_1000758F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 208);
  *(void *)(v2 + 20_Block_object_dispose(va, 8) = 0LL;

  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 216LL));
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 184) stringPrefixedWithContainerName:@"PDPassSyncCloudStoreContainerLastDownloadDateKey"]);
  PKSharedCacheRemoveObjectForKey(v4);

  id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localStore]);
  [v5 resetMigration];
}

void sub_1000759E0(uint64_t a1)
{
  id v1 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) localStore]);
  [v1 clearChangeHistory];
}

id sub_100075A60(uint64_t a1)
{
  return [*(id *)(a1 + 32) processPendingChanges:0];
}

void sub_100075ABC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  id v6 = (id)objc_claimAutoreleasedReturnValue([v2 databaseForScope:2]);

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([v3 allPossibleZoneIDsInContainerDatabase:v6]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pk_setByApplyingBlock:", &stru_10063DD28));
  [*(id *)(a1 + 32) resetContainerWithZoneNames:v5 completion:&stru_10063DD48];
}

NSString *__cdecl sub_100075B68(id a1, CKRecordZoneID *a2)
{
  return -[CKRecordZoneID zoneName](a2, "zoneName");
}

void sub_100075DE0(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isSetup])
  {
    uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v3 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    id v14[2] = sub_100075F40;
    v14[3] = &unk_10063CB08;
    void v14[4] = *(void *)(a1 + 32);
    unsigned __int8 v4 = v2;
    __int128 v15 = v4;
    [v3 addOperation:v14];
    id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_100076098;
    v10[3] = &unk_10063DDD8;
    uint64_t v6 = *(void *)(a1 + 32);
    id v7 = *(void **)(a1 + 40);
    id v11 = v4;
    uint64_t v12 = v6;
    id v13 = v7;
    uint64_t v8 = v4;
    id v9 = [v3 evaluateWithInput:v5 completion:v10];
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
  }

void sub_100075F40(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100076000;
  void v12[3] = &unk_10063DDB0;
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v14 = v6;
  id v15 = v7;
  id v13 = v9;
  id v10 = v6;
  id v11 = v7;
  [v8 allItemsOfItemType:2 storeLocally:0 completion:v12];
}

uint64_t sub_100076000(uint64_t a1, void *a2, uint64_t a3)
{
  if (!a3)
  {
    unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([a2 allRecordNames]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 allObjects]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pk_arrayByApplyingBlock:", &stru_10063DD88));
    [*(id *)(a1 + 32) setObject:v6 forKeyedSubscript:PKCloudPassRecordType];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

NSString *__cdecl sub_100076088(id a1, NSString *a2)
{
  return (NSString *)+[PKPass uniqueIDFromRecordName:](&OBJC_CLASS___PKPass, "uniqueIDFromRecordName:", a2);
}

void sub_100076098(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS___PKCloudStoreContainerDiagnosticSnapshot);
  id v3 = [*(id *)(a1 + 32) copy];
  unsigned __int8 v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) localStore]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 localRecordIDs]);
  id v6 = [v2 initWithRecordIDs:v3 localRecordIDs:v5];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000764F0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a3 + 1;
  id v5 = a2;
  [v5 setPaymentNumber:v4];
  [v5 setPaymentCount:*(void *)(a1 + 32)];
}

void sub_100076904(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1000770A0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a3 + 1;
  id v5 = a2;
  [v5 setPaymentNumber:v4];
  [v5 setPaymentCount:*(void *)(a1 + 32)];
}

void sub_1000773D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___PKCreditInstallmentPlan);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v7 values:a4];

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) database]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  unsigned int v20 = (void *)objc_claimAutoreleasedReturnValue( +[CreditInstallmentPlanLineItem lineItemForInstallmentPlanPID:inDatabase:]( &OBJC_CLASS___CreditInstallmentPlanLineItem,  "lineItemForInstallmentPlanPID:inDatabase:",  v10,  v9));
  -[PKCreditInstallmentPlan setLineItems:](v8, "setLineItems:");
  id v11 = (void *)objc_claimAutoreleasedReturnValue( +[CreditInstallmentPlanPayment paymentsForInstallmentPlanPID:inDatabase:]( &OBJC_CLASS___CreditInstallmentPlanPayment,  "paymentsForInstallmentPlanPID:inDatabase:",  v10,  v9));
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSSortDescriptor sortDescriptorWithKey:ascending:]( &OBJC_CLASS___NSSortDescriptor,  "sortDescriptorWithKey:ascending:",  @"dueDate",  1LL));
  uint64_t v21 = v12;
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v21, 1LL));
  unint64_t v19 = v11;
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v11 sortedArrayUsingDescriptors:v13]);

  -[PKCreditInstallmentPlan setPayments:](v8, "setPayments:", v14);
  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[InstallmentPlanMerchant merchantForInstallmentPlanPID:inDatabase:]( &OBJC_CLASS___InstallmentPlanMerchant,  "merchantForInstallmentPlanPID:inDatabase:",  v10,  v9));
  -[PKCreditInstallmentPlan setMerchant:](v8, "setMerchant:", v15);
  __int128 v16 = (void *)objc_claimAutoreleasedReturnValue( +[CreditInstallmentPlanProduct productForInstallmentPlanPID:inDatabase:]( &OBJC_CLASS___CreditInstallmentPlanProduct,  "productForInstallmentPlanPID:inDatabase:",  v10,  v9));
  -[PKCreditInstallmentPlan setProduct:](v8, "setProduct:", v16);
  uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( +[InstallmentPlanSummary summaryForInstallmentPlanPID:inDatabase:]( &OBJC_CLASS___InstallmentPlanSummary,  "summaryForInstallmentPlanPID:inDatabase:",  v10,  v9));
  -[PKCreditInstallmentPlan setSummary:](v8, "setSummary:", v17);
  unsigned __int8 v18 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransactionReward rewardsInDatabase:forInstallmentPlanPID:]( &OBJC_CLASS___PaymentTransactionReward,  "rewardsInDatabase:forInstallmentPlanPID:",  v9,  v10));
  -[PKCreditInstallmentPlan setRewards:](v8, "setRewards:", v18);
  if (v8) {
    [*(id *)(a1 + 48) addObject:v8];
  }
}

void sub_100077A14(id a1, PKCreditInstallmentPlan *a2, id a3)
{
}

void sub_100077A1C(id a1, PKCreditInstallmentPlan *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditInstallmentPlan setState:](v4, "setState:", [a3 integerValue]);
}

void sub_100077A60(id a1, PKCreditInstallmentPlan *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditInstallmentPlan setLastUpdated:](v4, "setLastUpdated:", v5);
}

void sub_100077AAC(id a1, PKCreditInstallmentPlan *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKPercentageStorageIntegerToDecimal([a3 integerValue]);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditInstallmentPlan setApr:](v4, "setApr:", v6);
}

void sub_100077B00(id a1, PKCreditInstallmentPlan *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditInstallmentPlan setDuration:](v4, "setDuration:", [a3 unsignedIntegerValue]);
}

void sub_100077B44(id a1, PKCreditInstallmentPlan *a2, id a3)
{
}

void sub_100077B4C(id a1, PKCreditInstallmentPlan *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditInstallmentPlan setTotalAmount:](v4, "setTotalAmount:", v6);
}

void sub_100077B9C(id a1, PKCreditInstallmentPlan *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditInstallmentPlan setTotalProductAmount:](v4, "setTotalProductAmount:", v6);
}

void sub_100077BEC(id a1, PKCreditInstallmentPlan *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKCreditInstallmentPlan setTotalInterestAmount:](v4, "setTotalInterestAmount:", v6);
}

void sub_100077C3C(id a1, PKCreditInstallmentPlan *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditInstallmentPlan setPeriodType:](v4, "setPeriodType:", [a3 integerValue]);
}

void sub_100077C80(id a1, PKCreditInstallmentPlan *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKCreditInstallmentPlan setUserViewedIntroduction:](v4, "setUserViewedIntroduction:", [a3 BOOLValue]);
}

void sub_100077CC4(id a1, PKCreditInstallmentPlan *a2, id a3)
{
}

void sub_100077CCC(id a1, PKCreditInstallmentPlan *a2, id a3)
{
}

void sub_100077FF4(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = objc_autoreleasePoolPush();
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v7 pushToken]);
  unsigned __int8 v5 = [v4 isEqualToString:*(void *)(a1 + 32)];

  if ((v5 & 1) == 0)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 16) passesForNotificationService:v7]);
    [v7 setPushToken:*(void *)(a1 + 32)];
    [*(id *)(*(void *)(a1 + 40) + 16) updateNotificationService:v7];
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000780EC;
    v8[3] = &unk_10063E008;
    void v8[4] = *(void *)(a1 + 40);
    id v9 = v7;
    [v6 enumerateObjectsUsingBlock:v8];
  }

  objc_autoreleasePoolPop(v3);
}

void sub_1000780EC(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v3 = objc_autoreleasePoolPush();
  [*(id *)(a1 + 32) _updateRegistrationStatusForPass:v4 notificationService:*(void *)(a1 + 40) requestedRegistrationStatus:1 refreshRegistrationIfPossible:1];
  objc_autoreleasePoolPop(v3);
}

void sub_1000786AC(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (objc_msgSend(*(id *)(*(void *)(a1 + 32) + 16), "notificationServiceIsEnabledForAnyPasses:"))
  {
    id v3 = *(void **)(a1 + 40);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v5 pushTopic]);
    [v3 addObject:v4];
  }
}

id sub_100078CE0(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 64))
  {
    uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 88) objectForKey:*(void *)(a1 + 40)]);
    id v5 = (void *)v4;
    if (!a2 || v4)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = *(void *)(a1 + 56);
        int v16 = 138412546;
        uint64_t v17 = v14;
        __int16 v18 = 2112;
        unint64_t v19 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Failed to cancel auto top up for pass: %@, error: %@",  (uint8_t *)&v16,  0x16u);
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }

    else
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) identifiers]);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 anyObject]);

      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) balanceReminderThresholdForBalanceIdentifier:v7 withPassUniqueIdentifier:*(void *)(a1 + 56)]);
      if (v8)
      {
        uint64_t v9 = PKLogFacilityTypeGetObject(6LL);
        id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = *(void *)(a1 + 56);
          int v16 = 138412546;
          uint64_t v17 = v11;
          __int16 v18 = 2112;
          unint64_t v19 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Enable low balance reminder because auto top up is cancelled for pass: %@, balanceIdentifiers: %@",  (uint8_t *)&v16,  0x16u);
        }

        [v8 setEnabled:1];
        [*(id *)(*(void *)(a1 + 32) + 16) setBalanceReminder:v8 forBalanceIdentifier:v7 withPassUniqueIdentifier:*(void *)(a1 + 56)];
      }

      (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
    }
  }

  [*(id *)(*(void *)(a1 + 32) + 80) removeObjectForKey:*(void *)(a1 + 40)];
  return [*(id *)(*(void *)(a1 + 32) + 88) removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_100079528(id a1, NSError *a2, unint64_t a3, BOOL *a4)
{
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = PDErrorDescription(a2);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    int v9 = 138412290;
    id v10 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v9, 0xCu);
  }
}

BOOL sub_100079B14(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___PDNotificationServiceSpecificRegistrationTask, v4);
  BOOL v6 = (objc_opt_isKindOfClass(v3, v5) & 1) != 0
    && [v3 pertainsToNotificationService:*(void *)(a1 + 32) andDPANIdentifier:*(void *)(a1 + 40)]
    && [v3 requestedStatus] == (id)1;

  return v6;
}

LABEL_10:
}

    uint64_t v7 = 0;
LABEL_11:

    goto LABEL_12;
  }

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 value]);

  if (!v5)
  {
    uint64_t v12 = PKLogFacilityTypeGetObject(6LL);
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      id v10 = "Balance missing value";
      uint64_t v11 = buf;
      goto LABEL_9;
    }

    goto LABEL_10;
  }

  BOOL v6 = (void *)objc_claimAutoreleasedReturnValue([v3 lastUpdateDate]);

  if (!v6)
  {
    uint64_t v14 = PKLogFacilityTypeGetObject(6LL);
    id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v16 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Balance missing lastUpdate, synthesizing",  v16,  2u);
    }

    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v3 setLastUpdateDate:v9];
    uint64_t v7 = 1;
    goto LABEL_11;
  }

  uint64_t v7 = 1;
LABEL_12:

  return v7;
}

  objc_autoreleasePoolPop(v7);
}

  objc_autoreleasePoolPop(v7);
}

  return a1;
}
}

    [*(id *)(a1 + 32) setRequiresNonceValidityChecks:0];
    goto LABEL_11;
  }

  if ([v6 length])
  {
    [*(id *)(a1 + 40) setNonce:v7];
    goto LABEL_11;
  }

  if (!*(_BYTE *)(a1 + 80)) {
    goto LABEL_10;
  }
  int v9 = 0LL;
  uint64_t v8 = PKAddSecureElementPassErrorDomain;
LABEL_4:
  id v10 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v8,  4LL,  v9));
  uint64_t v11 = *(void *)(*(void *)(a1 + 72) + 8LL);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  if (v5) {
LABEL_11:
  }
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  (*(void (**)(void, void, BOOL))(*(void *)(a1 + 64) + 16LL))( *(void *)(a1 + 64),  *(void *)(a1 + 48),  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL) != 0LL);
}

  return v7;
}

  return v16;
}
}

  if (v18)
  {
    __int128 v26 = (void *)objc_claimAutoreleasedReturnValue( -[PDCloudStoreContainer _cannotPerformActionErrorWithFailureReason:]( self,  "_cannotPerformActionErrorWithFailureReason:",  v22));
    (*((void (**)(id, void, void *))v18 + 2))(v18, 0LL, v26);
LABEL_14:
  }
}
}
  }

  return v18;
}

    uint64_t v8 = 0;
    goto LABEL_11;
  }

  uint64_t v8 = 1;
LABEL_11:

  return v8;
}

      uint64_t v5 = 5LL;
      goto LABEL_11;
    }

    id v13 = objc_opt_class(&OBJC_CLASS___PDNotificationServiceGetUpdatesTask, v8);
    if ((objc_opt_isKindOfClass(v4, v13) & 1) == 0) {
      goto LABEL_10;
    }
    if ((id)-[PDNotificationServiceRegistrationTask requestedStatus](self, "requestedStatus") == (id)2) {
      uint64_t v5 = 1LL;
    }
    else {
      uint64_t v5 = 6LL;
    }
  }

    goto LABEL_11;
  }

  if (!v6 || !v7)
  {
    uint64_t v14 = PKLogFacilityTypeGetObject(6LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = 136315138;
      int v16 = "-[PDPaymentService recordPaymentApplicationUsageForPassUniqueIdentifier:paymentApplicationIdentifier:]";
      id v13 = "%s called with nil passUniqueIdentifier or nil paymentApplicationIdentifier";
      goto LABEL_9;
    }

    goto LABEL_10;
  }

  uint64_t v8 = objc_alloc(&OBJC_CLASS___PKPaymentApplicationUsageSummary);
  int v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
  id v10 = -[PKPaymentApplicationUsageSummary initWithPassUniqueIdentifier:paymentApplicationIdentifier:lastUsed:]( v8,  "initWithPassUniqueIdentifier:paymentApplicationIdentifier:lastUsed:",  v6,  v7,  v9);

  -[PDDatabaseManager insertPaymentApplicationUsageSummary:]( self->_databaseManager,  "insertPaymentApplicationUsageSummary:",  v10);
LABEL_11:
}
}

    uint64_t v8 = 0LL;
    goto LABEL_11;
  }

  if (a3 == 1)
  {
    uint64_t v11 = (const __CFURL *)objc_claimAutoreleasedReturnValue([v5 frontFaceImage]);
    if (v11)
    {
      int v16 = (void *)objc_claimAutoreleasedReturnValue( +[PKImageResizingConstraints constraintsWithAspectFitToSize:]( &OBJC_CLASS___PKImageResizingConstraints,  "constraintsWithAspectFitToSize:",  35.0,  35.0));
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v16 resizedImage:v11]);

      goto LABEL_11;
    }

    goto LABEL_10;
  }

  if (a3) {
    uint64_t v8 = 0LL;
  }
  else {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v5 notificationIconImage]);
  }
LABEL_12:

  return v8;
}

        id v15 = (char *)v15 + 1;
      }

      while (v13 != v15);
      unsigned int v20 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
      id v13 = v20;
    }

    while (v20);
  }

  uint64_t v21 = -[NSMutableSet copy](v10, "copy");
  return v21;
}
}
}

  BOOL v23 = [v9 useRawMerchantData];

  id v10 = v26;
  uint64_t v7 = v27;
  if ((v23 & 1) == 0)
  {
    ((void (*)(void *, id, void, void *, void))v8[2])(v8, v6, 0LL, v11, 0LL);
    goto LABEL_19;
  }
}
}

      sub_10043C89C(v4, v6, v2 != 0, a1);
      id v10 = v14;
      sub_10043D5C0(v4, v6, v2 != 0);
      return v10;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

id sub_100079E54(void *a1, int a2)
{
  if (a1[6])
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 80) objectForKey:a1[5]]);
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 88) objectForKey:a1[5]]);
    BOOL v6 = (void *)v5;
    if (a2 && (v4 ? (BOOL v7 = v5 == 0) : (BOOL v7 = 0), v7))
    {
      (*(void (**)(void))(a1[6] + 16LL))();
    }

    else
    {
      if (!v5)
      {
        NSErrorUserInfoKey v10 = NSDebugDescriptionErrorKey;
        uint64_t v11 = @"PDNotificationServiceTransactionAuthenticationTask failed.";
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v11,  &v10,  1LL));
        BOOL v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  v8));
      }

      (*(void (**)(void))(a1[6] + 16LL))();
    }
  }

  [*(id *)(a1[4] + 80) removeObjectForKey:a1[5]];
  return [*(id *)(a1[4] + 88) removeObjectForKey:a1[5]];
}

void sub_10007A974(_Unwind_Exception *a1)
{
}

uint64_t sub_10007A9AC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10007A9BC(uint64_t a1)
{
}

void sub_10007A9C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 48) secureElementIdentifiers]);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10007AA78;
  v8[3] = &unk_10063E110;
  id v9 = v3;
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  id v10 = v5;
  uint64_t v11 = v6;
  id v7 = v3;
  [v4 enumerateObjectsUsingBlock:v8];
}

void sub_10007AA78(uint64_t a1, void *a2)
{
  id v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 secureElementIdentifier]);
  unsigned int v6 = [v5 isEqualToString:v4];

  if (v6)
  {
    id v7 = *(void **)(a1 + 40);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dpanIdentifier]);
    [v7 addObject:v8];

    if (!*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)
      && ([*(id *)(a1 + 32) isAuxiliary] & 1) == 0)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL), *(id *)(a1 + 32));
    }
  }

void sub_10007AB2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)id buf = 138412290;
    id v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Signed Registration Data: %@", buf, 0xCu);
  }

  if (v5 && (id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 certificates]), v9, v9))
  {
    id v10 = PDDefaultQueue();
    uint64_t v11 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v10);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_10007AD10;
    block[3] = &unk_10063AE60;
    id v15 = (os_log_s *)v5;
    id v16 = *(id *)(a1 + 32);
    id v17 = *(id *)(a1 + 40);
    id v18 = *(id *)(a1 + 48);
    id v19 = v6;
    id v12 = *(id *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 64);
    id v20 = v12;
    uint64_t v21 = v13;
    dispatch_async(v11, block);

    uint64_t v8 = v15;
  }

  else if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Failed to Generate Signed Registration Data!",  buf,  2u);
  }
}

void sub_10007AD10(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) base64EncodedStringWithOptions:0]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) base64EncodedStringWithOptions:0]);
  uint64_t v4 = *(void *)(a1 + 56);
  id v5 = *(void **)(a1 + 64);
  if (*(void *)(a1 + 48))
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 certificates]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 dictionary]);
    id v8 = [*(id *)(a1 + 64) certificateVersion];
    id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) dpanIdentifier]);
    id v10 = (id)objc_claimAutoreleasedReturnValue( +[PDNotificationServiceSpecificRegistrationTask registerTaskWithNotificationService:registrationData:signature:certificates:certificateVersion:dpanIdentifier:completionTask:]( &OBJC_CLASS___PDNotificationServiceSpecificRegistrationTask,  "registerTaskWithNotificationService:registrationData:signature:certificates:certificateVersion:dpanIde ntifier:completionTask:",  v4,  v3,  v2,  v7,  v8,  v9,  *(void *)(a1 + 72)));
  }

  else
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 certificates]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 dictionary]);
    id v10 = (id)objc_claimAutoreleasedReturnValue( +[PDNotificationServiceRegistrationTask registerTaskWithNotificationService:registrationData:signature:certificates:certificateVersion:completionTask:]( PDNotificationServiceRegistrationTask,  "registerTaskWithNotificationService:registrationData:signature:certificates:certificateVersion:completionTask:",  v4,  v3,  v2,  v7,  [*(id *)(a1 + 64) certificateVersion],  *(void *)(a1 + 72)));
  }

  [*(id *)(*(void *)(a1 + 80) + 56) performTask:v10];
}

void sub_10007AE70(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (v5)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 certificates]);
    if (v8)
    {

LABEL_9:
      (*(void (**)(void))(a1[6] + 16LL))();
      goto LABEL_10;
    }

    if ((PKIgnoreSignatures() & 1) == 0) {
      goto LABEL_9;
    }
  }

  else if (!PKIgnoreSignatures())
  {
    goto LABEL_9;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(6LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Could not sign data with SE lookup via application ID, attempting again with default SE since *** IGNORING SIGNATURES ***",  v11,  2u);
  }

  [*(id *)(a1[4] + 48) signChallenge:a1[5] signatureEntanglementMode:0 completion:a1[6]];
LABEL_10:
}

void sub_10007B4B8(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 56LL);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) completionTask]);
  [v1 performTask:v2];
}

void sub_10007BC00(uint64_t a1, void *a2, char *a3)
{
  id v22 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v22 PKStringForKey:@"dpanIdentifier"]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v22 PKStringForKey:@"fpanIdentifier"]);
  if (v5)
  {
    uint64_t v7 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) paymentApplicationWithDPANIdentifier:v5]);
    if (v7)
    {
      id v8 = (void *)v7;
      id v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) passUniqueIdentifierWithPaymentApplication:v7]);
      char v10 = 0;
      if (!v9) {
        goto LABEL_29;
      }
LABEL_7:
      uint64_t v11 = *(void *)(a1 + 64);
      if (v11)
      {
        if (v11 == 1)
        {
          unint64_t v12 = PKMaxPerPassPaymentMessageHistory;
          unsigned int v13 = [*(id *)(*(void *)(a1 + 32) + 16) settingEnabled:64 forPassWithUniqueIdentifier:v9];
        }

        else
        {
          unsigned int v13 = 0;
          unint64_t v12 = 0LL;
        }
      }

      else
      {
        if ((v10 & 1) != 0) {
          id v14 = 0LL;
        }
        else {
          id v14 = [v8 paymentNetworkIdentifier];
        }
        unint64_t v12 = PKMaxPaymentTransactionsForCredentialType(v14);
        unsigned __int8 v15 = [*(id *)(*(void *)(a1 + 32) + 16) settingEnabled:8 forPassWithUniqueIdentifier:v9];
        id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) passWithUniqueIdentifier:v9]);
        id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 paymentPass]);

        if ((v15 & 1) != 0) {
          unsigned int v13 = 1;
        }
        else {
          unsigned int v13 = [v17 shouldIgnoreTransactionUpdatesSwitch];
        }
      }

      id v18 = [*(id *)(a1 + 40) countForObject:v9];
      if (*(_BYTE *)(a1 + 72)) {
        int v19 = 1;
      }
      else {
        int v19 = v13;
      }
      if (v19 == 1 && (unint64_t)v18 <= v12)
      {
        id v20 = (char *)[*(id *)(a1 + 48) count] - 1;
        uint64_t v21 = *(void *)(a1 + 64);
        if (v21 == 1)
        {
          [*(id *)(a1 + 32) _processMessageDictionary:v22 forPassUniqueIdentifier:v9 paymentApplication:v8 performTruncation:v20 == a3];
        }

        else if (!v21)
        {
          objc_msgSend( *(id *)(a1 + 32),  "_processTransactionDictionary:forPassUniqueIdentifier:paymentApplication:performTruncation:isInitialUpdate:",  v22,  v9,  v8,  v20 == a3,  objc_msgSend(*(id *)(a1 + 56), "isInitialUpdatesTask"));
        }

        [*(id *)(a1 + 40) addObject:v9];
      }

      goto LABEL_29;
    }
  }

  if (!v6)
  {
    id v9 = 0LL;
    id v8 = 0LL;
    goto LABEL_29;
  }

  id v9 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) passUniqueIdentifierWithPrimaryAccountIdentifier:v6]);
  id v8 = 0LL;
  char v10 = 1;
  if (v9) {
    goto LABEL_7;
  }
LABEL_29:
}

void sub_10007BE64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 PKStringForKey:@"dpanIdentifier"]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 PKStringForKey:@"fpanIdentifier"]);
  if (v4
    && (uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) paymentApplicationWithDPANIdentifier:v4])) != 0)
  {
    uint64_t v7 = (void *)v6;
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) passUniqueIdentifierWithPaymentApplication:v6]);
  }

  else if (v5)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) passUniqueIdentifierWithPrimaryAccountIdentifier:v5]);
    uint64_t v7 = 0LL;
  }

  else
  {
    uint64_t v7 = 0LL;
    id v8 = 0LL;
  }

  id v9 = -[PKPaymentBalance initWithDictionary:](objc_alloc(&OBJC_CLASS___PKPaymentBalance), "initWithDictionary:", v3);
  if (!v8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(6LL);
    char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_18;
    }
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentBalance identifiers](v9, "identifiers"));
    int v16 = 138412290;
    id v17 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "PDNotificationServiceCoordinator: Related pass could not be found for balance: %@",  (uint8_t *)&v16,  0xCu);
LABEL_17:

    goto LABEL_18;
  }

  char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v8]);
  unint64_t v11 = PKMaxDefaultPerPassBalanceCount;
  if (!v10)
  {
    char v10 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSMutableArray arrayWithCapacity:]( &OBJC_CLASS___NSMutableArray,  "arrayWithCapacity:",  PKMaxDefaultPerPassBalanceCount));
    [*(id *)(a1 + 40) setObject:v10 forKey:v8];
  }

  if ((unint64_t)-[os_log_s count](v10, "count") >= v11)
  {
    uint64_t v14 = PKLogFacilityTypeGetObject(6LL);
    unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled((os_log_t)v13, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v15 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentBalance identifiers](v9, "identifiers"));
      int v16 = 138412546;
      id v17 = v8;
      __int16 v18 = 2112;
      int v19 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v13,  OS_LOG_TYPE_DEFAULT,  "PDNotificationServiceCoordinator: Too many balances provided for pass %@, skipping: %@",  (uint8_t *)&v16,  0x16u);
    }

    goto LABEL_17;
  }

void sub_10007C0FC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 PKStringForKey:@"dpanIdentifier"]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 PKStringForKey:@"fpanIdentifier"]);
  if (v4
    && (uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) paymentApplicationWithDPANIdentifier:v4])) != 0)
  {
    uint64_t v7 = (void *)v6;
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) passUniqueIdentifierWithPaymentApplication:v6]);
    if (!v8)
    {
LABEL_13:
      uint64_t Object = PKLogFacilityTypeGetObject(6LL);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v12 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PDNotificationServiceCoordinator: Plan's related pass could not be found",  v12,  2u);
      }

      goto LABEL_15;
    }
  }

  else
  {
    if (!v5)
    {
      uint64_t v7 = 0LL;
      goto LABEL_13;
    }

    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) passUniqueIdentifierWithPrimaryAccountIdentifier:v5]);
    uint64_t v7 = 0LL;
    if (!v8) {
      goto LABEL_13;
    }
  }

  id v9 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v8]);
  if (!v9)
  {
    id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    [*(id *)(a1 + 40) setObject:v9 forKey:v8];
  }

  char v10 = -[PKPaymentCommutePlanDetail initWithDictionary:]( objc_alloc(&OBJC_CLASS___PKPaymentCommutePlanDetail),  "initWithDictionary:",  v3);

LABEL_15:
}

void sub_10007C2A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 PKStringForKey:@"dpanIdentifier"]);
  uint64_t v5 = objc_claimAutoreleasedReturnValue([v3 PKStringForKey:@"fpanIdentifier"]);
  uint64_t v6 = (void *)v5;
  if (v4 && v5)
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) paymentApplicationWithDPANIdentifier:v4]);
    id v8 = *(void **)(*(void *)(a1 + 32) + 16LL);
    if (v7) {
      uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 passUniqueIdentifierWithPaymentApplication:v7]);
    }
    else {
      uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 passUniqueIdentifierWithPrimaryAccountIdentifier:v6]);
    }
    unint64_t v12 = (void *)v9;

    if (v12)
    {
      unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v3 PKStringForKey:@"identifier"]);
      if (v13)
      {
        uint64_t v14 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKeyedSubscript:v12]);
        if (!v14)
        {
          uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
          [*(id *)(a1 + 40) setObject:v14 forKeyedSubscript:v12];
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v3, v13);
      }

      else
      {
        uint64_t Object = PKLogFacilityTypeGetObject(6LL);
        id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__int16 v18 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "PDNotificationServiceCoordiantor: ignoring tile configuration without a tile identifier.",  v18,  2u);
        }
      }

      uint64_t v4 = v12;
    }

    else
    {
      uint64_t v15 = PKLogFacilityTypeGetObject(6LL);
      uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(v15);
      if (os_log_type_enabled((os_log_t)v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v19 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v4,  OS_LOG_TYPE_DEFAULT,  "PDNotificationServiceCoordiantor: ignoring tile configuration without a matching pass.",  v19,  2u);
      }
    }
  }

  else
  {
    uint64_t v10 = PKLogFacilityTypeGetObject(6LL);
    unint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "PDNotificationServiceCoordiantor: ignoring tile configuration with no fpan or dpan identifier.",  buf,  2u);
    }
  }
}

void sub_10007C4C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 96LL);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10007C54C;
  v8[3] = &unk_10063E200;
  id v9 = v5;
  id v7 = v5;
  sub_10033B0A4(v6, a2, v8);
}

id sub_10007C54C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([a2 metadata]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:v7]);
    if (v8)
    {
      id v9 = [v5 mutableCopy];
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 PKNumberForKey:@"enabled"]);
      unint64_t v11 = v10;
      if (v10)
      {
        else {
          uint64_t v12 = 2LL;
        }
      }

      else
      {
        uint64_t v12 = 0LL;
      }

      [v9 setEnabled:v12];
      unsigned int v13 = (void *)objc_claimAutoreleasedReturnValue([v8 PKStringForKey:@"state"]);
      [v9 setStateIdentifier:v13];

      id v14 = [v6 type];
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v8 PKDictionaryForKey:@"stateOverride"]);
      if (v15) {
        id v16 = +[PKPassTileState _createForDictionary:withTileType:]( &OBJC_CLASS___PKPassTileState,  "_createForDictionary:withTileType:",  v15,  v14);
      }
      else {
        id v16 = 0LL;
      }

      [v9 setStateOverride:v16];
    }

    else
    {
      id v9 = v5;
    }
  }

  else
  {
    id v9 = v5;
  }

  return v9;
}

LABEL_29:
        id v14 = (char *)v14 + 1;
      }

      while (v14 != v12);
      uint64_t v12 = [v8 countByEnumeratingWithState:&v47 objects:v58 count:16];
    }

    while (v12);
  }
}

      BOOL v29 = v21;
      if (v29)
      {
        int v30 = v29;
        __int128 v31 = *(void **)(a1 + 40);
        id v32 = (void *)objc_claimAutoreleasedReturnValue([v29 appleID]);
        [v31 addObject:v32];

        __int128 v33 = *(void **)(a1 + 40);
        id v34 = (void *)objc_claimAutoreleasedReturnValue([v30 addressableHandles]);
        [v33 unionSet:v34];

        goto LABEL_34;
      }
    }

    __int16 v18 = [v16 countByEnumeratingWithState:&v38 objects:v46 count:16];
    if (v18) {
      continue;
    }
    break;
  }

  __int128 v26 = v8;

  char v27 = -[NSMutableSet copy](v30, "copy");
  return v27;
}

    id v22 = (void *)objc_claimAutoreleasedReturnValue(-[SQLiteEntity database](self, "database"));
    id v23 =  +[PassAnnotations insertPassAnnotationsForSortingState:forPass:inDatabase:]( &OBJC_CLASS___PassAnnotations,  "insertPassAnnotationsForSortingState:forPass:inDatabase:",  a3,  self,  v22);

    goto LABEL_30;
  }

  if (v15)
  {
    else {
      id v16 = *(&off_100640B20 + a4 - 1);
    }
    uint64_t v24 = 134218498;
    __int128 v25 = a3;
    __int128 v26 = 2112;
    char v27 = (int64_t)v16;
    uint64_t v28 = 2048;
    BOOL v29 = 0LL;
    goto LABEL_22;
  }

        unsigned int v13 = (char *)v13 + 1;
      }

      while (v11 != v13);
      unint64_t v11 = [obj countByEnumeratingWithState:&v52 objects:v58 count:16];
    }

    while (v11);
  }

  if (-[NSMutableArray count](v38, "count")) {
    -[PDPayLaterMerchantProcessor processFinancingPlans:]( self->_payLaterMerchantProcessor,  "processFinancingPlans:",  v38);
  }
  -[PDAccountManager recomputePayLaterCardMagntiudesForAccountIdentifier:]( self,  "recomputePayLaterCardMagntiudesForAccountIdentifier:",  v41);
  __int128 v33 = -[NSMutableArray copy](v9, "copy");

  return v33;
}

LABEL_9:
      LOBYTE(v_Block_object_dispose((const void *)(v1 - 176), 8) = 0;
      return (char)v8;
    case 6uLL:
    case 7uLL:
    case 0x10uLL:
    case 0x11uLL:
    case 0x12uLL:
      return (char)v8;
    case 0xBuLL:
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountEvent items](self->_accountEvent, "items"));
      unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v15 anyObject]);

      if ([v11 reason] != (id)7) {
        goto LABEL_29;
      }
      id v16 = (void *)objc_claimAutoreleasedReturnValue([v11 updatedPhysicalCards]);
      id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 firstObject]);
      __int16 v18 = (void *)objc_claimAutoreleasedReturnValue([v17 latestOrderActivity]);

      if (!v18 || (char *)[v18 activity] - 3 >= (char *)2)
      {

        goto LABEL_29;
      }

LABEL_14:
LABEL_25:
      LOBYTE(v_Block_object_dispose((const void *)(v1 - 176), 8) = 1;
      return (char)v8;
    case 0xCuLL:
      int v19 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountEvent items](self->_accountEvent, "items"));
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 anyObject]);

      [v20 shippingStatus];
      goto LABEL_25;
    default:
      goto LABEL_9;
  }
              }
            }

            id v17 = [v15 countByEnumeratingWithState:&v67 objects:v78 count:16];
            if (!v17)
            {
LABEL_32:

              uint64_t v6 = v61;
              uint64_t v10 = v55;
              id v9 = v56;
              unint64_t v11 = v58;
              break;
            }
          }
        }

        unint64_t v11 = (char *)v11 + 1;
      }

      while (v11 != v9);
      id v9 = [obj countByEnumeratingWithState:&v71 objects:v79 count:16];
      if (!v9) {
        goto LABEL_55;
      }
    }
  }

  int v30 = (void *)objc_claimAutoreleasedReturnValue([v5 associatedAccountServiceAccountIdentifier]);

  if (v30)
  {
    obuint64_t j = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transactionSourceIdentifiersForPassUniqueIdentifier:v6]);
    __int128 v31 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction paymentTransactionsInDatabase:forTransactionSourceIdentifiers:withRedemptionType:startDate:endDate:]( &OBJC_CLASS___PaymentTransaction,  "paymentTransactionsInDatabase:forTransactionSourceIdentifiers:withRedemptionType:startDate:endDate:",  *(void *)(a1 + 32)));
    __int128 v63 = 0u;
    __int128 v64 = 0u;
    __int128 v65 = 0u;
    __int128 v66 = 0u;
    id v32 = [v31 countByEnumeratingWithState:&v63 objects:v75 count:16];
    if (v32)
    {
      __int128 v33 = v32;
      id v34 = *(void *)v64;
      __int128 v59 = *(void *)v64;
      __int128 v60 = v31;
      do
      {
        for (uint64_t j = 0LL; j != v33; uint64_t j = (char *)j + 1)
        {
          if (*(void *)v64 != v34) {
            objc_enumerationMutation(v31);
          }
          uint64_t v36 = *(void **)(*((void *)&v63 + 1) + 8LL * (void)j);
          if (![v36 redemptionType])
          {
            uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 serviceIdentifier]);
            uint64_t v38 = (void *)objc_claimAutoreleasedReturnValue( +[AccountEvent redemptionAccountEventWithTransactionIdentifier:inDatabase:]( &OBJC_CLASS___AccountEvent,  "redemptionAccountEventWithTransactionIdentifier:inDatabase:",  v37,  *(void *)(a1 + 32)));

            uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue([v38 items]);
            id v40 = (void *)objc_claimAutoreleasedReturnValue([v39 anyObject]);

            if (v40)
            {
              id v42 = objc_opt_class(&OBJC_CLASS___PKAccountRewards, v41);
              if ((objc_opt_isKindOfClass(v40, v42) & 1) != 0)
              {
                id v43 = (__CFString *)(id)objc_claimAutoreleasedReturnValue([v40 status]);
                if (v43 == @"success"
                  || (__int128 v44 = v43) != 0LL
                  && (__int128 v45 = -[__CFString isEqualToString:](v43, "isEqualToString:", @"success"),
                      v44,
                      v44,
                      v45))
                {
                  objc_msgSend(v36, "setRedemptionType:", objc_msgSend(v40, "type"));
                  __int128 v46 = *(void *)(a1 + 32);
                  __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v36 serviceIdentifier]);
                  __int128 v48 = (void *)objc_claimAutoreleasedReturnValue([v36 transactionSourceIdentifier]);
                  __int128 v49 = (void *)objc_claimAutoreleasedReturnValue( +[PaymentTransaction anyInDatabase:withServiceIdentifier:forTransactionSourceIdentifier:]( &OBJC_CLASS___PaymentTransaction,  "anyInDatabase:withServiceIdentifier:forTransactionSourceIdentifier:",  v46,  v47,  v48));

                  [v49 updateWithPaymentTransaction:v36];
                  __int128 v50 = PKLogFacilityTypeGetObject(23LL);
                  __int128 v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
                  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                  {
                    id v52 = (void *)objc_claimAutoreleasedReturnValue([v36 serviceIdentifier]);
                    *(_DWORD *)id buf = 138412290;
                    uint64_t v77 = v52;
                    _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Updating transaction as redeemed for identifier: %@",  buf,  0xCu);
                  }

                  uint64_t v6 = v61;
                  id v34 = v59;
                  __int128 v31 = v60;
                }
              }
            }
          }
        }

        __int128 v33 = [v31 countByEnumeratingWithState:&v63 objects:v75 count:16];
      }

      while (v33);
    }

LABEL_55:
  }
}

void sub_10007CD50(uint64_t a1, void *a2)
{
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  __int128 v18 = 0u;
  __int128 v19 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v16 objects:v24 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "balanceIdentifier", (void)v16));
        int v10 = PKEqualObjects(v9, *(void *)(a1 + 32));

        if (v10)
        {
          unint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) value]);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) currencyCode]);
          objc_msgSend( v8,  "updateBalanceAmount:currency:exponent:",  v11,  v12,  objc_msgSend(*(id *)(a1 + 40), "exponent"));

          [v8 setReissueBannerOnUpdate:0];
          [*(id *)(*(void *)(a1 + 48) + 24) insertUserNotification:v8];
          uint64_t Object = PKLogFacilityTypeGetObject(6LL);
          id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v15 = *(void *)(a1 + 56);
            *(_DWORD *)id buf = 138412546;
            uint64_t v21 = v8;
            __int16 v22 = 2112;
            uint64_t v23 = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "PDNotificationServiceCoordiantor: lowBalance updateLowBalanceNotificationForBalance: %@ for pass %@",  buf,  0x16u);
          }

          goto LABEL_13;
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v16 objects:v24 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

void sub_10007D004(void *a1, void *a2)
{
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v3 = a2;
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v22 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        id v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "balanceIdentifier", (void)v14));
        int v10 = PKEqualObjects(v9, a1[4]);

        if (v10)
        {
          [*(id *)(a1[5] + 24) removeUserNotification:v8];
          uint64_t Object = PKLogFacilityTypeGetObject(6LL);
          uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v13 = a1[6];
            *(_DWORD *)id buf = 138412546;
            __int128 v19 = v8;
            __int16 v20 = 2112;
            uint64_t v21 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "PDNotificationServiceCoordiantor: lowBalance removeLowBalanceNotificationForBalance: %@ for pass %@",  buf,  0x16u);
          }

          goto LABEL_13;
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v22 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

void sub_10007D5E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = PDDefaultQueue();
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_10007D6C0;
  void v11[3] = &unk_10063CD10;
  id v12 = v5;
  id v15 = *(id *)(a1 + 40);
  id v13 = *(id *)(a1 + 32);
  id v14 = v6;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, v11);
}

void sub_10007D6C0(void *a1)
{
  id v2 = (void *)a1[4];
  if (v2)
  {
    uint64_t v3 = a1[7];
    id v9 = (id)objc_claimAutoreleasedReturnValue([v2 totalMerchantTokens]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithBool:]( NSNumber,  "numberWithBool:",  (int)[v9 intValue] > 0));
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v4);
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(23LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[5];
      uint64_t v8 = a1[6];
      *(_DWORD *)id buf = 138412546;
      uint64_t v11 = v7;
      __int16 v12 = 2112;
      uint64_t v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Error retrieving merchant token status for transaction %@. Error: %@",  buf,  0x16u);
    }

    (*(void (**)(void))(a1[7] + 16LL))();
  }

id sub_10007DAC8(uint64_t a1, uint64_t a2)
{
  return  [*(id *)(a1 + 40) _updatePaymentTransaction:*(void *)(a1 + 32) withPassUniqueIdentifier:*(void *)(a1 + 48) forPaymentApplication:*(void *)(a1 + 56) insertionMode:*(void *)(a1 + 64) performTruncation:*(unsigned __int8 *)(a1 + 72)];
}

void sub_10007DD60( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10007DD80(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = objc_opt_class(&OBJC_CLASS___PDNotificationServiceConnectionTask, v4);
  if ((objc_opt_isKindOfClass(v3, v5) & 1) == 0
    || ![v3 pertainsToNotificationService:*(void *)(a1 + 32)]
    || (uint64_t v7 = objc_opt_class(&OBJC_CLASS___PDNotificationServiceSpecificRegistrationTask, v6),
        (objc_opt_isKindOfClass(v3, v7) & 1) != 0)
    && [v3 requestedStatus] == (id)2)
  {
LABEL_10:
    uint64_t v16 = 0LL;
    goto LABEL_11;
  }

  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___PDNotificationServiceGetSpecificUpdatesTask, v8);
    if ((objc_opt_isKindOfClass(v3, v9) & 1) != 0
      || (uint64_t v11 = objc_opt_class(&OBJC_CLASS___PDNotificationServiceSpecificRegistrationTask, v10),
          (objc_opt_isKindOfClass(v3, v11) & 1) != 0)
      || (uint64_t v13 = objc_opt_class(&OBJC_CLASS___PDNotificationServiceTransactionAuthenticationTask, v12),
          (objc_opt_isKindOfClass(v3, v13) & 1) != 0))
    {
      uint64_t v14 = *(void *)(a1 + 32);
      id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dpanIdentifier]);
      uint64_t v16 = (uint64_t)[v3 pertainsToNotificationService:v14 andDPANIdentifier:v15];

      goto LABEL_11;
    }

    goto LABEL_10;
  }

  uint64_t v16 = 1LL;
LABEL_11:
  uint64_t v17 = *(void *)(*(void *)(a1 + 48) + 8LL);
  if (*(_BYTE *)(v17 + 24)) {
    char v18 = 1;
  }
  else {
    char v18 = v16;
  }
  *(_BYTE *)(v17 + 24) = v18;

  return v16;
}

uint64_t sub_10007E348(uint64_t a1)
{
  return 1LL;
}

void sub_10007E820(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionTag);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_10007EB00(id a1, PKPaymentTransactionTag *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPaymentTransactionTag setType:](v4, "setType:", [a3 unsignedIntegerValue]);
}

void sub_10007EB44(id a1, PKPaymentTransactionTag *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPaymentTransactionTag setRank:](v4, "setRank:", v6);
}

void sub_10007EB94(id a1, PKPaymentTransactionTag *a2, id a3)
{
}

void sub_10007EB9C(id a1, PKPaymentTransactionTag *a2, id a3)
{
}

void sub_1000819B0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000819C8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000819D8(uint64_t a1)
{
}

BOOL sub_1000819E0(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accessory]);
  if (!v2)
  {
    id v3 = 0LL;
LABEL_5:
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) secondaryAccessory]);
    if (v5)
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[TileAccessory insertAccessory:inDatabase:]( &OBJC_CLASS___TileAccessory,  "insertAccessory:inDatabase:",  v5,  *(void *)(a1 + 40)));
      if (!v6)
      {
        BOOL v4 = 0LL;
LABEL_10:

        goto LABEL_11;
      }
    }

    else
    {
      id v6 = 0LL;
    }

    id v7 = [objc_alloc(*(Class *)(a1 + 64)) initWithState:*(void *)(a1 + 32) forBaseState:*(void *)(a1 + 48) forAccessory:v3 forSecondaryAccessory:v6 inDatabase:*(void *)(a1 + 40)];
    uint64_t v8 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v9 = *(void **)(v8 + 40);
    *(void *)(v8 + 40) = v7;

    BOOL v4 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
    goto LABEL_10;
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[TileAccessory insertAccessory:inDatabase:]( &OBJC_CLASS___TileAccessory,  "insertAccessory:inDatabase:",  v2,  *(void *)(a1 + 40)));
  if (v3) {
    goto LABEL_5;
  }
  BOOL v4 = 0LL;
LABEL_11:

  return v4;
}

void sub_100081C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v19 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  [*(id *)(a1 + 32) setTitle:*(void *)a4];
  [*(id *)(a1 + 32) setBody:*(void *)(a4 + 8)];
  id v9 = *(id *)(a4 + 16);
  if (v9) {
    BOOL v10 = v9 == v19;
  }
  else {
    BOOL v10 = 1;
  }
  if (!v10)
  {
    uint64_t v11 = -[SQLiteEntity initWithPersistentID:inDatabase:]( [TileAccessory alloc],  "initWithPersistentID:inDatabase:",  [v9 longLongValue],  *(void *)(a1 + 40));
    uint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(-[TileAccessory passTileAccessory](v11, "passTileAccessory"));
    [v12 setAccessory:v13];
  }

  id v14 = *(id *)(a4 + 24);
  if (v14 && v14 != v19)
  {
    id v15 = v14;
    uint64_t v16 = -[SQLiteEntity initWithPersistentID:inDatabase:]( [TileAccessory alloc],  "initWithPersistentID:inDatabase:",  [v15 longLongValue],  *(void *)(a1 + 40));
    uint64_t v17 = *(void **)(a1 + 32);
    char v18 = (void *)objc_claimAutoreleasedReturnValue(-[TileAccessory passTileAccessory](v16, "passTileAccessory"));
    [v17 setSecondaryAccessory:v18];
  }

  *a6 = 1;
}

void sub_10008234C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100082364(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100082374(uint64_t a1)
{
}

BOOL sub_10008237C(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithValue:*(void *)(a1 + 32) forBaseValue:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  BOOL v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

id sub_100082540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "setIsRelative:", objc_msgSend(*(id *)(a4 + 32), "BOOLValue"));
  *a6 = 1;
  return result;
}

uint64_t PDSharingMailboxPayloadEncryptionSchemeFromKeyLength(uint64_t a1)
{
  if (a1 == 16) {
    return 1LL;
  }
  else {
    return 2LL * (a1 == 32);
  }
}

uint64_t sub_100082F64(uint64_t a1)
{
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v9;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend( *(id *)(*(void *)(a1 + 40) + 8),  "deleteMerchantForPassUniqueIdentifier:auxiliaryPassInformationItemIdentifier:",  *(void *)(a1 + 48),  *(void *)(*((void *)&v8 + 1) + 8 * (void)v6),  (void)v8);
        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }

    while (v4);
  }

  return 1LL;
}

void sub_1000836E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32LL));
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 40) objectForKey:*(void *)(a1 + 40)]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:*(void *)(a1 + 56)]);
  if (!v5)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 56);
      *(_DWORD *)id buf = 138412290;
      uint64_t v52 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Missing item update for %@", buf, 0xCu);
    }
  }

  __int128 v48 = 0u;
  __int128 v49 = 0u;
  __int128 v46 = 0u;
  __int128 v47 = 0u;
  id v9 = v4;
  id v10 = [v9 countByEnumeratingWithState:&v46 objects:v57 count:16];
  if (v10)
  {
    id v11 = v10;
    uint64_t v12 = *(void *)v47;
    do
    {
      for (uint64_t i = 0LL; i != v11; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v47 != v12) {
          objc_enumerationMutation(v9);
        }
        id v14 = *(void **)(*((void *)&v46 + 1) + 8LL * (void)i);
        id v15 = *(void **)(a1 + 64);
        uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v14 item]);
        if ([v15 isEqual:v16])
        {
          unsigned int v17 = [v14 isInvalid];

          if (v17)
          {
            id v18 = v14;

            int v19 = 0;
            uint64_t v5 = v18;
            goto LABEL_19;
          }
        }

        else
        {
        }
      }

      id v11 = [v9 countByEnumeratingWithState:&v46 objects:v57 count:16];
    }

    while (v11);
    int v19 = 1;
  }

  else
  {
    int v19 = 1;
  }

LABEL_26:
  if (v23) {
    goto LABEL_42;
  }
LABEL_32:
  uint64_t v29 = PKLogFacilityTypeGetObject(0LL);
  int v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v31 = *(void *)(a1 + 56);
    uint64_t v32 = *(void *)(a1 + 40);
    *(_DWORD *)id buf = 138412802;
    uint64_t v52 = v31;
    __int16 v53 = 2112;
    uint64_t v54 = v32;
    __int16 v55 = 2112;
    id v56 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "PDAuxiliaryPassInformationManager: Calling completions for %@ in pass %@ with newly fetched merchant: %@",  buf,  0x20u);
  }

  __int128 v40 = 0u;
  __int128 v41 = 0u;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  id v33 = v22;
  id v34 = [v33 countByEnumeratingWithState:&v38 objects:v50 count:16];
  if (v34)
  {
    id v35 = v34;
    uint64_t v36 = *(void *)v39;
    do
    {
      for (uint64_t j = 0LL; j != v35; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v39 != v36) {
          objc_enumerationMutation(v33);
        }
        (*(void (**)(void))(*(void *)(*((void *)&v38 + 1) + 8LL * (void)j) + 16LL))(*(void *)(*((void *)&v38 + 1) + 8LL * (void)j));
      }

      id v35 = [v33 countByEnumeratingWithState:&v38 objects:v50 count:16];
    }

    while (v35);
  }

LABEL_42:
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 32LL));
}

  id v33 = 1LL;
  id v34 = 4LL;
LABEL_27:
  __int128 v49 = v14;
  if (([v15 useLastChangeToken] & 1) == 0
    && (!objc_msgSend(v15, "requestType", v14)
     || [v15 requestType] == (id)2
     || [v15 requestType] == (id)3))
  {
    v34 |= 0x20uLL;
    v33 |= 2uLL;
  }

  id v35 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  v66[0] = _NSConcreteStackBlock;
  v66[1] = 3221225472LL;
  v66[2] = sub_10008BC10;
  v66[3] = &unk_10063EA98;
  v66[4] = self;
  uint64_t v36 = v15;
  __int128 v67 = v36;
  uint64_t v37 = v35;
  __int128 v68 = v37;
  __int128 v38 = v16;
  uint64_t v69 = v38;
  id v72 = v34;
  __int128 v39 = v53;
  uint64_t v73 = v33;
  __int128 v70 = v39;
  id v71 = v74;
  [v55 enumerateKeysAndObjectsUsingBlock:v66];
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 3221225472LL;
  v62[2] = sub_10008D5CC;
  v62[3] = &unk_10063EAC0;
  v62[4] = self;
  __int128 v40 = v36;
  __int128 v63 = v40;
  __int128 v41 = v37;
  __int128 v64 = v41;
  id v42 = v52;
  __int128 v65 = v42;
  [v54 enumerateKeysAndObjectsUsingBlock:v62];
  id v43 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v56[0] = _NSConcreteStackBlock;
  v56[1] = 3221225472LL;
  v56[2] = sub_10008D7EC;
  v56[3] = &unk_10063EAE8;
  v56[4] = self;
  id v44 = v50;
  __int128 v57 = v44;
  uint64_t v45 = v51;
  __int128 v60 = v45;
  __int128 v46 = v38;
  __int128 v58 = v46;
  __int128 v61 = v74;
  __int128 v47 = v42;
  __int128 v59 = v47;
  __int128 v48 = [v41 evaluateWithInput:v43 completion:v56];

  _Block_object_dispose(v74, 8);
}
  }

  __int16 v20 = v242;
  uint64_t v21 = v2;
  __int16 v22 = v21;
  if (v21 != @"mailbox")
  {
    if (!v21) {
      goto LABEL_206;
    }
    BOOL v23 = -[__CFString isEqualToString:](v21, "isEqualToString:", @"mailbox");

    if (v23) {
      goto LABEL_30;
    }
    id v27 = v22;
    if (v27 == @"ids"
      || (uint64_t v28 = v27,
          uint64_t v29 = -[__CFString isEqualToString:](v27, "isEqualToString:", @"ids"),
          v28,
          v29))
    {
      int v30 = v242;
      if (v30 == @"devices"
        || (uint64_t v31 = v30) != 0LL
        && (uint64_t v32 = -[__CFString isEqualToString:](v30, "isEqualToString:", @"devices"),
            v31,
            v32))
      {
        sub_1000D14E0(*(void *)(a1 + 40), *(void **)(a1 + 48));
        goto LABEL_208;
      }

      if (PKEqualObjects(v31, @"list"))
      {
        sub_1000D1570(*(void *)(a1 + 40), *(void **)(a1 + 48));
        goto LABEL_208;
      }

      id v56 = v31;
      if (v56 == @"store") {
        goto LABEL_60;
      }
      if (v31)
      {
        __int128 v57 = v56;
        __int128 v58 = -[__CFString isEqualToString:](v56, "isEqualToString:", @"store");

        if (v58)
        {
LABEL_60:
          __int128 v59 = *(void *)(a1 + 40);
          __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"id"));
          __int128 v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"sid"));
          __int128 v60 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"payload"));
          sub_1000D1730(v59, v48, v49, v60, *(void **)(a1 + 48));
LABEL_61:

          __int16 v20 = v242;
          goto LABEL_62;
        }

        __int16 v80 = v57;
        if (v80 == @"listen"
          || (__int128 v81 = v80,
              id v82 = -[__CFString isEqualToString:](v80, "isEqualToString:", @"listen"),
              v81,
              v82))
        {
          id v83 = *(void *)(a1 + 40);
          __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"sid"));
          __int128 v49 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"timeout"));
          sub_1000D1988(v83, v48, v49, *(void **)(a1 + 48));
          goto LABEL_62;
        }

        id v108 = v81;
        if (v108 == @"close"
          || (v109 = v108,
              v110 = -[__CFString isEqualToString:](v108, "isEqualToString:", @"close"),
              v109,
              v110))
        {
          v111 = *(void *)(a1 + 40);
          __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"sid"));
          sub_1000D1B20(v111, v48, *(void **)(a1 + 48));
          goto LABEL_135;
        }
      }

      goto LABEL_206;
    }

    __int128 v41 = v28;
    if (v41 == @"share"
      || (id v42 = v41,
          id v43 = -[__CFString isEqualToString:](v41, "isEqualToString:", @"share"),
          v42,
          v43))
    {
      id v44 = v242;
      if (v44 == @"get") {
        goto LABEL_48;
      }
      uint64_t v45 = v44;
      if (!v44) {
        goto LABEL_206;
      }
      __int128 v46 = -[__CFString isEqualToString:](v44, "isEqualToString:", @"get");

      if (v46)
      {
LABEL_48:
        __int128 v47 = *(void *)(a1 + 40);
        __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"mid"));
        __int128 v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"key"));
        sub_1000D1C5C(v47, v48, v49, *(void **)(a1 + 48));
LABEL_62:

LABEL_135:
        goto LABEL_208;
      }

      id v71 = v45;
      if (v71 == @"prewarm"
        || (id v72 = v71,
            uint64_t v73 = -[__CFString isEqualToString:](v71, "isEqualToString:", @"prewarm"),
            v72,
            v73))
      {
        sub_1000D1D3C(*(void **)(a1 + 40), v11, *(void **)(a1 + 48));
        goto LABEL_208;
      }

      uint64_t v98 = v72;
      if (v98 == @"create"
        || (v99 = v98,
            int v100 = -[__CFString isEqualToString:](v98, "isEqualToString:", @"create"),
            v99,
            v100))
      {
        uint64_t v101 = *(void *)(a1 + 40);
        __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"n"));
        __int128 v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"car"));
        sub_1000D1DF0(v101, v11, v48, v49, *(void **)(a1 + 48));
        goto LABEL_62;
      }

      __int128 v127 = v99;
      if (v127 == @"createMockEmbedded"
        || (__int128 v128 = v127,
            __int128 v129 = -[__CFString isEqualToString:](v127, "isEqualToString:", @"createMockEmbedded"),
            v128,
            v129))
      {
        sub_1000D216C(*(void *)(a1 + 40), (uint64_t)v11, *(void **)(a1 + 48));
        goto LABEL_208;
      }

      v151 = v128;
      if (v151 == @"update"
        || (v152 = v151,
            v153 = -[__CFString isEqualToString:](v151, "isEqualToString:", @"update"),
            v152,
            v153))
      {
        v154 = *(id **)(a1 + 40);
        __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"sid"));
        sub_1000D22D0(v154, v11, v48, *(void **)(a1 + 48));
        goto LABEL_135;
      }

      v168 = v152;
      if (v168 == @"revoke"
        || (v169 = v168,
            v170 = -[__CFString isEqualToString:](v168, "isEqualToString:", @"revoke"),
            v169,
            v170))
      {
        v171 = *(id **)(a1 + 40);
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"sid"));
        sub_1000D2424(v171, v11, v54, *(void **)(a1 + 48));
        goto LABEL_55;
      }

      v183 = v169;
      if (v183 == @"createSingleUse"
        || (v184 = v183,
            v185 = -[__CFString isEqualToString:](v183, "isEqualToString:", @"createSingleUse"),
            v184,
            v185))
      {
        v186 = *(void **)(a1 + 40);
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"payload"));
        __int16 v55 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"title"));
        v187 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"ttl"));
        if (v187)
        {
          v188 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"ttl"));
          sub_1000D2564( v186,  v54,  v55,  (unint64_t)(double)(uint64_t)[v188 integerValue],  *(void **)(a1 + 48));
        }

        else
        {
          sub_1000D2564(v186, v54, v55, 604800LL, *(void **)(a1 + 48));
        }

        goto LABEL_54;
      }

      v197 = v184;
      if (v197 == @"accept"
        || (v198 = v197,
            v199 = -[__CFString isEqualToString:](v197, "isEqualToString:", @"accept"),
            v198,
            v199))
      {
        v241 = *(id **)(a1 + 40);
        v239 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"url"));
        v200 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"background"));
        v201 = [v200 BOOLValue];
        v202 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"resolve"));
        v203 = [v202 BOOLValue];
        v204 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"activationCode"));
        v205 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"salt"));
        sub_1000D26D0(v241, v239, v201, v203, v204, v205, *(void **)(a1 + 48));

        goto LABEL_56;
      }

      v211 = v198;
      if (v211 == @"reject"
        || (v212 = v211,
            BOOL v213 = -[__CFString isEqualToString:](v211, "isEqualToString:", @"reject"),
            v212,
            v213))
      {
        int v214 = *(void **)(a1 + 40);
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"url"));
        sub_1000D2A08(v214, (uint64_t)v54, *(void **)(a1 + 48));
        goto LABEL_55;
      }

      v219 = v212;
      if (v219 == @"deviceCheck"
        || (v220 = v219,
            v221 = -[__CFString isEqualToString:](v219, "isEqualToString:", @"deviceCheck"),
            v220,
            v221))
      {
        v222 = *(void *)(a1 + 40);
        uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"type"));
        sub_1000D2A64(v222, v54, *(void **)(a1 + 48));
        goto LABEL_55;
      }

      __int16 v226 = v220;
      if (v226 != @"requestInvitation")
      {
        int v227 = v226;
        v228 = -[__CFString isEqualToString:](v226, "isEqualToString:", @"requestInvitation");

        if (!v228)
        {
          v231 = v227;
          __int16 v20 = v242;
          if (v231 == @"requestLateInvitation"
            || (v232 = v231,
                v233 = -[__CFString isEqualToString:]( v231,  "isEqualToString:",  @"requestLateInvitation"),  v232,  v233))
          {
            sub_1000D2CA4(*(void *)(a1 + 40), v11, *(void **)(a1 + 48));
            goto LABEL_208;
          }

          goto LABEL_206;
        }
      }

      v229 = *(void *)(a1 + 40);
      uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"from"));
      __int16 v55 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"type"));
      v210 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"serial"));
      v230 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"vehicle"));
      sub_1000D2B0C(v229, v54, v55, v210, v230, *(void **)(a1 + 48));

LABEL_187:
      goto LABEL_54;
    }

    __int128 v61 = v42;
    if (v61 != @"shares")
    {
      __int128 v62 = v61;
      __int128 v63 = -[__CFString isEqualToString:](v61, "isEqualToString:", @"shares");

      if (!v63)
      {
        __int128 v74 = v62;
        if (v74 == @"entitlements"
          || (int v75 = v74,
              uint64_t v76 = -[__CFString isEqualToString:](v74, "isEqualToString:", @"entitlements"),
              v75,
              v76))
        {
          uint64_t v77 = v242;
          if (v77 == @"list") {
            goto LABEL_80;
          }
          __int16 v78 = v77;
          if (!v77) {
            goto LABEL_208;
          }
          __int128 v79 = -[__CFString isEqualToString:](v77, "isEqualToString:", @"list");

          if (v79)
          {
LABEL_80:
            sub_1000D3FF0(*(void *)(a1 + 40), v11, *(void **)(a1 + 48));
            goto LABEL_208;
          }

          __int128 v116 = v78;
          if (v116 != @"role")
          {
            __int128 v117 = v116;
            __int128 v118 = -[__CFString isEqualToString:](v116, "isEqualToString:", @"role");

            if (!v118) {
              goto LABEL_208;
            }
          }

          __int128 v119 = *(void *)(a1 + 40);
          __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"hex"));
          __int128 v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"int"));
          sub_1000D419C(v119, v48, v49, *(void **)(a1 + 48));
          goto LABEL_62;
        }

        v102 = v75;
        if (v102 == @"monitor"
          || (v103 = v102,
              id v104 = -[__CFString isEqualToString:](v102, "isEqualToString:", @"monitor"),
              v103,
              v104))
        {
          uint64_t v105 = v242;
          if (v105 == @"disable"
            || (id v106 = v105) != 0LL
            && (v107 = -[__CFString isEqualToString:](v105, "isEqualToString:", @"disable"),
                v106,
                v107))
          {
            sub_1000D46A8(*(void *)(a1 + 40), *(void **)(a1 + 48));
            goto LABEL_208;
          }

          goto LABEL_206;
        }

        __int128 v130 = v103;
        if (v130 == @"activation"
          || (__int128 v131 = v130,
              v132 = -[__CFString isEqualToString:](v130, "isEqualToString:", @"activation"),
              v131,
              v132))
        {
          v133 = v242;
          if (v133 == @"mockFailure") {
            goto LABEL_125;
          }
          v134 = v133;
          if (!v133) {
            goto LABEL_206;
          }
          v135 = -[__CFString isEqualToString:](v133, "isEqualToString:", @"mockFailure");

          if (v135)
          {
LABEL_125:
            v136 = *(id **)(a1 + 40);
            __int128 v48 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"cid"));
            __int128 v49 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"sid"));
            __int128 v60 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"attempts"));
            sub_1000D483C(v136, v48, v49, (uint64_t)[v60 integerValue], *(void **)(a1 + 48));
            goto LABEL_61;
          }

          v165 = v134;
          if (v165 == @"list"
            || (v166 = v165,
                v167 = -[__CFString isEqualToString:](v165, "isEqualToString:", @"list"),
                v166,
                v167))
          {
            sub_1000D39AC(*(void *)(a1 + 40), *(void **)(a1 + 48));
            goto LABEL_56;
          }

          v179 = v166;
          if (v179 == @"get"
            || (v180 = v179,
                v181 = -[__CFString isEqualToString:](v179, "isEqualToString:", @"get"),
                v180,
                v181))
          {
            v182 = *(void **)(a1 + 40);
            uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"sid"));
            sub_1000D4980(v182, v54, *(void **)(a1 + 48));
            goto LABEL_55;
          }

          id v193 = v180;
          __int16 v20 = v242;
          if (v193 == @"enter"
            || (v194 = v193,
                v195 = -[__CFString isEqualToString:](v193, "isEqualToString:", @"enter"),
                v194,
                v195))
          {
            v196 = *(void **)(a1 + 40);
            __int128 v48 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"sid"));
            __int128 v49 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"code"));
            sub_1000D4A44(v196, v48, v49, *(void **)(a1 + 48));
            goto LABEL_62;
          }
        }

        else
        {
          v155 = v131;
          if (v155 == @"coms"
            || (v156 = v155,
                v157 = -[__CFString isEqualToString:](v155, "isEqualToString:", @"coms"),
                v156,
                v157))
          {
            v158 = v242;
            if (v158 == @"entitlementChange"
              || (v159 = v158) != 0LL
              && (v160 = -[__CFString isEqualToString:]( v158,  "isEqualToString:",  @"entitlementChange"),  v159,  v160))
            {
              sub_1000D4B38(*(void *)(a1 + 40), v11, *(void **)(a1 + 48));
              goto LABEL_208;
            }

            goto LABEL_206;
          }

          uint64_t v172 = v156;
          if (v172 == @"ltpk"
            || (uint64_t v173 = v172,
                uint64_t v174 = -[__CFString isEqualToString:](v172, "isEqualToString:", @"ltpk"),
                v173,
                v174))
          {
            uint64_t v175 = v242;
            if (v175 == @"create") {
              goto LABEL_165;
            }
            uint64_t v176 = v175;
            __int16 v20 = v242;
            if (!v175) {
              goto LABEL_206;
            }
            uint64_t v177 = -[__CFString isEqualToString:](v175, "isEqualToString:", @"create");

            if (v177)
            {
LABEL_165:
              v178 = *(void *)(a1 + 40);
              uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"groupId"));
              sub_1000D4C18(v178, v54, *(void **)(a1 + 48));
              goto LABEL_55;
            }

            v189 = v176;
            if (v189 == @"list"
              || (v190 = v189,
                  v191 = -[__CFString isEqualToString:](v189, "isEqualToString:", @"list"),
                  v190,
                  v191))
            {
              char v192 = *(void *)(a1 + 40);
              uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"groupId"));
              __int16 v55 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"keyId"));
              sub_1000D4CE4(v192, v54, v55, *(void **)(a1 + 48));
              goto LABEL_54;
            }

            uint64_t v206 = v190;
            if (v206 != @"encrypt")
            {
              v207 = v206;
              v208 = -[__CFString isEqualToString:](v206, "isEqualToString:", @"encrypt");

              if (!v208)
              {
                v215 = v207;
                if (v215 == @"decrypt"
                  || (v216 = v215,
                      v217 = -[__CFString isEqualToString:](v215, "isEqualToString:", @"decrypt"),
                      v216,
                      v217))
                {
                  v218 = *(void *)(a1 + 40);
                  uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"data"));
                  __int16 v55 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"groupIdentifier"));
                  sub_1000D50E4(v218, v54, v55, *(void **)(a1 + 48));
                  goto LABEL_54;
                }

                BOOL v223 = v216;
                __int16 v20 = v242;
                if (v223 == @"invalidate"
                  || (__int16 v224 = v223,
                      BOOL v225 = -[__CFString isEqualToString:](v223, "isEqualToString:", @"invalidate"),
                      v224,
                      v225))
                {
                  sub_1000D5168(*(void *)(a1 + 40), v11, *(void **)(a1 + 48));
                  goto LABEL_208;
                }

                goto LABEL_206;
              }
            }

            v209 = *(void *)(a1 + 40);
            uint64_t v54 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"scheme"));
            __int16 v55 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"key"));
            v210 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"data"));
            sub_1000D5050(v209, v54, v55, v210, *(void **)(a1 + 48));
            goto LABEL_187;
          }
        }

      id v33 = v52;
      if (!v52)
      {
        id v33 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
        uint64_t v52 = v33;
      }

      id v34 = [*(id *)(a1 + 112) copy];
      -[NSMutableArray addObject:](v33, "addObject:", v34);

      uint64_t v31 = 1;
      goto LABEL_61;
    }

    __int128 v48 = v13;
    __int128 v49 = v17;
    __int16 v20 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 112) applicationIdentifier]);
    uint64_t v21 = v11;
    __int16 v22 = v21;
    __int128 v51 = v20;
    if (v20 == v21)
    {
    }

    else
    {
      BOOL v23 = v21;
      __int128 v50 = v20;
      if (!v21) {
        goto LABEL_55;
      }
      BOOL v23 = v21;
      __int128 v50 = v20;
      if (!v20) {
        goto LABEL_55;
      }
      uint64_t v24 = v20;
      __int128 v25 = [v20 isEqualToString:v21];

      if (!v25) {
        goto LABEL_57;
      }
    }

    __int128 v47 = a3;
    BOOL v23 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 112) keyIdentifier]);
    id v35 = v12;
    uint64_t v36 = v35;
    if (v23 == v35)
    {
    }

    else
    {
      if (!v35 || !v23)
      {
        __int128 v50 = v23;
LABEL_53:

LABEL_54:
        a3 = v47;
LABEL_55:

        BOOL v23 = v50;
        goto LABEL_56;
      }

      uint64_t v37 = [v23 isEqualToString:v35];

      if (!v37)
      {
        a3 = v47;
LABEL_56:

LABEL_57:
        id v43 = PKLogFacilityTypeGetObject(6LL);
        id v44 = (os_log_s *)objc_claimAutoreleasedReturnValue(v43);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 134218498;
          __int16 v55 = a3;
          id v56 = 2114;
          __int128 v57 = v22;
          __int128 v58 = 2114;
          __int128 v59 = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v44,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: WARNING IGNORING STANDALONE TRANSACTION OF TYPE %ld: EXPECTED: %{public}@ ACTUAL: %{pu blic}@! Please file a radar.",  buf,  0x20u);
        }

        uint64_t v31 = 0;
        uint64_t v13 = v48;
        unsigned int v17 = v49;
        goto LABEL_60;
      }
    }

    __int128 v50 = v23;
    HIDWORD(v46) = v19;
    BOOL v23 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 112) terminalReaderIdentifier]);
    __int128 v38 = v49;
    __int128 v39 = v38;
    if (v23 == v38)
    {
    }

    else
    {
      if (!v38 || !v23)
      {
        uint64_t v36 = v23;
LABEL_52:

        goto LABEL_53;
      }

      __int128 v40 = [v23 isEqualToString:v38];

      if (!v40) {
        goto LABEL_54;
      }
    }

    __int128 v39 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 112) passUniqueIdentifier]);
    __int128 v41 = v14;
    id v42 = v41;
    if (v39 == v41)
    {

      a3 = v47;
LABEL_50:

      uint64_t v13 = v48;
      unsigned int v17 = v49;
      goto LABEL_22;
    }

    if (v41 && v39)
    {
      LODWORD(v46) = [v39 isEqualToString:v41];

      a3 = v47;
      if ((v46 & 1) == 0) {
        goto LABEL_57;
      }
      goto LABEL_50;
    }

    uint64_t v36 = v39;
    goto LABEL_52;
  }

  __break(1u);
  return result;
}
}
}

    goto LABEL_27;
  }

  if ([v6 transactionType] == (id)3)
  {
    id v14 = PKLogFacilityTypeGetObject(23LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_26;
    }
    uint64_t v28 = 138412290;
    uint64_t v29 = v6;
    id v11 = "Not creating merchant transaction notification for peer payment transaction %@.";
LABEL_24:
    uint64_t v12 = v10;
    uint64_t v13 = 12;
    goto LABEL_25;
  }

  if (([v7 shouldReceiveNotificationsForPeerPaymentNotificationType:1] & 1) == 0)
  {
    uint64_t v16 = PKLogFacilityTypeGetObject(23LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_26;
    }
    uint64_t v28 = 138412290;
    uint64_t v29 = v6;
    id v11 = "Not creating merchant transaction notification for a purchase performed on an associated peer payment transaction %@.";
    goto LABEL_24;
  }

  if ([v6 transactionType] == (id)10)
  {
    id v15 = PKLogFacilityTypeGetObject(23LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_26;
    }
    uint64_t v28 = 138412290;
    uint64_t v29 = v6;
    id v11 = "Not creating transaction notification for bill payment transaction %@.";
    goto LABEL_24;
  }

  if ([v6 transactionType] == (id)14)
  {
    unsigned int v17 = PKLogFacilityTypeGetObject(23LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_26;
    }
    uint64_t v28 = 138412290;
    uint64_t v29 = v6;
    id v11 = "Not creating transaction notification for installment plan transaction %@.";
    goto LABEL_24;
  }

  id v18 = objc_claimAutoreleasedReturnValue([v8 associatedAccountServiceAccountIdentifier]);
  if (v18)
  {
    int v19 = (void *)v18;
    __int16 v20 = objc_claimAutoreleasedReturnValue([v6 amount]);
    if (v20)
    {
      uint64_t v21 = (void *)v20;
      __int16 v22 = (void *)objc_claimAutoreleasedReturnValue([v6 amount]);
      BOOL v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber zero](&OBJC_CLASS___NSDecimalNumber, "zero"));
      uint64_t v24 = [v22 isEqualToNumber:v23];

      if (!v24) {
        goto LABEL_19;
      }
    }

    else
    {
    }

    __int128 v26 = PKLogFacilityTypeGetObject(23LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_26;
    }
    uint64_t v28 = 138412290;
    uint64_t v29 = v6;
    id v11 = "Not creating merchant transaction notification for zero dollar amount transaction %@.";
    goto LABEL_24;
  }

  uint64_t v29 = 0LL;
LABEL_27:

LABEL_28:
  if (v6) {
LABEL_29:
  }
    -[PDNetworkTask reportError:](self, "reportError:", v6, v45);
LABEL_30:

  return v29;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  id result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

        id v9 = (v19 - 1) & v19;
        unsigned int v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
      __int16 v22 = *v21;
      BOOL v23 = v21[1];
      Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
      String.hash(into:)(v34, v22, v23);
      id result = Hasher._finalize()();
      uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
      __int128 v25 = result & ~v24;
      __int128 v26 = v25 >> 6;
      if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        id v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        id v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            __int128 v26 = 0LL;
          }
          v27 |= v29;
          int v30 = *(void *)(v11 + 8 * v26);
        }

        while (v30 == -1);
        id v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      id v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
      void *v15 = v22;
      v15[1] = v23;
      ++*(void *)(v6 + 16);
    }
  }

  id result = swift_release(v3);
  *id v2 = v6;
  return result;
}

        id v10 = (v19 - 1) & v19;
        unsigned int v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }

      uint64_t v21 = v4;
      __int16 v22 = (uint64_t *)(*(void *)(v4 + 48) + 32 * v17);
      BOOL v23 = *v22;
      uint64_t v24 = v22[1];
      __int128 v25 = v22[2];
      __int128 v26 = v22[3];
      Hasher.init(_seed:)(v38, *(void *)(v7 + 40));
      swift_bridgeObjectRetain(v24);
      String.hash(into:)(v38, v23, v24);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRetain(v26);
      String.hash(into:)(v38, v25, v26);
      swift_bridgeObjectRelease(v26);
      id result = Hasher._finalize()();
      id v27 = -1LL << *(_BYTE *)(v7 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        id v14 = __clz(__rbit64((-1LL << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        int v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }

          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0LL;
          }
          v30 |= v32;
          id v33 = *(void *)(v11 + 8 * v29);
        }

        while (v33 == -1);
        id v14 = __clz(__rbit64(~v33)) + (v29 << 6);
      }

      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
      id v15 = (void *)(*(void *)(v7 + 48) + 32 * v14);
      void *v15 = v23;
      v15[1] = v24;
      id v15[2] = v25;
      v15[3] = v26;
      ++*(void *)(v7 + 16);
      id v4 = v21;
    }
  }

  id result = swift_release(v4);
  void *v3 = v7;
  return result;
}

    id v10 = (v19 - 1) & v19;
    unsigned int v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    uint64_t v21 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v17);
    __int16 v22 = *v21;
    BOOL v23 = v21[1];
    Hasher.init(_seed:)(v33, *(void *)(v6 + 40));
    swift_bridgeObjectRetain(v23);
    String.hash(into:)(v33, v22, v23);
    id result = Hasher._finalize()();
    uint64_t v24 = -1LL << *(_BYTE *)(v6 + 32);
    __int128 v25 = result & ~v24;
    __int128 v26 = v25 >> 6;
    if (((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      id v14 = __clz(__rbit64((-1LL << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      id v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          __int128 v26 = 0LL;
        }
        v27 |= v29;
        int v30 = *(void *)(v11 + 8 * v26);
      }

      while (v30 == -1);
      id v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    id v15 = (void *)(*(void *)(v6 + 48) + 16 * v14);
    void *v15 = v22;
    v15[1] = v23;
    ++*(void *)(v6 + 16);
  }

  __int16 v20 = v18 + 3;
  if (v20 >= v32)
  {
LABEL_36:
    id result = swift_release_n(v3, 2LL);
    id v2 = v31;
    goto LABEL_38;
  }

  int v19 = *(void *)(v8 + 8 * v20);
  if (v19)
  {
    uint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v32) {
      goto LABEL_36;
    }
    int v19 = *(void *)(v8 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

    id v10 = (v19 - 1) & v19;
    unsigned int v17 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_27:
    uint64_t v21 = (uint64_t *)(*(void *)(v4 + 48) + 32 * v17);
    __int16 v22 = *v21;
    BOOL v23 = v21[1];
    uint64_t v24 = v21[2];
    __int128 v25 = v21[3];
    Hasher.init(_seed:)(v36, *(void *)(v7 + 40));
    swift_bridgeObjectRetain_n(v23, 2LL);
    swift_bridgeObjectRetain(v25);
    String.hash(into:)(v36, v22, v23);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRetain(v25);
    String.hash(into:)(v36, v24, v25);
    swift_bridgeObjectRelease(v25);
    id result = Hasher._finalize()();
    __int128 v26 = -1LL << *(_BYTE *)(v7 + 32);
    id v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1LL << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      id v14 = __clz(__rbit64((-1LL << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0LL;
    }

    else
    {
      uint64_t v29 = 0;
      int v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }

        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0LL;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v11 + 8 * v28);
      }

      while (v32 == -1);
      id v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }

    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v14;
    id v15 = (void *)(*(void *)(v7 + 48) + 32 * v14);
    void *v15 = v22;
    v15[1] = v23;
    id v15[2] = v24;
    v15[3] = v25;
    ++*(void *)(v7 + 16);
  }

  __int16 v20 = v18 + 3;
  if (v20 >= v35)
  {
LABEL_36:
    id result = swift_release_n(v4, 2LL);
    id v3 = v33;
    goto LABEL_38;
  }

  int v19 = *(void *)(v34 + 8 * v20);
  if (v19)
  {
    uint64_t v13 = v20;
    goto LABEL_26;
  }

  while (1)
  {
    uint64_t v13 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v13 >= v35) {
      goto LABEL_36;
    }
    int v19 = *(void *)(v34 + 8 * v13);
    ++v20;
    if (v19) {
      goto LABEL_26;
    }
  }

uint64_t sub_100083B08(void *a1)
{
  if ([*(id *)(a1[4] + 8) passExistsWithUniqueID:a1[5]]) {
    [*(id *)(a1[4] + 8) insertMerchant:a1[6] forPassUniqueIdentifier:a1[5] auxiliaryPassInformationItemIdentifier:a1[7]];
  }
  return 1LL;
}

uint64_t sub_100083F04(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 item]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 identifier]);
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = v4;
  id v7 = v5;
  uint64_t v8 = v7;
  if (v6 == v7)
  {
    uint64_t v9 = 1LL;
  }

  else
  {
    uint64_t v9 = 0LL;
    if (v6 && v7) {
      uint64_t v9 = (uint64_t)[v6 isEqualToString:v7];
    }
  }

  return v9;
}

void sub_100083F94(uint64_t a1, void *a2)
{
  id v3 = a2;
  [v3 setUseDisplayNameIgnoringBrand:1];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100084150(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 merchant]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v3 brand]);
  id v6 = [v3 result];

  uint64_t Object = PKLogFacilityTypeGetObject(0LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) identifier]);
    int v11 = 138413058;
    uint64_t v12 = v9;
    __int16 v13 = 2048;
    id v14 = v6;
    __int16 v15 = 2112;
    uint64_t v16 = v4;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PDAuxiliaryPassInformationManager: Completed look up of maps data for aux item %@ with result %ld. Maps merchant: %@, maps brand: %@",  (uint8_t *)&v11,  0x2Au);
  }

  id v10 = objc_alloc_init(&OBJC_CLASS___PKMerchant);
  -[PKMerchant setMapsMerchant:](v10, "setMapsMerchant:", v4);
  -[PKMerchant setMapsBrand:](v10, "setMapsBrand:", v5);
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_10008462C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100084644(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100084654(uint64_t a1)
{
}

uint64_t sub_10008465C(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 56)) initWithAccessory:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  if (!v2) {
    goto LABEL_10;
  }
  id v3 = [*(id *)(a1 + 32) type];
  if (v3 == (id)2)
  {
    id v4 = &OBJC_CLASS___TileAccessoryImage;
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accessoryTypeImage]);
    goto LABEL_8;
  }

  if (v3 == (id)1)
  {
    id v4 = &OBJC_CLASS___TileAccessorySpinner;
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accessoryTypeSpinner]);
LABEL_8:
    id v6 = (void *)v5;
    id v7 = (void *)objc_claimAutoreleasedReturnValue( -[__objc2_class insertAccessory:forBaseAccessory:inDatabase:]( v4,  "insertAccessory:forBaseAccessory:inDatabase:",  v5,  v2,  *(void *)(a1 + 40)));

    if (v7) {
      goto LABEL_9;
    }
LABEL_10:
    uint64_t v8 = 0LL;
    goto LABEL_11;
  }

  if (!v3)
  {
    id v4 = &OBJC_CLASS___TileAccessoryButton;
    uint64_t v5 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accessoryTypeButton]);
    goto LABEL_8;
  }

void sub_100084A80(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  [v5 setOrder:a3];
  id v6 = (id)objc_claimAutoreleasedReturnValue( +[PaymentTransactionAmountModifier insertPaymentTransactionAmountModifier:forPaymentTransactionPID:inDatabase:]( &OBJC_CLASS___PaymentTransactionAmountModifier,  "insertPaymentTransactionAmountModifier:forPaymentTransactionPID:inDatabase:",  v5,  *(void *)(a1 + 48),  *(void *)(a1 + 32)));

  [*(id *)(a1 + 40) safelyAddObject:v6];
}

void sub_100084DA0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  uint64_t v12 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionAmountModifier);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v12 withProperties:v6 values:a4];
  id v7 = *(void **)(a1 + 48);
  uint64_t v8 = *(void *)(a4 + 8 * (void)[v6 indexOfObject:@"amount"]);
  uint64_t v9 = *(void *)(a4 + 8 * (void)[v6 indexOfObject:@"currency"]);
  id v10 = [v6 indexOfObject:@"exponent"];

  int v11 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v7,  "_postProcessedAmountForDecimalAmount:currency:exponent:",  v8,  v9,  objc_msgSend(*(id *)(a4 + 8 * (void)v10), "integerValue")));
  -[PKPaymentTransactionAmountModifier setAmount:](v12, "setAmount:", v11);

  [*(id *)(a1 + 40) safelyAddObject:v12];
}

void sub_100085164(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  int v11 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionAmountModifier);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v11 withProperties:v6 values:a4];
  id v7 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 48),  "_postProcessedAmountForDecimalAmount:currency:exponent:",  *(void *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"amount")),  *(void *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"currency")),  objc_msgSend( *(id *)(a4 + 8 * (void)objc_msgSend(v6, "indexOfObject:", @"exponent")),  "integerValue")));
  -[PKPaymentTransactionAmountModifier setAmount:](v11, "setAmount:", v7);

  id v8 = [v6 count];
  id v9 = *(id *)(a4 + 8LL * (void)v8 - 8);
  id v10 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) objectForKey:v9]);
  if (!v10)
  {
    id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    [*(id *)(a1 + 40) setObject:v10 forKey:v9];
  }

  -[NSMutableArray addObject:](v10, "addObject:", v11);
}

void sub_100085728(id a1, PKPaymentTransactionAmountModifier *a2, id a3)
{
}

void sub_100085730(id a1, PKPaymentTransactionAmountModifier *a2, id a3)
{
}

void sub_100085738(id a1, PKPaymentTransactionAmountModifier *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentTransactionAmountModifier setOrder:](v4, "setOrder:", [a3 integerValue]);
}

void sub_100085D58(id a1, PKFeatureApplicationInvitationDetails *a2, id a3)
{
}

void sub_100085D60(id a1, PKFeatureApplicationInvitationDetails *a2, id a3)
{
}

void sub_100085D68(id a1, PKFeatureApplicationInvitationDetails *a2, id a3)
{
  id v4 = a2;
  -[PKFeatureApplicationInvitationDetails setAccountUserAccessLevel:]( v4,  "setAccountUserAccessLevel:",  [a3 integerValue]);
}

void sub_100085DAC(id a1, PKFeatureApplicationInvitationDetails *a2, id a3)
{
}

void sub_100085DB4(id a1, PKFeatureApplicationInvitationDetails *a2, id a3)
{
}

void sub_100085DBC(id a1, PKFeatureApplicationInvitationDetails *a2, id a3)
{
}

void sub_100085DC4(id a1, PKFeatureApplicationInvitationDetails *a2, id a3)
{
}

void sub_100085EA8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_100086088(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = -[NSNumber initWithLongLong:](objc_alloc(&OBJC_CLASS___NSNumber), "initWithLongLong:", a2);
  [v2 addObject:v3];
}

void sub_100086300( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100086318(uint64_t a1, sqlite3_stmt *a2)
{
  int v5 = 1;
  [*(id *)(a1 + 32) bindToSelectStatement:a2 bindingIndex:&v5];
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    id v4 = SQLiteCopyFoundationIntegerValueForStatementColumn(a2, 0);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = -[NSNumber integerValue](v4, "integerValue");
  }

void sub_10008645C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100086474(uint64_t a1, sqlite3_stmt *a2)
{
  int v5 = 1;
  [*(id *)(a1 + 32) bindToSelectStatement:a2 bindingIndex:&v5];
  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    id v4 = SQLiteCopyFoundationNumberValueForStatementColumn(a2, 0);
    *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = -[NSNumber BOOLValue](v4, "BOOLValue");
  }

void sub_100086760( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_100086780(uint64_t a1, sqlite3_stmt *a2)
{
  int v6 = 1;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) predicate]);
  [v4 bindToStatement:a2 bindingIndex:&v6];

  uint64_t result = sub_1002CC754((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2);
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = result;
  return result;
}

void sub_100086890( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

uint64_t sub_1000868A8(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(a1 + 32) + 16) entityClass];
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_100086928;
  v4[3] = &unk_10063E760;
  id v6 = v2;
  __int128 v5 = *(_OWORD *)(a1 + 32);
  [(id)v5 enumeratePersistentIDsUsingBlock:v4];
  return *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL);
}

void sub_100086928(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(*(void *)(a1 + 32) + 8)];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v6 deleteFromDatabase];
  *a4 = *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) ^ 1;
}

uint64_t sub_100086A1C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_100086AF4(uint64_t a1, sqlite3_stmt *a2)
{
  int v16 = 1;
  [*(id *)(a1 + 32) bindToSelectStatement:a2 bindingIndex:&v16];
  id v4 = (char *)[*(id *)(a1 + 40) count];
  __int128 v5 = v4;
  if (v4) {
    id v6 = (void **)calloc((size_t)v4, 8uLL);
  }
  else {
    id v6 = 0LL;
  }
  uint64_t v7 = 0LL;
  do
  {
    if (v5)
    {
      for (uint64_t i = 0LL; i != v5; ++i)
      {
        id v9 = SQLiteCopyFoundationValueForStatementColumn(a2, (int)i + 1);
        id v10 = v6[(void)i];
        v6[(void)i] = v9;
      }
    }

    char v15 = 0;
    uint64_t v11 = *(void *)(a1 + 48);
    sqlite3_int64 v12 = sqlite3_column_int64(a2, 0);
    (*(void (**)(uint64_t, sqlite3_int64, void, void **, uint64_t, char *))(v11 + 16))( v11,  v12,  *(void *)(a1 + 40),  v6,  v7++,  &v15);
  }

  while (!v15);
  if (v6)
  {
    if (v5)
    {
      __int16 v13 = v6;
      do
      {
        id v14 = *v13;
        *v13++ = 0LL;

        --v5;
      }

      while (v5);
    }

    free(v6);
  }

void sub_100086CE8(uint64_t a1, sqlite3_stmt *a2)
{
  int v13 = 1;
  [*(id *)(a1 + 32) bindToSelectStatement:a2 bindingIndex:&v13];
  id v4 = (char *)[*(id *)(a1 + 40) count];
  __int128 v5 = v4;
  if (v4) {
    id v6 = (void **)calloc((size_t)v4, 8uLL);
  }
  else {
    id v6 = 0LL;
  }
  uint64_t v7 = 0LL;
  while (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    if (v5)
    {
      for (uint64_t i = 0LL; i != v5; ++i)
      {
        id v9 = SQLiteCopyFoundationValueForStatementColumn(a2, (int)i);
        id v10 = v6[(void)i];
        v6[(void)i] = v9;
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    ++v7;
  }

  if (v6)
  {
    if (v5)
    {
      uint64_t v11 = v6;
      do
      {
        sqlite3_int64 v12 = *v11;
        *v11++ = 0LL;

        --v5;
      }

      while (v5);
    }

    free(v6);
  }

void sub_100087854( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_10008786C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10008787C(uint64_t a1)
{
}

void sub_100087884(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  id v6 = [objc_alloc(*(Class *)(a1 + 48)) initWithPersistentID:a2 inDatabase:*(void *)(a1 + 32)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  *a4 = 1;
}

void sub_100087B7C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

void sub_100087B9C(uint64_t a1, sqlite3_stmt *a2)
{
  int v8 = 1;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) predicate]);
  [v4 bindToStatement:a2 bindingIndex:&v8];

  if (sub_1002CC8D8((uint64_t)&OBJC_CLASS___SQLiteDatabase, a2))
  {
    __int128 v5 = SQLiteCopyFoundationValueForStatementColumn(a2, 0);
    uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8LL);
    uint64_t v7 = *(void **)(v6 + 40);
    *(void *)(v6 + 40) = v5;
  }

void sub_100088010( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_100088028(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_100088038(uint64_t a1)
{
}

BOOL sub_100088040(uint64_t a1)
{
  id v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [*(id *)(a1 + 32) persistentID]));
  -[NSMutableDictionary setValue:forKey:](v2, "setValue:forKey:", v3, @"applet_subcredential_pid");

  id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( &OBJC_CLASS___NSNumber,  "numberWithUnsignedInteger:",  *(void *)(a1 + 72)));
  -[NSMutableDictionary setValue:forKey:](v2, "setValue:forKey:", v4, @"ranging_suspension_reasons");

  __int128 v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithLongLong:]( NSNumber,  "numberWithLongLong:",  [*(id *)(a1 + 40) persistentID]));
  -[NSMutableDictionary setValue:forKey:](v2, "setValue:forKey:", v5, @"payment_application_pid");

  id v6 = [*(id *)(a1 + 48) initWithPropertyValues:v2 inDatabase:*(void *)(a1 + 56)];
  uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8LL);
  int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  BOOL v9 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL) != 0LL;
  return v9;
}

void sub_100088334( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_100088358(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v6 = *a4;
  id v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  if (v6 == v7)
  {
    id v8 = 0LL;
  }

  else
  {
    BOOL v9 = v7;
    id v8 = [*a4 unsignedIntegerValue];
    id v7 = v9;
  }

  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v8;
}

id sub_100088DF0(uint64_t a1, void *a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "INFamilyDidChangeNotification notification fired",  v6,  2u);
  }

  return [a2 ensureZoneShareIntegrity];
}

id sub_100088F58(uint64_t a1)
{
  id result = objc_msgSend(*(id *)(a1 + 32), "_queue_canInvalidateContainer");
  if ((_DWORD)result)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v5 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreContainer: No accounts remaining, invalidating.",  v5,  2u);
    }

    return [*(id *)(a1 + 32) invalidateCloudStoreWithOperationGroupNameSuffix:*(void *)(a1 + 40) clearCache:*(unsigned __int8 *)(a1 + 48) completion:0];
  }

  return result;
}

void sub_100089878(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100089938;
  block[3] = &unk_100639350;
  void block[4] = *(void *)(a1 + 32);
  id v11 = v5;
  id v12 = v6;
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
}

void sub_100089938(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 40) supportsDeviceToDeviceEncryption];
  PKSharedCacheSetBoolForKey(v2, PKSharedCachePeerPaymentSupportsManatee);
  id v3 = [*(id *)(a1 + 40) accountStatus];
  id v4 = *(void **)(a1 + 40);
  if (v4) {
    BOOL v5 = v3 == (id)1;
  }
  else {
    BOOL v5 = 0;
  }
  if (!v5)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)id buf = 138412290;
      uint64_t v22 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Error: Cannot setup container with error: %@",  buf,  0xCu);
    }

    [*(id *)(a1 + 32) setNextExpectedState:3];
    [*(id *)(a1 + 32) setOperationError:*(void *)(a1 + 48)];
LABEL_16:
    objc_msgSend( *(id *)(a1 + 32),  "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:",  3,  PKCloudStoreOperationGroupSuffixCKAccountChangedNotification,  0,  0);
    return;
  }

  if (![v4 supportsDeviceToDeviceEncryption])
  {
    uint64_t v11 = PKLogFacilityTypeGetObject(9LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v11);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Error: Cannot setup container because account does not support device to device encryption (HSA2)",  buf,  2u);
    }

    [*(id *)(a1 + 32) setNextExpectedState:3];
    int v13 = *(void **)(a1 + 32);
    id v14 = (void *)objc_claimAutoreleasedReturnValue( [v13 errorWithCode:-4005 description:@"Cannot setup container because account does not support device to device encryption"]);
    [v13 setOperationError:v14];

    goto LABEL_16;
  }

  if ([*(id *)(a1 + 32) cloudContainerSetupInProgress])
  {
    uint64_t v9 = PKLogFacilityTypeGetObject(9LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "A cloud store initialization is already in progess.",  buf,  2u);
    }
  }

  else
  {
    id v15 = [*(id *)(a1 + 32) nextExpectedState];
    uint64_t v16 = PKLogFacilityTypeGetObject(9LL);
    __int16 v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (v15 == (id)15)
    {
      if (v18)
      {
        *(_WORD *)id buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "The container is already setup; no need to initalize it again.",
          buf,
          2u);
      }
    }

    else
    {
      if (v18)
      {
        *(_WORD *)id buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "The user supports device to device encryption. Trying to setup container.",  buf,  2u);
      }

      int v19 = *(void **)(a1 + 32);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472LL;
      v20[2] = sub_100089C24;
      v20[3] = &unk_10063AFC0;
      void v20[4] = v19;
      [v19 initialCloudDatabaseSetupWithOperationGroupNameSuffix:PKCloudStoreOperationGroupSuffixCKAccountChangedNotification completion:v20];
    }
  }

void sub_100089C24(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = @"NO";
    if (a2) {
      uint64_t v8 = @"YES";
    }
    int v10 = 138543618;
    uint64_t v11 = v8;
    __int16 v12 = 2112;
    id v13 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreContainer: Finished cloud database setup with success %{public}@, error: %@",  (uint8_t *)&v10,  0x16u);
  }

  if (a2)
  {
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
    [v9 cloudStoreContainerShouldUnscheduleAllBackgroundActivities:*(void *)(a1 + 32)];

    [*(id *)(a1 + 32) _updateFetchTaskScheduledActivityIfNeccessary];
    [*(id *)(a1 + 32) _updateUnarchivedTransactionsScheduledActivityIfNeccessary];
  }
}

void sub_10008A460(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_10008A544;
  v15[3] = &unk_10063E850;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void **)(a1 + 40);
  id v16 = v5;
  uint64_t v17 = v8;
  id v10 = v9;
  __int16 v12 = *(void **)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  id v18 = v10;
  uint64_t v21 = v11;
  id v19 = v6;
  id v20 = v12;
  id v13 = v6;
  id v14 = v5;
  dispatch_async(v7, v15);
}

id sub_10008A544(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) supportsDeviceToDeviceEncryption];
  PKSharedCacheSetBoolForKey(v2, PKSharedCachePeerPaymentSupportsManatee);
  id v3 = [*(id *)(a1 + 32) accountStatus];
  id v4 = *(void **)(a1 + 32);
  if (v4) {
    BOOL v5 = v3 == (id)1;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    if ([v4 supportsDeviceToDeviceEncryption])
    {
      [*(id *)(a1 + 40) setNextExpectedState:5];
      return objc_msgSend( *(id *)(a1 + 40),  "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:",  5,  *(void *)(a1 + 48),  *(void *)(a1 + 72),  *(void *)(a1 + 64));
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v14) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Error: Cannot setup container because account does not support device to device encryption",  (uint8_t *)&v14,  2u);
    }

    [*(id *)(a1 + 40) setNextExpectedState:3];
    __int16 v12 = *(void **)(a1 + 40);
    id v13 = (void *)objc_claimAutoreleasedReturnValue( [v12 errorWithCode:-4005 description:@"Cannot setup container because account does not support device to device encryption"]);
    [v12 setOperationError:v13];
  }

  else
  {
    uint64_t v6 = PKLogFacilityTypeGetObject(9LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 56);
      int v14 = 138412290;
      uint64_t v15 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Error: Cannot setup container with error: %@",  (uint8_t *)&v14,  0xCu);
    }

    [*(id *)(a1 + 40) setNextExpectedState:3];
    [*(id *)(a1 + 40) setOperationError:*(void *)(a1 + 56)];
  }

  return objc_msgSend( *(id *)(a1 + 40),  "_queue_setContainerState:operationGroupNameSuffix:retryCount:completion:",  3,  *(void *)(a1 + 48),  *(void *)(a1 + 72),  *(void *)(a1 + 64));
}

void sub_10008AD24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_autoreleasePoolPush();
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 allObjects]);
  id v9 = objc_msgSend(v8, "pk_createArrayByApplyingBlock:", &stru_10063E8B8);

  uint64_t v10 = a1;
  if ([v9 count]) {
    [*(id *)(a1 + 32) reportContainerChangeSignpostEventType:34 stateName:0 objectNames:v9 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
  }

  objc_autoreleasePoolPop(v7);
  __int128 v65 = 0u;
  __int128 v66 = 0u;
  __int128 v64 = 0u;
  __int128 v63 = 0u;
  obuint64_t j = v6;
  id v11 = [obj countByEnumeratingWithState:&v63 objects:v71 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v55 = *(void *)v64;
    id v48 = (id)PKCloudTransactionRecordType;
    uint64_t v47 = PKCloudStoreOperationGroupPushTriggered;
    uint64_t v46 = PKCloudStoreOperationGroupSuffixRecordFetch;
    uint64_t v54 = a1;
    id v51 = v5;
    do
    {
      id v13 = 0LL;
      id v52 = v12;
      do
      {
        if (*(void *)v64 != v55) {
          objc_enumerationMutation(obj);
        }
        int v14 = *(void **)(*((void *)&v63 + 1) + 8LL * (void)v13);
        uint64_t v15 = objc_autoreleasePoolPush();
        id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 recordID]);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 recordName]);

        id v18 = (void *)objc_claimAutoreleasedReturnValue([v14 recordType]);
        if ([*(id *)(v10 + 32) _isTransactionItemFromRecordType:v18])
        {
          id v56 = v15;
          id v19 = (void *)objc_claimAutoreleasedReturnValue( +[PKPaymentTransaction recordNamePrefix]( &OBJC_CLASS___PKPaymentTransaction,  "recordNamePrefix"));
          id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue( [v17 stringByReplacingOccurrencesOfString:v19 withString:&stru_100662310]);

          uint64_t v21 = *(void **)(v10 + 32);
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v14 recordID]);
          BOOL v23 = (os_log_s *)objc_claimAutoreleasedReturnValue( [v21 _transactionSourceIdentifierForTransactionRecordID:v22 recordType:v18 databaseIdentifier:v5]);

          if (v23)
          {
            uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v10 + 32) dataSource]);
            __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v24 transactionWithServiceIdentifier:v20 transactionSourceIdentifier:v23]);

            [v25 addUpdateReasons:16];
            uint64_t Object = PKLogFacilityTypeGetObject(9LL);
            id v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
            BOOL v28 = os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
            if (v25)
            {
              if (v28)
              {
                uint64_t v29 = (os_log_s *)objc_claimAutoreleasedReturnValue([v25 serviceIdentifier]);
                *(_DWORD *)id buf = 138412546;
                __int128 v68 = (os_log_s *)v25;
                __int16 v69 = 2114;
                __int128 v70 = v29;
                _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Deleting transaction in local database %@ with service identifier %{public}@",  buf,  0x16u);
              }

              int v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v54 + 32) dataSource]);
              id v31 =  [v30 insertOrUpdatePaymentTransaction:v25 withTransactionSourceIdentifier:v23 transactionArchive:0 originDevice ID:0 insertionMode:2 performTruncation:1];

              uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue( +[PKPaymentTransaction recordNamePrefix]( &OBJC_CLASS___PKPaymentTransaction,  "recordNamePrefix"));
              id v33 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@",  v32,  v17));

              v61[0] = _NSConcreteStackBlock;
              v61[1] = 3221225472LL;
              v61[2] = sub_10008B4F4;
              v61[3] = &unk_10063E8E0;
              __int128 v62 = v20;
              if ((objc_msgSend(obj, "pk_hasObjectPassingTest:", v61) & 1) == 0)
              {
                id v34 = v18;
                if (v34 != v48)
                {
                  id v35 = v34;
                  if (v34 && v48)
                  {
                    unsigned int v49 = objc_msgSend(v34, "isEqualToString:");

                    if (!v49) {
                      goto LABEL_37;
                    }
LABEL_33:
                    __int128 v50 = (void *)objc_claimAutoreleasedReturnValue([v14 recordID]);
                    uint64_t v45 = (void *)objc_claimAutoreleasedReturnValue([v50 zoneID]);
                    id v35 = (void *)objc_claimAutoreleasedReturnValue([v45 zoneName]);

                    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)id buf = 138543618;
                      __int128 v68 = v33;
                      __int16 v69 = 2114;
                      __int128 v70 = (os_log_s *)v35;
                      _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "Deleting transaction device record %{public}@ in zone %{public}@",  buf,  0x16u);
                    }

                    [*(id *)(v54 + 32) removeRecordWithRecordName:v33 zoneName:v35 groupName:v47 groupNameSuffix:v46 qualityOfService:17 completion:0];
                  }

                  goto LABEL_37;
                }

                goto LABEL_33;
              }

LABEL_40:
        uint64_t v15 = v56;
LABEL_41:

        objc_autoreleasePoolPop(v15);
        id v13 = (char *)v13 + 1;
      }

      while (v12 != v13);
      id v12 = [obj countByEnumeratingWithState:&v63 objects:v71 count:16];
    }

    while (v12);
  }
}

        uint64_t v55 = 0LL;
        goto LABEL_41;
      }
    }
  }

              _Block_object_dispose(&buf, 8);
              goto LABEL_41;
            }
          }

          id v19 = (os_log_s *)objc_claimAutoreleasedReturnValue( [v17 decimalNumberBySubtracting:*(void *)(*((void *)&buf + 1) + 40)]);
          __int128 v25 = (void *)objc_claimAutoreleasedReturnValue( [a1[5] _paymentDueNotificationsForAccount:a1[4] estimatedRemainingMinimumPayment:v19]);
          -[NSMutableArray addObjectsFromArray:](v47, "addObjectsFromArray:", v25);

          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          {
            __int128 v26 = *((unsigned __int8 *)v75 + 24);
            id v27 = *((unsigned __int8 *)v71 + 24);
            BOOL v28 = [v44 count];
            *(_DWORD *)id v82 = 67109891;
            *(_DWORD *)id v83 = v26;
            *(_WORD *)&v83[4] = 1024;
            *(_DWORD *)&v83[6] = v27;
            id v84 = 2048;
            uint64_t v85 = v28;
            id v86 = 2113;
            v87 = v19;
            _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Scheduling 'Payment Reminder' notifications with minimumPaymentMet: %d, statementBalanceMet: %d, numPaymen ts: %lu, estimatedRemainingMinimumPayment: %{private}@",  v82,  0x22u);
          }

          goto LABEL_40;
        }
      }

      else
      {
        uint64_t v73 = 0;
      }

              __break(1u);
              return result;
            }
          }

          else
          {
            id v27 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
            if (v27) {
              goto LABEL_22;
            }
          }

          swift_bridgeObjectRelease(v7);
LABEL_37:
          swift_unknownObjectRetain(v5);
          __int128 v50 = swift_bridgeObjectRetain(v26);
          sub_100433E18(v50, v5);
          swift_bridgeObjectRelease_n(v26, 2LL);
          return swift_unknownObjectRelease_n(v5, 2LL);
        }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

id sub_10008B4B8(id a1, PKCloudDeletedRecord *a2)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue(-[PKCloudDeletedRecord recordID](a2, "recordID"));
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 recordName]);

  return v3;
}

uint64_t sub_10008B4F4(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 recordName]);
  id v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

void sub_10008B574(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Deleted event with identifier %@",  (uint8_t *)&v5,  0xCu);
  }
}

void sub_10008B61C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  int v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 32);
      int v12 = 138412546;
      uint64_t v13 = v7;
      __int16 v14 = 2112;
      id v15 = v3;
      uint64_t v8 = "Failed to delete account with identifier %@, error: %@";
      id v9 = v5;
      uint32_t v10 = 22;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v12, v10);
    }
  }

  else if (v6)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v11;
    uint64_t v8 = "Deleted account with identifier %@";
    id v9 = v5;
    uint32_t v10 = 12;
    goto LABEL_6;
  }
}

void sub_10008BBDC(_Unwind_Exception *a1)
{
}

uint64_t sub_10008BBF8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_10008BC08(uint64_t a1)
{
}

void sub_10008BC10(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  BOOL v6 = *(void **)(a1 + 32);
  id v7 = a3;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 containerManager]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 databaseForIdentifier:v5]);

  id v10 = [[PDCloudStoreCounterpartRecordParser alloc] initWithDataSource:*(void *)(a1 + 32)];
  [v10 addRecords:v7];

  if (([*(id *)(a1 + 40) storeChangesInDatabase] & 1) != 0
    || [*(id *)(a1 + 40) returnRecords])
  {
    uint64_t v11 = *(void **)(a1 + 48);
    v82[0] = _NSConcreteStackBlock;
    v82[1] = 3221225472LL;
    v82[2] = sub_10008C1A4;
    v82[3] = &unk_10063E930;
    v82[4] = *(void *)(a1 + 32);
    id v12 = v10;
    id v83 = v12;
    uint64_t v13 = &v84;
    id v84 = *(id *)(a1 + 40);
    id v14 = v5;
    id v85 = v14;
    id v86 = *(id *)(a1 + 56);
    [v11 addOperation:v82];
    id v15 = *(void **)(a1 + 48);
    v77[0] = _NSConcreteStackBlock;
    v77[1] = 3221225472LL;
    v77[2] = sub_10008C2B4;
    v77[3] = &unk_10063E930;
    v77[4] = *(void *)(a1 + 32);
    id v16 = v12;
    id v78 = v16;
    id v79 = *(id *)(a1 + 40);
    id v17 = v14;
    id v80 = v17;
    id v81 = *(id *)(a1 + 56);
    [v15 addOperation:v77];
    id v18 = *(void **)(a1 + 48);
    v72[0] = _NSConcreteStackBlock;
    v72[1] = 3221225472LL;
    v72[2] = sub_10008C3C4;
    v72[3] = &unk_10063E930;
    v72[4] = *(void *)(a1 + 32);
    id v19 = v16;
    id v73 = v19;
    id v74 = *(id *)(a1 + 40);
    id v20 = v17;
    id v75 = v20;
    id v76 = *(id *)(a1 + 56);
    [v18 addOperation:v72];
    uint64_t v21 = *(void **)(a1 + 48);
    v67[0] = _NSConcreteStackBlock;
    v67[1] = 3221225472LL;
    v67[2] = sub_10008C4D4;
    v67[3] = &unk_10063E930;
    v67[4] = *(void *)(a1 + 32);
    id v22 = v19;
    id v68 = v22;
    id v69 = *(id *)(a1 + 40);
    id v23 = v20;
    id v70 = v23;
    id v71 = *(id *)(a1 + 56);
    [v21 addOperation:v67];
    uint64_t v24 = *(void **)(a1 + 48);
    v61[0] = _NSConcreteStackBlock;
    v61[1] = 3221225472LL;
    v61[2] = sub_10008C5E4;
    v61[3] = &unk_10063E980;
    void v61[4] = *(void *)(a1 + 32);
    id v25 = v22;
    id v62 = v25;
    id v63 = *(id *)(a1 + 40);
    id v26 = v23;
    uint64_t v27 = *(void *)(a1 + 80);
    id v64 = v26;
    uint64_t v66 = v27;
    id v65 = *(id *)(a1 + 56);
    [v24 addOperation:v61];
    BOOL v28 = *(void **)(a1 + 48);
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472LL;
    v53[2] = sub_10008C764;
    v53[3] = &unk_10063E9D0;
    v53[4] = *(void *)(a1 + 32);
    id v29 = v25;
    id v54 = v29;
    id v55 = *(id *)(a1 + 40);
    id v30 = v26;
    id v56 = v30;
    id v31 = *(id *)(a1 + 64);
    uint64_t v32 = *(void *)(a1 + 88);
    uint64_t v33 = *(void *)(a1 + 72);
    id v57 = v31;
    uint64_t v59 = v33;
    uint64_t v60 = v32;
    id v58 = *(id *)(a1 + 56);
    [v28 addOperation:v53];
    id v34 = *(void **)(a1 + 48);
    v48[0] = _NSConcreteStackBlock;
    v48[1] = 3221225472LL;
    v48[2] = sub_10008C9DC;
    v48[3] = &unk_10063E930;
    id v35 = &v83;
    v48[4] = *(void *)(a1 + 32);
    id v49 = v29;
    id v50 = v30;
    id v51 = *(id *)(a1 + 40);
    id v52 = *(id *)(a1 + 56);
    [v34 addOperation:v48];

    uint64_t v36 = v85;
  }

  else
  {
    if ([*(id *)(a1 + 40) requestType] != (id)6) {
      goto LABEL_5;
    }
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472LL;
    v45[2] = sub_10008CB04;
    v45[3] = &unk_10063EA20;
    void v45[4] = *(void *)(a1 + 32);
    id v35 = &v46;
    id v37 = v9;
    id v46 = v37;
    uint64_t v13 = (id *)v47;
    id v38 = v5;
    uint64_t v39 = *(void *)(a1 + 80);
    v47[0] = v38;
    v47[1] = v39;
    [v10 enumerateKeysAndObjectsForItemType:1 usingBlock:v45];
    v43[0] = _NSConcreteStackBlock;
    v43[1] = 3221225472LL;
    v43[2] = sub_10008CE64;
    v43[3] = &unk_10063EA70;
    v43[4] = *(void *)(a1 + 32);
    id v40 = v37;
    id v44 = v40;
    [v10 enumerateKeysAndObjectsForItemType:9 usingBlock:v43];
    v41[0] = _NSConcreteStackBlock;
    v41[1] = 3221225472LL;
    v41[2] = sub_10008D218;
    v41[3] = &unk_10063EA70;
    v41[4] = *(void *)(a1 + 32);
    id v42 = v40;
    [v10 enumerateKeysAndObjectsForItemType:10 usingBlock:v41];

    uint64_t v36 = v44;
  }

LABEL_5:
}

void sub_10008C1A4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_10008C280;
  v15[3] = &unk_10063E908;
  id v12 = *(id *)(a1 + 64);
  id v17 = v6;
  id v18 = v7;
  id v16 = v12;
  id v13 = v6;
  id v14 = v7;
  [v8 _processShareWithRecordParser:v9 request:v10 databaseIdentifier:v11 completion:v15];
}

uint64_t sub_10008C280(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10008C2B4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_10008C390;
  v15[3] = &unk_10063E908;
  id v12 = *(id *)(a1 + 64);
  id v17 = v6;
  id v18 = v7;
  id v16 = v12;
  id v13 = v6;
  id v14 = v7;
  [v8 _processZoneShareLockWithRecordParser:v9 request:v10 databaseIdentifier:v11 completion:v15];
}

uint64_t sub_10008C390(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10008C3C4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_10008C4A0;
  v15[3] = &unk_10063E908;
  id v12 = *(id *)(a1 + 64);
  id v17 = v6;
  id v18 = v7;
  id v16 = v12;
  id v13 = v6;
  id v14 = v7;
  [v8 _processRecurringPaymentsWithRecordParser:v9 request:v10 databaseIdentifier:v11 completion:v15];
}

uint64_t sub_10008C4A0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10008C4D4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_10008C5B0;
  v15[3] = &unk_10063E908;
  id v12 = *(id *)(a1 + 64);
  id v17 = v6;
  id v18 = v7;
  id v16 = v12;
  id v13 = v6;
  id v14 = v7;
  [v8 _processCounterpartImageDataWithRecordParser:v9 request:v10 databaseIdentifier:v11 completion:v15];
}

uint64_t sub_10008C5B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10008C5E4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v9 = (void *)a1[4];
  uint64_t v8 = (void *)a1[5];
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  id v17[2] = sub_10008C704;
  v17[3] = &unk_10063E958;
  void v17[4] = v9;
  id v18 = v8;
  id v19 = (id)a1[6];
  id v12 = (id)a1[7];
  id v14 = (void *)a1[8];
  uint64_t v13 = a1[9];
  id v20 = v12;
  uint64_t v24 = v13;
  id v22 = v6;
  id v23 = v7;
  id v21 = v14;
  id v15 = v6;
  id v16 = v7;
  [v9 _fetchMissingTransactionRecordsWithRecordParser:v18 request:v10 databaseIdentifier:v11 completion:v17];
}

void sub_10008C704(uint64_t a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _parseTransactionRecords:*(void *)(a1 + 40) request:*(void *)(a1 + 48) databaseIdentifier:*(void *)(a1 + 56) updateReasons:*(void *)(a1 + 88)]);
  [*(id *)(a1 + 64) applyCloudRecordArray:v2];
  (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
}

void sub_10008C764(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_10008C8A4;
  v19[3] = &unk_10063E9A8;
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v26 = *(void *)(a1 + 80);
  void v19[4] = v9;
  id v20 = v8;
  id v21 = *(id *)(a1 + 56);
  id v14 = *(id *)(a1 + 48);
  uint64_t v15 = *(void *)(a1 + 88);
  id v22 = v14;
  uint64_t v27 = v15;
  id v16 = *(id *)(a1 + 72);
  id v24 = v6;
  id v25 = v7;
  id v23 = v16;
  id v17 = v6;
  id v18 = v7;
  [v9 _fetchMissingAccountEventsWithRecordParser:v20 request:v10 databaseIdentifier:v11 carriedOverRecordsByDatabaseIdentifier:v12 updateR easons:v13 completion:v19];
}

void sub_10008C8A4(uint64_t a1, void *a2)
{
  id v4 = a2;
  id v5 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v8 = [*(id *)(a1 + 56) storeChangesInDatabase];
  id v9 = [*(id *)(a1 + 56) returnRecords];
  uint64_t v10 = *(void *)(a1 + 96);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_10008C9A8;
  void v11[3] = &unk_10063E908;
  id v12 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 80);
  id v13 = *(id *)(a1 + 72);
  [v5 _parseAccountEventsFromRecordParser:v6 databaseIdentifier:v7 shouldUpdateLocalDatabase:v8 shouldReturn:v9 updateReasons:v10 completion:v11];
}

uint64_t sub_10008C9A8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10008C9DC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  id v11 = [*(id *)(a1 + 56) storeChangesInDatabase];
  id v12 = [*(id *)(a1 + 56) returnRecords];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  v16[2] = sub_10008CAD0;
  v16[3] = &unk_10063E908;
  id v13 = *(id *)(a1 + 64);
  id v18 = v6;
  id v19 = v7;
  id v17 = v13;
  id v14 = v6;
  id v15 = v7;
  [v8 _parseAccountsFromRecordParser:v9 databaseIdentifier:v10 shouldUpdateLocalDatabase:v11 shouldReturn:v12 completion:v16];
}

uint64_t sub_10008CAD0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10008CB04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_10008CBBC;
  v8[3] = &unk_10063E9F8;
  id v6 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v6;
  id v10 = *(id *)(a1 + 48);
  id v11 = v5;
  uint64_t v12 = *(void *)(a1 + 56);
  id v7 = v5;
  [a3 enumerateKeysAndObjectsUsingBlock:v8];
}

void sub_10008CBBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_autoreleasePoolPush();
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 recordID]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneID]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v8 cloudStoreZoneForZoneID:v11 inContainerDatabase:*(void *)(a1 + 40)]);

  id v13 = [[PKCloudStoreRecord alloc] initWithRecords:v6];
  id v14 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _transactionSourceIdentifierForTransactionCloudStoreRecord:v13 databaseIdentifier:*(void *)(a1 + 48)]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue( [v15 transactionWithServiceIdentifier:*(void *)(a1 + 56) transactionSourceIdentifier:v14]);

  if (!v16)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = *(void *)(a1 + 56);
      *(_DWORD *)id buf = 138543618;
      uint64_t v31 = v19;
      __int16 v32 = 2114;
      id v33 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Error finding a local transaction with service identifier: %{public}@ in zone %{public}@ aftering uploading it to CloudKit.",  buf,  0x16u);
    }
  }

  [v16 addUpdateReasons:*(void *)(a1 + 64)];
  if ([*(id *)(a1 + 32) _isCloudStoreZoneThePrimaryZoneForCurrentUser:v12 containerDatabase:*(void *)(a1 + 40)])
  {
    id v29 = v12;
    id v20 = v13;
    id v21 = v6;
    id v22 = v5;
    id v23 = v7;
    id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    id v25 = (void *)objc_claimAutoreleasedReturnValue([v16 serviceIdentifier]);
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( [v24 transactionArchiveForTransactionWithServiceIdentifier:v25 transactionSourceIdentifier:v14]);

    id v7 = v23;
    id v5 = v22;
    id v6 = v21;
    id v13 = v20;
    uint64_t v12 = v29;
    [v26 insertOrUpdateArchiveLocationWithCloudStoreZone:v29 isArchived:1 insertionMode:0];
  }

  else
  {
    uint64_t v26 = 0LL;
  }

  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
  id v28 =  [v27 insertOrUpdatePaymentTransaction:v16 withTransactionSourceIdentifier:v14 transactionArchive:v26 originDeviceID:0 insertion Mode:1 performTruncation:0];

  objc_autoreleasePoolPop(v7);
}

void sub_10008CE64(uint64_t a1, uint64_t a2, void *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10008CED8;
  v5[3] = &unk_10063EA48;
  id v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [a3 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_10008CED8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_autoreleasePoolPush();
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneID]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 cloudStoreZoneForZoneID:v11 inContainerDatabase:*(void *)(a1 + 40)]);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 recordID]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 recordName]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[PKPeerPaymentRecurringPayment recurringPaymentIdentifierFromRecordName:]( &OBJC_CLASS___PKPeerPaymentRecurringPayment,  "recurringPaymentIdentifierFromRecordName:",  v15));

  if (v16)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue([v17 peerPaymentRecurringPaymentWithIdentifier:v16]);

    if (v18)
    {
      id v30 = v7;
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 transactionArchiveForRecurringPayment:v18]);

      [v20 insertOrUpdateArchiveLocationWithCloudStoreZone:v12 isArchived:1 insertionMode:0];
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
        id v29 = v5;
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 recordName]);
        *(_DWORD *)id buf = 138543618;
        __int16 v32 = v24;
        __int16 v33 = 2112;
        id v34 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Record %{public}@ uploaded, updating archive %@",  buf,  0x16u);

        id v5 = v29;
      }

      id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
      [v25 updateTransactionArchive:v20 forRecurringPayment:v18];

      id v7 = v30;
    }

    else
    {
      uint64_t v28 = PKLogFacilityTypeGetObject(9LL);
      id v20 = (void *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id buf = 138412290;
        __int16 v32 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v20,  OS_LOG_TYPE_DEFAULT,  "No recurring payment on device with identifier %@",  buf,  0xCu);
      }
    }

    goto LABEL_10;
  }

  uint64_t v26 = PKLogFacilityTypeGetObject(9LL);
  id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v27 recordName]);
    *(_DWORD *)id buf = 138543362;
    __int16 v32 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Couldn't get identifier from record %{public}@",  buf,  0xCu);

LABEL_10:
  }

  objc_autoreleasePoolPop(v7);
}

void sub_10008D218(uint64_t a1, uint64_t a2, void *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_10008D28C;
  v5[3] = &unk_10063EA48;
  id v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [a3 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_10008D28C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_autoreleasePoolPush();
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneID]);
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v9 cloudStoreZoneForZoneID:v11 inContainerDatabase:*(void *)(a1 + 40)]);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 recordID]);
  id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 recordName]);
  id v16 = (void *)objc_claimAutoreleasedReturnValue( +[PKPeerPaymentCounterpartImageData counterpartImageDataIdentifierFromRecordName:]( &OBJC_CLASS___PKPeerPaymentCounterpartImageData,  "counterpartImageDataIdentifierFromRecordName:",  v15));

  if (v16)
  {
    id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue([v17 peerPaymentCounterpartImageDataWithIdentifier:v16]);

    if (v18)
    {
      id v30 = v7;
      uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
      id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 transactionArchiveForCounterpartImageData:v18]);

      [v20 insertOrUpdateArchiveLocationWithCloudStoreZone:v12 isArchived:1 insertionMode:0];
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
        id v29 = v5;
        id v24 = (void *)objc_claimAutoreleasedReturnValue([v23 recordName]);
        *(_DWORD *)id buf = 138543618;
        __int16 v32 = v24;
        __int16 v33 = 2112;
        id v34 = v20;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Record %{public}@ uploaded, updating archive %@",  buf,  0x16u);

        id v5 = v29;
      }

      id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
      [v25 updateTransactionArchive:v20 forCounterpartImageData:v18];

      id v7 = v30;
    }

    else
    {
      uint64_t v28 = PKLogFacilityTypeGetObject(9LL);
      id v20 = (void *)objc_claimAutoreleasedReturnValue(v28);
      if (os_log_type_enabled((os_log_t)v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id buf = 138543362;
        __int16 v32 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v20,  OS_LOG_TYPE_DEFAULT,  "No counterpart image data on device with identifier %{public}@",  buf,  0xCu);
      }
    }

    goto LABEL_10;
  }

  uint64_t v26 = PKLogFacilityTypeGetObject(9LL);
  id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
    id v20 = (void *)objc_claimAutoreleasedReturnValue([v27 recordName]);
    *(_DWORD *)id buf = 138543362;
    __int16 v32 = v20;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Couldn't get identifier from record %{public}@",  buf,  0xCu);

LABEL_10:
  }

  objc_autoreleasePoolPop(v7);
}

void sub_10008D5CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [[PDCloudStoreCounterpartRecordParser alloc] initWithDataSource:*(void *)(a1 + 32)];
  [v7 addRecords:v6];

  if ([*(id *)(a1 + 40) returnRecords])
  {
    id v8 = *(void **)(a1 + 48);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    id v9[2] = sub_10008D6DC;
    v9[3] = &unk_10063E930;
    void v9[4] = *(void *)(a1 + 32);
    id v10 = v7;
    id v11 = *(id *)(a1 + 40);
    id v12 = v5;
    id v13 = *(id *)(a1 + 56);
    [v8 addOperation:v9];
  }
}

void sub_10008D6DC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 56);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_10008D7B8;
  v15[3] = &unk_10063E908;
  id v12 = *(id *)(a1 + 64);
  id v17 = v6;
  id v18 = v7;
  id v16 = v12;
  id v13 = v6;
  id v14 = v7;
  [v8 _processZoneShareLockWithRecordParser:v9 request:v10 databaseIdentifier:v11 completion:v15];
}

uint64_t sub_10008D7B8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

uint64_t sub_10008D7EC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(result + 16))( result,  *(void *)(a1 + 48),  *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void *)(a1 + 56));
  }
  return result;
}

void sub_10008E7F4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

void sub_10008E81C(uint64_t a1, void *a2)
{
  id v3 = a2;
  switch(*(void *)(a1 + 80))
  {
    case 0LL:
    case 1LL:
    case 2LL:
    case 7LL:
    case 8LL:
      goto LABEL_2;
    case 3LL:
      uint64_t v31 = *(void **)(*(void *)(a1 + 32) + 272LL);
      if (v31)
      {
        if ([v31 role] == (id)1)
        {
          *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 2LL;
          v51[0] = _NSConcreteStackBlock;
          v51[1] = 3221225472LL;
          v51[2] = sub_10008ED38;
          v51[3] = &unk_10063B4E0;
          __int16 v32 = *(void **)(a1 + 32);
          id v33 = *(id *)(a1 + 40);
          uint64_t v34 = *(void *)(a1 + 64);
          id v52 = v33;
          uint64_t v54 = v34;
          id v53 = v3;
          objc_msgSend(v32, "_queue_familyMembersWithCompletion:", v51);

          id v30 = v52;
          goto LABEL_30;
        }

        uint64_t v41 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot share invitation for receipient %@ because the peer payment account is not a participant",  *(void *)(a1 + 40)));
        uint64_t v42 = *(void *)(*(void *)(a1 + 64) + 8LL);
        id v43 = *(void **)(v42 + 40);
        *(void *)(v42 + 40) = v41;

        uint64_t Object = PKLogFacilityTypeGetObject(9LL);
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(Object);
        if (!os_log_type_enabled((os_log_t)v39, OS_LOG_TYPE_DEFAULT))
        {
LABEL_40:

LABEL_2:
          (*((void (**)(id, void, void))v3 + 2))(v3, 0LL, 0LL);
          goto LABEL_31;
        }

        uint64_t v45 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
        *(_DWORD *)id buf = 138543362;
        uint64_t v57 = v45;
      }

      else
      {
        uint64_t v35 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot share invitation for receipient %@ because the peer payment account is not defined",  *(void *)(a1 + 40)));
        uint64_t v36 = *(void *)(*(void *)(a1 + 64) + 8LL);
        id v37 = *(void **)(v36 + 40);
        *(void *)(v36 + 40) = v35;

        uint64_t v38 = PKLogFacilityTypeGetObject(9LL);
        uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
        if (!os_log_type_enabled((os_log_t)v39, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_40;
        }
        uint64_t v40 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
        *(_DWORD *)id buf = 138543362;
        uint64_t v57 = v40;
      }

      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v39, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
      goto LABEL_40;
    case 4LL:
    case 5LL:
    case 6LL:
      *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 24LL) = 3LL;
      id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 296) objectForKey:*(void *)(a1 + 48)]);
      __int128 v47 = 0u;
      __int128 v48 = 0u;
      __int128 v49 = 0u;
      __int128 v50 = 0u;
      id v46 = v4;
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 accountUsers]);
      id v6 = [v5 countByEnumeratingWithState:&v47 objects:v55 count:16];
      if (!v6) {
        goto LABEL_25;
      }
      id v7 = v6;
      uint64_t v8 = *(void *)v48;
LABEL_5:
      uint64_t v9 = 0LL;
      break;
    default:
      goto LABEL_31;
  }

  do
  {
    if (*(void *)v48 != v8) {
      objc_enumerationMutation(v5);
    }
    uint64_t v10 = *(void **)(*((void *)&v47 + 1) + 8LL * (void)v9);
    if (!*(void *)(a1 + 56)) {
      goto LABEL_19;
    }
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v47 + 1) + 8 * (void)v9) altDSID]);
    id v12 = *(void **)(a1 + 56);
    id v13 = v11;
    id v14 = v12;
    if (v13 == v14)
    {
    }

    else
    {
      id v15 = v14;
      if (v13) {
        BOOL v16 = v14 == 0LL;
      }
      else {
        BOOL v16 = 1;
      }
      if (v16)
      {

LABEL_18:
        if (*(void *)(a1 + 56)) {
          goto LABEL_23;
        }
LABEL_19:
        if (*(void *)(a1 + 80) != 4LL
          || [v10 accessLevel] != (id)1
          || ([v10 isCurrentUser] & 1) != 0)
        {
          goto LABEL_23;
        }

        goto LABEL_22;
      }

      unsigned __int8 v17 = [v13 isEqualToString:v14];

      if ((v17 & 1) == 0) {
        goto LABEL_18;
      }
    }

void sub_10008ED38(uint64_t a1, void *a2)
{
  uint64_t v19 = _NSConcreteStackBlock;
  uint64_t v20 = 3221225472LL;
  id v21 = sub_10008EF58;
  uint64_t v22 = &unk_10063EB10;
  id v23 = *(id *)(a1 + 32);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "pk_firstObjectPassingTest:", &v19));
  id v5 = v4;
  if (!v4)
  {
    uint64_t v8 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Cannot share invitation for receipient %@ because they are not in the family",  *(void *)(a1 + 32),  v19,  v20,  v21,  v22));
    uint64_t v9 = *(void *)(*(void *)(a1 + 48) + 8LL);
    uint64_t v10 = *(void **)(v9 + 40);
    *(void *)(v9 + 40) = v8;

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
      *(_DWORD *)id buf = 138543362;
      uint64_t v25 = v13;
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
    }

id sub_10008EF58(uint64_t a1, void *a2)
{
  return [a2 hasAppleIDAlias:*(void *)(a1 + 32)];
}

void sub_10008EF64(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = v5;
  if ((a2 & 1) != 0)
  {
    if (!v5) {
      uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", *(void *)(a1 + 40)));
    }
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 databaseForScope:2]);

    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 cloudStoreZoneForZoneName:*(void *)(a1 + 48) inContainerDatabase:v8]);

    if (v10)
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 shareParticipantWithHandle:*(void *)(a1 + 40)]);
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      uint64_t v14 = v13;
      if (!v11)
      {
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *(void **)(a1 + 40);
          id v16 = [v6 count];
          uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
          *(_DWORD *)id buf = 138413058;
          __int128 v67 = v15;
          __int16 v68 = 2048;
          id v69 = v16;
          __int16 v70 = 2112;
          id v71 = v6;
          __int16 v72 = 2114;
          id v73 = v17;
          _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Trying to find share participant with recipientHandle %@ and %lu known aliases %@ for zone %{public}@",  buf,  0x2Au);
        }

        __int128 v63 = 0u;
        __int128 v64 = 0u;
        __int128 v61 = 0u;
        __int128 v62 = 0u;
        id v18 = v6;
        id v19 = [v18 countByEnumeratingWithState:&v61 objects:v65 count:16];
        if (v19)
        {
          id v20 = v19;
          id v44 = v8;
          uint64_t v21 = *(void *)v62;
          while (2)
          {
            for (uint64_t i = 0LL; i != v20; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v62 != v21) {
                objc_enumerationMutation(v18);
              }
              uint64_t v23 = objc_claimAutoreleasedReturnValue( [v10 shareParticipantWithHandle:*(void *)(*((void *)&v61 + 1) + 8 * (void)i)]);
              if (v23)
              {
                uint64_t v11 = (void *)v23;
                goto LABEL_22;
              }
            }

            id v20 = [v18 countByEnumeratingWithState:&v61 objects:v65 count:16];
            if (v20) {
              continue;
            }
            break;
          }

          uint64_t v11 = 0LL;
LABEL_22:
          uint64_t v8 = v44;
        }

        else
        {
          uint64_t v11 = 0LL;
        }
      }

      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        id v30 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
        *(_DWORD *)id buf = 138412546;
        __int128 v67 = v11;
        __int16 v68 = 2114;
        id v69 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Zone share participant %@ for zone %{public}@",  buf,  0x16u);
      }

      v57[0] = _NSConcreteStackBlock;
      v57[1] = 3221225472LL;
      v57[2] = sub_10008F500;
      v57[3] = &unk_10063EB88;
      uint64_t v31 = *(void **)(a1 + 40);
      void v57[4] = *(void *)(a1 + 32);
      id v58 = v31;
      id v32 = *(id *)(a1 + 48);
      uint64_t v33 = *(void *)(a1 + 72);
      id v59 = v32;
      uint64_t v60 = v33;
      uint64_t v34 = objc_retainBlock(v57);
      if (v11)
      {
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v11 invitationTokenData]);
        if (v35)
        {
          id v43 = *(void **)(a1 + 32);
          uint64_t v45 = v8;
          uint64_t v36 = *(void *)(a1 + 48);
          uint64_t v37 = PKCloudStoreOperationGroupSharingSetup;
          uint64_t v38 = PKCloudStoreOperationGroupSuffixShareInvitation;
          v48[0] = _NSConcreteStackBlock;
          v48[1] = 3221225472LL;
          v48[2] = sub_10008F5F8;
          v48[3] = &unk_10063EBB0;
          uint64_t v39 = (id *)&v53;
          id v53 = v34;
          id v54 = *(id *)(a1 + 56);
          id v40 = *(id *)(a1 + 48);
          uint64_t v41 = *(void *)(a1 + 32);
          id v49 = v40;
          uint64_t v50 = v41;
          id v51 = v10;
          id v52 = v35;
          uint64_t v42 = v36;
          uint64_t v8 = v45;
          [v43 shareForZoneName:v42 operationGroupName:v37 operationGroupNameSuffix:v38 qualityOfService:17 completion:v48];
        }

        else
        {
          v55[0] = _NSConcreteStackBlock;
          v55[1] = 3221225472LL;
          v55[2] = sub_10008F5E0;
          v55[3] = &unk_10063EB60;
          uint64_t v39 = &v56;
          id v56 = *(id *)(a1 + 56);
          ((void (*)(void *, void *))v34[2])(v34, v55);
        }
      }

      else
      {
        v46[0] = _NSConcreteStackBlock;
        v46[1] = 3221225472LL;
        v46[2] = sub_10008F8BC;
        v46[3] = &unk_10063EB60;
        id v47 = *(id *)(a1 + 56);
        ((void (*)(void *, void *))v34[2])(v34, v46);
        uint64_t v35 = v47;
      }
    }

    else
    {
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no cloud store zone with name %@ that can be shared with %@, recipientAliases: %@",  *(void *)(a1 + 48),  *(void *)(a1 + 40),  v6));
      uint64_t v26 = PKLogFacilityTypeGetObject(9LL);
      uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id buf = 138412290;
        __int128 v67 = v11;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }

      uint64_t v28 = *(void *)(a1 + 56);
      id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) errorWithCode:-4001 description:v11]);
      (*(void (**)(uint64_t, void, void, void *))(v28 + 16))(v28, 0LL, 0LL, v29);
    }
  }

  else
  {
    uint64_t v24 = *(void *)(a1 + 56);
    uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) errorWithCode:-4014 description:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)]);
    (*(void (**)(uint64_t, void, void, void *))(v24 + 16))(v24, 0LL, 0LL, v25);
  }
}

void sub_10008F500(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  uint64_t v7 = *(void *)(*(void *)(a1[7] + 8LL) + 24LL);
  uint64_t v8 = PKCloudStoreOperationGroupSharingSetup;
  uint64_t v9 = PKCloudStoreOperationGroupSuffixShareInvitation;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_10008F5D4;
  void v11[3] = &unk_10063EB60;
  id v12 = v3;
  id v10 = v3;
  [v4 createShareInvitationForRecipientHandle:v5 zoneName:v6 permission:v7 operationGroupName:v8 operationGroupNameSuffix:v9 qualityOfSer vice:17 completion:v11];
}

uint64_t sub_10008F5D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10008F5E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008F5F8(uint64_t a1, void *a2, int a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a2 allRecordsWithRecordType:CKRecordTypeShare]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 anyObject]);

  uint64_t v10 = objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "pk_share"));
  uint64_t v11 = (void *)v10;
  if (v10) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = a3 == 0;
  }
  if (v12)
  {
    if (v7 || !v10)
    {
      uint64_t v13 = (PKCloudStoreZoneInvitation *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Error fetching share from zone %@, %@",  *(void *)(a1 + 32),  v7));
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id buf = 138412290;
        uint64_t v26 = v13;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }

      uint64_t v21 = *(void *)(a1 + 72);
      if (v7)
      {
        (*(void (**)(void, uint64_t, void, id))(v21 + 16))(*(void *)(a1 + 72), 1LL, 0LL, v7);
      }

      else
      {
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) errorWithCode:-4000 description:v13]);
        (*(void (**)(uint64_t, uint64_t, void, void *))(v21 + 16))(v21, 1LL, 0LL, v22);
      }
    }

    else
    {
      uint64_t v13 = objc_alloc_init(&OBJC_CLASS___PKCloudStoreZoneInvitation);
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v11 URL]);
      -[PKCloudStoreZoneInvitation setShareURL:](v13, "setShareURL:", v14);

      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      -[PKCloudStoreZoneInvitation setDateCreated:](v13, "setDateCreated:", v15);

      id v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) zoneName]);
      -[PKCloudStoreZoneInvitation setZoneName:](v13, "setZoneName:", v16);

      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) containerName]);
      -[PKCloudStoreZoneInvitation setContainerIdentifier:](v13, "setContainerIdentifier:", v17);

      -[PKCloudStoreZoneInvitation setShareInvitationToken:](v13, "setShareInvitationToken:", *(void *)(a1 + 56));
      (*(void (**)(void, uint64_t, PKCloudStoreZoneInvitation *, void))(*(void *)(a1 + 72) + 16LL))( *(void *)(a1 + 72),  1LL,  v13,  0LL);
    }
  }

  else
  {
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472LL;
    v23[2] = sub_10008F8A4;
    v23[3] = &unk_10063EB60;
    uint64_t v18 = *(void *)(a1 + 64);
    id v24 = *(id *)(a1 + 72);
    (*(void (**)(uint64_t, void *))(v18 + 16))(v18, v23);
  }
}

uint64_t sub_10008F8A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_10008F8BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10008FA20(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v42 = 0u;
  __int128 v43 = 0u;
  __int128 v44 = 0u;
  __int128 v45 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v42 objects:v47 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v43;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v43 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)i);
        if ([v8 hasAppleIDAlias:*(void *)(a1 + 32)])
        {
          uint64_t v9 = *(void **)(a1 + 40);
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 appleIDAliases]);
          [v9 unionSet:v10];
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v42 objects:v47 count:16];
    }

    while (v5);
  }

  unint64_t v11 = *(void *)(a1 + 72);
  BOOL v12 = v11 > 6;
  uint64_t v13 = (1LL << v11) & 0x74;
  if (v12 || v13 == 0) {
    goto LABEL_35;
  }
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 296) objectForKey:*(void *)(a1 + 56)]);
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  uint64_t v37 = v15;
  id v16 = (void *)objc_claimAutoreleasedReturnValue([v15 accountUsers]);
  id v17 = [v16 countByEnumeratingWithState:&v38 objects:v46 count:16];
  if (!v17) {
    goto LABEL_34;
  }
  id v18 = v17;
  uint64_t v19 = *(void *)v39;
  while (2)
  {
    for (uint64_t j = 0LL; j != v18; uint64_t j = (char *)j + 1)
    {
      if (*(void *)v39 != v19) {
        objc_enumerationMutation(v16);
      }
      uint64_t v21 = *(void **)(*((void *)&v38 + 1) + 8LL * (void)j);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 appleID]);
      uint64_t v23 = *(void **)(a1 + 32);
      id v24 = v22;
      id v25 = v23;
      if (v24 == v25)
      {
      }

      else
      {
        uint64_t v26 = v25;
        if (v24) {
          BOOL v27 = v25 == 0LL;
        }
        else {
          BOOL v27 = 1;
        }
        if (v27)
        {

LABEL_28:
          goto LABEL_29;
        }

        unsigned __int8 v28 = [v24 isEqualToString:v25];

        if ((v28 & 1) == 0) {
          goto LABEL_28;
        }
      }

LABEL_34:
LABEL_35:
  uint64_t v35 = *(void *)(a1 + 64);
  id v36 = [*(id *)(a1 + 40) copy];
  (*(void (**)(uint64_t, id))(v35 + 16))(v35, v36);
}
}

id sub_10008FE94(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateUnarchivedTransactionsScheduledActivityIfNeccessary];
}

LABEL_55:
}

      uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction transactionDate](self->_paymentTransaction, "transactionDate", v90));
      [v96 setDate:v66];

      return;
    case 0xDuLL:
      id v47 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction installmentPayment](self->_paymentTransaction, "installmentPayment"));
      id v16 = (id)objc_claimAutoreleasedReturnValue([v47 localizedDisplay]);

      goto LABEL_43;
    default:
      id v16 = 0LL;
      goto LABEL_55;
  }

void sub_100090928(_Unwind_Exception *a1)
{
}

id sub_100090954(id a1, PKCloudStoreZone *a2)
{
  return -[PKCloudStoreZone zoneName](a2, "zoneName");
}

void sub_10009095C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_100090A24;
  v13[3] = &unk_10063EC68;
  id v10 = *(id *)(a1 + 48);
  id v15 = v6;
  id v16 = v7;
  id v14 = v10;
  id v11 = v6;
  id v12 = v7;
  [v8 initialCloudDatabaseSetupWithOperationGroupNameSuffix:v9 completion:v13];
}

void sub_100090A24(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      int v9 = 138412290;
      uint64_t v10 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Could not proactively fetching cloudkit transaction changes for transactionSourceIdentifier %@ because the cloud store failed to initalize.",  (uint8_t *)&v9,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100090AF8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
  if (v8)
  {
    int v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
    __int128 v40 = v9;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v40, 1LL));
  }

  else
  {
    uint64_t v10 = 0LL;
  }

  id v11 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) reportContainerChangeIntervalBeginEventWithType:37 stateName:0 objectNames:v10 operationGroupName:0 operationGroupNameSuffix:*(void *)(a1 + 48)]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) containerManager]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v12 fetchTimestampForCloudStoreStore:*(void *)(a1 + 32)]);

  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = *(void *)(a1 + 56);
    id v17 = [*(id *)(a1 + 64) count];
    uint64_t v18 = *(void *)(a1 + 64);
    *(_DWORD *)id buf = 138413058;
    uint64_t v33 = v16;
    __int16 v34 = 2114;
    uint64_t v35 = v13;
    __int16 v36 = 2048;
    id v37 = v17;
    __int16 v38 = 2112;
    uint64_t v39 = v18;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Proactively fetching cloudkit transaction changes for transactionSourceIdentifier %@. oldestFetchDate: %{public}@. In %lu zones: %@",  buf,  0x2Au);
  }

  uint64_t v19 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( objc_alloc(&OBJC_CLASS___PDApplePayCloudStoreRecordsRequest),  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  0LL,  1LL,  0LL,  17LL,  *(void *)(a1 + 72),  *(void *)(a1 + 48));
  -[PDCloudStoreRecordsRequest setUseLastChangeToken:](v19, "setUseLastChangeToken:", 1LL);
  -[PDCloudStoreRecordsRequest setShouldSaveToken:](v19, "setShouldSaveToken:", 1LL);
  if (*(void *)(a1 + 32))
  {
    -[PDCloudStoreRecordsRequest setCloudStoreZone:](v19, "setCloudStoreZone:");
    id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) containerManager]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v20 databaseForCloudStoreZone:*(void *)(a1 + 32)]);
    -[PDCloudStoreRecordsRequest setContainerDatabase:](v19, "setContainerDatabase:", v21);
  }

  uint64_t v22 = *(void **)(a1 + 40);
  v27[0] = _NSConcreteStackBlock;
  v27[1] = 3221225472LL;
  v27[2] = sub_100090DB4;
  v27[3] = &unk_10063ECB8;
  uint64_t v23 = *(void *)(a1 + 80);
  id v30 = v7;
  uint64_t v31 = v23;
  void v27[4] = v22;
  id v28 = v11;
  id v29 = v6;
  id v24 = v6;
  id v25 = v7;
  id v26 = v11;
  [v22 executeRecordsRequest:v19 completion:v27];
}

void sub_100090DB4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8LL);
  uint64_t v8 = *(void **)(v5 + 40);
  id v6 = (id *)(v5 + 40);
  id v7 = v8;
  if (v8) {
    int v9 = v7;
  }
  else {
    int v9 = a3;
  }
  objc_storeStrong(v6, v9);
  id v10 = a3;
  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:v10];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_100090E1C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_100090ED4;
  v10[3] = &unk_10063ED08;
  id v11 = v5;
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 32);
  id v12 = v7;
  uint64_t v13 = v8;
  uint64_t v14 = *(void *)(a1 + 48);
  id v9 = v5;
  dispatch_async(v6, v10);
}

id sub_100090ED4(uint64_t a1)
{
  if (([*(id *)(a1 + 32) isCanceled] & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 40);
      int v6 = 138412290;
      uint64_t v7 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Proactive cloudkit transaction change fetch completed for transactionSourceIdentifier %@.",  (uint8_t *)&v6,  0xCu);
    }
  }

  return [*(id *)(a1 + 48) _fetchTaskOperationWithIdentifier:*(void *)(a1 + 40) completedWithError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
}

void sub_100091098(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    *(void *)&__int128 v62 = 0LL;
    *((void *)&v62 + 1) = &v62;
    uint64_t v63 = 0x3032000000LL;
    __int128 v64 = sub_10008BBF8;
    id v65 = sub_10008BC08;
    id v66 = 0LL;
    id v33 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    if (*(_BYTE *)(a1 + 64) || *(_BYTE *)(a1 + 65)) {
      id v32 = objc_alloc_init(&OBJC_CLASS___PKCloudRecordArray);
    }
    else {
      id v32 = 0LL;
    }
    __int128 v51 = 0u;
    __int128 v52 = 0u;
    __int128 v49 = 0u;
    __int128 v50 = 0u;
    obuint64_t j = *(id *)(a1 + 48);
    id v28 = [obj countByEnumeratingWithState:&v49 objects:v61 count:16];
    if (v28)
    {
      uint64_t v27 = *(void *)v50;
      uint64_t v31 = PKCloudStoreOperationGroupBackgroundSync;
      uint64_t v2 = PKCloudStoreOperationGroupSuffixModificationSync;
      do
      {
        for (uint64_t i = 0LL; i != v28; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v50 != v27) {
            objc_enumerationMutation(obj);
          }
          uint64_t v3 = *(void *)(*((void *)&v49 + 1) + 8LL * (void)i);
          uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _allPossibleCloudStoreZonesForFetchingWithTransactionSourceIdentifier:v3]);
          __int128 v47 = 0u;
          __int128 v48 = 0u;
          __int128 v45 = 0u;
          __int128 v46 = 0u;
          id v30 = v4;
          id v5 = [v30 countByEnumeratingWithState:&v45 objects:v60 count:16];
          if (v5)
          {
            uint64_t v6 = *(void *)v46;
            do
            {
              for (uint64_t j = 0LL; j != v5; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v46 != v6) {
                  objc_enumerationMutation(v30);
                }
                uint64_t v8 = *(void **)(*((void *)&v45 + 1) + 8LL * (void)j);
                uint64_t Object = PKLogFacilityTypeGetObject(9LL);
                id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
                if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v11 = *(void *)(a1 + 32);
                  id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneName]);
                  *(_DWORD *)id buf = 138543874;
                  uint64_t v55 = v11;
                  __int16 v56 = 2112;
                  uint64_t v57 = v3;
                  __int16 v58 = 2114;
                  id v59 = v12;
                  _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Fetching recently modified transactions from date %{public}@ for transactionSourceIdentifier: %@. In zone %{public}@",  buf,  0x20u);
                }

                uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneName]);
                if (v13)
                {
                  uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 zoneName]);
                  id v53 = v14;
                  id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v53,  1LL));
                }

                else
                {
                  id v15 = 0LL;
                }

                uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) reportContainerChangeIntervalBeginEventWithType:38 stateName:0 objectNames:v15 operationGroupNa me:v31 operationGroupNameSuffix:v2]);
                v38[0] = _NSConcreteStackBlock;
                v38[1] = 3221225472LL;
                v38[2] = sub_100091614;
                v38[3] = &unk_10063EDA8;
                char v43 = *(_BYTE *)(a1 + 64);
                uint64_t v18 = *(void **)(a1 + 32);
                uint64_t v17 = *(void *)(a1 + 40);
                void v38[4] = v3;
                v38[5] = v17;
                v38[6] = v8;
                id v39 = v18;
                char v44 = *(_BYTE *)(a1 + 65);
                id v19 = v16;
                id v40 = v19;
                __int128 v41 = v32;
                __int128 v42 = &v62;
                [v33 addOperation:v38];
              }

              id v5 = [v30 countByEnumeratingWithState:&v45 objects:v60 count:16];
            }

            while (v5);
          }
        }

        id v28 = [obj countByEnumeratingWithState:&v49 objects:v61 count:16];
      }

      while (v28);
    }

    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3221225472LL;
    v34[2] = sub_100091A38;
    v34[3] = &unk_10063EDD0;
    id v36 = *(id *)(a1 + 56);
    uint64_t v21 = v32;
    uint64_t v35 = v21;
    id v37 = &v62;
    id v22 = [v33 evaluateWithInput:v20 completion:v34];

    _Block_object_dispose(&v62, 8);
    goto LABEL_29;
  }

  uint64_t v23 = PKLogFacilityTypeGetObject(9LL);
  id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v62) = 138412290;
    *(void *)((char *)&v62 + 4) = @"Cannot perform backgroundRecordSyncForTranasctionSourceIdentifiers: since fromDate is not defined";
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v62, 0xCu);
  }

  uint64_t v25 = *(void *)(a1 + 56);
  if (v25)
  {
    uint64_t v21 = (PKCloudRecordArray *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) errorWithCode:-1 description:@"Cannot perform backgroundRecordSyncForTranasctionSourceIdentifiers: since fromDate is not defined"]);
    (*(void (**)(uint64_t, void, PKCloudRecordArray *))(v25 + 16))(v25, 0LL, v21);
LABEL_29:
  }

void sub_1000915CC(_Unwind_Exception *a1)
{
}

void sub_100091614(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", *(void *)(a1 + 32)));
  id v9 = objc_alloc(&OBJC_CLASS___PDApplePayCloudStoreRecordsRequest);
  id v10 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( v9,  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  3LL,  1LL,  *(unsigned __int8 *)(a1 + 88),  17LL,  PKCloudStoreOperationGroupBackgroundSync,  PKCloudStoreOperationGroupSuffixModificationSync);
  -[PDApplePayCloudStoreRecordsRequest setTransactionSourceIdentifiers:](v10, "setTransactionSourceIdentifiers:", v8);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) containerManager]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 databaseForCloudStoreZone:*(void *)(a1 + 48)]);

  -[PDCloudStoreRecordsRequest setCloudStoreZone:](v10, "setCloudStoreZone:", *(void *)(a1 + 48));
  -[PDCloudStoreRecordsRequest setContainerDatabase:](v10, "setContainerDatabase:", v12);
  -[PDCloudStoreRecordsRequest setIgnoreRecordsBeforeDate:](v10, "setIgnoreRecordsBeforeDate:", *(void *)(a1 + 56));
  -[PDCloudStoreRecordsRequest setFormReport:](v10, "setFormReport:", *(unsigned __int8 *)(a1 + 89));
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_1000917D4;
  v20[3] = &unk_10063ED80;
  uint64_t v13 = *(void *)(a1 + 32);
  id v21 = *(id *)(a1 + 40);
  uint64_t v22 = v13;
  id v14 = *(id *)(a1 + 56);
  uint64_t v15 = *(void *)(a1 + 48);
  id v23 = v14;
  uint64_t v24 = v15;
  id v25 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 80);
  id v28 = v7;
  uint64_t v29 = v17;
  id v26 = v16;
  id v27 = v6;
  id v18 = v6;
  id v19 = v7;
  [v21 executeRecordsRequest:v10 completion:v20];
}

void sub_1000917D4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100091904;
  block[3] = &unk_10063ED58;
  uint64_t v8 = *(void **)(a1 + 48);
  void block[4] = *(void *)(a1 + 40);
  id v9 = v8;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(void **)(a1 + 64);
  id v17 = v9;
  uint64_t v18 = v10;
  uint64_t v19 = *(void *)(a1 + 32);
  id v20 = v11;
  id v21 = v6;
  id v22 = *(id *)(a1 + 72);
  id v23 = v5;
  __int128 v15 = *(_OWORD *)(a1 + 88);
  id v12 = (id)v15;
  __int128 v25 = v15;
  id v24 = *(id *)(a1 + 80);
  id v13 = v5;
  id v14 = v6;
  dispatch_async(v7, block);
}

uint64_t sub_100091904(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) zoneName]);
    int v14 = 138412802;
    uint64_t v15 = v4;
    __int16 v16 = 2114;
    uint64_t v17 = v5;
    __int16 v18 = 2114;
    uint64_t v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Finished fetching recently modified transactions for transactionSourceIdentifier: %@ from date %{public}@. In zone %{public}@",  (uint8_t *)&v14,  0x20u);
  }

  [*(id *)(a1 + 56) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 64) error:*(void *)(a1 + 72)];
  id v7 = *(void **)(a1 + 80);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 88) cloudStoreRecords]);
  [v7 applyCloudRecordArray:v8];

  uint64_t v9 = *(void *)(*(void *)(a1 + 112) + 8LL);
  id v12 = *(void **)(v9 + 40);
  uint64_t v10 = (id *)(v9 + 40);
  uint64_t v11 = v12;
  if (!v12) {
    uint64_t v11 = *(void **)(a1 + 72);
  }
  objc_storeStrong(v10, v11);
  return (*(uint64_t (**)(void))(*(void *)(a1 + 104) + 16LL))();
}

uint64_t sub_100091A38(void *a1)
{
  uint64_t result = a1[5];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))( result,  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
  }
  return result;
}

void sub_100091B1C(id *a1)
{
  v54[0] = 0LL;
  v54[1] = v54;
  v54[2] = 0x3032000000LL;
  v54[3] = sub_10008BBF8;
  v54[4] = sub_10008BC08;
  id v55 = 0LL;
  id v30 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v2 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = a1[4];
    *(_DWORD *)id buf = 138412290;
    uint64_t v60 = v3;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  OS_LOG_TYPE_DEFAULT,  "Background fetching record changes for transactionSourceIdentifiers: %@",  buf,  0xCu);
  }

  oslog = v2;

  uint64_t v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v28 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v52 = 0u;
  __int128 v53 = 0u;
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  obuint64_t j = a1[4];
  id v5 = [obj countByEnumeratingWithState:&v50 objects:v58 count:16];
  if (v5)
  {
    uint64_t v27 = *(void *)v51;
    do
    {
      id v29 = v5;
      for (uint64_t i = 0LL; i != v29; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v51 != v27) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void *)(*((void *)&v50 + 1) + 8LL * (void)i);
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] _allPossibleCloudStoreZonesForFetchingWithTransactionSourceIdentifier:v7]);
        __int128 v48 = 0u;
        __int128 v49 = 0u;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        id v9 = v8;
        id v10 = [v9 countByEnumeratingWithState:&v46 objects:v57 count:16];
        if (v10)
        {
          uint64_t v11 = *(void *)v47;
          do
          {
            for (uint64_t j = 0LL; j != v10; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v47 != v11) {
                objc_enumerationMutation(v9);
              }
              uint64_t v13 = *(void *)(*((void *)&v46 + 1) + 8LL * (void)j);
              int v14 = (NSMutableSet *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v4,  "objectForKeyedSubscript:",  v13));
              if (!v14)
              {
                int v14 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
                -[NSMutableDictionary setObject:forKeyedSubscript:](v4, "setObject:forKeyedSubscript:", v14, v13);
              }

              -[NSMutableSet addObject:](v14, "addObject:", v7);
            }

            id v10 = [v9 countByEnumeratingWithState:&v46 objects:v57 count:16];
          }

          while (v10);
        }

        -[NSMutableSet unionSet:](v28, "unionSet:", v9);
      }

      id v5 = [obj countByEnumeratingWithState:&v50 objects:v58 count:16];
    }

    while (v5);
  }

  __int128 v44 = 0u;
  __int128 v45 = 0u;
  __int128 v43 = 0u;
  __int128 v42 = 0u;
  uint64_t v15 = v28;
  id v16 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v42,  v56,  16LL);
  if (v16)
  {
    uint64_t v17 = *(void *)v43;
    do
    {
      for (k = 0LL; k != v16; k = (char *)k + 1)
      {
        if (*(void *)v43 != v17) {
          objc_enumerationMutation(v15);
        }
        uint64_t v19 = *(void **)(*((void *)&v42 + 1) + 8LL * (void)k);
        id v20 = oslog;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
        {
          id v21 = (void *)objc_claimAutoreleasedReturnValue([v19 zoneName]);
          *(_DWORD *)id buf = 138543362;
          uint64_t v60 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "Background fetching record starting for zone: %{public}@",  buf,  0xCu);

          id v20 = oslog;
        }

        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472LL;
        v36[2] = sub_10009203C;
        v36[3] = &unk_10063EE70;
        id v22 = a1[4];
        id v23 = a1[5];
        id v37 = v22;
        id v38 = v23;
        id v39 = v19;
        id v40 = v4;
        __int128 v41 = v54;
        [v30 addOperation:v36];
      }

      id v16 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v15,  "countByEnumeratingWithState:objects:count:",  &v42,  v56,  16LL);
    }

    while (v16);
  }

  id v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472LL;
  v33[2] = sub_1000923C4;
  v33[3] = &unk_100639778;
  id v34 = a1[6];
  uint64_t v35 = v54;
  id v25 = [v30 evaluateWithInput:v24 completion:v33];

  _Block_object_dispose(v54, 8);
}

void sub_100091FE4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
}

void sub_10009203C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = objc_alloc(&OBJC_CLASS___PDApplePayCloudStoreRecordsRequest);
  id v9 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( v8,  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  0LL,  1LL,  0LL,  17LL,  PKCloudStoreOperationGroupBackgroundSync,  PKCloudStoreOperationGroupSuffixBackgroundRecordChangesSync);
  -[PDApplePayCloudStoreRecordsRequest setTransactionSourceIdentifiers:]( v9,  "setTransactionSourceIdentifiers:",  *(void *)(a1 + 32));
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) containerManager]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 databaseForCloudStoreZone:*(void *)(a1 + 48)]);

  -[PDCloudStoreRecordsRequest setCloudStoreZone:](v9, "setCloudStoreZone:", *(void *)(a1 + 48));
  -[PDCloudStoreRecordsRequest setContainerDatabase:](v9, "setContainerDatabase:", v11);
  -[PDCloudStoreRecordsRequest setUseLastChangeToken:](v9, "setUseLastChangeToken:", 1LL);
  -[PDCloudStoreRecordsRequest setShouldSaveToken:](v9, "setShouldSaveToken:", 1LL);
  id v12 = *(void **)(a1 + 40);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  id v18[2] = sub_1000921B4;
  v18[3] = &unk_10063EE48;
  void v18[4] = v12;
  id v13 = *(id *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 48);
  id v19 = v13;
  uint64_t v20 = v14;
  uint64_t v15 = *(void *)(a1 + 64);
  id v22 = v7;
  uint64_t v23 = v15;
  id v21 = v6;
  id v16 = v6;
  id v17 = v7;
  [v12 executeRecordsRequest:v9 completion:v18];
}

void sub_1000921B4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100092298;
  block[3] = &unk_10063EE20;
  id v6 = *(id *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 48);
  id v12 = v6;
  uint64_t v13 = v7;
  id v14 = v4;
  __int128 v10 = *(_OWORD *)(a1 + 64);
  id v8 = (id)v10;
  __int128 v16 = v10;
  id v15 = *(id *)(a1 + 56);
  id v9 = v4;
  dispatch_async(v5, block);
}

void sub_100092298(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
    id v6 = [v2 count];
    uint64_t v7 = *(void *)(a1 + 48);
    int v12 = 138544130;
    uint64_t v13 = v5;
    __int16 v14 = 2048;
    id v15 = v6;
    __int16 v16 = 2112;
    id v17 = v2;
    __int16 v18 = 2112;
    uint64_t v19 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Finished fetching background record changes zone: %{public}@. For %lu transaction source identifiers %@. error %@.",  (uint8_t *)&v12,  0x2Au);
  }

  uint64_t v8 = *(void *)(*(void *)(a1 + 72) + 8LL);
  uint64_t v11 = *(void **)(v8 + 40);
  id v9 = (id *)(v8 + 40);
  __int128 v10 = v11;
  if (!v11) {
    __int128 v10 = *(void **)(a1 + 48);
  }
  objc_storeStrong(v9, v10);
  (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

uint64_t sub_1000923C4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
  }
  return result;
}

LABEL_46:
        }

        if (v22)
        {
          id v81 = (void *)objc_claimAutoreleasedReturnValue(-[PDApplePayCloudStoreRecordFetchOperation description](v22, "description"));
          v146 = v81;
          id v80 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v146,  1LL));
          id v39 = v80;
        }

        else
        {
          id v39 = 0LL;
        }

        id v40 = (void *)objc_claimAutoreleasedReturnValue( -[PDCloudStoreContainer reportContainerChangeIntervalBeginEventWithType:stateName:objectNames:operationGroupName:operationGroupNameSuffix:]( self,  "reportContainerChangeIntervalBeginEventWithType:stateName:objectNames:operationGroupName:opera tionGroupNameSuffix:",  v28,  v20,  v39,  v78,  v79));
        if (v22)
        {
        }

        __int128 v41 = (void *)objc_claimAutoreleasedReturnValue(-[PDApplePayCloudStoreRecordFetchOperation identifier](v22, "identifier"));
        -[NSMutableSet pk_safelyAddObject:](v76, "pk_safelyAddObject:", v41);

        dispatch_group_enter(group);
        v130[0] = _NSConcreteStackBlock;
        v130[1] = 3221225472LL;
        v130[2] = sub_10009325C;
        v130[3] = &unk_10063EEC0;
        v130[4] = self;
        id v34 = v40;
        __int128 v131 = v34;
        v132 = group;
        -[PDApplePayCloudStoreRecordFetchOperation addCompletion:](v22, "addCompletion:", v130);

        id v73 = 1;
        id v29 = (PKCloudStoreRecordFetchTask *)v23;
LABEL_53:

        goto LABEL_54;
      }

      if ((v75 & 1) == 0)
      {
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 138412290;
          v150 = v20;
          _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "Cannot fetch records after provisioning for transactionSourceIdentifier %@ since PDCloudStoreContainerSetupA ssistantState is not complete",  buf,  0xCu);
        }

        uint64_t v27 = (NSMutableArray *)objc_claimAutoreleasedReturnValue( -[PDCloudStoreContainer setupAssistantNotCompleteError]( self,  "setupAssistantNotCompleteError"));
        -[PDCloudStoreContainer reportContainerChangeSignpostEventType:stateName:objectNames:changeToken:error:operationGroupName:operationGroupNameSuffix:]( self,  "reportContainerChangeSignpostEventType:stateName:objectNames:changeToken:error:operationGroupName:operationGroupNameSuffix:",  3LL,  v20,  0LL,  0LL,  v27,  v78,  v79);
        objc_storeStrong(v141 + 5, v27);
        if (!v22) {
          id v22 = objc_alloc_init(&OBJC_CLASS___PDApplePayCloudStoreRecordFetchOperation);
        }
        id v29 = -[PKCloudStoreRecordFetchTask initWithTransactionSourceIdentifier:type:]( objc_alloc(&OBJC_CLASS___PKCloudStoreRecordFetchTask),  "initWithTransactionSourceIdentifier:type:",  v20,  1LL);

        -[PKCloudStoreRecordFetchTask startTask](v29, "startTask");
        -[PDApplePayCloudStoreRecordFetchOperation updateTask:](v22, "updateTask:", v29);
        fetchTasks = self->_fetchTasks;
        id v33 = (void *)objc_claimAutoreleasedReturnValue(-[PDApplePayCloudStoreRecordFetchOperation identifier](v22, "identifier"));
        -[NSMutableDictionary safelySetObject:forKey:](fetchTasks, "safelySetObject:forKey:", v22, v33);

        id v34 = (id)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
        [v34 updateRecordFetchTask:v29];
        goto LABEL_53;
      }

      if (!v22) {
        id v22 = objc_alloc_init(&OBJC_CLASS___PDApplePayCloudStoreRecordFetchOperation);
      }
      id v29 = -[PKCloudStoreRecordFetchTask initWithTransactionSourceIdentifier:type:]( objc_alloc(&OBJC_CLASS___PKCloudStoreRecordFetchTask),  "initWithTransactionSourceIdentifier:type:",  v20,  1LL);

      -[PKCloudStoreRecordFetchTask queueTask](v29, "queueTask");
      -[PDApplePayCloudStoreRecordFetchOperation updateTask:](v22, "updateTask:", v29);
      id v30 = self->_fetchTasks;
      uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(-[PDApplePayCloudStoreRecordFetchOperation identifier](v22, "identifier"));
      -[NSMutableDictionary safelySetObject:forKey:](v30, "safelySetObject:forKey:", v22, v31);

      uint64_t v27 = (NSMutableArray *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
      -[NSMutableArray updateRecordFetchTask:](v27, "updateRecordFetchTask:", v29);
LABEL_54:

      objc_autoreleasePoolPop(v21);
      uint64_t v19 = (char *)v19 + 1;
    }

    while (v84 != v19);
    __int16 v18 = [obj countByEnumeratingWithState:&v133 objects:v147 count:16];
  }

  while (v18);

  os_unfair_lock_unlock(lock);
  if ((v73 & 1) != 0)
  {
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412290;
      v150 = v76;
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "Pass Provisioning fetch waiting for in progress tasks to complete: %@",  buf,  0xCu);
    }
  }

        objc_autoreleasePoolPop(v8);
        id v6 = (char *)v6 + 1;
      }

      while (v6 != v5);
      id v40 = [v3 countByEnumeratingWithState:&v59 objects:v66 count:16];
      id v5 = v40;
    }

    while (v40);
  }

  __int128 v41 = *(void **)(a1 + 48);
  __int128 v42 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 144LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1001E21E0;
  block[3] = &unk_10063A830;
  __int128 v52 = v41;
  dispatch_async(v42, block);
}

      if (v16) {
        [v96 setSubtitle:v16];
      }
      if (v20 && v22)
      {
        id v65 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@ • %@",  v20,  v22));
        [v96 setBody:v65];

LABEL_53:
LABEL_54:

        goto LABEL_55;
      }

      if (v20)
      {
LABEL_52:
        objc_msgSend(v96, "setBody:", v20, v90);
        goto LABEL_53;
      }

      if (v22)
      {
        [v96 setBody:v22];
        uint64_t v20 = v22;
        goto LABEL_54;
      }
      }

      __int128 v10 = [obj countByEnumeratingWithState:&v54 objects:v63 count:16];
    }

    while (v10);
  }

  id v38 = v7;
  id v39 = *(void *)(v44 + 48);
  id v40 = -[NSMutableArray copy](v38, "copy");
  (*(void (**)(uint64_t, id))(v39 + 16))(v39, v40);
}

LABEL_63:
  v127[0] = _NSConcreteStackBlock;
  v127[1] = 3221225472LL;
  v127[2] = sub_10009328C;
  v127[3] = &unk_10063CB08;
  __int128 v42 = group;
  __int128 v128 = v42;
  __int128 v129 = self;
  [v72 addOperation:v127];
  v121[0] = _NSConcreteStackBlock;
  v121[1] = 3221225472LL;
  v121[2] = sub_10009335C;
  v121[3] = &unk_10063EEE8;
  __int128 v126 = v75;
  __int128 v125 = &v140;
  v121[4] = self;
  __int128 v43 = obj;
  __int128 v122 = v43;
  __int128 v44 = v76;
  __int128 v123 = v44;
  __int128 v45 = v67;
  __int128 v124 = v45;
  [v72 addOperation:v121];
  __int128 v46 = PKLogFacilityTypeGetObject(35LL);
  __int128 v47 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(v46);
  __int128 v48 = os_signpost_id_make_with_pointer(v47, self);
  if (v48 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    __int128 v49 = v48;
    if (os_signpost_enabled(v47))
    {
      *(_WORD *)id buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v47,  OS_SIGNPOST_INTERVAL_BEGIN,  v49,  "cloudstore:fetchPassRecords",  "",  buf,  2u);
    }
  }

  v119[0] = _NSConcreteStackBlock;
  v119[1] = 3221225472LL;
  v119[2] = sub_100093620;
  v119[3] = &unk_10063EC90;
  v119[4] = self;
  v119[5] = v79;
  __int128 v50 = v43;
  __int128 v120 = v50;
  [v72 addOperation:v119];
  v109[0] = _NSConcreteStackBlock;
  v109[1] = 3221225472LL;
  v109[2] = sub_10009387C;
  v109[3] = &unk_10063EF38;
  v109[4] = self;
  __int128 v51 = v70;
  v110 = v51;
  __int128 v52 = v45;
  v111 = v52;
  __int128 v53 = v65;
  v112 = v53;
  id v54 = v50;
  v113 = v54;
  v114 = v66;
  id v115 = v44;
  __int128 v116 = v78;
  __int128 v118 = v138;
  __int128 v117 = v79;
  [v72 addOperation:v109];
  v104[0] = _NSConcreteStackBlock;
  v104[1] = 3221225472LL;
  v104[2] = sub_100093E34;
  v104[3] = &unk_10063EE70;
  v104[4] = self;
  id v55 = v51;
  uint64_t v105 = v55;
  id v106 = v78;
  v107 = v79;
  id v108 = &v140;
  [v72 addOperation:v104];
  v95[0] = _NSConcreteStackBlock;
  v95[1] = 3221225472LL;
  v95[2] = sub_100093F6C;
  v95[3] = &unk_10063F028;
  uint64_t v96 = v53;
  v97 = self;
  uint64_t v98 = v78;
  v99 = v79;
  v103 = v62;
  __int16 v56 = v55;
  int v100 = v56;
  uint64_t v57 = v54;
  uint64_t v101 = v57;
  v102 = &v140;
  [v72 addOperation:v95];
  __int16 v58 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v86[0] = _NSConcreteStackBlock;
  v86[1] = 3221225472LL;
  v86[2] = sub_100094B0C;
  v86[3] = &unk_10063F078;
  v86[4] = self;
  v87 = v56;
  uint64_t v88 = v57;
  uint64_t v93 = &v140;
  v89 = v64;
  int v94 = v138;
  uint64_t v90 = v52;
  id v59 = v61;
  char v91 = v59;
  uint64_t v92 = v69;
  uint64_t v60 = [v72 evaluateWithInput:v58 completion:v86];

LABEL_67:
  _Block_object_dispose(v138, 8);

  _Block_object_dispose(&v140, 8);
}

void sub_1000931D8(_Unwind_Exception *a1)
{
}

id sub_10009324C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _fetchTaskOperationWithIdentifier:a2 completedWithError:a3];
}

void sub_10009325C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10009328C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(dispatch_group_s **)(a1 + 32);
  id v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) workQueue]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100093348;
  void v12[3] = &unk_1006396B0;
  id v13 = v6;
  id v14 = v7;
  id v10 = v6;
  id v11 = v7;
  dispatch_group_notify(v8, v9, v12);
}

uint64_t sub_100093348(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10009335C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(os_unfair_lock_s **)(a1 + 32);
  if (*(_BYTE *)(a1 + 72))
  {
    id v26 = v9;
    id v27 = v8;
    id v28 = v7;
    os_unfair_lock_lock(v10 + 54);
    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    obuint64_t j = *(id *)(a1 + 40);
    id v11 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v31;
      do
      {
        for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v31 != v13) {
            objc_enumerationMutation(obj);
          }
          uint64_t v15 = *(void *)(*((void *)&v30 + 1) + 8LL * (void)i);
          __int16 v16 = objc_autoreleasePoolPush();
          id v17 = (PDApplePayCloudStoreRecordFetchOperation *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 208) objectForKeyedSubscript:v15]);
          __int16 v18 = (PKCloudStoreRecordFetchTask *)objc_claimAutoreleasedReturnValue(-[PDApplePayCloudStoreRecordFetchOperation task](v17, "task"));
          if (![*(id *)(a1 + 48) containsObject:v15]
            || -[PKCloudStoreRecordFetchTask status](v18, "status") != (id)2
            || -[PKCloudStoreRecordFetchTask type](v18, "type") != (id)1)
          {
            uint64_t v19 = -[PKCloudStoreRecordFetchTask initWithTransactionSourceIdentifier:type:]( objc_alloc(&OBJC_CLASS___PKCloudStoreRecordFetchTask),  "initWithTransactionSourceIdentifier:type:",  v15,  1LL);

            if (!v17) {
              id v17 = objc_alloc_init(&OBJC_CLASS___PDApplePayCloudStoreRecordFetchOperation);
            }
            -[PDApplePayCloudStoreRecordFetchOperation updateTask:](v17, "updateTask:", v19);
            uint64_t v20 = *(void **)(*(void *)(a1 + 32) + 208LL);
            id v21 = (void *)objc_claimAutoreleasedReturnValue(-[PDApplePayCloudStoreRecordFetchOperation identifier](v17, "identifier"));
            [v20 safelySetObject:v17 forKey:v21];

            -[PKCloudStoreRecordFetchTask startTask](v19, "startTask");
            id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
            [v22 updateRecordFetchTask:v19];

            objc_msgSend(*(id *)(a1 + 56), "pk_safelyAddObject:", v15);
            __int16 v18 = v19;
          }

          objc_autoreleasePoolPop(v16);
        }

        id v12 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
      }

      while (v12);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 216LL));
    id v9 = v26;
    id v8 = v27;
    v26[2](v26, v27, 0LL);
    id v7 = v28;
  }

  else
  {
    uint64_t v23 = objc_claimAutoreleasedReturnValue(-[os_unfair_lock_s setupAssistantNotCompleteError](v10, "setupAssistantNotCompleteError"));
    uint64_t v24 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v25 = *(void **)(v24 + 40);
    *(void *)(v24 + 40) = v23;

    v9[2](v9, v8, 1LL);
  }
}

void sub_100093620(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000936E8;
  v13[3] = &unk_10063EC68;
  id v10 = *(id *)(a1 + 48);
  id v15 = v6;
  id v16 = v7;
  id v14 = v10;
  id v11 = v6;
  id v12 = v7;
  [v8 initialCloudDatabaseSetupWithOperationGroupNameSuffix:v9 completion:v13];
}

void sub_1000936E8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5) {
    char v6 = 0;
  }
  else {
    char v6 = a2;
  }
  if ((v6 & 1) != 0)
  {
    id v7 = 0LL;
  }

  else
  {
    id v7 = v5;
    if (!v5)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Could not setup the cloud store container: %@",  0LL));
      v17[0] = NSLocalizedDescriptionKey;
      v17[1] = NSLocalizedFailureReasonErrorKey;
      v18[0] = v8;
      v18[1] = v8;
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v18,  v17,  2LL));
      id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -5001LL,  v9));
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(_DWORD *)id buf = 138412546;
      id v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Error setting up cloud store container after pass provisioning: %@, transactionSourceIdentifiers: %@",  buf,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_10009387C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000939C0;
  v13[3] = &unk_10063EF10;
  uint64_t v9 = *(void **)(a1 + 40);
  void v13[4] = *(void *)(a1 + 32);
  id v14 = v9;
  id v15 = *(id *)(a1 + 48);
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  id v18 = *(id *)(a1 + 72);
  id v19 = *(id *)(a1 + 80);
  uint64_t v10 = *(void *)(a1 + 104);
  id v22 = v7;
  uint64_t v23 = v10;
  __int128 v20 = *(_OWORD *)(a1 + 88);
  id v21 = v6;
  id v11 = v6;
  id v12 = v7;
  dispatch_async(v8, v13);
}

void sub_1000939C0(uint64_t a1)
{
  __int128 v50 = 0u;
  __int128 v51 = 0u;
  __int128 v48 = 0u;
  __int128 v49 = 0u;
  obuint64_t j = *(id *)(a1 + 48);
  id v43 = [obj countByEnumeratingWithState:&v48 objects:v64 count:16];
  if (v43)
  {
    uint64_t v42 = *(void *)v49;
    do
    {
      for (uint64_t i = 0LL; i != v43; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v49 != v42) {
          objc_enumerationMutation(obj);
        }
        uint64_t v3 = *(void *)(*((void *)&v48 + 1) + 8LL * (void)i);
        id v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _allPossibleCloudStoreZonesForFetchingWithTransactionSourceIdentifier:v3]);
        __int128 v44 = 0u;
        __int128 v45 = 0u;
        __int128 v46 = 0u;
        __int128 v47 = 0u;
        id v5 = [v4 countByEnumeratingWithState:&v44 objects:v63 count:16];
        if (v5)
        {
          id v6 = v5;
          uint64_t v7 = *(void *)v45;
          do
          {
            for (uint64_t j = 0LL; j != v6; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v45 != v7) {
                objc_enumerationMutation(v4);
              }
              uint64_t v9 = *(void *)(*((void *)&v44 + 1) + 8LL * (void)j);
              uint64_t v10 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKeyedSubscript:v9]);
              if (!v10) {
                uint64_t v10 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
              }
              [*(id *)(a1 + 56) setObject:v10 forKeyedSubscript:v9];
              -[NSMutableSet addObject:](v10, "addObject:", v3);
            }

            id v6 = [v4 countByEnumeratingWithState:&v44 objects:v63 count:16];
          }

          while (v6);
        }
      }

      id v43 = [obj countByEnumeratingWithState:&v48 objects:v64 count:16];
    }

    while (v43);
  }

  os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 32) + 216LL));
  id v11 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 208) description]);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 216LL));
  v61[0] = @"transactionSourceIdentifiers";
  uint64_t v12 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) description]);
  uint64_t v13 = (void *)v12;
  if (v12) {
    id v14 = (const __CFString *)v12;
  }
  else {
    id v14 = &stru_100662310;
  }
  id v15 = *(const __CFString **)(a1 + 40);
  if (!v15) {
    id v15 = &stru_100662310;
  }
  v62[0] = v14;
  v62[1] = v15;
  v61[1] = @"passUniqueID";
  v61[2] = @"fetchTasks";
  if (v11) {
    id v16 = v11;
  }
  else {
    id v16 = &stru_100662310;
  }
  v62[2] = v16;
  v61[3] = @"fetchTasksPriorToChanges";
  uint64_t v17 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) description]);
  id v18 = (void *)v17;
  if (v17) {
    id v19 = (const __CFString *)v17;
  }
  else {
    id v19 = &stru_100662310;
  }
  v62[3] = v19;
  void v61[4] = @"transactionSourceIdentifiersInProgress";
  uint64_t v20 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) description]);
  id v21 = (void *)v20;
  if (v20) {
    id v22 = (const __CFString *)v20;
  }
  else {
    id v22 = &stru_100662310;
  }
  v62[4] = v22;
  void v61[5] = @"transactionSourceIdentifiersToFetch";
  uint64_t v23 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) description]);
  uint64_t v24 = (void *)v23;
  if (v23) {
    id v25 = (const __CFString *)v23;
  }
  else {
    id v25 = &stru_100662310;
  }
  v61[6] = @"zoneToTransactionSourceIdentifier";
  id v26 = *(const __CFString **)(a1 + 56);
  if (!v26) {
    id v26 = &stru_100662310;
  }
  v62[5] = v25;
  v62[6] = v26;
  id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v62,  v61,  7LL));

  id v28 = *(void **)(a1 + 32);
  id v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) description]);
  __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v27 description]);
  uint64_t v60 = v30;
  __int128 v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v60, 1LL));
  uint64_t v32 = objc_claimAutoreleasedReturnValue( [v28 reportContainerChangeIntervalBeginEventWithType:48 stateName:v29 objectNames:v31 operationGroupName:*(void *)(a1 + 88) operationGroupNameSuffix:*(void *)(a1 + 96)]);
  uint64_t v33 = *(void *)(*(void *)(a1 + 120) + 8LL);
  id v34 = *(void **)(v33 + 40);
  *(void *)(v33 + 40) = v32;

  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = *(void *)(a1 + 40);
    id v38 = [*(id *)(a1 + 48) count];
    uint64_t v39 = *(void *)(a1 + 48);
    uint64_t v40 = *(void *)(a1 + 56);
    *(_DWORD *)id buf = 138544130;
    uint64_t v53 = v37;
    __int16 v54 = 2048;
    id v55 = v38;
    __int16 v56 = 2112;
    uint64_t v57 = v39;
    __int16 v58 = 2112;
    uint64_t v59 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Pass Provisioning record download starting for passUniqueID: %{public}@, %lu transactionSourceIdentifiersToFetch: %@, zoneToTransactionSourceIdentifier: %@",  buf,  0x2Au);
  }

  [*(id *)(a1 + 48) count];
  (*(void (**)(void))(*(void *)(a1 + 112) + 16LL))();
}

void sub_100093E34(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_100093F04;
  v15[3] = &unk_10063EF60;
  uint64_t v12 = a1[8];
  id v17 = v7;
  uint64_t v18 = v12;
  id v16 = v6;
  id v13 = v6;
  id v14 = v7;
  [v8 _fetchAndStoreAppleCashRecordsIfNecessaryForPassUniqueID:v9 operationGroupName:v10 operationGroupNameSuffix:v11 completion:v15];
}

void sub_100093F04(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v8 = *(void **)(v5 + 40);
  id v6 = (id *)(v5 + 40);
  id v7 = v8;
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = a3;
  }
  objc_storeStrong(v6, v9);
  id v10 = a3;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_100093F6C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v21 = a3;
  id v20 = a4;
  id v6 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  id v7 = *(id *)(a1 + 32);
  id v8 = [v7 countByEnumeratingWithState:&v34 objects:v38 count:16];
  if (v8)
  {
    id v9 = v8;
    uint64_t v10 = *(void *)v35;
    do
    {
      uint64_t v11 = 0LL;
      do
      {
        if (*(void *)v35 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = *(void *)(*((void *)&v34 + 1) + 8LL * (void)v11);
        v26[0] = _NSConcreteStackBlock;
        v26[1] = 3221225472LL;
        v26[2] = sub_1000941B8;
        v26[3] = &unk_10063EFD8;
        int8x16_t v22 = *(int8x16_t *)(a1 + 32);
        id v13 = (id)v22.i64[0];
        int8x16_t v27 = vextq_s8(v22, v22, 8uLL);
        uint64_t v28 = v12;
        __int128 v29 = *(_OWORD *)(a1 + 48);
        char v33 = *(_BYTE *)(a1 + 88);
        id v30 = *(id *)(a1 + 64);
        id v14 = *(id *)(a1 + 72);
        uint64_t v15 = *(void *)(a1 + 80);
        id v31 = v14;
        uint64_t v32 = v15;
        [v6 addOperation:v26];

        uint64_t v11 = (char *)v11 + 1;
      }

      while (v9 != v11);
      id v9 = [v7 countByEnumeratingWithState:&v34 objects:v38 count:16];
    }

    while (v9);
  }

  id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472LL;
  v23[2] = sub_100094AD8;
  v23[3] = &unk_10063F000;
  id v24 = v21;
  id v25 = v20;
  id v17 = v21;
  id v18 = v20;
  id v19 = [v6 evaluateWithInput:v16 completion:v23];
}

void sub_1000941B8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000942CC;
  block[3] = &unk_10063EFB0;
  id v9 = *(id *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  id v16 = v9;
  uint64_t v17 = v10;
  uint64_t v18 = *(void *)(a1 + 32);
  __int128 v19 = *(_OWORD *)(a1 + 56);
  char v25 = *(_BYTE *)(a1 + 96);
  id v20 = *(id *)(a1 + 72);
  id v11 = *(id *)(a1 + 80);
  uint64_t v12 = *(void *)(a1 + 88);
  id v23 = v7;
  uint64_t v24 = v12;
  id v21 = v11;
  id v22 = v6;
  id v13 = v6;
  id v14 = v7;
  dispatch_async(v8, block);
}

void sub_1000942CC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectForKeyedSubscript:*(void *)(a1 + 40)]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) containerManager]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 databaseForCloudStoreZone:*(void *)(a1 + 40)]);

  uint64_t v5 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( objc_alloc(&OBJC_CLASS___PDApplePayCloudStoreRecordsRequest),  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  0LL,  1LL,  0LL,  17LL,  *(void *)(a1 + 56),  *(void *)(a1 + 64));
  -[PDCloudStoreRecordsRequest setCloudStoreZone:](v5, "setCloudStoreZone:", *(void *)(a1 + 40));
  __int128 v61 = (void *)v4;
  -[PDCloudStoreRecordsRequest setContainerDatabase:](v5, "setContainerDatabase:", v4);
  -[PDCloudStoreRecordsRequest setIgnoreExistingRecordHash:]( v5,  "setIgnoreExistingRecordHash:",  *(unsigned __int8 *)(a1 + 112));
  __int128 v73 = 0u;
  __int128 v74 = 0u;
  __int128 v71 = 0u;
  __int128 v72 = 0u;
  id v6 = v2;
  id v7 = -[__CFString countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v71,  v83,  16LL);
  if (v7)
  {
    id v8 = v7;
    id v9 = 0LL;
    uint64_t v10 = *(void *)v72;
    do
    {
      for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v72 != v10) {
          objc_enumerationMutation(v6);
        }
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 48) _accountCreateDateForTranactionSourceIdentifier:*(void *)(*((void *)&v71 + 1) + 8 * (void)i) passUniqueID:*(void *)(a1 + 72)]);
        id v13 = v12;
        if (!v9 || v12 && [v12 compare:v9] == (id)-1)
        {
          id v14 = v13;

          id v9 = v14;
        }
      }

      id v8 = -[__CFString countByEnumeratingWithState:objects:count:]( v6,  "countByEnumeratingWithState:objects:count:",  &v71,  v83,  16LL);
    }

    while (v8);
  }

  else
  {
    id v9 = 0LL;
  }

  -[PDCloudStoreRecordsRequest setIgnoreRecordsBeforeDate:](v5, "setIgnoreRecordsBeforeDate:", v9);
  -[PDCloudStoreRecordsRequest setShouldSaveToken:](v5, "setShouldSaveToken:", 1LL);
  uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 48),  "_queue_additionalTransactionSourceIdentifiersForProvisioningWithZone:transactionSourceIdentifiers:",  *(void *)(a1 + 40),  v6));
  id v16 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  -[NSMutableSet unionSet:](v16, "unionSet:", v6);
  __int128 v62 = v5;
  if ([v15 count])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
      *(_DWORD *)id buf = 138543618;
      id v80 = v19;
      __int16 v81 = 2112;
      id v82 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Additional transaction source identifiers to fetch in zone %{public}@ are %@",  buf,  0x16u);
    }

    v77[0] = @"additionalTransactionSourceIdentifiersForZone";
    uint64_t v20 = objc_claimAutoreleasedReturnValue([v15 description]);
    id v21 = (void *)v20;
    if (v20) {
      id v22 = (const __CFString *)v20;
    }
    else {
      id v22 = &stru_100662310;
    }
    if (v6) {
      id v23 = v6;
    }
    else {
      id v23 = &stru_100662310;
    }
    v78[0] = v22;
    v78[1] = v23;
    v77[1] = @"transactionSourceIdentifiersForZone";
    v77[2] = @"zoneName";
    uint64_t v24 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
    char v25 = (void *)v24;
    if (v24) {
      id v26 = (const __CFString *)v24;
    }
    else {
      id v26 = &stru_100662310;
    }
    v77[3] = @"transactionSourceIdentifiers";
    int8x16_t v27 = *(const __CFString **)(a1 + 80);
    if (!v27) {
      int8x16_t v27 = &stru_100662310;
    }
    v78[2] = v26;
    v78[3] = v27;
    uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v78,  v77,  4LL));

    __int128 v29 = *(void **)(a1 + 48);
    id v30 = (void *)objc_claimAutoreleasedReturnValue([v28 description]);
    [v29 reportContainerChangeSignpostEventType:52 stateName:v30 objectNames:0 changeToken:0 error:0 operationGroupName:*(void *)(a1 + 56) operationGroupNameSuffix:*(void *)(a1 + 64)];

    id v31 = (void *)objc_claimAutoreleasedReturnValue([v15 allKeys]);
    uint64_t v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v31));
    -[NSMutableSet unionSet:](v16, "unionSet:", v32);

    uint64_t v5 = v62;
  }

  uint64_t v60 = v15;
  -[PDApplePayCloudStoreRecordsRequest setTransactionSourceIdentifiers:](v5, "setTransactionSourceIdentifiers:", v16);
  v75[0] = @"transactionSourceIdentifiersForZone";
  char v33 = *(void **)(a1 + 80);
  __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString allObjects](v6, "allObjects"));
  __int128 v35 = (void *)objc_claimAutoreleasedReturnValue([v33 dictionaryWithValuesForKeys:v34]);
  uint64_t v36 = objc_claimAutoreleasedReturnValue([v35 description]);
  __int128 v37 = (const __CFString *)v16;
  id v38 = (void *)v36;
  if (v36) {
    uint64_t v39 = (const __CFString *)v36;
  }
  else {
    uint64_t v39 = &stru_100662310;
  }
  v76[0] = v39;
  v75[1] = @"cloudStoreZoneToFetch";
  uint64_t v40 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) zoneName]);
  __int128 v41 = (void *)v40;
  if (v40) {
    uint64_t v42 = (const __CFString *)v40;
  }
  else {
    uint64_t v42 = &stru_100662310;
  }
  id v43 = *(const __CFString **)(a1 + 72);
  __int128 v44 = *(const __CFString **)(a1 + 80);
  if (!v43) {
    id v43 = &stru_100662310;
  }
  v76[1] = v42;
  v76[2] = v43;
  v75[2] = @"passUniqueID";
  v75[3] = @"transactionSourceIdentifiers";
  if (v44) {
    __int128 v45 = v44;
  }
  else {
    __int128 v45 = &stru_100662310;
  }
  v75[4] = @"requestTransactionSourceIdentifiers";
  uint64_t v59 = (__CFString *)v37;
  if (v37) {
    __int128 v46 = v37;
  }
  else {
    __int128 v46 = &stru_100662310;
  }
  v76[3] = v45;
  v76[4] = v46;
  __int128 v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v76,  v75,  5LL));

  __int128 v48 = *(void **)(a1 + 48);
  __int128 v49 = (void *)objc_claimAutoreleasedReturnValue([v47 description]);
  __int128 v50 = (void *)objc_claimAutoreleasedReturnValue(-[__CFString allObjects](v6, "allObjects"));
  __int128 v51 = (void *)objc_claimAutoreleasedReturnValue( [v48 reportContainerChangeIntervalBeginEventWithType:39 stateName:v49 objectNames:v50 operationGroupName:*(void *)(a1 + 56) operationGroupNameSuffix:*(void *)(a1 + 64)]);

  __int128 v52 = *(void **)(a1 + 48);
  v63[0] = _NSConcreteStackBlock;
  v63[1] = 3221225472LL;
  v63[2] = sub_1000948B8;
  v63[3] = &unk_10063EF88;
  __int128 v64 = v6;
  id v65 = v52;
  id v66 = v51;
  __int128 v58 = *(_OWORD *)(a1 + 96);
  id v53 = (id)v58;
  __int128 v70 = v58;
  id v67 = *(id *)(a1 + 88);
  id v54 = *(id *)(a1 + 72);
  uint64_t v55 = *(void *)(a1 + 40);
  id v68 = v54;
  uint64_t v69 = v55;
  id v56 = v51;
  uint64_t v57 = v6;
  [v52 executeRecordsRequest:v62 completion:v63];
}

void sub_1000948B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = *(void *)(*(void *)(a1 + 88) + 8LL);
  id v8 = *(void **)(v5 + 40);
  id v6 = (id *)(v5 + 40);
  id v7 = v8;
  if (v8) {
    id v9 = v7;
  }
  else {
    id v9 = v4;
  }
  objc_storeStrong(v6, v9);
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  id v10 = *(id *)(a1 + 32);
  id v11 = [v10 countByEnumeratingWithState:&v24 objects:v36 count:16];
  if (!v11)
  {

    objc_msgSend( *(id *)(a1 + 40),  "reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:error:",  *(void *)(a1 + 48),  v4,  (void)v24);
LABEL_19:
    id v23 = *(void (**)(void))(*(void *)(a1 + 80) + 16LL);
    goto LABEL_20;
  }

  id v12 = v11;
  unsigned __int8 v13 = 0;
  uint64_t v14 = *(void *)v25;
  do
  {
    for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v25 != v14) {
        objc_enumerationMutation(v10);
      }
      if ((v13 & 1) != 0)
      {
        unsigned __int8 v13 = 1;
      }

      else
      {
        uint64_t v16 = *(void *)(*((void *)&v24 + 1) + 8LL * (void)i);
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataSource", (void)v24));
        unsigned __int8 v13 = [v17 transactionSourceExistsWithIdentifier:v16];
      }
    }

    id v12 = [v10 countByEnumeratingWithState:&v24 objects:v36 count:16];
  }

  while (v12);

  [*(id *)(a1 + 40) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 48) error:v4];
  if ((v13 & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  __int128 v19 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = *(void *)(a1 + 32);
    uint64_t v21 = *(void *)(a1 + 64);
    id v22 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) zoneName]);
    *(_DWORD *)id buf = 138544130;
    uint64_t v29 = v21;
    __int16 v30 = 2112;
    uint64_t v31 = v20;
    __int16 v32 = 2114;
    char v33 = v22;
    __int16 v34 = 2112;
    id v35 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v19,  OS_LOG_TYPE_DEFAULT,  "Completed fetching transaction records from CloudKit for payment pass with uniqueID: %{public}@. Transaction sourc e identifiers %@. In zone %{public}@. Error: %@",  buf,  0x2Au);
  }

  id v23 = *(void (**)(void))(*(void *)(a1 + 80) + 16LL);
LABEL_20:
  v23();
}

uint64_t sub_100094AD8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return (*(uint64_t (**)(void, void, id))(*(void *)(a1 + 40) + 16))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  [a4 isCanceled]);
}

void sub_100094B0C(uint64_t a1)
{
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_100094C08;
  block[3] = &unk_10063F050;
  id v8 = *(id *)(a1 + 40);
  id v3 = *(id *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 88);
  id v9 = v3;
  uint64_t v15 = v4;
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  uint64_t v11 = v6;
  uint64_t v16 = *(void *)(a1 + 96);
  id v12 = *(id *)(a1 + 64);
  id v13 = *(id *)(a1 + 72);
  id v14 = *(id *)(a1 + 80);
  dispatch_async(v2, block);
}

uint64_t sub_100094C08(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    [v7 timeIntervalSinceDate:*(void *)(a1 + 48)];
    *(_DWORD *)id buf = 138544130;
    uint64_t v26 = v4;
    __int16 v27 = 2112;
    uint64_t v28 = v5;
    __int16 v29 = 2112;
    uint64_t v30 = v6;
    __int16 v31 = 2048;
    uint64_t v32 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Completed pass provisioning transaction fetch for pass %{public}@, transactionSourceIdentifiers %@, with error %@. Total time: %f seconds.",  buf,  0x2Au);
  }

  uint64_t v9 = PKLogFacilityTypeGetObject(35LL);
  id v10 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(v9);
  os_signpost_id_t v11 = os_signpost_id_make_with_pointer(v10, *(const void **)(a1 + 56));
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v12 = v11;
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)id buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_INTERVAL_END,  v12,  "cloudstore:fetchPassRecords",  "",  buf,  2u);
    }
  }

  [*(id *)(a1 + 56) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) error:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)];
  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 200LL));
  [WeakRetained applePayCloudStoreContainer:*(void *)(a1 + 56) didFinishTransactionFetchForPassUniqueID:*(void *)(a1 + 32)];

  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  id v14 = *(id *)(a1 + 64);
  uint64_t v15 = (char *)[v14 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)v21;
    do
    {
      uint64_t v18 = 0LL;
      do
      {
        if (*(void *)v21 != v17) {
          objc_enumerationMutation(v14);
        }
        (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))(*(void *)(a1 + 72));
        ++v18;
      }

      while (v16 != v18);
      uint64_t v16 = (char *)[v14 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }

    while (v16);
  }

  uint64_t result = *(void *)(a1 + 80);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL));
  }
  return result;
}

void sub_100095524(_Unwind_Exception *a1)
{
}

void sub_100095564(uint64_t a1)
{
}

void sub_10009556C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(dispatch_group_s **)(a1 + 32);
  uint64_t v9 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) workQueue]);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_100095628;
  void v12[3] = &unk_1006396B0;
  id v13 = v6;
  id v14 = v7;
  id v10 = v6;
  id v11 = v7;
  dispatch_group_notify(v8, v9, v12);
}

uint64_t sub_100095628(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_10009563C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = *(os_unfair_lock_s **)(a1 + 32);
  if (*(_BYTE *)(a1 + 64))
  {
    id v7 = v6 + 54;
    uint64_t v8 = a4;
    id v9 = a3;
    os_unfair_lock_lock(v7);
    __int128 v19 = (PDApplePayCloudStoreRecordFetchOperation *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 208) objectForKeyedSubscript:*(void *)(a1 + 40)]);
    id v10 = (PKCloudStoreRecordFetchTask *)objc_claimAutoreleasedReturnValue(-[PDApplePayCloudStoreRecordFetchOperation task](v19, "task"));
    if (-[PKCloudStoreRecordFetchTask status](v10, "status") == (id)2
      && -[PKCloudStoreRecordFetchTask type](v10, "type") == (id)3)
    {
      id v11 = v10;
    }

    else
    {
      id v11 = -[PKCloudStoreRecordFetchTask initWithCloudStoreZone:type:]( objc_alloc(&OBJC_CLASS___PKCloudStoreRecordFetchTask),  "initWithCloudStoreZone:type:",  *(void *)(a1 + 48),  3LL);

      os_signpost_id_t v12 = v19;
      if (!v19) {
        os_signpost_id_t v12 = objc_alloc_init(&OBJC_CLASS___PDApplePayCloudStoreRecordFetchOperation);
      }
      __int128 v19 = v12;
      -[PDApplePayCloudStoreRecordFetchOperation updateTask:](v12, "updateTask:", v11);
      id v13 = *(void **)(*(void *)(a1 + 32) + 208LL);
      id v14 = (void *)objc_claimAutoreleasedReturnValue(-[PDApplePayCloudStoreRecordFetchOperation identifier](v19, "identifier"));
      [v13 safelySetObject:v19 forKey:v14];

      -[PKCloudStoreRecordFetchTask startTask](v11, "startTask");
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
      [v15 updateRecordFetchTask:v11];
    }

    os_unfair_lock_unlock((os_unfair_lock_t)(*(void *)(a1 + 32) + 216LL));
    v8[2](v8, v9, 0LL);
  }

  else
  {
    id v11 = a4;
    __int128 v19 = a3;
    uint64_t v16 = objc_claimAutoreleasedReturnValue(-[os_unfair_lock_s setupAssistantNotCompleteError](v6, "setupAssistantNotCompleteError"));
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8LL);
    uint64_t v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    (*((void (**)(PKCloudStoreRecordFetchTask *, PDApplePayCloudStoreRecordFetchOperation *, uint64_t))v11 + 2))( v11,  v19,  1LL);
  }
}

void sub_100095800(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  uint64_t v11 = a1[7];
  v18[1] = 3221225472LL;
  void v18[2] = sub_1000958F4;
  v18[3] = &unk_10063B638;
  os_signpost_id_t v12 = (void *)a1[8];
  uint64_t v13 = a1[9];
  uint64_t v14 = a1[10];
  id v20 = v7;
  uint64_t v21 = v13;
  id v19 = v6;
  v17.receiver = v12;
  v17.super_class = (Class)&OBJC_CLASS___PDApplePayCloudStoreContainer;
  v18[0] = _NSConcreteStackBlock;
  id v15 = v6;
  id v16 = v7;
  objc_msgSendSuper2( &v17,  "fetchRecordsInAcceptedZoneShare:databaseIdentifier:operationGroupName:operationGroupNameSuffix:qualityOfService:completion:",  v8,  v9,  v10,  v11,  v14,  v18);
}

void sub_1000958F4(uint64_t a1, void *a2)
{
  id v4 = a2;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_100095948(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))( result,  *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL));
  }
  return result;
}

LABEL_67:
        id v7 = v78;
        goto LABEL_68;
      }

      if (((v40 | v41 & v21 ^ 1) & 1) == 0)
      {
        id v78 = v7;
        uint64_t v95 = 0u;
        uint64_t v96 = 0u;
        uint64_t v93 = 0u;
        int v94 = 0u;
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v83 deviceTransactionSourceIdentifiers]);
        id v43 = [v42 countByEnumeratingWithState:&v93 objects:v103 count:16];
        if (v43)
        {
          __int128 v44 = v43;
          id v82 = v29;
          id v76 = v22;
          uint64_t v77 = v6;
          __int128 v45 = *(void *)v94;
          do
          {
            for (uint64_t j = 0LL; j != v44; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v94 != v45) {
                objc_enumerationMutation(v42);
              }
              __int128 v47 = *(void *)(*((void *)&v93 + 1) + 8LL * (void)j);
              __int128 v48 = (void *)objc_claimAutoreleasedReturnValue([v83 uniqueID]);
              __int128 v49 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"paymentApplication, %@, Apple Card",  v48));
              -[NSMutableDictionary safelySetObject:forKey:](v9, "safelySetObject:forKey:", v49, v47);
            }

            __int128 v44 = [v42 countByEnumeratingWithState:&v93 objects:v103 count:16];
          }

          while (v44);
LABEL_66:
          __int128 v22 = v76;
          id v6 = v77;
          __int16 v29 = v82;
          goto LABEL_67;
        }

        goto LABEL_67;
      }
    }
  }

  else if ([v6 zoneType] == (id)4)
  {
    __int128 v50 = v21 & v27 ^ 1;
    __int128 v51 = v28 ^ 1;
    if ((v50 & 1) != 0 || v51)
    {
      if (((v21 & v27 | v51) & 1) == 0)
      {
        id v78 = v7;
        char v91 = 0u;
        uint64_t v92 = 0u;
        v89 = 0u;
        uint64_t v90 = 0u;
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v83 deviceTransactionSourceIdentifiers]);
        id v68 = [v42 countByEnumeratingWithState:&v89 objects:v102 count:16];
        if (v68)
        {
          uint64_t v69 = v68;
          id v82 = v29;
          id v76 = v22;
          uint64_t v77 = v6;
          __int128 v70 = *(void *)v90;
          do
          {
            for (k = 0LL; k != v69; k = (char *)k + 1)
            {
              if (*(void *)v90 != v70) {
                objc_enumerationMutation(v42);
              }
              __int128 v72 = *(void *)(*((void *)&v89 + 1) + 8LL * (void)k);
              __int128 v73 = (void *)objc_claimAutoreleasedReturnValue([v83 uniqueID]);
              __int128 v74 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"paymentApplication, %@, Apple Card",  v73));
              -[NSMutableDictionary safelySetObject:forKey:](v9, "safelySetObject:forKey:", v74, v72);
            }

            uint64_t v69 = [v42 countByEnumeratingWithState:&v89 objects:v102 count:16];
          }

          while (v69);
          goto LABEL_66;
        }

        goto LABEL_67;
      }

      if (((v50 | v28) & 1) == 0)
      {
        id v78 = v7;
        v87 = 0u;
        uint64_t v88 = 0u;
        id v85 = 0u;
        id v86 = 0u;
        uint64_t v42 = (void *)objc_claimAutoreleasedReturnValue([v29 transactionSourceIdentifiers]);
        __int128 v52 = [v42 countByEnumeratingWithState:&v85 objects:v101 count:16];
        if (v52)
        {
          id v53 = v52;
          id v76 = v22;
          uint64_t v77 = v6;
          id v80 = *(void *)v86;
          id v82 = v29;
          do
          {
            for (m = 0LL; m != v53; m = (char *)m + 1)
            {
              if (*(void *)v86 != v80) {
                objc_enumerationMutation(v42);
              }
              uint64_t v55 = *(void *)(*((void *)&v85 + 1) + 8LL * (void)m);
              id v56 = (void *)objc_claimAutoreleasedReturnValue([v82 altDSID]);
              uint64_t v57 = (void *)objc_claimAutoreleasedReturnValue([v82 firstName]);
              __int128 v58 = (void *)objc_claimAutoreleasedReturnValue([v82 lastName]);
              uint64_t v59 = (void *)objc_claimAutoreleasedReturnValue([v82 appleID]);
              uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"accountUser, %@ - %@ - %@ - %@, Apple Card CoOwner",  v56,  v57,  v58,  v59));
              -[NSMutableDictionary safelySetObject:forKey:](v9, "safelySetObject:forKey:", v60, v55);
            }

            id v53 = [v42 countByEnumeratingWithState:&v85 objects:v101 count:16];
          }

          while (v53);
          goto LABEL_66;
        }

        goto LABEL_67;
      }
    }
  }

LABEL_68:
  if (-[NSMutableDictionary count](v9, "count")) {
    objc_super v17 = -[NSMutableDictionary copy](v9, "copy");
  }
  else {
    objc_super v17 = 0LL;
  }

LABEL_72:
  return v17;
}

    sub_1000D2F24(*(void **)(a1 + 40), v11, *(void **)(a1 + 48));
    goto LABEL_208;
  }

        uint64_t v11 = PKLocalizedPaymentString(&v9->isa);
        os_signpost_id_t v12 = objc_claimAutoreleasedReturnValue(v11);
        goto LABEL_79;
      case 2LL:
        if ((v5 & 8) != 0)
        {
          uint64_t v10 = @"METRO_TRANSACTION_FARE_ADJUSTMENT_NOTIFICATION_TITLE_FORMAT";
        }

        else if ((v5 & 0x10) != 0)
        {
          uint64_t v10 = @"METRO_TRANSACTION_FARE_REBATE_NOTIFICATION_TITLE_FORMAT";
        }

        else
        {
          uint64_t v10 = @"METRO_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
        }

        goto LABEL_78;
      case 3LL:
        if ((v5 & 8) != 0)
        {
          uint64_t v10 = @"BUS_TRANSACTION_FARE_ADJUSTMENT_NOTIFICATION_TITLE_FORMAT";
        }

        else if ((v5 & 0x10) != 0)
        {
          uint64_t v10 = @"BUS_TRANSACTION_FARE_REBATE_NOTIFICATION_TITLE_FORMAT";
        }

        else
        {
          uint64_t v10 = @"BUS_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
        }

        goto LABEL_78;
      case 4LL:
        if ((v5 & 8) != 0)
        {
          uint64_t v10 = @"TRAIN_TRANSACTION_FARE_ADJUSTMENT_NOTIFICATION_TITLE_FORMAT";
        }

        else if ((v5 & 0x10) != 0)
        {
          uint64_t v10 = @"TRAIN_TRANSACTION_FARE_REBATE_NOTIFICATION_TITLE_FORMAT";
        }

        else
        {
          uint64_t v10 = @"TRAIN_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
        }

        goto LABEL_78;
      case 7LL:
        if ((v5 & 8) != 0)
        {
          uint64_t v10 = @"LIGHT_RAIL_TRANSACTION_FARE_ADJUSTMENT_NOTIFICATION_TITLE_FORMAT";
        }

        else if ((v5 & 0x10) != 0)
        {
          uint64_t v10 = @"LIGHT_RAIL_TRANSACTION_FARE_REBATE_NOTIFICATION_TITLE_FORMAT";
        }

        else
        {
          uint64_t v10 = @"LIGHT_RAIL_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
        }

        goto LABEL_78;
      case 8LL:
        if ((v5 & 8) != 0)
        {
          uint64_t v10 = @"CABLE_CAR_TRANSACTION_FARE_ADJUSTMENT_NOTIFICATION_TITLE_FORMAT";
        }

        else if ((v5 & 0x10) != 0)
        {
          uint64_t v10 = @"CABLE_CAR_TRANSACTION_FARE_REBATE_NOTIFICATION_TITLE_FORMAT";
        }

        else
        {
          uint64_t v10 = @"CABLE_CAR_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
        }

        goto LABEL_78;
      default:
        switch(a3)
        {
          case 257LL:
            if ((v5 & 8) != 0)
            {
              uint64_t v9 = @"SHINKANSEN_TRANSACTION_FARE_ADJUSTMENT_AMOUNT_NOTIFICATION_FORMAT";
            }

            else if ((v5 & 0x10) != 0)
            {
              uint64_t v9 = @"SHINKANSEN_TRANSACTION_FARE_REBATE_AMOUNT_NOTIFICATION_FORMAT";
            }

            else
            {
              uint64_t v9 = @"SHINKANSEN_TRANSACTION_AMOUNT_NOTIFICATION_FORMAT";
            }

            goto LABEL_68;
          case 258LL:
            if ((v5 & 8) != 0)
            {
              uint64_t v10 = @"MAGLEV_TRANSACTION_FARE_ADJUSTMENT_NOTIFICATION_TITLE_FORMAT";
            }

            else if ((v5 & 0x10) != 0)
            {
              uint64_t v10 = @"MAGLEV_TRANSACTION_FARE_REBATE_NOTIFICATION_TITLE_FORMAT";
            }

            else
            {
              uint64_t v10 = @"MAGLEV_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
            }

            goto LABEL_78;
          case 259LL:
            if ((v5 & 8) != 0)
            {
              uint64_t v10 = @"TAXI_TRANSACTION_FARE_ADJUSTMENT_NOTIFICATION_TITLE_FORMAT";
            }

            else if ((v5 & 0x10) != 0)
            {
              uint64_t v10 = @"TAXI_TRANSACTION_FARE_REBATE_NOTIFICATION_TITLE_FORMAT";
            }

            else
            {
              uint64_t v10 = @"TAXI_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
            }

            goto LABEL_78;
          case 260LL:
            if ((v5 & 8) != 0)
            {
              uint64_t v10 = @"FERRY_TRANSACTION_FARE_ADJUSTMENT_NOTIFICATION_TITLE_FORMAT";
            }

            else if ((v5 & 0x10) != 0)
            {
              uint64_t v10 = @"FERRY_TRANSACTION_FARE_REBATE_NOTIFICATION_TITLE_FORMAT";
            }

            else
            {
              uint64_t v10 = @"FERRY_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
            }

            goto LABEL_78;
          case 261LL:
            if ((v5 & 8) != 0)
            {
              uint64_t v10 = @"BIKE_TRANSACTION_FARE_ADJUSTMENT_NOTIFICATION_TITLE_FORMAT";
            }

            else if ((v5 & 0x10) != 0)
            {
              uint64_t v10 = @"BIKE_TRANSACTION_FARE_REBATE_NOTIFICATION_TITLE_FORMAT";
            }

            else
            {
              uint64_t v10 = @"BIKE_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
            }

            goto LABEL_78;
          default:
            goto LABEL_82;
        }
    }
  }

  else
  {
    switch(a3)
    {
      case 513LL:
        uint64_t v9 = @"DEPOSIT_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
        goto LABEL_68;
      case 514LL:
        uint64_t v9 = @"REFUND_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
        goto LABEL_68;
      case 515LL:
        uint64_t v9 = @"PURCHASE_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
        goto LABEL_68;
      case 516LL:
        uint64_t v9 = @"WITHDRAWAL_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
        goto LABEL_68;
      case 517LL:
        uint64_t v9 = @"CARDREAD_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
        goto LABEL_68;
      case 518LL:
        goto LABEL_5;
      default:
        if (a3 == 1025)
        {
          if ((v5 & 8) != 0)
          {
            uint64_t v9 = @"GREEN_CAR_TRANSACTION_FARE_ADJUSTMENT_AMOUNT_NOTIFICATION_FORMAT";
          }

          else if ((v5 & 0x10) != 0)
          {
            uint64_t v9 = @"GREEN_CAR_TRANSACTION_FARE_REBATE_AMOUNT_NOTIFICATION_FORMAT";
          }

          else
          {
            uint64_t v9 = @"GREEN_CAR_TRANSACTION_AMOUNT_NOTIFICATION_FORMAT";
          }

          goto LABEL_68;
        }

        if (a3 != 1026) {
          goto LABEL_82;
        }
        if ((v5 & 8) != 0)
        {
          uint64_t v10 = @"METRO_UPGRADE_TRANSACTION_FARE_ADJUSTMENT_NOTIFICATION_TITLE_FORMAT";
        }

        else if ((v5 & 0x10) != 0)
        {
          uint64_t v10 = @"METRO_UPGRADE_TRANSACTION_FARE_REBATE_NOTIFICATION_TITLE_FORMAT";
        }

        else
        {
          uint64_t v10 = @"METRO_UPGRADE_TRANSACTION_NOTIFICATION_TITLE_FORMAT";
        }

        break;
    }

void sub_100096358(id *a1)
{
  uint64_t v2 = (void *)*((void *)a1[4] + 34);
  if (!v2) {
    goto LABEL_19;
  }
  id v3 = a1[5];
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v2 associatedPassUniqueID]);
  id v5 = v3;
  id v6 = v4;
  if (v5 == v6)
  {
  }

  else
  {
    id v7 = v6;
    if (!v5 || !v6)
    {

      goto LABEL_19;
    }

    unsigned __int8 v8 = [v5 isEqualToString:v6];

    if ((v8 & 1) == 0)
    {
LABEL_19:
      id v32 = a1[8];
      if (v32) {
        (*((void (**)(id, void, void))v32 + 2))(v32, 0LL, 0LL);
      }
      return;
    }
  }

  v65[0] = 0LL;
  v65[1] = v65;
  v65[2] = 0x3032000000LL;
  v65[3] = sub_10008BBF8;
  v65[4] = sub_10008BC08;
  id v66 = 0LL;
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([a1[4] dataSource]);
  uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([v9 transactionSourceIdentifiersForPassUniqueIdentifier:a1[5]]);

  id v10 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  __int16 v34 = (void *)objc_claimAutoreleasedReturnValue( [a1[4] reportContainerChangeIntervalBeginEventWithType:51 stateName:a1[5] objectNames:0 operationGroupName:a1[6] operationGroupNameSuffix:a1[7]]);
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([a1[4] containerManager]);
  os_signpost_id_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 databaseForScope:2]);

  __int128 v63 = 0u;
  __int128 v64 = 0u;
  __int128 v61 = 0u;
  __int128 v62 = 0u;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( [a1[4] _peerPaymentZoneNamesForAccount:*((void *)a1[4] + 34) containerDatabase:v12]);
  id v14 = [v13 countByEnumeratingWithState:&v61 objects:v67 count:16];
  if (v14)
  {
    uint64_t v35 = *(void *)v62;
    obuint64_t j = v13;
    do
    {
      for (uint64_t i = 0LL; i != v14; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v62 != v35) {
          objc_enumerationMutation(obj);
        }
        uint64_t v16 = *(void *)(*((void *)&v61 + 1) + 8LL * (void)i);
        objc_super v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "containerManager", obj));
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v17 cloudStoreZoneForZoneName:v16 inContainerDatabase:v12]);

        if (v18)
        {
          id v19 = a1[4];
          id v20 = (void *)objc_claimAutoreleasedReturnValue([v36 anyObject]);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v19 _accountCreateDateForTranactionSourceIdentifier:v20 passUniqueID:a1[5]]);

          v51[0] = _NSConcreteStackBlock;
          v51[1] = 3221225472LL;
          v51[2] = sub_1000968D4;
          v51[3] = &unk_10063F168;
          id v22 = v18;
          id v23 = a1[4];
          id v52 = v22;
          id v53 = v23;
          id v54 = a1[6];
          id v55 = a1[7];
          id v24 = v12;
          id v56 = v24;
          id v25 = v36;
          id v57 = v25;
          id v26 = v21;
          id v58 = v26;
          uint64_t v60 = v65;
          id v59 = a1[5];
          [v10 addOperation:v51];
          v41[0] = _NSConcreteStackBlock;
          v41[1] = 3221225472LL;
          v41[2] = sub_100096BD8;
          v41[3] = &unk_10063F168;
          id v27 = v22;
          id v28 = a1[4];
          id v42 = v27;
          id v43 = v28;
          id v44 = a1[6];
          id v45 = a1[7];
          id v46 = v24;
          id v47 = v25;
          id v29 = v26;
          id v48 = v29;
          __int128 v50 = v65;
          id v49 = a1[5];
          [v10 addOperation:v41];
          uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
          v37[0] = _NSConcreteStackBlock;
          v37[1] = 3221225472LL;
          v37[2] = sub_100096EDC;
          v37[3] = &unk_10063F118;
          void v37[4] = a1[4];
          id v38 = v34;
          uint64_t v40 = v65;
          id v39 = a1[8];
          id v31 = [v10 evaluateWithInput:v30 completion:v37];
        }
      }

      uint64_t v13 = obj;
      id v14 = [obj countByEnumeratingWithState:&v61 objects:v67 count:16];
    }

    while (v14);
  }

  _Block_object_dispose(v65, 8);
}

void sub_100096894( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

void sub_1000968D4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
    *(_DWORD *)id buf = 138543362;
    uint64_t v30 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Fetching recurring memo records from CloudKit in zone %{public}@",  buf,  0xCu);
  }

  uint64_t v21 = PKCloudRecurringPaymentMemoRecordType;
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v13 = *(void **)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 72);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_100096AA0;
  void v22[3] = &unk_10063F140;
  uint64_t v17 = *(void *)(a1 + 96);
  id v27 = v7;
  uint64_t v28 = v17;
  id v23 = v6;
  uint64_t v18 = *(void *)(a1 + 80);
  id v24 = *(id *)(a1 + 88);
  id v25 = *(id *)(a1 + 72);
  id v26 = *(id *)(a1 + 32);
  id v19 = v6;
  id v20 = v7;
  [v13 _fetchAndStoreAppleCashItemWithRecordType:v21 operationGroupName:v11 operationGroupNameSuffix:v12 zone:v14 containerDatabase:v15 transac tionSourceIdentifiers:v16 accountCreationDate:v18 completion:v22];
}

void sub_100096AA0(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8LL);
  uint64_t v9 = *(void **)(v6 + 40);
  id v7 = (id *)(v6 + 40);
  unsigned __int8 v8 = v9;
  if (v9) {
    id v10 = v8;
  }
  else {
    id v10 = v5;
  }
  objc_storeStrong(v7, v10);
  if ((a2 & 1) != 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) zoneName]);
      int v17 = 138543874;
      uint64_t v18 = v13;
      __int16 v19 = 2112;
      uint64_t v20 = v14;
      __int16 v21 = 2114;
      id v22 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Completed fetching recurring memo records from CloudKit for payment pass with uniqueID: %{public}@. Transaction source identifiers %@. In zone %{public}@",  (uint8_t *)&v17,  0x20u);
    }

    uint64_t v16 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
  }

  else
  {
    uint64_t v16 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
  }

  v16();
}

void sub_100096BD8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) zoneName]);
    *(_DWORD *)id buf = 138543362;
    uint64_t v30 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Fetching counterpart image data from CloudKit in zone %{public}@",  buf,  0xCu);
  }

  uint64_t v21 = PKCloudCounterpartImageRecordType;
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v13 = *(void **)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 72);
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_100096DA4;
  void v22[3] = &unk_10063F140;
  uint64_t v17 = *(void *)(a1 + 96);
  id v27 = v7;
  uint64_t v28 = v17;
  id v23 = v6;
  uint64_t v18 = *(void *)(a1 + 80);
  id v24 = *(id *)(a1 + 88);
  id v25 = *(id *)(a1 + 72);
  id v26 = *(id *)(a1 + 32);
  id v19 = v6;
  id v20 = v7;
  [v13 _fetchAndStoreAppleCashItemWithRecordType:v21 operationGroupName:v11 operationGroupNameSuffix:v12 zone:v14 containerDatabase:v15 transac tionSourceIdentifiers:v16 accountCreationDate:v18 completion:v22];
}

void sub_100096DA4(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = *(void *)(*(void *)(a1 + 72) + 8LL);
  uint64_t v9 = *(void **)(v6 + 40);
  id v7 = (id *)(v6 + 40);
  unsigned __int8 v8 = v9;
  if (v9) {
    id v10 = v8;
  }
  else {
    id v10 = v5;
  }
  objc_storeStrong(v7, v10);
  if ((a2 & 1) != 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 48);
      uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) zoneName]);
      int v17 = 138543874;
      uint64_t v18 = v13;
      __int16 v19 = 2112;
      uint64_t v20 = v14;
      __int16 v21 = 2114;
      id v22 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Completed fetching counterpart image data records from CloudKit for payment pass with uniqueID: %{public}@. Tran saction source identifiers %@. In zone %{public}@",  (uint8_t *)&v17,  0x20u);
    }

    uint64_t v16 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
  }

  else
  {
    uint64_t v16 = *(void (**)(void))(*(void *)(a1 + 64) + 16LL);
  }

  v16();
}

void sub_100096EDC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];
  uint64_t v5 = *(void *)(a1 + 48);
  if (v5) {
    (*(void (**)(uint64_t, id, void))(v5 + 16))( v5,  [v6 isCanceled],  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40));
  }
}

void sub_100097120(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    id v7 = v6;
    unsigned __int8 v8 = 0;
    uint64_t v9 = *(void *)v14;
    do
    {
      for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(v5);
        }
        if ((v8 & 1) != 0)
        {
          unsigned __int8 v8 = 1;
        }

        else
        {
          uint64_t v11 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)i);
          uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "dataSource", (void)v13));
          unsigned __int8 v8 = [v12 transactionSourceExistsWithIdentifier:v11];
        }
      }

      id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }

    while (v7);
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_100097368(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v33 objects:v37 count:16];
  if (v7)
  {
    id v9 = v7;
    uint64_t v10 = *(void *)v34;
    uint64_t v11 = &OBJC_CLASS___PKAccountWebServiceRequestPhysicalCardRequest_ptr;
    do
    {
      uint64_t v12 = 0LL;
      id v32 = v9;
      do
      {
        if (*(void *)v34 != v10) {
          objc_enumerationMutation(v6);
        }
        __int128 v13 = *(void **)(*((void *)&v33 + 1) + 8LL * (void)v12);
        uint64_t v14 = objc_opt_class(v11[72], v8);
        if ((objc_opt_isKindOfClass(v13, v14) & 1) != 0)
        {
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v13 transaction]);
          int v17 = (void *)objc_claimAutoreleasedReturnValue([v16 transactionSourceIdentifier]);
          if (!v17)
          {
            id v18 = objc_alloc(&OBJC_CLASS___PKCloudStoreRecord);
            __int16 v19 = (void *)objc_claimAutoreleasedReturnValue([v13 records]);
            uint64_t v20 = a1;
            uint64_t v21 = v10;
            id v22 = v6;
            id v23 = v5;
            id v24 = (void *)objc_claimAutoreleasedReturnValue([v19 allObjects]);
            id v25 = [v18 initWithRecords:v24];

            id v5 = v23;
            id v6 = v22;
            uint64_t v10 = v21;
            a1 = v20;

            id v9 = v32;
            int v17 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(v20 + 32) _transactionSourceIdentifierForTransactionCloudStoreRecord:v25 databaseIdentifier:v5]);

            uint64_t v11 = &OBJC_CLASS___PKAccountWebServiceRequestPhysicalCardRequest_ptr;
          }

          if ([*(id *)(a1 + 40) count]
            && ([*(id *)(a1 + 40) containsObject:v17] & 1) == 0)
          {
            goto LABEL_18;
          }
        }

        else
        {
          uint64_t v26 = objc_opt_class(&OBJC_CLASS___PKCloudRecordAccountEvent, v15);
          if ((objc_opt_isKindOfClass(v13, v26) & 1) == 0) {
            goto LABEL_19;
          }
          id v27 = (void *)objc_claimAutoreleasedReturnValue([v13 event]);
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v27 accountIdentifier]);

          if (*(void *)(a1 + 56))
          {
            uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
            int v17 = (void *)objc_claimAutoreleasedReturnValue( [v28 associatedAccountIdentifierForPassWithUniqueIdentifier:*(void *)(a1 + 56)]);

            id v9 = v32;
            if ((PKEqualObjects(v17, v16) & 1) == 0) {
              goto LABEL_18;
            }
          }

          else
          {
            id v29 = (void *)objc_claimAutoreleasedReturnValue([v13 event]);
            int v17 = (void *)objc_claimAutoreleasedReturnValue([v29 altDSID]);

            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
            id v31 = [v30 transactionSourceIdentifierForAccountUserAltDSID:v17 accountIdentifier:v16];

            id v9 = v32;
          }
        }

        [*(id *)(a1 + 48) addCloudRecord:v13 forContainerDatabaseIdentifier:v5];
LABEL_18:

LABEL_19:
        uint64_t v12 = (char *)v12 + 1;
      }

      while (v9 != v12);
      id v9 = [v6 countByEnumeratingWithState:&v33 objects:v37 count:16];
    }

    while (v9);
  }
}

uint64_t sub_1000976F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 48) + 16))( *(void *)(a1 + 48),  objc_msgSend(*(id *)(a1 + 32), "_queue_isRelevantTransactionSourceIdentifier:", *(void *)(a1 + 40)));
}

uint64_t sub_100097810(uint64_t a1)
{
  return (*(uint64_t (**)(void, id))(*(void *)(a1 + 56) + 16))( *(void *)(a1 + 56),  objc_msgSend( *(id *)(a1 + 32),  "_queue_canSyncTransactionToCloudKit:forTransactionSourceIdentifier:",  *(void *)(a1 + 40),  *(void *)(a1 + 48)));
}

void sub_100097C5C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)id buf = 138543362;
    uint64_t v16 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Bootstrapping zone with name %{public}@",  buf,  0xCu);
  }

  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) containerManager]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 databaseForScope:2]);

  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 identifier]);
  if (v7)
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 zoneForZoneName:*(void *)(a1 + 32)]);
    id v9 = *(void **)(a1 + 40);
    if (v8)
    {
      __int128 v13 = v7;
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v8));
      uint64_t v14 = v10;
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
      objc_msgSend( v9,  "_queue_createZoneAndSubscriptionsByDatabaseIdentifier:groupSuffix:completion:",  v11,  0,  *(void *)(a1 + 48));
    }

    else
    {
      uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no zone defined for zone name %@",  *(void *)(a1 + 32)));
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 errorWithCode:-4001 description:v12]);

      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }
  }

  else
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) errorWithCode:-4004 description:@"No private database defined"]);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_100097F20(uint64_t a1)
{
  uint64_t v2 = PKCreateSimulatedPaymentTransaction(2LL);
  id v5 = (id)objc_claimAutoreleasedReturnValue(v2);
  id v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](&OBJC_CLASS___NSUUID, "UUID"));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 UUIDString]);
  [v5 setServiceIdentifier:v4];

  [v5 setHasNotificationServiceData:1];
  [*(id *)(a1 + 32) uploadTransaction:v5 forTransactionSourceIdentifier:*(void *)(a1 + 40) includeServerData:1 completion:*(void *)(a1 + 48)];
}

void sub_1000980A0(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 cloudStoreZonesByDatabaseIdentifierForItem:*(void *)(a1 + 40) action:1]);

  if ([v3 count])
  {
    uint64_t v4 = 2LL * *(unsigned __int8 *)(a1 + 64);
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) recordTypesAndNamesForCodingType:v4]);
    if ([v5 count])
    {
      id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 passUniqueIdentifierForTransactionSourceIdentifier:*(void *)(a1 + 48)]);

      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 passWithUniqueIdentifier:v8]);
      uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 paymentPass]);

      v34[0] = _NSConcreteStackBlock;
      v34[1] = 3221225472LL;
      v34[2] = sub_10009846C;
      v34[3] = &unk_10063F1E0;
      id v12 = *(id *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 32);
      id v35 = v12;
      uint64_t v36 = v13;
      id v38 = v6;
      uint64_t v39 = v4;
      id v37 = v11;
      uint64_t v14 = v6;
      id v15 = v11;
      [v3 enumerateKeysAndObjectsUsingBlock:v34];
      uint64_t v16 = objc_alloc(&OBJC_CLASS___PDApplePayCloudStoreRecordsRequest);
      int v17 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( v16,  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  6LL,  1LL,  1LL,  25LL,  PKCloudStoreOperationGroupUserActionExplicit,  PKCloudStoreOperationGroupSuffixPassutil);
      -[PDCloudStoreRecordsRequest setRecordsToSaveByDatabaseIdentifier:]( v17,  "setRecordsToSaveByDatabaseIdentifier:",  v14);
      id v18 = *(void **)(a1 + 32);
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472LL;
      v32[2] = sub_1000987F4;
      v32[3] = &unk_10063F208;
      id v33 = *(id *)(a1 + 56);
      [v18 executeRecordsRequest:v17 completion:v32];
    }

    else
    {
      uint64_t v26 = *(void **)(a1 + 32);
      id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There are no record types or names associated with item %@",  *(void *)(a1 + 40)));
      uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v26 errorWithCode:-4002 description:v27]);

      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v30 = *(void **)(a1 + 40);
        *(_DWORD *)id buf = 138412290;
        __int128 v41 = v30;
        _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "There are no record types or names associated with item %@",  buf,  0xCu);
      }

      uint64_t v31 = *(void *)(a1 + 56);
      if (v31) {
        (*(void (**)(uint64_t, void, void *))(v31 + 16))(v31, 0LL, v8);
      }
    }
  }

  else
  {
    __int16 v19 = *(void **)(a1 + 32);
    uint64_t v20 = PKCloudStoreItemTypeToString([*(id *)(a1 + 40) itemType]);
    uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    id v22 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no zone defined for item type %@",  v21));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v19 errorWithCode:-4001 description:v22]);

    uint64_t v23 = PKLogFacilityTypeGetObject(9LL);
    id v24 = (os_log_s *)objc_claimAutoreleasedReturnValue(v23);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412290;
      __int128 v41 = v5;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Error: No zone defined %@", buf, 0xCu);
    }

    uint64_t v25 = *(void *)(a1 + 56);
    if (v25) {
      (*(void (**)(uint64_t, void, void *))(v25 + 16))(v25, 0LL, v5);
    }
  }
}

void sub_10009846C(uint64_t a1, void *a2, void *a3)
{
  id v37 = a2;
  __int128 v38 = 0u;
  __int128 v39 = 0u;
  __int128 v40 = 0u;
  __int128 v41 = 0u;
  obuint64_t j = a3;
  id v33 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
  if (v33)
  {
    uint64_t v32 = *(void *)v39;
    uint64_t v31 = PKCloudTransactionRecordType;
    uint64_t v30 = PKCloudTransactionDeviceDataRecordType;
    do
    {
      for (uint64_t i = 0LL; i != v33; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v39 != v32) {
          objc_enumerationMutation(obj);
        }
        id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v38 + 1) + 8 * (void)i) recordZone]);
        if (v5)
        {
          __int128 v34 = i;
          id v6 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
          id v7 = objc_alloc(&OBJC_CLASS___CKRecordID);
          uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceIdentifier]);
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
          uint64_t v10 = -[CKRecordID initWithRecordName:zoneID:](v7, "initWithRecordName:zoneID:", v8, v9);

          uint64_t v11 = -[CKRecord initWithRecordType:recordID:]( objc_alloc(&OBJC_CLASS___CKRecord),  "initWithRecordType:recordID:",  v31,  v10);
          -[NSMutableArray addObject:](v6, "addObject:", v11);
          id v12 = objc_alloc(&OBJC_CLASS___CKRecordID);
          id v14 = objc_msgSend((id)objc_opt_class(*(void *)(a1 + 32), v13), "recordNamePrefix");
          id v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) serviceIdentifier]);
          int v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"%@%@",  v15,  v16));
          id v18 = (void *)objc_claimAutoreleasedReturnValue([v5 zoneID]);
          __int16 v19 = -[CKRecordID initWithRecordName:zoneID:](v12, "initWithRecordName:zoneID:", v17, v18);

          id v35 = v19;
          uint64_t v20 = -[CKRecord initWithRecordType:recordID:]( objc_alloc(&OBJC_CLASS___CKRecord),  "initWithRecordType:recordID:",  v30,  v19);

          -[NSMutableArray addObject:](v6, "addObject:", v20);
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _cloudStoreSpecificKeysForItem:*(void *)(a1 + 32) paymentPass:*(void *)(a1 + 48)]);
          id v22 = [[PKCloudStoreRecord alloc] initWithRecords:v6];
          [v22 setCloudStoreSpecificKeys:v21];
          [*(id *)(a1 + 32) encodeWithCloudStoreCoder:v22 codingType:*(void *)(a1 + 64)];
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) objectForKey:v37]);
          id v24 = v23;
          if (v23) {
            uint64_t v25 = v23;
          }
          else {
            uint64_t v25 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          }
          uint64_t v26 = v25;

          [*(id *)(a1 + 56) setObject:v26 forKey:v37];
          id v27 = (void *)objc_claimAutoreleasedReturnValue([v22 records]);
          uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v27));
          -[NSMutableSet unionSet:](v26, "unionSet:", v28);

          uint64_t i = v34;
        }
      }

      id v33 = [obj countByEnumeratingWithState:&v38 objects:v42 count:16];
    }

    while (v33);
  }
}

void sub_1000987F4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    id v6 = (id)objc_claimAutoreleasedReturnValue([a2 cloudStoreRecords]);
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v6, v5);
  }

void sub_10009892C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 cloudStoreZonesByDatabaseIdentifierForItem:*(void *)(a1 + 40) action:1]);

  id v4 = [v3 count];
  id v5 = *(void **)(a1 + 32);
  if (v4)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 transactionArchiveForRecurringPayment:*(void *)(a1 + 40)]);

    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_100098C74;
    v26[3] = &unk_10063F230;
    uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    id v27 = v8;
    id v9 = v7;
    id v28 = v9;
    [v3 enumerateKeysAndObjectsUsingBlock:v26];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    [v10 updateTransactionArchive:v9 forRecurringPayment:*(void *)(a1 + 40)];

    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    id v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
      *(_DWORD *)id buf = 138412546;
      id v30 = v13;
      __int16 v31 = 2112;
      uint64_t v32 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Uploading memo for recurring payment %@ in zones %@",  buf,  0x16u);
    }

    id v14 = -[PKCloudStoreUploadItemConfiguration initWithItem:recordSpecificKeys:]( objc_alloc(&OBJC_CLASS___PKCloudStoreUploadItemConfiguration),  "initWithItem:recordSpecificKeys:",  *(void *)(a1 + 40),  0LL);
    -[PKCloudStoreUploadItemConfiguration setCloudStoreZones:](v14, "setCloudStoreZones:", v8);
    id v15 = *(void **)(a1 + 32);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v14));
    uint64_t v17 = PKCloudStoreOperationGroupUserActionImplicit;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_100098D98;
    v24[3] = &unk_10063F258;
    id v25 = *(id *)(a1 + 40);
    [v15 updateCloudStoreWithLocalItemsWithConfigurations:v16 groupName:v17 groupNameSuffix:0 qualityOfService:17 completion:v24];
  }

  else
  {
    uint64_t v18 = PKCloudStoreItemTypeToString([*(id *)(a1 + 40) itemType]);
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no zone defined for item type %@",  v19));
    id v9 = (id)objc_claimAutoreleasedReturnValue([v5 errorWithCode:-4001 description:v20]);

    uint64_t v21 = PKLogFacilityTypeGetObject(9LL);
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412290;
      id v30 = v9;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Error: No zone defined %@", buf, 0xCu);
    }

    uint64_t v23 = *(void *)(a1 + 48);
    if (v23) {
      (*(void (**)(uint64_t, void, id))(v23 + 16))(v23, 0LL, v9);
    }
  }
}

void sub_100098C74(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 recordZone]);
        if (v10)
        {
          [*(id *)(a1 + 32) addObject:v9];
          [*(id *)(a1 + 40) insertOrUpdateArchiveLocationWithCloudStoreZone:v9 isArchived:0 insertionMode:0];
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v6);
  }
}

void sub_100098D98(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = a4;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);

    int v11 = 138412546;
    __int128 v12 = v10;
    __int16 v13 = 2112;
    id v14 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Uploaded memo for recurring payment %@ with error %@",  (uint8_t *)&v11,  0x16u);
  }
}

void sub_100098F34(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 cloudStoreZonesByDatabaseIdentifierForItem:*(void *)(a1 + 40) action:1]);

  id v4 = [v3 count];
  id v5 = *(void **)(a1 + 32);
  if (v4)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 transactionArchiveForCounterpartImageData:*(void *)(a1 + 40)]);

    v26[0] = _NSConcreteStackBlock;
    v26[1] = 3221225472LL;
    v26[2] = sub_10009927C;
    v26[3] = &unk_10063F230;
    uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
    id v27 = v8;
    id v9 = v7;
    id v28 = v9;
    [v3 enumerateKeysAndObjectsUsingBlock:v26];
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    [v10 updateTransactionArchive:v9 forCounterpartImageData:*(void *)(a1 + 40)];

    uint64_t Object = PKLogFacilityTypeGetObject(11LL);
    __int128 v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) identifier]);
      *(_DWORD *)id buf = 138412546;
      id v30 = v13;
      __int16 v31 = 2112;
      uint64_t v32 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Uploading counterpart image data %@ in zones %@",  buf,  0x16u);
    }

    id v14 = -[PKCloudStoreUploadItemConfiguration initWithItem:recordSpecificKeys:]( objc_alloc(&OBJC_CLASS___PKCloudStoreUploadItemConfiguration),  "initWithItem:recordSpecificKeys:",  *(void *)(a1 + 40),  0LL);
    -[PKCloudStoreUploadItemConfiguration setCloudStoreZones:](v14, "setCloudStoreZones:", v8);
    id v15 = *(void **)(a1 + 32);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v14));
    uint64_t v17 = PKCloudStoreOperationGroupUserActionImplicit;
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_1000993A0;
    v24[3] = &unk_10063F258;
    id v25 = *(id *)(a1 + 40);
    [v15 updateCloudStoreWithLocalItemsWithConfigurations:v16 groupName:v17 groupNameSuffix:0 qualityOfService:17 completion:v24];
  }

  else
  {
    uint64_t v18 = PKCloudStoreItemTypeToString([*(id *)(a1 + 40) itemType]);
    __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There is no zone defined for item type %@",  v19));
    id v9 = (id)objc_claimAutoreleasedReturnValue([v5 errorWithCode:-4001 description:v20]);

    uint64_t v21 = PKLogFacilityTypeGetObject(9LL);
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412290;
      id v30 = v9;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Error: No zone defined %@", buf, 0xCu);
    }

    uint64_t v23 = *(void *)(a1 + 48);
    if (v23) {
      (*(void (**)(uint64_t, void, id))(v23 + 16))(v23, 0LL, v9);
    }
  }
}

void sub_10009927C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  id v5 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v4);
        }
        id v9 = *(void **)(*((void *)&v11 + 1) + 8LL * (void)i);
        uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 recordZone]);
        if (v10)
        {
          [*(id *)(a1 + 32) addObject:v9];
          [*(id *)(a1 + 40) insertOrUpdateArchiveLocationWithCloudStoreZone:v9 isArchived:0 insertionMode:0];
        }
      }

      id v6 = [v4 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v6);
  }
}

void sub_1000993A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t Object = PKLogFacilityTypeGetObject(11LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void **)(a1 + 32);
    id v9 = a4;
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);

    int v11 = 138412546;
    __int128 v12 = v10;
    __int16 v13 = 2112;
    id v14 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Uploaded counterpart image data %@ with error %@",  (uint8_t *)&v11,  0x16u);
  }
}

void sub_100099564(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataSource]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 accountWithIdentifier:*(void *)(a1 + 48)]);

    if (v3)
    {
      id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
      __int128 v29 = 0u;
      __int128 v30 = 0u;
      __int128 v31 = 0u;
      __int128 v32 = 0u;
      obuint64_t j = *(id *)(a1 + 32);
      id v5 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
      if (v5)
      {
        id v6 = v5;
        uint64_t v7 = *(void *)v30;
        do
        {
          for (uint64_t i = 0LL; i != v6; uint64_t i = (char *)i + 1)
          {
            id v9 = v4;
            if (*(void *)v30 != v7) {
              objc_enumerationMutation(obj);
            }
            uint64_t v10 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)i);
            int v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) containerManager]);
            __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v11 cloudStoreZonesByDatabaseIdentifierForItem:v10 action:1]);

            v27[0] = _NSConcreteStackBlock;
            v27[1] = 3221225472LL;
            v27[2] = sub_1000998F8;
            v27[3] = &unk_10063F280;
            void v27[4] = *(void *)(a1 + 40);
            void v27[5] = v10;
            id v4 = v9;
            id v28 = v9;
            [v12 enumerateKeysAndObjectsUsingBlock:v27];
          }

          id v6 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
        }

        while (v6);
      }

      __int16 v13 = objc_alloc(&OBJC_CLASS___PDApplePayCloudStoreRecordsRequest);
      id v14 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( v13,  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  6LL,  1LL,  1LL,  25LL,  PKCloudStoreOperationGroupUserActionExplicit,  PKCloudStoreOperationGroupSuffixPassutil);
      -[PDCloudStoreRecordsRequest setRecordsToSaveByDatabaseIdentifier:]( v14,  "setRecordsToSaveByDatabaseIdentifier:",  v4);
      id v15 = *(void **)(a1 + 40);
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472LL;
      v25[2] = sub_100099AE0;
      v25[3] = &unk_10063F208;
      id v26 = *(id *)(a1 + 56);
      [v15 executeRecordsRequest:v14 completion:v25];
    }

    else
    {
      if (!*(void *)(a1 + 56))
      {
LABEL_20:

        return;
      }

      __int16 v19 = *(void **)(a1 + 40);
      uint64_t v20 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"There are no account with identifier %@",  *(void *)(a1 + 48)));
      id v4 = (NSMutableDictionary *)objc_claimAutoreleasedReturnValue([v19 errorWithCode:-4002 description:v20]);

      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(void *)(a1 + 48);
        *(_DWORD *)id buf = 138412290;
        uint64_t v35 = v23;
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "There are no account with identifier %@",  buf,  0xCu);
      }

      (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    }

    goto LABEL_20;
  }

  uint64_t v16 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "There are no events to sync with clout kit",  buf,  2u);
  }

  uint64_t v18 = *(void *)(a1 + 56);
  if (v18) {
    (*(void (**)(uint64_t, void, void))(v18 + 16))(v18, 0LL, 0LL);
  }
}

void sub_1000998F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v21 objects:v27 count:16];
  if (v7)
  {
    id v9 = v7;
    uint64_t v10 = *(void *)v22;
    *(void *)&__int128 v8 = 138412290LL;
    __int128 v20 = v8;
    do
    {
      for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v10) {
          objc_enumerationMutation(v6);
        }
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * (void)i), "recordZone", v20));
        if (v12)
        {
          __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _recordsByFromAccountEvent:*(void *)(a1 + 40) zone:v12]);
          id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:v5]);
          id v15 = v14;
          if (v14) {
            uint64_t v16 = v14;
          }
          else {
            uint64_t v16 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          }
          __int16 v19 = v16;

          [*(id *)(a1 + 48) setObject:v19 forKey:v5];
          -[NSMutableSet unionSet:](v19, "unionSet:", v13);
        }

        else
        {
          uint64_t Object = PKLogFacilityTypeGetObject(9LL);
          __int16 v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v18 = *(void *)(a1 + 40);
            *(_DWORD *)id buf = v20;
            uint64_t v26 = v18;
            _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Error: No zone defined for account event %@",  buf,  0xCu);
          }
        }
      }

      id v9 = [v6 countByEnumeratingWithState:&v21 objects:v27 count:16];
    }

    while (v9);
  }
}

void sub_100099AE0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (v3)
  {
    id v5 = a3;
    id v6 = (id)objc_claimAutoreleasedReturnValue([a2 cloudStoreRecords]);
    (*(void (**)(uint64_t, id, id))(v3 + 16))(v3, v6, v5);
  }

void sub_100099BC8(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreContainer: Received peer payment account change notification. Updating peer payment account.",  v10,  2u);
  }

  id v4 = *(id **)(a1 + 32);
  id v5 = v4[34];
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 dataSource]);
  uint64_t v7 = objc_claimAutoreleasedReturnValue([v6 peerPaymentAccount]);
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 272);
  *(void *)(v8 + 272) = v7;

  objc_msgSend( *(id *)(a1 + 32),  "_queue_processPeerPaymentAccountChangeWithOldAccount:newPeerPaymentAccount:",  v5,  *(void *)(*(void *)(a1 + 32) + 272));
}

void sub_100099D2C(uint64_t a1)
{
  if (((unint64_t)[*(id *)(a1 + 32) type] | 2) != 2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v11 = 138412290;
      uint64_t v12 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreContainer: Received account added notification. %@",  (uint8_t *)&v11,  0xCu);
    }

    id v5 = *(id **)(a1 + 40);
    id v6 = v5[35];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 dataSource]);
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 accounts]);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void **)(v9 + 280);
    *(void *)(v9 + 280) = v8;

    objc_msgSend( *(id *)(a1 + 40),  "_queue_processAccountChangeWithOldAccounts:newAccounts:",  v6,  *(void *)(*(void *)(a1 + 40) + 280));
  }

void sub_100099EE0(uint64_t a1)
{
  if (((unint64_t)[*(id *)(a1 + 32) type] | 2) != 2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v11 = 138412290;
      uint64_t v12 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreContainer: Received account removed notification %@",  (uint8_t *)&v11,  0xCu);
    }

    id v5 = *(id **)(a1 + 40);
    id v6 = v5[35];
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v5 dataSource]);
    uint64_t v8 = objc_claimAutoreleasedReturnValue([v7 accounts]);
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void **)(v9 + 280);
    *(void *)(v9 + 280) = v8;

    objc_msgSend( *(id *)(a1 + 40),  "_queue_processAccountChangeWithOldAccounts:newAccounts:",  v6,  *(void *)(*(void *)(a1 + 40) + 280));
  }

void sub_10009A0B8(uint64_t a1)
{
  if (((unint64_t)[*(id *)(a1 + 32) type] | 2) != 2)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
      int v12 = 138412546;
      uint64_t v13 = v4;
      __int16 v14 = 2112;
      uint64_t v15 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreZoneManager: Received account changed notification from oldAccount %@ to newAccount %@",  (uint8_t *)&v12,  0x16u);
    }

    id v6 = *(id **)(a1 + 48);
    id v7 = v6[35];
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v6 dataSource]);
    uint64_t v9 = objc_claimAutoreleasedReturnValue([v8 accounts]);
    uint64_t v10 = *(void *)(a1 + 48);
    int v11 = *(void **)(v10 + 280);
    *(void *)(v10 + 280) = v9;

    objc_msgSend( *(id *)(a1 + 48),  "_queue_processAccountChangeWithOldAccounts:newAccounts:",  v7,  *(void *)(*(void *)(a1 + 48) + 280));
  }

void sub_10009A278(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 288) objectForKey:*(void *)(a1 + 40)]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([v3 sharedAccountCloudStoreByAccountIdentifier]);
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = *(void **)(v5 + 288);
  *(void *)(v5 + 28_Block_object_dispose((const void *)(v1 - 192), 8) = v4;

  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 288) objectForKey:*(void *)(a1 + 40)]);
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 40);
    int v11 = 138412546;
    uint64_t v12 = v10;
    __int16 v13 = 2112;
    __int16 v14 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreZoneManager: Received shared account changed notification for accountIdentifier %@. New shared account cloud store %@",  (uint8_t *)&v11,  0x16u);
  }

  objc_msgSend( *(id *)(a1 + 32),  "_queue_processSharedAccountCloudStoreChangeWithOldSharedAccountCloudStore:newSharedAccountCloudStore:",  v2,  v7);
}

void sub_10009A440(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
  uint64_t v3 = objc_claimAutoreleasedReturnValue([v2 accountUsersByAccountIdentifier]);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 296);
  *(void *)(v4 + 296) = v3;

  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 296LL);
    int v11 = 138412546;
    uint64_t v12 = v8;
    __int16 v13 = 2112;
    uint64_t v14 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreZoneManager: Received account users changed notification for accountIdentifier %@. %@",  (uint8_t *)&v11,  0x16u);
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 288) objectForKey:*(void *)(a1 + 40)]);
  objc_msgSend( *(id *)(a1 + 32),  "_queue_processSharedAccountCloudStoreChangeWithOldSharedAccountCloudStore:newSharedAccountCloudStore:",  v10,  v10);
}

void sub_10009A6AC(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 role] == (id)1)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 40) _peerPaymentZoneNamesForAccount:v5 containerDatabase:*(void *)(a1 + 48)]);
    [v3 unionSet:v4];
  }
}

LABEL_80:
LABEL_81:
LABEL_82:
      __int128 v73 = (void *)objc_claimAutoreleasedReturnValue([v15 altDSID]);
      __int128 v74 = v26;
      id v75 = objc_msgSend( [PKCloudStoreZoneQueryConfiguration alloc],  "initWithItemType:recordName:",  objc_msgSend(v8, "itemType"),  v111);
      [v75 setAccountIdentifier:v24];
      [v75 setAccountType:v27];
      v107 = v74;
      [v75 setTransactionSourceIdentifier:v74];
      objb = v73;
      [v75 setAltDSID:v73];
      id v76 = v27;
      int v11 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer cloudStoreZonesForItemType:configuration:action:inContainerDatabase:]( self,  "cloudStoreZonesForItemType:configuration:action:inContainerDatabase:",  [v8 itemType],  v75,  a4,  v9));
      if ([v11 count]) {
        goto LABEL_101;
      }
      if ((unint64_t)(v76 - 2) >= 3)
      {
        if (v76 != 1) {
          goto LABEL_101;
        }
        id v79 = (void *)objc_claimAutoreleasedReturnValue( -[PKPeerPaymentAccount peerPaymentAccountWithIdentifier:]( self->_peerPaymentAccount,  "peerPaymentAccountWithIdentifier:",  v24));
        if (!v79) {
          goto LABEL_99;
        }
        v102 = v79;
        id v83 = objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _peerPaymentZoneNamesForAccount:containerDatabase:]( self,  "_peerPaymentZoneNamesForAccount:containerDatabase:",  v79,  v9));
LABEL_98:
        id v84 = (void *)v83;
        id v85 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
        int v100 = objc_claimAutoreleasedReturnValue([v85 cloudStoreZonesFromZoneNames:v84 inContainerDatabase:v9]);

        int v11 = (void *)v100;
        id v79 = v102;
LABEL_99:
        __int128 v73 = objb;
        goto LABEL_100;
      }

      uint64_t v77 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
      id v78 = (void *)objc_claimAutoreleasedReturnValue([v77 accountWithIdentifier:v24]);

      id v79 = v78;
      v102 = v78;
      __int128 v73 = objb;
      if (v24 && objb)
      {
        id v80 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
        __int16 v81 = (void *)objc_claimAutoreleasedReturnValue([v80 accountUserWithAltDSID:objb accountIdentifier:v24]);

        if (v81)
        {
          id v82 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccountUser:containerDatabase:]( self,  "_accountZoneNamesForAccountUser:containerDatabase:",  v81,  v9));
          uint64_t v98 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
          v99 = objc_claimAutoreleasedReturnValue([v98 cloudStoreZonesFromZoneNames:v82 inContainerDatabase:v9]);

          int v11 = (void *)v99;
        }

        id v79 = v102;

LABEL_92:
        __int128 v73 = objb;
      }

      if (![v11 count] && v79)
      {
        id v83 = objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccount:containerDatabase:]( self,  "_accountZoneNamesForAccount:containerDatabase:",  v79,  v9));
        goto LABEL_98;
      }

  sub_100422D78(v9);
  uint64_t v1 = v92;
LABEL_81:
  id v78 = (os_unfair_lock_s *)(*(void *)(v1 + OBJC_IVAR___PDPendingProvisioningManager_taskLock) + 16LL);
  os_unfair_lock_lock(v78);
  id v79 = v1 + OBJC_IVAR___PDPendingProvisioningManager_taskState;
  swift_beginAccess(v1 + OBJC_IVAR___PDPendingProvisioningManager_taskState, v105, 0LL, 0LL);
  LODWORD(v79) = *(unsigned __int8 *)(v79 + 24);
  os_unfair_lock_unlock(v78);
  if ((_DWORD)v79 == 1) {
    sub_100418708();
  }
}

LABEL_100:
LABEL_101:
      if (![v11 count])
      {
        id v86 = PKLogFacilityTypeGetObject(9LL);
        v87 = (os_log_s *)objc_claimAutoreleasedReturnValue(v86);
        if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v88 = a4;
          v89 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
          uint64_t v90 = PKPaymentTransactionAccountTypeToString(v103);
          char v91 = v24;
          uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue(v90);
          *(_DWORD *)id buf = 138413058;
          __int128 v122 = v89;
          __int128 v123 = 2112;
          __int128 v124 = v91;
          __int128 v125 = 2112;
          __int128 v126 = v92;
          __int128 v127 = 2112;
          __int128 v128 = v15;
          _os_log_impl( (void *)&_mh_execute_header,  v87,  OS_LOG_TYPE_DEFAULT,  "No cloud store zones for transaction in container scope %@ with account identifier %@, accountType %@, %@",  buf,  0x2Au);

          __int128 v24 = v91;
          self = v116;

          a4 = v88;
        }

        __int128 v73 = objb;
      }

      goto LABEL_106;
    case 5uLL:
      uint64_t v16 = objc_opt_class(&OBJC_CLASS___PKAccountEvent, v10);
      v113 = a4;
      if ((objc_opt_isKindOfClass(v8, v16) & 1) != 0) {
        uint64_t v17 = v8;
      }
      else {
        uint64_t v17 = 0LL;
      }
      id v28 = objc_claimAutoreleasedReturnValue([v17 identifier]);
      __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v17 accountIdentifier]);
      obuint64_t j = v17;
      __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v17 altDSID]);
      id v115 = (void *)v28;
      __int128 v31 = objc_msgSend( [PKCloudStoreZoneQueryConfiguration alloc],  "initWithItemType:recordName:",  objc_msgSend(v8, "itemType"),  v28);
      [v31 setAccountIdentifier:v29];
      __int128 v32 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
      id v33 = (void *)objc_claimAutoreleasedReturnValue([v32 accountWithIdentifier:v29]);

      v112 = v33;
      __int128 v34 = [v33 type];
      if (v34 == (id)1)
      {
        uint64_t v35 = 2LL;
      }

      else if (v34 == (id)3)
      {
        uint64_t v35 = 4LL;
      }

      else
      {
        if (v34 != (id)4) {
          goto LABEL_36;
        }
        uint64_t v35 = 3LL;
      }

      [v31 setAccountType:v35];
LABEL_36:
      [v31 setAltDSID:v30];
      if (v30 && !PKAltDSIDIsCurrentUser(v30))
      {
        id v43 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
        id v47 = (void *)objc_claimAutoreleasedReturnValue( [v43 transactionSourceIdentifierForAccountUserAltDSID:v30 accountIdentifier:v29]);
      }

      else
      {
        id v42 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
        id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 passUniqueIdentifierWithAssociatedAccountIdentifier:v29]);

        id v44 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
        id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 transactionSourceIdentifiersForPassUniqueIdentifier:v43]);
        id v46 = objc_claimAutoreleasedReturnValue([v45 anyObject]);

        id v47 = (void *)v46;
      }

      [v31 setTransactionSourceIdentifier:v47];
      int v11 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer cloudStoreZonesForItemType:configuration:action:inContainerDatabase:]( self,  "cloudStoreZonesForItemType:configuration:action:inContainerDatabase:",  [v8 itemType],  v31,  v113,  v9));
      if ([v11 count]) {
        goto LABEL_70;
      }
      uint64_t v105 = v47;
      id v48 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
      id v49 = (void *)objc_claimAutoreleasedReturnValue([v48 accountWithIdentifier:v29]);

      __int128 v50 = [v49 isSharedAccount];
      if (v30 && v50 && v29)
      {
        __int128 v51 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
        id v52 = (void *)objc_claimAutoreleasedReturnValue([v51 accountUserWithAltDSID:v30 accountIdentifier:v29]);

        if (!v52)
        {
          id v47 = v105;
          goto LABEL_68;
        }

        uint64_t v101 = v52;
        id v104 = v49;
        id v53 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccountUser:containerDatabase:]( self,  "_accountZoneNamesForAccountUser:containerDatabase:",  v52,  v9));
        id v54 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
        id v55 = objc_claimAutoreleasedReturnValue([v54 cloudStoreZonesFromZoneNames:v53 inContainerDatabase:v9]);

        int v11 = v54;
        id v47 = v105;
LABEL_63:

        int v11 = (void *)v55;
        id v52 = v101;
        id v49 = v104;
LABEL_68:

        goto LABEL_69;
      }

      if (![v11 count])
      {
        id v47 = v105;
        if (!v49) {
          goto LABEL_69;
        }
        id v104 = v49;
        __int128 v64 = objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccount:containerDatabase:]( self,  "_accountZoneNamesForAccount:containerDatabase:",  v49,  v9));
        id v65 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
        uint64_t v101 = (void *)v64;
        id v66 = v64;
        id v53 = v65;
        id v55 = objc_claimAutoreleasedReturnValue([v65 cloudStoreZonesFromZoneNames:v66 inContainerDatabase:v9]);
        goto LABEL_63;
      }

      id v47 = v105;
LABEL_69:

LABEL_70:
      if (![v11 count])
      {
        uint64_t v69 = PKLogFacilityTypeGetObject(9LL);
        __int128 v70 = (os_log_s *)objc_claimAutoreleasedReturnValue(v69);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        {
          __int128 v71 = v47;
          __int128 v72 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
          *(_DWORD *)id buf = 138412546;
          __int128 v122 = v8;
          __int128 v123 = 2112;
          __int128 v124 = v72;
          _os_log_impl( (void *)&_mh_execute_header,  v70,  OS_LOG_TYPE_DEFAULT,  "Could not find cloud store zones for account event %@ in container database %@",  buf,  0x16u);

          id v47 = v71;
        }
      }

      a4 = v113;
LABEL_106:
      uint64_t v93 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer filterCloudStoreZones:action:inContainerDatabase:]( self,  "filterCloudStoreZones:action:inContainerDatabase:",  v11,  a4,  v9));

      return v93;
    case 7uLL:
      __int16 v13 = objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccount:containerDatabase:]( self,  "_accountZoneNamesForAccount:containerDatabase:",  v8,  v9));
      goto LABEL_9;
    case 8uLL:
      __int128 v20 = v8;
      __int128 v21 = (void *)objc_claimAutoreleasedReturnValue([v20 zoneName]);
      if (v21)
      {
        __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
        __int128 v23 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v21));
        int v11 = (void *)objc_claimAutoreleasedReturnValue([v22 cloudStoreZonesFromZoneNames:v23 inContainerDatabase:v9]);
      }

      else
      {
        int v11 = 0LL;
      }

      goto LABEL_106;
    case 9uLL:
    case 0xAuLL:
      uint64_t v12 = self->_peerPaymentAccount;
      if (v12)
      {
        __int16 v13 = objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _peerPaymentZoneNamesForAccount:containerDatabase:]( self,  "_peerPaymentZoneNamesForAccount:containerDatabase:",  v12,  v9));
LABEL_9:
        uint64_t v18 = (void *)v13;
        __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
        int v11 = (void *)objc_claimAutoreleasedReturnValue([v19 cloudStoreZonesFromZoneNames:v18 inContainerDatabase:v9]);
      }

      else
      {
        int v11 = 0LL;
      }

      goto LABEL_106;
    default:
      goto LABEL_106;
  }

LABEL_102:
                    uint64_t v90 = v133;
                  }

                  else
                  {
                    id v108 = [0 count];
                    if (!v98 || v108)
                    {
                      uint64_t v14 = 0LL;
                      a5 = v143;
                      if ([0 count]) {
                        goto LABEL_105;
                      }
                      v149 = 0u;
                      v150 = 0u;
                      v147 = 0u;
                      v148 = 0u;
                      obuint64_t j = self->_accounts;
                      v135 = -[NSSet countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v147,  v164,  16LL);
                      if (v135)
                      {
                        v132 = v86;
                        v133 = v90;
                        __int128 v131 = *(void *)v148;
                        while (2)
                        {
                          for (uint64_t i = 0LL; i != v135; uint64_t i = (char *)i + 1)
                          {
                            if (*(void *)v148 != v131) {
                              objc_enumerationMutation(obj);
                            }
                            v114 = *(void **)(*((void *)&v147 + 1) + 8LL * (void)i);
                            id v115 = (void *)objc_claimAutoreleasedReturnValue([v114 associatedPassUniqueID]);
                            __int128 v116 = v86;
                            __int128 v117 = v115;
                            if (v116 == v117)
                            {

LABEL_101:
                              __int128 v120 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccount:containerDatabase:]( self,  "_accountZoneNamesForAccount:containerDatabase:",  v114,  v11));
                              v102 = [v120 mutableCopy];

                              __int128 v121 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
                              objc_msgSend(v102, "pk_safelyAddObject:", v121);

                              __int128 v122 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
                              uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue( [v122 cloudStoreZonesFromZoneNames:v102 inContainerDatabase:v11]);

                              id v86 = v132;
                              goto LABEL_102;
                            }

                            __int128 v118 = v117;
                            if (v86 && v117)
                            {
                              __int128 v119 = [v116 isEqualToString:v117];

                              if (v119) {
                                goto LABEL_101;
                              }
                            }

                            else
                            {
                            }

                            id v86 = v132;
                          }

                          v135 = -[NSSet countByEnumeratingWithState:objects:count:]( obj,  "countByEnumeratingWithState:objects:count:",  &v147,  v164,  16LL);
                          if (v135) {
                            continue;
                          }
                          break;
                        }

                        uint64_t v14 = 0LL;
                        a5 = v143;
                        uint64_t v90 = v133;
                      }

                      else
                      {
                        uint64_t v14 = 0LL;
                      }

LABEL_104:
LABEL_105:
LABEL_106:

                      uint64_t v18 = v139;
                      __int16 v19 = v141;
LABEL_107:
                      if (![v14 count])
                      {
                        uint64_t Object = PKLogFacilityTypeGetObject(9LL);
                        __int128 v124 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
                        if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT))
                        {
                          __int128 v125 = PKCloudStoreItemTypeToString(1LL);
                          __int128 v126 = (void *)objc_claimAutoreleasedReturnValue(v125);
                          v146 = a5;
                          __int128 v127 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
                          __int128 v128 = PKTransactionSourceTypeToString(v26);
                          __int128 v129 = (void *)objc_claimAutoreleasedReturnValue(v128);
                          *(_DWORD *)id buf = 138544386;
                          *(void *)&uint8_t buf[4] = v126;
                          v156 = 2114;
                          v157 = v18;
                          v158 = 2112;
                          v159 = v127;
                          v160 = 2112;
                          v161 = v19;
                          v162 = 2114;
                          v163 = v129;
                          _os_log_impl( (void *)&_mh_execute_header,  v124,  OS_LOG_TYPE_DEFAULT,  "No zones for itemType %{public}@, recordName %{public}@, containerDatabaseScope %@, transact ionSourceIdentifier %@, transactionSourceType %{public}@",  buf,  0x34u);

                          a5 = v146;
                        }
                      }

                      __int16 v13 = (void *)v18;
                      goto LABEL_38;
                    }

                    v109 = v90;
                    v110 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccount:containerDatabase:]( self,  "_accountZoneNamesForAccount:containerDatabase:",  v98,  v11));
                    v111 = (NSSet *)[v110 mutableCopy];

                    v112 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
                    -[NSSet pk_safelyAddObject:](v111, "pk_safelyAddObject:", v112);

                    uint64_t v90 = v109;
                    v102 = (id)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
                    obuint64_t j = v111;
                    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v102 cloudStoreZonesFromZoneNames:v111 inContainerDatabase:v11]);
                  }

                  a5 = v143;
                  goto LABEL_104;
                }
              }

              uint64_t v90 = (id)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _peerPaymentZoneNamesForAccount:containerDatabase:]( self,  "_peerPaymentZoneNamesForAccount:containerDatabase:",  self->_peerPaymentAccount,  v11));
              char v91 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
              uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v91 cloudStoreZonesFromZoneNames:v90 inContainerDatabase:v11]);
              a5 = v143;
              goto LABEL_106;
            }

            id v86 = 0LL;
            goto LABEL_72;
          case 1uLL:
            id v75 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
            id v76 = (void *)objc_claimAutoreleasedReturnValue([v75 peerPaymentAccountForTransactionSourceIdentifier:v19]);

            if (!v76) {
              goto LABEL_60;
            }
            uint64_t v77 = objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _peerPaymentZoneNamesForAccount:containerDatabase:]( self,  "_peerPaymentZoneNamesForAccount:containerDatabase:",  v76,  v11));
            goto LABEL_59;
          case 2uLL:
            id v78 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
            id v76 = (void *)objc_claimAutoreleasedReturnValue([v78 accountUserWithTransactionSourceIdentifier:v19]);

            if (!v76) {
              goto LABEL_60;
            }
            uint64_t v77 = objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccountUser:containerDatabase:]( self,  "_accountZoneNamesForAccountUser:containerDatabase:",  v76,  v11));
            goto LABEL_59;
          case 3uLL:
            id v79 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
            id v76 = (void *)objc_claimAutoreleasedReturnValue([v79 accountWithTransactionSourceIdentifier:v19]);

            if (v76)
            {
              uint64_t v77 = objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccount:containerDatabase:]( self,  "_accountZoneNamesForAccount:containerDatabase:",  v76,  v11));
LABEL_59:
              id v80 = (void *)v77;
              v145 = v26;
              __int16 v81 = v19;
              id v82 = v18;
              id v83 = a5;
              id v84 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
              uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v84 cloudStoreZonesFromZoneNames:v80 inContainerDatabase:v11]);

              a5 = v83;
              uint64_t v18 = v82;
              __int16 v19 = v81;
              uint64_t v26 = v145;
            }

            else
            {
LABEL_60:
              uint64_t v14 = 0LL;
            }

            goto LABEL_107;
          default:
            uint64_t v14 = 0LL;
            goto LABEL_107;
        }
      }

      id v46 = self;
      id v47 = v11;
      id v48 = 1LL;
LABEL_26:
      uint64_t v16 = objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer allPossibleZoneNamesForContainerDatabase:itemType:]( v46,  "allPossibleZoneNamesForContainerDatabase:itemType:",  v47,  v48));
LABEL_27:
      id v49 = (void *)v16;
      __int128 v50 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
      uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v50 cloudStoreZonesFromZoneNames:v49 inContainerDatabase:v11]);

LABEL_37:
LABEL_38:
      __int128 v63 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer filterCloudStoreZones:action:inContainerDatabase:]( self,  "filterCloudStoreZones:action:inContainerDatabase:",  v14,  a5,  v11));

      return v63;
    case 5uLL:
      if (!v12)
      {
        id v46 = self;
        id v47 = v11;
        id v48 = 5LL;
        goto LABEL_26;
      }

      uint64_t v35 = objc_claimAutoreleasedReturnValue( +[PKAccountEvent eventIdentifierFromRecordName:]( &OBJC_CLASS___PKAccountEvent,  "eventIdentifierFromRecordName:",  v12));
      uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
      v142 = (void *)v35;
      id v37 = (void *)objc_claimAutoreleasedReturnValue([v36 accountEventWithIdentifier:v35]);

      __int128 v38 = (void *)objc_claimAutoreleasedReturnValue([v37 accountIdentifier]);
      __int128 v39 = v38;
      if (v38) {
        __int128 v40 = v38;
      }
      else {
        __int128 v40 = (id)objc_claimAutoreleasedReturnValue([v10 accountIdentifier]);
      }
      id v56 = v40;
      v144 = a5;

      id v57 = (void *)objc_claimAutoreleasedReturnValue([v37 altDSID]);
      id v58 = v57;
      v140 = v37;
      if (v57) {
        id v59 = v57;
      }
      else {
        id v59 = (id)objc_claimAutoreleasedReturnValue([v10 altDSID]);
      }
      id v65 = v59;

      id v66 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
      id v67 = (void *)objc_claimAutoreleasedReturnValue([v66 accountWithIdentifier:v56]);

      if ([v67 isSharedAccount] && v56 && v65)
      {
        id v68 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
        uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([v68 accountUserWithAltDSID:v65 accountIdentifier:v56]);

        __int128 v70 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccountUser:containerDatabase:]( self,  "_accountZoneNamesForAccountUser:containerDatabase:",  v69,  v11));
        __int128 v71 = [v70 mutableCopy];

        __int128 v72 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
        objc_msgSend(v71, "pk_safelyAddObject:", v72);
      }

      else
      {
        __int128 v71 = 0LL;
        if ([0 count] || !v67)
        {
LABEL_48:
          if ([v71 count])
          {
            __int128 v74 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
            uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v74 cloudStoreZonesFromZoneNames:v71 inContainerDatabase:v11]);
          }

          else
          {
            uint64_t v14 = 0LL;
          }

          a5 = v144;
          goto LABEL_38;
        }

        __int128 v73 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccount:containerDatabase:]( self,  "_accountZoneNamesForAccount:containerDatabase:",  v67,  v11));
        __int128 v71 = [v73 mutableCopy];

        uint64_t v69 = (void *)objc_claimAutoreleasedReturnValue([v10 zoneName]);
        objc_msgSend(v71, "pk_safelyAddObject:", v69);
      }

      goto LABEL_48;
    case 7uLL:
      if (!v12)
      {
        __int128 v51 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer allPossibleZoneNamesForContainerDatabase:itemType:]( self,  "allPossibleZoneNamesForContainerDatabase:itemType:",  v11,  7LL));
        id v52 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
        id v53 = (void *)objc_claimAutoreleasedReturnValue([v52 cloudStoreZonesFromZoneNames:v51 inContainerDatabase:v11]);

LABEL_29:
        id v54 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer allPossibleZoneNamesForContainerDatabase:itemType:]( self,  "allPossibleZoneNamesForContainerDatabase:itemType:",  v11,  a3));
        id v55 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v55 cloudStoreZonesFromZoneNames:v54 inContainerDatabase:v11]);

        __int16 v13 = 0LL;
        goto LABEL_38;
      }

      __int128 v41 = (void *)objc_claimAutoreleasedReturnValue( +[PKAccount accountIdentifierFromRecordName:]( &OBJC_CLASS___PKAccount,  "accountIdentifierFromRecordName:",  v12));
      id v42 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
      id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 accountWithIdentifier:v41]);

      id v44 = 0LL;
      if (![0 count] && v43) {
        id v44 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccount:containerDatabase:]( self,  "_accountZoneNamesForAccount:containerDatabase:",  v43,  v11));
      }
      if ([v44 count])
      {
        id v45 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
        uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v45 cloudStoreZonesFromZoneNames:v44 inContainerDatabase:v11]);
      }

      else
      {
        uint64_t v14 = 0LL;
      }

LABEL_35:
      id v49 = (void *)objc_claimAutoreleasedReturnValue( +[PKCloudStoreZoneShareLock zoneNameFromRecordName:]( &OBJC_CLASS___PKCloudStoreZoneShareLock,  "zoneNameFromRecordName:",  v13));
      if (v49)
      {
        uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
        __int128 v61 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v49));
        __int128 v62 = objc_claimAutoreleasedReturnValue([v60 cloudStoreZonesFromZoneNames:v61 inContainerDatabase:v11]);

        uint64_t v14 = (void *)v62;
      }

      goto LABEL_37;
    case 8uLL:
      if (!v12) {
        goto LABEL_29;
      }
      uint64_t v14 = 0LL;
      goto LABEL_35;
    case 9uLL:
    case 0xAuLL:
      peerPaymentAccount = self->_peerPaymentAccount;
      if (peerPaymentAccount)
      {
        uint64_t v16 = objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _peerPaymentZoneNamesForAccount:containerDatabase:]( self,  "_peerPaymentZoneNamesForAccount:containerDatabase:",  peerPaymentAccount,  v11));
        goto LABEL_27;
      }

      uint64_t v14 = 0LL;
      goto LABEL_38;
    default:
      goto LABEL_38;
  }

uint64_t sub_10009CB6C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 accountIdentifier]);
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  id v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

id sub_10009CBEC(id a1, PKPaymentTransactionArchiveLocation *a2)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransactionArchiveLocation cloudStoreZone](a2, "cloudStoreZone"));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 zoneName]);

  return v3;
}

id sub_10009CFC4(id a1, PKSharedAccountCloudStoreZone *a2)
{
  return -[PKSharedAccountCloudStoreZone zoneName](a2, "zoneName");
}

id sub_10009D4A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateFetchTaskScheduledActivityIfNeccessary];
}

void sub_10009D4CC(uint64_t a1)
{
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10009D550;
  block[3] = &unk_10063A830;
  id v4 = *(id *)(a1 + 40);
  dispatch_async(v2, block);
}

uint64_t sub_10009D550(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10009DC3C(uint64_t a1)
{
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_10009DCC4;
  v4[3] = &unk_1006392B0;
  uint64_t v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  dispatch_async(v2, v4);
}

id sub_10009DCC4(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) reportContainerChangeIntervalEndEventWithBeginUniqueIdentifier:*(void *)(a1 + 40) error:0];
  *(_BYTE *)(*(void *)(a1 + 32) + 184LL) = 0;
  return result;
}

uint64_t sub_10009DFD8(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Completed ensuring zone share integrity check for peer payment.",  v5,  2u);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_10009E054(uint64_t a1, void *a2)
{
  uint64_t v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v5 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  v90[0] = _NSConcreteStackBlock;
  v90[1] = 3221225472LL;
  v90[2] = sub_10009EAC8;
  v90[3] = &unk_10063F378;
  id v54 = v4;
  char v91 = v54;
  __int128 v51 = v5;
  uint64_t v92 = v51;
  id v53 = v3;
  -[NSMutableSet enumerateObjectsUsingBlock:](v3, "enumerateObjectsUsingBlock:", v90);
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(NSMutableSet **)(a1 + 32);
    *(_DWORD *)id buf = 138412546;
    v97 = v53;
    __int16 v98 = 2112;
    v99 = v8;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Ensuring zone shares for family members %@ in zones %@",  buf,  0x16u);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)id buf = 138412290;
    v97 = v54;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Family members who current user can share %@",  buf,  0xCu);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)id buf = 138412290;
    v97 = v51;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Family members who current user cannot share %@",  buf,  0xCu);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = (NSMutableSet *)-[NSMutableSet count](v53, "count");
    id v10 = [*(id *)(a1 + 32) count];
    uint64_t v11 = *(void *)(a1 + 32);
    *(_DWORD *)id buf = 134218754;
    v97 = v9;
    __int16 v98 = 2112;
    v99 = v53;
    __int16 v100 = 2048;
    id v101 = v10;
    __int16 v102 = 2112;
    uint64_t v103 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Ensuring zone shares for %lu family members %@ in %lu zones %@",  buf,  0x2Au);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = (NSMutableSet *)-[NSMutableSet count](v54, "count");
    *(_DWORD *)id buf = 134218242;
    v97 = v12;
    __int16 v98 = 2112;
    v99 = v54;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%lu family members who current user can share %@",  buf,  0x16u);
  }

  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v13 = (NSMutableSet *)-[NSMutableSet count](v51, "count");
    *(_DWORD *)id buf = 134218242;
    v97 = v13;
    __int16 v98 = 2112;
    v99 = v51;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "%lu family members who current user cannot share %@",  buf,  0x16u);
  }

  group = dispatch_group_create();
  __int128 v86 = 0u;
  __int128 v87 = 0u;
  __int128 v88 = 0u;
  __int128 v89 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  id v49 = [obj countByEnumeratingWithState:&v86 objects:v95 count:16];
  if (v49)
  {
    uint64_t v48 = *(void *)v87;
    do
    {
      uint64_t v14 = 0LL;
      do
      {
        if (*(void *)v87 != v48) {
          objc_enumerationMutation(obj);
        }
        uint64_t v50 = v14;
        id v59 = *(NSMutableSet **)(*((void *)&v86 + 1) + 8 * v14);
        uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet shareParticipants](v59, "shareParticipants"));
        __int128 v82 = 0u;
        __int128 v83 = 0u;
        __int128 v84 = 0u;
        __int128 v85 = 0u;
        id v52 = v15;
        id v56 = [v15 countByEnumeratingWithState:&v82 objects:v94 count:16];
        if (v56)
        {
          uint64_t v55 = *(void *)v83;
          do
          {
            for (uint64_t i = 0LL; i != v56; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v83 != v55) {
                objc_enumerationMutation(v52);
              }
              v80[0] = _NSConcreteStackBlock;
              v80[1] = 3221225472LL;
              v80[2] = sub_10009EB24;
              v80[3] = &unk_10063F3A0;
              id v18 = v17;
              id v81 = v18;
              __int16 v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSPredicate predicateWithBlock:](&OBJC_CLASS___NSPredicate, "predicateWithBlock:", v80));
              -[NSMutableSet filterUsingPredicate:](v54, "filterUsingPredicate:", v19);

              v78[0] = _NSConcreteStackBlock;
              v78[1] = 3221225472LL;
              v78[2] = sub_10009EB44;
              v78[3] = &unk_10063EB10;
              __int128 v20 = (NSMutableSet *)v18;
              id v79 = v20;
              __int128 v21 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet pk_firstObjectPassingTest:](v53, "pk_firstObjectPassingTest:", v78));
              if (*(void *)(a1 + 56) != 1LL)
              {
                BOOL v25 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
                uint64_t v26 = v7;
                if (v25)
                {
                  *(_DWORD *)id buf = 138412546;
                  v97 = v20;
                  __int16 v98 = 2114;
                  v99 = v59;
                  _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Removing share for %@ in zone %{public}@ since the user is not a participant anymore.",  buf,  0x16u);
                  uint64_t v26 = v7;
                }

                goto LABEL_34;
              }

              v76[0] = _NSConcreteStackBlock;
              v76[1] = 3221225472LL;
              v76[2] = sub_10009EB50;
              v76[3] = &unk_10063EB10;
              __int128 v22 = v20;
              uint64_t v77 = (os_log_s *)v22;
              if (!-[NSMutableSet pk_hasObjectPassingTest:](v51, "pk_hasObjectPassingTest:", v76))
              {
                id v27 = (id *)&v77;
                if (v21) {
                  goto LABEL_35;
                }
                if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_33;
                }
                *(_DWORD *)id buf = 138412546;
                v97 = v22;
                __int16 v98 = 2114;
                v99 = v59;
                __int128 v23 = v7;
                __int128 v24 = "Removing share for %@ in zone %{public}@ since they are not in the family.";
                goto LABEL_32;
              }

              if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)id buf = 138412546;
                v97 = v22;
                __int16 v98 = 2114;
                v99 = v59;
                __int128 v23 = v7;
                __int128 v24 = "Removing share for %@ in zone %{public}@ since the user is not a participant anymore.";
LABEL_32:
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, v24, buf, 0x16u);
              }

LABEL_33:
              uint64_t v26 = v77;
LABEL_34:

              dispatch_group_enter(group);
              id v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) delegate]);
              uint64_t v29 = *(void *)(a1 + 40);
              __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet zoneName](v59, "zoneName"));
              v74[0] = _NSConcreteStackBlock;
              v74[1] = 3221225472LL;
              v74[2] = sub_10009EB5C;
              v74[3] = &unk_10063AFC0;
              id v75 = group;
              [v28 cloudStoreContainer:v29 removeZoneShareInvitationForHandle:v20 zoneName:v30 qualitOfService:17 completion:v74];

              id v27 = (id *)&v75;
LABEL_35:
            }

            id v56 = [v52 countByEnumeratingWithState:&v82 objects:v94 count:16];
          }

          while (v56);
        }

        if (*(void *)(a1 + 56) == 1LL)
        {
          __int128 v72 = 0u;
          __int128 v73 = 0u;
          __int128 v70 = 0u;
          __int128 v71 = 0u;
          id v57 = v54;
          id v31 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v57,  "countByEnumeratingWithState:objects:count:",  &v70,  v93,  16LL);
          if (v31)
          {
            id v32 = v31;
            uint64_t v33 = *(void *)v71;
            do
            {
              for (uint64_t j = 0LL; j != v32; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v71 != v33) {
                  objc_enumerationMutation(v57);
                }
                uint64_t v35 = *(NSMutableSet **)(*((void *)&v70 + 1) + 8LL * (void)j);
                if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)id buf = 138412546;
                  v97 = v35;
                  __int16 v98 = 2114;
                  v99 = v59;
                  _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Creating share for %@ in zone %{public}@ since we have not shared the zone yet.",  buf,  0x16u);
                }

                dispatch_group_enter(group);
                uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) delegate]);
                uint64_t v37 = *(void *)(a1 + 40);
                __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet appleID](v35, "appleID"));
                __int128 v39 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableSet zoneName](v59, "zoneName"));
                v68[0] = _NSConcreteStackBlock;
                v68[1] = 3221225472LL;
                v68[2] = sub_10009EB64;
                v68[3] = &unk_10063AFC0;
                uint64_t v69 = group;
                [v36 cloudStoreContainer:v37 sendZoneShareInvitationForHandle:v38 zoneName:v39 permission:2 qualitOfService:17 completion:v68];
              }

              id v32 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v57,  "countByEnumeratingWithState:objects:count:",  &v70,  v93,  16LL);
            }

            while (v32);
          }
        }

        uint64_t v14 = v50 + 1;
      }

      while ((id)(v50 + 1) != v49);
      id v49 = [obj countByEnumeratingWithState:&v86 objects:v95 count:16];
    }

    while (v49);
  }

  if (!*(void *)(a1 + 56))
  {
    __int128 v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) containerManager]);
    __int128 v41 = (void *)objc_claimAutoreleasedReturnValue([v40 databaseForScope:3]);

    v66[0] = _NSConcreteStackBlock;
    v66[1] = 3221225472LL;
    v66[2] = sub_10009EB6C;
    v66[3] = &unk_10063F3C8;
    id v42 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    id v67 = v42;
    -[NSMutableSet enumerateObjectsUsingBlock:](v53, "enumerateObjectsUsingBlock:", v66);
    id v43 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 272) associatedAccountInformation]);
    v62[0] = _NSConcreteStackBlock;
    v62[1] = 3221225472LL;
    v62[2] = sub_10009EBBC;
    v62[3] = &unk_10063F3F0;
    v62[4] = *(void *)(a1 + 40);
    id v63 = v41;
    __int128 v64 = v42;
    id v65 = group;
    id v44 = v42;
    id v45 = v41;
    [v43 enumerateAssociatedAccountsUsingBlock:v62];
  }

  id v46 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) workQueue]);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_10009EEB0;
  block[3] = &unk_10063A830;
  id v61 = *(id *)(a1 + 48);
  dispatch_group_notify(group, v46, block);
}

  sub_1000D05D8(*(void *)(a1 + 40), *(void **)(a1 + 48));
LABEL_208:
}

  uint64_t v26 = *(void *)(a1 + 32);
  if (*(void *)(v26 + 72) && !v4)
  {
    id v27 = PKLogFacilityTypeGetObject(14LL);
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
      *(_DWORD *)id buf = 136315394;
      id v44 = "-[PDAccountManager _paymentWebServiceContextChanged]_block_invoke";
      id v45 = 2112;
      id v46 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%s previously had account URLs now nil: %@",  buf,  0x16u);
    }

    uint64_t v26 = *(void *)(a1 + 32);
  }

  objc_storeStrong((id *)(v26 + 72), v4);
  __int128 v30 = PKLogFacilityTypeGetObject(14LL);
  id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    id v32 = *(const char **)(*(void *)(a1 + 32) + 72LL);
    *(_DWORD *)id buf = 138412290;
    id v44 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Account URLs changed to %@", buf, 0xCu);
  }

  BOOL v25 = *(void **)(*(void *)(a1 + 32) + 72LL);
  if (v25) {
    uint64_t v33 = 1;
  }
  else {
    uint64_t v33 = v17;
  }
  if ((v33 & 1) != 0)
  {
LABEL_44:
    if (objc_msgSend(v25, "count", (void)v39))
    {
      __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(+[PKAppleAccountManager sharedInstance](&OBJC_CLASS___PKAppleAccountManager, "sharedInstance"));
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 appleAccountInformation]);
      uint64_t v36 = [v35 aidaAccountAvailable];

      if (v36)
      {
        [*(id *)(a1 + 32) updateAccountsWithCompletion:&stru_10064B1C8];
      }

      else
      {
        uint64_t v37 = PKLogFacilityTypeGetObject(14LL);
        __int128 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "ignoring paymentWebServiceContextChange since aidaAccount is unavailable",  buf,  2u);
        }
      }
    }
  }

  uint64_t v93 = PKStartOfDay(v61);
  int v94 = objc_claimAutoreleasedReturnValue(v93);
  uint64_t v95 = (void *)objc_claimAutoreleasedReturnValue(+[NSCalendar currentCalendar](&OBJC_CLASS___NSCalendar, "currentCalendar"));
  __int128 v129 = (void *)v94;
  uint64_t v96 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( v95,  "nextDateAfterDate:matchingUnit:value:options:",  v94,  512,  objc_msgSend(v95, "component:fromDate:", 512, v94),  516));
  v97 = (void *)objc_claimAutoreleasedReturnValue([v95 dateByAddingUnit:16 value:1 toDate:v96 options:0]);

  __int16 v98 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  weekdays = v138->_weekdays;
  v138->_weekdays = v98;

  if ([v97 compare:v61] == (id)-1)
  {
    do
    {
      -[NSMutableArray addObject:](v138->_weekdays, "addObject:", v97);
      __int16 v100 = (void *)objc_claimAutoreleasedReturnValue([v95 dateByAddingUnit:16 value:1 toDate:v97 options:0]);

      v97 = v100;
    }

    while ([v100 compare:v61] == (id)-1);
  }

  else
  {
    __int16 v100 = v97;
  }

  __int128 v127 = v100;
  __int128 v128 = v95;
  id v101 = (char *)-[NSMutableArray count](v138->_weekdays, "count") - 1;
  if ((uint64_t)v101 >= 0)
  {
    __int16 v102 = 0LL;
    while (1)
    {
      uint64_t v103 = v58;
      id v104 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableArray objectAtIndex:](v138->_weekdays, "objectAtIndex:", v101));
      id v58 = objc_alloc_init(&OBJC_CLASS___PDSearchServiceInvertedIndexEntry);

      -[PDSearchServiceInvertedIndexEntry setType:](v58, "setType:", 4LL);
      -[PDSearchServiceInvertedIndexEntry setDate:](v58, "setDate:", v104);
      if (!v102) {
        break;
      }
      if (v102 == 1)
      {
        uint64_t v105 = @"SEARCH_YESTERDAY";
LABEL_42:
        id v106 = PKLocalizedString(&v105->isa);
        v107 = (void *)objc_claimAutoreleasedReturnValue(v106);
        -[PDSearchService _addWord:forEntry:](v138, "_addWord:forEntry:", v107, v58);
      }

      id v108 = PKFullWeekdayStringFromDate(v104);
      v109 = (void *)objc_claimAutoreleasedReturnValue(v108);
      -[PDSearchService _addWord:forEntry:](v138, "_addWord:forEntry:", v109, v58);

      ++v102;
    }

    uint64_t v105 = @"SEARCH_TODAY";
    goto LABEL_42;
  }

  uint64_t v26 = *(void *)(a1 + 32);
  if (*(void *)(v26 + 80) && !v4)
  {
    id v27 = PKLogFacilityTypeGetObject(13LL);
    id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(v27);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = (void *)objc_claimAutoreleasedReturnValue(+[NSThread callStackSymbols](&OBJC_CLASS___NSThread, "callStackSymbols"));
      *(_DWORD *)id buf = 136315394;
      id v44 = "-[PDApplyManager _paymentWebServiceContextChanged]_block_invoke";
      id v45 = 2112;
      id v46 = v29;
      _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "%s previously had account URLs now nil: %@",  buf,  0x16u);
    }

    uint64_t v26 = *(void *)(a1 + 32);
  }

  objc_storeStrong((id *)(v26 + 80), v4);
  __int128 v30 = PKLogFacilityTypeGetObject(13LL);
  id v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    id v32 = *(const char **)(*(void *)(a1 + 32) + 80LL);
    *(_DWORD *)id buf = 138412290;
    id v44 = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Apply URLs changed to %@", buf, 0xCu);
  }

  BOOL v25 = *(void **)(*(void *)(a1 + 32) + 80LL);
  if (v25) {
    uint64_t v33 = 1;
  }
  else {
    uint64_t v33 = v17;
  }
  if ((v33 & 1) != 0)
  {
LABEL_44:
    if (objc_msgSend(v25, "count", (void)v39))
    {
      __int128 v34 = (void *)objc_claimAutoreleasedReturnValue(+[PKAppleAccountManager sharedInstance](&OBJC_CLASS___PKAppleAccountManager, "sharedInstance"));
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 appleAccountInformation]);
      uint64_t v36 = [v35 aidaAccountAvailable];

      if (v36)
      {
        [*(id *)(a1 + 32) updateApplicationsWithCompletion:&stru_100651600];
      }

      else
      {
        uint64_t v37 = PKLogFacilityTypeGetObject(13LL);
        __int128 v38 = (os_log_s *)objc_claimAutoreleasedReturnValue(v37);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v38,  OS_LOG_TYPE_DEFAULT,  "ignoring paymentWebServiceContextChanged since aidaAccount is unavailable",  buf,  2u);
        }
      }
    }
  }
}

        uint64_t v12 = (v22 - 1) & v22;
        __int128 v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }

      id v28 = *(void *)(*(void *)(v5 + 48) + 8 * v20);
      id v32 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v20);
      if ((a2 & 1) == 0) {
        swift_unknownObjectRetain(v32);
      }
      Hasher.init(_seed:)(v33, *(void *)(v8 + 40));
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v15 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v16 = result & ~v15;
      uint64_t v17 = v16 >> 6;
      if (((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        id v18 = __clz(__rbit64((-1LL << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        __int128 v24 = 0;
        BOOL v25 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v26 = v17 == v25;
          if (v17 == v25) {
            uint64_t v17 = 0LL;
          }
          v24 |= v26;
          id v27 = *(void *)(v14 + 8 * v17);
        }

        while (v27 == -1);
        id v18 = __clz(__rbit64(~v27)) + (v17 << 6);
      }

      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
      *(void *)(*(void *)(v8 + 48) + 8 * v1_Block_object_dispose((const void *)(v1 - 192), 8) = v28;
      *(_OWORD *)(*(void *)(v8 + 56) + 16 * v1_Block_object_dispose((const void *)(v1 - 192), 8) = v32;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  NSMutableSet *v3 = v8;
  return result;
}

        uint64_t v12 = (v22 - 1) & v22;
        __int128 v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }

      id v28 = 8 * v20;
      uint64_t v29 = *(void *)(v5 + 56);
      __int128 v30 = *(void *)(*(void *)(v5 + 48) + v28);
      id v31 = *(void *)(v29 + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain(*(void *)(v29 + v28));
      }
      Hasher.init(_seed:)(v36, *(void *)(v8 + 40));
      Hasher._combine(_:)(v30);
      uint64_t result = Hasher._finalize()();
      uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
      uint64_t v15 = result & ~v14;
      uint64_t v16 = v15 >> 6;
      if (((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        uint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        __int128 v24 = 0;
        BOOL v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }

          uint64_t v26 = v16 == v25;
          if (v16 == v25) {
            uint64_t v16 = 0LL;
          }
          v24 |= v26;
          id v27 = *(void *)(v13 + 8 * v16);
        }

        while (v27 == -1);
        uint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }

      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      id v18 = 8 * v17;
      *(void *)(*(void *)(v8 + 48) + v1_Block_object_dispose((const void *)(v1 - 192), 8) = v30;
      *(void *)(*(void *)(v8 + 56) + v1_Block_object_dispose((const void *)(v1 - 192), 8) = v31;
      ++*(void *)(v8 + 16);
    }
  }

  uint64_t result = swift_release(v5);
LABEL_43:
  NSMutableSet *v3 = v8;
  return result;
}

        uint64_t v12 = (v24 - 1) & v24;
        __int128 v22 = __clz(__rbit64(v24)) + (v15 << 6);
      }

      __int128 v30 = (uint64_t *)(*(void *)(v6 + 48) + 32 * v22);
      id v32 = *v30;
      id v31 = v30[1];
      __int128 v34 = v30[2];
      uint64_t v33 = v30[3];
      uint64_t v35 = *(void **)(*(void *)(v6 + 56) + 8 * v22);
      if ((v42 & 1) == 0)
      {
        swift_bridgeObjectRetain(v30[1]);
        swift_bridgeObjectRetain(v33);
        uint64_t v36 = v35;
      }

      Hasher.init(_seed:)(v43, *(void *)(v9 + 40));
      swift_bridgeObjectRetain(v31);
      String.hash(into:)(v43, v32, v31);
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRetain(v33);
      String.hash(into:)(v43, v34, v33);
      swift_bridgeObjectRelease(v33);
      uint64_t result = Hasher._finalize()();
      uint64_t v16 = -1LL << *(_BYTE *)(v9 + 32);
      uint64_t v17 = result & ~v16;
      id v18 = v17 >> 6;
      if (((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        __int16 v19 = __clz(__rbit64((-1LL << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0LL;
      }

      else
      {
        uint64_t v26 = 0;
        id v27 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }

          id v28 = v18 == v27;
          if (v18 == v27) {
            id v18 = 0LL;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v13 + 8 * v18);
        }

        while (v29 == -1);
        __int16 v19 = __clz(__rbit64(~v29)) + (v18 << 6);
      }

      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      __int128 v20 = (void *)(*(void *)(v9 + 48) + 32 * v19);
      *__int128 v20 = v32;
      v20[1] = v31;
      v20[2] = v34;
      v20[3] = v33;
      *(void *)(*(void *)(v9 + 56) + 8 * v19) = v35;
      ++*(void *)(v9 + 16);
    }
  }

  uint64_t result = swift_release(v6);
  NSMutableSet *v4 = v9;
  return result;
}

    static String._unconditionallyBridgeFromObjectiveC(_:)(PKAuxiliaryCapabilityErrorDomain, v92);
    id v106 = v105;
    v107 = objc_allocWithZone(&OBJC_CLASS___NSError);
    id v108 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v106);
    id v57 = [v107 initWithDomain:v108 code:4 userInfo:0];

    isa = (Class)_convertErrorToNSError(_:)(v57);
    ((void (**)(void, void, void, Class))a3)[2](a3, 0LL, 0LL, isa);
    swift_release(v112);

LABEL_34:
    goto LABEL_35;
  }

  if (v30 == (id)2)
  {
    id v31 = v27;
    id v32 = [v25 keyCreationMetadata];
    if (v32)
    {
      uint64_t v33 = v32;
      isa = (Class)[v32 signatureUnifiedAccessHome];

      if (isa)
      {
        uint64_t v35 = -[objc_class readerIdentifier](isa, "readerIdentifier");
        uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v110 = v37;
        v111 = v36;

        __int128 v38 = -[objc_class readerPublicKey](isa, "readerPublicKey");
        __int128 v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
        __int128 v41 = v40;

        id v42 = Data._bridgeToObjectiveC()().super.isa;
        id v43 = Data._bridgeToObjectiveC()().super.isa;
        id v44 = swift_allocObject(&unk_1006606C0, 32LL, 7LL);
        id v45 = v112;
        *(void *)(v44 + 16) = sub_1004263D4;
        *(void *)(v44 + 24) = v45;
        __int128 v117 = sub_10043BC1C;
        __int128 v118 = v44;
        aBlock = _NSConcreteStackBlock;
        v114 = 1107296256LL;
        id v115 = sub_100435490;
        __int128 v116 = &unk_1006606D8;
        id v46 = _Block_copy(&aBlock);
        id v47 = v118;
        swift_retain(v45);
        swift_release(v47);
        [v29 generateTransactionKeyWithReaderIdentifier:v42 readerPublicKey:v43 withCompletion:v46];

        _Block_release(v46);
        sub_100421520(v39, v41);
        sub_100421520(v111, v110);
        swift_release(v45);
        goto LABEL_35;
      }
    }

    static Logger.auxiliaryCapability.getter(v32);
    __int128 v84 = v31;
    __int128 v85 = (os_log_s *)Logger.logObject.getter(v84);
    __int128 v86 = static os_log_type_t.error.getter(v85);
    if (os_log_type_enabled(v85, v86))
    {
      __int128 v87 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)__int128 v87 = 134217984;
      aBlock = (void **)[v25 type];
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v114, v87 + 4);

      _os_log_impl( (void *)&_mh_execute_header,  v85,  v86,  "PDARRUnifiedAccessSignatureProvider: Missing key creation metadata for requirement type: %lu",  v87,  0xCu);
      swift_slowDealloc(v87, -1LL, -1LL);
    }

    else
    {

      __int128 v85 = (os_log_s *)v84;
    }

    (*(void (**)(char *, uint64_t))(v110 + 8))(v9, v111);
    goto LABEL_33;
  }

  static Logger.auxiliaryCapability.getter(v30);
  id v80 = v27;
  id v81 = (os_log_s *)Logger.logObject.getter(v80);
  __int128 v82 = static os_log_type_t.error.getter(v81);
  if (os_log_type_enabled(v81, v82))
  {
    __int128 v83 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)__int128 v83 = 134217984;
    aBlock = (void **)[v25 type];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v114, v83 + 4);

    _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "PDARRUnifiedAccessSignatureProvider: Unknown requirement type: %lu",  v83,  0xCu);
    swift_slowDealloc(v83, -1LL, -1LL);
  }

  else
  {

    id v81 = (os_log_s *)v80;
  }

  (*(void (**)(char *, uint64_t))(v110 + 8))(v18, v111);
  static String._unconditionallyBridgeFromObjectiveC(_:)(PKAuxiliaryCapabilityErrorDomain, v93);
  uint64_t v95 = v94;
  uint64_t v96 = objc_allocWithZone(&OBJC_CLASS___NSError);
  v97 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v95);
  __int16 v98 = [v96 initWithDomain:v97 code:4 userInfo:0];

  v99 = v98;
  isa = (Class)_convertErrorToNSError(_:)(v99);
  ((void (**)(void, void, void, Class))a3)[2](a3, 0LL, 0LL, isa);
  swift_release(v112);

LABEL_35:
}

void sub_10009EAC8(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (([v5 isMe] & 1) == 0)
  {
    unsigned int v3 = [v5 canSharePeerPaymentAccount];
    uint64_t v4 = 40LL;
    if (v3) {
      uint64_t v4 = 32LL;
    }
    [*(id *)(a1 + v4) addObject:v5];
  }
}

uint64_t sub_10009EB24(uint64_t a1, void *a2)
{
  return [a2 hasAppleIDAlias:*(void *)(a1 + 32)] ^ 1;
}

id sub_10009EB44(uint64_t a1, void *a2)
{
  return [a2 hasAppleIDAlias:*(void *)(a1 + 32)];
}

id sub_10009EB50(uint64_t a1, void *a2)
{
  return [a2 hasAppleIDAlias:*(void *)(a1 + 32)];
}

void sub_10009EB5C(uint64_t a1)
{
}

void sub_10009EB64(uint64_t a1)
{
}

void sub_10009EB6C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 altDSID]);
  [v2 setObject:v3 forKey:v4];
}

void sub_10009EBBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 role] == (id)1)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 cloudStoreZoneNames]);
    __int128 v29 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    __int128 v32 = 0u;
    id v5 = [v4 countByEnumeratingWithState:&v29 objects:v37 count:16];
    if (!v5) {
      goto LABEL_18;
    }
    id v7 = v5;
    uint64_t v8 = *(void *)v30;
    *(void *)&__int128 v6 = 138412290LL;
    __int128 v23 = v6;
    __int128 v24 = v4;
    while (1)
    {
      uint64_t v9 = 0LL;
      id v25 = v7;
      do
      {
        if (*(void *)v30 != v8) {
          objc_enumerationMutation(v4);
        }
        uint64_t v10 = *(void *)(*((void *)&v29 + 1) + 8LL * (void)v9);
        uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "containerManager", v23));
        uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v11 cloudStoreZoneForZoneName:v10 inContainerDatabase:*(void *)(a1 + 40)]);

        if (!v12)
        {
          uint64_t v26 = objc_claimAutoreleasedReturnValue([v3 altDSID]);
          __int16 v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKey:"));
          uint64_t Object = PKLogFacilityTypeGetObject(9LL);
          uint64_t v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id buf = 138543618;
            uint64_t v34 = v10;
            __int16 v35 = 2112;
            uint64_t v36 = v13;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "There is no zone with name %{public}@ in the shared database> Asking %@ for a zone invitation",  buf,  0x16u);
          }

          if (v13)
          {
            dispatch_group_enter(*(dispatch_group_t *)(a1 + 56));
            uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
            uint64_t v17 = v8;
            uint64_t v18 = *(void *)(a1 + 32);
            id v19 = v3;
            __int128 v20 = (void *)objc_claimAutoreleasedReturnValue([v13 appleID]);
            v27[0] = _NSConcreteStackBlock;
            v27[1] = 3221225472LL;
            v27[2] = sub_10009EEA8;
            v27[3] = &unk_10063AFC0;
            id v28 = (os_log_s *)*(id *)(a1 + 56);
            uint64_t v21 = v18;
            uint64_t v8 = v17;
            id v7 = v25;
            [v16 cloudStoreContainer:v21 requestsZoneShareFromHandle:v20 zoneName:v10 completion:v27];

            id v3 = v19;
            id v4 = v24;

            uint64_t v15 = v28;
            goto LABEL_14;
          }

          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id buf = v23;
            __int128 v22 = (void *)v26;
            uint64_t v34 = v26;
            _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Cannot request zone share data for altDSID %@ because there is no associated member of the family.",  buf,  0xCu);
          }

          else
          {
LABEL_14:
            __int128 v22 = (void *)v26;
          }
        }

        uint64_t v9 = (char *)v9 + 1;
      }

      while (v7 != v9);
      id v7 = [v4 countByEnumeratingWithState:&v29 objects:v37 count:16];
      if (!v7)
      {
LABEL_18:

        break;
      }
    }
  }
}

void sub_10009EEA8(uint64_t a1)
{
}

uint64_t sub_10009EEB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_10009F084(uint64_t a1, void *a2)
{
  id v122 = a2;
  __int128 v174 = 0u;
  __int128 v175 = 0u;
  __int128 v176 = 0u;
  __int128 v177 = 0u;
  obuint64_t j = *(id *)(*(void *)(a1 + 32) + 288LL);
  id v120 = [obj countByEnumeratingWithState:&v174 objects:v194 count:16];
  if (v120)
  {
    uint64_t v119 = *(void *)v175;
    id v3 = (NSMutableArray *)PKCloudStoreTransactionsZoneName;
    __int128 v127 = (NSMutableArray *)PKCloudStoreTransactionsZoneName;
    do
    {
      uint64_t v4 = 0LL;
      do
      {
        if (*(void *)v175 != v119) {
          objc_enumerationMutation(obj);
        }
        uint64_t v121 = v4;
        id v5 = *(os_log_s **)(*((void *)&v174 + 1) + 8 * v4);
        v134 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 296) objectForKey:v5]);
        uint64_t v133 = objc_claimAutoreleasedReturnValue([v134 currentAccountUser]);
        __int128 v124 = v5;
        __int128 v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 288) objectForKey:v5]);
        __int128 v170 = 0u;
        __int128 v171 = 0u;
        __int128 v172 = 0u;
        __int128 v173 = 0u;
        __int128 v123 = v6;
        id v128 = (id)objc_claimAutoreleasedReturnValue([v6 sharedAccountCloudStoreZonesWithAccess:1]);
        id v7 = [v128 countByEnumeratingWithState:&v170 objects:v193 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v171;
          uint64_t v125 = *(void *)v171;
          do
          {
            uint64_t v10 = 0LL;
            id v126 = v8;
            do
            {
              if (*(void *)v171 != v9) {
                objc_enumerationMutation(v128);
              }
              v138 = *(void **)(*((void *)&v170 + 1) + 8LL * (void)v10);
              uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v138 zoneName]);
              uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
              __int16 v13 = (void *)objc_claimAutoreleasedReturnValue( [v12 cloudStoreZoneForZoneName:v11 inContainerDatabase:*(void *)(a1 + 40)]);

              if (v13)
              {
                uint64_t v14 = v11;
                uint64_t v15 = v3;
                if (v14 == v3) {
                  goto LABEL_94;
                }
                uint64_t v16 = v14;
                if (v14) {
                  BOOL v17 = v3 == 0LL;
                }
                else {
                  BOOL v17 = 1;
                }
                if (v17)
                {

                  uint64_t v18 = v134;
LABEL_22:
                  __int128 v130 = v10;
                  __int128 v131 = v13;
                  __int128 v129 = v11;
                  v135 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
                  __int128 v166 = 0u;
                  __int128 v167 = 0u;
                  __int128 v168 = 0u;
                  __int128 v169 = 0u;
                  __int128 v22 = (void *)objc_claimAutoreleasedReturnValue([v138 sharedUsersAltDSIDs]);
                  id v23 = [v22 countByEnumeratingWithState:&v166 objects:v192 count:16];
                  uint64_t v24 = v133;
                  if (!v23) {
                    goto LABEL_41;
                  }
                  id v25 = v23;
                  uint64_t v26 = *(void *)v167;
                  while (2)
                  {
                    uint64_t v27 = 0LL;
LABEL_25:
                    if (*(void *)v167 != v26) {
                      objc_enumerationMutation(v22);
                    }
                    id v28 = *(os_log_s **)(*((void *)&v166 + 1) + 8 * v27);
                    __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue([v18 accountUserWithAltDSID:v28]);
                    if (v24)
                    {
                      if ((+[PKAccountUser currentUser:canShareZone:withAccountUser:]( &OBJC_CLASS___PKAccountUser,  "currentUser:canShareZone:withAccountUser:",  v24,  v138,  v29) & 1) != 0)
                      {
                        if (v29)
                        {
                          -[NSMutableArray addObject:](v135, "addObject:", v29);
                          goto LABEL_39;
                        }

                        uint64_t Object = PKLogFacilityTypeGetObject(9LL);
                        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
                        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)id buf = 138412290;
                          v182 = v28;
                          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "There is no account user for altDSID %@",  buf,  0xCu);
                        }
                      }

                      else
                      {
                        uint64_t v33 = PKLogFacilityTypeGetObject(9LL);
                        uint64_t v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(v33);
                        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
                        {
                          __int16 v35 = (os_log_s *)objc_claimAutoreleasedReturnValue([v138 zoneName]);
                          *(_DWORD *)id buf = 138543874;
                          v182 = v35;
                          __int16 v183 = 2112;
                          v184 = v28;
                          __int16 v185 = 2112;
                          uint64_t v186 = (uint64_t)v29;
                          _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Not sharing zone %{public}@ with altDSID %@ since the account state is not acceptable %@.",  buf,  0x20u);

                          uint64_t v24 = v133;
                        }
                      }

                      uint64_t v18 = v134;
                    }

                    else
                    {
                      uint64_t v30 = PKLogFacilityTypeGetObject(9LL);
                      __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
                      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                      {
                        __int128 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue([v138 zoneName]);
                        *(_DWORD *)id buf = 138543618;
                        v182 = v32;
                        __int16 v183 = 2112;
                        v184 = v29;
                        _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "The current account is not defined. Cannot share zone %{public}@ for user %@.",  buf,  0x16u);

                        uint64_t v24 = v133;
                      }
                    }

LABEL_94:
              }

              uint64_t v10 = (char *)v10 + 1;
            }

            while (v10 != v8);
            id v8 = [v128 countByEnumeratingWithState:&v170 objects:v193 count:16];
          }

          while (v8);
        }

        __int128 v142 = 0u;
        __int128 v143 = 0u;
        __int128 v140 = 0u;
        __int128 v141 = 0u;
        __int128 v82 = (void *)objc_claimAutoreleasedReturnValue([v123 sharedAccountCloudStoreZonesWithAccess:2]);
        id v83 = [v82 countByEnumeratingWithState:&v140 objects:v178 count:16];
        __int128 v84 = (void *)v133;
        if (!v83) {
          goto LABEL_140;
        }
        id v85 = v83;
        uint64_t v86 = *(void *)v141;
        v139 = v82;
        do
        {
          __int128 v87 = 0LL;
          do
          {
            if (*(void *)v141 != v86) {
              objc_enumerationMutation(v82);
            }
            __int128 v88 = *(void **)(*((void *)&v140 + 1) + 8LL * (void)v87);
            __int128 v89 = (void *)objc_claimAutoreleasedReturnValue([v88 zoneName]);
            uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
            char v91 = (void *)objc_claimAutoreleasedReturnValue( [v90 cloudStoreZoneForZoneName:v89 inContainerDatabase:*(void *)(a1 + 48)]);

            __int128 v84 = (void *)v133;
            if (!v133)
            {
              uint64_t v95 = PKLogFacilityTypeGetObject(9LL);
              uint64_t v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v95);
              if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
              {
                v97 = *(os_log_s **)(a1 + 56);
                *(_DWORD *)id buf = 138412546;
                v182 = v124;
                __int16 v183 = 2112;
                v184 = v97;
                _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "An account user is not defined for the account %@ and altDSID %@",  buf,  0x16u);
              }

              goto LABEL_134;
            }

            if ((+[PKAccountUser currentUser:shouldRequestZoneShareForZone:]( &OBJC_CLASS___PKAccountUser,  "currentUser:shouldRequestZoneShareForZone:",  v133,  v88) & 1) == 0)
            {
              uint64_t v98 = PKLogFacilityTypeGetObject(9LL);
              uint64_t v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v98);
              if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
              {
                v99 = (os_log_s *)objc_claimAutoreleasedReturnValue([v88 zoneName]);
                __int16 v100 = *(os_log_s **)(a1 + 56);
                *(_DWORD *)id buf = 138543874;
                v182 = v99;
                __int16 v183 = 2112;
                v184 = v100;
                __int16 v185 = 2112;
                uint64_t v186 = v133;
                _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "Not sharing zone => %{public}@ with altDSID => %@ since the account state is not acceptable => %@.",  buf,  0x20u);
              }

              goto LABEL_134;
            }

            if (v91) {
              goto LABEL_135;
            }
            uint64_t v92 = v89;
            if (v92 == v127)
            {

LABEL_118:
              uint64_t v102 = PKLogFacilityTypeGetObject(9LL);
              uint64_t v96 = (os_log_s *)objc_claimAutoreleasedReturnValue(v102);
              if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)id buf = 138412290;
                v182 = (os_log_s *)v123;
                _os_log_impl( (void *)&_mh_execute_header,  v96,  OS_LOG_TYPE_DEFAULT,  "Error: The transactions zone can never be shared. %@",  buf,  0xCu);
              }

              __int128 v84 = (void *)v133;
              __int128 v82 = v139;
              goto LABEL_134;
            }

            uint64_t v93 = v92;
            if (v92) {
              BOOL v94 = v127 == 0LL;
            }
            else {
              BOOL v94 = 1;
            }
            if (v94)
            {
            }

            else
            {
              unsigned int v101 = -[NSMutableArray isEqualToString:](v92, "isEqualToString:");

              if (v101) {
                goto LABEL_118;
              }
            }

            uint64_t v96 = (os_log_s *)objc_claimAutoreleasedReturnValue([v88 originatorAltDSID]);
            uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue([v134 accountUserWithAltDSID:v96]);
            v137 = v103;
            if (!v103)
            {
              uint64_t v109 = PKLogFacilityTypeGetObject(9LL);
              id v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v109);
              __int128 v82 = v139;
              if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)id buf = 138412290;
                v182 = 0LL;
                _os_log_impl( (void *)&_mh_execute_header,  v106,  OS_LOG_TYPE_DEFAULT,  "The shared account zone originator with altDSID %@ is not an account user.",  buf,  0xCu);
              }

              __int128 v84 = (void *)v133;
              goto LABEL_133;
            }

            id v104 = v103;
            uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue([v103 appleID]);

            if (v105)
            {
              id v106 = (os_log_s *)objc_claimAutoreleasedReturnValue([v104 appleID]);
              if (!v106)
              {
                v107 = (void *)objc_claimAutoreleasedReturnValue([v122 objectForKey:v96]);
                id v106 = (os_log_s *)objc_claimAutoreleasedReturnValue([v107 appleID]);

                if (!v106)
                {
                  uint64_t v113 = PKLogFacilityTypeGetObject(9LL);
                  id v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v113);
                  if (!os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_132;
                  }
                  *(_DWORD *)id buf = 138412290;
                  v182 = v96;
                  v111 = v106;
                  v112 = "There is no appleID for zone originator %@ and no family member with the altDSID";
                  goto LABEL_131;
                }
              }

              id v108 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) delegate]);
              [v108 cloudStoreContainer:*(void *)(a1 + 32) requestsZoneShareFromHandle:v106 zoneName:v93 completion:0];
            }

            else
            {
              uint64_t v110 = PKLogFacilityTypeGetObject(9LL);
              id v106 = (os_log_s *)objc_claimAutoreleasedReturnValue(v110);
              if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)id buf = 138412290;
                v182 = (os_log_s *)v104;
                v111 = v106;
                v112 = "The shared account zone originator with altDSID %@ does not have an appleID defined.";
LABEL_131:
                _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, v112, buf, 0xCu);
              }
            }

LABEL_95:
      break;
    default:
      break;
  }

  return v7;
}

LABEL_132:
            __int128 v84 = (void *)v133;
            __int128 v82 = v139;
LABEL_133:

LABEL_134:
LABEL_135:

            __int128 v87 = (char *)v87 + 1;
          }

          while (v85 != v87);
          id v114 = [v82 countByEnumeratingWithState:&v140 objects:v178 count:16];
          id v85 = v114;
        }

        while (v114);
LABEL_140:

        uint64_t v4 = v121 + 1;
        id v3 = v127;
      }

      while ((id)(v121 + 1) != v120);
      id v120 = [obj countByEnumeratingWithState:&v174 objects:v194 count:16];
    }

    while (v120);
  }

  uint64_t v115 = PKLogFacilityTypeGetObject(9LL);
  __int128 v116 = (os_log_s *)objc_claimAutoreleasedReturnValue(v115);
  if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v116,  OS_LOG_TYPE_DEFAULT,  "Completed ensuring zone share integrity check for accounts.",  buf,  2u);
  }

  uint64_t v117 = *(void *)(a1 + 64);
  if (v117) {
    (*(void (**)(void))(v117 + 16))();
  }
}

id sub_1000A00D4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) hasHandle:a2];
}

id sub_1000A00E0(uint64_t a1, void *a2)
{
  return [a2 hasHandle:*(void *)(a1 + 32)];
}

uint64_t sub_1000A0240(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Completed ensuring zone share integrity.",  v5,  2u);
  }

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1000A02BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_1000A0364;
  void v11[3] = &unk_1006396B0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  objc_msgSend(v8, "_queue_createOrRemoveZoneSharesForPeerPaymentIfNecessaryWithCompletion:", v11);
}

uint64_t sub_1000A0364(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1000A0378(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_1000A0420;
  void v11[3] = &unk_1006396B0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  objc_msgSend(v8, "_queue_createOrRemoveZoneSharesForAccountsIfNecessaryWithCompletion:", v11);
}

uint64_t sub_1000A0420(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

uint64_t sub_1000A0434(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

LABEL_93:
      goto LABEL_94;
    case 2uLL:
      __int128 v127 = 0u;
      id v128 = 0u;
      uint64_t v125 = 0u;
      id v126 = 0u;
      uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v27 validDatabases]);

      uint64_t v102 = [v9 countByEnumeratingWithState:&v125 objects:v148 count:16];
      if (v102)
      {
        uint64_t v98 = *(void *)v126;
        uint64_t v110 = v9;
        do
        {
          for (n = 0LL; n != v102; n = (char *)n + 1)
          {
            if (*(void *)v126 != v98) {
              objc_enumerationMutation(v9);
            }
            __int128 v29 = *(void **)(*((void *)&v125 + 1) + 8LL * (void)n);
            uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
            __int128 v31 = (void *)objc_claimAutoreleasedReturnValue([v30 accountUserWithTransactionSourceIdentifier:v101]);

            __int128 v32 = (char *)[v29 scope];
            else {
              uint64_t v33 = qword_1004D6880[(void)(v32 - 1)];
            }
            sharedAccountCloudStoreByAccountIdentifier = self->_sharedAccountCloudStoreByAccountIdentifier;
            __int16 v35 = (void *)objc_claimAutoreleasedReturnValue([v31 accountIdentifier]);
            uint64_t v36 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKey:]( sharedAccountCloudStoreByAccountIdentifier,  "objectForKey:",  v35));

            obja = v36;
            v107 = v31;
            uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 allPossibleZonesForAccountUser:v31 access:v33]);
            __int128 v38 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v37, "pk_arrayByApplyingBlock:", &stru_10063F4F8));
            id v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v38));

            __int128 v123 = 0u;
            __int128 v124 = 0u;
            uint64_t v121 = 0u;
            id v122 = 0u;
            id v40 = v39;
            uint64_t v41 = [v40 countByEnumeratingWithState:&v121 objects:v147 count:16];
            if (v41)
            {
              id v42 = v41;
              id v43 = *(void *)v122;
              do
              {
                for (iuint64_t i = 0LL; ii != v42; iuint64_t i = (char *)ii + 1)
                {
                  if (*(void *)v122 != v43) {
                    objc_enumerationMutation(v40);
                  }
                  id v45 = *(void *)(*((void *)&v121 + 1) + 8LL * (void)ii);
                  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
                  id v47 = (void *)objc_claimAutoreleasedReturnValue([v46 cloudStoreZoneForZoneName:v45 inContainerDatabase:v29]);

                  if (v47) {
                    -[NSMutableSet addObject:](v7, "addObject:", v47);
                  }
                }

                id v42 = [v40 countByEnumeratingWithState:&v121 objects:v147 count:16];
              }

              while (v42);
            }

            id v9 = v110;
          }

          uint64_t v102 = [v110 countByEnumeratingWithState:&v125 objects:v148 count:16];
        }

        while (v102);
      }

      goto LABEL_95;
    case 3uLL:
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v48 accountWithTransactionSourceIdentifier:v101]);

      uint64_t v119 = 0u;
      id v120 = 0u;
      uint64_t v117 = 0u;
      __int128 v118 = 0u;
      id v49 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
      uint64_t v50 = (void *)objc_claimAutoreleasedReturnValue([v49 validDatabases]);

      obuint64_t j = v50;
      uint64_t v103 = [v50 countByEnumeratingWithState:&v117 objects:v146 count:16];
      if (v103)
      {
        v99 = *(void *)v118;
        v111 = v9;
        do
        {
          __int128 v51 = 0LL;
          do
          {
            if (*(void *)v118 != v99) {
              objc_enumerationMutation(obj);
            }
            id v108 = v51;
            id v52 = *(void *)(*((void *)&v117 + 1) + 8 * v51);
            id v53 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _accountZoneNamesForAccount:containerDatabase:]( self,  "_accountZoneNamesForAccount:containerDatabase:",  v9,  v52));
            uint64_t v113 = 0u;
            id v114 = 0u;
            uint64_t v115 = 0u;
            __int128 v116 = 0u;
            id v54 = [v53 countByEnumeratingWithState:&v113 objects:v145 count:16];
            if (v54)
            {
              uint64_t v55 = v54;
              id v56 = *(void *)v114;
              do
              {
                for (juint64_t j = 0LL; jj != v55; juint64_t j = (char *)jj + 1)
                {
                  if (*(void *)v114 != v56) {
                    objc_enumerationMutation(v53);
                  }
                  uint64_t v58 = *(void *)(*((void *)&v113 + 1) + 8LL * (void)jj);
                  id v59 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer containerManager](self, "containerManager"));
                  uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue([v59 cloudStoreZoneForZoneName:v58 inContainerDatabase:v52]);

                  if (v60) {
                    -[NSMutableSet addObject:](v7, "addObject:", v60);
                  }
                }

                uint64_t v55 = [v53 countByEnumeratingWithState:&v113 objects:v145 count:16];
              }

              while (v55);
            }

            id v9 = v111;
            __int128 v51 = v108 + 1;
          }

          while ((id)(v108 + 1) != v103);
          uint64_t v103 = [obj countByEnumeratingWithState:&v117 objects:v146 count:16];
        }

        while (v103);
      }

id sub_1000A0EAC(id a1, PKSharedAccountCloudStoreZone *a2)
{
  return -[PKSharedAccountCloudStoreZone zoneName](a2, "zoneName");
}

id sub_1000A0EB4(id a1, PKSharedAccountCloudStoreZone *a2)
{
  return -[PKSharedAccountCloudStoreZone zoneName](a2, "zoneName");
}

id sub_1000A0F74(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_ensureZoneShareIntegrity");
}

void sub_1000A1014(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000A10BC;
  v7[3] = &unk_1006396B0;
  id v5 = *(id *)(a1 + 40);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

uint64_t sub_1000A10BC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000A1164(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_1000A1210;
  v6[3] = &unk_10063AC90;
  id v7 = v3;
  id v8 = *(id *)(a1 + 40);
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1000A1210(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    id v5 = v4;
    id v6 = 0LL;
    uint64_t v7 = *(void *)v15;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(void **)(*((void *)&v14 + 1) + 8LL * (void)i);
        id v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "altDSID", (void)v14));
        -[NSMutableDictionary setObject:forKey:](v2, "setObject:forKey:", v9, v10);

        if ([v9 isMe])
        {
          id v11 = v9;

          id v6 = v11;
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v5);
  }

  else
  {
    id v6 = 0LL;
  }

  uint64_t v12 = *(void *)(a1 + 40);
  id v13 = -[NSMutableDictionary copy](v2, "copy");
  (*(void (**)(uint64_t, id, void *))(v12 + 16))(v12, v13, v6);
}

void sub_1000A14C4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isSetup])
  {
    if ((PDScheduledActivityExists( @"ApplePayCloudStoreContainerClientIdentifier",  @"ApplePayCloudStoreUnarchivedTask") & 1) != 0) {
      return;
    }
    uint64_t v2 = PKRandomIntegerInRange(18LL, 36LL);
    uint64_t v3 = PKRandomIntegerInRange(0LL, 60LL);
    id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 dateByAddingTimeInterval:(double)v3 * 60.0 + (double)v2 * 3600.0]);

    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  v5));
    [v6 setRepeating:0];
    [v6 setRequireNetworkConnectivity:1];
    [v6 setRequireScreenSleep:1];
    [v6 setRequireMainsPower:1];
    PDScheduledActivityRegister( @"ApplePayCloudStoreContainerClientIdentifier",  @"ApplePayCloudStoreUnarchivedTask",  v6);
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138543618;
      uint64_t v19 = @"ApplePayCloudStoreUnarchivedTask";
      __int16 v20 = 2114;
      unsigned __int8 v21 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Scheduled cloud store fetch activity %{public}@ for %{public}@",  buf,  0x16u);
    }

    v16[0] = @"activityIdentifier";
    v16[1] = @"startTime";
    v17[0] = @"ApplePayCloudStoreUnarchivedTask";
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v5 description]);
    v17[1] = v9;
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v17,  v16,  2LL));

    id v11 = *(void **)(a1 + 32);
    uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue([v10 description]);
    __int128 v15 = v12;
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v15, 1LL));
    [v11 reportContainerChangeSignpostEventType:56 stateName:@"ApplePayCloudStoreUnarchivedTask" objectNames:v13 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:*(void *)(a1 + 40)];
  }

  else
  {
    uint64_t v14 = PKLogFacilityTypeGetObject(9LL);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled((os_log_t)v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138543362;
      uint64_t v19 = @"ApplePayCloudStoreUnarchivedTask";
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v5,  OS_LOG_TYPE_DEFAULT,  "Not scheduling %{public}@ since the container is not setup",  buf,  0xCu);
    }
  }
}

void sub_1000A18A4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([*(id *)(a1 + 32) isSetup])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 allRecordFetchTasks]);

    __int128 v48 = 0u;
    __int128 v49 = 0u;
    __int128 v46 = 0u;
    __int128 v47 = 0u;
    uint64_t v7 = v6;
    id v8 = -[__CFString countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v46,  v62,  16LL);
    if (!v8)
    {

      id v11 = 0LL;
      if ((PDScheduledActivityExists( @"ApplePayCloudStoreContainerClientIdentifier",  @"ApplePayCloudStorePerformFetchTasks") & 1) == 0) {
        goto LABEL_60;
      }
      goto LABEL_35;
    }

    id v9 = v8;
    id v45 = v4;
    char v10 = 0;
    id v11 = 0LL;
    int v12 = 0;
    uint64_t v13 = *(void *)v47;
    do
    {
      for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v47 != v13) {
          objc_enumerationMutation(v7);
        }
        __int128 v15 = *(void **)(*((void *)&v46 + 1) + 8LL * (void)i);
        if ([v15 status] == (id)3)
        {
          __int128 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 identifier]);

          if (v16)
          {
            __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v15 nextPossibleFetchDate]);
            uint64_t v18 = v17;
            if (v17)
            {
              if (!v11 || [v17 compare:v11] == (id)-1)
              {
                uint64_t v19 = v18;

                id v11 = v19;
              }
            }

            else
            {
              int v12 = 1;
            }

            char v10 = 1;
          }
        }
      }

      id v9 = -[__CFString countByEnumeratingWithState:objects:count:]( v7,  "countByEnumeratingWithState:objects:count:",  &v46,  v62,  16LL);
    }

    while (v9);

    if (v11)
    {
      __int16 v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
      BOOL v21 = -[__CFString compare:](v11, "compare:", v20) == (id)-1LL;

      if (((v21 | v12) & 1) != 0)
      {
LABEL_19:

        int v22 = PDScheduledActivityExists( @"ApplePayCloudStoreContainerClientIdentifier",  @"ApplePayCloudStorePerformFetchTasks");
        id v11 = 0LL;
LABEL_26:
        id v4 = v45;
        if ((v10 & 1) != 0)
        {
          if (v22)
          {
            uint64_t Criteria = PDScheduledActivityGetCriteria( @"ApplePayCloudStoreContainerClientIdentifier",  @"ApplePayCloudStorePerformFetchTasks");
            id v25 = (void *)objc_claimAutoreleasedReturnValue(Criteria);
            uint64_t v26 = objc_claimAutoreleasedReturnValue([v25 startDate]);
            uint64_t v27 = (void *)v26;
            if (v26
              && v11
              && ((PKEqualObjects(v26, v11) & 1) != 0 || -[__CFString compare:](v11, "compare:", v27) == (id)1))
            {

              uint64_t Object = PKLogFacilityTypeGetObject(9LL);
              __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)id buf = 138543874;
                id v54 = @"ApplePayCloudStorePerformFetchTasks";
                __int16 v55 = 2114;
                id v56 = v11;
                __int16 v57 = 2114;
                uint64_t v58 = v27;
                _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "Not scheduling cloud store fetch activity %{public}@ with startDate %{public}@ since the existingStart Date is %{public}@",  buf,  0x20u);
              }

LABEL_59:
              goto LABEL_60;
            }

            PDScheduledActivityRemove( @"ApplePayCloudStoreContainerClientIdentifier",  @"ApplePayCloudStorePerformFetchTasks");
          }

          else
          {
            uint64_t v27 = 0LL;
          }

          __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[PDScheduledActivityCriteria priorityActivityCriteriaWithStartDate:]( &OBJC_CLASS___PDScheduledActivityCriteria,  "priorityActivityCriteriaWithStartDate:",  v11));
          -[os_log_s setRepeating:](v29, "setRepeating:", 0LL);
          -[os_log_s setRequireNetworkConnectivity:](v29, "setRequireNetworkConnectivity:", 1LL);
          -[os_log_s setRequireScreenSleep:](v29, "setRequireScreenSleep:", 0LL);
          -[os_log_s setRequireMainsPower:](v29, "setRequireMainsPower:", 0LL);
          PDScheduledActivityRegister( @"ApplePayCloudStoreContainerClientIdentifier",  @"ApplePayCloudStorePerformFetchTasks",  v29);
          uint64_t v35 = PKLogFacilityTypeGetObject(9LL);
          uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id buf = 138543618;
            id v54 = @"ApplePayCloudStorePerformFetchTasks";
            __int16 v55 = 2114;
            id v56 = v11;
            _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "Scheduled cloud store fetch activity %{public}@ with start time %{public}@",  buf,  0x16u);
          }

          v61[0] = @"ApplePayCloudStorePerformFetchTasks";
          v60[0] = @"activityIdentifier";
          v60[1] = @"startDate";
          if (v11) {
            uint64_t v37 = (__CFString *)objc_claimAutoreleasedReturnValue(-[__CFString description](v11, "description"));
          }
          else {
            uint64_t v37 = @"<nil>";
          }
          __int128 v38 = &stru_100662310;
          if (v7) {
            __int128 v38 = v7;
          }
          v61[1] = v37;
          v61[2] = v38;
          v60[2] = @"allRecordFetchTasks";
          v60[3] = @"didSchedule";
          id v39 = @"NO";
          if (v22) {
            id v39 = @"YES";
          }
          v61[3] = @"YES";
          void v61[4] = v39;
          v60[4] = @"activityAlreadyExists";
          v60[5] = @"existingStartDate";
          if (v27) {
            id v40 = (__CFString *)objc_claimAutoreleasedReturnValue([v27 description]);
          }
          else {
            id v40 = @"<nil>";
          }
          void v61[5] = v40;
          uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v61,  v60,  6LL));
          if (v27) {

          }
          if (v11) {
          id v42 = *(void **)(a1 + 32);
          }
          id v43 = (void *)objc_claimAutoreleasedReturnValue([v41 description]);
          id v59 = v43;
          id v44 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v59,  1LL));
          [v42 reportContainerChangeSignpostEventType:56 stateName:@"ApplePayCloudStorePerformFetchTasks" objectNames:v44 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:*(void *)(a1 + 40)];

          goto LABEL_59;
        }

        if (!v22)
        {
LABEL_60:

          goto LABEL_61;
        }

  objc_autoreleasePoolPop(v7);
}

            goto LABEL_69;
          }

          __int128 v46 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s modifiedDate](v45, "modifiedDate"));
          __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v43 modifiedDate]);
          if ([v46 compare:v47] == (id)-1)
          {
          }

          else
          {
            __int128 v48 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s sequenceCounter](v45, "sequenceCounter"));
            __int128 v49 = v40;
            uint64_t v50 = v41;
            __int128 v51 = v37;
            id v52 = (void *)objc_claimAutoreleasedReturnValue([v43 sequenceCounter]);
            __int128 v71 = [v48 compare:v52];

            uint64_t v37 = v51;
            uint64_t v41 = v50;
            id v40 = v49;

            p_isa = (id *)&v75->super.isa;
            if (v71 != (id)-1LL)
            {
              -[PDDatabaseManager markPassAsSynced:](v75->_databaseManager, "markPassAsSynced:", v43);
              goto LABEL_69;
            }
          }

          __int16 v57 = PKLogFacilityTypeGetObject(9LL);
          uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(v57);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
          {
            id v59 = (os_log_s *)objc_claimAutoreleasedReturnValue([v43 uniqueID]);
            *(_DWORD *)id buf = 138543362;
            uint64_t v98 = v59;
            _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] merging remote pass into local pass:%{public}@ ",  buf,  0xCu);
          }

          id v81 = 0LL;
          if ([p_isa[5] writeCard:v43 source:5 error:&v81])
          {
            [p_isa[2] markPassAsSynced:v43];
          }

          else
          {
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue([v43 uniqueID]);
              *(_DWORD *)id buf = 138412546;
              uint64_t v98 = v60;
              v99 = 2114;
              __int16 v100 = v81;
              _os_log_impl( (void *)&_mh_execute_header,  v58,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] failed to write conflicting pass:%{pulic}@ error:%{public}@",  buf,  0x16u);
            }
          }

LABEL_69:
        }

        id v40 = [v37 countByEnumeratingWithState:&v77 objects:v96 count:16];
      }

      while (v40);
    }

    id v4 = v70;
    id v61 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v70, "catalogToUpdateLocally", v66));
    if (v61)
    {
      __int128 v62 = PKLogFacilityTypeGetObject(9LL);
      id v63 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v63,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] updating local catalog",  buf,  2u);
      }

      [p_isa[5] writeCatalogOfRecord:v61 source:5];
    }

    if ([v68 count])
    {
      id v64 = PKLogFacilityTypeGetObject(9LL);
      id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "[PDCloudSyncCoordinator] erasing change events",  buf,  2u);
      }

      [p_isa[1] eraseChangeEvents:v68];
    }
  }
}

LABEL_35:
        uint64_t v30 = PKLogFacilityTypeGetObject(9LL);
        __int128 v31 = (os_log_s *)objc_claimAutoreleasedReturnValue(v30);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 138543618;
          id v54 = @"ApplePayCloudStorePerformFetchTasks";
          __int16 v55 = 2112;
          id v56 = v7;
          _os_log_impl( (void *)&_mh_execute_header,  v31,  OS_LOG_TYPE_DEFAULT,  "Removing scheduled cloud store fetch activity %{public}@ with fetchTasks %@",  buf,  0x16u);
        }

        PDScheduledActivityRemove( @"ApplePayCloudStoreContainerClientIdentifier",  @"ApplePayCloudStorePerformFetchTasks");
        v51[0] = @"activityIdentifier";
        v51[1] = @"allRecordFetchTasks";
        __int128 v32 = &stru_100662310;
        if (v7) {
          __int128 v32 = v7;
        }
        v52[0] = @"ApplePayCloudStorePerformFetchTasks";
        v52[1] = v32;
        v51[2] = @"removedScheduledActivity";
        v52[2] = @"YES";
        uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v52,  v51,  3LL));
        uint64_t v33 = *(void **)(a1 + 32);
        __int128 v29 = (os_log_s *)objc_claimAutoreleasedReturnValue([v27 description]);
        uint64_t v50 = v29;
        uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v50, 1LL));
        [v33 reportContainerChangeSignpostEventType:56 stateName:@"ApplePayCloudStorePerformFetchTasks" objectNames:v34 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:*(void *)(a1 + 40)];

        goto LABEL_59;
      }
    }

    else if ((v12 & 1) != 0)
    {
      goto LABEL_19;
    }

    int v22 = PDScheduledActivityExists( @"ApplePayCloudStoreContainerClientIdentifier",  @"ApplePayCloudStorePerformFetchTasks");
    goto LABEL_26;
  }

  uint64_t v23 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue(v23);
  if (os_log_type_enabled((os_log_t)v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)id buf = 138543362;
    id v54 = @"ApplePayCloudStorePerformFetchTasks";
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v7,  OS_LOG_TYPE_DEFAULT,  "Not scheduling %{public}@ since the container is not setup",  buf,  0xCu);
  }

                  __int128 v29 = v72;
                  id v40 = v73;
                  __int128 v73 = v36;
                }

                else
                {
                }

                goto LABEL_38;
              }

              goto LABEL_35;
            }
          }

          uint64_t Object = PKLogFacilityTypeGetObject(6LL);
          id v45 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)id buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v45,  OS_LOG_TYPE_DEFAULT,  "Installment transaction does not have a valid rewardsTotalAmount",  buf,  2u);
          }
}

LABEL_72:
          uint64_t v24 = v84;
LABEL_73:

          goto LABEL_74;
        }

        uint64_t v26 = v80;
      }

      __int128 v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s altDSID](v8, "altDSID"));
      if (v46)
      {
        id v52 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s accountIdentifier](v8, "accountIdentifier"));
        id v81 = (id)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager accountUserWithAltDSID:accountIdentifier:]( self->_databaseManager,  "accountUserWithAltDSID:accountIdentifier:",  v46,  v52));
        if (([v81 isCurrentUser] & 1) == 0)
        {
          id v53 = (void *)objc_claimAutoreleasedReturnValue([v81 notificationSettings]);
          if (([v53 transactionNotificationsEnabled] & 1) == 0)
          {
            __int128 v62 = PKLogFacilityTypeGetObject(23LL);
            id v61 = (os_log_s *)objc_claimAutoreleasedReturnValue(v62);
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)id buf = 138412290;
              char v91 = v46;
              _os_log_impl( (void *)&_mh_execute_header,  v61,  OS_LOG_TYPE_DEFAULT,  "Not creating notification for transaction since notifications not enabled for account user: %@",  buf,  0xCu);
            }

            goto LABEL_67;
          }

          id v75 = v53;
          id v54 = objc_claimAutoreleasedReturnValue([v53 transactionNotificationThreshold]);
          __int16 v55 = objc_claimAutoreleasedReturnValue(-[os_log_s amount](v8, "amount"));
          id v56 = (void *)v55;
          uint64_t v78 = (void *)v54;
          if (v54)
          {
            if (v55)
            {
              __int16 v57 = (void *)v55;
              uint64_t v58 = [v78 compare:v55];
              id v56 = v57;
              if (v58 == (id)1)
              {
                id v59 = PKLogFacilityTypeGetObject(23LL);
                uint64_t v60 = (os_log_s *)objc_claimAutoreleasedReturnValue(v59);
                if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)id buf = 138412290;
                  char v91 = v46;
                  _os_log_impl( (void *)&_mh_execute_header,  v60,  OS_LOG_TYPE_DEFAULT,  "Not creating notification for transaction since amount is less than account user threshold: %@",  buf,  0xCu);
                }

                id v53 = v75;
                id v61 = (os_log_s *)v78;
LABEL_67:

LABEL_71:
                goto LABEL_72;
              }
            }
          }
        }
      }

      __int128 v82 = [v9 fullyProcessed] ^ 1;
      id v63 = objc_alloc(v26);
      id v64 = v13;
      id v65 = v63;
      uint64_t v66 = (void *)objc_claimAutoreleasedReturnValue([v10 accountUser]);
      id v67 = (void *)objc_claimAutoreleasedReturnValue([v10 installmentCriteria]);
      uint64_t v68 = [v65 initWithPaymentTransaction:v8 forPassUniqueIdentifier:v64 paymentApplication:v84 familyMember:v83 accountUser:v66 installmentCriteria:v67];

      uint64_t v69 = objc_claimAutoreleasedReturnValue([v68 notificationIdentifier]);
      uint64_t v70 = v46;
      userNotificationManager = self->_userNotificationManager;
      v85[0] = _NSConcreteStackBlock;
      v85[1] = 3221225472LL;
      v85[2] = sub_1002578E4;
      v85[3] = &unk_10064FE58;
      v85[4] = self;
      uint64_t v86 = v8;
      __int128 v87 = v10;
      __int128 v88 = v68;
      __int128 v89 = v82;
      __int128 v72 = v68;
      uint64_t v13 = v64;
      id v81 = v72;
      __int128 v73 = userNotificationManager;
      __int128 v46 = v70;
      id v52 = (void *)v69;
      -[PDUserNotificationManager userNotificationWithIdentifier:completion:]( v73,  "userNotificationWithIdentifier:completion:",  v69,  v85);

      goto LABEL_71;
    }

    id v76 = v27;
    uint64_t v30 = -[os_log_s enRoute](v8, "enRoute");
    __int128 v31 = off_100634D58;
    if (!v30) {
      __int128 v31 = off_100634D60;
    }
    uint64_t v26 = (objc_class *)objc_opt_class(*v31, v29);
    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue( -[PDDatabaseManager transitStateWithPassUniqueIdentifier:paymentApplication:]( self->_databaseManager,  "transitStateWithPassUniqueIdentifier:paymentApplication:",  v13,  v24));
    uint64_t v33 = v32;
    if (v32)
    {
      uint64_t v34 = v13;
      uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v32 enrouteTransitTypes]);
      id v79 = v26;
      uint64_t v36 = [v35 count];

      uint64_t v13 = v34;
      uint64_t v24 = v84;
      uint64_t v37 = v36 == 0LL;
      uint64_t v26 = v79;
      if (v37) {
        __int128 v38 = 1;
      }
      else {
        __int128 v38 = v30;
      }
      if ((v38 & 1) == 0) {
        goto LABEL_27;
      }
    }

    else if (!v30)
    {
      goto LABEL_27;
    }

    -[PDUserNotificationManager removeUserNotificationsForPassUniqueIdentifier:ofType:]( self->_userNotificationManager,  "removeUserNotificationsForPassUniqueIdentifier:ofType:",  v13,  6LL);
LABEL_27:

    uint64_t v27 = v76;
    goto LABEL_28;
  }

  __int128 v16 = PKLogFacilityTypeGetObject(23LL);
  int v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(-[os_log_s identifier](v8, "identifier"));
    *(_DWORD *)id buf = 138412290;
    char v91 = v13;
    uint64_t v14 = "Not creating notification for data release transaction: %@";
    goto LABEL_38;
  }

LABEL_61:
}

LABEL_62:
  return v39;
}
}

void sub_1000A21E0(uint64_t a1)
{
  uint64_t v2 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) workQueue]);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000A2270;
  v4[3] = &unk_10063B060;
  uint64_t v3 = *(void **)(a1 + 40);
  void v4[4] = *(void *)(a1 + 32);
  id v5 = v3;
  __int128 v6 = *(_OWORD *)(a1 + 48);
  dispatch_async(v2, v4);
}

void sub_1000A2270(uint64_t a1)
{
  uint64_t v13 = _NSConcreteStackBlock;
  __int128 v15 = sub_1000A242C;
  __int128 v16 = &unk_1006392B0;
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 32);
  uint64_t v14 = 3221225472LL;
  id v18 = v2;
  uint64_t v3 = objc_retainBlock(&v13);
  if (objc_msgSend(*(id *)(a1 + 32), "isSetup", v13, v14, v15, v16, v17))
  {
    id v4 = (__CFString *)*(id *)(a1 + 40);
    if (v4 == @"ApplePayCloudStorePerformFetchTasks"
      || (id v5 = v4) != 0LL
      && (unsigned int v6 = -[__CFString isEqualToString:]( v4,  "isEqualToString:",  @"ApplePayCloudStorePerformFetchTasks"),  v5,  v6))
    {
      objc_msgSend( *(id *)(a1 + 32),  "_queue_performFetchTasksBackgroundActivityForGroupName:suffix:completion:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  v3);
    }

    else
    {
      char v10 = (__CFString *)*(id *)(a1 + 40);
      if (v10 == @"ApplePayCloudStoreUnarchivedTask"
        || (id v11 = v10) != 0LL
        && (unsigned int v12 = -[__CFString isEqualToString:]( v10,  "isEqualToString:",  @"ApplePayCloudStoreUnarchivedTask"),  v11,  v12))
      {
        objc_msgSend( *(id *)(a1 + 32),  "_queue_performUnarchivedTransactionsBackgroundActivityForGroupName:suffix:completion:",  *(void *)(a1 + 48),  *(void *)(a1 + 56),  v3);
      }
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a1 + 40);
      *(_DWORD *)id buf = 138543362;
      uint64_t v20 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PDApplePayCloudStoreContainer not running %{public}@ since the container is not setup",  buf,  0xCu);
    }

    ((void (*)(void ***))v3[2])(v3);
  }
}

id sub_1000A242C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 192) setObject:&__kCFBooleanFalse forKeyedSubscript:*(void *)(a1 + 40)];
}

id sub_1000A365C(id a1, PKPaymentTransactionArchive *a2)
{
  return -[PKPaymentTransactionArchive identifier](a2, "identifier");
}

void sub_1000A3664(uint64_t a1, NSUInteger a2, NSUInteger a3)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    id v8 = [*(id *)(a1 + 32) count];
    v23.id location = a2;
    v23.length = a3;
    uint64_t v9 = NSStringFromRange(v23);
    char v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    *(_DWORD *)id buf = 134349314;
    id v20 = v8;
    __int16 v21 = 2114;
    int v22 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "will upload local data batch following container setup for transactions: %{public}lu in range:%{public}@",  buf,  0x16u);
  }

  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  id v14[2] = sub_1000A37A4;
  v14[3] = &unk_10063F5B0;
  id v11 = *(void **)(a1 + 40);
  id v12 = *(id *)(a1 + 32);
  NSUInteger v17 = a2;
  NSUInteger v18 = a3;
  uint64_t v13 = *(void *)(a1 + 48);
  id v15 = v12;
  uint64_t v16 = v13;
  [v11 addOperation:v14];
}

void sub_1000A37A4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v71 = a2;
  id v70 = a3;
  id v69 = a4;
  context = objc_autoreleasePoolPush();
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v93 = 0u;
  __int128 v94 = 0u;
  __int128 v95 = 0u;
  __int128 v96 = 0u;
  id v67 = (__int128 *)(a1 + 48);
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "subarrayWithRange:", *(void *)(a1 + 48), *(void *)(a1 + 56)));
  id v76 = [obj countByEnumeratingWithState:&v93 objects:v106 count:16];
  if (v76)
  {
    uint64_t v75 = *(void *)v94;
    uint64_t v74 = a1;
    __int128 v72 = v7;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v94 != v75) {
          objc_enumerationMutation(obj);
        }
        uint64_t v9 = *(void **)(*((void *)&v93 + 1) + 8LL * (void)v8);
        id v10 = [v9 type];
        if (v10 == (id)2)
        {
          id v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataSource]);
          id v45 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v44 peerPaymentCounterpartImageDataWithIdentifier:v45]);

          __int128 v46 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v9 archiveLocationsWithType:0 isArchived:0]);
          __int16 v21 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          uint64_t Object = PKLogFacilityTypeGetObject(9LL);
          __int128 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            id v49 = -[NSMutableSet count](v46, "count");
            *(_DWORD *)id buf = 134218242;
            id v101 = v49;
            __int16 v102 = 2112;
            uint64_t v103 = v46;
            _os_log_impl( (void *)&_mh_execute_header,  v48,  OS_LOG_TYPE_DEFAULT,  "%lu locations that need syncing for counterpart image data: %@",  buf,  0x16u);
          }

          __int128 v83 = 0u;
          __int128 v84 = 0u;
          __int128 v81 = 0u;
          __int128 v82 = 0u;
          uint64_t v14 = v46;
          id v50 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v81,  v97,  16LL);
          if (v50)
          {
            id v51 = v50;
            uint64_t v52 = *(void *)v82;
            do
            {
              for (uint64_t i = 0LL; i != v51; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v82 != v52) {
                  objc_enumerationMutation(v14);
                }
                id v54 = *(void **)(*((void *)&v81 + 1) + 8LL * (void)i);
                __int16 v55 = (void *)objc_claimAutoreleasedReturnValue([v54 cloudStoreZone]);
              }

              id v51 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v81,  v97,  16LL);
            }

            while (v51);
          }

          goto LABEL_50;
        }

        if (v10 == (id)1)
        {
          __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataSource]);
          uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
          uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v32 peerPaymentRecurringPaymentWithIdentifier:v33]);

          uint64_t v34 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v9 archiveLocationsWithType:0 isArchived:0]);
          uint64_t v35 = PKLogFacilityTypeGetObject(9LL);
          uint64_t v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            id v37 = -[NSMutableSet count](v34, "count");
            *(_DWORD *)id buf = 134218242;
            id v101 = v37;
            __int16 v102 = 2112;
            uint64_t v103 = v34;
            _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "%lu locations that need syncing for recurring payment: %@",  buf,  0x16u);
          }

          __int16 v21 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          __int128 v85 = 0u;
          __int128 v86 = 0u;
          __int128 v87 = 0u;
          __int128 v88 = 0u;
          uint64_t v14 = v34;
          id v38 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v85,  v98,  16LL);
          if (v38)
          {
            id v39 = v38;
            uint64_t v40 = *(void *)v86;
            do
            {
              for (uint64_t j = 0LL; j != v39; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v86 != v40) {
                  objc_enumerationMutation(v14);
                }
                id v42 = *(void **)(*((void *)&v85 + 1) + 8LL * (void)j);
                id v43 = (void *)objc_claimAutoreleasedReturnValue([v42 cloudStoreZone]);
              }

              id v39 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v14,  "countByEnumeratingWithState:objects:count:",  &v85,  v98,  16LL);
            }

            while (v39);
          }

LABEL_50:
          if (-[NSMutableSet count](v21, "count"))
          {
            id v20 = -[PKCloudStoreUploadItemConfiguration initWithItem:recordSpecificKeys:]( objc_alloc(&OBJC_CLASS___PKCloudStoreUploadItemConfiguration),  "initWithItem:recordSpecificKeys:",  v13,  0LL);
            id v56 = -[NSMutableSet copy](v21, "copy");
            -[PKCloudStoreUploadItemConfiguration setCloudStoreZones:](v20, "setCloudStoreZones:", v56);

            -[NSMutableSet addObject:](v7, "addObject:", v20);
            goto LABEL_52;
          }

          a1 = v74;
LABEL_55:

          goto LABEL_56;
        }

        if (v10) {
          goto LABEL_57;
        }
        id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) dataSource]);
        id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 identifier]);
        uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 transactionWithTransactionIdentifier:v12]);

        uint64_t v14 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v13 transactionSourceIdentifier]);
        if ([v13 hasCloudArchivableDeviceData]
          && objc_msgSend( *(id *)(a1 + 40),  "_queue_canSyncTransactionToCloudKit:forTransactionSourceIdentifier:",  v13,  v14))
        {
          id v15 = (void *)objc_claimAutoreleasedReturnValue([v9 archiveLocationsWithType:0 isArchived:0]);
          uint64_t v16 = PKLogFacilityTypeGetObject(9LL);
          NSUInteger v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(v16);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          {
            id v18 = [v15 count];
            uint64_t v19 = (NSMutableSet *)objc_claimAutoreleasedReturnValue([v13 identifier]);
            *(_DWORD *)id buf = 134218498;
            id v101 = v18;
            __int16 v102 = 2114;
            uint64_t v103 = v19;
            __int16 v104 = 2112;
            uint64_t v105 = v15;
            _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "%lu locations that need syncing for transaction with identifier %{public}@: %@",  buf,  0x20u);
          }

          id v20 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
          __int128 v89 = 0u;
          __int128 v90 = 0u;
          __int128 v91 = 0u;
          __int128 v92 = 0u;
          __int16 v21 = v15;
          id v22 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v21,  "countByEnumeratingWithState:objects:count:",  &v89,  v99,  16LL);
          if (v22)
          {
            id v23 = v22;
            uint64_t v24 = *(void *)v90;
            do
            {
              for (k = 0LL; k != v23; k = (char *)k + 1)
              {
                if (*(void *)v90 != v24) {
                  objc_enumerationMutation(v21);
                }
                uint64_t v26 = *(void **)(*((void *)&v89 + 1) + 8LL * (void)k);
                uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 cloudStoreZone]);
              }

              id v23 = -[NSMutableSet countByEnumeratingWithState:objects:count:]( v21,  "countByEnumeratingWithState:objects:count:",  &v89,  v99,  16LL);
            }

            while (v23);
          }

          if (-[PKCloudStoreUploadItemConfiguration count](v20, "count"))
          {
            id v28 = objc_alloc(&OBJC_CLASS___PKCloudStoreUploadItemConfiguration);
            a1 = v74;
            __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v74 + 40) cloudStoreSpecificKeysForItem:v13]);
            uint64_t v30 = -[PKCloudStoreUploadItemConfiguration initWithItem:recordSpecificKeys:]( v28,  "initWithItem:recordSpecificKeys:",  v13,  v29);

            id v31 = -[PKCloudStoreUploadItemConfiguration copy](v20, "copy");
            -[PKCloudStoreUploadItemConfiguration setCloudStoreZones:](v30, "setCloudStoreZones:", v31);

            uint64_t v7 = v72;
            -[NSMutableSet addObject:](v72, "addObject:", v30);

            goto LABEL_53;
          }

          uint64_t v7 = v72;
LABEL_52:
          a1 = v74;
LABEL_53:

          goto LABEL_55;
        }
}
}
}

          if (v41)
          {
            __int128 v48 = (v41 - 1) & v41;
            id v49 = __clz(__rbit64(v41)) | (v40 << 6);
            id v50 = v40;
          }

          else
          {
            id v51 = v40 + 1;
            if (__OFADD__(v40, 1LL))
            {
              __break(1u);
LABEL_85:
              __break(1u);
              return;
            }

            if (v51 >= v99) {
              break;
            }
            uint64_t v52 = *(void *)(v100 + 8 * v51);
            id v50 = v40 + 1;
            if (!v52)
            {
              id v50 = v40 + 2;
              if (v40 + 2 >= v99) {
                break;
              }
              uint64_t v52 = *(void *)(v100 + 8 * v50);
              if (!v52)
              {
                id v50 = v40 + 3;
                if (v40 + 3 >= v99) {
                  break;
                }
                uint64_t v52 = *(void *)(v100 + 8 * v50);
                if (!v52)
                {
                  id v50 = v40 + 4;
                  if (v40 + 4 >= v99) {
                    break;
                  }
                  uint64_t v52 = *(void *)(v100 + 8 * v50);
                  if (!v52)
                  {
                    id v53 = v40 + 5;
                    while (v99 != v53)
                    {
                      uint64_t v52 = *(void *)(v100 + 8 * v53++);
                      if (v52)
                      {
                        id v50 = v53 - 1;
                        goto LABEL_65;
                      }
                    }

                    break;
                  }
                }
              }
            }

    if (v17 < v13) {
      goto LABEL_129;
    }
    id v57 = v12;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) != 0) {
      id v12 = v57;
    }
    else {
      id v12 = sub_100422628(0LL, *((void *)v57 + 2) + 1LL, 1, v57);
    }
    id v59 = *((void *)v12 + 2);
    uint64_t v58 = *((void *)v12 + 3);
    uint64_t v16 = v59 + 1;
    uint64_t v14 = v134;
    if (v59 >= v58 >> 1)
    {
      uint64_t v109 = sub_100422628((char *)(v58 > 1), v59 + 1, 1, v12);
      uint64_t v14 = v134;
      id v12 = v109;
    }

    *((void *)v12 + 2) = v16;
    uint64_t v60 = v12 + 32;
    id v61 = &v12[16 * v59 + 32];
    *(void *)id v61 = v13;
    *((void *)v61 + 1) = v17;
    id v128 = v17;
    if (v59)
    {
      while (1)
      {
        id v62 = v16 - 1;
        if (v16 >= 4)
        {
          id v67 = &v60[16 * v16];
          uint64_t v68 = *((void *)v67 - 8);
          id v69 = *((void *)v67 - 7);
          __int128 v73 = __OFSUB__(v69, v68);
          id v70 = v69 - v68;
          if (v73) {
            goto LABEL_118;
          }
          __int128 v72 = *((void *)v67 - 6);
          id v71 = *((void *)v67 - 5);
          __int128 v73 = __OFSUB__(v71, v72);
          id v65 = v71 - v72;
          uint64_t v66 = v73;
          if (v73) {
            goto LABEL_119;
          }
          uint64_t v74 = v16 - 2;
          uint64_t v75 = &v60[16 * v16 - 32];
          id v77 = *(void *)v75;
          id v76 = *((void *)v75 + 1);
          __int128 v73 = __OFSUB__(v76, v77);
          id v78 = v76 - v77;
          if (v73) {
            goto LABEL_121;
          }
          __int128 v73 = __OFADD__(v65, v78);
          id v79 = v65 + v78;
          if (v73) {
            goto LABEL_124;
          }
          if (v79 >= v70)
          {
            v97 = &v60[16 * v62];
            v99 = *(void *)v97;
            uint64_t v98 = *((void *)v97 + 1);
            __int128 v73 = __OFSUB__(v98, v99);
            __int16 v100 = v98 - v99;
            if (v73) {
              goto LABEL_128;
            }
            __int128 v90 = v65 < v100;
            goto LABEL_87;
          }
        }

        else
        {
          if (v16 != 3)
          {
            __int128 v91 = *((void *)v12 + 4);
            __int128 v92 = *((void *)v12 + 5);
            __int128 v73 = __OFSUB__(v92, v91);
            __int128 v84 = v92 - v91;
            __int128 v85 = v73;
            goto LABEL_81;
          }

          id v64 = *((void *)v12 + 4);
          id v63 = *((void *)v12 + 5);
          __int128 v73 = __OFSUB__(v63, v64);
          id v65 = v63 - v64;
          uint64_t v66 = v73;
        }

        if ((v66 & 1) != 0) {
          goto LABEL_120;
        }
        uint64_t v74 = v16 - 2;
        __int128 v80 = &v60[16 * v16 - 32];
        __int128 v82 = *(void *)v80;
        __int128 v81 = *((void *)v80 + 1);
        __int128 v83 = __OFSUB__(v81, v82);
        __int128 v84 = v81 - v82;
        __int128 v85 = v83;
        if (v83) {
          goto LABEL_123;
        }
        __int128 v86 = &v60[16 * v62];
        __int128 v88 = *(void *)v86;
        __int128 v87 = *((void *)v86 + 1);
        __int128 v73 = __OFSUB__(v87, v88);
        __int128 v89 = v87 - v88;
        if (v73) {
          goto LABEL_126;
        }
        if (__OFADD__(v84, v89)) {
          goto LABEL_127;
        }
        if (v84 + v89 >= v65)
        {
          __int128 v90 = v65 < v89;
LABEL_87:
          if (v90) {
            id v62 = v74;
          }
          goto LABEL_89;
        }

LABEL_56:
LABEL_57:
        id v8 = (char *)v8 + 1;
      }

      while (v8 != v76);
      id v57 = [obj countByEnumeratingWithState:&v93 objects:v106 count:16];
      id v76 = v57;
    }

    while (v57);
  }

  if (-[NSMutableSet count](v7, "count"))
  {
    uint64_t v58 = PKLogFacilityTypeGetObject(9LL);
    id v59 = (os_log_s *)objc_claimAutoreleasedReturnValue(v58);
    id v61 = v69;
    uint64_t v60 = v70;
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      id v62 = -[NSMutableSet count](v7, "count");
      id v63 = NSStringFromRange(*(NSRange *)(a1 + 48));
      id v64 = (void *)objc_claimAutoreleasedReturnValue(v63);
      *(_DWORD *)id buf = 134218498;
      id v101 = v62;
      __int16 v102 = 2112;
      uint64_t v103 = v7;
      __int16 v104 = 2114;
      uint64_t v105 = v64;
      _os_log_impl( (void *)&_mh_execute_header,  v59,  OS_LOG_TYPE_DEFAULT,  "uploading local data following container setup for %lu transactions: %@ in range:%{public}@",  buf,  0x20u);
    }

    id v65 = *(void **)(a1 + 40);
    uint64_t v66 = PKCloudStoreOperationGroupInitialUpload;
    v77[0] = _NSConcreteStackBlock;
    v77[1] = 3221225472LL;
    v77[2] = sub_1000A405C;
    v77[3] = &unk_10063F588;
    __int128 v80 = *v67;
    id v79 = v69;
    id v78 = v70;
    [v65 updateCloudStoreWithLocalItemsWithConfigurations:v7 groupName:v66 groupNameSuffix:0 qualityOfService:17 completion:v77];
  }

  else
  {
    id v61 = v69;
    uint64_t v60 = v70;
    (*((void (**)(id, id, void))v69 + 2))(v69, v70, 0LL);
  }

  objc_autoreleasePoolPop(context);
}

      uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v9 supportedFeatures]);
      +[AppleBalanceAccountFeatureDescriptor insertOrUpdateAppleBalanceAccountFeatureDescriptors:forAccountPID:inDatabase:]( &OBJC_CLASS___AppleBalanceAccountFeatureDescriptor,  "insertOrUpdateAppleBalanceAccountFeatureDescriptors:forAccountPID:inDatabase:",  v30,  v56,  v10);
      goto LABEL_74;
    case 4uLL:
      id v11 = (void *)objc_claimAutoreleasedReturnValue([v9 details]);
      __int128 v86 = (void *)objc_claimAutoreleasedReturnValue([v11 savingsDetails]);
      if (v86)
      {
        uint64_t v14 =  +[SavingsAccountDetails insertOrUpdateSavingsAccountDetails:forAccountPID:inDatabase:]( &OBJC_CLASS___SavingsAccountDetails,  "insertOrUpdateSavingsAccountDetails:forAccountPID:inDatabase:",  v11,  a4,  v10);
      }

      else
      {
        id v67 = PKLogFacilityTypeGetObject(14LL);
        uint64_t v68 = (os_log_s *)objc_claimAutoreleasedReturnValue(v67);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
        {
          id v70 = (objc_class *)objc_opt_class(v11, v69);
          id v71 = NSStringFromClass(v70);
          __int128 v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
          *(_DWORD *)id buf = 138543362;
          id v108 = v72;
          _os_log_impl( (void *)&_mh_execute_header,  v68,  OS_LOG_TYPE_DEFAULT,  "Details are not of class savings: %{public}@",  buf,  0xCu);
        }

        if (v6)
        {
          +[SavingsAccountDetails deleteSavingsAccountDetailsForAccountPID:inDatabase:]( &OBJC_CLASS___SavingsAccountDetails,  "deleteSavingsAccountDetailsForAccountPID:inDatabase:",  a4,  v10);
          __int128 v73 = (void *)objc_claimAutoreleasedReturnValue([v9 accountIdentifier]);
          +[SavingsAccountStatement deleteSavingsAccountStatementsForAccount:inDatabase:]( &OBJC_CLASS___SavingsAccountStatement,  "deleteSavingsAccountStatementsForAccount:inDatabase:",  v73,  v10);
        }
      }

      uint64_t v74 = a4;
      __int128 v89 = 0u;
      __int128 v90 = 0u;
      __int128 v87 = 0u;
      __int128 v88 = 0u;
      uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue([v9 supportedFeatures]);
      id v76 = [v75 countByEnumeratingWithState:&v87 objects:v103 count:16];
      if (!v76) {
        goto LABEL_73;
      }
      id v78 = v76;
      id v79 = *(void *)v88;
      break;
    default:
      goto LABEL_76;
  }

  while (2)
  {
    for (k = 0LL; k != v78; k = (char *)k + 1)
    {
      if (*(void *)v88 != v79) {
        objc_enumerationMutation(v75);
      }
      __int128 v81 = *(void *)(*((void *)&v87 + 1) + 8LL * (void)k);
      __int128 v82 = objc_opt_class(&OBJC_CLASS___PKSavingsAccountFeatureDescriptor, v77);
      if ((objc_opt_isKindOfClass(v81, v82) & 1) == 0)
      {

        __int128 v83 = PKLogFacilityTypeGetObject(14LL);
        __int128 v84 = (os_log_s *)objc_claimAutoreleasedReturnValue(v83);
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v84,  OS_LOG_TYPE_DEFAULT,  "Descriptors did not match PKSavingsAccountFeatureDescriptor class.",  buf,  2u);
        }

        if (v85) {
          +[SavingsAccountFeatureDescriptor deleteSavingsAccountFeatureDescriptorsForAccountPID:inDatabase:]( &OBJC_CLASS___SavingsAccountFeatureDescriptor,  "deleteSavingsAccountFeatureDescriptorsForAccountPID:inDatabase:",  v74,  v10);
        }
        goto LABEL_75;
      }
    }

    id v78 = [v75 countByEnumeratingWithState:&v87 objects:v103 count:16];
    if (v78) {
      continue;
    }
    break;
  }
}

void sub_1000A405C(NSRange *a1, void *a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = [a2 count];
    id v10 = NSStringFromRange(a1[3]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    int v12 = 134349570;
    id v13 = v9;
    __int16 v14 = 2114;
    id v15 = v11;
    __int16 v16 = 2114;
    id v17 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "uploaded local data batch following container setup for %{public}ld transactions in range:%{public}@ with error:%{public}@",  (uint8_t *)&v12,  0x20u);
  }

  (*(void (**)(NSUInteger, NSUInteger, BOOL))(a1[2].length + 16))(a1[2].length, a1[2].location, v6 != 0LL);
}

void sub_1000A4168(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = [*(id *)(a1 + 32) count];
    int v12 = 134349056;
    id v13 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Did upload local data following container setup for transactions:%{public}lu",  (uint8_t *)&v12,  0xCu);
  }

  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    (*(void (**)(void))(v11 + 16))();
  }
  [*(id *)(a1 + 40) _updateUnarchivedTransactionsScheduledActivityIfNeccessary];
}

void sub_1000A4CEC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v1 = a1;
    if (!*(void *)(a1 + 32))
    {
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Marking all transcations as not CloudKit archived so they can be re-uploaded to the cloud store later.",  buf,  2u);
      }

      id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) dataSource]);
      id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 passesOfType:1]);

      __int128 v55 = 0u;
      __int128 v56 = 0u;
      __int128 v53 = 0u;
      __int128 v54 = 0u;
      id v6 = v5;
      id v7 = [v6 countByEnumeratingWithState:&v53 objects:v61 count:16];
      obuint64_t j = v6;
      if (v7)
      {
        id v9 = v7;
        char v10 = 0;
        uint64_t v11 = *(void *)v54;
        *(void *)&__int128 v8 = 138543362LL;
        __int128 v35 = v8;
        uint64_t v36 = *(void *)v54;
        id v37 = v3;
        do
        {
          int v12 = 0LL;
          id v38 = v9;
          do
          {
            if (*(void *)v54 != v11) {
              objc_enumerationMutation(obj);
            }
            id v13 = *(void **)(*((void *)&v53 + 1) + 8LL * (void)v12);
            __int16 v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "paymentPass", v35));
            id v15 = (void *)objc_claimAutoreleasedReturnValue([v14 deviceTransactionSourceIdentifiers]);
            __int16 v16 = (void *)objc_claimAutoreleasedReturnValue([v15 anyObject]);

            if (objc_msgSend(*(id *)(v1 + 40), "_queue_isRelevantTransactionSourceIdentifier:", v16))
            {
              uint64_t v40 = v16;
              uint64_t v41 = v14;
              id v42 = v12;
              if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
              {
                id v17 = (void *)objc_claimAutoreleasedReturnValue([v13 uniqueID]);
                *(_DWORD *)id buf = v35;
                uint64_t v60 = v17;
                _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Marking all transactions for pass %{public}@ as not CloudKit archived",  buf,  0xCu);
              }

              id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) dataSource]);
              uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 transactionArchivesWithType:0 isArchived:1]);

              __int128 v51 = 0u;
              __int128 v52 = 0u;
              __int128 v49 = 0u;
              __int128 v50 = 0u;
              id v44 = v19;
              id v20 = [v44 countByEnumeratingWithState:&v49 objects:v58 count:16];
              if (v20)
              {
                id v21 = v20;
                uint64_t v22 = *(void *)v50;
                do
                {
                  id v23 = 0LL;
                  id v43 = v21;
                  do
                  {
                    if (*(void *)v50 != v22) {
                      objc_enumerationMutation(v44);
                    }
                    uint64_t v24 = *(void **)(*((void *)&v49 + 1) + 8LL * (void)v23);
                    id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) dataSource]);
                    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([v24 identifier]);
                    uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v25 transactionWithTransactionIdentifier:v26]);

                    if ([v27 hasCloudArchivableDeviceData])
                    {
                      [v27 addUpdateReasons:0x10000];
                      __int128 v47 = 0u;
                      __int128 v48 = 0u;
                      __int128 v45 = 0u;
                      __int128 v46 = 0u;
                      id v28 = (void *)objc_claimAutoreleasedReturnValue([v24 archiveLocationsWithType:0 isArchived:1]);
                      id v29 = [v28 countByEnumeratingWithState:&v45 objects:v57 count:16];
                      if (v29)
                      {
                        id v30 = v29;
                        uint64_t v31 = v1;
                        uint64_t v32 = *(void *)v46;
                        do
                        {
                          for (uint64_t i = 0LL; i != v30; uint64_t i = (char *)i + 1)
                          {
                            if (*(void *)v46 != v32) {
                              objc_enumerationMutation(v28);
                            }
                            uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v45 + 1) + 8 * (void)i) cloudStoreZone]);
                            [v24 insertOrUpdateArchiveLocationWithCloudStoreZone:v34 isArchived:0 insertionMode:0];
                          }

                          id v30 = [v28 countByEnumeratingWithState:&v45 objects:v57 count:16];
                        }

                        while (v30);
                        char v10 = 1;
                        uint64_t v1 = v31;
                        id v21 = v43;
                      }
                    }

                    id v23 = (char *)v23 + 1;
                  }

                  while (v23 != v21);
                  id v21 = [v44 countByEnumeratingWithState:&v49 objects:v58 count:16];
                }

                while (v21);
              }

              uint64_t v11 = v36;
              uint64_t v3 = v37;
              id v9 = v38;
              __int16 v14 = v41;
              int v12 = v42;
              __int16 v16 = v40;
            }

            int v12 = (char *)v12 + 1;
          }

          while (v12 != v9);
          id v9 = [obj countByEnumeratingWithState:&v53 objects:v61 count:16];
        }

        while (v9);

        if ((v10 & 1) == 0) {
          goto LABEL_36;
        }
        id v6 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v1 + 40) delegate]);
        [v6 cloudStoreContainer:*(void *)(v1 + 40) requestsSyncTransactionsToCloudStoreOriginatedOnDevice:0];
      }

LABEL_36:
    }
  }

void sub_1000A5904(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000A59E4;
  v10[3] = &unk_10063F628;
  id v6 = *(void **)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v6;
  id v12 = v5;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 72);
  id v13 = v7;
  uint64_t v16 = v8;
  id v14 = *(id *)(a1 + 56);
  id v15 = *(id *)(a1 + 64);
  id v9 = v5;
  [a3 enumerateKeysAndObjectsUsingBlock:v10];
}

void sub_1000A59E4(uint64_t a1, void *a2, void *a3)
{
  id v198 = a2;
  id v5 = a3;
  id v6 = objc_autoreleasePoolPush();
  id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([v7 databaseForIdentifier:*(void *)(a1 + 40)]);

  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  char v10 = (void *)objc_claimAutoreleasedReturnValue([v5 firstObject]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 recordID]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 zoneID]);
  uint64_t v13 = objc_claimAutoreleasedReturnValue([v9 cloudStoreZoneForZoneID:v12 inContainerDatabase:v8]);

  id v14 = [[PKCloudStoreRecord alloc] initWithRecords:v5];
  v189 = (void *)v13;
  unsigned int oslog = [*(id *)(a1 + 32) _isCloudStoreZoneThePrimaryZoneForCurrentUser:v13 containerDatabase:v8];
  uint64_t v15 = objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _transactionSourceIdentifierForTransactionCloudStoreRecord:v14 databaseIdentifier:*(void *)(a1 + 40)]);
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
  id v17 = [v16 transactionSourceTypeForTransactionSourceIdentifier:v15];

  v190 = (void *)v15;
  id v191 = v17;
  uint64_t v199 = a1;
  if (v15)
  {
    v228[0] = v15;
    uint64_t v18 = PKTransactionSourceTypeToString(v17);
    uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
    v228[1] = v19;
    id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v228, 2LL));

    uint64_t v21 = a1;
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v22 = (uint64_t *)(a1 + 48);
    [(id)*(v22 - 2) reportContainerChangeSignpostEventType:45 stateName:v23 objectNames:v20 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];

    goto LABEL_4;
  }

  uint64_t v21 = a1;
  uint64_t v25 = *(void *)(a1 + 48);
  uint64_t v22 = (uint64_t *)(a1 + 48);
  [(id)*(v22 - 2) reportContainerChangeSignpostEventType:45 stateName:v25 objectNames:0 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
  if ([(id)v22[1] returnRecords])
  {
LABEL_4:
    uint64_t v26 = *(void *)(v21 + 56);
    uint64_t v27 = objc_opt_class(&OBJC_CLASS___PDApplePayCloudStoreRecordsRequest, v24);
    if ((objc_opt_isKindOfClass(v26, v27) & 1) != 0)
    {
      id v28 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v21 + 56) transactionSourceIdentifiers]);
    }

    else
    {
      id v28 = 0LL;
    }

    id v29 = [v28 count];
    v188 = v28;
    if (v15 && v29 && ([v28 containsObject:v15] & 1) == 0)
    {
      id v43 = (PKPaymentTransaction *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Skipping processing %@ because it is for a different transaction source",  v14));
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      uint64_t v58 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id buf = 138412290;
        uint64_t v227 = (uint64_t)v43;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
      }

      id v59 = *(void **)(v199 + 32);
      uint64_t v60 = *(void *)(v199 + 48);
      __int16 v224 = v43;
      __int128 v45 = (PKPaymentTransactionArchive *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v224,  1LL));
      [v59 reportContainerChangeSignpostEventType:45 stateName:v60 objectNames:v45 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
      id v61 = v190;
      goto LABEL_153;
    }

    uint64_t v186 = v8;
    id v187 = v14;
    __int16 v185 = v6;
    uint64_t v30 = *(void *)(v199 + 80);
    __int128 v209 = 0u;
    __int128 v210 = 0u;
    __int128 v211 = 0u;
    __int128 v212 = 0u;
    id v183 = v5;
    obuint64_t j = v5;
    id v31 = [obj countByEnumeratingWithState:&v209 objects:v223 count:16];
    if (v31)
    {
      id v32 = v31;
      uint64_t v33 = *(void *)v210;
      uint64_t v34 = PKCloudTransactionRecordType;
      uint64_t v35 = PKCloudTransactionDeviceDataRecordType;
      do
      {
        for (uint64_t i = 0LL; i != v32; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v210 != v33) {
            objc_enumerationMutation(obj);
          }
          id v37 = *(void **)(*((void *)&v209 + 1) + 8LL * (void)i);
          id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 recordType]);
          unsigned int v39 = [v38 isEqualToString:v34];

          if (v39)
          {
            v30 |= 0x10uLL;
          }

          else
          {
            uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([v37 recordType]);
            unsigned int v41 = [v40 isEqualToString:v35];

            if (v41) {
              v30 |= 8uLL;
            }
          }
        }

        id v32 = [obj countByEnumeratingWithState:&v209 objects:v223 count:16];
      }

      while (v32);
    }

    id v42 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v199 + 32) dataSource]);
    id v43 = (PKPaymentTransaction *)objc_claimAutoreleasedReturnValue( [v42 transactionWithServiceIdentifier:*(void *)(v199 + 48) transactionSourceIdentifier:v190]);

    id v44 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v199 + 32) dataSource]);
    __int128 v45 = (PKPaymentTransactionArchive *)objc_claimAutoreleasedReturnValue( [v44 transactionArchiveForTransactionWithServiceIdentifier:*(void *)(v199 + 48) transactionSourceIdentifier:v190]);

    if (v43)
    {
      unsigned int v181 = -[PKPaymentTransaction hasNotificationServiceData](v43, "hasNotificationServiceData") ^ 1;
      __int128 v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Applying properties to existing transaction with service id %@",  *v22));
      uint64_t v47 = PKLogFacilityTypeGetObject(9LL);
      __int128 v48 = (os_log_s *)objc_claimAutoreleasedReturnValue(v47);
      id v5 = v183;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id buf = 138543362;
        uint64_t v227 = (uint64_t)v46;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
      }

      -[PKPaymentTransaction applyPropertiesFromCloudStoreRecord:](v43, "applyPropertiesFromCloudStoreRecord:", v187);
      __int128 v49 = *(void **)(v199 + 32);
      uint64_t v50 = *(void *)(v199 + 48);
      v222 = v46;
      __int128 v51 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v222, 1LL));
      [v49 reportContainerChangeSignpostEventType:45 stateName:v50 objectNames:v51 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];

      if (oslog) {
        -[PKPaymentTransactionArchive insertOrUpdateArchiveLocationWithCloudStoreZone:isArchived:insertionMode:]( v45,  "insertOrUpdateArchiveLocationWithCloudStoreZone:isArchived:insertionMode:",  v189,  0LL,  1LL);
      }
      id v6 = v185;
      uint64_t v8 = v186;
    }

    else
    {
      id v43 = -[PKPaymentTransaction initWithCloudStoreCoder:]( objc_alloc(&OBJC_CLASS___PKPaymentTransaction),  "initWithCloudStoreCoder:",  v187);
      __int128 v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Setting properties to new transaction with service id %@",  *v22));
      uint64_t v52 = PKLogFacilityTypeGetObject(9LL);
      __int128 v53 = (os_log_s *)objc_claimAutoreleasedReturnValue(v52);
      id v5 = v183;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id buf = 138543362;
        uint64_t v227 = (uint64_t)v46;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
      }

      __int128 v54 = *(void **)(v199 + 32);
      uint64_t v55 = *(void *)(v199 + 48);
      v221 = v46;
      __int128 v56 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v221, 1LL));
      [v54 reportContainerChangeSignpostEventType:45 stateName:v55 objectNames:v56 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];

      if (!v45) {
        __int128 v45 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionArchive);
      }
      id v6 = v185;
      uint64_t v8 = v186;
      unsigned int v181 = 1;
      if (oslog) {
        -[PKPaymentTransactionArchive insertOrUpdateArchiveLocationWithCloudStoreZone:isArchived:insertionMode:]( v45,  "insertOrUpdateArchiveLocationWithCloudStoreZone:isArchived:insertionMode:",  v189,  1LL,  0LL);
      }
    }

    -[PKPaymentTransaction addUpdateReasons:](v43, "addUpdateReasons:", v30);
    id v14 = v187;
    v184 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v199 + 32) _originDeviceIDForCloudStoreRecord:v187]);
    if (v43)
    {
      id v67 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction serviceIdentifier](v43, "serviceIdentifier"));

      uint64_t v68 = *(void **)(v199 + 56);
      if (v67)
      {
        if (![v68 storeChangesInDatabase])
        {
          id v61 = v190;
          uint64_t v84 = v199;
          goto LABEL_149;
        }

        if (!v190)
        {
          __int128 v85 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction serviceIdentifier](v43, "serviceIdentifier"));
          __int128 v86 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Did not find transaction source identifier for %@, transaction service id %@",  0LL,  v85));

          uint64_t v87 = PKLogFacilityTypeGetObject(9LL);
          __int128 v88 = (os_log_s *)objc_claimAutoreleasedReturnValue(v87);
          if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id buf = 138412290;
            uint64_t v227 = (uint64_t)v86;
            _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
          }

          uint64_t v84 = v199;
          __int128 v89 = *(void **)(v199 + 32);
          uint64_t v90 = *(void *)(v199 + 48);
          v220 = v86;
          __int128 v91 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v220,  1LL));
          [v89 reportContainerChangeSignpostEventType:45 stateName:v90 objectNames:v91 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];

          id v6 = v185;
          id v14 = v187;
          id v61 = 0LL;
          goto LABEL_149;
        }

        -[PKPaymentTransaction setHasAssociatedPaymentApplication:]( v43,  "setHasAssociatedPaymentApplication:",  v191 == 0LL);
        -[PKPaymentTransaction setHasNotificationServiceData:](v43, "setHasNotificationServiceData:", 1LL);
        uint64_t v69 = *v22;
        uint64_t v70 = PKTransactionSourceTypeToString(v191);
        id v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
        uint64_t v72 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"transactionSourceType for %@ is %@",  v69,  v71));

        uint64_t v73 = PKLogFacilityTypeGetObject(9LL);
        uint64_t v74 = (os_log_s *)objc_claimAutoreleasedReturnValue(v73);
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 138543362;
          uint64_t v227 = v72;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
        }

        osloga = v74;

        uint64_t v75 = *(void **)(v199 + 32);
        uint64_t v76 = *(void *)(v199 + 48);
        v179 = (void *)v72;
        uint64_t v219 = v72;
        id v77 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v219, 1LL));
        [v75 reportContainerChangeSignpostEventType:45 stateName:v76 objectNames:v77 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];

        uint64_t v8 = v186;
        if (v181)
        {
          id v78 = osloga;
          if ((+[PKPaymentTransaction updateReasonIsInitialDownload:]( &OBJC_CLASS___PKPaymentTransaction,  "updateReasonIsInitialDownload:",  v30) & 1) != 0) {
            goto LABEL_62;
          }
          if (v191 == (id)1)
          {
            uint64_t v176 = 0x100000000LL;
            goto LABEL_64;
          }

          if (v191) {
LABEL_62:
          }
            uint64_t v176 = 0LL;
          else {
            uint64_t v176 = 1LL;
          }
        }

        else
        {
          uint64_t v176 = 0LL;
          id v78 = osloga;
        }

LABEL_64:
        uint64_t v92 = objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction accountIdentifier](v43, "accountIdentifier"));
        if (v92)
        {
          __int128 v93 = (void *)v92;
          id v94 = -[PKPaymentTransaction accountType](v43, "accountType");

          if (v94)
          {
LABEL_108:
            v132 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction expirationDate](v43, "expirationDate"));
            if (v132)
            {
              uint64_t v84 = v199;
            }

            else
            {
              uint64_t v84 = v199;
              if (-[PKPaymentTransaction transactionType](v43, "transactionType") == (id)3)
              {
                if (-[PKPaymentTransaction transactionStatus](v43, "transactionStatus"))
                {
LABEL_114:
                  uint64_t v135 = *(void *)(v84 + 56);
                  uint64_t v136 = objc_opt_class(&OBJC_CLASS___PDApplePayCloudStoreRecordsRequest, v133);
                  if ((objc_opt_isKindOfClass(v135, v136) & 1) != 0)
                  {
                    id v137 = (id)objc_claimAutoreleasedReturnValue([*(id *)(v84 + 56) transactionSourceIdentifiers]);
                  }

                  else
                  {
                    id v137 = 0LL;
                  }

                  if ([v137 count]
                    && (-[PKPaymentTransaction transactionType](v43, "transactionType") == (id)1
                     || !-[PKPaymentTransaction transactionType](v43, "transactionType"))
                    && -[PKPaymentTransaction transactionStatus](v43, "transactionStatus") == (id)1)
                  {
                    v138 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction merchant](v43, "merchant"));
                    unsigned __int8 v139 = [v138 hasMapsMatch];

                    if ((v139 & 1) == 0 && !v184)
                    {
                      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
                      {
                        id v140 = (id)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction serviceIdentifier](v43, "serviceIdentifier"));
                        *(_DWORD *)id buf = 138543362;
                        uint64_t v227 = (uint64_t)v140;
                        _os_log_impl( (void *)&_mh_execute_header,  v78,  OS_LOG_TYPE_DEFAULT,  "Transaction with service id %{public}@ does not contain maps data, so this device is now ownin g the transaction in order for it to be processed for maps data.",  buf,  0xCu);
                      }

                      -[PKPaymentTransaction setProcessedForMerchantCleanup:]( v43,  "setProcessedForMerchantCleanup:",  0LL);
                      -[PKPaymentTransaction setRequiresMerchantReprocessing:]( v43,  "setRequiresMerchantReprocessing:",  1LL);
                      -[PKPaymentTransactionArchive insertOrUpdateArchiveLocationWithCloudStoreZone:isArchived:insertionMode:]( v45,  "insertOrUpdateArchiveLocationWithCloudStoreZone:isArchived:insertionMode:",  v189,  0LL,  0LL);
                      v184 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v84 + 32) _originDeviceID]);
                    }
                  }

                  __int128 v141 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction serviceIdentifier](v43, "serviceIdentifier"));
                  uint64_t v142 = objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Updating transaction in local database with service id %@ with archive %@",  v141,  v45));

                  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)id buf = 138412290;
                    uint64_t v227 = v142;
                    _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
                  }

                  __int128 v143 = (void *)v142;
                  __int128 v144 = *(void **)(v84 + 32);
                  uint64_t v145 = *(void *)(v84 + 48);
                  v180 = v143;
                  int v214 = v143;
                  __int128 v146 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v214,  1LL));
                  [v144 reportContainerChangeSignpostEventType:45 stateName:v145 objectNames:v146 changeToken:0 error:0 operationGroupName:0 op erationGroupNameSuffix:0];

                  uint64_t v147 = PKLogFacilityTypeGetObject(35LL);
                  __int128 v148 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(v147);
                  os_signpost_id_t v149 = os_signpost_id_make_with_pointer(v148, *(const void **)(v84 + 32));
                  if (v149 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    os_signpost_id_t v150 = v149;
                    if (os_signpost_enabled(v148))
                    {
                      *(_WORD *)id buf = 0;
                      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v148,  OS_SIGNPOST_INTERVAL_BEGIN,  v150,  "cloudstore:insertTransaction",  "",  buf,  2u);
                    }
                  }

                  __int128 v151 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v84 + 32) dataSource]);
                  v152 = (void *)objc_claimAutoreleasedReturnValue( [v151 insertOrUpdatePaymentTransaction:v43 withTransactionSourceIdentifier:v190 transactionArchive :v45 originDeviceID:v184 insertionMode:0 performTruncation:0]);

                  __int128 v153 = v148;
                  os_signpost_id_t v154 = os_signpost_id_make_with_pointer(v153, *(const void **)(v84 + 32));
                  if (v154 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
                  {
                    os_signpost_id_t v155 = v154;
                    if (os_signpost_enabled(v153))
                    {
                      *(_WORD *)id buf = 0;
                      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v153,  OS_SIGNPOST_INTERVAL_END,  v155,  "cloudstore:insertTransaction",  "",  buf,  2u);
                    }
                  }

                  __int128 v156 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v84 + 32) dataSource]);
                  [v156 insertOrUpdateCloudStoreRecords:obj inCloudStoreZone:v189];

                  if (([*(id *)(v84 + 56) formReport] & v181) == 1)
                  {
                    id v182 = v137;
                    v178 = v45;
                    __int128 v203 = 0u;
                    __int128 v204 = 0u;
                    __int128 v201 = 0u;
                    __int128 v202 = 0u;
                    id v194 = obj;
                    id v157 = [v194 countByEnumeratingWithState:&v201 objects:v213 count:16];
                    if (v157)
                    {
                      id v158 = v157;
                      os_log_t oslogb = *(os_log_t *)v202;
                      do
                      {
                        for (uint64_t j = 0LL; j != v158; uint64_t j = (char *)j + 1)
                        {
                          if (*(os_log_t *)v202 != oslogb) {
                            objc_enumerationMutation(v194);
                          }
                          __int128 v160 = *(void **)(*((void *)&v201 + 1) + 8LL * (void)j);
                          id v161 = objc_alloc(&OBJC_CLASS___PKAccountTransactionSyncReportItem);
                          __int128 v162 = (void *)objc_claimAutoreleasedReturnValue([v152 serviceIdentifier]);
                          __int128 v163 = (void *)objc_claimAutoreleasedReturnValue([v160 recordID]);
                          __int128 v164 = (void *)objc_claimAutoreleasedReturnValue([v163 recordName]);
                          __int128 v165 = (void *)objc_claimAutoreleasedReturnValue([v160 recordType]);
                          __int128 v166 = (void *)objc_claimAutoreleasedReturnValue([v152 altDSID]);
                          id v167 = [v161 initWithTransactionServiceIdentifier:v162 recordName:v164 recordType:v165 zoneName:v198 altDSID:v166];

                          uint64_t v84 = v199;
                          __int128 v168 = *(void **)(v199 + 64);
                          __int128 v169 = (void *)objc_claimAutoreleasedReturnValue([v152 accountIdentifier]);
                          [v168 addTransactionSyncReportItem:v167 forAccountIdentifier:v169];
                        }

                        id v158 = [v194 countByEnumeratingWithState:&v201 objects:v213 count:16];
                      }

                      while (v158);
                    }

                    id v137 = v182;
                    id v5 = v183;
                    uint64_t v8 = v186;
                    __int128 v45 = v178;
                  }

                  __int128 v170 = (void *)objc_claimAutoreleasedReturnValue([v152 identifier]);
                  id v6 = v185;
                  id v61 = v190;
                  if (v170)
                  {
                    if ((HIDWORD(v176) | v176) == 1) {
                      objc_msgSend( *(id *)(*(void *)(v84 + 32) + 240),  "scheduleTaskToFetchStaleAccountIfNecessary:associatedAccountEndpoint:");
                    }
                    __int128 v171 = -[PDPaymentTransactionProcessorConfiguration initWithTransactionIdentifier:updateReasons:]( objc_alloc(&OBJC_CLASS___PDPaymentTransactionProcessorConfiguration),  "initWithTransactionIdentifier:updateReasons:",  v170,  v30);
                    [*(id *)(v84 + 72) addObject:v171];

                    uint64_t v8 = v186;
                  }

                  if (!v152)
                  {
                    id v43 = 0LL;
                    id v14 = v187;
                    goto LABEL_152;
                  }

                  id v43 = (PKPaymentTransaction *)v152;
                  id v14 = v187;
LABEL_149:
                  if ([*(id *)(v84 + 56) returnRecords])
                  {
                    id v172 = objc_alloc(&OBJC_CLASS___PKCloudRecordTransaction);
                    __int128 v173 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", obj));
                    __int128 v174 = v172;
                    uint64_t v8 = v186;
                    id v80 = [v174 initWithRecords:v173];

                    id v61 = v190;
                    [v80 setTransaction:v43];
                    [*(id *)(v84 + 64) addCloudRecord:v80 forContainerDatabaseIdentifier:*(void *)(v84 + 40)];
                    goto LABEL_151;
                  }

      [v10 setPaymentTransactionIdentifier:v66];
      uint64_t v69 = (void *)v66;
      goto LABEL_65;
    }

    id v11 = 0LL;
    char v10 = 0LL;
LABEL_81:
  }

  return 1LL;
}
            }

            break;
          default:
            continue;
        }
      }

      id v14 = [v11 countByEnumeratingWithState:&v95 objects:v101 count:16];
    }

    while (v14);
  }
}

LABEL_152:
LABEL_153:
                  goto LABEL_154;
                }

                v134 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction transactionDate](v43, "transactionDate"));
                v132 = (void *)objc_claimAutoreleasedReturnValue([v134 dateByAddingTimeInterval:604800.0]);

                -[PKPaymentTransaction setExpirationDate:](v43, "setExpirationDate:", v132);
              }
            }

            goto LABEL_114;
          }
        }

        if (v191 == (id)1)
        {
          id v101 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v199 + 32) dataSource]);
          v99 = (void *)objc_claimAutoreleasedReturnValue([v101 peerPaymentAccountForTransactionSourceIdentifier:v190]);

          __int16 v102 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction accountIdentifier](v43, "accountIdentifier"));
          if (!v102)
          {
            uint64_t v103 = (void *)objc_claimAutoreleasedReturnValue([v99 identifier]);
            -[PKPaymentTransaction setAccountIdentifier:](v43, "setAccountIdentifier:", v103);
          }

          __int128 v177 = v45;
          -[PKPaymentTransaction setAccountType:](v43, "setAccountType:", 1LL);
          __int16 v104 = (void *)objc_claimAutoreleasedReturnValue([v99 identifier]);
          uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Setting peer payment account identifier %@ for service identifier %@",  v104,  *v22));

          if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id buf = 138412290;
            uint64_t v227 = (uint64_t)v105;
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
          }

          id v106 = *(void **)(v199 + 32);
          uint64_t v107 = *(void *)(v199 + 48);
          v215 = v105;
          id v108 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v215,  1LL));
          [v106 reportContainerChangeSignpostEventType:45 stateName:v107 objectNames:v108 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
        }

        else
        {
          if (v191) {
            goto LABEL_108;
          }
          __int128 v95 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v199 + 32) dataSource]);
          __int128 v96 = (void *)objc_claimAutoreleasedReturnValue([v95 passUniqueIdentifierForTransactionSourceIdentifier:v190]);

          id v97 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v199 + 32) + 272) associatedPassUniqueID]);
          id v98 = v96;
          v99 = v98;
          if (v97 == v98)
          {
          }

          else
          {
            if (!v98 || !v97)
            {

LABEL_85:
              __int128 v207 = 0u;
              __int128 v208 = 0u;
              __int128 v205 = 0u;
              __int128 v206 = 0u;
              id v175 = *(id *)(*(void *)(v199 + 32) + 280LL);
              id v193 = [v175 countByEnumeratingWithState:&v205 objects:v217 count:16];
              if (v193)
              {
                __int128 v177 = v45;
                uint64_t v114 = *(void *)v206;
                while (2)
                {
                  for (k = 0LL; k != v193; k = (char *)k + 1)
                  {
                    if (*(void *)v206 != v114) {
                      objc_enumerationMutation(v175);
                    }
                    __int128 v116 = *(void **)(*((void *)&v205 + 1) + 8LL * (void)k);
                    id v117 = (id)objc_claimAutoreleasedReturnValue([v116 associatedPassUniqueID]);
                    id v118 = v99;
                    uint64_t v119 = v118;
                    if (v117 == v118)
                    {

LABEL_101:
                      id v122 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction accountIdentifier](v43, "accountIdentifier"));

                      if (!v122)
                      {
                        __int128 v123 = (void *)objc_claimAutoreleasedReturnValue([v116 accountIdentifier]);
                        -[PKPaymentTransaction setAccountIdentifier:](v43, "setAccountIdentifier:", v123);
                      }

                      uint64_t v124 = PKPaymentTransactionAccountTypeFromAccountType([v116 type]);
                      -[PKPaymentTransaction setAccountType:](v43, "setAccountType:", v124);
                      uint64_t v125 = (void *)objc_claimAutoreleasedReturnValue([v116 accountIdentifier]);
                      uint64_t v126 = PKPaymentTransactionAccountTypeToString(v124);
                      __int128 v127 = (void *)objc_claimAutoreleasedReturnValue(v126);
                      id v108 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Setting account service accountIdentifier %@, transactionAccountType %@ for transaction %@ and pass uniqueID %@",  v125,  v127,  *v22,  v119));

                      id v5 = v183;
                      uint64_t v8 = v186;
                      if (os_log_type_enabled(osloga, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)id buf = 138412290;
                        uint64_t v227 = (uint64_t)v108;
                        _os_log_impl((void *)&_mh_execute_header, osloga, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
                      }

                      id v128 = *(void **)(v199 + 32);
                      uint64_t v129 = *(void *)(v199 + 48);
                      v216 = v108;
                      __int128 v130 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v216,  1LL));
                      uint64_t v131 = v129;
                      id v78 = osloga;
                      [v128 reportContainerChangeSignpostEventType:45 stateName:v131 objectNames:v130 changeToken:0 error:0 operationGroupNam e:0 operationGroupNameSuffix:0];

                      v99 = v119;
                      uint64_t v105 = v175;
                      goto LABEL_106;
                    }

                    id v120 = v99;
                    if (v99 && v117)
                    {
                      unsigned int v121 = [v117 isEqualToString:v118];

                      if (v121) {
                        goto LABEL_101;
                      }
                    }

                    else
                    {
                    }

                    v99 = v120;
                  }

                  id v193 = [v175 countByEnumeratingWithState:&v205 objects:v217 count:16];
                  if (v193) {
                    continue;
                  }
                  break;
                }

                v99 = v119;
                id v5 = v183;
                uint64_t v8 = v186;
                __int128 v45 = v177;
              }

              id v78 = osloga;
              uint64_t v105 = v175;
              goto LABEL_107;
            }

            unsigned int v100 = [v97 isEqualToString:v98];

            if (!v100) {
              goto LABEL_85;
            }
          }

          id v192 = v99;
          uint64_t v109 = (void *)objc_claimAutoreleasedReturnValue(-[PKPaymentTransaction accountIdentifier](v43, "accountIdentifier"));

          if (!v109)
          {
            uint64_t v110 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v199 + 32) + 272) identifier]);
            -[PKPaymentTransaction setAccountIdentifier:](v43, "setAccountIdentifier:", v110);
          }

          __int128 v177 = v45;
          -[PKPaymentTransaction setAccountType:](v43, "setAccountType:", 1LL);
          v111 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(v199 + 32) + 272) identifier]);
          uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Setting peer payment accountIdentifier %@ for transaction with service id %@ for pass uniqueID %@",  v111,  *(void *)(v199 + 48),  v192));

          id v78 = osloga;
          if (os_log_type_enabled(osloga, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id buf = 138412290;
            uint64_t v227 = (uint64_t)v105;
            _os_log_impl((void *)&_mh_execute_header, osloga, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
          }

          v112 = *(void **)(v199 + 32);
          uint64_t v113 = *(void *)(v199 + 48);
          v218 = v105;
          id v108 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v218,  1LL));
          [v112 reportContainerChangeSignpostEventType:45 stateName:v113 objectNames:v108 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
          v99 = v192;
        }

id sub_1000A71F0(id a1, PDPaymentTransactionProcessorConfiguration *a2)
{
  return -[PDPaymentTransactionProcessorConfiguration transactionIdentifier](a2, "transactionIdentifier");
}

void sub_1000A77E4(uint64_t a1, uint64_t a2, void *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000A7858;
  v5[3] = &unk_10063EA48;
  id v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [a3 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_1000A7858(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  id v4 = [[PKCloudStoreRecord alloc] initWithRecords:v7];
  if ([*(id *)(a1 + 32) _canFormShareFromCloudStoreRecord:v4])
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v7 firstObject]);
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "pk_share"));
    if (v6) {
      [*(id *)(a1 + 40) addObject:v6];
    }
  }
}

void sub_1000A78F0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v23 = a3;
  uint64_t v22 = a4;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  id v26 = [obj countByEnumeratingWithState:&v32 objects:v41 count:16];
  if (v26)
  {
    uint64_t v25 = *(void *)v33;
    do
    {
      for (uint64_t i = 0LL; i != v26; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v33 != v25) {
          objc_enumerationMutation(obj);
        }
        id v7 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
        __int128 v28 = 0u;
        __int128 v29 = 0u;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "participants", v22));
        id v9 = [v8 countByEnumeratingWithState:&v28 objects:v40 count:16];
        if (!v9)
        {

LABEL_20:
          [*(id *)(a1 + 56) addObject:v7];
          continue;
        }

        id v10 = v9;
        uint64_t v27 = i;
        uint64_t v11 = *(void *)v29;
        char v12 = 1;
        do
        {
          for (uint64_t j = 0LL; j != v10; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v29 != v11) {
              objc_enumerationMutation(v8);
            }
            id v14 = *(void **)(*((void *)&v28 + 1) + 8LL * (void)j);
            if ([v14 invitationTokenStatus] == (id)3)
            {
              uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([v7 recordID]);
              uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v15 zoneID]);

              uint64_t Object = PKLogFacilityTypeGetObject(9LL);
              uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneName]);
                *(_DWORD *)id buf = 138412546;
                id v37 = v14;
                __int16 v38 = 2114;
                unsigned int v39 = v19;
                _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Participant %@ needs new keys for zone %{public}@",  buf,  0x16u);
              }

              [v14 setWantsNewInvitationToken:1];
              [*(id *)(a1 + 40) addObject:v7];
              id v20 = *(void **)(a1 + 48);
              uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue([v14 participantID]);
              [v20 addObject:v21];

              char v12 = 0;
            }
          }

          id v10 = [v8 countByEnumeratingWithState:&v28 objects:v40 count:16];
        }

        while (v10);

        uint64_t i = v27;
        if ((v12 & 1) != 0) {
          goto LABEL_20;
        }
      }

      id v26 = [obj countByEnumeratingWithState:&v32 objects:v41 count:16];
    }

    while (v26);
  }

  v22[2](v22, v23, 0LL);
}

void sub_1000A7BD0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = [*(id *)(a1 + 32) count];
      id v11 = [*(id *)(a1 + 40) count];
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(a1 + 40);
      *(_DWORD *)id buf = 134218754;
      id v33 = v10;
      __int16 v34 = 2048;
      id v35 = v11;
      __int16 v36 = 2112;
      uint64_t v37 = v12;
      __int16 v38 = 2112;
      uint64_t v39 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "%lu zone shares and %lu participants identifiers needing new keys after parsing: %@, %@",  buf,  0x2Au);
    }

    id v14 = *(void **)(a1 + 48);
    uint64_t v30 = *(void *)(a1 + 56);
    id v15 = [*(id *)(a1 + 32) copy];
    id v31 = v15;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v31,  &v30,  1LL));
    uint64_t v17 = PKCloudStoreOperationGroupShareLostKeys;
    uint64_t v18 = PKCloudStoreOperationGroupSuffixShareInvitation;
    id v19 = [*(id *)(a1 + 64) qualityOfService];
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472LL;
    v22[2] = sub_1000A7E3C;
    void v22[3] = &unk_10063F6E0;
    id v23 = *(id *)(a1 + 32);
    id v29 = v7;
    id v24 = v6;
    id v25 = *(id *)(a1 + 56);
    id v20 = *(id *)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 48);
    id v26 = v20;
    uint64_t v27 = v21;
    id v28 = *(id *)(a1 + 72);
    [v14 modifyRecordsOperationWithRecordsToSaveByDatabaseIdentifier:v16 recordIDsToDeleteByDatabaseIdentifier:0 recordModificati onOperationConfiguration:0 emitErrorIfConflictDetected:0 isModifyingShare:1 operationGroupName:v17 operationGroupNameSuffix:v18  qualityOfService:v19 completion:v22];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_1000A7E3C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (v12)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v14 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      id v15 = *(PKCloudStoreZoneInvitation **)(a1 + 32);
      *(_DWORD *)id buf = 138412546;
      id v84 = v12;
      __int16 v85 = 2112;
      __int128 v86 = v15;
      _os_log_impl( (void *)&_mh_execute_header,  v14,  OS_LOG_TYPE_DEFAULT,  "Error uploading the zone shares %@ for the particpants that need new keys %@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 80) + 16LL))();
  }

  else
  {
    id v46 = v11;
    id v47 = v10;
    id v48 = v9;
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v9 objectForKey:*(void *)(a1 + 48)]);
    uint64_t v17 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412290;
      id v84 = v16;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Completed uploading zone shares for the particpants that need new keys %@",  buf,  0xCu);
    }

    id v19 = dispatch_group_create();
    __int128 v77 = 0u;
    __int128 v78 = 0u;
    __int128 v79 = 0u;
    __int128 v80 = 0u;
    obuint64_t j = v16;
    id v52 = [obj countByEnumeratingWithState:&v77 objects:v82 count:16];
    if (v52)
    {
      uint64_t v51 = *(void *)v78;
      uint64_t v50 = v19;
      do
      {
        for (uint64_t i = 0LL; i != v52; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v78 != v51) {
            objc_enumerationMutation(obj);
          }
          uint64_t v21 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v77 + 1) + 8 * (void)i), "pk_share"));
          uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v21 recordID]);
          id v57 = (void *)objc_claimAutoreleasedReturnValue([v22 zoneID]);

          if (v21)
          {
            __int128 v53 = i;
            dispatch_group_enter(v19);
            id v23 = (void *)objc_claimAutoreleasedReturnValue([v21 participants]);
            v75[0] = _NSConcreteStackBlock;
            v75[1] = 3221225472LL;
            v75[2] = sub_1000A85C8;
            v75[3] = &unk_10063F6B8;
            id v76 = *(id *)(a1 + 56);
            id v24 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v23, "pk_objectsPassingTest:", v75));

            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)id buf = 138412546;
              id v84 = v24;
              __int16 v85 = 2112;
              __int128 v86 = (PKCloudStoreZoneInvitation *)v21;
              _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Sending new zone share invitation to participants %@ in share %@",  buf,  0x16u);
            }

            group = dispatch_group_create();
            __int128 v71 = 0u;
            __int128 v72 = 0u;
            __int128 v73 = 0u;
            __int128 v74 = 0u;
            id v54 = v24;
            id v59 = [v54 countByEnumeratingWithState:&v71 objects:v81 count:16];
            if (v59)
            {
              uint64_t v58 = *(void *)v72;
              uint64_t v55 = v21;
              do
              {
                for (uint64_t j = 0LL; j != v59; uint64_t j = (char *)j + 1)
                {
                  if (*(void *)v72 != v58) {
                    objc_enumerationMutation(v54);
                  }
                  id v26 = *(void **)(*((void *)&v71 + 1) + 8LL * (void)j);
                  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue([v26 invitationToken]);
                  id v70 = 0LL;
                  id v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:]( &OBJC_CLASS___NSKeyedArchiver,  "archivedDataWithRootObject:requiringSecureCoding:error:",  v27,  1LL,  &v70));
                  id v29 = (PKCloudStoreZoneInvitation *)v70;

                  if (v28)
                  {
                    uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([v26 userIdentity]);
                    id v31 = (void *)objc_claimAutoreleasedReturnValue([v30 lookupInfo]);
                    __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 emailAddress]);

                    id v33 = objc_alloc_init(&OBJC_CLASS___PKCloudStoreZoneInvitation);
                    __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([v21 URL]);
                    -[PKCloudStoreZoneInvitation setShareURL:](v33, "setShareURL:", v34);

                    -[PKCloudStoreZoneInvitation setShareInvitationToken:](v33, "setShareInvitationToken:", v28);
                    uint64_t v35 = a1;
                    __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) containerManager]);
                    uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 containerName]);
                    -[PKCloudStoreZoneInvitation setContainerIdentifier:](v33, "setContainerIdentifier:", v37);

                    __int16 v38 = (void *)objc_claimAutoreleasedReturnValue([v57 zoneName]);
                    -[PKCloudStoreZoneInvitation setZoneName:](v33, "setZoneName:", v38);

                    uint64_t v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
                    -[PKCloudStoreZoneInvitation setDateCreated:](v33, "setDateCreated:", v39);

                    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)id buf = 138412546;
                      id v84 = v32;
                      __int16 v85 = 2112;
                      __int128 v86 = v33;
                      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Sending zone share invitation to %@, %@",  buf,  0x16u);
                    }

                    dispatch_group_enter(group);
                    uint64_t v40 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v35 + 64) delegate]);
                    uint64_t v41 = *(void *)(v35 + 64);
                    v67[0] = _NSConcreteStackBlock;
                    v67[1] = 3221225472LL;
                    v67[2] = sub_1000A860C;
                    v67[3] = &unk_10063DAE8;
                    id v68 = v32;
                    uint64_t v69 = group;
                    id v42 = v32;
                    uint64_t v43 = v41;
                    a1 = v35;
                    [v40 cloudStoreContainer:v43 sendZoneShareInvitation:v33 recipientHandle:v42 completion:v67];

                    uint64_t v21 = v55;
                  }

                  else
                  {
                    id v33 = v18;
                    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)id buf = 138412546;
                      id v84 = v26;
                      __int16 v85 = 2112;
                      __int128 v86 = v29;
                      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Error encoding invitiation token for participant %@, %@",  buf,  0x16u);
                      id v33 = v18;
                    }
                  }
                }

                id v59 = [v54 countByEnumeratingWithState:&v71 objects:v81 count:16];
              }

              while (v59);
            }

            id v44 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) workQueue]);
            block[0] = _NSConcreteStackBlock;
            block[1] = 3221225472LL;
            block[2] = sub_1000A8700;
            block[3] = &unk_100639350;
            id v64 = *(id *)(a1 + 72);
            id v65 = v21;
            id v19 = v50;
            uint64_t v66 = v50;
            dispatch_group_notify(group, v44, block);

            uint64_t i = v53;
          }
        }

        id v52 = [obj countByEnumeratingWithState:&v77 objects:v82 count:16];
      }

      while (v52);
    }

    __int128 v45 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) workQueue]);
    v60[0] = _NSConcreteStackBlock;
    v60[1] = 3221225472LL;
    v60[2] = sub_1000A872C;
    v60[3] = &unk_1006396B0;
    id v62 = *(id *)(a1 + 80);
    id v61 = *(id *)(a1 + 40);
    dispatch_group_notify(v19, v45, v60);

    id v10 = v47;
    id v9 = v48;
    id v12 = 0LL;
    id v11 = v46;
  }
}

id sub_1000A85C8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 participantID]);
  id v4 = [v2 containsObject:v3];

  return v4;
}

void sub_1000A860C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = @"NO";
    uint64_t v9 = *(void *)(a1 + 32);
    int v10 = 138543874;
    if (a2) {
      uint64_t v8 = @"YES";
    }
    id v11 = v8;
    __int16 v12 = 2112;
    id v13 = v5;
    __int16 v14 = 2112;
    uint64_t v15 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Sent zone share invitation with success %{public}@, error %@ to %@",  (uint8_t *)&v10,  0x20u);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1000A8700(uint64_t a1)
{
}

uint64_t sub_1000A872C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1000A8740(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v40 = a2;
  id v39 = a3;
  __int16 v38 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    id v9 = [*(id *)(a1 + 32) count];
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)id buf = 134218242;
    id v58 = v9;
    __int16 v59 = 2112;
    uint64_t v60 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "%lu valid zone shares after parsing: %@",  buf,  0x16u);
  }

  __int128 v53 = 0u;
  __int128 v54 = 0u;
  __int128 v51 = 0u;
  __int128 v52 = 0u;
  obuint64_t j = *(id *)(a1 + 32);
  id v11 = [obj countByEnumeratingWithState:&v51 objects:v56 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v52;
    __int16 v14 = &OBJC_CLASS___PKAccountWebServiceRequestPhysicalCardRequest_ptr;
    uint64_t v15 = &_s10Foundation22_convertErrorToNSErrorySo0E0Cs0C0_pF_ptr;
    uint64_t v41 = *(void *)v52;
    do
    {
      uint64_t v16 = 0LL;
      id v42 = v12;
      do
      {
        if (*(void *)v52 != v13) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = *(void **)(*((void *)&v51 + 1) + 8LL * (void)v16);
        id v18 = objc_alloc((Class)v14[68]);
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v15[408] setWithObject:v17]);
        id v20 = [v18 initWithRecords:v19];

        uint64_t v21 = v20;
        [*(id *)(a1 + 40) addCloudRecord:v20 forContainerDatabaseIdentifier:*(void *)(a1 + 48)];
        uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue([v17 recordID]);
        id v23 = (void *)objc_claimAutoreleasedReturnValue([v22 zoneID]);

        if ([*(id *)(a1 + 56) storeChangesInDatabase])
        {
          id v24 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) containerManager]);
          [v24 containerDatabaseIdentifier:*(void *)(a1 + 48) didUpdateShare:v17 forZoneID:v23];
        }

        if ([*(id *)(a1 + 56) returnRecords])
        {
          id v44 = v21;
          __int128 v45 = v16;
          __int128 v49 = 0u;
          __int128 v50 = 0u;
          __int128 v47 = 0u;
          __int128 v48 = 0u;
          id v46 = (id)objc_claimAutoreleasedReturnValue([v17 participants]);
          id v25 = [v46 countByEnumeratingWithState:&v47 objects:v55 count:16];
          if (v25)
          {
            id v26 = v25;
            uint64_t v27 = *(void *)v48;
            do
            {
              id v28 = 0LL;
              do
              {
                if (*(void *)v48 != v27) {
                  objc_enumerationMutation(v46);
                }
                id v29 = *(void **)(*((void *)&v47 + 1) + 8LL * (void)v28);
                uint64_t v30 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) containerManager]);
                id v31 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) containerManager]);
                __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v31 databaseForIdentifier:*(void *)(a1 + 48)]);
                id v33 = (void *)objc_claimAutoreleasedReturnValue([v30 cloudStoreZoneForZoneID:v23 inContainerDatabase:v32]);

                __int16 v34 = (void *)objc_claimAutoreleasedReturnValue([v29 userIdentity]);
                uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 lookupInfo]);
                __int16 v36 = (void *)objc_claimAutoreleasedReturnValue([v33 shareParticipantWithLookupInfo:v35]);

                uint64_t v37 = (void *)objc_claimAutoreleasedReturnValue([v36 invitationToken]);
                [v29 setInvitationToken:v37];

                id v28 = (char *)v28 + 1;
              }

              while (v26 != v28);
              id v26 = [v46 countByEnumeratingWithState:&v47 objects:v55 count:16];
            }

            while (v26);
          }

          uint64_t v13 = v41;
          id v12 = v42;
          __int16 v14 = &OBJC_CLASS___PKAccountWebServiceRequestPhysicalCardRequest_ptr;
          uint64_t v15 = &_s10Foundation22_convertErrorToNSErrorySo0E0Cs0C0_pF_ptr;
          uint64_t v21 = v44;
          uint64_t v16 = v45;
        }

        uint64_t v16 = (char *)v16 + 1;
      }

      while (v16 != v12);
      id v12 = [obj countByEnumeratingWithState:&v51 objects:v56 count:16];
    }

    while (v12);
  }

  v38[2](v38, v39, 0LL);
}

uint64_t sub_1000A8B04(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1000A8C10(uint64_t a1, uint64_t a2, void *a3)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000A8C98;
  v5[3] = &unk_10063EA48;
  id v6 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 40);
  [a3 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_1000A8C98(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  id v6 = objc_autoreleasePoolPush();
  id v7 = [[PKCloudStoreRecord alloc] initWithRecords:v5];
  id v8 = [[PKCloudStoreZoneShareLock alloc] initWithCloudStoreCoder:v7];
  if (v8)
  {
    id v9 = objc_alloc(&OBJC_CLASS___PKCloudRecordCloudStoreZoneShareLock);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v5));
    id v11 = [v9 initWithRecords:v10];

    [v11 setCloudStoreZoneShareLock:v8];
    [*(id *)(a1 + 32) addCloudRecord:v11 forContainerDatabaseIdentifier:*(void *)(a1 + 40)];
  }

  objc_autoreleasePoolPop(v6);
}

void sub_1000A8E94(uint64_t a1, uint64_t a2, void *a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_1000A8F20;
  v6[3] = &unk_10063F730;
  id v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  [a3 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_1000A8F20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_autoreleasePoolPush();
  id v8 = [[PKCloudStoreRecord alloc] initWithRecords:v6];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 recordID]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 recordName]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[PKPeerPaymentRecurringPayment recurringPaymentIdentifierFromRecordName:]( &OBJC_CLASS___PKPeerPaymentRecurringPayment,  "recurringPaymentIdentifierFromRecordName:",  v11));

  if ([v12 length])
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    __int16 v14 = (PKPeerPaymentRecurringPayment *)objc_claimAutoreleasedReturnValue([v13 peerPaymentRecurringPaymentWithIdentifier:v12]);

    if (v14)
    {
      -[PKPeerPaymentRecurringPayment applyPropertiesFromCloudStoreRecord:]( v14,  "applyPropertiesFromCloudStoreRecord:",  v8);
LABEL_9:
      id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
      id v24 = v14;
      id v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v24, 1LL));
      [v19 insertOrUpdatePeerPaymentRecurringPayments:v20];

      id v21 = objc_alloc(&OBJC_CLASS___PKCloudRecordRecurringPaymentMemo);
      uint64_t v22 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
      id v23 = [v21 initWithRecords:v22];

      [v23 setRecurringPayment:v14];
      [*(id *)(a1 + 40) addCloudRecord:v23 forContainerDatabaseIdentifier:*(void *)(a1 + 48)];

      uint64_t v16 = v14;
      goto LABEL_10;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412290;
      id v26 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "No recurring payment on device with identifier %@, creating a new one with the memo content",  buf,  0xCu);
    }

    __int16 v14 = -[PKPeerPaymentRecurringPayment initWithCloudStoreCoder:]( objc_alloc(&OBJC_CLASS___PKPeerPaymentRecurringPayment),  "initWithCloudStoreCoder:",  v8);
    if (v14) {
      goto LABEL_9;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412290;
      id v26 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Could not create recurring payment from cloud record: %@",  buf,  0xCu);
    }
  }

  else
  {
    uint64_t v15 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
      *(_DWORD *)id buf = 138412290;
      id v26 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Couldn't get identifier from record %@",  buf,  0xCu);
    }
  }

void sub_1000A9330(uint64_t a1, uint64_t a2, void *a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_1000A93BC;
  v6[3] = &unk_10063F730;
  id v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  [a3 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_1000A93BC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_autoreleasePoolPush();
  id v8 = [[PKCloudStoreRecord alloc] initWithRecords:v6];
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 recordID]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 recordName]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue( +[PKPeerPaymentCounterpartImageData counterpartImageDataIdentifierFromRecordName:]( &OBJC_CLASS___PKPeerPaymentCounterpartImageData,  "counterpartImageDataIdentifierFromRecordName:",  v11));

  if ([v12 length])
  {
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    __int16 v14 = (PKPeerPaymentCounterpartImageData *)objc_claimAutoreleasedReturnValue( [v13 peerPaymentCounterpartImageDataWithIdentifier:v12]);

    if (v14)
    {
      -[PKPeerPaymentCounterpartImageData applyPropertiesFromCloudStoreRecord:]( v14,  "applyPropertiesFromCloudStoreRecord:",  v8);
LABEL_9:
      id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
      [v19 insertOrUpdatePeerPaymentCounterpartImageData:v14];

      id v20 = objc_alloc(&OBJC_CLASS___PKCloudRecordCounterpartImageData);
      id v21 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
      id v22 = [v20 initWithRecords:v21];

      [v22 setCounterpartImageData:v14];
      [*(id *)(a1 + 40) addCloudRecord:v22 forContainerDatabaseIdentifier:*(void *)(a1 + 48)];

      uint64_t v16 = v14;
      goto LABEL_10;
    }

    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 138412290;
      id v24 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "No counterpart image data on device with identifier %@, creating a new one",  (uint8_t *)&v23,  0xCu);
    }

    __int16 v14 = -[PKPeerPaymentCounterpartImageData initWithCloudStoreCoder:]( objc_alloc(&OBJC_CLASS___PKPeerPaymentCounterpartImageData),  "initWithCloudStoreCoder:",  v8);
    if (v14) {
      goto LABEL_9;
    }
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = 138412290;
      id v24 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Could not create counterpart image data from cloud record: %@",  (uint8_t *)&v23,  0xCu);
    }
  }

  else
  {
    uint64_t v15 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
      int v23 = 138412290;
      id v24 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "Couldn't get identifier from record %@",  (uint8_t *)&v23,  0xCu);
    }
  }

void sub_1000A97AC(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  id v4 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  v30[0] = _NSConcreteStackBlock;
  v30[1] = 3221225472LL;
  void v30[2] = sub_1000A9B18;
  v30[3] = &unk_10063F7A8;
  id v5 = *(void **)(a1 + 32);
  v30[4] = *(void *)(a1 + 40);
  id v31 = *(id *)(a1 + 48);
  id v6 = v4;
  __int128 v32 = v6;
  id v7 = v2;
  id v33 = v7;
  id v34 = *(id *)(a1 + 56);
  id v8 = v3;
  uint64_t v35 = v8;
  [v5 enumerateKeysAndObjectsForItemType:1 usingBlock:v30];
  [*(id *)(a1 + 32) addRecords:v6];
  [*(id *)(a1 + 32) removeIdentifiers:v8 itemType:1];
  uint64_t Object = PKLogFacilityTypeGetObject(35LL);
  uint64_t v10 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(Object);
  os_signpost_id_t v11 = os_signpost_id_make_with_pointer(v10, *(const void **)(a1 + 40));
  if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v12 = v11;
    if (os_signpost_enabled(v10))
    {
      *(_WORD *)id buf = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v10,  OS_SIGNPOST_INTERVAL_BEGIN,  v12,  "cloudstore:fetchMissingTransactionRecords",  "",  buf,  2u);
    }
  }

  if (-[NSMutableSet count](v7, "count"))
  {
    int v23 = *(void **)(a1 + 40);
    uint64_t v36 = *(void *)(a1 + 48);
    id v13 = -[NSMutableSet copy](v7, "copy");
    id v37 = v13;
    __int16 v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v37,  &v36,  1LL));
    uint64_t v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) groupName]);
    uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) groupNameSuffix]);
    id v17 = [*(id *)(a1 + 56) qualityOfService];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_1000AA418;
    v24[3] = &unk_10063F7D0;
    id v25 = *(id *)(a1 + 32);
    id v18 = *(id *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 40);
    id v26 = v18;
    uint64_t v27 = v19;
    id v28 = *(id *)(a1 + 64);
    [v23 fetchRecordsWithRecordIDsByDatabaseIdentifier:v14 operationGroupName:v15 operationGroupNameSuffix:v16 qualityOfService:v17 completion:v24];
  }

  else if (*(void *)(a1 + 64))
  {
    id v20 = v10;
    os_signpost_id_t v21 = os_signpost_id_make_with_pointer(v20, *(const void **)(a1 + 40));
    if (v21 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      os_signpost_id_t v22 = v21;
      if (os_signpost_enabled(v20))
      {
        *(_WORD *)id buf = 0;
        _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v20,  OS_SIGNPOST_INTERVAL_END,  v22,  "cloudstore:fetchMissingTransactionRecords",  "",  buf,  2u);
      }
    }

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }
}

void sub_1000A9B18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000A9C04;
  v8[3] = &unk_10063F780;
  id v6 = *(void **)(a1 + 40);
  void v8[4] = *(void *)(a1 + 32);
  id v9 = v6;
  id v10 = v5;
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  id v14 = *(id *)(a1 + 72);
  id v7 = v5;
  [a3 enumerateKeysAndObjectsUsingBlock:v8];
}

void sub_1000A9C04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  context = objc_autoreleasePoolPush();
  id v7 = [[PKCloudStoreRecord alloc] initWithRecords:v6];
  id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 firstObject]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 recordID]);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 zoneID]);

  id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 databaseForIdentifier:*(void *)(a1 + 40)]);

  id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 cloudStoreZoneForZoneID:v10 inContainerDatabase:v12]);

  uint64_t v15 = PKCloudTransactionRecordType;
  uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue([v7 recordsWithRecordType:PKCloudTransactionRecordType]);
  id v17 = (void *)objc_claimAutoreleasedReturnValue([v16 firstObject]);

  id v76 = (void *)v14;
  if (!v17)
  {
    id v26 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
    os_signpost_id_t v22 = (void *)objc_claimAutoreleasedReturnValue( [v26 cloudStoreRecordWithRecordName:*(void *)(a1 + 48) recordType:v15 inCloudStoreZone:v14]);

    objc_msgSend(*(id *)(a1 + 56), "pk_safelyAddObject:", v22);
    if (v22)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      id v28 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v29 = *(void *)(a1 + 48);
        *(_DWORD *)id buf = 138543362;
        uint64_t v80 = v29;
        _os_log_impl( (void *)&_mh_execute_header,  v28,  OS_LOG_TYPE_DEFAULT,  "Not fetching Transaction recordType for transaction with service id %{public}@ since a cache of the Transactio nDeviceData recordType is present",  buf,  0xCu);
      }

      uint64_t v30 = *(void **)(a1 + 32);
      uint64_t v31 = *(void *)(a1 + 48);
      id v25 = (void *)objc_claimAutoreleasedReturnValue([v22 description]);
      __int128 v78 = v25;
      __int128 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v78,  1LL));
      [v30 reportContainerChangeSignpostEventType:53 stateName:v31 objectNames:v32 changeToken:0 error:0 operationGroupName:0 operationGroupNameSuffix:0];
    }

    else
    {
      id v25 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _transactionSourceIdentifierForTransactionCloudStoreRecord:v7 databaseIdentifier:*(void *)(a1 + 40)]);
      id v33 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) dataSource]);
      unsigned __int8 v34 = [v33 hasTransactionWithServiceIdentifier:*(void *)(a1 + 48) transactionSourceIdentifier:v25];

      uint64_t v35 = PKLogFacilityTypeGetObject(9LL);
      __int128 v32 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
      BOOL v36 = os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
      if ((v34 & 1) != 0)
      {
        if (v36)
        {
          uint64_t v37 = *(void *)(a1 + 48);
          *(_DWORD *)id buf = 138543362;
          uint64_t v80 = v37;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Not fetching PKCloudTransactionRecordType for transaction with service id %{public}@ since it already exists in the database",  buf,  0xCu);
        }
      }

      else
      {
        __int128 v71 = v10;
        if (v36)
        {
          uint64_t v51 = *(void *)(a1 + 48);
          *(_DWORD *)id buf = 138543362;
          uint64_t v80 = v51;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Need PKCloudTransactionRecordType record type for transaction with service id %{public}@.",  buf,  0xCu);
        }

        __int128 v52 = (void *)objc_claimAutoreleasedReturnValue([v7 recordsWithRecordType:PKCloudTransactionDeviceDataRecordType]);
        __int128 v53 = (os_log_s *)objc_claimAutoreleasedReturnValue([v52 firstObject]);

        __int128 v73 = v53;
        __int128 v54 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s recordID](v53, "recordID"));
        uint64_t v55 = objc_claimAutoreleasedReturnValue([v54 zoneID]);

        __int128 v56 = (void *)v55;
        if (v55)
        {
          __int128 v32 = -[CKRecordID initWithRecordName:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecordID),  "initWithRecordName:zoneID:",  *(void *)(a1 + 48),  v55);
          [*(id *)(a1 + 64) addObject:v32];
        }

        else if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v67 = *(void *)(a1 + 48);
          *(_DWORD *)id buf = 138543362;
          uint64_t v80 = v67;
          _os_log_impl( (void *)&_mh_execute_header,  v32,  OS_LOG_TYPE_DEFAULT,  "Cannot fetch PKCloudTransactionRecordType record type for transaction with service id %{public}@ because the re is no associated zone.",  buf,  0xCu);
        }

        id v10 = v71;

        __int128 v32 = v73;
      }
    }

    goto LABEL_45;
  }

  uint64_t v18 = PKCloudTransactionDeviceDataRecordType;
  uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v7 recordsWithRecordType:PKCloudTransactionDeviceDataRecordType]);
  id v20 = (void *)objc_claimAutoreleasedReturnValue([v19 firstObject]);

  if (!v20)
  {
    os_signpost_id_t v22 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 32) _transactionSourceIdentifierForTransactionCloudStoreRecord:v7 databaseIdentifier:*(void *)(a1 + 40)]);
    if (!v22 && ([*(id *)(a1 + 72) returnRecords] & 1) == 0)
    {
      uint64_t v61 = PKLogFacilityTypeGetObject(9LL);
      id v62 = (os_log_s *)objc_claimAutoreleasedReturnValue(v61);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v63 = *(void *)(a1 + 48);
        *(_DWORD *)id buf = 138543362;
        uint64_t v80 = v63;
        _os_log_impl( (void *)&_mh_execute_header,  v62,  OS_LOG_TYPE_DEFAULT,  "Skipping processing service id %{public}@ because pass is not on this device",  buf,  0xCu);
      }

      [*(id *)(a1 + 80) addObject:*(void *)(a1 + 48)];
      goto LABEL_46;
    }

    uint64_t v23 = *(void *)(a1 + 72);
    uint64_t v24 = objc_opt_class(&OBJC_CLASS___PDApplePayCloudStoreRecordsRequest, v21);
    id v74 = v5;
    if ((objc_opt_isKindOfClass(v23, v24) & 1) != 0)
    {
      id v25 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) transactionSourceIdentifiers]);
      if (!v22) {
        goto LABEL_18;
      }
    }

    else
    {
      id v25 = 0LL;
      if (!v22) {
        goto LABEL_18;
      }
    }

    if ([v25 count] && (objc_msgSend(v25, "containsObject:", v22) & 1) == 0)
    {
      uint64_t v64 = PKLogFacilityTypeGetObject(9LL);
      id v65 = (os_log_s *)objc_claimAutoreleasedReturnValue(v64);
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v66 = *(void *)(a1 + 48);
        *(_DWORD *)id buf = 138543362;
        uint64_t v80 = v66;
        _os_log_impl( (void *)&_mh_execute_header,  v65,  OS_LOG_TYPE_DEFAULT,  "Skipping processing service id %{public}@ because it is for a different transaction source",  buf,  0xCu);
      }

      [*(id *)(a1 + 80) addObject:*(void *)(a1 + 48)];
      goto LABEL_44;
    }

void sub_1000AA418(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 32);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([a2 objectForKey:*(void *)(a1 + 40)]);
  [v6 addRecords:v7];

  uint64_t Object = PKLogFacilityTypeGetObject(35LL);
  id v9 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(Object);
  os_signpost_id_t v10 = os_signpost_id_make_with_pointer(v9, *(const void **)(a1 + 48));
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v11 = v10;
    if (os_signpost_enabled(v9))
    {
      *(_WORD *)id v13 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v9,  OS_SIGNPOST_INTERVAL_END,  v11,  "cloudstore:fetchMissingTransactionRecords",  "",  v13,  2u);
    }
  }

  uint64_t v12 = *(void *)(a1 + 56);
  if (v12) {
    (*(void (**)(uint64_t, id))(v12 + 16))(v12, v5);
  }
}

LABEL_95:
            os_signpost_id_t v11 = v157;
            if (!v43) {
              goto LABEL_112;
            }
            goto LABEL_123;
          }
        }

        uint64_t v75 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
        id v76 = (void *)objc_claimAutoreleasedReturnValue( -[PKPeerPaymentAccount associatedPassUniqueID]( self->_peerPaymentAccount,  "associatedPassUniqueID"));
        __int128 v77 = (void *)objc_claimAutoreleasedReturnValue([v75 transactionSourceIdentifiersForPassUniqueIdentifier:v76]);
        uint64_t v43 = (id)objc_claimAutoreleasedReturnValue([v77 anyObject]);

        uint64_t v12 = v146;
        id v8 = v154;
        goto LABEL_95;
      }
    }

    BOOL v36 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
    uint64_t v37 = objc_claimAutoreleasedReturnValue(-[PKPeerPaymentAccount associatedPassUniqueID](self->_peerPaymentAccount, "associatedPassUniqueID"));
    id v161 = self;
    __int16 v38 = v8;
    uint64_t v39 = (void *)v37;
    id v40 = v14;
    uint64_t v41 = v12;
    id v42 = (void *)objc_claimAutoreleasedReturnValue([v36 transactionSourceIdentifiersForPassUniqueIdentifier:v37]);
    uint64_t v43 = (id)objc_claimAutoreleasedReturnValue([v42 anyObject]);

    uint64_t v12 = v41;
    uint64_t v14 = v40;

    id v8 = v38;
    self = v161;

    if (v43) {
      goto LABEL_95;
    }
    goto LABEL_30;
  }

  os_signpost_id_t v155 = v14;
  __int128 v160 = self;
  if (![v12 hasPrefix:PKApplePayContainerCardZoneNamePrefix])
  {
    uint64_t v31 = (void *)PKCloudStoreTransactionsZoneName;
    __int128 v32 = v12;
    id v33 = v31;
    if (v32 == v33)
    {

      uint64_t v14 = v155;
    }

    else
    {
      unsigned __int8 v34 = v33;
      uint64_t v14 = v155;
      if (!v32 || !v33)
      {

LABEL_52:
        uint64_t v69 = PKApplePayContainerSavingsZoneNamePrefix;
        id v70 = (void *)objc_claimAutoreleasedReturnValue([v32 stringByReplacingOccurrencesOfString:v69 withString:&stru_100662310]);
        if ([v70 length])
        {
          __int128 v71 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
          uint64_t v43 = (id)objc_claimAutoreleasedReturnValue([v71 transactionSourceIdentifierForAccountIdentifier:v70]);
        }

        else
        {
          uint64_t v43 = 0LL;
        }

        if (!v43) {
          goto LABEL_112;
        }
        goto LABEL_123;
      }

      uint64_t v35 = [v32 isEqualToString:v33];

      if (!v35) {
        goto LABEL_52;
      }
    }

    uint64_t v68 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
    uint64_t v43 = (id)objc_claimAutoreleasedReturnValue( [v68 broadwayOrSurfTransactionSourceIdentifierForAmbiguousServiceIdentifier:v13 transactionAccountIdentifier:0 tr ansactionAccountType:0 transactionAltDSID:0]);

    if (!v43) {
      goto LABEL_112;
    }
    goto LABEL_123;
  }

  __int128 v153 = v8;
  uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v11 ownerName]);
  id v25 = PKEqualObjects(v24, CKCurrentUserDefaultName);
  if (v25) {
    id v26 = 2LL;
  }
  else {
    id v26 = 3LL;
  }

  id v172 = 0LL;
  __int128 v173 = 2LL;
  __int128 v171 = 0LL;
  +[PKCloudStoreZone zoneValueForZoneName:outZoneType:outAccountIdentifier:altDSID:]( &OBJC_CLASS___PKCloudStoreZone,  "zoneValueForZoneName:outZoneType:outAccountIdentifier:altDSID:",  v12,  &v173,  &v172,  &v171);
  uint64_t v27 = v172;
  uint64_t v145 = v171;
  __int128 v156 = v27;
  if (!v27)
  {
    __int128 v141 = 0LL;
    id v8 = v153;
LABEL_37:
    uint64_t v51 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v51);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412546;
      __int128 v177 = v8;
      v178 = 2112;
      v179 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  OS_LOG_TYPE_DEFAULT,  "Cannot find the shared account cloud store zone for record %@ in zone %@",  buf,  0x16u);
    }

    __int128 v144 = 0LL;
    goto LABEL_40;
  }

  if (v25) {
    id v28 = 1LL;
  }
  else {
    id v28 = 2LL;
  }
  __int128 v141 = (void *)objc_claimAutoreleasedReturnValue( -[NSDictionary objectForKey:]( self->_sharedAccountCloudStoreByAccountIdentifier,  "objectForKey:",  v27));
  id v8 = v153;
  __int128 v144 = (void *)objc_claimAutoreleasedReturnValue([v141 sharedAccountZoneWithName:v12 access:v28]);
  if (!v144) {
    goto LABEL_37;
  }
  uint64_t v29 = PKLogFacilityTypeGetObject(9LL);
  uint64_t v30 = (os_log_s *)objc_claimAutoreleasedReturnValue(v29);
LABEL_40:
  log = v30;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    __int128 v52 = CKDatabaseScopeString(v26);
    __int128 v53 = (void *)objc_claimAutoreleasedReturnValue(v52);
    __int128 v54 = PKCloudStoreZoneTypeToString(v173);
    uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
    *(_DWORD *)id buf = 138544386;
    __int128 v177 = v53;
    v178 = 2112;
    v179 = v144;
    v180 = 2112;
    unsigned int v181 = v27;
    id v182 = 2112;
    id v183 = v145;
    v184 = 2114;
    __int16 v185 = v55;
    _os_log_impl( (void *)&_mh_execute_header,  log,  OS_LOG_TYPE_DEFAULT,  "The card record came from the database scope %{public}@ and the users current zone access is %@. The accountIdenti fierFromZoneName %@, altDSIDFromZoneName %@, zoneTypeFromZoneName %{public}@",  buf,  0x34u);

    uint64_t v30 = log;
  }

  if ((unint64_t)(v173 - 5) < 2)
  {
    uint64_t v67 = v145;
    goto LABEL_103;
  }

  if (v173 == 2)
  {
    uint64_t v136 = v13;
    __int128 v72 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
    loga = (os_log_t)objc_claimAutoreleasedReturnValue([v72 accountWithIdentifier:v156]);

    __int128 v73 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
    uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s associatedPassUniqueID](loga, "associatedPassUniqueID"));
    uint64_t v135 = v73;
    id v74 = (void *)objc_claimAutoreleasedReturnValue([v73 transactionSourceIdentifiersForPassUniqueIdentifier:v64]);
    uint64_t v43 = (id)objc_claimAutoreleasedReturnValue([v74 anyObject]);

    uint64_t v66 = loga;
    uint64_t v142 = 0LL;
    goto LABEL_102;
  }

  if (v173 != 4) {
    goto LABEL_106;
  }
  __int128 v56 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
  uint64_t v57 = (os_log_s *)objc_claimAutoreleasedReturnValue([v56 accountWithIdentifier:v27]);

  id v58 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
  __int16 v59 = v57;
  uint64_t v60 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s associatedPassUniqueID](v57, "associatedPassUniqueID"));
  uint64_t v61 = (void *)objc_claimAutoreleasedReturnValue([v58 transactionSourceIdentifiersForPassUniqueIdentifier:v60]);
  id v62 = (void *)objc_claimAutoreleasedReturnValue([v61 anyObject]);

  uint64_t v63 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
  uint64_t v136 = v13;
  uint64_t v64 = (void *)objc_claimAutoreleasedReturnValue([v63 transactionWithServiceIdentifier:v13 transactionSourceIdentifier:v62]);

  if (v64)
  {
    uint64_t v43 = v62;
    id v65 = PKCurrentUserAltDSID();
    uint64_t v142 = (void *)objc_claimAutoreleasedReturnValue(v65);
    uint64_t v135 = v43;
    uint64_t v30 = log;
    uint64_t v66 = v59;
    id v8 = v153;
    uint64_t v14 = v155;
    goto LABEL_102;
  }

  uint64_t v135 = v62;
  uint64_t v90 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](self, "dataSource"));
  __int128 v91 = (void *)objc_claimAutoreleasedReturnValue([v90 accountUsersForAccountWithIdentifier:v156]);

  __int128 v169 = 0u;
  __int128 v170 = 0u;
  id v167 = 0u;
  __int128 v168 = 0u;
  obuint64_t j = v91;
  v138 = [obj countByEnumeratingWithState:&v167 objects:v175 count:16];
  if (!v138)
  {
    uint64_t v142 = 0LL;
    uint64_t v43 = 0LL;
    id v8 = v153;
    uint64_t v30 = log;
    uint64_t v66 = v59;
    goto LABEL_101;
  }

  uint64_t v142 = 0LL;
  id v137 = *(void *)v168;
  id v8 = v153;
  v152 = v9;
  id v158 = v11;
  uint64_t v147 = v12;
  while (2)
  {
    uint64_t v92 = 0LL;
    do
    {
      if (*(void *)v168 != v137) {
        objc_enumerationMutation(obj);
      }
      id v140 = v92;
      __int128 v93 = *(void **)(*((void *)&v167 + 1) + 8 * v92);
      id v94 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](v160, "dataSource"));
      __int128 v95 = (void *)objc_claimAutoreleasedReturnValue([v93 altDSID]);
      __int128 v96 = (void *)objc_claimAutoreleasedReturnValue( [v94 primaryTransactionSourceIdentifierForAccountUserAltDSID:v95 accountIdentifier:v156]);

      id v97 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](v160, "dataSource"));
      id v98 = (void *)objc_claimAutoreleasedReturnValue([v97 transactionWithServiceIdentifier:v136 transactionSourceIdentifier:v96]);

      if (v98)
      {
        uint64_t v43 = v96;
        uint64_t v107 = objc_claimAutoreleasedReturnValue([v93 altDSID]);

        uint64_t v30 = log;
        uint64_t v66 = v59;
LABEL_100:

        uint64_t v142 = (void *)v107;
        id v9 = v152;
        self = v160;
        goto LABEL_101;
      }

      unsigned __int8 v139 = v96;
      __int128 v165 = 0u;
      __int128 v166 = 0u;
      __int128 v163 = 0u;
      __int128 v164 = 0u;
      v99 = (void *)objc_claimAutoreleasedReturnValue([v93 transactionSourceIdentifiers]);
      unsigned int v100 = [v99 countByEnumeratingWithState:&v163 objects:v174 count:16];
      uint64_t v66 = v59;
      if (v100)
      {
        id v101 = v100;
        __int16 v102 = *(void *)v164;
LABEL_78:
        uint64_t v103 = 0LL;
        while (1)
        {
          if (*(void *)v164 != v102) {
            objc_enumerationMutation(v99);
          }
          __int16 v104 = *(void **)(*((void *)&v163 + 1) + 8 * v103);
          uint64_t v105 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](v160, "dataSource"));
          id v106 = (void *)objc_claimAutoreleasedReturnValue( [v105 transactionWithServiceIdentifier:v136 transactionSourceIdentifier:v104]);

          if (v106) {
            break;
          }
          if (v101 == (id)++v103)
          {
            uint64_t v66 = v59;
            id v101 = [v99 countByEnumeratingWithState:&v163 objects:v174 count:16];
            uint64_t v12 = v147;
            if (v101) {
              goto LABEL_78;
            }
            goto LABEL_84;
          }
        }

        uint64_t v43 = v104;
        uint64_t v107 = objc_claimAutoreleasedReturnValue([v93 altDSID]);

        uint64_t v66 = v59;
        if (!v43)
        {
          uint64_t v142 = (void *)v107;
          id v8 = v153;
          os_signpost_id_t v11 = v158;
          uint64_t v12 = v147;
          goto LABEL_87;
        }

        id v8 = v153;
        os_signpost_id_t v11 = v158;
        uint64_t v12 = v147;
        uint64_t v30 = log;
        __int128 v96 = v139;
        goto LABEL_100;
      }

LABEL_123:
  uint64_t v23 = v43;
  os_signpost_id_t v10 = v159;
LABEL_124:

  return v23;
}

LABEL_32:
  if (!v62 || PKAltDSIDIsCurrentUser(v62))
  {
    unsigned __int8 v34 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](v58, "dataSource"));
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v34 passUniqueIdentifierWithAssociatedAccountIdentifier:v13]);

    BOOL v36 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](v58, "dataSource"));
    uint64_t v37 = v36;
    os_signpost_id_t v10 = v55;
    if (v35 || v59 != 3)
    {
      __int16 v38 = (void *)objc_claimAutoreleasedReturnValue([v36 transactionSourceIdentifiersForPassUniqueIdentifier:v35]);
      os_signpost_id_t v22 = (void *)objc_claimAutoreleasedReturnValue([v38 anyObject]);
    }

    else
    {
      os_signpost_id_t v22 = (void *)objc_claimAutoreleasedReturnValue([v36 transactionSourceIdentifierForAccountIdentifier:v13]);
    }

    goto LABEL_49;
  }

  os_signpost_id_t v10 = v55;
  self = v58;
  if ([v33 isSharedAccount] && (PKAltDSIDIsCurrentUser(v62) & 1) == 0)
  {
    uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue(-[PDCloudStoreContainer dataSource](v58, "dataSource"));
    os_signpost_id_t v22 = (void *)objc_claimAutoreleasedReturnValue([v35 transactionSourceIdentifierForAccountUserAltDSID:v62 accountIdentifier:v13]);
LABEL_49:

    self = v58;
    goto LABEL_50;
  }

  os_signpost_id_t v22 = 0LL;
LABEL_50:

LABEL_51:
  if (v22)
  {
    BOOL v45 = v9;
    goto LABEL_58;
  }

          os_signpost_id_t v11 = v38 + 1;
        }

        while ((id)(v38 + 1) != v37);
        uint64_t v37 = [v35 countByEnumeratingWithState:&v50 objects:v60 count:16];
      }

      while (v37);

      if (v10 != -1LL)
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v10));
        id v25 = (void *)objc_claimAutoreleasedReturnValue([v32 uniqueID]);
        -[NSMutableDictionary setObject:forKeyedSubscript:](v28, "setObject:forKeyedSubscript:", v9, v25);

LABEL_36:
      }

      id v7 = v34 + 1;
      id v5 = v31;
    }

    while ((id)(v34 + 1) != v33);
    id v33 = [obj countByEnumeratingWithState:&v54 objects:v61 count:16];
  }

  while (v33);
LABEL_39:

  id v26 = -[NSMutableDictionary copy](v28, "copy");
LABEL_41:

  return v26;
}
          }

          id v25 = [v22 countByEnumeratingWithState:&v44 objects:v53 count:16];
          if (!v25)
          {
LABEL_34:

            os_unfair_lock_unlock(lock);
            id v5 = v42;
            goto LABEL_38;
          }
        }
      }
    }
  }

  uint64_t v35 = PKLogFacilityTypeGetObject(0LL);
  BOOL v36 = (os_log_s *)objc_claimAutoreleasedReturnValue(v35);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v38 = (objc_class *)objc_opt_class(v5, v37);
    uint64_t v39 = NSStringFromClass(v38);
    id v40 = (os_log_s *)objc_claimAutoreleasedReturnValue(v39);
    *(_DWORD *)id buf = 138543362;
    uint64_t v55 = v40;
    _os_log_impl( (void *)&_mh_execute_header,  v36,  OS_LOG_TYPE_DEFAULT,  "PDNetworkTaskmanager: unexpected class detected while trying to unarchive tasks - %{public}@. The data will be discarded.",  buf,  0xCu);
  }

LABEL_38:
}
}

  return v28;
}
}

  if (v11 < 0) {
    uint64_t v19 = v11;
  }
  else {
    uint64_t v19 = v11 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v11);
  id v20 = _CocoaArrayWrapper.endIndex.getter(v19);
  swift_bridgeObjectRelease(v11);
  if (!v20) {
    goto LABEL_36;
  }
LABEL_15:
  if ((v11 & 0xC000000000000001LL) != 0)
  {
LABEL_37:
    uint64_t result = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v11);
    os_signpost_id_t v11 = result;
    goto LABEL_18;
  }

  if (!*(void *)((v11 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    __break(1u);
LABEL_39:
    if (v3 < 0) {
      uint64_t v21 = v3;
    }
    else {
      uint64_t v21 = v3 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v3);
    os_signpost_id_t v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    uint64_t result = swift_bridgeObjectRelease(v3);
    if (v22) {
      goto LABEL_20;
    }
    goto LABEL_43;
  }

  os_signpost_id_t v11 = *(void *)(v11 + 32);
  uint64_t result = swift_retain(v11);
LABEL_18:
  uint64_t v3 = *v12;
  if (*(void *)((v3 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_20:
    sub_100422DEC(0LL, 1LL);
    uint64_t v14 = *v9;
    os_log_s *v9 = v11;
    swift_endAccess(v24);
    swift_retain(v11);
    uint64_t result = swift_release(v14);
LABEL_26:
    *a3 = v11;
    return result;
  }

  swift_release(a1);
  uint64_t v37 = v83;
  v82[0] = (uint64_t)_swiftEmptyArrayStorage;
  __int16 v38 = *((void *)v81 + 7);
  __int128 v79 = v81 + 56;
  uint64_t v39 = 1LL << v81[32];
  id v40 = -1LL;
  if (v39 < 64) {
    id v40 = ~(-1LL << v39);
  }
  uint64_t v41 = v40 & v38;
  uint64_t v80 = (unint64_t)(v39 + 63) >> 6;
  swift_bridgeObjectRetain(v81);
  id v42 = 0LL;
  if (!v41) {
    goto LABEL_37;
  }
LABEL_35:
  uint64_t v43 = __clz(__rbit64(v41));
  v41 &= v41 - 1;
  for (uint64_t j = v43 | (v42 << 6); v37[2]; uint64_t j = __clz(__rbit64(v45)) + (v42 << 6))
  {
    __int128 v47 = (uint64_t *)(*((void *)v81 + 6) + 32 * j);
    uint64_t v48 = v47[3];
    __int128 v49 = v47[2];
    __int128 v50 = *v47;
    uint64_t v51 = v47[1];
    swift_bridgeObjectRetain(v51);
    swift_bridgeObjectRetain(v48);
    __int128 v52 = sub_10043729C(v50, v51, v49, v48);
    if ((v53 & 1) == 0)
    {
      swift_bridgeObjectRelease(v37);
      swift_release(v81);
      swift_bridgeObjectRelease(v48);
      swift_bridgeObjectRelease(v51);
      goto LABEL_65;
    }

    uint64_t v15 = (char *)*(id *)(v37[7] + 8 * v52);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v51);
    __int128 v54 = objc_allocWithZone(&OBJC_CLASS___PKAuxiliaryCapabilityRequirementKeyMaterialContent);
    a1 = (uint64_t *)objc_msgSend(v54, "init", v77);
    uint64_t v55 = [v15 identifier];
    [a1 setPublicKeyIdentifier:v55];

    __int128 v56 = (objc_class *)[v15 transactionKey];
    isa = v56;
    if (v56)
    {
      uint64_t v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v56);
      __int16 v59 = v58;

      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100421520(v57, v59);
    }

    [a1 setPublicKey:isa];

    uint64_t v60 = [v15 appletIdentifier];
    if (!v60) {
      goto LABEL_71;
    }
    uint64_t v61 = v60;
    id v62 = objc_msgSend(v60, "pk_decodeHexadecimal");

    if (v62)
    {
      uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v62);
      id v65 = v64;

      v66.super.isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100421520(v63, v65);
    }

    else
    {
      v66.super.isa = 0LL;
    }

    [a1 setApplicationIdentifier:v66.super.isa];

    isa = a1;
    a1 = v82;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(isa);
    uint64_t v68 = *(void *)((v82[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    uint64_t v67 = *(void *)((v82[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v68 >= v67 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1LL);
    }
    uint64_t v69 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v68, isa);
    specialized Array._endMutation()(v69);

    if (v41) {
      goto LABEL_35;
    }
LABEL_37:
    id v33 = __OFADD__(v42++, 1LL);
    if (v33) {
      goto LABEL_68;
    }
    if (v42 >= v80)
    {
LABEL_66:
      swift_bridgeObjectRelease(v37);
      swift_release(v81);
      id v70 = (void (*)(uint64_t, id))v78;
      __int128 v71 = v82[0];
      __int128 v72 = objc_allocWithZone(&OBJC_CLASS___PKAuxiliaryCapabilityRequirementKeyMaterial);
      sub_100424A90( 0LL,  (unint64_t *)&qword_100706FD0,  &OBJC_CLASS___PKAuxiliaryCapabilityRequirementKeyMaterialContent_ptr);
      __int128 v73 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v71);
      id v74 = [v72 initWithKeyMaterialContents:v73];

      uint64_t v75 = v74;
      v70(1LL, v74);

      return;
    }

    BOOL v45 = *(void *)&v79[8 * v42];
    if (!v45)
    {
      uint64_t v46 = v42 + 1;
      if (v42 + 1 >= v80) {
        goto LABEL_66;
      }
      BOOL v45 = *(void *)&v79[8 * v46];
      if (!v45)
      {
        uint64_t v46 = v42 + 2;
        if (v42 + 2 >= v80) {
          goto LABEL_66;
        }
        BOOL v45 = *(void *)&v79[8 * v46];
        if (!v45)
        {
          uint64_t v46 = v42 + 3;
          if (v42 + 3 >= v80) {
            goto LABEL_66;
          }
          BOOL v45 = *(void *)&v79[8 * v46];
          if (!v45)
          {
            while (1)
            {
              id v42 = v46 + 1;
              if (__OFADD__(v46, 1LL)) {
                goto LABEL_69;
              }
              if (v42 >= v80) {
                goto LABEL_66;
              }
              BOOL v45 = *(void *)&v79[8 * v42];
              ++v46;
              if (v45) {
                goto LABEL_47;
              }
            }
          }
        }
      }

      id v42 = v46;
    }

  swift_release(a1);
  uint64_t v39 = v95;
  v94[0] = (uint64_t)_swiftEmptyArrayStorage;
  id v40 = *((void *)v93 + 7);
  uint64_t v90 = v93 + 56;
  uint64_t v41 = 1LL << v93[32];
  id v42 = -1LL;
  if (v41 < 64) {
    id v42 = ~(-1LL << v41);
  }
  a2 = v42 & v40;
  __int128 v91 = (unint64_t)(v41 + 63) >> 6;
  swift_bridgeObjectRetain(v93);
  uint64_t v43 = 0LL;
  uint64_t v92 = v39;
  if (!a2) {
    goto LABEL_37;
  }
LABEL_35:
  id v44 = __clz(__rbit64(a2));
  a2 &= a2 - 1;
  for (uint64_t j = v44 | (v43 << 6); v39[2]; uint64_t j = __clz(__rbit64(v46)) + (v43 << 6))
  {
    uint64_t v48 = (uint64_t *)(*((void *)v93 + 6) + 32 * j);
    __int128 v49 = v48[3];
    __int128 v50 = v48[2];
    uint64_t v51 = *v48;
    __int128 v52 = v48[1];
    swift_bridgeObjectRetain(v52);
    swift_bridgeObjectRetain(v49);
    __int128 v53 = sub_1004372A0(v51, v52, v50, v49);
    if ((v54 & 1) == 0)
    {
      swift_bridgeObjectRelease(v39);
      swift_release(v93);
      swift_bridgeObjectRelease(v49);
      swift_bridgeObjectRelease(v52);
      goto LABEL_71;
    }

    a5 = (uint64_t)*(id *)(v39[7] + 8 * v53);
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v52);
    a1 = (uint64_t *)[objc_allocWithZone(PKAuxiliaryCapabilityRequirementKeyMaterialContent) init];
    uint64_t v55 = [(id)a5 identifier];
    [a1 setPublicKeyIdentifier:v55];

    if (v26)
    {
      id v65 = (objc_class *)[(id)a5 transactionKey];
      isa = v65;
      if (v65)
      {
        uint64_t v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v65);
        uint64_t v69 = v68;

        isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100421520(v67, v69);
      }

      [a1 setPublicKey:isa];

      id v70 = [(id)a5 appletIdentifier];
      if (!v70) {
        goto LABEL_78;
      }
      __int128 v71 = v70;
      __int128 v72 = objc_msgSend(v70, "pk_decodeHexadecimal");

      if (v72)
      {
        __int128 v73 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v72);
        uint64_t v75 = v74;

        v63.super.isa = Data._bridgeToObjectiveC()().super.isa;
        sub_100421520(v73, v75);
      }

      else
      {
        v63.super.isa = 0LL;
      }

      uint64_t v39 = v92;
    }

    else
    {
      __int128 v56 = [(id)a5 transactionKeyCertificateChain];
      [a1 setCertificateChain:v56];

      uint64_t v57 = [(id)a5 appletIdentifier];
      if (!v57) {
        goto LABEL_77;
      }
      id v58 = v57;
      __int16 v59 = objc_msgSend(v57, "pk_decodeHexadecimal");

      if (v59)
      {
        uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v59);
        id v62 = v61;

        v63.super.isa = Data._bridgeToObjectiveC()().super.isa;
        uint64_t v64 = v60;
        uint64_t v39 = v92;
        sub_100421520(v64, v62);
      }

      else
      {
        v63.super.isa = 0LL;
      }
    }

    [a1 setApplicationIdentifier:v63.super.isa];

    id v76 = a1;
    a1 = v94;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v76);
    __int128 v78 = *(void *)((v94[0] & 0xFFFFFFFFFFFFFF8LL) + 0x10);
    __int128 v77 = *(void *)((v94[0] & 0xFFFFFFFFFFFFFF8LL) + 0x18);
    if (v78 >= v77 >> 1) {
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1LL);
    }
    __int128 v79 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v78, v76);
    specialized Array._endMutation()(v79);

    if (a2) {
      goto LABEL_35;
    }
LABEL_37:
    uint64_t v35 = __OFADD__(v43++, 1LL);
    if (v35) {
      goto LABEL_74;
    }
    if (v43 >= v91)
    {
LABEL_72:
      swift_bridgeObjectRelease(v39);
      swift_release(v93);
      uint64_t v80 = (void (*)(uint64_t, id))v89;
      id v81 = v94[0];
      __int128 v82 = objc_allocWithZone(&OBJC_CLASS___PKAuxiliaryCapabilityRequirementKeyMaterial);
      sub_100424A90( 0LL,  (unint64_t *)&qword_100706FD0,  &OBJC_CLASS___PKAuxiliaryCapabilityRequirementKeyMaterialContent_ptr);
      __int128 v83 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v81);
      id v84 = [v82 initWithKeyMaterialContents:v83];

      __int16 v85 = v84;
      v80(1LL, v84);

      return;
    }

    uint64_t v46 = *(void *)&v90[8 * v43];
    if (!v46)
    {
      __int128 v47 = v43 + 1;
      if (v43 + 1 >= v91) {
        goto LABEL_72;
      }
      uint64_t v46 = *(void *)&v90[8 * v47];
      if (!v46)
      {
        __int128 v47 = v43 + 2;
        if (v43 + 2 >= v91) {
          goto LABEL_72;
        }
        uint64_t v46 = *(void *)&v90[8 * v47];
        if (!v46)
        {
          __int128 v47 = v43 + 3;
          if (v43 + 3 >= v91) {
            goto LABEL_72;
          }
          uint64_t v46 = *(void *)&v90[8 * v47];
          if (!v46)
          {
            while (1)
            {
              uint64_t v43 = v47 + 1;
              if (__OFADD__(v47, 1LL)) {
                goto LABEL_75;
              }
              if (v43 >= v91) {
                goto LABEL_72;
              }
              uint64_t v46 = *(void *)&v90[8 * v43];
              ++v47;
              if (v46) {
                goto LABEL_47;
              }
            }
          }
        }
      }

      uint64_t v43 = v47;
    }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1092LL,  0);
  __break(1u);
  return result;
}

LABEL_53:
  uint64_t v46 = (void *)objc_claimAutoreleasedReturnValue([v6 records]);
  BOOL v45 = (void *)objc_claimAutoreleasedReturnValue([v46 firstObject]);

  __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v45 recordID]);
  uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v45 recordType]);
  os_signpost_id_t v22 = (void *)objc_claimAutoreleasedReturnValue( -[PDApplePayCloudStoreContainer _transactionSourceIdentifierForTransactionRecordID:recordType:databaseIdentifier:]( self,  "_transactionSourceIdentifierForTransactionRecordID:recordType:databaseIdentifier:",  v47,  v48,  v7));

  if (!v22 && v45)
  {
    __int128 v49 = PKLogFacilityTypeGetObject(9LL);
    __int128 v50 = (os_log_s *)objc_claimAutoreleasedReturnValue(v49);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v45 recordID]);
      __int128 v52 = (void *)objc_claimAutoreleasedReturnValue([v51 recordName]);
      *(_DWORD *)id buf = 138412546;
      uint64_t v68 = v52;
      uint64_t v69 = 2112;
      id v70 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v50,  OS_LOG_TYPE_DEFAULT,  "Transaction source identifiers not found on device for record %@, accountIdentifier %@",  buf,  0x16u);
    }

    os_signpost_id_t v22 = 0LL;
  }

        id v7 = 0LL;
      }

      goto LABEL_54;
    case 5uLL:
      id v6 = v4;
      id v26 = [v6 subtype];
      if (v26 == (id)1)
      {
        id v40 = objc_alloc(&OBJC_CLASS___PDSharingLocalOnDeviceEndpoint);
        os_signpost_id_t v22 = (void *)objc_claimAutoreleasedReturnValue([v6 contraChannelTransportIdentifier]);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v6 transportIdentifier]);
        id v28 = v40;
        uint64_t v29 = v22;
        uint64_t v30 = v24;
        uint64_t v31 = 0LL;
      }

      else
      {
        if (v26)
        {
LABEL_32:
          id v7 = 0LL;
          goto LABEL_56;
        }

        uint64_t v27 = objc_alloc(&OBJC_CLASS___PDSharingLocalOnDeviceEndpoint);
        os_signpost_id_t v22 = (void *)objc_claimAutoreleasedReturnValue([v6 transportIdentifier]);
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([v6 contraChannelTransportIdentifier]);
        id v28 = v27;
        uint64_t v29 = v22;
        uint64_t v30 = v24;
        uint64_t v31 = 1LL;
      }

      uint64_t v41 = -[PDSharingLocalOnDeviceEndpoint initWithSourceTransportIdentifier:destinationTransportIdentifier:isSource:]( v28,  "initWithSourceTransportIdentifier:destinationTransportIdentifier:isSource:",  v29,  v30,  v31);
LABEL_46:
      id v7 = v41;
LABEL_54:

LABEL_55:
      goto LABEL_56;
    default:
      id v7 = 0LL;
      goto LABEL_57;
  }

  __int128 v53 = *(void *)(*(void *)(a1 + 48) + 8LL);
  if (*(_BYTE *)(v53 + 24))
  {
    __int128 v54 = sub_1002CD364(*(void *)(a1 + 40), @"payment_transaction", @"is_cloud_kit_archived");
    __int128 v53 = *(void *)(*(void *)(a1 + 48) + 8LL);
  }

  else
  {
    __int128 v54 = 0;
  }

  *(_BYTE *)(v53 + 24) = v54;
}

    if (v2 < 0) {
      uint64_t v31 = v2;
    }
    else {
      uint64_t v31 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    __int128 v32 = _CocoaArrayWrapper.endIndex.getter(v31);
    uint64_t v18 = (void *)swift_bridgeObjectRelease(v2);
    uint64_t v24 = v32 + v6;
    if (!__OFADD__(v32, v6)) {
      goto LABEL_27;
    }
LABEL_58:
    __break(1u);
  }

  id v33 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v33,  1046LL,  0);
  __break(1u);
  return result;
}

LABEL_58:
  return v22;
}

        goto LABEL_59;
      }

      if (v14) {
        goto LABEL_12;
      }
LABEL_53:
      __int128 v50 = PKLogFacilityTypeGetObject(23LL);
      uint64_t v51 = (os_log_s *)objc_claimAutoreleasedReturnValue(v50);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        __int128 v53 = 138412546;
        __int128 v54 = v6;
        uint64_t v55 = 2112;
        __int128 v56 = v9;
        _os_log_impl( (void *)&_mh_execute_header,  v51,  OS_LOG_TYPE_DEFAULT,  "Processing Not Permitted For Transaction: %@, Payment Application: %@",  (uint8_t *)&v53,  0x16u);
      }

LABEL_61:
      return;
    case 7uLL:
      __int16 v38 = -[__CFString requiresMerchantReprocessing](v6, "requiresMerchantReprocessing");
      uint64_t v39 = -[__CFString transactionType](v6, "transactionType");
      if (v38)
      {
        id v40 = self;
        uint64_t v41 = v6;
        id v42 = v7;
        uint64_t v43 = 1LL;
LABEL_60:
        -[PDPaymentTransactionProcessor _beginProcessingPaymentTransaction:forTransactionSourceIdentifier:skipLocation:]( v40,  "_beginProcessingPaymentTransaction:forTransactionSourceIdentifier:skipLocation:",  v41,  v42,  v43);
        goto LABEL_61;
      }

      if ((unint64_t)v39 <= 1)
      {
        id v44 = objc_claimAutoreleasedReturnValue(-[__CFString dpanIdentifier](v6, "dpanIdentifier"));
        if (!v44
          || (BOOL v45 = (void *)v44,
              uint64_t v46 = objc_loadWeakRetained((id *)&self->_dataSource),
              __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v46 paymentApplicationForDPANIdentifier:v45]),
              v46,
              v47,
              v45,
              v47))
        {
          id v26 = 1LL;
          goto LABEL_52;
        }
      }

      goto LABEL_53;
    default:
      goto LABEL_53;
  }

void sub_1000AC28C(id *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = a1[4];
    *(_DWORD *)id buf = 138412290;
    id v23 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Re-fetching account events with unknown servicing status. Event identifiers: %@",  buf,  0xCu);
  }

  id v5 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a1[5] containerManager]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 cloudStoreZonesByDatabaseIdentifierForItemType:5 action:2]);

  id v8 = (void *)objc_claimAutoreleasedReturnValue([a1[5] primaryRecordTypesForCloudStoreItemType:5]);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_1000AC478;
  v17[3] = &unk_10063EAC0;
  id v18 = v8;
  id v19 = v5;
  id v9 = a1[4];
  id v10 = a1[5];
  id v20 = v9;
  id v21 = v10;
  id v11 = v5;
  id v12 = v8;
  [v7 enumerateKeysAndObjectsUsingBlock:v17];
  id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_1000AC8E4;
  v15[3] = &unk_10063F848;
  id v16 = a1[6];
  id v14 = [v11 evaluateWithInput:v13 completion:v15];
}

void sub_1000AC478(uint64_t a1, uint64_t a2, void *a3)
{
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  __int128 v30 = 0u;
  obuint64_t j = a3;
  id v16 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
  if (v16)
  {
    uint64_t v15 = *(void *)v28;
    do
    {
      uint64_t v4 = 0LL;
      do
      {
        if (*(void *)v28 != v15) {
          objc_enumerationMutation(obj);
        }
        uint64_t v17 = v4;
        uint64_t v5 = *(void *)(*((void *)&v27 + 1) + 8 * v4);
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        __int128 v25 = 0u;
        __int128 v26 = 0u;
        id v6 = *(id *)(a1 + 32);
        id v7 = [v6 countByEnumeratingWithState:&v23 objects:v31 count:16];
        if (v7)
        {
          id v8 = v7;
          uint64_t v9 = *(void *)v24;
          do
          {
            id v10 = 0LL;
            do
            {
              if (*(void *)v24 != v9) {
                objc_enumerationMutation(v6);
              }
              uint64_t v11 = *(void *)(*((void *)&v23 + 1) + 8LL * (void)v10);
              v18[0] = _NSConcreteStackBlock;
              v18[1] = 3221225472LL;
              void v18[2] = sub_1000AC664;
              v18[3] = &unk_10063BAD8;
              id v12 = *(void **)(a1 + 40);
              id v19 = *(id *)(a1 + 48);
              uint64_t v20 = v5;
              uint64_t v13 = *(void *)(a1 + 56);
              uint64_t v21 = v11;
              uint64_t v22 = v13;
              [v12 addOperation:v18];

              id v10 = (char *)v10 + 1;
            }

            while (v8 != v10);
            id v8 = [v6 countByEnumeratingWithState:&v23 objects:v31 count:16];
          }

          while (v8);
        }

        uint64_t v4 = v17 + 1;
      }

      while ((id)(v17 + 1) != v16);
      id v16 = [obj countByEnumeratingWithState:&v27 objects:v32 count:16];
    }

    while (v16);
  }
}

void sub_1000AC664(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_1000AC84C;
  v21[3] = &unk_10063F7F8;
  id v8 = (void *)a1[4];
  void v21[4] = a1[5];
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "pk_setByApplyingBlock:", v21));
  uint64_t v22 = v9;
  id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v22, 1LL));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSPredicate predicateWithFormat:argumentArray:]( &OBJC_CLASS___NSPredicate,  "predicateWithFormat:argumentArray:",  @"recordID in %@",  v10));

  id v12 = -[CKQuery initWithRecordType:predicate:]( objc_alloc(&OBJC_CLASS___CKQuery),  "initWithRecordType:predicate:",  a1[6],  v11);
  uint64_t v13 = objc_alloc(&OBJC_CLASS___PDCloudStoreRecordsRequest);
  id v14 = -[PDCloudStoreRecordsRequest initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:]( v13,  "initWithRequestType:storeChanges:returnRecords:qualityOfService:groupName:groupNameSuffix:",  4LL,  1LL,  0LL,  9LL,  PKCloudStoreOperationGroupAccountServicingEventProcessing,  PKCloudStoreOperationGroupSuffixAccountServicingEventProcessing);
  -[PDCloudStoreRecordsRequest setCkQuery:](v14, "setCkQuery:", v12);
  -[PDCloudStoreRecordsRequest setCloudStoreZone:](v14, "setCloudStoreZone:", a1[5]);
  uint64_t v15 = (void *)a1[7];
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_1000AC8D0;
  v18[3] = &unk_10063F820;
  id v19 = v6;
  id v20 = v7;
  id v16 = v6;
  id v17 = v7;
  [v15 executeRecordsRequest:v14 completion:v18];
}

CKRecordID *sub_1000AC84C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[PKAccountEvent recordNameForEventIdentifier:]( &OBJC_CLASS___PKAccountEvent,  "recordNameForEventIdentifier:",  a2));
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) recordZone]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([v4 zoneID]);

  id v6 = -[CKRecordID initWithRecordName:zoneID:]( objc_alloc(&OBJC_CLASS___CKRecordID),  "initWithRecordName:zoneID:",  v3,  v5);
  return v6;
}

uint64_t sub_1000AC8D0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

uint64_t sub_1000AC8E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000AD1E0(uint64_t a1, uint64_t a2, void *a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_1000AD2E4;
  v6[3] = &unk_10063F870;
  uint64_t v5 = *(void **)(a1 + 40);
  void v6[4] = *(void *)(a1 + 32);
  id v7 = v5;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 64);
  id v11 = *(id *)(a1 + 72);
  id v12 = *(id *)(a1 + 80);
  id v13 = *(id *)(a1 + 88);
  id v14 = *(id *)(a1 + 96);
  [a3 enumerateKeysAndObjectsUsingBlock:v6];
}

void sub_1000AD2E4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v74 = 0u;
  __int128 v75 = 0u;
  __int128 v76 = 0u;
  __int128 v77 = 0u;
  id v7 = [v6 countByEnumeratingWithState:&v74 objects:v84 count:16];
  if (!v7) {
    goto LABEL_47;
  }
  id v8 = v7;
  id v9 = 0LL;
  id v10 = 0LL;
  uint64_t v11 = *(void *)v75;
  do
  {
    for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v75 != v11) {
        objc_enumerationMutation(v6);
      }
      id v13 = *(void **)(*((void *)&v74 + 1) + 8LL * (void)i);
      id v14 = (void *)objc_claimAutoreleasedReturnValue([v13 recordType]);
      if (!v10 && ([*(id *)(a1 + 32) _isAccountEventFromRecordType:v14] & 1) != 0)
      {
        id v10 = v13;
LABEL_12:
        id v15 = v13;
        goto LABEL_14;
      }

      if (v9) {
        goto LABEL_14;
      }
      if ([*(id *)(a1 + 32) _isAccountEventAssociatedObjectFromRecordType:v14])
      {
        id v9 = v13;
        goto LABEL_12;
      }

      id v9 = 0LL;
LABEL_14:
    }

    id v8 = [v6 countByEnumeratingWithState:&v74 objects:v84 count:16];
  }

  while (v8);
  if (!v10)
  {
    if (v9)
    {
      id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "pk_referenceForKey:", PKAccountEventReferenceFromAssociatedObject));
      __int128 v32 = (void *)objc_claimAutoreleasedReturnValue([v16 recordID]);
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      unsigned __int8 v34 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v35 = (void *)objc_claimAutoreleasedReturnValue([v9 recordType]);
        *(_DWORD *)id buf = 138412290;
        uint64_t v80 = v35;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Received a child account event by itself of type %@",  buf,  0xCu);
      }

      if (v16)
      {
        obja = v34;
        id v65 = v16;
        id v61 = v5;
        BOOL v36 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:*(void *)(a1 + 56)]);
        __int128 v66 = 0u;
        __int128 v67 = 0u;
        __int128 v68 = 0u;
        __int128 v69 = 0u;
        unsigned __int8 v34 = v36;
        id v37 = -[os_log_s countByEnumeratingWithState:objects:count:]( v34,  "countByEnumeratingWithState:objects:count:",  &v66,  v78,  16LL);
        if (v37)
        {
          id v38 = v37;
          uint64_t v39 = *(void *)v67;
LABEL_40:
          uint64_t v40 = 0LL;
          while (1)
          {
            if (*(void *)v67 != v39) {
              objc_enumerationMutation(v34);
            }
            uint64_t v41 = *(void **)(*((void *)&v66 + 1) + 8 * v40);
            id v42 = (void *)objc_claimAutoreleasedReturnValue([v41 recordID]);

            if (v38 == (id)++v40)
            {
              id v38 = -[os_log_s countByEnumeratingWithState:objects:count:]( v34,  "countByEnumeratingWithState:objects:count:",  &v66,  v78,  16LL);
              if (v38) {
                goto LABEL_40;
              }
              goto LABEL_46;
            }
          }

          id v49 = v41;
          uint64_t v43 = obja;
          if (os_log_type_enabled(obja, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id buf = 138412290;
            uint64_t v80 = v42;
            _os_log_impl( (void *)&_mh_execute_header,  obja,  OS_LOG_TYPE_DEFAULT,  "Found carried over parent record %@",  buf,  0xCu);
          }

          [*(id *)(a1 + 64) addObject:v49];
          id v5 = v61;
          id v16 = v65;
          if (v49) {
            goto LABEL_81;
          }
        }

        else
        {
LABEL_46:

          id v5 = v61;
          uint64_t v43 = obja;
          id v16 = v65;
        }

        if ([*(id *)(a1 + 72) useLastChangeToken])
        {
          __int128 v50 = (void *)objc_claimAutoreleasedReturnValue([v32 zoneID]);
          if (v50)
          {
            [*(id *)(a1 + 96) addObject:v32];
          }

          else
          {
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)id buf = 138412290;
              uint64_t v80 = v16;
              _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Cannot create a query for the parent record because a zone does not exist for the reference %@",  buf,  0xCu);
            }
          }
        }

        else
        {
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v51 = (void *)objc_claimAutoreleasedReturnValue([v9 recordID]);
            *(_DWORD *)id buf = 138412290;
            uint64_t v80 = v51;
            _os_log_impl( (void *)&_mh_execute_header,  v43,  OS_LOG_TYPE_DEFAULT,  "Adding child record to carry over %@",  buf,  0xCu);
          }

          [*(id *)(a1 + 88) addObject:v9];
        }

        id v49 = 0LL;
LABEL_81:
      }

      else if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v34,  OS_LOG_TYPE_DEFAULT,  "Missing reference on child record",  buf,  2u);
      }

      id v10 = 0LL;
      goto LABEL_83;
    }

LABEL_47:
    uint64_t v44 = PKLogFacilityTypeGetObject(9LL);
    id v16 = (void *)objc_claimAutoreleasedReturnValue(v44);
    if (os_log_type_enabled((os_log_t)v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v16,  OS_LOG_TYPE_DEFAULT,  "Received account records without parent or child record",  buf,  2u);
    }

    id v10 = 0LL;
    goto LABEL_50;
  }

  id v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "pk_encryptedStringForKey:", PKCloudTransactionAccountIdentifierKey));
  if ([*(id *)(a1 + 40) count]
    && ([*(id *)(a1 + 40) containsObject:v16] & 1) == 0)
  {
    uint64_t v45 = PKLogFacilityTypeGetObject(9LL);
    uint64_t v46 = (os_log_s *)objc_claimAutoreleasedReturnValue(v45);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v47 = (void *)objc_claimAutoreleasedReturnValue([v10 recordID]);
      uint64_t v48 = (void *)objc_claimAutoreleasedReturnValue([v47 recordName]);
      *(_DWORD *)id buf = 138412290;
      uint64_t v80 = v48;
      _os_log_impl( (void *)&_mh_execute_header,  v46,  OS_LOG_TYPE_DEFAULT,  "Skipping acount event %@ because it is from a different pass",  buf,  0xCu);
    }

    goto LABEL_83;
  }

  if (!v9)
  {
    uint64_t v17 = PKLogFacilityTypeGetObject(9LL);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(v17);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Need to fetch child records for account event",  buf,  2u);
    }

    id v16 = (void *)objc_claimAutoreleasedReturnValue([v10 recordID]);
    id v19 = (void *)objc_claimAutoreleasedReturnValue([v16 zoneID]);
    if (v19)
    {
      id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _recordTypeForAccountEventRecord:v10]);
      uint64_t v21 = -[CKReference initWithRecordID:action:]( objc_alloc(&OBJC_CLASS___CKReference),  "initWithRecordID:action:",  v16,  0LL);
      uint64_t v22 = v21;
      if (v20)
      {
        unsigned int oslog = v18;
        uint64_t v57 = v21;
        id v58 = v20;
        __int16 v59 = v19;
        uint64_t v64 = v16;
        id v60 = v5;
        __int128 v23 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) objectForKey:*(void *)(a1 + 56)]);
        __int128 v70 = 0u;
        __int128 v71 = 0u;
        __int128 v72 = 0u;
        __int128 v73 = 0u;
        obuint64_t j = v23;
        id v24 = [obj countByEnumeratingWithState:&v70 objects:v83 count:16];
        if (v24)
        {
          id v25 = v24;
          uint64_t v26 = *(void *)v71;
          uint64_t v27 = PKAccountEventReferenceFromAssociatedObject;
LABEL_26:
          uint64_t v28 = 0LL;
          while (1)
          {
            if (*(void *)v71 != v26) {
              objc_enumerationMutation(obj);
            }
            __int128 v29 = *(void **)(*((void *)&v70 + 1) + 8 * v28);
            __int128 v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "pk_referenceForKey:", v27));
            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue([v30 recordID]);
            if (v30)
            {
            }

            if (v25 == (id)++v28)
            {
              id v25 = [obj countByEnumeratingWithState:&v70 objects:v83 count:16];
              if (v25) {
                goto LABEL_26;
              }
              goto LABEL_33;
            }
          }

          if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)id buf = 138412290;
            uint64_t v80 = v31;
            _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "Found carried over child record %@",  buf,  0xCu);
          }

          id v52 = v29;
          [*(id *)(a1 + 64) addObject:v52];

          id v19 = v59;
          id v5 = v60;
          id v16 = v64;
          uint64_t v22 = v57;
          id v20 = v58;
          if (v52) {
            goto LABEL_90;
          }
        }

        else
        {
LABEL_33:

          id v19 = v59;
          id v5 = v60;
          id v16 = v64;
          uint64_t v22 = v57;
          id v20 = v58;
        }

        __int128 v53 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 72) ckQuery]);
        if (v53)
        {

          goto LABEL_86;
        }

        if ([*(id *)(a1 + 72) requestType] == (id)5)
        {
LABEL_86:
          __int128 v54 = (NSMutableArray *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) objectForKey:v20]);
          if (!v54)
          {
            __int128 v54 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
            [*(id *)(a1 + 80) setObject:v54 forKey:v20];
          }

          -[NSMutableArray addObject:](v54, "addObject:", v22);
        }

        else
        {
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v55 = (void *)objc_claimAutoreleasedReturnValue([v10 recordID]);
            *(_DWORD *)id buf = 138412290;
            uint64_t v80 = v55;
            _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "Adding parent record to carry over %@",  buf,  0xCu);
          }

          [*(id *)(a1 + 88) addObject:v10];
        }

        id v52 = 0LL;
LABEL_90:

        id v18 = (os_log_s *)obj;
      }

      else if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id buf = 138412546;
        uint64_t v80 = v16;
        __int16 v81 = 2112;
        __int128 v82 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Error: cannot find a record type for parent record %@ and reference %@",  buf,  0x16u);
      }
    }

    else
    {
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id buf = 138412290;
        uint64_t v80 = v10;
        _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Cannot create a query for a child record because a zone does not exist for parent record %@",  buf,  0xCu);
      }

      id v20 = v18;
    }

LABEL_50:
    id v9 = 0LL;
LABEL_83:
  }
}
}

        goto LABEL_48;
      }

      id v37 = -[PKPaymentTransactionArchiveLocation initWithType:archived:cloudStoreZone:]( objc_alloc(&OBJC_CLASS___PKPaymentTransactionArchiveLocation),  "initWithType:archived:cloudStoreZone:",  0LL,  v58,  v57);
LABEL_40:
      if (v37)
      {
        uint64_t v45 = oslog;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v46 = PKPaymentTransactionArchiveLocationTypeToString(-[PKPaymentTransactionArchiveLocation type](v37, "type"));
          __int128 v47 = (void *)objc_claimAutoreleasedReturnValue(v46);
          uint64_t v48 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue([v21 identifier]);
          *(_DWORD *)id buf = 138412802;
          *(void *)&uint8_t buf[4] = v37;
          *(_WORD *)&buf[12] = 2114;
          *(void *)&buf[14] = v47;
          *(_WORD *)&buf[22] = 2114;
          __int128 v79 = v48;
          _os_log_impl( (void *)&_mh_execute_header,  oslog,  OS_LOG_TYPE_DEFAULT,  "Adding transaction archive location %@ of type %{public}@ for transaction identifier %{public}@",  buf,  0x20u);

          uint64_t v45 = oslog;
        }

        id v49 = (os_log_s *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](&OBJC_CLASS___NSSet, "setWithObject:", v37));
        __int128 v50 =  +[PaymentTransactionArchiveLocation insertOrUpdateTransactionArchiveLocations:forArchivePID:inDatabase:]( PaymentTransactionArchiveLocation,  "insertOrUpdateTransactionArchiveLocations:forArchivePID:inDatabase:",  v49,  [v62 persistentID],  *(void *)(a1 + 40));
        goto LABEL_47;
      }

  _Block_release(a2);
  __break(1u);
}

    uint64_t v41 = (v45 - 1) & v45;
  }

  swift_bridgeObjectRelease(v37);
  swift_release(v81);
LABEL_65:
  swift_bridgeObjectRelease(v82[0]);
  v78(2LL, 0LL);
}

    a2 = (v46 - 1) & v46;
  }

  swift_bridgeObjectRelease(v39);
  swift_release(v93);
LABEL_71:
  swift_bridgeObjectRelease(v94[0]);
  v89(2LL, 0LL);
}

void sub_1000ADC54(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  uint64_t v21 = *(void *)(a1 + 40);
  id v9 = [*(id *)(a1 + 48) copy];
  id v22 = v9;
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v22,  &v21,  1LL));
  uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) groupName]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) groupNameSuffix]);
  id v13 = [*(id *)(a1 + 56) qualityOfService];
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_1000ADDD4;
  v17[3] = &unk_10063F8C0;
  id v14 = *(id *)(a1 + 64);
  id v19 = v6;
  id v20 = v7;
  id v18 = v14;
  id v15 = v6;
  id v16 = v7;
  [v8 fetchRecordsWithRecordIDsByDatabaseIdentifier:v10 operationGroupName:v11 operationGroupNameSuffix:v12 qualityOfService:v13 completion:v17];
}

void sub_1000ADDD4(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000ADE54;
  v4[3] = &unk_10063A468;
  id v5 = *(id *)(a1 + 32);
  [a2 enumerateKeysAndObjectsUsingBlock:v4];
  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

id sub_1000ADE54(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addRecords:");
}

void sub_1000ADE5C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void **)(a1 + 32);
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) groupName]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) groupNameSuffix]);
  id v10 = [*(id *)(a1 + 48) qualityOfService];
  uint64_t v11 = *(void *)(a1 + 56);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) containerManager]);
  id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 databaseForIdentifier:*(void *)(a1 + 64)]);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_1000ADFD8;
  v21[3] = &unk_10063F8E8;
  id v22 = *(id *)(a1 + 72);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_1000AE078;
  v18[3] = &unk_10063C3B0;
  id v19 = v6;
  id v20 = v7;
  id v14 = v6;
  id v15 = v7;
  [v17 fetchRecordsWithQuery:v16 batchLimit:0 operationGroupName:v8 operationGroupNameSuffix:v9 qualityOfService:v10 zone:v11 containerDatabase :v13 batchHandler:v21 completion:v18];
}

void sub_1000ADFD8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_1000AE070;
  v6[3] = &unk_10063A468;
  id v7 = *(id *)(a1 + 32);
  [a2 enumerateKeysAndObjectsUsingBlock:v6];
  if (v5) {
    v5[2](v5, 1LL);
  }
}

id sub_1000AE070(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "addRecords:");
}

uint64_t sub_1000AE078(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1000AE08C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(35LL);
  uint64_t v3 = (os_log_s *)(id)objc_claimAutoreleasedReturnValue(Object);
  os_signpost_id_t v4 = os_signpost_id_make_with_pointer(v3, *(const void **)(a1 + 32));
  if (v4 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    os_signpost_id_t v5 = v4;
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)id v10 = 0;
      _os_signpost_emit_with_name_impl( (void *)&_mh_execute_header,  v3,  OS_SIGNPOST_INTERVAL_END,  v5,  "cloudstore:fetchMissingAccountEventRecords",  "",  v10,  2u);
    }
  }

  uint64_t v6 = *(void *)(a1 + 56);
  if ([*(id *)(a1 + 40) count])
  {
    id v7 = *(void **)(a1 + 40);
    uint64_t v11 = *(void *)(a1 + 48);
    id v8 = [v7 copy];
    id v12 = v8;
    id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v12,  &v11,  1LL));
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v9);
  }

  else
  {
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0LL);
  }

void sub_1000AE660(uint64_t a1, uint64_t a2, void *a3)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000AE718;
  v7[3] = &unk_10063E9F8;
  id v8 = *(id *)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 64);
  id v9 = v5;
  uint64_t v12 = v6;
  id v10 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  [a3 enumerateKeysAndObjectsUsingBlock:v7];
}

void sub_1000AE718(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_autoreleasePoolPush();
  id v8 = [[PKCloudStoreRecord alloc] initWithRecords:v6];
  id v9 = -[PKAccountEvent initWithCloudStoreCoder:]( objc_alloc(&OBJC_CLASS___PKAccountEvent),  "initWithCloudStoreCoder:",  v8);
  id v10 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountEvent altDSID](v9, "altDSID"));
  id v11 = [v10 length];

  if (!v11) {
    -[PKAccountEvent setAltDSID:](v9, "setAltDSID:", *(void *)(a1 + 32));
  }
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountEvent items](v9, "items"));
  id v13 = [v12 count];

  if (v13)
  {
    [*(id *)(a1 + 40) addObject:v9];
    -[PKAccountEvent addUpdateReasons:](v9, "addUpdateReasons:", *(void *)(a1 + 64));
    id v14 = objc_alloc(&OBJC_CLASS___PKCloudRecordAccountEvent);
    id v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", v6));
    id v16 = [v14 initWithRecords:v15];

    [v16 setEvent:v9];
    [*(id *)(a1 + 48) addCloudRecord:v16 forContainerDatabaseIdentifier:*(void *)(a1 + 56)];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      id v19 = (void *)objc_claimAutoreleasedReturnValue(-[PKAccountEvent description](v9, "description"));
      int v20 = 138412290;
      uint64_t v21 = v19;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "Event record does not have any items: %@",  (uint8_t *)&v20,  0xCu);
    }
  }

  objc_autoreleasePoolPop(v7);
}

id sub_1000AE908(id a1, PKAccountEvent *a2)
{
  return -[PKAccountEvent identifier](a2, "identifier");
}

uint64_t sub_1000AE910(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1000AEBAC(uint64_t a1, uint64_t a2, void *a3)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472LL;
  v8[2] = sub_1000AEC5C;
  v8[3] = &unk_10063F9A0;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v7 = *(void **)(a1 + 48);
  id v9 = v5;
  uint64_t v10 = v6;
  id v11 = v7;
  id v12 = *(id *)(a1 + 56);
  id v13 = *(id *)(a1 + 64);
  [a3 enumerateKeysAndObjectsUsingBlock:v8];
}

void sub_1000AEC5C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_autoreleasePoolPush();
  dispatch_group_enter(*(dispatch_group_t *)(a1 + 32));
  id v8 = [[PKCloudStoreRecord alloc] initWithRecords:v6];
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void **)(a1 + 48);
  id v11 = *(void **)(v9 + 256);
  v14[0] = _NSConcreteStackBlock;
  id v14[2] = sub_1000AEDA0;
  v14[3] = &unk_10063F978;
  v14[1] = 3221225472LL;
  id v15 = v8;
  uint64_t v16 = v9;
  id v17 = v10;
  id v12 = v6;
  id v18 = v12;
  id v19 = *(id *)(a1 + 56);
  id v20 = *(id *)(a1 + 64);
  id v21 = *(id *)(a1 + 32);
  id v13 = v8;
  [v11 defaultAccountForFeature:4 completion:v14];

  objc_autoreleasePoolPop(v7);
}

void sub_1000AEDA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  os_signpost_id_t v4 = (void *)objc_claimAutoreleasedReturnValue([v3 accountBaseURL]);

  if (v4)
  {
    [v3 updateWithCloudStoreRecord:*(void *)(a1 + 32)];
    [*(id *)(a1 + 40) _insertAccountBalanceUpdateNotificationIfNecessaryForAccount:v3 record:*(void *)(a1 + 32)];
    [*(id *)(a1 + 48) addObject:v3];
  }

  else
  {
    id v5 = -[PKAccount initWithCloudStoreCoder:]( objc_alloc(&OBJC_CLASS___PKAccount),  "initWithCloudStoreCoder:",  *(void *)(a1 + 32));
    if (v5)
    {
      [*(id *)(a1 + 48) addObject:v5];
      id v6 = objc_alloc(&OBJC_CLASS___PKCloudRecordAccount);
      id v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:", *(void *)(a1 + 56)));
      id v8 = [v6 initWithRecords:v7];

      [v8 setAccount:v5];
      [*(id *)(a1 + 64) addCloudRecord:v8 forContainerDatabaseIdentifier:*(void *)(a1 + 72)];
      uint64_t Object = PKLogFacilityTypeGetObject(9LL);
      uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 descriptionWithItem:1]);
        int v12 = 138412290;
        id v13 = v11;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Parsed account cloud record: %@",  (uint8_t *)&v12,  0xCu);
      }
    }
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 80));
}

uint64_t sub_1000AEF40(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64))
  {
    id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 56));
    if (WeakRetained)
    {
      __int128 v11 = 0u;
      __int128 v12 = 0u;
      __int128 v9 = 0u;
      __int128 v10 = 0u;
      id v3 = *(id *)(a1 + 32);
      id v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v4)
      {
        id v5 = v4;
        uint64_t v6 = *(void *)v10;
        do
        {
          id v7 = 0LL;
          do
          {
            if (*(void *)v10 != v6) {
              objc_enumerationMutation(v3);
            }
            objc_msgSend( WeakRetained[32],  "insertOrReplaceAccount:extended:deleteSensitiveData:completion:",  *(void *)(*((void *)&v9 + 1) + 8 * (void)v7),  1,  0,  0,  (void)v9);
            id v7 = (char *)v7 + 1;
          }

          while (v5 != v7);
          id v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
        }

        while (v5);
      }
    }
  }

  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(a1 + 40));
  }
  return result;
}

void sub_1000B027C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1000B03C4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKSharedAccountCloudStoreZone);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_1000B06CC(id a1, PKSharedAccountCloudStoreZone *a2, id a3)
{
}

void sub_1000B06D4(id a1, PKSharedAccountCloudStoreZone *a2, id a3)
{
}

void sub_1000B06DC(id a1, PKSharedAccountCloudStoreZone *a2, id a3)
{
  id v4 = a2;
  -[PKSharedAccountCloudStoreZone setAccountType:](v4, "setAccountType:", [a3 integerValue]);
}

void sub_1000B0720(id a1, PKSharedAccountCloudStoreZone *a2, id a3)
{
  id v4 = a2;
  -[PKSharedAccountCloudStoreZone setAccess:](v4, "setAccess:", [a3 integerValue]);
}

void sub_1000B0764(id a1, PKSharedAccountCloudStoreZone *a2, id a3)
{
  id v4 = a2;
  -[PKSharedAccountCloudStoreZone setMode:](v4, "setMode:", [a3 integerValue]);
}

void sub_1000B07A8(id a1, PKSharedAccountCloudStoreZone *a2, id a3)
{
}

void sub_1000B07B0(id a1, PKSharedAccountCloudStoreZone *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    id v6 = (PKSharedAccountCloudStoreZone *)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](&OBJC_CLASS___NSSet, "setWithArray:"));
    -[PKSharedAccountCloudStoreZone setSharedUsersAltDSIDs:](v4, "setSharedUsersAltDSIDs:", v5);
  }

  else
  {
    id v6 = a2;
    -[PKSharedAccountCloudStoreZone setSharedUsersAltDSIDs:](v6, "setSharedUsersAltDSIDs:", 0LL);
  }
}

void sub_1000B298C(id *a1, void *a2, uint64_t a3)
{
  id v9 = a2;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue( [a1[4] _updatePassTileDescriptor:v9 groupDescriptor:0 idx:a3 previousStates:a1[5] visitedIdentifiers:a1[6]]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v9 metadata]);
  unsigned int v7 = [v6 isGroupType];

  if (v7)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v9 childDescriptors]);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000B2A98;
    v10[3] = &unk_10063FD30;
    void v10[4] = a1[4];
    id v11 = v5;
    id v12 = a1[5];
    id v13 = a1[6];
    [v8 enumerateObjectsUsingBlock:v10];
  }
}

id sub_1000B2A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return  [*(id *)(a1 + 32) _updatePassTileDescriptor:a2 groupDescriptor:*(void *)(a1 + 40) idx:a3 previousStates:*(void *)(a1 + 48) visitedIdentifiers:*(void *)(a1 + 56)];
}

void sub_1000B3C64( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
}

uint64_t sub_1000B3C7C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000B3C8C(uint64_t a1)
{
}

void sub_1000B3C94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) _dynamicStateInDatabase:*(void *)(a1 + 32) forPassPID:a2]);
  uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1000B3E6C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  if (*a4)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    id v6 = *(void **)(a1 + 48);
    id v8 = *a4;
    id v9 = (id)objc_claimAutoreleasedReturnValue([v6 _dynamicStateInDatabase:v7 forPassPID:a2]);
    [*(id *)(a1 + 32) setObject:v9 forKeyedSubscript:v8];
  }

void sub_1000B41CC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v15 = a3;
  uint64_t v7 = objc_autoreleasePoolPush();
  id v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  if (([*(id *)(a1 + 32) containsObject:v8] & 1) == 0)
  {
    [*(id *)(a1 + 32) addObject:v8];
    id v9 = *(void **)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 40);
    id v11 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___Pass),  "initWithPersistentID:inDatabase:",  a2,  v10);
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 _realPassInDatabase:v10 withProperties:v15 values:a4 fromPass:v11]);

    if (v12 && (!*(_BYTE *)(a1 + 72) || ![v12 passType]))
    {
      [*(id *)(a1 + 48) addObject:v12];
      if (*(void *)(a1 + 56))
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 uniqueID]);
        if (v13)
        {
          id v14 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 64) _dynamicStateInDatabase:*(void *)(a1 + 40) forPassPID:a2]);
          [*(id *)(a1 + 56) setObject:v14 forKeyedSubscript:v13];
        }
      }
    }
  }

  objc_autoreleasePoolPop(v7);
}

void sub_1000B4420( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000B4438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = objc_claimAutoreleasedReturnValue( +[Pass _realPassInDatabase:withProperties:values:fromPass:]( &OBJC_CLASS___Pass,  "_realPassInDatabase:withProperties:values:fromPass:",  *(void *)(*(void *)(a1 + 32) + 8LL),  a2,  a3));
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;
}

id *sub_1000B469C(id *result, uint64_t a2, uint64_t a3, void *a4)
{
  if (*a4) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

id *sub_1000B483C(id *result, uint64_t a2, void *a3)
{
  if (*a3) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

id *sub_1000B4A34(id *result, uint64_t a2, void *a3)
{
  if (*a3) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

id *sub_1000B4BD8(id *result, uint64_t a2, void *a3)
{
  if (*a3) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

id *sub_1000B4D78(id *result, uint64_t a2, void *a3)
{
  if (*a3) {
    return (id *)objc_msgSend(result[4], "addObject:");
  }
  return result;
}

uint64_t sub_1000B4E90(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 56) queryWithDatabase:*(void *)(a1 + 32) predicate:*(void *)(a1 + 40)]);
  v8[0] = @"unique_id";
  v8[1] = @"pass_type.identifier";
  v8[2] = @"serial_number";
  v8[3] = @"manifest_hash";
  void v8[4] = @"template";
  void v8[5] = @"organization_name";
  v8[6] = @"grouping_id";
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", v8, 7LL));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000B4FD0;
  v5[3] = &unk_100639E18;
  id v6 = *(id *)(a1 + 32);
  id v7 = *(id *)(a1 + 48);
  [v2 enumeratePersistentIDsAndProperties:v3 usingBlock:v5];

  return 1LL;
}

void sub_1000B4FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)a4;
  if (*(void *)a4)
  {
    id v9 = *(void **)(a4 + 8);
    id v8 = *(void **)(a4 + 16);
    uint64_t v10 = *(void **)(a4 + 32);
    id v11 = *(id *)(a4 + 24);
    id v12 = v8;
    id v13 = v9;
    id v21 = v4;
    id v14 = [v10 integerValue];
    id v15 = *(void **)(a4 + 40);
    id v16 = *(id *)(a4 + 48);
    id v17 = v15;
    id v18 = objc_alloc_init(&OBJC_CLASS___PDCandidateRelevantPass);
    -[PDCandidateRelevantPass setUniqueIdentifier:](v18, "setUniqueIdentifier:", v21);
    -[PDCandidateRelevantPass setPassTypeIdentifier:](v18, "setPassTypeIdentifier:", v13);
    -[PDCandidateRelevantPass setSerialNumber:](v18, "setSerialNumber:", v12);
    -[PDCandidateRelevantPass setManifestHash:](v18, "setManifestHash:", v11);
    -[PDCandidateRelevantPass setStyle:](v18, "setStyle:", v14);
    -[PDCandidateRelevantPass setOrganizationName:](v18, "setOrganizationName:", v17);
    -[PDCandidateRelevantPass setGroupingIdentifier:](v18, "setGroupingIdentifier:", v16);
    id v19 = (void *)objc_claimAutoreleasedReturnValue( +[PassRelevancyDates relevancyDatesForPassPID:inDatabase:]( &OBJC_CLASS___PassRelevancyDates,  "relevancyDatesForPassPID:inDatabase:",  a2,  *(void *)(a1 + 32)));
    -[PDCandidateRelevantPass setRelevantDates:](v18, "setRelevantDates:", v19);

    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[Beacon beaconsInDatabase:forPassPID:]( &OBJC_CLASS___Beacon,  "beaconsInDatabase:forPassPID:",  *(void *)(a1 + 32),  a2));
    -[PDCandidateRelevantPass setEmbeddedBeacons:](v18, "setEmbeddedBeacons:", v20);

    -[PDCandidateRelevantPass setHasLocations:]( v18,  "setHasLocations:",  +[Location hasLocationsInDatabase:forPassPID:]( &OBJC_CLASS___Location,  "hasLocationsInDatabase:forPassPID:",  *(void *)(a1 + 32),  a2));
    [*(id *)(a1 + 40) addObject:v18];
  }

id sub_1000B5270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___Pass,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

id sub_1000B53D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___Pass,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

id sub_1000B5C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___Pass,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1000B5DB8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_1000B5DE4(uint64_t a1, void *a2, uint64_t a3)
{
  id v8 = a2;
  id v5 = *(id *)a3;
  if (*(void *)a3) {
    id v5 = [v5 integerValue];
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 24LL) = v5;
  id v6 = *(void **)(a3 + 8);
  if (v6)
  {
    [v6 doubleValue];
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSDate dateWithTimeIntervalSinceReferenceDate:]( &OBJC_CLASS___NSDate,  "dateWithTimeIntervalSinceReferenceDate:"));
  }

  else
  {
    id v7 = 0LL;
  }

  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL), v7);
  if (v6) {
}
  }

void sub_1000B60F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PDPassUpdateContext);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1000B6274(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000B636C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v8 = objc_alloc(&OBJC_CLASS___Pass);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  uint64_t v11 = -[SQLiteEntity initWithPersistentID:inDatabase:](v8, "initWithPersistentID:inDatabase:", a2, v9);

  uint64_t v10 = objc_alloc_init(&OBJC_CLASS___PDPassGroupingProfile);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 40) toObject:v10 withProperties:v7 values:a4];

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000B650C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_alloc(&OBJC_CLASS___Pass);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  id v6 = -[SQLiteEntity initWithPersistentID:inDatabase:](v4, "initWithPersistentID:inDatabase:", a2, v5);

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

uint64_t sub_1000B6690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, void, id, uint64_t))(*(void *)(a1 + 32) + 16))( *(void *)(a1 + 32),  *(void *)a3,  [*(id *)(a3 + 8) unsignedIntegerValue],  a5);
}

void sub_1000B67F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5 = *(void **)(a3 + 8);
  id v6 = *(id *)a3;
  [v5 unsignedIntegerValue];
  [*(id *)(a3 + 16) integerValue];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000B904C(id a1, PKPass *a2, id a3)
{
}

void sub_1000B9054(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  [v5 setTransactionSourceIdentifier:v4];
}

void sub_1000B90A0(id a1, PKPass *a2, id a3)
{
}

void sub_1000B90A8(id a1, PKPass *a2, id a3)
{
}

void sub_1000B90B0(id a1, PKPass *a2, id a3)
{
}

void sub_1000B90B8(id a1, PKPass *a2, id a3)
{
}

void sub_1000B90C0(id a1, PKPass *a2, id a3)
{
}

void sub_1000B90C8(id a1, PKPass *a2, id a3)
{
}

void sub_1000B90D0(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPass setExpirationDate:](v4, "setExpirationDate:", v5);
}

void sub_1000B911C(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setVoided:](v4, "setVoided:", [a3 BOOLValue]);
}

void sub_1000B9160(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setWebServiceURL:](v4, "setWebServiceURL:", v5);
}

void sub_1000B91AC(id a1, PKPass *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    id v5 = (PKPass *)objc_claimAutoreleasedReturnValue( +[NSJSONSerialization JSONObjectWithData:options:error:]( &OBJC_CLASS___NSJSONSerialization,  "JSONObjectWithData:options:error:",  a3,  0LL,  0LL));
    -[PKPass setUserInfo:](v4, "setUserInfo:");
  }

  else
  {
    id v5 = a2;
    -[PKPass setUserInfo:](v5, "setUserInfo:", 0LL);
  }
}

void sub_1000B9230(id a1, PKPass *a2, id a3)
{
}

void sub_1000B9238(id a1, PKPass *a2, id a3)
{
}

void sub_1000B9240(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setShareCount:](v4, "setShareCount:", [a3 integerValue]);
}

void sub_1000B9284(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setSharingMethod:](v4, "setSharingMethod:", [a3 integerValue]);
}

void sub_1000B92C8(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setSharingURL:](v4, "setSharingURL:", v5);
}

void sub_1000B9314(id a1, PKPass *a2, id a3)
{
}

void sub_1000B931C(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPass setIngestedDate:](v4, "setIngestedDate:", v5);
}

void sub_1000B9368(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPass setSigningDate:](v4, "setSigningDate:", v5);
}

void sub_1000B93B4(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPass setModifiedDate:](v4, "setModifiedDate:", v5);
}

void sub_1000B9400(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setRevoked:](v4, "setRevoked:", [a3 BOOLValue]);
}

void sub_1000B9444(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setHasStoredValue:](v4, "setHasStoredValue:", [a3 BOOLValue]);
}

void sub_1000B9488(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setLiveRenderType:](v4, "setLiveRenderType:", PKPassLiveRenderTypeFromString(a3));
}

void sub_1000B94CC(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setHomeKeyLiveRenderType:](v4, "setHomeKeyLiveRenderType:", PKPassHomeKeyLiveRenderTypeFromString(a3));
}

void sub_1000B9510(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setSupportsCategoryVisualization:](v4, "setSupportsCategoryVisualization:", [a3 BOOLValue]);
}

void sub_1000B9554(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setLiveRenderingRequiresEnablement:]( v4,  "setLiveRenderingRequiresEnablement:",  [a3 BOOLValue]);
}

void sub_1000B9598(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setMuteReadyForUseNotification:](v4, "setMuteReadyForUseNotification:", [a3 BOOLValue]);
}

void sub_1000B95DC(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setPassType:](v4, "setPassType:", [a3 integerValue]);
}

void sub_1000B9620(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  id v5 = [v4 integerValue];

  [v6 setCardType:v5];
}

void sub_1000B967C(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  [v5 setPrimaryAccountIdentifier:v4];
}

void sub_1000B96C8(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  [v5 setPrimaryAccountNumberSuffix:v4];
}

void sub_1000B9714(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  [v5 setSanitizedPrimaryAccountNumber:v4];
}

void sub_1000B9760(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  [v5 setSanitizedPrimaryAccountName:v4];
}

void sub_1000B97AC(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  id v5 = [v4 BOOLValue];

  [v6 setSupportsDPANNotifications:v5];
}

void sub_1000B9808(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  id v5 = [v4 BOOLValue];

  [v6 setSupportsFPANNotifications:v5];
}

void sub_1000B9864(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  id v5 = [v4 BOOLValue];

  [v6 setSupportsDefaultCardSelection:v5];
}

void sub_1000B98C0(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  id v5 = [v4 BOOLValue];

  [v6 setShellPass:v5];
}

void sub_1000B991C(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  id v5 = [v4 BOOLValue];

  [v6 setSupportsSerialNumberBasedProvisioning:v5];
}

void sub_1000B9978(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  id v5 = [v4 BOOLValue];

  [v6 setRequiresTransferSerialNumberBasedProvisioning:v5];
}

void sub_1000B99D4(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  id v5 = [v4 BOOLValue];

  [v6 setHasAssociatedPeerPaymentAccount:v5];
}

void sub_1000B9A30(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  [v5 setAssociatedAccountServiceAccountIdentifier:v4];
}

void sub_1000B9A7C(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  id v5 = [v4 unsignedIntegerValue];

  [v6 setContactlessActivationGroupingType:v5];
}

void sub_1000B9AD8(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  id v5 = [v4 BOOLValue];

  [v6 setCobranded:v5];
}

void sub_1000B9B34(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  [v5 setIssuerCountryCode:v4];
}

void sub_1000B9B80(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  [v5 setIssuerAdministrativeAreaCode:v4];
}

void sub_1000B9BCC(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  [v5 setIdentityAccountKeyIdentifier:v4];
}

void sub_1000B9C18(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  [v5 setPartnerAccountIdentifier:v4];
}

void sub_1000B9C64(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setIsCloudKitArchived:](v4, "setIsCloudKitArchived:", [a3 BOOLValue]);
}

void sub_1000B9CA8(id a1, PKPass *a2, id a3)
{
}

void sub_1000B9CB0(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  -[PKPass setIsCloudKitSecurelyArchived:](v4, "setIsCloudKitSecurelyArchived:", [a3 BOOLValue]);
}

void sub_1000B9CF4(id a1, PKPass *a2, id a3)
{
}

void sub_1000B9CFC(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v5 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  [v5 setShippingAddressSeed:v4];
}

void sub_1000B9D48(id a1, PKPass *a2, id a3)
{
  id v4 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue(-[PKPass paymentPass](a2, "paymentPass"));
  id v5 = (void *)_DateForSQLValue(v4);

  [v6 setOriginalProvisioningDate:v5];
}

void sub_1000B9DA8(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setTransferURL:](v4, "setTransferURL:", v5);
}

void sub_1000B9DF4(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setSellURL:](v4, "setSellURL:", v5);
}

void sub_1000B9E40(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setBagPolicyURL:](v4, "setBagPolicyURL:", v5);
}

void sub_1000B9E8C(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setOrderFoodURL:](v4, "setOrderFoodURL:", v5);
}

void sub_1000B9ED8(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setTransitInformationURL:](v4, "setTransitInformationURL:", v5);
}

void sub_1000B9F24(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setParkingInformationURL:](v4, "setParkingInformationURL:", v5);
}

void sub_1000B9F70(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setDirectionsInformationURL:](v4, "setDirectionsInformationURL:", v5);
}

void sub_1000B9FBC(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setMerchandiseURL:](v4, "setMerchandiseURL:", v5);
}

void sub_1000BA008(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setAccessibilityURL:](v4, "setAccessibilityURL:", v5);
}

void sub_1000BA054(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setPurchaseParkingURL:](v4, "setPurchaseParkingURL:", v5);
}

void sub_1000BA0A0(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setPartnerAddOnURL:](v4, "setPartnerAddOnURL:", v5);
}

void sub_1000BA0EC(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setContactVenuePhoneNumber:](v4, "setContactVenuePhoneNumber:", v5);
}

void sub_1000BA138(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setContactVenueEmail:](v4, "setContactVenueEmail:", v5);
}

void sub_1000BA184(id a1, PKPass *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKPass setContactVenueWebsite:](v4, "setContactVenueWebsite:", v5);
}

void sub_1000BA350(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  -[PKPassDisplayProfile setPassStyle:](v4, "setPassStyle:", [a3 integerValue]);
}

void sub_1000BA394(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_ColorForSQLValue(a3);
  -[PKPassDisplayProfile setBackgroundColor:](v4, "setBackgroundColor:", v5);
}

void sub_1000BA3E0(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_ColorForSQLValue(a3);
  -[PKPassDisplayProfile setSecondaryBackgroundColor:](v4, "setSecondaryBackgroundColor:", v5);
}

void sub_1000BA42C(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_ColorForSQLValue(a3);
  -[PKPassDisplayProfile setForegroundColor:](v4, "setForegroundColor:", v5);
}

void sub_1000BA478(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_ColorForSQLValue(a3);
  -[PKPassDisplayProfile setLabelColor:](v4, "setLabelColor:", v5);
}

void sub_1000BA4C4(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_ColorForSQLValue(a3);
  -[PKPassDisplayProfile setStripColor:](v4, "setStripColor:", v5);
}

void sub_1000BA510(id a1, PKPassDisplayProfile *a2, id a3)
{
}

void sub_1000BA518(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  -[PKPassDisplayProfile setTallCode:](v4, "setTallCode:", [a3 BOOLValue]);
}

void sub_1000BA55C(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  -[PKPassDisplayProfile setHasBackgroundImage:](v4, "setHasBackgroundImage:", [a3 BOOLValue]);
}

void sub_1000BA5A0(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  -[PKPassDisplayProfile setHasStripImage:](v4, "setHasStripImage:", [a3 BOOLValue]);
}

void sub_1000BA5E4(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  -[PKPassDisplayProfile setSupportsAutomaticForegroundVibrancy:]( v4,  "setSupportsAutomaticForegroundVibrancy:",  [a3 BOOLValue]);
}

void sub_1000BA628(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  -[PKPassDisplayProfile setSupportsAutomaticLabelVibrancy:]( v4,  "setSupportsAutomaticLabelVibrancy:",  [a3 BOOLValue]);
}

void sub_1000BA66C(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  -[PKPassDisplayProfile setSuppressesHeaderDarkening:]( v4,  "setSuppressesHeaderDarkening:",  [a3 BOOLValue]);
}

void sub_1000BA6B0(id a1, PKPassDisplayProfile *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_ColorForSQLValue(a3);
  -[PKPassDisplayProfile setFooterBackgroundColor:](v4, "setFooterBackgroundColor:", v5);
}

void sub_1000BA7EC(id a1, PDPassUpdateContext *a2, id a3)
{
}

void sub_1000BA7F4(id a1, PDPassUpdateContext *a2, id a3)
{
}

void sub_1000BA7FC(id a1, PDPassUpdateContext *a2, id a3)
{
}

void sub_1000BA804(id a1, PDPassUpdateContext *a2, id a3)
{
}

void sub_1000BA80C(id a1, PDPassUpdateContext *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDPassUpdateContext setLastModifiedDate:](v4, "setLastModifiedDate:", v5);
}

void sub_1000BA858(id a1, PDPassUpdateContext *a2, id a3)
{
  id v4 = a2;
  -[PDPassUpdateContext setLastModifiedSource:](v4, "setLastModifiedSource:", [a3 integerValue]);
}

void sub_1000BA89C(id a1, PDPassUpdateContext *a2, id a3)
{
}

void sub_1000BA96C(id a1, PDPassGroupingProfile *a2, id a3)
{
}

void sub_1000BA974(id a1, PDPassGroupingProfile *a2, id a3)
{
}

void sub_1000BA97C(id a1, PDPassGroupingProfile *a2, id a3)
{
  id v4 = a2;
  -[PDPassGroupingProfile setPassStyle:](v4, "setPassStyle:", [a3 integerValue]);
}

void sub_1000BA9C0(id a1, PDPassGroupingProfile *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PDPassGroupingProfile setIngestedDate:](v4, "setIngestedDate:", v5);
}

void sub_1000BAA0C(id a1, PDPassGroupingProfile *a2, id a3)
{
  -[PDPassGroupingProfile setNFCEnabled:](a2, "setNFCEnabled:", a3 != 0LL);
}

void sub_1000BB5FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKPassCredentialShare);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) safelyAddObject:v7];
}

void sub_1000BB750(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1000BBA44(id a1, PKPassCredentialShare *a2, id a3)
{
}

void sub_1000BBA4C(id a1, PKPassCredentialShare *a2, id a3)
{
}

void sub_1000BBA54(id a1, PKPassCredentialShare *a2, id a3)
{
  id v4 = a2;
  -[PKPassCredentialShare setTargetDevice:](v4, "setTargetDevice:", PKPassCredentialShareTargetDeviceFromString(a3));
}

void sub_1000BBA98(id a1, PKPassCredentialShare *a2, id a3)
{
  id v4 = a2;
  -[PKPassCredentialShare setStatus:](v4, "setStatus:", PKShareStatusFromString(a3));
}

void sub_1000BBF34(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKAccountPromotionCompletionStep);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1000BC570(id a1, PKAccountPromotionCompletionStep *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPromotionCompletionStep setIndex:](v4, "setIndex:", [a3 integerValue]);
}

void sub_1000BC5B4(id a1, PKAccountPromotionCompletionStep *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPromotionCompletionStep setProgressType:](v4, "setProgressType:", [a3 integerValue]);
}

void sub_1000BC5F8(id a1, PKAccountPromotionCompletionStep *a2, id a3)
{
}

void sub_1000BC600(id a1, PKAccountPromotionCompletionStep *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAccountPromotionCompletionStep setEndValue:](v4, "setEndValue:", v6);
}

void sub_1000BC650(id a1, PKAccountPromotionCompletionStep *a2, id a3)
{
  id v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKAccountPromotionCompletionStep setCurrentValue:](v4, "setCurrentValue:", v6);
}

void sub_1000BC6A0(id a1, PKAccountPromotionCompletionStep *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPromotionCompletionStep setCompleted:](v4, "setCompleted:", [a3 BOOLValue]);
}

void sub_1000BC7C0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

id PKPaymentPassBalanceLabelDictionary(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 balanceFields]);
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v22 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v25 = 0u;
  obuint64_t j = v1;
  id v3 = [obj countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v17 = *(void *)v23;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
        id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 foreignReferenceIdentifiers]);
        __int128 v18 = 0u;
        __int128 v19 = 0u;
        __int128 v20 = 0u;
        __int128 v21 = 0u;
        id v8 = [v7 countByEnumeratingWithState:&v18 objects:v26 count:16];
        if (v8)
        {
          id v9 = v8;
          uint64_t v10 = *(void *)v19;
          do
          {
            for (uint64_t j = 0LL; j != v9; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v19 != v10) {
                objc_enumerationMutation(v7);
              }
              uint64_t v12 = *(void *)(*((void *)&v18 + 1) + 8LL * (void)j);
              uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v6 label]);
              -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v13, v12);
            }

            id v9 = [v7 countByEnumeratingWithState:&v18 objects:v26 count:16];
          }

          while (v9);
        }
      }

      id v4 = [obj countByEnumeratingWithState:&v22 objects:v27 count:16];
    }

    while (v4);
  }

  id v14 = -[NSMutableDictionary copy](v2, "copy");
  return v14;
}

id PKPaymentPassPlanLabelDictionary(void *a1)
{
  uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 transitCommutePlans]);
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  obuint64_t j = v1;
  id v19 = [obj countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v19)
  {
    uint64_t v18 = *(void *)v26;
    do
    {
      for (uint64_t i = 0LL; i != v19; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v26 != v18) {
          objc_enumerationMutation(obj);
        }
        id v4 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
        uint64_t v5 = objc_claimAutoreleasedReturnValue([v4 identifier]);
        uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 titleText]);
        __int128 v20 = (void *)v5;
        -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v6, v5);

        id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 foreignReferenceIdentifiers]);
        __int128 v21 = 0u;
        __int128 v22 = 0u;
        __int128 v23 = 0u;
        __int128 v24 = 0u;
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 allObjects]);
        id v9 = [v8 countByEnumeratingWithState:&v21 objects:v29 count:16];
        if (v9)
        {
          id v10 = v9;
          uint64_t v11 = *(void *)v22;
          do
          {
            for (uint64_t j = 0LL; j != v10; uint64_t j = (char *)j + 1)
            {
              if (*(void *)v22 != v11) {
                objc_enumerationMutation(v8);
              }
              uint64_t v13 = *(void *)(*((void *)&v21 + 1) + 8LL * (void)j);
              id v14 = (void *)objc_claimAutoreleasedReturnValue([v4 titleText]);
              -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v14, v13);
            }

            id v10 = [v8 countByEnumeratingWithState:&v21 objects:v29 count:16];
          }

          while (v10);
        }
      }

      id v19 = [obj countByEnumeratingWithState:&v25 objects:v30 count:16];
    }

    while (v19);
  }

  id v15 = -[NSMutableDictionary copy](v2, "copy");
  return v15;
}

id PKPaymentPassUnitDictionary(void *a1)
{
  id v1 = a1;
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  uint64_t v18 = v1;
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v1 transitCommutePlans]);
  __int128 v19 = 0u;
  __int128 v20 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v4 = [v3 countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v20;
    uint64_t v7 = PKTransitCommutePlanGenericCountPlanAmountRemainingKey;
    do
    {
      for (uint64_t i = 0LL; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v3);
        }
        id v9 = *(void **)(*((void *)&v19 + 1) + 8LL * (void)i);
        if (([v9 properties] & 4) != 0)
        {
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 passFieldForKey:v7]);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 foreignReferenceIdentifiers]);
          if ([v11 count] == (id)1)
          {
            uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue([v11 anyObject]);
            id v13 = [v10 unitType];
            if (v13 != (id)-1LL)
            {
              id v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", v13));
              -[NSMutableDictionary setObject:forKeyedSubscript:](v2, "setObject:forKeyedSubscript:", v14, v12);
            }
          }

          else
          {
            uint64_t Object = PKLogFacilityTypeGetObject(0LL);
            uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)id buf = 138543362;
              __int128 v24 = v11;
              _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Commute plans cannot have multiple identifiers. Identifiers: %{public}@",  buf,  0xCu);
            }
          }
        }
      }

      id v5 = [v3 countByEnumeratingWithState:&v19 objects:v25 count:16];
    }

    while (v5);
  }

  id v16 = -[NSMutableDictionary copy](v2, "copy");

  return v16;
}

void sub_1000BD540(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___PDTransitStateFetchRequest);
  -[PDTransitStateFetchRequest setPassUniqueIdentifier:](v2, "setPassUniqueIdentifier:", *(void *)(a1 + 40));
  -[PDTransitStateFetchRequest setSecureElementIdentifier:](v2, "setSecureElementIdentifier:", *(void *)(a1 + 48));
  -[PDTransitStateFetchRequest setPaymentApplicationIdentifier:]( v2,  "setPaymentApplicationIdentifier:",  *(void *)(a1 + 56));
  [*(id *)(a1 + 64) _queueTransitStateFetchRequest:v2];
}

void sub_1000BD70C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (!v2
    || (LOBYTE(v6) = 0,
        [*(id *)(a1 + 48) _ingestAppletStateHistory:v2 withTransactionDate:*(void *)(a1 + 56) forceTransactionGeneration:1 recoverMissingTransactions:0 forPayment Application:*(void *)(a1 + 64) withPassUniqueIdentifier:*(void *)(a1 + 72) skipQueuedRequestSanitization:v6 expressTransactionState:*(void *)(a1 + 80)],  (id v3 = *(void **)(a1 + 40)) == 0)
    || [v3 isBlacklisted])
  {
    uint64_t v7 = objc_alloc_init(&OBJC_CLASS___PDTransitStateFetchRequest);
    -[PDTransitStateFetchRequest setPassUniqueIdentifier:](v7, "setPassUniqueIdentifier:", *(void *)(a1 + 72));
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) secureElementIdentifier]);
    -[PDTransitStateFetchRequest setSecureElementIdentifier:](v7, "setSecureElementIdentifier:", v4);

    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) applicationIdentifier]);
    -[PDTransitStateFetchRequest setPaymentApplicationIdentifier:](v7, "setPaymentApplicationIdentifier:", v5);

    if (!*(void *)(a1 + 40))
    {
      -[PDTransitStateFetchRequest setForceTransactionGeneration:](v7, "setForceTransactionGeneration:", 1LL);
      -[PDTransitStateFetchRequest setTransactionDate:](v7, "setTransactionDate:", *(void *)(a1 + 56));
      -[PDTransitStateFetchRequest setExpressState:](v7, "setExpressState:", *(void *)(a1 + 80));
    }

    [*(id *)(a1 + 48) _queueTransitStateFetchRequest:v7];
  }

void sub_1000BD930(uint64_t a1)
{
  LOBYTE(v4) = 0;
  [*(id *)(a1 + 40) _ingestAppletStateHistory:*(void *)(a1 + 48) withTransactionDate:*(void *)(a1 + 56) forceTransactionGeneration:0 recoverMissingTransactions:0 forPaymentApplic ation:*(void *)(a1 + 64) withPassUniqueIdentifier:*(void *)(a1 + 72) skipQueuedRequestSanitization:v4 expressTransactionState:0];
  if ([*(id *)(a1 + 48) isBlacklisted])
  {
    id v5 = objc_alloc_init(&OBJC_CLASS___PDTransitStateFetchRequest);
    -[PDTransitStateFetchRequest setPassUniqueIdentifier:](v5, "setPassUniqueIdentifier:", *(void *)(a1 + 72));
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) secureElementIdentifier]);
    -[PDTransitStateFetchRequest setSecureElementIdentifier:](v5, "setSecureElementIdentifier:", v2);

    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) applicationIdentifier]);
    -[PDTransitStateFetchRequest setPaymentApplicationIdentifier:](v5, "setPaymentApplicationIdentifier:", v3);

    -[PDTransitStateFetchRequest setTransactionDate:](v5, "setTransactionDate:", *(void *)(a1 + 56));
    [*(id *)(a1 + 40) _queueTransitStateFetchRequest:v5];
  }

id sub_1000BDDA0(uint64_t a1, void *a2)
{
  id result = [a2 appletStateDirty];
  if ((_DWORD)result) {
    return _[*(id *)(a1 + 32) _notifyIssuerAppletStateDirtyWithPassID:*(void *)(a1 + 40) forPaymentApplication:*(void *)(a1 + 48)];
  }
  return result;
}

void sub_1000BDDDC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v6 needsStationProcessing]) {
    [*(id *)(a1 + 32) _resolveStationCodesForAppletState:v6 paymentApplication:*(void *)(a1 + 40) passUniqueIdentifier:*(void *)(a1 + 48)];
  }
  id v7 = PDDefaultQueue();
  id v8 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v7);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000BDEAC;
  block[3] = &unk_100639350;
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(void **)(a1 + 40);
  id v13 = v5;
  uint64_t v14 = v9;
  id v15 = v10;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_1000BDEAC(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v10 + 1) + 8LL * (void)v6);
        id v8 = *(void **)(*(void *)(a1 + 40) + 32LL);
        uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "transactionSourceIdentifier", (void)v10));
        [v8 processPaymentTransaction:v7 forTransactionSourceIdentifier:v9];

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }
}

id sub_1000BDFCC(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) isEqual:a2];
}

void sub_1000BE0AC(void *a1)
{
  id v2 = (id)objc_claimAutoreleasedReturnValue( [*(id *)(a1[4] + 8) transitStateWithPassUniqueIdentifier:a1[5] paymentApplication:a1[6]]);
  (*(void (**)(void))(a1[7] + 16LL))();
}

void sub_1000BE4B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    id v6 = v3;
    char v5 = PKEqualObjects(v3, *(void *)(a1 + 32));
    id v4 = v6;
    if ((v5 & 1) == 0)
    {
      [*(id *)(a1 + 40) addObject:v6];
      id v4 = v6;
    }
  }
}

void sub_1000BE50C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6 && objc_msgSend(v6, "_mapkit_underlyingGEOError") != (id)-8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(12LL);
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v21 = *(void **)(a1 + 56);
      int v22 = 138412546;
      __int128 v23 = v7;
      __int16 v24 = 2112;
      id v25 = v21;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "An Error Occurred While Performing Stations Update (%@): %@",  (uint8_t *)&v22,  0x16u);
    }
  }

  else
  {
    id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue([v5 mapItems]);
    id v9 = -[os_log_s count](v8, "count");
    uint64_t v10 = PKLogFacilityTypeGetObject(12LL);
    __int128 v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v12 = *(void **)(a1 + 64);
      __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) applicationIdentifier]);
      int v22 = 134218498;
      __int128 v23 = v12;
      __int16 v24 = 2048;
      id v25 = v9;
      __int16 v26 = 2112;
      __int128 v27 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Stations Update Response: (%lu, %lu), Application: %@",  (uint8_t *)&v22,  0x20u);
    }

    uint64_t v14 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    if (-[os_log_s count](v8, "count"))
    {
      unint64_t v15 = 0LL;
      do
      {
        id v16 = (void *)objc_claimAutoreleasedReturnValue(-[os_log_s objectAtIndexedSubscript:](v8, "objectAtIndexedSubscript:", v15));
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v16 _externalTransitStationCode]);
        uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 name]);
        __int128 v19 = v18;
        if (v17 && [v18 length]) {
          -[NSMutableDictionary setObject:forKeyedSubscript:](v14, "setObject:forKeyedSubscript:", v19, v17);
        }

        ++v15;
      }

      while (v15 < (unint64_t)-[os_log_s count](v8, "count"));
    }

    [*(id *)(*(void *)(a1 + 40) + 8) updateTransitAppletStateWithStationNames:v14 forPaymentApplication:*(void *)(a1 + 32) withPassUniqueIdentifier:*(void *)(a1 + 48)];
  }
}

void sub_1000BE8F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  id v4 = *(void **)(v2 + 8);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(v2 + 24) secureElementIdentifiers]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 passWithPaymentApplicationIdentifier:v3 secureElementIdentifiers:v5]);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v6 paymentPass]);

  if (v7)
  {
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    __int128 v22 = 0u;
    __int128 v23 = 0u;
    id v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "devicePaymentApplications", 0));
    id v9 = [v8 countByEnumeratingWithState:&v22 objects:v28 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v23;
      while (2)
      {
        for (uint64_t i = 0LL; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v23 != v10) {
            objc_enumerationMutation(v8);
          }
          __int128 v12 = *(void **)(*((void *)&v22 + 1) + 8LL * (void)i);
          uint64_t v13 = *(void *)(a1 + 48);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 applicationIdentifier]);
          LODWORD(v13) = PKEqualObjects(v13, v14);

          if ((_DWORD)v13)
          {
            id v9 = v12;
            goto LABEL_12;
          }
        }

        id v9 = [v8 countByEnumeratingWithState:&v22 objects:v28 count:16];
        if (v9) {
          continue;
        }
        break;
      }
    }

void sub_1000BEBB4(int8x16_t *a1, void *a2)
{
  id v3 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_1000BECDC;
  void v11[3] = &unk_10063C6F8;
  uint64_t v7 = objc_alloc_init(&OBJC_CLASS___NSMutableSet);
  __int128 v12 = v7;
  [v3 enumerateObjectsUsingBlock:v11];

  if (-[NSMutableSet count](v7, "count"))
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[2].i64[1] + 8) passesOfType:1]);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000BED20;
    v8[3] = &unk_100640DD0;
    id v9 = v7;
    int8x16_t v6 = a1[2];
    id v5 = (id)v6.i64[0];
    int8x16_t v10 = vextq_s8(v6, v6, 8uLL);
    [v4 enumerateObjectsUsingBlock:v8];
  }
}

void sub_1000BECDC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue([a2 passUniqueIdentifier]);
  [v2 addObject:v3];
}

void sub_1000BED20(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 paymentPass]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 uniqueID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 devicePrimaryPaymentApplication]);
  unsigned int v6 = [*(id *)(a1 + 32) containsObject:v4];
  else {
    char v7 = [v5 supportsSuica] ^ 1;
  }
  unsigned int v8 = [v3 isTransitPass];
  if (v4 && v8 && ((v6 ^ 1) & 1) == 0 && (v7 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(0LL);
    int8x16_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138412290;
      __int128 v21 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Recovering missed transactions for express transit pass with unique identifier: %@",  buf,  0xCu);
    }

    __int128 v11 = *(void **)(a1 + 48);
    __int128 v12 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 48LL);
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 3221225472LL;
    id v15[2] = sub_1000BEECC;
    v15[3] = &unk_10063B060;
    id v16 = v11;
    id v17 = v4;
    id v13 = v5;
    uint64_t v14 = *(void *)(a1 + 40);
    id v18 = v13;
    uint64_t v19 = v14;
    dispatch_async(v12, v15);
  }
}

void sub_1000BEECC(uint64_t a1)
{
  id v4 = objc_alloc_init(&OBJC_CLASS___PDTransitStateFetchRequest);
  -[PDTransitStateFetchRequest setPassUniqueIdentifier:](v4, "setPassUniqueIdentifier:", *(void *)(a1 + 40));
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) secureElementIdentifier]);
  -[PDTransitStateFetchRequest setSecureElementIdentifier:](v4, "setSecureElementIdentifier:", v2);

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) applicationIdentifier]);
  -[PDTransitStateFetchRequest setPaymentApplicationIdentifier:](v4, "setPaymentApplicationIdentifier:", v3);

  -[PDTransitStateFetchRequest setRecoverMissingTransactions:](v4, "setRecoverMissingTransactions:", 1LL);
  [*(id *)(a1 + 56) _queueTransitStateFetchRequest:v4];
}

void sub_1000BF060(uint64_t a1)
{
  __int128 v21 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v22 = [*(id *)(a1 + 40) mutableCopy];
  __int128 v30 = 0u;
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v2 = *(id *)(a1 + 48);
  id v3 = [v2 countByEnumeratingWithState:&v30 objects:v35 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v31;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v31 != v5) {
          objc_enumerationMutation(v2);
        }
        char v7 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
        if (PKPaymentApplicationStateIsPersonalized([v7 state])
          && [v7 supportsTransit])
        {
          unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 applicationIdentifier]);
          id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 secureElementIdentifier]);
          v27[0] = _NSConcreteStackBlock;
          v27[1] = 3221225472LL;
          v27[2] = sub_1000BF340;
          v27[3] = &unk_100640E20;
          id v10 = v8;
          id v28 = v10;
          id v11 = v9;
          id v29 = v11;
          __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([v22 objectsPassingTest:v27]);
          [v22 minusSet:v12];
          id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 anyObject]);
          uint64_t v14 = v13;
          if (!v13 || !PKPaymentApplicationStateIsPersonalized([v13 state]))
          {
            unint64_t v15 = objc_alloc_init(&OBJC_CLASS___PDTransitStateFetchRequest);
            -[PDTransitStateFetchRequest setPassUniqueIdentifier:]( v15,  "setPassUniqueIdentifier:",  *(void *)(a1 + 56));
            -[PDTransitStateFetchRequest setSecureElementIdentifier:](v15, "setSecureElementIdentifier:", v11);
            -[PDTransitStateFetchRequest setPaymentApplicationIdentifier:](v15, "setPaymentApplicationIdentifier:", v10);
            -[NSMutableArray addObject:](v21, "addObject:", v15);
          }
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v30 objects:v35 count:16];
    }

    while (v4);
  }

  __int128 v25 = 0u;
  __int128 v26 = 0u;
  __int128 v23 = 0u;
  __int128 v24 = 0u;
  id v16 = v21;
  id v17 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v16,  "countByEnumeratingWithState:objects:count:",  &v23,  v34,  16LL);
  if (v17)
  {
    id v18 = v17;
    uint64_t v19 = *(void *)v24;
    do
    {
      for (uint64_t j = 0LL; j != v18; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v24 != v19) {
          objc_enumerationMutation(v16);
        }
        [*(id *)(a1 + 64) _queueTransitStateFetchRequest:*(void *)(*((void *)&v23 + 1) + 8 * (void)j)];
      }

      id v18 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v16,  "countByEnumeratingWithState:objects:count:",  &v23,  v34,  16LL);
    }

    while (v18);
  }
}

uint64_t sub_1000BF340(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5 = a2;
  unsigned int v6 = (void *)objc_claimAutoreleasedReturnValue([v5 applicationIdentifier]);
  if (([v6 isEqualToString:*(void *)(a1 + 32)] & 1) == 0)
  {

    goto LABEL_5;
  }

  char v7 = (void *)objc_claimAutoreleasedReturnValue([v5 secureElementIdentifier]);
  unsigned int v8 = [v7 isEqualToString:*(void *)(a1 + 40)];

  if (!v8)
  {
LABEL_5:
    uint64_t v9 = 0LL;
    goto LABEL_6;
  }

  uint64_t v9 = 1LL;
  *a3 = 1;
LABEL_6:

  return v9;
}

void sub_1000BF4F8(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 8) passWithUniqueIdentifier:*(void *)(a1 + 48)]);
  if ([v2 passType] != (id)1 || (objc_msgSend(v2, "isTransitPass") & 1) == 0)
  {

    id v2 = 0LL;
  }

  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v3 = (PDTransitStateFetchRequest *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "devicePaymentApplications", 0));
  id v4 = -[PDTransitStateFetchRequest countByEnumeratingWithState:objects:count:]( v3,  "countByEnumeratingWithState:objects:count:",  &v11,  v15,  16LL);
  if (v4)
  {
    uint64_t v5 = *(void *)v12;
LABEL_6:
    uint64_t v6 = 0LL;
    while (1)
    {
      if (*(void *)v12 != v5) {
        objc_enumerationMutation(v3);
      }
      char v7 = *(void **)(*((void *)&v11 + 1) + 8 * v6);
      unsigned int v8 = (void *)objc_claimAutoreleasedReturnValue([v7 applicationIdentifier]);
      char v9 = PKEqualObjects(v8, *(void *)(a1 + 56));

      if ((v9 & 1) != 0) {
        break;
      }
      if (v4 == (id)++v6)
      {
        id v4 = -[PDTransitStateFetchRequest countByEnumeratingWithState:objects:count:]( v3,  "countByEnumeratingWithState:objects:count:",  &v11,  v15,  16LL);
        if (v4) {
          goto LABEL_6;
        }
        goto LABEL_16;
      }
    }

    id v4 = v7;

    if (v2 && v4)
    {
      id v3 = objc_alloc_init(&OBJC_CLASS___PDTransitStateFetchRequest);
      -[PDTransitStateFetchRequest setPassUniqueIdentifier:](v3, "setPassUniqueIdentifier:", *(void *)(a1 + 48));
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v4 secureElementIdentifier]);
      -[PDTransitStateFetchRequest setSecureElementIdentifier:](v3, "setSecureElementIdentifier:", v10);

      -[PDTransitStateFetchRequest setPaymentApplicationIdentifier:]( v3,  "setPaymentApplicationIdentifier:",  *(void *)(a1 + 56));
      -[PDTransitStateFetchRequest setForceTransactionGeneration:](v3, "setForceTransactionGeneration:", 1LL);
      -[PDTransitStateFetchRequest setExpressState:](v3, "setExpressState:", *(void *)(a1 + 64));
      [*(id *)(a1 + 40) _queueTransitStateFetchRequest:v3];
      goto LABEL_16;
    }
  }

  else
  {
LABEL_16:
  }
}

void sub_1000BFD10( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
}

void sub_1000BFD2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000BFDE8;
  v5[3] = &unk_100640E48;
  objc_copyWeak(&v7, (id *)(a1 + 48));
  id v6 = *(id *)(a1 + 40);
  [v3 notifyIssuerAppletStateDirtyWithRequest:v4 completion:v5];

  objc_destroyWeak(&v7);
}

void sub_1000BFDD4(_Unwind_Exception *a1)
{
}

void sub_1000BFDE8(uint64_t a1, int a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  if (WeakRetained)
  {
    os_unfair_lock_lock((os_unfair_lock_t)WeakRetained + 20);
    if (a2 && ([*((id *)WeakRetained + 9) containsObject:*(void *)(a1 + 32)] & 1) == 0) {
      [*((id *)WeakRetained + 1) deleteDirtyAppletStatesForTransitAppletStateDirty:*(void *)(a1 + 32)];
    }
    *((_BYTE *)WeakRetained + 84) = 0;
    os_unfair_lock_unlock((os_unfair_lock_t)WeakRetained + 20);
    [WeakRetained _performWebRequestToNotifyIssuerAppletDirtyIfNecessary];
  }
}

Class sub_1000BFF20()
{
  if (qword_100707950 != -1) {
    dispatch_once(&qword_100707950, &stru_100640E90);
  }
  Class result = objc_getClass("_MKLocalSearchExternalTransitLookupParameters");
  qword_100707940 = (uint64_t)result;
  off_100704CC0 = (uint64_t (*)())sub_1000BFF7C;
  return result;
}

id sub_1000BFF7C()
{
  return (id)qword_100707940;
}

void sub_1000BFF88(id a1)
{
  qword_100707948 = (uint64_t)dlopen("/System/Library/Frameworks/MapKit.framework/MapKit", 2);
}

Class sub_1000BFFB0()
{
  if (qword_100707950 != -1) {
    dispatch_once(&qword_100707950, &stru_100640E90);
  }
  Class result = objc_getClass("MKLocalSearchRequest");
  qword_100707958 = (uint64_t)result;
  off_100704CC8 = (uint64_t (*)())sub_1000C000C;
  return result;
}

id sub_1000C000C()
{
  return (id)qword_100707958;
}

Class sub_1000C0018()
{
  if (qword_100707950 != -1) {
    dispatch_once(&qword_100707950, &stru_100640E90);
  }
  Class result = objc_getClass("MKLocalSearch");
  qword_100707960 = (uint64_t)result;
  off_100704CD0 = (uint64_t (*)())sub_1000C0074;
  return result;
}

id sub_1000C0074()
{
  return (id)qword_100707960;
}

void sub_1000C0430(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v9 = *a4;
  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  id v7 = v9;
  if (v9 != (id)v6)
  {
    unsigned int v8 = (void *)v6;
    id v10 = *a4;

    if (!v10) {
      return;
    }
    [*(id *)(a1 + 32) addObject:v10];
    id v7 = v10;
  }
}

uint64_t sub_1000C09C4(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472LL;
  v4[2] = sub_1000C0A68;
  v4[3] = &unk_100640EB8;
  uint64_t v8 = *(void *)(a1 + 64);
  id v2 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v6 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 56);
  [v2 enumerateObjectsUsingBlock:v4];

  return 1LL;
}

void sub_1000C0A68(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(objc_class **)(a1 + 56);
  id v6 = a2;
  id v8 = [[v5 alloc] initWithTransitNetworkIdentifier:v6 networkOrder:a3 forPaymentApplication:*(void *)(a1 + 32) database:*(void *)(a1 + 40)];

  id v7 = v8;
  if (v8)
  {
    [*(id *)(a1 + 48) addObject:v8];
    id v7 = v8;
  }
}

void sub_1000C1030( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
}

uint64_t sub_1000C1048(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000C1058(uint64_t a1)
{
}

BOOL sub_1000C1060(uint64_t a1)
{
  id v2 = [objc_alloc(*(Class *)(a1 + 64)) initWithMetadata:*(void *)(a1 + 32) forBaseMetadata:*(void *)(a1 + 40) inDatabase:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8LL);
  uint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;

  return *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL) != 0LL;
}

id sub_1000C1210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id result = [*(id *)(a1 + 32) setHeightClass:PKPassTileHeightClassFromString(*(void *)(a4 + 16))];
  *a6 = 1;
  return result;
}

void sub_1000C198C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1000C1B44(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKPayLaterAccountFeatureDescriptor);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_1000C1E2C(id a1, PKPayLaterAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1000C1E34(id a1, PKPayLaterAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPayLaterAccountFeatureDescriptor setMinimumAmount:](v4, "setMinimumAmount:", v6);
}

void sub_1000C1E84(id a1, PKPayLaterAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = PKCurrencyStorageNumberToCurrencyDecimal(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPayLaterAccountFeatureDescriptor setMaximumAmount:](v4, "setMaximumAmount:", v6);
}

void sub_1000C1ED4(id a1, PKPayLaterAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue([a3 componentsSeparatedByString:@","]);
  -[PKPayLaterAccountFeatureDescriptor setSupportedNetworks:](v4, "setSupportedNetworks:", v5);
}

void sub_1000C1F2C(id a1, PKPayLaterAccountFeatureDescriptor *a2, id a3)
{
}

void sub_1000C1F34(id a1, PKPayLaterAccountFeatureDescriptor *a2, id a3)
{
  uint64_t v4 = a2;
  -[PKPayLaterAccountFeatureDescriptor setMerchantCapabilities:]( v4,  "setMerchantCapabilities:",  [a3 unsignedIntegerValue]);
}

void sub_1000C23F4(void *a1)
{
  id v7 = +[PKSharingRelayChannelDescriptor existingChannelForURL:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForURL:",  a1[4]);
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1[5] + 136), "handleForDescriptor:queue:"));
  uint64_t v3 = v2;
  uint64_t v4 = a1[6];
  if (v2)
  {
    [v2 pingWithCompletion:v4];
  }

  else
  {
    uint64_t v5 = PDBasicError(@"Mailbox address not supported");
    id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0LL, v6);
  }
}

void sub_1000C2574(uint64_t a1)
{
  id v6 = +[PKSharingRelayChannelDescriptor existingChannelForURL:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForURL:",  *(void *)(a1 + 32));
  id v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 136), "handleForDescriptor:queue:"));
  if (v2)
  {
    sub_1000C261C(*(id **)(a1 + 40), v2, *(void **)(a1 + 48));
  }

  else
  {
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = PDBasicError(@"Mailbox address not supported");
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0LL, v5);
  }
}

void sub_1000C261C(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 transportIdentifier]);
    if ([v5 wasChannelCreatedLocally])
    {
      uint64_t Object = PKLogFacilityTypeGetObject(33LL);
      id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: endpoint is local, not allowing it to be accepted!",  buf,  2u);
      }

      id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError pkSharingError:](&OBJC_CLASS___NSError, "pkSharingError:", 11LL));
      v6[2](v6, 0LL, v10);
    }

    else
    {
      __int128 v11 = (void *)objc_claimAutoreleasedReturnValue([a1[3] passShareForTransportIdentifier:v7]);
      id v10 = v11;
      if (v11 && (PKShareStatusIsWaitingOnUserAction([v11 status]) & 1) == 0)
      {
        uint64_t v26 = PKLogFacilityTypeGetObject(33LL);
        uint64_t v27 = (os_log_s *)objc_claimAutoreleasedReturnValue(v26);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v27,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: existing share found for endpoint!",  buf,  2u);
        }

        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSError pkSharingError:](&OBJC_CLASS___NSError, "pkSharingError:", 10LL));
        v6[2](v6, 0LL, v12);
      }

      else
      {
        __int128 v12 = (void *)objc_claimAutoreleasedReturnValue([a1[2] sharedWebService]);
        __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 context]);
        __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v13 configuration]);
        [v14 sharingMessageCacheTimeToLiveInterval];
        double v16 = v15;

        id v17 = -[NSDate initWithTimeIntervalSinceNow:]( objc_alloc(&OBJC_CLASS___NSDate),  "initWithTimeIntervalSinceNow:",  -v16);
        id v18 = (void *)objc_claimAutoreleasedReturnValue([a1[3] sharingMessagesForTransportIdentifier:v7 newerThanDate:v17]);
        uint64_t v19 = (void *)objc_claimAutoreleasedReturnValue([v18 firstObject]);

        if (v19
          && (uint64_t v20 = objc_claimAutoreleasedReturnValue([v19 displayInformation])) != 0
          && (__int128 v21 = (void *)v20, v22 = [v19 type], v21, v22 == (id)1))
        {
          id v23 = sub_1000C29AC(a1, v19);
          __int128 v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
          if (v24)
          {
            id v25 = v5;
            [a1 retrieveShareInvitationForMailboxAddress:v24 completion:v6];
            [v25 relinquishWithCompletion:&stru_100641030];
          }

          else
          {
            uint64_t v28 = PKLogFacilityTypeGetObject(33LL);
            id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)id buf = 138477827;
              uint64_t v35 = v19;
              _os_log_impl( (void *)&_mh_execute_header,  v29,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Returning cached message: %{private}@",  buf,  0xCu);
            }

            ((void (**)(id, void *, void *))v6)[2](v6, v19, 0LL);
          }
        }

        else
        {
          v30[0] = _NSConcreteStackBlock;
          v30[1] = 3221225472LL;
          void v30[2] = sub_1000C2AD4;
          v30[3] = &unk_100641010;
          __int128 v33 = v6;
          id v31 = v5;
          __int128 v32 = a1;
          [v31 attachWithCompletion:v30];

          __int128 v24 = v33;
        }
      }
    }
  }
}

id sub_1000C29AC(void *a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t v4 = PKIsWatch();
    if ((v4 & 1) != 0)
    {
      uint64_t v6 = 1LL;
    }

    else if ((PKIsPhone(v4, v5) & 1) != 0)
    {
      uint64_t v6 = 0LL;
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(33LL);
      id v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__int128 v11 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "Warning, tried to find embedded mailbox address on unsupported device!",  v11,  2u);
      }

      uint64_t v6 = 0x7FFFFFFFFFFFFFFFLL;
    }

    id v9 = sub_1000C2E5C((uint64_t)a1, v6, v3);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v9);
  }

  return a1;
}

void sub_1000C2A6C(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (a1)
  {
    id v7 = a3;
    [a1 retrieveShareInvitationForMailboxAddress:a2 completion:a4];
    [v7 relinquishWithCompletion:&stru_100641030];
  }

void sub_1000C2AD4(uint64_t a1, char a2, uint64_t a3)
{
  if (a3 || (a2 & 1) == 0)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v4 = *(void **)(a1 + 32);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1000C2B90;
    v7[3] = &unk_100640FE8;
    id v9 = *(id *)(a1 + 48);
    int8x16_t v6 = *(int8x16_t *)(a1 + 32);
    id v5 = (id)v6.i64[0];
    int8x16_t v8 = vextq_s8(v6, v6, 8uLL);
    [v4 handleOutstandingMessage:v7];
  }

void sub_1000C2B90(uint64_t a1, void *a2, void *a3)
{
  id v16 = a2;
  id v5 = a3;
  if (v16)
  {
    id v6 = sub_1000C2CBC(*(void **)(a1 + 32), v16);
    id v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    if (v7)
    {
      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    }

    else
    {
      id v8 = sub_1000C29AC(*(void **)(a1 + 32), v16);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      id v10 = *(void **)(a1 + 32);
      if (v9)
      {
        sub_1000C2A6C(v10, (uint64_t)v9, *(void **)(a1 + 40), *(void *)(a1 + 48));
      }

      else
      {
        id v11 = sub_1000C2E5C((uint64_t)v10, 1LL, v16);
        uint64_t v12 = objc_claimAutoreleasedReturnValue(v11);
        __int128 v14 = (void *)v12;
        if (v12) {
          PKIsPhone(v12, v13);
        }
        id v15 = objc_alloc_init(&OBJC_CLASS___PKMAEntitlementTemplateManager);
        [v15 entitlementTemplates:0];
        v5[2](v5, 0LL);
        (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
      }
    }
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

id sub_1000C2CBC(void *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if ([v3 type] == (id)1)
    {
      uint64_t v6 = objc_opt_class(&OBJC_CLASS___PKSharingPushProvisioningInvitation, v5);
      if ((objc_opt_isKindOfClass(v4, v6) & 1) == 0
        || (id v7 = (void *)objc_claimAutoreleasedReturnValue([v4 metadatas]),
            id v8 = [v7 count],
            v7,
            v8))
      {
        a1 = 0LL;
        goto LABEL_10;
      }

      uint64_t Object = PKLogFacilityTypeGetObject(33LL);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 138477827;
        id v17 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Retreived push provisioning message does not support provisioning on an Apple device. Message: %{private}@",  (uint8_t *)&v16,  0xCu);
      }

      id v11 = @"invite missing apple metadata";
      uint64_t v12 = 8LL;
    }

    else
    {
      uint64_t v9 = PKLogFacilityTypeGetObject(33LL);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = 138477827;
        id v17 = v4;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Retreived message was not of type invitation. Message: %{private}@",  (uint8_t *)&v16,  0xCu);
      }

      id v11 = @"message is not invitation";
      uint64_t v12 = 6LL;
    }

    a1 = (void *)objc_claimAutoreleasedReturnValue( +[NSError pkSharingError:debugDescription:]( &OBJC_CLASS___NSError,  "pkSharingError:debugDescription:",  v12,  v11));
  }

id sub_1000C2E5C(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a1) {
    return 0LL;
  }
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([a3 embeddedMessageURLs]);
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInteger:](&OBJC_CLASS___NSNumber, "numberWithInteger:", a2));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v4 objectForKeyedSubscript:v5]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 absoluteString]);

  if (v7)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = PKPassCredentialShareTargetDeviceToString(a2);
      id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      int v13 = 138412290;
      __int128 v14 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Found embedded message url for device '%@', following.",  (uint8_t *)&v13,  0xCu);
    }
  }

  return v7;
}

void sub_1000C3034(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) transportIdentifierForSharingMessage:*(void *)(a1 + 40)]);
  id v3 = +[PKSharingRelayChannelDescriptor existingChannelForMailboxIdentifier:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForMailboxIdentifier:",  v2);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 136) handleForDescriptor:v3 queue:*(void *)(*(void *)(a1 + 32) + 88)]);
  if (v4)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1000C3164;
    v7[3] = &unk_100639688;
    id v8 = *(id *)(a1 + 48);
    [v4 relinquishWithCompletion:v7];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Error: unable to relinquish invitation, can't find endpoint for message",  buf,  2u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1000C3164(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Error: Unable to relinquish invitation, %@",  (uint8_t *)&v7,  0xCu);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C3310(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) transportIdentifierForSharingMessage:*(void *)(a1 + 40)]);
  id v3 = +[PKSharingRelayChannelDescriptor existingChannelForMailboxIdentifier:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForMailboxIdentifier:",  v2);
  id v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 136) handleForDescriptor:v3 queue:*(void *)(*(void *)(a1 + 32) + 88)]);
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      uint64_t v8 = PKSharingLoggableMailboxAddress(v2);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      int v10 = 138412290;
      id v11 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Deleting messages on endpoint '%@'",  (uint8_t *)&v10,  0xCu);
    }

    sub_1000C346C(*(void *)(a1 + 32), v4);
  }

  else
  {
    if (v7)
    {
      LOWORD(v10) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Error: unable to delete message, can't find endpoint for message",  (uint8_t *)&v10,  2u);
    }
  }
}

void sub_1000C346C(uint64_t a1, void *a2)
{
  if (a1)
  {
    if (a2)
    {
      id v3 = a2;
      uint64_t v5 = _NSConcreteStackBlock;
      uint64_t v6 = 3221225472LL;
      BOOL v7 = sub_1000CEBE0;
      uint64_t v8 = &unk_10063DAE8;
      uint64_t v9 = a1;
      id v10 = (id)objc_claimAutoreleasedReturnValue([v3 transportIdentifier]);
      id v4 = v10;
      [v3 closeWithCompletion:&v5];

      objc_msgSend(*(id *)(a1 + 24), "deleteSharingMessagesForTransportIdentifier:", v4, v5, v6, v7, v8, v9);
    }
  }

void sub_1000C3598(uint64_t a1)
{
  id v2 = +[PKSharingRelayChannelDescriptor existingChannelForURL:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForURL:",  *(void *)(a1 + 32));
  id v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 136) handleForDescriptor:v2 queue:*(void *)(*(void *)(a1 + 40) + 88)]);
  if (v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = PKSharingLoggableMailboxAddress(*(void *)(a1 + 32));
      BOOL v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      *(_DWORD *)id buf = 138412290;
      uint64_t v12 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Cleanup: Rejecting share invitation on endpoint %@",  buf,  0xCu);
    }

    uint64_t v8 = *(id **)(a1 + 40);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    id v9[2] = sub_1000C36F0;
    v9[3] = &unk_100641078;
    void v9[4] = v8;
    id v10 = v3;
    sub_1000C261C(v8, v10, v9);
  }
}

void sub_1000C36F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(dispatch_queue_s **)(v5 + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C3794;
    block[3] = &unk_100639350;
    void block[4] = v5;
    id v8 = v3;
    id v9 = *(id *)(a1 + 40);
    dispatch_async(v6, block);
  }
}

void sub_1000C3794(uint64_t a1)
{
  id v2 = sub_1000C388C(*(id **)(a1 + 32), *(void **)(a1 + 40));
  id v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000C38E4;
    v8[3] = &unk_100641078;
    uint64_t v4 = *(void *)(a1 + 40);
    void v8[4] = *(void *)(a1 + 32);
    id v9 = *(id *)(a1 + 48);
    [v3 rejectInvitation:v4 completion:v8];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Cleanup: unable to find service for invitation to reject. Deleting mailbox instead.",  v7,  2u);
    }

    [*(id *)(a1 + 48) closeWithCompletion:0];
  }
}

id *sub_1000C388C(id *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    else {
      a1 = 0LL;
    }
  }

  return a1;
}

void sub_1000C38E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 88LL);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    id v6[2] = sub_1000C3978;
    v6[3] = &unk_1006392B0;
    id v7 = v4;
    id v8 = v3;
    dispatch_async(v5, v6);
  }
}

id sub_1000C3978(uint64_t a1)
{
  return [*(id *)(a1 + 32) sendMessage:*(void *)(a1 + 40) completion:&stru_100641050];
}

void sub_1000C3A38(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 secureElementPass]);

  if (v3)
  {
    uint64_t v4 = sub_1000C3BAC(*(char **)(a1 + 32), v3);
    uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    id v9[2] = sub_1000C3C14;
    v9[3] = &unk_1006410C8;
    void v9[4] = *(void *)(a1 + 32);
    id v10 = v3;
    id v11 = *(id *)(a1 + 48);
    [v5 prewarmCreateShareForPass:v10 completion:v9];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      *(_DWORD *)id buf = 138412290;
      uint64_t v13 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Tried to prewarm create share for pass %@, but unable to find pass",  buf,  0xCu);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

char *sub_1000C3BAC(char *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1)
  {
    if ([v3 isCarKeyPass])
    {
      uint64_t v5 = 120LL;
    }

    else
    {
      unsigned int v6 = [v4 isHomeKeyPass];
      uint64_t v5 = 104LL;
      if (v6) {
        uint64_t v5 = 112LL;
      }
    }

    a1 = (char *)*(id *)&a1[v5];
  }

  return a1;
}

void sub_1000C3C14(uint64_t a1, char a2)
{
  v7[0] = _NSConcreteStackBlock;
  v7[2] = sub_1000C3CB0;
  v7[3] = &unk_10063B100;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 40);
  unsigned int v6 = *(dispatch_queue_s **)(v4 + 88);
  v7[1] = 3221225472LL;
  void v7[4] = v4;
  id v8 = v5;
  char v10 = a2;
  id v9 = *(id *)(a1 + 48);
  dispatch_async(v6, v7);
}

void sub_1000C3CB0(uint64_t a1)
{
  id v2 = +[PKSharingRelayChannelDescriptor createChannelWithRegion:stateful:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "createChannelWithRegion:stateful:",  0LL,  sub_1000C3D78(*(id *)(a1 + 32), *(void **)(a1 + 40)));
  id v3 = *(void **)(*(void *)(a1 + 32) + 136LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_1000C3DB4;
  v6[3] = &unk_1006410A0;
  char v8 = *(_BYTE *)(a1 + 56);
  id v7 = *(id *)(a1 + 48);
  [v3 prewarmEndpointCreationForDescriptor:v2 count:2 completion:v6];
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  1LL,  v4,  v5);
}

id sub_1000C3D78(id a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (a1) {
    a1 = [v3 isCarKeyPass];
  }

  return a1;
}

uint64_t sub_1000C3DB4(uint64_t a1, int a2)
{
  if (*(_BYTE *)(a1 + 40)) {
    int v3 = a2;
  }
  else {
    int v3 = 0;
  }
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = @"No";
    if (v3) {
      unsigned int v6 = @"Yes";
    }
    int v8 = 138412290;
    id v9 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Prewarmed create share with success: %@",  (uint8_t *)&v8,  0xCu);
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C4130(_Unwind_Exception *a1)
{
}

void sub_1000C4154(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  int v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C4210;
  block[3] = &unk_10063C6A8;
  id v13 = v5;
  id v14 = v7;
  id v12 = v6;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

uint64_t sub_1000C4210(void *a1)
{
  uint64_t v2 = a1[6];
  if (a1[4]) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = a1[5];
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v2, v3);
}

uint64_t sub_1000C4234(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000C4244(uint64_t a1)
{
}

void sub_1000C424C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  int v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 88LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_1000C42F8;
  void v11[3] = &unk_1006396B0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, v11);
}

uint64_t sub_1000C42F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1000C430C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  int v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) homeInvite]);

  id v9 = *(void **)(*(void *)(a1 + 40) + 24LL);
  id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) pass]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v9 passWithUniqueIdentifier:v11]);
  uint64_t v13 = objc_claimAutoreleasedReturnValue([v12 secureElementPass]);
  uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;

  int v16 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  if (v16)
  {
    id v17 = sub_1000C3BAC(*(char **)(a1 + 40), v16);
    uint64_t v18 = objc_claimAutoreleasedReturnValue(v17);
    uint64_t v19 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;
LABEL_5:

    v7[2](v7, v6, 0LL);
    goto LABEL_6;
  }

  if (v8)
  {
    __int128 v21 = *(void **)(*(void *)(a1 + 40) + 112LL);
    uint64_t v22 = *(void *)(*(void *)(a1 + 64) + 8LL);
    id v23 = v21;
    uint64_t v20 = *(void **)(v22 + 40);
    *(void *)(v22 + 40) = v23;
    goto LABEL_5;
  }

  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v25 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v29 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v25,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Tried to create share but unable to locate pass.",  v29,  2u);
  }

  uint64_t v26 = *(void *)(a1 + 48);
  NSErrorUserInfoKey v30 = NSLocalizedDescriptionKey;
  id v31 = @"Unable to find pass";
  uint64_t v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v31,  &v30,  1LL));
  uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  0LL,  v27));
  (*(void (**)(uint64_t, void, void *))(v26 + 16))(v26, 0LL, v28);

LABEL_6:
}

void sub_1000C453C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL)
    && (id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) share]), v10, v10))
  {
    uint64_t v11 = *(void *)(a1 + 40);
    id v12 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1000C4658;
    v13[3] = &unk_100641140;
    id v14 = *(id *)(a1 + 32);
    id v16 = v9;
    id v15 = v8;
    sub_1000C46B4(v11, v12, v13);
  }

  else
  {
    (*((void (**)(id, id, void))v9 + 2))(v9, v8, 0LL);
  }
}

uint64_t sub_1000C4658(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 share]);
  [v5 updateDisplayableSharedEntitlementsFromDisplayableEntitlements:v4];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000C46B4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = *(void **)(a1 + 24);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v5 uniqueID]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 passEntitlementsForPassUniqueIdentifier:v8]);

    if (v9)
    {
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      v10[2] = sub_1000C8680;
      v10[3] = &unk_1006415E8;
      id v11 = v6;
      +[PKDisplayablePassEntitlement localizedEntitlementsFromEntitlements:pass:useCachedTemplates:completion:]( &OBJC_CLASS___PKDisplayablePassEntitlement,  "localizedEntitlementsFromEntitlements:pass:useCachedTemplates:completion:",  v9,  v5,  1LL,  v10);
    }

    else
    {
      (*((void (**)(id, void))v6 + 2))(v6, 0LL);
    }
  }
}

void sub_1000C47A4(uint64_t *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    *(_DWORD *)id buf = 138412290;
    uint64_t v18 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Attempting to create share for %@",  buf,  0xCu);
  }

  id v5 = (void *)a1[7];
  id v6 = *(void **)(*(void *)(a1[8] + 8) + 40LL);
  uint64_t v7 = *(void *)(a1[9] + 8);
  v13[0] = _NSConcreteStackBlock;
  uint64_t v8 = *(void *)(v7 + 40);
  v13[2] = sub_1000C48EC;
  v13[3] = &unk_1006411B8;
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  v13[1] = 3221225472LL;
  id v11 = v5;
  void v13[4] = a1[6];
  uint64_t v12 = a1[9];
  id v15 = v11;
  uint64_t v16 = v12;
  id v14 = (id)a1[4];
  [v6 createShareInvitationFromShare:v9 forPass:v8 authorization:v10 completion:v13];
}

void sub_1000C48EC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  if (a4)
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v9 = *(void *)(a1 + 32);
    uint64_t v10 = *(dispatch_queue_s **)(v9 + 88);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1000C49E8;
    v13[3] = &unk_100641190;
    void v13[4] = v9;
    id v11 = v7;
    uint64_t v12 = *(void *)(a1 + 56);
    id v14 = v11;
    uint64_t v18 = v12;
    id v15 = v8;
    id v16 = *(id *)(a1 + 40);
    id v17 = *(id *)(a1 + 48);
    dispatch_async(v10, v13);
  }
}

void sub_1000C49E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v5 = *(void **)(v4 + 40);
  id v6 = *(void **)(a1 + 48);
  if (v6)
  {
    sub_1000C4A7C(*(void *)(a1 + 32), *(void **)(a1 + 40), *(void **)(v4 + 40), v6, *(void **)(a1 + 64));
  }

  else
  {
    id v7 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) share]);
    sub_1000C4A7C(v2, v3, v5, v7, *(void **)(a1 + 64));
  }

void sub_1000C4A7C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 88));
    id v13 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
    v57[0] = 0LL;
    v57[1] = v57;
    v57[2] = 0x3032000000LL;
    v57[3] = sub_1000C4234;
    void v57[4] = sub_1000C4244;
    id v58 = 0LL;
    id v14 = v10;
    unsigned __int8 v15 = [v14 isCarKeyPass];

    id v16 = (void *)objc_claimAutoreleasedReturnValue([v14 passTypeIdentifier]);
    v53[0] = _NSConcreteStackBlock;
    v53[1] = 3221225472LL;
    v53[2] = sub_1000C5ABC;
    v53[3] = &unk_1006412F8;
    id v28 = v9;
    id v17 = v9;
    uint64_t v55 = a1;
    __int128 v56 = v57;
    id v54 = v17;
    uint64_t v18 = objc_retainBlock(v53);
    v47[0] = _NSConcreteStackBlock;
    v47[1] = 3221225472LL;
    void v47[2] = sub_1000C5C30;
    v47[3] = &unk_100641370;
    id v19 = v16;
    unsigned __int8 v52 = v15;
    id v48 = v19;
    uint64_t v49 = a1;
    id v20 = v13;
    id v50 = v20;
    __int128 v21 = v18;
    id v51 = v21;
    [v17 enumerateSecondaryInvites:v47];
    v45[0] = _NSConcreteStackBlock;
    v45[1] = 3221225472LL;
    v45[2] = sub_1000C5EE8;
    v45[3] = &unk_1006396D8;
    id v22 = v17;
    id v46 = v22;
    [v20 addOperation:v45];
    v43[0] = 0LL;
    v43[1] = v43;
    v43[2] = 0x3032000000LL;
    v43[3] = sub_1000C4234;
    v43[4] = sub_1000C4244;
    id v44 = 0LL;
    v36[0] = _NSConcreteStackBlock;
    v36[1] = 3221225472LL;
    v36[2] = sub_1000C6040;
    v36[3] = &unk_1006413E8;
    id v23 = v22;
    id v37 = v23;
    id v24 = v19;
    unsigned __int8 v42 = v15;
    id v38 = v24;
    uint64_t v39 = a1;
    uint64_t v41 = v43;
    id v25 = v21;
    id v40 = v25;
    [v20 addOperation:v36];
    uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
    v29[0] = _NSConcreteStackBlock;
    v29[1] = 3221225472LL;
    v29[2] = sub_1000C6240;
    v29[3] = &unk_100641460;
    v29[4] = a1;
    unsigned __int8 v34 = v57;
    id v30 = v14;
    id v31 = v11;
    id v33 = v12;
    id v32 = v23;
    uint64_t v35 = v43;
    id v27 = [v20 evaluateWithInput:v26 completion:v29];

    _Block_object_dispose(v43, 8);
    _Block_object_dispose(v57, 8);

    id v9 = v28;
  }
}

void sub_1000C4DE4(_Unwind_Exception *a1)
{
}

void sub_1000C515C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, char a39)
{
}

void sub_1000C51AC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 88LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_1000C5258;
  void v11[3] = &unk_1006396B0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, v11);
}

uint64_t sub_1000C5258(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1000C526C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = *(void **)(a1 + 40);
  id v7 = *(void **)(*(void *)(a1 + 32) + 24LL);
  id v8 = a4;
  id v9 = a3;
  id v10 = (void *)objc_claimAutoreleasedReturnValue([v6 pass]);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 uniqueID]);
  id v12 = (void *)objc_claimAutoreleasedReturnValue([v7 passWithUniqueIdentifier:v11]);
  uint64_t v13 = objc_claimAutoreleasedReturnValue([v12 secureElementPass]);
  uint64_t v14 = *(void *)(*(void *)(a1 + 48) + 8LL);
  unsigned __int8 v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = v13;

  id v16 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  if (v16)
  {
    id v17 = sub_1000C3BAC(*(char **)(a1 + 32), v16);
    uint64_t v18 = objc_claimAutoreleasedReturnValue(v17);
    uint64_t v19 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v20 = *(void **)(v19 + 40);
    *(void *)(v19 + 40) = v18;
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v27 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Tried to create share but unable to locate pass.",  v27,  2u);
    }

    NSErrorUserInfoKey v28 = NSLocalizedDescriptionKey;
    id v29 = @"Unable to find pass";
    id v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v29,  &v28,  1LL));
    uint64_t v24 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  0LL,  v23));
    uint64_t v25 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v26 = *(void **)(v25 + 40);
    *(void *)(v25 + 40) = v24;
  }

  v8[2](v8, v9, *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL) != 0LL);
}

void sub_1000C5464(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000C5534;
  v13[3] = &unk_100641140;
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  id v15 = v6;
  id v16 = v7;
  id v14 = v10;
  id v11 = v6;
  id v12 = v7;
  sub_1000C46B4(v9, v8, v13);
}

uint64_t sub_1000C5534(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = a2;
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 share]);
  [v5 updateDisplayableSharedEntitlementsFromDisplayableEntitlements:v4];

  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000C5590(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)id buf = 138412290;
    uint64_t v27 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Attempting to create share for %@",  buf,  0xCu);
  }

  id v11 = *(void **)(a1 + 48);
  id v12 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  v20[0] = _NSConcreteStackBlock;
  v20[2] = sub_1000C5714;
  v20[3] = &unk_100641230;
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 40);
  v20[1] = 3221225472LL;
  id v23 = v7;
  id v21 = v6;
  __int128 v24 = *(_OWORD *)(a1 + 72);
  id v16 = v11;
  uint64_t v17 = *(void *)(a1 + 88);
  id v22 = v16;
  uint64_t v25 = v17;
  id v18 = v6;
  id v19 = v7;
  [v12 createShareInvitationFromShare:v14 forPass:v13 authorization:v15 completion:v20];
}

void sub_1000C5714(void *a1, void *a2, void *a3, void *a4)
{
  id v13 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(a1[7] + 8LL) + 40LL), a4);
    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    objc_storeStrong((id *)(*(void *)(a1[8] + 8LL) + 40LL), a2);
    uint64_t v10 = *(void **)(*(void *)(a1[8] + 8LL) + 40LL);
    uint64_t v11 = a1[5];
    id v12 = (void *)objc_claimAutoreleasedReturnValue([v10 primaryInvite]);
    [v10 setTransportIdentifier:v11 forInvite:v12];

    objc_storeStrong((id *)(*(void *)(a1[9] + 8LL) + 40LL), a3);
  }
}

void sub_1000C580C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(dispatch_queue_s **)(v2 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C58A4;
  block[3] = &unk_100641280;
  void block[4] = v2;
  __int128 v8 = *(_OWORD *)(a1 + 56);
  __int128 v5 = *(_OWORD *)(a1 + 40);
  id v4 = (id)v5;
  __int128 v7 = v5;
  uint64_t v9 = *(void *)(a1 + 72);
  dispatch_async(v3, block);
}

void sub_1000C58A4(uint64_t *a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1[6] + 8) + 40LL);
  if (v2 && (uint64_t v3 = *(void **)(*(void *)(a1[7] + 8) + 40LL)) != 0LL)
  {
    sub_1000C5968(a1[4], v2, v3, *(void **)(*(void *)(a1[8] + 8) + 40LL));
    uint64_t v4 = a1[5];
    id v5 = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[7] + 8) + 40) primaryInvite]);
    (*(void (**)(uint64_t, id, void, void))(v4 + 16))( v4,  v5,  *(void *)(*(void *)(a1[6] + 8) + 40LL),  0LL);
  }

  else
  {
    (*(void (**)(void))(a1[5] + 16))();
  }

void sub_1000C5968(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v17 = a2;
  id v7 = a4;
  if (a1)
  {
    id v8 = a3;
    uint64_t v9 = sub_1000C3BAC((char *)a1, v7);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472LL;
    void v18[2] = sub_1000CEB58;
    v18[3] = &unk_100641AB0;
    char v22 = objc_opt_respondsToSelector(v10, "didCreateAndStoreShare:forCredentialShare:pass:transportIdentifier:") & 1;
    id v19 = v10;
    id v11 = v17;
    id v20 = v11;
    id v12 = v7;
    id v21 = v12;
    id v13 = v10;
    [v8 enumerateAllInvites:v18];

    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate now](&OBJC_CLASS___NSDate, "now"));
    [v11 setCreationDate:v14];

    uint64_t v15 = *(void **)(a1 + 24);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v12 uniqueID]);
    [v15 addPassShare:v11 forPassUniqueIdentifier:v16];
  }
}

void sub_1000C5ABC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a5;
  id v14 = a6;
  if (a4) {
    [*(id *)(a1 + 32) setShareURL:a4 forInvite:v11];
  }
  [*(id *)(a1 + 32) setHandle:v12 forInvite:v11];
  uint64_t v15 = *(void *)(*(void *)(a1 + 48) + 8LL);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v13;
  id v17 = v13;

  uint64_t v18 = *(void *)(a1 + 48);
  id v19 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 88LL);
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472LL;
  v21[2] = sub_1000C5BCC;
  v21[3] = &unk_1006412D0;
  id v22 = v14;
  uint64_t v23 = v18;
  id v20 = v14;
  dispatch_async(v19, v21);
}

void sub_1000C5BCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  (*(void (**)(uint64_t, id, BOOL))(v2 + 16))( v2,  v3,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) != 0LL);
}

void sub_1000C5C30(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = +[PKSharingRelayChannelDescriptor createChannelWithRegion:stateful:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "createChannelWithRegion:stateful:",  *(void *)(a1 + 32),  *(unsigned __int8 *)(a1 + 64));
  id v5 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 136) handleForDescriptor:v4 queue:*(void *)(*(void *)(a1 + 40) + 88)]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  id v9[2] = sub_1000C5D24;
  v9[3] = &unk_100641348;
  id v6 = *(void **)(a1 + 48);
  void v9[4] = *(void *)(a1 + 40);
  id v10 = v5;
  id v11 = v3;
  id v12 = *(id *)(a1 + 56);
  id v7 = v3;
  id v8 = v5;
  [v6 addOperation:v9];
}

void sub_1000C5D24(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void *)(a1 + 32);
  id v7 = *(void **)(a1 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000C5DF8;
  v10[3] = &unk_100641320;
  id v8 = *(void **)(a1 + 48);
  id v13 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 48);
  id v12 = *(id *)(a1 + 40);
  id v14 = v5;
  id v9 = v5;
  sub_1000C5E14(v6, v7, v8, v10);
}

uint64_t sub_1000C5DF8(void *a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, void, uint64_t, uint64_t, void))(a1[6] + 16LL))( a1[6],  a1[4],  a1[5],  a2,  a3,  a1[7]);
}

void sub_1000C5E14(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (a1)
  {
    dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 88));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000C64D0;
    v10[3] = &unk_1006414D8;
    void v10[4] = a1;
    id v13 = v9;
    id v11 = v8;
    id v12 = v7;
    [v12 sendMessage:v11 completion:v10];
  }
}

void sub_1000C5EE8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v11 = a3;
  uint64_t v6 = a4;
  id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  id v8 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000C5FCC;
  void v12[3] = &unk_100641398;
  id v9 = v7;
  id v13 = v9;
  [v8 enumerateSecondaryInvites:v12];
  if (-[NSMutableArray count](v9, "count"))
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryInvite]);
    [v10 addEmbeddedMessages:v9];
  }

  v6[2](v6, v11, 0LL);
}

void sub_1000C5FCC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = *(void **)(a1 + 32);
  id v6 = a4;
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[PKSharingMessage embeddedMessageDictionaryForShareURL:targetDevice:]( PKSharingMessage,  "embeddedMessageDictionaryForShareURL:targetDevice:",  v6,  [a3 targetDevice]));

  [v5 addObject:v7];
}

void sub_1000C6040(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) primaryInvite]);
  id v7 = +[PKSharingRelayChannelDescriptor createChannelWithRegion:stateful:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "createChannelWithRegion:stateful:",  *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 72));
  id v8 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 136) handleForDescriptor:v7 queue:*(void *)(*(void *)(a1 + 48) + 88)]);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  id v14[2] = sub_1000C6160;
  v14[3] = &unk_1006413C0;
  uint64_t v19 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  id v15 = v6;
  id v16 = v8;
  id v17 = v10;
  id v18 = v5;
  id v11 = v5;
  id v12 = v8;
  id v13 = v6;
  sub_1000C5E14(v9, v12, v13, v14);
}

void sub_1000C6160(void *a1, void *a2, void *a3)
{
  id v11 = a2;
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(a1[8] + 8LL) + 40LL), a2);
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = a1[4];
  if (*(void *)(*(void *)(a1[8] + 8LL) + 40LL))
  {
    (*(void (**)(void, void, void, id, id, void))(v7 + 16))(a1[6], a1[4], a1[5], v11, v6, a1[7]);
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSError pkSharingError:](&OBJC_CLASS___NSError, "pkSharingError:", 12LL));
    (*(void (**)(uint64_t, uint64_t, uint64_t, void, void *, void))(v7 + 16))(v7, v9, v8, 0LL, v10, a1[7]);
  }
}

void sub_1000C6240(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(a1 + 40);
  id v4 = *(dispatch_queue_s **)(v2 + 88);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C6304;
  block[3] = &unk_100641438;
  uint64_t v12 = *(void *)(a1 + 72);
  void block[4] = v2;
  id v8 = v3;
  id v9 = *(id *)(a1 + 48);
  id v11 = *(id *)(a1 + 64);
  id v5 = *(id *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 80);
  id v10 = v5;
  uint64_t v13 = v6;
  dispatch_async(v4, block);
}

void sub_1000C6304(uint64_t a1)
{
  uint64_t v2 = *(id **)(a1 + 32);
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL))
  {
    id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
    uint64_t v4 = *(void *)(a1 + 48);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_1000C64B4;
    v16[3] = &unk_100641410;
    id v5 = *(id *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 72);
    id v17 = v5;
    uint64_t v18 = v6;
    [v2 revokeShareForPassIdentifier:v3 share:v4 shouldCascade:0 completion:v16];
  }

  else
  {
    uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v2[17] monitor]);
    [v7 scheduleNextCheckIfNeeded];

    id v8 = *(void **)(a1 + 48);
    if (v8) {
      sub_1000C5968(*(void *)(a1 + 32), v8, *(void **)(a1 + 56), *(void **)(a1 + 40));
    }
    if (*(void *)(a1 + 40))
    {
      id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 32) + 80LL));
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
      [WeakRetained sharesDidUpdateWithPaymentPassWithUniqueIdentifier:v10];
    }

    id v11 = objc_alloc(&OBJC_CLASS___PKCrossPlatformShareURL);
    uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) expectedPairedReaderIdentifier]);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 56) expectedProvisioningCredentialHash]);
    id v15 = [v11 initWithURL:v12 expectedPairedReaderIdentifier:v13 expectedProvisioningCredentialHash:v14];

    (*(void (**)(void))(*(void *)(a1 + 64) + 16LL))();
  }

uint64_t sub_1000C64B4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  0LL,  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL));
}

void sub_1000C64D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (!v4)
  {
    uint64_t v6 = objc_alloc_init(&OBJC_CLASS___PDShareURLDecorationConfiguration);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v9 = objc_opt_class(&OBJC_CLASS___PKSharingCarKeyInvitation, v8);
    if ((objc_opt_isKindOfClass(v7, v9) & 1) != 0)
    {
      uint64_t v11 = 2LL;
    }

    else
    {
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = objc_opt_class(&OBJC_CLASS___PKSharingPushProvisioningInvitation, v10);
      if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
      {
        uint64_t v11 = 1LL;
      }

      else
      {
        uint64_t v15 = *(void *)(a1 + 40);
        uint64_t v16 = objc_opt_class(&OBJC_CLASS___PKSharingHomeInvitation, v14);
        if ((objc_opt_isKindOfClass(v15, v16) & 1) == 0)
        {
LABEL_10:
          v18[0] = _NSConcreteStackBlock;
          v18[1] = 3221225472LL;
          void v18[2] = sub_1000C666C;
          v18[3] = &unk_1006414B0;
          void v18[4] = *(void *)(a1 + 32);
          id v17 = *(void **)(a1 + 48);
          id v19 = *(id *)(a1 + 56);
          [v17 universalShareURLWithDecoration:v6 completion:v18];

          goto LABEL_11;
        }

        uint64_t v11 = 3LL;
      }
    }

    -[PDShareURLDecorationConfiguration setVertical:](v6, "setVertical:", v11);
    goto LABEL_10;
  }

  id v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 88LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C6658;
  block[3] = &unk_1006396B0;
  id v22 = (PDShareURLDecorationConfiguration *)*(id *)(a1 + 56);
  id v21 = v4;
  dispatch_async(v5, block);

  uint64_t v6 = v22;
LABEL_11:
}

uint64_t sub_1000C6658(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_1000C666C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5) {
    BOOL v8 = v6 == 0LL;
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  uint64_t v10 = *(void **)(a1 + 40);
  uint64_t v11 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 88LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  id v14[2] = sub_1000C6738;
  v14[3] = &unk_100641488;
  id v16 = v6;
  id v17 = v10;
  char v18 = v9;
  id v15 = v5;
  id v12 = v7;
  id v13 = v5;
  dispatch_async(v11, v14);
}

uint64_t sub_1000C6738(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(_BYTE *)(a1 + 56)) {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v3 = 0LL;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v2 + 16))(v2, v3, *(void *)(a1 + 40));
}

void sub_1000C6858(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 secureElementPass]);

  if (!v3)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(void *)(a1 + 40);
      *(_DWORD *)id buf = 138412290;
      uint64_t v30 = v17;
      _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Tried to create share for %@ but unable to locate pass.",  buf,  0xCu);
    }

    uint64_t v18 = *(void *)(a1 + 64);
    id v19 = PKAddSecureElementPassErrorDomain;
    NSErrorUserInfoKey v37 = NSLocalizedDescriptionKey;
    id v38 = @"Unable to find pass";
    id v20 = &v38;
    id v21 = &v37;
    goto LABEL_12;
  }

  if (([*(id *)(a1 + 48) isEditable] & 1) == 0)
  {
    uint64_t v22 = PKLogFacilityTypeGetObject(33LL);
    uint64_t v23 = (os_log_s *)objc_claimAutoreleasedReturnValue(v22);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = *(void *)(a1 + 40);
      *(_DWORD *)id buf = 138412290;
      uint64_t v30 = v24;
      _os_log_impl( (void *)&_mh_execute_header,  v23,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Tried to update share for %@ but share isn't editable.",  buf,  0xCu);
    }

    uint64_t v18 = *(void *)(a1 + 64);
    id v19 = PKAddSecureElementPassErrorDomain;
    NSErrorUserInfoKey v35 = NSLocalizedDescriptionKey;
    BOOL v36 = @"Share not editable";
    id v20 = &v36;
    id v21 = &v35;
LABEL_12:
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v20,  v21,  1LL));
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  v19,  0LL,  v6));
    (*(void (**)(uint64_t, void, void *))(v18 + 16))(v18, 0LL, v12);
    goto LABEL_13;
  }

  id v4 = *(void **)(*(void *)(a1 + 32) + 24LL);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) identifier]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 passShareForIdentifier:v5]);

  uint64_t v7 = PKLogFacilityTypeGetObject(33LL);
  BOOL v8 = (os_log_s *)objc_claimAutoreleasedReturnValue(v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    *(_DWORD *)id buf = 138412802;
    uint64_t v30 = v9;
    __int16 v31 = 2112;
    id v32 = v6;
    __int16 v33 = 2112;
    uint64_t v34 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Attempting to update share for pass %@\n\n oldShare: %@\n\n newShare: %@",  buf,  0x20u);
  }

  uint64_t v11 = sub_1000C3BAC(*(char **)(a1 + 32), v3);
  id v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
  id v13 = *(void **)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_1000C6BAC;
  v25[3] = &unk_100641528;
  void v25[4] = *(void *)(a1 + 32);
  id v26 = v13;
  id v27 = *(id *)(a1 + 40);
  id v28 = *(id *)(a1 + 64);
  [v12 updateShare:v26 forPass:v3 authorization:v14 completion:v25];

LABEL_13:
}

void sub_1000C6BAC(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  if (a2)
  {
    uint64_t v7 = *(void *)(a1 + 32);
    BOOL v8 = *(void **)(a1 + 40);
    uint64_t v9 = *(dispatch_queue_s **)(v7 + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C6CB8;
    block[3] = &unk_100639350;
    void block[4] = v7;
    id v18 = v8;
    id v19 = *(id *)(a1 + 48);
    dispatch_async(v9, block);
  }

  uint64_t v10 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000C6D08;
  v13[3] = &unk_100641500;
  id v11 = *(id *)(a1 + 56);
  char v16 = a2;
  id v14 = v6;
  id v15 = v11;
  id v12 = v6;
  dispatch_async(v10, v13);
}

void sub_1000C6CB8(void *a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1[4] + 80LL));
  [WeakRetained sharesDidUpdateWithPaymentPassWithUniqueIdentifier:a1[6]];
}

uint64_t sub_1000C6D08(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 48),  *(void *)(a1 + 32));
}

void sub_1000C6EC8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 secureElementPass]);

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "pk_objectsPassingTest:", &stru_100641548));
    if ([v4 count])
    {
      id v5 = sub_1000C3BAC(*(char **)(a1 + 32), v3);
      id v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v19[0] = _NSConcreteStackBlock;
      v19[2] = sub_1000C71CC;
      v19[3] = &unk_100641598;
      uint64_t v7 = *(void **)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      void v19[4] = *(void *)(a1 + 32);
      uint64_t v9 = *(unsigned __int8 *)(a1 + 64);
      v19[1] = 3221225472LL;
      id v20 = v7;
      id v21 = *(id *)(a1 + 56);
      [v6 revokeShares:v8 forPass:v3 shouldCascade:v9 completion:v19];
    }

    else
    {
      uint64_t Object = PKLogFacilityTypeGetObject(33LL);
      id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = *(void *)(a1 + 40);
        *(_DWORD *)id buf = 138412290;
        uint64_t v27 = v16;
        _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Tried to revoke shares for %@ but shares aren't revokable.",  buf,  0xCu);
      }

      uint64_t v17 = *(void *)(a1 + 56);
      NSErrorUserInfoKey v22 = NSLocalizedDescriptionKey;
      uint64_t v23 = @"Share not manageable";
      id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v23,  &v22,  1LL));
      id v18 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  0LL,  v6));
      (*(void (**)(uint64_t, void, void *))(v17 + 16))(v17, 0LL, v18);
    }
  }

  else
  {
    uint64_t v10 = PKLogFacilityTypeGetObject(33LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)id buf = 138412290;
      uint64_t v27 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Tried to revoke share for %@ but unable to locate pass.",  buf,  0xCu);
    }

    uint64_t v13 = *(void *)(a1 + 56);
    NSErrorUserInfoKey v24 = NSLocalizedDescriptionKey;
    uint64_t v25 = @"Unable to find pass";
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v25,  &v24,  1LL));
    id v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  0LL,  v4));
    (*(void (**)(uint64_t, void, void *))(v13 + 16))(v13, 0LL, v6);
  }
}

BOOL sub_1000C71C4(id a1, PKPassShare *a2, unint64_t a3, BOOL *a4)
{
  return -[PKPassShare isRevokable](a2, "isRevokable", a3, a4);
}

void sub_1000C71CC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  BOOL v10 = ([v7 count] || objc_msgSend(v8, "count")) && v9 == 0;
  id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 88LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C734C;
  block[3] = &unk_100641570;
  BOOL v30 = v10;
  id v12 = v9;
  id v25 = v12;
  id v26 = v7;
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = *(void **)(a1 + 40);
  id v27 = v8;
  uint64_t v28 = v13;
  id v29 = v14;
  id v15 = v8;
  id v16 = v7;
  dispatch_async(v11, block);
  uint64_t v17 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472LL;
  v20[2] = sub_1000C75A8;
  v20[3] = &unk_100641500;
  BOOL v23 = v10;
  id v18 = *(id *)(a1 + 48);
  id v21 = v12;
  id v22 = v18;
  id v19 = v12;
  dispatch_async(v17, v20);
}

void sub_1000C734C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_BYTE *)(a1 + 72)) {
      id v4 = @"Yes";
    }
    else {
      id v4 = @"No";
    }
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    *(_DWORD *)id buf = 138413058;
    id v32 = v4;
    __int16 v33 = 2112;
    uint64_t v34 = v5;
    __int16 v35 = 2112;
    uint64_t v36 = v6;
    __int16 v37 = 2112;
    uint64_t v38 = v7;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: revoked shares with success: %@, %@ \n\nUpdated Shares: %@\n\nRevoked Shares: %@",  buf,  0x2Au);
  }

  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v25 = 0u;
  __int128 v26 = 0u;
  id v8 = *(id *)(a1 + 40);
  id v9 = [v8 countByEnumeratingWithState:&v25 objects:v30 count:16];
  if (v9)
  {
    id v10 = v9;
    uint64_t v11 = *(void *)v26;
    do
    {
      id v12 = 0LL;
      do
      {
        if (*(void *)v26 != v11) {
          objc_enumerationMutation(v8);
        }
        [*(id *)(*(void *)(a1 + 56) + 24) addPassShare:*(void *)(*((void *)&v25 + 1) + 8 * (void)v12) forPassUniqueIdentifier:*(void *)(a1 + 64)];
        id v12 = (char *)v12 + 1;
      }

      while (v10 != v12);
      id v10 = [v8 countByEnumeratingWithState:&v25 objects:v30 count:16];
    }

    while (v10);
  }

  __int128 v23 = 0u;
  __int128 v24 = 0u;
  __int128 v21 = 0u;
  __int128 v22 = 0u;
  id v13 = *(id *)(a1 + 48);
  id v14 = [v13 countByEnumeratingWithState:&v21 objects:v29 count:16];
  if (v14)
  {
    id v15 = v14;
    uint64_t v16 = *(void *)v22;
    do
    {
      uint64_t v17 = 0LL;
      do
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v13);
        }
        id v18 = *(void **)(*(void *)(a1 + 56) + 24LL);
        id v19 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*((void *)&v21 + 1) + 8 * (void)v17), "identifier", (void)v21));
        [v18 deletePassShareWithIdentifier:v19];

        uint64_t v17 = (char *)v17 + 1;
      }

      while (v15 != v17);
      id v15 = [v13 countByEnumeratingWithState:&v21 objects:v29 count:16];
    }

    while (v15);
  }

  id WeakRetained = objc_loadWeakRetained((id *)(*(void *)(a1 + 56) + 80LL));
  [WeakRetained sharesDidUpdateWithPaymentPassWithUniqueIdentifier:*(void *)(a1 + 64)];
}

void sub_1000C75A8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 48))
  {
    uint64_t v1 = *(void *)(a1 + 40);
    uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16);
    uint64_t v3 = 1LL;
    uint64_t v4 = 0LL;
LABEL_5:
    v2(v1, v3, v4);
    return;
  }

  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  if (v4)
  {
    uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    uint64_t v1 = *(void *)(a1 + 40);
    uint64_t v3 = 0LL;
    goto LABEL_5;
  }

  id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  0LL,  0LL));
  (*(void (**)(uint64_t, void, id))(v5 + 16))(v5, 0LL, v6);
}

void sub_1000C76F0(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) typeDescription]);
    *(_DWORD *)id buf = 138412290;
    id v14 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: creating single use share url for message type %@",  buf,  0xCu);
  }

  id v5 = +[PKSharingRelayChannelDescriptor createChannelWithRegion:stateful:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "createChannelWithRegion:stateful:",  &stru_100662310,  0LL);
  id v6 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 136) handleForDescriptor:v5 queue:*(void *)(*(void *)(a1 + 40) + 88)]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000C7854;
  v10[3] = &unk_10063EC68;
  uint64_t v7 = *(void *)(a1 + 32);
  void v10[4] = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v11 = v6;
  id v12 = v8;
  id v9 = v6;
  [v9 sendMessage:v7 completion:v10];
}

void sub_1000C7854(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (v5 || (a2 & 1) == 0)
  {
    id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C7954;
    block[3] = &unk_1006396B0;
    id v13 = *(id *)(a1 + 48);
    id v12 = v5;
    dispatch_async(v8, block);

    uint64_t v7 = v13;
  }

  else
  {
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    id v9[2] = sub_1000C7968;
    v9[3] = &unk_1006414B0;
    id v6 = *(void **)(a1 + 40);
    void v9[4] = *(void *)(a1 + 32);
    id v10 = *(id *)(a1 + 48);
    [v6 universalShareURLWithDecoration:0 completion:v9];
    uint64_t v7 = v10;
  }
}

uint64_t sub_1000C7954(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  *(void *)(a1 + 32));
}

void sub_1000C7968(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5) {
    BOOL v8 = v6 == 0LL;
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = v8;
  id v10 = *(void **)(a1 + 40);
  id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  id v14[2] = sub_1000C7A34;
  v14[3] = &unk_100641488;
  id v16 = v6;
  id v17 = v10;
  char v18 = v9;
  id v15 = v5;
  id v12 = v7;
  id v13 = v5;
  dispatch_async(v11, v14);
}

uint64_t sub_1000C7A34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (*(_BYTE *)(a1 + 56)) {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v3 = 0LL;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v2 + 16))(v2, v3, *(void *)(a1 + 40));
}

id sub_1000C7BB0(uint64_t a1)
{
  id result = [*(id *)(*(void *)(a1 + 32) + 24) activeExternalPassSharesExist];
  *(_BYTE *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_1000C7C8C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) passSharesForPassUniqueIdentifier:*(void *)(a1 + 40)]);
  uint64_t v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472LL;
  id v6[2] = sub_1000C7D34;
  v6[3] = &unk_1006396B0;
  id v4 = *(id *)(a1 + 48);
  id v7 = v2;
  id v8 = v4;
  id v5 = v2;
  dispatch_async(v3, v6);
}

uint64_t sub_1000C7D34(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1000C7DF4(void *a1)
{
  else {
    uint64_t result = PKShowLocalPassShares();
  }
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = result;
  return result;
}

id sub_1000C7EE8(void *a1)
{
  id result = [*(id *)(a1[4] + 24) hasShareablePassEntitlementsForPassUniqueIdentifier:a1[5]];
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = (_BYTE)result;
  return result;
}

void sub_1000C7FF0(void *a1)
{
  uint64_t v2 = objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) passEntitlementsForPassUniqueIdentifier:a1[5]]);
  uint64_t v3 = *(void *)(a1[6] + 8LL);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000C80D4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 secureElementPass]);

  if (v3)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 24) passSharesForPassUniqueIdentifier:*(void *)(a1 + 40)]);
    id v5 = v4;
    uint64_t v6 = *(void *)(a1 + 32);
    if (v4)
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      id v15[2] = sub_1000C830C;
      v15[3] = &unk_1006415C0;
      id v7 = (id *)v16;
      id v8 = v4;
      uint64_t v9 = *(void *)(a1 + 32);
      v16[0] = v8;
      v16[1] = v9;
      id v17 = *(id *)(a1 + 48);
      sub_1000C46B4(v6, v3, v15);
    }

    else
    {
      id v14 = *(dispatch_queue_s **)(v6 + 96);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472LL;
      void v18[2] = sub_1000C82FC;
      v18[3] = &unk_10063A830;
      id v7 = &v19;
      id v19 = *(id *)(a1 + 48);
      dispatch_async(v14, v18);
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 40);
      *(_DWORD *)id buf = 138412290;
      uint64_t v23 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Tried to render displayable entitlements for pass %@ but unable to locate pass.",  buf,  0xCu);
    }

    id v13 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C82EC;
    block[3] = &unk_10063A830;
    id v21 = *(id *)(a1 + 48);
    dispatch_async(v13, block);
    id v5 = v21;
  }
}

uint64_t sub_1000C82EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

uint64_t sub_1000C82FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C830C(uint64_t a1, void *a2)
{
  id v3 = a2;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  __int128 v17 = 0u;
  id v4 = *(id *)(a1 + 32);
  id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    id v6 = v5;
    uint64_t v7 = *(void *)v15;
    do
    {
      id v8 = 0LL;
      do
      {
        if (*(void *)v15 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(*((void *)&v14 + 1) + 8 * (void)v8) updateDisplayableSharedEntitlementsFromDisplayableEntitlements:v3];
        id v8 = (char *)v8 + 1;
      }

      while (v6 != v8);
      id v6 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }

    while (v6);
  }

  uint64_t v9 = *(void **)(a1 + 48);
  id v10 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 96LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_1000C8474;
  void v11[3] = &unk_1006396B0;
  id v13 = v9;
  id v12 = *(id *)(a1 + 32);
  dispatch_async(v10, v11);
}

uint64_t sub_1000C8474(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

void sub_1000C852C(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([v2 secureElementPass]);

  if (v3)
  {
    sub_1000C46B4(*(void *)(a1 + 32), v3, *(void **)(a1 + 48));
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      *(_DWORD *)id buf = 138412290;
      uint64_t v11 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Tried to render displayable entitlements for pass %@ but unable to locate pass.",  buf,  0xCu);
    }

    uint64_t v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C8670;
    block[3] = &unk_10063A830;
    id v9 = *(id *)(a1 + 48);
    dispatch_async(v7, block);
  }
}

uint64_t sub_1000C8670(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000C8680(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v4 = a2;
  if ([v4 count]) {
    id v3 = v4;
  }
  else {
    id v3 = 0LL;
  }
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000C8758(void *a1)
{
  __int128 v7 = 0u;
  __int128 v8 = 0u;
  __int128 v9 = 0u;
  __int128 v10 = 0u;
  id v2 = *(id *)(a1[4] + 128LL);
  id v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        objc_msgSend( *(id *)(*((void *)&v7 + 1) + 8 * (void)v6),  "userNotificationActionPerformed:notificationIdentifier:",  a1[6],  a1[5],  (void)v7);
        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }

    while (v4);
  }
}

void sub_1000C884C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  __int128 v7 = v6;
  if (a1)
  {
    __int128 v8 = *(dispatch_queue_s **)(a1 + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C88F4;
    block[3] = &unk_100639350;
    id v10 = v6;
    id v11 = v5;
    uint64_t v12 = a1;
    dispatch_async(v8, block);
  }
}

void sub_1000C88F4(void *a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = PKSharingLoggableMailboxAddress(a1[4]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    uint64_t v6 = a1[5];
    *(_DWORD *)id buf = 138412547;
    __int128 v17 = v5;
    __int16 v18 = 2113;
    uint64_t v19 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Handling outstanding continuity discovery request message on %@ \n\n %{private}@",  buf,  0x16u);
  }

  id v7 = +[PKSharingExistingChannelDescriptor existingForTransportIdentifier:]( &OBJC_CLASS___PKSharingExistingChannelDescriptor,  "existingForTransportIdentifier:",  a1[4]);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[6] + 136) handleForDescriptor:v7 queue:*(void *)(a1[6] + 88)]);
  __int128 v9 = -[PDProvisioningContinuityHostManager initWithHandle:databaseManager:remoteInterfacePresenter:notificationManager:]( objc_alloc(&OBJC_CLASS___PDProvisioningContinuityHostManager),  "initWithHandle:databaseManager:remoteInterfacePresenter:notificationManager:",  v8,  *(void *)(a1[6] + 24LL),  *(void *)(a1[6] + 64LL),  *(void *)(a1[6] + 32LL));
  objc_initWeak((id *)buf, v9);
  id v10 = _NSConcreteStackBlock;
  uint64_t v11 = 3221225472LL;
  uint64_t v12 = sub_1000C8AD8;
  id v13 = &unk_1006393A0;
  objc_copyWeak(&v15, (id *)buf);
  uint64_t v14 = a1[6];
  -[PDProvisioningContinuityHostManager setInvalidationHandler:](v9, "setInvalidationHandler:", &v10);
  objc_msgSend(*(id *)(a1[6] + 128), "addObject:", v9, v10, v11, v12, v13);
  objc_destroyWeak(&v15);
  objc_destroyWeak((id *)buf);
}

void sub_1000C8AB0( _Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
}

void sub_1000C8AD8(uint64_t a1)
{
  id v2 = objc_loadWeakRetained(&to);

  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(dispatch_queue_s **)(v3 + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C8B84;
    block[3] = &unk_100641610;
    void block[4] = v3;
    objc_copyWeak(&v6, &to);
    dispatch_async(v4, block);
    objc_destroyWeak(&v6);
  }

  objc_destroyWeak(&to);
}

void sub_1000C8B84(uint64_t a1)
{
  uint64_t v1 = *(void **)(*(void *)(a1 + 32) + 128LL);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  [v1 removeObject:WeakRetained];
}

void sub_1000C8BE0(uint64_t a1, void *a2, char a3, void *a4, char a5, void *a6)
{
  id v11 = a2;
  id v12 = a4;
  id v13 = a6;
  if (a1)
  {
    [*(id *)(a1 + 8) passAddedOrUpdated:v11];
    uint64_t v14 = *(dispatch_queue_s **)(a1 + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C8DB4;
    block[3] = &unk_100641638;
    id v16 = v11;
    uint64_t v17 = a1;
    id v18 = v12;
    id v19 = v13;
    char v20 = a3;
    char v21 = a5;
    dispatch_async(v14, block);
  }
}

void sub_1000C8DB4(uint64_t a1)
{
  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) passSharesForPassUniqueIdentifier:v2]);
  uint64_t v4 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) passEntitlementsForPassUniqueIdentifier:v2]);
  id v5 = (void *)v4;
  if (v3 || *(void *)(a1 + 48) | v4 || *(void *)(a1 + 56))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueID]);
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *(void *)(a1 + 56);
      int v12 = 138413314;
      id v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v9;
      __int16 v16 = 2112;
      uint64_t v17 = v3;
      __int16 v18 = 2112;
      uint64_t v19 = v10;
      __int16 v20 = 2112;
      char v21 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Handling pass update and checking notifications for %@. \n \n Old Shares: %@ \n \n New Shares: %@ \n \n Old Entitlements: %@ \n \n New Entitlements: %@",  (uint8_t *)&v12,  0x34u);
    }

    if (*(_BYTE *)(a1 + 64)) {
      [*(id *)(*(void *)(a1 + 40) + 40) sendShareChangeNotificationsForPass:*(void *)(a1 + 32) oldShares:*(void *)(a1 + 48) newShares:v3];
    }
    if (*(_BYTE *)(a1 + 65)) {
      objc_msgSend( *(id *)(*(void *)(a1 + 40) + 40),  "sendEntitlementChangeNotificationsForPass:oldEntitlements:newEntitlements:hasExistingShares:",  *(void *)(a1 + 32),  *(void *)(a1 + 56),  v5,  objc_msgSend(*(id *)(a1 + 48), "count") != 0);
    }
    id v11 = objc_alloc_init(&OBJC_CLASS___PKMAEntitlementTemplateManager);
    [v11 entitlementTemplates:0];
  }
}

void sub_1000C8FF8(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 24LL);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue([v2 passSharesForPassUniqueIdentifier:v3]);

  if (v4 && [v4 count])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 134349056;
      id v33 = [v4 count];
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: removing %{public}lu shares because of pass deletion",  buf,  0xCu);
    }

    __int128 v28 = 0u;
    __int128 v29 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    uint64_t v19 = v4;
    obuint64_t j = v4;
    id v7 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v21 = *(void *)v27;
      do
      {
        uint64_t v9 = 0LL;
        do
        {
          if (*(void *)v27 != v21) {
            objc_enumerationMutation(obj);
          }
          uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v26 + 1) + 8 * (void)v9) credentialShares]);
          id v11 = v10;
          if (v10)
          {
            __int128 v24 = 0u;
            __int128 v25 = 0u;
            __int128 v22 = 0u;
            __int128 v23 = 0u;
            id v12 = [v10 countByEnumeratingWithState:&v22 objects:v30 count:16];
            if (v12)
            {
              id v13 = v12;
              uint64_t v14 = *(void *)v23;
              do
              {
                uint64_t v15 = 0LL;
                do
                {
                  if (*(void *)v23 != v14) {
                    objc_enumerationMutation(v11);
                  }
                  __int16 v16 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v22 + 1) + 8 * (void)v15) channelTransportIdentifier]);
                  id v17 = +[PKSharingRelayChannelDescriptor existingChannelForMailboxIdentifier:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForMailboxIdentifier:",  v16);

                  __int16 v18 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 136) handleForDescriptor:v17 queue:*(void *)(*(void *)(a1 + 32) + 88)]);
                  sub_1000C346C(*(void *)(a1 + 32), v18);

                  uint64_t v15 = (char *)v15 + 1;
                }

                while (v13 != v15);
                id v13 = [v11 countByEnumeratingWithState:&v22 objects:v30 count:16];
              }

              while (v13);
            }
          }

          uint64_t v9 = (char *)v9 + 1;
        }

        while (v9 != v8);
        id v8 = [obj countByEnumeratingWithState:&v26 objects:v31 count:16];
      }

      while (v8);
    }

    uint64_t v4 = v19;
  }
}

void sub_1000C934C(uint64_t a1)
{
  if (*(void *)(a1 + 32) && *(void *)(a1 + 40))
  {
    id v2 = +[PKSharingExistingChannelDescriptor existingForTransportIdentifier:]( &OBJC_CLASS___PKSharingExistingChannelDescriptor,  "existingForTransportIdentifier:");
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 48);
    id v5 = *(void **)(v3 + 136);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000C949C;
    v8[3] = &unk_10063B468;
    void v8[4] = v3;
    id v9 = *(id *)(a1 + 56);
    [v5 sendMessageToDescriptor:v2 message:v4 completion:v8];
  }

  else
  {
    id v6 = *(void **)(a1 + 56);
    id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 96LL);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000C944C;
    block[3] = &unk_10063A830;
    id v11 = v6;
    dispatch_async(v7, block);
    id v2 = v11;
  }
}

void sub_1000C944C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = PDBasicError(@"PDSharingManager: sendSharingMessageTo missing required parameter");
  id v3 = (id)objc_claimAutoreleasedReturnValue(v2);
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0LL, v3);
}

void sub_1000C949C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  id v6 = *(void **)(a1 + 40);
  id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C953C;
  block[3] = &unk_100641500;
  char v12 = a2;
  id v10 = v5;
  id v11 = v6;
  id v8 = v5;
  dispatch_async(v7, block);
}

uint64_t sub_1000C953C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(unsigned __int8 *)(a1 + 48),  *(void *)(a1 + 32));
}

void sub_1000C9688(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000C9744;
  block[3] = &unk_10063C6A8;
  id v13 = v6;
  id v14 = v7;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(v8, block);
}

uint64_t sub_1000C9744(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16LL))(a1[6], a1[4], a1[5]);
}

void sub_1000C9758(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 40) + 24), "transportIdentifierForSharingMessage:"));
    if (v2
      && (uint64_t v3 = objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) sharingEndpointForTransportIdentifier:v2])) != 0)
    {
      uint64_t v4 = (void *)v3;
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      id v14[2] = sub_1000C98F4;
      v14[3] = &unk_100641688;
      void v14[4] = *(void *)(a1 + 40);
      id v15 = *(id *)(a1 + 64);
      id v5 = objc_retainBlock(v14);
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) passShareForTransportIdentifier:v2]);
      id v7 = *(id **)(a1 + 40);
      if (v6) {
        sub_1000C9A6C(v7, v6, *(void **)(a1 + 32), v4, *(void **)(a1 + 48), v5);
      }
      else {
        sub_1000C9D74(v7, *(void **)(a1 + 32), v4, *(void **)(a1 + 48), v5);
      }
    }

    else
    {
      uint64_t v8 = *(void *)(a1 + 56);
      uint64_t v9 = PDBasicError(@"PDSharingManager: Unable to find endpoint for message");
      id v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      (*(void (**)(uint64_t, void, void *))(v8 + 16))(v8, 0LL, v10);
    }
  }

  else
  {
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = PDBasicError(@"PDSharingManager: Unable to accept nil message");
    id v13 = (id)objc_claimAutoreleasedReturnValue(v12);
    (*(void (**)(uint64_t, void, id))(v11 + 16))(v11, 0LL, v13);
  }

void sub_1000C98F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = *(void **)(a1 + 40);
  uint64_t v11 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_1000C99D4;
  v15[3] = &unk_10063CD10;
  id v16 = v9;
  id v18 = v7;
  id v19 = v10;
  id v17 = v8;
  id v12 = v7;
  id v13 = v8;
  id v14 = v9;
  dispatch_async(v11, v15);
}

void sub_1000C99D4(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    uint64_t v3 = objc_alloc_init(&OBJC_CLASS___PKCarShareAcceptanceResponse);
    -[PKCarShareAcceptanceResponse setSubcredential:](v3, "setSubcredential:", *(void *)(a1 + 40));
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uniqueID]);
    -[PKCarShareAcceptanceResponse setPassUniqueIdentifier:](v3, "setPassUniqueIdentifier:", v2);

    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

void sub_1000C9A6C(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (a1)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v17 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      if (v18)
      {
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
        __int16 v20 = (void *)objc_claimAutoreleasedReturnValue([v13 transportIdentifier]);
        uint64_t v21 = PKSharingLoggableMailboxAddress(v20);
        __int128 v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        *(_DWORD *)id buf = 138412546;
        uint64_t v34 = v19;
        __int16 v35 = 2112;
        uint64_t v36 = v22;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Attempting to retry activation code for share %@ on transportIdentifier %@",  buf,  0x16u);
      }

      [a1[1] userDidEnterActivationCodeForShare:v11 activationCode:v14];
      __int128 v23 = objc_alloc_init(&OBJC_CLASS___PDSharingStatefulProvisioningOperation);
      __int128 v24 = (void *)objc_claimAutoreleasedReturnValue([v13 transportIdentifier]);
      -[PDSharingStatefulProvisioningOperation setTransportIdentifier:](v23, "setTransportIdentifier:", v24);

      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
      -[PDSharingStatefulProvisioningOperation setShareIdentifier:](v23, "setShareIdentifier:", v25);

      -[PDSharingStatefulProvisioningOperation setIsForegroundOperation:](v23, "setIsForegroundOperation:", 1LL);
      -[PDSharingStatefulProvisioningOperation setRequiresSenderActivationVerification:]( v23,  "setRequiresSenderActivationVerification:",  1LL);
      v31[0] = _NSConcreteStackBlock;
      v31[1] = 3221225472LL;
      void v31[2] = sub_1000CA55C;
      void v31[3] = &unk_1006417A0;
      id v32 = v15;
      -[PDSharingStatefulProvisioningOperation setCompletion:](v23, "setCompletion:", v31);
      [a1[1] addOperation:v23];
      __int128 v26 = sub_1000C388C(a1, v12);
      __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472LL;
      id v28[2] = sub_1000CA604;
      v28[3] = &unk_1006417C8;
      void v28[4] = a1;
      id v29 = v11;
      id v30 = v13;
      [v27 retryActivationCodeForShare:v29 activationCode:v14 completion:v28];
    }

    else
    {
      if (v18)
      {
        *(_WORD *)id buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v17,  OS_LOG_TYPE_DEFAULT,  "Attempted to retry activation code, but no code provided",  buf,  2u);
      }

      __int128 v23 = (PDSharingStatefulProvisioningOperation *)objc_claimAutoreleasedReturnValue( +[NSError pkSharingError:]( &OBJC_CLASS___NSError,  "pkSharingError:",  2LL));
      (*((void (**)(id, void, void, PDSharingStatefulProvisioningOperation *))v15 + 2))( v15,  0LL,  0LL,  v23);
    }
  }
}

void sub_1000C9D74(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  if (a1)
  {
    id v13 = sub_1000C388C(a1, v9);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v10 transportIdentifier]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1000C9EB8;
    v17[3] = &unk_100641778;
    void v17[4] = a1;
    id v22 = v12;
    id v18 = v10;
    id v19 = v14;
    id v20 = v9;
    id v21 = v11;
    id v16 = v14;
    [v16 acceptStatefulSharingMessage:v20 transportIdentifier:v15 activationCode:v21 completion:v17];
  }
}

void sub_1000C9EB8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  if (v6)
  {
    id v8 = (dispatch_queue_s *)v7[12];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000CA054;
    block[3] = &unk_1006396B0;
    id v21 = *(id *)(a1 + 72);
    id v20 = v6;
    dispatch_async(v8, block);

    id v9 = v21;
  }

  else
  {
    id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transportIdentifier]);
    id v11 = (void *)objc_claimAutoreleasedReturnValue([v5 keySignRequestMessage]);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000CA06C;
    void v12[3] = &unk_100641750;
    void v12[4] = *(void *)(a1 + 32);
    id v13 = *(id *)(a1 + 48);
    id v14 = *(id *)(a1 + 56);
    id v18 = *(id *)(a1 + 72);
    id v15 = v5;
    id v16 = *(id *)(a1 + 64);
    id v17 = *(id *)(a1 + 40);
    [v7 sendSharingMessageTo:v10 message:v11 completion:v12];

    id v9 = v13;
  }
}

uint64_t sub_1000CA054(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  0LL,  *(void *)(a1 + 32));
}

void sub_1000CA06C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = *(void **)(a1 + 40);
  id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 88LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000CA170;
  v10[3] = &unk_100641728;
  id v11 = v4;
  id v12 = v5;
  id v7 = *(id *)(a1 + 48);
  uint64_t v8 = *(void *)(a1 + 32);
  id v13 = v7;
  uint64_t v14 = v8;
  id v18 = *(id *)(a1 + 80);
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v17 = *(id *)(a1 + 72);
  id v9 = v4;
  dispatch_async(v6, v10);
}

void sub_1000CA170(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Failed to put accept share message!", buf, 2u);
    }

    id v4 = *(void **)(a1 + 40);
    uint64_t v5 = *(void *)(a1 + 48);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1000CA3D4;
    v20[3] = &unk_1006416D8;
    void v20[4] = *(void *)(a1 + 56);
    id v21 = *(id *)(a1 + 88);
    [v4 rejectInvitation:v5 completion:v20];
    id v6 = v21;
  }

  else
  {
    id v7 = *(void **)(*(void *)(a1 + 56) + 8LL);
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) localAcceptedShare]);
    [v7 userDidEnterActivationCodeForShare:v8 activationCode:*(void *)(a1 + 72)];

    if ([*(id *)(a1 + 64) shouldWaitForResponse])
    {
      id v9 = objc_alloc_init(&OBJC_CLASS___PDSharingStatefulProvisioningOperation);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 80) transportIdentifier]);
      -[PDSharingStatefulProvisioningOperation setTransportIdentifier:](v9, "setTransportIdentifier:", v10);

      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 64) localAcceptedShare]);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 identifier]);
      -[PDSharingStatefulProvisioningOperation setShareIdentifier:](v9, "setShareIdentifier:", v12);

      -[PDSharingStatefulProvisioningOperation setIsForegroundOperation:](v9, "setIsForegroundOperation:", 1LL);
      -[PDSharingStatefulProvisioningOperation setRequiresSenderActivationVerification:]( v9,  "setRequiresSenderActivationVerification:",  1LL);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      void v17[2] = sub_1000CA49C;
      v17[3] = &unk_100641700;
      id v19 = *(id *)(a1 + 88);
      id v18 = *(id *)(a1 + 64);
      -[PDSharingStatefulProvisioningOperation setCompletion:](v9, "setCompletion:", v17);
      [*(id *)(*(void *)(a1 + 56) + 8) addOperation:v9];

      return;
    }

    id v13 = *(dispatch_queue_s **)(*(void *)(a1 + 56) + 96LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    id v14[2] = sub_1000CA510;
    v14[3] = &unk_1006396B0;
    id v16 = *(id *)(a1 + 88);
    id v15 = *(id *)(a1 + 64);
    dispatch_async(v13, v14);

    id v6 = v16;
  }
}

void sub_1000CA3D4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v2 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000CA444;
  block[3] = &unk_10063A830;
  id v4 = v1;
  dispatch_async(v2, block);
}

void sub_1000CA444(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = (id)objc_claimAutoreleasedReturnValue(+[NSError pkSharingError:](&OBJC_CLASS___NSError, "pkSharingError:", 6LL));
  (*(void (**)(uint64_t, void, void, id))(v1 + 16))(v1, 0LL, 0LL, v2);
}

void sub_1000CA49C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v6 = a3;
  id v7 = a2;
  id v8 = (id)objc_claimAutoreleasedReturnValue([v5 subcredential]);
  (*(void (**)(uint64_t, id, id, id))(v4 + 16))(v4, v7, v8, v6);
}

void sub_1000CA510(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) subcredential]);
  (*(void (**)(uint64_t, void, id, void))(v1 + 16))(v1, 0LL, v2, 0LL);
}

void sub_1000CA55C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = *(void *)(a1 + 32);
  id v10 = v5;
  if (v5)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 devicePrimaryPaymentApplication]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 subcredentials]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 anyObject]);
    (*(void (**)(uint64_t, id, void *, void))(v6 + 16))(v6, v10, v9, 0LL);
  }

  else
  {
    (*(void (**)(uint64_t, void, void, uint64_t))(v6 + 16))(v6, 0LL, 0LL, a3);
  }
}

void sub_1000CA604(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = *(void **)(*(void *)(a1 + 32) + 8LL);
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) transportIdentifier]);
    [v3 didReceiverActivationCodeFailureForShare:v2 attemptsRemaining:1 transportIdentifier:v4];
  }

void sub_1000CA778(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 24) passSharesForSubcredentialIdentifier:a1[5]]);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([v2 firstObject]);

  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 credentialShares]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 firstObject]);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v5 channelTransportIdentifier]);

  if (v3) {
    BOOL v7 = v6 == 0LL;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = a1[5];
      int v11 = 138412290;
      uint64_t v12 = v10;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Received activation code failure, but unable to find share or transport identifier for credential: %@",  (uint8_t *)&v11,  0xCu);
    }
  }

  else
  {
    [*(id *)(a1[4] + 8) didReceiverActivationCodeFailureForShare:v3 attemptsRemaining:a1[6] transportIdentifier:v6];
  }
}

void sub_1000CA95C(uint64_t a1)
{
  uint64_t v2 = sub_1000CAA04(*(void *)(a1 + 32), *(void **)(a1 + 40));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  id v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 96LL);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000CAC90;
  v7[3] = &unk_1006396B0;
  id v5 = *(id *)(a1 + 48);
  id v8 = v3;
  id v9 = v5;
  id v6 = v3;
  dispatch_async(v4, v7);
}

PKPassSharePendingActivation *sub_1000CAA04(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 8) operations]);
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472LL;
    void v17[2] = sub_1000CACA0;
    v17[3] = &unk_1006417F0;
    id v5 = v3;
    id v18 = v5;
    id v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pk_firstObjectPassingTest:", v17));

    if (v6)
    {
      BOOL v7 = *(void **)(a1 + 24);
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v6 transportIdentifier]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 sharingMessagesForTransportIdentifier:v8]);

      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "pk_firstObjectPassingTest:", &stru_100641830));
      if (v10)
      {
        int v11 = objc_alloc_init(&OBJC_CLASS___PKPassSharePendingActivation);
        -[PKPassSharePendingActivation setShareIdentifier:](v11, "setShareIdentifier:", v5);
        -[PKPassSharePendingActivation setOriginalInvitation:](v11, "setOriginalInvitation:", v10);
        -[PKPassSharePendingActivation setIsWaitingOnUserAction:]( v11,  "setIsWaitingOnUserAction:",  [v6 isWaitingOnUserAction]);
        uint64_t Object = PKLogFacilityTypeGetObject(33LL);
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 138412546;
          id v20 = v5;
          __int16 v21 = 2112;
          id v22 = v11;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Found pending activation for shareIdentifier %@ \n\n %@",  buf,  0x16u);
        }
      }

      else
      {
        uint64_t v15 = PKLogFacilityTypeGetObject(33LL);
        id v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v15);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)id buf = 138412290;
          id v20 = v5;
          _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: unable to find original invitation for shareIdentifier %@",  buf,  0xCu);
        }

        int v11 = 0LL;
      }
    }

    else
    {
      uint64_t v14 = PKLogFacilityTypeGetObject(33LL);
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v14);
      if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id buf = 138412290;
        id v20 = v5;
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v9,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: unable to find active stateful share for shareIdentifier %@",  buf,  0xCu);
      }

      int v11 = 0LL;
    }
  }

  else
  {
    int v11 = 0LL;
  }

  return v11;
}

uint64_t sub_1000CAC90(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

uint64_t sub_1000CACA0(uint64_t a1, void *a2)
{
  id v3 = (void *)objc_claimAutoreleasedReturnValue([a2 shareIdentifier]);
  id v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  BOOL v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v8 = 0LL;
    if (v5 && v6) {
      uint64_t v8 = (uint64_t)[v5 isEqualToString:v6];
    }
  }

  return v8;
}

BOOL sub_1000CAD20(id a1, PKSharingMessage *a2)
{
  return -[PKSharingMessage type](a2, "type") == (id)1;
}

void sub_1000CADBC(uint64_t a1)
{
  uint64_t v2 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  id v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "pendingShares", 0));
  id v4 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v13;
    do
    {
      BOOL v7 = 0LL;
      do
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*((void *)&v12 + 1) + 8 * (void)v7) subcredentialIdentifier]);
        if (v8)
        {
          id v9 = -[PKAppletSubcredential initWithIdentifier:]( objc_alloc(&OBJC_CLASS___PKAppletSubcredential),  "initWithIdentifier:",  v8);
          -[PKAppletSubcredential setState:](v9, "setState:", 2LL);
          -[NSMutableArray addObject:](v2, "addObject:", v9);
        }

        BOOL v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }

    while (v5);
  }

  uint64_t v10 = *(void *)(a1 + 40);
  if (-[NSMutableArray count](v2, "count"))
  {
    id v11 = -[NSMutableArray copy](v2, "copy");
    (*(void (**)(uint64_t, id))(v10 + 16))(v10, v11);
  }

  else
  {
    (*(void (**)(uint64_t, void))(v10 + 16))(v10, 0LL);
  }
}

void sub_1000CB000(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) pendingShares]);
  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v36 = 0u;
  __int128 v37 = 0u;
  obuint64_t j = v2;
  id v3 = [obj countByEnumeratingWithState:&v34 objects:v40 count:16];
  if (!v3)
  {
LABEL_15:

    goto LABEL_21;
  }

  id v4 = v3;
  uint64_t v5 = *(void *)v35;
  uint64_t v6 = &OBJC_CLASS___PKAccountWebServiceRequestPhysicalCardRequest_ptr;
LABEL_3:
  uint64_t v7 = 0LL;
  while (1)
  {
    if (*(void *)v35 != v5) {
      objc_enumerationMutation(obj);
    }
    uint64_t v8 = *(void **)(*((void *)&v34 + 1) + 8 * v7);
    uint64_t v9 = *(void *)(v1 + 32);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v8 identifier]);
    id v11 = sub_1000CAA04(v9, v10);
    __int128 v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v12 originalInvitation]);
    uint64_t v15 = objc_opt_class(v6[395], v14);
    if ((objc_opt_isKindOfClass(v13, v15) & 1) == 0) {
      goto LABEL_13;
    }
    id v16 = v4;
    uint64_t v17 = v5;
    id v18 = v6;
    uint64_t v19 = v1;
    id v20 = *(void **)(v1 + 40);
    __int16 v21 = (void *)objc_claimAutoreleasedReturnValue([v13 readerIdentifier]);
    id v22 = v20;
    id v23 = v21;
    if (v22 == v23) {
      break;
    }
    __int128 v24 = v23;
    if (v22 && v23)
    {
      unsigned int v30 = [v22 isEqualToString:v23];

      uint64_t v6 = v18;
      uint64_t v1 = v19;
      uint64_t v5 = v17;
      id v4 = v16;
      if (v30) {
        goto LABEL_17;
      }
    }

    else
    {

      uint64_t v6 = v18;
      uint64_t v1 = v19;
      uint64_t v5 = v17;
      id v4 = v16;
    }

uint64_t sub_1000CB324(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000CB600(uint64_t a1)
{
  __int128 v10 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  __int128 v13 = 0u;
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(*(void *)(a1 + 32) + 8), "operations", 0));
  id v3 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v11;
    do
    {
      for (uint64_t i = 0LL; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v10 + 1) + 8LL * (void)i);
        if ([v7 requiresSenderActivationVerification])
        {
          uint64_t v8 = objc_alloc_init(&OBJC_CLASS___PKPassSharePendingActivation);
          uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v7 shareIdentifier]);
          -[PKPassSharePendingActivation setShareIdentifier:](v8, "setShareIdentifier:", v9);

          -[PKPassSharePendingActivation setIsWaitingOnUserAction:]( v8,  "setIsWaitingOnUserAction:",  [v7 isWaitingOnUserAction]);
          [*(id *)(a1 + 40) addObject:v8];
        }
      }

      id v4 = [v2 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }

    while (v4);
  }
}

void sub_1000CB850(uint64_t a1)
{
  uint64_t v2 = sub_1000CAA04(*(void *)(a1 + 32), *(void **)(a1 + 40));
  uint64_t v3 = objc_claimAutoreleasedReturnValue(v2);
  uint64_t v4 = *(void *)(*(void *)(a1 + 48) + 8LL);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1000CB91C(uint64_t a1)
{
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) passShareForIdentifier:*(void *)(a1 + 40)]);
  id v2 = [v5 status];
  uint64_t v3 = v5;
  if (v5) {
    BOOL v4 = v2 == (id)5;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    [*(id *)(*(void *)(a1 + 32) + 8) userDidTerminatePendingShareActivationForShare:v5];
    uint64_t v3 = v5;
  }
}

void sub_1000CBAA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (a1)
  {
    uint64_t v8 = *(dispatch_queue_s **)(a1 + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000CC150;
    block[3] = &unk_100639350;
    id v10 = v6;
    id v11 = v5;
    uint64_t v12 = a1;
    dispatch_async(v8, block);
  }
}

void sub_1000CBB4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (a1)
  {
    uint64_t v8 = *(dispatch_queue_s **)(a1 + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000CD3C8;
    block[3] = &unk_100639350;
    id v10 = v6;
    id v11 = v5;
    uint64_t v12 = a1;
    dispatch_async(v8, block);
  }
}

void sub_1000CBBF4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (a1)
  {
    uint64_t v8 = *(dispatch_queue_s **)(a1 + 88);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472LL;
    block[2] = sub_1000CBC9C;
    block[3] = &unk_100639350;
    id v10 = v6;
    id v11 = v5;
    uint64_t v12 = a1;
    dispatch_async(v8, block);
  }
}

void sub_1000CBC9C(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = PKSharingLoggableMailboxAddress(*(void *)(a1 + 32));
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)id buf = 138412547;
    __int128 v26 = v5;
    __int16 v27 = 2113;
    uint64_t v28 = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Handling outstanding message on %@ \n\n %{private}@",  buf,  0x16u);
  }

  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472LL;
  v22[2] = sub_1000CC018;
  void v22[3] = &unk_10063A6D8;
  id v23 = *(id *)(a1 + 32);
  int8x16_t v19 = *(int8x16_t *)(a1 + 40);
  id v7 = (id)v19.i64[0];
  int8x16_t v24 = vextq_s8(v19, v19, 8uLL);
  uint64_t v8 = objc_retainBlock(v22);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___PKSharingGenericMessage, v10);
  if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
  {
    id v12 = *(id *)(a1 + 40);
    if (PKV2SharingFlowEnabled(v12, v13)
      && ((unint64_t v14 = (unint64_t)[v12 type], v14 > 7) || ((1 << v14) & 0xB4) == 0))
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Ignoring message because it is not a friend to owner message",  buf,  2u);
      }

      ((void (*)(void *, void))v8[2])(v8, 0LL);
    }

    else
    {
      uint64_t v15 = sub_1000C388C(*(id **)(a1 + 48), v12);
      id v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      if (v16)
      {
        uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 24) passShareForTransportIdentifier:*(void *)(a1 + 32)]);
        if (v17)
        {
          uint64_t v18 = *(void *)(a1 + 32);
          v20[0] = _NSConcreteStackBlock;
          v20[1] = 3221225472LL;
          v20[2] = sub_1000CC144;
          v20[3] = &unk_10063B3A0;
          __int16 v21 = v8;
          [v16 handleIncomingMessage:v12 transportIdentifier:v18 share:v17 completion:v20];
        }

        else
        {
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)id buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Error: Unable to find active share for message. Ignoring.",  buf,  2u);
          }

          ((void (*)(void *, uint64_t))v8[2])(v8, 1LL);
        }
      }

      else
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Error: Unable to find viable management service for message",  buf,  2u);
        }

        ((void (*)(void *, uint64_t))v8[2])(v8, 1LL);
      }
    }
  }

  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Error: Message is not a generic sharing message. It should not have been processed",  buf,  2u);
    }

    ((void (*)(void *, uint64_t))v8[2])(v8, 1LL);
  }
}

void sub_1000CC018(void *a1, int a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = PKSharingLoggableMailboxAddress(a1[4]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = (void *)v7;
    uint64_t v9 = @"N";
    if (a2) {
      uint64_t v9 = @"Y";
    }
    *(_DWORD *)id buf = 138412546;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    id v16 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Handled outstanding message on %@ shouldDelete %@.",  buf,  0x16u);
  }

  if (a2)
  {
    uint64_t v10 = *(void **)(a1[5] + 24LL);
    uint64_t v12 = a1[6];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
    [v10 insertOrUpdateSharingMessages:v11 storePayloads:0 transportIdentifier:a1[4]];
  }

uint64_t sub_1000CC144(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000CC150(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = PKSharingLoggableMailboxAddress(*(void *)(a1 + 32));
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)id buf = 138412547;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&buf[12] = 2113;
    *(void *)&buf[14] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Handling outstanding invitation request message on %@ \n\n %{private}@",  buf,  0x16u);
  }

  v73[0] = _NSConcreteStackBlock;
  v73[1] = 3221225472LL;
  v73[2] = sub_1000CC840;
  v73[3] = &unk_10063A6D8;
  id v74 = *(id *)(a1 + 32);
  int8x16_t v34 = *(int8x16_t *)(a1 + 40);
  id v7 = (id)v34.i64[0];
  int8x16_t v75 = vextq_s8(v34, v34, 8uLL);
  uint64_t v8 = objc_retainBlock(v73);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___PKSharingInvitationRequestMessage, v10);
  if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
  {
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = *(void **)(*(void *)(a1 + 48) + 24LL);
    uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v12 passTypeIdentifier]);
    __int16 v15 = (void *)objc_claimAutoreleasedReturnValue([v12 passSerialNumber]);
    id v16 = (void *)objc_claimAutoreleasedReturnValue([v13 passWithPassTypeID:v14 serialNumber:v15]);

    if (v16)
    {
      uint64_t v17 = sub_1000C3BAC(*(char **)(a1 + 48), v16);
      __int128 v35 = (void *)objc_claimAutoreleasedReturnValue(v17);
      if (v35)
      {
        id v33 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
        *(void *)id buf = 0LL;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&uint8_t buf[16] = 0x3032000000LL;
        __int128 v77 = sub_1000C4234;
        __int128 v78 = sub_1000C4244;
        id v79 = 0LL;
        uint64_t v18 = objc_alloc_init(&OBJC_CLASS___LAContext);
        id v19 = objc_alloc(&OBJC_CLASS___PKSharedPassSharesController);
        id v20 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 16) sharedWebService]);
        id v21 = [v19 initWithPass:v16 webService:v20 paymentServiceProvider:0 queue:*(void *)(*(void *)(a1 + 48) + 88)];

        v71[0] = 0LL;
        v71[1] = v71;
        v71[2] = 0x3032000000LL;
        v71[3] = sub_1000C4234;
        v71[4] = sub_1000C4244;
        id v72 = 0LL;
        v67[0] = _NSConcreteStackBlock;
        v67[1] = 3221225472LL;
        v67[2] = sub_1000CC96C;
        v67[3] = &unk_10063BA38;
        id v22 = v21;
        id v68 = v22;
        __int128 v70 = v71;
        id v23 = v16;
        id v69 = v23;
        [v33 addOperation:v67];
        v65[0] = 0LL;
        v65[1] = v65;
        v65[2] = 0x3032000000LL;
        v65[3] = sub_1000C4234;
        v65[4] = sub_1000C4244;
        id v66 = 0LL;
        v61[0] = _NSConcreteStackBlock;
        v61[1] = 3221225472LL;
        v61[2] = sub_1000CCAC0;
        v61[3] = &unk_100641880;
        int8x16_t v24 = v18;
        id v62 = v24;
        uint64_t v63 = buf;
        uint64_t v64 = v65;
        [v33 addOperation:v61];
        v59[0] = 0LL;
        v59[1] = v59;
        v59[2] = 0x3032000000LL;
        v59[3] = sub_1000C4234;
        void v59[4] = sub_1000C4244;
        id v60 = 0LL;
        v57[0] = 0LL;
        v57[1] = v57;
        v57[2] = 0x3032000000LL;
        v57[3] = sub_1000C4234;
        void v57[4] = sub_1000C4244;
        id v58 = 0LL;
        v49[0] = _NSConcreteStackBlock;
        v49[1] = 3221225472LL;
        v49[2] = sub_1000CCD00;
        v49[3] = &unk_1006418D0;
        unsigned __int8 v52 = v71;
        id v50 = v35;
        id v25 = v23;
        id v51 = v25;
        __int128 v53 = v65;
        id v54 = v57;
        uint64_t v55 = v59;
        __int128 v56 = buf;
        [v33 addOperation:v49];
        v44[0] = _NSConcreteStackBlock;
        v44[1] = 3221225472LL;
        v44[2] = sub_1000CCF48;
        v44[3] = &unk_100639750;
        id v26 = *(id *)(a1 + 32);
        uint64_t v27 = *(void *)(a1 + 48);
        id v45 = v26;
        uint64_t v46 = v27;
        __int128 v47 = buf;
        id v48 = v57;
        [v33 addOperation:v44];
        uint64_t v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472LL;
        v36[2] = sub_1000CD1B8;
        v36[3] = &unk_100641920;
        id v29 = v24;
        __int128 v37 = v29;
        unsigned int v30 = v8;
        uint64_t v41 = buf;
        unsigned __int8 v42 = v59;
        uint64_t v31 = *(void *)(a1 + 48);
        id v40 = v30;
        uint64_t v38 = v31;
        id v39 = v25;
        uint64_t v43 = v57;
        id v32 = [v33 evaluateWithInput:v28 completion:v36];

        _Block_object_dispose(v57, 8);
        _Block_object_dispose(v59, 8);

        _Block_object_dispose(v65, 8);
        _Block_object_dispose(v71, 8);

        _Block_object_dispose(buf, 8);
      }

      else
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Error: Unable to find viable management service for message",  buf,  2u);
        }

        ((void (*)(void *, uint64_t))v8[2])(v8, 1LL);
      }
    }

    else
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Unable to find pass for invitation request",  buf,  2u);
      }

      ((void (*)(void *, uint64_t))v8[2])(v8, 1LL);
    }
  }

  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Error: Message is not a generic sharing message. It should not have been processed",  buf,  2u);
    }

    ((void (*)(void *, uint64_t))v8[2])(v8, 1LL);
  }
}

void sub_1000CC7D4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
}

void sub_1000CC840(void *a1, int a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = PKSharingLoggableMailboxAddress(a1[4]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = (void *)v7;
    uint64_t v9 = @"N";
    if (a2) {
      uint64_t v9 = @"Y";
    }
    *(_DWORD *)id buf = 138412546;
    uint64_t v14 = v7;
    __int16 v15 = 2112;
    id v16 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Handled outstanding message on %@ shouldDelete %@.",  buf,  0x16u);
  }

  if (a2)
  {
    uint64_t v10 = *(void **)(a1[5] + 24LL);
    uint64_t v12 = a1[6];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v12, 1LL));
    [v10 insertOrUpdateSharingMessages:v11 storePayloads:0 transportIdentifier:a1[4]];
  }

void sub_1000CC96C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000CCA44;
  void v12[3] = &unk_10063B880;
  uint64_t v17 = *(void *)(a1 + 48);
  id v13 = v8;
  id v9 = *(id *)(a1 + 40);
  id v15 = v6;
  id v16 = v7;
  id v14 = v9;
  id v10 = v6;
  id v11 = v7;
  [v13 updateSharesWithCompletion:v12];
}

uint64_t sub_1000CCA44(uint64_t a1)
{
  id v2 = objc_alloc(&OBJC_CLASS___PKPartialShareInvitation);
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) baseShareForPassTransferWithIsForCompanion:0]);
  id v4 = [v2 initWithShare:v3 pass:*(void *)(a1 + 40)];
  uint64_t v5 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  return (*(uint64_t (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000CCAC0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v21[0] = &off_10068FC18;
  uint64_t v8 = PKLocalizedShareableCredentialString(@"LOCAL_AUTHENTICATION_REASON");
  id v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v22[0] = v9;
  v21[1] = &off_10068FC30;
  uint64_t v10 = PKLocalizedString(@"WALLET");
  id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v22[1] = v11;
  uint64_t v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v22,  v21,  2LL));

  id v13 = *(void **)(a1 + 32);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472LL;
  void v16[2] = sub_1000CCC34;
  v16[3] = &unk_100641858;
  id v18 = v6;
  id v19 = v7;
  id v17 = v13;
  __int128 v20 = *(_OWORD *)(a1 + 40);
  id v14 = v6;
  id v15 = v7;
  [v17 evaluatePolicy:1005 options:v12 reply:v16];
}

void sub_1000CCC34(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if (v14
    && !v5
    && (id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) externalizedContext])) != 0)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 64) + 8LL);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
    id v9 = v6;

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    uint64_t v10 = PDBasicError(@"Failed to get auth");
    uint64_t v11 = objc_claimAutoreleasedReturnValue(v10);
    uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8LL);
    id v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = v11;

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1000CCD00(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
    *(_DWORD *)id buf = 138412290;
    uint64_t v23 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Attempting to create share for %@",  buf,  0xCu);
  }

  uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL);
  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472LL;
  void v17[2] = sub_1000CCE74;
  v17[3] = &unk_1006418A8;
  __int128 v20 = *(_OWORD *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 80);
  id v18 = v6;
  id v19 = v7;
  id v15 = v6;
  id v16 = v7;
  [v12 createShareInvitationFromShare:v11 forPass:v13 authorization:v14 completion:v17];
}

void sub_1000CCE74(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(a1[6] + 8LL);
  uint64_t v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v7;
  id v18 = v7;

  uint64_t v12 = *(void *)(a1[7] + 8LL);
  uint64_t v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v8;
  id v14 = v8;

  uint64_t v15 = *(void *)(a1[8] + 8LL);
  id v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v9;
  id v17 = v9;

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[8] + 8LL) + 40LL) != 0LL);
}

void sub_1000CCF48(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Sending invitation for invitation request",  buf,  2u);
  }

  id v12 = +[PKSharingExistingChannelDescriptor existingForTransportIdentifier:]( &OBJC_CLASS___PKSharingExistingChannelDescriptor,  "existingForTransportIdentifier:",  *(void *)(a1 + 32));
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 136) handleForDescriptor:v12 queue:*(void *)(*(void *)(a1 + 40) + 88)]);
  if (v13)
  {
    id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) primaryInvite]);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1000CD124;
    v20[3] = &unk_1006418F8;
    __int128 v25 = *(_OWORD *)(a1 + 48);
    id v21 = v13;
    id v22 = v14;
    id v24 = v9;
    id v23 = v8;
    id v15 = v14;
    [v21 sendMessage:v15 completion:v20];
  }

  else
  {
    uint64_t v16 = PDBasicError(@"Failed to get handle");
    uint64_t v17 = objc_claimAutoreleasedReturnValue(v16);
    uint64_t v18 = *(void *)(*(void *)(a1 + 48) + 8LL);
    id v19 = *(void **)(v18 + 40);
    *(void *)(v18 + 40) = v17;

    (*((void (**)(id, id, BOOL))v9 + 2))( v9,  v8,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL) != 0LL);
  }
}

void sub_1000CD124(void *a1, int a2, void *a3)
{
  id v6 = a3;
  objc_storeStrong((id *)(*(void *)(a1[8] + 8LL) + 40LL), a3);
  if (!v6 && a2) {
    [*(id *)(*(void *)(a1[9] + 8) + 40) setHandle:a1[4] forInvite:a1[5]];
  }
  (*(void (**)(void, void, BOOL))(a1[7] + 16LL))( a1[7],  a1[6],  *(void *)(*(void *)(a1[8] + 8LL) + 40LL) != 0LL);
}

void sub_1000CD1B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  [*(id *)(a1 + 32) invalidate];
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  if (*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) || [v5 isCanceled])
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
      *(_DWORD *)id buf = 138412290;
      uint64_t v17 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Failed to send invitation with error: %@",  buf,  0xCu);
    }

    if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL))
    {
      id v9 = *(void **)(a1 + 40);
      uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 48) uniqueID]);
      uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      id v14[2] = sub_1000CD3B8;
      v14[3] = &unk_100639688;
      id v15 = *(id *)(a1 + 56);
      [v9 revokeShareForPassIdentifier:v10 share:v11 shouldCascade:0 completion:v14];
    }
  }

  else if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL))
  {
    uint64_t v12 = PKLogFacilityTypeGetObject(33LL);
    uint64_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Successfully sent invitation!",  buf,  2u);
    }

    sub_1000C5968( *(void *)(a1 + 40),  *(void **)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL),  *(void **)(a1 + 48));
  }
}

uint64_t sub_1000CD3B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000CD3C8(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = PKSharingLoggableMailboxAddress(*(void *)(a1 + 32));
    id v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)id buf = 138412547;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&buf[12] = 2113;
    *(void *)&buf[14] = v6;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Handling outstanding invitation request message on %@ \n\n %{private}@",  buf,  0x16u);
  }

  *(void *)id buf = 0LL;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3032000000LL;
  __int128 v91 = sub_1000C4234;
  uint64_t v92 = sub_1000C4244;
  id v93 = 0LL;
  v86[0] = _NSConcreteStackBlock;
  v86[1] = 3221225472LL;
  v86[2] = sub_1000CDC0C;
  v86[3] = &unk_100641948;
  id v87 = *(id *)(a1 + 32);
  int8x16_t v40 = *(int8x16_t *)(a1 + 40);
  id v7 = (id)v40.i64[0];
  int8x16_t v88 = vextq_s8(v40, v40, 8uLL);
  __int128 v89 = buf;
  uint64_t v8 = objc_retainBlock(v86);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v11 = objc_opt_class(&OBJC_CLASS___PKSharingExternalInvitationRequestMessage, v10);
  if ((objc_opt_isKindOfClass(v9, v11) & 1) != 0)
  {
    id v12 = *(id *)(a1 + 40);
    uint64_t v13 = *(void **)(*(void *)(a1 + 48) + 24LL);
    id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 sharingSessionIdentifier]);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v13 passShareForIdentifier:v14]);

    if (v15)
    {
      uint64_t v16 = *(void **)(*(void *)(a1 + 48) + 24LL);
      uint64_t v17 = (void *)objc_claimAutoreleasedReturnValue([v15 identifier]);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v16 passIdentifierForPassShareIdentifier:v17]);

      id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 24) passWithUniqueIdentifier:v18]);
      __int128 v20 = v19;
      if (v19 && ([v19 isCarKeyPass] & 1) != 0)
      {
        id v21 = sub_1000C3BAC(*(char **)(a1 + 48), v20);
        uint64_t v41 = (void *)objc_claimAutoreleasedReturnValue(v21);
        if (v41)
        {
          id v39 = +[PKSharingExistingChannelDescriptor existingForTransportIdentifier:]( &OBJC_CLASS___PKSharingExistingChannelDescriptor,  "existingForTransportIdentifier:",  *(void *)(a1 + 32));
          uint64_t v22 = objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 48) + 136) handleForDescriptor:v39 queue:*(void *)(*(void *)(a1 + 48) + 88)]);
          id v23 = *(void **)(*(void *)&buf[8] + 40LL);
          *(void *)(*(void *)&buf[8] + 40LL) = v22;

          if (*(void *)(*(void *)&buf[8] + 40LL))
          {
            id v38 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
            *(void *)uint64_t v80 = 0LL;
            __int16 v81 = v80;
            uint64_t v82 = 0x3032000000LL;
            __int128 v83 = sub_1000C4234;
            id v84 = sub_1000C4244;
            id v85 = 0LL;
            v74[0] = _NSConcreteStackBlock;
            v74[1] = 3221225472LL;
            v74[2] = sub_1000CDD48;
            v74[3] = &unk_10063E930;
            id v35 = v15;
            id v75 = v35;
            id v37 = v41;
            id v76 = v37;
            id v24 = v20;
            uint64_t v25 = *(void *)(a1 + 48);
            id v77 = v24;
            uint64_t v78 = v25;
            id v79 = v18;
            [v38 addOperation:v74];
            v72[0] = 0LL;
            v72[1] = v72;
            v72[2] = 0x3032000000LL;
            v72[3] = sub_1000C4234;
            v72[4] = sub_1000C4244;
            id v73 = 0LL;
            v70[0] = 0LL;
            v70[1] = v70;
            v70[2] = 0x3032000000LL;
            v70[3] = sub_1000C4234;
            v70[4] = sub_1000C4244;
            id v71 = 0LL;
            v68[0] = 0LL;
            v68[1] = v68;
            v68[2] = 0x3032000000LL;
            v68[3] = sub_1000C4234;
            void v68[4] = sub_1000C4244;
            id v69 = 0LL;
            v59[0] = _NSConcreteStackBlock;
            v59[1] = 3221225472LL;
            v59[2] = sub_1000CDFE8;
            v59[3] = &unk_1006419E8;
            uint64_t v64 = v70;
            id v36 = v35;
            id v60 = v36;
            uint64_t v65 = v72;
            id v26 = v24;
            id v61 = v26;
            id v27 = v37;
            id v66 = v68;
            __int128 v67 = v80;
            uint64_t v28 = *(void *)(a1 + 48);
            id v62 = v27;
            uint64_t v63 = v28;
            [v38 addOperation:v59];
            v57[0] = 0LL;
            v57[1] = v57;
            v57[2] = 0x3032000000LL;
            v57[3] = sub_1000C4234;
            void v57[4] = sub_1000C4244;
            id v58 = 0LL;
            v51[0] = _NSConcreteStackBlock;
            v51[1] = 3221225472LL;
            v51[2] = sub_1000CE35C;
            void v51[3] = &unk_10063C810;
            id v29 = v26;
            uint64_t v30 = *(void *)(a1 + 48);
            id v52 = v29;
            uint64_t v53 = v30;
            id v54 = v68;
            uint64_t v55 = v57;
            __int128 v56 = v80;
            [v38 addOperation:v51];
            v50[0] = _NSConcreteStackBlock;
            v50[1] = 3221225472LL;
            v50[2] = sub_1000CE650;
            v50[3] = &unk_100641A60;
            v50[6] = buf;
            v50[7] = v80;
            v50[4] = *(void *)(a1 + 48);
            void v50[5] = v57;
            [v38 addOperation:v50];
            uint64_t v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
            v42[0] = _NSConcreteStackBlock;
            v42[1] = 3221225472LL;
            v42[2] = sub_1000CE864;
            v42[3] = &unk_100641A88;
            __int128 v47 = buf;
            id v48 = v70;
            uint64_t v32 = *(void *)(a1 + 48);
            uint64_t v46 = v80;
            void v42[4] = v32;
            id v43 = v29;
            id v45 = v8;
            id v44 = v36;
            uint64_t v49 = v68;
            id v33 = [v38 evaluateWithInput:v31 completion:v42];

            _Block_object_dispose(v57, 8);
            _Block_object_dispose(v68, 8);

            _Block_object_dispose(v70, 8);
            _Block_object_dispose(v72, 8);

            _Block_object_dispose(v80, 8);
          }

          else
          {
            if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)uint64_t v80 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Error: unable to get handle for message",  v80,  2u);
            }

            ((void (*)(void *, uint64_t))v8[2])(v8, 1LL);
          }

          int8x16_t v34 = v41;
        }

        else
        {
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v80 = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Error: Unable to find viable management service for message",  v80,  2u);
          }

          ((void (*)(void *, uint64_t))v8[2])(v8, 1LL);
          int8x16_t v34 = 0LL;
        }
      }

      else
      {
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v80 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Unable to find pass for invitation request or pass is invalid",  v80,  2u);
        }

        ((void (*)(void *, uint64_t))v8[2])(v8, 1LL);
      }
    }

    else
    {
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v80 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Unable to find existing share for sharing session identifier",  v80,  2u);
      }

      ((void (*)(void *, uint64_t))v8[2])(v8, 1LL);
    }
  }

  else
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v80 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Error: Message is not a generic sharing message. It should not have been processed",  v80,  2u);
    }

    ((void (*)(void *, uint64_t))v8[2])(v8, 1LL);
  }

  _Block_object_dispose(buf, 8);
}

void sub_1000CDB80( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, uint64_t a48, uint64_t a49, uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
}

id sub_1000CDC0C(void *a1, int a2)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = PKSharingLoggableMailboxAddress(a1[4]);
    uint64_t v7 = objc_claimAutoreleasedReturnValue(v6);
    uint64_t v8 = (void *)v7;
    uint64_t v9 = @"N";
    if (a2) {
      uint64_t v9 = @"Y";
    }
    *(_DWORD *)id buf = 138412546;
    uint64_t v15 = v7;
    __int16 v16 = 2112;
    uint64_t v17 = v9;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Handled outstanding message on %@ shouldDelete %@.",  buf,  0x16u);
  }

  if (a2)
  {
    uint64_t v10 = *(void **)(a1[5] + 24LL);
    uint64_t v13 = a1[6];
    uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v13, 1LL));
    [v10 insertOrUpdateSharingMessages:v11 storePayloads:0 transportIdentifier:a1[4]];
  }

  return [*(id *)(*(void *)(a1[7] + 8) + 40) invalidate];
}

void sub_1000CDD48(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
  __int128 v31 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  __int128 v34 = 0u;
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) credentialShares]);
  id v11 = [v10 countByEnumeratingWithState:&v31 objects:v36 count:16];
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = *(void *)v32;
    do
    {
      for (uint64_t i = 0LL; i != v12; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v32 != v13) {
          objc_enumerationMutation(v10);
        }
        uint64_t v15 = *(void **)(*((void *)&v31 + 1) + 8LL * (void)i);
        else {
          __int16 v16 = v9;
        }
        -[NSMutableArray addObject:](v16, "addObject:", v15);
      }

      id v12 = [v10 countByEnumeratingWithState:&v31 objects:v36 count:16];
    }

    while (v12);
  }

  if (-[NSMutableArray count](v8, "count"))
  {
    id v17 = [*(id *)(a1 + 32) copy];
    [v17 setCredentialShares:v8];
    uint64_t v18 = *(void **)(a1 + 40);
    id v35 = v17;
    id v19 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v35, 1LL));
    uint64_t v20 = *(void *)(a1 + 48);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472LL;
    v24[2] = sub_1000CDFA4;
    v24[3] = &unk_100641970;
    id v25 = *(id *)(a1 + 32);
    id v21 = v9;
    uint64_t v22 = *(void *)(a1 + 56);
    id v23 = *(void **)(a1 + 64);
    id v26 = v21;
    uint64_t v27 = v22;
    id v28 = v23;
    id v30 = v7;
    id v29 = v6;
    [v18 revokeShares:v19 forPass:v20 shouldCascade:0 completion:v24];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

uint64_t sub_1000CDFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4)
  {
    [*(id *)(a1 + 32) setCredentialShares:*(void *)(a1 + 40)];
    [*(id *)(*(void *)(a1 + 48) + 24) addPassShare:*(void *)(a1 + 32) forPassUniqueIdentifier:*(void *)(a1 + 56)];
  }

  return (*(uint64_t (**)(void))(*(void *)(a1 + 72) + 16LL))();
}

void sub_1000CDFE8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = objc_alloc_init(&OBJC_CLASS___PKPassCredentialShare);
  -[PKPassCredentialShare setTargetDevice:](v8, "setTargetDevice:", 2LL);
  -[PKPassCredentialShare setStatus:](v8, "setStatus:", 2LL);
  id v9 = [*(id *)(a1 + 32) copy];
  uint64_t v10 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v9;

  id v12 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
  id v37 = v8;
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v37, 1LL));
  [v12 setCredentialShares:v13];

  id v14 = [[PKPartialShareInvitation alloc] initWithShare:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) pass:*(void *)(a1 + 40)];
  uint64_t v15 = *(void *)(*(void *)(a1 + 72) + 8LL);
  __int16 v16 = *(void **)(v15 + 40);
  *(void *)(v15 + 40) = v14;

  [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) setRequestSource:2];
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v18 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
    *(_DWORD *)id buf = 138412290;
    uint64_t v36 = v19;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Attempting to create share for %@",  buf,  0xCu);
  }

  uint64_t v20 = *(void *)(a1 + 80);
  uint64_t v21 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
  v29[0] = _NSConcreteStackBlock;
  v29[2] = sub_1000CE214;
  v29[3] = &unk_1006419C0;
  uint64_t v22 = *(void *)(a1 + 88);
  uint64_t v23 = *(void *)(a1 + 56);
  uint64_t v33 = *(void *)(a1 + 64);
  uint64_t v34 = v22;
  uint64_t v26 = a1 + 40;
  uint64_t v24 = *(void *)(a1 + 40);
  id v25 = *(void **)(v26 + 8);
  v29[1] = 3221225472LL;
  id v31 = v7;
  uint64_t v32 = v20;
  v29[4] = v23;
  id v30 = v6;
  id v27 = v6;
  id v28 = v7;
  [v25 createShareInvitationFromShare:v21 forPass:v24 authorization:0 completion:v29];
}

void sub_1000CE214(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8LL);
  id v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = v7;
  id v12 = v7;

  uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8LL);
  id v14 = *(void **)(v13 + 40);
  *(void *)(v13 + 40) = v8;
  id v15 = v8;

  uint64_t v16 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v9;
  id v18 = v9;

  uint64_t v19 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 88LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000CE338;
  block[3] = &unk_100641998;
  id v24 = *(id *)(a1 + 48);
  id v20 = *(id *)(a1 + 40);
  uint64_t v21 = *(void *)(a1 + 72);
  id v23 = v20;
  uint64_t v25 = v21;
  dispatch_async(v19, block);
}

uint64_t sub_1000CE338(void *a1)
{
  return (*(uint64_t (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) != 0LL);
}

void sub_1000CE35C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: uploading invitation to relays erver",  buf,  2u);
  }

  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) passTypeIdentifier]);
  id v11 = +[PKSharingRelayChannelDescriptor createChannelWithRegion:stateful:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "createChannelWithRegion:stateful:",  v10,  1LL);

  id v12 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 136) handleForDescriptor:v11 queue:*(void *)(*(void *)(a1 + 40) + 88)]);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) primaryInvite]);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1000CE508;
  v19[3] = &unk_100641A10;
  int8x16_t v25 = vextq_s8(*(int8x16_t *)(a1 + 48), *(int8x16_t *)(a1 + 48), 8uLL);
  id v20 = v12;
  id v21 = v13;
  uint64_t v26 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 40);
  id v23 = v6;
  id v24 = v7;
  uint64_t v22 = v14;
  id v15 = v6;
  id v16 = v7;
  id v17 = v13;
  id v18 = v12;
  sub_1000C5E14(v14, v18, v17, v19);
}

void sub_1000CE508(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = v7;
  if (v6)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL), a2);
    [*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) setHandle:*(void *)(a1 + 32) forInvite:*(void *)(a1 + 40)];
  }

  else
  {
    id v9 = v7;
    if (!v7)
    {
      uint64_t v10 = PDBasicError(@"Failed to upload invitation");
      id v9 = (void *)objc_claimAutoreleasedReturnValue(v10);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL), v9);
    if (!v8) {
  }
    }

  id v11 = *(dispatch_queue_s **)(*(void *)(a1 + 48) + 88LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000CE62C;
  block[3] = &unk_100641998;
  id v16 = *(id *)(a1 + 64);
  id v12 = *(id *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 88);
  id v15 = v12;
  uint64_t v17 = v13;
  dispatch_async(v11, block);
}

uint64_t sub_1000CE62C(void *a1)
{
  return (*(uint64_t (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) != 0LL);
}

void sub_1000CE650(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id buf = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Sending invitation for invitation request",  buf,  2u);
  }

  id v10 = [[PKSharingURLMessage alloc] initWithURL:*(void *)(*(void *)(a1[5] + 8) + 40)];
  uint64_t v11 = a1[7];
  uint64_t v12 = *(void *)(a1[6] + 8LL);
  v17[0] = _NSConcreteStackBlock;
  void v17[2] = sub_1000CE780;
  v17[3] = &unk_100641A38;
  uint64_t v13 = *(void **)(v12 + 40);
  v17[1] = 3221225472LL;
  uint64_t v14 = a1[4];
  id v19 = v7;
  uint64_t v20 = v11;
  void v17[4] = v14;
  id v18 = v6;
  id v15 = v6;
  id v16 = v7;
  [v13 sendMessage:v10 completion:v17];
}

void sub_1000CE780(uint64_t a1, int a2, id obj)
{
  id v5 = obj;
  id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 88LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000CE840;
  block[3] = &unk_100641998;
  id v11 = *(id *)(a1 + 48);
  id v7 = *(id *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 56);
  id v10 = v7;
  uint64_t v12 = v8;
  dispatch_async(v6, block);
}

uint64_t sub_1000CE840(void *a1)
{
  return (*(uint64_t (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) != 0LL);
}

void sub_1000CE864(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = v7;
  if (!*(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL)
    && ([v7 isCanceled] & 1) == 0
    && ![*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) isInvalid])
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL))
    {
      uint64_t Object = PKLogFacilityTypeGetObject(33LL);
      id v16 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id buf = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v16,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Successfully sent invitation!",  buf,  2u);
      }

      uint64_t v17 = *(void **)(a1 + 48);
      id v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40) credentialShares]);
      [v17 addCredentialShares:v18];

      sub_1000C5968( *(void *)(a1 + 32),  *(void **)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL),  *(void **)(*(void *)(*(void *)(a1 + 88) + 8LL) + 40LL),  *(void **)(a1 + 40));
    }

    goto LABEL_12;
  }

  uint64_t v9 = PKLogFacilityTypeGetObject(33LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(v9);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL);
    *(_DWORD *)id buf = 138412290;
    uint64_t v22 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "PDSharingManager: Failed to send invitation with error: %@",  buf,  0xCu);
  }

  [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) closeWithCompletion:0];
  if (!*(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL))
  {
LABEL_12:
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
    goto LABEL_13;
  }

  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1000CEAC0;
  v19[3] = &unk_100639688;
  id v20 = *(id *)(a1 + 56);
  [v12 revokeShareForPassIdentifier:v13 share:v14 shouldCascade:0 completion:v19];

LABEL_13:
}

uint64_t sub_1000CEAC0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

id sub_1000CEB4C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 8) channelEndpointWasTerminatedRemotely:*(void *)(a1 + 40)];
}

void sub_1000CEB58(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v9 = a2;
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    if (v7 && *(_BYTE *)(a1 + 56)) {
      [*(id *)(a1 + 32) didCreateAndStoreShare:*(void *)(a1 + 40) forCredentialShare:v7 pass:*(void *)(a1 + 48) transportIdentifier:v8];
    }
    [v7 setChannelTransportIdentifier:v8];
  }
}

id sub_1000CEBE0(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 32) + 24) deleteSharingEndpointForTransportIdentifier:*(void *)(a1 + 40)];
}

void sub_1000CECBC(uint64_t a1)
{
  if ((unint64_t)[*(id *)(a1 + 32) count] <= 1)
  {
    (*(void (**)(void, const __CFString *))(*(void *)(a1 + 48) + 16LL))( *(void *)(a1 + 48),  @"invalid command");
    return;
  }

  id v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:0]);
  v242 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:1]);
  uint64_t v3 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
  id v4 = [*(id *)(a1 + 32) count];
  if ((unint64_t)v4 >= 3)
  {
    id v5 = v4;
    unint64_t v6 = 2LL;
    do
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v6]);
      if ([v7 hasPrefix:@"-"])
      {
        id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 substringFromIndex:1]);
        ++v6;
        id v9 = @"1";
        if (v6 < (unint64_t)v5)
        {
          id v9 = (__CFString *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) objectAtIndexedSubscript:v6]);
          if (-[__CFString hasPrefix:](v9, "hasPrefix:", @"-"))
          {

            id v9 = @"1";
          }
        }

        -[NSMutableDictionary setObject:forKeyedSubscript:](v3, "setObject:forKeyedSubscript:", v9, v8);
      }

      else
      {
        ++v6;
      }
    }

    while ((id)v6 != v5);
  }

  id v10 = (__CFString *)(id)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"pid"));
  uint64_t v11 = v10;
  if (v10 == @"*"
    || v10
    && (unsigned __int8 v12 = -[__CFString isEqualToString:](v10, "isEqualToString:", @"*"),
        v11,
        (v12 & 1) != 0))
  {
    __int128 v245 = 0u;
    __int128 v246 = 0u;
    __int128 v243 = 0u;
    __int128 v244 = 0u;
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 24) passesOfType:1]);
    id v14 = [v13 countByEnumeratingWithState:&v243 objects:v247 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v244;
      while (2)
      {
        for (uint64_t i = 0LL; i != v15; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v244 != v16) {
            objc_enumerationMutation(v13);
          }
          id v18 = *(void **)(*((void *)&v243 + 1) + 8LL * (void)i);
          if (([v18 supportsFeatureForCurrentDevice:1] & 1) != 0
            || [v18 isCarKeyPass])
          {
            uint64_t v19 = objc_claimAutoreleasedReturnValue([v18 uniqueID]);

            uint64_t v11 = (void *)v19;
            goto LABEL_26;
          }
        }

        id v15 = [v13 countByEnumeratingWithState:&v243 objects:v247 count:16];
        if (v15) {
          continue;
        }
        break;
      }
    }

LABEL_206:
        uint64_t v234 = *(void *)(a1 + 48);
        (*(void (**)(uint64_t, NSString *))(v234 + 16))(v234, v97);
        goto LABEL_207;
      }
    }

    uint64_t v64 = v242;
    if (v64 != @"list")
    {
      uint64_t v65 = v64;
      if (v64)
      {
        unsigned int v66 = -[__CFString isEqualToString:](v64, "isEqualToString:", @"list");

        if (v66) {
          goto LABEL_68;
        }
        int8x16_t v88 = v65;
        if (v88 == @"mockPassUpdate"
          || (__int128 v89 = v88,
              unsigned int v90 = -[__CFString isEqualToString:](v88, "isEqualToString:", @"mockPassUpdate"),
              v89,
              v90))
        {
          __int128 v91 = *(id **)(a1 + 40);
          v237 = (NSString *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"status"));
          v236 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"entitlement"));
          v240 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"add"));
          v238 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"remove"));
          uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"sid"));
          id v93 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"count"));
          id v94 = [v93 integerValue];
          __int128 v95 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"name"));
          __int128 v96 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"role"));
          v235 = *(void **)(a1 + 48);
          id v97 = v237;
          sub_1000D302C(v91, v11, v237, v236, v240 != 0LL, v238 != 0LL, v92, (unint64_t)v94, v95, v96, v235);

          id v20 = v242;
LABEL_207:

          goto LABEL_208;
        }

        id v120 = v89;
        if (v120 == @"listPending"
          || (unsigned int v121 = v120,
              unsigned int v122 = -[__CFString isEqualToString:](v120, "isEqualToString:", @"listPending"),
              v121,
              v122))
        {
          sub_1000D39AC(*(void *)(a1 + 40), *(void **)(a1 + 48));
          goto LABEL_208;
        }
      }

      if (PKEqualObjects(v65, @"removeAll"))
      {
        sub_1000D3A30(*(id **)(a1 + 40), v11, *(void **)(a1 + 48));
        goto LABEL_208;
      }

      __int128 v123 = v65;
      if (v123 != @"check")
      {
        if (!v65) {
          goto LABEL_206;
        }
        uint64_t v124 = v123;
        unsigned int v125 = -[__CFString isEqualToString:](v123, "isEqualToString:", @"check");

        if (!v125)
        {
          __int128 v148 = v124;
          if (v148 == @"exist"
            || (os_signpost_id_t v149 = v148,
                unsigned int v150 = -[__CFString isEqualToString:](v148, "isEqualToString:", @"exist"),
                v149,
                v150))
          {
            sub_1000D3D14(*(void *)(a1 + 40), *(void **)(a1 + 48));
            goto LABEL_208;
          }

          id v161 = v149;
          if (v161 == @"set"
            || (__int128 v162 = v161,
                unsigned int v163 = -[__CFString isEqualToString:](v161, "isEqualToString:", @"set"),
                v162,
                v163))
          {
            uint64_t v164 = *(void *)(a1 + 40);
            id v48 = (void *)objc_claimAutoreleasedReturnValue( -[NSMutableDictionary objectForKeyedSubscript:]( v3,  "objectForKeyedSubscript:",  @"limit"));
            sub_1000D3DA4(v164, (uint64_t)v11, (uint64_t)[v48 integerValue], *(void **)(a1 + 48));
            goto LABEL_135;
          }

          goto LABEL_206;
        }
      }

      uint64_t v126 = *(void *)(a1 + 40);
      id v48 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"mid"));
      uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue(-[NSMutableDictionary objectForKeyedSubscript:](v3, "objectForKeyedSubscript:", @"force"));
      sub_1000D3B84(v126, v48, v49 != 0LL, *(void **)(a1 + 48));
      goto LABEL_62;
    }

void sub_1000D05D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v15 = (void (**)(void, NSMutableString *))v3;
    id v5 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"Tracked Endpoints:\n");
    unint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) sharingEndpoints]);
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          uint64_t v11 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
          if ([v11 channelType] == (id)1)
          {
            -[NSMutableString appendFormat:](v5, "appendFormat:", @"%@\n", v11);
            unsigned __int8 v12 = *(void **)(a1 + 24);
            uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v11 transportIdentifier]);
            id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 sharingMessagesForTransportIdentifier:v13]);

            if (v14) {
              -[NSMutableString appendFormat:](v5, "appendFormat:", @"%@\n", v14);
            }
            -[NSMutableString appendString:](v5, "appendString:", @"----\n");
          }
        }

        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }

      while (v8);
    }

    id v4 = v15;
    v15[2](v15, v5);
  }
}

void sub_1000D0798(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v11 = a6;
  if (a1)
  {
    id v12 = a3;
    id v13 = a2;
    id v14 = +[PKSharingRelayChannelDescriptor createChannelWithRegion:stateful:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "createChannelWithRegion:stateful:",  a5,  a4);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) handleForDescriptor:v14 queue:*(void *)(a1 + 88)]);
    uint64_t v16 = PKSecureElementAccessPassTypeFromString(v13);

    __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) sharedWebService]);
    __int128 v18 = (void *)objc_claimAutoreleasedReturnValue( +[PKSharingMessageDisplayInformationManager displayInformationForAccessPassType:pass:webService:]( &OBJC_CLASS___PKSharingMessageDisplayInformationManager,  "displayInformationForAccessPassType:pass:webService:",  v16,  0LL,  v17));

    __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([v12 dataUsingEncoding:4]);
    id v28 = 0LL;
    id v20 = (void *)objc_claimAutoreleasedReturnValue( +[PKSharingMessage specializedMessageFromPayload:displayInformation:outError:]( &OBJC_CLASS___PKSharingMessage,  "specializedMessageFromPayload:displayInformation:outError:",  v19,  v18,  &v28));
    id v21 = v28;

    if (v21)
    {
      id v22 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to create message from payload: %@",  v21));
      v11[2](v11, v22);
    }

    else
    {
      v23[0] = _NSConcreteStackBlock;
      v23[1] = 3221225472LL;
      v23[2] = sub_1000D52D4;
      v23[3] = &unk_100641AD8;
      id v24 = v15;
      id v25 = v20;
      unsigned int v26 = v11;
      uint64_t v27 = v16;
      [v24 sendMessage:v25 completion:v23];

      id v22 = v24;
    }
  }
}

void sub_1000D0998(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void (**)(void, void))v9;
  if (a1)
  {
    if (v7)
    {
      id v11 = +[PKSharingRelayChannelDescriptor existingChannelForMailboxIdentifier:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForMailboxIdentifier:",  v7);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) handleForDescriptor:v11 queue:*(void *)(a1 + 88)]);
      if (v12)
      {
        id v13 = (void *)objc_claimAutoreleasedReturnValue([v8 dataUsingEncoding:4]);
        id v22 = 0LL;
        id v14 = (void *)objc_claimAutoreleasedReturnValue( +[PKSharingMessage specializedMessageFromPayload:displayInformation:outError:]( &OBJC_CLASS___PKSharingMessage,  "specializedMessageFromPayload:displayInformation:outError:",  v13,  0LL,  &v22));
        id v15 = v22;

        if (v15)
        {
          uint64_t v16 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to create message from payload: %@",  v15));
          ((void (**)(void, void *))v10)[2](v10, v16);
        }

        else
        {
          v18[0] = _NSConcreteStackBlock;
          v18[1] = 3221225472LL;
          void v18[2] = sub_1000D5458;
          v18[3] = &unk_100641010;
          id v21 = v10;
          id v19 = v7;
          id v20 = v14;
          [v12 sendMessage:v20 completion:v18];

          uint64_t v16 = v21;
        }
      }

      else
      {
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find active endpoint for %@",  v7));
        ((void (**)(void, void *))v10)[2](v10, v17);
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v9 + 2))(v9, @"Missing mailbox identifier");
    }
  }
}

void sub_1000D0B88(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void (**)(void, void))v6;
  if (a1)
  {
    if (v5)
    {
      id v8 = +[PKSharingRelayChannelDescriptor existingChannelForMailboxIdentifier:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForMailboxIdentifier:",  v5);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) handleForDescriptor:v8 queue:*(void *)(a1 + 88)]);
      if (v9)
      {
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472LL;
        id v11[2] = sub_1000D54D4;
        void v11[3] = &unk_100641010;
        id v14 = v7;
        id v12 = v5;
        id v13 = v9;
        [v13 attachWithCompletion:v11];
      }

      else
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find active endpoint for %@",  v5));
        ((void (**)(void, void *))v7)[2](v7, v10);
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v6 + 2))(v6, @"Missing mailbox identifier");
    }
  }
}

void sub_1000D0CCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void (**)(void, void))v6;
  if (a1)
  {
    if (v5)
    {
      id v8 = +[PKSharingRelayChannelDescriptor existingChannelForMailboxIdentifier:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForMailboxIdentifier:",  v5);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) handleForDescriptor:v8 queue:*(void *)(a1 + 88)]);
      if (v9)
      {
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472LL;
        id v11[2] = sub_1000D5608;
        void v11[3] = &unk_100641B28;
        id v13 = v7;
        id v12 = v5;
        [v9 relinquishWithCompletion:v11];
      }

      else
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find active endpoint for %@",  v5));
        ((void (**)(void, void *))v7)[2](v7, v10);
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v6 + 2))(v6, @"Missing mailbox identifier");
    }
  }
}

void sub_1000D0E04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void (**)(void, void))v6;
  if (a1)
  {
    if (v5)
    {
      id v8 = +[PKSharingRelayChannelDescriptor existingChannelForMailboxIdentifier:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForMailboxIdentifier:",  v5);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) handleForDescriptor:v8 queue:*(void *)(a1 + 88)]);
      if (v9)
      {
        v11[0] = _NSConcreteStackBlock;
        v11[1] = 3221225472LL;
        id v11[2] = sub_1000D567C;
        void v11[3] = &unk_100641B50;
        id v15 = v7;
        id v12 = v5;
        uint64_t v13 = a1;
        id v14 = v9;
        [v14 closeWithCompletion:v11];
      }

      else
      {
        id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find active endpoint for %@",  v5));
        ((void (**)(void, void *))v7)[2](v7, v10);
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v6 + 2))(v6, @"Missing mailbox identifier");
    }
  }
}

void sub_1000D0F48(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"Deleting Endpoints:\n");
    id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) sharingEndpoints]);
    __int128 v12 = 0u;
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    id v6 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v13;
      do
      {
        for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v12 + 1) + 8LL * (void)i);
          -[NSMutableString appendFormat:](v4, "appendFormat:", @"%@\n", v10);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 transportIdentifier]);
          sub_1000D0E04(a1, v11, &stru_100641B90);
        }

        id v7 = [v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }

      while (v7);
    }

    v3[2](v3, v4);
  }
}

void sub_1000D10C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v19 = (void (**)(void, NSMutableString *))v3;
    id v5 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"Messages On Endpoints:\n");
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) sharingEndpoints]);
    __int128 v25 = 0u;
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v28 = 0u;
    obuint64_t j = v6;
    id v7 = [v6 countByEnumeratingWithState:&v25 objects:v30 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v26;
      do
      {
        for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v26 != v9) {
            objc_enumerationMutation(obj);
          }
          id v11 = *(void **)(*((void *)&v25 + 1) + 8LL * (void)i);
          -[NSMutableString appendFormat:](v5, "appendFormat:", @"%@\n==================\n", v11);
          __int128 v23 = 0u;
          __int128 v24 = 0u;
          __int128 v21 = 0u;
          __int128 v22 = 0u;
          __int128 v12 = *(void **)(a1 + 24);
          __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 transportIdentifier]);
          __int128 v14 = (void *)objc_claimAutoreleasedReturnValue([v12 sharingMessagesForTransportIdentifier:v13]);

          id v15 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
          if (v15)
          {
            id v16 = v15;
            uint64_t v17 = *(void *)v22;
            do
            {
              for (uint64_t j = 0LL; j != v16; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v22 != v17) {
                  objc_enumerationMutation(v14);
                }
                -[NSMutableString appendFormat:]( v5,  "appendFormat:",  @"\t%@\n",  *(void *)(*((void *)&v21 + 1) + 8LL * (void)j));
              }

              id v16 = [v14 countByEnumeratingWithState:&v21 objects:v29 count:16];
            }

            while (v16);
          }

          -[NSMutableString appendString:](v5, "appendString:", @"\n\n");
        }

        id v8 = [obj countByEnumeratingWithState:&v25 objects:v30 count:16];
      }

      while (v8);
    }

    id v4 = v19;
    v19[2](v19, v5);
  }
}

void sub_1000D12F8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    if (v5)
    {
      id v8 = +[PKSharingRelayChannelDescriptor existingChannelForMailboxIdentifier:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForMailboxIdentifier:",  v5);
      uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) handleForDescriptor:v8 queue:*(void *)(a1 + 88)]);
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472LL;
      v10[2] = sub_1000D5728;
      v10[3] = &unk_100641B28;
      id v12 = v7;
      id v11 = v5;
      [v9 pingWithCompletion:v10];
    }

    else
    {
      (*((void (**)(id, const __CFString *))v6 + 2))(v6, @"Missing mailbox identifier");
    }
  }
}

void sub_1000D13EC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    uint64_t v6 = PKSharingRelayServerEnvironmentFromString(a2);
    uint64_t v7 = PKSharingRelayServerPushTopicForEnvironment();
    id v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    uint64_t v9 = objc_alloc_init(&OBJC_CLASS___NSUUID);
    id v10 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v9, "UUIDString"));

    id v11 = *(void **)(a1 + 48);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1000D57A0;
    v13[3] = &unk_100641BB8;
    uint64_t v16 = v6;
    id v14 = v8;
    id v15 = v5;
    id v12 = v8;
    [v11 generateSingleUsePushTokenForTopic:v12 identifier:v10 completion:v13];
  }
}

void sub_1000D14E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) idsService]);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_1000D591C;
    v5[3] = &unk_1006415E8;
    id v6 = v3;
    [v4 devicesWithCompletion:v5];
  }
}

void sub_1000D1570(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (a1)
  {
    id v15 = (void (**)(void, NSMutableString *))v3;
    id v5 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"Tracked Endpoints:\n");
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) sharingEndpoints]);
    __int128 v16 = 0u;
    __int128 v17 = 0u;
    __int128 v18 = 0u;
    __int128 v19 = 0u;
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = *(void *)v17;
      do
      {
        for (uint64_t i = 0LL; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v9) {
            objc_enumerationMutation(v6);
          }
          id v11 = *(void **)(*((void *)&v16 + 1) + 8LL * (void)i);
          if ([v11 channelType] == (id)2)
          {
            -[NSMutableString appendFormat:](v5, "appendFormat:", @"%@\n", v11);
            id v12 = *(void **)(a1 + 24);
            __int128 v13 = (void *)objc_claimAutoreleasedReturnValue([v11 transportIdentifier]);
            id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 sharingMessagesForTransportIdentifier:v13]);

            if (v14) {
              -[NSMutableString appendFormat:](v5, "appendFormat:", @"%@\n", v14);
            }
            -[NSMutableString appendString:](v5, "appendString:", @"----\n");
          }
        }

        id v8 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }

      while (v8);
    }

    id v4 = v15;
    v15[2](v15, v5);
  }
}

void sub_1000D1730(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  __int128 v13 = (void (**)(void, void))v12;
  if (a1)
  {
    if (v9)
    {
      id v14 = objc_alloc(&OBJC_CLASS___PKSharingIDSChannelDescriptor);
      id v15 = v14;
      if (v10)
      {
        id v16 = [v14 initWithSessionIdentifier:v10 deviceIdentifier:v9];
      }

      else
      {
        __int128 v17 = objc_alloc_init(&OBJC_CLASS___NSUUID);
        __int128 v18 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v17, "UUIDString"));
        id v16 = [v15 initWithSessionIdentifier:v18 deviceIdentifier:v9];
      }

      __int128 v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) handleForDescriptor:v16 queue:*(void *)(a1 + 88)]);
      if (v19)
      {
        id v20 = (void *)objc_claimAutoreleasedReturnValue([v11 dataUsingEncoding:4]);
        id v29 = 0LL;
        __int128 v21 = (void *)objc_claimAutoreleasedReturnValue( +[PKSharingMessage specializedMessageFromPayload:displayInformation:outError:]( &OBJC_CLASS___PKSharingMessage,  "specializedMessageFromPayload:displayInformation:outError:",  v20,  0LL,  &v29));
        id v22 = v29;

        if (v22)
        {
          __int128 v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to create message from payload: %@",  v22));
          ((void (**)(void, void *))v13)[2](v13, v23);
        }

        else
        {
          v25[0] = _NSConcreteStackBlock;
          v25[1] = 3221225472LL;
          v25[2] = sub_1000D5AA4;
          v25[3] = &unk_100641010;
          __int128 v28 = v13;
          id v26 = v9;
          id v27 = v21;
          [v19 sendMessage:v27 completion:v25];

          __int128 v23 = v28;
        }
      }

      else
      {
        __int128 v24 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to create handle for %@",  v9));
        ((void (**)(void, void *))v13)[2](v13, v24);
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v12 + 2))(v12, @"Missing device identifier");
    }
  }
}

void sub_1000D1988(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void (**)(void, void))v9;
  if (a1)
  {
    if (v7)
    {
      id v11 = +[PKSharingIDSChannelDescriptor existingForSessionIdentifier:]( &OBJC_CLASS___PKSharingIDSChannelDescriptor,  "existingForSessionIdentifier:",  v7);
      id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) handleForDescriptor:v11 queue:*(void *)(a1 + 88)]);
      if (v12)
      {
        if (v8) {
          double v13 = (double)(uint64_t)[v8 integerValue];
        }
        else {
          double v13 = 30.0;
        }
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472LL;
        void v18[2] = sub_1000D5B20;
        v18[3] = &unk_100641BE0;
        __int128 v19 = v10;
        v15[0] = _NSConcreteStackBlock;
        v15[1] = 3221225472LL;
        id v15[2] = sub_1000D5BB4;
        v15[3] = &unk_10063CAE0;
        __int128 v17 = v19;
        id v16 = v12;
        [v16 waitForMessageWithTimeout:v18 messageHandler:v15 invalidationHandler:v13];
      }

      else
      {
        id v14 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to create handle for %@",  v7));
        ((void (**)(void, void *))v10)[2](v10, v14);
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v9 + 2))(v9, @"Missing session identifier");
    }
  }
}

void sub_1000D1B20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void (**)(void, void))v6;
  if (a1)
  {
    if (v5)
    {
      id v8 = +[PKSharingIDSChannelDescriptor existingForSessionIdentifier:]( &OBJC_CLASS___PKSharingIDSChannelDescriptor,  "existingForSessionIdentifier:",  v5);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) handleForDescriptor:v8 queue:*(void *)(a1 + 88)]);
      id v10 = v9;
      if (v9)
      {
        v12[0] = _NSConcreteStackBlock;
        v12[1] = 3221225472LL;
        v12[2] = sub_1000D5BD8;
        void v12[3] = &unk_10063B468;
        id v13 = v9;
        id v14 = v7;
        [v13 closeWithCompletion:v12];
      }

      else
      {
        id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to create handle for %@",  v5));
        ((void (**)(void, void *))v7)[2](v7, v11);
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v6 + 2))(v6, @"Missing session identifier");
    }
  }
}

void sub_1000D1C5C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (a1)
  {
    if (v7 && v8)
    {
      id v11 = *(dispatch_queue_s **)(a1 + 88);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472LL;
      block[2] = sub_1000D5C58;
      block[3] = &unk_100639AF0;
      id v13 = v7;
      uint64_t v14 = a1;
      id v15 = v10;
      dispatch_async(v11, block);
    }

    else
    {
      (*((void (**)(id, const __CFString *))v9 + 2))(v9, @"Missing mailbox identifier or key");
    }
  }
}

void sub_1000D1D3C(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    if (v5)
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_1000D5D94;
      v8[3] = &unk_10063B3A0;
      id v9 = v6;
      [a1 prewarmCreateShareForPassIdentifier:v5 completion:v8];
    }

    else
    {
      (*((void (**)(id, const __CFString *))v6 + 2))(v6, @"Missing pid parameter");
    }
  }
}

void sub_1000D1DF0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  id v13 = (void (**)(void, void))v12;
  if (a1)
  {
    if (v9)
    {
      uint64_t v14 = objc_alloc_init(&OBJC_CLASS___PKPassShare);
      if (v11)
      {
        id v32 = v11;
        id v15 = -[PKPassSharedEntitlement initWithCarKeyEntitlementValue:]( [PKPassSharedEntitlement alloc],  "initWithCarKeyEntitlementValue:",  [v11 integerValue]);
        unsigned int v43 = v15;
        id v16 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v43, 1LL));
        -[PKPassShare setSharedEntitlements:](v14, "setSharedEntitlements:", v16);
      }

      else
      {
        id v15 = (PKPassSharedEntitlement *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) passSharesForPassUniqueIdentifier:v9]);
        if (!-[PKPassSharedEntitlement count](v15, "count"))
        {
          ((void (**)(void, const __CFString *))v13)[2]( v13,  @"Unable to create mock share because pass doesn't have any shares");

LABEL_12:
          goto LABEL_13;
        }

        id v32 = 0LL;
        id v16 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassSharedEntitlement firstObject](v15, "firstObject"));
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v16 sharedEntitlements]);
        -[PKPassShare setSharedEntitlements:](v14, "setSharedEntitlements:", v17);
      }

      -[PKPassShare setStatus:](v14, "setStatus:", 2LL);
      if (v10) {
        __int128 v18 = v10;
      }
      else {
        __int128 v18 = @"Alex";
      }
      -[PKPassShare setRecipientNickname:](v14, "setRecipientNickname:", v18);
      __int128 v19 = objc_alloc_init(&OBJC_CLASS___NSUUID);
      id v20 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v19, "UUIDString"));
      -[PKPassShare setIdentifier:](v14, "setIdentifier:", v20);

      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472LL;
      v37[2] = sub_1000D5E04;
      v37[3] = &unk_100641C58;
      void v37[4] = a1;
      id v38 = v9;
      id v39 = v14;
      __int128 v21 = v13;
      id v40 = v21;
      id v22 = objc_retainBlock(v37);
      __int128 v23 = objc_alloc_init(&OBJC_CLASS___LAContext);
      v41[0] = &off_10068FC18;
      uint64_t v24 = PKLocalizedShareableCredentialString(@"LOCAL_AUTHENTICATION_REASON");
      __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      v42[0] = v25;
      v41[1] = &off_10068FC30;
      uint64_t v26 = PKLocalizedString(@"WALLET");
      id v27 = v10;
      __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(v26);
      v42[1] = v28;
      id v29 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v42,  v41,  2LL));

      v33[0] = _NSConcreteStackBlock;
      v33[1] = 3221225472LL;
      v33[2] = sub_1000D5FB0;
      v33[3] = &unk_100641C80;
      uint64_t v34 = v23;
      unsigned int v35 = v21;
      id v36 = v22;
      id v30 = v22;
      id v31 = v23;
      -[LAContext evaluatePolicy:options:reply:](v31, "evaluatePolicy:options:reply:", 2LL, v29, v33);

      id v10 = v27;
      id v11 = v32;
      goto LABEL_12;
    }

    (*((void (**)(id, const __CFString *))v12 + 2))(v12, @"Missing pid parameter");
  }

void sub_1000D216C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) passWithUniqueIdentifier:a2]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 secureElementPass]);

    if (v7)
    {
      id v8 = objc_alloc_init(&OBJC_CLASS___PKPassCredentialShare);
      -[PKPassCredentialShare setTargetDevice:](v8, "setTargetDevice:", 1LL);
      id v9 = objc_alloc_init(&OBJC_CLASS___PDCreateShareContext);
      id v10 = sub_1000D605C();
      id v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      -[PDCreateShareContext addInvite:primary:](v9, "addInvite:primary:", v11, 1LL);

      id v12 = sub_1000D605C();
      id v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
      -[PDCreateShareContext addInvite:forCredentialShare:primary:]( v9,  "addInvite:forCredentialShare:primary:",  v13,  v8,  0LL);

      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      id v15[2] = sub_1000D6180;
      v15[3] = &unk_100641C30;
      id v16 = v9;
      id v17 = v5;
      uint64_t v14 = v9;
      sub_1000C4A7C(a1, v14, v7, 0LL, v15);
    }

    else
    {
      (*((void (**)(id, const __CFString *))v5 + 2))(v5, @"Unable to find pass");
    }
  }
}

void sub_1000D22D0(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void (**)(void, void))v9;
  if (a1)
  {
    if (v7 && v8)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[3] passShareForPassUniqueIdentifier:v7 shareIdentifier:v8]);
      if (v11)
      {
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472LL;
        v13[2] = sub_1000D6230;
        v13[3] = &unk_100641010;
        id v16 = v10;
        id v14 = v7;
        id v15 = v11;
        [a1 updateShareForPassIdentifier:v14 share:v15 authorization:0 completion:v13];
      }

      else
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find share for shareIdentifier %@",  v8));
        ((void (**)(void, void *))v10)[2](v10, v12);
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v9 + 2))(v9, @"Missing required parameter");
    }
  }
}

void sub_1000D2424(id *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void (**)(void, void))v9;
  if (a1)
  {
    if (v7 && v8)
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([a1[3] passShareForPassUniqueIdentifier:v7 shareIdentifier:v8]);
      if (v11)
      {
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472LL;
        v13[2] = sub_1000D62A4;
        v13[3] = &unk_100641B28;
        id v15 = v10;
        id v14 = v8;
        [a1 revokeShareForPassIdentifier:v7 share:v11 shouldCascade:0 completion:v13];
      }

      else
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find share for shareIdentifier %@",  v8));
        ((void (**)(void, void *))v10)[2](v10, v12);
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v9 + 2))(v9, @"Missing required parameter");
    }
  }
}

void sub_1000D2564(void *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  if (a1)
  {
    id v11 = (void *)objc_claimAutoreleasedReturnValue([a2 dataUsingEncoding:4]);
    id v18 = 0LL;
    id v12 = (void *)objc_claimAutoreleasedReturnValue( +[PKSharingMessage specializedMessageFromPayload:displayInformation:outError:]( &OBJC_CLASS___PKSharingMessage,  "specializedMessageFromPayload:displayInformation:outError:",  v11,  0LL,  &v18));
    id v13 = v18;

    if (v13 || !v12)
    {
      v10[2](v10, @"Unable to create message from payload");
    }

    else
    {
      id v14 = -[PKSharingMessageDisplayInformation initWithTitle:subtitle:imageURL:]( objc_alloc(&OBJC_CLASS___PKSharingMessageDisplayInformation),  "initWithTitle:subtitle:imageURL:",  v9,  &stru_100662310,  0LL);
      [v12 setDisplayInformation:v14];

      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      id v15[2] = sub_1000D6318;
      v15[3] = &unk_100641CA8;
      id v17 = v10;
      id v16 = v12;
      [a1 createSingleUseShareURLWithMessage:v16 timeToLive:a4 completion:v15];
    }
  }
}

void sub_1000D26D0(id *a1, void *a2, int a3, int a4, void *a5, void *a6, void *a7)
{
  id v13 = a2;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  if (a1)
  {
    uint64_t v17 = PKSharingMailboxIdentifierForAddress(v13);
    uint64_t v18 = objc_claimAutoreleasedReturnValue(v17);
    __int128 v19 = (void *)v18;
    if (v13 && v18)
    {
      uint64_t v34 = v15;
      id v20 = (void *)objc_claimAutoreleasedReturnValue([a1[2] sharedWebService]);
      uint64_t v33 = (void *)objc_claimAutoreleasedReturnValue([v20 targetDevice]);

      id v21 = +[PKPassShare createTaggedShare](&OBJC_CLASS___PKPassShare, "createTaggedShare");
      if (v14)
      {
        int v31 = a4;
        id v22 = -[PKPassShareActivationOption initWithIdentifier:type:]( objc_alloc(&OBJC_CLASS___PKPassShareActivationOption),  "initWithIdentifier:type:",  @"activationCode",  1LL);
        -[PKPassShareActivationOption setValue:](v22, "setValue:", v14);
        id v23 = objc_alloc(&OBJC_CLASS___PKPassShareActivationOptions);
        id v48 = v22;
        uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v48, 1LL));
        id v25 = [v23 initWithOptions:v24];
        [v21 setActivationOptions:v25];

        a4 = v31;
      }

      id v32 = v14;
      if (!a3 || a4)
      {
        v38[0] = _NSConcreteStackBlock;
        v38[1] = 3221225472LL;
        v38[2] = sub_1000D6378;
        v38[3] = &unk_100641CF8;
        id v45 = v16;
        char v46 = a3;
        id v39 = v19;
        uint64_t v26 = v21;
        id v40 = v21;
        id v41 = v13;
        id v15 = v34;
        id v42 = v34;
        id v30 = v33;
        id v43 = v33;
        id v44 = a1;
        [a1 retrieveShareInvitationForMailboxAddress:v41 completion:v38];

        id v29 = v45;
      }

      else
      {
        uint64_t v26 = v21;
        id v27 = [[PKPendingStatefulTransferProvisioningReference alloc] initWithInvitationURL:v13 share:v21];
        [v27 setShouldAutoProvision:1];
        id v15 = v34;
        [v27 setAccountAttestationAnonymizationSalt:v34];
        id v47 = v27;
        __int128 v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v47, 1LL));
        v35[0] = _NSConcreteStackBlock;
        v35[1] = 3221225472LL;
        v35[2] = sub_1000D6654;
        v35[3] = &unk_10063C3B0;
        id v36 = v27;
        id v37 = v16;
        id v29 = v27;
        id v30 = v33;
        [v33 addPendingProvisionings:v28 completion:v35];
      }

      id v14 = v32;
    }

    else
    {
      (*((void (**)(id, const __CFString *))v16 + 2))(v16, @"Missing -url parameter");
    }
  }
}

void sub_1000D2A08(void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    id v5 = a3;
    [a1 rejectShareForMailboxAddress:a2];
    v5[2](v5, @"Rejecting share url");
  }

void sub_1000D2A64(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v5 = a3;
  if (a1)
  {
    if (v6)
    {
      PKPassCredentialShareTargetDeviceFromString(v6);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472LL;
      v7[2] = sub_1000D66F4;
      v7[3] = &unk_100641D20;
      void v7[4] = v6;
      void v7[5] = v5;
      sub_1000D66F4((uint64_t)v7, 0LL);
    }

    else
    {
      v5[2](v5, @"deviceType parameter missing. Possible: phone|watch");
    }
  }
}

void sub_1000D2B0C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = (void (**)(void, void))v15;
  if (a1)
  {
    if (v11 && v12 && v13)
    {
      id v17 = +[PKSharingIDSChannelDescriptor createWithDeviceIdentifier:]( &OBJC_CLASS___PKSharingIDSChannelDescriptor,  "createWithDeviceIdentifier:",  v11);
      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) handleForDescriptor:v17 queue:*(void *)(a1 + 88)]);
      if (v18)
      {
        id v19 = [[PKSharingInvitationRequestMessage alloc] initWithPassTypeIdentifier:v12 passSerialNumber:v13 personalizedVehicleIdentifier:v14];
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3221225472LL;
        v20[2] = sub_1000D67C0;
        v20[3] = &unk_100641B28;
        id v22 = v16;
        id v21 = v18;
        [v21 sendMessage:v19 completion:v20];
      }

      else
      {
        id v19 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to create handle for %@",  v11));
        ((void (**)(void, id))v16)[2](v16, v19);
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v15 + 2))(v15, @"Missing required parameters");
    }
  }
}

void sub_1000D2CA4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void (**)(void, void))v6;
  if (a1)
  {
    if (v5)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) passWithUniqueIdentifier:v5]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 secureElementPass]);

      if (v9)
      {
        if ([v9 isCarKeyPass])
        {
          id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 devicePrimaryPaymentApplication]);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v10 subcredentials]);
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v11 anyObject]);

          id v13 = (void *)objc_claimAutoreleasedReturnValue([v12 originatorIDSHandle]);
          if (v13)
          {
            id v14 = (void *)objc_claimAutoreleasedReturnValue([v12 sharingSessionIdentifier]);
            id v15 = (NSString *)objc_claimAutoreleasedReturnValue([v14 UUIDString]);

            if (v15)
            {
              id v16 = (void *)objc_claimAutoreleasedReturnValue( +[PKSharingIDSChannelDescriptor createWithRemoteAddress:]( &OBJC_CLASS___PKSharingIDSChannelDescriptor,  "createWithRemoteAddress:",  v13));
              id v17 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) handleForDescriptor:v16 queue:*(void *)(a1 + 88)]);
              if (v17)
              {
                id v18 = [[PKSharingExternalInvitationRequestMessage alloc] initWithSharingSessionIdentifier:v15];
                v19[0] = _NSConcreteStackBlock;
                v19[1] = 3221225472LL;
                v19[2] = sub_1000D69CC;
                v19[3] = &unk_100641B28;
                id v21 = v7;
                id v20 = v17;
                [v20 sendMessage:v18 completion:v19];
              }

              else
              {
                id v18 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to create handle for %@",  v13));
                ((void (**)(void, id))v7)[2](v7, v18);
              }
            }

            else
            {
              ((void (**)(void, const __CFString *))v7)[2]( v7,  @"Unable to find sharing session identifier for subcredential");
            }
          }

          else
          {
            id v15 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Unable to convert raw destination '%@' into IDS destination",  0LL);
            ((void (**)(void, NSString *))v7)[2](v7, v15);
          }
        }

        else
        {
          ((void (**)(void, const __CFString *))v7)[2](v7, @"Pass isn't a car key pass");
        }
      }

      else
      {
        ((void (**)(void, const __CFString *))v7)[2](v7, @"Unable to find pass for pass unique ID");
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v6 + 2))(v6, @"Missing required pass unique ID parameter");
    }
  }
}

void sub_1000D2F24(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    if (v5)
    {
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      id v9[2] = sub_1000D6BA0;
      v9[3] = &unk_100641D48;
      id v10 = -[NSMutableString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithFormat:",  @"Shares for %@:\n",  v5);
      id v11 = a1;
      id v12 = v5;
      id v13 = v7;
      id v8 = v10;
      [a1 displayableSharesForPassIdentifier:v12 completion:v9];
    }

    else
    {
      (*((void (**)(id, const __CFString *))v6 + 2))(v6, @"Missing pid parameter");
    }
  }
}

void sub_1000D302C( id *a1, void *a2, void *a3, void *a4, int a5, int a6, void *a7, unint64_t a8, void *a9, void *a10, void *a11)
{
  id v16 = a2;
  id v17 = a3;
  id v108 = a4;
  id v18 = a7;
  id v19 = a9;
  id v20 = a10;
  id v21 = a11;
  id v22 = (void (**)(void, void))v21;
  if (a1)
  {
    if (a8 <= 1) {
      unint64_t v23 = 1LL;
    }
    else {
      unint64_t v23 = a8;
    }
    if (v16)
    {
      uint64_t v24 = (void *)objc_claimAutoreleasedReturnValue([a1[3] passWithUniqueIdentifier:v16]);
      uint64_t v25 = objc_claimAutoreleasedReturnValue([v24 secureElementPass]);

      uint64_t v105 = (void *)v25;
      if (!v25)
      {
        ((void (**)(void, const __CFString *))v22)[2](v22, @"Unable to find pass");
        id v45 = 0LL;
LABEL_89:

        goto LABEL_90;
      }

      __int128 v96 = a1;
      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue([a1[3] passSharesForPassUniqueIdentifier:v16]);
      id v27 = v26;
      if (!v26)
      {
        char v46 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find shares for pas %@. Pass must have at least one share to mock an update.",  v16));
        ((void (**)(void, void *))v22)[2](v22, v46);

        id v45 = v105;
LABEL_88:

        goto LABEL_89;
      }

      id v94 = v22;
      __int128 v95 = v20;
      id v109 = v19;
      id v106 = v18;
      id v97 = v16;
      id v28 = [v26 mutableCopy];
      id v29 = (void *)objc_claimAutoreleasedReturnValue([v27 firstObject]);
      id v30 = [v29 copy];

      unsigned int v107 = v27;
      int v31 = v108;
      if (v17)
      {
        id v32 = [v28 count];
        if (v106)
        {
          if (v32)
          {
            unint64_t v33 = 0LL;
            id v99 = v30;
            id v101 = v17;
            while (1)
            {
              uint64_t v34 = (void *)objc_claimAutoreleasedReturnValue([v28 objectAtIndexedSubscript:v33]);
              unsigned int v35 = (void *)objc_claimAutoreleasedReturnValue([v28 objectAtIndexedSubscript:v33]);
              id v36 = (id)objc_claimAutoreleasedReturnValue([v35 identifier]);
              id v37 = v106;
              id v38 = v37;
              if (v36 == v37)
              {
                id v40 = v37;
                id v36 = v37;
                goto LABEL_63;
              }

              if (v36)
              {
                unsigned __int8 v39 = [v36 isEqualToString:v37];

                if ((v39 & 1) != 0) {
                  goto LABEL_64;
                }
              }

              else
              {
              }

              id v40 = (void *)objc_claimAutoreleasedReturnValue([v28 objectAtIndexedSubscript:v33]);
              id v41 = (id)objc_claimAutoreleasedReturnValue([v40 recipientNickname]);
              id v42 = v38;
              id v43 = v42;
              if (v41 == v42) {
                break;
              }
              if (v41)
              {
                id v44 = [v41 caseInsensitiveCompare:v42];

                id v27 = v107;
                if (!v44) {
                  goto LABEL_65;
                }
              }

              else
              {

                id v27 = v107;
              }

              ++v33;
              id v30 = v99;
              id v17 = v101;
              int v31 = v108;
            }

LABEL_63:
            id v27 = v107;
LABEL_64:

LABEL_65:
            id v80 = [v34 copy];
            id v17 = v101;
            [v80 setStatus:PKShareStatusFromString(v101)];
            [v28 replaceObjectAtIndex:v33 withObject:v80];

            int v31 = v108;
            id v30 = v99;
            if (!v108) {
              goto LABEL_72;
            }
LABEL_32:
            id v51 = [v31 integerValue];
            unsigned int v52 = v31;
            id v18 = v106;
            id v20 = (__CFString *)v95;
            if (v51
              || (id v71 = v52, v71 == @"0")
              || (id v72 = v71,
                  unsigned int v73 = -[__CFString isEqualToString:](v71, "isEqualToString:", @"0"),
                  v72,
                  v73))
            {
              uint64_t v53 = objc_alloc(&OBJC_CLASS___PKPassSharedEntitlement);
              v114[0] = @"accessProfile";
              id v54 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithInteger:]( NSNumber,  "numberWithInteger:",  [v52 integerValue]));
              v114[1] = @"accountRole";
              v115[0] = v54;
              uint64_t v55 = @"0000";
              if (v95) {
                uint64_t v55 = v95;
              }
              v115[1] = v55;
              __int128 v56 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  v115,  v114,  2LL));
              id v98 = -[PKPassSharedEntitlement initWithSubcredentialDictionary:]( v53,  "initWithSubcredentialDictionary:",  v56);
            }

            else
            {
              uint64_t v74 = objc_claimAutoreleasedReturnValue([v96[3] passEntitlementForIdentifier:v72 passIdentifier:v97]);
              id v22 = v94;
              if (!v74)
              {
                id v93 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find entitlement on pass for entitlementIdentifier: '%@'",  v72));
                ((void (**)(void, void *))v94)[2](v94, v93);

                id v45 = v105;
LABEL_87:

                id v16 = v97;
                id v19 = v109;
                goto LABEL_88;
              }

              id v54 = (void *)v74;
              id v98 = -[PKPassSharedEntitlement initWithEntitlement:]( objc_alloc(&OBJC_CLASS___PKPassSharedEntitlement),  "initWithEntitlement:",  v74);
            }

            id v100 = v30;
            id v102 = v17;
            id v57 = [v28 count];
            if (v106)
            {
              unsigned int v58 = v98;
              if (v57)
              {
                unint64_t v59 = 0LL;
                while (1)
                {
                  id v60 = (void *)objc_claimAutoreleasedReturnValue([v28 objectAtIndexedSubscript:v59]);
                  id v61 = (void *)objc_claimAutoreleasedReturnValue([v28 objectAtIndexedSubscript:v59]);
                  id v62 = (id)objc_claimAutoreleasedReturnValue([v61 identifier]);
                  id v63 = v106;
                  uint64_t v64 = v63;
                  if (v62 == v63)
                  {
                    unsigned int v66 = v63;
                    id v62 = v63;
                    goto LABEL_68;
                  }

                  if (v62)
                  {
                    unsigned __int8 v65 = [v62 isEqualToString:v63];

                    if ((v65 & 1) != 0) {
                      goto LABEL_69;
                    }
                  }

                  else
                  {
                  }

                  unsigned int v66 = (void *)objc_claimAutoreleasedReturnValue([v28 objectAtIndexedSubscript:v59]);
                  id v67 = (id)objc_claimAutoreleasedReturnValue([v66 recipientNickname]);
                  id v68 = v64;
                  unsigned int v69 = v68;
                  if (v67 == v68) {
                    break;
                  }
                  if (v67)
                  {
                    id v70 = [v67 caseInsensitiveCompare:v68];

                    if (!v70) {
                      goto LABEL_70;
                    }
                  }

                  else
                  {
                  }

                  ++v59;
                  unsigned int v58 = v98;
                }

LABEL_68:
LABEL_69:

LABEL_70:
                id v81 = [v60 copy];
                unsigned int v58 = v98;
                uint64_t v113 = v98;
                unsigned int v82 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v113,  1LL));
                [v81 setSharedEntitlements:v82];

                [v28 replaceObjectAtIndex:v59 withObject:v81];
              }
            }

            else
            {
              id v75 = (char *)v23;
              unsigned int v58 = v98;
              if (v23 < (unint64_t)v57 || (id v75 = (char *)[v28 count]) != 0)
              {
                for (uint64_t i = 0LL; i != v75; ++i)
                {
                  id v77 = (void *)objc_claimAutoreleasedReturnValue([v28 objectAtIndexedSubscript:i]);
                  id v78 = [v77 copy];

                  v112 = v98;
                  unsigned int v79 = (void *)objc_claimAutoreleasedReturnValue( +[NSArray arrayWithObjects:count:]( &OBJC_CLASS___NSArray,  "arrayWithObjects:count:",  &v112,  1LL));
                  [v78 setSharedEntitlements:v79];

                  [v28 replaceObjectAtIndex:i withObject:v78];
                }
              }
            }

LABEL_71:
            id v30 = v100;
            id v17 = v102;
LABEL_72:
            id v18 = v106;
            if (a5)
            {
              unint64_t v83 = v23;
              do
              {
                id v84 = [v30 copy];
                [v84 setStatus:1];
                id v85 = objc_alloc_init(&OBJC_CLASS___NSUUID);
                unsigned int v86 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v85, "UUIDString"));
                [v84 setIdentifier:v86];

                if (v109) {
                  objc_msgSend(v84, "setRecipientNickname:");
                }
                [v28 addObject:v84];

                --v83;
              }

              while (v83);
            }

            if (a6)
            {
              do
              {
                if (v106)
                {
                  v110[0] = _NSConcreteStackBlock;
                  v110[1] = 3221225472LL;
                  v110[2] = sub_1000D6CF8;
                  v110[3] = &unk_100641D70;
                  id v111 = v106;
                  uint64_t v87 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v28, "pk_objectsPassingTest:", v110));
                  id v88 = [v87 mutableCopy];

                  id v28 = v88;
                }

                else
                {
                  if (!v17)
                  {
                    __int128 v89 = v28;
                    uint64_t v90 = 0LL;
                    goto LABEL_84;
                  }

                  if ((unint64_t)[v107 count] >= 2)
                  {
                    __int128 v89 = v28;
                    uint64_t v90 = 1LL;
LABEL_84:
                    [v89 removeObjectAtIndex:v90];
                  }
                }

                --v23;
              }

              while (v23);
            }

            [v96[3] updatePassSharesForPassUniqueIdentifier:v97 passShares:v28];
            id WeakRetained = objc_loadWeakRetained(v96 + 10);
            [WeakRetained sharesDidUpdateWithPaymentPassWithUniqueIdentifier:v97];

            id v45 = v105;
            id v27 = v107;
            [v96 passUpdated:v105 oldShares:v107];
            uint64_t v92 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Set %lu shares on pass %@",  [v28 count],  v97));
            id v22 = v94;
            ((void (**)(void, void *))v94)[2](v94, v92);

            id v20 = (__CFString *)v95;
            goto LABEL_87;
          }
        }

        else
        {
          id v47 = (char *)v23;
          if (v23 < (unint64_t)v32 || (id v47 = (char *)[v28 count]) != 0)
          {
            for (uint64_t j = 0LL; j != v47; ++j)
            {
              uint64_t v49 = (void *)objc_claimAutoreleasedReturnValue([v28 objectAtIndexedSubscript:j]);
              id v50 = [v49 copy];

              [v50 setStatus:PKShareStatusFromString(v17)];
              [v28 replaceObjectAtIndex:j withObject:v50];
            }
          }
        }
      }

        id v27 = 0LL;
        goto LABEL_72;
      }

      id v27 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue( [*(id *)(a1 + 8) passUniqueIdentifierWithPaymentApplicationIdentifier:v25 subcredentialIdentifier:v26]);
      id v28 = PKLogFacilityTypeGetObject(6LL);
      id v29 = (os_log_s *)objc_claimAutoreleasedReturnValue(v28);
      id v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
      if (!v27)
      {
        if (v26)
        {
          if (v30)
          {
            *(_DWORD *)id buf = 138412546;
            *(void *)&uint8_t buf[4] = v25;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v26;
            char v46 = "PKExpressPassManager: WARNING TERMINAL REQUESTED UNRECOGNIZED KEY: (%@:%@).";
            id v47 = v29;
            id v48 = 22;
            goto LABEL_70;
          }
        }

        else if (v30)
        {
          *(_DWORD *)id buf = 138412290;
          *(void *)&uint8_t buf[4] = v25;
          char v46 = "PKExpressPassManager: WARNING TERMINAL REQUESTED UNRECOGNIZED APPLET: %@.";
          id v47 = v29;
          id v48 = 12;
          goto LABEL_70;
        }

        goto LABEL_71;
      }

      if (v26)
      {
        if (!v30) {
          goto LABEL_72;
        }
        *(_DWORD *)id buf = 138412802;
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v26;
        *(_WORD *)&buf[22] = 2112;
        uint64_t v113 = v27;
        int v31 = "PKExpressPassManager: terminal requested non-express key (%@:%@) for pass %@.";
        id v32 = v29;
        unint64_t v33 = 32;
      }

      else
      {
        if (!v30) {
          goto LABEL_72;
        }
        *(_DWORD *)id buf = 138412546;
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&buf[12] = 2112;
        *(void *)&buf[14] = v27;
        int v31 = "PKExpressPassManager: terminal requested non-express applet %@ for pass %@.";
        id v32 = v29;
        unint64_t v33 = 22;
      }

      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v31, buf, v33);
LABEL_72:

      *(void *)id buf = 0LL;
      *(void *)&uint8_t buf[8] = buf;
      *(void *)&uint8_t buf[16] = 0x3032000000LL;
      uint64_t v113 = sub_10014DA38;
      unsigned int v114 = sub_10014DA48;
      uint64_t v115 = 0LL;
      v74[0] = _NSConcreteStackBlock;
      v74[1] = 3221225472LL;
      v74[2] = sub_100150FEC;
      v74[3] = &unk_100646238;
      uint64_t v64 = v25;
      id v75 = v64;
      unsigned __int8 v65 = v26;
      unsigned int v76 = v65;
      unsigned int v66 = v27;
      id v77 = v66;
      id v78 = buf;
      sub_10014E398(a1, v74);
      id v67 = *(void **)(*(void *)&buf[8] + 40LL);
      if (v67)
      {
        id v68 = (uint64_t (*)(uint64_t, uint64_t))objc_claimAutoreleasedReturnValue([v67 passUniqueIdentifier]);

        if (*(void *)(*(void *)&buf[8] + 40LL) && v68)
        {
          notify_post((const char *)[PKNotifyEventOutstandingExpressTransactionReady cStringUsingEncoding:4]);
          unsigned int v69 = PDUtilityQueue();
          id v70 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v69);
          v73[0] = _NSConcreteStackBlock;
          v73[1] = 3221225472LL;
          v73[2] = sub_10015134C;
          v73[3] = &unk_100646260;
          void v73[4] = a1;
          v73[5] = buf;
          dispatch_async(v70, v73);
        }
      }

      else
      {
        id v68 = v66;
      }

      _Block_object_dispose(buf, 8);
LABEL_83:

      return;
    case 6uLL:
      v96[0] = _NSConcreteStackBlock;
      v96[1] = 3221225472LL;
      v96[2] = sub_100150448;
      v96[3] = &unk_100646158;
      id v97 = v4;
      if ((sub_10014EB20(a1, v96) & 1) == 0)
      {
        uint64_t v34 = PKLogFacilityTypeGetObject(6LL);
        unsigned int v35 = (os_log_s *)objc_claimAutoreleasedReturnValue(v34);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v35,  OS_LOG_TYPE_DEFAULT,  "PKExpressPassManager: received TCI event outside of express boundaries - ignoring.",  buf,  2u);
        }

        id v36 = PDUtilityQueue();
        id v37 = (dispatch_queue_s *)objc_claimAutoreleasedReturnValue(v36);
        v95[0] = _NSConcreteStackBlock;
        v95[1] = 3221225472LL;
        v95[2] = sub_1001504B0;
        v95[3] = &unk_100639300;
        v95[4] = a1;
        dispatch_async(v37, v95);
      }

      goto LABEL_83;
    default:
      goto LABEL_83;
  }

LABEL_31:
      if (!v31) {
        goto LABEL_72;
      }
      goto LABEL_32;
    }

    (*((void (**)(id, const __CFString *))v21 + 2))(v21, @"Missing pass unique ID");
  }

  os_unfair_lock_unlock(p_lock);
}

  int v31 = v70;
  if ([v70 supportsShowNotifications])
  {
    id v32 = v74;
    else {
      unsigned int v69 = [v70 supportsRequestPhysicalCard];
    }
  }

  else
  {
    unsigned int v69 = 0;
    id v32 = v74;
  }

  id v78 = 0u;
  unsigned int v79 = 0u;
  unsigned int v76 = 0u;
  id v77 = 0u;
  id v75 = v66;
  unint64_t v33 = [v75 countByEnumeratingWithState:&v76 objects:v88 count:16];
  if (v33)
  {
    uint64_t v34 = v33;
    unsigned int v35 = *(void *)v77;
    while (1)
    {
      for (uint64_t i = 0LL; i != v34; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v77 != v35) {
          objc_enumerationMutation(v75);
        }
        id v37 = *(void **)(*((void *)&v76 + 1) + 8LL * (void)i);
        id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 physicalCardIdentifier]);
        unsigned __int8 v39 = [v37 messagingType];
        if (v39 == (id)2)
        {
          if (v14)
          {
            id v47 = (void *)objc_claimAutoreleasedReturnValue(-[NSCalendar identifier](v14, "identifier"));
            char v46 = v38;
            id v48 = v47;
            id v44 = (PDAccountPhysicalCardExpiredNotification *)v48;
            if (v46 == v48) {
              goto LABEL_79;
            }
            if (v46) {
              uint64_t v49 = v48 == 0LL;
            }
            else {
              uint64_t v49 = 1;
            }
            if (v49)
            {
LABEL_69:

              goto LABEL_101;
            }

            id v50 = -[os_log_s isEqualToString:](v46, "isEqualToString:", v48);

            if ((v50 & 1) != 0) {
              goto LABEL_80;
            }
            goto LABEL_102;
          }

          if (!v72) {
            goto LABEL_103;
          }
          id v51 = (void *)objc_claimAutoreleasedReturnValue([v72 identifier]);
          char v46 = v38;
          unsigned int v52 = v51;
          if (v46 == v52)
          {
            id v44 = (PDAccountPhysicalCardExpiredNotification *)v46;
LABEL_79:

LABEL_80:
LABEL_81:
            started = PKAppleCardPhysicalCardExpiredMessagingStartDate(v74, v38);
            id v44 = (PDAccountPhysicalCardExpiredNotification *)objc_claimAutoreleasedReturnValue(started);
            if (v44)
            {
              char v46 = oslog;
              if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)id buf = 138412546;
                id v85 = (uint64_t)v38;
                unsigned int v86 = 2112;
                uint64_t v87 = v44;
                __int128 v56 = oslog;
                id v57 = "We have already scheduled a start date for physical card expired messaging for card %@: %@";
LABEL_84:
                _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, v57, buf, 0x16u);
              }

LABEL_32:
  }

  unsigned int v79 = 0u;
  id v80 = 0u;
  id v77 = 0u;
  id v78 = 0u;
  obuint64_t j = (id)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 16) accounts]);
  id v32 = [obj countByEnumeratingWithState:&v77 objects:v89 count:16];
  if (!v32)
  {
    uint64_t v34 = 0LL;
    unsigned int v35 = 0LL;
    goto LABEL_55;
  }

  unint64_t v33 = v32;
  uint64_t v34 = 0LL;
  unsigned int v35 = 0LL;
  id v36 = *(void *)v78;
  do
  {
    for (uint64_t j = 0LL; j != v33; uint64_t j = (char *)j + 1)
    {
      if (*(void *)v78 != v36) {
        objc_enumerationMutation(obj);
      }
      id v38 = *(void **)(*((void *)&v77 + 1) + 8LL * (void)j);
      if ([v38 feature] == (id)3)
      {
        unsigned __int8 v39 = v35;
        id v40 = v34;
        unsigned int v35 = v38;
      }

      else
      {
        unsigned __int8 v39 = v34;
        id v40 = v38;
        if ([v38 feature] != (id)5) {
          goto LABEL_42;
        }
      }

      id v41 = v38;

      uint64_t v34 = v40;
LABEL_42:
      id v42 = *(void **)(*(void *)(a1 + 32) + 16LL);
      id v43 = (void *)objc_claimAutoreleasedReturnValue([v38 accountIdentifier]);
      id v44 = (void *)objc_claimAutoreleasedReturnValue([v42 transactionsRequiringReviewForAccountWithIdentifier:v43]);
      id v45 = [v44 count];

      if (v45)
      {
        char v46 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
        id v47 = objc_alloc(&OBJC_CLASS___PKBadgeCountItem);
        id v48 = (void *)objc_claimAutoreleasedReturnValue([v38 accountIdentifier]);
        uint64_t v49 = -[PKBadgeCountItem initWithTitle:subtitle:count:]( v47,  "initWithTitle:subtitle:count:",  @"Unanswered question on the broadway pass",  v48,  1LL);
        [v46 addObject:v49];
      }

      if ([v38 feature] == (id)2 && objc_msgSend(v38, "state") != (id)3)
      {
        id v50 = (void *)objc_claimAutoreleasedReturnValue([v38 creditDetails]);
        id v51 = (void *)objc_claimAutoreleasedReturnValue([v50 accountSummary]);
        unsigned int v52 = (void *)objc_claimAutoreleasedReturnValue([v51 pastDueAmount]);

        if (v52)
        {
          if (objc_msgSend(v52, "pk_isPositiveNumber"))
          {
            uint64_t v53 = *(void **)(*(void *)(a1 + 32) + 16LL);
            id v54 = (void *)objc_claimAutoreleasedReturnValue([v38 associatedPassUniqueID]);
            LODWORD(v53) = [v53 passExistsWithUniqueID:v54];

            if ((_DWORD)v53)
            {
              uint64_t v55 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
              __int128 v56 = objc_alloc(&OBJC_CLASS___PKBadgeCountItem);
              id v57 = (void *)objc_claimAutoreleasedReturnValue([v38 accountIdentifier]);
              unsigned int v58 = -[PKBadgeCountItem initWithTitle:subtitle:count:]( v56,  "initWithTitle:subtitle:count:",  @"Past due broadway account",  v57,  1LL);
              [v55 addObject:v58];
            }
          }
        }
      }
    }

    unint64_t v33 = [obj countByEnumeratingWithState:&v77 objects:v89 count:16];
  }

  while (v33);
LABEL_55:

  unint64_t v59 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 32) + 16) activeDiscoveryItemsRequiringBadgeForRelevantDate:0]);
  id v60 = (uint64_t)[v59 count];

  if (v60 >= 1)
  {
    id v61 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    id v62 = -[PKBadgeCountItem initWithTitle:subtitle:count:]( objc_alloc(&OBJC_CLASS___PKBadgeCountItem),  "initWithTitle:subtitle:count:",  @"Discovery items",  0LL,  v60);
    [v61 addObject:v62];
  }

  id v63 = [*(id *)(*(void *)(a1 + 32) + 16) newAccountUserInvitationsCount];
  if (v63)
  {
    uint64_t v64 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    unsigned __int8 v65 = -[PKBadgeCountItem initWithTitle:subtitle:count:]( objc_alloc(&OBJC_CLASS___PKBadgeCountItem),  "initWithTitle:subtitle:count:",  @"New account user invitations",  0LL,  v63);
    [v64 addObject:v65];
  }

  unsigned int v66 = sub_10030C9A0(*(void ***)(*(void *)(a1 + 32) + 64LL));
  if ((uint64_t)v66 >= 1)
  {
    id v67 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    id v68 = -[PKBadgeCountItem initWithTitle:subtitle:count:]( objc_alloc(&OBJC_CLASS___PKBadgeCountItem),  "initWithTitle:subtitle:count:",  @"Badged application message registrations count",  0LL,  v66);
    [v67 addObject:v68];
  }

  unsigned int v69 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) _badgeCountItemsForPayLaterWithAccount:v35]);
  [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObjectsFromArray:v69];
  if (v34 && PKSavingsAccountIsThresholdExceededActive(v34))
  {
    id v70 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    id v71 = objc_alloc(&OBJC_CLASS___PKBadgeCountItem);
    id v72 = (void *)objc_claimAutoreleasedReturnValue([v34 accountIdentifier]);
    unsigned int v73 = -[PKBadgeCountItem initWithTitle:subtitle:count:]( v71,  "initWithTitle:subtitle:count:",  @"Badge count for savings account",  v72,  1LL);
    [v70 addObject:v73];
  }
}

LABEL_90:
}

void sub_1000D39AC(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = *(void **)(a1 + 24);
    id v3 = a2;
    id v5 = (id)objc_claimAutoreleasedReturnValue([v2 passSharesWithNoPass]);
    id v4 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Pending Activations:\n\n %@ \n",  v5));
    v3[2](v3, v4);
  }

void sub_1000D3A30(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = a1[3];
    if (v5)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 passWithUniqueIdentifier:v5]);
      id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 secureElementPass]);

      if (!v9)
      {
        v6[2](v6, @"Unable to find pass");
        goto LABEL_8;
      }

      id v10 = (void *)objc_claimAutoreleasedReturnValue([a1[3] passSharesForPassUniqueIdentifier:v5]);
    }

    else
    {
      id v10 = (void *)objc_claimAutoreleasedReturnValue([v7 passSharesWithNoPass]);
      id v9 = 0LL;
    }

    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1000D6D78;
    v13[3] = &unk_100641D98;
    id v14 = v10;
    id v15 = a1;
    id v16 = v5;
    id v17 = v9;
    id v18 = v6;
    id v11 = v9;
    id v12 = v10;
    [a1 revokeSharesForPassIdentifier:v16 shares:v12 shouldCascade:0 completion:v13];
  }

void sub_1000D3B84(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  if (a1)
  {
    if (v7)
    {
      id v9 = +[PKSharingRelayChannelDescriptor existingChannelForMailboxIdentifier:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForMailboxIdentifier:",  v7);
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) handleForDescriptor:v9 queue:*(void *)(a1 + 88)]);
      if (v10)
      {
        v13[0] = _NSConcreteStackBlock;
        v13[1] = 3221225472LL;
        v13[2] = sub_1000D6EB0;
        v13[3] = &unk_100641010;
        id v16 = v8;
        id v14 = v7;
        id v15 = v10;
        [v15 attachWithCompletion:v13];
      }

      else
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find active endpoint for %@",  v7));
        (*((void (**)(id, void *))v8 + 2))(v8, v12);
      }
    }

    else
    {
      id v11 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) monitor]);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      void v17[2] = sub_1000D6E9C;
      v17[3] = &unk_10063A830;
      id v18 = v8;
      [v11 checkForNewSharingMessagesWithShouldCheckAllEndpoint:a3 completion:v17];

      id v9 = v18;
    }
  }
}

void sub_1000D3D14(uint64_t a1, void *a2)
{
  if (a1)
  {
    id v2 = *(void **)(a1 + 24);
    id v3 = a2;
    LODWORD(v2) = [v2 activeExternalPassSharesExist];
    id v4 = objc_alloc(&OBJC_CLASS___NSString);
    id v5 = @"No";
    if ((_DWORD)v2) {
      id v5 = @"Yes";
    }
    id v6 = -[NSString initWithFormat:](v4, "initWithFormat:", @"\nDo active shares exist: %@\n", v5);
    v3[2](v3, v6);
  }

void sub_1000D3DA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  if (a1)
  {
    id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) passWithUniqueIdentifier:a2]);
    id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 secureElementPass]);

    if (v9)
    {
      if ([v9 isCarKeyPass])
      {
        id v21 = v9;
        id v22 = v7;
        __int128 v30 = 0u;
        __int128 v31 = 0u;
        __int128 v28 = 0u;
        __int128 v29 = 0u;
        obuint64_t j = (id)objc_claimAutoreleasedReturnValue([v9 devicePaymentApplications]);
        id v10 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = *(void *)v29;
          do
          {
            id v13 = 0LL;
            do
            {
              if (*(void *)v29 != v12) {
                objc_enumerationMutation(obj);
              }
              __int128 v24 = 0u;
              __int128 v25 = 0u;
              __int128 v26 = 0u;
              __int128 v27 = 0u;
              id v15 = [v14 countByEnumeratingWithState:&v24 objects:v32 count:16];
              if (v15)
              {
                id v16 = v15;
                uint64_t v17 = *(void *)v25;
                do
                {
                  id v18 = 0LL;
                  do
                  {
                    if (*(void *)v25 != v17) {
                      objc_enumerationMutation(v14);
                    }
                    id v19 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v24 + 1) + 8 * (void)v18) sharingConfiguration]);
                    id v20 = v19;
                    if (v19) {
                      [v19 setNumberOfShareableCredentials:a3];
                    }

                    id v18 = (char *)v18 + 1;
                  }

                  while (v16 != v18);
                  id v16 = [v14 countByEnumeratingWithState:&v24 objects:v32 count:16];
                }

                while (v16);
              }

              [*(id *)(a1 + 24) updateAppletSubcredentials:v14];

              id v13 = (char *)v13 + 1;
            }

            while (v13 != v11);
            id v11 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
          }

          while (v11);
        }

        id v7 = v22;
        v22[2](v22, @"Updated limit");
        id v9 = v21;
      }

      else
      {
        v7[2](v7, @"Set limit only works for car key passes");
      }
    }

    else
    {
      v7[2](v7, @"Unable to find pass");
    }
  }
}

void sub_1000D3FF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (a1)
  {
    id v7 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) passWithUniqueIdentifier:v5]);
    id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 secureElementPass]);

    if (v8)
    {
      id v9 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"\nEntitlements:\n\n");
      __int128 v15 = 0u;
      __int128 v16 = 0u;
      __int128 v17 = 0u;
      __int128 v18 = 0u;
      id v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) passEntitlementsForPassUniqueIdentifier:v5]);
      id v11 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v11)
      {
        id v12 = v11;
        uint64_t v13 = *(void *)v16;
        do
        {
          id v14 = 0LL;
          do
          {
            if (*(void *)v16 != v13) {
              objc_enumerationMutation(v10);
            }
            -[NSMutableString appendFormat:]( v9,  "appendFormat:",  @"- %@ \n\n",  *(void *)(*((void *)&v15 + 1) + 8LL * (void)v14));
            id v14 = (char *)v14 + 1;
          }

          while (v12 != v14);
          id v12 = [v10 countByEnumeratingWithState:&v15 objects:v19 count:16];
        }

        while (v12);
      }

      v6[2](v6, v9);
    }

    else
    {
      v6[2](v6, (NSMutableString *)@"Unable to find pass");
    }
  }
}

void sub_1000D419C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = (void (**)(void, void))v9;
  if (a1)
  {
    if (v8)
    {
      unsigned __int16 v58 = bswap32([v8 integerValue]) >> 16;
      id v11 = -[NSData initWithBytes:length:](objc_alloc(&OBJC_CLASS___NSData), "initWithBytes:length:", &v58, 2LL);
      id v12 = (void *)objc_claimAutoreleasedReturnValue(-[NSData hexEncoding](v11, "hexEncoding"));
      sub_1000D419C(a1, v12, 0LL, v10);
    }

    else if (v7)
    {
      id v13 = [[PKPassEntitlementCapabilitySet alloc] initWithRole:v7];
      id v14 = v13;
      if (v13)
      {
        unsigned int v52 = v10;
        id v15 = [v13 shareability];
        id v16 = [v14 visibility];
        id v51 = v14;
        id v53 = [v14 manageability];
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "pk_decodeHexadecimal"));
        [v17 getBytes:&v58 length:2];

        unsigned __int16 v58 = bswap32(v58) >> 16;
        __int128 v18 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"\n");
        -[NSMutableString appendFormat:](v18, "appendFormat:", @"Hex Role: '%@'\n", v7);
        -[NSMutableString appendFormat:](v18, "appendFormat:", @"Int Role: '%hu'\n", v58);
        -[NSMutableString appendFormat:](v18, "appendFormat:", @"Binary: '");
        for (uint64_t i = 15LL; i != -1; --i)
        {
          if (((v58 >> i) & 1) != 0) {
            id v20 = @"1";
          }
          else {
            id v20 = @"0";
          }
          -[NSMutableString appendString:](v18, "appendString:", v20);
          if (i && (i & 3) == 0) {
            -[NSMutableString appendString:](v18, "appendString:", @" ");
          }
        }

        -[NSMutableString appendString:](v18, "appendString:", @"'\n\n");
        uint64_t v21 = PKSharingCapabilityShareabilityToString(v15);
        id v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        -[NSMutableString appendFormat:](v18, "appendFormat:", @"Shareability: '%@'\n", v22);

        if ((v58 & 8) != 0) {
          unint64_t v23 = @"Yes";
        }
        else {
          unint64_t v23 = @"No";
        }
        -[NSMutableString appendFormat:](v18, "appendFormat:", @"\tIntra Account: %@\n", v23);
        uint64_t v24 = PKSharingCapabilityVisibilityToString(v16);
        __int128 v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
        -[NSMutableString appendFormat:](v18, "appendFormat:", @"Visibility: '%@'\n", v25);

        uint64_t v26 = PKSharingCapabilityManageabilityToString(v53);
        __int128 v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
        -[NSMutableString appendFormat:](v18, "appendFormat:", @"Manageability: '%@'\n\n", v27);

        __int128 v28 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) passesOfType:1]);
        __int128 v29 = (void *)objc_claimAutoreleasedReturnValue([v28 objectsPassingTest:&stru_100641E00]);
        __int128 v30 = (void *)objc_claimAutoreleasedReturnValue([v29 anyObject]);

        if (v30)
        {
          id v50 = v7;
          id v31 = objc_alloc(&OBJC_CLASS___PKSharedPassSharesController);
          id v32 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 16) sharedWebService]);
          id v33 = PDDefaultQueue();
          uint64_t v34 = objc_claimAutoreleasedReturnValue(v33);
          unsigned int v35 = v30;
          id v36 = (void *)v34;
          uint64_t v49 = v35;
          id v37 = objc_msgSend(v31, "initWithPass:webService:paymentServiceProvider:queue:");

          __int128 v56 = 0u;
          __int128 v57 = 0u;
          __int128 v54 = 0u;
          __int128 v55 = 0u;
          id v48 = v37;
          id v38 = (void *)objc_claimAutoreleasedReturnValue([v37 possiblePredefinedEntitlements]);
          id v39 = [v38 countByEnumeratingWithState:&v54 objects:v59 count:16];
          if (v39)
          {
            id v40 = v39;
            uint64_t v41 = *(void *)v55;
            do
            {
              for (uint64_t j = 0LL; j != v40; uint64_t j = (char *)j + 1)
              {
                if (*(void *)v55 != v41) {
                  objc_enumerationMutation(v38);
                }
                id v43 = *(void **)(*((void *)&v54 + 1) + 8LL * (void)j);
                id v44 = (void *)objc_claimAutoreleasedReturnValue([v43 sharedEntitlements]);
                id v45 = (void *)objc_claimAutoreleasedReturnValue([v44 firstObject]);

                if ([v45 recipientShareability] == v15
                  && [v45 recipientVisibility] == v16
                  && [v45 recipientManageability] == v53)
                {
                  char v46 = (void *)objc_claimAutoreleasedReturnValue([v43 localizedTitle]);
                  -[NSMutableString appendFormat:]( v18,  "appendFormat:",  @"Matching Predefined Selection: '%@'\n",  v46);
                }
              }

              id v40 = [v38 countByEnumeratingWithState:&v54 objects:v59 count:16];
            }

            while (v40);
          }

          id v8 = 0LL;
          id v7 = v50;
          __int128 v30 = v49;
        }

        id v10 = v52;
        ((void (**)(void, NSMutableString *))v52)[2](v52, v18);

        id v14 = v51;
      }

      else
      {
        id v47 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to convert '%@' to capability",  v7));
        ((void (**)(void, void *))v10)[2](v10, v47);
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v9 + 2))(v9, @"Missing role parameter");
    }
  }
}

void sub_1000D46A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (a1)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(33LL);
    id v5 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "PDSharingManager: Disabling monitor", buf, 2u);
    }

    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 136) monitor]);
    [v6 setDisabled:1];

    id v7 = objc_alloc_init(&OBJC_CLASS___NSMutableDictionary);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  PKUserNotificationDontDismissOnUnlock);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  &__kCFBooleanTrue,  PKUserNotificationAllowMenuButtonDismissal);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  @"Offline",  kCFUserNotificationAlertHeaderKey);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  @"The device is now simulating being offline for Pinsir shares.",  kCFUserNotificationAlertMessageKey);
    -[NSMutableDictionary setObject:forKeyedSubscript:]( v7,  "setObject:forKeyedSubscript:",  @"Go Back Online",  kCFUserNotificationDefaultButtonTitleKey);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472LL;
    v8[2] = sub_1000D7000;
    v8[3] = &unk_100641E48;
    void v8[4] = a1;
    +[PKUserNotificationAgent presentNotificationWithParameters:responseHandler:]( &OBJC_CLASS___PKUserNotificationAgent,  "presentNotificationWithParameters:responseHandler:",  v7,  v8);
    v3[2](v3, @"Monitor successfully disabled");
  }
}

void sub_1000D483C(id *a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9 = a2;
  unint64_t v10 = a3;
  id v11 = a5;
  id v12 = (void (**)(void, void))v11;
  if (a1)
  {
    if (v9 | v10)
    {
      if (v9)
      {
LABEL_6:
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472LL;
        void v16[2] = sub_1000D70B8;
        v16[3] = &unk_10063B3A0;
        __int128 v17 = v12;
        [a1 didReceiveActivationCodeFailureForCredentialIdentifier:v9 attemptsRemaining:a4 completion:v16];

        goto LABEL_9;
      }

      id v13 = (void *)objc_claimAutoreleasedReturnValue([a1[3] passShareForIdentifier:v10]);
      uint64_t v14 = objc_claimAutoreleasedReturnValue([v13 subcredentialIdentifier]);
      if (v14)
      {
        uint64_t v9 = v14;

        goto LABEL_6;
      }

      id v15 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find credential identifier for share '%@'",  v10));
      ((void (**)(void, void *))v12)[2](v12, v15);
    }

    else
    {
      (*((void (**)(id, const __CFString *))v11 + 2))( v11,  @"A credential identifier or a share identifier must be provided");
    }

    uint64_t v9 = 0LL;
  }

void sub_1000D4980(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    if (v5)
    {
      v8[0] = _NSConcreteStackBlock;
      v8[1] = 3221225472LL;
      v8[2] = sub_1000D7190;
      v8[3] = &unk_100641ED8;
      id v10 = v6;
      id v9 = v5;
      [a1 pendingShareActivationForShareIdentifier:v9 completion:v8];
    }

    else
    {
      (*((void (**)(id, const __CFString *))v6 + 2))(v6, @"Share identifier required");
    }
  }
}

void sub_1000D4A44(void *a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (a1)
  {
    if (v7 && v8)
    {
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472LL;
      id v11[2] = sub_1000D70CC;
      void v11[3] = &unk_100641EB0;
      id v15 = v9;
      id v12 = v7;
      id v13 = a1;
      id v14 = v8;
      [a1 pendingShareActivationForShareIdentifier:v12 completion:v11];
    }

    else
    {
      (*((void (**)(id, const __CFString *))v9 + 2))( v9,  @"Missing share identifier or activation code");
    }
  }
}

void sub_1000D4B38(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (a1)
  {
    id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) passWithUniqueIdentifier:v9]);
    id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 secureElementPass]);

    if (v7)
    {
      id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) passEntitlementsForPassUniqueIdentifier:v9]);
      objc_msgSend( *(id *)(a1 + 40),  "sendEntitlementChangeNotificationsForPass:oldEntitlements:newEntitlements:hasExistingShares:",  v7,  0,  v8,  objc_msgSend(*(id *)(a1 + 24), "hasSharesForPassUniqueIdentifier:", v9));
      v5[2](v5, @"Sent entitlement change notification\n");
    }

    else
    {
      v5[2](v5, @"Unable to find pass");
    }
  }
}

void sub_1000D4C18(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (a1)
  {
    if (v5)
    {
      id v8 = objc_alloc_init(&OBJC_CLASS___PKSecureElement);
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472LL;
      id v9[2] = sub_1000D71EC;
      v9[3] = &unk_100641F00;
      id v10 = v7;
      -[PKSecureElement longTermPrivacyKeyForCredentialGroupIdentifier:reuseExisting:completion:]( v8,  "longTermPrivacyKeyForCredentialGroupIdentifier:reuseExisting:completion:",  v5,  0LL,  v9);
    }

    else
    {
      (*((void (**)(id, const __CFString *))v6 + 2))(v6, @"Missing groupId");
    }
  }
}

void sub_1000D4CE4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v31 = a3;
  id v8 = a4;
  if (a1)
  {
    __int128 v30 = objc_alloc_init(&OBJC_CLASS___PKSecureElement);
    id v9 = objc_alloc_init(&OBJC_CLASS___NSMutableString);
    id v10 = objc_alloc_init(&OBJC_CLASS___NSMutableArray);
    id v11 = v10;
    if (v7)
    {
      id v12 = v7;
    }

    else
    {
      __int128 v46 = 0u;
      __int128 v47 = 0u;
      __int128 v44 = 0u;
      __int128 v45 = 0u;
      id v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 24) passesOfType:1]);
      id v14 = [v13 countByEnumeratingWithState:&v44 objects:v49 count:16];
      if (v14)
      {
        id v15 = v14;
        uint64_t v16 = *(void *)v45;
        do
        {
          for (uint64_t i = 0LL; i != v15; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v45 != v16) {
              objc_enumerationMutation(v13);
            }
            __int128 v18 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*((void *)&v44 + 1) + 8 * (void)i) longTermPrivacyKeyGroupIdentifier]);
            -[NSMutableArray safelyAddObject:](v11, "safelyAddObject:", v18);
          }

          id v15 = [v13 countByEnumeratingWithState:&v44 objects:v49 count:16];
        }

        while (v15);
      }

      id v12 = @"magic-key";
      id v10 = v11;
    }

    -[NSMutableArray addObject:](v10, "addObject:", v12);
    if (-[NSMutableArray count](v11, "count"))
    {
      __int128 v28 = v8;
      __int128 v29 = v7;
      id v19 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      __int128 v42 = 0u;
      __int128 v43 = 0u;
      id v20 = v11;
      id v21 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v40,  v48,  16LL);
      if (v21)
      {
        id v22 = v21;
        uint64_t v23 = *(void *)v41;
        do
        {
          for (uint64_t j = 0LL; j != v22; uint64_t j = (char *)j + 1)
          {
            if (*(void *)v41 != v23) {
              objc_enumerationMutation(v20);
            }
            uint64_t v25 = *(void *)(*((void *)&v40 + 1) + 8LL * (void)j);
            v35[0] = _NSConcreteStackBlock;
            v35[1] = 3221225472LL;
            v35[2] = sub_1000D727C;
            v35[3] = &unk_10063BAD8;
            id v36 = v30;
            uint64_t v37 = v25;
            id v38 = v31;
            id v39 = v9;
            [v19 addOperation:v35];
          }

          id v22 = -[NSMutableArray countByEnumeratingWithState:objects:count:]( v20,  "countByEnumeratingWithState:objects:count:",  &v40,  v48,  16LL);
        }

        while (v22);
      }

      uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
      v32[0] = _NSConcreteStackBlock;
      v32[1] = 3221225472LL;
      v32[2] = sub_1000D762C;
      v32[3] = &unk_10063F000;
      id v8 = v28;
      id v34 = v28;
      id v33 = v9;
      id v27 = [v19 evaluateWithInput:v26 completion:v32];

      id v7 = v29;
    }

    else
    {
      (*((void (**)(id, const __CFString *))v8 + 2))( v8,  @"No groupId provided and no passes have groupId.");
    }
  }
}

void sub_1000D5050(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v15 = a2;
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  id v12 = v11;
  if (a1)
  {
    if (v10) {
      BOOL v13 = v9 == 0LL;
    }
    else {
      BOOL v13 = 1;
    }
    if (v13) {
      id v14 = @"Missing key or data";
    }
    else {
      id v14 = @"KML not supported on this platform";
    }
    (*((void (**)(id, const __CFString *))v11 + 2))(v11, v14);
  }
}

void sub_1000D50E4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v10 = a2;
  id v7 = a3;
  id v8 = a4;
  if (a1)
  {
    if (v10) {
      id v9 = @"KML not supported on this platform";
    }
    else {
      id v9 = @"Missing key or data";
    }
    v8[2](v8, v9);
  }
}

void sub_1000D5168(uint64_t a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  id v6 = (void (**)(void, void))v5;
  if (a1)
  {
    if (v14)
    {
      id v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 24), "passWithUniqueIdentifier:"));
      id v8 = (void *)objc_claimAutoreleasedReturnValue([v7 secureElementPass]);

      if (v8)
      {
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v8 auxiliaryRegistrationRequirements]);
        id v10 = (void *)objc_claimAutoreleasedReturnValue([v9 deviceDecryptionRequirements]);
        id v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "pk_firstObjectPassingTest:", &stru_100641F68));

        if (v11)
        {
          [*(id *)(a1 + 24) updateAuxiliaryRegistrationRequirement:v11 pass:v8 isRegistered:0];
          id v12 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueID]);
          BOOL v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Invalidated LTPK for pass %@",  v12));
          ((void (**)(void, void *))v6)[2](v6, v13);
        }

        else
        {
          ((void (**)(void, const __CFString *))v6)[2](v6, @"unable to find LTPK for pass");
        }
      }

      else
      {
        ((void (**)(void, const __CFString *))v6)[2](v6, @"Unable to find pass");
      }
    }

    else
    {
      (*((void (**)(id, const __CFString *))v5 + 2))(v5, @"Missing pass unique ID");
    }
  }
}

void sub_1000D52D4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = objc_alloc(&OBJC_CLASS___NSMutableString);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transportIdentifier]);
  id v7 = -[NSMutableString initWithFormat:]( v5,  "initWithFormat:",  @"Mailbox %@ created for message: \n%@",  v6,  *(void *)(a1 + 40));

  if (v4)
  {
    -[NSMutableString appendFormat:](v7, "appendFormat:", @"\nError: %@", v4);
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }

  else
  {
    id v8 = objc_alloc_init(&OBJC_CLASS___PDShareURLDecorationConfiguration);
    id v9 = v8;
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = 1LL;
    if (v10 == 4) {
      uint64_t v11 = 2LL;
    }
    if (v10 == 3) {
      uint64_t v12 = 3LL;
    }
    else {
      uint64_t v12 = v11;
    }
    -[PDShareURLDecorationConfiguration setVertical:](v8, "setVertical:", v12);
    BOOL v13 = *(void **)(a1 + 32);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    id v14[2] = sub_1000D5418;
    v14[3] = &unk_1006414B0;
    id v15 = v7;
    id v16 = *(id *)(a1 + 48);
    [v13 universalShareURLWithDecoration:v9 completion:v14];
  }
}

uint64_t sub_1000D5418(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000D5458(void *a1, int a2, uint64_t a3)
{
  uint64_t v3 = a1[6];
  id v4 = @"N";
  if (a2) {
    id v4 = @"Y";
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Message sent to mailbox %@\nMessage: %@\nResult: Success %@ Error: %@",  a1[4],  a1[5],  v4,  a3));
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);
}

void sub_1000D54D4(uint64_t a1, char a2, uint64_t a3)
{
  if (a3 || (a2 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 48);
    id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Fetches messages from mailbox %@ \nError: %@",  *(void *)(a1 + 32),  a3));
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }

  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1000D55AC;
    v7[3] = &unk_100641B00;
    id v4 = *(void **)(a1 + 40);
    id v9 = *(id *)(a1 + 48);
    id v8 = *(id *)(a1 + 32);
    [v4 handleOutstandingMessage:v7];
  }

void sub_1000D55AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Fetches messages from mailbox %@ \nMessage: %@",  *(void *)(a1 + 32),  a2));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000D5608(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  if (a3 || (a2 & 1) == 0) {
    uint64_t v5 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to relinquish mailbox %@ \nError: %@",  v3,  a3);
  }
  else {
    uint64_t v5 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Relinquished mailbox %@",  v3,  v6);
  }
  id v7 = (id)objc_claimAutoreleasedReturnValue(v5);
  (*(void (**)(uint64_t))(v4 + 16))(v4);
}

void sub_1000D567C(void *a1, int a2, uint64_t a3)
{
  uint64_t v4 = a1[7];
  uint64_t v5 = @"N";
  if (a2) {
    uint64_t v5 = @"Y";
  }
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Mailbox %@ deleted\n\nResult: Success %@ Error: %@",  a1[4],  v5,  a3));
  (*(void (**)(uint64_t, void *))(v4 + 16))(v4, v6);

  id v7 = (void *)a1[6];
  id v8 = *(void **)(a1[5] + 8LL);
  id v9 = (id)objc_claimAutoreleasedReturnValue([v7 transportIdentifier]);
  [v8 channelEndpointWasTerminatedRemotely:v9];
}

void sub_1000D5728(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = @"No";
  if (a2) {
    uint64_t v4 = @"Yes";
  }
  id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"\nPinged endpoint '%@'\n\nSucces: %@\nError: %@\n\n",  *(void *)(a1 + 32),  v4,  a3));
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v5);
}

void sub_1000D57A0(void *a1, void *a2, void *a3)
{
  id v16 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v16 hexEncoding]);
  id v7 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"\nGenerated Push Token\n");
  uint64_t v8 = a1[6];
  if (v8)
  {
    uint64_t v9 = PKSharingRelayServerEnvironmentToString(v8);
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    -[NSMutableString appendFormat:](v7, "appendFormat:", @"Environment: %@\n", v10);
  }

  else
  {
    uint64_t v11 = ((uint64_t (*)(void))PKSharingRelayServerEnvironmentToString)();
    uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue(v11);
    uint64_t v12 = PKSharingResolvedRelayServerEnvironment();
    uint64_t v13 = PKSharingRelayServerEnvironmentToString(v12);
    id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    -[NSMutableString appendFormat:](v7, "appendFormat:", @"Environment: %@ (%@)\n", v10, v14);
  }

  -[NSMutableString appendFormat:](v7, "appendFormat:", @"Topic: %@\n\n", a1[4]);
  if (v6)
  {
    -[NSMutableString appendFormat:](v7, "appendFormat:", @"Hex Token: %@\n", v6);
    id v15 = (void *)objc_claimAutoreleasedReturnValue([v16 base64EncodedStringWithOptions:0]);
    -[NSMutableString appendFormat:](v7, "appendFormat:", @"Base64 Token: %@\n", v15);
  }

  else
  {
    -[NSMutableString appendFormat:](v7, "appendFormat:", @"Error: %@\n", v5);
  }

  -[NSMutableString appendFormat:](v7, "appendFormat:", @"\n");
  (*(void (**)(void))(a1[5] + 16LL))();
}

void sub_1000D591C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = -[NSMutableString initWithString:]( objc_alloc(&OBJC_CLASS___NSMutableString),  "initWithString:",  @"\nDevices:\n");
    __int128 v13 = 0u;
    __int128 v14 = 0u;
    __int128 v15 = 0u;
    __int128 v16 = 0u;
    id v5 = v3;
    id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v14;
      do
      {
        for (uint64_t i = 0LL; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v13 + 1) + 8LL * (void)i);
          uint64_t v11 = (void *)objc_claimAutoreleasedReturnValue([v10 name]);
          uint64_t v12 = (void *)IDSCopyIDForDevice(v10);
          -[NSMutableString appendFormat:]( v4,  "appendFormat:",  @"Device: %@ \n\tDestination: '%@'\n\n",  v11,  v12,  (void)v13);
        }

        id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }

      while (v7);
    }

    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  }
}

void sub_1000D5AA4(void *a1, int a2, uint64_t a3)
{
  uint64_t v3 = a1[6];
  uint64_t v4 = @"N";
  if (a2) {
    uint64_t v4 = @"Y";
  }
  id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Message sent to IDS device %@\nMessage: %@\nResult: Success %@ Error: %@",  a1[4],  a1[5],  v4,  a3));
  (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);
}

void sub_1000D5B20(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"\nReceived message: %@\n",  v6);

  (*(void (**)(void))(*(void *)(a1 + 32) + 16LL))();
  v5[2](v5, 1LL, 1LL);
}

uint64_t sub_1000D5BB4(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (a2) {
    uint64_t v3 = @"Handle timed out waiting for message";
  }
  else {
    uint64_t v3 = @"Handle was invalidated";
  }
  return (*(uint64_t (**)(uint64_t, const __CFString *))(v2 + 16))(v2, v3);
}

void sub_1000D5BD8(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = @"No";
  if (a2) {
    id v5 = @"Yes";
  }
  id v6 = (id)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](&OBJC_CLASS___NSString, "stringWithFormat:", @"Closed session: %@", v5));
  (*(void (**)(uint64_t, id))(v4 + 16))(v4, v6);
}

void sub_1000D5C58(uint64_t a1)
{
  id v2 = +[PKSharingRelayChannelDescriptor existingChannelForMailboxIdentifier:]( &OBJC_CLASS___PKSharingRelayChannelDescriptor,  "existingChannelForMailboxIdentifier:",  *(void *)(a1 + 32));
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( [*(id *)(*(void *)(a1 + 40) + 136) handleForDescriptor:v2 queue:*(void *)(*(void *)(a1 + 40) + 88)]);
  if (v3)
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472LL;
    v5[2] = sub_1000D5D28;
    v5[3] = &unk_100641C08;
    uint64_t v4 = *(id **)(a1 + 40);
    id v6 = *(id *)(a1 + 48);
    sub_1000C261C(v4, v3, v5);
  }

  else
  {
    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  }
}

void sub_1000D5D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2) {
    uint64_t v4 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Found valid invitation: %@",  a2);
  }
  else {
    uint64_t v4 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find valid invitation. Error: %@",  a3);
  }
  id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  (*(void (**)(uint64_t))(v3 + 16))(v3);
}

void sub_1000D5D94(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = @"Failure";
  if (a2) {
    uint64_t v3 = @"Success";
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"\nFinished prewarming create share with result: %@\n",  v3));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v4);
}

void sub_1000D5E04(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = *(void **)(*(void *)(a1 + 32) + 24LL);
  id v5 = a2;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v4 passWithUniqueIdentifier:v3]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 secureElementPass]);

  id v8 = [[PKPartialShareInvitation alloc] initWithShare:*(void *)(a1 + 48) pass:v7];
  uint64_t v9 = *(void **)(a1 + 32);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000D5F00;
  v10[3] = &unk_100641C30;
  id v12 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 48);
  [v9 createShareForPartialShareInvitation:v8 authorization:v5 completion:v10];
}

void sub_1000D5F00(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a3)
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to create share error: %@",  a3));
    (*(void (**)(uint64_t))(v3 + 16))(v3);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v6 = (id)objc_claimAutoreleasedReturnValue([a2 url]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Created share for %@\n\n%@",  v4,  v6));
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);
  }
}

void sub_1000D5FB0(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (v9 && !v5 && (uint64_t v6 = objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) externalizedContext])) != 0)
  {
    id v7 = (void *)v6;
    (*(void (**)(void, uint64_t))(*(void *)(a1 + 48) + 16LL))(*(void *)(a1 + 48), v6);
  }

  else
  {
    uint64_t v8 = *(void *)(a1 + 40);
    id v7 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to get auth with error: %@",  v5));
    (*(void (**)(uint64_t, void *))(v8 + 16))(v8, v7);
  }
}

id sub_1000D605C()
{
  id v0 = objc_alloc(&OBJC_CLASS___PKSharingMessageDisplayInformation);
  uint64_t v1 = -[NSURL initWithString:]( objc_alloc(&OBJC_CLASS___NSURL),  "initWithString:",  @"https://cdn.macsfera.com/wp-content/uploads/2017/09/14170027/Keynote-Lets-meet-at-our-place.jpg");
  uint64_t v2 = -[PKSharingMessageDisplayInformation initWithTitle:subtitle:imageURL:]( v0,  "initWithTitle:subtitle:imageURL:",  @"Car Key",  @"Car Key",  v1);

  id v3 = objc_alloc(&OBJC_CLASS___PKSharingCarKeyInvitation);
  uint64_t v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(@"AAAA", "pk_decodeHexadecimal"));
  id v5 = objc_alloc_init(&OBJC_CLASS___NSUUID);
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[NSUUID UUIDString](v5, "UUIDString"));
  id v7 = [v3 initWithRawInvite:v4 shareIdentifier:v6 radioTechnology:3 vehicleModel:@"CarModel" vehicleIssuer:@"CarMake" readerIdentifier:@"AAAAA" partnerIdentifier :@"V.MOCK.USM" brandIdentifier:@"BRND" carKeySharingDict:&__NSDictionary0__struct proprietaryData:0 activationOptions:0 displayInformation:v2];

  return v7;
}

void sub_1000D6180(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a3)
  {
    id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to create embedded share url: %@",  a3));
    (*(void (**)(uint64_t))(v3 + 16))(v3);
  }

  else
  {
    uint64_t v4 = *(void *)(a1 + 32);
    id v6 = (id)objc_claimAutoreleasedReturnValue([a2 url]);
    id v5 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Created mock share for %@\n\n\n%@",  v4,  v6));
    (*(void (**)(uint64_t, void *))(v3 + 16))(v3, v5);
  }
}

void sub_1000D6230(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[6];
  if (a3) {
    uint64_t v4 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to edit share error: %@",  a3,  v5);
  }
  else {
    uint64_t v4 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Updated share for %@ to: %@",  a1[4],  a1[5]);
  }
  id v6 = (id)objc_claimAutoreleasedReturnValue(v4);
  (*(void (**)(uint64_t))(v3 + 16))(v3);
}

void sub_1000D62A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  if (a3) {
    uint64_t v4 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to revoke share error: %@",  a3);
  }
  else {
    uint64_t v4 = +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Revoked share for %@",  *(void *)(a1 + 32));
  }
  id v5 = (id)objc_claimAutoreleasedReturnValue(v4);
  (*(void (**)(uint64_t))(v3 + 16))(v3);
}

void sub_1000D6318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 40);
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Message:%@\n\nshareURL: %@\nerror:%@",  *(void *)(a1 + 32),  a2,  a3));
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

void sub_1000D6378(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    if (*(_BYTE *)(a1 + 88))
    {
      id v7 = -[PKPendingStatefulTransferProvisioning initWithTransportIdentifier:invitation:share:]( objc_alloc(&OBJC_CLASS___PKPendingStatefulTransferProvisioning),  "initWithTransportIdentifier:invitation:share:",  *(void *)(a1 + 32),  v5,  *(void *)(a1 + 40));
      -[PKPendingStatefulTransferProvisioning setOriginalShareURL:](v7, "setOriginalShareURL:", *(void *)(a1 + 48));
      -[PKPendingStatefulTransferProvisioning setAccountAttestationAnonymizationSalt:]( v7,  "setAccountAttestationAnonymizationSalt:",  *(void *)(a1 + 56));
      -[PKPendingStatefulTransferProvisioning setShouldAutoProvision:](v7, "setShouldAutoProvision:", 1LL);
      uint64_t v8 = *(void **)(a1 + 64);
      id v20 = v7;
      id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](&OBJC_CLASS___NSArray, "arrayWithObjects:count:", &v20, 1LL));
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472LL;
      void v17[2] = sub_1000D655C;
      v17[3] = &unk_10063C3B0;
      id v10 = *(id *)(a1 + 80);
      __int128 v18 = v7;
      id v19 = v10;
      id v11 = v7;
      [v8 addPendingProvisionings:v9 completion:v17];
    }

    else
    {
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472LL;
      id v15[2] = sub_1000D65FC;
      v15[3] = &unk_100641CD0;
      __int128 v14 = *(void **)(a1 + 72);
      id v16 = *(id *)(a1 + 80);
      [v14 acceptCarKeyShareForMessage:v5 activationCode:0 completion:v15];
    }
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 80);
    __int128 v13 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to retrieve share, %@",  v6));
    (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);
  }
}

void sub_1000D655C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (a2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to queue pending provisioning with error: %@",  a2));
    (*(void (**)(uint64_t))(v2 + 16))(v2);
  }

  else
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Queued pending provisioning with identifier: %@",  v4));
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
}

void sub_1000D65FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Accepted share response: %@, error: %@",  a2,  a3));
  (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);
}

void sub_1000D6654(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (a2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to queue pending provisioning with error: %@",  a2));
    (*(void (**)(uint64_t))(v2 + 16))(v2);
  }

  else
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) uniqueIdentifier]);
    uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Queued pending provisioning with identifier: %@",  v4));
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }
}

void sub_1000D66F4(uint64_t a1, uint64_t a2)
{
  if (a2 == 2)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Account has %@ device - NO",  *(void *)(a1 + 32));
  }

  else if (a2 == 1)
  {
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Account has %@ device - YES",  *(void *)(a1 + 32));
  }

  else
  {
    if (a2) {
      return;
    }
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = -[NSString initWithFormat:]( objc_alloc(&OBJC_CLASS___NSString),  "initWithFormat:",  @"Unable to determine if account has %@ device",  *(void *)(a1 + 32));
  }

  id v4 = v3;
  (*(void (**)(uint64_t))(v2 + 16))(v2);
}

void sub_1000D67C0(uint64_t a1, char a2, uint64_t a3)
{
  if (a3 || (a2 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to send message with error %@",  a3));
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }

  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1000D68C0;
    v7[3] = &unk_10063AC90;
    id v8 = *(id *)(a1 + 32);
    id v9 = *(id *)(a1 + 40);
    id v4 = objc_retainBlock(v7);
    else {
      [*(id *)(a1 + 32) setMessageReceivedHandler:v4];
    }
  }

void sub_1000D68C0(uint64_t a1)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000D6944;
  v3[3] = &unk_100641B00;
  uint64_t v2 = *(void **)(a1 + 32);
  id v5 = *(id *)(a1 + 40);
  id v4 = *(id *)(a1 + 32);
  [v2 handleOutstandingMessage:v3];
}

id sub_1000D6944(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = *(void (**)(uint64_t, uint64_t))(a3 + 16);
  id v6 = a2;
  v5(a3, 1LL);
  uint64_t v7 = *(void *)(a1 + 40);
  id v8 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Received invitation %@",  v6));

  (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);
  return [*(id *)(a1 + 32) invalidate];
}

void sub_1000D69CC(uint64_t a1, char a2, uint64_t a3)
{
  if (a3 || (a2 & 1) == 0)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to send message with error %@",  a3));
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }

  else
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472LL;
    v10[2] = sub_1000D6AF4;
    v10[3] = &unk_100641BE0;
    id v4 = *(void **)(a1 + 32);
    id v11 = *(id *)(a1 + 40);
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472LL;
    v7[2] = sub_1000D6B7C;
    v7[3] = &unk_10063CAE0;
    id v9 = *(id *)(a1 + 40);
    id v8 = *(id *)(a1 + 32);
    [v4 waitForMessageWithTimeout:v10 messageHandler:v7 invalidationHandler:300.0];
  }

void sub_1000D6AF4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(a3 + 16);
  id v6 = a2;
  v5(a3, 1LL, 1LL);
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"\n\nReceived invitation: %@\n",  v6));

  (*(void (**)(uint64_t, id))(v7 + 16))(v7, v8);
}

uint64_t sub_1000D6B7C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (a2) {
    uint64_t v3 = @"\nTimed out waiting for response\n";
  }
  else {
    uint64_t v3 = @"\nHandle invalidated\n";
  }
  return (*(uint64_t (**)(uint64_t, const __CFString *))(v2 + 16))(v2, v3);
}

void sub_1000D6BA0(uint64_t a1, const __CFString *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = @"nil";
  if (a2) {
    id v4 = a2;
  }
  [v3 appendFormat:@"%@", v4];
  id v6 = *(void **)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000D6C6C;
  v7[3] = &unk_1006415C0;
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 48);
  id v10 = *(id *)(a1 + 56);
  [v6 displayableEntitlementsForPassIdentifier:v5 completion:v7];
}

uint64_t sub_1000D6C6C(void *a1, void *a2)
{
  uint64_t v3 = (void *)a1[4];
  uint64_t v4 = a1[5];
  id v5 = a2;
  [v3 appendFormat:@"\n\nEntitlements for %@:\n", v4];
  id v6 = (void *)a1[4];
  uint64_t v7 = (__CFString *)objc_claimAutoreleasedReturnValue([v5 description]);

  if (v7) {
    id v8 = v7;
  }
  else {
    id v8 = @"nil";
  }
  [v6 appendString:v8];

  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

uint64_t sub_1000D6CF8(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)objc_claimAutoreleasedReturnValue([a2 identifier]);
  uint64_t v4 = *(void **)(a1 + 32);
  id v5 = v3;
  id v6 = v4;
  uint64_t v7 = v6;
  if (v5 == v6)
  {
    uint64_t v8 = 0LL;
  }

  else
  {
    uint64_t v8 = 1LL;
    if (v5 && v6) {
      uint64_t v8 = [v5 isEqualToString:v6] ^ 1;
    }
  }

  return v8;
}

void sub_1000D6D78(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 32);
    *(_DWORD *)id buf = 138412290;
    uint64_t v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PDSharingManager CLI: Revoked %@", buf, 0xCu);
  }

  [*(id *)(*(void *)(a1 + 40) + 24) updatePassSharesForPassUniqueIdentifier:*(void *)(a1 + 48) passShares:0];
  uint64_t v8 = *(void *)(a1 + 56);
  if (v8) {
    [*(id *)(a1 + 40) passUpdated:v8 oldShares:*(void *)(a1 + 32)];
  }
  uint64_t v9 = *(void *)(a1 + 64);
  id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Removed %lu shares on pass %@",  [*(id *)(a1 + 32) count],  *(void *)(a1 + 48)));
  (*(void (**)(uint64_t, void *))(v9 + 16))(v9, v10);
}

uint64_t sub_1000D6E9C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000D6EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = *(void *)(a1 + 48);
    id v5 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Fetches messages from mailbox %@ \nError: %@",  *(void *)(a1 + 32),  a3));
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v5);
  }

  else
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472LL;
    id v6[2] = sub_1000D6F70;
    v6[3] = &unk_100641DC0;
    id v4 = *(void **)(a1 + 40);
    id v7 = *(id *)(a1 + 48);
    [v4 handleOutstandingMessage:v6];
  }

void sub_1000D6F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = @"YES";
  if (!a2) {
    id v6 = @"NO";
  }
  id v7 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Handling message: %@",  v6));
  (*(void (**)(uint64_t, id))(v5 + 16))(v5, v7);
}

BOOL sub_1000D6FF8(id a1, PKSecureElementPass *a2, BOOL *a3)
{
  return -[PKSecureElementPass isCarKeyPass](a2, "isCarKeyPass", a3);
}

void sub_1000D7000(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(33LL);
  uint64_t v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "PDSharingManager: Enabling monitor", v6, 2u);
  }

  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 136) monitor]);
  [v4 setDisabled:0];

  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 136) monitor]);
  [v5 checkForNewSharingMessagesWithShouldCheckAllEndpoint:1 completion:&stru_100641E20];
}

uint64_t sub_1000D70B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000D70CC(void *a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a1[5];
    id v4 = (void *)objc_claimAutoreleasedReturnValue([a2 originalInvitation]);
    [v3 acceptCarKeyShareForMessage:v4 activationCode:a1[6] completion:&stru_100641E88];

    (*(void (**)(void))(a1[7] + 16LL))();
  }

  else
  {
    uint64_t v5 = a1[7];
    id v6 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Unable to find pending activation for share '%@'\n",  a1[4]));
    (*(void (**)(uint64_t, id))(v5 + 16))(v5, v6);
  }

void sub_1000D7190(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = (id)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Pending activation for share '%@': \n\n %@ \n",  *(void *)(a1 + 32),  a2));
  (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);
}

void sub_1000D71EC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (a2)
  {
    id v4 = (id)objc_claimAutoreleasedReturnValue([a2 hexEncoding]);
    id v3 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Created long term privacy key: %@",  v4));
    (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v3);
  }

  else
  {
    (*(void (**)(void, const __CFString *))(v2 + 16))( *(void *)(a1 + 32),  @"Failed to create long term privacy key");
  }

void sub_1000D727C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_1000D734C;
  v15[3] = &unk_100641F28;
  uint64_t v10 = *(void *)(a1 + 48);
  id v11 = *(id *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 40);
  id v16 = v11;
  uint64_t v17 = v12;
  id v18 = v6;
  id v19 = v7;
  id v13 = v6;
  id v14 = v7;
  [v8 longTermPrivacyKeysForCredentialGroupIdentifier:v9 privacyKeyIdentifier:v10 completion:v15];
}

void sub_1000D734C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = *(void **)(a1 + 32);
  if (v5)
  {
    if ([*(id *)(a1 + 32) length]) {
      id v7 = @"========================\n\n";
    }
    else {
      id v7 = @"\n";
    }
    [v6 appendString:v7];
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"GroupID: '%@'\n",  *(void *)(a1 + 40)));
    [v8 appendString:v9];

    uint64_t v10 = *(void **)(a1 + 32);
    id v11 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( NSString,  "stringWithFormat:",  @"Found %lu keys\n\n",  [v5 count]));
    [v10 appendString:v11];

    __int128 v32 = 0u;
    __int128 v33 = 0u;
    __int128 v30 = 0u;
    __int128 v31 = 0u;
    id v28 = v5;
    obuint64_t j = v5;
    id v12 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
    if (v12)
    {
      id v13 = v12;
      uint64_t v14 = *(void *)v31;
      do
      {
        for (uint64_t i = 0LL; i != v13; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v31 != v14) {
            objc_enumerationMutation(obj);
          }
          id v16 = *(void **)(*((void *)&v30 + 1) + 8LL * (void)i);
          uint64_t v17 = *(void **)(a1 + 32);
          id v18 = (void *)objc_claimAutoreleasedReturnValue([v16 keyIdentifier]);
          id v19 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"KeyID: %@\n",  v18));
          [v17 appendString:v19];

          id v20 = (void *)objc_claimAutoreleasedReturnValue([v16 publicKey]);
          id v21 = (void *)objc_claimAutoreleasedReturnValue([v20 base64EncodedStringWithOptions:0]);

          id v22 = *(void **)(a1 + 32);
          uint64_t v23 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Public Key: %@\n",  v21));
          [v22 appendString:v23];

          uint64_t v24 = *(void **)(a1 + 32);
          uint64_t v25 = (void *)objc_claimAutoreleasedReturnValue([v16 creationDate]);
          uint64_t v26 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Created: %@\n\n",  v25));
          [v24 appendString:v26];
        }

        id v13 = [obj countByEnumeratingWithState:&v30 objects:v34 count:16];
      }

      while (v13);
    }

    id v5 = v28;
  }

  else
  {
    id v27 = (void *)objc_claimAutoreleasedReturnValue( +[NSString stringWithFormat:]( &OBJC_CLASS___NSString,  "stringWithFormat:",  @"Failed to get long term privacy keys: %@",  a3));
    [v6 appendString:v27];
  }

  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

uint64_t sub_1000D762C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32));
}

BOOL sub_1000D763C(id a1, PKPassAuxiliaryRegistrationDecryptionRequirement *a2)
{
  return -[PKPassAuxiliaryRegistrationDecryptionRequirement type](a2, "type") == (id)2;
}

void sub_1000D782C(id a1)
{
  int IsAvailable = PKSecureElementIsAvailable(a1);
  unsigned int v2 = +[PKDAManager isSupported](&OBJC_CLASS___PKDAManager, "isSupported");
  int v3 = v2 & (PKIsSRD() ^ 1);
  if (!IsAvailable) {
    LOBYTE(v3) = 0;
  }
  byte_100707968 = v3;
}

BOOL sub_1000D8024(id a1, PKSecureElementPass *a2)
{
  return PKPaymentApplicationStateAllowsReplacementInvitation( -[PKSecureElementPass effectiveContactlessPaymentApplicationState]( a2,  "effectiveContactlessPaymentApplicationState")) == 0;
}

void sub_1000D8A3C(uint64_t a1, uint64_t a2, void *a3, id *a4)
{
  id v9 = a3;
  id v7 = *a4;
  if (v7)
  {
    uint64_t v8 = objc_opt_class(&OBJC_CLASS___NSNumber, v6);
    if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0) {
      objc_msgSend(*(id *)(a1 + 32), "pk_safelyAddObject:", v7);
    }
  }
}

void sub_1000D8FC8(id a1, PKPeerPaymentEncryptionCertificatesVersions *a2, id a3)
{
  id v4 = a2;
  -[PKPeerPaymentEncryptionCertificatesVersions setRecipientData:]( v4,  "setRecipientData:",  [a3 integerValue]);
}

void sub_1000D90E8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

uint64_t sub_1000D922C(uint64_t a1)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v14;
    while (2)
    {
      uint64_t v6 = 0LL;
      do
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)v6);
        id v8 = objc_alloc(*(Class *)(a1 + 48));
        id v9 = (void *)objc_claimAutoreleasedReturnValue( objc_msgSend( *(id *)(a1 + 48),  "_propertyValuesForPassRelevancyDates:passPID:",  v7,  *(void *)(a1 + 56),  (void)v13));
        id v10 = [v8 initWithPropertyValues:v9 inDatabase:*(void *)(a1 + 40)];

        if (!v10)
        {
          uint64_t v11 = 0LL;
          goto LABEL_11;
        }

        uint64_t v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }

  uint64_t v11 = 1LL;
LABEL_11:

  return v11;
}

void sub_1000D9684(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v12 = (id)_DateForSQLValue(*a4);
  uint64_t v6 = (void *)_DateForSQLValue(a4[1]);
  uint64_t v7 = (void *)_DateForSQLValue(a4[2]);
  id v8 = objc_alloc(&OBJC_CLASS___PKPassRelevantDate);
  if (v6) {
    BOOL v9 = v7 == 0LL;
  }
  else {
    BOOL v9 = 1;
  }
  if (v9) {
    id v10 = -[PKPassRelevantDate initWithRelevantDate:](v8, "initWithRelevantDate:", v12);
  }
  else {
    id v10 = -[PKPassRelevantDate initWithEffectiveStartDate:effectiveEndDate:]( v8,  "initWithEffectiveStartDate:effectiveEndDate:",  v6,  v7);
  }
  uint64_t v11 = v10;
  [*(id *)(a1 + 32) safelyAddObject:v10];
}

int64_t sub_1000D9728(id a1, PKPassRelevantDate *a2, PKPassRelevantDate *a3)
{
  id v4 = a3;
  uint64_t v5 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassRelevantDate relevantDateWithPriority:](a2, "relevantDateWithPriority:", 0LL));
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue(-[PKPassRelevantDate relevantDateWithPriority:](v4, "relevantDateWithPriority:", 0LL));

  id v7 = [v5 compare:v6];
  return (int64_t)v7;
}

void sub_1000D9CA8(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  id v9 = *a4;
  uint64_t v6 = objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  id v7 = v9;
  if (v9 != (id)v6)
  {
    id v8 = (void *)v6;
    id v10 = *a4;

    if (!v10) {
      return;
    }
    [*(id *)(a1 + 32) addObject:v10];
    id v7 = v10;
  }
}

uint64_t sub_1000D9E74(uint64_t a1)
{
  id v2 =  [*(id *)(a1 + 56) insertCountryCodes:*(void *)(a1 + 48) supported:1 withPaymentApplication:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  return 1LL;
}

uint64_t sub_1000D9F84(uint64_t a1)
{
  id v2 =  [*(id *)(a1 + 56) insertCountryCodes:*(void *)(a1 + 48) supported:0 withPaymentApplication:*(void *)(a1 + 32) inDatabase:*(void *)(a1 + 40)];
  return 1LL;
}

void sub_1000DA834(_Unwind_Exception *a1)
{
  id v4 = v1;
  objc_destroyWeak(v4);
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v3 - 56));
  _Unwind_Resume(a1);
}

void sub_1000DA868(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)(a1 + 32);
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v6 = WeakRetained;
  if (WeakRetained)
  {
    os_unfair_lock_lock(WeakRetained + 6);
    id v7 = (void (**)(id, id))objc_retainBlock(*(id *)&v6[14]._os_unfair_lock_opaque);
    id v8 = *(void **)&v6[14]._os_unfair_lock_opaque;
    *(void *)&v6[14]._os_unfair_lock_opaque = 0LL;

    os_unfair_lock_unlock(v6 + 6);
    if (v3)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(42LL);
      id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v12 = 138412290;
        id v13 = v3;
        _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Failed to start proximity advertising with error: %@",  (uint8_t *)&v12,  0xCu);
      }

      if (v7) {
        v7[2](v7, v3);
      }
      id v11 = objc_loadWeakRetained(v4);
      [v11 _invalidateWithShouldNotify:1];
    }

    else if (v7)
    {
      v7[2](v7, 0LL);
    }
  }
}

void sub_1000DA9B8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = (id *)(a1 + 32);
  id WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 32));
  id v7 = WeakRetained;
  if (WeakRetained)
  {
    os_unfair_lock_lock(WeakRetained + 6);
    id v8 = (void (**)(id, id))objc_retainBlock(*(id *)&v7[10]._os_unfair_lock_opaque);
    id v9 = *(void **)&v7[10]._os_unfair_lock_opaque;
    *(void *)&v7[10]._os_unfair_lock_opaque = 0LL;

    os_unfair_lock_unlock(v7 + 6);
    if (v8)
    {
      uint64_t Object = PKLogFacilityTypeGetObject(42LL);
      id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
      BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      if (a4)
      {
        if (v12)
        {
          *(_WORD *)id buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Verified proximity verification",  buf,  2u);
        }

        id v13 = objc_alloc_init(&OBJC_CLASS___PKContinuityProximityBLEVerification);
        v8[2](v8, v13);
      }

      else
      {
        if (v12)
        {
          v15[0] = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Failed to verify proximity verification",  (uint8_t *)v15,  2u);
        }

        v8[2](v8, 0LL);
      }
    }

    id v14 = objc_loadWeakRetained(v5);
    [v14 _invalidateWithShouldNotify:1];
  }
}

void sub_1000DAB04(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained _invalidateWithShouldNotify:1];
  }

void sub_1000DBC88(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v8 = objc_alloc_init(&OBJC_CLASS___PKAccountPendingFamilyMember);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v8 withProperties:v6 values:a4];

  id v7 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 40), "addObject:");
    id v7 = v8;
  }
}

void sub_1000DBDCC(id a1, PKAccountPendingFamilyMember *a2, id a3)
{
}

void sub_1000DBDD4(id a1, PKAccountPendingFamilyMember *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAccountPendingFamilyMember setInviteDate:](v4, "setInviteDate:", v5);
}

void sub_1000DBE20(id a1, PKAccountPendingFamilyMember *a2, id a3)
{
}

void sub_1000DBE28(id a1, PKAccountPendingFamilyMember *a2, id a3)
{
  id v4 = a2;
  -[PKAccountPendingFamilyMember setDisplayedNotification:]( v4,  "setDisplayedNotification:",  [a3 BOOLValue]);
}

void sub_1000DBE6C(id a1, PKAccountPendingFamilyMember *a2, id a3)
{
}

void sub_1000DC3CC(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  id v6 = a2;
  objc_msgSend( (id)objc_opt_class(v5, v7),  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 40),  *(void *)(a1 + 48),  v6,  a3);

  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) database]);
  id v9 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) valueForProperty:@"b"]);
  id v12 = (id)objc_claimAutoreleasedReturnValue( +[PayLaterFundingSourceDetails anyInDatabase:forPID:]( &OBJC_CLASS___PayLaterFundingSourceDetails,  "anyInDatabase:forPID:",  v8,  v9));

  id v10 = *(void **)(a1 + 48);
  id v11 = (void *)objc_claimAutoreleasedReturnValue([v12 fundingSourceDetails]);
  [v10 setDetails:v11];
}

void sub_1000DC64C(id a1, PKPayLaterFinancingPlanFundingSource *a2, id a3)
{
}

void sub_1000DC654(id a1, PKPayLaterFinancingPlanFundingSource *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanFundingSource setType:](v4, "setType:", [a3 integerValue]);
}

void sub_1000DC698(id a1, PKPayLaterFinancingPlanFundingSource *a2, id a3)
{
  id v4 = a2;
  -[PKPayLaterFinancingPlanFundingSource setAutoPayment:](v4, "setAutoPayment:", [a3 BOOLValue]);
}

void sub_1000DCF90(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___CreditRecoveryPaymentPlan),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  id v3 = *(void **)(a1 + 40);
  id v4 = (void *)objc_claimAutoreleasedReturnValue(-[CreditRecoveryPaymentPlan creditRecoveryPaymentPlan](v5, "creditRecoveryPaymentPlan"));
  [v3 addObject:v4];
}

uint64_t sub_1000DD16C(uint64_t a1)
{
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v11 = 0u;
  __int128 v12 = 0u;
  id v2 = *(id *)(a1 + 48);
  id v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    id v4 = v3;
    uint64_t v5 = *(void *)v12;
    do
    {
      id v6 = 0LL;
      do
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue( +[CreditRecoveryPaymentPlan _insertPaymentPlan:forAccountIdentifier:inDatabase:]( &OBJC_CLASS___CreditRecoveryPaymentPlan,  "_insertPaymentPlan:forAccountIdentifier:inDatabase:",  *(void *)(*((void *)&v11 + 1) + 8LL * (void)v6),  *(void *)(a1 + 32),  *(void *)(a1 + 40),  (void)v11));
        id v8 = *(void **)(a1 + 56);
        id v9 = (void *)objc_claimAutoreleasedReturnValue([v7 creditRecoveryPaymentPlan]);
        [v8 addObject:v9];

        id v6 = (char *)v6 + 1;
      }

      while (v4 != v6);
      id v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }

    while (v4);
  }

  return 1LL;
}

void sub_1000DD58C(id a1, PKCreditRecoveryPaymentPlan *a2, id a3)
{
  id v4 = a2;
  -[PKCreditRecoveryPaymentPlan setEnrolled:](v4, "setEnrolled:", [a3 BOOLValue]);
}

void sub_1000DD5D0(id a1, PKCreditRecoveryPaymentPlan *a2, id a3)
{
}

void sub_1000DD5D8(id a1, PKCreditRecoveryPaymentPlan *a2, id a3)
{
}

void sub_1000DD5E0(id a1, PKCreditRecoveryPaymentPlan *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKCreditRecoveryPaymentPlan setEnrollmentDate:](v4, "setEnrollmentDate:", v5);
}

void sub_1000DD708(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

id sub_1000DD9D4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_performBackgroundPushProvisioningWithTransaction:", 0);
}

void sub_1000DDA70(uint64_t a1, char a2, char a3, void *a4)
{
  id v7 = a4;
  id v8 = *(void **)(a1 + 40);
  id v9 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000DDB18;
  block[3] = &unk_1006422C8;
  char v14 = a2;
  char v15 = a3;
  id v12 = v7;
  id v13 = v8;
  id v10 = v7;
  dispatch_async(v9, block);
}

uint64_t sub_1000DDB18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_BYTE *)(a1 + 48)) {
    BOOL v3 = 1LL;
  }
  else {
    BOOL v3 = *(_BYTE *)(a1 + 49) != 0;
  }
  return (*(uint64_t (**)(uint64_t, BOOL, void))(v2 + 16))(v2, v3, *(void *)(a1 + 32));
}

void sub_1000DDDBC(_Unwind_Exception *a1)
{
}

void sub_1000DDDE0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(*(void *)(a1 + 32) + 64LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_1000DDE8C;
  void v11[3] = &unk_1006396B0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  [v8 updateWebServiceConfigurationWithCompletion:v11];
}

uint64_t sub_1000DDE8C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1000DDEA0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)a1[5];
  id v9 = *(void **)(a1[4] + 64LL);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472LL;
  id v14[2] = sub_1000DDF60;
  v14[3] = &unk_100642340;
  id v10 = v8;
  uint64_t v11 = a1[6];
  id v17 = v7;
  uint64_t v18 = v11;
  id v15 = v10;
  id v16 = v6;
  id v12 = v6;
  id v13 = v7;
  [v9 performHandlerOnSharedWebServiceQueue:v14];
}

void sub_1000DDF60(uint64_t a1, void *a2)
{
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue([a2 targetDevice]);
  uint64_t v4 = *(void *)(a1 + 32);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000DE014;
  v7[3] = &unk_100642318;
  __int128 v6 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v6;
  __int128 v9 = v6;
  id v8 = *(id *)(a1 + 40);
  [v3 meetsProvisioningRequirements:v4 completion:v7];
}

uint64_t sub_1000DE014(uint64_t a1, char a2, void *a3)
{
  *(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL) = a2;
  [a3 containsNotManagedAccount];
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000DE050(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) shareablePassConfiguration]);
  __int128 v9 = v8;
  if (v8 && [v8 primaryAction] == (id)1)
  {
    v7[2](v7, v6, 0LL);
  }

  else
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1000DE16C;
    v13[3] = &unk_100642390;
    id v10 = *(void **)(a1 + 40);
    id v11 = *(id *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 64);
    id v14 = v11;
    uint64_t v18 = v12;
    id v17 = v7;
    id v15 = v6;
    id v16 = *(id *)(a1 + 56);
    [v10 _webServiceForTargetDevice:2 completion:v13];
  }
}

void sub_1000DE16C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v5 targetDevice]);
  if ((objc_opt_respondsToSelector(v5, "supportsCheckingProvisioningRequirements") & 1) != 0
    && [v7 supportsCheckingProvisioningRequirements]
    && (objc_opt_respondsToSelector(v7, "meetsProvisioningRequirements:completion:") & 1) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472LL;
    v20[2] = sub_1000DE314;
    v20[3] = &unk_100642318;
    __int128 v9 = (id *)&v22;
    __int128 v14 = *(_OWORD *)(a1 + 56);
    id v10 = (id)v14;
    __int128 v22 = v14;
    id v11 = &v21;
    id v21 = *(id *)(a1 + 40);
    [v7 meetsProvisioningRequirements:v8 completion:v20];
  }

  else
  {
    uint64_t v12 = *(void *)(a1 + 48);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472LL;
    void v16[2] = sub_1000DE334;
    v16[3] = &unk_100642368;
    __int128 v9 = &v18;
    id v18 = v6;
    id v11 = (id *)&v19;
    __int128 v15 = *(_OWORD *)(a1 + 56);
    id v13 = (id)v15;
    __int128 v19 = v15;
    id v17 = *(id *)(a1 + 40);
    [v7 paymentWebService:v5 canAddSecureElementPassWithConfiguration:v12 completion:v16];
  }
}

uint64_t sub_1000DE314(void *a1, char a2)
{
  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = a2;
  return (*(uint64_t (**)(void, void, void))(a1[5] + 16LL))(a1[5], a1[4], 0LL);
}

uint64_t sub_1000DE334(void *a1, char a2)
{
  *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = a2;
  return (*(uint64_t (**)(void))(a1[6] + 16LL))();
}

void sub_1000DE37C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1[5] + 8LL);
  int v9 = *(unsigned __int8 *)(v8 + 24);
  if (*(_BYTE *)(v8 + 24) || *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(27LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = @"Y";
      if (v9) {
        id v13 = @"Y";
      }
      else {
        id v13 = @"N";
      }
      if (!*(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL)) {
        uint64_t v12 = @"N";
      }
      int v18 = 138412546;
      __int128 v19 = v13;
      __int16 v20 = 2112;
      id v21 = v12;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: _isPushProvisioningSupportedForConfiguration returning currentDeviceSupported: %@ companionDe viceSupported: %@",  (uint8_t *)&v18,  0x16u);
    }

    (*(void (**)(void))(a1[4] + 16LL))();
  }

  else
  {
    uint64_t v14 = PKLogFacilityTypeGetObject(27LL);
    __int128 v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v1_Block_object_dispose((const void *)(v1 - 128), 8) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: Device nor watch supports push provisioning.",  (uint8_t *)&v18,  2u);
    }

    uint64_t v16 = a1[4];
    id v17 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  4LL,  0LL));
    (*(void (**)(uint64_t, void, void, void *))(v16 + 16))(v16, 0LL, 0LL, v17);
  }
}

void sub_1000DE79C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init(&OBJC_CLASS___PKPaymentPushProvisioningSharingIdentifiersRequest);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000DE83C;
  v5[3] = &unk_100642408;
  id v6 = *(id *)(a1 + 32);
  [v3 pushProvisioningSharingIdentifiersWithRequest:v4 completion:v5];
}

void sub_1000DE83C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id v5 = a3;
  id v6 = (id)objc_claimAutoreleasedReturnValue([a2 sharedCredentials]);
  (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v6, v5);
}

void sub_1000DEA80(uint64_t a1, void *a2)
{
  id v3 = a2;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000DEBD0;
  void v12[3] = &unk_100642480;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = *(void **)(a1 + 48);
  id v13 = v4;
  uint64_t v14 = v5;
  id v15 = v6;
  id v7 = objc_retainBlock(v12);
  if ([v3 needsRegistration])
  {
    uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 40) + 64) deviceRegistrationServiceCoordinator]);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472LL;
    id v9[2] = sub_1000DEFA0;
    v9[3] = &unk_1006424A8;
    void v9[4] = *(void *)(a1 + 40);
    id v10 = v7;
    id v11 = *(id *)(a1 + 48);
    [v8 performDeviceRegistrationForReason:@"Shareable Credential Status" brokerURL:0 action:1 forceApplePayRegister:0 forcePeerPaymentRegister:0 completion:v9];
  }

  else
  {
    ((void (*)(void *, id))v7[2])(v7, v3);
  }
}

void sub_1000DEBD0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = dispatch_group_create();
  v30[0] = 0LL;
  v30[1] = v30;
  void v30[2] = 0x3032000000LL;
  v30[3] = sub_1000DEECC;
  void v30[4] = sub_1000DEEDC;
  id v31 = 0LL;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  __int128 v28 = 0u;
  __int128 v29 = 0u;
  uint64_t v17 = a1;
  obuint64_t j = *(id *)(a1 + 32);
  id v5 = [obj countByEnumeratingWithState:&v26 objects:v32 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v27;
    do
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v27 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void **)(*((void *)&v26 + 1) + 8LL * (void)v7);
        dispatch_group_enter(v4);
        int v9 = (void *)objc_claimAutoreleasedReturnValue([v8 encryptedPushProvisioningTarget]);

        if (v9)
        {
          id v10 = objc_alloc(&OBJC_CLASS___PKPaymentPushProvisioningSharingStatusRequest);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 encryptedPushProvisioningTarget]);
          id v12 = [v10 initWithEncryptedProvisioningTarget:v11];
        }

        else
        {
          id v13 = objc_alloc(&OBJC_CLASS___PKPaymentPushProvisioningSharingStatusRequest);
          id v11 = (void *)objc_claimAutoreleasedReturnValue([v8 sharingInstanceIdentifier]);
          uint64_t v14 = (void *)objc_claimAutoreleasedReturnValue([v8 cardConfigurationIdentifier]);
          id v12 = [v13 initWithProvisioningSharingIdentifier:v11 cardCardConfigurationIdentifer:v14];
        }

        v23[0] = _NSConcreteStackBlock;
        v23[1] = 3221225472LL;
        v23[2] = sub_1000DEEE4;
        v23[3] = &unk_100642458;
        uint64_t v25 = v30;
        void v23[4] = v8;
        uint64_t v24 = v4;
        [v3 pushProvisioningSharingStatusRequest:v12 completion:v23];

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [obj countByEnumeratingWithState:&v26 objects:v32 count:16];
    }

    while (v5);
  }

  id v15 = *(void **)(v17 + 48);
  uint64_t v16 = *(dispatch_queue_s **)(*(void *)(v17 + 40) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000DEF60;
  block[3] = &unk_100641998;
  id v21 = v15;
  id v20 = *(id *)(v17 + 32);
  __int128 v22 = v30;
  dispatch_group_notify(v4, v16, block);

  _Block_object_dispose(v30, 8);
}

void sub_1000DEEA0( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, char a33)
{
}

uint64_t sub_1000DEECC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000DEEDC(uint64_t a1)
{
}

void sub_1000DEEE4(uint64_t a1, void *a2, id obj)
{
  id v8 = obj;
  id v6 = a2;
  id v7 = [v6 sharingStatus];

  [*(id *)(a1 + 32) setStatus:v7];
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1000DEF60(void *a1)
{
  uint64_t v2 = a1[5];
  uint64_t v3 = PKAggregateSharingStatusForShareableCredentials(a1[4]);
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void))(v2 + 16))( v2,  v3,  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL));
}

void sub_1000DEFA0(void *a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  if ((a2 & 0x10) != 0)
  {
    id v11 = (void *)a1[5];
    id v12 = *(void **)(a1[4] + 64LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    id v14[2] = sub_1000DF0A4;
    v14[3] = &unk_100642430;
    id v15 = v11;
    [v12 performHandlerOnSharedWebServiceQueue:v14];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(27LL);
    id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Broker register failed. Returning unknown status for credentials",  v13,  2u);
    }

    (*(void (**)(void))(a1[6] + 16LL))();
  }
}

uint64_t sub_1000DF0A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000DF178(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [[PKPaymentPushProvisioningProvideEncryptedPushProvisioningTargetRequest alloc] initWithEncryptedPushProvisioningTarget:*(void *)(a1 + 32) sharingInstanceIdentifier:*(void *)(a1 + 40)];
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472LL;
  v5[2] = sub_1000DF220;
  v5[3] = &unk_1006424D0;
  id v6 = *(id *)(a1 + 48);
  [v3 provideEncryptedPushProvisioningTargetWithRequest:v4 completion:v5];
}

uint64_t sub_1000DF220(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000DF2B8(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = dispatch_group_create();
  id v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](&OBJC_CLASS___NSMutableArray, "array"));
  v18[0] = 0LL;
  v18[1] = v18;
  void v18[2] = 0x3032000000LL;
  v18[3] = sub_1000DEECC;
  void v18[4] = sub_1000DEEDC;
  id v19 = 0LL;
  if (a1[6])
  {
    unint64_t v6 = 0LL;
    do
    {
      dispatch_group_enter(v4);
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472LL;
      id v14[2] = sub_1000DF474;
      v14[3] = &unk_100642520;
      void v14[4] = a1[4];
      id v15 = v5;
      uint64_t v17 = v18;
      uint64_t v16 = v4;
      [v3 paymentProvisioningNonceOfType:0 completion:v14];

      ++v6;
    }

    while (v6 < a1[6]);
  }

  id v7 = (void *)a1[5];
  id v8 = *(dispatch_queue_s **)(a1[4] + 24LL);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000DF5C8;
  v10[3] = &unk_100642548;
  id v12 = v7;
  id v13 = v18;
  id v11 = v5;
  id v9 = v5;
  dispatch_group_notify(v4, v8, v10);

  _Block_object_dispose(v18, 8);
}

void sub_1000DF45C( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
}

void sub_1000DF474(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000DF550;
  block[3] = &unk_1006424F8;
  id v14 = v5;
  id v15 = v7;
  id v16 = v6;
  __int128 v12 = *(_OWORD *)(a1 + 48);
  id v9 = (id)v12;
  __int128 v17 = v12;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(v8, block);
}

void sub_1000DF550(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nonce]);

  if (v2)
  {
    id v3 = *(void **)(a1 + 40);
    id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nonce]);
    [v3 addObject:v4];
  }

  id v5 = *(void **)(a1 + 48);
  if (v5) {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8LL) + 40LL), v5);
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1000DF5C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (v1)
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL))
    {
      (*(void (**)(void, void))(v1 + 16))(*(void *)(a1 + 40), 0LL);
    }

    else
    {
      id v3 = [*(id *)(a1 + 32) copy];
      (*(void (**)(uint64_t, id, void))(v1 + 16))( v1,  v3,  *(void *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 40LL));
    }
  }

void sub_1000DF9C4( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37, uint64_t a38, uint64_t a39, uint64_t a40, uint64_t a41, uint64_t a42, uint64_t a43, uint64_t a44, uint64_t a45, uint64_t a46, uint64_t a47, char a48, uint64_t a49, uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
}

void sub_1000DFA1C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 40);
  id v9 = *(void **)(*(void *)(a1 + 32) + 104LL);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000DFAE4;
  void v12[3] = &unk_100642598;
  id v14 = v7;
  uint64_t v15 = v8;
  id v13 = v6;
  id v10 = v6;
  id v11 = v7;
  [v9 performDeviceRegistrationForReason:@"push provisioning nonces" brokerURL:0 action:1 forceApplePayRegister:0 forcePeerPaymentRegister:0 completion:v12];
}

void sub_1000DFAE4(void *a1, char a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  id v9 = v8;
  if ((a2 & 0x10) == 0 && v8)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(27LL);
    id v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = 138412290;
      id v13 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: configurePushProvisioningConfiguration failed registration with error: %@",  (uint8_t *)&v12,  0xCu);
    }

    objc_storeStrong((id *)(*(void *)(a1[6] + 8LL) + 40LL), a4);
  }

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))( a1[5],  a1[4],  *(void *)(*(void *)(a1[6] + 8LL) + 40LL) != 0LL);
}

void sub_1000DFBF4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(void **)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000DFCB8;
  void v12[3] = &unk_1006425C0;
  __int128 v15 = *(_OWORD *)(a1 + 48);
  uint64_t v16 = *(void *)(a1 + 64);
  id v13 = v6;
  id v14 = v7;
  id v10 = v6;
  id v11 = v7;
  [v8 _isPushProvisioningSupportedForConfiguration:v9 completion:v12];
}

void sub_1000DFCB8(void *a1, int a2, int a3, void *a4)
{
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(27LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = @"N";
    if (a2) {
      id v11 = @"Y";
    }
    else {
      id v11 = @"N";
    }
    if (a3) {
      id v10 = @"Y";
    }
    int v15 = 138412546;
    uint64_t v16 = v11;
    __int16 v17 = 2112;
    int v18 = v10;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: currentDeviceSupported: %@ companionDeviceSupported: %@",  (uint8_t *)&v15,  0x16u);
  }

  *(_BYTE *)(*(void *)(a1[6] + 8LL) + 24LL) = a2;
  *(_BYTE *)(*(void *)(a1[7] + 8LL) + 24LL) = a3;
  uint64_t v12 = *(void *)(a1[8] + 8LL);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = v7;
  id v14 = v7;

  (*(void (**)(void, void, BOOL))(a1[5] + 16LL))(a1[5], a1[4], v14 != 0LL);
}

void sub_1000DFDF4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3221225472LL;
  v25[2] = sub_1000DFFEC;
  v25[3] = &unk_1006425E8;
  char v27 = *(_BYTE *)(a1 + 80);
  __int128 v26 = *(_OWORD *)(a1 + 56);
  id v8 = *(id *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  void v25[4] = v8;
  void v25[5] = v9;
  uint64_t v10 = sub_1000DFFEC((uint64_t)v25);
  [*(id *)(a1 + 32) setTargetDevice:v10];
  uint64_t Object = PKLogFacilityTypeGetObject(27LL);
  uint64_t v12 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    id v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](&OBJC_CLASS___NSNumber, "numberWithUnsignedInteger:", v10));
    *(_DWORD *)id buf = 138412290;
    __int128 v29 = v13;
    _os_log_impl( (void *)&_mh_execute_header,  v12,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: TargetDevice: %@",  buf,  0xCu);
  }

  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472LL;
  void v18[2] = sub_1000E00E0;
  v18[3] = &unk_100642638;
  char v24 = *(_BYTE *)(a1 + 80);
  uint64_t v23 = *(void *)(a1 + 72);
  id v14 = *(void **)(a1 + 40);
  id v19 = *(id *)(a1 + 48);
  id v15 = *(id *)(a1 + 32);
  id v21 = v6;
  id v22 = v7;
  id v20 = v15;
  id v16 = v6;
  id v17 = v7;
  [v14 _webServiceForTargetDevice:v10 completion:v18];
}

uint64_t sub_1000DFFEC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 64)) {
    return 1LL;
  }
  if (*(_BYTE *)(*(void *)(*(void *)(a1 + 48) + 8LL) + 24LL))
  {
    if (!*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL)) {
      return 1LL;
    }
  }

  else if (*(_BYTE *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 24LL))
  {
    return 2LL;
  }

  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) provisioningCredentialIdentifier]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 dataUsingEncoding:4]);

  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 SHA256Hash]);
  id v6 = (void *)objc_claimAutoreleasedReturnValue([v5 base64EncodedStringWithOptions:0]);

  unsigned int v7 = [*(id *)(a1 + 40) _hasProvisionedPassForCredentialHash:v6];
  unsigned int v8 = [*(id *)(a1 + 40) _companionHasProvisionedPassForCredentialHash:v6];
  uint64_t v9 = 1LL;
  if (!(v7 ^ 1 | v8)) {
    uint64_t v9 = 2LL;
  }
  if (v7 | v8 ^ 1) {
    uint64_t v1 = v9;
  }
  else {
    uint64_t v1 = 1LL;
  }

  return v1;
}

void sub_1000E00E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000E01CC;
  v7[3] = &unk_100642610;
  char v14 = *(_BYTE *)(a1 + 72);
  uint64_t v13 = *(void *)(a1 + 64);
  id v8 = *(id *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  id v11 = v5;
  id v12 = *(id *)(a1 + 56);
  id v10 = *(id *)(a1 + 48);
  id v6 = v5;
  [a2 paymentProvisioningNonceOfType:0 completion:v7];
}

void sub_1000E01CC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 nonce]);
  unsigned int v7 = v6;
  if (v5)
  {
    if (*(_BYTE *)(a1 + 80))
    {
      id v8 = PKAddSecureElementPassErrorDomain;
      NSErrorUserInfoKey v13 = NSUnderlyingErrorKey;
      id v14 = v5;
      id v9 = (void *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v14,  &v13,  1LL));
      goto LABEL_4;
    }

void sub_1000E0350(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(27LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL);
    *(_DWORD *)id buf = 138412546;
    uint64_t v13 = v4;
    __int16 v14 = 2112;
    uint64_t v15 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: configurePushProvisioningConfiguration return configuration: %@ error: %@",  buf,  0x16u);
  }

  id v6 = *(dispatch_queue_s **)(*(void *)(a1 + 40) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E0484;
  block[3] = &unk_100642688;
  __int128 v8 = *(_OWORD *)(a1 + 48);
  id v7 = (id)v8;
  __int128 v11 = v8;
  id v10 = *(id *)(a1 + 32);
  dispatch_async(v6, block);
}

uint64_t sub_1000E0484(uint64_t a1)
{
  uint64_t v3 = a1 + 40;
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(*(void *)(*(void *)(v3 + 8) + 8LL) + 40LL)) {
    return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(v2, 0LL);
  }
  else {
    return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(v2, *(void *)(a1 + 32));
  }
}

id sub_1000E0670(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 40) + 41LL) = 1;
  return objc_msgSend(*(id *)(a1 + 40), "_queue_performBackgroundPushProvisioningWithTransaction:", 0);
}

void sub_1000E0808(uint64_t a1, int a2)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 40LL) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(unsigned __int8 *)(v4 + 42);
  *(_BYTE *)(v4 + 42) = 0;
  uint64_t Object = PKLogFacilityTypeGetObject(27LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v8)
    {
      *(_WORD *)id buf = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: Finished background provision sharing identifiers",  buf,  2u);
    }

    id v9 = *(_BYTE **)(a1 + 32);
    if (v5 || v9[41]) {
      objc_msgSend(v9, "_queue_performBackgroundPushProvisioningWithTransaction:", *(void *)(a1 + 40));
    }
  }

  else
  {
    if (v8)
    {
      *(_WORD *)id v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: failed to background provision sharing identifiers",  v10,  2u);
    }
  }

void sub_1000E0AF0(_Unwind_Exception *a1)
{
}

void sub_1000E0B08(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(v8 + 64);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000E0BB8;
  void v12[3] = &unk_100642728;
  id v13 = v6;
  id v14 = v7;
  void v12[4] = v8;
  id v10 = v6;
  id v11 = v7;
  [v9 performHandlerOnSharedWebServiceQueue:v12];
}

void sub_1000E0BB8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 64) deviceRegistrationServiceCoordinator]);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000E0C6C;
  v3[3] = &unk_100642700;
  id v5 = *(id *)(a1 + 48);
  id v4 = *(id *)(a1 + 40);
  [v2 performDeviceRegistrationForReason:@"background push provisioning" brokerURL:0 action:1 forceApplePayRegister:0 forcePeerPaymentRegister:0 completion:v3];
}

uint64_t sub_1000E0C6C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1000E0C80(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000E0D2C;
  void v12[3] = &unk_100642778;
  id v9 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v14 = v7;
  uint64_t v15 = v8;
  void v12[4] = v9;
  id v13 = v6;
  id v10 = v6;
  id v11 = v7;
  [v9 pushProvisioningSharingIdentifiers:v12];
}

void sub_1000E0D2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E0E14;
  block[3] = &unk_100642750;
  id v13 = v6;
  __int128 v11 = *(_OWORD *)(a1 + 48);
  id v8 = (id)v11;
  __int128 v17 = v11;
  id v14 = *(id *)(a1 + 40);
  id v15 = v5;
  uint64_t v16 = *(void *)(a1 + 32);
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v7, block);
}

uint64_t sub_1000E0E14(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    __int128 v26 = 0u;
    __int128 v27 = 0u;
    __int128 v24 = 0u;
    __int128 v25 = 0u;
    id v7 = *(id *)(a1 + 48);
    id v8 = [v7 countByEnumeratingWithState:&v24 objects:v32 count:16];
    if (!v8) {
      goto LABEL_19;
    }
    id v10 = v8;
    uint64_t v11 = *(void *)v25;
    *(void *)&__int128 v9 = 138412546LL;
    __int128 v23 = v9;
LABEL_7:
    uint64_t v12 = 0LL;
    while (1)
    {
      if (*(void *)v25 != v11) {
        objc_enumerationMutation(v7);
      }
      id v13 = *(void **)(*((void *)&v24 + 1) + 8 * v12);
      id v14 = objc_msgSend(v13, "type", v23, (void)v24);
      if (v14 == (id)2)
      {
        uint64_t v16 = objc_alloc(&OBJC_CLASS___PKPendingAccountCredential);
        __int128 v17 = (void *)objc_claimAutoreleasedReturnValue([v13 accountIdentifier]);
        id v18 = [v13 feature];
        id v19 = (void *)objc_claimAutoreleasedReturnValue([v13 sharingInstanceIdentifier]);
        id v15 = -[PKPendingAccountCredential initWithAccountIdentifier:feature:sharingInstanceIdentifier:]( v16,  "initWithAccountIdentifier:feature:sharingInstanceIdentifier:",  v17,  v18,  v19);

        if (!v15) {
          goto LABEL_15;
        }
      }

      else if (v14 != (id)1 {
             || (id v15 = -[PKPendingShareableCredential initWithSharedCredential:]( objc_alloc(&OBJC_CLASS___PKPendingShareableCredential),  "initWithSharedCredential:",  v13)) == 0LL)
      }
      {
LABEL_15:
        uint64_t Object = PKLogFacilityTypeGetObject(36LL);
        id v15 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          id v21 = (void *)objc_claimAutoreleasedReturnValue( +[NSNumber numberWithUnsignedInteger:]( NSNumber,  "numberWithUnsignedInteger:",  [v13 type]));
          *(_DWORD *)id buf = v23;
          __int128 v29 = v13;
          __int16 v30 = 2112;
          id v31 = v21;
          _os_log_impl( (void *)&_mh_execute_header,  v15,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: failed to parse credential %@ \n\n type: %@",  buf,  0x16u);
        }

        goto LABEL_17;
      }

      -[os_log_s setShouldAutoProvision:](v15, "setShouldAutoProvision:", 1LL);
      [*(id *)(*(void *)(a1 + 56) + 120) storePendingProvisioning:v15];
LABEL_17:

      if (v10 == (id)++v12)
      {
        id v10 = [v7 countByEnumeratingWithState:&v24 objects:v32 count:16];
        if (!v10) {
          goto LABEL_19;
        }
        goto LABEL_7;
      }
    }
  }

  uint64_t v3 = PKLogFacilityTypeGetObject(27LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)id buf = 138412290;
    __int128 v29 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: failed to get shared credentials, error: %@",  buf,  0xCu);
  }

  uint64_t v5 = *(void *)(*(void *)(a1 + 72) + 8LL);
  id v6 = *(id *)(a1 + 32);
  id v7 = *(id *)(v5 + 40);
  *(void *)(v5 + 40) = v6;
LABEL_19:

  return (*(uint64_t (**)(void))(*(void *)(a1 + 64) + 16LL))();
}

void sub_1000E10DC(uint64_t a1)
{
  uint64_t v1 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E115C;
  block[3] = &unk_1006427A0;
  __int128 v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  __int128 v5 = v3;
  dispatch_async(v1, block);
}

uint64_t sub_1000E115C(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 32) + 16LL))( *(void *)(a1 + 32),  *(void *)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL) == 0LL);
}

uint64_t sub_1000E1208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a4);
  }
  return result;
}

void sub_1000E1528(_Unwind_Exception *a1)
{
}

void sub_1000E157C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_1000E1628;
  void v11[3] = &unk_1006396B0;
  id v12 = v6;
  id v13 = v7;
  id v9 = v6;
  id v10 = v7;
  dispatch_async(v8, v11);
}

uint64_t sub_1000E1628(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  *(void *)(a1 + 32),  0LL);
}

void sub_1000E163C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = v7;
  if (*(_BYTE *)(a1 + 56))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    id v10 = *(void **)(a1 + 40);
    uint64_t v11 = *(void **)(v9 + 88);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    id v14[2] = sub_1000E1724;
    v14[3] = &unk_100642840;
    void v14[4] = v9;
    id v12 = v10;
    uint64_t v13 = *(void *)(a1 + 48);
    id v15 = v12;
    uint64_t v18 = v13;
    id v17 = v8;
    id v16 = v6;
    [v11 familyMembersWithCachePolicy:0 completion:v14];
  }

  else
  {
    (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
  }
}

void sub_1000E1724(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 40);
  __int128 v5 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 16LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E17F4;
  block[3] = &unk_100642818;
  id v10 = v3;
  id v11 = v4;
  __int128 v8 = *(_OWORD *)(a1 + 56);
  id v6 = (id)v8;
  __int128 v13 = v8;
  id v12 = *(id *)(a1 + 48);
  id v7 = v3;
  dispatch_async(v5, block);
}

void sub_1000E17F4(uint64_t a1)
{
  uint64_t Object = PKLogFacilityTypeGetObject(27LL);
  id v3 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = [*(id *)(a1 + 32) count];
    *(_DWORD *)id buf = 134217984;
    id v37 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: Retrived %lu family members",  buf,  0xCu);
  }

  __int128 v34 = 0u;
  __int128 v35 = 0u;
  __int128 v32 = 0u;
  __int128 v33 = 0u;
  id v5 = *(id *)(a1 + 32);
  id v31 = [v5 countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (!v31)
  {

    __int128 v8 = 0LL;
    id v7 = 0LL;
    goto LABEL_36;
  }

  id v7 = 0LL;
  __int128 v8 = 0LL;
  uint64_t v30 = *(void *)v33;
  *(void *)&__int128 v6 = 138412546LL;
  __int128 v28 = v6;
  uint64_t v9 = a1;
  obuint64_t j = v5;
  while (2)
  {
    for (uint64_t i = 0LL; i != v31; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v33 != v30) {
        objc_enumerationMutation(obj);
      }
      id v11 = *(void **)(*((void *)&v32 + 1) + 8LL * (void)i);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        id v12 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) appleIdentifier]);
        uint64_t v13 = PKIDSNormalizedAddress();
        id v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        id v15 = (void *)objc_claimAutoreleasedReturnValue([v11 appleID]);
        uint64_t v16 = PKIDSNormalizedAddress();
        id v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        *(_DWORD *)id buf = v28;
        id v37 = v14;
        __int16 v38 = 2112;
        id v39 = v17;
        _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: Attempting to match recipient: %@ to familyMember: %@",  buf,  0x16u);

        a1 = v9;
      }

      uint64_t v18 = (void *)objc_claimAutoreleasedReturnValue([v11 appleID]);
      uint64_t v19 = PKIDSNormalizedAddress();
      id v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
      id v21 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) appleIdentifier]);
      unsigned int v22 = [v20 isEqualToString:v21];

      if (v22)
      {
        id v23 = v11;

        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: Found family member with matching Apple Account",  buf,  2u);
        }

        id v7 = v23;
      }

      a1 = v9;
      if (objc_msgSend(v11, "isMe", v28))
      {
        id v24 = v11;

        __int128 v8 = v24;
      }

      if (v7 && v8)
      {

LABEL_23:
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)id buf = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: Found family member with matching Apple Account",  buf,  2u);
        }

        if (([v7 memberType] == (id)1 || objc_msgSend(v7, "memberType") == (id)2)
          && (([v8 isOrganizer] & 1) != 0 || objc_msgSend(v8, "isParent")))
        {
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)id buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: recipient is child member of iCloud family and sender is an organizer or parent. Updati ng provisioning target",  buf,  2u);
          }

          __int128 v25 = *(void **)(v9 + 40);
          __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([v7 dsid]);
          __int128 v27 = (void *)objc_claimAutoreleasedReturnValue([v26 stringValue]);
          [v25 setAppleIdentifier:v27];

          [*(id *)(v9 + 40) setAppleIdentifierType:3];
          *(_BYTE *)(*(void *)(*(void *)(v9 + 64) + 8LL) + 24LL) = 1;
        }

        else
        {
          if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)id buf = 0;
            _os_log_impl( (void *)&_mh_execute_header,  v3,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: Family member is not an adult or sender is not a parent or organizer.",  buf,  2u);
          }
        }

        goto LABEL_36;
      }
    }

    id v31 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
    if (v31) {
      continue;
    }
    break;
  }

  if (v7) {
    goto LABEL_23;
  }
LABEL_36:
  (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
}

void sub_1000E1C48(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000E1D04;
  v13[3] = &unk_100642890;
  __int128 v8 = (void *)a1[4];
  uint64_t v9 = a1[5];
  uint64_t v10 = a1[6];
  id v15 = v7;
  uint64_t v16 = v9;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  [v8 _webServiceForTargetDevice:v10 completion:v13];
}

void sub_1000E1D04(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v6 = a3;
  v6[2]();

  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000E1D78(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nonce]);

  if (v8)
  {
    v7[2](v7, v6, 0LL);
  }

  else
  {
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8LL) + 40LL);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472LL;
    v13[2] = sub_1000E1E70;
    v13[3] = &unk_1006428E0;
    id v11 = v9;
    uint64_t v12 = *(void *)(a1 + 48);
    id v14 = v11;
    uint64_t v17 = v12;
    uint64_t v16 = v7;
    id v15 = v6;
    [v10 paymentProvisioningNonceOfType:0 completion:v13];
  }
}

void sub_1000E1E70(uint64_t a1, void *a2, void *a3)
{
  id v6 = a3;
  id v7 = *(void **)(a1 + 32);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([a2 nonce]);
  [v7 setNonce:v8];

  if (v6
    || (uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) nonce]), v13,
                                                                                                  !v13))
  {
    uint64_t Object = PKLogFacilityTypeGetObject(27LL);
    uint64_t v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v14 = 138412546;
      id v15 = v6;
      __int16 v16 = 2112;
      uint64_t v17 = v11;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: Failed to set fetch nonce with error: %@ from target: %@",  (uint8_t *)&v14,  0x16u);
    }

    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8LL) + 40LL), a3);
    uint64_t v12 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  else
  {
    uint64_t v12 = *(void (**)(void))(*(void *)(a1 + 48) + 16LL);
  }

  v12();
}

void sub_1000E1FBC(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) context]);
  uint64_t v9 = (void *)objc_claimAutoreleasedReturnValue([v8 primaryRegion]);
  uint64_t v10 = (void *)objc_claimAutoreleasedReturnValue([v9 certificates]);

  if (v10)
  {
    uint64_t v11 = (void *)a1[4];
    uint64_t v12 = a1[5];
    uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1[6] + 8) + 40) context]);
    id v14 = [v13 devSigned];
    uint64_t v15 = *(void *)(a1[8] + 8LL);
    obuint64_t j = *(id *)(v15 + 40);
    uint64_t v16 = objc_claimAutoreleasedReturnValue([v11 _encryptProvisioningTarget:v12 devSigned:v14 certificateChain:v10 error:&obj]);
    objc_storeStrong((id *)(v15 + 40), obj);
    uint64_t v17 = *(void *)(a1[7] + 8LL);
    uint64_t v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    [*(id *)(*(void *)(a1[7] + 8) + 40) setTargetDevice:a1[10]];
    if (*(_BYTE *)(*(void *)(a1[9] + 8LL) + 24LL) && !*(void *)(*(void *)(a1[8] + 8LL) + 40LL))
    {
      id v24 = objc_alloc(&OBJC_CLASS___PKPaymentPushProvisioningProvideEncryptedPushProvisioningTargetRequest);
      uint64_t v25 = *(void *)(*(void *)(a1[7] + 8LL) + 40LL);
      __int128 v26 = (void *)objc_claimAutoreleasedReturnValue([(id)a1[5] sharingInstanceIdentifier]);
      id v27 = [v24 initWithEncryptedPushProvisioningTarget:v25 sharingInstanceIdentifier:v26];

      __int128 v28 = *(void **)(*(void *)(a1[6] + 8LL) + 40LL);
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 3221225472LL;
      void v30[2] = sub_1000E2250;
      v30[3] = &unk_10063B638;
      uint64_t v33 = a1[8];
      id v32 = v7;
      id v31 = v6;
      [v28 provideEncryptedPushProvisioningTargetWithRequest:v27 completion:v30];
    }

    else
    {
      (*((void (**)(id, id, void))v7 + 2))(v7, v6, 0LL);
    }
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(27LL);
    id v20 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int128 v29 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v20,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: Certificate chain is missing! Not encrypting provisioning target",  v29,  2u);
    }

    uint64_t v21 = objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKPassKitErrorDomain,  -1LL,  0LL));
    uint64_t v22 = *(void *)(a1[8] + 8LL);
    id v23 = *(void **)(v22 + 40);
    *(void *)(v22 + 40) = v21;
  }
}

void sub_1000E2250(uint64_t a1, void *a2)
{
  id v4 = a2;
  (*(void (**)(void))(*(void *)(a1 + 40) + 16LL))();
}

void sub_1000E22A4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t Object = PKLogFacilityTypeGetObject(27LL);
  uint64_t v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = a1[9];
    uint64_t v11 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
    *(_DWORD *)id buf = 134218242;
    uint64_t v19 = v10;
    __int16 v20 = 2112;
    uint64_t v21 = v11;
    _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: Created encryptedProvisioningTarget for targetType: %lu error: %@",  buf,  0x16u);
  }

  uint64_t v12 = (void *)a1[5];
  if (v12)
  {
    uint64_t v13 = *(dispatch_queue_s **)(a1[4] + 24LL);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472LL;
    id v14[2] = sub_1000E23F0;
    v14[3] = &unk_100642930;
    id v15 = v12;
    __int128 v16 = *((_OWORD *)a1 + 3);
    uint64_t v17 = a1[8];
    dispatch_async(v13, v14);
  }
}

uint64_t sub_1000E23F0(void *a1)
{
  uint64_t v2 = a1[4];
  if (*(void *)(*(void *)(a1[5] + 8LL) + 40LL)) {
    uint64_t v3 = 0LL;
  }
  else {
    uint64_t v3 = *(void *)(*(void *)(a1[6] + 8LL) + 40LL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v2 + 16))( v2,  v3,  *(unsigned __int8 *)(*(void *)(a1[7] + 8LL) + 24LL));
}

void sub_1000E27C4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = a2;
  id v7 = -[PKPaymentProvisioningController initWithWebService:localPaymentService:]( objc_alloc(&OBJC_CLASS___PKPaymentProvisioningController),  "initWithWebService:localPaymentService:",  v6,  0LL);

  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) externalizedAuth]);
  -[PKPaymentProvisioningController storeExternalizedAuth:](v7, "storeExternalizedAuth:", v8);

  -[PKPaymentProvisioningController setCloudStoreCoordinator:]( v7,  "setCloudStoreCoordinator:",  *(void *)(*(void *)(a1 + 40) + 96LL));
  id v9 = [[PKProvisioningContext alloc] initWithEnvironment:0 provisioningController:v7 groupsController:0];
  objc_msgSend(v9, "setIsBackground:", objc_msgSend(*(id *)(a1 + 32), "isBackgroundProvisioning"));
  id v10 = [[PKProvisioningBackgroundCoordinator alloc] initWithSetupContext:v9 credential:*(void *)(a1 + 32) previouslyAcceptedTerms:1];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000E2948;
  v13[3] = &unk_100642980;
  id v14 = *(id *)(a1 + 32);
  id v16 = *(id *)(a1 + 48);
  id v17 = v5;
  id v15 = v10;
  id v11 = v10;
  id v12 = v5;
  [v11 startWithCompletion:v13];
}

void sub_1000E2948(void *a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = (void *)objc_claimAutoreleasedReturnValue([a2 firstObject]);
  id v7 = (void *)objc_claimAutoreleasedReturnValue([v6 secureElementPass]);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([v7 paymentPass]);

  uint64_t Object = PKLogFacilityTypeGetObject(27LL);
  id v10 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v11)
    {
      uint64_t v12 = a1[4];
      uint64_t v13 = (void *)objc_claimAutoreleasedReturnValue([v8 uniqueID]);
      int v15 = 138412546;
      uint64_t v16 = v12;
      __int16 v17 = 2112;
      id v18 = v13;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Push provisioning (%@): Successfully provisioned pass %@",  (uint8_t *)&v15,  0x16u);
    }
  }

  else if (v11)
  {
    uint64_t v14 = a1[4];
    int v15 = 138412546;
    uint64_t v16 = v14;
    __int16 v17 = 2112;
    id v18 = v5;
    _os_log_impl( (void *)&_mh_execute_header,  v10,  OS_LOG_TYPE_DEFAULT,  "Push provisioning (%@): failed with error: %@",  (uint8_t *)&v15,  0x16u);
  }

  (*(void (**)(void))(a1[6] + 16LL))();
  (*(void (**)(void))(a1[7] + 16LL))();
}

uint64_t sub_1000E2C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a3, a5);
  }
  return result;
}

uint64_t sub_1000E2DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(result + 16))(result, a2, a3, a5);
  }
  return result;
}

void sub_1000E30E8(_Unwind_Exception *a1)
{
}

void sub_1000E3130(uint64_t a1)
{
  id WeakRetained = (id *)objc_loadWeakRetained((id *)(a1 + 40));
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8LL) + 40LL)) {
    BOOL v3 = WeakRetained == 0LL;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    id v6 = WeakRetained;
    objc_msgSend(WeakRetained[1], "invalidateAssertionOfType:withIdentifier:handler:", 1);
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8LL);
    id v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0LL;

    id WeakRetained = v6;
  }
}

uint64_t sub_1000E31A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (v2) {
    (*(void (**)(void))(v2 + 16))();
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000E31D4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(27LL);
    uint64_t v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 80) + 8LL) + 40LL);
      *(_DWORD *)id buf = 138412546;
      uint64_t v20 = v5;
      __int16 v21 = 2112;
      uint64_t v22 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Push provisioning (%@): Unable to acquire provisioning in progress assertion with id %@; Continuing anyway...",
        buf,
        0x16u);
    }
  }

  id v7 = *(void **)(a1 + 40);
  __int128 v8 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) encryptedProvisioningTarget]);
  id v9 = [v8 targetDevice];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000E33B8;
  void v12[3] = &unk_100642A98;
  int8x16_t v11 = *(int8x16_t *)(a1 + 32);
  id v10 = (id)v11.i64[0];
  int8x16_t v13 = vextq_s8(v11, v11, 8uLL);
  id v14 = *(id *)(a1 + 48);
  objc_copyWeak(&v18, (id *)(a1 + 88));
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v17 = *(id *)(a1 + 72);
  [v7 _webServiceForTargetDevice:v9 completion:v12];

  objc_destroyWeak(&v18);
}

void sub_1000E339C(_Unwind_Exception *a1)
{
}

void sub_1000E33B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = -[PKPaymentProvisioningController initWithWebService:localPaymentService:]( objc_alloc(&OBJC_CLASS___PKPaymentProvisioningController),  "initWithWebService:localPaymentService:",  v5,  0LL);
  -[PKPaymentProvisioningController setCloudStoreCoordinator:]( v7,  "setCloudStoreCoordinator:",  *(void *)(*(void *)(a1 + 32) + 96LL));
  id v8 = [[PKPaymentEligibilityRequest alloc] initWithPaymentCredential:*(void *)(a1 + 40)];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_1000E3548;
  void v11[3] = &unk_100642A70;
  id v12 = *(id *)(a1 + 40);
  id v9 = v6;
  id v14 = v9;
  id v15 = *(id *)(a1 + 48);
  objc_copyWeak(&v19, (id *)(a1 + 80));
  id v16 = *(id *)(a1 + 56);
  id v17 = *(id *)(a1 + 64);
  id v10 = v7;
  int8x16_t v13 = v10;
  id v18 = *(id *)(a1 + 72);
  -[PKPaymentProvisioningController requestEligibility:withCompletionHandler:]( v10,  "requestEligibility:withCompletionHandler:",  v8,  v11);

  objc_destroyWeak(&v19);
}

void sub_1000E3534(_Unwind_Exception *a1)
{
}

void sub_1000E3548(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unint64_t v7 = (unint64_t)[v5 eligibilityStatus];
  if (v6)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(27LL);
    id v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)id buf = 138412546;
      uint64_t v32 = v10;
      __int16 v33 = 2112;
      __int128 v34 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Push provisioning (%@): eligibility request failed with error: %@",  buf,  0x16u);
    }

    (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
    (*(void (**)(void))(*(void *)(a1 + 56) + 16LL))();
  }

  else
  {
    unint64_t v11 = v7;
    if ((v7 & 0xFFFFFFFFFFFFFFFELL) == 4)
    {
      uint64_t v12 = PKLogFacilityTypeGetObject(27LL);
      int8x16_t v13 = (os_log_s *)objc_claimAutoreleasedReturnValue(v12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = @"OS";
        uint64_t v15 = *(void *)(a1 + 32);
        if (v11 == 5) {
          id v14 = @"hardware";
        }
        *(_DWORD *)id buf = 138412546;
        uint64_t v32 = v15;
        __int16 v33 = 2112;
        __int128 v34 = v14;
        _os_log_impl( (void *)&_mh_execute_header,  v13,  OS_LOG_TYPE_DEFAULT,  "Push provisioning (%@): device %@ not supported",  buf,  0x16u);
      }

      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
      [WeakRetained _handleUnsupportedDeviceResponse:v5 completion:*(void *)(a1 + 64)];
    }

    else if ((v7 & 0xFFFFFFFFFFFFFFFBLL) == 3)
    {
      (*(void (**)(void))(*(void *)(a1 + 72) + 16LL))();
      id WeakRetained = objc_loadWeakRetained((id *)(a1 + 88));
      [WeakRetained _handleExpectedPassUpdateForEligibilityResponse:v5 completion:*(void *)(a1 + 64)];
    }

    else if (v7 == 1)
    {
      [*(id *)(a1 + 40) passcodeUpgradeCompleted:1];
      [*(id *)(a1 + 40) acceptTerms];
      uint64_t v17 = (*(uint64_t (**)(void))(*(void *)(a1 + 80) + 16LL))();
      id WeakRetained = (id)objc_claimAutoreleasedReturnValue(v17);
      id v18 = *(void **)(a1 + 40);
      id v19 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) externalizedAuth]);
      [v18 storeExternalizedAuth:v19];

      v26[0] = _NSConcreteStackBlock;
      v26[1] = 3221225472LL;
      v26[2] = sub_1000E38D4;
      v26[3] = &unk_100642A48;
      uint64_t v20 = *(void **)(a1 + 40);
      id v27 = *(id *)(a1 + 32);
      id v29 = *(id *)(a1 + 48);
      id v30 = *(id *)(a1 + 56);
      id v28 = *(id *)(a1 + 40);
      [v20 requestProvisioning:WeakRetained withCompletion:v26];
    }

    else
    {
      uint64_t v21 = PKLogFacilityTypeGetObject(27LL);
      uint64_t v22 = (os_log_s *)objc_claimAutoreleasedReturnValue(v21);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = *(void *)(a1 + 32);
        *(_DWORD *)id buf = 138412546;
        uint64_t v32 = v23;
        __int16 v33 = 1024;
        LODWORD(v34) = [v5 eligibilityStatus];
        _os_log_impl( (void *)&_mh_execute_header,  v22,  OS_LOG_TYPE_DEFAULT,  "Push provisioning (%@): got eligibility status %d",  buf,  0x12u);
      }

      (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
      uint64_t v24 = *(void *)(a1 + 56);
      uint64_t v25 = PKDisplayableErrorForCommonType(1LL, 0LL);
      id WeakRetained = (id)objc_claimAutoreleasedReturnValue(v25);
      (*(void (**)(uint64_t, void, void, void, id))(v24 + 16))(v24, 0LL, 0LL, 0LL, WeakRetained);
    }
  }
}

void sub_1000E38D4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v9)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(27LL);
    unint64_t v11 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      int v15 = 138412546;
      uint64_t v16 = v12;
      __int16 v17 = 2112;
      id v18 = v9;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  OS_LOG_TYPE_DEFAULT,  "Push provisioning (%@): failed with error: %@",  (uint8_t *)&v15,  0x16u);
    }
  }

  (*(void (**)(void))(*(void *)(a1 + 48) + 16LL))();
  uint64_t v13 = *(void *)(a1 + 56);
  id v14 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) moreInfoItems]);
  (*(void (**)(uint64_t, BOOL, id, void *, id))(v13 + 16))(v13, v7 != 0LL, v7, v14, v9);
}

uint64_t sub_1000E3C4C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 40) + 16LL))( *(void *)(a1 + 40),  0LL,  0LL,  0LL,  *(void *)(a1 + 32));
}

void sub_1000E3E4C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(void **)(a1 + 40);
  id v8 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 24LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000E3F08;
  block[3] = &unk_100639AF0;
  id v12 = v6;
  id v13 = v5;
  id v14 = v7;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_1000E3F08(void *a1)
{
  if (a1[4])
  {
    uint64_t v2 = a1[6];
LABEL_3:
    (*(void (**)(uint64_t, void, void, void))(v2 + 16))(v2, 0LL, 0LL, 0LL);
    return;
  }

  BOOL v3 = (void *)a1[5];
  uint64_t v2 = a1[6];
  if (!v3) {
    goto LABEL_3;
  }
  id v4 = (id)objc_claimAutoreleasedReturnValue([v3 paymentPass]);
  (*(void (**)(uint64_t, uint64_t, id, void, void))(v2 + 16))(v2, 1LL, v4, 0LL, a1[4]);
}

void sub_1000E3F90(void *a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 48) paymentApplicationWithDPANIdentifier:a1[5]]);
  BOOL v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1[4] + 48) passWithPaymentApplication:v2]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 secureElementPass]);

  uint64_t Object = PKLogFacilityTypeGetObject(27LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      LOWORD(v11) = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: Found pass being updated for DPAN. Returning it.",  (uint8_t *)&v11,  2u);
    }

    (*(void (**)(void))(a1[6] + 16LL))();
  }

  else
  {
    if (v7)
    {
      uint64_t v8 = a1[5];
      int v11 = 138412290;
      uint64_t v12 = v8;
      _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Push provisioning: Unable to find pass on device for DPAN identifier '%@'",  (uint8_t *)&v11,  0xCu);
    }

    uint64_t v9 = a1[6];
    id v10 = (void *)objc_claimAutoreleasedReturnValue( +[NSError errorWithDomain:code:userInfo:]( &OBJC_CLASS___NSError,  "errorWithDomain:code:userInfo:",  PKAddSecureElementPassErrorDomain,  2LL,  0LL));
    (*(void (**)(uint64_t, void, void *))(v9 + 16))(v9, 0LL, v10);
  }
}

BOOL sub_1000E4238(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue([v3 secureElementPass]);
  if (v4)
  {
    id v5 = (void *)objc_claimAutoreleasedReturnValue([v3 provisioningCredentialHash]);
    id v6 = *(void **)(a1 + 32);
    id v7 = v5;
    id v8 = v6;
    if (v7 == v8)
    {
    }

    else
    {
      uint64_t v9 = v8;
      if (!v7 || !v8)
      {

LABEL_11:
        BOOL v11 = 0LL;
        goto LABEL_12;
      }

      unsigned int v10 = [v7 isEqualToString:v8];

      if (!v10) {
        goto LABEL_11;
      }
    }

    BOOL v11 = [v4 passActivationState] != (id)4;
LABEL_12:

    goto LABEL_13;
  }

  BOOL v11 = 0LL;
LABEL_13:

  return v11;
}

uint64_t sub_1000E43BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16LL))();
}

void sub_1000E4C1C(id a1, PKSavingsAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKSavingsAccountDetails setLastUpdatedDate:](v4, "setLastUpdatedDate:", v5);
}

void sub_1000E4C68(id a1, PKSavingsAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKSavingsAccountDetails setCreatedDate:](v4, "setCreatedDate:", v5);
}

void sub_1000E4CB4(id a1, PKSavingsAccountDetails *a2, id a3)
{
}

void sub_1000E4CBC(id a1, PKSavingsAccountDetails *a2, id a3)
{
}

void sub_1000E4CC4(id a1, PKSavingsAccountDetails *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSTimeZone timeZoneWithName:](&OBJC_CLASS___NSTimeZone, "timeZoneWithName:", a3));
    -[PKSavingsAccountDetails setProductTimeZone:](v4, "setProductTimeZone:", v5);
  }

void sub_1000E4D30(id a1, PKSavingsAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountDetails setMoreInfoRequired:](v4, "setMoreInfoRequired:", [a3 BOOLValue]);
}

void sub_1000E4D74(id a1, PKSavingsAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountDetails setTermsAcceptanceRequired:]( v4,  "setTermsAcceptanceRequired:",  [a3 BOOLValue]);
}

void sub_1000E4DB8(id a1, PKSavingsAccountDetails *a2, id a3)
{
}

void sub_1000E4DC0(id a1, PKSavingsAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKSavingsAccountDetails setPrivacyPolicyURL:](v4, "setPrivacyPolicyURL:", v5);
}

void sub_1000E4E0C(id a1, PKSavingsAccountDetails *a2, id a3)
{
}

void sub_1000E4E14(id a1, PKSavingsAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_URLForSQLValue(a3);
  -[PKSavingsAccountDetails setContactWebsite:](v4, "setContactWebsite:", v5);
}

void sub_1000E4E60(id a1, PKSavingsAccountDetails *a2, id a3)
{
}

void sub_1000E4E68(id a1, PKSavingsAccountDetails *a2, id a3)
{
}

void sub_1000E4E70(id a1, PKSavingsAccountDetails *a2, id a3)
{
}

void sub_1000E4E78(id a1, PKSavingsAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKSavingsAccountDetails setFccStepUpRequired:](v4, "setFccStepUpRequired:", [a3 BOOLValue]);
}

void sub_1000E5024(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1000E5AA4(id a1, PKAppleBalanceAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAppleBalanceAccountDetails setLastUpdatedDate:](v4, "setLastUpdatedDate:", v5);
}

void sub_1000E5AF0(id a1, PKAppleBalanceAccountDetails *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKAppleBalanceAccountDetails setCreatedDate:](v4, "setCreatedDate:", v5);
}

void sub_1000E5B3C(id a1, PKAppleBalanceAccountDetails *a2, id a3)
{
}

void sub_1000E5B44(id a1, PKAppleBalanceAccountDetails *a2, id a3)
{
}

void sub_1000E5B4C(id a1, PKAppleBalanceAccountDetails *a2, id a3)
{
}

void sub_1000E5B54(id a1, PKAppleBalanceAccountDetails *a2, id a3)
{
}

void sub_1000E5B5C(id a1, PKAppleBalanceAccountDetails *a2, id a3)
{
}

void sub_1000E5B64(id a1, PKAppleBalanceAccountDetails *a2, id a3)
{
  id v4 = a2;
  -[PKAppleBalanceAccountDetails setCardType:](v4, "setCardType:", [a3 integerValue]);
}

void sub_1000E5CDC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

id _SQLValueForIntegerArray(void *a1)
{
  if (a1) {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 componentsJoinedByString:@","]);
  }
  else {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  }
  return v1;
}

id _IntegerArrayForSQLValue(void *a1)
{
  if (a1)
  {
    uint64_t v1 = (void *)objc_claimAutoreleasedReturnValue([a1 componentsSeparatedByString:@","]);
    uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "pk_arrayByApplyingBlock:", &stru_100642E90));
  }

  else
  {
    uint64_t v2 = 0LL;
  }

  return v2;
}

id sub_1000E6034(id a1, NSString *a2)
{
  return +[NSNumber numberWithInteger:]( &OBJC_CLASS___NSNumber,  "numberWithInteger:",  -[NSString integerValue](a2, "integerValue"));
}

void sub_1000E6464(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKPassShareTimeSchedule);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) safelyAddObject:v7];
}

void sub_1000E65B8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1000E688C(id a1, PKPassShareTimeSchedule *a2, id a3)
{
  id v4 = a2;
  id v5 = _IntegerArrayForSQLValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPassShareTimeSchedule setHoursOfDay:](v4, "setHoursOfDay:", v6);
}

void sub_1000E68DC(id a1, PKPassShareTimeSchedule *a2, id a3)
{
  id v4 = a2;
  id v5 = _IntegerArrayForSQLValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPassShareTimeSchedule setDaysOfWeek:](v4, "setDaysOfWeek:", v6);
}

void sub_1000E692C(id a1, PKPassShareTimeSchedule *a2, id a3)
{
  id v4 = a2;
  id v5 = _IntegerArrayForSQLValue(a3);
  id v6 = (id)objc_claimAutoreleasedReturnValue(v5);
  -[PKPassShareTimeSchedule setDaysOfMonth:](v4, "setDaysOfMonth:", v6);
}

void sub_1000E697C(id a1, PKPassShareTimeSchedule *a2, id a3)
{
  id v4 = a2;
  -[PKPassShareTimeSchedule setInterval:](v4, "setInterval:", [a3 unsignedIntegerValue]);
}

void sub_1000E69C0(id a1, PKPassShareTimeSchedule *a2, id a3)
{
  id v4 = a2;
  -[PKPassShareTimeSchedule setFrequency:](v4, "setFrequency:", PKPassShareTimeScheduleFrequencyFromString(a3));
}

void sub_1000E72CC(id a1, PKAccountAdditionalPushTopics *a2, id a3)
{
}

void sub_1000E72D4(id a1, PKAccountAdditionalPushTopics *a2, id a3)
{
}

void sub_1000E72DC(id a1, PKAccountAdditionalPushTopics *a2, id a3)
{
}

void sub_1000E72E4(id a1, PKAccountAdditionalPushTopics *a2, id a3)
{
}

void sub_1000E72EC(id a1, PKAccountAdditionalPushTopics *a2, id a3)
{
}

void sub_1000E72F4(id a1, PKAccountAdditionalPushTopics *a2, id a3)
{
}

void sub_1000E72FC(id a1, PKAccountAdditionalPushTopics *a2, id a3)
{
}

void sub_1000E7304(id a1, PKAccountAdditionalPushTopics *a2, id a3)
{
}

void sub_1000E730C(id a1, PKAccountAdditionalPushTopics *a2, id a3)
{
}

void sub_1000E7314(id a1, PKAccountAdditionalPushTopics *a2, id a3)
{
}

void sub_1000E731C(id a1, PKAccountAdditionalPushTopics *a2, id a3)
{
}

void sub_1000E7324(id a1, PKAccountAdditionalPushTopics *a2, id a3)
{
}

void sub_1000E7408(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

uint64_t sub_1000E7900(uint64_t a1)
{
  uint64_t v2 = objc_autoreleasePoolPush();
  __int128 v13 = 0u;
  __int128 v14 = 0u;
  __int128 v15 = 0u;
  __int128 v16 = 0u;
  id v3 = *(id *)(a1 + 32);
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = *(void *)v14;
    while (2)
    {
      id v7 = 0LL;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8LL * (void)v7);
        id v9 = objc_alloc(*(Class *)(a1 + 56));
        id v10 = objc_msgSend( v9,  "initWithLocation:source:inDatabase:",  v8,  *(void *)(a1 + 40),  *(void *)(a1 + 48),  (void)v13);

        if (!v10)
        {
          uint64_t v11 = 0LL;
          goto LABEL_11;
        }

        id v7 = (char *)v7 + 1;
      }

      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }

  uint64_t v11 = 1LL;
LABEL_11:

  objc_autoreleasePoolPop(v2);
  return v11;
}

void sub_1000E7B58(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = objc_alloc_init(&OBJC_CLASS___PKLocation);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v7 withProperties:v6 values:a4];

  [*(id *)(a1 + 40) addObject:v7];
}

void sub_1000E80D4(id a1, PKLocation *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKLocation setLatitude:](v4, "setLatitude:");
}

void sub_1000E8114(id a1, PKLocation *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKLocation setLongitude:](v4, "setLongitude:");
}

void sub_1000E8154(id a1, PKLocation *a2, id a3)
{
  id v4 = a2;
  [a3 doubleValue];
  -[PKLocation setMaxDistance:](v4, "setMaxDistance:");
}

void sub_1000E8194(id a1, PKLocation *a2, id a3)
{
  if (a3)
  {
    id v4 = a2;
    [a3 doubleValue];
    -[PKLocation setAltitude:](v4, "setAltitude:");
  }

void sub_1000E81DC(id a1, PKLocation *a2, id a3)
{
}

void sub_1000E81E4(id a1, PKLocation *a2, id a3)
{
}

void sub_1000E8318(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v10 = objc_alloc_init(&OBJC_CLASS___PKPaymentTransactionToDeleteFromFinance);
  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:v10 withProperties:v7 values:a4];

  uint64_t v8 = *(void **)(a1 + 40);
  id v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithLongLong:](&OBJC_CLASS___NSNumber, "numberWithLongLong:", a2));
  [v8 setObject:v10 forKeyedSubscript:v9];
}

void sub_1000E8578(id a1, PKPaymentTransactionToDeleteFromFinance *a2, id a3)
{
}

void sub_1000E8580(id a1, PKPaymentTransactionToDeleteFromFinance *a2, id a3)
{
}

id sub_1000E8C94(uint64_t a1, uint64_t a2)
{
  return +[PassShareTimeSchedule deletePassShareTimeSchedulesForTimeConfigurationPID:inDatabase:]( &OBJC_CLASS___PassShareTimeSchedule,  "deletePassShareTimeSchedulesForTimeConfigurationPID:inDatabase:",  a2,  *(void *)(a1 + 32));
}

void sub_1000E8DD4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  id v9 = objc_alloc_init(&OBJC_CLASS___PKPassShareTimeConfiguration);
  [*(id *)(a1 + 56) applyPropertySetters:*(void *)(a1 + 32) toObject:v9 withProperties:v7 values:a4];

  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue( +[PassShareTimeSchedule passShareTimeSchedulesForTimeConfigurationPID:inDatabase:]( &OBJC_CLASS___PassShareTimeSchedule,  "passShareTimeSchedulesForTimeConfigurationPID:inDatabase:",  a2,  *(void *)(a1 + 40)));
  -[PKPassShareTimeConfiguration setSchedules:](v9, "setSchedules:", v8);

  [*(id *)(a1 + 48) safelyAddObject:v9];
}

void sub_1000E8FAC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1[4];
  id v7 = a2;
  objc_msgSend((id)objc_opt_class(v5, v6), "applyPropertySetters:toObject:withProperties:values:", a1[5], a1[6], v7, a3);
}

void sub_1000E9234(id a1, PKPassShareTimeConfiguration *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPassShareTimeConfiguration setStartDate:](v4, "setStartDate:", v5);
}

void sub_1000E9280(id a1, PKPassShareTimeConfiguration *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)_DateForSQLValue(a3);
  -[PKPassShareTimeConfiguration setExpirationDate:](v4, "setExpirationDate:", v5);
}

void sub_1000E92CC(id a1, PKPassShareTimeConfiguration *a2, id a3)
{
  id v4 = a2;
  -[PKPassShareTimeConfiguration setSupport:](v4, "setSupport:", PKPassShareTimeConfigurationSupportFromString(a3));
}

void sub_1000E95CC( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
}

uint64_t sub_1000E95F0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000E9600(uint64_t a1)
{
}

void sub_1000E9608(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  id v9 = a3;
  id v10 = objc_alloc_init(&OBJC_CLASS___PKPaymentBalanceReminder);
  uint64_t v11 = *(void *)(*(void *)(a1 + 40) + 8LL);
  uint64_t v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  [*(id *)(a1 + 48) applyPropertySetters:*(void *)(a1 + 32) toObject:*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) withProperties:v9 values:a4];
  *a6 = 1;
}

void sub_1000E98F8( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
}

void sub_1000E9918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _BYTE *a6)
{
  uint64_t v8 = -[SQLiteEntity initWithPersistentID:inDatabase:]( objc_alloc(&OBJC_CLASS___BalanceReminder),  "initWithPersistentID:inDatabase:",  a2,  *(void *)(a1 + 32));
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8LL);
  id v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  *a6 = 1;
}

id sub_1000E9F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return +[SQLiteEntity applyPropertySetters:toObject:withProperties:values:]( &OBJC_CLASS___BalanceReminder,  "applyPropertySetters:toObject:withProperties:values:",  *(void *)(a1 + 32),  *(void *)(a1 + 40),  a2,  a3);
}

void sub_1000EA0B4(id a1, PKPaymentBalanceReminder *a2, id a3)
{
  id v4 = a2;
  id v5 = (id)objc_claimAutoreleasedReturnValue(+[NSDecimalNumber decimalNumberWithString:](&OBJC_CLASS___NSDecimalNumber, "decimalNumberWithString:", a3));
  -[PKPaymentBalanceReminder setThreshold:](v4, "setThreshold:", v5);
}

void sub_1000EA118(id a1, PKPaymentBalanceReminder *a2, id a3)
{
  id v4 = a2;
  -[PKPaymentBalanceReminder setEnabled:](v4, "setEnabled:", [a3 BOOLValue]);
}

void sub_1000EA6B8(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) transactionSourceIdentifier]);
  id v3 = objc_alloc_init(&OBJC_CLASS___PKAsyncUnaryOperationComposer);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) uniqueID]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 48) + 24) applePayContainer]);
  v23[0] = 0LL;
  v23[1] = v23;
  v23[2] = 0x3032000000LL;
  v23[3] = sub_1000EA960;
  void v23[4] = sub_1000EA970;
  id v24 = 0LL;
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)id buf = 138543618;
    __int128 v26 = v4;
    __int16 v27 = 2112;
    id v28 = v2;
    _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "A payment application was added for pass with uniqueID %{public}@ and transactionSourceIdentifier %@",  buf,  0x16u);
  }

  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472LL;
  v19[2] = sub_1000EA978;
  v19[3] = &unk_1006433B0;
  void v19[4] = *(void *)(a1 + 48);
  id v20 = *(id *)(a1 + 32);
  id v21 = *(id *)(a1 + 40);
  uint64_t v22 = v23;
  [v3 addOperation:v19];
  uint64_t v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSNull null](&OBJC_CLASS___NSNull, "null"));
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472LL;
  v12[2] = sub_1000EABF8;
  void v12[3] = &unk_100643400;
  void v12[4] = *(void *)(a1 + 48);
  __int16 v17 = v23;
  id v9 = v5;
  id v13 = v9;
  id v10 = v4;
  id v14 = v10;
  char v18 = *(_BYTE *)(a1 + 72);
  id v15 = *(id *)(a1 + 56);
  id v16 = *(id *)(a1 + 64);
  id v11 = [v3 evaluateWithInput:v8 completion:v12];

  _Block_object_dispose(v23, 8);
}

void sub_1000EA940( _Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, char a29)
{
}

uint64_t sub_1000EA960(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0LL;
  return result;
}

void sub_1000EA970(uint64_t a1)
{
}

void sub_1000EA978(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  id v9 = *(void **)(a1 + 40);
  id v10 = *(dispatch_queue_s **)(v8 + 40);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472LL;
  id v15[2] = sub_1000EAA50;
  v15[3] = &unk_10063EE20;
  void v15[4] = v8;
  id v16 = v9;
  id v11 = *(id *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  id v19 = v7;
  uint64_t v20 = v12;
  id v17 = v11;
  id v18 = v6;
  id v13 = v6;
  id v14 = v7;
  dispatch_async(v10, v15);
}

void sub_1000EAA50(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472LL;
  v7[2] = sub_1000EAAFC;
  v7[3] = &unk_100643388;
  void v7[4] = v2;
  __int128 v6 = *(_OWORD *)(a1 + 64);
  id v5 = (id)v6;
  __int128 v9 = v6;
  id v8 = *(id *)(a1 + 56);
  objc_msgSend( v2,  "_queue_relevantTransactionSourceIdentifiersToSyncForPaymentApplication:onPaymentPass:completion:",  v3,  v4,  v7);
}

void sub_1000EAAFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EABBC;
  block[3] = &unk_100643360;
  id v9 = v3;
  __int128 v7 = *(_OWORD *)(a1 + 48);
  id v5 = (id)v7;
  __int128 v11 = v7;
  id v10 = *(id *)(a1 + 40);
  id v6 = v3;
  dispatch_async(v4, block);
}

uint64_t sub_1000EABBC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16LL))();
}

void sub_1000EABF8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  uint64_t v2 = *(void **)(a1 + 40);
  id v3 = *(dispatch_queue_s **)(*(void *)(a1 + 32) + 40LL);
  block[2] = sub_1000EACBC;
  block[3] = &unk_1006433D8;
  uint64_t v11 = *(void *)(a1 + 72);
  block[1] = 3221225472LL;
  id v6 = v2;
  id v7 = *(id *)(a1 + 48);
  char v12 = *(_BYTE *)(a1 + 80);
  id v8 = *(id *)(a1 + 56);
  id v4 = *(id *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 32);
  id v10 = v4;
  dispatch_async(v3, block);
}

id sub_1000EACBC(uint64_t a1)
{
  id v2 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) count];
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(*(void *)(*(void *)(a1 + 72) + 8LL) + 40LL);
      int v9 = 138412290;
      uint64_t v10 = v6;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDCloudStoreTransactionSourceController will sync transactions for transaction source identifiers %@",  (uint8_t *)&v9,  0xCu);
    }

    [*(id *)(a1 + 32) passProvisioningDidStartForPassUniqueID:*(void *)(a1 + 40) transactionSourceIdentifiers:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) ignoreExistingRecordHash:*(unsigned __int8 *)(a1 + 80) groupNameSuffix:*(void *)(a1 + 48) completion:*(void *)(a1 + 64)];
  }

  else
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a1 + 40);
      int v9 = 138543362;
      uint64_t v10 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDCloudStoreTransactionSourceController will not sync transactions for pass %{public}@ since there are no releva nt transaction source identifiers.",  (uint8_t *)&v9,  0xCu);
    }
  }

  return [*(id *)(a1 + 56) _updateScheduledActivityIfNeccessary];
}

id sub_1000EAE8C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
}

void sub_1000EAF3C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472LL;
  v3[2] = sub_1000EAFBC;
  v3[3] = &unk_100643478;
  void v3[4] = v1;
  id v4 = *(id *)(a1 + 48);
  objc_msgSend(v1, "_queue_performDailyTransactionSyncFromDate:returnRecords:formReport:completion:", v2, 1, 1, v3);
}

void sub_1000EAFBC(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = (void *)objc_claimAutoreleasedReturnValue([v8 transactionSyncReportItemsByAccountIdentifier]);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472LL;
  id v9[2] = sub_1000EB06C;
  v9[3] = &unk_100643450;
  void v9[4] = *(void *)(a1 + 32);
  [v6 enumerateKeysAndObjectsUsingBlock:v9];

  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    (*(void (**)(uint64_t, id, id))(v7 + 16))(v7, v8, v5);
  }
}

void sub_1000EB06C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v6 count])
  {
    id v7 = [[PKAccountTransactionSyncReport alloc] initWithItems:v6 accountIdentifier:v5];
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    int v9 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 138412290;
      id v11 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  OS_LOG_TYPE_DEFAULT,  "Sending account report to PDAccountManager: %@",  (uint8_t *)&v10,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 32) sendAccountReport:v7 trigger:1 completion:0];
  }
}

id sub_1000EB1F8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_queue_backgroundRecordChangeSyncWithCompletion:", *(void *)(a1 + 40));
}

void sub_1000EB2AC(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:*(void *)(a1 + 40)]);
  id v4 = (id)objc_claimAutoreleasedReturnValue([v2 paymentPass]);

  id v3 = (void *)objc_claimAutoreleasedReturnValue([v4 devicePrimaryPaymentApplication]);
  [*(id *)(a1 + 32) didAddPaymentApplication:v3 forPaymentPass:v4 groupNameSuffix:0 ignoreExistingRecordHash:1 completion:*(void *)(a1 + 48)];
}

void sub_1000EB3A4(uint64_t a1)
{
  uint64_t v2 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) transactionSourceIdentifier]);
  id v3 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 40) associatedPassUniqueID]);
  id v4 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 8) passWithUniqueIdentifier:v3]);
  id v5 = (void *)objc_claimAutoreleasedReturnValue([v4 paymentPass]);

  if (v5)
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v7 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)id buf = 138543362;
      id v17 = v3;
      _os_log_impl( (void *)&_mh_execute_header,  v7,  OS_LOG_TYPE_DEFAULT,  "An account was added for pass with uniqueID %{public}@ while the pass was already here, trigger fetch to recover account events",  buf,  0xCu);
    }

    id v8 = *(void **)(a1 + 32);
    int v9 = (void *)objc_claimAutoreleasedReturnValue([v5 devicePrimaryPaymentApplication]);
    [v8 didAddPaymentApplication:v9 forPaymentPass:v5 groupNameSuffix:PKCloudStoreOperationGroupSuffixAccountAdded ignoreExistingRecordHash:0 completion:0];
  }

  if (v2)
  {
    int v10 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(*(void *)(a1 + 32) + 24) applePayContainer]);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472LL;
    v12[2] = sub_1000EB580;
    void v12[3] = &unk_10063A6D8;
    id v13 = *(id *)(a1 + 40);
    id v14 = v2;
    id v15 = v10;
    id v11 = v10;
    [v11 canSyncTransactionFromCloudKitForTransactionSourceIdentifier:v14 completion:v12];
  }
}

void sub_1000EB580(uint64_t a1, char a2)
{
  if ((a2 & 1) != 0)
  {
    id v3 = *(void **)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 40);
    int v9 = @"account";
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue( +[NSDictionary dictionaryWithObjects:forKeys:count:]( &OBJC_CLASS___NSDictionary,  "dictionaryWithObjects:forKeys:count:",  &v9,  &v8,  1LL));
    [v3 passProvisioningDidStartForPassUniqueID:0 transactionSourceIdentifiers:v4 ignoreExistingRecordHash:0 groupNameSuffix:PKCloudStoreOperationGroupSuffixAccountAdded completion:0];
  }

  else
  {
    uint64_t Object = PKLogFacilityTypeGetObject(9LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      id v6 = (void *)objc_claimAutoreleasedReturnValue([*(id *)(a1 + 32) accountIdentifier]);
      uint64_t v7 = *(void *)(a1 + 40);
      *(_DWORD *)id buf = 138412546;
      id v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "PDCloudStoreTransactionSourceController will not sync transaction from CloudKit for account identifier %@ and tr ansactionSourceIdentifier %@",  buf,  0x16u);
    }
  }
}

id sub_1000EB704(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
}

id sub_1000EB764(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
}

id sub_1000EB7C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
}

void sub_1000EBB64(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSDate date](&OBJC_CLASS___NSDate, "date"));
  uint64_t Object = PKLogFacilityTypeGetObject(9LL);
  id v6 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)id buf = 138543362;
    uint64_t v13 = v4;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  OS_LOG_TYPE_DEFAULT,  "Setting last transaction record sync date to %{public}@",  buf,  0xCu);
  }

  PDSetCloudStoreTransactionSourceControllerLastSync(v4);
  uint64_t v7 = (void *)objc_claimAutoreleasedReturnValue([v3 transactionSyncReportItemsByAccountIdentifier]);

  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472LL;
  id v11[2] = sub_1000EBCCC;
  void v11[3] = &unk_100643450;
  void v11[4] = *(void *)(a1 + 32);
  [v7 enumerateKeysAndObjectsUsingBlock:v11];

  uint64_t v8 = *(void *)(a1 + 32);
  int v9 = *(dispatch_queue_s **)(v8 + 40);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472LL;
  v10[2] = sub_1000EBE70;
  v10[3] = &unk_100639300;
  void v10[4] = v8;
  dispatch_async(v9, v10);
}

void sub_1000EBCCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(dispatch_queue_s **)(v7 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EBD7C;
  block[3] = &unk_100639350;
  void block[4] = v7;
  id v12 = v6;
  id v13 = v5;
  id v9 = v5;
  id v10 = v6;
  dispatch_async(v8, block);
}

void sub_1000EBD7C(uint64_t a1)
{
  *(_BYTE *)(*(void *)(a1 + 32) + 56LL) = 0;
  if ([*(id *)(a1 + 40) count])
  {
    id v2 = [[PKAccountTransactionSyncReport alloc] initWithItems:*(void *)(a1 + 40) accountIdentifier:*(void *)(a1 + 48)];
    uint64_t Object = PKLogFacilityTypeGetObject(14LL);
    id v4 = (os_log_s *)objc_claimAutoreleasedReturnValue(Object);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      id v6 = v2;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  OS_LOG_TYPE_DEFAULT,  "Sending account report to PDAccountManager: %@",  (uint8_t *)&v5,  0xCu);
    }

    [*(id *)(*(void *)(a1 + 32) + 32) sendAccountReport:v2 trigger:3 completion:0];
  }

id sub_1000EBE70(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
}

void sub_1000EBE78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(dispatch_queue_s **)(v1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472LL;
  block[2] = sub_1000EBED0;
  block[3] = &unk_100639300;
  void block[4] = v1;
  dispatch_async(v2, block);
}

id sub_1000EBED0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateScheduledActivityIfNeccessary];
}

void sub_1000EC14C(_Unwind_Exception *a1)
{
}

uint64_t sub_1000EC16C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0LL, 0LL);
  }
  return result;
}

void sub_1000EC188(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 40);
  id v10 = *(dispatch_queue_s **)(v8 + 40);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472LL;
  v13[2] = sub_1000EC238;
  v13[3] = &unk_1006434A0;
  id v15 = v7;
  uint64_t v16 = v9;
  void v13[4] = v8;
  id v14 = v6;
  id v11 = v6;
  id v12 = v7;
  dispatch_async(v10, v13);
}